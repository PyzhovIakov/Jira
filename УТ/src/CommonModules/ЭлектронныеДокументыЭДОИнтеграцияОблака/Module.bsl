
#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрактМенеджераДействийЭДО

// Параметры:
//  МенеджерыДействийЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО) Экспорт
	
	ИспользоватьИнтеграциюОблачногоЭДО = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюОблачногоЭДО");
	
	Если ИспользоватьИнтеграциюОблачногоЭДО Тогда
		МенеджерыДействийЭДО.Вставить(
			ЭлектронныеДокументыЭДОИнтеграцияОблакаКлиентСервер.ИдентификаторМенеджераДействийЭДО(),
			ЭлектронныеДокументыЭДОИнтеграцияОблака);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // КонтрактМенеджераДействийЭДО

#Область ОбработкаДействийПоЭДО

// Выполняет указанные действия над переданными объектами в облачном ЭДО.
// 
// Параметры:
//  ПараметрыДействийЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция ВыполнитьДействияЭДО(ПараметрыДействийЭДО, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатВыполненияДействий = НовыйРезультатВыполненияДействийЭДО();
	
	Если КонтекстДиагностики <> Неопределено Тогда
		РезультатВыполненияДействий.КонтекстДиагностики = КонтекстДиагностики;
	КонецЕсли;
	
	ОбъектыОперацийПоУчетнымЗаписям = ОбъектыОперацийПоУчетнымЗаписямСервиса(ПараметрыДействийЭДО.ОбъектыДействий,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(ОбъектыОперацийПоУчетнымЗаписям) Тогда
		Возврат РезультатВыполненияДействий;
	КонецЕсли;
	
	РезультатыДействий = РезультатВыполненияДействий.РезультатыДействий;
	КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	
	ЗаполнитьОтпечаткиСертификатов(ПараметрыДействийЭДО, КонтекстДиагностики);
	
	ИдентификаторыЭДОУчетныхЗаписейСервиса = Новый Массив;
	Для каждого ОбъектыОперацииПоУчетнойЗаписи Из ОбъектыОперацийПоУчетнымЗаписям Цикл
		ИдентификаторыЭДО = ОбъектыОперацииПоУчетнойЗаписи.Значение.ИдентификаторыЭДО;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыЭДОУчетныхЗаписейСервиса, ИдентификаторыЭДО);
	КонецЦикла;
	
	ОтпечаткиСертификатовПоИдентификаторамЭДО = ОтпечаткиДействующихСертификатовПоИдентификаторамЭДО(
		ПараметрыДействийЭДО.ОтпечаткиСертификатов, ИдентификаторыЭДОУчетныхЗаписейСервиса);
	
	Для Каждого ОбъектыОперацииПоУчетнойЗаписи Из ОбъектыОперацийПоУчетнымЗаписям Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ОбъектыОперацииПоУчетнойЗаписи.Ключ;
		ОбъектыОперации = ОбъектыОперацииПоУчетнойЗаписи.Значение;
		
		ПараметрыОперации = НовыеПараметрыОперацииПоДействиямЭДО();
		ПараметрыОперации.ОбъектыОперации = ОбъектыОперации;
		ПараметрыОперации.НаборДействий = ПараметрыДействийЭДО.НаборДействий;
		ПараметрыОперации.ОбработатьТолькоИзвещения = ПараметрыДействийЭДО.ОбработатьТолькоИзвещения;
		ПараметрыОперации.ДанныеРучногоФормированияТитула = ПараметрыДействийЭДО.ДанныеРучногоФормированияТитула;
		ПараметрыОперации.ДополнительныеПараметрыДействий = ПараметрыДействийЭДО.ДополнительныеПараметрыДействий;
		ПараметрыОперации.НастройкиОбъектов = ПараметрыДействийЭДО.НастройкиОбъектов;
		
		ПараметрыОперации.ОтпечаткиСертификатов = ОтпечаткиСертификатовИдентификаторовЭДО(
			ОбъектыОперации.ИдентификаторыЭДО, ОтпечаткиСертификатовПоИдентификаторамЭДО);
		
		ПакетМетодов = ПакетМетодовОперацииПоДействиямЭДО(ПараметрыОперации, КонтекстДиагностики);
		
		РезультатДействийПоУчетнойЗаписи = ВыполнитьДействияПоУчетнойЗаписи(УчетнаяЗаписьОблачногоЭДО, ПакетМетодов,
			КонтекстДиагностики);
		
		ЗаполнитьОбработанныеУчетныеЗаписиЭДО(РезультатДействийПоУчетнойЗаписи, ОбъектыОперации.ИдентификаторыЭДО);
		
		РезультатыДействий.Вставить(УчетнаяЗаписьОблачногоЭДО, РезультатДействийПоУчетнойЗаписи);
		
	КонецЦикла;
	
	Возврат РезультатВыполненияДействий;
	
КонецФункции

// Параметры:
//  РезультатВыполненияДействий - см. ВыполнитьДействияЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция РезультатВыполненияДействийЭДОДляКлиента(РезультатВыполненияДействий) Экспорт
	Возврат РезультатВыполненияДействий;
КонецФункции

// Параметры:
//  ПараметрыПродолженияПоУчетнымЗаписям - см. ЭлектронныеДокументыЭДОИнтеграцияОблакаКлиент.НовыеПараметрыПродолженияВыполненияДействийЭДО
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОИнтеграцияОблакаКлиент.НовыеПараметрыПродолженияВыполненияДействийЭДО
Функция ПараметрыПродолженияДействийЭДОВФоне(ПараметрыПродолженияПоУчетнымЗаписям) Экспорт
	Возврат ПараметрыПродолженияПоУчетнымЗаписям;
КонецФункции

// Параметры:
//  ПараметрыПродолженияПоУчетнымЗаписям - Соответствие Из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - См. ПараметрыПродолженияДействийЭДОВФоне
//  ПараметрыВыполнения - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияДействийЭДО
Функция ПродолжитьВыполнениеДействийЭДОПослеОбработкиРезультатов(ПараметрыПродолженияПоУчетнымЗаписям, ПараметрыВыполнения) Экспорт
	
	РезультатВыполненияДействий = НовыйРезультатВыполненияДействийЭДО();
	
	Если Не ЗначениеЗаполнено(ПараметрыПродолженияПоУчетнымЗаписям) Тогда
		Возврат РезультатВыполненияДействий;
	КонецЕсли;
	
	РезультатыДействий = РезультатВыполненияДействий.РезультатыДействий;
	КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	
	ОбъектыОперацийПоУчетнымЗаписям = ОбъектыОперацийПоУчетнымЗаписямСервиса(ПараметрыВыполнения.ОбъектыДействий,
		КонтекстДиагностики);
	
	ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики);
	
	ИдентификаторыЭДОУчетныхЗаписейСервиса = Новый Массив;
	Для каждого ОбъектыОперацииПоУчетнойЗаписи Из ОбъектыОперацийПоУчетнымЗаписям Цикл
		ИдентификаторыЭДО = ОбъектыОперацииПоУчетнойЗаписи.Значение.ИдентификаторыЭДО;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыЭДОУчетныхЗаписейСервиса, ИдентификаторыЭДО);
	КонецЦикла;
	
	ОтпечаткиСертификатовПоИдентификаторамЭДО = ОтпечаткиДействующихСертификатовПоИдентификаторамЭДО(
		ПараметрыВыполнения.ОтпечаткиСертификатов, ИдентификаторыЭДОУчетныхЗаписейСервиса);
	
	Для Каждого ПараметрыПродолженияПоУчетнойЗаписи Из ПараметрыПродолженияПоУчетнымЗаписям Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ПараметрыПродолженияПоУчетнойЗаписи.Ключ;
		ПараметрыПродолжения = ПараметрыПродолженияПоУчетнойЗаписи.Значение;
		
		ПакетМетодов = ПакетМетодовОперацииПоДобавлениюПодписейФайлов(УчетнаяЗаписьОблачногоЭДО,
			ПараметрыПродолжения.ПодписиДанных);
		
		ПараметрыОперации = НовыеПараметрыОперацииПоДействиямЭДО();
		ПараметрыОперации.ОбъектыОперации = ОбъектыОперацийПоУчетнымЗаписям[УчетнаяЗаписьОблачногоЭДО];
		ПараметрыОперации.НаборДействий = ПараметрыПродолжения.НаборДействий;
		ПараметрыОперации.МаркерыАвторизации = УчетныеЗаписиЭДОИнтеграцияОблака.МаркерыАвторизацииИзРасшифрованныхМаркеров(
			ПараметрыПродолжения.РасшифрованныеМаркеры);
		
		ПараметрыОперации.ОтпечаткиСертификатов = ОтпечаткиСертификатовИдентификаторовЭДО(
			ПараметрыОперации.ОбъектыОперации.ИдентификаторыЭДО, ОтпечаткиСертификатовПоИдентификаторамЭДО);
		
		ПакетМетодовПродолжения = ПакетМетодовОперацииПоДействиямЭДО(ПараметрыОперации, КонтекстДиагностики);
		
		Если ЗначениеЗаполнено(ПакетМетодовПродолжения) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетМетодов, ПакетМетодовПродолжения);
		КонецЕсли;
		
		РезультатДействийПоУчетнойЗаписи = ВыполнитьДействияПоУчетнойЗаписи(УчетнаяЗаписьОблачногоЭДО, ПакетМетодов,
			КонтекстДиагностики);
		
		РезультатыДействий.Вставить(УчетнаяЗаписьОблачногоЭДО, РезультатДействийПоУчетнойЗаписи);
		
	КонецЦикла;
	
	Возврат РезультатВыполненияДействий;
	
КонецФункции

// Параметры:
//  РезультатВыполненияДействий - см. НовыйРезультатВыполненияДействийЭДО
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовыйРезультатОбработкиВыполненияДействийПоЭДО
Функция ОбработатьРезультатВыполненияДействийЭДО(РезультатВыполненияДействий) Экспорт
	РезультатОбработки = ЭлектронныеДокументыЭДО.НовыйРезультатОбработкиВыполненияДействийПоЭДО();
	РезультатОбработки.КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	Для Каждого РезультатДействийПоУчетнойЗаписи Из РезультатВыполненияДействий.РезультатыДействий Цикл
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		ЭлектронныеДокументыЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(
			РезультатОбработки.ИтогВыполненияДействий, РезультатДействий.Итог);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатОбработки.ОшибкиФормирования, РезультатДействий.ОшибкиФормирования);
	КонецЦикла;
	Возврат РезультатОбработки;
КонецФункции

#КонецОбласти

#Область ДанныеДокумента

// Параметры:
//  ЭлектронныйДокумент - См. ОбменСКонтрагентами.ДанныеЭлектронногоДокумента.ЭлектронныйДокумент
// 
// Возвращаемое значение:
//  См. ОбменСКонтрагентами.ДанныеЭлектронногоДокумента
Функция ДанныеЭлектронногоДокумента(ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеОтправителя", Неопределено);
	Результат.Вставить("ДанныеПолучателя", Неопределено);
	
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ИдентификаторДокумента, ИдентификаторОрганизации");
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		СвойстваДокумента.ИдентификаторОрганизации);
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"УчетныеДанныеДокумента", СвойстваДокумента.ИдентификаторДокумента);
	
	УчетныеДанныеДокумента = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
		ПараметрыВыполнения, ОписаниеМетода); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.УчетныеДанныеДокумента
	
	Если Не ЗначениеЗаполнено(УчетныеДанныеДокумента) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеОтправителя = УчетныеДанныеДокумента.ДанныеОтправителя;
	Если ЗначениеЗаполнено(ДанныеОтправителя) Тогда
		ДеревоДанных = ДеревоУчетныхДанныхИзСтруктуры(ДанныеОтправителя.Данные, ДанныеОтправителя.ФорматРазбора);
		РезультатДанныеОтправителя = Новый Структура;
		РезультатДанныеОтправителя.Вставить("Содержание", ДеревоДанных);
		РезультатДанныеОтправителя.Вставить("Формат", ДанныеОтправителя.ФорматТитула);
		РезультатДанныеОтправителя.Вставить("ФорматРазбора", ДанныеОтправителя.ФорматРазбора);
		Результат.ДанныеОтправителя = РезультатДанныеОтправителя;
	КонецЕсли;
	
	ДанныеПолучателя = УчетныеДанныеДокумента.ДанныеПолучателя;
	Если ЗначениеЗаполнено(ДанныеПолучателя) Тогда
		ДеревоДанных = ДеревоУчетныхДанныхИзСтруктуры(ДанныеПолучателя.Данные, ДанныеПолучателя.ФорматРазбора);
		РезультатДанныеПолучателя = Новый Структура;
		РезультатДанныеПолучателя.Вставить("Содержание", ДеревоДанных);
		РезультатДанныеПолучателя.Вставить("Формат", ДанныеПолучателя.ФорматТитула);
		РезультатДанныеПолучателя.Вставить("ФорматРазбора", ДанныеПолучателя.ФорматРазбора);
		Результат.ДанныеПолучателя = РезультатДанныеПолучателя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ОбновитьПолныеДанныеДокументовЭДО(ЭлектронныеДокументы) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ПараметрыОбновленийДокументовПоУчетнымЗаписям =
		ПараметрыОбновленийПолныхДанныхДокументовПоУчетнымЗаписямОблачногоЭДО(
			ЭлектронныеДокументы, КонтекстДиагностики);
	
	Для Каждого ПараметрыОбновленийДокументовПоУчетнойЗаписи Из ПараметрыОбновленийДокументовПоУчетнымЗаписям Цикл
		УчетнаяЗаписьОблачногоЭДО = ПараметрыОбновленийДокументовПоУчетнойЗаписи.Ключ;
		ПараметрыОбновленийДокументов = ПараметрыОбновленийДокументовПоУчетнойЗаписи.Значение;
		Для Каждого ПараметрыОбновленияДокумента Из ПараметрыОбновленийДокументов Цикл
			ПолучитьПолныеДанныеДокументаПоСостояниюСинхронизации(
				УчетнаяЗаписьОблачногоЭДО,
				ПараметрыОбновленияДокумента.ЭлектронныйДокумент,
				ПараметрыОбновленияДокумента.СостояниеСинхронизации);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Подписи

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.НовыйРезультатПроверкиПодписей
Функция ПроверитьПодписиДокумента(ЭлектронныйДокумент, КонтекстДиагностики) Экспорт
	
	Результат = ЭлектронныеДокументыЭДО.НовыйРезультатПроверкиПодписей();
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ИдентификаторОрганизации, ИдентификаторДокумента");
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		РеквизитыДокумента.ИдентификаторОрганизации);
	
	Попытка
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	Исключение
		ВидОперации = ВидОперацииПроверкаПодписейДокумента();
		ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(УчетнаяЗаписьОблачногоЭДО);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ДополнительныеПараметрыОшибки = Новый Структура("СсылкаНаОбъект", УчетнаяЗаписьОблачногоЭДО);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки,
			ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		Возврат Результат;
	КонецПопытки;
	
	ИдентификаторДокумента = РеквизитыДокумента.ИдентификаторДокумента;
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПроверитьПодписиДокументовЭДО", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента));
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	СостояниеСинхронизации = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.СостояниеДанныхДокумента(
		РеквизитыДокумента.ИдентификаторОрганизации, РеквизитыДокумента.ИдентификаторДокумента);
	ОписаниеМетода = ОписаниеМетодаДанныеПолнойСинхронизацииДокументаЭДО(СостояниеСинхронизации);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатыПакета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатыПроверки = РезультатыПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПроверитьПодписиДокументовЭДО
	
	Если Не ЗначениеЗаполнено(РезультатыПроверки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСинхронизацииВФорматеСервиса = РезультатыПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеПолнойСинхронизацииДокументаЭДО
	ЗагрузитьПолныеДанныеДокументаЭДО(ДанныеСинхронизацииВФорматеСервиса, ЭлектронныйДокумент, СостояниеСинхронизации);
	
	Ошибка = РезультатыПроверки[0].Ошибка;
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ВидОперации = ВидОперацииПроверкаПодписейДокумента();
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, Ошибка,,
			УчетнаяЗаписьОблачногоЭДО);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	ФайлыСообщений = ЭлектронныеДокументыЭДО.ФайлыДляПроверкиПодписейДокумента(ЭлектронныйДокумент);
	ПроверенныеПодписи = Результат.ПроверенныеПодписи;
	Для Каждого ФайлСообщения Из ФайлыСообщений Цикл
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлСообщения);
		ПроверенныеПодписи.Вставить(ФайлСообщения, УстановленныеПодписи);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийДокумента

// Параметры:
//  Объект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  Отказ - Булево - признак отказа от удаления электронного документа.
Процедура ПередУдалениемДокумента(Объект, Отказ) Экспорт
	
	РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.Удалить(
		Объект.ИдентификаторОрганизации,
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО,
		Объект.ИдентификаторДокумента);
	
	РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.Удалить(
		Объект.ИдентификаторОрганизации,
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО,
		Объект.ИдентификаторДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаДействийПоЭДО

#Область Общее

// Возвращаемое значение:
//  Структура:
//  * АсинхронныеОперации - Массив из см. ИнтеграцияОблачногоЭДО.НоваяАсинхроннаяОперация
//  * РезультатыДействий  - см. НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатВыполненияДействийЭДО()
	Результат = Новый Структура;
	Результат.Вставить("АсинхронныеОперации", Новый Массив);
	Результат.Вставить("РезультатыДействий", НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - См. СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - См. НовыйРезультатДействийЭДО
Функция НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Итог                 - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  * ОшибкиФормирования   - Массив из см. НовоеОписаниеОшибкиФормирования
//  * ДанныеДляПодписания  - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Значение - Булево
//  * ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Функция НовыйРезультатДействийЭДО() Экспорт
	РезультатДействий = Новый Структура;
	РезультатДействий.Вставить("Итог", ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО());
	РезультатДействий.Вставить("ОшибкиФормирования", Новый Массив);
	РезультатДействий.Вставить("ДанныеДляПодписания", Новый Массив);
	РезультатДействий.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	РезультатДействий.Вставить("ДокументыДляОбработкиИзвещений", Новый Соответствие);
	РезультатДействий.Вставить("ПакетМетодовПовторно", ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса());
	Возврат РезультатДействий;
КонецФункции

// Параметры:
//  ОбъектыДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - см. СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - см. НовыеОбъектыОперацииПоДействиямЭДО
Функция ОбъектыОперацийПоУчетнымЗаписямСервиса(ОбъектыДействий, КонтекстДиагностики)
	
	Результат = Новый Соответствие; // См. ОбъектыОперацийПоУчетнымЗаписямСервиса
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ОбъектыУчета) Тогда
		
		АктуальныеДокументыОбъектовУчета = ИнтеграцияЭДО.АктуальныеЭлектронныеДокументы(ОбъектыДействий.ОбъектыУчета);
		
		ЭлектронныеДокументы = АктуальныеДокументыОбъектовУчета.ВыгрузитьКолонку("ЭлектронныйДокумент");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеДокументы, ОбъектыДействий.ЭлектронныеДокументы);
		
		ОбъектыУчета = АктуальныеДокументыОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета");
		ОбъектыУчета = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыДействий.ОбъектыУчета, ОбъектыУчета);
		
	Иначе
		
		ЭлектронныеДокументы = ОбъектыДействий.ЭлектронныеДокументы;
		ОбъектыУчета = ОбъектыДействий.ОбъектыУчета;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыДействий.ПакетыДокументов) Тогда
		ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
		ПакетыДокументовОблачногоЭДО = ПакетыДокументовЭДО.ОтобратьПакетыДокументовПоПризнакуОблачногоЭДО(
			ОбъектыДействий.ПакетыДокументов, Истина);
		ДокументыПакетов = ПакетыДокументовЭДО.ДокументыОднородныхПакетов(
			ПакетыДокументовОблачногоЭДО, КонтекстДиагностики, ВидОперации);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеДокументы, ДокументыПакетов);
	КонецЕсли;
	
	ЗаполнитьОбъектыОперацийПоОбъектамУчета(Результат, ОбъектыУчета);
	
	ЗаполнитьОбъектыОперацийПоДокументамЭДО(Результат, ЭлектронныеДокументы, КонтекстДиагностики);
	
	ЗаполнитьОбъектыОперацийПоСообщениямЭДО(Результат, ОбъектыДействий.Сообщения, КонтекстДиагностики);
	
	ЗаполнитьОбъектыОперацийПоУчетнымЗаписямЭДО(Результат, ОбъектыДействий.ИдентификаторыОрганизаций);
	
	ЗаполнитьОбъектыОперацийПоОписаниямДокументов(Результат, ОбъектыДействий.ОписанияДокументовПоФайлам);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОписанияДокументовПоФайлам - Массив из см. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
//  * ИдентификаторыДокументовЭДО - Массив из Строка
//  * ОписанияОбъектовУчета - см. ИнтеграцияЭДО.ОписанияОбъектовУчета
//  * МеткиВремениТиповСинхронизации - Соответствие из КлючИЗначение:
//  ** Ключ - ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
//  ** Значение - см. МеткиВремениИдентификаторовЭДО
//  * ИдентификаторыЭДО - Массив из Строка
Функция НовыеОбъектыОперацииПоДействиямЭДО()
	ОбъектыОперации = Новый Структура;
	ОбъектыОперации.Вставить("ОписанияДокументовПоФайлам", Новый Массив);
	ОбъектыОперации.Вставить("ИдентификаторыДокументовЭДО", Новый Массив);
	ОбъектыОперации.Вставить("ОписанияОбъектовУчета", Новый ТаблицаЗначений);
	ОбъектыОперации.Вставить("МеткиВремениТиповСинхронизации", Новый Соответствие);
	ОбъектыОперации.Вставить("ИдентификаторыЭДО", Новый Массив);
	Возврат ОбъектыОперации;
КонецФункции

// Параметры:
//  ОписаниеДокументаЭДО - См. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументЭДО(ОписаниеДокументаЭДО)
	
	НовыйДокумент = Неопределено;
	
	ЭтоВходящийЭДО = ОписаниеДокументаЭДО.ЭтоВходящийЭДО;
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокумента = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокумента);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ОписаниеДокументаЭДО.Идентификатор);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = Неопределено; // Неопределено,ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
	
		НайденныйДокумент = НайтиДокументПоИдентификаторуОблачногоЭДО(ОписаниеДокументаЭДО.Идентификатор, ЭтоВходящийЭДО);
		
		ЕстьИзмененияДокументаЭДО = Истина;
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
			ЕстьИзмененияДокументаЭДО = ЕстьИзмененияДокументаЭДО(ДокументОбъект, ОписаниеДокументаЭДО);
		ИначеЕсли ЭтоВходящийЭДО Тогда
			ДокументОбъект = Документы.ЭлектронныйДокументВходящийЭДО.СоздатьДокумент(); 
		Иначе
			ДокументОбъект = Документы.ЭлектронныйДокументИсходящийЭДО.СоздатьДокумент();
		КонецЕсли;
		
		Если ЕстьИзмененияДокументаЭДО Тогда
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.ЭтоОблачныйЭДО = Истина;
			ДокументОбъект.ИдентификаторДокумента = ОписаниеДокументаЭДО.Идентификатор;
			ДокументОбъект.ФорматОсновногоТитула = ОписаниеДокументаЭДО.Формат;
			ДокументОбъект.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
			ДокументОбъект.Организация = ОписаниеДокументаЭДО.Организация;
			ДокументОбъект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
			ДокументОбъект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
			ДокументОбъект.НомерДокумента = ОписаниеДокументаЭДО.Номер;
			ДокументОбъект.ДатаДокумента = ОписаниеДокументаЭДО.Дата;
			ДокументОбъект.ДатаАннулирования = ОписаниеДокументаЭДО.ДатаАннулирования;
			ДокументОбъект.ДатаПодписания = ОписаниеДокументаЭДО.ДатаПодписания;
			ДокументОбъект.СуммаДокумента = ОписаниеДокументаЭДО.Сумма;
			ДокументОбъект.СпособОбмена = ОписаниеДокументаЭДО.СпособОбмена;
			ДокументОбъект.ТипРегламента = ОписаниеДокументаЭДО.ТипРегламента;
			ДокументОбъект.ТребуетсяИзвещение = ОписаниеДокументаЭДО.ТребуетсяИзвещение;
			ДокументОбъект.ТребуетсяПодтверждение = ОписаниеДокументаЭДО.ТребуетсяПодтверждение;
			ДокументОбъект.ИдентификаторОрганизации = ОписаниеДокументаЭДО.ИдентификаторОрганизации;
			ДокументОбъект.ИдентификаторКонтрагента = ОписаниеДокументаЭДО.ИдентификаторКонтрагента;
			ДокументОбъект.ИдентификаторДокументооборота = ОписаниеДокументаЭДО.ИдентификаторДокументооборота;
			ДокументОбъект.ТребуетсяИзвещение = ОписаниеДокументаЭДО.ТребуетсяИзвещение;
			Если ЭтоВходящийЭДО Тогда
				ДокументОбъект.ДатаПолучения = ОписаниеДокументаЭДО.ДатаОтправкиПолучения;
			Иначе
				ДокументОбъект.ДатаОтправки = ОписаниеДокументаЭДО.ДатаОтправкиПолучения;
				ДокументОбъект.МаршрутПодписания = ОписаниеДокументаЭДО.МаршрутПодписания;
			КонецЕсли;
			
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ДатаИзмененияСостояния = ДокументОбъект.Дата;
		Если ЗначениеЗаполнено(ОписаниеДокументаЭДО.ДатаИзмененияСостояния) Тогда
			ДатаИзмененияСостояния = ОписаниеДокументаЭДО.ДатаИзмененияСостояния;
		КонецЕсли;
		
		ОписаниеСостоянияЭДО = НовоеОписаниеСостоянияДокументаЭДО();
		ОписаниеСостоянияЭДО.ЭлектронныйДокумент = ДокументОбъект.Ссылка;
		ОписаниеСостоянияЭДО.Состояние = ОписаниеДокументаЭДО.Состояние;
		ОписаниеСостоянияЭДО.СостояниеДополнение = ОписаниеДокументаЭДО.СостояниеДополнение;
		ОписаниеСостоянияЭДО.ДатаИзменения = ДатаИзмененияСостояния;
		ОписаниеСостоянияЭДО.Комментарий = ОписаниеДокументаЭДО.КомментарийСостояния;
		
		ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияЭДО);
		
		Если ЗначениеЗаполнено(ОписаниеДокументаЭДО.ОбъектыУчета) Тогда
			Для Каждого ОбъектУчета Из ОписаниеДокументаЭДО.ОбъектыУчета Цикл
				ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДокументОбъект.Ссылка, ОбъектУчета);
			КонецЦикла;
		КонецЕсли;
		
		СвойстваДокумента = Новый Структура("ИдентификаторОрганизации, ИдентификаторДокумента",
			ДокументОбъект.ИдентификаторОрганизации, ДокументОбъект.ИдентификаторДокумента);
		
		ПакетыДокументовЭДОИнтеграцияОблака.ОбновитьСоставПакета(ОписаниеДокументаЭДО.ИдентификаторПакета,
			ДокументОбъект.Ссылка, СвойстваДокумента);
		
		Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
			УстановитьКонтрольОтраженияВУчете(ДокументОбъект.Ссылка, ОписаниеДокументаЭДО);
		КонецЕсли;
		
		НовыйДокумент = ДокументОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции

// Параметры:
//  ОписаниеДокументаЭДО - См. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
// 
// Возвращаемое значение:
//  - Неопределено
//  - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументЭДОПоФайлам(ОписаниеДокументаЭДО)
	
	НовыйДокумент = Неопределено;
	
	ЭтоВходящийЭДО = ОписаниеДокументаЭДО.ЭтоВходящийЭДО;
	
	Блокировка = Новый БлокировкаДанных;
	ИмяТаблицыДокумента = ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
	ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыДокумента);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторДокумента", ОписаниеДокументаЭДО.Идентификатор);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = Неопределено; // Неопределено,ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
	
		НайденныйДокумент = НайтиДокументПоИдентификаторуОблачногоЭДО(ОписаниеДокументаЭДО.Идентификатор, ЭтоВходящийЭДО);
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
		ИначеЕсли ЭтоВходящийЭДО Тогда
			ДокументОбъект = Документы.ЭлектронныйДокументВходящийЭДО.СоздатьДокумент(); 
		Иначе
			ДокументОбъект = Документы.ЭлектронныйДокументИсходящийЭДО.СоздатьДокумент();
		КонецЕсли;
		
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.ЭтоОблачныйЭДО = Истина;
		ДокументОбъект.ИдентификаторДокумента = ОписаниеДокументаЭДО.Идентификатор;
		ДокументОбъект.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
		ДокументОбъект.Организация = ОписаниеДокументаЭДО.Организация;
		ДокументОбъект.Контрагент = ОписаниеДокументаЭДО.Контрагент;
		ДокументОбъект.ДоговорКонтрагента = ОписаниеДокументаЭДО.Договор;
		ДокументОбъект.НомерДокумента = ОписаниеДокументаЭДО.Номер;
		ДокументОбъект.ДатаДокумента = ОписаниеДокументаЭДО.Дата;
		ДокументОбъект.СуммаДокумента = ОписаниеДокументаЭДО.Сумма;
		ДокументОбъект.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный;
		
		КлючНастройкиОтправки = НастройкиЭДО.НовоеОписаниеПолейКлючаНастройкиОтправки();
		КлючНастройкиОтправки.Отправитель = ОписаниеДокументаЭДО.Организация;
		КлючНастройкиОтправки.Получатель = ОписаниеДокументаЭДО.Контрагент;
		КлючНастройкиОтправки.Договор = ОписаниеДокументаЭДО.Договор;
		КлючНастройкиОтправки.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
	
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		
		ДокументОбъект.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
		ДокументОбъект.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
		ДокументОбъект.СпособОбмена = НастройкиОтправки.СпособОбмена;
		ДокументОбъект.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
		ДокументОбъект.ТребуетсяИзвещение = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
		ДокументОбъект.ТребуетсяПодтверждение = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		ДокументОбъект.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
		ДокументОбъект.ФорматОсновногоТитула = НастройкиОтправки.Формат;
		
		ДокументОбъект.Записать();
		
		ДатаИзмененияСостояния = ДокументОбъект.Дата;
		ОписаниеСостоянияЭДО = НовоеОписаниеСостоянияДокументаЭДО();
		ОписаниеСостоянияЭДО.ЭлектронныйДокумент = ДокументОбъект.Ссылка;
		ОписаниеСостоянияЭДО.Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		ОписаниеСостоянияЭДО.ДатаИзменения = ДатаИзмененияСостояния;
		
		ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияЭДО);
		
		Если ЗначениеЗаполнено(ОписаниеДокументаЭДО.ОбъектыУчета) Тогда
			Для Каждого ОбъектУчета Из ОписаниеДокументаЭДО.ОбъектыУчета Цикл
				ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДокументОбъект.Ссылка, ОбъектУчета);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
			УстановитьКонтрольОтраженияВУчете(ДокументОбъект.Ссылка, ОписаниеДокументаЭДО);
		КонецЕсли;
		
		НовыйДокумент = ДокументОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйДокумент;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭтоВходящийЭДО - Булево
//  * Идентификатор - Строка
//  * Формат - Строка - идентификатор формата основного титула.
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ИдентификаторДокументооборота - Строка
//  * ТребуетсяИзвещение - Булево
//  * ТребуетсяПодтверждение - Булево
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО,ОпределяемыйТип.КонтрагентБЭД
//  * Договор - Неопределено,ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * Дата - Дата
//  * ДатаАннулирования - Дата
//  * ДатаПодписания - Дата
//  * ДатаОтправкиПолучения - Дата
//  * Номер - Строка
//  * Сумма - Число
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостояниеДополнение - Строка
//  * ДатаИзмененияСостояния - Дата
//  * КомментарийСостояния - Строка
//  * ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * МаршрутПодписания - Неопределено,СправочникСсылка.МаршрутыПодписания
//  * ВыгружатьДополнительныеСведения - Булево
//  * ОбменБезПодписи - Булево
//  * СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                         - Неопределено
//  * ИдентификаторПакета - Неопределено,УникальныйИдентификатор
Функция НовоеОписаниеДокументаЭДО() Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ЭтоВходящийЭДО", Ложь);
	Описание.Вставить("Идентификатор", "");
	Описание.Вставить("Формат", "");
	Описание.Вставить("ИдентификаторОрганизации", "");
	Описание.Вставить("ИдентификаторКонтрагента", "");
	Описание.Вставить("ИдентификаторДокументооборота", "");
	Описание.Вставить("ТребуетсяИзвещение", Ложь);
	Описание.Вставить("ТребуетсяПодтверждение", Ложь);
	Описание.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	Описание.Вставить("СпособОбмена", Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	Описание.Вставить("Организация", Неопределено);
	Описание.Вставить("Контрагент", Неопределено);
	Описание.Вставить("Договор", Неопределено);
	Описание.Вставить("ВидДокумента", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("Дата", Дата(1, 1, 1));
	Описание.Вставить("ДатаАннулирования", Дата(1, 1, 1));
	Описание.Вставить("ДатаПодписания", Дата(1, 1, 1));
	Описание.Вставить("ДатаОтправкиПолучения", Дата(1, 1, 1));
	Описание.Вставить("Номер", "");
	Описание.Вставить("Сумма", 0);
	Описание.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("СостояниеДополнение", "");
	Описание.Вставить("ДатаИзмененияСостояния", '00010101');
	Описание.Вставить("КомментарийСостояния", "");
	Описание.Вставить("ОбъектыУчета", Новый Массив);
	Описание.Вставить("МаршрутПодписания", Неопределено);
	Описание.Вставить("ВыгружатьДополнительныеСведения", Ложь);
	Описание.Вставить("ОбменБезПодписи", Ложь);
	Описание.Вставить("СвязующийОбъектУчета", Неопределено);
	Описание.Вставить("ИдентификаторПакета", Неопределено);
	Возврат Описание;
КонецФункции

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьОбъектыОперацийПоОбъектамУчета(ОбъектыОпераций, ОбъектыУчета)
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияОбъектовУчета = ИнтеграцияЭДО.ОписанияОбъектовУчета(ОбъектыУчета);
	
	НастройкиОтправкиОбъектовУчета = ЭлектронныеДокументыЭДО.НастройкиОтправкиОбъектовУчетаПоОписаниям(
		ОписанияОбъектовУчета);
	
	ИдентификаторыЭДО = Новый Массив; // Массив из Строка
	
	Для Каждого НастройкиОтправкиОбъектаУчета Из НастройкиОтправкиОбъектовУчета Цикл
		ИдентификаторЭДО = НастройкиОтправкиОбъектаУчета.Значение.ИдентификаторОтправителя;
		Если ИдентификаторыЭДО.Найти(ИдентификаторЭДО) = Неопределено Тогда
			ИдентификаторыЭДО.Добавить(ИдентификаторЭДО);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписиПоИдентификаторамЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(
		ИдентификаторыЭДО);
		
	Для Каждого ОписанияОбъектовУчета Из ОписанияОбъектовУчета Цикл
		НастройкиОтправки = НастройкиОтправкиОбъектовУчета[ОписанияОбъектовУчета.ОбъектУчета];
		Если НастройкиОтправки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторЭДО = НастройкиОтправкиОбъектаУчета.Значение.ИдентификаторОтправителя;
		УчетнаяЗаписьОблачногоЭДО = УчетныеЗаписиПоИдентификаторамЭДО[ИдентификаторЭДО];
		Если УчетнаяЗаписьОблачногоЭДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектыОперации = ОбъектыОперацииУчетнойЗаписиОблачногоЭДО(ОбъектыОпераций, УчетнаяЗаписьОблачногоЭДО);
		Если Не ЗначениеЗаполнено(ОбъектыОперации.ОписанияОбъектовУчета) Тогда
			ОбъектыОперации.ОписанияОбъектовУчета = ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектыОперации.ОписанияОбъектовУчета.Добавить(), ОписанияОбъектовУчета);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(ОбъектыОперации.ИдентификаторыЭДО, ИдентификаторЭДО);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - См. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  ДокументыЭДО - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОбъектыОперацийПоДокументамЭДО(ОбъектыОпераций, ДокументыЭДО, КонтекстДиагностики)
		
	Если Не ЗначениеЗаполнено(ДокументыЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаПараметровДокументовДляОперацииПоДействиямЭДО(ДокументыЭДО);
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.УчетнаяЗаписьОблачногоЭДО) Тогда
			ВидОперации = НСтр("ru = 'Выполнение действий по электронным документам.'");
			ДобавитьОшибкуОтсутствуетУчетнаяЗаписьОблачногоЭДОПоДокументу(КонтекстДиагностики,
				ВидОперации, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ОбъектыОперации = ОбъектыОперацииУчетнойЗаписиОблачногоЭДО(ОбъектыОпераций,
			Выборка.УчетнаяЗаписьОблачногоЭДО);
		ОбъектыОперации.ИдентификаторыДокументовЭДО.Добавить(Выборка.ИдентификаторДокумента);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(ОбъектыОперации.ИдентификаторыЭДО,
			Выборка.ИдентификаторОрганизации);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - См. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  СообщенияЭДО - Массив из ДокументСсылка.СообщениеЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОбъектыОперацийПоСообщениямЭДО(ОбъектыОпераций, СообщенияЭДО, КонтекстДиагностики)
		
	Если Не ЗначениеЗаполнено(СообщенияЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыСообщений = ЭлектронныеДокументыЭДО.ДокументыСообщений(СообщенияЭДО);
	
	ЗаполнитьОбъектыОперацийПоДокументамЭДО(ОбъектыОпераций, 
		ОбщегоНазначения.ВыгрузитьКолонку(ДокументыСообщений, "Значение"), 
		КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  ИдентификаторыОрганизаций - Массив из Строка - Идентификаторы учетных записей ЭДО организаций.
Процедура ЗаполнитьОбъектыОперацийПоУчетнымЗаписямЭДО(ОбъектыОпераций, ИдентификаторыОрганизаций)
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЭДОПоУчетнымЗаписям = РегистрыСведений.НастройкиОблачногоЭДО.СгруппироватьПоУчетнымЗаписям(
		ИдентификаторыОрганизаций);
	
	СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Выгрузить(ИдентификаторыОрганизаций);
	
	ТипыСинхронизации = Новый Массив; // Массив из ПеречислениеСсылка.ТипыСинхронизацииОблачногоЭДО
	ТипыСинхронизации.Добавить(Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО);
	ТипыСинхронизации.Добавить(Перечисления.ТипыСинхронизацииОблачногоЭДО.ПриглашенияЭДО);
	ТипыСинхронизации.Добавить(Перечисления.ТипыСинхронизацииОблачногоЭДО.УчетныеЗаписиЭДО);
	
	Для Каждого ИдентификаторыЭДОПоУчетнойЗаписи Из ИдентификаторыЭДОПоУчетнымЗаписям Цикл
		УчетнаяЗаписьОблачногоЭДО = ИдентификаторыЭДОПоУчетнойЗаписи.Ключ;
		ИдентификаторыЭДО = ИдентификаторыЭДОПоУчетнойЗаписи.Значение;
		ОбъектыОперации = ОбъектыОперацииУчетнойЗаписиОблачногоЭДО(ОбъектыОпераций, УчетнаяЗаписьОблачногоЭДО);
		МеткиВремениТиповСинхронизации = ОбъектыОперации.МеткиВремениТиповСинхронизации;
		Для Каждого ТипСинхронизации Из ТипыСинхронизации Цикл
			МеткиВремениТипаСинхронизации =
				РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДО(
					СостоянияСинхронизации, ТипСинхронизации, ИдентификаторыЭДО);
			МеткиВремениТиповСинхронизации.Вставить(ТипСинхронизации, МеткиВремениТипаСинхронизации);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыОперации.ИдентификаторыЭДО, ИдентификаторыЭДО, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  ОписанияДокументовПоФайлам - Массив из См. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
Процедура ЗаполнитьОбъектыОперацийПоОписаниямДокументов(ОбъектыОпераций, ОписанияДокументовПоФайлам)
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЭДО = Новый Массив; // Массив из Строка
	ОписанияДокументовПоИдентификаторамЭДО = Новый Соответствие;
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
		
		КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастройкиОтправки.Отправитель = ОписаниеДокумента.Организация;
		КлючНастройкиОтправки.Получатель = ОписаниеДокумента.Контрагент;
		КлючНастройкиОтправки.Договор = ОписаниеДокумента.Договор;
		КлючНастройкиОтправки.ВидДокумента = ОписаниеДокумента.ВидДокумента;
		
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЭДО = НастройкиОтправки.ИдентификаторОтправителя;
		ОписанияДокументовПоИдентификаторуЭДО = ОписанияДокументовПоИдентификаторамЭДО[ИдентификаторЭДО];
		Если ОписанияДокументовПоИдентификаторуЭДО = Неопределено Тогда
			ОписанияДокументовПоИдентификаторуЭДО = Новый Массив; // См. ЗаполнитьОбъектыОперацийПоОписаниямДокументов.ОписанияДокументовПоФайлам
			ОписанияДокументовПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО, ОписанияДокументовПоИдентификаторуЭДО);
			ИдентификаторыЭДО.Добавить(ИдентификаторЭДО);
		КонецЕсли;
		
		ОписанияДокументовПоИдентификаторуЭДО.Добавить(ОписаниеДокумента);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	УчетныеЗаписиПоИдентификаторамЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(
		ИдентификаторыЭДО);
		
	Для Каждого УчетнаяЗаписьПоИдентификаторуЭДО Из УчетныеЗаписиПоИдентификаторамЭДО Цикл
		
		ИдентификаторЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Ключ;
		УчетнаяЗаписьОблачногоЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Значение;
		
		ОписанияДокументов = ОписанияДокументовПоИдентификаторамЭДО[ИдентификаторЭДО];
		Если ОписанияДокументов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыОперации = ОбъектыОпераций[УчетнаяЗаписьОблачногоЭДО];
		Если ОбъектыОперации = Неопределено Тогда
			ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
			ОбъектыОпераций.Вставить(УчетнаяЗаписьОблачногоЭДО, ОбъектыОперации);
		КонецЕсли;
		
		Для Каждого ОписаниеДокумента Из ОписанияДокументов Цикл
			ОбъектыОперации.ОписанияДокументовПоФайлам.Добавить(ОписаниеДокумента);
		КонецЦикла;
		
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(ОбъектыОперации.ИдентификаторыЭДО, ИдентификаторЭДО);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторДокумента - Строка
//  * ИдентификаторОрганизации - Строка
//  * УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//
Функция ВыборкаПараметровДокументовДляОперацииПоДействиямЭДО(ЭлектронныеДокументы)
	
	Запрос = Новый Запрос;
	//@skip-check bsl-ql-hub
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокумент.Ссылка КАК Ссылка,
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЕСТЬNULL(НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО,
		|		ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка)) КАК УчетнаяЗаписьОблачногоЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОблачногоЭДО КАК НастройкиОблачногоЭДО
		|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = НастройкиОблачногоЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокумент.Ссылка КАК Ссылка,
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЕСТЬNULL(НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО,
		|		ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка)) КАК УчетнаяЗаписьОблачногоЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОблачногоЭДО КАК НастройкиОблачногоЭДО
		|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = НастройкиОблачногоЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Параметры:
//  ПараметрыВыполнения - см. ВыполнитьДействияЭДО.ПараметрыДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики)
	ЭлектронныеДокументыЭДО.ЗаполнитьОтпечаткиСертификатов(ПараметрыВыполнения, КонтекстДиагностики);
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ОбъектыОперации - См. НовыеОбъектыОперацииПоДействиямЭДО
//  * НаборДействий - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * МаркерыАвторизации - Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
//  * ОтпечаткиСертификатов - Массив из Строка
//  * ОбработатьТолькоИзвещения - Булево
//  * ДанныеРучногоФормированияТитула - Неопределено - заполняется в формах ручного формирования титулов
//                                    - См. ИнтерфейсДокументовЭДОКлиентСервер.ДанныеРучногоФормированияТитула
//  * ДополнительныеПараметрыДействий - Соответствие из КлючИЗначение:
//    ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** Значение - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДополнительныеПараметрыДействия
//  * НастройкиОбъектов - Соответствие из КлючИЗначение:
//   ** Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//   ** Значение - См. НастройкиЭДО.НастройкиОтправки
//
Функция НовыеПараметрыОперацииПоДействиямЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектыОперации", Новый Структура);
	Параметры.Вставить("НаборДействий", ЭлектронныеДокументыЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Параметры.Вставить("МаркерыАвторизации", Новый Массив);
	Параметры.Вставить("ОтпечаткиСертификатов", Новый Массив);
	Параметры.Вставить("ОбработатьТолькоИзвещения", Ложь);
	Параметры.Вставить("ДанныеРучногоФормированияТитула", Неопределено);
	Параметры.Вставить("ДополнительныеПараметрыДействий", Новый Соответствие);
	Параметры.Вставить("НастройкиОбъектов", Новый Соответствие);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ОбъектыОпераций - см. ОбъектыОперацийПоУчетнымЗаписямСервиса
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
// 
// Возвращаемое значение:
//  См. НовыеОбъектыОперацииПоДействиямЭДО
Функция ОбъектыОперацииУчетнойЗаписиОблачногоЭДО(ОбъектыОпераций, УчетнаяЗаписьОблачногоЭДО)
	ОбъектыОперации = ОбъектыОпераций[УчетнаяЗаписьОблачногоЭДО];
	Если ОбъектыОперации = Неопределено Тогда
		ОбъектыОперации = НовыеОбъектыОперацииПоДействиямЭДО();
		ОбъектыОпераций.Вставить(УчетнаяЗаписьОблачногоЭДО, ОбъектыОперации);
	КонецЕсли;
	Возврат ОбъектыОперации;
КонецФункции

// Параметры:
//  ПараметрыОперации - см. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Функция ПакетМетодовОперацииПоДействиямЭДО(ПараметрыОперации, КонтекстДиагностики)
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	НаборДействий = ПараметрыОперации.НаборДействий;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отклонить) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Аннулировать) Тогда
		
		ДобавитьОписаниеМетодаАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ПринятьАннулирование) Тогда
		
		ДобавитьОписаниеМетодаПринятияАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно) Тогда
		
		ДобавитьОписаниеМетодаЗакрытияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ВернутьВРаботу) Тогда
		
		ДобавитьОписаниеМетодаВозвратаВРаботуДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Утвердить) Тогда
		
		ДобавитьОписаниеМетодаУтвержденияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать) Тогда
		
		ДобавитьОписаниеМетодаФормированияДокументовЭДО(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики);
		
		ДобавитьОписаниеМетодаФормированияДокументовЭДОПоФайлам(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.СформироватьОтвет) Тогда
		
		ДобавитьОписаниеМетодаФормированияОтветныхТитуловДокументовЭДО(ПакетМетодов, ПараметрыОперации,
			КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Переформировать) Тогда
		
		ДобавитьОписаниеМетодаПереформированияДокументовЭДОПоФайлам(ПакетМетодов, ПараметрыОперации,
			КонтекстДиагностики);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтклонитьПодписание) Тогда
		
		ДобавитьОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Подписать) Тогда
		
		ДобавитьОписаниеМетодаПодготовкиДанныхДляПодписания(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики);
		Возврат ПакетМетодов; // Требуется обработка на клиенте.
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Отправить) Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыОперации.МаркерыАвторизации) Тогда
			ДобавитьОписаниеМетодаПолученияМаркеровАвторизации(ПакетМетодов, ПараметрыОперации);
			Возврат ПакетМетодов; // Требуется обработка на клиенте.
		КонецЕсли;
		
		ДобавитьОписаниеМетодаОтправкиДокументовЭДО(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики);
		
		ДобавитьОписаниеМетодаОтправкиКонтейнеровЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Загрузить) Тогда
		
		АвтоматическоеПолучениеЭДОИнтеграцияОблака.ДобавитьОписаниеМетодаПолученияЧерезИнтервал(
			ПакетМетодов, ПараметрыОперации);
		
		УчетныеЗаписиЭДОИнтеграцияОблака.ДобавитьОписаниеМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(
			ПакетМетодов, ПараметрыОперации);
		
		УчетныеЗаписиЭДОИнтеграцияОблака.ДобавитьОписаниеМетодаДанныеУчетныхЗаписейЭДОСОшибками(
			ПакетМетодов, ПараметрыОперации);
		
		ПриглашенияЭДОИнтеграцияОблака.ДобавитьОписаниеМетодаПорцияДанныхПриглашенийЭДОПоМеткамВремени(
			ПакетМетодов, ПараметрыОперации);
		
		ПриглашенияЭДОИнтеграцияОблака.ДобавитьОписаниеМетодаДанныеПриглашенийЭДОСОшибками(
			ПакетМетодов, ПараметрыОперации);
		
		ДобавитьОписаниеМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(ПакетМетодов, ПараметрыОперации);
		
		ДобавитьОписаниеМетодаДанныеСинхронизацииДокументовЭДОСОшибками(ПакетМетодов, ПараметрыОперации);
		
		ЗапуститьПолнуюСинхронизациюДокументовОблачногоЭДО();
		
	КонецЕсли;
	
	Если ЕстьДействие(НаборДействий, Перечисления.ДействияПоЭДО.ОтправитьВАрхив) Тогда
		
		ДобавитьОписаниеМетодаОтправкиВАрхивДокументовЭДО(ПакетМетодов, ПараметрыОперации);
		
	КонецЕсли;
	
	Возврат ПакетМетодов;
	
КонецФункции

// Параметры:
//  НаборДействий - Соответствие из КлючИЗначение
//  * Ключ - ПеречислениеСсылка.ДействияПоЭДО
//  * Значение - Булево
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьДействие(НаборДействий, Действие)
	Возврат ЭлектронныеДокументыЭДО.ЕстьДействие(НаборДействий, Действие);
КонецФункции

// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО)
	Возврат ЭлектронныеДокументыЭДО.ИмяТаблицыДокументаЭДО(ЭтоВходящийЭДО);
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ПакетМетодов - См. ПакетМетодовОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. НовыйРезультатДействийЭДО
Функция ВыполнитьДействияПоУчетнойЗаписи(УчетнаяЗаписьОблачногоЭДО, ПакетМетодов, КонтекстДиагностики)
	
	РезультатДействийЭДО = НовыйРезультатДействийЭДО();
	
	ОшибкиФормирования = ОшибкиФормированияДляИнтерактивногоИсправления(КонтекстДиагностики);
	Если ЗначениеЗаполнено(ОшибкиФормирования) Тогда
		РезультатДействийЭДО.ОшибкиФормирования = ОшибкиФормирования;
		Возврат РезультатДействийЭДО;
	КонецЕсли;
	
	Попытка
		ПараметрыВыполненияМетода = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	Исключение
		ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
		ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(УчетнаяЗаписьОблачногоЭДО);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		Возврат РезультатДействийЭДО;
	КонецПопытки;
	
	ПакетМетодовДляВыполнения = ПакетМетодов;
	
	Пока ЗначениеЗаполнено(ПакетМетодовДляВыполнения) Цикл 
	
		РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполненияМетода,
			ПакетМетодовДляВыполнения, КонтекстДиагностики);
		
		ПакетМетодовПовторно = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
		
		ОбработатьРезультатыПакетаМетодовПоДействиямЭДО(РезультатыПакета, РезультатДействийЭДО,
			КонтекстДиагностики, ПакетМетодовПовторно);
		
		ПакетМетодовДляВыполнения = ПакетМетодовПовторно;
		
	КонецЦикла;
	
	Возврат РезультатДействийЭДО;
	
КонецФункции

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
Функция ОшибкиФормированияДляИнтерактивногоИсправления(КонтекстДиагностики)
	ОшибкиФормирования = Новый Массив; // Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования
	ОшибкиДиагностики = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	Счетчик = ОшибкиДиагностики.Количество();
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		Ошибка = ОшибкиДиагностики[Счетчик];
		Если Ошибка.ВидОшибки.Идентификатор = ЭлектронныеДокументыЭДО.ИдентификаторОшибкиФормированияОтвета()
			И ЗначениеЗаполнено(Ошибка.ДополнительныеДанные)  Тогда
			ОшибкиФормирования.Добавить(Ошибка.ДополнительныеДанные);
			ОшибкиДиагностики.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
	Возврат ОшибкиФормирования;
КонецФункции

// Параметры:
//  РезультатыМетодовОперации - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор метода в операции.
//  * Значение - Структура,Массив из Структура
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатыПакетаМетодовПоДействиямЭДО(РезультатыМетодовОперации, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно) Экспорт
	
	Для Каждого РезультатМетодаОперации Из РезультатыМетодовОперации Цикл
		
		Попытка
			ИдентификаторМетода = РезультатМетодаОперации.Ключ;
			РезультатМетода = РезультатМетодаОперации.Значение;
			ОбработатьРезультатМетодаПоДействиямЭДО(ИдентификаторМетода, РезультатМетода, РезультатДействий,
				КонтекстДиагностики, ПакетМетодовПовторно);
		Исключение
			ВидОперации = НСтр("ru = 'Обработка результата пакетного запроса в облачный ЭДО'");
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось обработать результат метода с идентификатором ""%1""'"),
				ИдентификаторМетода);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторМетода - Строка
//  РезультатМетода - Структура,Массив из Структура
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПоДействиямЭДО(ИдентификаторМетода, РезультатМетода, РезультатДействий,
	КонтекстДиагностики, ПакетМетодовПовторно)
	
	УчетныеЗаписиЭДОИнтеграцияОблака.ОбработатьРезультатМетодаПоДействиямЭДО(
		ИдентификаторМетода, РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно);
	
	ПриглашенияЭДОИнтеграцияОблака.ОбработатьРезультатМетодаПоДействиямЭДО(
		ИдентификаторМетода, РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно);
	
	Если ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДОПоФайлам() Тогда
		
		ОбработатьРезультатМетодаФормированияДокументовЭДОПоФайлам(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаФормированияОтветныхТитуловДокументовЭДО(РезультатМетода, РезультатДействий);
	
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПереформированияДокументовЭДОПоФайлам() Тогда
		
		ОбработатьРезультатМетодаПереформированияДокументовЭДОПоФайлам(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПодготовкиДанныхДляПодписания() Тогда
		
		ОбработатьРезультатМетодаПодготовкиДанныхДляПодписания(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаДобавленияПодписейФайлов() Тогда
		
		ОбработатьРезультатМетодаДобавленияПодписейФайлов(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПолученияМаркеровАвторизации() Тогда
		
		ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиКонтейнеровЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиКонтейнеровЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени() Тогда
		
		ОбработатьРезультатМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(
			РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаДанныеСинхронизацииДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаДанныеСинхронизацииДокументовЭДО(
			РезультатМетода, РезультатДействий, КонтекстДиагностики);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаУтвержденияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаУтвержденияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияПодписанияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаПринятияАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаПринятияАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияАннулированияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтклоненияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтклоненияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаОтправкиВАрхивДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаОтправкиВАрхивДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаЗакрытияДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаЗакрытияДокументовЭДО(РезультатМетода, РезультатДействий);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаВозвратаВРаботуДокументовЭДО() Тогда
		
		ОбработатьРезультатМетодаВозвратаВРаботуДокументовЭДО(РезультатМетода, РезультатДействий);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  ИдентификаторыЭДО - Массив из Строка
Процедура ЗаполнитьОбработанныеУчетныеЗаписиЭДО(РезультатДействий, ИдентификаторыЭДО)
	
	ОбработанныеУчетныеЗаписи = РезультатДействий.Итог.ОбработанныеУчетныеЗаписи;
	
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		Если ОбработанныеУчетныеЗаписи[ИдентификаторЭДО] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеОбработаннойУчетнойЗаписи = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
		ОписаниеОбработаннойУчетнойЗаписи.Идентификатор = ИдентификаторЭДО;
		ОписаниеОбработаннойУчетнойЗаписи.ОтправкаПолучениеВыполнялись = Истина;
		ОбработанныеУчетныеЗаписи.Вставить(ИдентификаторЭДО, ОписаниеОбработаннойУчетнойЗаписи);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Сформировать

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияДокументовЭДО(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики)
	
	ОписанияОбъектовУчета = ПараметрыОперации.ОбъектыОперации.ОписанияОбъектовУчета;
	
	Если Не ЗначениеЗаполнено(ОписанияОбъектовУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = ОписанияОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета");
	
	РезультатПроверки = ИнтеграцияЭДО.ПроверкаГотовностиКДокументообороту(ОбъектыУчета);
	
	ГотовыеОбъектыУчета = РезультатПроверки.Готовые;
	
	КоличествоОписаний = ОписанияОбъектовУчета.Количество();
	Если КоличествоОписаний <> ГотовыеОбъектыУчета.Количество() Тогда
		Пока КоличествоОписаний > 0 Цикл
			КоличествоОписаний = КоличествоОписаний - 1;
			ТекущееОписание = ОписанияОбъектовУчета[КоличествоОписаний];
			Если ГотовыеОбъектыУчета.Найти(ТекущееОписание.ОбъектУчета) = Неопределено Тогда
				ОписанияОбъектовУчета.Удалить(ТекущееОписание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОперации.НастройкиОбъектов) Тогда
		НастройкиОтправкиПоОбъектамУчета = ПараметрыОперации.НастройкиОбъектов;
		НастройкиФормирования = НастройкиФормированияДокументовЭДОПоНастройкамОтправки(НастройкиОтправкиПоОбъектамУчета,
			ОписанияОбъектовУчета);
	Иначе
		НастройкиФормирования = НастройкиФормированияДокументовЭДО(ОписанияОбъектовУчета);
	КонецЕсли;
		
	ДанныеДляСозданияДокументовЭДО = ДанныеДляФормированияДокументовЭДО(ОписанияОбъектовУчета, НастройкиФормирования,
		КонтекстДиагностики);
		
	ОшибкиДиагностики = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);
	
	Если ЗначениеЗаполнено(ОшибкиДиагностики) Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеМетода = ОписаниеМетодаСформироватьДокументыЭДО(ДанныеДляСозданияДокументовЭДО.ДанныеДокументовОблачногоЭДО);
	ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	
	ОбновитьДокументыЭДО(ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО);
	
	ДополнитьОбъектыОперацийСформированнымиДокументамиЭДО(ПараметрыОперации.ОбъектыОперации,
		ДанныеДляСозданияДокументовЭДО.ОписанияДокументовЭДО);
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ЕстьНастройка - Булево
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторКонтрагента - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * Формат - Строка
//  * ЗаполнениеКодаТовара - Строка
//  * ВыгружатьДополнительныеСведения - Булево
Функция НовыеНастройкиФормированияДокументовЭДО()
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	
	НастройкиФормирования = Новый ТаблицаЗначений;
	// Ключ настройки по объекту учета.
	НастройкиФормирования.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	НастройкиФормирования.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип);
	НастройкиФормирования.Колонки.Добавить("Договор", Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип);
	НастройкиФормирования.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	НастройкиФормирования.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	// Настройки формирования учетных данных.
	НастройкиФормирования.Колонки.Добавить("ЕстьНастройка", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("ИдентификаторОрганизации", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ИдентификаторКонтрагента", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ТребуетсяОтветнаяПодпись", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("ТребуетсяИзвещениеОПолучении", ОписаниеТипаБулево);
	НастройкиФормирования.Колонки.Добавить("ТипРегламента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРегламентовЭДО"));
	НастройкиФормирования.Колонки.Добавить("СпособОбмена", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	НастройкиФормирования.Колонки.Добавить("Формат", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ЗаполнениеКодаТовара", ОписаниеТипаСтрока50);
	НастройкиФормирования.Колонки.Добавить("ВыгружатьДополнительныеСведения", ОписаниеТипаБулево);
	
	Возврат НастройкиФормирования;
КонецФункции

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//
// Возвращаемое значение:
//  См. НовыеНастройкиФормированияДокументовЭДО
Функция НастройкиФормированияДокументовЭДО(ОписанияОбъектовУчета) Экспорт
	
	НастройкиДокументовЭДО = НовыеНастройкиФормированияДокументовЭДО();
	
	ДополнитьКлючамиНастроекОбъектовУчета(НастройкиДокументовЭДО, ОписанияОбъектовУчета);
	
	ЗаполнитьНастройкиОтправкиВНастройкахФормированияДокументовЭДО(НастройкиДокументовЭДО);
	
	Возврат НастройкиДокументовЭДО;
	
КонецФункции

// Параметры:
//  НастройкиФормирования - См. НовыеНастройкиФормированияДокументовЭДО
//  ОписанияОбъектовУчета - См. НастройкиФормированияДокументовЭДО.ОписанияОбъектовУчета
Процедура ДополнитьКлючамиНастроекОбъектовУчета(НастройкиФормирования, ОписанияОбъектовУчета)
	
	ИменаРеквизитов = "Организация, Контрагент, Договор, ТипДокумента";
	Отбор = Новый Структура(ИменаРеквизитов);
	
	ТипыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияОбъектовУчета, "ТипДокумента", Истина);
	ВидыДокументовПоТипам = ИнтерфейсДокументовЭДО.ВидыДокументовПоСтандартнымТипам(ТипыДокументов);
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		ЗаполнитьЗначенияСвойств(Отбор, ОписаниеОбъектаУчета);
		НайденныеНастройки =  НастройкиФормирования.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(НайденныеНастройки) Тогда
			НастройкаФормирования = НастройкиФормирования.Добавить();
			ЗаполнитьЗначенияСвойств(НастройкаФормирования, ОписаниеОбъектаУчета);
			НастройкаФормирования.ВидДокумента = ВидыДокументовПоТипам[ОписаниеОбъектаУчета.ТипДокумента];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  НастройкиДокументовЭДО - См. НовыеНастройкиФормированияДокументовЭДО
//
Процедура ЗаполнитьНастройкиОтправкиВНастройкахФормированияДокументовЭДО(НастройкиДокументовЭДО)
	
	Для Каждого НастройкаДокументаЭДО Из НастройкиДокументовЭДО Цикл
	
		КлючНастройки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастройки.Отправитель = НастройкаДокументаЭДО.Организация;
		КлючНастройки.Получатель = НастройкаДокументаЭДО.Контрагент;
		КлючНастройки.Договор = НастройкаДокументаЭДО.Договор;
		КлючНастройки.ВидДокумента = НастройкаДокументаЭДО.ВидДокумента;
		НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастройки);
		
		Если Не ЗначениеЗаполнено(НастройкиОтправки) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаДокументаЭДО.ЕстьНастройка = Истина;
		НастройкаДокументаЭДО.ИдентификаторОрганизации = НастройкиОтправки.ИдентификаторОтправителя;
		НастройкаДокументаЭДО.ИдентификаторКонтрагента = НастройкиОтправки.ИдентификаторПолучателя;
		НастройкаДокументаЭДО.ТребуетсяОтветнаяПодпись = НастройкиОтправки.ТребуетсяОтветнаяПодпись;
		НастройкаДокументаЭДО.ТребуетсяИзвещениеОПолучении = НастройкиОтправки.ТребуетсяИзвещениеОПолучении;
		НастройкаДокументаЭДО.СпособОбмена = НастройкиОтправки.СпособОбмена;
		НастройкаДокументаЭДО.Формат = НастройкиОтправки.Формат;
		НастройкаДокументаЭДО.ЗаполнениеКодаТовара = НастройкиОтправки.ЗаполнениеКодаТовара;
		НастройкаДокументаЭДО.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписанияОбъектовУчета
//  НастройкиФормирования - См. НастройкиФормированияДокументовЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПараметрыОткрытия - Неопределено
//      - см. ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
// 
// Возвращаемое значение:
//  Структура:
//  * ОписанияДокументовЭДО - Массив из См. НовоеОписаниеДокументаЭДО
//  * ДанныеДокументовОблачногоЭДО - Массив из см. НовыеДанныеДляФормированияДокументаВОблачномЭДО
Функция ДанныеДляФормированияДокументовЭДО(ОписанияОбъектовУчета, НастройкиФормирования, КонтекстДиагностики, ПараметрыОткрытия = Неопределено) Экспорт
	
	ДанныеДокументов = Новый Массив; // Массив из см. НовыеДанныеДляФормированияДокументаВОблачномЭДО
	ОписанияДокументовЭДО = Новый Массив; // Массив из См. НовоеОписаниеДокументаЭДО
	
	Результат = Новый Структура;
	Результат.Вставить("ОписанияДокументовЭДО", ОписанияДокументовЭДО);
	Результат.Вставить("ДанныеДокументовОблачногоЭДО", ДанныеДокументов);
	
	КлючиНастроекВФорматеСервиса = КлючиНастроекВФорматеСервиса(НастройкиФормирования);
	
	ИменаСвойствОтбора = "Организация, Контрагент, Договор, ТипДокумента";
	ОтборНастроек = Новый Структура(ИменаСвойствОтбора);
	
	Для Каждого ОписаниеОбъектаУчета Из ОписанияОбъектовУчета Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборНастроек, ОписаниеОбъектаУчета);
		НайденныеНастройки = НастройкиФормирования.НайтиСтроки(ОтборНастроек);
		Если Не ЗначениеЗаполнено(НайденныеНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаФормирования = НайденныеНастройки[0];
		
		Если Не НастройкаФормирования.ЕстьНастройка Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФормированияДанных = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормированияДанных, НастройкаФормирования);
		ПараметрыФормированияДанных.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ПараметрыФормированияДанных.Отправитель = НастройкаФормирования.Организация;
		ПараметрыФормированияДанных.Получатель = НастройкаФормирования.Контрагент;
		ПараметрыФормированияДанных.Договор = НастройкаФормирования.Договор;
		
		Если ЗначениеЗаполнено(ПараметрыОткрытия) Тогда
			ПараметрыФормированияДанных.ДанныеКаталога = ПоместитьВоВременноеХранилище(ПараметрыОткрытия.ДанныеКаталога);
		КонецЕсли;
		
		ДанныеОбъектаУчета = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(
			ОписаниеОбъектаУчета.ОбъектУчета, ПараметрыФормированияДанных);
		Если ДанныеОбъектаУчета.ОшибкаФормированияВПрикладнойЧасти Тогда
			Продолжить;
		КонецЕсли;

		ДанныеДляФормирования = Новый Структура;
		ДанныеДляФормирования.Вставить("ДанныеДокумента", ДанныеОбъектаУчета.Данные);
		ДанныеДляФормирования.Вставить("ЗначенияДополнительныхПолей", Неопределено);
		
		ЗначенияДополнительныхПолей = ФорматыЭДО.СформироватьЗначенияДополнительныхПолейДокумента(ОписаниеОбъектаУчета.ОбъектУчета, НастройкаФормирования, ДанныеДляФормирования, Ложь);				
		Проверка = ФорматыЭДО.ПроверитьЗаполнениеДанных(НастройкаФормирования.Формат, ДанныеОбъектаУчета.Данные);		
		ОписаниеОшибокДанных = Неопределено;
		
		Если ЗначениеЗаполнено(Проверка.Ошибки) Тогда
			ДобавитьРезультатПроверкиВОписаниеОшибокДанных(ОписаниеОшибокДанных, Проверка);
		КонецЕсли;
		
		Если Не ЗначенияДополнительныхПолей.Успех Тогда
			ДобавитьЗначенияДопПолейВОписаниеОшибокДанных(ОписаниеОшибокДанных, ЗначенияДополнительныхПолей, НастройкаФормирования.Формат);
		КонецЕсли; 

		Если ЗначениеЗаполнено(ОписаниеОшибокДанных) Тогда
			ОписаниеОшибкиФормирования = ДобавитьОшибкуФормирования(КонтекстДиагностики, НастройкаФормирования);			
			ОписаниеОшибкиФормирования.ДополнительныеДанные.ОшибкиДанных = ОписаниеОшибокДанных;
		КонецЕсли;
		
		ИдентификаторДокументаОблачногоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыйИдентификаторДокумента();
		ИндексНастройки = НастройкиФормирования.Индекс(НастройкаФормирования);
		КлючНастройкиВФорматеСервиса = КлючиНастроекВФорматеСервиса[ИндексНастройки];
		
		ДанныеДокумента = НовыеДанныеДляФормированияДокументаВОблачномЭДО();
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, КлючНастройкиВФорматеСервиса);
		ДанныеДокумента.Идентификатор = ИдентификаторДокументаОблачногоЭДО;
		ДанныеДокумента.ИдентификаторОтправителя = НастройкаФормирования.ИдентификаторОрганизации;
		ДанныеДокумента.ИдентификаторПолучателя = НастройкаФормирования.ИдентификаторКонтрагента;
		ДанныеДокумента.ТребуетсяОтветнаяПодпись = НастройкаФормирования.ТребуетсяОтветнаяПодпись;
		ДанныеДокумента.ТребуетсяИзвещениеОПолучении = НастройкаФормирования.ТребуетсяИзвещениеОПолучении;
		ДанныеДокумента.Формат = НастройкаФормирования.Формат;
		ПривестиЗначенияДополнительныхДанныхОбъектаУчетаКСтрокеПоФормату(
			ДанныеОбъектаУчета.Данные, НастройкаФормирования.Формат, ОписаниеОбъектаУчета.ТипДокумента);
		ДанныеДокумента.УчетныеДанные.Данные = ДеревоУчетныхДанныхВСтруктуру(ДанныеОбъектаУчета.Данные);
		ДанныеДокумента.УчетныеДанные.Формат = ДанныеОбъектаУчета.Формат;
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
		ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ОписаниеОбъектаУчета.ТипДокумента);
		
		ОписаниеДокументаЭДО = НовоеОписаниеДокументаЭДО();
		ОписаниеДокументаЭДО.Идентификатор = ИдентификаторДокументаОблачногоЭДО;
		ОписаниеДокументаЭДО.Формат = НастройкаФормирования.Формат;
		ОписаниеДокументаЭДО.Организация = ОписаниеОбъектаУчета.Организация;
		ОписаниеДокументаЭДО.Контрагент = ОписаниеОбъектаУчета.Контрагент;
		ОписаниеДокументаЭДО.Договор = ОписаниеОбъектаУчета.Договор;
		ОписаниеДокументаЭДО.ВидДокумента = ВидДокумента;
		
		РеквизитыОснования = ИнтеграцияЭДО.ОписаниеОснованияЭлектронногоДокумента(ОписаниеОбъектаУчета.ОбъектУчета);
		ОписаниеДокументаЭДО.Номер = РеквизитыОснования.Номер;
		ОписаниеДокументаЭДО.Дата = РеквизитыОснования.Дата;
		ОписаниеДокументаЭДО.Сумма = РеквизитыОснования.СуммаДокумента;
		
		ОписаниеДокументаЭДО.ИдентификаторОрганизации = НастройкаФормирования.ИдентификаторОрганизации;
		ОписаниеДокументаЭДО.ИдентификаторКонтрагента = НастройкаФормирования.ИдентификаторКонтрагента;
		ОписаниеДокументаЭДО.СпособОбмена = НастройкаФормирования.СпособОбмена;
		ОписаниеДокументаЭДО.ТребуетсяИзвещение = НастройкаФормирования.ТребуетсяИзвещениеОПолучении;
		ОписаниеДокументаЭДО.ТребуетсяПодтверждение = НастройкаФормирования.ТребуетсяОтветнаяПодпись;
		
		ОписаниеДокументаЭДО.ОбъектыУчета = ДанныеОбъектаУчета.Основания;
		ОписаниеДокументаЭДО.СвязующийОбъектУчета = ДанныеОбъектаУчета.СвязующийОбъектУчета;
		
		ОписаниеДокументаЭДО.Состояние = Перечисления.СостоянияДокументовЭДО.НеСформирован;
		
		КлючНастройкиОтправки = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтправки();
		КлючНастройкиОтправки.Отправитель = ОписаниеОбъектаУчета.Организация;
		КлючНастройкиОтправки.Получатель = ОписаниеОбъектаУчета.Контрагент;
		КлючНастройкиОтправки.Договор = ОписаниеОбъектаУчета.Договор;
		КлючНастройкиОтправки.ВидДокумента = ВидДокумента;
		
		НастройкиОтправки = НастройкиОтправкиЭДОСлужебныйПовтИспНаВызов.НастройкиОтправки(КлючНастройкиОтправки);
		
		ОписаниеДокументаЭДО.МаршрутПодписания = НастройкиОтправки.МаршрутПодписания;
		ОписаниеДокументаЭДО.ВыгружатьДополнительныеСведения = НастройкиОтправки.ВыгружатьДополнительныеСведения;
		ОписаниеДокументаЭДО.ОбменБезПодписи = НастройкиОтправки.ОбменБезПодписи;
		
		ОписаниеДокументаЭДО.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		
		ОписанияДокументовЭДО.Добавить(ОписаниеДокументаЭДО);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектыОперации - см. НовыеОбъектыОперацииПоДействиямЭДО
//  ОписанияДокументовЭДО - Массив из см. НовоеОписаниеДокументаЭДО
//                        - Массив из см. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
Процедура ДополнитьОбъектыОперацийСформированнымиДокументамиЭДО(ОбъектыОперации, ОписанияДокументовЭДО)
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыДокументовЭДО = ОбъектыОперации.ИдентификаторыДокументовЭДО;
	
	Для Каждого ОписаниеДокументаЭДО Из ОписанияДокументовЭДО Цикл
		ИдентификаторыДокументовЭДО.Добавить(ОписаниеДокументаЭДО.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеДокументовЭДО - Массив из Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ТипДокумента    - Строка
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Формат            - Строка - формат, в который конвертируются учетные данные.
//  * УчетныеДанные     - Неопределено,Структура - данные прикладного решения:
//  ** Данные           - Структура - учетные данные для конвертации.
//  ** Формат           - Строка - формат учетных данных.
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьДокументыЭДО(ДанныеДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"СформироватьДокументыЭДО", ДанныеДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияДокументовЭДО()
	Возврат "Сформировать";
КонецФункции

// Параметры:
//  РезультатФормирования - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СформироватьДокументыЭДО
//  РезультатДействий - См. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатФормирования, РезультатДействий)
	
	ОписанияДокументовЭДО = ОписанияДокументовИзФорматаСервиса(РезультатФормирования.ОписанияДокументовЭДО);
	
	ЭлектронныеДокументы = ОбновитьДокументыЭДО(ОписанияДокументовЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		Итог.ОбработанныеДокументы.Вставить(ЭлектронныйДокумент, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Обработано);
	
КонецПроцедуры

// Параметры:
//  ПакетМетодов - Массив из см. ОписаниеМетодаСервисаПоСвойствам
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияДокументовЭДОПоФайлам(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики)
	
	ОписанияДокументовПоФайлам = ПараметрыОперации.ОбъектыОперации.ОписанияДокументовПоФайлам;
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияПоОрганизациям = ДанныеДляФормированияДокументовЭДОПоФайлам(ОписанияДокументовПоФайлам);
	
	ДанныеДокументовЭДО = ДанныеДляФормированияПоОрганизациям[ОписанияДокументовПоФайлам[0].Организация];
	
	Если Не ЗначениеЗаполнено(ДанныеДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ОписаниеМетодаСформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаФормированияДокументовЭДОПоФайлам();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	
	ОбновитьДокументыЭДОПоФайлам(ОписанияДокументовПоФайлам);
	
	ДополнитьОбъектыОперацийСформированнымиДокументамиЭДО(ПараметрыОперации.ОбъектыОперации,
		ОписанияДокументовПоФайлам);
	
КонецПроцедуры

// Параметры:
//  ДанныеДокументовЭДО - Массив из Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Получатель        - Структура:
//  ** ИНН              - Строка
//  ** КПП              - Строка
//  * Договор           - Неопределено,Структура:
//  ** Наименование     - Строка
//  ** Номер            - Строка
//  ** Дата             - Дата
//  ** Сторона1         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  ** Сторона2         - Структура:
//  *** ИНН             - Строка
//  *** КПП             - Строка
//  * ВидДокумента      - Структура:
//  ** Наименование     - Строка
//  ** ТипДокумента     - Строка
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Номер             - Строка
//  * Дата              - Строка - дата строкой в формате ISO.
//  * Сумма             - Число
//  * ОсновнойФайл      - Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
//  * ДополнительныйФайл - Неопределено,Структура:
//  ** ИмяФайла         - Строка
//  ** Данные           - Строка - двоичные данные в формате base64.
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"СформироватьДокументыЭДОПоФайлам", ДанныеДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияДокументовЭДОПоФайлам()
	Возврат "СформироватьПоФайлам";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор           - Строка
//  * Отправитель             - Структура:
//  ** ИНН                    - Строка
//  ** КПП                    - Строка
//  * Получатель              - Структура:
//  ** ИНН                    - Строка
//  ** КПП                    - Строка
//  * Договор                 - Неопределено,Структура:
//  ** Наименование           - Строка
//  ** Номер                  - Строка
//  ** Дата                   - Дата
//  * ВидДокумента            - Структура:
//  ** Наименование           - Строка
//  ** ТипДокумента           - Строка
//  * Номер                   - Строка
//  * Дата                    - Дата
//  * Сумма                   - Число
//  * СопроводительнаяЗаписка - Строка
//  * ФайлыТитулов            - Массив Из См. НовыеФайлыТитулаДокументаДляФормированияВФорматеСервиса
Функция НовыеДанныеДляФормированияДокументаЭДОПоФайламВФорматеСервиса()
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Отправитель", Новый Структура);
	Результат.Вставить("Получатель", Новый Структура);
	Результат.Вставить("Договор", Неопределено);
	Результат.Вставить("ВидДокумента", Новый Структура);
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СопроводительнаяЗаписка", "");
	Результат.Вставить("ФайлыТитулов", Новый Массив);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Основной - Неопределено
//             - См. НовыйФайлТитулаДокументаДляФормированияВФорматеСервиса
//  * Дополнительный - Неопределено - если дополнительный файл отсутствует.
//                   - См. НовыйФайлТитулаДокументаДляФормированияВФорматеСервиса
Функция НовыеФайлыТитулаДокументаДляФормированияВФорматеСервиса()
	ФайлыТитулаДокумента = Новый Структура;
	ФайлыТитулаДокумента.Вставить("Основной", Неопределено);
	ФайлыТитулаДокумента.Вставить("Дополнительный", Неопределено);
	Возврат ФайлыТитулаДокумента;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИмяФайла - Строка
//  * Данные - Строка - двоичные данные в формате base64.
Функция НовыйФайлТитулаДокументаДляФормированияВФорматеСервиса()
	ФайлТитулаДокумента = Новый Структура;
	ФайлТитулаДокумента.Вставить("ИмяФайла", "");
	ФайлТитулаДокумента.Вставить("Данные", "");
	Возврат ФайлТитулаДокумента;
КонецФункции

// @skip-check statement-type-change, invocation-parameter-type-intersect, property-return-type
//
// Параметры:
//  ОписанияДокументовПоФайлам - Массив Из См. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. НовыеДанныеДляФормированияДокументаЭДОПоФайламВФорматеСервиса
Функция ДанныеДляФормированияДокументовЭДОПоФайлам(ОписанияДокументовПоФайлам)
	
	Результат = Новый Соответствие; // см. ДанныеДляФормированияДокументовЭДОПоФайлам
	
	КлючиНастроек = КлючиНастроекВФорматеСервиса(ОписанияДокументовПоФайлам);
	
	Индекс = 0;
	Для Каждого ОписаниеДокумента Из ОписанияДокументовПоФайлам Цикл
		
		НаборДанных = Результат[ОписаниеДокумента.Организация];
		Если НаборДанных = Неопределено Тогда
			НаборДанных = Новый Массив;
			Результат.Вставить(ОписаниеДокумента.Организация, НаборДанных);
		КонецЕсли;
		
		ДанныеДляФормирования = НовыеДанныеДляФормированияДокументаЭДОПоФайламВФорматеСервиса();
		НаборДанных.Добавить(ДанныеДляФормирования);
		
		КлючНастройки = КлючиНастроек[Индекс];
		ЗаполнитьЗначенияСвойств(ДанныеДляФормирования, КлючНастройки);
		
		ДанныеДляФормирования.Идентификатор = ОписаниеДокумента.Идентификатор;
		ДанныеДляФормирования.Номер = ОписаниеДокумента.Номер;
		ДанныеДляФормирования.Дата = ОписаниеДокумента.Дата;
		ДанныеДляФормирования.Сумма = ОписаниеДокумента.Сумма;
		ДанныеДляФормирования.СопроводительнаяЗаписка = ОписаниеДокумента.СопроводительнаяЗаписка;
		
		Для Каждого ФайлыТитула Из ОписаниеДокумента.ФайлыТитулов Цикл
			ФайлыТитулаВФорматеСервиса = НовыеФайлыТитулаДокументаДляФормированияВФорматеСервиса();
			
			Если ЗначениеЗаполнено(ФайлыТитула.Основной) Тогда
				ОсновнойФайлТитула = НовыйФайлТитулаДокументаДляФормированияВФорматеСервиса();
				ОсновнойФайлТитула.ИмяФайла = ФайлыТитула.Основной.ИмяФайла;
				ОсновнойФайлТитула.Данные = Base64Строка(ФайлыТитула.Основной.ДвоичныеДанные);
				ФайлыТитулаВФорматеСервиса.Основной = ОсновнойФайлТитула;
			КонецЕсли;
			Если ЗначениеЗаполнено(ФайлыТитула.Дополнительный) Тогда
				ДополнительныйФайлТитула = НовыйФайлТитулаДокументаДляФормированияВФорматеСервиса();
				ДополнительныйФайлТитула.ИмяФайла = ФайлыТитула.Дополнительный.ИмяФайла;
				ДополнительныйФайлТитула.Данные = Base64Строка(ФайлыТитула.Дополнительный.ДвоичныеДанные);
				ФайлыТитулаВФорматеСервиса.Дополнительный = ДополнительныйФайлТитула;
			КонецЕсли;
			
			ДанныеДляФормирования.ФайлыТитулов.Добавить(ФайлыТитулаВФорматеСервиса)
		КонецЦикла;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияДокументовЭДОПоФайлам(РезультатФормирования, РезультатДействий)
	
	ОбработатьРезультатМетодаФормированияДокументовЭДО(РезультатФормирования, РезультатДействий);
	
КонецПроцедуры

// Параметры:
//  НастройкиОтправки - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Значение - См. НастройкиЭДО.НастройкиОтправки
//  ОписанияОбъектовУчета - См. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//
// Возвращаемое значение:
//  См. НовыеНастройкиФормированияДокументовЭДО
Функция НастройкиФормированияДокументовЭДОПоНастройкамОтправки(НастройкиОтправки, ОписанияОбъектовУчета) Экспорт
	
	НастройкиДокументовЭДО = НовыеНастройкиФормированияДокументовЭДО();
	
	ДополнитьКлючамиНастроекОбъектовУчета(НастройкиДокументовЭДО, ОписанияОбъектовУчета);
	
	Для Каждого НастройкиДокументаЭДО Из НастройкиДокументовЭДО Цикл
		
		ИменаРеквизитов = "Организация, Контрагент, Договор, ТипДокумента";
		ОтборДляПоискаОбъектаУчета = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(ОтборДляПоискаОбъектаУчета, НастройкиДокументаЭДО);
		ОписанияОбъектовУчетаПоОтбору = ОписанияОбъектовУчета.НайтиСтроки(ОтборДляПоискаОбъектаУчета);
		
		Если Не ЗначениеЗаполнено(ОписанияОбъектовУчетаПоОтбору) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОбъектаУчета = ОписанияОбъектовУчетаПоОтбору[0];
		НастройкиОтправкиДокумента = НастройкиОтправки[ОписаниеОбъектаУчета.ОбъектУчета];
		Если НастройкиОтправкиДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиДокументаЭДО.ЕстьНастройка = Истина;
		НастройкиДокументаЭДО.ИдентификаторОрганизации = НастройкиОтправкиДокумента.ИдентификаторОтправителя;
		НастройкиДокументаЭДО.ИдентификаторКонтрагента = НастройкиОтправкиДокумента.ИдентификаторПолучателя;
		НастройкиДокументаЭДО.ТребуетсяОтветнаяПодпись = НастройкиОтправкиДокумента.ТребуетсяОтветнаяПодпись;
		НастройкиДокументаЭДО.ТребуетсяИзвещениеОПолучении = НастройкиОтправкиДокумента.ТребуетсяИзвещениеОПолучении;
		НастройкиДокументаЭДО.СпособОбмена = НастройкиОтправкиДокумента.СпособОбмена;
		НастройкиДокументаЭДО.Формат = НастройкиОтправкиДокумента.Формат;
		НастройкиДокументаЭДО.ЗаполнениеКодаТовара = НастройкиОтправкиДокумента.ЗаполнениеКодаТовара;
		НастройкиДокументаЭДО.ВыгружатьДополнительныеСведения = НастройкиОтправкиДокумента.ВыгружатьДополнительныеСведения;
		
	КонецЦикла;
	
	Возврат НастройкиДокументовЭДО;
	
КонецФункции

#КонецОбласти

#Область СформироватьОтвет

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаФормированияОтветныхТитуловДокументовЭДО(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОперации.ДанныеРучногоФормированияТитула) Тогда
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ПараметрыФормирования.ДанныеРучногоФормированияТитула = ПараметрыОперации.ДанныеРучногоФормированияТитула;
		ПараметрыФормирования.Формат = ФорматОтветногоТитулаПоИдентификаторуДокумента(ИдентификаторыДокументовЭДО[0]);
		ДанныеОбъектаУчета = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(Новый Массив, ПараметрыФормирования);
		
		ДанныеОтветногоТитула = НовыеДанныеОтветногоТитула();
		ДанныеОтветногоТитула.ИдентификаторДокумента = ИдентификаторыДокументовЭДО[0];
		ДанныеОтветногоТитула.УчетныеДанные.Данные = ДеревоУчетныхДанныхВСтруктуру(ДанныеОбъектаУчета.Данные);
		ДанныеОтветногоТитула.УчетныеДанные.Формат = ДанныеОбъектаУчета.Формат;
		ДанныеОтветныхТитулов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтветногоТитула); // Массив из см. НовыеДанныеОтветногоТитула
	Иначе
		ДанныеОтветныхТитулов = ДанныеОтветныхТитулов(ИдентификаторыДокументовЭДО, КонтекстДиагностики);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтветныхТитулов) Тогда
		ОписаниеМетода = ОписаниеМетодаСформироватьОтветныеТитулыДокументовЭДО(ДанныеОтветныхТитулов);
		ИдентификаторМетода = ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из см. Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторДокумента - см. Документ.ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента
//  * ФорматОсновногоТитула - см. Документ.ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула
//  * Организация - см. Документ.ЭлектронныйДокументВходящийЭДО.Организация
//  * ВидДокумента - см. Документ.ЭлектронныйДокументВходящийЭДО.ВидДокумента
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//
Функция СвойстваДокументовДляФормированияОтветныхТитулов(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула,
		|	ЭлектронныйДокументВходящийЭДО.Организация,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СостоянияДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)
		|	И СостоянияДокументовЭДО.Состояние В (&СостоянияЭДО)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	
	СостоянияЭДО = Новый Массив; // Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
	
	Запрос.УстановитьПараметр("СостоянияЭДО", СостоянияЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращаемое значение:
//  Структура - Новые данные ответного титула:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура:
//  ** Данные - См. ДеревоУчетныхДанныхВСтруктуру
//  ** Формат - Строка - формат учетных данных.
Функция НовыеДанныеОтветногоТитула()
	ДанныеОтветногоТитула = Новый Структура;
	ДанныеОтветногоТитула.Вставить("ИдентификаторДокумента", "");
	ДанныеОтветногоТитула.Вставить("УчетныеДанные", Новый Структура);
	ДанныеОтветногоТитула.УчетныеДанные.Вставить("Данные", Новый Структура);
	ДанныеОтветногоТитула.УчетныеДанные.Вставить("Формат", "");
	Возврат ДанныеОтветногоТитула;
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеОтветногоТитула
Функция ДанныеОтветныхТитулов(ИдентификаторыДокументовЭДО, КонтекстДиагностики)
	
	ДанныеОтветныхТитулов = Новый Массив; // Массив из см. НовыеДанныеОтветногоТитула
	
	СвойстваДокументов = СвойстваДокументовДляФормированияОтветныхТитулов(ИдентификаторыДокументовЭДО);
	
	ЭлектронныеДокументы = СвойстваДокументов.ВыгрузитьКолонку("Ссылка");
	
	ОбъектыУчетаДокументов = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ЭлектронныеДокументы);
	
	ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета = 
		ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета");
	
	ПоддерживаемыеФорматыФНС = ФорматыЭДО_ФНС.ПоддерживаемыеФорматы();
	
	Для Каждого СвойстваДокумента Из СвойстваДокументов Цикл
		
		ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		
		НаборОбъектовУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
		Для Каждого ОбъектыУчетаДокумента Из ОбъектыУчетаДокументов Цикл
			Если ОбъектыУчетаДокумента.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
				НаборОбъектовУчета.Добавить(ОбъектыУчетаДокумента.ОбъектУчета);
			КонецЕсли;
		КонецЦикла;
		
		ФорматОсновногоФайла = СвойстваДокумента.ФорматОсновногоТитула;
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ПараметрыФормирования.Формат = ФорматыЭДО.ФорматОтветногоТитула(ФорматОсновногоФайла);
		
		ДанныеОбъектаУчета = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования);
		
		Если Не ДанныеОбъектаУчета.ОшибкаФормированияВПрикладнойЧасти Тогда
			ДанныеОтветногоТитула = НовыеДанныеОтветногоТитула();
			ДанныеОтветногоТитула.ИдентификаторДокумента = СвойстваДокумента.ИдентификаторДокумента;
			ДанныеОтветногоТитула.УчетныеДанные.Данные = ДеревоУчетныхДанныхВСтруктуру(ДанныеОбъектаУчета.Данные);
			ДанныеОтветногоТитула.УчетныеДанные.Формат = ДанныеОбъектаУчета.Формат;
			ДанныеОтветныхТитулов.Добавить(ДанныеОтветногоТитула);
			Продолжить;
		КонецЕсли;
		
		ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		ОписаниеОшибки.ОписаниеОбъектаУчета.Организация = СвойстваДокумента.Организация;
		ОписаниеОшибки.ОписаниеОбъектаУчета.ТипДокумента = СвойстваДокумента.ТипДокумента;
		ОписаниеОшибки.ВидДокумента = СвойстваДокумента.ВидДокумента;
		
		ЭтоФорматУПДУКД = (ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД.ИнформацияПродавца 
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД2019.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УКД.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УКД2020.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД_5_02.ИнформацияПродавца
			Или ФорматОсновногоФайла = ПоддерживаемыеФорматыФНС.УПД_5_03.ИнформацияПродавца);
		
		Если Не (ЗапретитьФормированиеОтветногоТитулаБезДокументовУчета И ЭтоФорматУПДУКД) Тогда
			ОшибкаФормированияВПрикладнойЧасти = Новый Структура;
			ОшибкаФормированияВПрикладнойЧасти.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
			ОписаниеОшибки.ОшибкаФормированияВПрикладнойЧасти = ОшибкаФормированияВПрикладнойЧасти;
		КонецЕсли;
		
		ЭлектронныеДокументыЭДО.ДобавитьОшибкуФормированияОтвета(ЭлектронныйДокумент,
			Перечисления.ДействияПоЭДО.СформироватьОтвет, КонтекстДиагностики, ОписаниеОшибки);
		
	КонецЦикла;
	
	Возврат ДанныеОтветныхТитулов;
	
КонецФункции

// Параметры:
//  ИдентификаторДокумента - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ФорматОтветногоТитулаПоИдентификаторуДокумента(ИдентификаторДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента = &ИдентификаторДокумента";
	
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ФорматыЭДО.ФорматОтветногоТитула(Выборка.ФорматОсновногоТитула);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Параметры:
//  ДанныеОтветныхТитулов - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура - данные прикладного решения:
//  ** Данные - Структура - учетные данные для конвертации.
//  ** Формат - Строка - формат учетных данных.
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаСформироватьОтветныеТитулыДокументовЭДО(ДанныеОтветныхТитулов)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"СформироватьОтветныеТитулыДокументовЭДО", ДанныеОтветныхТитулов);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаФормированияОтветныхТитуловДокументовЭДО()
	Возврат "СформироватьОтвет";
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаФормированияОтветныхТитуловДокументовЭДО(РезультатФормирования, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатФормирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.СформироватьОтвет);
	
КонецПроцедуры

#КонецОбласти

#Область Переформировать

// Параметры:
//  ПакетМетодов - Массив из см. ОписаниеМетодаСервисаПоСвойствам
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаПереформированияДокументовЭДОПоФайлам(ПакетМетодов, ПараметрыОперации,
	КонтекстДиагностики)
	
	ОписанияДокументовПоФайлам = ПараметрыОперации.ОбъектыОперации.ОписанияДокументовПоФайлам;
	
	Если Не ЗначениеЗаполнено(ОписанияДокументовПоФайлам) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПереформированияПоОрганизациям = ДанныеДляФормированияДокументовЭДОПоФайлам(ОписанияДокументовПоФайлам);
	
	ДанныеДокументовЭДО = ДанныеДляПереформированияПоОрганизациям[ОписанияДокументовПоФайлам[0].Организация];
	
	Если Не ЗначениеЗаполнено(ДанныеДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ОписаниеМетодаПереформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаПереформированияДокументовЭДОПоФайлам();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	
КонецПроцедуры

// Параметры:
//  ДанныеДокументовЭДО - Массив из Структура:
//  * Идентификатор - Строка
//  * Отправитель - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Получатель - Структура:
//  ** ИНН - Строка
//  ** КПП - Строка
//  * Договор - Неопределено,Структура:
//  ** Наименование - Строка
//  ** Номер - Строка
//  ** Дата - Дата
//  * ВидДокумента - Структура:
//  ** Наименование - Строка
//  ** ТипДокумента - Строка
//  * Номер - Строка
//  * Дата - Строка - дата строкой в формате ISO.
//  * Сумма - Число
//  * СопроводительнаяЗаписка - Строка
//  * ФайлыТитулов - Массив Из Структура:
//  ** ОсновнойФайл - Структура:
//  *** ИмяФайла - Строка
//  *** Данные - Строка - двоичные данные в формате base64.
//  ** ДополнительныйФайл - Неопределено,Структура:
//  *** ИмяФайла - Строка
//  *** Данные - Строка - двоичные данные в формате base64.
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПереформироватьДокументыЭДОПоФайлам(ДанныеДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПереформироватьДокументыЭДОПоФайлам", ДанныеДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПереформированияДокументовЭДОПоФайлам()
	Возврат "ПереформироватьПоФайлам";
КонецФункции

// Параметры:
//  РезультатПереформирования - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПереформироватьДокументыЭДОПоФайлам
//  РезультатДействий - См. НовыйРезультатДействийЭДО
//
Процедура ОбработатьРезультатМетодаПереформированияДокументовЭДОПоФайлам(РезультатПереформирования, РезультатДействий)
	
	ОписанияДокументовЭДО = ОписанияДокументовИзФорматаСервиса(РезультатПереформирования.ОписанияДокументовЭДО);
	
	ЭлектронныеДокументы = ОбновитьДокументыЭДО(ОписанияДокументовЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		Итог.ОбработанныеДокументы.Вставить(ЭлектронныйДокумент, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Обработано);
	
КонецПроцедуры

#КонецОбласти // Переформировать

#Область Подписать

#Область ПодготовкаДанныхДляПодписания

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаПодготовкиДанныхДляПодписания(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Отпечатки = ПараметрыОперации.ОтпечаткиСертификатов;
	
	Если ПараметрыОперации.ОбработатьТолькоИзвещения Тогда
		ОписаниеМетода = ОписаниеМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО(
			ИдентификаторыДокументовЭДО, Отпечатки);
	Иначе
		ОписаниеМетода = ОписаниеМетодаПодготовитьДанныеДляПодписанияДокументовЭДО(
			ИдентификаторыДокументовЭДО, Отпечатки);
	КонецЕсли;
	
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода,
		ИдентификаторМетодаПодготовкиДанныхДляПодписания());
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  ОтпечаткиСертификатов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО(ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПодготовитьДанныеДляПодписанияИзвещенийДокументовЭДО", ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов);
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  ОтпечаткиСертификатов - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПодготовитьДанныеДляПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПодготовитьДанныеДляПодписанияДокументовЭДО", ИдентификаторыДокументовЭДО, ОтпечаткиСертификатов);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПодготовкиДанныхДляПодписания()
	Возврат "ПодготовитьПодписание";
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. НовыеДанныеСообщенияДляИнтерактивногоПодписания
Функция НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания()
	Возврат ЭлектронныеДокументыЭДОИнтеграцияОблакаКлиентСервер.НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания();
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка - идентификатор данных электронного документа.
//  * Данные - Неопределено,ДвоичныеДанные
//  * Представление - Структура:
//  ** Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ** Представление - Строка
//  * ТребуетсяЗаполнитьПодписанта - Булево
//  * ДоверенностиПоСертификатам - Соответствие из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Значение - Строка - номер доверенности.
//  * СертификатыТребующиеДоверенность - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция НовыеДанныеСообщенияДляИнтерактивногоПодписания() Экспорт
	ДанныеСообщения = Новый Структура;
	ДанныеСообщения.Вставить("ИдентификаторДанных", "");
	ДанныеСообщения.Вставить("Данные", Неопределено);
	ДанныеСообщения.Вставить("Представление", Новый Структура);
	ДанныеСообщения.Представление.Вставить("Значение", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	ДанныеСообщения.Представление.Вставить("Представление", "");
	ДанныеСообщения.Вставить("ТребуетсяЗаполнитьПодписанта", Ложь);
	ДанныеСообщения.Вставить("ДоверенностиПоСертификатам", Новый Соответствие);
	ДанныеСообщения.Вставить("СертификатыТребующиеДоверенность", Новый Массив);
	Возврат ДанныеСообщения;
КонецФункции

// Параметры:
//  РезультатПодготовкиДанных - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПодготовитьДанныеДляПодписанияДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПодготовкиДанныхДляПодписания(РезультатПодготовкиДанных, РезультатДействий)
	
	РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Подписать, 0);
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных.ДанныеДляПодписания) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПодписания = РезультатДействий.ДанныеДляПодписания;
	
	ДанныеДляПодписанияВСервисе = РезультатПодготовкиДанных.ДанныеДляПодписания;

	ОтпечаткиСертификатов = Новый Массив; // Массив из Строка
	ИдентификаторыДокументовЭДО = Новый Массив; // Массив из Строка
	
	Для Каждого ОписаниеНабораДанныхВСервисе Из ДанныеДляПодписанияВСервисе Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтпечаткиСертификатов,
			ОписаниеНабораДанныхВСервисе.ОтпечаткиСертификатов, Истина);
		Для Каждого НаборДанныхВСервисе Из ОписаниеНабораДанныхВСервисе.НаборДанных Цикл
			Если ЗначениеЗаполнено(НаборДанныхВСервисе.ИдентификаторДокумента) Тогда
				ИдентификаторыДокументовЭДО.Добавить(НаборДанныхВСервисе.ИдентификаторДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(НаборДанныхВСервисе.СертификатыТребующиеДоверенность) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтпечаткиСертификатов,
					НаборДанныхВСервисе.СертификатыТребующиеДоверенность, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(ОтпечаткиСертификатов);
	
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументовЭДО);
	
	Для Каждого ОписаниеНабораДанныхВСервисе Из ДанныеДляПодписанияВСервисе Цикл
		
		ОписаниеНабораДанных = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания();
		
		Для Каждого ОтпечатокСертификата Из ОписаниеНабораДанныхВСервисе.ОтпечаткиСертификатов Цикл
			Сертификат = СертификатыПоОтпечаткам[ОтпечатокСертификата]; // СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
			ОписаниеНабораДанных.Сертификаты.Добавить(Сертификат);
		КонецЦикла;
		
		Для Каждого НаборДанныхВСервисе Из ОписаниеНабораДанныхВСервисе.НаборДанных Цикл
			ДанныеСообщения = НовыеДанныеСообщенияДляИнтерактивногоПодписания();
			ЭлектронныйДокумент = ДокументыПоИдентификаторам[НаборДанныхВСервисе.ИдентификаторДокумента];
			ДанныеСообщения.ИдентификаторДанных = НаборДанныхВСервисе.ИдентификаторДанных;
			ДанныеСообщения.Данные = Base64Значение(НаборДанныхВСервисе.Данные);
			ДанныеСообщения.Представление.Значение = ЭлектронныйДокумент;
			ДанныеСообщения.Представление.Представление = Строка(ЭлектронныйДокумент);
			ДанныеСообщения.ТребуетсяЗаполнитьПодписанта = НаборДанныхВСервисе.ТребуетсяЗаполнитьПодписанта;
			ДанныеСообщения.ДоверенностиПоСертификатам = ДоверенностиПоСертификатамИзФорматаСервиса(
				НаборДанныхВСервисе.ДоверенностиПоСертификатам, СертификатыПоОтпечаткам);
			ОписаниеНабораДанных.НаборДанных.Добавить(ДанныеСообщения);
			ДанныеСообщения.СертификатыТребующиеДоверенность = СертификатыИзОтбораПоОтпечаткам(
				НаборДанныхВСервисе.СертификатыТребующиеДоверенность, СертификатыПоОтпечаткам);
		КонецЦикла;
		
		ДанныеДляПодписания.Добавить(ОписаниеНабораДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДоверенностиПоСертификатамВФорматеСервиса - Неопределено
//                                            - Массив из Структура:
// * ОтпечатокСертификата - Строка
// * НомерДоверенности - Строка
// СертификатыПоОтпечаткам - см. КриптографияБЭД.СертификатыПоОтпечаткам
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - Строка - номер доверенности.
Функция ДоверенностиПоСертификатамИзФорматаСервиса(ДоверенностиПоСертификатамВФорматеСервиса, СертификатыПоОтпечаткам)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ДоверенностиПоСертификатамВФорматеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ДоверенностьПоСертификату Из ДоверенностиПоСертификатамВФорматеСервиса Цикл
		
		Сертификат = СертификатыПоОтпечаткам[ДоверенностьПоСертификату.ОтпечатокСертификата];
		Если Не ЗначениеЗаполнено(Сертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(Сертификат, ДоверенностьПоСертификату.НомерДоверенности);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Отпечатки - Массив из Строка
//  СертификатыПоОтпечаткам - см. КриптографияБЭД.СертификатыПоОтпечаткам
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция СертификатыИзОтбораПоОтпечаткам(Отпечатки, СертификатыПоОтпечаткам)
	
	Сертификаты = Новый Массив; // См. Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	
	Если Не ЗначениеЗаполнено(Отпечатки) Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	Для Каждого Отпечаток Из Отпечатки Цикл
		Сертификат = СертификатыПоОтпечаткам[Отпечаток];
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(Сертификаты, Сертификат);
	КонецЦикла;
	
	Возврат Сертификаты;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхДляПодписанияПоВыбраннымСертификатам

// Параметры:
//  ДанныеДляЗаполненияПоУчетнымЗаписям - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - Массив из Структура:
//  ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - выбранный сертификат.
//  ** НомерДоверенности - Строка
//  ** ИдентификаторыДанных - Массив из Строка - идентификаторы данных электронных документов.
//
// Возвращаемое значение:
//  Структура:
//  * АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  * ЗаполненныеДанныеПоУчетнымЗаписям - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  ** Значение - см. ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Функция ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(ДанныеДляЗаполненияПоУчетнымЗаписям) Экспорт
	
	АсинхронныеОперации = Новый Массив; // Массив из см. ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервисаАсинхронно
	ЗаполненныеДанныеПоУчетнымЗаписям = Новый Соответствие;
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("АсинхронныеОперации", АсинхронныеОперации);
	Результат.Вставить("ЗаполненныеДанныеПоУчетнымЗаписям", ЗаполненныеДанныеПоУчетнымЗаписям);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	Асинхронно = Ложь;
	
	Сертификаты = Новый Массив; // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Для Каждого ДанныеДляЗаполненияПоУчетнойЗаписи Из ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		ДанныеДляЗаполнения = ДанныеДляЗаполненияПоУчетнойЗаписи.Значение;
		Для Каждого ОписаниеНабораДанных Из ДанныеДляЗаполнения Цикл
			ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Сертификаты, ОписаниеНабораДанных.Сертификат);
		КонецЦикла;
	КонецЦикла;
	
	ОтпечаткиСертификатов = КриптографияБЭД.ОтпечаткиСертификатов(Сертификаты);
	
	Для Каждого ДанныеДляЗаполненияПоУчетнойЗаписи Из ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ДанныеДляЗаполненияПоУчетнойЗаписи.Ключ;
		ДанныеДляЗаполнения = ДанныеДляЗаполненияПоУчетнойЗаписи.Значение;
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
		
		ДанныеДляЗаполненияВФорматеСервиса = ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса(
			ДанныеДляЗаполнения, ОтпечаткиСертификатов);
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам",
			ДанныеДляЗаполненияВФорматеСервиса);
		
		Если Асинхронно Тогда
			АсинхроннаяОперация = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервисаАсинхронно(
				ПараметрыВыполнения, ОписаниеМетода);
			АсинхронныеОперации.Добавить(АсинхроннаяОперация);
		Иначе
			РезультатЗаполненияДанных = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
				ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам
			ЗаполненныеДанные = ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам(
				РезультатЗаполненияДанных, КонтекстДиагностики);
			ЗаполненныеДанныеПоУчетнымЗаписям.Вставить(УчетнаяЗаписьОблачногоЭДО, ЗаполненныеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеДляЗаполнения - Массив из Структура:
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - выбранный сертификат.
//  * НомерДоверенности - Строка
//  * ИдентификаторыДанных - Массив из Строка - идентификаторы данных электронных документов.
//  ОтпечаткиСертификатов - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Значение - Строка - отпечаток сертификата.
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ИдентификаторыДанных - Массив из Строка
//  * ОтпечатокСертификата - Строка
//  * НомерДоверенности - Строка
Функция ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса(ДанныеДляЗаполнения, ОтпечаткиСертификатов)
	
	ДанныеДляЗаполненияВФорматеСервиса = Новый Массив; // См. ДанныеДляЗаполненияПоВыбраннымСертификатамВФорматеСервиса
	
	Для Каждого ОписаниеНабораДанных Из ДанныеДляЗаполнения Цикл
		
		ОтпечатокСертификата = ОтпечаткиСертификатов[ОписаниеНабораДанных.Сертификат];
		
		ОписаниеНабораДанныхВФорматеСервиса = Новый Структура;
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("НомерДоверенности", ОписаниеНабораДанных.НомерДоверенности);
		ОписаниеНабораДанныхВФорматеСервиса.Вставить("ИдентификаторыДанных", ОписаниеНабораДанных.ИдентификаторыДанных);
		
		ДанныеДляЗаполненияВФорматеСервиса.Добавить(ОписаниеНабораДанныхВФорматеСервиса);
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаполненияВФорматеСервиса;
	
КонецФункции

// Параметры:
//  РезультатЗаполненияДанных - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * НаборДанных - Массив из Структура:
//  ** ИдентификаторФайла - Строка - идентификатор файла электронного документа в сервисе.
//  ** Данные - Строка - двоичные данные в формате base64.
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор файла электронного документа.
//  * Значение - ДвоичныеДанные
Функция ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам(РезультатЗаполненияДанных, КонтекстДиагностики) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ЭлементНабора Из РезультатЗаполненияДанных.НаборДанных Цикл
		ЗаполненныеДанные = Base64Значение(ЭлементНабора.Данные);
		Результат.Вставить(ЭлементНабора.ИдентификаторФайла, ЗаполненныеДанные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДобавлениеПодписей

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ПодписиДанных - Массив из Структура:
//  * ИдентификаторДанных - Строка
//  * Подпись - ДвоичныеДанные
//  * НомерДоверенности - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Функция ПакетМетодовОперацииПоДобавлениюПодписейФайлов(УчетнаяЗаписьОблачногоЭДО, ПодписиДанных)
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	Если Не ЗначениеЗаполнено(ПодписиДанных) Тогда
		Возврат ПакетМетодов;
	КонецЕсли;
	
	ПодписиДанныхВФорматеСервиса = Новый Массив; // Массив Из См. НоваяПодписьДанныхВФорматеСервиса
	
	Для Каждого ПодписьДанных Из ПодписиДанных Цикл
		ПодписьДанныхВФорматеСервиса = НоваяПодписьДанныхВФорматеСервиса();
		ПодписьДанныхВФорматеСервиса.ИдентификаторДанных = ПодписьДанных.ИдентификаторДанных;
		ПодписьДанныхВФорматеСервиса.Подпись = Base64Строка(ПодписьДанных.Подпись);
		ПодписьДанныхВФорматеСервиса.НомерДоверенности = ПодписьДанных.НомерДоверенности;
		ПодписиДанныхВФорматеСервиса.Добавить(ПодписьДанныхВФорматеСервиса);
	КонецЦикла;
	
	ОписаниеМетодаДобавленияПодписейФайлов = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДобавитьПодписиФайловДокументовЭДО", ПодписиДанныхВФорматеСервиса);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетодаДобавленияПодписейФайлов,
		ИдентификаторМетодаДобавленияПодписейФайлов());
	
	Возврат ПакетМетодов;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка - идентификатор файла электронного документа.
//  * Подпись - Строка - двоичные данные в формате base64.
//  * НомерДоверенности - Строка
Функция НоваяПодписьДанныхВФорматеСервиса()
	ПодписьДанных = Новый Структура;
	ПодписьДанных.Вставить("ИдентификаторДанных", "");
	ПодписьДанных.Вставить("Подпись", "");
	ПодписьДанных.Вставить("НомерДоверенности", "");
	Возврат ПодписьДанных;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаДобавленияПодписейФайлов()
	Возврат "ДобавитьПодписи";
КонецФункции

// Параметры:
//  РезультатДобавленияПодписей - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаДобавленияПодписейФайлов(РезультатДобавленияПодписей, РезультатДействий)
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(РезультатДобавленияПодписей.СостоянияДокументовЭДО,
		"ИдентификаторДокумента");
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	ОписанияСостоянийЭДО = ОписанияСостоянийДокументовИзФорматаСервиса(
		РезультатДобавленияПодписей.СостоянияДокументовЭДО, ДокументыПоИдентификаторам);
	
	ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументПоИдентификатору Из ДокументыПоИдентификаторам Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументПоИдентификатору.Ключ, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Подписать, Обработано);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Отправить

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ДобавитьОписаниеМетодаОтправкиДокументовЭДО(ПакетМетодов, ПараметрыОперации, КонтекстДиагностики)
	
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОперации.ОбработатьТолькоИзвещения Тогда
		ОписаниеМетода = ОписаниеМетодаОтправитьИзвещенияДокументовЭДО(ИдентификаторыДокументовЭДО,
			ПараметрыОперации.МаркерыАвторизации);
	Иначе
		ОписаниеМетода = ОписаниеМетодаОтправитьДокументыЭДО(ИдентификаторыДокументовЭДО,
			ПараметрыОперации.МаркерыАвторизации);
	КонецЕсли;
	
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода,
		ИдентификаторМетодаОтправкиДокументовЭДО());
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиДокументовЭДО()
	Возврат "Отправить";
КонецФункции

// Параметры:
//  РезультатОтправки - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиДокументовЭДО(РезультатОтправки, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтправки, РезультатДействий,
		Перечисления.ДействияПоЭДО.Отправить);
	
КонецПроцедуры

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыВыполнения - см. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтправкиКонтейнеровЭДО(ПакетМетодов, ПараметрыВыполнения)
	
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ОбъектыОперации.МеткиВремениТиповСинхронизации)
		ИЛИ Не ЗначениеЗаполнено(ПараметрыВыполнения.МаркерыАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтправитьКонтейнерыЭДО", ПараметрыВыполнения.МаркерыАвторизации);
	ИдентификаторМетода = ИдентификаторМетодаОтправкиКонтейнеровЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьДокументыЭДО(ИдентификаторыДокументовЭДО, МаркерыАвторизации = Неопределено) Экспорт
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса("ОтправитьДокументыЭДО",
		ИдентификаторыДокументовЭДО, МаркерыАвторизации);
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииПоУчетнойЗаписиЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьИзвещенияДокументовЭДО(ИдентификаторыДокументовЭДО, МаркерыАвторизации = Неопределено) Экспорт
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтправитьИзвещенияДокументовЭДО", ИдентификаторыДокументовЭДО, МаркерыАвторизации);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиКонтейнеровЭДО()
	Возврат "ОтправитьКонтейнеры";
КонецФункции

// Параметры:
//  РезультатОтправки - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьКонтейнерыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиКонтейнеровЭДО(РезультатОтправки, РезультатДействий)
	
	Если ЗначениеЗаполнено(РезультатОтправки.Отправлено) Тогда
		Отправлено = РезультатДействий.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Отправить];
		Отправлено = ?(ЗначениеЗаполнено(Отправлено), Отправлено + РезультатОтправки.Отправлено,
			РезультатОтправки.Отправлено);
		РезультатДействий.Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Отправить, Отправлено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Получить

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(ПакетМетодов, ПараметрыОперации)
	
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО];
	
	Если ЗначениеЗаполнено(МеткиВремениПоИдентификаторамЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(
			МеткиВремениПоИдентификаторамЭДО);
		ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  МеткиВремениПоИдентификаторамЭДО - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени.МеткиВремениПоИдентификаторамЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(МеткиВремениПоИдентификаторамЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени",
		МеткиВремениПоИдентификаторамЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени()
	Возврат "ПолучитьДокументыПоМеткамВремени";
КонецФункции

// Параметры:
//  РезультатМетода - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(
	РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно)
	
	Если Не ЗначениеЗаполнено(РезультатМетода) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСинхронизацииДокументовЭДО = ДанныеСинхронизацииДокументовЭДОИзФорматаСервиса(РезультатМетода.НаборДанных);
	
	РезультатОбновления = ОбновитьДокументыЭДОПоДаннымСинхронизацииПриЗагрузке(ДанныеСинхронизацииДокументовЭДО,
		РезультатДействий, КонтекстДиагностики);
	
	РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.ЗаписатьКоллекцию(
		Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО,
		РезультатОбновления.МеткиВремениПоИдентификаторамЭДО, КонтекстДиагностики);
	
	Если РезультатМетода.ЭтоПоследний Тогда
		Возврат;
	КонецЕсли;
	
	МеткиВремениИдентификаторовЭДО =
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДОПоРезультатуОбработки(
			РезультатОбновления);
	
	Если Не ЗначениеЗаполнено(МеткиВремениИдентификаторовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ОписаниеМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени(МеткиВремениИдентификаторовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхСинхронизацииДокументовЭДОПоМеткамВремени();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодовПовторно, ОписаниеМетода, ИдентификаторМетода);
	
КонецПроцедуры

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаДанныеСинхронизацииДокументовЭДОСОшибками(ПакетМетодов, ПараметрыОперации)
	
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО;
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		ТипДанных];
	ИдентификаторыЭДО = ОбщегоНазначения.ВыгрузитьКолонку(МеткиВремениПоИдентификаторамЭДО, "ИдентификаторЭДО");
	ИдентификаторыДокументовЭДО = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ОбъектыСОшибками(
		ТипДанных, ИдентификаторыЭДО);
	
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаМетодаДанныеСинхронизацииДокументовЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаДанныеСинхронизацииДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаМетодаДанныеСинхронизацииДокументовЭДО(ИдентификаторыДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДанныеСинхронизацииДокументовЭДО", ИдентификаторыДокументовЭДО);
КонецФункции

// Параметры:
//  РезультатМетода - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаДанныеСинхронизацииДокументовЭДО(РезультатМетода, РезультатДействий, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(РезультатМетода) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСинхронизацииДокументовЭДО = ДанныеСинхронизацииДокументовЭДОИзФорматаСервиса(РезультатМетода);
	
	ОбновитьДокументыЭДОПоДаннымСинхронизацииПриЗагрузке(ДанныеСинхронизацииДокументовЭДО,
		РезультатДействий, КонтекстДиагностики);
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаДанныеСинхронизацииДокументовЭДО()
	Возврат "ПолучитьДокументыПоИдентификаторам";
КонецФункции

// Параметры:
//  НаборДанныхВФорматеСервиса - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииДокументовЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеСинхронизацииДокументаЭДО
Функция ДанныеСинхронизацииДокументовЭДОИзФорматаСервиса(НаборДанныхВФорматеСервиса)
	
	НаборДанных = Новый Массив; // см. ДанныеСинхронизацииДокументовЭДОИзФорматаСервиса
	Если Не ЗначениеЗаполнено(НаборДанныхВФорматеСервиса) Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	ОрганизацииВФорматеСервиса = Новый Массив;
	КонтрагентыВФорматеСервиса = Новый Массив;
	ВидыДокументовВФорматеСервиса = Новый Массив;
	СостоянияДокументовВФорматеСервиса = Новый Массив;
	
	Для Каждого ДанныеСинхронизации Из НаборДанныхВФорматеСервиса Цикл
		ОписаниеДокументаВФорматеСервиса = ДанныеСинхронизации.Описание;
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(ОрганизацииВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Организация);
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(КонтрагентыВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Контрагент);
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(ВидыДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(СостоянияДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ИмяСостояния);
	КонецЦикла;
	
	ОрганизацииПоРеквизитам = ИнтеграцияЭДО.ОрганизацииПоКлючевымРеквизитам(ОрганизацииВФорматеСервиса);
	КонтрагентыПоРеквизитам = ИнтеграцияЭДО.КонтрагентыПоКлючевымРеквизитам(КонтрагентыВФорматеСервиса);
	ВидыДокументовИзФорматаСервиса = ВидыДокументовИзФорматаСервиса(ВидыДокументовВФорматеСервиса);
	СостоянияДокументовПоИменам = СостоянияДокументовПоИменам(СостоянияДокументовВФорматеСервиса);
	
	МетаданныеПеречисленияСпособыОбмена = Метаданные.Перечисления.СпособыОбменаЭД;
	МетаданныеПеречисленияТипыРегламентовЭДО = Метаданные.Перечисления.ТипыРегламентовЭДО;
	
	Для Каждого ДанныеСинхронизацииВФорматеСервиса Из НаборДанныхВФорматеСервиса Цикл
		СостояниеСинхронизацииВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Состояние;
		ОписаниеДокументаВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Описание;
		
		Если Не ЗначениеЗаполнено(СостояниеСинхронизацииВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСинхронизации = НовыеДанныеСинхронизацииДокументаЭДО();
		НаборДанных.Добавить(ДанныеСинхронизации);
		
		СостояниеСинхронизации = ДанныеСинхронизации.СостояниеСинхронизации;
		СостояниеСинхронизации.ИдентификаторОбъекта = ДанныеСинхронизацииВФорматеСервиса.Идентификатор;
		СостояниеСинхронизации.ИдентификаторЭДО = СостояниеСинхронизацииВФорматеСервиса.ИдентификаторЭДО;
		СостояниеСинхронизации.МеткаВремени = СостояниеСинхронизацииВФорматеСервиса.МеткаВремени;
		СостояниеСинхронизации.Удаление = СостояниеСинхронизацииВФорматеСервиса.Удаление;
		
		Если Не ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСинхронизации.ОписаниеДокументаЭДО = НовоеОписаниеДокументаЭДО();
		
		Организация = ИнтеграцияЭДО.ОрганизацияИзОтбораПоКлючевымРеквизитам(
			ОрганизацииПоРеквизитам, ОписаниеДокументаВФорматеСервиса.Организация);
		Контрагент = ИнтеграцияЭДО.КонтрагентИзОтбораПоКлючевымРеквизитам(
			КонтрагентыПоРеквизитам, ОписаниеДокументаВФорматеСервиса.Контрагент);
		ВидДокумента = ВидДокументаИзОтбораПоФорматуСервиса(ВидыДокументовИзФорматаСервиса,
			ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		Состояние = СостоянияДокументовПоИменам[ОписаниеДокументаВФорматеСервиса.ИмяСостояния];
		
		ОписаниеДокументаЭДО = ДанныеСинхронизации.ОписаниеДокументаЭДО;
		ОписаниеДокументаЭДО.Идентификатор = ДанныеСинхронизацииВФорматеСервиса.Идентификатор;
		ОписаниеДокументаЭДО.ЭтоВходящийЭДО = ОписаниеДокументаВФорматеСервиса.ЭтоВходящийЭДО;
		ОписаниеДокументаЭДО.Формат = ОписаниеДокументаВФорматеСервиса.Формат;
		
		ОписаниеДокументаЭДО.ТребуетсяИзвещение = ОписаниеДокументаВФорматеСервиса.ТребуетсяИзвещение;
		ОписаниеДокументаЭДО.ТребуетсяПодтверждение = ОписаниеДокументаВФорматеСервиса.ТребуетсяПодтверждение;
		ОписаниеДокументаЭДО.ИдентификаторОрганизации = ОписаниеДокументаВФорматеСервиса.ИдентификаторОрганизации;
		ОписаниеДокументаЭДО.ИдентификаторКонтрагента = ОписаниеДокументаВФорматеСервиса.ИдентификаторКонтрагента;
		ОписаниеДокументаЭДО.ИдентификаторДокументооборота = ОписаниеДокументаВФорматеСервиса.ИдентификаторДокументооборота;
		ОписаниеДокументаЭДО.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОписаниеДокументаЭДО.Организация = Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОписаниеДокументаЭДО.Контрагент = Контрагент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ОписаниеДокументаЭДО.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Номер) Тогда
			ОписаниеДокументаЭДО.Номер = ОписаниеДокументаВФорматеСервиса.Номер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Дата) Тогда
			ОписаниеДокументаЭДО.Дата = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаАннулирования) Тогда
			ОписаниеДокументаЭДО.ДатаАннулирования =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаАннулирования);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаПодписания) Тогда
			ОписаниеДокументаЭДО.ДатаПодписания =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаПодписания);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаОтправкиПолучения) Тогда
			ОписаниеДокументаЭДО.ДатаОтправкиПолучения =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаОтправкиПолучения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Сумма) Тогда
			ОписаниеДокументаЭДО.Сумма = ОписаниеДокументаВФорматеСервиса.Сумма;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.СпособОбмена) Тогда
			ОписаниеДокументаЭДО.СпособОбмена = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ОписаниеДокументаВФорматеСервиса.СпособОбмена, МетаданныеПеречисленияСпособыОбмена);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ТипРегламента) Тогда
			ОписаниеДокументаЭДО.ТипРегламента = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ОписаниеДокументаВФорматеСервиса.ТипРегламента, МетаданныеПеречисленияТипыРегламентовЭДО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Состояние) Тогда
			ОписаниеДокументаЭДО.Состояние = Состояние;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.СостояниеДополнение) Тогда
			ОписаниеДокументаЭДО.СостояниеДополнение = ОписаниеДокументаВФорматеСервиса.СостояниеДополнение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния) Тогда
			ОписаниеДокументаЭДО.ДатаИзмененияСостояния = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
				ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.КомментарийСостояния) Тогда
			ОписаниеДокументаЭДО.КомментарийСостояния = ОписаниеДокументаВФорматеСервиса.КомментарийСостояния;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ИдентификаторПакета) Тогда
			ОписаниеДокументаЭДО.ИдентификаторПакета = Новый УникальныйИдентификатор(
				ОписаниеДокументаВФорматеСервиса.ИдентификаторПакета);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СостояниеСинхронизации - см. НовоеСостояниеСинхронизацииДокументаЭДО
//  * ОписаниеДокументаЭДО - Неопределено
//                         - см. НовоеОписаниеДокументаЭДО
Функция НовыеДанныеСинхронизацииДокументаЭДО()
	Данные = Новый Структура;
	Данные.Вставить("СостояниеСинхронизации", НовоеСостояниеСинхронизацииДокументаЭДО());
	Данные.Вставить("ОписаниеДокументаЭДО", Неопределено);
	Возврат Данные;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторОбъекта - Строка
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
//  * Удаление - Булево
Функция НовоеСостояниеСинхронизацииДокументаЭДО()
	Состояние = Новый Структура;
	Состояние.Вставить("ИдентификаторОбъекта", "");
	Состояние.Вставить("ИдентификаторЭДО", "");
	Состояние.Вставить("МеткаВремени", 0);
	Состояние.Вставить("Удаление", Ложь);
	Возврат Состояние;
КонецФункции

// Параметры:
//  ДанныеСинхронизацииДокументовЭДО - Массив из см. НовыеДанныеСинхронизацииДокументаЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * ДокументыЭДО - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Число
//  * ФиксированныеМеткиВремени - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Булево
Функция ОбновитьДокументыЭДОПоДаннымСинхронизации(ДанныеСинхронизацииДокументовЭДО, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументыЭДО", Новый Массив);
	Результат.Вставить("МеткиВремениПоИдентификаторамЭДО", Новый Соответствие);
	Результат.Вставить("ФиксированныеМеткиВремени", Новый Соответствие);
	
	Если Не ЗначениеЗаполнено(ДанныеСинхронизацииДокументовЭДО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Синхронизация документов с облачным ЭДО'");
	ДокументыЭДО = Результат.ДокументыЭДО;
	МеткиВремениПоИдентификаторамЭДО = Результат.МеткиВремениПоИдентификаторамЭДО;
	ФиксированныеМеткиВремени = Результат.ФиксированныеМеткиВремени;
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ДокументыЭДО;
	
	Для Каждого ДанныеСинхронизацииДокументаЭДО Из ДанныеСинхронизацииДокументовЭДО Цикл
		
		СостояниеСинхронизации = ДанныеСинхронизацииДокументаЭДО.СостояниеСинхронизации;
		ИдентификаторЭДО = СостояниеСинхронизации.ИдентификаторЭДО;
		ЕстьОшибкаОбновления = Ложь;
		
		Попытка
			
			ОписаниеДокументаЭДО = ДанныеСинхронизацииДокументаЭДО.ОписаниеДокументаЭДО;
			ДокументЭДО = ОбновитьДокументЭДО(ОписаниеДокументаЭДО);
			Если ЗначениеЗаполнено(ДокументЭДО) Тогда
				ДокументыЭДО.Добавить(ДокументЭДО);
			КонецЕсли;
			
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьСостояние(
				ТипДанных, СостояниеСинхронизации);
			
			МеткаВремени = МеткиВремениПоИдентификаторамЭДО[ИдентификаторЭДО];
			Если ФиксированныеМеткиВремени[ИдентификаторЭДО] = Неопределено
				И (МеткаВремени = Неопределено
				Или МеткаВремени < СостояниеСинхронизации.МеткаВремени) Тогда
				МеткиВремениПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО,
					СостояниеСинхронизации.МеткаВремени);
			КонецЕсли;
			
		Исключение
			ЕстьОшибкаОбновления = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось синхронизировать электронный документ с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
		Если Не ЕстьОшибкаОбновления Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьОшибку(
				ТипДанных, ДанныеСинхронизацииДокументаЭДО.СостояниеСинхронизации, ТекстОшибкиПодробно);
		Исключение
			ФиксированныеМеткиВремени.Вставить(ИдентификаторЭДО, Истина);
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зафиксировать ошибку при синхронизации электронного документа с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизацииДокументовЭДО - Массив из см. НовыеДанныеСинхронизацииДокументаЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ОбновитьДокументыЭДОПоДаннымСинхронизации
Функция ОбновитьДокументыЭДОПоДаннымСинхронизацииПриЗагрузке(ДанныеСинхронизацииДокументовЭДО, РезультатДействий, КонтекстДиагностики) Экспорт
	
	РезультатОбновления = ОбновитьДокументыЭДОПоДаннымСинхронизации(
		ДанныеСинхронизацииДокументовЭДО, КонтекстДиагностики);
	
	ДокументыЭДО = РезультатОбновления.ДокументыЭДО;
	
	Итог = РезультатДействий.Итог;
	Обработано = Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Загрузить];
	Если Обработано = Неопределено Тогда
		Обработано = 0;
	КонецЕсли;
	
	ОбработанныеДокументы = Итог.ОбработанныеДокументы;
	Успешные = Итог.РезультатыОтправкиПолучения.Успешные;
	
	Для Каждого ДокументЭДО Из ДокументыЭДО Цикл
		ОбработанныеДокументы.Вставить(ДокументЭДО, Истина);
		Обработано = Обработано + 1;
		Успешные.Добавить(ДокументЭДО);
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Перечисления.ДействияПоЭДО.Загрузить, Обработано);
	
	Возврат РезультатОбновления;
	
КонецФункции

#КонецОбласти

#Область Утвердить

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаУтвержденияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода =  ОписаниеМетодаУтвердитьДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаУтвержденияДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаУтвердитьДокументыЭДО(ИдентификаторыДокументовЭДО)
	Возврат  ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"УтвердитьДокументыЭДО", ИдентификаторыДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаУтвержденияДокументовЭДО()
	Возврат "Утвердить";
КонецФункции

// Параметры:
//  РезультатУтверждения - см. СервисОблачногоЭДО.НовыйРезультатМетодаУтвердитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаУтвержденияДокументовЭДО(РезультатУтверждения, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатУтверждения, РезультатДействий,
		Перечисления.ДействияПоЭДО.Утвердить);
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьПодписание

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - см. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметрыДействия = ПараметрыОперации.ДополнительныеПараметрыДействий[
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание];
	Комментарий = ?(ДополнительныеПараметрыДействия <> Неопределено, ДополнительныеПараметрыДействия.Комментарий, "");
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеМетода = ОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО, Комментарий);
	ИдентификаторМетода = ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклоненияПодписанияДокументовЭДО(ИдентификаторыДокументовЭДО, Комментарий)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтклонитьПодписаниеДокументовЭДО", ИдентификаторыДокументовЭДО, Комментарий);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияПодписанияДокументовЭДО()
	Возврат "ОтклонитьПодписание";
КонецФункции

// Параметры:
//  РезультатОтклоненияПодписания - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьПодписаниеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияПодписанияДокументовЭДО(РезультатОтклоненияПодписания, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклоненияПодписания, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
КонецПроцедуры

#КонецОбласти

#Область Аннулировать

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметрыДействия = ПараметрыОперации.ДополнительныеПараметрыДействий[Перечисления.ДействияПоЭДО.Аннулировать];
	Комментарий = ?(ДополнительныеПараметрыДействия <> Неопределено, ДополнительныеПараметрыДействия.Комментарий, "");
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеМетода = ОписаниеМетодаАннулироватьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий);
	ИдентификаторМетода = ИдентификаторМетодаАннулированияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаАннулироватьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"АннулироватьДокументыЭДО", ИдентификаторыДокументовЭДО, Комментарий);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаАннулированияДокументовЭДО()
	Возврат "Аннулировать";
КонецФункции

// Параметры:
//  РезультатАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаАннулироватьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаАннулированияДокументовЭДО(РезультатАннулирования, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.Аннулировать);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятьАннулирование

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПринятияАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаПринятьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаПринятияАннулированияДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПринятьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПринятьАннулированиеДокументовЭДО", ИдентификаторыДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПринятияАннулированияДокументовЭДО()
	Возврат "ПринятьАннулирование";
КонецФункции

// Параметры:
//  РезультатПринятияАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаПринятьАннулированиеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПринятияАннулированияДокументовЭДО(РезультатПринятияАннулирования, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатПринятияАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
КонецПроцедуры

#КонецОбласти

#Область ОтклонитьАннулирование

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - см. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияАннулированияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметрыДействия = ПараметрыОперации.ДополнительныеПараметрыДействий[
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование];
	Комментарий = ?(ДополнительныеПараметрыДействия <> Неопределено, ДополнительныеПараметрыДействия.Комментарий, "");
	ОписаниеМетода = ОписаниеМетодаОтклонитьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО, Комментарий);
	ИдентификаторМетода = ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклонитьАннулированиеДокументовЭДО(ИдентификаторыДокументовЭДО, Комментарий = "")
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтклонитьАннулированиеДокументовЭДО", ИдентификаторыДокументовЭДО, Комментарий);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияАннулированияДокументовЭДО()
	Возврат "ОтклонитьАннулирование";
КонецФункции

// Параметры:
//  РезультатОтклоненияАннулирования - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьАннулированиеДокументовЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияАннулированияДокументовЭДО(РезультатОтклоненияАннулирования, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклоненияАннулирования, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
КонецПроцедуры

#КонецОбласти

#Область Отклонить

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтклоненияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметрыДействия = ПараметрыОперации.ДополнительныеПараметрыДействий[Перечисления.ДействияПоЭДО.Отклонить];
	Комментарий = ?(ДополнительныеПараметрыДействия <> Неопределено, ДополнительныеПараметрыДействия.Комментарий, "");
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеМетода = ОписаниеМетодаОтклонитьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий);
	ИдентификаторМетода = ИдентификаторМетодаОтклоненияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтклонитьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтклонитьДокументыЭДО", ИдентификаторыДокументовЭДО, Комментарий);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтклоненияДокументовЭДО()
	Возврат "Отклонить";
КонецФункции

// Параметры:
//  РезультатОтклонения - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтклонитьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтклоненияДокументовЭДО(РезультатОтклонения, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтклонения, РезультатДействий,
		Перечисления.ДействияПоЭДО.Отклонить);
КонецПроцедуры

#КонецОбласти

#Область ОтправитьВАрхив

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаОтправкиВАрхивДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаОтправитьВАрхивДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаОтправкиВАрхивДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаОтправитьВАрхивДокументыЭДО(ИдентификаторыДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтправитьВАрхивДокументыЭДО", ИдентификаторыДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаОтправкиВАрхивДокументовЭДО()
	Возврат "ОтправитьВАрхив";
КонецФункции

// Параметры:
//  РезультатОтправкиВАрхив - см. СервисОблачногоЭДО.НовыйРезультатМетодаОтправитьВАрхивДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаОтправкиВАрхивДокументовЭДО(РезультатОтправкиВАрхив, РезультатДействий)
	
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатОтправкиВАрхив, РезультатДействий,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытьПринудительно

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаЗакрытияДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если Не ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметрыДействия = ПараметрыОперации.ДополнительныеПараметрыДействий[
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно];
	Комментарий = ?(ДополнительныеПараметрыДействия <> Неопределено, ДополнительныеПараметрыДействия.Комментарий, "");
	ОписаниеМетода = ОписаниеМетодаЗакрытьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий);
	ИдентификаторМетода = ИдентификаторМетодаЗакрытияДокументовЭДО();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
//  Комментарий - Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаЗакрытьДокументыЭДО(ИдентификаторыДокументовЭДО, Комментарий)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ЗакрытьДокументыЭДО", ИдентификаторыДокументовЭДО, Комментарий);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаЗакрытияДокументовЭДО()
	Возврат "Закрыть";
КонецФункции

// Параметры:
//  РезультатЗакрытия - см. СервисОблачногоЭДО.НовыйРезультатМетодаЗакрытьДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаЗакрытияДокументовЭДО(РезультатЗакрытия, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатЗакрытия, РезультатДействий,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
КонецПроцедуры

#КонецОбласти

#Область ВернутьВРаботу

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаВозвратаВРаботуДокументовЭДО(ПакетМетодов, ПараметрыОперации)
	ИдентификаторыДокументовЭДО = ПараметрыОперации.ОбъектыОперации.ИдентификаторыДокументовЭДО;
	Если ЗначениеЗаполнено(ИдентификаторыДокументовЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаВернутьВРаботуДокументыЭДО(ИдентификаторыДокументовЭДО);
		ИдентификаторМетода = ИдентификаторМетодаВозвратаВРаботуДокументовЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаВернутьВРаботуДокументыЭДО(ИдентификаторыДокументовЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ВернутьВРаботуДокументыЭДО", ИдентификаторыДокументовЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаВозвратаВРаботуДокументовЭДО()
	Возврат "ВернутьВРаботу";
КонецФункции

// Параметры:
//  РезультатВозвратаВРаботу - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ВернутьВРаботуДокументыЭДО
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаВозвратаВРаботуДокументовЭДО(РезультатВозвратаВРаботу, РезультатДействий)
	ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатВозвратаВРаботу, РезультатДействий,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
КонецПроцедуры

#КонецОбласти

#Область МаркерыАвторизации

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПолученияМаркеровАвторизации(ПакетМетодов, ПараметрыОперации)
	
	ОписаниеМетода = УчетныеЗаписиЭДОИнтеграцияОблака.ОписаниеМетодаПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО(
		ПараметрыОперации.ОтпечаткиСертификатов, ПараметрыОперации.ОбъектыОперации.ИдентификаторыЭДО);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода,
		ИдентификаторМетодаПолученияМаркеровАвторизации());
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПолученияМаркеровАвторизации()
	Возврат "МаркерыАвторизации"
КонецФункции

// Параметры:
//  РезультатПолучения - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО
//  РезультатДействий - См. НовыйРезультатДействийЭДО
Процедура ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатПолучения, РезультатДействий)
	
	Если Не ЗначениеЗаполнено(РезультатПолучения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеМаркеры = УчетныеЗаписиЭДОИнтеграцияОблака.ЗашифрованныеМаркерыИзМаркеровАвторизации(
		РезультатПолучения.ЗашифрованныеМаркеры);
	
	Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.ЗашифрованныеМаркеры,
			ЗашифрованныеМаркеры, Истина);
	Иначе
		РезультатДействий.ЗашифрованныеМаркеры = ЗашифрованныеМаркеры;
	КонецЕсли;
	
	ОбработатьОшибкиПолученияМаркеровАвторизации(РезультатПолучения.Ошибки, РезультатДействий);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторыЭДО - Массив из Строка
//  ОтпечаткиСертификатовПоИдентификаторамЭДО - см. ОтпечаткиДействующихСертификатовПоИдентификаторамЭДО
// 
// Возвращаемое значение:
//  Массив из Строка - отпечатки сертификатов
Функция ОтпечаткиСертификатовИдентификаторовЭДО(ИдентификаторыЭДО, ОтпечаткиСертификатовПоИдентификаторамЭДО)
	Результат = Новый Массив;
	
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		
		Отпечатки = ОтпечаткиСертификатовПоИдентификаторамЭДО.Получить(ИдентификаторЭДО);
		Если ЗначениеЗаполнено(Отпечатки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Отпечатки, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОтпечаткиСертификатовПоКонтекстам - См. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  ИдентификаторыЭДО - См. РегистрСведений.НастройкиОблачногоЭДО.ИдентификаторЭДО
// 
// Возвращаемое значение:
//  См. УчетныеЗаписиЭДО.ОтпечаткиДействующихСертификатовПоУчетнымЗаписям
//
Функция ОтпечаткиДействующихСертификатовПоИдентификаторамЭДО(ОтпечаткиСертификатовПоКонтекстам, ИдентификаторыЭДО)
	Результат = Новый Соответствие;
	Если Не ЗначениеЗаполнено(ОтпечаткиСертификатовПоКонтекстам) Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = УчетныеЗаписиЭДО.ОтпечаткиДействующихСертификатовПоУчетнымЗаписям(
		ОтпечаткиСертификатовПоКонтекстам, 
		ИдентификаторыЭДО);
	
	Возврат Результат;
КонецФункции

// Параметры:
//  Ошибки - Неопределено,Массив из Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура:
//             * ИдентификаторУчетнойЗаписиЭДО - Строка
//             * Тип - Строка
//             * Текст - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
Процедура ОбработатьОшибкиПолученияМаркеровАвторизации(Ошибки, РезультатДействий)
	
	Если Не ЗначениеЗаполнено(Ошибки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеУчетныеЗаписи = РезультатДействий.Итог.ОбработанныеУчетныеЗаписи;
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		ОбработаннаяУчетнаяЗапись = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
		ОбработаннаяУчетнаяЗапись.Идентификатор = Ошибка.ИдентификаторУчетнойЗаписиЭДО;
		ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
		ИнформацияОбОшибке.ПодробноеПредставление.Текст = Ошибка.Текст;
		
		Если Ошибка.Тип = ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступныхСертификатов() Тогда
			ИнформацияОбОшибке.ВидОшибки =
				ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступныхСертификатов();
			ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Нет доступных сертификатов'");
		ИначеЕсли Ошибка.Тип = ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам() Тогда
			ИнформацияОбОшибке.ВидОшибки =
				ДиагностикаЭДОКлиентСервер.ВидОшибкиОтправкиИПолученияНетДоступаКСертификатам();
			ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Нет доступа к сертификатам учетной записи'");
		Иначе
			ИнформацияОбОшибке.КраткоеПредставление =
				НСтр("ru = 'Ошибка получение маркера доступа по учетной записи'");
		КонецЕсли;
		
		ОбработанныеУчетныеЗаписи.Вставить(Ошибка.ИдентификаторУчетнойЗаписиЭДО, ОбработаннаяУчетнаяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ОбработкаДействийПоЭДО

#Область КонвертацияИсходящихДанных

// Возвращаемое значение:
//  Структура:
//  * Отправитель - См. НовыйКлючУчастникаОблачногоЭДО
//  * Получатель - Неопределено
//               - См. НовыйКлючУчастникаОблачногоЭДО
//  * Договор - Неопределено
//            - См. НовыйКлючДоговораОблачногоЭДО
//  * ВидДокумента - См. НовыйКлючВидаДокументаОблачногоЭДО
Функция НовыйКлючНастройкиВФорматеСервиса()
	Ключ = Новый Структура;
	Ключ.Вставить("Отправитель", Новый Структура);
	Ключ.Вставить("Получатель", Неопределено);
	Ключ.Вставить("Договор", Неопределено);
	Ключ.Вставить("ВидДокумента", Новый Структура);
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * ИНН - Строка
// * КПП - Строка
Функция НовыйКлючУчастникаОблачногоЭДО()
	Ключ = Новый Структура;
	Ключ.Вставить("ИНН", "");
	Ключ.Вставить("КПП", "");
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Наименование - Строка
// * ТипДокумента - Строка
Функция НовыйКлючВидаДокументаОблачногоЭДО()
	Ключ = Новый Структура;
	Ключ.Вставить("Наименование", "");
	Ключ.Вставить("ТипДокумента", "");
	Возврат Ключ;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор     - Строка
//  * Отправитель       - См. НовыйКлючУчастникаОблачногоЭДО
//  * Получатель        - См. НовыйКлючУчастникаОблачногоЭДО
//  * ВидДокумента      - См. НовыйКлючВидаДокументаОблачногоЭДО
//  * ИдентификаторОтправителя - Строка
//  * ИдентификаторПолучателя - Строка
//  * ТребуетсяОтветнаяПодпись - Булево
//  * ТребуетсяИзвещениеОПолучении - Булево
//  * Формат            - Строка - формат, в который конвертируются учетные данные.
//  * УчетныеДанные     - Структура:
//  ** Данные - См. ДеревоУчетныхДанныхВСтруктуру
//  ** Формат - Строка - формат учетных данных.
Функция НовыеДанныеДляФормированияДокументаВОблачномЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("Отправитель", Новый Структура);
	Данные.Вставить("Получатель", Новый Структура);
	Данные.Вставить("ВидДокумента", Новый Структура);
	Данные.Вставить("ИдентификаторОтправителя", "");
	Данные.Вставить("ИдентификаторПолучателя", "");
	Данные.Вставить("ТребуетсяОтветнаяПодпись", Ложь);
	Данные.Вставить("ТребуетсяИзвещениеОПолучении", Ложь);
	Данные.Вставить("Формат", "");
	Данные.Вставить("УчетныеДанные", Новый Структура);
	Данные.УчетныеДанные.Вставить("Данные", Новый Структура);
	Данные.УчетныеДанные.Вставить("Формат", "");
	Возврат Данные;
КонецФункции

// Параметры:
//  ОбщиеРеквизитыДокументов - ТаблицаЗначений,Массив из Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовыйКлючНастройкиВФорматеСервиса
Функция КлючиНастроекВФорматеСервиса(ОбщиеРеквизитыДокументов)
	
	Результат = Новый Массив; // см. КлючиНастроекВФорматеСервиса
	
	Организации = Новый Массив;
	Контрагенты = Новый Массив;
	ВидыДокументов = Новый Массив;
	
	Для Каждого РеквизитыДокумента Из ОбщиеРеквизитыДокументов Цикл
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Организации, РеквизитыДокумента.Организация);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(Контрагенты, РеквизитыДокумента.Контрагент);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(ВидыДокументов, РеквизитыДокумента.ВидДокумента);
	КонецЦикла;
	
	КлючевыеРеквизитыОрганизаций = ИнтеграцияЭДО.КлючевыеРеквизитыОрганизаций(Организации);
	КлючевыеРеквизитыКонтрагентов = ИнтеграцияЭДО.КлючевыеРеквизитыКонтрагентов(Контрагенты);
	
	РеквизитыВидовДокументов = РеквизитыВидовДокументовДляКонвертацииВФорматСервиса(ВидыДокументов);
	
	Для Каждого РеквизитыДокумента Из ОбщиеРеквизитыДокументов Цикл
		
		КлючНастройкиВФорматеСервиса = НовыйКлючНастройкиВФорматеСервиса();
		
		РеквизитыОрганизации = КлючевыеРеквизитыОрганизаций.Найти(РеквизитыДокумента.Организация, "Ссылка");
		Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
			КлючНастройкиВФорматеСервиса.Отправитель = НовыйКлючУчастникаОблачногоЭДО();
			ЗаполнитьЗначенияСвойств(КлючНастройкиВФорматеСервиса.Отправитель, РеквизитыОрганизации);
		КонецЕсли;
		
		РеквизитыКонтрагента = КлючевыеРеквизитыКонтрагентов.Найти(РеквизитыДокумента.Контрагент, "Ссылка");
		Если ЗначениеЗаполнено(РеквизитыКонтрагента) Тогда
			КлючНастройкиВФорматеСервиса.Получатель = НовыйКлючУчастникаОблачногоЭДО();
			ЗаполнитьЗначенияСвойств(КлючНастройкиВФорматеСервиса.Получатель, РеквизитыКонтрагента);
		КонецЕсли;
		
		КлючВидаДокумента = НовыйКлючВидаДокументаОблачногоЭДО();
		РеквизитыВидаДокумента = РеквизитыВидовДокументов[РеквизитыДокумента.ВидДокумента];
		КлючВидаДокумента.Наименование = РеквизитыВидаДокумента.Наименование;
		КлючВидаДокумента.ТипДокумента = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыВидаДокумента.ТипДокумента);
		КлючНастройкиВФорматеСервиса.ВидДокумента = КлючВидаДокумента;
		
		Результат.Добавить(КлючНастройкиВФорматеСервиса);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ВидыДокументов - Массив из СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.ВидыДокументовЭДО
//  * Значение - Структура:
//  ** Наименование - Строка
//  ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция РеквизитыВидовДокументовДляКонвертацииВФорматСервиса(ВидыДокументов)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДокументов, "Наименование, ТипДокумента");
КонецФункции

#КонецОбласти

#Область КонвертацияВходящихДанных

// Параметры:
//  ВидыДокументовВФорматеСервиса - Массив из Структура:
//  * Наименование - Строка
//  * ТипДокумента - Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - СправочникСсылка.ВидыДокументовЭДО
Функция ВидыДокументовИзФорматаСервиса(ВидыДокументовВФорматеСервиса)
	ИменаТиповДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ВидыДокументовВФорматеСервиса, "ТипДокумента");
	Возврат ЭлектронныеДокументыЭДО.ВидыДокументовПоИменамСтандартныхТипов(ИменаТиповДокументов);
КонецФункции

// Параметры:
//  ВидыДокументовИзФорматаСервиса - См. ВидыДокументовИзФорматаСервиса
//  ВидДокументаВФорматеСервиса - См. НовыйВидДокументаВФорматеСервиса
// 
// Возвращаемое значение:
//  Неопределено,СправочникСсылка.ВидыДокументовЭДО
Функция ВидДокументаИзОтбораПоФорматуСервиса(ВидыДокументовИзФорматаСервиса, ВидДокументаВФорматеСервиса)
	Возврат ВидыДокументовИзФорматаСервиса[ВидДокументаВФорматеСервиса.ТипДокумента];
КонецФункции

// Параметры:
//  ИменаСостоянийДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция СостоянияДокументовПоИменам(ИменаСостоянийДокументов)
	
	Результат = Новый Соответствие;
	
	МетаданныеСостоянийДокументовЭДО = Метаданные.Перечисления.СостоянияДокументовЭДО;
	
	Для Каждого ИмяСостояния Из ИменаСостоянийДокументов Цикл
		Состояние = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ИмяСостояния, МетаданныеСостоянийДокументовЭДО);
		Результат.Вставить(ИмяСостояния, Состояние);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументов - Массив из Строка
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор документа.
//  * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписанияДокументовВФорматеСервиса - Массив из см. ЭлектронныеДокументыЭДОВОблаке.НовоеОписаниеДокументаЭДО
//  ДокументыПоИдентификаторам - Неопределено
//                             - см. ДокументыПоИдентификаторамСервиса
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеДокументаЭДО
Функция ОписанияДокументовИзФорматаСервиса(ОписанияДокументовВФорматеСервиса)
	
	ОписанияДокументов = Новый Массив; // см. ОписанияДокументовИзФорматаСервиса
	
	ОрганизацииВФорматеСервиса = Новый Массив;
	КонтрагентыВФорматеСервиса = Новый Массив;
	ВидыДокументовВФорматеСервиса = Новый Массив;
	СостоянияДокументовВФорматеСервиса = Новый Массив;
	
	Для Каждого ОписаниеДокументаВФорматеСервиса Из ОписанияДокументовВФорматеСервиса Цикл
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(ОрганизацииВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Организация);
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(КонтрагентыВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.Контрагент);
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(ВидыДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		ОбщегоНазначенияБЭД.ДобавитьУникальноеЗначение(СостоянияДокументовВФорматеСервиса, ОписаниеДокументаВФорматеСервиса.ИмяСостояния);
	КонецЦикла;
	
	ОрганизацииПоРеквизитам = ИнтеграцияЭДО.ОрганизацииПоКлючевымРеквизитам(ОрганизацииВФорматеСервиса);
	КонтрагентыПоРеквизитам = ИнтеграцияЭДО.КонтрагентыПоКлючевымРеквизитам(КонтрагентыВФорматеСервиса);
	ВидыДокументовИзФорматаСервиса = ВидыДокументовИзФорматаСервиса(ВидыДокументовВФорматеСервиса);
	СостоянияДокументовПоИменам = СостоянияДокументовПоИменам(СостоянияДокументовВФорматеСервиса);
	
	МетаданныеПеречисленияСпособыОбмена = Метаданные.Перечисления.СпособыОбменаЭД;
	МетаданныеПеречисленияТипыРегламентовЭДО = Метаданные.Перечисления.ТипыРегламентовЭДО;
	
	Для Каждого ОписаниеДокументаВФорматеСервиса Из ОписанияДокументовВФорматеСервиса Цикл
		
		Организация = ИнтеграцияЭДО.ОрганизацияИзОтбораПоКлючевымРеквизитам(
			ОрганизацииПоРеквизитам, ОписаниеДокументаВФорматеСервиса.Организация);
		Контрагент = ИнтеграцияЭДО.КонтрагентИзОтбораПоКлючевымРеквизитам(
			КонтрагентыПоРеквизитам, ОписаниеДокументаВФорматеСервиса.Контрагент);
		ВидДокумента = ВидДокументаИзОтбораПоФорматуСервиса(ВидыДокументовИзФорматаСервиса,
			ОписаниеДокументаВФорматеСервиса.ВидДокумента);
		Состояние = СостоянияДокументовПоИменам[ОписаниеДокументаВФорматеСервиса.ИмяСостояния];
		
		ОписаниеДокументаЭДО = НовоеОписаниеДокументаЭДО();
		ОписаниеДокументаЭДО.ЭтоВходящийЭДО = ОписаниеДокументаВФорматеСервиса.ЭтоВходящийЭДО;
		ОписаниеДокументаЭДО.Идентификатор = ОписаниеДокументаВФорматеСервиса.Идентификатор;
		ОписаниеДокументаЭДО.Формат = ОписаниеДокументаВФорматеСервиса.Формат;
		
		ОписаниеДокументаЭДО.ТребуетсяИзвещение = ОписаниеДокументаВФорматеСервиса.ТребуетсяИзвещение;
		ОписаниеДокументаЭДО.ТребуетсяПодтверждение = ОписаниеДокументаВФорматеСервиса.ТребуетсяПодтверждение;
		ОписаниеДокументаЭДО.ИдентификаторОрганизации = ОписаниеДокументаВФорматеСервиса.ИдентификаторОрганизации;
		ОписаниеДокументаЭДО.ИдентификаторКонтрагента = ОписаниеДокументаВФорматеСервиса.ИдентификаторКонтрагента;
		ОписаниеДокументаЭДО.ИдентификаторДокументооборота = ОписаниеДокументаВФорматеСервиса.ИдентификаторДокументооборота;
		ОписаниеДокументаЭДО.МаршрутПодписания = МаршрутыПодписанияБЭД.МаршрутОднойДоступнойПодписью();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОписаниеДокументаЭДО.Организация = Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ОписаниеДокументаЭДО.Контрагент = Контрагент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ОписаниеДокументаЭДО.ВидДокумента = ВидДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Номер) Тогда
			ОписаниеДокументаЭДО.Номер = ОписаниеДокументаВФорматеСервиса.Номер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Дата) Тогда
			ОписаниеДокументаЭДО.Дата = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаАннулирования) Тогда
			ОписаниеДокументаЭДО.ДатаАннулирования =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаАннулирования);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаПодписания) Тогда
			ОписаниеДокументаЭДО.ДатаПодписания =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаПодписания);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаОтправкиПолучения) Тогда
			ОписаниеДокументаЭДО.ДатаОтправкиПолучения =
				ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеДокументаВФорматеСервиса.ДатаОтправкиПолучения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.Сумма) Тогда
			ОписаниеДокументаЭДО.Сумма = ОписаниеДокументаВФорматеСервиса.Сумма;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.СпособОбмена) Тогда
			ОписаниеДокументаЭДО.СпособОбмена = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ОписаниеДокументаВФорматеСервиса.СпособОбмена, МетаданныеПеречисленияСпособыОбмена);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ТипРегламента) Тогда
			ОписаниеДокументаЭДО.ТипРегламента = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
				ОписаниеДокументаВФорматеСервиса.ТипРегламента, МетаданныеПеречисленияТипыРегламентовЭДО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Состояние) Тогда
			ОписаниеДокументаЭДО.Состояние = Состояние;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.СостояниеДополнение) Тогда
			ОписаниеДокументаЭДО.СостояниеДополнение = ОписаниеДокументаВФорматеСервиса.СостояниеДополнение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния) Тогда
			ОписаниеДокументаЭДО.ДатаИзмененияСостояния = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
				ОписаниеДокументаВФорматеСервиса.ДатаИзмененияСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.КомментарийСостояния) Тогда
			ОписаниеДокументаЭДО.КомментарийСостояния = ОписаниеДокументаВФорматеСервиса.КомментарийСостояния;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДокументаВФорматеСервиса.ИдентификаторПакета) Тогда
			ОписаниеДокументаЭДО.ИдентификаторПакета = Новый УникальныйИдентификатор(
				ОписаниеДокументаВФорматеСервиса.ИдентификаторПакета);
		КонецЕсли;
		
		ОписанияДокументов.Добавить(ОписаниеДокументаЭДО);
		
	КонецЦикла;
	
	Возврат ОписанияДокументов;
	
КонецФункции

// Параметры:
//  ОписанияСостоянийВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * ИмяСостояния - Строка
//  * СостояниеДополнение - Строка
//  * ДатаИзменения - Строка
//  * Комментарий - Строка
//  ДокументыПоИдентификаторам - Неопределено
//                             - Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеСостоянияДокументаЭДО
Функция ОписанияСостоянийДокументовИзФорматаСервиса(ОписанияСостоянийВФорматеСервиса, ДокументыПоИдентификаторам = Неопределено)
	
	Результат = Новый Массив; // см. ОписанияСостоянийДокументовИзФорматаСервиса
	
	Если ДокументыПоИдентификаторам = Неопределено Тогда
		ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(ОписанияСостоянийВФорматеСервиса,
			"ИдентификаторДокумента");
		ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	КонецЕсли;
	
	МетаданныеПеречисления = Метаданные.Перечисления.СостоянияДокументовЭДО;
	
	Для Каждого ОписаниеСостоянияВФорматеСервиса Из ОписанияСостоянийВФорматеСервиса Цикл
		ОписаниеСостоянияЭДО = НовоеОписаниеСостоянияДокументаЭДО();
		ОписаниеСостоянияЭДО.ЭлектронныйДокумент = ДокументыПоИдентификаторам[
			ОписаниеСостоянияВФорматеСервиса.ИдентификаторДокумента];
		СостояниеПоИмени = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			ОписаниеСостоянияВФорматеСервиса.ИмяСостояния, МетаданныеПеречисления); // ПеречислениеСсылка.СостоянияДокументовЭДО
		ОписаниеСостоянияЭДО.Состояние = СостояниеПоИмени;
		ОписаниеСостоянияЭДО.СостояниеДополнение = ОписаниеСостоянияВФорматеСервиса.СостояниеДополнение;
		ОписаниеСостоянияЭДО.ДатаИзменения = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ОписаниеСостоянияВФорматеСервиса.ДатаИзменения);
		ОписаниеСостоянияЭДО.Комментарий = ОписаниеСостоянияВФорматеСервиса.Комментарий;
		Результат.Добавить(ОписаниеСостоянияЭДО);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостояниеДополнение - Строка
//  * ДатаИзменения - Дата
//  * Комментарий - Строка
Функция НовоеОписаниеСостоянияДокументаЭДО()
	Описание = Новый Структура;
	Описание.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Описание.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Описание.Вставить("СостояниеДополнение", "");
	Описание.Вставить("ДатаИзменения", Дата(1, 1, 1));
	Описание.Вставить("Комментарий", "");
	Возврат Описание;
КонецФункции

// Параметры:
//  ОписанияДокументовЭДО - Массив из см. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументыЭДО(ОписанияДокументовЭДО)
	
	ОбновленныеДокументы = Новый Массив; // см. ОбновитьДокументыЭДО
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовЭДО Цикл
		
		ДокументЭДО = ОбновитьДокументЭДО(ОписаниеДокумента);
		Если ЗначениеЗаполнено(ДокументЭДО) Тогда
			ОбновленныеДокументы.Добавить(ДокументЭДО);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ОбновленныеДокументы;
	
КонецФункции

// Параметры:
//  ОписанияДокументовЭДО - Массив из См. ЭлектронныеДокументыЭДОКлиентСервер.НовоеОписаниеДокументаДляФормированияПоФайлам
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьДокументыЭДОПоФайлам(ОписанияДокументовЭДО)
	
	ОбновленныеДокументы = Новый Массив; // см. ОбновитьДокументыЭДО
	
	Для Каждого ОписаниеДокумента Из ОписанияДокументовЭДО Цикл
		
		ДокументЭДО = ОбновитьДокументЭДОПоФайлам(ОписаниеДокумента);
		Если ЗначениеЗаполнено(ДокументЭДО) Тогда
			ОбновленныеДокументы.Добавить(ДокументЭДО);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ОбновленныеДокументы;
	
КонецФункции

// Параметры:
//  ИдентификаторДокумента - Строка
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НайтиДокументПоИдентификаторуОблачногоЭДО(ИдентификаторДокумента, ЭтоВходящийЭДО)
	Если ЭтоВходящийЭДО Тогда
		Возврат Документы.ЭлектронныйДокументВходящийЭДО.НайтиПоРеквизиту("ИдентификаторДокумента", ИдентификаторДокумента);
	Иначе
		Возврат Документы.ЭлектронныйДокументИсходящийЭДО.НайтиПоРеквизиту("ИдентификаторДокумента", ИдентификаторДокумента);
	КонецЕсли;
КонецФункции

// Параметры:
//  ДокументОбъект - ДокументОбъект.ЭлектронныйДокументВходящийЭДО,ДокументОбъект.ЭлектронныйДокументИсходящийЭДО
//  ОписаниеДокументаЭДО - см. НовоеОписаниеДокументаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьИзмененияДокументаЭДО(ДокументОбъект, ОписаниеДокументаЭДО)
	
	ОписаниеДокументаЭДО.Организация = Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение(
		ОписаниеДокументаЭДО.Организация);
	ОписаниеДокументаЭДО.Контрагент = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение(
		ОписаниеДокументаЭДО.Контрагент);
	ОписаниеДокументаЭДО.Договор = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентомЭДО.Тип.ПривестиЗначение(
		ОписаниеДокументаЭДО.Договор);
	
	Если ДокументОбъект.ЭтоНовый()
		ИЛИ ДокументОбъект.ИдентификаторДокумента <> ОписаниеДокументаЭДО.Идентификатор
		ИЛИ ДокументОбъект.ВидДокумента <> ОписаниеДокументаЭДО.ВидДокумента
		ИЛИ ДокументОбъект.Организация <> ОписаниеДокументаЭДО.Организация
		ИЛИ ДокументОбъект.Контрагент <> ОписаниеДокументаЭДО.Контрагент
		ИЛИ ДокументОбъект.ДоговорКонтрагента <> ОписаниеДокументаЭДО.Договор
		ИЛИ ДокументОбъект.НомерДокумента <> ОписаниеДокументаЭДО.Номер
		ИЛИ ДокументОбъект.ДатаДокумента <> ОписаниеДокументаЭДО.Дата
		ИЛИ ДокументОбъект.ДатаАннулирования <> ОписаниеДокументаЭДО.ДатаАннулирования
		ИЛИ ДокументОбъект.ДатаПодписания <> ОписаниеДокументаЭДО.ДатаПодписания
		ИЛИ (ОписаниеДокументаЭДО.ЭтоВходящийЭДО
			И ДокументОбъект.ДатаПолучения <> ОписаниеДокументаЭДО.ДатаОтправкиПолучения)
		ИЛИ (Не ОписаниеДокументаЭДО.ЭтоВходящийЭДО
			И ДокументОбъект.ДатаОтправки <> ОписаниеДокументаЭДО.ДатаОтправкиПолучения)
		ИЛИ ДокументОбъект.СуммаДокумента <> ОписаниеДокументаЭДО.Сумма
		ИЛИ ДокументОбъект.СпособОбмена <> ОписаниеДокументаЭДО.СпособОбмена
		ИЛИ ДокументОбъект.ТипРегламента <> ОписаниеДокументаЭДО.ТипРегламента
		ИЛИ ДокументОбъект.ТребуетсяИзвещение <> ОписаниеДокументаЭДО.ТребуетсяИзвещение
		ИЛИ ДокументОбъект.ТребуетсяПодтверждение <> ОписаниеДокументаЭДО.ТребуетсяПодтверждение
		ИЛИ ДокументОбъект.ИдентификаторОрганизации <> ОписаниеДокументаЭДО.ИдентификаторОрганизации
		ИЛИ ДокументОбъект.ИдентификаторКонтрагента <> ОписаниеДокументаЭДО.ИдентификаторКонтрагента
		ИЛИ ДокументОбъект.ИдентификаторДокументооборота <> ОписаниеДокументаЭДО.ИдентификаторДокументооборота Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ОписанияСостоянийДокументовЭДО - Массив из см. НовоеОписаниеСостоянияДокументаЭДО
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийДокументовЭДО)
	
	ОбновленныеДокументыЭДО = Новый Массив; // см. ОбновитьСостоянияДокументовЭДО
	
	Если Не ЗначениеЗаполнено(ОписанияСостоянийДокументовЭДО) Тогда
		Возврат ОбновленныеДокументыЭДО;
	КонецЕсли;
	
	Для Каждого ОписаниеСостоянияДокументаЭДО Из ОписанияСостоянийДокументовЭДО Цикл
		
		Если ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияДокументаЭДО) Тогда
			ОбновленныеДокументыЭДО.Добавить(ОписаниеСостоянияДокументаЭДО.ЭлектронныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбновленныеДокументыЭДО;
	
КонецФункции

// Параметры:
//  ОписаниеСостоянияЭДО - см. НовоеОписаниеСостоянияДокументаЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ОбновитьСостояниеДокументаЭДО(ОписаниеСостоянияЭДО)
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.СостоянияДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ОписаниеСостоянияЭДО.ЭлектронныйДокумент);
	
	Если Не ЗначениеЗаполнено(ОписаниеСостоянияЭДО.ДатаИзменения) Тогда
		ОписаниеСостоянияЭДО.ДатаИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ОписаниеСостоянияЭДО.ЭлектронныйДокумент;
		КонецЕсли;
		
		Если ОписаниеСостоянияЭДО.ДатаИзменения < Запись.ДатаИзменения Тогда
			ЗафиксироватьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		Запись.Состояние = ОписаниеСостоянияЭДО.Состояние;
		Запись.СостояниеДополнение = ОписаниеСостоянияЭДО.СостояниеДополнение;
		Запись.ДатаИзменения = ОписаниеСостоянияЭДО.ДатаИзменения;
		Запись.Комментарий = ОписаниеСостоянияЭДО.Комментарий;
		
		Набор.Записать();
		
		ИнтеграцияЭДО.ОбновитьСостояниеЭлектронногоДокументаОбъектовУчета(ОписаниеСостоянияЭДО.ЭлектронныйДокумент);
		
		Результат = Истина;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РезультатМетода - Структура:
//  * Ошибки - Неопределено
//           - Массив из Структура
//  * СостоянияДокументовЭДО - Массив из Структура:
//  ** ИдентификаторДокумента - Строка
//  ** ИмяСостояния - Строка
//  ** СостояниеДополнение - Строка
//  ** ДатаИзменения - Строка
//  ** Комментарий - Строка
//  РезультатДействий - см. НовыйРезультатДействийЭДО
//  Действие - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. ОбновитьСостоянияДокументовЭДО
Функция ОбновитьСостоянияДокументовИРезультатыДействийПоЭДО(РезультатМетода, РезультатДействий, Действие)
	
	ОписанияСостоянийЭДО = ОписанияСостоянийДокументовИзФорматаСервиса(РезультатМетода.СостоянияДокументовЭДО);
	
	ОбновленныеДокументыЭДО = ОбновитьСостоянияДокументовЭДО(ОписанияСостоянийЭДО);
	
	Итог = РезультатДействий.Итог;
	Обработано = 0;
	Для Каждого ДокументЭДО Из ОбновленныеДокументыЭДО Цикл
		Итог.ОбработанныеДокументы.Вставить(ДокументЭДО, Истина);
		Обработано = Обработано + 1;
	КонецЦикла;
	
	Итог.ОбработаноПоДействиям.Вставить(Действие, Обработано);
	
	Возврат ОбновленныеДокументыЭДО;
	
КонецФункции

// Параметры:
//  НаправлениеВФорматеСервиса - Строка
//  МетаданныеНаправленияЭДО - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НаправленияЭДО
Функция НаправлениеИзФорматаСервиса(НаправлениеВФорматеСервиса, МетаданныеНаправленияЭДО = Неопределено) Экспорт
	
	Если МетаданныеНаправленияЭДО = Неопределено Тогда
		МетаданныеНаправленияЭДО = Метаданные.Перечисления.НаправленияЭДО;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(НаправлениеВФорматеСервиса, МетаданныеНаправленияЭДО);
	
КонецФункции

// Параметры:
//  ТипДокументаВФорматеСервиса - Строка
//  МетаданныеТипыДокументовЭДО - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыДокументовЭДО
Функция ТипДокументаИзФорматаСервиса(ТипДокументаВФорматеСервиса, МетаданныеТипыДокументовЭДО = Неопределено)
	
	Если  МетаданныеТипыДокументовЭДО = Неопределено Тогда
		МетаданныеТипыДокументовЭДО = Метаданные.Перечисления.ТипыДокументовЭДО;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ТипДокументаВФорматеСервиса, МетаданныеТипыДокументовЭДО);
	
КонецФункции

// Параметры:
//  ТипЭлементаРегламентаВФорматеСервиса - Строка
//  МетаданныеТипыЭлементовРегламентаЭДО - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
Функция ТипЭлементаРегламентаИзФорматаСервиса(ТипЭлементаРегламентаВФорматеСервиса,
	МетаданныеТипыЭлементовРегламентаЭДО = Неопределено)
	
	Если МетаданныеТипыЭлементовРегламентаЭДО = Неопределено Тогда
		МетаданныеТипыЭлементовРегламентаЭДО = Метаданные.Перечисления.ТипыЭлементовРегламентаЭДО;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ТипЭлементаРегламентаВФорматеСервиса,
		МетаданныеТипыЭлементовРегламентаЭДО);
	
КонецФункции

// Параметры:
//  СтатусСообщенияВФорматеСервиса - Строка
//  МетаданныеСтатусыСообщенийЭДО - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыСообщенийЭДО
Функция СтатусСообщенияИзФорматаСервиса(СтатусСообщенияВФорматеСервиса, МетаданныеСтатусыСообщенийЭДО = Неопределено)
	
	Если МетаданныеСтатусыСообщенийЭДО = Неопределено Тогда
		МетаданныеСтатусыСообщенийЭДО = Метаданные.Перечисления.СтатусыСообщенийЭДО;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(СтатусСообщенияВФорматеСервиса, МетаданныеСтатусыСообщенийЭДО);
	
КонецФункции

#КонецОбласти

#Область КонвертацияДанных

#Область КонвертацияДереваДанныхВФорматСервис

// Параметры:
//  ДеревоУчетныхДанных - ДеревоЗначений
// 
// Возвращаемое значение:
//  Структура
Функция ДеревоУчетныхДанныхВСтруктуру(ДеревоУчетныхДанных)
	
	СтруктураУчетныхДанных = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ДеревоУчетныхДанных.Строки) Тогда
		Возврат СтруктураУчетныхДанных;
	КонецЕсли;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(СтруктураУчетныхДанных, ДеревоУчетныхДанных);
	
	Возврат СтруктураУчетныхДанных;
	
КонецФункции

// Параметры:
//  Свойства - Структура,Массив из Структура
//  СтрокаДереваРодитель - ДеревоЗначений,СтрокаДереваЗначений
Процедура ДобавитьСвойстваПоВложеннымСтрокамДерева(Свойства, СтрокаДереваРодитель)
	
	НаборСтрокРодителя = СтрокаДереваРодитель.Строки;
	
	Если НаборСтрокРодителя.Количество() Тогда
		
		Для Каждого СтрокаДерева Из НаборСтрокРодителя Цикл
			
			ДобавитьСвойстваПоСтрокеДерева(Свойства, СтрокаДерева);
			
		КонецЦикла;
		
	Иначе
		
		ДобавитьСвойствоВСтруктуруУчетныхДанных(Свойства, СтрокаДереваРодитель);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
Процедура ДобавитьСвойстваПоСтрокеДерева(Свойства, СтрокаДерева)
	
	ЭтоНомерСтрокиТаблицы = СтрЗаканчиваетсяНа(СтрокаДерева.ПолныйПуть, ".НомерСтроки");
	
	Если ЭтоНомерСтрокиТаблицы
		ИЛИ СтрокаДерева.Признак = "Группа"
		ИЛИ СтрокаДерева.Признак = "Выбор" Тогда
		
		ДобавитьГруппуСвойствПоВложеннымСтрокамДерева(Свойства, СтрокаДерева, ЭтоНомерСтрокиТаблицы);
		
	ИначеЕсли СтрокаДерева.Признак = "Таблица" Тогда
		
		ДобавитьНаборГруппПоВложеннымСтрокамДерева(Свойства, СтрокаДерева);
		
	Иначе
		
		ДобавитьСвойстваПоВложеннымСтрокамДерева(Свойства, СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура,Массив из Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
//  ЭтоНомерСтрокиТаблицы - Булево
Процедура ДобавитьГруппуСвойствПоВложеннымСтрокамДерева(Свойства, СтрокаДерева, ЭтоНомерСтрокиТаблицы)
	
	ГруппаСвойств = Новый Структура;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(ГруппаСвойств, СтрокаДерева);
	
	Если Не ЗначениеЗаполнено(ГруппаСвойств) Тогда
		Возврат;
	ИначеЕсли ЭтоНомерСтрокиТаблицы Тогда
		НаборСвойств = Свойства; // Массив
		НаборСвойств.Добавить(ГруппаСвойств);
	Иначе
		ГруппаСвойствВладелец = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойствВладелец.Вставить(ИмяСвойства, ГруппаСвойств);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - СтрокаДереваЗначений:
//  * ПолныйПуть - Строка
//  * Признак - Строка
Процедура ДобавитьНаборГруппПоВложеннымСтрокамДерева(Свойства, СтрокаДерева)
	
	НаборГрупп = Новый Массив;
	
	ДобавитьСвойстваПоВложеннымСтрокамДерева(НаборГрупп, СтрокаДерева);
	
	Если ЗначениеЗаполнено(НаборГрупп) Тогда
		ГруппаСвойств = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойств.Вставить(ИмяСвойства, НаборГрупп);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Свойства - Структура
//  СтрокаДерева - ДеревоЗначений,СтрокаДереваЗначений:
//  * Типы - Строка
//  * Значение - Строка,Число,ПеречислениеСсылка
Процедура ДобавитьСвойствоВСтруктуруУчетныхДанных(Свойства, СтрокаДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Значение)
		И СтрокаДерева.Значение <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЗначения = СтрокаДерева.Типы;
	
	Если   ТипыЗначения = "Строка"
		ИЛИ ТипыЗначения = "Число"
		ИЛИ ТипыЗначения = "Булево"
		ИЛИ ТипыЗначения = "Дата" Тогда
		ЗначениеСвойства = СтрокаДерева.Значение;
	ИначеЕсли СтрНачинаетсяС(ТипыЗначения, "ПеречислениеСсылка") Тогда
		ЗначениеСвойства = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.Значение);
	Иначе
		ТипЗначения = ТипЗнч(СтрокаДерева.Значение);
		Если   ТипЗначения = Тип("Строка")
			Или ТипЗначения = Тип("Число")
			Или ТипЗначения = Тип("Булево")
			Или ТипЗначения = Тип("Дата") Тогда
			ЗначениеСвойства = СтрокаДерева.Значение;
		ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
			ЗначениеСвойства = ОбщегоНазначения.ТаблицаЗначенийВМассив(СтрокаДерева.Значение);
		ИначеЕсли ТипЗначения = Тип("Соответствие")
			Или ТипЗначения = Тип("Структура") Тогда
			ЗначениеСвойства = СтрокаДерева.Значение;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеСвойства <> Неопределено Тогда
		ГруппаСвойств = Свойства; // Структура
		ИмяСвойства = ИмяСвойстваПоПолномуПути(СтрокаДерева.ПолныйПуть);
		ГруппаСвойств.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПолныйПуть - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСвойстваПоПолномуПути(ПолныйПуть)
	Позиция = СтрНайти(ПолныйПуть, ".", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Позиция = Позиция + 1;
	КонецЕсли;
	Возврат Сред(ПолныйПуть, Позиция);
КонецФункции

#КонецОбласти // КонвертацияДереваДанных

#Область КонвертацияДереваДанныхИзФорматаСервиса

// Параметры:
//  СтруктураДанных - Структура
//  ФорматДерева - Строка
// 
// Возвращаемое значение:
//  ДеревоЗначений
Функция ДеревоУчетныхДанныхИзСтруктуры(СтруктураДанных, ФорматДерева)
	
	ПутьКМакету = "ОбменСКонтрагентами." + ФорматДерева;
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента(ПутьКМакету);
	
	ЗагрузитьСтруктуруДанныхВСтрокуДерева(ДеревоДанных, СтруктураДанных);
	
	Возврат ДеревоДанных;
	
КонецФункции

// Параметры:
//  СтрокаДерева - ДеревоЗначений,СтрокаДереваЗначений
//  СтруктураДанных - Структура
Процедура ЗагрузитьСтруктуруДанныхВСтрокуДерева(СтрокаДерева, СтруктураДанных)
	
	ВложенныеСтроки = СтрокаДерева.Строки;
	Если Не ЗначениеЗаполнено(ВложенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПуть = "";
	Признак = "";
	Если ВложенныеСтроки[0].Родитель <> Неопределено Тогда
		ТекущийПуть = СтрокаДерева.ПолныйПуть + ".";
		Признак = СтрокаДерева.Признак;
	КонецЕсли;
	
	Если Признак = "Группа" Тогда
		СтрокаДерева.Значение = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ПолныйПуть = ТекущийПуть + ЭлементСтруктуры.Ключ;
		ТекущаяСтрока = ВложенныеСтроки.Найти(ПолныйПуть, "ПолныйПуть");
		Если ТекущаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Признак = "Выбор" Тогда
			СтрокаДерева.Значение = ЭлементСтруктуры.Ключ;
		КонецЕсли;
		
		Данные = ЭлементСтруктуры.Значение;
		ТипДанных = ТипЗнч(Данные);
		
		Если ТипДанных = Тип("Структура") Тогда
			
			ЗагрузитьСтруктуруДанныхВСтрокуДерева(ТекущаяСтрока, Данные);
			
		ИначеЕсли ТипДанных = Тип("Массив") Тогда
			
			ЗагрузитьНаборДанныхВСтрокуДерева(ТекущаяСтрока, Данные);
			
		Иначе
			
			ЗагрузитьДанныеВСтрокуДерева(ТекущаяСтрока, Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  НаборДанных - Массив из Структура
Процедура ЗагрузитьНаборДанныхВСтрокуДерева(СтрокаДерева, НаборДанных)
	
	Если СтрокаДерева.Признак <> "Таблица" Тогда
		Возврат;
	КонецЕсли;
	
	ВложенныеСтроки = СтрокаДерева.Строки;
	ПерваяСтрока = ВложенныеСтроки[0];
	
	НомерСтроки = 0;
	Для Каждого СтруктураДанных Из НаборДанных Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки = 1 Тогда
			ТекущаяСтрока = ПерваяСтрока;
		Иначе
			ТекущаяСтрока = ВложенныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПерваяСтрока);
			ДеревоЭлектронногоДокументаБЭД.СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекущаяСтрока, ПерваяСтрока);
		КонецЕсли;
		
		ТекущаяСтрока.Значение = НомерСтроки;
		
		ЗагрузитьСтруктуруДанныхВСтрокуДерева(ТекущаяСтрока, СтруктураДанных);
		
	КонецЦикла;
	
	СтрокаДерева.Значение = НомерСтроки;
	
КонецПроцедуры

// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  Данные - Строка,Число,Булево
Процедура ЗагрузитьДанныеВСтрокуДерева(СтрокаДерева, Данные)
	
	Если ЗначениеЗаполнено(СтрокаДерева.Признак) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Типы = "Дата" Тогда
		СтрокаДерева.Значение = ?(ЗначениеЗаполнено(Данные), ОбщегоНазначенияБЭД.ДатаИзФорматаISO(Данные), '00010101');
	Иначе
		СтрокаДерева.Значение = Данные;
	КонецЕсли;
	
	СтрокаДерева.ПараметрыОбработкиОбязательны = "Нет";
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДопДанных

// Параметры:
//  Данные - см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  Формат - Строка - формат документа (см. ФорматыЭДО.ПоддерживаемыеФорматы)
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Процедура ПривестиЗначенияДополнительныхДанныхОбъектаУчетаКСтрокеПоФормату(Данные, Формат, ТипДокумента)
	
	РазделыДополнительныхПолей = ФорматыЭДО.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
		ТипДокумента, Формат);
	Если Не ЗначениеЗаполнено(РазделыДополнительныхПолей) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РазделДополнительныхПолей Из РазделыДополнительныхПолей Цикл
		ПривестиЗначенияДополнительныхДанныхОбъектаУчетаКСтроке(Данные,
			РазделДополнительныхПолей.ПутьКРеквизитуДереваДопДанные);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Данные - см. ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента
//  ПолныйПуть - Строка
Процедура ПривестиЗначенияДополнительныхДанныхОбъектаУчетаКСтроке(Данные, ПолныйПуть)
	
	ДополнительныеДанные = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(Данные, ПолныйПуть, Истина);
	Если ДополнительныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Тип("Строка");
	ПолныйПутьСтрокиЗначения = ПолныйПуть + ".НомерСтроки.Значение";
	
	Для Каждого СтрокаДополнительныхДанных Из ДополнительныеДанные.Строки Цикл 
		СтрокаЗначения = ДеревоЭлектронногоДокументаБЭД.СтрокаДерева(
			СтрокаДополнительныхДанных, ПолныйПутьСтрокиЗначения, Истина);
		Если СтрокаЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Значение = СтрокаЗначения.Значение;
		Если ТипЗнч(Значение) <> ТипСтрока Тогда
			СтрокаЗначения.Значение = XMLСтрока(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // КонвертацияДанных

#Область ДоступныеДействияПоЭДО

// Возвращаемое значение:
//  Структура:
//  * ЭтоВходящийЭДО - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НаОзнакомлении - Булево
//  * СостояниеДокумента - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НовыеПараметрыОпределенияДоступныхДействийПоЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ЭтоВходящийЭДО", Ложь);
	Параметры.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Параметры.Вставить("НаОзнакомлении", Ложь);
	Параметры.Вставить("СостояниеДокумента", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Возврат Параметры;
КонецФункции

// Параметры:
//  Параметры - см. НовыеПараметрыОпределенияДоступныхДействийПоЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Булево
Функция ДоступныеДействияПоЭДО(Параметры) Экспорт
	
	Действия = Новый Соответствие; // см. ДоступныеДействияПоЭДО
	
	СостояниеДокумента = Параметры.СостояниеДокумента;
	
	Если СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ЗаполнитьДействияПоСостояниюНеСформирован(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка Тогда
		
		ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, Параметры);
	
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение Тогда
		
		ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершен Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением Тогда
		
		ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи Тогда
		
		ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, Параметры);
		
	ИначеЕсли СостояниеДокумента = Перечисления.СостоянияДокументовЭДО.Аннулирован Тогда
		
		ЗаполнитьДействияПоСостояниюАннулирован(Действия, Параметры);
		
	КонецЕсли;
	
	Если Параметры.НаОзнакомлении Тогда
		
		Действия.Вставить(Перечисления.ДействияПоЭДО.ОтправитьВАрхив, Истина);
		
	КонецЕсли;
	
	Если НЕ ДействиеАннулироватьДоступно(Параметры) Тогда
		Действия.Удалить(Перечисления.ДействияПоЭДО.Аннулировать);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюНеСформирован(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Сформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписание(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьПодписание, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если Параметры.ЭтоВходящийЭДО Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	КонецЕсли;
	Если ДействиеАннулироватьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	КонецЕсли;
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправке(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаПриглашения(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправка(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУтверждение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Утвердить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отклонить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьОтвет, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеОтклонения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеОтклонения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаОтклонения(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодтверждениеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПринятьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтклонитьАннулирование, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаАннулирования(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеОПолучении(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещения(Действия, Параметры);
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИзвещениеПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИзвещение, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодписаниеИзвещенияПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Подписать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ПодготовитьКОтправке, Истина);
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.Переформировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяОтправкаИзвещенияПоОтклонению(Действия, Параметры)
	
	Если ДействиеОтправитьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.Отправить, Истина);
	КонецЕсли;
	Действия.Вставить(Перечисления.ДействияПоЭДО.ОтменитьОтправку, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяУточнение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяИсправлениеОшибкиПередачи(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.СформироватьИсправление, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюТребуетсяПовторнаяОтправка(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонениемПриглашения(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОшибкойПередачи(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюАннулирован(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеОператора(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяИзвещениеОПолучении(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяПодтверждениеАннулирования(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИзвещениеПоОтклонению(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОжидаетсяИсправление(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОжидаетсяОтветНаПриглашение(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершен(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Аннулировать, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюОбменЗавершенСИсправлением(Действия, Параметры)
	
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
	Если ДействиеЗакрытьДоступно(Параметры) Тогда
		Действия.Вставить(Перечисления.ДействияПоЭДО.ЗакрытьПринудительно, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытПринудительно(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.ВернутьВРаботу, Истина);
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Действия - см. ДоступныеДействияПоЭДО
//  Параметры - см. ДоступныеДействияПоЭДО.Параметры
Процедура ЗаполнитьДействияПоСостояниюЗакрытСОтклонением(Действия, Параметры)
	Действия.Вставить(Перечисления.ДействияПоЭДО.Перенаправить, Истина);
КонецПроцедуры

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеАннулироватьДоступно(Параметры)
	Возврат Параметры.ТипДокумента <> Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
КонецФункции

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеОтправитьДоступно(Параметры)
	Возврат Не ИнтерфейсДокументовЭДО.ЭтоВнутреннийТипДокумента(Параметры.ТипДокумента)
КонецФункции

// Параметры:
//  Параметры - См. ДоступныеДействияПоЭДО.Параметры
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеЗакрытьДоступно(Параметры)
	Возврат Не ИнтерфейсДокументовЭДО.ЭтоВнутреннийТипДокумента(Параметры.ТипДокумента);
КонецФункции

#КонецОбласти

#Область Конвертация

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Идентификатор организации.
//  * Значение - Массив из Строка - Идентификаторы документов.
//
Функция ИдентификаторыДокументовИОрганизаций(ЭлектронныеДокументы) Экспорт
	
	Результат = Новый Соответствие; // См. ИдентификаторыДокументовИОрганизаций
	
	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокумент
		|ГДЕ
		|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
		|	И ЭлектронныйДокумент.Ссылка В (&ЭлектронныеДокументы)";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторыДокументов = Результат[Выборка.ИдентификаторОрганизации];
		Если ИдентификаторыДокументов = Неопределено Тогда
			ИдентификаторыДокументов = Новый Массив;
			Результат.Вставить(Выборка.ИдентификаторОрганизации, ИдентификаторыДокументов);
		КонецЕсли;
		ИдентификаторыДокументов.Добавить(Выборка.ИдентификаторДокумента);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Функция НовыеОбъектыУчетаДокументов() Экспорт
	ОписаниеТиповОснований = ИнтеграцияЭДО.ОписаниеТиповОснованийЭлектронныхДокументов();
	ОбъектыУчетаДокументов = Новый ТаблицаЗначений;
	ОбъектыУчетаДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	ОбъектыУчетаДокументов.Колонки.Добавить("ОбъектУчета", ОписаниеТиповОснований);
	Возврат ОбъектыУчетаДокументов;
КонецФункции

// Параметры:
//  СведенияНоменклатурыДокументовВФорматеСервиса - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СведенияНоменклатурыДокументовЭДО
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ВыполнитьКонтрольСопоставленияНоменклатуры(СведенияНоменклатурыДокументовВФорматеСервиса) Экспорт
	
	ИдентификаторыДокументовНаКонтроле = Новый Массив; // Массив из Строка
	
	Если Не ЗначениеЗаполнено(СведенияНоменклатурыДокументовВФорматеСервиса) Тогда
		Возврат ИдентификаторыДокументовНаКонтроле;
	КонецЕсли;
	
	ИдентификаторыДокументовЭДО = ОбщегоНазначения.ВыгрузитьКолонку(СведенияНоменклатурыДокументовВФорматеСервиса,
		"ИдентификаторДокумента");
	
	СвойстваДокументов = СвойстваДокументовДляКонтроляСопоставленияНоменклатуры(ИдентификаторыДокументовЭДО);
	
	Для Каждого СведенияНоменклатурыДокумента Из СведенияНоменклатурыДокументовВФорматеСервиса Цикл
		
		ИнформацияОТоварах = ИнформацияОТоварахИзФорматаСервиса(СведенияНоменклатурыДокумента.СведенияНоменклатуры);
		
		СвойстваДокумента = СвойстваДокументов.Найти(СведенияНоменклатурыДокумента.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		
		Владелец = СвойстваДокумента.Контрагент;
		
		НоменклатураКонтрагентов = ОтражениеВУчетеЭДО.НаборНоменклатурыКонтрагентовПоИнформацииОТоварах(
			ИнформацияОТоварах, Владелец);
		
		НоменклатураКонтрагентовБезСопоставления = ОтражениеВУчетеЭДО.НоменклатураКонтрагентовБезСопоставления(
			НоменклатураКонтрагентов);
		
		Если Не ЗначениеЗаполнено(НоменклатураКонтрагентовБезСопоставления) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтражениеВУчетеЭДО.ВключитьКонтрольСопоставленияНоменклатуры(СвойстваДокумента.Ссылка,
			НоменклатураКонтрагентовБезСопоставления);
		
		ИдентификаторыДокументовНаКонтроле.Добавить(СведенияНоменклатурыДокумента.ИдентификаторДокумента);
		
	КонецЦикла;
	
	Возврат ИдентификаторыДокументовНаКонтроле;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторДокумента - Строка
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
Функция СвойстваДокументовДляКонтроляСопоставленияНоменклатуры(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Параметры:
//  ИнформацияОТоварахВФорматеСервиса - Массив из Структура:
//  * ИД - Строка
//  * Штрихкод - Строка
//  * Наименование - Строка
//  * НаименованиеХарактеристики - Строка
//  * КодТовара - Строка
//  * Артикул - Строка
//  * БазоваяЕдиницаКод - Строка
//  * БазоваяЕдиницаНаименование - Строка
//  * БазоваяЕдиницаНаименованиеПолное - Строка
//  * БазоваяЕдиницаМеждународноеСокращение - Строка
//  * БазоваяЕдиницаНаименованиеКраткое - Строка
//  * СтавкаНДС - Строка
//  * Описание - Строка
//  * ИсторияИдентификаторов - Массив из Структура
//  * ИмяТипаНоменклатурыФНС - Строка
//  * КодПоКТРУ - Строка
//  * КодТНВЭД - Строка
//  * СтранаПроисхожденияКод - Строка
//  * ПрослеживаемыйТовар - Булево
//  * МаркируемыйТовар - Булево
// 
// Возвращаемое значение:
//  См. ОтражениеВУчетеЭДО.НоваяИнформацияОТоварахЭлектронногоДокумента
Функция ИнформацияОТоварахИзФорматаСервиса(ИнформацияОТоварахВФорматеСервиса)
	
	ИнформацияОТоварах = ОтражениеВУчетеЭДО.НоваяИнформацияОТоварахЭлектронногоДокумента();
	
	МетаданныеТипыНоменклатурыФНС = Метаданные.Перечисления.ТипыНоменклатурыФНС;
	
	Для Каждого ИнформацияОТовареВФорматеСервиса Из ИнформацияОТоварахВФорматеСервиса Цикл
		
		ИнформацияОТоваре = ИнформацияОТоварах.Добавить();
		ЗаполнитьЗначенияСвойств(ИнформацияОТоваре, ИнформацияОТовареВФорматеСервиса);
		ИнформацияОТоваре.ТипНоменклатурыФНС = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(
			ИнформацияОТовареВФорматеСервиса.ИмяТипаНоменклатурыФНС, МетаданныеТипыНоменклатурыФНС);
		
	КонецЦикла;
	
	Возврат ИнформацияОТоварах;
	
КонецФункции

// Параметры:
//  УчетныеДанныеДокументовВФорматеСервиса - Массив из Структура:
//  * ИдентификаторДокумента - Строка
//  * УчетныеДанные - Структура - данные прикладного решения:
//  ** Данные - Структура - учетные данные для конвертации.
//  ** Формат - Строка - формат учетных данных.
//  СпособыОбработкиДокументов - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//  * Значение - Строка - способ обработки.
// 
// Возвращаемое значение:
//  См. НовыеОбъектыУчетаДокументов
Функция ОтразитьЭлектронныеДокументыВУчете(УчетныеДанныеДокументовВФорматеСервиса, СпособыОбработкиДокументов) Экспорт
	
	ОбъектыУчетаДокументов = НовыеОбъектыУчетаДокументов();
	
	ИдентификаторыДокументовЭДО = ОбщегоНазначения.ВыгрузитьКолонку(УчетныеДанныеДокументовВФорматеСервиса,
		"ИдентификаторДокумента");
	
	СвойстваДокументов = СвойстваДокументовДляОтраженияВУчете(ИдентификаторыДокументовЭДО);
	
	Для Каждого УчетныеДанныеДокумента Из УчетныеДанныеДокументовВФорматеСервиса Цикл
		
		СвойстваДокумента = СвойстваДокументов.Найти(УчетныеДанныеДокумента.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		
		СпособОбработки = СпособыОбработкиДокументов[СвойстваДокумента.Ссылка];
		
		ДанныеЭлектронногоДокумента = ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
		ДанныеЭлектронногоДокумента.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		ДанныеЭлектронногоДокумента.Направление = Перечисления.НаправленияЭДО.Входящий;
		ДанныеЭлектронногоДокумента.ТипДокумента = СвойстваДокумента.ТипДокумента;
		ДанныеЭлектронногоДокумента.Формат = СвойстваДокумента.ФорматОсновногоТитула;
		ДанныеЭлектронногоДокумента.Отправитель = СвойстваДокумента.Контрагент;
		ДанныеЭлектронногоДокумента.Получатель = СвойстваДокумента.Организация;
		
		ОбъектыУчета = Новый Массив; // Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
		
		ДеревоУчетныхДанных = ДеревоУчетныхДанныхИзСтруктуры(УчетныеДанныеДокумента.УчетныеДанные.Данные, 
			УчетныеДанныеДокумента.УчетныеДанные.Формат);
		
		ДанныеРазбора = ДанныеРазбораЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДеревоУчетныхДанных);
		
		ОтражениеВУчетеЭДО.ОтразитьДанныеЭлектронногоДокумента(ДанныеЭлектронногоДокумента, СпособОбработки,
			ОбъектыУчета, ДанныеРазбора);
		
		Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
			ОбъектУчетаДокумента = ОбъектыУчетаДокументов.Добавить();
			ОбъектУчетаДокумента.ОбъектУчета = ОбъектУчета;
			ОбъектУчетаДокумента.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		КонецЦикла;
		
		ОтражениеВУчетеЭДО.ВыполнитьКонтрольПроведенияУчетныхДокументов(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	
		НаКонтроль = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
		ОтражениеВУчетеЭДО.ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
		
	КонецЦикла;
	
	Возврат ОбъектыУчетаДокументов;
	
КонецФункции

// Параметры:
//  ДанныеЭлектронногоДокумента - см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДеревоУчетныхДанных - ДеревоЗначений
// 
// Возвращаемое значение:
//  Структура:
//  * ДеревоРазбора - см. ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора
//  * НовыйЭД - см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
//  * Содержание - Неопределено
Функция ДанныеРазбораЭлектронногоДокумента(ДанныеЭлектронногоДокумента, ДеревоУчетныхДанных)
	
	ДеревоРазбора = ДеревоЭлектронногоДокументаБЭД.ИнициализироватьДеревоРазбора();
	НайденныйТипВДереве = ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить(); // см. ДеревоЭлектронногоДокументаБЭД.НайтиСоздатьТипОбъектаВДеревеРазбора
	
	НовыйЭД.НаправлениеЭД = ДанныеЭлектронногоДокумента.Направление;
	НовыйЭД.ВерсияФормата = ДанныеЭлектронногоДокумента.Формат;
	НовыйЭД.ВидЭД = ДанныеЭлектронногоДокумента.ТипДокумента;
	НовыйЭД.ЗначениеРеквизита = ДеревоУчетныхДанных;
	
	ДанныеДляОтражения = Новый Структура;
	ДанныеДляОтражения.Вставить("ДеревоРазбора", ДеревоРазбора);
	ДанныеДляОтражения.Вставить("НовыйЭД", НовыйЭД);
	ДанныеДляОтражения.Вставить("Содержание", Неопределено);
	
	Возврат ДанныеДляОтражения;
	
КонецФункции

// Параметры:
//  ИдентификаторыДокументовЭДО - Массив из Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИдентификаторДокумента - Строка
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.УчастникЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ФорматОсновногоТитула - Строка
//
Функция СвойстваДокументовДляОтраженияВУчете(ИдентификаторыДокументовЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ФорматОсновногоТитула КАК ФорматОсновногоТитула
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументовЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ОписаниеДокументаЭДО - см. НовоеОписаниеДокументаЭДО
Процедура УстановитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, ОписаниеДокументаЭДО)
	
	Если Не ОписаниеДокументаЭДО.ЭтоВходящийЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеДокументаЭДО.ВидДокумента, "ТипДокумента"); // ПеречислениеСсылка.ТипыДокументовЭДО
	
	ДоступноОтражение = ОтражениеВУчетеЭДО.ДоступноОтражениеВУчете(ОписаниеДокументаЭДО.Формат, ТипДокумента,
		ОписаниеДокументаЭДО.Состояние);
	
	Если Не ДоступноОтражение Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
	КлючНастроек.Отправитель = ОписаниеДокументаЭДО.Контрагент;
	КлючНастроек.Получатель = ОписаниеДокументаЭДО.Организация;
	КлючНастроек.ВидДокумента = ОписаниеДокументаЭДО.ВидДокумента;
	
	НастройкиОтраженияВУчете = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек);
	
	ОтражениеОтключено = ОтражениеВУчетеЭДО.ОтражениеОтключено(НастройкиОтраженияВУчете.СпособОбработки);
	
	Если ОтражениеОтключено Тогда
		Возврат;
	КонецЕсли;
	
	ОтражениеВУчетеЭДО.УстановитьКонтрольОтраженияВУчете(ЭлектронныйДокумент);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДО.ДанныеНоменклатурыДокументов
Функция ДанныеНоменклатурыДокументов(ЭлектронныеДокументы, КонтекстДиагностики) Экспорт
	
	ДанныеНоменклатурыДокументов = Новый Соответствие;
	
	ИдентификаторыДокументовИОрганизаций = ИдентификаторыДокументовИОрганизаций(ЭлектронныеДокументы);
	ИдентификаторыОрганизаций = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыДокументовИОрганизаций, "Ключ");
	
	УчетныеЗаписиПоИдентификаторамЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(
		ИдентификаторыОрганизаций);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СведенияНоменклатурыДокументов = Новый Массив; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СведенияНоменклатурыДокументовЭДО
	
	Для Каждого УчетнаяЗаписьПоИдентификаторуЭДО Из УчетныеЗаписиПоИдентификаторамЭДО Цикл
		ИдентификаторЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Ключ;
		УчетнаяЗаписьОблачногоЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Значение;
		ИдентификаторыДокументовЭДО = ИдентификаторыДокументовИОрганизаций[ИдентификаторЭДО];
	
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"СведенияНоменклатурыДокументовЭДО", ИдентификаторыДокументовЭДО);
		
		СведенияНоменклатурыДокументовПоУчетнойЗаписи = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
			ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СведенияНоменклатурыДокументовЭДО
		
		Если Не ЗначениеЗаполнено(СведенияНоменклатурыДокументовПоУчетнойЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СведенияНоменклатурыДокументов,
			СведенияНоменклатурыДокументовПоУчетнойЗаписи);
	КонецЦикла;
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(СведенияНоменклатурыДокументов,
		"ИдентификаторДокумента");
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	Для Каждого СведенияНоменклатурыДокумента Из СведенияНоменклатурыДокументов Цикл
		ИнформацияОТоварах = ИнформацияОТоварахИзФорматаСервиса(СведенияНоменклатурыДокумента.СведенияНоменклатуры);
		ЭлектронныйДокумент = ДокументыПоИдентификаторам[СведенияНоменклатурыДокумента.ИдентификаторДокумента];
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ДанныеНоменклатурыДокументов.Вставить(ЭлектронныйДокумент, ИнформацияОТоварах);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеНоменклатурыДокументов;
	
КонецФункции

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
Функция ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы, КонтекстДиагностики = Неопределено) Экспорт
	
	ДанныеДокументовДляОтражения = Новый Массив; // См. ДанныеДокументовДляОтраженияВУчете
	
	ИдентификаторыДокументовИОрганизаций = ИдентификаторыДокументовИОрганизаций(ЭлектронныеДокументы);
	ИдентификаторыОрганизаций = ОбщегоНазначения.ВыгрузитьКолонку(ИдентификаторыДокументовИОрганизаций, "Ключ");
	
	УчетныеЗаписиПоИдентификаторамЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(
		ИдентификаторыОрганизаций);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УчетныеДанныеДокументов = Новый Массив;
	
	Для Каждого УчетнаяЗаписьПоИдентификаторуЭДО Из УчетныеЗаписиПоИдентификаторамЭДО Цикл
		ИдентификаторЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Ключ;
		УчетнаяЗаписьОблачногоЭДО = УчетнаяЗаписьПоИдентификаторуЭДО.Значение;
		ИдентификаторыДокументовЭДО = ИдентификаторыДокументовИОрганизаций[ИдентификаторЭДО];
		Если ИдентификаторыДокументовЭДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"УчетныеДанныеОтправителейДокументовЭДО", ИдентификаторыДокументовЭДО);
		
		УчетныеДанныеДокументовПоУчетнойЗаписи = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
			ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.УчетныеДанныеОтправителейДокументовЭДО
		
		Если Не ЗначениеЗаполнено(УчетныеДанныеДокументовПоУчетнойЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчетныеДанныеДокументов, УчетныеДанныеДокументовПоУчетнойЗаписи);
	КонецЦикла;
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(УчетныеДанныеДокументов, "ИдентификаторДокумента");
	СвойстваДокументов = СвойстваДокументовДляОтраженияВУчете(ИдентификаторыДокументов);
	ОбщийМодульОтражениеВУчетеЭДО = ИнтеграцияЭДО.ОбщийМодульОтражениеВУчетеЭДО();
	
	Для Каждого УчетныеДанныеДокумента Из УчетныеДанныеДокументов Цикл
		СвойстваДокумента = СвойстваДокументов.Найти(УчетныеДанныеДокумента.ИдентификаторДокумента,
			"ИдентификаторДокумента");
		Если СвойстваДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ДанныеДокумента = ОбщийМодульОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете();
		ДанныеДокумента.ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
		ДанныеДокумента.Направление = Перечисления.НаправленияЭДО.Входящий;
		ДанныеДокумента.ТипДокумента = СвойстваДокумента.ТипДокумента;
		ДанныеДокумента.Формат = СвойстваДокумента.ФорматОсновногоТитула;
		ДанныеДокумента.Отправитель = СвойстваДокумента.Контрагент;
		ДанныеДокумента.Получатель = СвойстваДокумента.Организация;
		
		ДеревоУчетныхДанных = ДеревоУчетныхДанныхИзСтруктуры(УчетныеДанныеДокумента.УчетныеДанные.Данные, 
			УчетныеДанныеДокумента.УчетныеДанные.Формат);
		
		ДанныеДокумента.ДанныеРазбора = ДанныеРазбораЭлектронногоДокумента(ДанныеДокумента, ДеревоУчетныхДанных);
		
		ДанныеДокументовДляОтражения.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументовДляОтражения;
	
КонецФункции

#КонецОбласти // ОтражениеВУчете

#Область ОбработкаОшибок

// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьОшибкуОтсутствуетУчетнаяЗаписьОблачногоЭДОПоДокументу(КонтекстДиагностики, ВидОперации, ЭлектронныйДокумент)
	СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
		"ВидДокумента, НомерДокумента, ДатаДокумента, ИдентификаторОрганизации");
	ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(СвойстваДокумента);
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось выполнить действия по документу %1
		|Отсутствует учетная запись облачного ЭДО для идентификатора ЭДО %2.'"),
		ПредставлениеДокумента, СвойстваДокумента.ИдентификаторОрганизации);
	ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Добавляет ошибку формирования в контекст диагностики.
// 
// Параметры:
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  НастройкаФормирования - СтрокаТаблицыЗначений
// 
// Возвращаемое значение:
//  Структура - описание ошибки диагностики
Функция ДобавитьОшибкуФормирования(КонтекстДиагностики, НастройкаФормирования)
	
	ОшибкиДиагностики = ОбработкаНеисправностейБЭДКлиентСервер.ПолучитьОшибки(КонтекстДиагностики);	
	ОписаниеОшибкиФормирования = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
		
	ЗаполнитьЗначенияСвойств(ОписаниеОшибкиФормирования.ОписаниеОбъектаУчета, НастройкаФормирования);
	
	ОписаниеОшибкиФормирования.ОписаниеОбъектаУчета.Организация = НастройкаФормирования.Организация;
	ОписаниеОшибкиФормирования.ОписаниеОбъектаУчета.Контрагент = НастройкаФормирования.Контрагент;
	ОписаниеОшибкиФормирования.ВидДокумента = НастройкаФормирования.ВидДокумента;
	
	ОписаниеОшибкиДиагностики = Новый Структура;
	ОписаниеОшибкиДиагностики.Вставить("ДополнительныеДанные", ОписаниеОшибкиФормирования);
	ОписаниеОшибкиДиагностики.Вставить("ВидОшибки",            Новый Структура);
	
	ОписаниеОшибкиДиагностики.ВидОшибки.Вставить("Идентификатор", ЭлектронныеДокументыЭДО.ИдентификаторОшибкиФормированияОтвета());
	
	ОшибкиДиагностики.Добавить(ОписаниеОшибкиДиагностики);
		
	Возврат ОписаниеОшибкиДиагностики;
	
КонецФункции

// Параметры:
//  ОписаниеОшибокДанных - Структура - см. ФорматыЭДО.НовоеОписаниеОшибокФормированияДокумента, Неопределено
//  Проверка - Структура - см. ФорматыЭДО.НовыйРезультатПроверкиЗаполненияДанных
Процедура ДобавитьРезультатПроверкиВОписаниеОшибокДанных(ОписаниеОшибокДанных, Проверка)
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибокДанных) Тогда
		ОписаниеОшибокДанных = ФорматыЭДО.НовоеОписаниеОшибокФормированияДокумента();
	КонецЕсли;
	
	ОписаниеОшибокДанных.ЗаполнениеДанных = Проверка.Ошибки;
	
КонецПроцедуры

// Параметры:
//  ОписаниеОшибокДанных - Структура - см. ФорматыЭДО.НовоеОписаниеОшибокФормированияДокумента, Неопределено
//  ЗначенияДополнительныхПолей - Структура
//  Формат - Строка - формат документа (см. ФорматыЭДО.ПоддерживаемыеФорматы)
Процедура ДобавитьЗначенияДопПолейВОписаниеОшибокДанных(ОписаниеОшибокДанных, ЗначенияДополнительныхПолей, Формат)
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибокДанных) Тогда
		ОписаниеОшибокДанных = ФорматыЭДО.НовоеОписаниеОшибокФормированияДокумента();
	КонецЕсли;
	
	ОписаниеОшибокДанных.ЗначенияДополнительныхПолей = ЗначенияДополнительныхПолей;
	ОписаниеОшибокДанных.ЗначенияДополнительныхПолей.Вставить("Формат", Формат);
	
КонецПроцедуры

#КонецОбласти

#Область ПолнаяСинхронизацияДокументов

// Возвращаемое значение:
//  Строка - Ключ задания полной синхронизации документов облачного ЭДО
Функция КлючЗаданияПолнойСинхронизацииДокументовОблачногоЭДО()
	Возврат "ПолнаяСинхронизацияДокументовОблачногоЭДО";
КонецФункции

Процедура ЗапуститьПолнуюСинхронизациюДокументовОблачногоЭДО()
	
	КлючЗадания = КлючЗаданияПолнойСинхронизацииДокументовОблачногоЭДО();
	
	Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	КоличествоАктивных = АктивныеФоновыеЗадания.Количество();
	Если КоличествоАктивных > 0 Тогда
		ФоновоеЗадание = АктивныеФоновыеЗадания[0];
		Если ПревышенИнтервалЗавершенияПолнойСинхронизацииДокументовОблачногоЭДО(ФоновоеЗадание.Начало) Тогда
			ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗадание.УникальныйИдентификатор);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("ЭлектронныеДокументыЭДОИнтеграцияОблака.ПолнаяСинхронизацияДокументовОблачногоЭДО",,
			КлючЗадания);
	Исключение
		Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО;
		ТекстСообщения = НСтр("ru = 'Не удалось запустить полную синхронизацию документов облачного ЭДО по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, Подсистема);
	КонецПопытки;
	
КонецПроцедуры

// Возвращаемое значение:
//  Число
Функция ИнтервалЗавершенияРегламентногоЗадания()
	Возврат 3600;
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ПревышенИнтервалЗавершенияПолнойСинхронизацииДокументовОблачногоЭДО(ДатаНачала)
	
	Результат = Ложь;
	
	ИнтервалАктивности = ТекущаяДатаСеанса() - ДатаНачала;
	Если ИнтервалЗавершенияРегламентногоЗадания() > ИнтервалАктивности Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(СостоянияСинхронизацииОблачногоЭДО.МеткаВремени)
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииОблачногоЭДО КАК СостоянияСинхронизацииОблачногоЭДО
		|ГДЕ
		|	СостоянияСинхронизацииОблачногоЭДО.ТипСинхронизации = &ТипСинхронизации";
	
	Запрос.УстановитьПараметр("ТипСинхронизации", Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не Выборка.Следующий()
		Или Выборка.МеткаВремени = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИнтервалИзмененияСостояния = Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - Выборка.МеткаВремени) / 1000;
	Если ИнтервалИзмененияСостояния > ИнтервалЗавершенияРегламентногоЗадания() Тогда
		Результат = Истина;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура ПолнаяСинхронизацияДокументовОблачногоЭДО() Экспорт
	
	ВидОперации = НСтр("ru = 'Получение полных данных документов облачного ЭДО'");
	
	Текст = СтрШаблон(НСтр("ru = 'Начало операции: %1.'"), ВидОперации);
	Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().АвтоматическоеПолучениеЭДО;
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст, Подсистема, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		ПолучитьПолныеДанныеДокументовОблачногоЭДО();
	Исключение
		ШаблонСообщения = НСтр("ru = 'В процессе выполнения операции ""%1"" произошла ошибка: %2'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВидОперации,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, Подсистема);
	КонецПопытки;
	
	Текст = СтрШаблон(НСтр("ru = 'Завершение операции: %1.'"), ВидОперации);
	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Текст, Подсистема, УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

Процедура ПолучитьПолныеДанныеДокументовОблачногоЭДО() Экспорт
	
	ИдентификаторыЭДОПоУчетнымЗаписямОблачногоЭДО =
		ИнтеграцияОблачногоЭДО.ИдентификаторыЭДОПоУчетнымЗаписямОблачнымЭДО();
	
	Для Каждого ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО Из ИдентификаторыЭДОПоУчетнымЗаписямОблачногоЭДО Цикл
		
		УчетнаяЗаписьОблачногоЭДО = ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО.Ключ;
		ИдентификаторыЭДО = ИдентификаторыЭДОПоУчетнойЗаписиОблачногоЭДО.Значение;
		
		ПолучитьПолныеДанныеДокументовПоМеткамВремени(УчетнаяЗаписьОблачногоЭДО, ИдентификаторыЭДО);
		
		ПолучитьПолныеДанныеДокументовСОшибкамиСинхронизации(УчетнаяЗаписьОблачногоЭДО, ИдентификаторыЭДО);
		
	КонецЦикла;
		
КонецПроцедуры

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ИдентификаторыЭДО - Массив из Строка
Процедура ПолучитьПолныеДанныеДокументовПоМеткамВремени(УчетнаяЗаписьОблачногоЭДО, ИдентификаторыЭДО)
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ТипСинхронизации = Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО;
	СостоянияСинхронизации = РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Выгрузить(
		ИдентификаторыЭДО, ТипСинхронизации);
	МеткиВремениИдентификаторовЭДО =
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДО(
			СостоянияСинхронизации, ТипСинхронизации, ИдентификаторыЭДО);
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	Пока Истина Цикл
		
		Если Не ЗначениеЗаполнено(МеткиВремениИдентификаторовЭДО) Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ПорцияМетокВремениПолныхДанныхДокументовЭДО", МеткиВремениИдентификаторовЭДО);
		ПорцияДанных = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
			ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияМетокВремениПолныхДанныхДокументовЭДО
		
		Если Не ЗначениеЗаполнено(ПорцияДанных)
			Или Не ЗначениеЗаполнено(ПорцияДанных.НаборДанных) Тогда
			Возврат;
		КонецЕсли;
		
		СостоянияСинхронизации =
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.СостоянияОбъектовДляАктуализации(
				ТипСинхронизации, ПорцияДанных.НаборДанных);
		
		Если Не ЗначениеЗаполнено(СостоянияСинхронизации) Тогда
			Возврат;
		КонецЕсли;
		
		РезультатПолучения = ПолучитьПолныеДанныеДокументовПоСостояниямСинхронизации(
			УчетнаяЗаписьОблачногоЭДО, СостоянияСинхронизации, КонтекстДиагностики);
		
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.ЗаписатьКоллекцию(
			Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО,
			РезультатПолучения.МеткиВремениПоИдентификаторамЭДО, КонтекстДиагностики);
		
		Если ПорцияДанных.ЭтоПоследний Тогда
			Возврат;
		КонецЕсли;
		
		МеткиВремениИдентификаторовЭДО =
			РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДОПоРезультатуОбработки(
				РезультатПолучения);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ИдентификаторыЭДО - Массив из Строка
Процедура ПолучитьПолныеДанныеДокументовСОшибкамиСинхронизации(УчетнаяЗаписьОблачногоЭДО, ИдентификаторыЭДО)
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	СостоянияСинхронизацииДанныхДокументов =
		РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.СостоянияОбъектовСОшибками(
			Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО, ИдентификаторыЭДО);
	
	Если Не ЗначениеЗаполнено(СостоянияСинхронизацииДанныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьПолныеДанныеДокументовПоСостояниямСинхронизации(УчетнаяЗаписьОблачногоЭДО,
		СостоянияСинхронизацииДанныхДокументов, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  СостоянияСинхронизацииДанныхДокументов - Массив из см. НовоеСостояниеСинхронизацииДокументаЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка - идентификатор ЭДО.
//    ** Значение - Число - метка времени.
//  * ФиксированныеМеткиВремени - Соответствие из КлючИЗначение:
//    ** Ключ - Строка - идентификатор ЭДО.
//    ** Значение - Булево
Функция ПолучитьПолныеДанныеДокументовПоСостояниямСинхронизации(УчетнаяЗаписьОблачногоЭДО, 
	СостоянияСинхронизацииДанныхДокументов, КонтекстДиагностики)
	
	МеткиВремениПоИдентификаторамЭДО = Новый Соответствие;
	ФиксированныеМеткиВремени = Новый Соответствие;
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("МеткиВремениПоИдентификаторамЭДО", МеткиВремениПоИдентификаторамЭДО);
	РезультатПолучения.Вставить("ФиксированныеМеткиВремени", ФиксированныеМеткиВремени);
	
	ИдентификаторыДокументов = ОбщегоНазначения.ВыгрузитьКолонку(
		СостоянияСинхронизацииДанныхДокументов, "ИдентификаторОбъекта");
	ДокументыПоИдентификаторам = ДокументыПоИдентификаторамСервиса(ИдентификаторыДокументов);
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
			
	Для Каждого СостояниеСинхронизацииДанныхДокумента Из СостоянияСинхронизацииДанныхДокументов Цикл
		
		ИдентификаторЭДО = СостояниеСинхронизацииДанныхДокумента.ИдентификаторЭДО;
		ИдентификаторДокумента = СостояниеСинхронизацииДанныхДокумента.ИдентификаторОбъекта;
		ЭлектронныйДокумент = ДокументыПоИдентификаторам[ИдентификаторДокумента];
		
		КонтекстДиагностикиПоДокументу = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
		НовоеСостояниеСинхронизации = ПолучитьПолныеДанныеИОписаниеДокументаПоСостояниюСинхронизации(
			СостояниеСинхронизацииДанныхДокумента, ЭлектронныйДокумент, ПараметрыВыполнения, КонтекстДиагностикиПоДокументу);
		
		Если ЗначениеЗаполнено(НовоеСостояниеСинхронизации) Тогда
			МеткаВремени = МеткиВремениПоИдентификаторамЭДО[ИдентификаторЭДО];
			Если ФиксированныеМеткиВремени[ИдентификаторЭДО] = Неопределено
				И (МеткаВремени = Неопределено
				Или МеткаВремени < НовоеСостояниеСинхронизации.МеткаВремени) Тогда
				МеткиВремениПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО,
					НовоеСостояниеСинхронизации.МеткаВремени);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОбработкаНеисправностейБЭДКлиентСервер.ДополнитьКонтекстДиагностики(КонтекстДиагностики, 
					КонтекстДиагностикиПоДокументу);
		Попытка
					
			ТекстОшибкиПодробно = ОбработкаНеисправностейБЭД.ТекстОшибокКонтекстаДиагностики(КонтекстДиагностикиПоДокументу, 
				Истина, 
				Символы.ПС);
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьОшибку(
				Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО, СостояниеСинхронизацииДанныхДокумента,
				ТекстОшибкиПодробно);
				
		Исключение
			ФиксированныеМеткиВремени.Вставить(ИдентификаторЭДО, Истина);
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зафиксировать ошибку при синхронизации электронного документа с идентификатором %1'"),
				ИдентификаторДокумента);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперацииПолученияПолныхДанных(),
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат РезультатПолучения;
	
КонецФункции

// Параметры:
//  СостояниеСинхронизацииДанныхДокумента - См. НовоеСостояниеСинхронизацииДокументаЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПараметрыВыполнения - См. ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта
Функция ПолучитьПолныеДанныеИОписаниеДокументаПоСостояниюСинхронизации(СостояниеСинхронизацииДанныхДокумента,
	ЭлектронныйДокумент, ПараметрыВыполнения, КонтекстДиагностики)
	
	Результат = Неопределено;
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	ИдентификаторМетодаПолученияОписанияДокумента = ИдентификаторМетодаДанныеСинхронизацииДокументовЭДО();
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ОписаниеМетода = ОписаниеМетодаМетодаДанныеСинхронизацииДокументовЭДО(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СостояниеСинхронизацииДанныхДокумента.ИдентификаторОбъекта));
		
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, 
			ОписаниеМетода, 
			ИдентификаторМетодаПолученияОписанияДокумента);
	КонецЕсли;
	
	ИдентификаторМетодаПолученияПолныхДанных = "ПолучитьПолныеДанныеДокументовПоИдентификаторам";

	ОписаниеМетода = ОписаниеМетодаДанныеПолнойСинхронизацииДокументаЭДО(СостояниеСинхронизацииДанныхДокумента);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, 
		ОписаниеМетода,
		ИдентификаторМетодаПолученияПолныхДанных);
	
	РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
				КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатыПакета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатыОсновныхДанных = РезультатыПакета[ИдентификаторМетодаПолученияОписанияДокумента];
	Если ЗначениеЗаполнено(РезультатыОсновныхДанных) Тогда
		ДанныеСинхронизацииДокументовЭДО = ДанныеСинхронизацииДокументовЭДОИзФорматаСервиса( 
			РезультатыОсновныхДанных);

		РезультатЗагрузкиДокументов = ОбновитьДокументыЭДОПоДаннымСинхронизации(ДанныеСинхронизацииДокументовЭДО,
			КонтекстДиагностики);
			
		Если ЗначениеЗаполнено(РезультатЗагрузкиДокументов.ДокументыЭДО) Тогда
			ЭлектронныйДокумент = РезультатЗагрузкиДокументов.ДокументыЭДО[0];
		Иначе
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	ДанныеПолнойСинхронизацииДокументаЭДОВФорматеСервиса = РезультатыПакета[ИдентификаторМетодаПолученияПолныхДанных];
		
	Попытка
		Результат = ЗагрузитьПолныеДанныеДокументаЭДО(
			ДанныеПолнойСинхронизацииДокументаЭДОВФорматеСервиса, 
			ЭлектронныйДокумент,
			СостояниеСинхронизацииДанныхДокумента);
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось синхронизировать электронный документ с идентификатором %1'"),
			СостояниеСинхронизацииДанныхДокумента.ИдентификаторОбъекта);
		ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке());
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперацииПолученияПолныхДанных(), ТекстОшибки,
			ТекстОшибкиПодробно);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ВидОперацииПолученияПолныхДанных()
	Возврат НСтр("ru = 'Получение полных данных документов ЭДО'");
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СостояниеСинхронизации - см. НовоеСостояниеСинхронизацииДокументаЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта
Функция ПолучитьПолныеДанныеДокументаПоСостояниюСинхронизации(УчетнаяЗаписьОблачногоЭДО, ЭлектронныйДокумент,
	СостояниеСинхронизации)
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ОписаниеМетода = ОписаниеМетодаДанныеПолнойСинхронизацииДокументаЭДО(СостояниеСинхронизации);
	
	ДанныеСинхронизацииВФорматеСервиса = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
		ПараметрыВыполнения, ОписаниеМетода); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеПолнойСинхронизацииДокументаЭДО
	
	НовоеСостояниеСинхронизации = ЗагрузитьПолныеДанныеДокументаЭДО(ДанныеСинхронизацииВФорматеСервиса,
		ЭлектронныйДокумент, СостояниеСинхронизации);
	
	Возврат НовоеСостояниеСинхронизации;
	
КонецФункции

// Параметры:
//  СостояниеСинхронизации - См. НовоеСостояниеСинхронизацииДокументаЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаДанныеПолнойСинхронизацииДокументаЭДО(СостояниеСинхронизации) Экспорт
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДанныеПолнойСинхронизацииДокументаЭДО",
		СостояниеСинхронизации.ИдентификаторОбъекта, СостояниеСинхронизации.МеткаВремени);
	Возврат ОписаниеМетода;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизацииВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеПолнойСинхронизацииДокументаЭДО
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СостояниеСинхронизации - см. НовоеСостояниеСинхронизацииДокументаЭДО
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта
Функция ЗагрузитьПолныеДанныеДокументаЭДО(ДанныеСинхронизацииВФорматеСервиса,
	ЭлектронныйДокумент, СостояниеСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторДокумента = СостояниеСинхронизации.ИдентификаторОбъекта;
	
	НовоеСостояниеСинхронизации = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта();
	ЗаполнитьЗначенияСвойств(НовоеСостояниеСинхронизации, СостояниеСинхронизации);
	НовоеСостояниеСинхронизации.МеткаВремени = ДанныеСинхронизацииВФорматеСервиса.МеткаВремени;
	
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторЭДО", СостояниеСинхронизации.ИдентификаторЭДО);
	ЭлементБлокировки.УстановитьЗначение("ТипДанных", ТипДанных);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторОбъекта", СостояниеСинхронизации.ИдентификаторОбъекта);
	
	ДанныеСинхронизации = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		СостояниеАктуально = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.СостояниеОбъектаАктуально(
			ТипДанных, НовоеСостояниеСинхронизации);
		
		Если СостояниеАктуально Тогда
			
			СсылкиПоИдентификаторамДанных = СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО(
				ДанныеСинхронизацииВФорматеСервиса);
			
			СсылкиПоИдентификаторамДанных.Вставить(ИдентификаторДокумента, ЭлектронныйДокумент);
			
			ДанныеСинхронизации = ДанныеПолнойСинхронизацииДокументаЭДОИзФорматаСервиса(
				ДанныеСинхронизацииВФорматеСервиса, СсылкиПоИдентификаторамДанных);
			
			ЗаписатьДанныеПолнойСинхронизацииДокументаЭДО(ДанныеСинхронизации);
			
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьСостояние(
				Перечисления.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО, НовоеСостояниеСинхронизации);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если СостояниеАктуально Тогда
		ВызватьСобытияДокументаЭДОПослеПолнойСинхронизации(ЭлектронныйДокумент,
			ДанныеСинхронизацииВФорматеСервиса.События);
	КонецЕсли;
	
	Возврат НовоеСостояниеСинхронизации;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизацииВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеПолнойСинхронизацииДокументаЭДО
//  СсылкиПоИдентификаторамДанных - См. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Сообщения - См. ДанныеСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса
//  * ФайлыСообщений - См. ДанныеФайловСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса
//  * ПодписиФайлов - См. ДанныеПодписейФайловПолнойСинхронизацииДокументаИзФорматаСервиса
//  * ПроверкиПодписейПоМЧД - См. ДанныеПроверокПодписейПолнойСинхронизацииДокументаИзФорматаСервиса
Функция ДанныеПолнойСинхронизацииДокументаЭДОИзФорматаСервиса(ДанныеСинхронизацииВФорматеСервиса,
	СсылкиПоИдентификаторамДанных)
	
	ДанныеСинхронизации = Новый Структура;
	ДанныеСинхронизации.Вставить("Сообщения", Новый Массив);
	ДанныеСинхронизации.Вставить("ФайлыСообщений", Новый Массив);
	ДанныеСинхронизации.Вставить("ПодписиФайлов", Новый Массив);
	ДанныеСинхронизации.Вставить("ПроверкиПодписейПоМЧД", Новый Массив);
	ДанныеСинхронизации.Вставить("События", Новый Массив);
	
	СсылкиБезДанных = НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента();
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.Сообщения) Тогда
		ДанныеСинхронизации.Сообщения = ДанныеСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса(
			ДанныеСинхронизацииВФорматеСервиса.Сообщения, СсылкиПоИдентификаторамДанных, СсылкиБезДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ФайлыСообщений) Тогда
		ДанныеСинхронизации.ФайлыСообщений = ДанныеФайловСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса(
			ДанныеСинхронизацииВФорматеСервиса.ФайлыСообщений, СсылкиПоИдентификаторамДанных, СсылкиБезДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ПодписиФайлов) Тогда
		ДанныеСинхронизации.ПодписиФайлов = ДанныеПодписейФайловПолнойСинхронизацииДокументаИзФорматаСервиса(
			ДанныеСинхронизацииВФорматеСервиса.ПодписиФайлов, СсылкиПоИдентификаторамДанных, СсылкиБезДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ПроверкиПодписейПоМЧД) Тогда
		ДанныеСинхронизации.ПроверкиПодписейПоМЧД = ДанныеПроверокПодписейПолнойСинхронизацииДокументаИзФорматаСервиса(
			ДанныеСинхронизацииВФорматеСервиса.ПроверкиПодписейПоМЧД, СсылкиПоИдентификаторамДанных, СсылкиБезДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкиБезДанных) Тогда
		ТекстыОшибок = СсылкиБезДанных.ВыгрузитьКолонку("ТекстОшибки");
		ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат ДанныеСинхронизации;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизацииВФорматеСервиса - См. ДанныеПолнойСинхронизацииДокументаЭДОИзФорматаСервиса.ДанныеСинхронизацииВФорматеСервиса
// 
// Возвращаемое значение:
//  См. РегистрыСведений.ИдентификаторыСинхронизируемыхОбъектовОблачногоЭДО.СсылкиПоИдентификаторам
Функция СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО(ДанныеСинхронизацииВФорматеСервиса)
	
	ИдентификаторыДанных = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.Сообщения) Тогда
		ДополнитьМассивИзКолонок(ИдентификаторыДанных, ДанныеСинхронизацииВФорматеСервиса.Сообщения,
			"Идентификатор, ИдентификаторОсновногоФайла");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ФайлыСообщений) Тогда
		ДополнитьМассивИзКолонок(ИдентификаторыДанных, ДанныеСинхронизацииВФорматеСервиса.ФайлыСообщений,
			"Идентификатор, ИдентификаторСообщения");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ПодписиФайлов) Тогда
		ДополнитьМассивИзКолонок(ИдентификаторыДанных, ДанныеСинхронизацииВФорматеСервиса.ПодписиФайлов,
			"ИдентификаторФайла");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСинхронизацииВФорматеСервиса.ПроверкиПодписейПоМЧД) Тогда
		ДополнитьМассивИзКолонок(ИдентификаторыДанных, ДанныеСинхронизацииВФорматеСервиса.ПроверкиПодписейПоМЧД,
			"ИдентификаторФайла");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыДанных) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	УникальныеИдентификаторыДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыДанных);
	
	Возврат РегистрыСведений.ИдентификаторыСинхронизируемыхОбъектовОблачногоЭДО.СсылкиПоИдентификаторам(
		УникальныеИдентификаторыДанных);
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новые ссылки на данные документа:
//  * Идентификатор - Строка
//  * Ссылка - ДокументСсылка.СообщениеЭДО,СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ТекстОшибки - Строка
Функция НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента()
	
	НовыеСсылкиНаДанныеДокумента = Новый ТаблицаЗначений;
	НовыеСсылкиНаДанныеДокумента.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	НовыеСсылкиНаДанныеДокумента.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(
		"ДокументСсылка.СообщениеЭДО, СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы"));
	НовыеСсылкиНаДанныеДокумента.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Возврат НовыеСсылкиНаДанныеДокумента;
	
КонецФункции

// Параметры:
//  ДанныеСообщенийВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторДокумента - Строка
//  * ИдентификаторОсновногоФайла - Строка
//  * Направление - Строка
//  * Тип - Строка
//  * ТипЭлементаРегламента - Строка
//  * Статус - Строка
//  * ДатаИзмененияСтатуса - см. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * СопроводительнаяЗаписка - Строка
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеСообщенияПолнойСинхронизацииДокумента
Функция ДанныеСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса(ДанныеСообщенийВФорматеСервиса,
	СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента)
	
	ДанныеСообщений = Новый Массив; // Массив из см. НовыеДанныеСообщенияПолнойСинхронизацииДокумента
	
	Если Не ЗначениеЗаполнено(ДанныеСообщенийВФорматеСервиса) Тогда
		Возврат ДанныеСообщений;
	КонецЕсли;
	
	МетаданныеПеречисления = Метаданные.Перечисления;
	МетаданныеНаправленияЭДО = МетаданныеПеречисления.НаправленияЭДО;
	МетаданныеТипыДокументовЭДО = МетаданныеПеречисления.ТипыДокументовЭДО;
	МетаданныеТипыЭлементовРегламентаЭДО = МетаданныеПеречисления.ТипыЭлементовРегламентаЭДО;
	МетаданныеСтатусыСообщенийЭДО = МетаданныеПеречисления.СтатусыСообщенийЭДО;
	
	ТипыСообщений = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДокументовЭДО
	
	Для Каждого ДанныеСообщенияВФорматеСервиса Из ДанныеСообщенийВФорматеСервиса Цикл
		
		ДанныеСообщения = НовыеДанныеСообщенияПолнойСинхронизацииДокумента();
		ДанныеСообщений.Добавить(ДанныеСообщения);
		
		ДанныеСообщения.Идентификатор = ДанныеСообщенияВФорматеСервиса.Идентификатор;
		ДанныеСообщения.Направление = НаправлениеИзФорматаСервиса(ДанныеСообщенияВФорматеСервиса.Направление,
			МетаданныеНаправленияЭДО);
		ДанныеСообщения.ТипЭлементаРегламента = ТипЭлементаРегламентаИзФорматаСервиса(
			ДанныеСообщенияВФорматеСервиса.ТипЭлементаРегламента, МетаданныеТипыЭлементовРегламентаЭДО);
		ДанныеСообщения.Статус = СтатусСообщенияИзФорматаСервиса(ДанныеСообщенияВФорматеСервиса.Статус,
			МетаданныеСтатусыСообщенийЭДО);
		ДанныеСообщения.ДатаИзмененияСтатуса = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
			ДанныеСообщенияВФорматеСервиса.ДатаИзмененияСтатуса);
		ДанныеСообщения.СопроводительнаяЗаписка = ДанныеСообщенияВФорматеСервиса.СопроводительнаяЗаписка;
		ДанныеСообщения.ЭлектронныйДокумент = СсылкиПоИдентификаторамДанных[
			ДанныеСообщенияВФорматеСервиса.ИдентификаторДокумента];
		ДанныеСообщения.ТипСообщения = ТипДокументаИзФорматаСервиса(ДанныеСообщенияВФорматеСервиса.Тип,
			МетаданныеТипыДокументовЭДО);
		ТипыСообщений.Добавить(ДанныеСообщения.ТипСообщения);
		
		ДанныеСообщения.Ссылка = СсылкаНаДанныеПолнойСинхронизацииДокумента(
			ДанныеСообщенияВФорматеСервиса.Идентификатор, Документы.СообщениеЭДО, СсылкиПоИдентификаторамДанных,
			СсылкиБезДанныхДокумента, ДанныеСообщения.ЭтоНовыеДанные);
		
		Если Не ЗначениеЗаполнено(ДанныеСообщенияВФорматеСервиса.ИдентификаторОсновногоФайла) Тогда
			Продолжить; // В случае с Актом об установленном расхождении (ТОРГ-2) могут формироваться сообщения ЭДО без присоединенного файла.
		КонецЕсли;
		
		ОшибкаОтсутствияДанных = СтрШаблон(
			НСтр("ru = 'При загрузке данных сообщения (%1) не найдена ссылка на основной файл (%2)'"),
			ДанныеСообщенияВФорматеСервиса.Идентификатор, ДанныеСообщенияВФорматеСервиса.ИдентификаторОсновногоФайла);
		
		ДанныеСообщения.ОсновнойФайл = ВнешняяСсылкаНаДанныеПолнойСинхронизацииДокумента(
			ДанныеСообщенияВФорматеСервиса.ИдентификаторОсновногоФайла, Справочники.СообщениеЭДОПрисоединенныеФайлы,
			СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента, ОшибкаОтсутствияДанных);
		
	КонецЦикла;
	
	ВидыСообщений = ЭлектронныеДокументыЭДО.НайтиСоздатьВидыДокументов(ТипыСообщений);
	
	Для Каждого ДанныеСообщения Из ДанныеСообщений Цикл
		ДанныеСообщения.ВидСообщения = ВидыСообщений[ДанныеСообщения.ТипСообщения];
	КонецЦикла;
	
	Возврат ДанныеСообщений;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - Неопределено,ДокументСсылка.СообщениеЭДО
//  * Идентификатор - Строка
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * ТипСообщения - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * Статус - ПеречислениеСсылка.СтатусыСообщенийЭДО
//  * ДатаИзмененияСтатуса - Дата
//  * СопроводительнаяЗаписка - Строка
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ОсновнойФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ЭтоНовыеДанные - Булево
Функция НовыеДанныеСообщенияПолнойСинхронизацииДокумента()
	
	Данные = Новый Структура;
	Данные.Вставить("Ссылка", Документы.СообщениеЭДО.ПустаяСсылка());
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	Данные.Вставить("ТипСообщения", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Данные.Вставить("ВидСообщения", Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	Данные.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Данные.Вставить("Статус", Перечисления.СтатусыСообщенийЭДО.ПустаяСсылка());
	Данные.Вставить("ДатаИзмененияСтатуса", '00010101');
	Данные.Вставить("СопроводительнаяЗаписка", "");
	Данные.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Данные.Вставить("ОсновнойФайл", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	Данные.Вставить("ЭтоНовыеДанные", Ложь);
	Возврат Данные;
	
КонецФункции

// Параметры:
//  Идентификатор - Строка
//  МенеджерДанных - СправочникМенеджер.СообщениеЭДОПрисоединенныеФайлы,ДокументМенеджер.СообщениеЭДО
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
//  ЭтоНоваяСсылка - Булево
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,ДокументСсылка.СообщениеЭДО
Функция СсылкаНаДанныеПолнойСинхронизацииДокумента(Идентификатор, МенеджерДанных, СсылкиПоИдентификаторамДанных,
	СсылкиБезДанныхДокумента, ЭтоНоваяСсылка = Ложь)
	
	Ссылка = СсылкиПоИдентификаторамДанных[Идентификатор];
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ЭтоНоваяСсылка = Истина;
	
	НайденнаяСсылка = СсылкиБезДанныхДокумента.Найти(Идентификатор, "Идентификатор");
	Если НайденнаяСсылка = Неопределено Тогда
		Ссылка = МенеджерДанных.ПолучитьСсылку();
	Иначе
		Ссылка = НайденнаяСсылка.Ссылка;
		СсылкиБезДанныхДокумента.Удалить(НайденнаяСсылка);
	КонецЕсли;
	СсылкиПоИдентификаторамДанных.Вставить(Идентификатор, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

// Параметры:
//  Идентификатор - Строка
//  МенеджерДанных - СправочникМенеджер.СообщениеЭДОПрисоединенныеФайлы,ДокументМенеджер.СообщениеЭДО
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
//  ОшибкаОтсутствияДанных - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,ДокументСсылка.СообщениеЭДО
Функция ВнешняяСсылкаНаДанныеПолнойСинхронизацииДокумента(Идентификатор, МенеджерДанных, СсылкиПоИдентификаторамДанных,
	СсылкиБезДанныхДокумента, ОшибкаОтсутствияДанных)
	
	Ссылка = СсылкиПоИдентификаторамДанных[Идентификатор];
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	НайденнаяСсылка = СсылкиБезДанныхДокумента.Найти(Идентификатор, "Идентификатор");
	Если НайденнаяСсылка <> Неопределено Тогда
		Ссылка = НайденнаяСсылка.Ссылка;
	Иначе
		Ссылка = МенеджерДанных.ПолучитьСсылку();
		СсылкаБезДанных = СсылкиБезДанныхДокумента.Добавить();
		СсылкаБезДанных.Идентификатор = Идентификатор;
		СсылкаБезДанных.Ссылка = Ссылка;
		СсылкаБезДанных.ТекстОшибки = ОшибкаОтсутствияДанных;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

// Параметры:
//  ДанныеФайловВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторСообщения - Строка
//  * Имя - Строка
//  * Данные - Строка - Двоичные данные в формате base64.
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеФайлаСообщенияПолнойСинхронизацииДокумента
Функция ДанныеФайловСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса(ДанныеФайловВФорматеСервиса,
	СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента)
	
	ДанныеФайлов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеФайловВФорматеСервиса) Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;
	
	Для Каждого ДанныеФайлаВФорматеСервиса Из ДанныеФайловВФорматеСервиса Цикл
		
		ДанныеФайла = НовыеДанныеФайлаСообщенияПолнойСинхронизацииДокумента();
		ДанныеФайла.Идентификатор = ДанныеФайлаВФорматеСервиса.Идентификатор;
		ДанныеФайла.Имя = ДанныеФайлаВФорматеСервиса.Имя;
		ДанныеФайла.Данные = Base64Значение(ДанныеФайлаВФорматеСервиса.Данные);
		
		ДанныеФайла.Ссылка = СсылкаНаДанныеПолнойСинхронизацииДокумента(
			ДанныеФайлаВФорматеСервиса.Идентификатор, Справочники.СообщениеЭДОПрисоединенныеФайлы,
			СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента, ДанныеФайла.ЭтоНовыеДанные);
		
		ОшибкаОтсутствияДанных = СтрШаблон(
			НСтр("ru = 'При загрузке данных файла (%1) не найдена ссылка на владельца (%2)'"),
			ДанныеФайлаВФорматеСервиса.Идентификатор, ДанныеФайлаВФорматеСервиса.ИдентификаторСообщения);
		
		ДанныеФайла.ВладелецФайла = ВнешняяСсылкаНаДанныеПолнойСинхронизацииДокумента(
			ДанныеФайлаВФорматеСервиса.ИдентификаторСообщения, Документы.СообщениеЭДО,
			СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента, ОшибкаОтсутствияДанных);
		
		ДанныеФайлов.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	Возврат ДанныеФайлов;

КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * Ссылка - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ВладелецФайла - ДокументСсылка.СообщениеЭДО
//  * Имя - Строка
//  * Данные - Неопределено,ДвоичныеДанные
//  * ЭтоНовыеДанные - Булево
Функция НовыеДанныеФайлаСообщенияПолнойСинхронизацииДокумента()
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Идентификатор", "");
	ДанныеФайла.Вставить("Ссылка", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ДанныеФайла.Вставить("ВладелецФайла", Документы.СообщениеЭДО.ПустаяСсылка());
	ДанныеФайла.Вставить("Имя", "");
	ДанныеФайла.Вставить("Данные", Неопределено);
	ДанныеФайла.Вставить("ЭтоНовыеДанные", Ложь);
	Возврат ДанныеФайла;
	
КонецФункции

// Параметры:
//  ДанныеПодписейВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * ИдентификаторФайла - Строка
//  * ПорядковыйНомер - Число
//  * Подпись - Строка - Двоичные данные в формате base64.
//  * Сертификат - Строка - Двоичные данные в формате base64.
//  * ДатаПодписи - см. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * ПодписьВерна - Булево
//  * ДатаПроверкиПодписи - см. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * ТипПодписи - Строка
//  * СрокДействияПоследнейМеткиВремени - см. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * ПропуститьПриПродлении - Булево
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПодписиФайлаПолнойСинхронизацииДокумента
Функция ДанныеПодписейФайловПолнойСинхронизацииДокументаИзФорматаСервиса(ДанныеПодписейВФорматеСервиса,
	СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента)
	
	ДанныеПодписейФайлов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеПодписейВФорматеСервиса) Тогда
		Возврат ДанныеПодписейФайлов;
	КонецЕсли;
	
	МетаданныеПеречисленияТипыПодписи = Метаданные.Перечисления.ТипыПодписиКриптографии;
	
	Для Каждого ДанныеПодписиВФорматеСервиса Из ДанныеПодписейВФорматеСервиса Цикл
		
		ДанныеПодписиФайла = НовыеДанныеПодписиФайлаПолнойСинхронизацииДокумента();
		
		СвойстваПодписи = ДанныеПодписиФайла.СвойстваПодписи;
		СвойстваПодписи.ИдентификаторПодписи = ДанныеПодписиВФорматеСервиса.Идентификатор;
		СвойстваПодписи.ПорядковыйНомер = ДанныеПодписиВФорматеСервиса.ПорядковыйНомер;
		СвойстваПодписи.Подпись = Base64Значение(ДанныеПодписиВФорматеСервиса.Подпись);
		Если ЗначениеЗаполнено(ДанныеПодписиВФорматеСервиса.Сертификат) Тогда
			СвойстваПодписи.Сертификат = Base64Значение(ДанныеПодписиВФорматеСервиса.Сертификат);
		КонецЕсли;
		СвойстваПодписи.ДатаПодписи = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ДанныеПодписиВФорматеСервиса.ДатаПодписи);
		СвойстваПодписи.ПодписьВерна = ДанныеПодписиВФорматеСервиса.ПодписьВерна;
		СвойстваПодписи.ДатаПроверкиПодписи = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
			ДанныеПодписиВФорматеСервиса.ДатаПроверкиПодписи);
		СвойстваПодписи.ПропуститьПриПродлении = ДанныеПодписиВФорматеСервиса.ПропуститьПриПродлении;
		Если ЗначениеЗаполнено(ДанныеПодписиВФорматеСервиса.ТипПодписи) Тогда
			СвойстваПодписи.ТипПодписи = ТипПодписиИзФорматаСервиса(ДанныеПодписиВФорматеСервиса.ТипПодписи,
				МетаданныеПеречисленияТипыПодписи);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПодписиВФорматеСервиса.СрокДействияПоследнейМеткиВремени) Тогда
			СвойстваПодписи.СрокДействияПоследнейМеткиВремени = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
				ДанныеПодписиВФорматеСервиса.СрокДействияПоследнейМеткиВремени);
		КонецЕсли;
		Если СвойстваПодписи.Сертификат <> Неопределено Тогда
			СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СвойстваПодписи.Сертификат);
			СвойстваПодписи.Отпечаток = СвойстваСертификата.Отпечаток;
			СвойстваПодписи.КомуВыданСертификат = СвойстваСертификата.КомуВыдан;
		КонецЕсли;
		
		ОшибкаОтсутствияДанных = СтрШаблон(
			НСтр("ru = 'При загрузке данных подписи (%1) не найдена ссылка на подписанный объект (%2)'"),
			ДанныеПодписиВФорматеСервиса.Идентификатор, ДанныеПодписиВФорматеСервиса.ИдентификаторФайла);
		
		ДанныеПодписиФайла.ПодписанныйОбъект = ВнешняяСсылкаНаДанныеПолнойСинхронизацииДокумента(
			ДанныеПодписиВФорматеСервиса.ИдентификаторФайла, Справочники.СообщениеЭДОПрисоединенныеФайлы,
			СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента, ОшибкаОтсутствияДанных);
		
		ДанныеПодписейФайлов.Добавить(ДанныеПодписиФайла);
		
	КонецЦикла;
	
	Возврат ДанныеПодписейФайлов;
	
КонецФункции

// Параметры:
//  ТипПодписиВФорматеСервиса - Строка
//  МетаданныеПеречисленияТипыПодписи - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПодписиКриптографии
Функция ТипПодписиИзФорматаСервиса(ТипПодписиВФорматеСервиса, МетаданныеПеречисленияТипыПодписи = Неопределено)
	
	Если МетаданныеПеречисленияТипыПодписи = Неопределено Тогда
		МетаданныеПеречисленияТипыПодписи = Метаданные.Перечисления.ТипыПодписиКриптографии
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ТипПодписиВФорматеСервиса,
		МетаданныеПеречисленияТипыПодписи);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * СвойстваПодписи - см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
Функция НовыеДанныеПодписиФайлаПолнойСинхронизацииДокумента()
	
	ДанныеПодписиФайла = Новый Структура;
	ДанныеПодписиФайла.Вставить("ПодписанныйОбъект", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ДанныеПодписиФайла.Вставить("СвойстваПодписи", ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи());
	Возврат ДанныеПодписиФайла
	
КонецФункции

// Параметры:
//  ПроверкиПодписейВФорматеСервиса - Массив из Структура:
//  * ИдентификаторФайла - Строка
//  * ХешПодписи - Строка
//  * Доверенность - Неопределено,Структура:
//    ** Номер - Строка
//    ** ДанныеФайла - Строка
//    ** ДанныеПодписи - Строка
//    ** СтатусВРеестреФНС - Строка
//  * ПроверкаВыполнена - Булево
//  * ДатаПроверки - см. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  * ПодписьВерна - Булево
//  * ПротоколПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД
//  СсылкиПоИдентификаторамДанных - см. СсылкиПоИдентификаторамДанныхПолнойСинхронизацииДокументаЭДО
//  СсылкиБезДанныхДокумента - см. НовыеСсылкиБезДанныхПолнойСинхронизацииДокумента
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеПроверкиПодписиПолнойСинхронизацииДокумента
Функция ДанныеПроверокПодписейПолнойСинхронизацииДокументаИзФорматаСервиса(ПроверкиПодписейВФорматеСервиса,
	СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента)
	
	ПроверкиПодписей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПроверкиПодписейВФорматеСервиса) Тогда
		Возврат ПроверкиПодписей;
	КонецЕсли;
	
	Для Каждого ПроверкаПодписиВФорматеСервиса Из ПроверкиПодписейВФорматеСервиса Цикл
		ПроверкаПодписи = НовыеДанныеПроверкиПодписиПолнойСинхронизацииДокумента();
		ПроверкаПодписи.ПодписанныйОбъект = СсылкиПоИдентификаторамДанных[
			ПроверкаПодписиВФорматеСервиса.ИдентификаторФайла];
		ПроверкаПодписи.ХешПодписи = ПроверкаПодписиВФорматеСервиса.ХешПодписи;
		ПроверкаПодписи.ПроверкаВыполнена = ПроверкаПодписиВФорматеСервиса.ПроверкаВыполнена;
		ПроверкаПодписи.ПодписьВерна = ПроверкаПодписиВФорматеСервиса.ПодписьВерна;
		ПроверкаПодписи.ДатаПроверки = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(
			ПроверкаПодписиВФорматеСервиса.ДатаПроверки);
		ПроверкаПодписи.ПротоколПроверки = МашиночитаемыеДоверенности.ПрочитатьПротоколПроверкиJSON(
			ПроверкаПодписиВФорматеСервиса.ПротоколПроверки);
		
		Доверенность = МашиночитаемыеДоверенностиИнтеграцияОблака.ДоверенностьПоДаннымСервиса(
			ПроверкаПодписиВФорматеСервиса.Доверенность);
		Если ЗначениеЗаполнено(Доверенность) Тогда
			ПроверкаПодписи.Доверенность = Доверенность;
		КонецЕсли;
		
		ОшибкаОтсутствияДанных = СтрШаблон(
			НСтр("ru = 'При загрузке данных проверки подписи (хэш %1) не найдена ссылка на подписанный объект (%2)'"),
			ПроверкаПодписиВФорматеСервиса.ХешПодписи, ПроверкаПодписиВФорматеСервиса.ИдентификаторФайла);
		
		ПроверкаПодписи.ПодписанныйОбъект = ВнешняяСсылкаНаДанныеПолнойСинхронизацииДокумента(
			ПроверкаПодписиВФорматеСервиса.ИдентификаторФайла, Справочники.СообщениеЭДОПрисоединенныеФайлы,
			СсылкиПоИдентификаторамДанных, СсылкиБезДанныхДокумента, ОшибкаОтсутствияДанных);
		
		ПроверкиПодписей.Добавить(ПроверкаПодписи);
	КонецЦикла;
	
	Возврат ПроверкиПодписей;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  * Доверенность - Неопределено
//  * ПроверкаВыполнена - Булево
//  * ДатаПроверки - Дата
//  * ПодписьВерна - Булево
//  * ПротоколПроверки - Неопределено 
Функция НовыеДанныеПроверкиПодписиПолнойСинхронизацииДокумента()
	
	ПроверкаПодписи = Новый Структура;
	ПроверкаПодписи.Вставить("ПодписанныйОбъект", Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	ПроверкаПодписи.Вставить("ХешПодписи", "");
	ПроверкаПодписи.Вставить("Доверенность", Неопределено);
	ПроверкаПодписи.Вставить("ПроверкаВыполнена", Ложь);
	ПроверкаПодписи.Вставить("ДатаПроверки", '00010101');
	ПроверкаПодписи.Вставить("ПодписьВерна", Ложь);
	ПроверкаПодписи.Вставить("ПротоколПроверки", Неопределено);
	Возврат ПроверкаПодписи;
	
КонецФункции

// Параметры:
//  ДанныеСинхронизации - см. ДанныеПолнойСинхронизацииДокументаЭДОИзФорматаСервиса
Процедура ЗаписатьДанныеПолнойСинхронизацииДокументаЭДО(ДанныеСинхронизации)
	
	ЗаписатьДанныеСообщенийПолнойСинхронизацииДокумента(ДанныеСинхронизации.Сообщения);
	
	ЗаписатьДанныеФайловСообщенийПолнойСинхронизацииДокумента(ДанныеСинхронизации.ФайлыСообщений);
	
	ЗаписатьДанныеПодписейФайловПолнойСинхронизацииДокумента(ДанныеСинхронизации.ПодписиФайлов);
	
	ЗаписатьДанныеПроверокПодписейПолнойСинхронизацииДокумента(ДанныеСинхронизации.ПроверкиПодписейПоМЧД);
	
КонецПроцедуры

// Параметры:
//  ДанныеСообщений - См. ДанныеСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса
Процедура ЗаписатьДанныеСообщенийПолнойСинхронизацииДокумента(ДанныеСообщений)
	
	Для Каждого ДанныеСообщения Из ДанныеСообщений Цикл
		
		Если ДанныеСообщения.ЭтоНовыеДанные Тогда
			СообщениеОбъект = Документы.СообщениеЭДО.СоздатьДокумент();
			СообщениеОбъект.УстановитьСсылкуНового(ДанныеСообщения.Ссылка);
			СообщениеОбъект.Дата = ТекущаяДатаСеанса();
			
			РегистрыСведений.ИдентификаторыСинхронизируемыхОбъектовОблачногоЭДО.Записать(
				ДанныеСообщения.Идентификатор, ДанныеСообщения.Ссылка);
		Иначе
			СообщениеОбъект = ДанныеСообщения.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		СообщениеОбъект.ВидСообщения = ДанныеСообщения.ВидСообщения;
		СообщениеОбъект.Направление = ДанныеСообщения.Направление;
		СообщениеОбъект.ТипЭлементаРегламента = ДанныеСообщения.ТипЭлементаРегламента;
		СообщениеОбъект.Статус = ДанныеСообщения.Статус;
		СообщениеОбъект.ДатаИзмененияСтатуса = ДанныеСообщения.ДатаИзмененияСтатуса;
		СообщениеОбъект.Состояние = Перечисления.СостоянияСообщенийЭДО.Хранение;
		СообщениеОбъект.ДополнительнаяИнформация = ДанныеСообщения.СопроводительнаяЗаписка;
		СообщениеОбъект.ЭлектронныйДокумент = ДанныеСообщения.ЭлектронныйДокумент;
		СообщениеОбъект.ОсновнойФайл = ДанныеСообщения.ОсновнойФайл;
		
		СообщениеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеФайлов - См. ДанныеФайловСообщенийПолнойСинхронизацииДокументаИзФорматаСервиса
Процедура ЗаписатьДанныеФайловСообщенийПолнойСинхронизацииДокумента(ДанныеФайлов)
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		Файл = Новый Файл(ДанныеФайла.Имя);
		ИмяБезРасширения = Файл.ИмяБезРасширения;
		РасширениеБезТочки = СтрЗаменить(Файл.Расширение,".","");
		АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеФайла.Данные);
		
		Если ДанныеФайла.ЭтоНовыеДанные Тогда
			ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыДобавленияФайла.ВладелецФайлов = ДанныеФайла.ВладелецФайла;
			ПараметрыДобавленияФайла.Служебный = Истина;
			ПараметрыДобавленияФайла.Автор = Пользователи.ТекущийПользователь();
			ПараметрыДобавленияФайла.ИмяБезРасширения = ИмяБезРасширения;
			ПараметрыДобавленияФайла.РасширениеБезТочки = РасширениеБезТочки;
			ПараметрыДобавленияФайла.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
			РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных,,,ДанныеФайла.Ссылка);
			
			РегистрыСведений.ИдентификаторыСинхронизируемыхОбъектовОблачногоЭДО.Записать(
				ДанныеФайла.Идентификатор, ДанныеФайла.Ссылка);
		Иначе
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресДвоичныхДанных);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ИнформацияОФайле.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
			ИнформацияОФайле.Вставить("ИмяБезРасширения", ИмяБезРасширения);
			ИнформацияОФайле.Вставить("Расширение", РасширениеБезТочки);
			РаботаСФайлами.ОбновитьФайл(ДанныеФайла.Ссылка, ИнформацияОФайле);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеПодписейФайлов - См. ДанныеПодписейФайловПолнойСинхронизацииДокументаИзФорматаСервиса
Процедура ЗаписатьДанныеПодписейФайловПолнойСинхронизацииДокумента(ДанныеПодписейФайлов)
	
	Для Каждого ДанныеПодписиФайла Из ДанныеПодписейФайлов Цикл
		
		ПодписанныйОбъект = ДанныеПодписиФайла.ПодписанныйОбъект;
		СвойстваПодписи = ДанныеПодписиФайла.СвойстваПодписи;
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(
			ПодписанныйОбъект, СвойстваПодписи.ПорядковыйНомер);
		
		Если ЗначениеЗаполнено(УстановленныеПодписи) Тогда
			ЭлектроннаяПодпись.ОбновитьПодпись(ПодписанныйОбъект, СвойстваПодписи, Истина);
		Иначе
			ЭлектроннаяПодпись.ДобавитьПодпись(ПодписанныйОбъект, СвойстваПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПроверкиПодписейПоМЧД - См. ДанныеПроверокПодписейПолнойСинхронизацииДокументаИзФорматаСервиса
Процедура ЗаписатьДанныеПроверокПодписейПолнойСинхронизацииДокумента(ПроверкиПодписейПоМЧД)
	
	Для Каждого ПроверкаПодписи Из ПроверкиПодписейПоМЧД Цикл
		
		РезультатПроверки = МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи();
		РезультатПроверки.ПроверкаВыполнена = ПроверкаПодписи.ПроверкаВыполнена;
		РезультатПроверки.ДатаПроверки = ПроверкаПодписи.ДатаПроверки;
		РезультатПроверки.ПодписьВерна = ПроверкаПодписи.ПодписьВерна;
		РезультатПроверки.Доверенность = ПроверкаПодписи.Доверенность;
		РезультатПроверки.ПротоколПроверки = ПроверкаПодписи.ПротоколПроверки;
		РезультатПроверки.ТребуетсяДоверенность = Истина;
		
		МашиночитаемыеДоверенности.ЗаписатьРезультатПроверкиПодписи(ПроверкаПодписи.ПодписанныйОбъект,
			ПроверкаПодписи.ХешПодписи, РезультатПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  МассивПриемник - Массив
//  КоллекцияСтрок - ТаблицаЗначений
//                 - ДеревоЗначений
//                 - СписокЗначений
//                 - ТабличнаяЧасть
//                 - Соответствие
//                 - Структура
//  ИменаКолонок   - Строка
//@skip-check doc-comment-collection-item-type
Процедура ДополнитьМассивИзКолонок(МассивПриемник, КоллекцияСтрок, ИменаКолонок) Экспорт
	
	ИменаКолонокБезПробелов = СтрЗаменить(ИменаКолонок, " ", "");
	НаборИмен = СтрРазделить(ИменаКолонокБезПробелов, ",", Ложь);
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Для Каждого ИмяКолонки Из НаборИмен Цикл
			Значение = СтрокаКоллекции[ИмяКолонки];
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  События - Массив из Структура
Процедура ВызватьСобытияДокументаЭДОПослеПолнойСинхронизации(ЭлектронныйДокумент, События)
	
	Если Не ЗначениеЗаполнено(События) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	МетаданныеТипыСобытийДокументаОблачногоЭДО = Метаданные.Перечисления.ТипыСобытийДокументаОблачногоЭДО;
	
	Для Каждого Событие из События Цикл
		
		ТипСобытия = ТипСобытияДокументаИзФорматаСервиса(Событие.Тип, МетаданныеТипыСобытийДокументаОблачногоЭДО);
		Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеФормирования Тогда
			
			ИнтеграцияЭДО.ПослеФормированияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеЗагрузки Тогда
			
			ПослеЗагрузкиНовогоЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеУтверждения Тогда
			
			ИнтеграцияЭДО.ПослеУтвержденияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеПодписания Тогда
			
			ИнтеграцияЭДО.ПослеПодписанияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеЗавершенияОбмена Тогда
			
			ИнтеграцияЭДО.ПослеЗавершенияОбменаЭлектроннымДокументом(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеАннулирования Тогда
			
			ИнтеграцияЭДО.ПослеАннулированияЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеПолученияПоСчетуФактуреПДП Тогда
			
			ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент,
				Перечисления.ТипыЭлементовРегламентаЭДО.ПДП, Событие.Параметры, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеПолученияПоСчетуФактуреПДО Тогда
			
			ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент,
				Перечисления.ТипыЭлементовРегламентаЭДО.ПДО, Событие.Параметры, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеПолученияПоСчетуФактуреИОП Тогда
			
			ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент,
				Перечисления.ТипыЭлементовРегламентаЭДО.ИОП, Событие.Параметры, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеПолученияПоСчетуФактуреИОП_ПДО Тогда
			
			ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент,
				Перечисления.ТипыЭлементовРегламентаЭДО.ИОП_ПДО, Событие.Параметры, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия =
			Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов Тогда
			
			ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(ЭлектронныйДокумент, КонтекстДиагностики);
			
		ИначеЕсли ТипСобытия =
			Перечисления.ТипыСобытийДокументаОблачногоЭДО.ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях Тогда
			
			ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях(ЭлектронныйДокумент, КонтекстДиагностики);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ТипЭлементаРегламентаВФорматеСервиса - Строка
//  МетаданныеТипыСобытийДокументаОблачногоЭДО - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
Функция ТипСобытияДокументаИзФорматаСервиса(ТипЭлементаРегламентаВФорматеСервиса,
		МетаданныеТипыСобытийДокументаОблачногоЭДО = Неопределено)
	
	Если МетаданныеТипыСобытийДокументаОблачногоЭДО = Неопределено Тогда
		МетаданныеТипыСобытийДокументаОблачногоЭДО = Метаданные.Перечисления.ТипыСобытийДокументаОблачногоЭДО;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ТипЭлементаРегламентаВФорматеСервиса,
		МетаданныеТипыСобытийДокументаОблачногоЭДО);
	
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПослеЗагрузкиНовогоЭлектронногоДокумента(ЭлектронныйДокумент, КонтекстДиагностики)
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	ДанныеДокументов = ЭлектронныеДокументыЭДОСлужебный.ДанныеДокументовДляОтраженияВУчете(ЭлектронныеДокументы);
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ДанныеДокументов[0];
	
	ЗагруженныйДокумент = ЭлектронныеДокументыЭДО.НовыеСведенияЗагруженногоДокумента();
	ЗагруженныйДокумент.ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
	ЗагруженныйДокумент.ВидДокумента = ДанныеДокумента.ВидДокумента;
	ЗагруженныйДокумент.ТипДокумента = ДанныеДокумента.ТипДокумента;
	ЗагруженныйДокумент.Организация = ?(ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент),
		ДанныеДокумента.Получатель, ДанныеДокумента.Отправитель);
	ЗагруженныйДокумент.Контрагент = ?(ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент),
		ДанныеДокумента.Отправитель, ДанныеДокумента.Получатель);
	ЗагруженныйДокумент.ИдентификаторОтправителя = ДанныеДокумента.ИдентификаторОтправителя;
	ЗагруженныйДокумент.ИдентификаторПолучателя = ДанныеДокумента.ИдентификаторПолучателя;
	ЗагруженныйДокумент.ОписаниеДанных = ДанныеДокумента.ДанныеОсновногоФайла;
	ЗагруженныйДокумент.ОписаниеДополнительныхДанных = ДанныеДокумента.ДанныеДополнительногоФайла;
	ЗагруженныйДокумент.ДополнительныеПараметрыКарточки = ДанныеДокумента.ДополнительныеПараметрыКарточки;
	ЗагруженныйДокумент.Формат = ДанныеДокумента.Формат;
	
	ИнтеграцияЭДО.ПослеЗагрузкиНовогоЭлектронногоДокумента(ЗагруженныйДокумент, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
//  ТипПодтверждения - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  ПараметрыСобытия - Структура:
//  * Подтверждения - Массив из Структура:
//    ** Тип - Строка
//    ** Дата - См. ОбщегоНазначенияБЭД.ДатаВФорматеISO
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПослеЗагрузкиПодтвержденияПоСчетуФактуре(ЭлектронныйДокумент, ТипПодтверждения, ПараметрыСобытия,
	КонтекстДиагностики)
	
	ДокументыПодтверждения = Новый ТаблицаЗначений;
	ДокументыПодтверждения.Колонки.Добавить("ТипЭлементаРегламента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО"));
	ДокументыПодтверждения.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДокументыПодтверждения.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));
	
	МетаданныеТипыЭлементовРегламентаЭДО = Метаданные.Перечисления.ТипыЭлементовРегламентаЭДО;
	
	Для Каждого ПодтверждениеВФорматеСервиса Из ПараметрыСобытия.Подтверждения Цикл
		
		ТипЭлементаРегламента = ТипЭлементаРегламентаИзФорматаСервиса(
			ПодтверждениеВФорматеСервиса.Тип, МетаданныеТипыЭлементовРегламентаЭДО);
		Если Не ЗначениеЗаполнено(ТипЭлементаРегламента) Тогда
			Продолжить;
		КонецЕсли;
		
		Подтверждение = ДокументыПодтверждения.Добавить();
		Подтверждение.ТипЭлементаРегламента = ТипЭлементаРегламента;
		Подтверждение.Дата = ОбщегоНазначенияБЭД.ДатаИзФорматаISO(ПодтверждениеВФорматеСервиса.Дата);
		Подтверждение.Текущий = (ТипПодтверждения = ТипЭлементаРегламента);
		
	КонецЦикла;
	
	ИнтеграцияЭДО.ПослеЗагрузкиПодтвержденияПоСчетуФактуре(
		ЭлектронныйДокумент, ДокументыПодтверждения, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(ЭлектронныйДокумент, КонтекстДиагностики)
	
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(ОсновнойФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл);
	ОписаниеФайла.ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойФайл, "ПолноеИмяФайла");
	
	ИнтеграцияЭДО.ПослеЗагрузкиИнформацииПолучателяПоАктуСверкиВзаиморасчетов(
		ЭлектронныйДокумент, ОписаниеФайла, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях(ЭлектронныйДокумент, КонтекстДиагностики)
	
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлПоТипуЭлементаРегламента(ЭлектронныйДокумент,
		Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки);
	Если Не ЗначениеЗаполнено(ОсновнойФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл);
	ОписаниеФайла.ИмяФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойФайл, "ПолноеИмяФайла");
	
	ИнтеграцияЭДО.ПослеЗагрузкиДополнительныхСведенийПоАктуОРасхождениях(
		ЭлектронныйДокумент, ОписаниеФайла, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - Массив из Структура:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** СостояниеСинхронизации - см. РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта
Функция ПараметрыОбновленийПолныхДанныхДокументовПоУчетнымЗаписямОблачногоЭДО(ЭлектронныеДокументы, КонтекстДиагностики)
	
	Результат = Новый Соответствие; // см. ПараметрыОбновленийПолныхДанныхДокументовПоУчетнымЗаписямОблачногоЭДО
	
	Если Не ЗначениеЗаполнено(ЭлектронныеДокументы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВходящиеДокументыЭДО = Новый Массив;
	ИсходящиеДокументыЭДО = Новый Массив;
	
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		Если ЭлектронныеДокументыЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент) Тогда
			ВходящиеДокументыЭДО.Добавить(ЭлектронныйДокумент);
		Иначе
			ИсходящиеДокументыЭДО.Добавить(ЭлектронныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(ВходящиеДокументыЭДО) Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокумент.Ссылка КАК Ссылка,
			|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЕСТЬNULL(НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО,
			|		ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка)) КАК УчетнаяЗаписьОблачногоЭДО,
			|	ЕСТЬNULL(СостоянияСинхронизации.МеткаВремени, 0) КАК МеткаВремени
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОблачногоЭДО КАК НастройкиОблачногоЭДО
			|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = НастройкиОблачногоЭДО.ИдентификаторЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизации
			|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = СостоянияСинхронизации.ИдентификаторЭДО
			|		И СостоянияСинхронизации.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО)
			|		И ЭлектронныйДокумент.ИдентификаторДокумента = СостоянияСинхронизации.ИдентификаторОбъекта
			|ГДЕ
			|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
			|	И ЭлектронныйДокумент.Ссылка В (&ВходящиеДокументыЭДО)");
		Запрос.УстановитьПараметр("ВходящиеДокументыЭДО", ВходящиеДокументыЭДО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходящиеДокументыЭДО) Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЭлектронныйДокумент.Ссылка КАК Ссылка,
			|	ЭлектронныйДокумент.ИдентификаторДокумента КАК ИдентификаторДокумента,
			|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ЕСТЬNULL(НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО,
			|		ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиОблачногоЭДО.ПустаяСсылка)) КАК УчетнаяЗаписьОблачногоЭДО,
			|	ЕСТЬNULL(СостоянияСинхронизации.МеткаВремени, 0) КАК МеткаВремени
			|ИЗ
			|	Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОблачногоЭДО КАК НастройкиОблачногоЭДО
			|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = НастройкиОблачногоЭДО.ИдентификаторЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО КАК СостоянияСинхронизации
			|		ПО ЭлектронныйДокумент.ИдентификаторОрганизации = СостоянияСинхронизации.ИдентификаторЭДО
			|		И СостоянияСинхронизации.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыСинхронизацииОблачногоЭДО.ДанныеДокументовЭДО)
			|		И ЭлектронныйДокумент.ИдентификаторДокумента = СостоянияСинхронизации.ИдентификаторОбъекта
			|ГДЕ
			|	ЭлектронныйДокумент.ЭтоОблачныйЭДО
			|	И ЭлектронныйДокумент.Ссылка В (&ИсходящиеДокументыЭДО)");
		Запрос.УстановитьПараметр("ИсходящиеДокументыЭДО", ИсходящиеДокументыЭДО);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.ТекстОбъединитьВсе());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.УчетнаяЗаписьОблачногоЭДО) Тогда
			ВидОперации = НСтр("ru = 'Обновление полных данных электронного документа.'");
			ДобавитьОшибкуОтсутствуетУчетнаяЗаписьОблачногоЭДОПоДокументу(КонтекстДиагностики,
				ВидОперации, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбновленийДокументов = Результат[Выборка.УчетнаяЗаписьОблачногоЭДО];
		Если ПараметрыОбновленийДокументов = Неопределено Тогда
			ПараметрыОбновленийДокументов = Новый Массив;
			Результат.Вставить(Выборка.УчетнаяЗаписьОблачногоЭДО, ПараметрыОбновленийДокументов);
		КонецЕсли;
		
		СостояниеСинхронизации = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.НовоеСостояниеОбъекта();
		СостояниеСинхронизации.ИдентификаторОбъекта = Выборка.ИдентификаторДокумента;
		СостояниеСинхронизации.ИдентификаторЭДО = Выборка.ИдентификаторОрганизации;
		СостояниеСинхронизации.МеткаВремени = Выборка.МеткаВремени;
		
		ПараметрыОбновленияДокумента = Новый Структура("ЭлектронныйДокумент, СостояниеСинхронизации",
			Выборка.Ссылка, СостояниеСинхронизации);
		
		ПараметрыОбновленийДокументов.Добавить(ПараметрыОбновленияДокумента);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПолнаяСинхронизацияДокументов

#Область Подписи

// Возвращаемое значение:
//  Строка
Функция ВидОперацииПроверкаПодписейДокумента()
	Возврат НСтр("ru = 'Проверка подписей документа'");
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
