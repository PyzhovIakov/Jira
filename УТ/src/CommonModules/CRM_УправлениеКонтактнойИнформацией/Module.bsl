////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
//  Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//  Форма							 - ФормаКлиентскогоПриложения	 - форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект							 - ДокументОбъект, СправочникСсылка, ДокументСсылка,
//  								   СправочникОбъект, ДокументОбъект	 - объект-владелец контактной информации.
//  									Если это ссылка, то контактная информация
//  									будет получена из объекта по ссылке, иначе из таблицы КонтактнаяИнформация объекта.
//  ДополнительныеПараметры			 - Строка						 - -  - см. ПараметрыКонтактнойИнформации.
//  						- Строка - устарел.
//  УдалитьПоложениеЗаголовкаКИ		 - ПоложениеЗаголовкаЭлементаФормы	 - устарел, следует использовать ДополнительныеПараметры.
//  УдалитьИсключаемыеВиды			 - Массив							 - устарел,следует использовать ДополнительныеПараметры.
//  УдалитьОтложеннаяИнициализация	 - Массив							 - устарел,следует использовать ДополнительныеПараметры.
//  УдалитьВыводитьВОднуКолонку		 - Булево							 - устарел, следует использовать ДополнительныеПараметры.
//  ДобавляемыеРеквизиты			 - Массив							 - Добавляемые реквизиты.
//
Процедура ПриСозданииНаСервере(Форма, Объект, Знач ДополнительныеПараметры = Неопределено, УдалитьПоложениеЗаголовкаКИ = "",
	Знач УдалитьИсключаемыеВиды = Неопределено, УдалитьОтложеннаяИнициализация = Ложь,
	УдалитьВыводитьВОднуКолонку = Ложь, ДобавляемыеРеквизиты = Неопределено) Экспорт
	
	ТипПомещения = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ДополнительныеПараметры.Свойство("ТипПомещения", ТипПомещения);
		ОтложеннаяИнициализация  = ?(ДополнительныеПараметры.Свойство("ОтложеннаяИнициализация"), ДополнительныеПараметры.ОтложеннаяИнициализация, Ложь);
		ПоложениеЗаголовкаКИ     = ?(ДополнительныеПараметры.Свойство("ПоложениеЗаголовкаКИ"), ДополнительныеПараметры.ПоложениеЗаголовкаКИ, "");
		ИсключаемыеВиды          = ?(ДополнительныеПараметры.Свойство("ИсключаемыеВиды"), ДополнительныеПараметры.ИсключаемыеВиды, Неопределено);
		СкрываемыеВиды           = ?(ДополнительныеПараметры.Свойство("СкрываемыеВиды"), ДополнительныеПараметры.СкрываемыеВиды, Неопределено);
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры.Свойство("ИмяЭлементаДляРазмещения"), ДополнительныеПараметры.ИмяЭлементаДляРазмещения, "ГруппаКонтактнаяИнформация");
		РазрешитьДобавлениеПолей = ?(ДополнительныеПараметры.Свойство("РазрешитьДобавлениеПолей"), ДополнительныеПараметры.РазрешитьДобавлениеПолей, Истина);
		РазмещеныНаФорме         = ?(ДополнительныеПараметры.Свойство("РазмещеныНаФорме"), ДополнительныеПараметры.РазмещеныНаФорме, Неопределено);
		ОбработкаНавигационнойСсылки = ?(ДополнительныеПараметры.Свойство("ОбработкаНавигационнойСсылки"), ДополнительныеПараметры.ОбработкаНавигационнойСсылки, Ложь);
		// +CRM
		ВыводитьВОднуКолонку         = ?(ДополнительныеПараметры.Свойство("ВыводитьВОднуКолонку"), ДополнительныеПараметры.ВыводитьВОднуКолонку, Ложь);
		// -CRM
	Иначе
		ИмяЭлементаДляРазмещения = ?(ДополнительныеПараметры = Неопределено, "ГруппаКонтактнаяИнформация", ДополнительныеПараметры);
		ОтложеннаяИнициализация  = УдалитьОтложеннаяИнициализация;
		ИсключаемыеВиды          = УдалитьИсключаемыеВиды;
		СкрываемыеВиды           = Неопределено;
		ПоложениеЗаголовкаКИ     = УдалитьПоложениеЗаголовкаКИ;
		РазрешитьДобавлениеПолей = Истина;
		РазмещеныНаФорме         = Неопределено;
		// +CRM
		ВыводитьВОднуКолонку     = Ложь;
		// -CRM
		ОбработкаНавигационнойСсылки = Ложь;
	КонецЕсли;
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
		
	Если РазмещеныНаФорме = Неопределено Тогда
		РазмещеныНаФорме = Новый Соответствие;
		Для Каждого ИсключаемыйВид Из ИсключаемыеВиды Цикл
			РазмещеныНаФорме.Вставить(ИсключаемыйВид, Истина);
		КонецЦикла;
	Иначе
		РазмещеныНаФормеСсылки = Новый Соответствие();
		Виды = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ВидыКонтактнойИнформацииПоИмени();
		Для Каждого ЭлементНаФорме Из РазмещеныНаФорме Цикл
			Если ТипЗнч(ЭлементНаФорме.Ключ) = Тип("Строка") Тогда
				РазмещеныНаФормеСсылки.Вставить(Виды.Получить(ЭлементНаФорме.Ключ), Истина);
			Иначе	
				РазмещеныНаФормеСсылки.Вставить(ЭлементНаФорме.Ключ, Истина);
			КонецЕсли;
		КонецЦикла;
		РазмещеныНаФорме = РазмещеныНаФормеСсылки;
	КонецЕсли;
	
	Если СкрываемыеВиды = Неопределено Тогда
		СкрываемыеВиды = Новый Массив;
	КонецЕсли;
	
	// +CRM
	//МассивДобавляемыхРеквизитов = Новый Массив;
	ИзменятьРеквизиты = Ложь;
	Если ДобавляемыеРеквизиты = Неопределено Тогда
		ИзменятьРеквизиты = Истина;
		ДобавляемыеРеквизиты = Новый Массив;
	КонецЕсли;
	// -CRM
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, ДобавляемыеРеквизиты);
	
	// Кэширование часто используемых значений
	СсылкаНаОбъект             = Объект.Ссылка;
	МетаданныеОбъекта          = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяОбъекта                 = МетаданныеОбъекта.Имя;
	ЭтоОсновнойЯзык            = ОбщегоНазначения.ЭтоОсновнойЯзык();
	// +CRM
	ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи",
		 МетаданныеОбъекта,
		 "КонтактнаяИнформация");
	
	// +СофтФон
	ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпВремяЗадержкиНабораДобавочногоНомера",
		 МетаданныеОбъекта,
		 "КонтактнаяИнформация");
	ЕстьРеквизитТабличнойЧасти_сфпПрефиксНабора = CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпПрефиксНабора",
		 МетаданныеОбъекта,
		 "КонтактнаяИнформация");
	// -СофтФон
	
	ЭтоКонфигурацияCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	Если ЭтоКонфигурацияCRM Тогда
		
		ИспользоватьПартнеровКакКонтрагентов = Ложь;
		
	Иначе
		
		ИмяОпции = "ИспользоватьПартнеровКакКонтрагентов";
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию(ИмяОпции);
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			Выполнить("СкрываемыеВиды = ОбщегоНазначенияУТПовтИсп.МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера()");
		КонецЕсли;
		
	КонецЕсли;
	// -CRM
	
	НастройкиКИ = НастройкиПодсистемы(Объект.Ссылка);
	// +CRM
	//ГруппаВидовКонтактнойИнформации = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	//ИспользуетсяКонтактнаяИнформация =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	Если ИмяОбъекта = "Партнеры" Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ + "Компания"]);
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ + "ЧастноеЛицо"]);
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ[0], "Используется");
	Иначе
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	// -CRM
	
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		
		ПараметрыВыводаКонтактнойИнформации = Новый Структура();
		ПараметрыВыводаКонтактнойИнформации.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаКИ);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
		ПараметрыВыводаКонтактнойИнформации.Вставить("СкрываемыеВиды", СкрываемыеВиды);
		ПараметрыВыводаКонтактнойИнформации.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ОписаниеКоманд", НастройкиКИ.ОписаниеКоманд);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ОтображатьИконки", НастройкиКИ.ОтображатьИконки);
		ПараметрыВыводаКонтактнойИнформации.Вставить("РазмещеныНаФорме", РазмещеныНаФорме);
		ПараметрыВыводаКонтактнойИнформации.Вставить("РазрешитьДобавлениеПолей", РазрешитьДобавлениеПолей);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ОбработкаНавигационнойСсылки", ОбработкаНавигационнойСсылки);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ПоложениеКнопкиДобавить", НастройкиКИ.ПоложениеКнопкиДобавить);
		ПараметрыВыводаКонтактнойИнформации.Вставить("ШиринаПоляКомментарий", НастройкиКИ.ШиринаПоляКомментарий);
		// +CRM
		ПараметрыВыводаКонтактнойИнформации.Вставить("ВыводитьВОднуКолонку", УдалитьВыводитьВОднуКолонку);
		ПараметрыВыводаКонтактнойИнформации.Вставить("CRM_ДополнительныеПараметры", ДополнительныеПараметры);
		// -CRM
		
		СкрытьКонтактнуюИнформацию(Форма, ДобавляемыеРеквизиты, ПараметрыВыводаКонтактнойИнформации);
		
		Возврат;
	КонецЕсли;
	
	СодержитДействуетС = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(СсылкаНаОбъект);
	РеквизитыОбъекта           = МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты;
	ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти = (РеквизитыОбъекта.Найти("ИдентификаторСтрокиТабличнойЧасти") <> Неопределено);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид КАК Вид, 
		|	ЕСТЬNULL(ВидыКонтактнойИнформации.ХранитьИсториюИзменений, ЛОЖЬ) КАК ХранитьИсториюИзменений,
		|	КонтактнаяИнформация.ЗначенияПолей,
		|	КонтактнаяИнформация.Значение,
		// +CRM
		|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
		// +СофтФон
		|	КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера,
		|	КонтактнаяИнформация.сфпПрефиксНабора КАК сфпПрефиксНабора,
		// -СофтФон
		// -CRM
		|	"""" КАК ДействуетС,
		|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
		|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация
		|ИЗ
		|	&ПутьКТаблицеКонтактнойИнформации КАК КонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|			ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО Вид, ДействуетС";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПутьКТаблицеКонтактнойИнформации", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");
		
		Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
			"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
		КонецЕсли;
		
		Если СодержитДействуетС Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """"" КАК ДействуетС", "КонтактнаяИнформация.ДействуетС КАК ДействуетС");
		КонецЕсли;
		
		// +CRM
		Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
		КонецЕсли;
		// +СофтФон
		Если НЕ ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера", "Ложь");
		КонецЕсли;
		Если НЕ ЕстьРеквизитТабличнойЧасти_сфпПрефиксНабора Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.сфпПрефиксНабора",
				 "ЗНАЧЕНИЕ(Справочник.сфпПрефиксыИсходящихВызовов.ПустаяСсылка)");
		КонецЕсли;
		// -СофтФон
		// -CRM
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
		
		// +CRM
		// Добавим контактную информацию из контрагента
		Если НЕ ЭтоКонфигурацияCRM И ИспользоватьПартнеровКакКонтрагентов И ИмяОбъекта = "Партнеры"
			 И Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая"
			 И ЗначениеЗаполнено(Форма.КонтрагентПартнера) Тогда
			
			МассивВидовКонтрагентаВПартнере = Новый Массив;
			
			Для Каждого СтрокаКонтактнаяИнформация Из КонтактнаяИнформация Цикл
				
				Если ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель) = Неопределено 
				   И ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель.Родитель) = Неопределено Тогда
					
					Если МассивВидовКонтрагентаВПартнере.Найти(СтрокаКонтактнаяИнформация.Вид) = Неопределено Тогда
						МассивВидовКонтрагентаВПартнере.Добавить(СтрокаКонтактнаяИнформация.Вид);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
			// +CRM
			|	ЛОЖЬ КАК CRM_ОсновнойДляСвязи,
			// -CRM
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|   И НЕ КонтактнаяИнформация.Вид В (&МассивВидовКонтрагентаВПартнере)
			|
			|УПОРЯДОЧИТЬ ПО Вид, ДействуетС";
			
			Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
				"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Форма.КонтрагентПартнера);
			Запрос.УстановитьПараметр("МассивВидовКонтрагентаВПартнере", МассивВидовКонтрагентаВПартнере);
			
			КонтактнаяИнформацияКонтрагента = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаКонтактнаяИнформацияКонтрагента  Из КонтактнаяИнформацияКонтрагента Цикл
				СтрокаКонтактнаяИнформация = КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнаяИнформация, СтрокаКонтактнаяИнформацияКонтрагента);
			КонецЦикла;
			
		КонецЕсли;
		
		Если КонтактнаяИнформация.Колонки.Найти("ХранитьИсториюИзменений") <> Неопределено Тогда
			ПредыдущийВид = Неопределено;
			Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
				Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
					И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
						Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
						НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
						ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
								НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
							КонецЕсли;
						КонецЦикла;
						ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// -CRM
	Иначе
		КонтактнаяИнформация = Объект.КонтактнаяИнформация.Выгрузить();
		
		// +CRM
		ТипБулево = Новый ОписаниеТипов("Булево");
		КонтактнаяИнформация.Колонки.Добавить("ХранитьИсториюИзменений", ТипБулево);
		КонтактнаяИнформация.Колонки.Добавить("ЭтоИсторическаяКонтактнаяИнформация", ТипБулево);
		
		Если Не СодержитДействуетС Тогда
			ТипДата = Новый ОписаниеТипов("Дата");
			КонтактнаяИнформация.Колонки.Добавить("ДействуетС", ТипДата);
		КонецЕсли;
		
		КонтактнаяИнформация.Сортировать("Вид, ДействуетС");
		
		ВидыКИХранитьИсториюИзменений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		КонтактнаяИнформация.ВыгрузитьКолонку("Вид"), "ХранитьИсториюИзменений");
		
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			ХранитьИсториюИзменений = ВидыКИХранитьИсториюИзменений.Получить(СтрокаКонтактнойИнформации.Вид);
			СтрокаКонтактнойИнформации.ХранитьИсториюИзменений = ?(ХранитьИсториюИзменений <> Неопределено, ХранитьИсториюИзменений, Ложь);
		КонецЦикла;
		
		// добавим контактную информацию из контрагента
		Если НЕ ЭтоКонфигурацияCRM И ИспользоватьПартнеровКакКонтрагентов И ИмяОбъекта = "Партнеры"
			 И Форма.ИмяФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая"
			 И ЗначениеЗаполнено(Форма.КонтрагентПартнера) Тогда
			
			МассивВидовКонтрагентаВПартнере = Новый Массив;
			
			Для Каждого СтрокаКонтактнаяИнформация Из КонтактнаяИнформация Цикл
				
				Если ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель) = Неопределено 
				   И ГруппаВидовКИ.Найти(СтрокаКонтактнаяИнформация.Вид.Родитель.Родитель) = Неопределено Тогда
					
					Если МассивВидовКонтрагентаВПартнере.Найти(СтрокаКонтактнаяИнформация.Вид) = Неопределено Тогда
						МассивВидовКонтрагентаВПартнере.Добавить(СтрокаКонтактнаяИнформация.Вид);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	ЛОЖЬ КАК ЭтоИсторическаяКонтактнаяИнформация,
			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
			|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений КАК ХранитьИсториюИзменений,
			// +CRM
			|	ЛОЖЬ КАК CRM_ОсновнойДляСвязи,
			// -CRM
			|	0 КАК ИдентификаторСтрокиТабличнойЧасти,
			|	КонтактнаяИнформация.Значение,
			|	КонтактнаяИнформация.ЗначенияПолей
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО (КонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И НЕ КонтактнаяИнформация.Вид В (&МассивВидовКонтрагентаВПартнере)
			|
			|УПОРЯДОЧИТЬ ПО Вид, ДействуетС";
			
			Если ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК ИдентификаторСтрокиТабличнойЧасти",
				"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0) КАК ИдентификаторСтрокиТабличнойЧасти");
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Форма.КонтрагентПартнера);
			Запрос.УстановитьПараметр("МассивВидовКонтрагентаВПартнере", МассивВидовКонтрагентаВПартнере);
			
			КонтактнаяИнформацияКонтрагента = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаКонтактнаяИнформацияКонтрагента  Из КонтактнаяИнформацияКонтрагента Цикл
				СтрокаКонтактнаяИнформация = КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнаяИнформация, СтрокаКонтактнаяИнформацияКонтрагента);
			КонецЦикла;
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
	// +CRM
	ПредыдущийВид = Неопределено;
	ЕстьИсторическаяИнформация = Ложь;
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		Если СтрокаКонтактнойИнформации.ХранитьИсториюИзменений
			И (ПредыдущийВид = Неопределено ИЛИ ПредыдущийВид <> СтрокаКонтактнойИнформации.Вид) Тогда
			Отбор = Новый Структура("Вид", СтрокаКонтактнойИнформации.Вид);
			НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
			ПоследняяДата = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 1).ДействуетС;
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ДействуетС < ПоследняяДата Тогда
					НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					ЕстьИсторическаяИнформация = Истина;
				КонецЕсли;
			КонецЦикла;
			ПредыдущийВид = СтрокаКонтактнойИнформации.Вид;
		КонецЕсли;
	КонецЦикла;
	// -CRM
	
	ТекстЗапроса = СформироватьТекстЗапроса(ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
		ЕстьИсторическаяИнформация, ЭтоОсновнойЯзык,
		// +CRM
		ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи,
		ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера,
		ЕстьРеквизитТабличнойЧасти_сфпПрефиксНабора,
		ИмяОбъекта);
		// -CRM
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", КонтактнаяИнформация);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СкрываемыеВиды", СкрываемыеВиды);
	Если Не ЭтоОсновнойЯзык Тогда
		Запрос.УстановитьПараметр("ЭтоОсновнойЯзык", ЭтоОсновнойЯзык);
		Запрос.УстановитьПараметр("КодЯзыка", ТекущийЯзык().КодЯзыка);
	КонецЕсли;
	// +CRM
	Запрос.УстановитьПараметр("ВыводитьВОднуКолонку", ВыводитьВОднуКолонку);
	// -CRM
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонвертацияКонтактнойИнформацииВJSON(КонтактнаяИнформация);
	
	// +CRM
	//КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, Вид, НомерСтроки");
	// -CRM
	СоздатьРеквизитыКонтактнойИнформации(Форма, ДобавляемыеРеквизиты, ИмяОбъекта, РазмещеныНаФорме, КонтактнаяИнформация, 
		ОтложеннаяИнициализация, ОбработкаНавигационнойСсылки);
	
	ДополнительныеПараметры = ДополнительныеПараметрыВыводаКонтактнойИнформации(НастройкиКИ.ОписаниеКоманд,
		НастройкиКИ.ОтображатьИконки, РазмещеныНаФорме, РазрешитьДобавлениеПолей, ИсключаемыеВиды, СкрываемыеВиды,
		ВыводитьВОднуКолонку, ДополнительныеПараметры); // +CRM
	ДополнительныеПараметры.ПоложениеКнопкиДобавить = НастройкиКИ.ПоложениеКнопкиДобавить;
	ДополнительныеПараметры.ШиринаПоляКомментарий = НастройкиКИ.ШиринаПоляКомментарий;
	
	ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения,
		ПоложениеЗаголовкаКИ, ОтложеннаяИнициализация, ДополнительныеПараметры);
	ПараметрыКонтактнойИнформации.Владелец                     = СсылкаНаОбъект;
	Если ЗначениеЗаполнено(ТипПомещения) Тогда
		ПараметрыКонтактнойИнформации.ПараметрыАдреса.ТипПомещения = ТипПомещения;
	КонецЕсли;
	ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки = ОбработкаНавигационнойСсылки;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	СозданныеЭлементы = ОбщегоНазначения.СкопироватьРекурсивно(РазмещеныНаФорме);
	ПредыдущийВид = Неопределено;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Форма.Элементы[ИмяЭлементаДляРазмещения].ШрифтЗаголовка = ШрифтыСтиля.ВажнаяНадписьШрифт;
	КонецЕсли;
	
	ИмяГруппы = "ГруппаЗначенияКомандыКИ" + ИмяЭлементаДляРазмещения;
	ГруппаЗначенияКомандыКИ = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаЗначенияКомандыКИ = Неопределено Тогда
		Родитель = Родитель(Форма, ИмяЭлементаДляРазмещения);
		ГруппаЗначенияКомандыКИ = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		ГруппаЗначенияКомандыКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗначенияКомандыКИ.Заголовок = НСтр("ru = 'Значения контактной информации'");
		ГруппаЗначенияКомандыКИ.ОтображатьЗаголовок = Ложь;
		ГруппаЗначенияКомандыКИ.РазрешитьИзменениеСостава = Ложь;
		ГруппаЗначенияКомандыКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗначенияКомандыКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЗначенияКомандыКИ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаЗначенияКомандыКИ.РастягиватьПоГоризонтали = Ложь;
		ГруппаЗначенияКомандыКИ.Объединенная = Ложь;
	КонецЕсли;
	
	ИмяГруппы = "ГруппаЗначенияКИ" + ИмяЭлементаДляРазмещения;
	ГруппаЗначенияКИ = Форма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаЗначенияКИ = Неопределено Тогда
		ГруппаЗначенияКИ = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаЗначенияКомандыКИ);
		ГруппаЗначенияКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗначенияКИ.Заголовок = НСтр("ru = 'Значения и команды контактной информации'");
		ГруппаЗначенияКИ.ОтображатьЗаголовок = Ложь;
		ГруппаЗначенияКИ.РазрешитьИзменениеСостава = Ложь;
		ГруппаЗначенияКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗначенияКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		ДанныеВидаКонтактнойИнформации = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаКИ);
			
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			СоздатьЭлементыТабличнойЧасти(Форма, ИмяОбъекта, ИмяЭлементаДляРазмещения, СтрокаКИ, ДанныеВидаКонтактнойИнформации);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКИ.ПометкаУдаления И ПустаяСтрока(СтрокаКИ.ЗначенияПолей) И ПустаяСтрока(СтрокаКИ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СозданныйЭлемент = ?(Не СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация,
			СозданныеЭлементы.Получить(СтрокаКИ.Вид), Неопределено);
		
		Если СозданныйЭлемент <> Неопределено Тогда
			СозданныйЭлемент = СтрокаКИ.Вид;
		КонецЕсли;
		СтатическийЭлемент = СозданныйЭлемент <> Неопределено;
		ЭтоНовыйВидКИ      = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация  Тогда
			ПредыдущийВид = СтрокаКИ.Вид;
		КонецЕсли;
		
		Если НЕ СтрокаКИ.ОтображатьВсегда И ПустаяСтрока(СтрокаКИ.Значение) И НЕ СтатическийЭлемент Тогда
			Если ЭтоНовыйВидКИ И Не СтрокаКИ.ПометкаУдаления Тогда
				Вид = СтрокаКИ.Вид; // СправочникСсылка.ВидыКонтактнойИнформации
				ДанныеВидаКонтактнойИнформации.Вставить("Ссылка", СтрокаКИ.Вид);
				Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
					ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, Строка(Вид));
				Иначе
					КартинкаТипа = КартинкаТипаКонтактнойИнформации(ДанныеВидаКонтактнойИнформации.Тип);
					ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, Строка(Вид),,КартинкаТипа);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,, 
				СтатическийЭлемент, ИмяЭлементаДляРазмещения);
			Если СтатическийЭлемент Тогда
				ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, СозданныйЭлемент,
					ПараметрыКонтактнойИнформации.ОтображатьИконки, ИмяЭлементаДляРазмещения);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,, 
			НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, ИмяЭлементаДляРазмещения);
		
		Если СтатическийЭлемент Тогда
			ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, СозданныйЭлемент, 
				ПараметрыКонтактнойИнформации.ОтображатьИконки, ИмяЭлементаДляРазмещения);
		Иначе
			СледующаяСтрока = ?(СозданныеЭлементы.Количество() = 0, Неопределено,
				ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ));
			
			Если НЕ СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ДобавитьСтрокуКонтактнойИнформации(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения,
					ЭтоНовыйВидКИ, КоличествоАдресов, СледующаяСтрока,
					ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения);
	
	Если ПравоДоступа("Изменение",Метаданные.Справочники.ВидыКонтактнойИнформации) Тогда
		// +CRM Рефакторинг кода
		СтруктураДобавляемыйЭлемент = Новый Структура("Ссылка", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
		ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(СтруктураДобавляемыйЭлемент,
			НСтр("ru = 'Настроить...'"));
		// -CRM Рефакторинг кода
	КонецЕсли;
	
	Если Не ОтложеннаяИнициализация И РазрешитьДобавлениеПолей
		И Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения);
	Иначе
		ДобавитьПояснениеПоСбросуНастроекФормы(Форма, ИмяЭлементаДляРазмещения, ОтложеннаяИнициализация);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик завершения события при создании на сервере.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект						 - ДанныеФормыКоллекция			 - данные объекта хранимые в форме.
//  ИмяЭлементаДляРазмещения	 - Строка						 - Имя элемента для размещения.
//  ПоложениеЗаголовкаКИ		 - Строка						 - Положение заголовка контактной информации
//  ОтложеннаяИнициализация		 - Булево						 - Признак отложенной инициализации.
//  ВыводитьВОднуКолонку		 - Булево						 - Признак вывода в одну колонку.
//  ДополнительныеПараметры		 - Структура					 - Дополнительные параметры.
//  МассивДобавляемыхРеквизитов	 - Массив						 - Массив добавляемых реквизитов.
//
Процедура ПриСозданииНаСервереЗавершение(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "",
	ОтложеннаяИнициализация = Ложь, ВыводитьВОднуКолонку = Ложь, ДополнительныеПараметры,
	МассивДобавляемыхРеквизитов = Неопределено) Экспорт
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    ИмяЭлементаДляРазмещения - Строка - Имя элемента для размещения.
//
Процедура ПриЧтенииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации"
			 И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	// +CRM
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	// -CRM
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	// +CRM
	//ГруппаВидовКИ = ВидКонтактнойИнформацииПоИмени(ИмяГруппыВидовКИ);
	ГруппаВидовКИ = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени(ИмяГруппыВидовКИ);
	// -CRM
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(Параметры.ПоложениеЗаголовка),
		 ПредопределенноеЗначение(Параметры.ПоложениеЗаголовка),
		 ПоложениеЗаголовкаЭлементаФормы.Лево);
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	// +CRM
	ВыводитьВОднуКолонку = Параметры.ВыводитьВОднуКолонку;
	
	//ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	Если (ИмяОбъектаМетаданных = "Партнеры") Тогда
		ГруппаВидовКИ = Новый Массив();
		ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ]);
		Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ + "Компания"]);
		ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			ГруппаВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации["CRM_" + ИмяГруппыВидовКИ + "ЧастноеЛицо"]);
		КонецЕсли;
		
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ[0], "Используется");
	Иначе
		ИспользуетсяКонтактнаяИнформация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаВидовКИ, "Используется");
	КонецЕсли;
	// -CRM
	Если ИспользуетсяКонтактнаяИнформация = Ложь Тогда
		МассивУдаляемыхРеквизитов = Параметры.ДобавленныеРеквизиты;
	Иначе
		УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		СтатическиеРеквизиты = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.РазмещеныНаФорме);
		ИменаТабличныхЧастейПоВидамКИ = Неопределено;
		
		Отбор = Новый Структура("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = 
			УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(Отбор);
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				
				Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
					Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
					ВидыКИТабличнойЧасти =
						УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Выгрузить(Отбор, "Вид");
					// @skip-check query-in-loop - Выполняется только в одной итерации, при первом появлении реквизита табличной части
					ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
				КонецЕсли;
				
				ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[РеквизитФормы.Вид];
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧасти + "." 
					+ РеквизитФормы.ИмяРеквизита 
					+ "Значение");
				
			ИначеЕсли Не РеквизитФормы.Свойство("ЭтоИсторическаяКонтактнаяИнформация")
				  Или Не РеквизитФормы.ЭтоИсторическаяКонтактнаяИнформация Тогда
				
				СтатическийРеквизит = СтатическиеРеквизиты.Получить(РеквизитФормы.Вид);
				Если СтатическийРеквизит <> Неопределено Тогда
					СтатическийРеквизит = РеквизитФормы.Вид;
				КонецЕсли;
				
				Если СтатическийРеквизит = Неопределено Тогда // Реквизит создается динамически.
					Если Не ОтложеннаяИнициализация И ЗначениеЗаполнено(РеквизитФормы.ИмяРеквизита) Тогда
						МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
						Если ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(РеквизитФормы.Тип, Параметры.ОбработкаНавигационнойСсылки) Тогда
							МассивУдаляемыхРеквизитов.Добавить("Комментарий" + РеквизитФормы.ИмяРеквизита);
						КонецЕсли;	
					КонецЕсли;
				Иначе
					СтатическиеРеквизиты.Удалить(СтатическийРеквизит);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого РеквизитФормы Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Удалить(РеквизитФормы);
		КонецЦикла;
		Отбор = Новый Структура("ЭтоИсторическаяКонтактнаяИнформация",Истина);
		ИсторическаяКИ = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(Отбор);
		Для Каждого ЭлементКоллекции Из ИсторическаяКИ Цикл
			УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Удалить(ЭлементКоллекции);
		КонецЦикла;
	КонецЕсли;
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ДополнительныеПараметры = ПараметрыКонтактнойИнформации();
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Параметры);
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаКИ;
	ДополнительныеПараметры.ОтложеннаяИнициализация = ОтложеннаяИнициализация;
	// +CRM
	ДополнительныеПараметры.ВыводитьВОднуКолонку = ВыводитьВОднуКолонку;
	// -CRM
	ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметры);
	
	Параметры = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//    Отказ - Булево - Отказ.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияКонтактнойИнформации = Истина;
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	// +CRM
	ПроверятьРодителяВидаКонтактнойИнформации = Ложь;
	ЭтоЮридическоеЛицо = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		ПроверятьРодителяВидаКонтактнойИнформации = Истина;
		ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	КонецЕсли;
	// -CRM
	
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма) Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		СвойствоВидаИнформации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидИнформации, "ОбязательноеЗаполнение, ВидРедактирования");
		ОбязательноеЗаполнение = СвойствоВидаИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Выгрузить(Отбор , "Вид");
				// @skip-check query-in-loop - Выполняется только в одной итерации, при первом появлении реквизита табличной части
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъекта);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[ВидИнформации];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + XMLСтрока((СтрокаТабличнойЧастиФормы.НомерСтроки - 1)) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) И Не ВидИнформации.ПометкаУдаления Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено.';en='The field ""%1"" is not filled in.'"), ВидИнформации.Наименование), , Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(Представление,
						 ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Или ВидИнформации.ПометкаУдаления Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Если (СвойствоВидаИнформации.ВидРедактирования = "Диалог"
				Или ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница)
				И Не УправлениеКонтактнойИнформациейКлиентСервер.КонтактнаяИнформацияЗаполнена(Строка(Форма[ИмяРеквизита])) Тогда
				Представление = "";
			// +CRM
			ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница 
				И Представление = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
				Представление = "";
			ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес 
				И (Представление = "<адрес не указан>" Или Представление = "Заполнить") Тогда
				Представление = "";
			// -CRM
			Иначе
				Представление = Форма[ИмяРеквизита];
			КонецЕсли;
			
			// +CRM
			Если ПроверятьРодителяВидаКонтактнойИнформации Тогда
				Если ЭтоЮридическоеЛицо
					 И СтрокаТаблицы.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
					Продолжить;
				ИначеЕсли НЕ ЭтоЮридическоеЛицо
					 И СтрокаТаблицы.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда	
					Продолжить;
				КонецЕсли;				
			КонецЕсли;			
			// -CRM
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление)
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации) Тогда
				// И нет других строк с данными для видов КИ с множественными значениями.
				
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено.';en='The field ""%1"" is not filled in.'"), ВидИнформации.Наименование), , , ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьЗаполнениеКонтактнойИнформации(Представление, СтрокаТаблицы.Значение,
					ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
	
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - ФормаКлиентскогоПриложения - форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - СправочникОбъект
//           - ДокументСсылка - объект-владелец контактной информации.
//             ДанныеФормыСтруктура - Объект, содержащий табличную часть с контактной информацией. Поддерживает работу
//                              со скрываемыми видами контактной информации только для уже существующих объектов,
//                              из-за невозможности установить ссылку для нового объекта.
//    Отказ  - Булево - если Истина, то объект не был записан, т.к. во время записи возникли ошибки.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	КонтактнаяИнформация = КонтактнаяИнформацияИзРеквизитовФормы(Форма, Объект);
	
	ЭтоПараметрыОсновногоОбъекта  = Истина;
	ПараметрыКонтактнойИнформации = Неопределено;
	СкрываемыеВиды                = Новый Массив;
	
	ОпределитьПараметрыКонтактнойИнформацииПоВладельцу(Форма, Объект, ПараметрыКонтактнойИнформации, ЭтоПараметрыОсновногоОбъекта, СкрываемыеВиды);
	
	Если Объект.Ссылка.Пустая() И ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
		
		Если ЭтоПараметрыОсновногоОбъекта Тогда
			
			НоваяСсылка = Объект.ПолучитьСсылкуНового();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Если НоваяСсылка = МенеджерОбъекта.ПустаяСсылка() Тогда
				Объект.УстановитьСсылкуНового(МенеджерОбъекта.ПолучитьСсылку());
			КонецЕсли;
			ПараметрыКонтактнойИнформации.Владелец = Объект.ПолучитьСсылкуНового();
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкрываемыеВиды.Количество() = 0 Тогда
		Объект.КонтактнаяИнформация.Очистить();
	Иначе
		
		Индекс = Объект.КонтактнаяИнформация.Количество() -1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = Объект.КонтактнаяИнформация.Получить(Индекс);
			Если СкрываемыеВиды.Найти(СтрокаТаблицы.Вид) = Неопределено Тогда
				Объект.КонтактнаяИнформация.Удалить(СтрокаТаблицы);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// +CRM
	//УстановитьКонтактнуюИнформациюОбъекта(Объект, КонтактнаяИнформация);
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(Объект, КонтактнаяИнформация);
	// -CRM
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
//  Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма объекта-владельца, предназначенная для вывода контактной информации.
//  Объект				 - Произвольный					 - Объект-владелец контактной информации.
//  Результат			 - Произвольный					 - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//  ИмяОбъектаМетаданных - Строка						 - Имя объекта метаданных, для которого выполняется обновление информации								 -
// 
// Возвращаемое значение:
//  Неопределено - Неопределено.
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено, ИмяОбъектаМетаданных = "") Экспорт

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ИмяЭлементаДляРазмещения, Результат.ТипКонтактнойИнформации);
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		// +CRM
		//ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, Результат.ИмяЭлементаДляРазмещения);
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, Результат.ИмяЭлементаДляРазмещения, , , , ,
			 ИмяОбъектаМетаданных);
		Если ИмяОбъектаМетаданных = "Партнеры" Тогда
			ОбновитьСписокДобавляемыхЭлементовКонтактнойИнформации(Форма, Результат);
		КонецЕсли;
		// -CRM
	ИначеЕсли Результат.Свойство("ПоменятьМестамиЭлементы") Тогда
		
		Отбор = Новый Структура("ИмяРеквизита", Результат.ПервыйЭлемент);
		ОписаниеКонтактнойИнформации = 
			УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
		ПервыйЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		Отбор = Новый Структура("ИмяРеквизита", Результат.ВторойЭлемент);
		ВторойЭлемент = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
		
		СписокПереносимыхСвойств = "Комментарий,Представление,Значение";
		ВременныйБуфер = Новый Структура(СписокПереносимыхСвойств);
		
		ЗаполнитьЗначенияСвойств(ВременныйБуфер, ПервыйЭлемент);
		ЗаполнитьЗначенияСвойств(ПервыйЭлемент, ВторойЭлемент, СписокПереносимыхСвойств);
		ЗаполнитьЗначенияСвойств(ВторойЭлемент, ВременныйБуфер);
		
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, 
			Результат.ИмяЭлементаДляРазмещения);
		ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;

		ЭтоАдресГиперссылкой = ПервыйЭлемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ТипЗнч(
			Форма.Элементы[Результат.ПервыйЭлемент].РасширеннаяПодсказка.Заголовок) = Тип("ФорматированнаяСтрока");

		Если ПервыйЭлемент.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки Тогда
			Форма[Результат.ПервыйЭлемент] = УправлениеКонтактнойИнформациейКлиентСервер.АдресСайта(
				ПервыйЭлемент.Представление, ПервыйЭлемент.Значение, Форма.ТолькоПросмотр);
			Форма[Результат.ВторойЭлемент] = УправлениеКонтактнойИнформациейКлиентСервер.АдресСайта(
				ВторойЭлемент.Представление, ВторойЭлемент.Значение, Форма.ТолькоПросмотр);
		ИначеЕсли ЭтоАдресГиперссылкой Тогда
			Форма[Результат.ПервыйЭлемент] = ?(ЗначениеЗаполнено(ПервыйЭлемент.Представление), ПервыйЭлемент.Представление,
				УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
			Форма[Результат.ВторойЭлемент] =  ?(ЗначениеЗаполнено(ВторойЭлемент.Представление), ВторойЭлемент.Представление,
				УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
		Иначе
			Форма[Результат.ПервыйЭлемент] = ПервыйЭлемент.Представление;
			Форма[Результат.ВторойЭлемент] = ВторойЭлемент.Представление;
		КонецЕсли;
				
		Если ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(ПервыйЭлемент.Тип, ОбработкаНавигационнойСсылки) Тогда
			Форма["Комментарий" + Результат.ПервыйЭлемент] = ПервыйЭлемент.Комментарий;
			Форма["Комментарий" + Результат.ВторойЭлемент] = ВторойЭлемент.Комментарий;
		ИначеЕсли ЭтоАдресГиперссылкой Тогда
		 	КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(
				ПараметрыКонтактнойИнформации, ПервыйЭлемент.Тип, ПервыйЭлемент.Вид, ПервыйЭлемент.ХранитьИсториюИзменений);
			
			ПервыйЭлементКомментарий = Форма.Элементы[Результат.ПервыйЭлемент]; // ДекорацияФормы
			ПервыйЭлементКомментарий.РасширеннаяПодсказка.Заголовок = УправлениеКонтактнойИнформациейКлиентСервер.РасширеннаяПодсказкаАдреса(
				КомандыДляВывода, ПервыйЭлемент.Представление, ПервыйЭлемент.Комментарий);
			
			ВторойЭлементКомментарий = Форма.Элементы[Результат.ВторойЭлемент]; // ДекорацияФормы
			ВторойЭлементКомментарий.РасширеннаяПодсказка.Заголовок = УправлениеКонтактнойИнформациейКлиентСервер.РасширеннаяПодсказкаАдреса(
				КомандыДляВывода, ВторойЭлемент.Представление, ВторойЭлемент.Комментарий);
		Иначе
			ПервыйЭлементКомментарий = Форма.Элементы[Результат.ПервыйЭлемент]; // ДекорацияФормы
			ПервыйЭлементКомментарий.РасширеннаяПодсказка.Заголовок = ПервыйЭлемент.Комментарий;
			ВторойЭлементКомментарий = Форма.Элементы[Результат.ВторойЭлемент]; // ДекорацияФормы
			ВторойЭлементКомментарий.РасширеннаяПодсказка.Заголовок = ВторойЭлемент.Комментарий;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Свойство("ОбновитьКонтекстноеМеню") Тогда
		Если Результат.Свойство("ИмяЭлементаДляРазмещения") Тогда
			ОбновитьКонтекстноеМеню(Форма, Результат.ИмяЭлементаДляРазмещения);
			
			Если Результат.Свойство("ИмяРеквизита") Тогда
				ОписаниеКонтактнойИнформации =
					УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
				Отбор = Новый Структура("ИмяРеквизита", Результат.ИмяРеквизита);
				НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
				Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(НайденнаяСтрока.Значение) Тогда
					КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
						НайденнаяСтрока.Значение, Неопределено);
					// +CRM
					Если НЕ КонтактнаяИнформацияПоПолям.Свойство("Comment") Тогда
						КонтактнаяИнформацияПоПолям.Вставить("Comment", "");
					КонецЕсли;
					// -CRM
					Если Результат.Свойство("Комментарий") Тогда
						КонтактнаяИнформацияПоПолям.Comment = Результат.Комментарий;
					Иначе 
						КонтактнаяИнформацияПоПолям.Comment = "";
					КонецЕсли;
					НайденнаяСтрока.Значение =
						УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Для каждого ИмяЭлементаРазмещения Из Форма.ПараметрыКонтактнойИнформации Цикл
				ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаРазмещения.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("Перечитать") И Результат.Свойство("ИмяЭлементаДляРазмещения") Тогда
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации,
			Результат.ИмяЭлементаДляРазмещения);
		
		КопияОписанияКИ = Форма.РеквизитФормыВЗначение("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Тип("ТаблицаЗначений"));
		// +CRM
		//ПриЧтенииНаСервере(Форма, ПараметрыКонтактнойИнформации.Владелец, Результат.ИмяЭлементаДляРазмещения);
		//
		// -CRM
		ОписаниеКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
		
		ВидыКИСИсторией = Новый Массив();
		Для Каждого СтрокаТаблицы Из ОписаниеКонтактнойИнформации Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("ИмяРеквизита", СтрокаТаблицы.ИмяРеквизита);
			НайденныеСтроки = КопияОписанияКИ.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				// +CRM
				Если Форма.Элементы.Найти("Комментарий" + СтрокаТаблицы.ИмяРеквизита) <> Неопределено Тогда
					ЗначениеРеквизитаКомментарий = Форма["Комментарий" + СтрокаТаблицы.ИмяРеквизита];
				Иначе
					ЗначениеРеквизитаКомментарий = "";
				КонецЕсли;
				//Если СтрокаТаблицы.Комментарий <> НайденнаяСтрока.Комментарий И ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(
				Если ЗначениеРеквизитаКомментарий <> НайденнаяСтрока.Комментарий И ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(
				// -CRM
					СтрокаТаблицы.Тип, ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки) Тогда					
					Форма["Комментарий" + СтрокаТаблицы.ИмяРеквизита] = НайденнаяСтрока.Комментарий;
				КонецЕсли;
				СтрокаТаблицы.ДействуетС = НайденнаяСтрока.ДействуетС;
				Если СтрокаТаблицы.Значение <> НайденнаяСтрока.Значение Тогда
					СтрокаТаблицы.Значение      =  НайденнаяСтрока.Значение;
					СтрокаТаблицы.Представление =  НайденнаяСтрока.Представление;
					СтрокаТаблицы.Комментарий   =  НайденнаяСтрока.Комментарий;
					Форма[СтрокаТаблицы.ИмяРеквизита] = НайденнаяСтрока.Представление;
					ЭтоАдресГиперссылкой = СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ТипЗнч(
						Форма.Элементы[СтрокаТаблицы.ИмяРеквизита].РасширеннаяПодсказка.Заголовок) = Тип("ФорматированнаяСтрока");
					Если ЭтоАдресГиперссылкой Тогда
						Форма[СтрокаТаблицы.ИмяРеквизита] = ?(ЗначениеЗаполнено(НайденнаяСтрока.Представление),
							НайденнаяСтрока.Представление,
							УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
							
						КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(
							ПараметрыКонтактнойИнформации, СтрокаТаблицы.Тип, СтрокаТаблицы.Вид, СтрокаТаблицы.ХранитьИсториюИзменений);
						Форма.Элементы[СтрокаТаблицы.ИмяРеквизита].РасширеннаяПодсказка.Заголовок = 
							УправлениеКонтактнойИнформациейКлиентСервер.РасширеннаяПодсказкаАдреса(
								КомандыДляВывода, СтрокаТаблицы.Представление, СтрокаТаблицы.Комментарий);
					Иначе
						Форма[СтрокаТаблицы.ИмяРеквизита] = НайденнаяСтрока.Представление;
						Форма.Элементы[СтрокаТаблицы.ИмяРеквизита].РасширеннаяПодсказка.Заголовок = СтрокаТаблицы.Комментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.ХранитьИсториюИзменений Тогда
				Если ВидыКИСИсторией.Найти(СтрокаТаблицы.Вид) = Неопределено Тогда
					ВидыКИСИсторией.Добавить(СтрокаТаблицы.Вид);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Вид Из ВидыКИСИсторией Цикл
			ИсторическаяКИ = КопияОписанияКИ.НайтиСтроки(Новый Структура("ЭтоИсторическаяКонтактнаяИнформация, Вид", Истина, Вид));
			Для Каждого СтрокаКИ Из ИсторическаяКИ Цикл
				Отбор = Новый Структура("Значение, ЭтоИсторическаяКонтактнаяИнформация, ДействуетС",
				СтрокаКИ.Значение, СтрокаКИ.ЭтоИсторическаяКонтактнаяИнформация, СтрокаКИ.ДействуетС);
				НайденныеСтроки = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЭлементИсторияАдреса = ОписаниеКонтактнойИнформации.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементИсторияАдреса, СтрокаКИ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//  Объект				 - ЛюбаяСсылка						 - номер телефона или факса.
//  Значение			 - Строка							 - контактная информация в формате XML.
//  ВидИнформации		 - Справочник.ВидыКонтактнойИнформация	 - ссылка на вид контактной информации.
//  ТипИнформации		 - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//  ИдентификаторСтроки	 - Число								 - идентификатор строки табличной части.
//  Дата				 - Дата									 - Дата с которой действует запись контактной информации,
//  									используется при хранение истории изменения контактной информации.
//  CRM_ОсновнойДляСвязи - Булево								 - Основной для связи.
//	сфпВремяЗадержкиНабораДобавочногоНомера - Число - Время задержки набора добавочного номера.
//	сфпПрефиксНабора - Справочник.сфпПрефиксыИсходящихВызовов	 - ссылка на префикс набора исходящих вызовов.
//
Процедура ЗаписатьКонтактнуюИнформацию(Объект, Знач Значение, ВидИнформации, ТипИнформации,
	 ИдентификаторСтроки = 0, Дата = Неопределено, CRM_ОсновнойДляСвязи = Ложь,
	 сфпВремяЗадержкиНабораДобавочногоНомера = 0,
	 сфпПрефиксНабора = Неопределено) Экспорт
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Значение, ТипИнформации);
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, ТипИнформации);
	КонецЕсли;
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Value;
	НоваяСтрока.Значение      = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОбъектКИ);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	
	Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступенМодульЛокализации() Тогда
		МодульУправлениеКонтактнойИнформациейЛокализация =
			ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
		НоваяСтрока.ЗначенияПолей = МодульУправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(ОбъектКИ,
			 ТипИнформации);
	КонецЕсли;
	
	// +CRM
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("CRM_ОсновнойДляСвязи",
		 Объект.Ссылка.Метаданные(),
		 "КонтактнаяИнформация") Тогда
		НоваяСтрока.CRM_ОсновнойДляСвязи = CRM_ОсновнойДляСвязи;
	КонецЕсли;
	// +СофтФон
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпВремяЗадержкиНабораДобавочногоНомера",
		 Объект.Ссылка.Метаданные(),
		 "КонтактнаяИнформация") Тогда
		НоваяСтрока.сфпВремяЗадержкиНабораДобавочногоНомера = сфпВремяЗадержкиНабораДобавочногоНомера;
	КонецЕсли;
	Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитТабличнойЧастиОбъекта("сфпПрефиксНабора",
		 Объект.Ссылка.Метаданные(),
		 "КонтактнаяИнформация") Тогда
		НоваяСтрока.сфпПрефиксНабора = сфпПрефиксНабора;
	КонецЕсли;
	// -СофтФон
	// -CRM
	
	Если ЗначениеЗаполнено(Дата)
		И УправлениеКонтактнойИнформациейСлужебныйПовтИсп.КонтактнаяИнформацияОбъектаСодержитКолонкуДействуетС(Объект.Ссылка) Тогда
		НоваяСтрока.ДействуетС    = Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	УправлениеКонтактнойИнформациейСлужебный.ЗаполнитьТехническиеПоляКонтактнойИнформации(НоваяСтрока, ОбъектКИ, ТипИнформации);
	
КонецПроцедуры

// Выполняет отложенную инициализацию реквизитов и элементов контактной информации.
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для 
//							   вывода контактной информации.
//  Объект                   - Произвольный - Объект-владелец контактной информации.
//  ИмяЭлементаДляРазмещения - Строка - Имя группы где размещена контактная информация.
//
Процедура ВыполнитьОтложеннуюИнициализацию(Форма, Объект,
	 ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация") Экспорт
	
	КонтактнаяИнформацияЗаглушка = Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка"); // временный элемент
	Если КонтактнаяИнформацияЗаглушка <> Неопределено Тогда
		Форма.Элементы.Удалить(КонтактнаяИнформацияЗаглушка);
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Выгрузить(,
		"Вид, Представление, Значение, Комментарий, ИмяРеквизита");
	УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Очистить();
	
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), 
		ПредопределенноеЗначение(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка), ПоложениеЗаголовкаЭлементаФормы.Лево);
	
	ДополнительныеПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКонтактнойИнформации.ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	ДополнительныеПараметрыКонтактнойИнформации.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаКИ;
	ДополнительныеПараметрыКонтактнойИнформации.РазмещеныНаФорме = ПараметрыКонтактнойИнформации.РазмещеныНаФорме;
	
	ПриСозданииНаСервере(Форма, Объект, ДополнительныеПараметрыКонтактнойИнформации);
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	
	Для Каждого ВидКонтактнойИнформации Из ПараметрыКонтактнойИнформации.РазмещеныНаФорме Цикл
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ключ);
		МассивСтрок = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(Отбор);
		
		Для Каждого ТекущееЗначение Из МассивСтрок Цикл 
			Если ПустаяСтрока(ТекущееЗначение.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;

			Отбор = Новый Структура("ИмяРеквизита",ТекущееЗначение.ИмяРеквизита);
			СохраненныеЗначения = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
			
			Если СохраненныеЗначения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СохраненноеЗначение = СохраненныеЗначения[0];
			
			Если СохраненноеЗначение <> Неопределено И ПустаяСтрока(СохраненноеЗначение.Значение)
				И ПустаяСтрока(СохраненноеЗначение.Комментарий) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекущееЗначение, СохраненноеЗначение);
			Форма[ТекущееЗначение.ИмяРеквизита] = СохраненноеЗначение.Представление;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ПустаяДекорацияКонтактнаяИнформация") <> Неопределено Тогда
		Форма.Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

// Обработчик завершения прозвона мессенджеров
//
// Параметры:
//  РезультатПрозвона	 - 	Массив - Данные результата прозвона
//  Параметры			 - 	Струтура - Параметры результата прозвона
//  РезультатПроцедуры	 - 	Структура - Результат выполнения
//
Процедура CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона, Параметры, РезультатПроцедуры) Экспорт
	
	Если Параметры.Свойство("БезЗаполненияПолей") Тогда
		
		CRM_ЗаписатьРезультатПрозвона(РезультатПрозвона,
			 Параметры.ОбъектИнтереса,
			 РезультатПроцедуры);
	
	КонецЕсли;
	
КонецПроцедуры

// Записывает результат прозвона
//
// Параметры:
//  РезультатПрозвона	 - 	Массив - Данные результата прозвона
//  СсылкаНаОбъект		 - Ссылка	 - Ссылка на записываемый объект
//  РезультатПроцедуры	 - 	Структура - Результат выполнения
//
Процедура CRM_ЗаписатьРезультатПрозвона(РезультатПрозвона, СсылкаНаОбъект, РезультатПроцедуры) Экспорт
	
	Если РезультатПрозвона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписываемыйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	
	Для Каждого ЭлементРезультата Из РезультатПрозвона Цикл
	
		ВидКИ = ЭлементРезультата.ВидКИ;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		СтруктураТелефона =
			сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭлементРезультата.НомерТелефона);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		
		ДанныеПоПолям = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ДанныеКИ,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		Если Лев(ДанныеПоПолям.CountryCode, 1) <> "+" Тогда
			ДанныеПоПолям.CountryCode = "+" + ДанныеПоПолям.CountryCode;
		КонецЕсли;
		
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеПоПолям);
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЗаписываемыйОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	
	КонецЦикла;
	
	ЗаписываемыйОбъект.Записать();
	РезультатПроцедуры.ОбъектИнтересаЗаписан = Истина;
	
КонецПроцедуры

// Возвращает вид контактной информации по умолчанию
//
// Параметры:
//  ВладелецКИ	 - СправочникСсылка						 - владелей контактной инормации
//  Тип			 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - Тип контактной информации
// 
// Возвращаемое значение:
//  СправочникаСсылка.ВидыКонтактнойИнформации - вид контактной информации по умолчанию
//
Функция CRM_ВидКИПоУмолчанию(ВладелецКИ, Тип) Экспорт
	
	МассивРодителей = Новый Массив;
	
	Если ТипЗнч(ВладелецКИ) = Тип("СправочникСсылка.Партнеры") Тогда
		
		МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		
		Если ВладелецКИ.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		ИначеЕсли ВладелецКИ.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВладелецКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		МассивРодителей.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыКонтактнойИнформации.ОтображатьВсегда
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Основной
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель В(&МассивРодителей)
		|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
		|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И ВидыКонтактнойИнформации.Используется
		|	И ВидыКонтактнойИнформации.Тип = &Тип
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("Тип", Тип);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает значение бизнес-региона коду страны и города из номера телефона
//
// Параметры:
//  НомерТелефона	 - Строка	 - Номер телефона.
//  КодСтраны		 - Строка	 - Код страны.
//  КодГорода		 - Строка	 - Код города.
// 
// Возвращаемое значение:
//   - СправочникСсылка.БизнесРегионы, Неопределено
//
Функция ОпределитьБизнесРегион(НомерТелефона, КодСтраны, КодГорода) Экспорт
	
	КодСтраны = СтрЗаменить(КодСтраны, "+", "");
	
	Запрос = Новый Запрос;
	
	Если КодГорода <> Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БизнесРегионы.Ссылка КАК Ссылка,
		|	БизнесРегионы.CRM_КодГорода КАК CRM_КодГорода
		|ИЗ
		|	Справочник.БизнесРегионы КАК БизнесРегионы
		|ГДЕ
		|	БизнесРегионы.CRM_КодСтраны = &КодСтраны
		|	И БизнесРегионы.CRM_КодГорода = &КодГорода";
		
		Запрос.УстановитьПараметр("КодСтраны", КодСтраны);
		Запрос.УстановитьПараметр("КодГорода", КодГорода);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БизнесРегионы.Ссылка КАК Ссылка,
		|	БизнесРегионы.CRM_КодГорода КАК CRM_КодГорода
		|ИЗ
		|	Справочник.БизнесРегионы КАК БизнесРегионы
		|ГДЕ
		|	БизнесРегионы.CRM_КодСтраны = &КодСтраны
		|	И БизнесРегионы.CRM_КодГорода = &КодГорода5Значный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БизнесРегионы.Ссылка,
		|	БизнесРегионы.CRM_КодГорода
		|ИЗ
		|	Справочник.БизнесРегионы КАК БизнесРегионы
		|ГДЕ
		|	БизнесРегионы.CRM_КодСтраны = &КодСтраны
		|	И БизнесРегионы.CRM_КодГорода = &КодГорода4Значный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БизнесРегионы.Ссылка,
		|	БизнесРегионы.CRM_КодГорода
		|ИЗ
		|	Справочник.БизнесРегионы КАК БизнесРегионы
		|ГДЕ
		|	БизнесРегионы.CRM_КодСтраны = &КодСтраны
		|	И БизнесРегионы.CRM_КодГорода = &КодГорода3Значный";
		
		Запрос.УстановитьПараметр("КодСтраны", КодСтраны);
		Запрос.УстановитьПараметр("КодГорода5Значный", Лев(НомерТелефона, 5));
		Запрос.УстановитьПараметр("КодГорода4Значный", Лев(НомерТелефона, 4));
		Запрос.УстановитьПараметр("КодГорода3Значный", Лев(НомерТелефона, 3));
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		БизнесРегион = Выборка.Ссылка;
	Иначе
		БизнесРегион = Неопределено;
	КонецЕсли;
	
	Возврат БизнесРегион;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции и конструкторы.

// Описание параметров контактной информации, используемых в обработчике ПриСозданииНаСервере.
// 
// Возвращаемое значение:
//  Структура - параметры контактной информации:
//   * Индекс                   - Строка - индекс адреса.
//   * Страна                   - Строка - страна адреса.
//   * ТипПомещения             - Строка - наименование  типа помещения, который будет установлен
//                                         в форме ввода нового адреса. По умолчанию, "Квартира".
//   * ИмяЭлементаДляРазмещения - Строка - группа, куда будут размещены элементы контактной информации.
//   * ИсключаемыеВиды - Массив - виды контактной информации, которые при отложенной инициализации будут созданы на форме,
//                                только после вызова процедуры УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию.
//   * СкрываемыеВиды - Массив  - виды контактной информации, которые не требуется отображать на форме.
//   * ОтложеннаяИнициализация  - Булево - если Истина, то создание полей контактной информации на форме будет отложено.
//   * ПоложениеЗаголовкаКИ     - ПоложениеЗаголовкаЭлементаФормы - может принимать значения:
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево (по умолчанию).
//
Функция ПараметрыКонтактнойИнформации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПомещения", "Квартира");
	Результат.Вставить("Индекс", Неопределено);
	Результат.Вставить("Страна", Неопределено);
	Результат.Вставить("ОтложеннаяИнициализация", Ложь);
	Результат.Вставить("ПоложениеЗаголовкаКИ", "");
	Результат.Вставить("СкрываемыеВиды", Неопределено);
	Результат.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	Результат.Вставить("ОбработкаНавигационнойСсылки", Ложь); 
	Результат.Вставить("РазрешитьДобавлениеПолей", Истина);
	Результат.Вставить("РазмещеныНаФорме", Неопределено);
	Результат.Вставить("ИсключаемыеВиды", Неопределено);
	// +CRM
	Результат.Вставить("ВыводитьВОднуКолонку", Ложь);
	// -CRM
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь,
	 ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации,
		 ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет, ЭтоКоманда);
	
КонецПроцедуры

Функция ЗаголовокСлева(Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		ПоложениеЗаголовкаКИ = ПредопределенноеЗначение(ПоложениеЗаголовкаКИ);
	Иначе
		ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ИмяЭлементаДляРазмещения, ТипКонтактнойИнформации)
	
	ОписаниеКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(НайденнаяСтрока.Значение) Тогда
		КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
			НайденнаяСтрока.Значение, Неопределено);
		КонтактнаяИнформацияПоПолям.Comment = НайденнаяСтрока.Комментарий;
		НайденнаяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
	КонецЕсли;
	
	ПараметрыКИ = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки = ПараметрыКИ.ОбработкаНавигационнойСсылки;
	Если НЕ ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(ТипКонтактнойИнформации, ОбработкаНавигационнойСсылки) Тогда
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита); // ДополнениеЭлементаФормы
		Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес 
			И ТипЗнч(ПолеВвода.РасширеннаяПодсказка.Заголовок) = Тип("ФорматированнаяСтрока") Тогда
			КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(ПараметрыКИ,
				ТипКонтактнойИнформации, НайденнаяСтрока.Вид, НайденнаяСтрока.ХранитьИсториюИзменений);
			ПолеВвода.РасширеннаяПодсказка.Заголовок = УправлениеКонтактнойИнформациейКлиентСервер.РасширеннаяПодсказкаАдреса(
				КомандыДляВывода, НайденнаяСтрока.Представление, НайденнаяСтрока.Комментарий);
		Иначе
			ПолеВвода.РасширеннаяПодсказка.Заголовок = НайденнаяСтрока.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат, ИмяЭлементаДляРазмещения,
	ЭтоНовыйВидКИ = Ложь, КоличествоАдресов = Неопределено, СледующаяСтрока = Неопределено,
	ЕстьОсновнойДляСвязи = Ложь, ИмяОбъектаМетаданных = "") // +CRM
	
	ДобавлениеНовогоЗначения = ТипЗнч(Результат) = Тип("Структура");
	Если ДобавлениеНовогоЗначения Тогда
		Результат.Свойство("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		
		ДобавляемыйВид = Результат.ДобавляемыйВид;
		Если ТипЗнч(ДобавляемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
			ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип,
			| Наименование, ВидРедактирования, ВидПоляДругое, ВводитьНомерПоМаске,
			| МаскаНомераТелефона");
		Иначе
			ИнформацияОВидеКИ = ДобавляемыйВид;
			ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
		КонецЕсли;
		// +CRM
		ИнформацияОВидеКИ.Вставить("CRM_ОсновнойДляСвязи", Ложь);
		Попытка
			ТаблицаКонтактнойИнформацииФормы = Форма.Объект.КонтактнаяИнформация.Выгрузить();
			ЕстьОсновнойДляСвязи = ТаблицаКонтактнойИнформацииФормы.Колонки.Найти("CRM_ОсновнойДляСвязи") <> Неопределено;
		Исключение
			ЕстьОсновнойДляСвязи = Ложь;
		КонецПопытки;
		// -CRM
	Иначе
		ИнформацияОВидеКИ = Результат;
		ДобавляемыйВид    = Результат.Вид;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", ДобавляемыйВид, Ложь);
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;
	ЕстьПолеКомментарий = ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(ИнформацияОВидеКИ.Тип, ОбработкаНавигационнойСсылки);
	
	Если ДобавлениеНовогоЗначения Тогда
		
		НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
		// +CRM
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Не Строка.Выводить Тогда
				Строка.Выводить = Истина;
				Элемент = Форма.Элементы.Найти(Строка.ИмяРеквизита);
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = Истина;
					Форма.ТекущийЭлемент = Элемент;
					Элемент = Форма.Элементы.Найти("Команда" + Строка.ИмяРеквизита);
					Если Элемент <> Неопределено Тогда
						Элемент.Видимость = Истина;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// -CRM
		
		КоличествоСтрокВида = НайденныеСтроки.Количество();
		Если КоличествоСтрокВида > 0 Тогда
			ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВида - 1);
			ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
		Иначе
			ОтборПоРазмещению = Новый Структура("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоРазмещению);
			КоличествоСтрокВГруппе = НайденныеСтроки.Количество();
			Если КоличествоСтрокВГруппе > 0 Тогда
				ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоСтрокВГруппе - 1);
				ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
			Иначе
				ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество();
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексДобавляемойСтроки >= ТаблицаКонтактнойИнформации.Количество() Тогда
			ЭтоПоследняяСтрока = Истина;
		Иначе
			СледующаяСтрокаТаблицы = ТаблицаКонтактнойИнформации.Получить(ИндексДобавляемойСтроки);
			ЭтоПоследняяСтрока = СледующаяСтрокаТаблицы.ИмяЭлементаДляРазмещения <> ИмяЭлементаДляРазмещения;
		КонецЕсли;
		
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если ЭтоПоследняяСтрока Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		ИначеЕсли ИндексДобавляемойСтроки = 0 Тогда
			ЭтоПоследняяСтрокаКолонки = Истина;
		Иначе
			ЭтоПоследняяСтрокаКолонки =
			(НЕ ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки - 1].Колонка = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Колонка);
		КонецЕсли;
		// -CRM
		
		НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
		
		// +CRM
		//ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
		//	"КонтактнаяИнформацияПоле",
		//	СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x"),
		//	Формат(КоличествоСтрокВида + 1, "ЧГ=0"));
			
		НеУникальноеИмяРеквизита = Истина;
		ДобавляемыйВидУникальныйИдентификатор = СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x");
		НомерНовогоРеквизита = КоличествоСтрокВида + 1;
		ОтборПоИмениРеквизита = Новый Структура;
		
		Пока НеУникальноеИмяРеквизита Цикл
			ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
			"КонтактнаяИнформацияПоле",
			ДобавляемыйВидУникальныйИдентификатор,
			НомерНовогоРеквизита);
			
			ОтборПоИмениРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
			Если ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоИмениРеквизита).Количество() > 0 Тогда
				НомерНовогоРеквизита = НомерНовогоРеквизита + 1;
			Иначе
				НеУникальноеИмяРеквизита = Ложь;
			КонецЕсли;
		КонецЦикла;
		// -CRM
		
		ИмяРеквизитаКомментарий = "";
		Если ЕстьПолеКомментарий Тогда
			ИмяРеквизитаКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3%4",
			"Комментарий", "КонтактнаяИнформацияПоле",
			СтрЗаменить(ДобавляемыйВид.УникальныйИдентификатор(), "-", "x"),
			Формат(КоличествоСтрокВида + 1, "ЧГ=0"));
		КонецЕсли;
		НоваяСтрока.ИмяРеквизита              = ИмяРеквизита;
		НоваяСтрока.ИмяРеквизитаКомментарий   = ИмяРеквизитаКомментарий;
		НоваяСтрока.Вид                       = ДобавляемыйВид;
		НоваяСтрока.Тип                       = ИнформацияОВидеКИ.Тип;
		НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
		НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
		// +CRM
		НоваяСтрока.Выводить = Истина;
		НоваяСтрока.CRM_ОсновнойДляСвязи = Ложь;
		НоваяСтрока.Родитель = ИнформацияОВидеКИ.РодительКИ;
		Если ИндексДобавляемойСтроки = 0 Тогда
			//НоваяСтрока.Выводить = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Выводить;
			НоваяСтрока.Колонка  = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].Колонка;
		Иначе
			//НоваяСтрока.Выводить = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки-1].Выводить;
			НоваяСтрока.Колонка  = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки - 1].Колонка;
		КонецЕсли;
		// -CRM
		
		Если ОбработкаНавигационнойСсылки = Истина И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ОписаниеТипаРеквизита = Новый ОписаниеТипов("ФорматированнаяСтрока");
		Иначе
			ОписаниеТипаРеквизита = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
		КонецЕсли;
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита,, ИнформацияОВидеКИ.Наименование, Истина));
		Если ЕстьПолеКомментарий Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаКомментарий, ОписаниеТипаРеквизита,, ИнформацияОВидеКИ.Наименование, Истина));
		КонецЕсли;
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		ЕстьКомментарий = Ложь;
		ОбязательноеЗаполнение = Ложь;
		// +CRM
		Если ИнформацияОВидеКИ.Свойство("ОбязательноеЗаполнение") Тогда
			ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение; 
		КонецЕсли;
		// -CRM
	Иначе
		ЭтоПоследняяСтрока = СледующаяСтрока = Неопределено;
		ИмяРеквизита = ИнформацияОВидеКИ.ИмяРеквизита;
		ИмяРеквизитаКомментарий = ИнформацияОВидеКИ.ИмяРеквизитаКомментарий;
		ЕстьКомментарий = ЗначениеЗаполнено(ИнформацияОВидеКИ.Комментарий);
		ОбязательноеЗаполнение = ИнформацияОВидеКИ.ОбязательноеЗаполнение;
		// +CRM
		ЭтоПоследняяСтрокаКолонки = Ложь;
		Если Не ЭтоПоследняяСтрока Тогда
			ИмяСледующегоРеквизита = СледующаяСтрока.ИмяРеквизита;
			ТипСледующегоРеквизита = СледующаяСтрока.Тип;
		Иначе
			ЭтоПоследняяСтрокаКолонки = Истина;
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
	ДобавляемыйВидНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Наименование");
	
	// Отрисовка на форме
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И ПараметрыКонтактнойИнформации.ОтображатьИконки Тогда
		ГруппаСтрокиЗаголовок = Группа("ГруппаЗаголовок" + ИмяРеквизита, Форма, ДобавляемыйВидНаименование, ИмяЭлементаДляРазмещения, "ГруппаЗначенияКИ" + ИмяЭлементаДляРазмещения, 6);
		ГруппаСтрокиЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаСтрокиЗаголовок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение; 
		ГруппаСтрокиЗаголовокКартинка = Группа("ГруппаЗаголовокКартинка" + ИмяРеквизита, Форма, ДобавляемыйВидНаименование, ИмяЭлементаДляРазмещения, "ГруппаЗаголовок" + ИмяРеквизита);
		Декорация = Форма.Элементы.Добавить("Картинка" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаСтрокиЗаголовокКартинка);
		Декорация.Заголовок = НСтр("ru='Картинка'");
		Декорация.Вид       = ВидДекорацииФормы.Картинка;
		Декорация.Ширина    = 2;
		Декорация.Картинка = КартинкаТипаКонтактнойИнформации(ИнформацияОВидеКИ.Тип);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("Картинка" + ИмяРеквизита, 2, Ложь);
		ДекорацияЗаголовок = Форма.Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаСтрокиЗаголовокКартинка);
		ДекорацияЗаголовок.Заголовок = ВРег(ДобавляемыйВидНаименование);
		ДекорацияЗаголовок.Вид       = ВидДекорацииФормы.Надпись;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("Заголовок" + ИмяРеквизита, 2, Ложь);
		ИмяГруппыРодителя = "ГруппаЗаголовок" + ИмяРеквизита;
	Иначе
		ИмяГруппыРодителя = "ГруппаЗначенияКИ" + ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
	ГруппаСтроки = Группа("Группа" + ИмяРеквизита, Форма, ДобавляемыйВидНаименование, ИмяЭлементаДляРазмещения, 
		ИмяГруппыРодителя);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И НЕ ПараметрыКонтактнойИнформации.ОтображатьИконки Тогда
		ГруппаСтроки.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	
	Родитель = Форма.Элементы["ГруппаЗначенияКИ" + ИмяЭлементаДляРазмещения];
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И ПараметрыКонтактнойИнформации.ОтображатьИконки Тогда
		
		Если Не ЭтоПоследняяСтрока И СледующаяСтрока = Неопределено Тогда
			ИмяСледующейГруппы = "ГруппаЗаголовок" + ПоследняяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяСледующейГруппы) <> Неопределено Тогда
				ИндексСледующейГруппы = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппы]) + 1;
				СледующаяГруппа = Родитель.ПодчиненныеЭлементы.Получить(ИндексСледующейГруппы);
				Форма.Элементы.Переместить(ГруппаСтрокиЗаголовок, Родитель, СледующаяГруппа);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если Не ЭтоПоследняяСтрока И СледующаяСтрока = Неопределено Тогда
			ИмяСледующейГруппы = "Группа" + ПоследняяСтрока.ИмяРеквизита;
			Если Форма.Элементы.Найти(ИмяСледующейГруппы) <> Неопределено Тогда
				ИндексСледующейГруппы = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппы]) + 1;
				СледующаяГруппа = Родитель.ПодчиненныеЭлементы.Получить(ИндексСледующейГруппы);
				Форма.Элементы.Переместить(ГруппаСтроки, Родитель, СледующаяГруппа);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() И ПараметрыКонтактнойИнформации.ОтображатьИконки Тогда
		ИмяСледующейГруппыТекущегоВида = "ГруппаЗаголовок" + ИмяРеквизита;
	Иначе
		ИмяСледующейГруппыТекущегоВида = "Группа" + ИмяРеквизита;
	КонецЕсли;
	
	// Обработка ситуации, когда на форме выводится одновременно множественная динамическая и статическая контактная информация.
	Если Форма.Элементы.Найти(ИмяСледующейГруппыТекущегоВида) <> Неопределено Тогда
		
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтрокиТекущегоВида = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
		Если НайденныеСтрокиТекущегоВида.Количество() > 0 Тогда
			ТекущийВид = НайденныеСтрокиТекущегоВида[0].Вид;
		КонецЕсли;
		
		ИндексПредыдущейГруппыВида = Родитель.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующейГруппыТекущегоВида]) - 1;
		Если ИндексПредыдущейГруппыВида >= 0 Тогда
			ПредыдущаяГруппаВида = Родитель.ПодчиненныеЭлементы.Получить(ИндексПредыдущейГруппыВида);
			
			Если ПредыдущаяГруппаВида <> Неопределено Тогда
				
				Если ОбщегоНазначения.ЭтоМобильныйКлиент() И ПараметрыКонтактнойИнформации.ОтображатьИконки Тогда		
					Отбор = Новый Структура("ИмяРеквизита", СтрЗаменить(ПредыдущаяГруппаВида.Имя, "ГруппаЗаголовок", ""));
				Иначе
					Отбор = Новый Структура("ИмяРеквизита", СтрЗаменить(ПредыдущаяГруппаВида.Имя, "Группа", ""));
				КонецЕсли;
				НайденныеСтрокиПредыдущегоВида = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
				Если НайденныеСтрокиПредыдущегоВида.Количество() > 0 Тогда
					ПредыдущийВид = НайденныеСтрокиПредыдущегоВида[0].Вид;
				КонецЕсли;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					ЭтоНовыйВидКИ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоНовыйВидКИ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыКонтактнойИнформации.ОтображатьИконки И НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ГруппаСтроки.Объединенная = Ложь;
		Декорация = Форма.Элементы.Добавить("Картинка" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаСтроки);
		Декорация.Заголовок = НСтр("ru='Картинка'");
		Декорация.Вид       = ВидДекорацииФормы.Картинка;
		Декорация.Ширина    = 2;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("Картинка" + ИмяРеквизита, 2, Ложь);
		Если ЭтоНовыйВидКИ Тогда
			Декорация.Картинка = КартинкаТипаКонтактнойИнформации(ИнформацияОВидеКИ.Тип);
		Иначе
			Декорация.Заголовок = НСтр("ru='Отступ'");
			Декорация.Высота    = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПолеКомментарий Тогда
		ГруппаПолеКомментарий  = Группа("ГруппаКомментарий" + ИмяРеквизита, Форма,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 поле, комментарий'"),
			ДобавляемыйВидНаименование), ИмяЭлементаДляРазмещения, "Группа" + ИмяРеквизита, 4);
	Иначе
		ГруппаПолеКомментарий = ГруппаСтроки;
	КонецЕсли;
	
	Если ПараметрыКонтактнойИнформации.ГруппаДляРазмещенияОграниченаШириной Тогда
		Форма.Элементы[ИмяЭлементаДляРазмещения].РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	
	ПолеВвода = СоздатьПолеВвода(Форма, ГруппаПолеКомментарий, ИнформацияОВидеКИ, ИмяРеквизита,
		ИмяЭлементаДляРазмещения, ЭтоНовыйВидКИ, ОбязательноеЗаполнение);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
	
	Если ЕстьПолеКомментарий Тогда
		ПолеКомментарий = Форма.Элементы.Добавить(ИмяРеквизитаКомментарий, Тип("ПолеФормы"), ГруппаПолеКомментарий);
		ПолеКомментарий.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКомментарий.Заголовок = НСтр("ru='Комментарий'");
		ПолеКомментарий.ПутьКДанным = ИмяРеквизитаКомментарий;
		ПолеКомментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКомментарий.ПропускатьПриВводе = Истина;
		ПолеКомментарий.ПодсказкаВвода = НСтр("ru='Примечание'");
		ПолеКомментарий.АвтоМаксимальнаяШирина = Ложь;
		ШиринаПоляКомментарий = ?(ПараметрыКонтактнойИнформации.ГруппаДляРазмещенияОграниченаШириной, ПараметрыКонтактнойИнформации.ШиринаПоляКомментарий, 30);
		ПолеКомментарий.МаксимальнаяШирина = ШиринаПоляКомментарий;
		ПолеКомментарий.Ширина = ШиринаПоляКомментарий;
		ПолеКомментарий.РастягиватьПоГоризонтали = Ложь;
		ПолеКомментарий.РастягиватьПоВертикали = Ложь;
		ПолеКомментарий.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяРеквизитаКомментарий, 2, Ложь);
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПолеКомментарий.МногострочныйРежим = Истина;
		КонецЕсли;
	ИначеЕсли ЕстьКомментарий Тогда
		ПолеВвода.РасширеннаяПодсказка.Заголовок              = ИнформацияОВидеКИ.Комментарий;
		ПолеВвода.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
		ПолеВвода.РасширеннаяПодсказка.МаксимальнаяШирина     = ПолеВвода.Ширина;
		ПолеВвода.РасширеннаяПодсказка.Ширина                 = ПолеВвода.Ширина;
	КонецЕсли;
	
	Если КоличествоАдресов = Неопределено Тогда
		ОтборПоТипу = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоТипу).Количество();
	КонецЕсли;
	
	// +CRM
	Действие = СоздатьДействие(Форма, ИнформацияОВидеКИ, ИмяРеквизита, ГруппаСтроки,
		КоличествоАдресов, ЕстьКомментарий, ИмяЭлементаДляРазмещения);
	
	// Прозвон
	ИмяДлитОперации = "ДекорацияПрозвон" + ИмяРеквизита;
	
	ИмяДекорацииДлитОперация = "ДекорацияПрозвон" + ИмяРеквизита;
	ДекорацияДлитОперация = Форма.Элементы.Добавить(ИмяДекорацииДлитОперация, Тип("ДекорацияФормы"), ГруппаСтроки);
	ДекорацияДлитОперация.Ширина = 0;
	ДекорацияДлитОперация.Высота = 1;
	ДекорацияДлитОперация.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияДлитОперация.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	// Конец Прозвон
	// -CRM
	
	Если Не ЭтоНовыйВидКИ Тогда
		Если ТаблицаКонтактнойИнформации.Количество() > 1
			И ТаблицаКонтактнойИнформации[0].Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
			ПунктКонтекстногоМенюПеремещения(ПолеВвода, Форма, 1, ИмяЭлементаДляРазмещения);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(ОтборПоВиду);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ПредыдущаяСтрока = НайденныеСтроки.Получить(НайденныеСтроки.Количество() - 2);
				ПунктКонтекстногоМенюПеремещения(Форма.Элементы[ПредыдущаяСтрока.ИмяРеквизита], Форма, - 1, ИмяЭлементаДляРазмещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеНовогоЗначения Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			
			Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПолеВвода(Форма, Родитель, ИнформацияОВидеКИ, ИмяРеквизита, ИмяЭлементаДляРазмещения,ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;
	
	ЗаголовокСлева = ЗаголовокСлева(ПараметрыКонтактнойИнформации.ПоложениеЗаголовка);
	
	// добавим заголовок, иначе элементы не выравниваются
	
	// +CRM Добавление группы для автотестов
	ИндексЗначения = Перечисления.ТипыКонтактнойИнформации.Индекс(ИнформацияОВидеКИ.Тип);
	ИмяПеречисления = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексЗначения].Имя;
		
	Ном = 1;
	Пока Форма.Элементы.Найти("ГруппаПоляВвода" + ИмяПеречисления + Строка(Ном)) <> Неопределено Цикл
		Ном = Ном + 1;
	КонецЦикла;
		
	ГруппаПоляВвода = Форма.Элементы.Добавить("ГруппаПоляВвода" + ИмяПеречисления + Строка(Ном), Тип("ГруппаФормы"),
		?(Родитель = Неопределено, Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации, Родитель));
	ГруппаПоляВвода.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПоляВвода.ОтображатьЗаголовок = Ложь;
	ГруппаПоляВвода.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	CRM_ДополнительныеПараметры = ПараметрыКонтактнойИнформации.CRM_ДополнительныеПараметры;
	Если ТипЗнч(CRM_ДополнительныеПараметры) = Тип("Структура")
		И CRM_ДополнительныеПараметры.Свойство("ПолеВвода_ВертикальнаяГруппировка")
		И CRM_ДополнительныеПараметры.ПолеВвода_ВертикальнаяГруппировка Тогда
		ГруппаПоляВвода.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаПоляВвода);
	
	//Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель); // ПолеФормы, РасширениеПоляФормыДляПоляВвода, РасширениеПоляФормыДляПоляНадписи
	// -CRM
	
	Элемент.ПутьКДанным = ИмяРеквизита;
	
	ГруппаДляРазмещенияОграниченаШириной = ПараметрыКонтактнойИнформации.ГруппаДляРазмещенияОграниченаШириной;
	
	Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" И ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
			Элемент.Вид = ВидПоляФормы.ПолеНадписи;
			Элемент.Гиперссылка = Истина;
			// +CRM
			Элемент.ЦветТекста  = ЦветаСтиля.CRM_ОсновнойГолубой;
			// -CRM
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
			Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
				Форма[ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
			КонецЕсли;
		
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки Тогда
		
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки");
		
		Если ТипЗнч(ИнформацияОВидеКИ) <> Тип("Структура") И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ИнформацияОВидеКИ.Значение) Тогда
			КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ИнформацияОВидеКИ.Значение, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			АдресСайта    = КонтактнаяИнформация.value;
			Представление = ?(КонтактнаяИнформация.Свойство("name") И ЗначениеЗаполнено(КонтактнаяИнформация.name), КонтактнаяИнформация.name, ИнформацияОВидеКИ.Представление);
		Иначе
			АдресСайта = "";
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		КонецЕсли;
		
		Форма[ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.АдресСайта(Представление, АдресСайта, Форма.ТолькоПросмотр);
		
	Иначе
		
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Если ИнформацияОВидеКИ.ВидРедактирования = "Диалог" И ИнформацияОВидеКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Элемент.РедактированиеТекста = Ложь;
		КонецЕсли;
		
		Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
		
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Элемент.УстановитьДействие("Автоподбор",      "Подключаемый_КонтактнаяИнформацияАвтоподбор");
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_КонтактнаяИнформацияОбработкаВыбора");
		КонецЕсли;
		// +CRM
		Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			Если ПустаяСтрока(Форма[ИмяРеквизита]) Тогда
				Форма[ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление(); ;
			КонецЕсли;
		КонецЕсли;
		// -CRM
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			Элемент.МногострочныйРежим = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	// +CRM
	//Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.РастягиватьПоГоризонтали = Истина;
	// -CRM
	Элемент.РастягиватьПоВертикали = Ложь;
	
	Элемент.ВысотаЗаголовка = ?(ОбщегоНазначения.ЭтоМобильныйКлиент(), 1, 3);
	
	УстановитьСвойстваПолейВвода(ИнформацияОВидеКИ, Элемент, Форма, ИмяРеквизита, ОбработкаНавигационнойСсылки);
	
	Если Не ЭтоНовыйВидКИ Тогда
		// +CRM
		//Элемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		//Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		// -CRM
	КонецЕсли;
	
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева, ПоложениеЗаголовкаЭлементаФормы.Лево, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Если ЗаголовокСлева Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяРеквизита, 2, Ложь);
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И Не ИнформацияОВидеКИ.ПометкаУдаления Тогда
		// Заполнить
		ГруппаПодменюАдреса = Форма.Элементы.Добавить("КонтекстноеПодменюКопироватьАдреса" + ИмяРеквизита, Тип(
			"ГруппаФормы"), Элемент.КонтекстноеМеню);
		ГруппаПодменюАдреса.Вид = ВидГруппыФормы.Подменю;
		ГруппаПодменюАдреса.Отображение = ОтображениеКнопки.Текст;
		ГруппаПодменюАдреса.Заголовок = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(ИнформацияОВидеКИ.Тип)
		И Элемент.Вид = ВидПоляФормы.ПолеВвода И ИнформацияОВидеКИ.ВидРедактирования <> "ПолеВвода" Тогда
		
		ДоступенВыбор = Не ИнформацияОВидеКИ.ПометкаУдаления И ИнформацияОВидеКИ.ВидРедактирования <> "ПолеВвода";
		
		Если ДоступенВыбор И Не Форма.ТолькоПросмотр Тогда
			Элемент.КнопкаВыбора = Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		Иначе
			Элемент.КнопкаВыбора   = Ложь;
			Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда
				Элемент.КнопкаОткрытия = Истина;
				Элемент.УстановитьДействие("Открытие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	// +CRM
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Элемент.Вид         = ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка = Истина;
		Элемент.ЦветТекста  = ЦветаСтиля.CRM_ОсновнойГолубой;
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании");
	КонецЕсли;
	
	Элемент.Высота = 1;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	Если ИнформацияОВидеКИ.CRM_ОсновнойДляСвязи Тогда
		Элемент.Шрифт          = Новый Шрифт(Элемент.Шрифт, , , Истина);
		Элемент.ШрифтЗаголовка = Новый Шрифт(Элемент.ШрифтЗаголовка, , , Истина);
	КонецЕсли;
	// -CRM
	
	Если ИнформацияОВидеКИ.ПометкаУдаления Тогда
		
		Элемент.ШрифтЗаголовка = ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт;
		Если Не ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
			Элемент.КнопкаОчистки        = Истина;
			Элемент.РедактированиеТекста = Ложь;
			Элемент.Ширина = Элемент.Ширина - 2;
		Иначе
			Элемент.ТолькоПросмотр       = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ГруппаДляРазмещенияОграниченаШириной Тогда
		Элемент.Ширина = 0;
		Элемент.МаксимальнаяШирина = 0;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.РастягиватьПоГоризонтали = Истина
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Процедура ПунктКонтекстногоМенюПеремещения(ПредыдущийЭлемент, Форма, Направление, ИмяЭлементаДляРазмещения)
	
	Если Направление > 0 Тогда
		ИмяКоманды = "КонтекстноеМенюВверх" + ПредыдущийЭлемент.Имя;
	Иначе
		ИмяКоманды = "КонтекстноеМенюВниз" + ПредыдущийЭлемент.Имя;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПредыдущийЭлемент.КонтекстноеМеню);
	
	Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	Если Направление > 0 Тогда 
		ТекстКоманды = НСтр("ru = 'Переместить вверх';
							|en = 'Move up'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВверх;
	Иначе
		ТекстКоманды = НСтр("ru = 'Переместить вниз';
							|en = 'Move down'");
		Кнопка.Картинка = БиблиотекаКартинок.ПереместитьВниз;
	КонецЕсли;
	Кнопка.Заголовок = ТекстКоманды;
	Команда.Подсказка = ТекстКоманды;
	Кнопка.ИмяКоманды = ИмяКоманды;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Кнопка.Доступность = Истина;
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 1);
	ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	
КонецПроцедуры

Функция СоздатьДействие(Форма, ВидКонтактнойИнформации, ИмяРеквизита, ГруппаДействий,
	КоличествоАдресов, ЕстьКомментарий = Ложь, ИмяЭлементаДляРазмещения)
	
	Тип = ВидКонтактнойИнформации.Тип;
	
	СоздаватьДействиеДляТипа = Новый Соответствие();
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, Истина);
	СоздаватьДействиеДляТипа.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, Истина);
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации,
		 ИмяЭлементаДляРазмещения);
	
	ИндексЗначения	= Перечисления.ТипыКонтактнойИнформации.Индекс(Тип);
	ИмяПеречисления	= Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Ном = 1;
	Пока Форма.Элементы.Найти("ГруппаДействия" + ИмяПеречисления + Строка(Ном)) <> Неопределено Цикл
		Ном = Ном + 1;
	КонецЦикла;
	
	ГруппаДействийТемп = Форма.Элементы.Добавить("ГруппаДействия" + ИмяПеречисления + Строка(Ном),
		 Тип("ГруппаФормы"), ГруппаДействий);
	ГруппаДействийТемп.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДействийТемп.ОтображатьЗаголовок = Ложь;
	ГруппаДействийТемп.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Если СоздаватьДействиеДляТипа[Тип] = Истина Тогда
		ИмяКоманды			= "Команда" + ИмяРеквизита;
		Команда				= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка	= НСтр("ru=''");
		Команда.Картинка	= БиблиотекаКартинок.CRM_МенюДополнительныеФункции;
		Команда.Отображение	= ОтображениеКнопки.Картинка;
		Команда.Действие	= "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
		Действие			= Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДействийТемп);
		Действие.ИмяКоманды	= ИмяКоманды;
		Действие.ОтображениеФигуры	= ОтображениеФигурыКнопки.ПриАктивности;
		//Действие.Ширина		= 3;
		//Действие.Высота		= 1;
		Действие.Заголовок	= НСтр("ru='Меню действий'");
	Иначе
		Действие			= Форма.Элементы.Добавить("ЗаглушкаДействия" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаДействийТемп);
		Действие.Вид		= ВидДекорацииФормы.Картинка;
		//Действие.Ширина		= 3;
		//Действие.Высота		= 1;
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("ЗаглушкаДействия" + ИмяРеквизита, 2);
	КонецЕсли;
	
	Возврат Действие;
	
КонецФункции

Процедура ОбновитьСписокДобавляемыхЭлементовКонтактнойИнформации(Форма, Результат)
	Если Результат.ДобавляемыйВид.Ссылка.РазрешитьВводНесколькихЗначений Тогда
		Возврат;
	КонецЕсли;
	Параметры	= ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации,
		 Результат.ИмяЭлементаДляРазмещения);
	Для Каждого ЭлементСписка Из Параметры.СписокДобавляемыхЭлементов Цикл
		Если ЭлементСписка.Значение.Ссылка = Результат.ДобавляемыйВид.Ссылка Тогда
			Параметры.СписокДобавляемыхЭлементов.Удалить(ЭлементСписка);
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали  = Ложь;
	Элемент.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.Высота = 1;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

Процедура ВосстановитьПустыеЗначениеПредставление(СтрокаКонтактнойИнформации)
	
	Если ПустаяСтрока(СтрокаКонтактнойИнформации.Тип) Тогда
		СтрокаКонтактнойИнформации.Тип = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ТипВидаКонтактнойИнформации(
			СтрокаКонтактнойИнформации.Вид);
	КонецЕсли;
	
	// ЗначенияПолей может отсутствовать в строке контактной информации
	СведенияПолей = Новый Структура("ЗначенияПолей", Неопределено);
	ЗаполнитьЗначенияСвойств(СведенияПолей, СтрокаКонтактнойИнформации);
	ЕстьЗначенияПолей = (СведенияПолей.ЗначенияПолей <> Неопределено);
	
	ПустоеПредставление = ПустаяСтрока(СтрокаКонтактнойИнформации.Представление);
	ПустоеЗначение      = ПустаяСтрока(СтрокаКонтактнойИнформации.Значение);
	ПустыеЗначенияПолей = ?(ЕстьЗначенияПолей, ПустаяСтрока(СведенияПолей.ЗначенияПолей), Истина);
	
	ВсеПоляПустые = ПустоеПредставление И ПустоеЗначение И ПустыеЗначенияПолей;
	ВсеПоляЗаполнены = Не ПустоеПредставление И Не ПустоеЗначение И НЕ ПустыеЗначенияПолей;
	
	Если ВсеПоляПустые Или ВсеПоляЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустоеПредставление Тогда
		
		ИсточникЗначений = ?(ПустыеЗначенияПолей, СтрокаКонтактнойИнформации.Значение,
			 СтрокаКонтактнойИнформации.ЗначенияПолей);
		
		СтрокаКонтактнойИнформации.Представление =
			УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(ИсточникЗначений);
		
	КонецЕсли;
	
	Если ПустоеЗначение Тогда
		
		Если Не ПустоеПредставление И ПустыеЗначенияПолей Тогда
			
			АдресПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(
				СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Тип);
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(АдресПоПолям);
			
			Если ЕстьЗначенияПолей И УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступенМодульЛокализации() Тогда
				МодульУправлениеКонтактнойИнформациейЛокализация =
					ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
				СтрокаКонтактнойИнформации.ЗначенияПолей = МодульУправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(
					СтрокаКонтактнойИнформации.Значение, СтрокаКонтактнойИнформации.Тип);
			КонецЕсли;
			
		ИначеЕсли Не ПустыеЗначенияПолей Тогда
			
			// +CRM
			//СтрокаКонтактнойИнформации.Значение = КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей,
			//	СтрокаКонтактнойИнформации.Тип);
			СтрокаКонтактнойИнформации.Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(СтрокаКонтактнойИнформации.ЗначенияПолей,
				СтрокаКонтактнойИнформации.Тип);
			// -CRM
			
		КонецЕсли;
	
	ИначеЕсли ПустыеЗначенияПолей И ЕстьЗначенияПолей Тогда
		
		// +CRM
		//СтрокаКонтактнойИнформации.ЗначенияПолей = КонтактнаяИнформацияВXML(СтрокаКонтактнойИнформации.Значение, 
		//	СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Вид);
		СтрокаКонтактнойИнформации.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКонтактнойИнформации.Значение,
			СтрокаКонтактнойИнформации.Представление, СтрокаКонтактнойИнформации.Вид);
		// -CRM
		
	КонецЕсли;
	
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Заголовок, ИмяЭлементаДляРазмещения, ИмяГруппыРодителя = "", ПорядокУдаления = 5)
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		ИмяРодителя = ?(ЗначениеЗаполнено(ИмяГруппыРодителя), ИмяГруппыРодителя, ИмяЭлементаДляРазмещения);
		Родитель = Родитель(Форма, ИмяРодителя);
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок = Заголовок;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.РазрешитьИзменениеСостава = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяГруппы, ПорядокУдаления);
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	// +CRM
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	// +СофтФон
	ОписаниеТипаЧисло2_0 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	// -СофтФон
	// -CRM
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизитаКомментарий", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид",
			Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип",
			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти",
			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация",
			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений",
			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса",
			Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Маска",
			ОбщегоНазначения.ОписаниеТипаСтрока(100), ИмяОписания));
		// +CRM
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Выводить", Новый ОписаниеТипов("Булево"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Родитель",
							 Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),
				ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ОсновнойДляСвязи",
				 Новый ОписаниеТипов("Булево"),
													ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Колонка", ОписаниеТипаЧисло, ИмяОписания));
		// +СофтФон
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("сфпВремяЗадержкиНабораДобавочногоНомера",
			 ОписаниеТипаЧисло2_0,
			 ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("сфпПрефиксНабора",
			 Новый ОписаниеТипов("СправочникСсылка.сфпПрефиксыИсходящихВызовов"),
			 ИмяОписания));
		// -СофтФон
		// -CRM
		
	Иначе
		РеквизитыТаблицы = Форма.ПолучитьРеквизиты("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		РеквизитыДляСоздания = Новый Соответствие;
		РеквизитыДляСоздания.Вставить("ИмяЭлементаДляРазмещения",            Истина);
		РеквизитыДляСоздания.Вставить("ИмяРеквизитаКомментарий",             Истина);
		РеквизитыДляСоздания.Вставить("ХранитьИсториюИзменений",             Истина);
		РеквизитыДляСоздания.Вставить("ДействуетС",                          Истина);
		РеквизитыДляСоздания.Вставить("ЭтоИсторическаяКонтактнаяИнформация", Истина);
		РеквизитыДляСоздания.Вставить("Значение",                            Истина);
		РеквизитыДляСоздания.Вставить("МеждународныйФорматАдреса",           Истина);
		РеквизитыДляСоздания.Вставить("Маска",                               Истина);
		
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			Если РеквизитыДляСоздания[Реквизит.Имя] <> Неопределено Тогда
				РеквизитыДляСоздания[Реквизит.Имя] = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если РеквизитыДляСоздания["Значение"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["МеждународныйФорматАдреса"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("МеждународныйФорматАдреса",
				 Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ИмяЭлементаДляРазмещения"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлементаДляРазмещения", Строка500, ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ИмяРеквизитаКомментарий"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизитаКомментарий", Строка500, ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ХранитьИсториюИзменений"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ХранитьИсториюИзменений",
				 Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ДействуетС"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДействуетС", Новый ОписаниеТипов("Дата"), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["Маска"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Маска", ОбщегоНазначения.ОписаниеТипаСтрока(100), ИмяОписания));
		КонецЕсли;
		
		Если РеквизитыДляСоздания["ЭтоИсторическаяКонтактнаяИнформация"] Тогда
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоИсторическаяКонтактнаяИнформация",
				Новый ОписаниеТипов("Булево"), ИмяОписания));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКонтактнойИнформации, ДанныеВидаКонтактнойИнформации, ЭтоНовыйВидКИ,
	ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина, ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация")
	
	ТаблицаОписанияДополнительныхРеквизитов = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
	НоваяСтрока = ТаблицаОписанияДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКонтактнойИнформации.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКонтактнойИнформации.Вид;
	НоваяСтрока.Тип           = СтрокаКонтактнойИнформации.Тип;
	НоваяСтрока.ИмяЭлементаДляРазмещения  = ИмяЭлементаДляРазмещения;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	// +CRM
	НоваяСтрока.CRM_ОсновнойДляСвязи = СтрокаКонтактнойИнформации.CRM_ОсновнойДляСвязи;
	НоваяСтрока.Родитель      = СтрокаКонтактнойИнформации.РодительКИ;
	НоваяСтрока.Выводить      = СтрокаКонтактнойИнформации.Выводить;
	НоваяСтрока.Колонка       = СтрокаКонтактнойИнформации.Колонка;
	// +СофтФон
	НоваяСтрока.сфпВремяЗадержкиНабораДобавочногоНомера =
		СтрокаКонтактнойИнформации.сфпВремяЗадержкиНабораДобавочногоНомера;
	НоваяСтрока.сфпПрефиксНабора = СтрокаКонтактнойИнформации.сфпПрефиксНабора;
	// -СофтФон
	// -CRM
	
	Если НоваяСтрока.Свойство("ЭтоИсторическаяКонтактнаяИнформация") Тогда
		НоваяСтрока.ЭтоИсторическаяКонтактнаяИнформация = СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("ДействуетС") Тогда
		НоваяСтрока.ДействуетС = СтрокаКонтактнойИнформации.ДействуетС;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") Тогда
		НоваяСтрока.ХранитьИсториюИзменений = СтрокаКонтактнойИнформации.ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если НоваяСтрока.Свойство("МеждународныйФорматАдреса") Тогда
		НоваяСтрока.МеждународныйФорматАдреса = СтрокаКонтактнойИнформации.МеждународныйФорматАдреса;
	КонецЕсли;
	
	НоваяСтрока.Значение      = СтрокаКонтактнойИнформации.Значение;
	НоваяСтрока.Представление = СтрокаКонтактнойИнформации.Представление;
	НоваяСтрока.Комментарий   = СтрокаКонтактнойИнформации.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Если Форма.Элементы.Найти(СтрокаКонтактнойИнформации.ИмяРеквизита) <> Неопределено 
			И Форма.Элементы[СтрокаКонтактнойИнформации.ИмяРеквизита].Вид = ВидПоляФормы.ПолеНадписи Тогда
			ЭтоПолеНадписи = Истина;
		Иначе
			ЭтоПолеНадписи = Ложь;
		КонецЕсли;
		
		Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И (СтрокаКонтактнойИнформации.ВидРедактирования = "Диалог" ИЛИ ЭтоПолеНадписи)
			И ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Иначе
			Форма[СтрокаКонтактнойИнформации.ИмяРеквизита] = СтрокаКонтактнойИнформации.Представление;
		КонецЕсли;
		
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;
		Если ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(СтрокаКонтактнойИнформации.Тип, ОбработкаНавигационнойСсылки) Тогда
			РеквизитыДляЗаполнения = Новый Структура();
			РеквизитыДляЗаполнения.Вставить("Комментарий" + СтрокаКонтактнойИнформации.ИмяРеквизита, СтрокаКонтактнойИнформации.Комментарий);
			ЗаполнитьЗначенияСвойств(Форма, РеквизитыДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВидаКонтактнойИнформации.Вставить("Ссылка", СтрокаКонтактнойИнформации.Вид);
	
	Если ЭтоНовыйВидКИ И ДанныеВидаКонтактнойИнформации.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти И Не ДанныеВидаКонтактнойИнформации.ПометкаУдаления Тогда
		ПараметрыКонтактнойИнформации = ?(ПараметрыКонтактнойИнформации = Неопределено,
			ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения),
			ПараметрыКонтактнойИнформации);
		Вид = СтрокаКонтактнойИнформации.Вид; // СправочникСсылка.ВидыКонтактнойИнформации
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, Строка(Вид));
		Иначе
			КартинкаТипа = КартинкаТипаКонтактнойИнформации(ДанныеВидаКонтактнойИнформации.Тип);
			ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(ДанныеВидаКонтактнойИнформации, Строка(Вид),,КартинкаТипа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
	ДобавленныеЭлементы = ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			// +CRM
			Команда = Форма.Команды.Найти(УдаляемыйЭлемент.Значение);
			Если Команда <> Неопределено Тогда
				Форма.Команды.Удалить(Команда);
			КонецЕсли;
			// -CRM
		Иначе
			// +CRM
			Элемент = Форма.Элементы.Найти(УдаляемыйЭлемент.Значение);
			Если Элемент <> Неопределено Тогда
				Форма.Элементы.Удалить(Элемент);
			КонецЕсли;
			// -CRM
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Возврат Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
		Или Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		Или Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
	
КонецФункции

// Возвращает имена табличных частей документа по виду контактной информации.
//
// Параметры:
//    ТаблицаВидовКонтактнойИнформации - ТаблицаЗначений - Список видов контактной информации.
//     * Вид - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//    ИмяОбъекта                       - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Соответствие - имена табличных части или пустая строка, если табличной части нет.
//
Функция ИменаТабличныхЧастейПоВидамКИ(ТаблицаВидовКонтактнойИнформации, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Вид КАК ВидКИ
	               |ПОМЕСТИТЬ ВидыКИ
	               |ИЗ
	               |	&ТаблицаВидовКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ВидыКонтактнойИнформации.Родитель.ИмяПредопределенногоВида <> """"
	               |		ТОГДА ВидыКонтактнойИнформации.Родитель.ИмяПредопределенногоВида
	               |		ИНАЧЕ ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных
	               |	КОНЕЦ КАК ИмяТабличнойЧасти,
	               |	ВидыКИ.ВидКИ КАК ВидКонтактнойИнформации
	               |ИЗ
	               |	ВидыКИ КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ПО ВидыКИ.ВидКИ = ВидыКонтактнойИнформации.Ссылка";
	
	Запрос.УстановитьПараметр("ТаблицаВидовКонтактнойИнформации", ТаблицаВидовКонтактнойИнформации);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ЗначениеЗаполнено(РезультатЗапроса.ИмяТабличнойЧасти) Тогда
			ИмяТабличнойЧасти = Сред(РезультатЗапроса.ИмяТабличнойЧасти,
				 СтрНайти(РезультатЗапроса.ИмяТабличнойЧасти, ИмяОбъекта) 
				+ СтрДлина(ИмяОбъекта));
		Иначе
			ИмяТабличнойЧасти = "";
		КонецЕсли;
		
		Результат.Вставить(РезультатЗапроса.ВидКонтактнойИнформации, ИмяТабличнойЧасти);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации));
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура СкрытьКонтактнуюИнформацию(Знач Форма, Знач ДобавляемыеРеквизиты, ПараметрыВывода)
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	ДобавленныеРеквизиты = Новый Массив;
	Для Каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
		Если ПустаяСтрока(ДобавляемыйРеквизит.Путь) Тогда
			ДобавленныеРеквизиты.Добавить(ДобавляемыйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = ДополнительныеПараметрыВыводаКонтактнойИнформации(ПараметрыВывода.ОписаниеКоманд,
		ПараметрыВывода.ОтображатьИконки, ПараметрыВывода.РазмещеныНаФорме, ПараметрыВывода.РазрешитьДобавлениеПолей,
		ПараметрыВывода.ИсключаемыеВиды, ПараметрыВывода.СкрываемыеВиды,
		// +CRM
		ПараметрыВывода.ВыводитьВОднуКолонку, ПараметрыВывода.CRM_ДополнительныеПараметры);
		// -CRM
	
	ДополнительныеПараметры.ПоложениеКнопкиДобавить = ПараметрыВывода.ПоложениеКнопкиДобавить;
	ДополнительныеПараметры.ШиринаПоляКомментарий = ПараметрыВывода.ШиринаПоляКомментарий;	
		
	ПараметрыКонтактнойИнформации = ПараметрыВыводаКонтактнойИнформации(Форма, ПараметрыВывода.ИмяЭлементаДляРазмещения,
		ПараметрыВывода.ПоложениеЗаголовкаКИ, ПараметрыВывода.ОтложеннаяИнициализация, ДополнительныеПараметры);
		
	ПараметрыКонтактнойИнформации.ДобавленныеРеквизиты = ДобавленныеРеквизиты;
	ПараметрыКонтактнойИнформации.Владелец             = ПараметрыВывода.СсылкаНаОбъект;
	
	Если Не ПустаяСтрока(ПараметрыВывода.ИмяЭлементаДляРазмещения) Тогда
		Форма.Элементы[ПараметрыВывода.ИмяЭлементаДляРазмещения].Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКнопкуДополнительногоПоляКонтактнойИнформации(Знач Форма, Знач ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформацииЭлемента = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // см. ПараметрыВыводаКонтактнойИнформации
	
	Описание = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
	ГруппаКоманды             = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения, 
		Форма, Описание, ИмяЭлементаДляРазмещения, "ГруппаЗначенияКомандыКИ"+ИмяЭлементаДляРазмещения);
	ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	Если ПараметрыКонтактнойИнформацииЭлемента.ПоложениеКнопкиДобавить = "Авто"
		Или ПараметрыКонтактнойИнформацииЭлемента.ПоложениеКнопкиДобавить = "Право" Тогда
		ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Иначе
		ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	КонецЕсли;
	ГруппаКоманды.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеВГруппе;
	
	ИмяКоманды          = "КонтактнаяИнформацияДобавитьПолеВвода" + ИмяЭлементаДляРазмещения;
	Команда             = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Подсказка   = Описание;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Команда.Картинка    = БиблиотекаКартинок.ВыпадающийСписок;
	КонецЕсли;
	Команда.Действие    = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	
	ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
	
	Кнопка             = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
	Кнопка.Доступность = НЕ Форма.Элементы[ИмяЭлементаДляРазмещения].ТолькоПросмотр;
	// +CRM
	//Кнопка.Заголовок   = "+ " + НСтр("ru = 'Телефон, адрес'");
	Кнопка.Заголовок   = НСтр("ru = 'Добавить'");
	// -CRM
	Команда.ИзменяетСохраняемыеДанные     = Истина;
	Кнопка.ИмяКоманды                     = ИмяКоманды;
	Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеВГруппе;
	// +CRM
	//Кнопка.ПоложениеКартинки              = ПоложениеКартинкиКнопкиФормы.Право;
	Кнопка.ОтображениеФигуры              = ОтображениеФигурыКнопки.Нет;
	Кнопка.ЦветТекста                     = ЦветаСтиля.CRM_ОсновнойГолубой;
	Кнопка.Картинка                       = БиблиотекаКартинок.CRM_ПлюсГолубой;
	// -CRM
	
	ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(ИмяКоманды, 2, Ложь);
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() И ПараметрыКонтактнойИнформацииЭлемента.ПоложениеКнопкиДобавить = "Авто" Тогда
		// Определение варианта отображения кнопки (Слева, с отступом, без отступа)
		// Обработка ситуации, когда на форме выводится одновременно динамическая и статическая контактная информация.
		ЭлементыГруппыДляРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения].ПодчиненныеЭлементы;
		КоличествоГруппВОсновной = ЭлементыГруппыДляРазмещения.Количество();
		ЭлементыГруппыЗначенияКИ = Форма.Элементы["ГруппаЗначенияКИ"+ИмяЭлементаДляРазмещения].ПодчиненныеЭлементы;
		КоличествоГрупп = ЭлементыГруппыЗначенияКИ.Количество();
		
		Если КоличествоГрупп = 0 И КоличествоГруппВОсновной = 1 Тогда
			ГруппаКоманды.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		Иначе
			Если КоличествоГрупп = 0 И КоличествоГруппВОсновной > 1 Тогда
				ПоследняяГруппа = ЭлементыГруппыДляРазмещения[КоличествоГруппВОсновной - 2];
			ИначеЕсли КоличествоГрупп > 0 Тогда
				ПоследняяГруппа = ЭлементыГруппыЗначенияКИ[КоличествоГрупп - 1];
			КонецЕсли;
			
			ЕстьСтатическиеКнопкаКИ = ЕстьКнопкаКонтактнойИнформации(ЭлементыГруппыДляРазмещения, Ложь);
			ЕстьДинамическаяКнопкаКИ = ЕстьКнопкаКонтактнойИнформации(ЭлементыГруппыЗначенияКИ, Ложь);
			
			Если ПоследняяГруппа <> Неопределено И ЕстьГиперссылка(ПоследняяГруппа) Тогда
				ГруппаКоманды.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
				Кнопка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ИначеЕсли ПоследняяГруппа <> Неопределено И НЕ ЕстьКнопкаКонтактнойИнформации(ПоследняяГруппа, Истина)
				И (ЕстьСтатическиеКнопкаКИ ИЛИ ЕстьДинамическаяКнопкаКИ) Тогда
				Декорация = Форма.Элементы.Добавить("ОтступДобавить", Тип("ДекорацияФормы"), ГруппаКоманды);
				Декорация.Вид       = ВидДекорацииФормы.Картинка;
				Декорация.Ширина    = 3;
				Декорация.Заголовок = НСтр("ru='Отступ'");
				Декорация.Высота    = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПояснениеПоСбросуНастроекФормы(Знач Форма, Знач ИмяЭлементаДляРазмещения, Знач ОтложеннаяИнициализация)
	
	ГруппаДляРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	// Если отложенная инициализация и на странице нет элементов, то платформа скрывает страницу,
	// поэтому надо создавать временный элемент, который при переходе на страницу удаляется.
	Если ОтложеннаяИнициализация
		И ГруппаДляРазмещения.Вид = ВидГруппыФормы.Страница 
		И Форма.Элементы.Найти("КонтактнаяИнформацияЗаглушка") = Неопределено Тогда
		
		ГруппаСтраниц = ГруппаДляРазмещения.Родитель; // ГруппаФормы
		ЗаголовокСтраницы = ?(ЗначениеЗаполнено(ГруппаДляРазмещения.Заголовок), ГруппаДляРазмещения.Заголовок, ГруппаДляРазмещения.Имя);
		ЗаголовокГруппыСтраниц = ?(ЗначениеЗаполнено(ГруппаСтраниц.Заголовок), ГруппаСтраниц.Заголовок, ГруппаСтраниц.Имя);
		
		ПредупреждениеОРазмещении = НСтр("ru = 'Для отображения контактной информации разместите группу ""%1"" не первым элементом (после любой другой группы) в группе ""%2"" (меню Еще - Изменить форму).'");
		ПредупреждениеОРазмещении = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредупреждениеОРазмещении,
		ЗаголовокСтраницы, ЗаголовокГруппыСтраниц);
		ТекстПодсказки = НСтр("ru = 'Также можно установить стандартные настройки формы:
		|   • в меню Еще выбрать пункт Изменить форму...;
		|   • в открывшейся форме ""Настройка формы"" в меню Еще выбрать пункт ""Установить стандартные настройки"".'");
		
		Декорация = Форма.Элементы.Добавить("КонтактнаяИнформацияЗаглушка", Тип("ДекорацияФормы"), ГруппаДляРазмещения);
		Декорация.Заголовок              = ПредупреждениеОРазмещении;
		Декорация.ОтображениеПодсказки   = ОтображениеПодсказки.Кнопка;
		Декорация.Подсказка              = ТекстПодсказки;
		Декорация.ЦветТекста             = ЦветаСтиля.ПоясняющийОшибкуТекст;
		Декорация.АвтоМаксимальнаяВысота = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтатическийЭлемент(Форма, СтрокаКИ, СозданныеЭлементы, СозданныйЭлемент, ОтображатьИконки, ИмяЭлементаДляРазмещения)
	
	СозданныеЭлементы.Удалить(СозданныйЭлемент);
	
	Если Форма.ТолькоПросмотр Тогда
		ЭлементНаФорме = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
		Если ЭлементНаФорме.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаКИ.Тип) Тогда
				ЭлементНаФорме.КнопкаВыбора = Ложь;
				Если ЗначениеЗаполнено(Форма[СтрокаКИ.ИмяРеквизита]) Тогда
					ЭлементНаФорме.КнопкаОткрытия = Истина;
					ЭлементНаФорме.УстановитьДействие("Открытие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
				КонецЕсли;
			Иначе
				ЭлементНаФорме.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДействияДляСтатическихЭлементов(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения);
	
	ИмяЭлементаГруппаСтроки = "Группа" + СтрокаКИ.ИмяРеквизита;
	Если Форма.Элементы.Найти(ИмяЭлементаГруппаСтроки) <> Неопределено Тогда
		ГруппаСтроки = Форма.Элементы[ИмяЭлементаГруппаСтроки];
		Если ГруппаСтроки.Родитель = Форма.Элементы[ИмяЭлементаДляРазмещения]
			ИЛИ ГруппаСтроки.Родитель = Форма.Элементы["ГруппаЗначенияКИ"+ИмяЭлементаДляРазмещения] Тогда
			Форма.Элементы.Переместить(ГруппаСтроки, Форма.Элементы["ГруппаЗначенияКИ"+ИмяЭлементаДляРазмещения]);
		КонецЕсли;
		ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения);
		
		ИмяКнопки = "Команда" + СтрокаКИ.ИмяРеквизита;
		Если Форма.Элементы.Найти(ИмяКнопки) <> Неопределено Тогда
			Кнопка = Форма.Элементы[ИмяКнопки];
			Если Форма.Команды[Кнопка.ИмяКоманды].Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду" Тогда
				ОтображатьИсторию = СтрокаКИ.ХранитьИсториюИзменений И Не СтрокаКИ.ПометкаУдаления;
				КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(ПараметрыКонтактнойИнформации, 
					СтрокаКИ.Тип, СтрокаКИ.Вид, ОтображатьИсторию);
				КоличествоКоманд = КомандыДляВывода.Количество();
				Если КоличествоКоманд = 1 Тогда
					Для Каждого КомандаВывода Из КомандыДляВывода Цикл
						ЗаполнитьЗначенияСвойств(Кнопка, КомандаВывода.Значение, "Картинка");
					КонецЦикла;
				ИначеЕсли КоличествоКоманд > 1 Тогда
					Кнопка.Картинка = БиблиотекаКартинок.МенюДополнительныеФункции;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			
			Если Форма.Элементы.Найти(СтрокаКИ.ИмяРеквизита) <> Неопределено Тогда
				ПолеВвода = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
				ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Если ПолеВвода.Вид = ВидПоляФормы.ПолеВвода Тогда
					ПолеВвода.МногострочныйРежим = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтображатьИконки Тогда	
				ГруппаСтрокиЗаголовок = Группа("ГруппаЗаголовок" + СтрокаКИ.ИмяРеквизита, Форма, ГруппаСтроки.Заголовок, ИмяЭлементаДляРазмещения, "ГруппаЗначенияКИ"+ИмяЭлементаДляРазмещения, 6);
				ГруппаСтрокиЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ГруппаСтрокиЗаголовок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение; 
				
				ГруппаСтрокиЗаголовокКартинка = Группа("ГруппаЗаголовокКартинка" + СтрокаКИ.ИмяРеквизита, Форма, ГруппаСтроки.Заголовок, ИмяЭлементаДляРазмещения, "ГруппаЗаголовок" + СтрокаКИ.ИмяРеквизита);
				
				ИмяЭлементаКартинка = "Картинка" + СтрокаКИ.ИмяРеквизита;
				Если Форма.Элементы.Найти(ИмяЭлементаКартинка) <> Неопределено Тогда
					ЭлементКартинка = Форма.Элементы[ИмяЭлементаКартинка];
					Форма.Элементы.Переместить(ЭлементКартинка, ГруппаСтрокиЗаголовокКартинка);
				Иначе
					ЭлементКартинка = Форма.Элементы.Добавить(ИмяЭлементаКартинка, Тип("ДекорацияФормы"), ГруппаСтрокиЗаголовокКартинка);
					ЭлементКартинка.Заголовок = НСтр("ru='Картинка'");
					ЭлементКартинка.Вид       = ВидДекорацииФормы.Картинка;
					ЭлементКартинка.Ширина    = 2;
					ЭлементКартинка.Картинка = КартинкаТипаКонтактнойИнформации(СтрокаКИ.Тип);
					ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("Картинка" + СтрокаКИ.ИмяРеквизита, 2, Ложь);
				КонецЕсли;
				
				ИмяЭлементаЗаголовок = "Заголовок" + СтрокаКИ.ИмяРеквизита;
				Если Форма.Элементы.Найти(ИмяЭлементаЗаголовок) <> Неопределено Тогда
					ЭлементЗаголовок = Форма.Элементы[ИмяЭлементаЗаголовок];
					Форма.Элементы.Переместить(ЭлементЗаголовок, ГруппаСтрокиЗаголовокКартинка);
				Иначе
				ДекорацияЗаголовок = Форма.Элементы.Добавить(ИмяЭлементаЗаголовок, Тип("ДекорацияФормы"), ГруппаСтрокиЗаголовокКартинка);
				ДекорацияЗаголовок.Заголовок = ВРег(ГруппаСтроки.Заголовок);
				ДекорацияЗаголовок.Вид       = ВидДекорацииФормы.Надпись;
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить("Заголовок" + СтрокаКИ.ИмяРеквизита, 2, Ложь);
				КонецЕсли;
				
				Форма.Элементы.Переместить(ГруппаСтроки, ГруппаСтрокиЗаголовок);
				
			Иначе
				ГруппаСтроки.ОтображатьЗаголовок = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыКонтактнойИнформации.ГруппаДляРазмещенияОграниченаШириной Тогда
				Если Форма.Элементы.Найти(СтрокаКИ.ИмяРеквизита) <> Неопределено Тогда
					ПолеВвода = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
					ПолеВвода.Ширина = 0;
					ПолеВвода.МаксимальнаяШирина = 0;
					ПолеВвода.АвтоМаксимальнаяШирина = Ложь;
					ПолеВвода.РастягиватьПоГоризонтали = Истина;
				КонецЕсли;
				
				ИмяЭлементаКомментарий = "Комментарий" + СтрокаКИ.ИмяРеквизита;
				Если Форма.Элементы.Найти(ИмяЭлементаКомментарий) <> Неопределено Тогда
					ПолеКомментарий = Форма.Элементы[ИмяЭлементаКомментарий];
					ПолеКомментарий.МаксимальнаяШирина = ПараметрыКонтактнойИнформации.ШиринаПоляКомментарий;
					ПолеКомментарий.Ширина = ПараметрыКонтактнойИнформации.ШиринаПоляКомментарий;
				КонецЕсли; 
			Иначе
				Если Форма.Элементы.Найти(СтрокаКИ.ИмяРеквизита) <> Неопределено Тогда
					ПолеВвода = Форма.Элементы[СтрокаКИ.ИмяРеквизита]; 
					ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;
					УстановитьСвойстваПолейВвода(СтрокаКИ, ПолеВвода, Форма, СтрокаКИ.ИмяРеквизита, ОбработкаНавигационнойСсылки);
				КонецЕсли;
			КонецЕсли;
			
			ИмяЭлементаКартинка = "Картинка" + СтрокаКИ.ИмяРеквизита;
			Если ОтображатьИконки И Форма.Элементы.Найти(ИмяЭлементаКартинка) = Неопределено Тогда
				Если ГруппаСтроки.Родитель = Форма.Элементы["ГруппаЗначенияКИ"+ИмяЭлементаДляРазмещения] Тогда
					ГруппаСтроки.Объединенная = Ложь;
				КонецЕсли;
				Декорация = Форма.Элементы.Добавить(ИмяЭлементаКартинка, Тип("ДекорацияФормы"), ГруппаСтроки);
				Декорация.Заголовок = НСтр("ru='Картинка'");
				Декорация.Вид       = ВидДекорацииФормы.Картинка;
				Декорация.Ширина    = 2;
				Декорация.Картинка = КартинкаТипаКонтактнойИнформации(СтрокаКИ.Тип);
				Если Форма.Элементы.Найти(СтрокаКИ.ИмяРеквизита) <> Неопределено Тогда
					Форма.Элементы.Переместить(Декорация, ГруппаСтроки, Форма.Элементы[СтрокаКИ.ИмяРеквизита]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// +CRM
		Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда
			ПолеВвода.Шрифт          = Новый Шрифт(ПолеВвода.Шрифт, , , Истина);
			ПолеВвода.ШрифтЗаголовка = Новый Шрифт(ПолеВвода.ШрифтЗаголовка, , , Истина);
		КонецЕсли;
		// -CRM
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейВвода(ИнформацияОВидеКИ, Элемент, Форма, ИмяРеквизита, ОбработкаНавигационнойСсылки)
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Если ИнформацияОВидеКИ.ВидРедактирования = "ПолеВвода" Тогда
				Элемент.КнопкаВыпадающегоСписка = Истина;
				Элемент.Ширина = 70;
			ИначеЕсли ИнформацияОВидеКИ.ВидРедактирования = "Диалог" Тогда
				Элемент.Ширина = 73;
			Иначе
				Элемент.КнопкаВыпадающегоСписка = Истина;
				Элемент.Ширина = 68;
			КонецЕсли;
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
			Элемент.Ширина = 73;
		КонецЕсли;
		
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
		Или ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		
		Если ИнформацияОВидеКИ.ВидРедактирования = "ПолеВвода" Тогда
			Элемент.Ширина = 40;
		Иначе
			Элемент.Ширина = 38;
		КонецЕсли;
		
		Если ИнформацияОВидеКИ.ВводитьНомерПоМаске Тогда 
			НомерТелефонаСоответствуетМаске =
				УправлениеКонтактнойИнформациейСлужебный.НомерТелефонаСоответствуетМаске(Форма[ИмяРеквизита],
				ИнформацияОВидеКИ.МаскаНомераТелефона);
			Если ПустаяСтрока(Форма[ИмяРеквизита]) ИЛИ НомерТелефонаСоответствуетМаске Тогда
				Элемент.Маска = ИнформацияОВидеКИ.МаскаНомераТелефона;
			КонецЕсли;
			
			ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
			НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].Маска = ИнформацияОВидеКИ.МаскаНомераТелефона;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ИнформацияОВидеКИ.ВидПоляДругое = "МногострочноеШирокое" Тогда
			Элемент.Высота = 3;
			Элемент.Ширина = 72;
			Элемент.МногострочныйРежим = Истина;
		ИначеЕсли ИнформацияОВидеКИ.ВидПоляДругое = "ОднострочноеШирокое" Тогда
			Элемент.Высота = 1;
			Элемент.Ширина = 72;
			Элемент.МногострочныйРежим = Ложь;
		Иначе // ОднострочноеУзкое
			Элемент.Высота = 1;
			Элемент.Ширина = 35;
			Элемент.МногострочныйРежим = Ложь;
		КонецЕсли;
	ИначеЕсли ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если ОбработкаНавигационнойСсылки Тогда	
			Элемент.Ширина = 73;
		Иначе
			Элемент.Ширина = 40;
		КонецЕсли;
	Иначе
		Элемент.Ширина = 40;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(АдресЭП, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	ПроверятьКорректность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИнформации, "ПроверятьКорректность");
	
	Если Не ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	ЭлектроннаяПочта = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(АдресЭП,
		 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ЭлектроннаяПочта.Value);
		Если Результат.Количество() > 1 Тогда
			СтрокаОшибки = НСтр("ru = 'Допускается ввод только одного адреса электронной почты'");
		ИначеЕсли Результат.Количество() = 1 Тогда
			СтрокаОшибки = Результат[0].ОписаниеОшибки;
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ПроверятьКорректность, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Проверяет контактную информацию.
//
Функция ПроверитьЗаполнениеКонтактнойИнформации(Представление, Значение, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	Если ПустаяСтрока(Значение) Тогда
		
		Если ПустаяСтрока(Представление) Тогда
			Возврат 0;
		КонецЕсли;
		
		ВидРедактирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИнформации, "ВидРедактирования");
		Если ВидРедактирования = "Диалог" И СтрСравнить(Представление,
			 УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидИнформации);
		Значение = ?(ТипЗнч(КонтактнаяИнформация) = Тип("Структура"),
			 УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформация), "");
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		
		// +CRM
		//Значение = КонтактнаяИнформацияВJSON(Значение, ВидИнформации);
		Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Значение, ВидИнформации);
		// -CRM
		
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(Значение, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон 
		Или ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(Значение, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(Значение, ВидИнформации, ИмяРеквизита);
	Иначе
		УровеньОшибок = 0; // Другое не проверяем.
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "")
	
	ПроверятьКорректность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИнформации, "ПроверятьКорректность");
	
	Если Не ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоНациональныйАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		СписокОшибок = Обработки["РасширенныйВводКонтактнойИнформации"].ОшибкиЗаполненияАдреса(Источник, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			
			ВывестиСообщениеПользователю(Элемент.ТекстОшибки, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	
	ПроверятьКорректность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИнформации, "ПроверятьКорректность");
	
	Если Не ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
		
	ЕстьОшибки = Ложь;
	
	// +CRM
	//СведенияОТелефоне = СведенияОТелефоне(Источник);
	СведенияОТелефоне = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Источник);
	// -CRM
	
	МодульРаботаСАдресами = Неопределено;
	Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступныМодулиРаботаСАдресами()  Тогда 
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
	КонецЕсли;
	
	СписокОшибок  = УправлениеКонтактнойИнформациейКлиентСервер.ОшибкиЗаполненияТелефона(СведенияОТелефоне,
		 МодульРаботаСАдресами);

	Для Каждого Элемент Из СписокОшибок Цикл
		
		Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита);
		КонецЕсли;
		
		ЕстьОшибки = Истина;
	КонецЦикла;

	Если ЕстьОшибки И ПроверятьКорректность Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита = "")
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

Функция ПараметрыКонтактнойИнформацииФормы(ПараметрыКонтактнойИнформации, ИмяЭлементаДляРазмещения)
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаДляРазмещения)
		 Или Не ПараметрыКонтактнойИнформации.Свойство(ИмяЭлементаДляРазмещения) Тогда
		Для Каждого ПерваяЗапись Из ПараметрыКонтактнойИнформации Цикл
			Возврат ПерваяЗапись.Значение;
		КонецЦикла;
		Возврат ПараметрыКонтактнойИнформации;
	КонецЕсли;
	
	Возврат ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	
КонецФункции

// Описание параметров вывода контактной информации
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   ИмяЭлементаДляРазмещения - Строка
//                            - Неопределено
//   ПоложениеЗаголовкаКИ - Строка
//                        - ПоложениеЗаголовкаЭлементаФормы
//   ОтложеннаяИнициализация - Массив
//                           - Булево
//   ДополнительныеПараметры - см. ДополнительныеПараметрыВыводаКонтактнойИнформации
//
// Возвращаемое значение:
//  Структура:
//   * ГруппаДляРазмещения - Строка
//   * ПоложениеЗаголовка - Строка
//   * ДобавленныеРеквизиты - СписокЗначений
//   * ОтложеннаяИнициализация - Булево
//   * ИсключаемыеВиды - Массив
//                     - Неопределено
//   * ВыполненаОтложеннаяИнициализация - Булево
//   * ДобавленныеЭлементы - СписокЗначений
//   * СписокДобавляемыхЭлементов - СписокЗначений:
//       * Значение - Структура:
//         ** Ссылка - СправочникСсылка.ВидыКонтактнойИнформации
//       * Ключ - Строка
//   * МожноОтправлятьSMS - Булево
//   * Владелец - ЛюбаяСсылка
//   * ОбработкаНавигационнойСсылки - Булево
//   * СкрываемыеВиды - Массив
//                    - Неопределено
//   * ОписаниеКоманд - см. ОписаниеКоманд
//   * ОтображатьИконки - Булево
//   * РазмещеныНаФорме - Соответствие из КлючИЗначение:
//       * Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//       * Значение - Булево
//                  - Неопределено
//   * РазрешитьДобавлениеПолей - Булево
//   * ШиринаПоляКомментарий - Число
//   * ПоложениеКнопкиДобавить - Строка - может принимать следующие значения: "Лево", "Право", "Авто".
//   * ГруппаДляРазмещенияОграниченаШириной - Булево
//
Функция ПараметрыВыводаКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ,
	ОтложеннаяИнициализация, ДополнительныеПараметры)
	
	Если ТипЗнч(Форма.ПараметрыКонтактнойИнформации) <> Тип("Структура") Тогда
		Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		МодульОтправкаSMS  = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
		МожноОтправлятьSMS = МодульОтправкаSMS.ДоступнаОтправкаSMS();
	Иначе
		МожноОтправлятьSMS = Ложь;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = Новый Структура;
	ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения",              ИмяЭлементаДляРазмещения);
	ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка",               ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ));
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеРеквизиты",             Новый СписокЗначений); 
	ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация",          ОтложеннаяИнициализация);
	ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды",                  ДополнительныеПараметры.ИсключаемыеВиды);
	ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы",              Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов",       Новый СписокЗначений);
	ПараметрыКонтактнойИнформации.Вставить("МожноОтправлятьSMS",               МожноОтправлятьSMS);
	ПараметрыКонтактнойИнформации.Вставить("Владелец",                         Неопределено);
	ПараметрыКонтактнойИнформации.Вставить("ОбработкаНавигационнойСсылки",     Ложь);
	ПараметрыКонтактнойИнформации.Вставить("СкрываемыеВиды",                   ДополнительныеПараметры.СкрываемыеВиды);
	ПараметрыКонтактнойИнформации.Вставить("ОписаниеКоманд",                   ДополнительныеПараметры.ОписаниеКоманд);
	ПараметрыКонтактнойИнформации.Вставить("ОтображатьИконки",                 ДополнительныеПараметры.ОтображатьИконки);
	ПараметрыКонтактнойИнформации.Вставить("РазмещеныНаФорме",                 ДополнительныеПараметры.РазмещеныНаФорме);
	ПараметрыКонтактнойИнформации.Вставить("РазрешитьДобавлениеПолей",         ДополнительныеПараметры.РазрешитьДобавлениеПолей);
	ПараметрыКонтактнойИнформации.Вставить("ШиринаПоляКомментарий",            ДополнительныеПараметры.ШиринаПоляКомментарий);
	ПараметрыКонтактнойИнформации.Вставить("ПоложениеКнопкиДобавить",          
		Строка(ДополнительныеПараметры.ПоложениеКнопкиДобавить));
	ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещенияОграниченаШириной",
		ГруппаДляРазмещенияОграниченаШириной(Форма.Элементы[ИмяЭлементаДляРазмещения]));
	// +CRM
	ДополнительныеПараметры.CRM_ДополнительныеПараметры.ПоложениеЗаголовкаКИ =
		ЗначениеПоложенияЗаголовкаКИ(ДополнительныеПараметры.CRM_ДополнительныеПараметры.ПоложениеЗаголовкаКИ);
	
	ПараметрыКонтактнойИнформации.Вставить("ВыводитьВОднуКолонку", ДополнительныеПараметры.ВыводитьВОднуКолонку);
	ПараметрыКонтактнойИнформации.Вставить("CRM_ДополнительныеПараметры", ДополнительныеПараметры.CRM_ДополнительныеПараметры);
	// -CRM
	
	ПараметрыАдреса = Новый Структура("ТипПомещения, Страна, Индекс", "Квартира");
	ПараметрыКонтактнойИнформации.Вставить("ПараметрыАдреса", ПараметрыАдреса);
	
	Форма.ПараметрыКонтактнойИнформации.Вставить(ИмяЭлементаДляРазмещения, ПараметрыКонтактнойИнформации);
	Возврат Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
	
КонецФункции

Функция ЗначениеПоложенияЗаголовкаКИ(ПоложениеЗаголовкаКИ)
	
	Если ПоложениеЗаголовкаЭлементаФормы.Лево = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Лево";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Верх = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Верх";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Низ = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Низ";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Право = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Право";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Нет = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Нет";
	ИначеЕсли ПоложениеЗаголовкаЭлементаФормы.Авто = ПоложениеЗаголовкаКИ Тогда
		Возврат "ПоложениеЗаголовкаЭлементаФормы.Авто";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // см. ПараметрыВыводаКонтактнойИнформации
	ВсеСтроки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( 
		Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь));
		
	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;
		
		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстноеПодменюКопироватьАдреса = Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" + СтрокаКИ.ИмяРеквизита);
		Если КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		КоличествоКомандВПодменю = 0;
		СписокАдресовВПодменю = Новый Соответствие();
		ДанныеАдреса = Новый Структура("Представление, Адрес", СтрокаКИ.Представление, СтрокаКИ.Значение);
		СписокАдресовВПодменю.Вставить(ВРег(СтрокаКИ.Представление), ДанныеАдреса);
		
		Для Каждого Адрес Из НайденныеСтроки Цикл
			
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;
			
			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда = Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Форма.Команды.Добавить(ИмяКоманды);
				Команда.Подсказка = НСтр("ru = 'Скопировать адрес';
										|en = 'Copy address'");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
				Команда.ИзменяетСохраняемыеДанные = Истина;
				
				ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяКоманды, 9, Истина);
				КоличествоКомандВПодменю = КоличествоКомандВПодменю + 1;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(СтрокаКИ.МеждународныйФорматАдреса,
				СтроковыеФункции.СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);
			
			Если СписокАдресовВПодменю[ВРег(Адрес.Представление)] <> Неопределено Тогда
				ПредставлениеАдреса = "";
			Иначе
				ДанныеАдреса = Новый Структура("Представление, Адрес", ПредставлениеАдреса, Адрес.Значение);
				Если СтрокаКИ.МеждународныйФорматАдреса Тогда
					// +CRM
					ДанныеАдреса.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Адрес.Тип);
					// -CRM
				КонецЕсли;
				СписокАдресовВПодменю.Вставить(ВРег(Адрес.Представление), ДанныеАдреса);
			КонецЕсли;
			
			ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ПредставлениеАдреса, ПараметрыКонтактнойИнформации, 
				КонтекстноеПодменюКопироватьАдреса);
			
		КонецЦикла;
		
		Поле = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
		Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
			Поле.СписокВыбора.Очистить();
			ПредставлениеДляПоиска = ВРег(СтрокаКИ.Представление);
			Для Каждого ДанныеАдреса Из СписокАдресовВПодменю Цикл
				Если ДанныеАдреса.Ключ <> ПредставлениеДляПоиска Тогда
					Поле.СписокВыбора.Добавить(ДанныеАдреса.Значение, ДанныеАдреса.Значение.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	
	ИмяЭлемента = Подменю.Имя + "_" + ИмяКоманды;
	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавленныеЭлементы = ПараметрыКонтактнойИнформации.ДобавленныеЭлементы; // СписокЗначений
		ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);

КонецПроцедуры

Функция КонтактнаяИнформацияИзРеквизитовФормы(Форма, Объект)
	
	// +CRM
	//КонтактнаяИнформация = НоваяКонтактнаяИнформация(Ложь);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	ДобавитьДополнительныеКолонкиКонтактнойИнформации(КонтактнаяИнформация);
	// -CRM
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	// +CRM
	//ГруппаВидовКонтактнойИнформации = ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	ГруппыВидовКонтактнойИнформации = ГруппыВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных);
	// -CRM
	ИменаТабличныхЧастейПоВидамКИ = Неопределено;
	
	Для Каждого СтрокаТаблицы Из УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма) Цикл
		
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		
		// +CRM
		Если ЗначениеЗаполнено(ИмяРеквизита) И СтрокаТаблицы.Комментарий = "Не выводить" Тогда
			Продолжить;
		КонецЕсли;
		
		CRM_ОсновнойДляСвязи = СтрокаТаблицы.CRM_ОсновнойДляСвязи;
		// +СофтФон
		сфпВремяЗадержкиНабораДобавочногоНомера = СтрокаТаблицы.сфпВремяЗадержкиНабораДобавочногоНомера;
		сфпПрефиксНабора = СтрокаТаблицы.сфпПрефиксНабора;
		// -СофтФон
		// -CRM
		
		Элемент = Форма.Элементы.Найти(ИмяРеквизита); // РасширениеПоляФормыДляПоляНадписи
		Если Элемент <> Неопределено Тогда
			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
				Если ПустаяСтрока(СтрокаТаблицы.Представление)
					ИЛИ СтрокаТаблицы.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()
					// +CRM
					Или СтрокаТаблицы.Представление = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
					// -CRM
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВосстановитьПустыеЗначениеПредставление(СтрокаТаблицы);
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			Если ИменаТабличныхЧастейПоВидамКИ = Неопределено Тогда
				Отбор = Новый Структура("ЭтоРеквизитТабличнойЧасти", Истина);
				ВидыКИТабличнойЧасти = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).Выгрузить(Отбор, "Вид");
				// @skip-check query-in-loop - Выполняется только в одной итерации, при первом появлении реквизита табличной части
				ИменаТабличныхЧастейПоВидамКИ = ИменаТабличныхЧастейПоВидамКИ(ВидыКИТабличнойЧасти, ИмяОбъектаМетаданных);
			КонецЕсли;
			
			ИмяТабличнойЧасти = ИменаТабличныхЧастейПоВидамКИ[СтрокаТаблицы.Вид];
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				Значение = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "Значение"];
				// +CRM
				//ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, Значение, ИдентификаторСтроки);
				ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, Значение, 
					ИдентификаторСтроки, CRM_ОсновнойДляСвязи);
				// -CRM
				
			КонецЦикла;
			
		Иначе
			
			// +CRM
			// Если СтрокаТаблицы.Вид.Родитель <> ГруппаВидовКонтактнойИнформации Тогда
			Если ГруппыВидовКонтактнойИнформации.Найти(СтрокаТаблицы.Вид.Родитель) = Неопределено Тогда
			// -CRM
				Продолжить;
			КонецЕсли;
			
			// +CRM
			//ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, СтрокаТаблицы.Значение);
			ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, СтрокаТаблицы.Значение, ,
				CRM_ОсновнойДляСвязи, сфпВремяЗадержкиНабораДобавочногоНомера, сфпПрефиксНабора);
			// -CRM
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КонтактнаяИнформация;
	
КонецФункции

Процедура ПеренестиЗаписьКонтактнойИнформацииИзФормыВТаблицу(КонтактнаяИнформация, СтрокаТаблицы, Знач Значение,
	Знач ИдентификаторСтроки = Неопределено, CRM_ОсновнойДляСвязи = Ложь, сфпВремяЗадержкиНабораДобавочногоНомера = 0,
	сфпПрефиксНабора = Неопределено)
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Значение) Тогда
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Значение, СтрокаТаблицы.Тип);
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, СтрокаТаблицы.Тип);
	КонецЕсли;
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Добавить();
	
	ДействуетС = ?(СтрокаТаблицы.Свойство("ДействуетС"), СтрокаТаблицы.ДействуетС, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформации, СтрокаТаблицы, "Вид,Тип");
	
	СтрокаКонтактнойИнформации.Представление = ОбъектКИ.Value;
	СтрокаКонтактнойИнформации.Значение      = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОбъектКИ);
	
	Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступенМодульЛокализации() Тогда
		МодульУправлениеКонтактнойИнформациейЛокализация = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
		СтрокаКонтактнойИнформации.ЗначенияПолей = МодульУправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(ОбъектКИ, СтрокаТаблицы.Тип);
	КонецЕсли;
	
	// +CRM
	Если СтрокаТаблицы.Свойство("CRM_ОсновнойДляСвязи") Тогда
		СтрокаКонтактнойИнформации.CRM_ОсновнойДляСвязи = CRM_ОсновнойДляСвязи;
	КонецЕсли;
	// +СофтФон
	Если СтрокаТаблицы.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") Тогда
		СтрокаКонтактнойИнформации.сфпВремяЗадержкиНабораДобавочногоНомера = сфпВремяЗадержкиНабораДобавочногоНомера;
	КонецЕсли;
	Если СтрокаТаблицы.Свойство("сфпПрефиксНабора") Тогда
		СтрокаКонтактнойИнформации.сфпПрефиксНабора = сфпПрефиксНабора;
	КонецЕсли;
	// -СофтФон
	// -CRM
	
	Если ЗначениеЗаполнено(ДействуетС) Тогда
		СтрокаКонтактнойИнформации.Дата    = ДействуетС;
	КонецЕсли;
	
	СтрокаКонтактнойИнформации.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	
КонецПроцедуры

#Область МетодыCRM

// Обновляет один вид контактной информации.
//
// Параметры:
//    ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь -
//                                                 иначе.
//    ТолькоНациональныйАдрес - Булево - Истина, если адрес только российский, Ложь - Иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//    ВидРедактирования - Строка - редактировать контактную информацию в только в поле ввода или только в диалоге 
//                                 (ручной ввод информации невозможен).
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, ТолькоНациональныйАдрес,
	 Порядок = Неопределено,
	 ВидРедактирования = "") Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид		= ВидКИ;
	ПараметрыВида.Тип		= Тип;
	ПараметрыВида.Порядок	= Порядок;
	
	Если ПараметрыВида.Свойство("ТолькоНациональныйАдрес") Тогда
		ПараметрыВида.ТолькоНациональныйАдрес = ТолькоНациональныйАдрес;
	КонецЕсли;
	
	Если ПустаяСтрока(ВидРедактирования) Тогда
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				Или Тип = Перечисления.ТипыКонтактнойИнформации.Факс
				Или Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			ПараметрыВида.ВидРедактирования = "ПолеВводаИДиалог";
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ПараметрыВида.ВидРедактирования = "Диалог";
		Иначе
			ПараметрыВида.ВидРедактирования = "ПолеВвода";
		КонецЕсли;
	Иначе
		ПараметрыВида.ВидРедактирования = ВидРедактирования;
	КонецЕсли;
	
	ПараметрыВида.МожноИзменятьСпособРедактирования	= МожноИзменятьСпособРедактирования;
	ПараметрыВида.ОбязательноеЗаполнение			= Ложь;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Контактная информация';en='Contact information'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ГруппаВидовКонтактнойИнформацииОбъекта(Знач ПолноеИмяОбъектаМетаданных)
	
	Возврат Справочники.ВидыКонтактнойИнформации[СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "")];
	
КонецФункции

Функция ГруппыВидовКонтактнойИнформацииОбъекта(Знач ПолноеИмяОбъектаМетаданных) Экспорт
	
	МассивГрупп = Новый Массив;
	Если ПолноеИмяОбъектаМетаданных = "Справочник.Партнеры" Тогда
		
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		
	Иначе
		
		МассивГрупп.Добавить(ГруппаВидовКонтактнойИнформацииОбъекта(ПолноеИмяОбъектаМетаданных));
		
	КонецЕсли;
	
	Возврат МассивГрупп;
	
КонецФункции

Функция ГруппыВидовКонтактнойИнформацииОбъектаПоСсылке(Ссылка) Экспорт
	
	МассивГрупп = Новый Массив;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
		МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Если Ссылка.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		ИначеЕсли Ссылка.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
			МассивГрупп.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		КонецЕсли;
		
	Иначе
		
		МассивГрупп.Добавить(ГруппаВидовКонтактнойИнформацииОбъекта(Ссылка.Метаданные().ПолноеИмя()));
		
	КонецЕсли;
	
	Возврат МассивГрупп;
	
КонецФункции

Функция ГруппаВидовКонтактнойИнформацииПоМетаданным(МетаданныеОбъекта) Экспорт
	
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	Возврат ГруппаВидовКонтактнойИнформации;

КонецФункции

Функция НомерТелефонаПоЗначениюКИ(Значение, Тип) Экспорт
	
	Телефон = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(Значение, Тип);
	
	Если НЕ ЗначениеЗаполнено(Телефон) Тогда
		Возврат "";
	КонецЕсли;
	
	КодСтраны     = Телефон.CountryCode;
	КодГорода     = Телефон.AreaCode;
	НомерТелефона = Телефон.Number;
	
	Если СтрНачинаетсяС(КодСтраны, "+") Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	Поз = СтрНайти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	Возврат УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	
КонецФункции

#КонецОбласти // МетодыCRM

#Область НовыеМетодыCRM

Процедура ИнициализацияКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов = Неопределено) Экспорт
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	ИмяОписания = "КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов";
	ОписаниеТиповОбъекта = Новый ОписаниеТипов("СправочникСсылка.CRM_ПотенциальныеКлиенты,
		| СправочникСсылка.КонтактныеЛицаПартнеров,
		| СправочникСсылка.Партнеры");
	
	ИзменятьРеквизиты = Ложь;
	Если МассивДобавляемыхРеквизитов = Неопределено Тогда
		ИзменятьРеквизиты = Истина;
		МассивДобавляемыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Объект", ОписаниеТиповОбъекта, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид",
		 Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип",
		 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Значение", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ОсновнойДляСвязи",
			 Новый ОписаниеТипов("Булево"),
												ИмяОписания));
	
	Если ИзменятьРеквизиты Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиКонтактнуюИнформациюОбъекта(Форма, Объект, ИмяЭлементаДляРазмещения, ТипыКИ = Неопределено) Экспорт
	
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	КИОбъекта = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Объект",
		 Объект));
	Для каждого Стр Из КИОбъекта Цикл
		Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Удалить(Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Индекс(Стр));
	КонецЦикла;
	
	Идентификатор = СТРЗаменить(Строка(Объект.УникальныйИдентификатор()), "-", "_");
	ПанельКИОбъекта = Форма.Элементы.Добавить("ГруппаТипаКИ" + Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
	ПанельКИОбъекта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПанельКИОбъекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ПанельКИОбъекта.ОтображатьЗаголовок = Ложь;
	Для каждого ТипКИ Из ТипыКИ Цикл
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект, ТипКИ);
		КоличествоКИ = КонтактнаяИнформация.Количество();
		Если КоличествоКИ > 0 Тогда
			СтрТипКИ = CRM_ОбщегоНазначенияСервер.ПолучитьИмяЗначенияПеречисления(ТипКИ);
			
			Если Форма.Команды.Найти("ЭлементТипаКИ" + Идентификатор + СтрТипКИ) = Неопределено Тогда
				Команда = Форма.Команды.Добавить("ЭлементТипаКИ" + Идентификатор + СтрТипКИ);
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
			КонецЕсли;
			
			ГруппуТипаКИ = Форма.Элементы.Добавить("ГруппуТипаКИ" + Идентификатор + СтрТипКИ,
				 Тип("ГруппаФормы"), ПанельКИОбъекта);
			ГруппуТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппуТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппуТипаКИ.ОтображатьЗаголовок = Ложь;
				
			ГруппуЗначенияТипаКИ = Форма.Элементы.Добавить("ГруппаТипаКИВертикаль" + Идентификатор 
				+ СтрТипКИ, Тип("ГруппаФормы"), ГруппуТипаКИ);
			ГруппуЗначенияТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппуЗначенияТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппуЗначенияТипаКИ.РастягиватьПоВертикали = Ложь;
			ГруппуЗначенияТипаКИ.ОтображатьЗаголовок = Ложь;
			ГруппуЗначенияТипаКИ.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементТипаКИ = Форма.Элементы.Добавить("ЭлементТипаКИ" + Идентификатор + СтрТипКИ,
				 Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
			ЭлементТипаКИ.Заголовок = КонтактнаяИнформация[0].Представление;
			ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ЭлементТипаКИ.ИмяКоманды = "ЭлементТипаКИ" + Идентификатор + СтрТипКИ;
			
			НовСтрКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрКИ, КонтактнаяИнформация[0]);
			НовСтрКИ.ИмяРеквизита = "ЭлементТипаКИ" + Идентификатор + СтрТипКИ;
			НовСтрКИ.Объект = Объект;
			
			// Расшифровка КИ:
			Если КоличествоКИ > 1 Тогда
				
				ЭлементТипаКИ.АвтомаксимальнаяШирина	= Ложь;
				Если СтрДлина(ЭлементТипаКИ.Заголовок) > 14 Тогда
					ЭлементТипаКИ.МаксимальнаяШирина	= 10;
				ИначеЕсли СтрДлина(ЭлементТипаКИ.Заголовок) > 10 Тогда
					ЭлементТипаКИ.МаксимальнаяШирина	= 8;
				Иначе
					ЭлементТипаКИ.МаксимальнаяШирина	= 6;
				КонецЕсли;	
				ЭлементТипаКИ.РастягиватьПоГоризонтали	= Истина;
				ЭлементТипаКИ.РастягиватьПоВертикали	= Ложь;
				
				Если Форма.Команды.Найти("КнопкаПодменюТипаКИ" + Идентификатор + СтрТипКИ) = Неопределено Тогда
					Команда = Форма.Команды.Добавить("КнопкаПодменюТипаКИ" + Идентификатор + СтрТипКИ);
					Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
				КонецЕсли;
					
				КнопкаПодменюТипаКИ = Форма.Элементы.Добавить("КнопкаПодменюТипаКИ" + Идентификатор + СтрТипКИ,
					 Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
				КнопкаПодменюТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				КнопкаПодменюТипаКИ.Картинка = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
				КнопкаПодменюТипаКИ.Отображение = ОтображениеКнопки.Картинка;
				КнопкаПодменюТипаКИ.ИмяКоманды = "КнопкаПодменюТипаКИ" + Идентификатор + СтрТипКИ;
				
				КнопкаПодменюТипаКИ.Ширина	= 3;
				КнопкаПодменюТипаКИ.Высота	= 1;
				КнопкаПодменюТипаКИ.РастягиватьПоГоризонтали	= Ложь;
				КнопкаПодменюТипаКИ.РастягиватьПоВертикали		= Ложь;
				
				ПодменюТипаКИ = Форма.Элементы.Добавить("ПодменюТипаКИ" + Идентификатор + СтрТипКИ,
					 Тип("ГруппаФормы"), ГруппуЗначенияТипаКИ);
				ПодменюТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ПодменюТипаКИ.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
				ПодменюТипаКИ.Заголовок = " ";
				ПодменюТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ПодменюТипаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
				ПодменюТипаКИ.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
				ПодменюТипаКИ.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
				ПодменюТипаКИ.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
				ПодменюТипаКИ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
				
				Для Н = 0 По КоличествоКИ - 1 Цикл
					ИмяРеквизита = "ЭлементТипаКИ" + Идентификатор + СтрТипКИ + Строка(Н);
					Если Форма.Команды.Найти(ИмяРеквизита) = Неопределено Тогда
						Команда = Форма.Команды.Добавить(ИмяРеквизита);
						Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
					КонецЕсли;
					
					ЭлементТипаКИГруппа = Форма.Элементы.Добавить(ИмяРеквизита + "Группа", Тип("ГруппаФормы"), ПодменюТипаКИ); 
					ЭлементТипаКИГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ЭлементТипаКИГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ЭлементТипаКИГруппа.ОтображатьЗаголовок = Ложь;
					ЭлементТипаКИГруппа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
					
					ЭлементТипаКИЗаголовок = Форма.Элементы.Добавить(ИмяРеквизита + "Заголовок",
						 Тип("ДекорацияФормы"), ЭлементТипаКИГруппа);
					ЭлементТипаКИЗаголовок.Заголовок = КонтактнаяИнформация[Н].Вид;
					
					ЭлементТипаКИ = Форма.Элементы.Добавить(ИмяРеквизита, Тип("КнопкаФормы"), ЭлементТипаКИГруппа);
					ЭлементТипаКИ.Заголовок = КонтактнаяИнформация[Н].Представление;
					ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
					ЭлементТипаКИ.ИмяКоманды = ИмяРеквизита;
					ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
					
					НовСтрКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрКИ, КонтактнаяИнформация[Н]);
					НовСтрКИ.ИмяРеквизита = ИмяРеквизита;
					НовСтрКИ.Объект = Объект;
				КонецЦикла;
			Иначе
				Декорация = Форма.Элементы.Добавить("ПустаяДекорацияТипаКИ" + Идентификатор + СтрТипКИ,
					 Тип("ДекорацияФормы"), ГруппуЗначенияТипаКИ);
				Декорация.Вид = ВидДекорацииФормы.Надпись;
				Декорация.Ширина = 2;
				Декорация.РастягиватьПоГоризонтали = Ложь;
			КонецЕсли;
			
			// Контекстное меню (только для вывода в Интерес):
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
				И ТипЗнч(Форма["Объект"].Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЭтоПартнер = (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"));
				ЭтоПК = (ТипЗнч(Объект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
				
				Если ЭтоПартнер Или ЭтоПК Тогда
			
					Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						
						Если CRM_ОбщегоНазначенияСервер.ФункциональнаяОпция("CRM_ИспользоватьИнтеграциюСМессенджерами") Тогда
						
							ИмяКоманды = "КнопкаКонтекстноеМенюТипаКИ" + Идентификатор + СтрТипКИ;
							// Команда
							Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
								Команда = Форма.Команды.Добавить(ИмяКоманды);
								Команда.Подсказка	= НСтр("ru=''");
								Команда.Картинка	= БиблиотекаКартинок.CRM_МенюДополнительныеФункции;
								Команда.Отображение	= ОтображениеКнопки.Картинка;
								Команда.Действие	= "Подключаемый_ЗаполнитьКонтекстноеМенюТелефона";
							КонецЕсли;
							
							// Элемент
							ГруппаКонтекстноеМенюТипаКИ = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
							ГруппаКонтекстноеМенюТипаКИ.ИмяКоманды	= ИмяКоманды;
							ГруппаКонтекстноеМенюТипаКИ.ОтображениеФигуры	= ОтображениеФигурыКнопки.ПриАктивности;
							ГруппаКонтекстноеМенюТипаКИ.Ширина		= 3;
							ГруппаКонтекстноеМенюТипаКИ.Высота		= 1;
							ГруппаКонтекстноеМенюТипаКИ.Заголовок	= НСтр("ru='Меню действий'");
							ГруппаКонтекстноеМенюТипаКИ.РастягиватьПоГоризонтали	= Ложь;
							ГруппаКонтекстноеМенюТипаКИ.РастягиватьПоВертикали		= Ложь;
							
							// Индикатор длительной операции
							ИмяДекорации = "ДекорацияПрозвон" + "ЭлементТипаКИ" + Идентификатор + СтрТипКИ;
							ДлитОперация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппуЗначенияТипаКИ);
							ДлитОперация.Ширина = 0;
							ДлитОперация.Высота = 1;
							ДлитОперация.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
							ДлитОперация.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
							
						КонецЕсли;
					
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЕсли;
			
		Иначе // Добавить поле ввода КИ
			
			ЭтоТелефон = (ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон);
			ЭтоАдресЭП = (ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
			ЭтоПартнер = (ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"));
			ЭтоПК = (ТипЗнч(Объект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
			
			ВидКИ = CRM_ВидКИПоУмолчанию(Объект, ТипКИ);
			
			Если (ЭтоПартнер Или ЭтоПК) И (ЭтоТелефон Или ЭтоАдресЭП) И ЗначениеЗаполнено(ВидКИ) Тогда
				
				ГруппуТипаКИ = Форма.Элементы.Найти("ГруппуТипаКИ" + Идентификатор + СтрТипКИ);
				Если ГруппуТипаКИ = Неопределено Тогда
					ГруппуТипаКИ = Форма.Элементы.Добавить("ГруппуТипаКИ" + Идентификатор + СтрТипКИ,
						 Тип("ГруппаФормы"), ПанельКИОбъекта);
				КонецЕсли;
				ГруппуТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппуТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ГруппуТипаКИ.ОтображатьЗаголовок = Ложь;
				
				СтрТипКИ = CRM_ОбщегоНазначенияСервер.ПолучитьИмяЗначенияПеречисления(ТипКИ);

				ИмяРеквизитаПоляВвода = "ПолеВводаКИ" + Идентификатор + СтрТипКИ;
				
				МассивДобавляемыхРеквизитов = Новый Массив;
				Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
				Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаПоляВвода) Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаПоляВвода, Строка500));
				КонецЕсли;
				
				Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
					Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
				КонецЕсли;
				
				ПолеВводаКИ = Форма.Элементы.Найти(ИмяРеквизитаПоляВвода);
				Если ПолеВводаКИ = Неопределено Тогда
					ПолеВводаКИ = Форма.Элементы.Добавить(ИмяРеквизитаПоляВвода, Тип("ПолеФормы"), ГруппуТипаКИ);
				КонецЕсли;
				ПолеВводаКИ.ПутьКДанным = ИмяРеквизитаПоляВвода;
				ПолеВводаКИ.Вид = ВидПоляФормы.ПолеВвода;
				ПолеВводаКИ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
				
				Если ЭтоАдресЭП Тогда
					ПолеВводаКИ.РастягиватьПоГоризонтали = Ложь;
					ПолеВводаКИ.Ширина = 12;
				КонецЕсли;
				
				Если ЭтоАдресЭП Тогда
					ПолеВводаКИ.Заголовок = ВидКИ;
					ПолеВводаКИ.УстановитьДействие("ПриИзменении", "Подключаемый_АдресЭППриИзменении");
				ИначеЕсли ЭтоТелефон Тогда
					ПолеВводаКИ.Заголовок = ВидКИ;
					ПолеВводаКИ.КнопкаВыбора = Истина;
					ПолеВводаКИ.УстановитьДействие("ПриИзменении", "Подключаемый_ТелефонПриИзменении");
					ПолеВводаКИ.УстановитьДействие("НачалоВыбора", "Подключаемый_ТелефонНачалоВыбора");
					Если ВидКИ.ВводитьНомерПоМаске Тогда
						ПолеВводаКИ.Маска = ВидКИ.МаскаНомераТелефона;
					КонецЕсли;
				Иначе
					ПолеВводаКИ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВывестиКонтактнуюИнформациюОбъектаСписком(Форма, Объект, ИмяЭлементаДляРазмещения,
	 ТипыКИ = Неопределено) Экспорт
	
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Форма.Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	КИОбъекта = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Объект",
		 Объект));
	Для каждого Стр Из КИОбъекта Цикл
		Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Удалить(Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.Индекс(Стр));
	КонецЦикла;
	
	Идентификатор = СТРЗаменить(Строка(Объект.УникальныйИдентификатор()), "-", "_");
	
	ГруппаЗаголовокКИ = Форма.Элементы.Добавить("ГруппаЗаголовокКИ" + Идентификатор,
		 Тип("ГруппаФормы"), ЭлементРазмещения);
	ГруппаЗаголовокКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗаголовокКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЗаголовокКИ.ОтображатьЗаголовок = Ложь;
	ГруппаЗаголовокКИ.РастягиватьПоГоризонтали = Истина;
	
	ДекорацияЗаголовокКИ = Форма.Элементы.Добавить("ДекорацияЗаголовокКИ" + Идентификатор,
		 Тип("ДекорацияФормы"), ГруппаЗаголовокКИ);
	ДекорацияЗаголовокКИ.Заголовок = НСтр("ru='Контактная информация';en='Contact information'");
	ДекорацияЗаголовокКИ.Шрифт = Новый Шрифт(, 11);
					
	Если Форма.Команды.Найти("КомандаИзменитьКИ" + Идентификатор) = Неопределено Тогда
		Команда = Форма.Команды.Добавить("КомандаИзменитьКИ" + Идентификатор);
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
	КонецЕсли;
	
	КнопкаИзменитьКИ = Форма.Элементы.Добавить("КнопкаИзменитьКИ" + Идентификатор, Тип("КнопкаФормы"), ГруппаЗаголовокКИ);
	КнопкаИзменитьКИ.Заголовок = НСтр("ru='Изменить';en='Change'");
	КнопкаИзменитьКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КнопкаИзменитьКИ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КнопкаИзменитьКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	КнопкаИзменитьКИ.ИмяКоманды = "КомандаИзменитьКИ" + Идентификатор;
	
	ГруппаСписокКИ = Форма.Элементы.Добавить("ГруппаСписокКИ" + Идентификатор, Тип("ГруппаФормы"), ЭлементРазмещения);
	ГруппаСписокКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСписокКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСписокКИ.ОтображатьЗаголовок = Ложь;
	ГруппаСписокКИ.РастягиватьПоГоризонтали = Истина;
	
	ГруппуКИЛевая = Форма.Элементы.Добавить("ГруппуКИЛевая" + Идентификатор, Тип("ГруппаФормы"), ГруппаСписокКИ);
	ГруппуКИЛевая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппуКИЛевая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппуКИЛевая.ОтображатьЗаголовок = Ложь;
	
	ГруппуКИПравая = Форма.Элементы.Добавить("ГруппуКИПравая" + Идентификатор, Тип("ГруппаФормы"), ГруппаСписокКИ);
	ГруппуКИПравая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппуКИПравая.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппуКИПравая.ОтображатьЗаголовок = Ложь;
	ГруппуКИПравая.РастягиватьПоГоризонтали = Истина;

	Для каждого СтрокаКИ Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если Не ЗначениеЗаполнено(СтрокаКИ.Представление) ИЛИ Не ЗначениеЗаполнено(СтрокаКИ.ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Команды.Найти("ЭлементСпискаКИ" + СтрокаКИ.ИмяРеквизита) = Неопределено Тогда
			Команда = Форма.Команды.Добавить("ЭлементСпискаКИ" + СтрокаКИ.ИмяРеквизита);
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияНажатие";
		КонецЕсли;
			
		ДекорацияЗаголовокКИ = Форма.Элементы.Добавить("ДекорацияЗаголовокКИ" + СтрокаКИ.ИмяРеквизита,
			 Тип("ДекорацияФормы"), ГруппуКИЛевая);
		ДекорацияЗаголовокКИ.Заголовок = Строка(СтрокаКИ.Вид) + ":";
		ДекорацияЗаголовокКИ.Высота = 1;
			
		ЭлементТипаКИ = Форма.Элементы.Добавить("ЭлементСпискаКИ" + СтрокаКИ.ИмяРеквизита,
			 Тип("КнопкаФормы"), ГруппуКИПравая);
		ЭлементТипаКИ.Заголовок = СтрокаКИ.Представление;
		ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементТипаКИ.ИмяКоманды = "ЭлементСпискаКИ" + СтрокаКИ.ИмяРеквизита;
		ЭлементТипаКИ.Шрифт = Новый Шрифт(, 10, СтрокаКИ.CRM_ОсновнойДляСвязи);
		
		Если ЗначениеЗаполнено(СтрокаКИ.Комментарий) Тогда
			
			Форма.Элементы.Добавить("ДекорацияКомментарийКИЗаглушка" 
				+ СтрокаКИ.ИмяРеквизита, Тип("ДекорацияФормы"), ГруппуКИЛевая);
			
			ДекорацияКомментарийКИ = Форма.Элементы.Добавить("ДекорацияКомментарийКИ" 
				+ СтрокаКИ.ИмяРеквизита, Тип("ДекорацияФормы"), ГруппуКИПравая);
			ДекорацияКомментарийКИ.Заголовок = СтрокаКИ.Комментарий;
			ДекорацияКомментарийКИ.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // НовыеМетодыCRM

Функция ПолучитьСписокДобавляемыхЭлементовКонтактнойИнформации(Форма, ИмяЭлементаДляРазмещения) Экспорт
	
	СписокДобавляемыхЭлементовКонтактнойИнформации = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов Цикл
		СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(ЭлементСписка.Значение,
			 ЭлементСписка.Представление, ЭлементСписка.Пометка,
			 ЭлементСписка.Картинка);
	КонецЦикла;
	Если СтрНайти(Форма.ИмяФормы, ".Партнеры") > 0 Тогда
		// Удаляем лишние виды КИ
		МассивВладельцевКИ = Новый Массив;
		МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры"));
		Если Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания"));
		ИначеЕсли Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо"));
		КонецЕсли;
		// Удаляем 
		МассивУдаляемыхЭлементов = Новый Массив;
		Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
			Если ЭлементСписка.Значение.Свойство("РодительКИ")
				И МассивВладельцевКИ.Найти(ЭлементСписка.Значение.РодительКИ) = Неопределено Тогда
				МассивУдаляемыхЭлементов.Добавить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхЭлементов Цикл
			СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	КонецЕсли;
	Попытка
		РедактироватьДР = Форма.РедактироватьДР;
	Исключение
		РедактироватьДР = Истина;
	КонецПопытки;	
	
	Если СтрНайти(Форма.ИмяФормы, ".Пользователи") > 0 Тогда
		МассивВладельцевКИ = Новый Массив;
		МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПользователи"));
		Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
				Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
					Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
				Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
					 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
					СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрНайти(Форма.ИмяФормы, ".CRM_ПотенциальныеКлиенты") > 0 Тогда
		МассивВладельцевКИ = Новый Массив;
		МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты"));
		Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
				Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
					Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если ЭлементОписания.Выводить Тогда
				Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
					Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
						 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РедактироватьДР Тогда
		// Удаляем из списка выбора скрытые элементы КИ.
		Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если ЭлементОписания.Выводить Тогда
				Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
					Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
						 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокДобавляемыхЭлементовКонтактнойИнформации;
	
КонецФункции

Функция КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено,
	РезультатПреобразования = Неопределено,
	НастройкиКонвертации = Неопределено) Экспорт

	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	
	Возврат МодульЛокализации.КонтактнаяИнформацияИзXML(Текст, ОжидаемыйВид, РезультатПреобразования, НастройкиКонвертации);
	
КонецФункции

Функция КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации) Экспорт

	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации);
	
КонецФункции

Функция КонтактнаяИнформацияИзJSONВXML(Знач КонтактнаяИнформация, ОжидаемыйТип = Неопределено) Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.КонтактнаяИнформацияИзJSONВXML(КонтактнаяИнформация, ОжидаемыйТип);
	
КонецФункции

Функция ПространствоИмен() Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.ПространствоИмен();
	
КонецФункции

Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.ДесериализацияТелефона(ЗначенияПолей, Представление, ОжидаемыйТип);

КонецФункции

Функция ДесериализацияФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.ДесериализацияФакса(ЗначенияПолей, Представление, ОжидаемыйТип);

КонецФункции

Функция КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид) Экспорт
	
	Если CRM_ОбщегоНазначенияСервер.ЕстьОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация") Тогда
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
	Иначе
		МодульЛокализации = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
	КонецЕсли;
	Возврат МодульЛокализации.КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид);
	
КонецФункции

Функция СформироватьТекстЗапроса(Знач ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
	Знач ТекстЗапросаИсторическаяИнформация, Знач ЭтоОсновнойЯзык,
	// +CRM
	Знач ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи,
	Знач ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера,
	Знач ЕстьРеквизитТабличнойЧасти_сфпПрефиксНабора,
	ИмяОбъектаМетаданных)
	// -CRM
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление               КАК Представление,
	|	КонтактнаяИнформация.Значение                    КАК Значение,
	|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
	|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки,
	|	&ДействуетС                                      КАК ДействуетС,
	|	&ЭтоИсторическаяКонтактнаяИнформация             КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	КонтактнаяИнформация.Вид                         КАК Вид,
	// +CRM
	|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
	// +СофтФон
	|	КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера КАК сфпВремяЗадержкиНабораДобавочногоНомера,
	|	КонтактнаяИнформация.сфпПрефиксНабора КАК сфпПрефиксНабора,
	// -СофтФон
	// -CRM
	|	&ИдентификаторСтрокиТабличнойЧасти               КАК ИдентификаторСтрокиТабличнойЧасти
	|ПОМЕСТИТЬ 
	|	КонтактнаяИнформация
	|ИЗ
	|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
	|ИНДЕКСИРОВАТЬ ПО
	|	Вид
	|;////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
	|ВЫБОР
	|	КОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида <> """"
	|	ТОГДА ВидыКонтактнойИнформации.ИмяПредопределенногоВида
	|	ИНАЧЕ ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|КОНЕЦ КАК ИмяПредопределенногоВида,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
	|	ВидыКонтактнойИнформации.ОтображатьВсегда             КАК ОтображатьВсегда,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ВидПоляДругое                КАК ВидПоляДругое,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.Наименование КАК ПредставлениеНаОсновномЯзыке,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.ХранитьИсториюИзменений      КАК ХранитьИсториюИзменений,
	|	ВидыКонтактнойИнформации.ВидРедактирования            КАК ВидРедактирования,
	|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ВидыКонтактнойИнформации.МеждународныйФорматАдреса    КАК МеждународныйФорматАдреса,
	|	ВидыКонтактнойИнформации.ВводитьНомерПоМаске  КАК ВводитьНомерПоМаске,
	|	ВидыКонтактнойИнформации.МаскаНомераТелефона    КАК МаскаНомераТелефона,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация, ЛОЖЬ)    КАК ЭтоИсторическаяКонтактнаяИнформация,
	|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
	|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
	|	ЕСТЬNULL(КонтактнаяИнформация.Значение, """")         КАК Значение,
	|	ЕСТЬNULL(КонтактнаяИнформация.ДействуетС, 0)          КАК ДействуетС,
	|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
	// +CRM
	|	ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) КАК CRM_ОсновнойДляСвязи,
	// +СофтФон
	|	ЕСТЬNULL(КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера,0) КАК сфпВремяЗадержкиНабораДобавочногоНомера,
	|	ЕСТЬNULL(КонтактнаяИнформация.сфпПрефиксНабора, ЗНАЧЕНИЕ(Справочник.сфпПрефиксыИсходящихВызовов.ПустаяСсылка)) КАК сфпПрефиксНабора,
	// -СофтФон
	|	ВЫБОР
	|		КОГДА (ЕСТЬNULL(КонтактнаяИнформация.CRM_ОсновнойДляСвязи,Ложь) ИЛИ ЕСТЬNULL(ВидыКонтактнойИнформации.ОтображатьВсегда, ЛОЖЬ))
	|			ТОГДА ИСТИНА
	|		КОГДА (ЕСТЬNULL(ВидыКонтактнойИнформации.Родитель, ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка))
	|			= ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникОрганизации))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КонтактнаяИнформация.НомерСтроки ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	КОНЕЦ КАК Выводить,
	|	ВидыКонтактнойИнформации.Родитель КАК РодительКИ,
	|	ВидыКонтактнойИнформации.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДопПолеСортировки,
	|	ВЫБОР
	|		КОГДА &ВыводитьВОднуКолонку ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Колонка,
	// -CRM
	|	ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)    КАК ИдентификаторСтрокиТабличнойЧасти,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                        КАК ИмяРеквизита,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200))                        КАК ИмяРеквизитаКомментарий,
	|	ВидыКонтактнойИнформации.ПометкаУдаления              КАК ПометкаУдаления,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	КонтактнаяИнформация КАК КонтактнаяИнформация
	|ПО
	|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.Используется
	|	И ЕСТЬNULL(ВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
	|	И (
	|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
	|	И ВидыКонтактнойИнформации.Ссылка НЕ В (&СкрываемыеВиды)
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
	|";
	
	// +CRM
	Если ИмяОбъектаМетаданных = "Партнеры" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"И (
			|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
			|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)",
			"И (
			|		ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)
			|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ))");
	КонецЕсли;
	
	Если (ИмяОбъектаМетаданных = "Партнеры") И Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		ИмяОпции = "ИспользоватьПартнеровКакКонтрагентов";
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию(ИмяОпции);
		
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"И (
				|		ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ)
				|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ))",
				"И (
				|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
				|		ИЛИ
				|		((ВидыКонтактнойИнформации.Родитель В (&ГруппаВидовКИ) 
				|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель В (&ГруппаВидовКИ)) 
				|		И (НЕ ВидыКонтактнойИнформации.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.CRM_ЮрАдрес)))
				|	)");
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	СуффиксТекущегоЯзыка = ОбщегоНазначения.СуффиксЯзыкаТекущегоПользователя();
		
	Если СуффиксТекущегоЯзыка <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(СуффиксТекущегоЯзыка) Тогда
			МодульМультиязычностьСервер = ОбщегоНазначения.ОбщийМодуль("МультиязычностьСервер");
			МодульМультиязычностьСервер.ИзменитьПолеЗапросаПодТекущийЯзык(ТекстЗапроса, "ВидыКонтактнойИнформации.Наименование КАК Наименование");
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыКонтактнойИнформации.Наименование КАК Наименование", 
			"ВЫРАЗИТЬ(ЕСТЬNULL(ВидыКонтактнойИнформацииПредставления.Наименование, ВидыКонтактнойИнформации.Наименование) КАК СТРОКА(150)) КАК Наименование");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ", "ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации.Представления КАК ВидыКонтактнойИнформацииПредставления
		|ПО ВидыКонтактнойИнформацииПредставления.Ссылка = ВидыКонтактнойИнформации.Ссылка
		|	И ВидыКонтактнойИнформацииПредставления.КодЯзыка = &КодЯзыка
		|ГДЕ");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторСтрокиТабличнойЧасти",
		?(ЕстьКолонкаИдентификаторСтрокиТабличнойЧасти,
		"ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)",
		"0"));
	
	Если ТекстЗапросаИсторическаяИнформация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДействуетС", "КонтактнаяИнформация.ДействуетС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоИсторическаяКонтактнаяИнформация", "КонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДействуетС", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоИсторическаяКонтактнаяИнформация", "ЛОЖЬ");
	КонецЕсли;
	
	// +CRM
	Если НЕ ЕстьРеквизитТабличнойЧасти_CRM_ОсновнойДляСвязи Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.CRM_ОсновнойДляСвязи", "Ложь");
	КонецЕсли;
	// +СофтФон
	Если НЕ ЕстьРеквизитТабличнойЧасти_сфпВремяЗадержкиНабораДобавочногоНомера Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.сфпВремяЗадержкиНабораДобавочногоНомера", 0);
	КонецЕсли;
	Если НЕ ЕстьРеквизитТабличнойЧасти_сфпПрефиксНабора Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонтактнаяИнформация.сфпПрефиксНабора",
			 "ЗНАЧЕНИЕ(Справочник.сфпПрефиксыИсходящихВызовов.ПустаяСсылка)");
	КонецЕсли;
	// -СофтФон
	// -CRM
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОпределитьСледующуюСтроку(Форма, КонтактнаяИнформация, СтрокаКИ)
	
	Позиция = КонтактнаяИнформация.Индекс(СтрокаКИ) + 1;
	Пока Позиция < КонтактнаяИнформация.Количество() Цикл
		СледующаяСтрока = КонтактнаяИнформация.Получить(Позиция);
		Если СледующаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Форма.Элементы.Найти(СледующаяСтрока.ИмяРеквизита) <> Неопределено Тогда
			Возврат СледующаяСтрока;
		КонецЕсли;
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Процедура КонвертацияКонтактнойИнформацииВJSON(КонтактнаяИнформация)
	
	// Конвертация
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		Если ПустаяСтрока(СтрокаКИ.Значение) Тогда
			Если ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
				
				// +CRM
				//НастройкиКонвертации = НастройкиКонвертацииКонтактнойИнформации();
				НастройкиКонвертации = УправлениеКонтактнойИнформацией.НастройкиКонвертацииКонтактнойИнформации();
				// -CRM
				НастройкиКонвертации.ОбновлятьИдентификаторы             = Ложь;
				НастройкиКонвертации.ВосстанавливатьКонтактнуюИнформацию = Ложь;
				НастройкиКонвертации.Представление                       = СтрокаКИ.Представление;
				
				КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(СтрокаКИ.ЗначенияПолей,
					СтрокаКИ.Тип, НастройкиКонвертации);
				
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				   И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(КонтактнаяИнформацияПоПолям.AddressType) Тогда
						Продолжить;
				КонецЕсли;
				
				Если ПустаяСтрока(КонтактнаяИнформацияПоПолям.value) Тогда
					КонтактнаяИнформацияПоПолям.value = СтрокаКИ.Представление;
				КонецЕсли;
				
				Если ПустаяСтрока(КонтактнаяИнформацияПоПолям.comment) И ЗначениеЗаполнено(СтрокаКИ.Комментарий) Тогда
					КонтактнаяИнформацияПоПолям.comment = СтрокаКИ.Комментарий;
				КонецЕсли;
				
				СтрокаКИ.Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(КонтактнаяИнформацияПоПолям);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаКИ.Наименование) Тогда
			СтрокаКИ.Наименование = СтрокаКИ.ПредставлениеНаОсновномЯзыке;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьПараметрыКонтактнойИнформацииПоВладельцу(Форма, Объект, ПараметрыКонтактнойИнформации, ЭтоПараметрыОсновногоОбъекта, СкрываемыеВиды)
	
	СкрываемыеВиды = Новый Массив;
	Для каждого ПараметрКонтактнойИнформации Из Форма.ПараметрыКонтактнойИнформации Цикл
		
		Если ПараметрКонтактнойИнформации.Значение.Владелец = Объект.Ссылка
			Или Форма.ПараметрыКонтактнойИнформации.Количество() = 1 Тогда
				
				ПараметрыКонтактнойИнформации = ПараметрКонтактнойИнформации.Значение;
				СкрываемыеВиды = ПараметрыКонтактнойИнформации.СкрываемыеВиды;
				Возврат;
		КонецЕсли;
		
		ЭтоПараметрыОсновногоОбъекта = Ложь;
		
	КонецЦикла;

КонецПроцедуры

// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//   ДобавляемыеРеквизиты - Массив из РеквизитФормы
//   ИмяОбъекта - Строка
//   РазмещеныНаФорме - Соответствие из КлючИЗначение:
//     * Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//     * Значение - Булево
//   КонтактнаяИнформация - КоллекцияСтрокДереваЗначений:
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации   - вид контактной информации.
//    * ИмяПредопределенногоВида - Строка
//    * ИмяПредопределенныхДанных - Строка
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//    * ОбязательноеЗаполнение - Булево
//    * ВидПоляДругое - Строка
//    * РазрешитьВводНесколькихЗначений - Булево
//    * Наименование - Строка
//    * ХранитьИсториюИзменений - Булево
//    * ВидРедактирования - Строка
//    * ЭтоРеквизитТабличнойЧасти - Булево
//    * РеквизитДопУпорядочивания - Булево
//    * МеждународныйФорматАдреса - Булево
//    * ВводитьНомерПоМаске - Булево
//    * ЭтоИсторическаяКонтактнаяИнформация - Булево
//    * Представление    - Строка - представление контактной информации.
//    * ЗначенияПолей    - Строка - устаревший XML, соответствующий XDTO пакетам КонтактнаяИнформация или Адрес. Для
//                                  обратной совместимости.
//    * Значение    - Строка.
//    * ДействуетС    - Дата.
//    * НомерСтроки    - Число.
//    * ИдентификаторСтрокиТабличнойЧасти    - Число.
//    * ИмяРеквизита    - Строка.
//    * ПометкаУдаления    - Булево.
//    * Комментарий    - Строка.
//   ОтложеннаяИнициализация - Булево
//                           - Массив
//   ОбработкаНавигационнойСсылки - Булево
//
Процедура СоздатьРеквизитыКонтактнойИнформации(Знач Форма, Знач ДобавляемыеРеквизиты, Знач ИмяОбъекта, Знач РазмещеныНаФорме,
	Знач КонтактнаяИнформация, Знач ОтложеннаяИнициализация, Знач ОбработкаНавигационнойСсылки)
	
	Строка1500            = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1500));
	ФорматированнаяСтрока = Новый ОписаниеТипов("ФорматированнаяСтрока");
	
	СозданныеРеквизиты = ОбщегоНазначения.СкопироватьРекурсивно(РазмещеныНаФорме);
	ПредыдущийВид      = Неопределено;
	ПорядковыйНомер    = 1;
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ПометкаУдаления И ПустаяСтрока(ОбъектКонтактнойИнформации.Значение) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенногоВида;
			Позиция = СтрНайти(ИмяВидаКИ, ИмяОбъекта);
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Позиция + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ТекущийВид = СтрокаКИ.Вид;
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x")
						+ ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка1500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита + "Значение", Новый ОписаниеТипов("Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			Если ОбъектКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);
				Продолжить;
			КонецЕсли;
			
			ТекущийВид = ОбъектКонтактнойИнформации.Вид;
			
			СозданныйРеквизит = СозданныеРеквизиты.Получить(ТекущийВид);
			Если СозданныйРеквизит <> Неопределено Тогда
				СозданныйРеквизит = ТекущийВид;
			КонецЕсли;
			
			Если НЕ ОбъектКонтактнойИнформации.ОтображатьВсегда И ПустаяСтрока(ОбъектКонтактнойИнформации.Значение) И СозданныйРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущийВид <> ПредыдущийВид Тогда
				ПредыдущийВид = ТекущийВид;
				ПорядковыйНомер = 1;
			Иначе
				ПорядковыйНомер = ПорядковыйНомер + 1;
			КонецЕсли;
			
			ЕстьПолеКомментарий = ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(ОбъектКонтактнойИнформации.Тип, ОбработкаНавигационнойСсылки);
			
			Если СозданныйРеквизит = Неопределено Тогда
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + СтрЗаменить(ТекущийВид.УникальныйИдентификатор(), "-", "x")
					+ Формат(ПорядковыйНомер, "ЧГ=0");
				Если ЕстьПолеКомментарий Тогда
					ОбъектКонтактнойИнформации.ИмяРеквизитаКомментарий = "КомментарийКонтактнаяИнформацияПоле" + СтрЗаменить(
						ТекущийВид.УникальныйИдентификатор(), "-", "x") + Формат(ПорядковыйНомер, "ЧГ=0");
				КонецЕсли;
				Если Не ОтложеннаяИнициализация Тогда
					
					ТипРеквизита = Строка1500;
					Если ОбъектКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки Тогда
						ТипРеквизита = ФорматированнаяСтрока;
					КонецЕсли;
					
					ДобавляемыеРеквизиты.Добавить(
						Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, ТипРеквизита,, ОбъектКонтактнойИнформации.Наименование, Истина));
					Если ЕстьПолеКомментарий Тогда
						ДобавляемыеРеквизиты.Добавить(
							Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизитаКомментарий, ТипРеквизита,, ОбъектКонтактнойИнформации.Наименование, Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенногоВида;
				Если ЕстьПолеКомментарий Тогда
					ОбъектКонтактнойИнформации.ИмяРеквизитаКомментарий = "КомментарийКонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенногоВида;
				КонецЕсли;
				СозданныеРеквизиты.Удалить(СозданныйРеквизит);
			КонецЕсли;
			
			СкорректироватьКонтактнуюИнформацию(Форма, ОбъектКонтактнойИнформации);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЭлементыТабличнойЧасти(Знач Форма, Знач ИмяОбъекта, ИмяЭлементаДляРазмещения, 
	Знач СтрокаКонтактнойИнформации, Знач ДанныеВидаКонтактнойИнформации)
	
	ВидыКонтактнойИнформацииТЧ = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		ВидыКонтактнойИнформацииТЧ.Добавить(СтрокаТабличнойЧасти.Вид);
	КонецЦикла;
	ДанныеВидовКонтактнойИнформацииТЧ = УправлениеКонтактнойИнформациейСлужебный.ДанныеВидовКонтактнойИнформации(
		ВидыКонтактнойИнформацииТЧ);
	
	ИмяВидаКонтактнойИнформации = ДанныеВидаКонтактнойИнформации.ИмяПредопределенногоВида;
	Если ПустаяСтрока(ИмяВидаКонтактнойИнформации) Тогда
		ИмяВидаКонтактнойИнформации = ДанныеВидаКонтактнойИнформации.ИмяПредопределенныхДанных;
	КонецЕсли;
	Позиция = СтрНайти(ИмяВидаКонтактнойИнформации, ИмяОбъекта);
	ИмяТабличнойЧасти = Сред(ИмяВидаКонтактнойИнформации, Позиция + СтрДлина(ИмяОбъекта));
	ПредыдущийВидТЧ = Неопределено;
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокаКонтактнойИнформации.Строки Цикл
		
		ВидКонтактнойИнформацииТЧ = СтрокаТабличнойЧасти.Вид;
		Если ВидКонтактнойИнформацииТЧ <> ПредыдущийВидТЧ Тогда
			
			ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
			
			Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧасти.ИмяРеквизита;
			
			Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧасти.Тип) Тогда
				Элемент.КнопкаВыбора = Не СтрокаТабличнойЧасти.ПометкаУдаления;
				Если ВидКонтактнойИнформацииТЧ.ВидРедактирования = "Диалог" Тогда
					Элемент.РедактированиеТекста = Ложь;
				КонецЕсли;
				
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			КонецЕсли;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
			
			Если СтрокаТабличнойЧасти.ПометкаУдаления Тогда
				Элемент.Шрифт = ШрифтыСтиля.ЗаголовокУдаленногоРеквизитаШрифт;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
			
			Если ВидКонтактнойИнформацииТЧ.ОбязательноеЗаполнение Тогда
				Элемент.АвтоОтметкаНезаполненного = Не СтрокаТабличнойЧасти.ПометкаУдаления;
			КонецЕсли;
			
			ПараметрыКонтактнойИнформацииЭлемента = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // см. ПараметрыВыводаКонтактнойИнформации
			ПараметрыКонтактнойИнформацииЭлемента.ДобавленныеЭлементы.Добавить(СтрокаТабличнойЧасти.ИмяРеквизита, 2, Ложь);
			
			ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧасти, ДанныеВидовКонтактнойИнформацииТЧ, Ложь, Истина,, ИмяЭлементаДляРазмещения);
			ПредыдущийВидТЧ = ВидКонтактнойИнформацииТЧ;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
		
		СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
		
		Если СтрокиТаблицы.Количество() = 1 Тогда
			СтрокаТаблицы = СтрокиТаблицы[0];
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита]                   = СтрокаТабличнойЧасти.Представление;
			СтрокаТаблицы[СтрокаТабличнойЧасти.ИмяРеквизита + "Значение"]      = СтрокаТабличнойЧасти.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Получение и коррекция контактной информации
Процедура СкорректироватьКонтактнуюИнформацию(Форма, СтрокаКИ)
	
	РезультатПреобразования = Новый Структура;
	
	Если ПустаяСтрока(СтрокаКИ.Значение) Тогда
		
		Если ПустаяСтрока(СтрокаКИ.Представление) И ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
			СтрокаКИ.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(СтрокаКИ.ЗначенияПолей);
		КонецЕсли;
		
		// Локализация
		Если УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ДоступенМодульЛокализации() Тогда
			МодульУправлениеКонтактнойИнформациейЛокализация = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейЛокализация");
		
			// +CRM
			//НастройкиКонвертации = НастройкиКонвертацииКонтактнойИнформации();
			НастройкиКонвертации = УправлениеКонтактнойИнформацией.НастройкиКонвертацииКонтактнойИнформации();
			// -CRM
			НастройкиКонвертации.Представление                       = СтрокаКИ.Представление;
			НастройкиКонвертации.ВосстанавливатьКонтактнуюИнформацию = Ложь;
			
			Результат = МодульУправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, 
				СтрокаКИ.Вид, РезультатПреобразования, НастройкиКонвертации);
			СтрокаКИ.Комментарий = ?(ЗначениеЗаполнено(Результат.Комментарий), Результат.Комментарий, "");
			
			Если РезультатПреобразования.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
				
			Если Не РезультатПреобразования.Свойство("СведенияИсправлены") ИЛИ РезультатПреобразования.СведенияИсправлены = Ложь Тогда
				Возврат;
			КонецЕсли;
			
			Если РезультатПреобразования.СведенияИсправлены Тогда
				СтрокаКИ.ЗначенияПолей = МодульУправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияXDTOВXML(Результат);
			КонецЕсли;
	
			Если РезультатПреобразования.Свойство("ТекстОшибки") Тогда
				ОбщегоНазначения.СообщитьПользователю(РезультатПреобразования.ТекстОшибки, , СтрокаКИ.ИмяРеквизита);
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
		КонецЕсли;
		// Конец Локализация
		
	Иначе
		// +CRM
		//СтрокаКИ.Комментарий = КомментарийКонтактнойИнформации(СтрокаКИ.Значение);
		СтрокаКИ.Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(СтрокаКИ.Значение);
		// -CRM
		
		Если ПустаяСтрока(СтрокаКИ.Представление) Тогда
			// +CRM
			//СтрокаКИ.Представление = ПредставлениеКонтактнойИнформации(СтрокаКИ.Значение);
			СтрокаКИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаКИ.Значение);
			// -CRM
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Родитель(Форма, ИмяЭлементаДляРазмещения)
	
	Возврат ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения])
	
КонецФункции

Процедура УстановитьДействияДляСтатическихЭлементов(Форма, СтрокаКИ, ИмяЭлементаДляРазмещения)
	
	Элемент = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
	Тип = СтрокаКи.Тип;
	
	ПараметрыКонтактнойИнформации = ПараметрыКонтактнойИнформацииФормы(Форма.ПараметрыКонтактнойИнформации,
		ИмяЭлементаДляРазмещения);
	ОбработкаНавигационнойСсылки = ПараметрыКонтактнойИнформации.ОбработкаНавигационнойСсылки;
	
	Если СтрокаКИ.ВидРедактирования = "Диалог" И СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
		И Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
		
	Если НЕ ЗначениеЗаполнено(Элемент.ПолучитьДействие("Нажатие")) Тогда
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
	КонецЕсли;
	
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки И Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
		
		Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("ОбработкаНавигационнойСсылки")) Тогда
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки");
		КонецЕсли;
		
	ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда 
		
		Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("Очистка")) Тогда
			Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
		КонецЕсли;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("Автоподбор")) Тогда
				Элемент.УстановитьДействие("Автоподбор", "Подключаемый_КонтактнаяИнформацияАвтоподбор");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("ОбработкаВыбора")) Тогда
				Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_КонтактнаяИнформацияОбработкаВыбора");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) И Элемент.Вид = ВидПоляФормы.ПолеВвода
		И Не СтрокаКИ.ВидРедактирования = "ПолеВвода" Тогда
		
		ДоступенВыбор = Не СтрокаКИ.ПометкаУдаления И СтрокаКИ.ВидРедактирования <> "ПолеВвода";
		
		Если ДоступенВыбор И Не Форма.ТолькоПросмотр Тогда
			Элемент.КнопкаВыбора = Истина;
			Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("НачалоВыбора")) Тогда
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			КонецЕсли;
		Иначе
			Элемент.КнопкаВыбора   = Ложь;
			Если ЗначениеЗаполнено(Форма[СтрокаКИ.ИмяРеквизита]) Тогда
				Элемент.КнопкаОткрытия = Истина;
				Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("Открытие")) Тогда
					Элемент.УстановитьДействие("Открытие", "Подключаемый_КонтактнаяИнформацияПриНажатии");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элемент.ПолучитьДействие("ПриИзменении")) Тогда
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	КонецЕсли;
	
	Если ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(Тип, ОбработкаНавигационнойСсылки) Тогда
		ИмяЭлементаКомментарий = "Комментарий" + СтрокаКИ.ИмяРеквизита;
		Если Форма.Элементы.Найти(ИмяЭлементаКомментарий) <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Форма.Элементы[ИмяЭлементаКомментарий].ПолучитьДействие("ПриИзменении")) Тогда
				Форма.Элементы[ИмяЭлементаКомментарий].УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Описание дополнительных параметров вывода контактной информации
// 
// Параметры:
//   ОписаниеКоманд   - см. ОписаниеКоманд 
//   ОтображатьИконки - Булево
//   РазмещеныНаФорме - Соответствие из КлючИЗначение:
//     * Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//     * Значение - Булево
//                - Неопределено
//   РазрешитьДобавлениеПолей - Булево
//   ИсключаемыеВиды  - Массив
//                    - Неопределено
//   СкрываемыеВиды   - Массив
//                    - Неопределено
// 
// Возвращаемое значение:
//  Структура:
//    * ОписаниеКоманд   - см. ОписаниеКоманд 
//    * ОтображатьИконки - Булево
//    * РазмещеныНаФорме - Соответствие из КлючИЗначение:
//        ** Ключ - СправочникСсылка.ВидыКонтактнойИнформации
//        ** Значение - Булево
//                    - Неопределено
//    * РазрешитьДобавлениеПолей - Булево
//    * ИсключаемыеВиды  - Массив
//                       - Неопределено
//    * СкрываемыеВиды   - Массив
//                       - Неопределено
//    * ШиринаПоляКомментарий - Число
//    * ПоложениеКнопкиДобавить - ГоризонтальноеПоложениеЭлемента
//
Функция ДополнительныеПараметрыВыводаКонтактнойИнформации(ОписаниеКоманд, ОтображатьИконки, РазмещеныНаФорме,
	РазрешитьДобавлениеПолей, ИсключаемыеВиды, СкрываемыеВиды,
	ВыводитьВОднуКолонку, CRM_ДополнительныеПараметры) // +CRM
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеКоманд",                    ОписаниеКоманд);
	ДополнительныеПараметры.Вставить("ОтображатьИконки",                  ОтображатьИконки);
	ДополнительныеПараметры.Вставить("РазмещеныНаФорме",                  РазмещеныНаФорме);
	ДополнительныеПараметры.Вставить("РазрешитьДобавлениеПолей",          РазрешитьДобавлениеПолей);
	ДополнительныеПараметры.Вставить("ИсключаемыеВиды",                   ИсключаемыеВиды);
	ДополнительныеПараметры.Вставить("СкрываемыеВиды",                    СкрываемыеВиды);
	ДополнительныеПараметры.Вставить("ШиринаПоляКомментарий",             30);
	ДополнительныеПараметры.Вставить("ПоложениеКнопкиДобавить",           ГоризонтальноеПоложениеЭлемента.Лево);
	// +CRM
	ДополнительныеПараметры.Вставить("ВыводитьВОднуКолонку",              ВыводитьВОднуКолонку);
	ДополнительныеПараметры.Вставить("CRM_ДополнительныеПараметры", CRM_ДополнительныеПараметры);
	// -CRM
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Проверяет наличие ограничения по ширине в группе, включая всех родителей группы.
// Ограничением читается ширина меньше 90
//
Функция ГруппаДляРазмещенияОграниченаШириной(Группа)

	ОграничениеПоШирине = Ложь;
	ПроверитьГруппуНаОграничениеПоШиринеРекурсивно(Группа, ОграничениеПоШирине);
	
	Возврат ОграничениеПоШирине;

КонецФункции

Процедура ПроверитьГруппуНаОграничениеПоШиринеРекурсивно(Группа, ОграничениеПоШирине)
	
	Если Группа.Ширина <> 0 И Группа.Ширина < 90 Тогда
		ОграничениеПоШирине = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Группа) <> Тип("ФормаКлиентскогоПриложения") Тогда
		ПроверитьГруппуНаОграничениеПоШиринеРекурсивно(Группа.Родитель, ОграничениеПоШирине);
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиПодсистемы(ВладелецКонтактнойИнформации)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОтображатьИконки", Ложь);
	// +CRM
	//Настройки.Вставить("ОписаниеКоманд", ОписаниеКоманд());
	Настройки.Вставить("ОписаниеКоманд", УправлениеКонтактнойИнформацией.ОписаниеКоманд());
	// -CRM
	Настройки.Вставить("ПоложениеКнопкиДобавить", ГоризонтальноеПоложениеЭлемента.Лево);
	Настройки.Вставить("ШиринаПоляКомментарий", 16); // +CRM
	
	УправлениеКонтактнойИнформациейПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает картинку, иллюстрирующую тип контактной информации
//
// Параметры:
//  ТипКонтактнойИнформации	 - ПеречислениеСсылка.ТипыКонтактнойИнформации
// 
// Возвращаемое значение:
//  Картинка - картинка, иллюстрирующая тип контактной информации
//
Функция КартинкаТипаКонтактнойИнформации(ТипКонтактнойИнформации)
	
	Возврат УправлениеКонтактнойИнформациейСлужебныйПовтИсп.КартинкиТиповКонтактнойИнформации().Получить(ТипКонтактнойИнформации);
	
КонецФункции

// Определяет наличие кнопки в группах контактной информации
// 
// Параметры:
//   Группа - ГруппаФормы
//          - ЭлементыФормы
//   ЭтоГруппаСтроки - Булево - если Истина, то выполняется поиск кнопки среди элементов внутри группы
// 
// Возвращаемое значение:
//   Булево
//
Функция ЕстьКнопкаКонтактнойИнформации(Группа, ЭтоГруппаСтроки)
	
	Если ЭтоГруппаСтроки Тогда
		Если ТипЗнч(Группа) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппы.Вид = ВидКнопкиФормы.ОбычнаяКнопка Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Каждого ГруппаПоля Из Группа Цикл
			Если ТипЗнч(ГруппаПоля) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ЭлементГруппы Из ГруппаПоля.ПодчиненныеЭлементы Цикл
				Если ЭлементГруппы.Вид = ВидКнопкиФормы.ОбычнаяКнопка Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет предполагаемое наличие поля "Комментарий" для типа контактной информации
//
// Параметры:
//  ТипКонтактнойИнформации	     - ПеречислениеСсылка.ТипыКонтактнойИнформации
//  ОбработкаНавигационнойСсылки - Булево
// 
// Возвращаемое значение:
//  Булево - признак наличия поля комментария на форме
//
Функция ДляТипаКонтактнойИнформацииЕстьПолеКомментарий(ТипКонтактнойИнформации, ОбработкаНавигационнойСсылки)
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес 
		ИЛИ ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Другое 
		ИЛИ (ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И ОбработкаНавигационнойСсылки) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет наличие гиперссылки
// 
// Параметры:
//  Элемент - ГруппаФормы
//          - ПолеФормы
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьГиперссылка(Элемент)

	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
			Если ЭлементГруппы.Вид = ВидПоляФормы.ПолеНадписи Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Добавляет колонки контактной информации CRM
//
// Параметры:
//  КонтактнаяИнформация  - Таблица значений - таблица контактной информации
//
Процедура ДобавитьДополнительныеКолонкиКонтактнойИнформации(КонтактнаяИнформация);
	
	КонтактнаяИнформация.Колонки.Добавить("CRM_ОсновнойДляСвязи", Новый ОписаниеТипов("Булево"));
	КонтактнаяИнформация.Колонки.Добавить("сфпВремяЗадержкиНабораДобавочногоНомера", Новый ОписаниеТипов("Число"));
	КонтактнаяИнформация.Колонки.Добавить("сфпПрефиксНабора", Новый ОписаниеТипов("СправочникСсылка.сфпПрефиксыИсходящихВызовов"));
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
