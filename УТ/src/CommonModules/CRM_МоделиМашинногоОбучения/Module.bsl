
#Область ПрограммныйИнтерфейс

// Возвращает признак использования модели машинного обучения.
//
// Возвращаемое значение:
//	Булево - признак использования модели машинного обучения.
//
Функция ИспользованиеВключено() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения");
КонецФункции

// Возвращает признак использования классификации обращений.
//
// Возвращаемое значение:
//	Булево - признак использования классификации обращений.
//
Функция КлассификацияОбращенийИспользуется() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиМоделей = CRM_МоделиМашинногоОбучения.ПолучитьНастройкиМоделей();
	Если Не CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделейЗаполнены(НастройкиМоделей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НастройкиМоделей.ИспользоватьКлассификациюОбращений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Включает использование модели машинного обучения.
//
Процедура ВключитьИспользование() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.CRM_ИспользоватьМоделиМашинногоОбучения.Установить(Истина);
КонецПроцедуры

// Выполняет поиск решений.
//
// Параметры:
//	ТекстПоиска - Строка - Текст для поиска.
//
// Возвращаемое значение:
//	Массив - результаты поиска.
//
Функция ПоискРешений(ТекстПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыПоиска = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТекстПоиска) Тогда
		Возврат РезультатыПоиска;
	КонецЕсли;
	
	ПараметрыЗадач = CRM_МоделиМашинногоОбученияКлиентСервер.ПараметрыЗадач();
	НастройкиМоделей = ПолучитьНастройкиМоделей();
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыЗадач.ПоискРешений.Адрес, ТекстПоиска, НастройкиМоделей);
	
	Если РезультатЗапроса.Ошибка Тогда
		Возврат РезультатыПоиска;
	КонецЕсли;
	
	ПорогОтсечения = НастройкиМоделей.ПоискРешенийПорогНезнания;
	ПорогУверенности = НастройкиМоделей.ПоискРешенийПорогУверенности;
	МаксимумРекомендаций = НастройкиМоделей.ПоискРешенийМаксимумРекомендаций;
	
	Счетчик = 0;
	Для Каждого ЭлементДанных Из РезультатЗапроса.Значение[0] Цикл
		
		Если Счетчик = МаксимумРекомендаций Тогда
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		
		Идентификатор = ЭлементДанных[0];
		Уверенность = Окр(100 * ЭлементДанных[1], 1);
		Если Уверенность < ПорогОтсечения Тогда
			Прервать;
		КонецЕсли;
		
		Ссылка = Справочники.CRM_Решения.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Если Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = СтруктураРезультатаЗадачи();
		Результат.Идентификатор	= Идентификатор;
		Результат.Ссылка		= Ссылка;
		Результат.Уверенность	= Уверенность;
		Если Уверенность >= ПорогУверенности Тогда
			Результат.ЭтоСовет = Истина;
		КонецЕсли;
		РезультатыПоиска.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат РезультатыПоиска;
	
КонецФункции

// Возвращает метку классификации обращения.
//
// Параметры:
//	ТекстПоиска - Строка - Текст для поиска.
//
// Возвращаемое значение:
//	Справочники.CRM_МеткиКлассификации - метка классификации обращения.
//
Функция МеткаКлассификацииОбращения(ТекстПоиска) Экспорт
	
	РезультатыКлассификации = КлассифицироватьОбращение(ТекстПоиска);
	
	Если РезультатыКлассификации.Количество() = 0 Тогда
		Возврат Справочники.CRM_МеткиКлассификации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат РезультатыКлассификации[0].Метка;
	
КонецФункции

// Выполняет классифицирование обращения.
//
// Параметры:
//	ТекстПоиска - Строка - Текст для поиска.
//
// Возвращаемое значение:
//	Массив - результаты классификации.
//
Функция КлассифицироватьОбращение(ТекстПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыКлассификации = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТекстПоиска) Тогда
		Возврат РезультатыКлассификации;
	КонецЕсли;
	
	ПараметрыЗадач = CRM_МоделиМашинногоОбученияКлиентСервер.ПараметрыЗадач();
	НастройкиМоделей = ПолучитьНастройкиМоделей();
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыЗадач.КлассификацияОбращений.Адрес, ТекстПоиска, НастройкиМоделей);
	
	Если РезультатЗапроса.Ошибка Тогда
		Возврат РезультатыКлассификации;
	КонецЕсли;
	
	ПорогОтсечения = НастройкиМоделей.КлассификацияОбращенийПорогНезнания;
	ПорогУверенности = НастройкиМоделей.КлассификацияОбращенийПорогУверенности;
	Для Каждого ЭлементДанных Из РезультатЗапроса.Значение[0] Цикл
		
		МеткаКлассификации = ЭлементДанных[0];
		Уверенность = Окр(100 * ЭлементДанных[1], 1);
		Если Уверенность < ПорогОтсечения Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеМетки = ДанныеМеткиКлассификации(МеткаКлассификации);
		Если Не ЗначениеЗаполнено(ДанныеМетки.ТипОбращения) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = СтруктураРезультатаЗадачи();
		Результат.Ссылка		= ДанныеМетки.ТипОбращения;
		Результат.Метка			= ДанныеМетки.Метка;
		Результат.Уверенность	= Уверенность;
		Если Уверенность >= ПорогУверенности Тогда
			Результат.ЭтоСовет = Истина;
		КонецЕсли;
		РезультатыКлассификации.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат РезультатыКлассификации;
	
КонецФункции

// Возвращает вероятность конверсии.
//
// Параметры:
//	Интерес - ДокументСсылка.CRM_Интерес - Документ "Интерес".
//	Партнер - СправочникСсылка.Партнеры - Партнер.
//
// Возвращаемое значение:
//	Число - вероятность конверсии.
//
Функция ВероятностьКонверсии(Интерес, Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВероятностьКонверсии = 0;
	
	ПараметрыЗапроса = ПараметрыЗапросаВероятностиКонверсии(Интерес, Партнер);
	ПараметрыЗапроса1 = Новый Массив;
	ПараметрыЗапроса1.Добавить(ПараметрыЗапроса);
	
	ПараметрыЗадач = CRM_МоделиМашинногоОбученияКлиентСервер.ПараметрыЗадач();
	НастройкиМоделей = ПолучитьНастройкиМоделей();
	
	РезультатЗапроса = ВыполнитьЗапрос(ПараметрыЗадач.ИнформированиеОКонверсии.Адрес, ПараметрыЗапроса1, НастройкиМоделей);
	Если РезультатЗапроса.Ошибка Тогда
		Возврат ВероятностьКонверсии;
	КонецЕсли;
	
	ВероятностьКонверсии = Окр(100 * РезультатЗапроса.Значение[0], 0);
	
	Возврат ВероятностьКонверсии;
	
КонецФункции

// Проверяет доступность.
//
// Параметры:
//	НастройкиМоделей - Структура - Настройки моделей.
//
// Возвращаемое значение:
//	Структура - результат проверки доступности.
//
Функция ПроверитьДоступность(НастройкиМоделей = Неопределено) Экспорт
	
	Если НастройкиМоделей = Неопределено Тогда
		НастройкиМоделей = ПолучитьНастройкиМоделей();
	КонецЕсли;
	
	ПараметрыЗадач = CRM_МоделиМашинногоОбученияКлиентСервер.ПараметрыЗадач();
	Результат = ВыполнитьЗапрос(ПараметрыЗадач.Версия.Адрес, "", НастройкиМоделей, Истина);
	Если Не Результат.Ошибка Тогда
		Если Не CRM_МоделиМашинногоОбученияКлиентСервер.ВерсияПоддерживается(Результат.Значение) Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = CRM_МоделиМашинногоОбученияКлиентСервер.ТекстОшибкиВерсии(Результат.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет состояние.
//
// Параметры:
//	ИмяЗадачи		 - Строка - Имя задачи.
//	НастройкиМоделей - Структура - Настройки моделей.
//
// Возвращаемое значение:
//	Структура - результат проверки доступности.
//
Функция ПроверитьСостояние(ИмяЗадачи, НастройкиМоделей = Неопределено) Экспорт
	
	Если НастройкиМоделей = Неопределено Тогда
		НастройкиМоделей = ПолучитьНастройкиМоделей();
	КонецЕсли;
	
	ПараметрыЗадач = CRM_МоделиМашинногоОбученияКлиентСервер.ПараметрыЗадач();
	Результат = ВыполнитьЗапрос(ПараметрыЗадач.Состояние.Адрес, "", НастройкиМоделей);
	Если Не Результат.Ошибка Тогда
		
		ПолученноеСостояние = Результат.Значение;
		Если Не CRM_МоделиМашинногоОбученияКлиентСервер.ВерсияПоддерживается(ПолученноеСостояние.version) Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = CRM_МоделиМашинногоОбученияКлиентСервер.ТекстОшибкиВерсии(Результат.Значение);
		КонецЕсли;
		
		ИдентификаторЗадачи = ПараметрыЗадач[ИмяЗадачи].Идентификатор;
		СостояниеЗадачи = ПолученноеСостояние[ИдентификаторЗадачи];
		Если СостояниеЗадачи.status <> 0 Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = НСтр("ru = 'Задача остановлена.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает оценку
//
// Параметры:
//	ИмяЗадачи	- Строка - Имя задачи.
//	ТекстПоиска - Строка - Текст поиска.
//	Результат	- Структура - результат поиска.
//	Оценка		- Структура - оценка.
//
Процедура ЗаписатьОценку(ИмяЗадачи, ТекстПоиска, Результат, Оценка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Возвращает настройки моделей.
//
// Возвращаемое значение:
//	Структура - настройки моделей.
//
Функция ПолучитьНастройкиМоделей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиМоделей.Настройка КАК Настройка,
	|	НастройкиМоделей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_НастройкиМоделейМашинногоОбучения КАК НастройкиМоделей");
	
	Настройки = CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделей();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Настройки.Свойство(Выборка.Настройка) Тогда
			Настройки.Вставить(Выборка.Настройка, Выборка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

// Сохраняет настройки моделей.
//
// Параметры:
//	НастройкиМоделей - Структура - настройки моделей.
//
Процедура СохранитьНастройкиМоделей(НастройкиМоделей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.CRM_НастройкиМоделейМашинногоОбучения.СоздатьНаборЗаписей();
	Для Каждого КлючИЗначение Из НастройкиМоделей Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Настройка = КлючИЗначение.Ключ;
		Запись.Значение = КлючИЗначение.Значение;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Возвращает настройку моделей.
//
// Параметры:
//	Настройка - Строка - название настройки моделей.
//
// Возвращаемое значение:
//	Булево, Строка, Дата, Число - значение настройки моделей.
//
Функция ПолучитьНастройкуМоделей(Настройка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиМоделейМашинногоОбучения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Настройка = Настройка;
	
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Значение;
	
КонецФункции

#КонецОбласти

#Область СведенияМоделей

// Возвращает сведения моделей.
//
// Возвращаемое значение:
//	Структура - сведения моделей.
//
Функция ПолучитьСведенияМоделей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СведенияМоделей.Сведение КАК Сведение,
	|	СведенияМоделей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_СведенияМоделейМашинногоОбучения КАК СведенияМоделей");
	
	Сведения = CRM_МоделиМашинногоОбученияКлиентСервер.СведенияМоделей();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Сведения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Сведения.Свойство(Выборка.Сведение) Тогда
			Сведения.Вставить(Выборка.Сведение, Выборка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сведения;
	
КонецФункции

// Возвращает период выгрузки.
//
// Параметры:
//	ИмяЗадачи - Строка - Имя задачи.
//
// Возвращаемое значение:
//	Структура - период выгрузки.
//
Функция ПолучитьПериодВыгрузки(ИмяЗадачи) Экспорт
	
	СведенияМоделей = ПолучитьСведенияМоделей();
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаНачала = СведенияМоделей[ИмяЗадачи + "ДатаНачала"];
	ДатаОкончания = СведенияМоделей[ИмяЗадачи + "ДатаОкончания"];
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(НачалоГода(ДатаСеанса) - 1);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецГода(ДатаСеанса);
	КонецЕсли;
	
	ПериодВыгрузки = Новый Структура;
	ПериодВыгрузки.Вставить("ДатаНачала", ДатаНачала);
	ПериодВыгрузки.Вставить("ДатаОкончания", ДатаОкончания);
	
	Возврат ПериодВыгрузки;
	
КонецФункции

// Обновляет сведения моделей.
//
// Параметры:
//	ДанныеСведений - Структура - Данные сведений.
//
Процедура ОбновитьСведенияМоделей(ДанныеСведений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияМоделей = CRM_МоделиМашинногоОбученияКлиентСервер.СведенияМоделей();
	
	Для Каждого КлючИЗначение Из ДанныеСведений Цикл
		
		Если Не СведенияМоделей.Свойство(КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.CRM_СведенияМоделейМашинногоОбучения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сведение = КлючИЗначение.Ключ;
		МенеджерЗаписи.Значение = КлючИЗначение.Значение;
		
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Возвращает данные поиска решений.
//
// Возвращаемое значение:
//	Строка - адрес в хранилище значений для данных поиска решений.
//
Функция ДанныеПоискаРешений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВопросыБазыЗнаний.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ВопросыБазыЗнаний.ТекстВопроса КАК СТРОКА(1000)) КАК ТекстВопроса
	|ИЗ
	|	Справочник.CRM_Решения.Ответы КАК ОтветыБазыЗнаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Решения КАК ВопросыБазыЗнаний
	|		ПО ОтветыБазыЗнаний.Ссылка = ВопросыБазыЗнаний.Ссылка
	|ГДЕ
	|	ВопросыБазыЗнаний.СтатусРешения = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыРешений.Утверждено)
	|	И ОтветыБазыЗнаний.СтатусОтвета = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыРешений.Утверждено)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Label", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДанных.Колонки.Добавить("Text", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстВопроса = CRM_МоделиМашинногоОбученияКлиентСервер.ОбработатьТекст(Выборка.ТекстВопроса);
			Если ЗначениеЗаполнено(ТекстВопроса) Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.Label = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				НоваяСтрока.Text = ТекстВопроса;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяФайла = СохранитьCSV(ТаблицаДанных);
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

// Возвращает данные классификации обращений.
//
// Параметры:
//	ДатаНачала - Дата - Дата начала.
//	ДатаОкончания - Дата - Дата окончания.
//
// Возвращаемое значение:
//	Строка - адрес в хранилище значений для данных классификации обращений.
//
Функция ДанныеКлассификацииОбращений(ДатаНачала, ДатаОкончания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Интерес.ТипОбращения КАК ТипОбращения,
	|	ВЫРАЗИТЬ(Обращение.Текст КАК СТРОКА(1000)) КАК ТекстОбращения
	|ПОМЕСТИТЬ Обращения
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК Обращение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК Интерес
	|			ПО ЖурналДокументов.CRM_Интерес = Интерес.Ссылка
	|		ПО Обращение.Ссылка = ЖурналДокументов.Объект
	|ГДЕ
	|	Обращение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обращения.ТекстОбращения КАК ТекстОбращения,
	|	Метки.Наименование КАК Метка
	|ИЗ
	|	Обращения КАК Обращения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_МеткиКлассификации КАК Метки
	|		ПО (Метки.ТипОбращения = Обращения.ТипОбращения)
	|			И (Метки.Основная)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("Text", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДанных.Колонки.Добавить("Label", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОбращения = CRM_МоделиМашинногоОбученияКлиентСервер.ОбработатьТекст(Выборка.ТекстОбращения);
			Если ЗначениеЗаполнено(ТекстОбращения) Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.Label = Выборка.Метка;
				НоваяСтрока.Text = ТекстОбращения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяФайла = СохранитьCSV(ТаблицаДанных);
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

// Возвращает данные информирования о конверсии.
//
// Параметры:
//	ДатаНачала - Дата - Дата начала.
//	ДатаОкончания - Дата - Дата окончания.
//
// Возвращаемое значение:
//	Строка - адрес в хранилище значений для данных информирования о конверсии.
//
Функция ДанныеИнформированияОКонверсии(ДатаНачала, ДатаОкончания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Любой);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Портрет_Регион_Кат", ОписаниеТипаСтрока);
	ТаблицаДанных.Колонки.Добавить("Портрет_Отрасль_Кат", ОписаниеТипаСтрока);
	ТаблицаДанных.Колонки.Добавить("Портрет_КолвоСотрудников_Кат", ОписаниеТипаСтрока);
	ТаблицаДанных.Колонки.Добавить("Портрет_СегментРынка_Кат", ОписаниеТипаСтрока);
	
	ТаблицаДанных.Колонки.Добавить("Портрет_ПотенциалПродаж", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Портрет_КолвоТелефонов", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Портрет_КолвоЕмейлов", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Портрет_КолвоКонтактов", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Портрет_ПроцентЗаполненностиКИ", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Портрет_ПроцентЗаполненностиПортрета", ОписаниеТипаЧисло);
	
	ТаблицаДанных.Колонки.Добавить("Интерес_ТипУслуги_Кат", ОписаниеТипаСтрока);
	
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоПройденныхЭтапов", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоЗвонковИсходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоЗвонковВходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоПисемИсходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоПисемВходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоПросроченныхВходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоПросроченныхИсходящих", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоЗаказов", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_КолвоКП", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_ДлительностьСделкиДней", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_МаксимальныйПерерывКасаний", ОписаниеТипаЧисло);
	ТаблицаДанных.Колонки.Добавить("Интерес_СуммаСделки", ОписаниеТипаЧисло);
	
	ТаблицаДанных.Колонки.Добавить("Интерес_ИсточникСделки_Кат", ОписаниеТипаСтрока);
	
	ТаблицаДанных.Колонки.Добавить("Интерес_УспешностьСделки", ОписаниеТипаЧисло);
	
	ТаблицаДанных.Колонки.Добавить("ИнтересСсылка_Служ", Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес"));
	
	ТаблицаДанных.Колонки.Добавить("Интерес_КаналИсточника_Кат", ОписаниеТипаСтрока);
	
	ТаблицаДанных.Колонки.Добавить("ПартнерСсылка_Служ", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	
	// "Простые" данные по Интересу и партнеру
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыборкаИнтересов
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.ПометкаУдаления
	|	И НЕ CRM_Интерес.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	И CRM_Интерес.СостояниеИнтереса.Завершено
	|	И CRM_Интерес.Дата >= &ДатаНачала
	|	И CRM_Интерес.Дата <= &ДатаОкончания
	|	И НЕ CRM_Интерес.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВыборкаИнтересов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыборкаИнтересовИтоговая
	|ИЗ
	|	ВТ_ВыборкаИнтересов КАК ВТ_ВыборкаИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|		ПО ВТ_ВыборкаИнтересов.Ссылка = CRM_ЖурналДокументов.CRM_Интерес
	|ГДЕ
	|	CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВыборкаИнтересов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК ИнтересСсылка_Служ,
	|	CRM_Интерес.Партнер КАК ПартнерСсылка_Служ,
	|	CRM_Интерес.ТипУслуги КАК Интерес_ТипУслуги_Кат,
	|	CRM_Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
	|	CRM_Интерес.ОжидаемаяВыручка КАК Интерес_СуммаСделки,
	|	CRM_Интерес.Партнер.CRM_ОсновнаяОтрасль КАК Портрет_Отрасль_Кат,
	|	CRM_Интерес.Партнер.CRM_Потенциал КАК Портрет_ПотенциалПродаж,
	|	0 КАК Портрет_ПроцентЗаполненностиКИ,
	|	0 КАК Портрет_ПроцентЗаполненностиПортрета,
	|	CRM_Интерес.Партнер.CRM_СегментРынка КАК Портрет_СегментРынка_Кат,
	|	CRM_Интерес.Партнер.БизнесРегион КАК Портрет_Регион_Кат,
	|	CRM_Интерес.Партнер.CRM_ЧисленностьСотрудников КАК Портрет_КолвоСотрудников_Кат,
	|	РАЗНОСТЬДАТ(CRM_Интерес.Дата, CRM_Интерес.ДатаЗакрытия, ДЕНЬ) КАК Интерес_ДлительностьСделкиДней,
	|	ВЫБОР
	|		КОГДА CRM_Интерес.СостояниеИнтереса.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Интерес_УспешностьСделки,
	|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК Интерес_КаналИсточника_Кат,
	|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК Интерес_ИсточникСделки_Кат
	|ИЗ
	|	ВТ_ВыборкаИнтересовИтоговая КАК CRM_ИнтересВыборка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
	|		ПО CRM_ИнтересВыборка.Ссылка = CRM_Интерес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних КАК ИсточникиПервичногоИнтересаСрезПоследних
	|		ПО (CRM_Интерес.Ссылка = ИсточникиПервичногоИнтересаСрезПоследних.Сделка)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ТаблицаИнтересов = Запрос.Выполнить().Выгрузить();
	
	// Выборка уникальных клиентов выбранных интересов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИнтересов.ПартнерСсылка_Служ КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПартнерыИнтересов
	|ИЗ
	|	&ТаблицаИнтересов КАК ТаблицаИнтересов";
	
	Запрос.УстановитьПараметр("ТаблицаИнтересов", ТаблицаИнтересов);
	Запрос.Выполнить();
	
	// Выборка данных по КИ и Контактам
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Тип КАК ТипКИ
	|ПОМЕСТИТЬ ПартнерыИКЛКонтактнаяИнформация
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	(ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|	И ПартнерыКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ПартнерыИнтересов.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПартнерыИнтересов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	(КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец В
	|			(ВЫБРАТЬ
	|				ВТ_ПартнерыИнтересов.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ПартнерыИнтересов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформацияТелефоны.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ПартнерыКонтактнаяИнформацияТелефоны.ТипКИ) КАК КоличествоТелефонов
	|ПОМЕСТИТЬ ПартнерыКонтактнаяИнформацияТелефоны
	|ИЗ
	|	ПартнерыИКЛКонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияТелефоны
	|ГДЕ
	|	ПартнерыКонтактнаяИнформацияТелефоны.ТипКИ = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартнерыКонтактнаяИнформацияТелефоны.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформацияЕмейлы.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(ПартнерыКонтактнаяИнформацияЕмейлы.ТипКИ) КАК КоличествоЕмейлов
	|ПОМЕСТИТЬ ПартнерыКонтактнаяИнформацияЕмейлы
	|ИЗ
	|	ПартнерыИКЛКонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияЕмейлы
	|ГДЕ
	|	ПартнерыКонтактнаяИнформацияЕмейлы.ТипКИ = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартнерыКонтактнаяИнформацияЕмейлы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(КонтактныеЛицаПартнеров.Ссылка) КАК КоличествоКонтактов
	|ПОМЕСТИТЬ ПартнерыКонтакты
	|ИЗ
	|	ВТ_ПартнерыИнтересов КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформацияТелефоны.КоличествоТелефонов КАК Портрет_КолвоТелефонов,
	|	ПартнерыКонтактнаяИнформацияЕмейлы.КоличествоЕмейлов КАК Портрет_КолвоЕмейлов,
	|	ПартнерыКонтакты.КоличествоКонтактов КАК Портрет_КолвоКонтактов
	|ИЗ
	|	ВТ_ПартнерыИнтересов КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартнерыКонтактнаяИнформацияТелефоны КАК ПартнерыКонтактнаяИнформацияТелефоны
	|		ПО Партнеры.Ссылка = ПартнерыКонтактнаяИнформацияТелефоны.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартнерыКонтактнаяИнформацияЕмейлы КАК ПартнерыКонтактнаяИнформацияЕмейлы
	|		ПО Партнеры.Ссылка = ПартнерыКонтактнаяИнформацияЕмейлы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПартнерыКонтакты КАК ПартнерыКонтакты
	|		ПО Партнеры.Ссылка = ПартнерыКонтакты.Ссылка";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	ТаблицаКИПартнеровИнтересов = Запрос.Выполнить().Выгрузить();
	
	// Запишем данные в результирующую таблицу
	Для каждого Строка Из ТаблицаИнтересов Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Данные по КИ
	ОтборКлиент = Новый Структура("ПартнерСсылка_Служ");
	Для каждого Строка Из ТаблицаКИПартнеровИнтересов Цикл
		ОтборКлиент.ПартнерСсылка_Служ = Строка.Партнер;
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(ОтборКлиент);
		Для Ин = 0 По НайденныеСтроки.ВГраница() Цикл
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[Ин], Строка);
		КонецЦикла; 
	КонецЦикла;
	
	// Выборка всех связанных документов выбранных интересов
	МассивИнтересов = ТаблицаИнтересов.ВыгрузитьКолонку("ИнтересСсылка_Служ");
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// т.к. можно переписать при помощи оператора В (специально переписывать не нужно, можно оставить, как есть)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_ЖурналДокументов.Объект КАК Объект,
	|	CRM_ЖурналДокументов.Дата КАК Дата,
	|	CRM_ЖурналДокументов.ВходящееИсходящее КАК ВходящееИсходящее,
	|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
	|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВТ_ДокументыИнтересов
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.CRM_Интерес В(&МассивИнтересов)
	|	И (CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.КоммерческоеПредложениеКлиенту";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю)";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЗаказКлиента)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	И НЕ CRM_ЖурналДокументов.Объект.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗаказов,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗаказыИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ";
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЗаказКлиента";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта) КАК КоличествоКП
	|ПОМЕСТИТЬ КПИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	|		ПО ВТ_ДокументыИнтересов.Объект.Ссылка = КоммерческоеПредложениеКлиентуТовары.Ссылка
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.КоммерческоеПредложениеКлиенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоПисемИсходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПисьмаИсходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоПисемВходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПисьмаВходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|	И ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗвонковВходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗвонкиВходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|	И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗвонковИсходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗвонкиИсходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|	И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.Объект.Ссылка КАК ВзаимодействиеСcылка,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес,
	|	ВТ_ДокументыИнтересов.ВходящееИсходящее КАК ВходящееИсходящее,
	|	ВТ_ДокументыИнтересов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ВТ_ДокументыИнтересов.Объект.ПлановаяДата КАК ПлановаяДата,
	|	ВТ_ДокументыИнтересов.Объект.ДатаЗавершенияВзаимодействия КАК ДатаЗавершенияВзаимодействия
	|ПОМЕСТИТЬ ВсеВзаимодействияИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВсеВзаимодействияИнтересов.ВзаимодействиеСcылка) КАК КоличествоВзаимодействийПросроченныхВходящих,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВзаимодействияВходящиеПросроченныеИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	ВсеВзаимодействияИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|	И РАЗНОСТЬДАТ(ВсеВзаимодействияИнтересов.ПлановаяДата, ВсеВзаимодействияИнтересов.ДатаЗавершенияВзаимодействия, ДЕНЬ) > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВсеВзаимодействияИнтересов.ВзаимодействиеСcылка) КАК КоличествоВзаимодействийПросроченныхИсходящих,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВзаимодействияИсходящиеПросроченныеИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	ВсеВзаимодействияИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|	И РАЗНОСТЬДАТ(ВсеВзаимодействияИнтересов.ПлановаяДата, ВсеВзаимодействияИнтересов.ДатаЗавершенияВзаимодействия, ДЕНЬ) > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеВзаимодействияИнтересов.СостояниеИнтереса) КАК КоличествоПройденныхЭтапов,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПройденныеЭтапыИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	НЕ ВсеВзаимодействияИнтересов.СостояниеИнтереса.Завершено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыборкаИнтересов
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Ссылка В(&МассивИнтересов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИнтересов.Ссылка КАК Ссылка,
	|	ЗаказыИнтересов.КоличествоЗаказов КАК Интерес_КолвоЗаказов,
	|	КПИнтересов.КоличествоКП КАК Интерес_КолвоКП,
	|	ПисьмаИсходящиеИнтересов.КоличествоПисемИсходящих КАК Интерес_КолвоПисемИсходящих,
	|	ПисьмаВходящиеИнтересов.КоличествоПисемВходящих КАК Интерес_КолвоПисемВходящих,
	|	ЗвонкиВходящиеИнтересов.КоличествоЗвонковВходящих КАК Интерес_КолвоЗвонковВходящих,
	|	ЗвонкиИсходящиеИнтересов.КоличествоЗвонковИсходящих КАК Интерес_КолвоЗвонковИсходящих,
	|	ВзаимодействияВходящиеПросроченныеИнтересов.КоличествоВзаимодействийПросроченныхВходящих КАК Интерес_КолвоПросроченныхВходящих,
	|	ВзаимодействияИсходящиеПросроченныеИнтересов.КоличествоВзаимодействийПросроченныхИсходящих КАК Интерес_КолвоПросроченныхИсходящих,
	|	ПройденныеЭтапыИнтересов.КоличествоПройденныхЭтапов КАК Интерес_КолвоПройденныхЭтапов
	|ИЗ
	|	ВыборкаИнтересов КАК ВыборкаИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыИнтересов КАК ЗаказыИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗаказыИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ КПИнтересов КАК КПИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = КПИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПисьмаИсходящиеИнтересов КАК ПисьмаИсходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПисьмаИсходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПисьмаВходящиеИнтересов КАК ПисьмаВходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПисьмаВходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗвонкиВходящиеИнтересов КАК ЗвонкиВходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗвонкиВходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗвонкиИсходящиеИнтересов КАК ЗвонкиИсходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗвонкиИсходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимодействияВходящиеПросроченныеИнтересов КАК ВзаимодействияВходящиеПросроченныеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ВзаимодействияВходящиеПросроченныеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимодействияИсходящиеПросроченныеИнтересов КАК ВзаимодействияИсходящиеПросроченныеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ВзаимодействияИсходящиеПросроченныеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПройденныеЭтапыИнтересов КАК ПройденныеЭтапыИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПройденныеЭтапыИнтересов.CRM_Интерес";
	
	Запрос.УстановитьПараметр("МассивИнтересов", МассивИнтересов);
	ТаблицаОбъектовИнтересов = Запрос.Выполнить().Выгрузить();
	
	// Макс. перерыв во взаимодействиях внутри сделки
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// Т.к. можно переписать при помощи оператора В (специально переписывать не нужно, можно оставить, как есть).
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.Дата КАК Дата,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|	И (ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|			ИЛИ ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|				И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МИНИМУМ(Дата)
	|ПО
	|	CRM_Интерес";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ДеревоДат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеИнтересовСДатами = Новый Соответствие;
	Для каждого СтрокаДерева Из ДеревоДат.Строки Цикл
		МассивДат = СтрокаДерева.Строки.ВыгрузитьКолонку("Дата");
		МаксДлительность = 0;
		МассивДатВГраница = МассивДат.ВГраница();
		Если МассивДатВГраница > 0 Тогда
			Для Ин = 1 По МассивДатВГраница Цикл
				Длительность = Окр((МассивДат[Ин] - МассивДат[Ин - 1]) / 86400, 0);
				МаксДлительность = ?(Длительность > МаксДлительность, Длительность, МаксДлительность);
			КонецЦикла;
		КонецЕсли;
		СоответствиеИнтересовСДатами.Вставить(СтрокаДерева.CRM_Интерес, МаксДлительность);
	КонецЦикла;
	
	// Данные по документам
	Для каждого СтрокаТЗ Из ТаблицаОбъектовИнтересов Цикл
		НайденнаяСтрока = ТаблицаДанных.Найти(СтрокаТЗ.Ссылка, "ИнтересСсылка_Служ");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТЗ);
		КонецЕсли;
		МаксДлительность = СоответствиеИнтересовСДатами.Получить(СтрокаТЗ.Ссылка);
		Если МаксДлительность <> Неопределено Тогда
			НайденнаяСтрока.Интерес_МаксимальныйПерерывКасаний = МаксДлительность;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ТаблицаДанных.Колонки.Удалить("ИнтересСсылка_Служ");
	ТаблицаДанных.Колонки.Удалить("ПартнерСсылка_Служ");
	
	ИмяФайла = СохранитьCSV(ТаблицаДанных);
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

// Возвращает данные дистрибутива.
//
// Возвращаемое значение:
//	Строка - адрес в хранилище значений для данных дистрибутива.
//
Функция ДанныеДистрибутива() Экспорт
	
	ДанныеМодели = Обработки.CRM_НастройкаМоделейМашинногоОбучения.ПолучитьМакет("ФайлыУстановкиМоделей");
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеМодели, Новый УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

#Область Обновление

// Вызывает начальное заполнение данных.
//
Процедура НачальноеЗаполнениеДанных() Экспорт
	
	ОбновлениеДанныхВерсия_1_2();
	
КонецПроцедуры

// Вызывает обновление данных.
//
// Параметры:
//	Параметры - Структура - структура параметров.
//
Процедура ОбновлениеДанныхВерсия_1_2(Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Перенос настроек.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиМоделей.Настройка КАК Настройка,
	|	НастройкиМоделей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.CRM_НастройкиМоделейМашинногоОбучения КАК НастройкиМоделей");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СведенияМоделей = CRM_МоделиМашинногоОбученияКлиентСервер.СведенияМоделей();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Настройка = Выборка.Настройка;
			Если СведенияМоделей.Свойство(Настройка) Тогда
				
				МенеджерЗаписи = РегистрыСведений.CRM_СведенияМоделейМашинногоОбучения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Сведение = Настройка;
				МенеджерЗаписи.Значение = Выборка.Значение;
				МенеджерЗаписи.Записать(Истина);
				
				МенеджерЗаписи = РегистрыСведений.CRM_НастройкиМоделейМашинногоОбучения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Настройка = Настройка;
				МенеджерЗаписи.Удалить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Настройка служебных меток.
	ИмяМетки = "deal";
	МеткаСсылка = Справочники.CRM_МеткиКлассификации[ИмяМетки];
	МеткаОбъект = МеткаСсылка.ПолучитьОбъект();
	МеткаОбъект.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес;
	МеткаОбъект.Основная = Истина;
	МеткаОбъект.Записать();
	
	ИмяМетки = "request";
	МеткаСсылка = Справочники.CRM_МеткиКлассификации[ИмяМетки];
	МеткаОбъект = МеткаСсылка.ПолучитьОбъект();
	МеткаОбъект.ТипОбращения = Справочники.CRM_ТипыОбращений.Обращение;
	МеткаОбъект.Основная = Истина;
	МеткаОбъект.Записать();
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеМеткиКлассификации(ТекстМетки)
	
	ДанныеМетки = Новый Структура("Метка,ТипОбращения");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МеткиКлассификации.Ссылка КАК Метка,
	|	МеткиКлассификации.ТипОбращения КАК ТипОбращения
	|ИЗ
	|	Справочник.CRM_МеткиКлассификации КАК МеткиКлассификации
	|ГДЕ
	|	МеткиКлассификации.Наименование = &ТекстМетки");
	
	Запрос.Параметры.Вставить("ТекстМетки", ТекстМетки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеМетки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеМетки, Выборка);
	
	Возврат ДанныеМетки;
	
КонецФункции

Функция ПараметрыЗапросаВероятностиКонверсии(Интерес, Партнер)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	////////////////////////////////////////////////////////////
	Портрет_КолвоТелефонов	= 0;
	Портрет_КолвоЕмейлов	= 0;
	Портрет_КолвоКонтактов	= 0;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПартнерыКонтактнаяИнформация.Тип) КАК КолвоТелефонов
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип)
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец = &Партнер
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Портрет_КолвоТелефонов = Портрет_КолвоТелефонов + ВыборкаЗапроса.КолвоТелефонов;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ПартнерыКонтактнаяИнформация.Тип) КАК КолвоЕмейлов
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип)
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец = &Партнер
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Портрет_КолвоЕмейлов = Портрет_КолвоЕмейлов + ВыборкаЗапроса.КолвоЕмейлов;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтактныеЛицаПартнеров.Ссылка) КАК КолвоКонтактов
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Портрет_КолвоКонтактов = ВыборкаЗапроса.КолвоКонтактов;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	Интерес_КаналИсточника_Кат = "";
	Интерес_ИсточникСделки_Кат = "";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК Интерес_КаналИсточника_Кат,
	|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК Интерес_ИсточникСделки_Кат
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(, Сделка = &Интерес) КАК ИсточникиПервичногоИнтересаСрезПоследних";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Интерес_ИсточникСделки_Кат = Строка(ВыборкаЗапроса.Интерес_ИсточникСделки_Кат);
		Интерес_КаналИсточника_Кат = Строка(ВыборкаЗапроса.Интерес_КаналИсточника_Кат);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	Интерес_КолвоПройденныхЭтапов		= 0;
	Интерес_КолвоЗвонковИсходящих		= 0;
	Интерес_КолвоЗвонковВходящих		= 0;
	Интерес_КолвоПисемИсходящих			= 0;
	Интерес_КолвоПисемВходящих			= 0;
	Интерес_КолвоПросроченныхВходящих	= 0;
	Интерес_КолвоПросроченныхИсходящих	= 0;
	Интерес_КолвоЗаказов				= 0;
	Интерес_КолвоКП						= 0;
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// т.к. можно переписать при помощи оператора В (специально переписывать не нужно, можно оставить, как есть)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_ЖурналДокументов.Объект КАК Объект,
	|	CRM_ЖурналДокументов.Дата КАК Дата,
	|	CRM_ЖурналДокументов.ВходящееИсходящее КАК ВходящееИсходящее,
	|	CRM_ЖурналДокументов.ГлавнаяЗапись КАК ГлавнаяЗапись,
	|	CRM_ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	CRM_ЖурналДокументов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВТ_ДокументыИнтересов
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	|	И (CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.КоммерческоеПредложениеКлиенту";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю)";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|			ИЛИ CRM_ЖурналДокументов.Объект ССЫЛКА Документ.ЗаказКлиента)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	И НЕ CRM_ЖурналДокументов.Объект.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗаказов,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗаказыИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ";
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЗаказКлиента";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоммерческоеПредложениеКлиентуТовары.CRM_ИДВарианта) КАК КоличествоКП
	|ПОМЕСТИТЬ КПИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
	|		ПО ВТ_ДокументыИнтересов.Объект.Ссылка = КоммерческоеПредложениеКлиентуТовары.Ссылка
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.КоммерческоеПредложениеКлиенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоПисемИсходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПисьмаИсходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоПисемВходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПисьмаВходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|	И ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗвонковВходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗвонкиВходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|	И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ_ДокументыИнтересов.Объект.Ссылка) КАК КоличествоЗвонковИсходящих,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ЗвонкиИсходящиеИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|	И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.Объект.Ссылка КАК ВзаимодействиеСcылка,
	|	ВТ_ДокументыИнтересов.CRM_Интерес КАК CRM_Интерес,
	|	ВТ_ДокументыИнтересов.ВходящееИсходящее КАК ВходящееИсходящее,
	|	ВТ_ДокументыИнтересов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ВТ_ДокументыИнтересов.Объект.ПлановаяДата КАК ПлановаяДата,
	|	ВТ_ДокументыИнтересов.Объект.ДатаЗавершенияВзаимодействия КАК ДатаЗавершенияВзаимодействия
	|ПОМЕСТИТЬ ВсеВзаимодействияИнтересов
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.CRM_Взаимодействие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВсеВзаимодействияИнтересов.ВзаимодействиеСcылка) КАК КоличествоВзаимодействийПросроченныхВходящих,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВзаимодействияВходящиеПросроченныеИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	ВсеВзаимодействияИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|	И РАЗНОСТЬДАТ(ВсеВзаимодействияИнтересов.ПлановаяДата, ВсеВзаимодействияИнтересов.ДатаЗавершенияВзаимодействия, ДЕНЬ) > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВсеВзаимодействияИнтересов.ВзаимодействиеСcылка) КАК КоличествоВзаимодействийПросроченныхИсходящих,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ВзаимодействияИсходящиеПросроченныеИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	ВсеВзаимодействияИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|	И РАЗНОСТЬДАТ(ВсеВзаимодействияИнтересов.ПлановаяДата, ВсеВзаимодействияИнтересов.ДатаЗавершенияВзаимодействия, ДЕНЬ) > 1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВсеВзаимодействияИнтересов.СостояниеИнтереса) КАК КоличествоПройденныхЭтапов,
	|	ВсеВзаимодействияИнтересов.CRM_Интерес КАК CRM_Интерес
	|ПОМЕСТИТЬ ПройденныеЭтапыИнтересов
	|ИЗ
	|	ВсеВзаимодействияИнтересов КАК ВсеВзаимодействияИнтересов
	|ГДЕ
	|	НЕ ВсеВзаимодействияИнтересов.СостояниеИнтереса.Завершено
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВзаимодействияИнтересов.CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыборкаИнтересов
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Ссылка = &Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыборкаИнтересов.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЗаказыИнтересов.КоличествоЗаказов, 0) КАК Интерес_КолвоЗаказов,
	|	ЕСТЬNULL(КПИнтересов.КоличествоКП, 0) КАК Интерес_КолвоКП,
	|	ЕСТЬNULL(ПисьмаИсходящиеИнтересов.КоличествоПисемИсходящих, 0) КАК Интерес_КолвоПисемИсходящих,
	|	ЕСТЬNULL(ПисьмаВходящиеИнтересов.КоличествоПисемВходящих, 0) КАК Интерес_КолвоПисемВходящих,
	|	ЕСТЬNULL(ЗвонкиВходящиеИнтересов.КоличествоЗвонковВходящих, 0) КАК Интерес_КолвоЗвонковВходящих,
	|	ЕСТЬNULL(ЗвонкиИсходящиеИнтересов.КоличествоЗвонковИсходящих, 0) КАК Интерес_КолвоЗвонковИсходящих,
	|	ЕСТЬNULL(ВзаимодействияВходящиеПросроченныеИнтересов.КоличествоВзаимодействийПросроченныхВходящих, 0) КАК Интерес_КолвоПросроченныхВходящих,
	|	ЕСТЬNULL(ВзаимодействияИсходящиеПросроченныеИнтересов.КоличествоВзаимодействийПросроченныхИсходящих, 0) КАК Интерес_КолвоПросроченныхИсходящих,
	|	ЕСТЬNULL(ПройденныеЭтапыИнтересов.КоличествоПройденныхЭтапов, 0) КАК Интерес_КолвоПройденныхЭтапов
	|ИЗ
	|	ВыборкаИнтересов КАК ВыборкаИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыИнтересов КАК ЗаказыИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗаказыИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ КПИнтересов КАК КПИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = КПИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПисьмаИсходящиеИнтересов КАК ПисьмаИсходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПисьмаИсходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПисьмаВходящиеИнтересов КАК ПисьмаВходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПисьмаВходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗвонкиВходящиеИнтересов КАК ЗвонкиВходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗвонкиВходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗвонкиИсходящиеИнтересов КАК ЗвонкиИсходящиеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ЗвонкиИсходящиеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимодействияВходящиеПросроченныеИнтересов КАК ВзаимодействияВходящиеПросроченныеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ВзаимодействияВходящиеПросроченныеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимодействияИсходящиеПросроченныеИнтересов КАК ВзаимодействияИсходящиеПросроченныеИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ВзаимодействияИсходящиеПросроченныеИнтересов.CRM_Интерес
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПройденныеЭтапыИнтересов КАК ПройденныеЭтапыИнтересов
	|		ПО ВыборкаИнтересов.Ссылка = ПройденныеЭтапыИнтересов.CRM_Интерес";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
	
		Интерес_КолвоПройденныхЭтапов		= РезультатЗапроса.Интерес_КолвоПройденныхЭтапов;
		Интерес_КолвоЗвонковИсходящих		= РезультатЗапроса.Интерес_КолвоЗвонковИсходящих;
		Интерес_КолвоЗвонковВходящих		= РезультатЗапроса.Интерес_КолвоЗвонковВходящих;
		Интерес_КолвоПисемИсходящих			= РезультатЗапроса.Интерес_КолвоПисемИсходящих;
		Интерес_КолвоПисемВходящих			= РезультатЗапроса.Интерес_КолвоПисемВходящих;
		Интерес_КолвоПросроченныхВходящих	= РезультатЗапроса.Интерес_КолвоПросроченныхВходящих;
		Интерес_КолвоПросроченныхИсходящих	= РезультатЗапроса.Интерес_КолвоПросроченныхИсходящих;
		Интерес_КолвоЗаказов				= РезультатЗапроса.Интерес_КолвоЗаказов;
		Интерес_КолвоКП						= РезультатЗапроса.Интерес_КолвоКП;
	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	Интерес_МаксимальныйПерерывКасаний = 0;
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// т.к. можно переписать при помощи оператора В (специально переписывать не нужно, можно оставить, как есть)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ДокументыИнтересов.Дата КАК Дата
	|ИЗ
	|	ВТ_ДокументыИнтересов КАК ВТ_ДокументыИнтересов
	|ГДЕ
	|	ВТ_ДокументыИнтересов.ГлавнаяЗапись
	|	И (ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|			ИЛИ ВТ_ДокументыИнтересов.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|				И ВТ_ДокументыИнтересов.ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ТаблицаДат = Запрос.Выполнить().Выгрузить();
	МассивДат = ТаблицаДат.ВыгрузитьКолонку("Дата");
	МассивДатВГраница = МассивДат.ВГраница();
	Если МассивДатВГраница > 0 Тогда
		Для Ин = 1 По МассивДатВГраница Цикл
			Длительность = Окр((МассивДат[Ин] - МассивДат[Ин - 1]) / 86400, 0);
			Интерес_МаксимальныйПерерывКасаний = ?(Длительность > Интерес_МаксимальныйПерерывКасаний,
				 Длительность,
				 Интерес_МаксимальныйПерерывКасаний);
		КонецЦикла;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////
	Интерес_ДлительностьСделкиДней = (НачалоДня(?(ЗначениеЗаполнено(Интерес.ДатаЗакрытия),
		 Интерес.ДатаЗакрытия,
		 ТекущаяДатаСеанса())) - НачалоДня(Интерес.Дата)) / 86400;
	
	////////////////////////////////////////////////////////////
	МассивПараметров = Новый Массив;
	
	// Заполним массив данными, следующими в порядке обучающей выборки
	МассивПараметров.Добавить(Строка(Партнер.БизнесРегион));				// Портрет_Регион_Кат
	МассивПараметров.Добавить(Строка(Партнер.CRM_ОсновнаяОтрасль));			// Портрет_Отрасль_Кат
	МассивПараметров.Добавить(Строка(Партнер.CRM_ЧисленностьСотрудников));	// Портрет_КолвоСотрудников_Кат
	МассивПараметров.Добавить(Строка(Партнер.CRM_СегментРынка));			// Портрет_СегментРынка_Кат
	МассивПараметров.Добавить(Партнер.CRM_Потенциал);						// Портрет_ПотенциалПродаж
	МассивПараметров.Добавить(Портрет_КолвоТелефонов);						// Портрет_КолвоТелефонов
	МассивПараметров.Добавить(Портрет_КолвоЕмейлов);						// Портрет_КолвоЕмейлов
	МассивПараметров.Добавить(Портрет_КолвоКонтактов);						// Портрет_КолвоКонтактов
	// МассивПараметров.Добавить(Партнер.CRM_ПроцентЗаполненностиКИ);			// Портрет_ПроцентЗаполненностиКИ
	// МассивПараметров.Добавить(Партнер.CRM_ПроцентЗаполненностиПортрет);		// Портрет_ПроцентЗаполненностиПортрета
	МассивПараметров.Добавить(0);			// Портрет_ПроцентЗаполненностиКИ
	МассивПараметров.Добавить(0);		// Портрет_ПроцентЗаполненностиПортрета
	МассивПараметров.Добавить(Строка(Интерес.ТипУслуги));					// Интерес_ТипУслуги_Кат
	МассивПараметров.Добавить(Интерес_КолвоПройденныхЭтапов);				// Интерес_КолвоПройденныхЭтапов
	МассивПараметров.Добавить(Интерес_КолвоЗвонковИсходящих);				// Интерес_КолвоЗвонковИсходящих
	МассивПараметров.Добавить(Интерес_КолвоЗвонковВходящих);				// Интерес_КолвоЗвонковВходящих
	МассивПараметров.Добавить(Интерес_КолвоПисемИсходящих);					// Интерес_КолвоПисемИсходящих
	МассивПараметров.Добавить(Интерес_КолвоПисемВходящих);					// Интерес_КолвоПисемВходящих
	МассивПараметров.Добавить(Интерес_КолвоПросроченныхВходящих);			// Интерес_КолвоПросроченныхВходящих
	МассивПараметров.Добавить(Интерес_КолвоПросроченныхИсходящих);			// Интерес_КолвоПросроченныхИсходящих
	МассивПараметров.Добавить(Интерес_КолвоЗаказов);						// Интерес_КолвоЗаказов
	МассивПараметров.Добавить(Интерес_КолвоКП);								// Интерес_КолвоКП
	МассивПараметров.Добавить(Интерес_ДлительностьСделкиДней);				// Интерес_ДлительностьСделкиДней
	МассивПараметров.Добавить(Интерес_МаксимальныйПерерывКасаний);			// Интерес_МаксимальныйПерерывКасаний
	МассивПараметров.Добавить(Интерес.ОжидаемаяВыручка);					// Интерес_СуммаСделки
	МассивПараметров.Добавить(Интерес_ИсточникСделки_Кат);					// Интерес_ИсточникСделки_Кат
	МассивПараметров.Добавить(-1);											// Интерес_УспешностьСделки (не важно что передать..)
	МассивПараметров.Добавить(Интерес_КаналИсточника_Кат);					// Интерес_КаналИсточника_Кат
	
	Для Ин = 0 По МассивПараметров.ВГраница() Цикл
		Если ТипЗнч(МассивПараметров[Ин]) = Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МассивПараметров[Ин]) Тогда
			МассивПараметров[Ин] = "-";
		КонецЕсли;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Возврат МассивПараметров;

КонецФункции

Функция ВыполнитьЗапрос(АдресРесурса, Данные, НастройкиМоделей = Неопределено, ВернутьСтроку = Ложь)
	
	Если НастройкиМоделей = Неопределено Тогда
		НастройкиМоделей = ПолучитьНастройкиМоделей();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",		Ложь);
	Результат.Вставить("ТекстОшибки",	"");
	Результат.Вставить("Значение",		Неопределено);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-type", "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СериализоватьJSON(Данные),
		КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	HTTPОтвет = Неопределено;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			НастройкиМоделей.Сервер,
			НастройкиМоделей.Порт, , ,
			ПолучениеФайловИзИнтернета.ПолучитьПрокси("http"),
			НастройкиМоделей.ТаймаутСоединения);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			Если ВернутьСтроку Тогда
				Результат.Значение = HTTPОтвет.ПолучитьТелоКакСтроку();
			Иначе
				Результат.Значение = ДесериализоватьJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
			КонецЕсли;
			
		Иначе
			
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = HTTPОтвет.ПолучитьТелоКакСтроку();
			
		КонецЕсли;
		
	Исключение
		
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

Функция СохранитьCSV(Данные)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("csv");
	
	ТекстФайла = Новый ТекстовыйДокумент;
	ТекстФайла.ИспользуемоеИмяФайла = ИмяФайла;
	ТекстФайла.УстановитьТипФайла(КодировкаТекста.UTF8);
	
	РазделительЗначений = ";";
	
	СтрокаЗаголовков = "";
	Для каждого Колонка Из Данные.Колонки Цикл
		СтрокаЗаголовков = СтрокаЗаголовков + ?(СтрокаЗаголовков <> "", РазделительЗначений, "")
			+ Колонка.Имя;
	КонецЦикла;
	ТекстФайла.ДобавитьСтроку(СтрокаЗаголовков);
	
	Для Каждого СтрокаТЗ Из Данные Цикл
		
		Строка = "";
		НачалоСтроки = Истина;
		Для Каждого Колонка Из Данные.Колонки Цикл
			
			Значение = СтрокаТЗ[Колонка.Имя];
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Значение = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=0");
			КонецЕсли;
			Значение = СтрЗаменить(Значение, РазделительЗначений, " ");
			
			Строка = Строка + ?(НачалоСтроки, "", РазделительЗначений) + Значение;
			НачалоСтроки = Ложь;
			
		КонецЦикла;
		Строка = СтрЗаменить(Строка, ТекстФайла.РазделительСтрок, " ");
		
		ТекстФайла.ДобавитьСтроку(Строка);
		
	КонецЦикла;
	
	ТекстФайла.Записать(ИмяФайла, КодировкаТекста.UTF8);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция СериализоватьJSON(Данные)
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		ДанныеМассив = Данные;
	Иначе
		ДанныеМассив = Новый Массив;
		ДанныеМассив.Добавить(Данные);
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеМассив);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция ДесериализоватьJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураРезультатаЗадачи()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Метка",			"");
	Результат.Вставить("Идентификатор",	"");
	Результат.Вставить("Ссылка",		Неопределено);
	Результат.Вставить("Уверенность",	0);
	Результат.Вставить("ЭтоСовет",		Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
