
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции СофтФон
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Обработчик оповещения формы.
//
// Параметры:
//  ЭтаФорма			 	- ФормаКлиентскогоПриложения	 - форма.
//  ИмяСобытия			 	- Строка			 - описание события.
//  Параметр			 	- Произвольный		 - параметры.
//  Источник 			 	- Произвольный		 - источник оповещения.
//  ИспользуетсяОблачнаяАТС - Булево			 - признак использования облачной АТС.
//
Процедура ОбработкаОповещенияПанелиЗвонка(ЭтаФорма, ИмяСобытия, Параметр, Источник, ИспользуетсяОблачнаяАТС) Экспорт
	
	Если ИмяСобытия = "ОбновленВнутреннийНомерПользователя" Тогда
		ЭтаФорма.ОбновитьЛиниюПользователя();
		
	Иначе	
	    Если ИспользуетсяОблачнаяАТС Тогда
			Если ИмяСобытия = "сфпНовыйВходящийЗвонок" Тогда
				ЭтаФорма.ИдентификаторЗвонка = Параметр.ИдентификаторЗвонка;
				ЭтаФорма.ТекущийЗвонокНомерАбонента = Параметр.НомерТелефона;
				ЭтаФорма.ТекущийЗвонокКонтакт = Параметр.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "" + Параметр.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
				ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
				ЭтаФорма.ТекущийЗвонокВходящий = Истина;
				
				ДанныеКонтакта = сфпСофтФонПроСервер.ПолучитьДанныеПредставленияКонтакта(Параметр.АбонентКонтакт,
					 ЭтаФорма.УникальныйИдентификатор);
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ДанныеКонтакта.ВладелецКонтакта;
				
				Если ЗначениеЗаполнено(ДанныеКонтакта.Аватар) Тогда
					ЭтаФорма.ТекущийЗвонокАватарКонтакта = ДанныеКонтакта.Аватар;
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Истина;

				Иначе	
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
				КонецЕсли;	
				
				ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Истина;
				ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = Ложь;
				ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
				Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
					ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Истина;
				КонецЕсли;
				
				УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);
				
				ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");

			ИначеЕсли ИмяСобытия = "сфпНовыйИсходящийЗвонок" Тогда
				ЭтаФорма.ИдентификаторЗвонка = Параметр.ИдентификаторЗвонка;
				ЭтаФорма.ТекущийЗвонокНомерАбонента = Параметр.НомерТелефона;
				ЭтаФорма.ТекущийЗвонокКонтакт = Параметр.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "" + Параметр.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
				ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
				ЭтаФорма.ТекущийЗвонокВходящий = Ложь;
				
				ДанныеКонтакта = сфпСофтФонПроСервер.ПолучитьДанныеПредставленияКонтакта(Параметр.АбонентКонтакт,
					 ЭтаФорма.УникальныйИдентификатор);
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ДанныеКонтакта.ВладелецКонтакта;
				
				Если ЗначениеЗаполнено(ДанныеКонтакта.Аватар) Тогда
					ЭтаФорма.ТекущийЗвонокАватарКонтакта = ДанныеКонтакта.Аватар;
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Истина;

				Иначе	
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
				КонецЕсли;
				
				ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Ложь;
				ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = Истина;
				ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
				Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
					ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Истина;
				КонецЕсли;
				
				УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);
				
				ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");

			ИначеЕсли ИмяСобытия = "сфпНачалоРазговора" Тогда
				Если "" + Параметр = ЭтаФорма.ИдентификаторЗвонка Тогда
					ЭтаФорма.ТекущийЗвонокНачалоРазговора = ОбщегоНазначенияКлиент.ДатаСеанса();
					ЭтаФорма.ТекущийЗвонокДлительность = '00010101' + (ОбщегоНазначенияКлиент.ДатаСеанса() 
						- ЭтаФорма.ТекущийЗвонокНачалоРазговора);
					
					ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Истина;
					Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
						ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Ложь;
					КонецЕсли;
					
					ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка", 1, Ложь);
				КонецЕсли;

			ИначеЕсли ИмяСобытия = "сфпКонецРазговора" Тогда
				Если "" + Параметр.ИдентификаторЗвонка = ЭтаФорма.ИдентификаторЗвонка
					 ИЛИ ПустаяСтрока(ЭтаФорма.ИдентификаторЗвонка) Тогда
					ЭтаФорма.ИдентификаторЗвонка = "";
					ЭтаФорма.ТекущийЗвонокНомерАбонента = "";
					ЭтаФорма.ТекущийЗвонокКонтакт = "";
					ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "";
					ЭтаФорма.ТекущийЗвонокВладелецКонтакта = "";
					ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
					ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
					
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
					ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Ложь;
					ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
					Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
						ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Истина;
					КонецЕсли;
					
					УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);
					
					ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");
					
					CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ЭтаФорма.Элементы.ТелефонныеЗвонки);
					Телефония_ОбновитьКоличествоЗвонков(ЭтаФорма);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ИмяСобытия = "сфпНовыйВходящийЗвонок" ИЛИ ИмяСобытия = "сфпНовыйИсходящийЗвонок" Тогда
				ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");
			
				ЭтаФорма.ИдентификаторЗвонка = Параметр.ИдентификаторЗвонка;
				ЭтаФорма.ТекущийЗвонокНомерАбонента = Параметр.НомерТелефона;
				ЭтаФорма.ТекущийЗвонокКонтакт = Параметр.АбонентКонтакт;
				
				ЭтаФорма.ТекущийЗвонокВходящий = (ИмяСобытия = "сфпНовыйВходящийЗвонок");
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "" + Параметр.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
				ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
				
				ДанныеКонтакта = сфпСофтФонПроСервер.ПолучитьДанныеПредставленияКонтакта(Параметр.АбонентКонтакт,
					 ЭтаФорма.УникальныйИдентификатор);
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ДанныеКонтакта.ВладелецКонтакта;
				
				Если ЗначениеЗаполнено(ДанныеКонтакта.Аватар) Тогда
					ЭтаФорма.ТекущийЗвонокАватарКонтакта = ДанныеКонтакта.Аватар;
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Истина;

				Иначе	
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
				КонецЕсли;
				
				ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
				ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = (ИмяСобытия = "сфпНовыйВходящийЗвонок");
				ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = (ИмяСобытия = "сфпНовыйИсходящийЗвонок");
				Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
					ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Ложь;
				КонецЕсли;	
				
				УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);

			ИначеЕсли ИмяСобытия = "СофтФон_ОбновитьЗвонок" Тогда
				Если "" + Параметр.hCall = ЭтаФорма.ИдентификаторПереводимогоЗвонка И Параметр.State <> 10 Тогда
					ЭтаФорма.ИдентификаторПереводимогоЗвонка = "";
				КонецЕсли;
				
				ЭтаФорма.ТекущийЗвонокНомерАбонента = Параметр.НомерТелефона;
				ЭтаФорма.ТекущийЗвонокКонтакт = Параметр.Контакт;
				
				Если ЗначениеЗаполнено(Параметр.Контакт) Тогда
					ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "" + Параметр.Контакт;

				Иначе
					Если Параметр.ВходящийЗвонок Тогда
						  ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = Параметр.CallerInfoName;
					Иначе ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = Параметр.CalledInfoName;
					КонецЕсли;
				КонецЕсли;
				
				ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
				ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
				
				ДанныеКонтакта = сфпСофтФонПроСервер.ПолучитьДанныеПредставленияКонтакта(Параметр.Контакт,
					 ЭтаФорма.УникальныйИдентификатор);
				Если ЗначениеЗаполнено(ДанныеКонтакта.ВладелецКонтакта) Тогда
					  ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ДанныеКонтакта.ВладелецКонтакта;
				Иначе ЭтаФорма.ТекущийЗвонокВладелецКонтакта = Параметр.DopInfo;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеКонтакта.Аватар) Тогда
					ЭтаФорма.ТекущийЗвонокАватарКонтакта = ДанныеКонтакта.Аватар;
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Истина;

				Иначе	
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
				КонецЕсли;
				
				ЭтаФорма.ТекущийЗвонокСостояние = Параметр.State;
				ЭтаФорма.ТекущийЗвонокДоступныеДействия = Параметр.AvailableActions;

				Если Параметр.State = 8 ИЛИ Параметр.State = 15 Тогда
					Если ЭтаФорма.ИдентификаторЗвонка = "" + Параметр.hCall Тогда
						ЭтаФорма.ТекущийЗвонокНачалоРазговора = ОбщегоНазначенияКлиент.ДатаСеанса();
						ЭтаФорма.ТекущийЗвонокДлительность = '00010101' + (ОбщегоНазначенияКлиент.ДатаСеанса() 
							- ЭтаФорма.ТекущийЗвонокНачалоРазговора);
						
						ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Истина;
						ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Параметр.ВходящийЗвонок;
						ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = НЕ Параметр.ВходящийЗвонок;
						Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
							ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Ложь;
						КонецЕсли;	

						ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка", 1, Ложь);
					КонецЕсли;
					
				ИначеЕсли Параметр.State = 10 Тогда
						
				Иначе
					ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");
					
					ЭтаФорма.ИдентификаторЗвонка = Параметр.hCall;
					ЭтаФорма.ТекущийЗвонокНомерЛинии = Параметр.LineName;
					
					ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
					ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Параметр.ВходящийЗвонок;
					ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = НЕ Параметр.ВходящийЗвонок;
					Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
						ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Ложь;
					КонецЕсли;	
				КонецЕсли;
				
				УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);

			ИначеЕсли ИмяСобытия = "СофтФон_УдалитьЗвонок" ИЛИ ИмяСобытия = "сфпКонецРазговора" Тогда
				Если ЭтаФорма.ИдентификаторПереводимогоЗвонка <> "" Тогда
					ЭтаФорма.ИдентификаторПереводимогоЗвонка = "";
				КонецЕсли;
				
				Если "" + Параметр = ЭтаФорма.ИдентификаторЗвонка ИЛИ ПустаяСтрока(ЭтаФорма.ИдентификаторЗвонка) Тогда
					ЭтаФорма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка");
					
					ЭтаФорма.ИдентификаторЗвонка = "";
					ЭтаФорма.ТекущийЗвонокНомерЛинии = "";
					ЭтаФорма.ТекущийЗвонокНомерАбонента = "";
					ЭтаФорма.ТекущийЗвонокКонтакт = "";
					ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "";
					ЭтаФорма.ТекущийЗвонокВладелецКонтакта = "";
					ЭтаФорма.ТекущийЗвонокНачалоРазговора = '00010101';
					ЭтаФорма.ТекущийЗвонокДлительность = '00010101';
					ЭтаФорма.ТекущийЗвонокСостояние = "";
					ЭтаФорма.НабранныйНомер = "";
					
					ЭтаФорма.Элементы.ТекущийЗвонокПустойАватар.Видимость = Истина;
					ЭтаФорма.Элементы.ТекущийЗвонокАватарКонтакта.Видимость = Ложь;
					ЭтаФорма.Элементы.ДекорацияВходящий.Видимость = Ложь;
					ЭтаФорма.Элементы.ДекорацияИсходящий.Видимость = Ложь;
					ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Ложь;
					
					Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
						ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Истина;
					КонецЕсли;
					
					Если ЭтаФорма.ТекущийЭлементДанныхКонтакта = "АбонентыТелефонныхКниг" Тогда
						Если ЗначениеЗаполнено(ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта) Тогда
							ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент =
								ЭтаФорма.Элементы[ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта];
						КонецЕсли;
						
						ПанельЗвонка_АбонентыТелефонныхКнигПриАктивизацииЯчейки(ЭтаФорма);

					ИначеЕсли ЭтаФорма.ТекущийЭлементДанныхКонтакта = "ТелефонныеЗвонки" Тогда
						Телефония_ТелефонныеЗвонкиПриАктивизацииСтроки(ЭтаФорма);
						
					Иначе
						УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);
					КонецЕсли;

					CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ЭтаФорма.Элементы.ТелефонныеЗвонки);
					
					Телефония_ОбновитьКоличествоЗвонков(ЭтаФорма);
				КонецЕсли;

			ИначеЕсли ИмяСобытия = "сфпНачалоРазговора" Тогда
				Если "" + Параметр = ЭтаФорма.ИдентификаторЗвонка Тогда
					ЭтаФорма.ТекущийЗвонокНачалоРазговора = ОбщегоНазначенияКлиент.ДатаСеанса();
					ЭтаФорма.ТекущийЗвонокДлительность = '00010101' + (ОбщегоНазначенияКлиент.ДатаСеанса() 
						- ЭтаФорма.ТекущийЗвонокНачалоРазговора);
					
					ЭтаФорма.Элементы.ТекущийЗвонокДлительность.Видимость = Истина;
					
					Если ЭтаФорма.Элементы.Найти("ГруппаСтатусЛинии") <> Неопределено Тогда
						ЭтаФорма.Элементы.ГруппаСтатусЛинии.Видимость = Ложь;
					КонецЕсли;
				
					ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДлительностьРазговораПанелиЗвонка", 1, Ложь);
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "сфпВыборКонтакта" Тогда
				Если "" + Параметр.ИдентификаторЗвонка = ЭтаФорма.ИдентификаторЗвонка Тогда
					ЭтаФорма.ТекущийЗвонокКонтакт = Параметр.Контакт;
					ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "" + Параметр.Контакт;
					ЭтаФорма.ТекущийЗвонокВладелецКонтакта = "" + Параметр.Владелец;
				КонецЕсли;
			ИначеЕсли ИмяСобытия = "ПолученаИсторияЗвонков" Тогда
				CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ЭтаФорма.Элементы.ТелефонныеЗвонки);
				Телефония_ОбновитьКоличествоЗвонков(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Открыть панель звонка
// Открывает форму панели звонка
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма владелец. 
//  Команда	 - КомандаФормы	 - Команда.
//
Процедура ОткрытьПанельЗвонка(Форма, Команда) Экспорт
	ОткрытьФорму("ОбщаяФорма.сфпПанельЗвонка", , Форма);
КонецПроцедуры

// Установливает доступность команд панели звонка
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма. 
//  ЕстьСтрокаЗвонка - Булево - признак наличия строки звонка.
//
Процедура УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма, ЕстьСтрокаЗвонка = Ложь) Экспорт
	
	Если ЭтаФорма.ИспользуетсяОблачнаяАТС Тогда
		ЕстьЗвонок = ЗначениеЗаполнено(ЭтаФорма.ИдентификаторЗвонка);
		
		Если ЕстьЗвонок Тогда
			  ЭтаФорма.Элементы.ДекорацияОтветДа.Видимость = ЭтаФорма.ДоступностьКомандAPI_Ответ;
		Иначе ЭтаФорма.Элементы.ДекорацияОтветДа.Видимость = ЭтаФорма.ДоступенНаборНомераДокумента;
		КонецЕсли;	
		ЭтаФорма.Элементы.ДекорацияОтветНет.Видимость = НЕ ЭтаФорма.Элементы.ДекорацияОтветДа.Видимость;

		ЭтаФорма.Элементы.ДекорацияЗавершитьДа.Видимость = ЭтаФорма.ДоступностьКомандAPI_Завершить И ЕстьЗвонок;
		ЭтаФорма.Элементы.ДекорацияЗавершитьНет.Видимость = НЕ ЭтаФорма.Элементы.ДекорацияЗавершитьДа.Видимость;
		
		ЭтаФорма.Элементы.ДекорацияПаузаДа.Видимость = ЭтаФорма.ДоступностьКомандAPI_Пауза;
		ЭтаФорма.Элементы.ДекорацияПаузаНет.Видимость = НЕ ЭтаФорма.Элементы.ДекорацияПаузаДа.Видимость;
		
		ЭтаФорма.Элементы.ДекорацияПереводДа.Видимость = ЭтаФорма.ДоступностьКомандAPI_Перевод И ЕстьЗвонок;
		ЭтаФорма.Элементы.ДекорацияПереводНет.Видимость = НЕ ЭтаФорма.Элементы.ДекорацияПереводДа.Видимость;
		
		//ЭтаФорма.Элементы.ВыбратьДействиеДа.Видимость = ЕстьЗвонок ИЛИ ЕстьСтрокаЗвонка;
		//ЭтаФорма.Элементы.ВыбратьДействиеНет.Видимость = НЕ ЭтаФорма.Элементы.ВыбратьДействиеДа.Видимость;
		
	Иначе
		ОтветДаВидимость = Ложь;
		ПаузаДаВидимость = Ложь;
		ПереводДаВидимость = Ложь;
		
		ЕстьЗвонок = ЗначениеЗаполнено(ЭтаФорма.ИдентификаторЗвонка);
		ЕстьСтрокаЗвонка = (ЭтаФорма.Элементы.ТелефонныеЗвонки.ТекущиеДанные <> Неопределено);
		
		Если ЕстьЗвонок Тогда
			СписокДоступныхДействий = Новый СписокЗначений();
			СписокДоступныхДействий.Добавить("Drop");
			СписокДоступныхДействий.Добавить("Answer");
			СписокДоступныхДействий.Добавить("Hold");
			СписокДоступныхДействий.Добавить("UnHold");
			СписокДоступныхДействий.Добавить("Redirect");
			СписокДоступныхДействий.Добавить("Transfer");
			СписокДоступныхДействий.Добавить("CompleteTransfer");
			СписокДоступныхДействий.Добавить("CancelTransfer");
			
			// Заполняем структуру по умолчанию
			СтруктураДоступныхДействий = Новый Структура();
			Для Каждого ЭлементСписка Из СписокДоступныхДействий Цикл
				СтруктураДоступныхДействий.Вставить(ЭлементСписка.Значение, Ложь);
			КонецЦикла;
			
			НомерЭлементаСписка = 0;
			
			ДелимоеЧисло = ЭтаФорма.ТекущийЗвонокДоступныеДействия;
			Пока ДелимоеЧисло > 0 Цикл
				РезультатДеления = Цел(ДелимоеЧисло / 2);
				ОстатокДеления = ДелимоеЧисло - (РезультатДеления * 2);
				Если ОстатокДеления = 1 Тогда
					СтруктураДоступныхДействий[СписокДоступныхДействий[НомерЭлементаСписка].Значение] = Истина;
				КонецЕсли;
				ДелимоеЧисло = РезультатДеления;
				
				НомерЭлементаСписка = НомерЭлементаСписка + 1;
			КонецЦикла;

			Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИдентификаторПереводимогоЗвонка) Тогда
				ОтветДаВидимость = СтруктураДоступныхДействий.Answer;
				ПаузаДаВидимость = СтруктураДоступныхДействий.Hold ИЛИ СтруктураДоступныхДействий.UnHold;
				ПереводДаВидимость = СтруктураДоступныхДействий.Transfer ИЛИ СтруктураДоступныхДействий.CompleteTransfer;

				Если ЭтаФорма.ТекущийЗвонокСостояние = 3 ИЛИ ЭтаФорма.ТекущийЗвонокСостояние = 5 Тогда
					ОтветДаВидимость = Истина;
					ПереводДаВидимость = Истина;
					
				ИначеЕсли ЭтаФорма.ТекущийЗвонокСостояние = 8 ИЛИ ЭтаФорма.ТекущийЗвонокСостояние = 15 Тогда
					ПаузаДаВидимость = Истина;
					ПереводДаВидимость = Истина;

				ИначеЕсли ЭтаФорма.ТекущийЗвонокСостояние = 10 Тогда
					ПереводДаВидимость = Истина;
				КонецЕсли;

			Иначе
				ОтветДаВидимость = Ложь;
				ПаузаДаВидимость = Истина;
				ПереводДаВидимость = Ложь;
			КонецЕсли;

		Иначе	
			ОтветДаВидимость = ЭтаФорма.ДоступенНаборНомераДокумента;
			ПаузаДаВидимость = Ложь;
		КонецЕсли;	
		
		ЭтаФорма.Элементы.ДекорацияОтветНет.Видимость = НЕ ОтветДаВидимость;
		ЭтаФорма.Элементы.ДекорацияОтветДа.Видимость = ОтветДаВидимость;
			
		ЭтаФорма.Элементы.ДекорацияЗавершитьНет.Видимость = НЕ ЕстьЗвонок;
		ЭтаФорма.Элементы.ДекорацияЗавершитьДа.Видимость = ЕстьЗвонок;
		
		ЭтаФорма.Элементы.ДекорацияПаузаНет.Видимость = НЕ ПаузаДаВидимость;
		ЭтаФорма.Элементы.ДекорацияПаузаДа.Видимость = ПаузаДаВидимость;
			
		ЭтаФорма.Элементы.ДекорацияПереводНет.Видимость = НЕ ПереводДаВидимость;
		ЭтаФорма.Элементы.ДекорацияПереводДа.Видимость = ПереводДаВидимость;

		//ЭтаФорма.Элементы.ВыбратьДействиеНет.Видимость = НЕ ЕстьЗвонок И НЕ ЕстьСтрокаЗвонка;
		//ЭтаФорма.Элементы.ВыбратьДействиеДа.Видимость = ЕстьЗвонок ИЛИ ЕстьСтрокаЗвонка;

		ЭтаФорма.ДекорацияПодтвердитьПереводПодсказка = "Перевести текущий звонок без консультации";
		
		Если ЕстьЗвонок Тогда
			Если ЗначениеЗаполнено(ЭтаФорма.ИдентификаторПереводимогоЗвонка) И ЭтаФорма.ТекущийЗвонокСостояние = 10 Тогда
				ЭтаФорма.ДекорацияПодтвердитьПереводПодсказка = "Подтвердить перевод и завершить текущий звонок";
			КонецЕсли;
			
		Иначе	
			ЭтаФорма.Элементы.ДекорацияНомеронабирательНабрать.Видимость = Ложь;
			ЭтаФорма.Элементы.ДекорацияПодтвердитьПеревод.Видимость = Ложь;
		КонецЕсли;
		
		ЭтаФорма.Элементы.ДекорацияПодтвердитьПеревод.Подсказка = ЭтаФорма.ДекорацияПодтвердитьПереводПодсказка;
	КонецЕсли;

КонецПроцедуры

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
//
// Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
// - для открытия проводника см. ОткрытьПроводник.
// - для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
//  сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
//  сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  сфпОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
	Контекст.Вставить("Оповещение", Оповещение);
	
	ОписаниеОшибки = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось перейти по ссылке ""%1"" по причине: "
"Неверно задана навигационная ссылка.';en='Cannot follow the ""%1"" link due to:"
"Navigation link is specified incorrectly.'"),
			НавигационнаяСсылка);
	
	Если Не сфпОбщегоНазначенияСлужебныйКлиент.ЭтоДопустимаяСсылка(НавигационнаяСсылка) Тогда 
		сфпОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		Возврат;
	КонецЕсли;
	
	Если сфпОбщегоНазначенияСлужебныйКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
		Или сфпОбщегоНазначенияСлужебныйКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда 
		
		Попытка
		
#Если ТолстыйКлиентОбычноеПриложение Тогда
			// Особенность платформы: ПерейтиПоНавигационнойСсылке недоступен в толстом клиенте обычного приложения.
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);
			НачатьЗапускПриложения(ОписаниеОповещения, НавигационнаяСсылка);
#Иначе
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
#КонецЕсли
		
		Исключение
			сфпОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
			Возврат;
		КонецПопытки;
		
		Если Оповещение <> Неопределено Тогда 
			ПриложениеЗапущено = Истина;
			ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Если сфпОбщегоНазначенияСлужебныйКлиент.ЭтоСсылкаНаСправку(НавигационнаяСсылка) Тогда 
	//	ОткрытьСправку(НавигационнаяСсылка);
	//	Возврат;
	//КонецЕсли;
	//
	//Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами",
	//	ОбщегоНазначенияСлужебныйКлиент, Контекст);
	//	
	//ТекстПредложения = сфпОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru='Для открытия ссылки ""%1"" необходимо установить расширение работы с файлами.'"),
	//	НавигационнаяСсылка);
	//ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Процедура - После начала работы системы
//
// Параметры:
//  ПараметрыРаботыКлиента	 - Неопределено	 -  Параметры
//
Процедура ПослеНачалаРаботыСистемы(ПараметрыРаботыКлиента) Экспорт
	
	// Получаем системную информацию
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если сфпОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.11.0") < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("сфпПодключитьОбработчикНовыхСообщенийСистемыВзаимодействия", 10, Истина);

КонецПроцедуры

// Процедура - Обработчик нового сообщения обсуждение журнал звонков.
//
// Параметры:
//  Сообщение				 - Структура	 -  Сообщение
//  ДополнительныеПараметры	 - Структура	 -  Структура параметров
//
Процедура ОбработчикНовогоСообщенияОбсуждениеЖурналЗвонков(Сообщение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Сообщение.Данные) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательСистемыВзаимодействия = сфпСофтФонПроСерверПовтИсп.ТекущийПользовательСистемыВзаимодействия();
	Если ПользовательСистемыВзаимодействия = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОповещения = ПараметрыИзСтроки(Сообщение.Данные);
	
	Если НЕ Сообщение.Получатели.Содержит(ПользовательСистемыВзаимодействия) Тогда
		Попытка
			ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
			Если "" + ТекПользователь.УникальныйИдентификатор() <> ДанныеОповещения.ИдентификаторПользователя Тогда
				Возврат;
			КонецЕсли;
		Исключение
			Возврат;
		КонецПопытки;	
	КонецЕсли;
	
	Если ДанныеОповещения.ТипЗвонка = "СистемаВзаимодействияПодключена" Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Система взаимодействия подключена'"), , , ,
			 СтатусОповещенияПользователя.Информация);
		
	Иначе
		ВидимостьИндикатора = Истина;
		ОбновитьДанныеЗвонка = Ложь;
		
		Если ДанныеОповещения.ТипЗвонка = "НовыйЗвонок" Тогда
			ДанныеЗвонка = сфпСофтФонПроСервер.ПолучитьДанныеЗвонка(ДанныеОповещения.ИдентификаторЗвонка, Ложь);

		ИначеЕсли ДанныеОповещения.ТипЗвонка = "НовыйИсходящийЗвонок" Тогда
			ДанныеЗвонка = сфпСофтФонПроСервер.ПолучитьДанныеЗвонка(ДанныеОповещения.ИдентификаторЗвонка,
				 Ложь,
				 сфпДанныеЗаполнения);

		ИначеЕсли ДанныеОповещения.ТипЗвонка = "НачалоРазговора" Тогда
			ДанныеЗвонка = сфпСофтФонПроСервер.ПолучитьДанныеЗвонка(ДанныеОповещения.ИдентификаторЗвонка);	
			
		Иначе
			ДанныеЗвонка = сфпСофтФонПроСервер.сфпПреобразоватьДанныеОповещения(ДанныеОповещения);	
			ВидимостьИндикатора = (ДанныеОповещения.ТипЗвонка = "КонецРазговора")
				 ИЛИ (ДанныеОповещения.ТипЗвонка = "Неотвеченный");
			ОбновитьДанныеЗвонка = ВидимостьИндикатора ИЛИ (ДанныеОповещения.ТипЗвонка = "ЗаписьРазговора");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Звонок) Тогда
			// Устаревшее оповещение пропускаем
			Возврат;
		КонецЕсли;	
		
		Если ВидимостьИндикатора <> Неопределено Тогда
			// Индикатор на Рабочем столе есть только в CRM 3.0
			Если ск_глСтекФормРабочегоСтола <> Неопределено Тогда
				Для Каждого ФормаРабочегоСтола Из ск_глСтекФормРабочегоСтола Цикл
					ЭлементИндикатора = ФормаРабочегоСтола.Значение.Элементы.Найти("сфпИндикаторАктивногоЗвонка");
					Если ЭлементИндикатора <> Неопределено Тогда
						ЭлементИндикатора.Видимость = ВидимостьИндикатора;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновитьДанныеЗвонка Тогда
			Если ДанныеЗвонка.Свойство("Звонок") И ЗначениеЗаполнено(ДанныеЗвонка.Звонок) Тогда
				Звонок = ДанныеЗвонка.Звонок;
				ПараметрыФормы = Новый Структура("Ключ", Звонок);
			    ИмяФормыЗвонка = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
				Если ЗначениеЗаполнено(ИмяФормыЗвонка) И ЗначениеЗаполнено(Звонок) Тогда
					ФормаЗвонка = ПолучитьФорму(ИмяФормыЗвонка, ПараметрыФормы);
					Если НЕ ФормаЗвонка.Открыта() Тогда
						сфпСофтФонПроСервер.сфпОбновитьДанныеЗвонка(Звонок, ДанныеЗвонка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеОповещения.ТипЗвонка = "НовыйЗвонок" Тогда
			Оповестить("сфпНовыйВходящийЗвонок", ДанныеЗвонка);
			
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(ДанныеЗвонка);
						
			ДополнительныеПараметры = Новый Структура("Звонок", ДанныеЗвонка.Звонок);
			Оповещение = Новый ОписаниеОповещения("ПриНажатииОповещенияОЗвонке", сфпСофтФонПроКлиент, ДополнительныеПараметры);
				
			ПоказатьОповещениеПользователя("Входящий вызов",
				Оповещение,
				ДанныеЗвонка.НомерТелефона + Символы.ПС + ДанныеЗвонка.Контакт,
				БиблиотекаКартинок.сфпТелефонныйЗвонокВходящий,
				СтатусОповещенияПользователя.Информация);
				
		ИначеЕсли ДанныеОповещения.ТипЗвонка = "НовыйИсходящийЗвонок" Тогда
			Оповестить("сфпНовыйИсходящийЗвонок", ДанныеЗвонка);
			
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(ДанныеЗвонка);

		ИначеЕсли ДанныеОповещения.ТипЗвонка = "НачалоРазговора" Тогда
			Оповестить("сфпНачалоРазговора", ДанныеЗвонка.ИдентификаторЗвонка);
			
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(ДанныеЗвонка);
				
		ИначеЕсли ДанныеОповещения.ТипЗвонка = "КонецРазговора" Тогда
			Оповестить("сфпКонецРазговора", ДанныеЗвонка);
				
		ИначеЕсли ДанныеОповещения.ТипЗвонка = "ЗаписьРазговора" Тогда

		ИначеЕсли ДанныеОповещения.ТипЗвонка = "Неотвеченный" Тогда
			Оповестить("сфпКонецРазговора", ДанныеЗвонка);

			Если ДанныеОповещения.Свойство("НавигационнаяСсылка") И ДанныеОповещения.Свойство("Представление") Тогда
				ПоказатьОповещениеПользователя(НСтр("ru='Пропущенный вызов'"),
					ДанныеОповещения.НавигационнаяСсылка,
					ДанныеОповещения.Представление,
					БиблиотекаКартинок.сфпТелефонныйЗвонокНеотвеченный,
					СтатусОповещенияПользователя.Важное);
			КонецЕсли;
		КонецЕсли;
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при нажатии оповещения о звонке
//
// Параметры:
//	ДополнительныеПараметры - Структура - содержит дополнительные параметры
//
Процедура ПриНажатииОповещенияОЗвонке(ДополнительныеПараметры) Экспорт

	ОкнаСеанса = ПолучитьОкна();
	Для Каждого ТекОкно Из ОкнаСеанса Цикл
		Если ТекОкно.Заголовок = "Телефония" Тогда
			ТекОкно.Активизировать();
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
	ПоказатьЗначение(, ДополнительныеПараметры.Звонок);

КонецПроцедуры

// Процедура - Обработчик нажатия оповещения о входящем звонке
//  Процедура открывает форму панели звонка.
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - Структура параметров открытия формы.
//
Процедура ОбработчикНажатияОповещенияОВходящемЗвонке(ДополнительныеПараметры) Экспорт
	ОткрытьФорму("ОбщаяФорма.сфпПанельЗвонка", ДополнительныеПараметры);
КонецПроцедуры

// Процедура - Прослушать запись разговора
//
// Параметры:
//  ИдентификаторЗвонка	 - Строка	 - Идентификатор звонка
//  СсылкаНаЗапись		 - Строка	 - Идентификатор записи
//  ОбновитьДанныеЗвонка - Булево	 - Признак обновления данных звонка
//  РежимПолученияЗаписи - Строка	 - Режим получения записи. Пример: "play", "download" 
//  ИмяФайлаЗаписи		 - Строка	 - Имя файла записи
//  ВнутреннийНомер		 - Строка	 - Внутренний номер
//
Процедура ПрослушатьЗаписьРазговора(ИдентификаторЗвонка, СсылкаНаЗапись, ОбновитьДанныеЗвонка,
	 РежимПолученияЗаписи = "download", ИмяФайлаЗаписи,
	 ВнутреннийНомер = "") Экспорт
	Перем Ошибка;
	
	ИспользуемаяАТС = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяАТС");
	
	ОбновитьДанныеЗвонка = Ложь;
	URL = Неопределено;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule") Тогда
		РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПолучитьЗаписьРазговора",
			 СсылкаНаЗапись, , ВнутреннийНомер, ,
			 РежимПолученияЗаписи);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			#Если ВебКлиент Тогда
				URL = РезультатЗапроса.Результат;

			#Иначе
				РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("СкачатьЗаписьРазговора",
					 РезультатЗапроса.Результат);
				Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
					ПолноеИмяФайла = ПолучитьИмяВременногоФайла("mp3");
					ИмяФайла = ИмяФайлаЗаписи + ".mp3";
					ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла,ИмяФайла,РежимПолученияЗаписи",
						 ПолноеИмяФайла, ИмяФайла,
						 РежимПолученияЗаписи);
					Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаРазговора", сфпСофтФонПроКлиент, ДополнительныеПараметры);
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатЗапроса.Результат);
					ДвоичныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);

					Возврат;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice") Тогда
		РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПолучитьЗаписьРазговора",
			 СсылкаНаЗапись, , , ,
			 РежимПолученияЗаписи);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			#Если ВебКлиент Тогда
				URL = РезультатЗапроса.Результат;

			#Иначе
				РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("СкачатьЗаписьРазговора",
					 РезультатЗапроса.Результат);
				Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
					ПолноеИмяФайла = ПолучитьИмяВременногоФайла("mp3");
					ИмяФайла = ИмяФайлаЗаписи + ".mp3";
					ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла,ИмяФайла,РежимПолученияЗаписи",
						 ПолноеИмяФайла, ИмяФайла,
						 РежимПолученияЗаписи);
					Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаРазговора", сфпСофтФонПроКлиент, ДополнительныеПараметры);
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатЗапроса.Результат);
					ДвоичныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);

					Возврат;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;	

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн") Тогда
		РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПолучитьЗаписьРазговора",
			 СсылкаНаЗапись);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			СтруктураРезультата = сфпСофтФонПроСервер.СтруктураJSON(РезультатЗапроса.Результат);
			Если СтруктураРезультата.Свойство("url") Тогда
				URL = СтруктураРезультата.url;
			КонецЕсли;	
		КонецЕсли;

	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС) Тогда
		#Если ВебКлиент Тогда
			URL = СсылкаНаЗапись;
		#Иначе
			РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("СкачатьЗаписьРазговора",
				 СсылкаНаЗапись);
			Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
				ПолноеИмяФайла = ПолучитьИмяВременногоФайла("mp3");
				ИмяФайла = ИмяФайлаЗаписи + ".mp3";
				ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла,ИмяФайла,РежимПолученияЗаписи",
					 ПолноеИмяФайла, ИмяФайла,
					 РежимПолученияЗаписи);
				Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаРазговора", сфпСофтФонПроКлиент, ДополнительныеПараметры);
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатЗапроса.Результат);
				ДвоичныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);
				
				Возврат;
			КонецЕсли;
		#КонецЕсли

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Ростелеком") Тогда
		РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПолучитьЗаписьРазговора",
			 СсылкаНаЗапись);
		Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.Результат) Тогда
			СтруктураРезультата = сфпСофтФонПроСервер.СтруктураJSON(РезультатЗапроса.Результат);
			Если СтруктураРезультата.Свойство("url") Тогда
				URL = СтруктураРезультата.url;
			КонецЕсли;	
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(СсылкаНаЗапись) Тогда
			URL = СсылкаНаЗапись;
			
		Иначе
			URL = сфпСофтФонПроСервер.СсылкаНаЗаписьРазговора(ИдентификаторЗвонка, Ошибка);
			ОбновитьДанныеЗвонка = Истина;
			Оповестить("ОбновитьДанныеТелефонногоЗвонка");
		КонецЕсли;		
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		ОбработатьРезультатВызова(Ошибка);
		Возврат;
	КонецЕсли;
	
	Если URL = Неопределено Тогда
		сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(НСтр("ru='Запись данного разговора отсутствует.'"));
		Возврат;
	КонецЕсли;
	
	// СофтФон
	ОткрытьНавигационнуюСсылку(URL);
	
КонецПроцедуры

// Выполняется после записи файла разговора
//
// Параметры:
//	ДополнительныеПараметры - Структура - содержит дополнительные параметры
//
Процедура ПослеЗаписиФайлаРазговора(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.РежимПолученияЗаписи = "play" Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);	
		НачатьЗапускПриложения(Оповещение, ДополнительныеПараметры.ПолноеИмяФайла);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайла", сфпСофтФонПроКлиент, ДополнительныеПараметры);
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.Показать(Оповещение);
	КонецЕсли;

КонецПроцедуры

// Вызывается после закрытия диалога выбора
//
// Параметры:
//  ВыбранныеФайлы - Массив из Строка - выбранные файлы
//	ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПослеСохраненияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПеремещенияФайла", сфпСофтФонПроКлиент, ДополнительныеПараметры);
		НачатьПеремещениеФайла(Оповещение, ДополнительныеПараметры.ПолноеИмяФайла, ВыбранныеФайлы[0] + "\" 
			+ ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;

КонецПроцедуры

// Вызывается после завершения НачатьПеремещениеФайла
//
// Параметры:
//  ПеремещаемыйФайл - Строка - содержит путь к файлу
//	ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПослеПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПеремещаемыйФайл <> Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Запись разговора сохранена: " + ПеремещаемыйФайл;
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

// Процедура - Начать прослушивание записи разговора
//
// Параметры:
//  ПараметрыЗвонка	 - Структура - Структура параметров
//  Форма			 - ФормаКлиентскогоПриложения	 - Форма из которой производится вызов процедуры
//  Элемент			 - ЭлементФормы		 - Кнопка вызова процедуры
//
Процедура НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, Форма, Элемент) Экспорт
	
	// Прежде, чем искать запись мы должны выяснить, есть ли права на прослушку у данного пользователя
	ТекстПредупреждения = Нстр("ru='У данного пользователя нет прав на прослушивание разговора пользователя '");
	
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	МассивПрослушиваемыхПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекПользователь);
	Если МассивПрослушиваемыхПользователей.Количество() > 0 Тогда
		Если МассивПрослушиваемыхПользователей.Найти(ПараметрыЗвонка.Ответственный) = Неопределено Тогда
			ТекстПредупреждения = ТекстПредупреждения + """" + ПараметрыЗвонка.Ответственный + """" + ".";
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;

	Иначе				
		ТекстПредупреждения = ТекстПредупреждения + """" + ПараметрыЗвонка.Ответственный + """" + ".";
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВерсияСофтФон = сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользуемаяВерсияСофтФон");
	ПараметрыЗвонка.Вставить("ВерсияСофтФон", ВерсияСофтФон);
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить("Прослушать");
	СписокВыбора.Добавить("Скачать");
		
	Если ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
		Если ЗначениеЗаполнено(ПараметрыЗвонка.ИдентификаторЗаписи) Тогда
			#Если ВебКлиент Тогда
				ВыбранныйЭлемент = СписокВыбора.НайтиПоЗначению("Скачать");
				ПродолжитьПрослушиваниеЗаписиРазговора(ВыбранныйЭлемент, ПараметрыЗвонка);
			#Иначе
				Оповещение = Новый ОписаниеОповещения("ПродолжитьПрослушиваниеЗаписиРазговора",
					 сфпСофтФонПроКлиент,
					 ПараметрыЗвонка);
				Форма.ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элемент); 
			#КонецЕсли
		КонецЕсли;
		
	Иначе
		ВыбранныйЭлемент = СписокВыбора.НайтиПоЗначению("Прослушать");
		ПродолжитьПрослушиваниеЗаписиРазговора(ВыбранныйЭлемент, ПараметрыЗвонка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Продолжить прослушивание записи разговора
//
// Параметры:
//  ВыбранныйЭлемент		 - ЭлементФормы	 - Элемент вызова процедуры
//  ДополнительныеПараметры	 - Структура	 - Структура параметров
//
Процедура ПродолжитьПрослушиваниеЗаписиРазговора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ДополнительныеПараметры.ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
			НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ДополнительныеПараметры.НомерТелефона);
			ИмяФайла = Формат(ДополнительныеПараметры.ДатаНачала, "ДФ=yyyyMMdd_HHmmss") + "_" + НомерТелефона;
			Если ВыбранныйЭлемент.Значение = "Прослушать" Тогда
				ОбновитьДанныеЗвонка = Неопределено;
				ПрослушатьЗаписьРазговора(
					ДополнительныеПараметры.ИдентификаторЗвонка, ДополнительныеПараметры.ИдентификаторЗаписи, ОбновитьДанныеЗвонка, "play", ИмяФайла, ДополнительныеПараметры.ВнутреннийНомер);
				
			ИначеЕсли ВыбранныйЭлемент.Значение = "Скачать" Тогда
				ОбновитьДанныеЗвонка = Неопределено;
				ПрослушатьЗаписьРазговора(
					ДополнительныеПараметры.ИдентификаторЗвонка, ДополнительныеПараметры.ИдентификаторЗаписи, ОбновитьДанныеЗвонка, "download", ИмяФайла, ДополнительныеПараметры.ВнутреннийНомер);
			КонецЕсли;
				
		Иначе		
			Если ПустаяСтрока(ДополнительныеПараметры.ИдентификаторЗаписи) Тогда
				Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
					Если ДополнительныеПараметры.Входящий Тогда
						ТелефонА = ДополнительныеПараметры.НомерТелефона;
						ТелефонБ = ДополнительныеПараметры.ВнутреннийНомер;

					Иначе
						ТелефонА = ДополнительныеПараметры.ВнутреннийНомер;
						ТелефонБ = ДополнительныеПараметры.НомерТелефона;						
					КонецЕсли;
					
					// Выполняем поиск записи разговора
					НайденнаяЗапись = сфпНайтиЗаписьРазговораCLON(ТелефонА, ТелефонБ,
						 ДополнительныеПараметры.ДатаНачала, ДополнительныеПараметры.ДатаОкончания,
						 ДополнительныеПараметры.Входящий); 
					Если НайденнаяЗапись <> Неопределено Тогда
						// Запускаем запись на прослушивание
						сфпПолучитьФайлРазговора(НайденнаяЗапись.file, ДополнительныеПараметры.ВнутреннийНомер);
						
						// Записываем в регистр идентификатор записи
						сфпСофтФонПроСервер.сфпЗаписатьИдентификаторЗаписиВРегистр(ДополнительныеПараметры.Звонок,
							 ДополнительныеПараметры.ИдентификаторЗвонка,
							 НайденнаяЗапись.file);
						
						// Обновляем историю звонка
						Оповестить("сфпОбновитьИсториюЗвонка", ДополнительныеПараметры.Звонок);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				сфпПолучитьФайлРазговора(ДополнительныеПараметры.ИдентификаторЗаписи, ДополнительныеПараметры.ВнутреннийНомер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет инициализацию подсистемы СофтФон
//
Процедура сфпПодключитьСофтФон() Экспорт
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияСофтФона = сфпСофтФонПроСервер.ИспользуемаяВерсияСофтФона();
	
	Если ВерсияСофтФона = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотПроф") Тогда
		#Если ВебКлиент Тогда
			//Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
			Возврат;
		#Иначе
			Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
				Возврат;

			ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
				Возврат;
			КонецЕсли;

			сфпПодключиться();
		#КонецЕсли

	ИначеЕсли ВерсияСофтФона = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
		ПараметрыРаботыКлиента = Неопределено;
		ПослеНачалаРаботыСистемы(ПараметрыРаботыКлиента);	
	КонецЕсли;

КонецПроцедуры // сфпПереподключитьСофтФон()	

// Процедура отключает СофтФон
//
// Параметры:
//  Отказ			   - Булево - Признак отказа от выполнения процедуры
//	ОповещатьОЗакрытии - Булево - Признак оповещения о закрытии.
//
Процедура сфпОтключитьСофтФон(Отказ = Неопределено, ОповещатьОЗакрытии = Истина) Экспорт
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// BSLLS:UnusedLocalVariable-off
	сфпObjCLON = Неопределено;
	сфпСтруктураЗвонков	= Новый Структура();
	сфпДанныеЗаполнения	= Неопределено;
	сфпСоответствиеЛинийИСтатусов = Неопределено;
	// BSLLS:UnusedLocalVariable-on
	
	Если сфпПанельУправления <> Неопределено Тогда
		Если ОповещатьОЗакрытии Тогда
			Оповестить("СофтФон_ЗакрытьВнутреннююПанель");
		КонецЕсли;
		
		#Если НЕ ВебКлиент Тогда
			Если ПараметрыПриложения["сфпЗакрыватьПанельПриЗавершенииРаботы"] = Истина Тогда
				сфпПанельУправления.PanelExit();
			КонецЕсли;
		#КонецЕсли
		
		сфпПанельУправления = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // сфпОтключитьСофтФон()

// Функция проверяет доступность использования СофтФон.
//
// Параметры:
//  ВыводитьПредупреждения	 - Булево				 - Признак вывода предупреждений.
//  КонтекстВызова			 - Ссылка, Неопределено	 - Контекст вызова.
// 
// Возвращаемое значение:
//  Булево - Доступность СофтФона.
//
Функция сфпПроверитьДоступностьСофтФон(ВыводитьПредупреждения = Истина, КонтекстВызова = Неопределено) Экспорт
	
	Если сфпСофтФонПроСервер.ИспользуемаяВерсияСофтФона() = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
		Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			Если ВыводитьПредупреждения Тогда
				ЗаписатьДанныеБизнесСтатистики(КонтекстВызова);
				CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СофтФон");
			КонецЕсли;
			
			Возврат Ложь;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда	
			Если ВыводитьПредупреждения Тогда
				ПоказатьПредупреждение(, НСтр("ru='В персональных настройках пользователя отключено использование СофтФон'"), 5);
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
			
	Иначе
		#Если ВебКлиент Тогда
			Возврат Ложь;
		#Иначе
			Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
				Если ВыводитьПредупреждения Тогда
					ЗаписатьДанныеБизнесСтатистики(КонтекстВызова);
					CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СофтФон");
				КонецЕсли;
				
				Возврат Ложь;
			ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда	
				Если ВыводитьПредупреждения Тогда
					ПоказатьПредупреждение(, НСтр("ru='В персональных настройках пользователя отключено использование СофтФон'"), 5);
				КонецЕсли;
				
				Возврат Ложь;
			ИначеЕсли сфпПанельУправления = Неопределено Тогда
				Если ВыводитьПредупреждения Тогда
					ПоказатьПредупреждение(, НСтр("ru='Отсутствует подключение к серверу СофтФона'"), 5);
				КонецЕсли;
				
				Возврат Ложь;
			КонецЕсли;
			
			Возврат Истина;
		#КонецЕсли
	КонецЕсли;

КонецФункции // сфпПроверитьДоступностьСофтФон()

// Процедура заново заполняет регистр поиска по номерам
//
Процедура сфпПерезаполнитьРегистрПоискаПоНомерам() Экспорт
	
	ТипыОбъектовДляПерезаполнения = сфпСофтФонПроСервер.сфпПолучитьТипыОбъектовДляПерезаполненияПоНомерам();
	Если ТипыОбъектовДляПерезаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШагИндикатора = (100 / ТипыОбъектовДляПерезаполнения.Количество());
	Индикатор = ШагИндикатора;
	Для Сч = 0 По ТипыОбъектовДляПерезаполнения.Количество() - 1 Цикл
		Состояние(НСтр("ru='Выполняется обновление регистра поиска по номеру телефона'"), Индикатор, ,
			 БиблиотекаКартинок.ДлительнаяОперация48);
		ТипОбъекта = ТипыОбъектовДляПерезаполнения[Сч];
		сфпСофтФонПроСервер.сфпЗаполнитьРегистрПоискаНомеровПоТипуОбъекта(ТипОбъекта);
		
		Индикатор = Индикатор + ШагИндикатора;
	КонецЦикла;	
	
	Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() Тогда
		// Если включена маршрутизация, то заменяем таблицу маршрутизации
		СтарыйНабор = Новый Массив;
		НовыйНабор = сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации();
		СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
		сфпСофтФонПроСервер.сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
	КонецЕсли;	
		
КонецПроцедуры

// Процедура выполняет необходимые действия после записи телефонного звонка в базу
//
// Параметры:
//	НовыйЗвонок		- ДокументСсылка 	- Ссылка на записанный звонок
//	СтруктураЗвонка	- Структура			- Структура данных звонка
//
Процедура сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НовыйЗвонок) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем звонок в структуру
	СтруктураЗвонка["НовыйЗвонок"] = НовыйЗвонок;
	сфпДобавитьДанныеВСтруктуру(СтруктураЗвонка.hCall, "НовыйЗвонок", НовыйЗвонок);
	
	Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
		Если сфпДанныеЗаполнения = Неопределено Тогда
			сфпПанельУправления.GetCallInfoCoMagic(СтруктураЗвонка.LineName, СтруктураЗвонка.CallerID);
		ИначеЕсли НЕ сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
			сфпПанельУправления.GetCallInfoCoMagic(СтруктураЗвонка.LineName, СтруктураЗвонка.CallerID);
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		// Изменяем таблицу маршрутизации
		сфпСофтФонПроСервер.сфпОбновитьТаблицуМаршрутизации(НовыйЗвонок);
	КонецЕсли;
	
	// Если звонок выполнен из телемаркетинга и не открыто событие, то оповещаем телемаркетинг о звонке
	ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(НовыйЗвонок, "ВзаимодействиеОснование");
	Если ЗначениеЗаполнено(ОснованиеЗвонка) И ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		СтруктураОповещения = Новый Структура();
		СтруктураОповещения.Вставить("Основание", ОснованиеЗвонка);
		Если ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтруктураОповещения.Вставить("Партнер", сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт));
			СтруктураОповещения.Вставить("КонтактноеЛицо", СтруктураЗвонка.Контакт);

		ИначеЕсли ТипЗнч(СтруктураЗвонка.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			СтруктураОповещения.Вставить("Партнер", СтруктураЗвонка.Контакт);
			СтруктураОповещения.Вставить("КонтактноеЛицо",
				 ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));

		Иначе
			СтруктураОповещения.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
			СтруктураОповещения.Вставить("КонтактноеЛицо",
				 ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
		КонецЕсли;	

		СтруктураОповещения.Вставить("ПартнерСтрокой",
			 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НовыйЗвонок,
			 "АбонентПредставление"));
		СтруктураОповещения.Вставить("НомерТелефона", СтруктураЗвонка.НомерТелефона);
		СтруктураОповещения.Вставить("Звонок", НовыйЗвонок);
		Оповестить("СофтФон_ЗаписьСобытия", СтруктураОповещения);
		
	// +bpm
	ИначеЕсли ЗначениеЗаполнено(ОснованиеЗвонка) И ТипЗнч(ОснованиеЗвонка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Оповестить("ЗаписанНовыйЗвонок", ОснованиеЗвонка, НовыйЗвонок);
	// -bpm
	КонецЕсли;

КонецПроцедуры	

// Функция получает версию используемой панели Софтфона
//
// Возвращаемое значение:
//	Строка - Версия панели
//
Функция сфпПолучитьВерсиюПанели() Экспорт
	
	ВерсияПанели = "0.0.0.0";
	
	Если сфпПанельУправления <> Неопределено Тогда
		Попытка
			ВерсияПанели	= сфпПанельУправления.Release();
		
		Исключение ВерсияПанели = "0.0.0.0";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВерсияПанели;

КонецФункции	

// Функция обрабатывает внешнее событие, которое приходит от нативной компоненты Софтфона
//
// Параметры:
//	Источник 	- Строка 	- Источник внешнего события
//  Событие 	- Строка	- Имя события источника
//	Данные		- JSON		- Данные события
//
Процедура сфпВнешнееСобытияСофтфона(Источник, Событие, Данные) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Если Источник = "SoftPhone" Тогда
			Если ПустаяСтрока(Данные) Тогда
				Возврат;
			КонецЕсли;
			
			сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("Внешнее событие." + Событие, Данные);
			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(Данные);
			СтруктураДанных = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Если НЕ СтруктураДанных.Свойство("NumberOnLine") Тогда
				СтруктураДанных.Вставить("NumberOnLine", "");
			КонецЕсли;

			Если Событие = "OnCallInfoEx" Тогда
				сфпOnCallInfo(СтруктураДанных["hCall"], СтруктураДанных["LineName"],
					 СтруктураДанных["LineType"], СтруктураДанных["CallerID"],
					СтруктураДанных["CallerInfoName"], СтруктураДанных["CalledId"], СтруктураДанных["CalledInfoName"], СтруктураДанных["State"],
					СтруктураДанных["Origin"], СтруктураДанных["DopInfo"], СтруктураДанных["AvailableActions"], СтруктураДанных["AppValue"],
					СтруктураДанных["ImageData"], СтруктураДанных["ContactID"], СтруктураДанных["Caller_Destination_Number"], СтруктураДанных["NumberOnLine"]);

			ИначеЕсли  Событие = "PutSettingsJSON" Тогда									
				сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				ТребуетсяОбновитьРегистр =
					НЕ (СтруктураДанных["LastNumberCount"] = сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера);
				
				сфпПараметрыСервера.ПрефиксВыходаВГород					= СтруктураДанных["PrefCity"];
				сфпПараметрыСервера.ПрефиксВыходаВМежгород				= СтруктураДанных["PrefContry"];
				сфпПараметрыСервера.ПрефиксВыходаНаМеждународную		= СтруктураДанных["PrefWorld"];
				сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров	= СтруктураДанных["InternalNumMaxLen"];
				сфпПараметрыСервера.ПоследниеЦифрыТелефонногоНомера		= СтруктураДанных["LastNumberCount"];
				сфпПараметрыСервера.СтрокаПодключенияИстории			= СтруктураДанных["SQLConnectionString"];
				сфпПараметрыСервера.КодСтраны                           = СтруктураДанных["ContryCode"];
				сфпПараметрыСервера.КодГорода							= СтруктураДанных["CityCode"];
				сфпСофтФонПроСервер.сфпЗаписатьПараметрыСервераНативнаяКомпонента(СтруктураДанных);
				
				Если ТребуетсяОбновитьРегистр Тогда
					сфпПерезаполнитьРегистрПоискаПоНомерам();
				КонецЕсли;
				
				ТекущийПользователь	= сфпСофтФонПроСервер.сфпТекущийПользователь();

				Если НЕ ПустаяСтрока(СтруктураДанных["LocalPhoneNum"]) Тогда
					// Если изменился текущий внутренний номер пользователя
					Если НЕ (СтруктураДанных["LocalPhoneNum"] = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер()) Тогда
						// Запишем внутренний номер для текущего пользователя
						МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(СтруктураДанных["LocalPhoneNum"],
							 ТекущийПользователь);
						Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию()
							 И Не сфпСофтФонПроСервер.сфпИспользоватьМаршрутизациюПоНомеруИзКИПользователя() Тогда
							// Изменим маршрутизацию в АТС
							СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
							Для Каждого ПользовательМассива Из МассивПользователей Цикл
								НаборПользователя	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ПользовательМассива);
								Для Каждого СтрокаНабора Из НаборПользователя Цикл
									СтарыйНабор.Добавить(СтрокаНабора);
								КонецЦикла;	
							КонецЦикла;
							
							НовыйНабор = сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
							// Изменяем внутренний номер на новый
							Для Каждого СтрокаНабора Из НовыйНабор Цикл
								СтрокаНабора.ВнутреннийНомер = СтруктураДанных["LocalPhoneNum"];
							КонецЦикла;
							
							СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
							сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
							сфпСофтФонПроСервер.сфпПерезаписатьНомерЛинииТекущегоПользователяВРегистреПоиска(ТекущийПользователь,
								 СтруктураДанных["LocalPhoneNum"]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураДанных.Свойство("MainPhoneAdd") Тогда
					сфпСофтФонПроСервер.сфпЗаписатьДополнительныеНомераПользователю(ТекущийПользователь,
						 СтруктураДанных["MainPhoneAdd"]);
				КонецЕсли;
				
				Если СтруктураДанных.Свойство("UseRouter") И НЕ (СтруктураДанных["UseRouter"]  = Неопределено) Тогда
					Если НЕ (СтруктураДанных["UseRouter"] = сфпПараметрыСервера.ИспользоватьМаршрутизацию) Тогда
						сфпПараметрыСервера.ИспользоватьМаршрутизацию	= СтруктураДанных["UseRouter"];
						ОбновитьИнтерфейс();
					КонецЕсли;
					
				ИначеЕсли СтруктураДанных.Свойство("HistoryOn") И НЕ (СтруктураДанных["HistoryOn"]  = Неопределено) Тогда
					// Если изменилась видимость отчетов
					Если НЕ (СтруктураДанных["HistoryOn"] = сфпПараметрыСервера.ИспользоватьИсториюЗвонков) Тогда
						сфпПараметрыСервера.ИспользоватьИсториюЗвонков = СтруктураДанных["HistoryOn"];
						ОбновитьИнтерфейс();
					КонецЕсли;

				ИначеЕсли СтруктураДанных.Свойство("UseHistory") И НЕ (СтруктураДанных["UseHistory"]  = Неопределено) Тогда
					Если НЕ (СтруктураДанных["UseHistory"] = сфпПараметрыСервера.ИспользоватьИсториюЗвонков) Тогда
						сфпПараметрыСервера.ИспользоватьИсториюЗвонков = СтруктураДанных["UseHistory"]; 
						ОбновитьИнтерфейс();
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли Событие = "OnEvent" Тогда
				ПредставлениеКонтакта = ?(СтруктураДанных.Свойство("ContactName"), СтруктураДанных["ContactName"], "");
				
				Если СтруктураДанных["EventType"] > 1 И СтруктураДанных.Свойство("hCall") Тогда
					сфпOnEvent(СтруктураДанных["EventType"], СтруктураДанных["hCall"], СтруктураДанных["Origin"],
						 СтруктураДанных["StartDate"],
						СтруктураДанных["AnswerDate"], СтруктураДанных["EndDate"], СтруктураДанных["PhoneNumber"], СтруктураДанных["RecordID"],
						СтруктураДанных["ContactID"], ПредставлениеКонтакта);
					
				Иначе
					сфпOnEvent(СтруктураДанных["EventType"], , СтруктураДанных["Origin"], , , ,
						 СтруктураДанных["PhoneNumber"], , СтруктураДанных["ContactID"],
						 ПредставлениеКонтакта);
				КонецЕсли;

			ИначеЕсли Событие = "OnEventData" Тогда
				сфпOnEventData(СтруктураДанных["LineName"], СтруктураДанных["DataType"], СтруктураДанных["StrData"]);
				
			ИначеЕсли Событие = "OnAllLinesInfo" Тогда
				сфпOnAllLinesInfo(СтруктураДанных["items"]);

			ИначеЕсли Событие = "OnLinesStatus" Тогда	
				// Только для CRM 3.0 пока
				сфпOnLinesStatus(Данные);

			ИначеЕсли Событие = "OnRecordInfo" Тогда	
				сфпOnRecordInfo(СтруктураДанных["RecordEventType"], СтруктураДанных["hCall"], СтруктураДанных["LineID"],
					СтруктураДанных["RecordID"], СтруктураДанных["TimeStart"], СтруктураДанных["DurationTalk"],
					СтруктураДанных["FileName"], СтруктураДанных["ResultDescription"]);

			ИначеЕсли Событие = "OnResultInfo" Тогда
				сфпOnResultInfo(СтруктураДанных["OperationName"], СтруктураДанных["OperationResult"],
					СтруктураДанных["OperationResultDescription"], СтруктураДанных["DopInfo"]);

			ИначеЕсли Событие = "OnCallInfoCoMagic" Тогда
				сфпOnCallInfoCoMagic(СтруктураДанных["LineName"], СтруктураДанных["CallInfo"]);
			КонецЕсли;

		ИначеЕсли Источник = "DbControl" Тогда
			// Ожидаем окончания сохранения файла
			Если (Событие = "OnLoadProgress") И (Данные = "100") Тогда
				FileName = сфпПолучитьИмяФайлаЗаписиРазговора();
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);	
					НачатьЗапускПриложения(ОписаниеОповещения, FileName);
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

// Функция выясняет, используется ли обработчик получения статусов линий
//
// Возвращаемое значение:
//	Булево
//
Функция сфпИспользуетсяОбработчикOnLinesStatus() Экспорт

	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпПолучитьВерсиюПанели(), "3.0.3.121") >= 0 Тогда
		  Возврат Истина;
	Иначе Возврат Ложь;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДКЛЮЧЕНИЯ К СОФТФОН

// Процедура заполняет префиксы и настройки
//
Процедура сфпЗаполнитьПрефиксыИНастройки() Экспорт
	Если сфпСофтФонПроСервер.ИспользуемаяВерсияСофтФона() = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотПроф") Тогда
		сфпСофтФонПроКлиентНативнаяКомпонента.сфпЗаполнитьПрефиксыИНастройкиНативнаяКомпонента();
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПрефиксыИНастройки()	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАПРАВЛЕНИЯ ЗВОНКА

// Функция определяет внутренний или внешний звонок
//
// Параметры:
//	НаправлениеЗвонка	- Число		- Направление звонка
//	НомерТелефона		- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Булево	- Признак внешнего звонка
//
Функция сфпОпределитьВнешнийЗвонок(НаправлениеЗвонка, НомерТелефона) Экспорт 
	Если НаправлениеЗвонка = 3 Тогда // Внешний входящий
		Возврат Истина;
	ИначеЕсли НаправлениеЗвонка = 6 Тогда // Внешний исходящий
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(НомерТелефона) Тогда                  
		НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		сфпПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
		Если ПустаяСтрока(НомерТелефона) Тогда
			Возврат Истина;	
		ИначеЕсли сфпОпределитьВнутреннийЗвонокПоНомеру(НомерТелефона,
			 сфпПараметрыСервера.МаксимальнаяДлинаВнутреннихНомеров) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;	
		КонецЕсли;	
	ИначеЕсли НаправлениеЗвонка = 1 Тогда // Внутренний
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 0 Тогда  // Внешний
		Возврат Истина;	
	Иначе
		Возврат Ложь;  // 4, 5
	КонецЕсли;
КонецФункции // сфпОпределитьВнешнийЗвонок()

// Функция определяет входящий или исходящий звонок
//
// Параметры:
//  НаправлениеЗвонка	 - Число - Состояние звонка
// 
// Возвращаемое значение:
//  Булево - Признак входящего звонка
//
Функция сфпОпределитьВходящийЗвонок(НаправлениеЗвонка) Экспорт
	Если НаправлениеЗвонка = 1 Тогда // Внутренний исходящий
		Возврат Ложь;
	ИначеЕсли НаправлениеЗвонка = 6 Тогда // Внешний исходящий
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции // сфпОпределитьВходящийЗвонок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРОЙ ЗВОНКА

// Функция формирует структуру с данными звонка
//
// Параметры:
//	hCall				- Число			- Идентификатор звонка.
//	LineName			- Строка		- Имя линии.
//	CallerID			- Строка		- Номер звонящего.
//	CallerInfoName		- Строка		- Представление звонящего.
//	CalledId			- Строка		- Номер принимающего звонок.
//	CalledInfoName		- Строка		- Представление принимающего звонок.
//	DopInfo				- Строка		- Дополнительная информация.
//	State				- Число			- Состояние звонка.
//	Origin				- Число			- Направление звонка звонка. (0 – Неопределенно; 1 – Внутренний исходящий;
//											2 – Внутренний входящий; 3 – Внешний входящий; 4 – Недоступно;
//											5 – Конференция; 6 – Входящий)
//	AvailableActions	- Число			- Доступные действия со звонком. Битовая маска (aa_Drop	= $00000001; aa_Answer = $00000002;
//											aa_Hold = $00000004; aa_UnHold = $00000008; aa_Redirect = $00000010; aa_Transfer = $00000020;
//											aa_CompleteTransfer = $00000040; aa_CancelTransfer = $00000080)
//	ContactID			- Строка		- Идентификатор контакта во внешней учетной системе. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	Caller_Destination_Number - Строка - <описание отсутствует>
//	Контакт				- СправочникСсылка	- Ссылка на контакт в ИБ
//	ВходящийЗвонок		- Булево			- Признак входящего звонка
//	ВнешнийЗвонок		- Булево			- Признак внешнего звонка
//	НомерТелефона		- Строка			- Очищенный номер телефона
//	НовыйЗвонок			- ДокументСсылка	- Ссылка на документ "Телефонный звонок"
//	МассивЗвонящих		- Массив из СправочникСсылка - Массив контактов, найденных по номеру телефона
//	НомерЛинии			- Строка			- Номер линии
//	НачалоЗвонка		- Дата				- Начало звонка
//
// Возвращаемое значение:
//	Структура	- Структура с данными звонка
//
Функция сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName, CalledId,
	 CalledInfoName, DopInfo, State,
		Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок, НомерТелефона, НовыйЗвонок,
		МассивЗвонящих, НомерЛинии, НачалоЗвонка = Неопределено) Экспорт
	СтруктураЗвонка = Новый Структура;
	СтруктураЗвонка.Вставить("hCall",						hCall);
	СтруктураЗвонка.Вставить("LineName",					LineName);
	СтруктураЗвонка.Вставить("CallerID",					CallerID);
	СтруктураЗвонка.Вставить("CallerInfoName",				CallerInfoName);
	СтруктураЗвонка.Вставить("CalledId",					CalledId);
	СтруктураЗвонка.Вставить("CalledInfoName",				CalledInfoName);
	СтруктураЗвонка.Вставить("DopInfo",						DopInfo);
	СтруктураЗвонка.Вставить("State",						State);
	СтруктураЗвонка.Вставить("Origin",						Origin);
	СтруктураЗвонка.Вставить("AvailableActions",			AvailableActions);
	СтруктураЗвонка.Вставить("ContactID",					ContactID);
	СтруктураЗвонка.Вставить("Caller_Destination_Number",	Caller_Destination_Number);
	СтруктураЗвонка.Вставить("Контакт",						Контакт);
	СтруктураЗвонка.Вставить("ВходящийЗвонок",				ВходящийЗвонок);
	СтруктураЗвонка.Вставить("ВнешнийЗвонок",				ВнешнийЗвонок);
	СтруктураЗвонка.Вставить("НомерТелефона",				НомерТелефона);
	СтруктураЗвонка.Вставить("НовыйЗвонок",					НовыйЗвонок);
	СтруктураЗвонка.Вставить("МассивЗвонящих",				МассивЗвонящих);
	СтруктураЗвонка.Вставить("ИдентификаторЗаписи",			"");			
	СтруктураЗвонка.Вставить("ЗаписьЗапущена",				Ложь);
	СтруктураЗвонка.Вставить("ВнутреннийНомер",				НомерЛинии);
	СтруктураЗвонка.Вставить("ДатаНачала",					НачалоЗвонка);
	СтруктураЗвонка.Вставить("ДатаОтвета",					'00010101');
	СтруктураЗвонка.Вставить("ДатаОкончания",				'00010101');
	Возврат СтруктураЗвонка;
КонецФункции // сфпСформироватьСтруктуруЗвонка() 	

// Функция возвращает структуру звонка
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка.
//	ВходящийЗвонок - Булево - Признак входящего звонка
//	CallerID - Строка - Номер звонящего.
//	CalledID - Строка - Номер принимающего звонок.
//
// Возвращаемое значение:
//	Структура	- Структура данных звонка
//
Функция сфпНайтиДанныеЗвонка(hCall, ВходящийЗвонок = Неопределено, CallerID = Неопределено,
	 CalledID = Неопределено) Экспорт
	
	Если сфпСтруктураЗвонков = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КлючПоиска = сфпПолучитьКлючПоиска(hCall);

	НайденныйЗвонок	= Неопределено;
	сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок);
	
	Если НайденныйЗвонок = Неопределено И ВходящийЗвонок <> Неопределено Тогда
		Если СтрДлина("" + hCall) > 2 Тогда
			Для к = 1 По 10 Цикл
				КлючПоискаSIP = "_" + Формат(к, "ЧГ=0");
				НайденныйЗвонокSIP = Неопределено;
				сфпСтруктураЗвонков.Свойство(КлючПоискаSIP, НайденныйЗвонокSIP);
				Если НайденныйЗвонокSIP <> Неопределено Тогда
					ЗаменитьЗвонок = Ложь;
					
					Если НайденныйЗвонокSIP.ВходящийЗвонок = ВходящийЗвонок Тогда
						Если Прав(НайденныйЗвонокSIP.CallerID, 10) = Прав(CallerID, 10) Тогда
							ЗаменитьЗвонок = Истина;
						КонецЕсли;

					Иначе	
						Если Прав(НайденныйЗвонокSIP.CalledID, 10) = Прав(CalledID, 10) Тогда
							ЗаменитьЗвонок = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗаменитьЗвонок Тогда
						УдаляемыйhCall = НайденныйЗвонокSIP.hCall;
						НайденныйЗвонокSIP.hCall = hCall;
						сфпСтруктураЗвонков.Вставить(КлючПоиска, НайденныйЗвонокSIP);
						сфпУдалитьДанныеЗвонка(УдаляемыйhCall);
						
						Возврат НайденныйЗвонокSIP;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйЗвонок;

КонецФункции // сфпНайтиДанныеЗвонка()

// Функция возвращает структуру звонка
//
// Параметры:
//	hCall				- Число			- Идентификатор звонка.
//	LineName			- Строка		- Имя линии.
//	Origin				- Число			- Направление звонка звонка. (0 – Неопределенно; 1 – Внутренний исходящий;
//											2 – Внутренний входящий; 3 – Внешний входящий; 4 – Недоступно;
//											5 – Конференция; 6 – Входящий)
//	ВходящийЗвонок		- Булево			- Признак входящего звонка
//	ВнешнийЗвонок		- Булево			- Признак внешнего звонка
//	НомерТелефона		- Строка			- Очищенный номер телефона
//	CallerID			- Строка		- Номер звонящего.
//	CalledId			- Строка		- Номер принимающего звонок.
//	StartDate			- Строка		- Дата начала.
//	AnswerDate			- Строка		- Дата ответа.
//	EndDate				- Строка		- Дата окончания.
//	RecordID			- Строка		- Идентификатор записи.
//	ContactID			- Строка		- Идентификатор контакта.
//	НомерЛинии			- Строка		- Номер линии
//
// Возвращаемое значение:
//	Структура	- Структура данных звонка
//
Функция сфпНайтиЗвонокПоОсновнымДанным(hCall, LineName, Origin, ВходящийЗвонок, ВнешнийЗвонок,
	 НомерТелефона, CallerID, CalledId, StartDate, AnswerDate, EndDate, RecordID, ContactID,
	 НомерЛинии) Экспорт
	
	МассивЗвонящих = Неопределено;
	Контакт = Неопределено;
	State = 0;
	CallerInfoName = "";
	CalledInfoName = "";
	DopInfo = "";
	AppValue = "";
	ImageData = "";
	AvailableActions = "";
	Caller_Destination_Number = "";
	
	сфпЗаполнитьПараметрыЗвонка(ВходящийЗвонок, НомерТелефона, МассивЗвонящих, Контакт, CallerInfoName,
		 CalledInfoName, DopInfo, AppValue, ImageData,
		 ContactID);
	
	СтруктураЗвонка = сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName,
		 CalledId, CalledInfoName, DopInfo,
		State, Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок, НомерТелефона, Неопределено,
		МассивЗвонящих, НомерЛинии);
		
	СтруктураЗвонка.Вставить("ИдентификаторЗаписи", RecordID);
	СтруктураЗвонка.Вставить("ДатаНачала", StartDate);
	СтруктураЗвонка.Вставить("ДатаОтвета", AnswerDate);
	СтруктураЗвонка.Вставить("ДатаОкончания", EndDate);

	СозданЗвонок = Ложь;
	Звонок = сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, Неопределено, СозданЗвонок);
	Если ЗначениеЗаполнено(Звонок) Тогда
		СтруктураЗвонка.НовыйЗвонок = Звонок;
		
		Если СозданЗвонок Тогда
			сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(Звонок, СтруктураЗвонка);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтруктураЗвонка;

КонецФункции // сфпНайтиЗвонокПоОсновнымДанным()

// Функция возвращает структуру звонка
//
// Параметры:
//	Origin		- Число		- Идентификатор звонка.
//	ContactID	- Строка	- Идентификатор контакта.
//	PhoneNumber	- Число		- Номер телефона.
//
// Возвращаемое значение:
//	Структура	- Структура данных звонка
//
Функция сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber) Экспорт
	
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков = Неопределено Тогда
		Возврат НайденныйЗвонок;
	КонецЕсли;
	Если сфпСтруктураЗвонков.Количество() = 0 Тогда
		Возврат НайденныйЗвонок;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из сфпСтруктураЗвонков Цикл
		СтруктураЗвонка	= ЭлементСписка.Значение;
		Если СтруктураЗвонка.ContactID = ContactID Тогда
			НайденныйЗвонок	= СтруктураЗвонка;
			Прервать;
		ИначеЕсли сфпОпределитьВходящийЗвонок(Origin) Тогда
			Если Прав(СтруктураЗвонка.CallerID, 10) = Прав(PhoneNumber, 10) Тогда
				НайденныйЗвонок	= СтруктураЗвонка;
				Прервать;
			КонецЕсли;
		Иначе
			Если СтруктураЗвонка.CalledID = PhoneNumber Тогда
				НайденныйЗвонок	= СтруктураЗвонка;
				Прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат НайденныйЗвонок;

КонецФункции // сфпНайтиЗвонокПоВспомогательнымДанным()

// Процедура обновляет или добавляет данные звонка
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура с данными звонка
//
Процедура сфпОбновитьДанныеЗвонка(СтруктураЗвонка) Экспорт

	КлючПоиска = сфпПолучитьКлючПоиска(СтруктураЗвонка.hCall);

	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков = Неопределено Тогда
		сфпСтруктураЗвонков	= Новый Структура();	
	КонецЕсли;	
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		// Обновляем данные звонка
		Для Каждого КлючИЗначение Из СтруктураЗвонка Цикл
			Если КлючИЗначение.Ключ = "ВнешнийЗвонок" ИЛИ КлючИЗначение.Ключ = "ВходящийЗвонок" Тогда
				НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				
			ИначеЕсли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Если КлючИЗначение.Ключ = "State" ИЛИ 
					 КлючИЗначение.Ключ = "LineName" ИЛИ
					 КлючИЗначение.Ключ = "CallerID" ИЛИ
					 КлючИЗначение.Ключ = "CalledID" ИЛИ
					 КлючИЗначение.Ключ = "AvailableActions" ИЛИ
					 КлючИЗначение.Ключ = "НовыйЗвонок" Тогда
					НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;

				ИначеЕсли НЕ ЗначениеЗаполнено(НайденныйЗвонок[КлючИЗначение.Ключ]) Тогда
					НайденныйЗвонок[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
		    КонецЕсли;
		КонецЦикла;
		
		// Оповещаем внутреннюю панель
		Оповестить("СофтФон_ОбновитьЗвонок", НайденныйЗвонок);          

	ИначеЕсли СтруктураЗвонка.State < 11 Тогда
		// Добавляем новый звонок
		сфпСтруктураЗвонков.Вставить(КлючПоиска, СтруктураЗвонка);
		
		// Оповещаем внутреннюю панель
		Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);
	КонецЕсли;

КонецПроцедуры	// сфпОбновитьДанныеЗвонка()

// Процедура удаляет данные звонка
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка.
//
Процедура сфпУдалитьДанныеЗвонка(hCall) Экспорт
	
	КлючПоиска = сфпПолучитьКлючПоиска(hCall);
	
	НайденныйЗвонок	= Неопределено;
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		сфпСтруктураЗвонков.Удалить(КлючПоиска);
		
		// Оповещаем внутреннюю панель
		Оповестить("СофтФон_УдалитьЗвонок", "" + hCall); 
	КонецЕсли;

КонецПроцедуры // сфпУдалитьДанныеЗвонка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ВНЕШНЕЙ ПАНЕЛИ

// Динамически подключаемый обработчик события "OnCallInfo" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	hCall				- Число			- Идентификатор линии.
//	LineName			- Строка		- Имя линии.
//	LineType			- Строка		- Тип линии.
//	CallerID			- Строка		- Номер звонящего.
//	CallerInfoName		- Строка		- Представление звонящего. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	CalledId			- Строка		- Номер принимающего звонок.
//	CalledInfoName		- Строка		- Представление принимающего звонок. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	State				- Число			- Состояние звонка.
//	Origin				- Число			- Направление звонка звонка. (0 – Неопределенно; 1 – Внутренний исходящий;
//											2 – Внутренний входящий; 3 – Внешний входящий; 4 – Недоступно;
//											5 – Конференция; 6 – Входящий)
//	DopInfo				- Строка		- Дополнительная информация о звонке. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	AvailableActions	- Число			- Доступные действия со звонком. Битовая маска (aa_Drop	= $00000001; aa_Answer = $00000002;
//											aa_Hold = $00000004; aa_UnHold = $00000008; aa_Redirect = $00000010; aa_Transfer = $00000020;
//											aa_CompleteTransfer = $00000040; aa_CancelTransfer = $00000080)
//	AppValue			- Произвольный	- Произвольная, служебная информация, хранимая приложением. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	ImageData			- Строка		- Картинка контакта в формате Base64. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	ContactID			- Строка		- Идентификатор контакта во внешней учетной системе. Возвращаемый параметр.
//											Значение может быть изменено приложением.
//	Caller_Destination_Number	- Строка - Номер, на который пришел входящий (например городской номер организации,
	// на который звонит клиент).
//	NumberOnLine		- Строка		- <описание отсутствует>
//											
Процедура сфпOnCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId,
	 CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID,
	 Caller_Destination_Number = "",
	 NumberOnLine = "") Экспорт
	
	ТекстЗаписи = "hCall: " + hCall + "; State: " + State + "; LineName: " + LineName 
		+ "; NumberOnLine: " + NumberOnLine + "; CallerID: " + CallerID + "; CallerInfoName: " 
		+ CallerInfoName + "; CalledId: " + CalledId + "; CalledInfoName: " + CalledInfoName 
		+ "; DopInfo: " + DopInfo + "; ContactID: " + ContactID + "; Origin: " + Origin 
		+ "; Caller_Destination_Number: " 
		+ Caller_Destination_Number;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnCallInfo", ТекстЗаписи);
	
	ВремяСобытия = сфпСофтФонПроСервер.сфпТекущаяДата();
	
	НомерЛинии = ?(ЗначениеЗаполнено(NumberOnLine), NumberOnLine, LineName);
	НомерЛинии = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерЛинии, Истина);

	НомерCallerID = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(CallerID);
	НомерCalledID = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(CalledID);
		
	ВходящийЗвонок = сфпОпределитьВходящийЗвонок(Origin);
	
	Если ВходящийЗвонок Тогда
		ИсходящийЗвонокНомер = "";
		Если ТипЗнч(сфпДанныеЗаполнения) = Тип("Структура")
			 И сфпДанныеЗаполнения.Свойство("ИсходящийЗвонокНомер", ИсходящийЗвонокНомер) Тогда
			Если (ОбщегоНазначенияКлиент.ДатаСеанса() - сфпДанныеЗаполнения.ИсходящийЗвонокДата) < 60
				И (Прав(НомерCallerID, 7) = Прав(ИсходящийЗвонокНомер, 7) ИЛИ Прав(НомерCalledID,
					 7) = Прав(ИсходящийЗвонокНомер,
					 7)) Тогда
				ВходящийЗвонок = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(?(ВходящийЗвонок,
		 НомерCallerID,
		 НомерCalledID));
	ВнешнийЗвонок = сфпОпределитьВнешнийЗвонок(Origin, НомерТелефона);
	
	ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	ТекНомерЛинии = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь);
	
	НомераЛинийПользователя = сфпСофтФонПроСервер.сфпНомераЛинийПользователя(ТекущийПользователь);
	НомераЛинийПользователя.Добавить(ТекНомерЛинии);
	
	Если СтрДлина(hCall) < 3 Тогда
		Если ВходящийЗвонок И НЕ ЗначениеЗаполнено(НомерCallerID) Тогда
			Возврат;

		ИначеЕсли НЕ ВходящийЗвонок И НЕ ЗначениеЗаполнено(НомерCalledID) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если State <> 0 И НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗвонка	= сфпНайтиДанныеЗвонка(hCall, ВходящийЗвонок, CallerID, CalledID);
	Если СтруктураЗвонка = Неопределено Тогда
		СтруктураЗвонка = сфпИнициализироватьСтруктуруЗвонка(hCall, LineName, LineType, CallerID,
			 CallerInfoName, CalledID, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue,
			 ImageData, ContactID, Caller_Destination_Number,
			 НомерЛинии);

	Иначе
		Если ЗначениеЗаполнено(LineName) Тогда
			СтруктураЗвонка.LineName = LineName;
		КонецЕсли;
		Если ЗначениеЗаполнено(CallerID) Тогда
			СтруктураЗвонка.CallerID = CallerID;
		КонецЕсли;
		Если ЗначениеЗаполнено(CalledID) Тогда
			СтруктураЗвонка.CalledID = CalledID;
		КонецЕсли;
		Если ЗначениеЗаполнено(НомерЛинии) Тогда
			СтруктураЗвонка.ВнутреннийНомер = НомерЛинии;
		КонецЕсли;
		
		СтруктураЗвонка.ВнешнийЗвонок = ВнешнийЗвонок;
		СтруктураЗвонка.ВходящийЗвонок = ВходящийЗвонок;
		СтруктураЗвонка.State = State;
		СтруктураЗвонка.AvailableActions = AvailableActions;
	КонецЕсли;
	
	сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
	
	Если State = 0 Тогда
		// Оповещаем об окончании разговора
		СтруктураОповещения = Новый Структура();
		СтруктураОповещения.Вставить("Звонок", СтруктураЗвонка.НовыйЗвонок);
		СтруктураОповещения.Вставить("ИдентификаторЗвонка", "" + hCall);
		
		Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
			Если ЗначениеЗаполнено(НомерЛинии) Тогда
				  НовыйОтветственный = сфпСофтФонПроСервер.сфпНайтиОтветственного(НомерЛинии);
			Иначе НовыйОтветственный = сфпСофтФонПроСервер.сфпТекущийПользователь();
			КонецЕсли;
			Если ЗначениеЗаполнено(НовыйОтветственный)
				
				 	 И НовыйОтветственный <> сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(СтруктураЗвонка.НовыйЗвонок, "Ответственный") Тогда
				СтруктураОповещения.Вставить("НовыйОтветственный", НовыйОтветственный);
			КонецЕсли;

			Оповестить("СофтФон_КонецРазговора", СтруктураОповещения);
			
			ПараметрыФормы = Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
			
			ИмяФормыЗвонка = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
			Если ЗначениеЗаполнено(ИмяФормыЗвонка) Тогда
				ФормаЗвонка = ПолучитьФорму(ИмяФормыЗвонка, ПараметрыФормы);
				Если НЕ ФормаЗвонка.Открыта() Тогда
					// Записываем в документ время окончания разговора
					Если СтруктураОповещения.Свойство("НовыйОтветственный") Тогда
						  сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонка(СтруктураЗвонка.НовыйЗвонок, НовыйОтветственный);
					Иначе сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонка(СтруктураЗвонка.НовыйЗвонок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Записываем окончание разговора в регистр
			сфпСофтФонПроСервер.сфпЗаписатьОкончаниеЗвонкаВРегистр(СтруктураЗвонка.НовыйЗвонок, hCall);
			
			Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
				// Изменяем таблицу маршрутизации
				сфпСофтФонПроСервер.сфпОбновитьТаблицуМаршрутизации(СтруктураЗвонка.НовыйЗвонок);
			КонецЕсли;
	
		Иначе
			Если СтруктураЗвонка.ВнешнийЗвонок И НЕ СтруктураЗвонка.ВходящийЗвонок Тогда
				СтруктураЗвонка.Вставить("ДатаОтвета", '00010101');
				СтруктураЗвонка.Вставить("ДатаОкончания", ВремяСобытия);
				СтруктураЗвонка.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный"));
				
				НовыйЗвонок	= сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения);
				СтруктураЗвонка.НовыйЗвонок = НовыйЗвонок;
				
				Если ЗначениеЗаполнено(НовыйЗвонок) И ЗначениеЗаполнено(сфпДанныеЗаполнения)
					 И сфпДанныеЗаполнения.Свойство("Взаимодействие") Тогда
					СтруктураОповещения.Вставить("Взаимодействие", сфпДанныеЗаполнения.Взаимодействие);
				КонецЕсли;
			КонецЕсли;
				
			СтруктураОповещения.Вставить("Звонок", СтруктураЗвонка.НовыйЗвонок);

			Оповестить("СофтФон_КонецРазговора", СтруктураОповещения);
		КонецЕсли;	

		// Удаляем звонок
		сфпУдалитьДанныеЗвонка(hCall);
				
		сфпДанныеЗаполнения	= Неопределено;
		
		// Индикатор на Рабочем столе есть только в CRM 3.0
		Если ск_глСтекФормРабочегоСтола <> Неопределено Тогда
			Для Каждого ФормаРабочегоСтола Из ск_глСтекФормРабочегоСтола Цикл
				ЭлементИндикатора = ФормаРабочегоСтола.Значение.Элементы.Найти("сфпИндикаторАктивногоЗвонка");
				Если ЭлементИндикатора <> Неопределено Тогда
					ЭлементИндикатора.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли State = 8 ИЛИ State = 15 Тогда
		Если СтрДлина(hCall) > 2 И ЗначениеЗаполнено(НомерЛинии)
			 И НомераЛинийПользователя.Найти(НомерЛинии) = Неопределено Тогда
			// звонок не нам
			Возврат;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СтруктураЗвонка.НовыйЗвонок) Тогда
			сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
			Возврат;
		КонецЕсли;
		
		СтруктураЗвонка.Вставить("ДатаОтвета", ВремяСобытия);
		
		Если СтруктураЗвонка.НомерТелефона <> НомерТелефона Тогда
			// изменился номер телефона, нужно изменить по нему данные в структуре
			СтруктураЗвонка.НомерТелефона = НомерТелефона;
			
		    Контакт	= Неопределено;
			НовыйЗвонок	= Неопределено;
			
			Если ЗначениеЗаполнено(НомерТелефона) Тогда
				МассивВладельцевКонтактов = Неопределено;
				МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона, МассивВладельцевКонтактов);
				
				сфпЗаполнитьПараметрыЗвонка(ВходящийЗвонок, НомерТелефона, МассивЗвонящих, Контакт,
					 CallerInfoName, CalledInfoName, DopInfo, AppValue, ImageData,
					 ContactID);
				
				СтруктураЗвонка = сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName, CalledId,
					CalledInfoName, DopInfo, State, Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок,
					НомерТелефона, НовыйЗвонок, МассивЗвонящих, НомерЛинии);

				сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId,
					 CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID,
					 Caller_Destination_Number);
			КонецЕсли;
		КонецЕсли;
		
		сфпОбновитьДанныеЗвонка(СтруктураЗвонка);
		
		Если СтруктураЗвонка.ВнешнийЗвонок Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
				Если сфпСофтФонПроСервер.сфпИспользоватьСпрут7() Тогда
					// Передаем команду на запись разговора
					Если НЕ СтруктураЗвонка.ЗаписьЗапущена Тогда
						сфпПанельУправления.StartRecord(СтруктураЗвонка.LineName, СтруктураЗвонка.hCall);	
						СтруктураЗвонка.Вставить("ЗаписьЗапущена", Истина);
					КонецЕсли;								
				КонецЕсли;	
			КонецЕсли;																											
			
			СозданЗвонок = Ложь;
			НовыйЗвонок	= сфпСофтФонПроСервер.сфпСоздатьТелефонныйЗвонок(СтруктураЗвонка, сфпДанныеЗаполнения, СозданЗвонок);
			Если ЗначениеЗаполнено(НовыйЗвонок) И СозданЗвонок Тогда
				сфпВыполнитьДействияПослеЗаписиТелефонногоЗвонка(НовыйЗвонок, СтруктураЗвонка);
				
				Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
					  КонтактПредставление = СокрЛП(СтруктураЗвонка.Контакт);
				Иначе КонтактПредставление = CallerInfoName;
				КонецЕсли;
				СтруктураЗвонка.Вставить("КонтактПредставление", КонтактПредставление);
				
				сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка);
			КонецЕсли;
		КонецЕсли;
		
		// Оповещаем внутреннюю панель
		Оповестить("СофтФон_ОбновитьЗвонок", СтруктураЗвонка);          

		// Индикатор на Рабочем столе есть только в CRM 3.0
		Если ск_глСтекФормРабочегоСтола <> Неопределено Тогда
			Для Каждого ФормаРабочегоСтола Из ск_глСтекФормРабочегоСтола Цикл
				ЭлементИндикатора = ФормаРабочегоСтола.Значение.Элементы.Найти("сфпИндикаторАктивногоЗвонка");
                Если ЭлементИндикатора <> Неопределено Тогда
					ЭлементИндикатора.Видимость = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	Иначе
		CallerInfoName = СтруктураЗвонка.CallerInfoName;
		CalledInfoName = СтруктураЗвонка.CalledInfoName;
		DopInfo = СтруктураЗвонка.DopInfo;
		
		Если ЗначениеЗаполнено(ImageData) Тогда
			сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId,
				 CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, "", ContactID,
				 Caller_Destination_Number);
		КонецЕсли;
		
		сфпПанельУправления.SetCallInfo(hCall, LineName, LineType, CallerID, CallerInfoName, CalledId,
			 CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID,
			 Caller_Destination_Number);
		
		// Индикатор на Рабочем столе есть только в CRM 3.0
		Если ск_глСтекФормРабочегоСтола <> Неопределено Тогда
			Для Каждого ФормаРабочегоСтола Из ск_глСтекФормРабочегоСтола Цикл
				ЭлементИндикатора = ФормаРабочегоСтола.Значение.Элементы.Найти("сфпИндикаторАктивногоЗвонка");
                Если ЭлементИндикатора <> Неопределено Тогда
					ЭлементИндикатора.Видимость = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпOnCallInfo()

// Динамически подключаемый обработчик события "OnEvent" внешней панели
//  Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//  EventType	 - Число - Тип события (-1 – Таймер; -2 – Изменились настройки; 0 – Автоматический при ответе на звонок;
//  1 – Ручной вызов для создания события;	Прочие при регистрации событий из 1С)
//  hCall		 - Число - Идентификатор звонка.
//  Origin		 - Число - Направление звонка звонка (0 – Неопределенно; 1 – Внутренний исходящий; 2 – Внутренний входящий;
//  3 – Внешний входящий; 4 – Недоступно; 5 – Конференция; 6 – Входящий)
//  StartDate	 - Строка	 - Дата начала.
//  AnswerDate	 - Строка	 - Дата ответа.
//  EndDate		 - Строка	 - Дата окончания.
//  PhoneNumber	 - Строка	 - Номер телефона контакта
//  RecordID	 - Строка	 - Идентификатор записи.
//  ContactID	 - Строка	 - Идентификатор контакта во внешней учетной системе
//  ContactName	 - Строка			 - Имя контакта
//
Процедура сфпOnEvent(EventType, hCall = "", Origin, StartDate = "", AnswerDate = "", EndDate = "",
	 PhoneNumber, RecordID = "", ContactID,
	 ContactName) Экспорт
	
	ТекстЗаписи = "EventType: " + EventType + "; hCall: " + hCall + "; Origin: " + Origin 
		+ "; StartDate: " + StartDate + "; AnswerDate: " 
		+ AnswerDate
	+ "; EndDate: " + EndDate + "; PhoneNumber: " + PhoneNumber + "; RecordID: " + RecordID 
		+ "; ContactID: " + ContactID + "; ContactName: " 
		+ ContactName;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnEvent", ТекстЗаписи);
	
	Если EventType = -2 Тогда
		// Событие изменения номера основной линии
		сфпЗаполнитьПрефиксыИНастройки();

	ИначеЕсли EventType = -1 Тогда
		// Событие таймера, для обновления истории звонков

	ИначеЕсли EventType = 0 Тогда
		// Событие ответа на звонок панели управления

	ИначеЕсли EventType = 1 Тогда
		// Событие нажатия кнопки "Передать в 1С" Панели СофтФон
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		Если ЗначениеЗаполнено(СтруктураЗвонка) Тогда
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьАвтоматическоеДействие(СтруктураЗвонка, Истина);
		КонецЕсли;

	Иначе
		// Прочие события, выбранные пользователем в Панели СофтФон
		НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(PhoneNumber);
		ВнешнийЗвонок = сфпОпределитьВнешнийЗвонок(Origin, НомерТелефона);
		Если НЕ ВнешнийЗвонок Тогда
			Возврат;
		КонецЕсли;
		
		ВходящийЗвонок = сфпОпределитьВходящийЗвонок(Origin);
		НомерЛинии = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(сфпСофтФонПроСервер.сфпТекущийПользователь());
	
		Если ВходящийЗвонок Тогда
			CallerID = PhoneNumber;
			CalledID = НомерЛинии;

		Иначе
			CallerID = НомерЛинии;
			CalledID = PhoneNumber;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(hCall) Тогда
			СтруктураЗвонка = сфпНайтиДанныеЗвонка(hCall, ВходящийЗвонок, CallerID, CalledID);
			Если СтруктураЗвонка = Неопределено Тогда
				StartDate = ?(ЗначениеЗаполнено(StartDate), Дата(StartDate), '00010101');
				AnswerDate = ?(ЗначениеЗаполнено(AnswerDate), Дата(AnswerDate), '00010101');
				EndDate = ?(ЗначениеЗаполнено(EndDate), Дата(EndDate), '00010101');
		
				СтруктураЗвонка = сфпНайтиЗвонокПоОсновнымДанным(hCall, НомерЛинии, Origin, ВходящийЗвонок,
					 ВнешнийЗвонок, НомерТелефона, CallerID, CalledId, StartDate, AnswerDate, EndDate, RecordID,
					 ContactID,
					 НомерЛинии);
			КонецЕсли;
		
		Иначе
			СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		КонецЕсли;
		
		Если СтруктураЗвонка = Неопределено Тогда
			СтруктураЗвонка = сфпИнициализироватьСтруктуруЗвонка(hCall, "", "", CallerID, "", CalledID, "",
				 0, Origin, "", 0, "", "", ContactID, "", "",
				 ОбщегоНазначенияКлиент.ДатаСеанса());
			СтруктураЗвонка.Вставить("НовыйЗвонок", ПредопределенноеЗначение("Документ.ТелефонныйЗвонок.ПустаяСсылка"));
		КонецЕсли;
		
		Если СтруктураЗвонка <> Неопределено Тогда
			Если ТипЗнч(СтруктураЗвонка) = Тип("Структура") Тогда
				СтруктураЗвонка.Вставить("ФормаПолучена", Ложь);
			КонецЕсли;

			Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
				  СтруктураЗвонка.Вставить("КонтактПредставление", "" + СтруктураЗвонка.Контакт);
			Иначе СтруктураЗвонка.Вставить("КонтактПредставление", ContactName);
			КонецЕсли;
			
			сфпСофтФонПроКлиентПереопределяемый.сфпВыполнитьДоступноеДействие(EventType, СтруктураЗвонка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпOnEvent()

// Динамически подключаемый обработчик события "OnRecordInfo" внешней панели
//  Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//  RecordEventType		 - Число - Тип события
//  hCall				 - Число - Идентификатор звонка. Может быть = 0.
//  LineID				 - Строка	 - Имя линии, на которой происходит звонок. Может быть = "".
//  RecordID			 - Строка	 - Идентификатор записи
//  TimeStart			 - ДатаВремя - Время начала записи
//  DurationTalk		 - Число	 - Продолжительность записи в секундах.
//  FileName			 - Строка	 - Имя файла звонка. Может быть = "".
//  ResultDescription	 - Строка	 - Описание ошибки. Может быть = "".
//
Процедура сфпOnRecordInfo(RecordEventType, hCall, LineID, RecordID, TimeStart, DurationTalk,
	 FileName,
	 ResultDescription) Экспорт
	
	ТекстЗаписи = "hCall: " + hCall + "; LineID: " + LineID + "; RecordEventType: " + RecordEventType 
		+ "; RecordID: " + RecordID + "; FileName: " + FileName + "; ResultDescription: " 
		+ ResultDescription;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnRecordInfo", ТекстЗаписи);

	Если НЕ сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
		Возврат;
	КонецЕсли;
	
	Если RecordEventType = 0 Тогда
		// Запись остановлена
		ПоказатьПредупреждение(, ResultDescription, 5);

	ИначеЕсли RecordEventType = 1 Тогда
		Если ЗначениеЗаполнено(RecordID) Тогда
			// Запись запущена
			СтруктураЗвонка	= сфпНайтиДанныеЗвонка(hCall);
			Если СтруктураЗвонка = Неопределено Тогда
				  Звонок = Неопределено;
			Иначе Звонок = СтруктураЗвонка.НовыйЗвонок;
			КонецЕсли;
				
			// Записываем в регистр истории звонков идентификатор записи
			сфпСофтФонПроСервер.сфпЗаписатьИдентификаторЗаписиВРегистр(Звонок, hCall, RecordID);

			Если СтруктураЗвонка <> Неопределено Тогда
				// Для системы записей CLON передаём в структуру идентификатор
				СтруктураЗвонка.Вставить("ИдентификаторЗаписи", RecordID);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли RecordEventType = 2 Тогда
		// Файл записи сохранен
		Если ПустаяСтрока(FileName) Тогда
			FileName = сфпПолучитьИмяФайлаЗаписиРазговора(RecordID);
		КонецЕсли;	
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);	
			НачатьЗапускПриложения(ОписаниеОповещения, FileName);
		Исключение
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
		
	ИначеЕсли RecordEventType = 3 Тогда
		Если ЗначениеЗаполнено(ResultDescription) Тогда
			  ТекстСообщения = ResultDescription;
		Иначе ТекстСообщения = "Файл записи пока отсутствует. Попробуйте позже.";
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // сфпOnRecordInfo()

// Динамически подключаемый обработчик события "OnEvent" внешней панели
//  Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//  ПараметрыЛиний	 - COMSafeArray	 - Массив описания состояния линий
//
Процедура сфпOnAllLinesInfo(ПараметрыЛиний) Экспорт

	Если сфпСоответствиеЛинийИСтатусов = Неопределено Тогда
		сфпСоответствиеЛинийИСтатусов = Новый Соответствие();
	КонецЕсли;

	МассивЛиний = Новый Массив();
	Для Каждого ЭлементМассива Из ПараметрыЛиний Цикл
		ТекСтатус = СтатусПользователяЛинии(ЭлементМассива);
		Если ТекСтатус = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		сфпСоответствиеЛинийИСтатусов.Вставить(ЭлементМассива.Number, ТекСтатус);
	КонецЦикла;
	
	Оповестить("сфпПерезаполнитьСтатусыЛиний");
	Оповестить("СофтФон_OnAllLinesInfo", МассивЛиний);

КонецПроцедуры // сфпOnAllLinesInfo()

// Динамически подключаемый обработчик события "OnResultInfo" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	OperationName				- Строка	- Наименование операции
//	OperationResult				- Число		- Результат. Успешное выполнение, если = 0
//  OperationResultDescription	- Строка	- Описание результата
//	DopInfo						- Строка	- Дополнительная информация
//
Процедура сфпOnResultInfo(OperationName, OperationResult, OperationResultDescription, DopInfo) Экспорт
	
	ТекстЗаписи = "OperationName: " + OperationName + "; OperationResult: " + OperationResult 
		+ "; OperationResultDescription: " + OperationResultDescription + "; DopInfo: " 
		+ DopInfo;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnResultInfo", ТекстЗаписи);

	Если OperationName = "Autorization" Тогда
		Если OperationResult = 0 Тогда	// Нет ошибки
			сфпЗаполнитьПрефиксыИНастройки(); // Получаем настройки сервера СофтФон
		ИначеЕсли OperationResult = 1 Тогда	// Неверный пароль
			сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(OperationResultDescription);
		ИначеЕсли OperationResult = 2 Тогда	// Пользователь не найден
			сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(OperationResultDescription);
			Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер") Тогда
				ЛогинСофтфон 	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЛогинНаСерверСофтФон");
				ПарольСофтфон 	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПарольНаСерверСофтФон");
				НомерСофтфон	= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпТекущийВнутреннийНомер");
				сфпПанельУправления.Registration(ЛогинСофтфон, ПарольСофтфон, НомерСофтфон, "", "", 1);
				сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(Нстр("ru='Регистрация нового пользователя...'"));
			КонецЕсли;
		ИначеЕсли OperationResult = 3 Тогда	// Отказано в самостоятельной регистрации пользователя
			сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(OperationResultDescription);
		ИначеЕсли OperationResult = 4 Тогда	// Пользователь уже зарегистрирован		
			сфпОбщегоНазначенияКлиентСервер.сфпСообщитьПользователю(OperationResultDescription);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Подключаемый_OnResultInfo()

// Динамически подключаемый обработчик события "OnEventData" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	LineName	- Строка	- Имя линии
//  DataType	- Число		- Тип данных
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnEventData(LineName, DataType, StrData) Экспорт
	
	ТекстЗаписи = "LineName: " + LineName + "; DataType: " + DataType + "; StrData: " + StrData;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnEventData", ТекстЗаписи);

	Если (DataType = 51) ИЛИ (DataType = 52) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			Если ПустаяСтрока(StrData) Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураВнешнихДанных = сфпПолучитьСтруктуруВнешнихДанных(StrData);
			Origin = 0;
			ContactID = "";
			PhoneNumber = Прав(СтруктураВнешнихДанных.ani, 10);
			СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
			Если СтруктураЗвонка = Неопределено Тогда
				// Сохраняем данные CoMagic в структуре заполнения
				Если сфпДанныеЗаполнения = Неопределено Тогда
					сфпДанныеЗаполнения = Новый Структура;
					сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);

				Иначе
					Если сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
						сфпДанныеЗаполнения.Удалить("СтруктураCoMagic");
					КонецЕсли;

					сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
				КонецЕсли;	

			Иначе	
				// Оповещаем о структуре CoMagic
				СтруктураОповещения = Новый Структура();
				СтруктураОповещения.Вставить("Звонок", СтруктураЗвонка.НовыйЗвонок);
				СтруктураОповещения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
				Оповестить("Софтфон_CoMagic", СтруктураОповещения);
				
				// Записываем структуру CoMagic в телефонный звонок
				ИмяФормыДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
				Если ЗначениеЗаполнено(ИмяФормыДокументаТелефонныйЗвонок) Тогда
					ПараметрыФормы = Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
					ФормаЗвонка = ПолучитьФорму(ИмяФормыДокументаТелефонныйЗвонок, ПараметрыФормы);
					Если НЕ ФормаЗвонка.Открыта() Тогда
						сфпСофтФонПроСервер.сфпЗаписатьСтруктуруCoMagic(СтруктураЗвонка.НовыйЗвонок, СтруктураВнешнихДанных);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // сфпOnEventData()

// Динамически подключаемый обработчик события "OnCallInfoCoMagic" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	LineName	- Строка	- Имя линии
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnCallInfoCoMagic(LineName, StrData) Экспорт
	
	ТекстЗаписи = "LineName: " + LineName + "; StrData: " + StrData;
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("OnCallInfoCoMagic", ТекстЗаписи);
	
	Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
		Если ПустаяСтрока(StrData) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураВнешнихДанных = сфпПолучитьСтруктуруВнешнихДанных(StrData);
		
		Origin = 0;
		ContactID = "";
		PhoneNumber = Прав(СтруктураВнешнихДанных.ani, 10);
		
		// Сохраняем данные CoMagic в структуре заполнения
		Если сфпДанныеЗаполнения = Неопределено Тогда
			сфпДанныеЗаполнения = Новый Структура;
			сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
			
		Иначе
			Если сфпДанныеЗаполнения.Свойство("СтруктураCoMagic") Тогда
				сфпДанныеЗаполнения.Удалить("СтруктураCoMagic");
			КонецЕсли;	
			
			сфпДанныеЗаполнения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
		КонецЕсли;
			
		СтруктураЗвонка	= сфпНайтиЗвонокПоВспомогательнымДанным(Origin, ContactID, PhoneNumber);
		Если СтруктураЗвонка <> Неопределено Тогда
			// Оповещаем о структуре CoMagic
			СтруктураОповещения = Новый Структура();
			СтруктураОповещения.Вставить("Звонок", СтруктураЗвонка.НовыйЗвонок);
			СтруктураОповещения.Вставить("СтруктураCoMagic", СтруктураВнешнихДанных);
			Оповестить("Софтфон_CoMagic", СтруктураОповещения);
			
			ИмяФормыДокументаТелефонныйЗвонок = сфпСофтФонПроСервер.сфпИмяФормыДокументаТелефонныйЗвонок();
			Если ЗначениеЗаполнено(ИмяФормыДокументаТелефонныйЗвонок) Тогда
				ПараметрыФормы = Новый Структура("Ключ", СтруктураЗвонка.НовыйЗвонок);
				ФормаЗвонка	= ПолучитьФорму(ИмяФормыДокументаТелефонныйЗвонок, ПараметрыФормы);
				Если НЕ ФормаЗвонка.Открыта() Тогда
					// Записываем в документ структуру CoMagic
					сфпСофтФонПроСервер.сфпЗаписатьСтруктуруCoMagic(СтруктураЗвонка.НовыйЗвонок, СтруктураВнешнихДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпOnCallInfoCoMagic()

// Динамически подключаемый обработчик события "сфпOnLinesStatus" внешней панели
// Отсутствие ссылок на процедуру не является ошибкой!
//
// Параметры:
//	StrData		- Строка	- Строковые данные
//
Процедура сфпOnLinesStatus(StrData) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(StrData) Тогда
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(StrData);
		ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ДанныеJSON.Свойство("lines") Тогда
			ТекЛинии = Новый Соответствие();
			
			Для Каждого ТекЛиния Из ДанныеJSON.lines Цикл
				ТекСтатус = СтатусПользователяЛинии(ТекЛиния);
				Если ТекСтатус = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекЛинии.Вставить(ТекЛиния.Number, ТекСтатус);
				сфпСоответствиеЛинийИСтатусов.Вставить(ТекЛиния.Number, ТекСтатус);
			КонецЦикла;
			
			Оповестить("СофтФон_OnLinesStatus", ТекЛинии);
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры // сфпOnLinesStatus()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ЗВОНКА 

// Процедура - обработчик ответа на вопрос о совершении международного звонка
//
// Параметры:
//	ОтветНаВопрос			- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпВыполнитьМеждународныйЗвонок(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда	
		ДополнительныеПараметры.Вставить("МеждународныйЗвонок", Истина);						
		сфпВыполнитьЗвонок(ДополнительныеПараметры);
	КонецЕсли;	
КонецПроцедуры // ВыполнитьМеждународныйЗвонок()

// Процедура выполняет звонок по номеру телефона
//
// Параметры:
//  Телефон						 - Строка	 - Номер телефона
//  Объект						 - СправочникСсылка	 - Контакт
//  ДопПараметры				 - Структура		 - Данные для заполнения создаваемого телефонного звонка
//  ЗадержкаДобавочногоНомера	 - Число			 - <Описание отсутствует>
//  ПрефиксНабора				 - Стркоа			 - Префикс набора номера
// 
// Возвращаемое значение:
//  Булево - Успешность выполнения звонка
//
Функция сфпПозвонить(Телефон, Объект = Неопределено, ДопПараметры = Неопределено,
	 ЗадержкаДобавочногоНомера = 0,
	 ПрефиксНабора = Неопределено) Экспорт
	
	Если ПустаяСтрока(Телефон) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран номер телефона!'"), 5);
		Возврат Ложь;
		
	ИначеЕсли сфпСофтФонПроСервер.ИспользуемаяВерсияСофтФона() <> ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
		Если НЕ сфпПроверитьДоступностьСофтФон(Истина) Тогда
			Возврат Ложь;
			
		Иначе
			сфпЗаполнитьПрефиксыИНастройки();
		КонецЕсли;	

	ИначеЕсли Телефон = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер() Тогда
		Возврат Ложь;
	КонецЕсли;	

	СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	Если Не ЗначениеЗаполнено(ПрефиксНабора) Тогда
		Телефон = сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
	Иначе
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Телефон);
	КонецЕсли;
	
	ДанныеЗаполнения = Неопределено;
	Если ЗначениеЗаполнено(ДопПараметры) И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ДанныеЗаполнения") Тогда
			ДанныеЗаполнения = ДопПараметры.ДанныеЗаполнения;
			
		ИначеЕсли ДопПараметры.Свойство("Основание") Тогда
			ДанныеЗаполнения = ДопПараметры;	
		КонецЕсли;
	КонецЕсли;
	
	// BSLLS:UnusedLocalVariable-off
	сфпДанныеЗаполнения = ДанныеЗаполнения;
	// BSLLS:UnusedLocalVariable-on
	
	ДобавочныйНомер = СтруктураНомера.Добавочный;
	
	Если ПрефиксНабора = Неопределено И ЗначениеЗаполнено(Объект) Тогда
		СписокКонтактов = Новый СписокЗначений();
		СписокКонтактов.Добавить(Объект);
		СписокТелефонов = сфпЗаполнитьСписокТелефонов(СписокКонтактов);
		Для Каждого ЭлементСписка Из СписокТелефонов Цикл
			Если ЗначениеЗаполнено(ЭлементСписка.Значение.ПрефиксНабора) Тогда
				СтруктураНомера	=
					сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭлементСписка.Значение.Телефон);
				ТелефонКонтакта = сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
				Если ТелефонКонтакта = Телефон Тогда
					ПрефиксНабора = ЭлементСписка.Значение.ПрефиксНабора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Телефон", Телефон);
	ДополнительныеПараметры.Вставить("ДобавочныйНомер", ДобавочныйНомер);
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект", Объект);
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ДополнительныеПараметры.Вставить("ЗадержкаДобавочногоНомера", ЗадержкаДобавочногоНомера);
	ДополнительныеПараметры.Вставить("ПрефиксНабора", СокрЛП(ПрефиксНабора));
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("CRM_КонтекстВызова") Тогда
			ДополнительныеПараметры.Вставить("CRM_КонтекстВызова", ДанныеЗаполнения.CRM_КонтекстВызова);
		ИначеЕсли  ДанныеЗаполнения.Свойство("Основание") Тогда
			ДополнительныеПараметры.Вставить("CRM_КонтекстВызова", ДанныеЗаполнения.Основание);
		КонецЕсли;
	Иначе
		ДополнительныеПараметры.Вставить("CRM_КонтекстВызова", Объект);
	КонецЕсли;
	
	// Если СтрДлина(Телефон) > 10 Тогда
	//	ОповещениеОтвета = Новый ОписаниеОповещения("сфпВыполнитьМеждународныйЗвонок",
		// сфпСофтФонПроКлиент,
		// ДополнительныеПараметры);
	//	ТекстЗаголовка	= НСтр("ru='ВНИМАНИЕ!!! Выполняется звонок в другую страну'");
	//	ТекстВопроса	= НСтр("ru = 'ВОЗМОЖНО!!! Телефонный номер набран неверно
    //                            |Подтвердите выполнение международного звонка'");
	//	СписокКнопок = Новый СписокЗначений;
	//	СписокКнопок.Добавить(КодВозвратаДиалога.Да,	НСтр("ru='Набрать номер'"));
	//	СписокКнопок.Добавить(КодВозвратаДиалога.Нет,	НСтр("ru='Отменить'"));
	//	ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, СписокКнопок, 30, КодВозвратаДиалога.Нет,
		// ТекстЗаголовка,
		// КодВозвратаДиалога.Нет);

	// Иначе
		Возврат сфпВыполнитьЗвонок(ДополнительныеПараметры);
	//КонецЕсли;
	
	Возврат Ложь;

КонецФункции // сфпПозвонить()	

// Процедура - обработчик оповещения для выполнения звонка
//
// Параметры:
//	ВыбранныйНомер			- ЭлементСпискаЗначений	- Выбранный номер
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпВыполнитьЗвонокПоНомеру(ВыбранныйНомер, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйНомер = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран номер телефона!'"), 5);
		Возврат;
	КонецЕсли;
	
	ПараметрыТелефона = ВыбранныйНомер.Значение;
	сфпПозвонить(ПараметрыТелефона.Телефон, ПараметрыТелефона.Контакт,
		 ДополнительныеПараметры.ДанныеЗаполнения, ПараметрыТелефона.ЗадержкаДобавочногоНомера,
		 ПараметрыТелефона.ПрефиксНабора);
	
КонецПроцедуры // сфпВыполнитьЗвонокПоНомеру()

// Процедура выполняет звонок после выбора номера телефона из списка номеров
//
// Параметры:
//	СписокОбъектов			- СписокЗначений	- Список объектов, для которых выбираются телефоны
//	ДанныеЗаполнения		- Структура			- Данные для заполнения создаваемого события
//
Процедура сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения = Неопределено) Экспорт
	Если СписокОбъектов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран абонент'"), 5);
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	СписокТелефонов = сфпЗаполнитьСписокТелефонов(СписокОбъектов);	
	Если СписокТелефонов.Количество() = 1 Тогда
		сфпВыполнитьЗвонокПоНомеру(СписокТелефонов[0], ДополнительныеПараметры);
	Иначе	
		ОписаниеВыбора = Новый ОписаниеОповещения("сфпВыполнитьЗвонокПоНомеру", сфпСофтФонПроКлиент, ДополнительныеПараметры); 
		СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выбор телефона'"));
	КонецЕсли;
КонецПроцедуры // сфпПозвонитьВыбравТелефон()	

/////////////////////////////////////////////////
// ЗВОНОК

// Функция проверяет строку на пустоту
//
// Параметры:
//	ВыбСтрока		- Строка	- Проверяемая строка
//	ПризнакЗапятой  - Булево	- Признак добавления запятой
//
// Возвращаемое значение:
//	Строка	- Строка после проверки
//
Функция сфпПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой = Истина) Экспорт
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой, ",", "") + " ";
	КонецЕсли; 
КонецФункции // сфпПроверкаПустойСтроки()

// Функция определяет внутренний или внешний звонок исходя
//  из длины переданного номера телефона, и максимальной длины внутреннего номера 
//  телефона установленного в системе. Если длина номера > 0 И <= макс, то это внутренний
//
// Параметры:
//	НомерТелефона						- Строка	- Номер телефона
//	МаксимальнаяДлинаВнутреннегоНомера	- Число		- Максимальная длина внутреннего номера
//
// Возвращаемое значение:
//	Булево	- Признак внутреннего звонка
//
Функция сфпОпределитьВнутреннийЗвонокПоНомеру(НомерТелефона, МаксимальнаяДлинаВнутреннегоНомера) Экспорт
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
	ДлинаНомераТелефона = СтрДлина(НомерТелефона);
	Возврат (ДлинаНомераТелефона <= МаксимальнаяДлинаВнутреннегоНомера);
КонецФункции // сфпОпределитьВнутреннийЗвонокПоНомеру()

// Функция формирует структуру телефонного звонка по контактной информации,
//  если значение неопределено, то создает пустую структуру, сделано для удобства
//  создание структуры в одном месте
//
// Параметры:
//	ТекущаяСтрока	- СтрокаТабличнойЧасти	- Строка контактной информации
//
// Возвращаемое значение:
//	СтруктураНомера	- Структура телефонного номера
//
Функция сфпСформироватьСтруктуруНомераИзПолей(ТекущаяСтрока = Неопределено) Экспорт
	СтруктураТелефона = Новый Структура;
	Если ТекущаяСтрока = Неопределено Тогда
		СтруктураТелефона.Вставить("НомерТелефона", 	"");
		СтруктураТелефона.Вставить("Добавочный",    	"");
		СтруктураТелефона.Вставить("КодГорода",     	"");
		СтруктураТелефона.Вставить("КодСтраны",     	"");
		СтруктураТелефона.Вставить("Представление",		"");
	Иначе
		СтруктураТелефона = сфпПреобразоватьСтрокуВСписокПолей(ТекущаяСтрока.ЗначенияПолей);
	КонецЕсли;
	сфпСформироватьПредставлениеТелефонаПоСтруктуре(СтруктураТелефона);
	Возврат СтруктураТелефона;
КонецФункции // сфпСформироватьСтруктуруНомераИзПолей()	

// Функция преобразовывает строку полей в список значений
//
// Параметры:
//	СтрокаПолей	- Строка	- Строка, содержащая контактную информацию
//
// Возвращаемое значение:
//	СписокЗначений	- Список полей контактной информации
//
Функция сфпПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт 
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
		Если Лев(Стр, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
			КонецЕсли;
		Иначе
			Поз = СтрНайти(Стр, "=");
			Если Поз <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз + 1), Лев(Стр, Поз - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // сфпПреобразоватьСтрокуВСписокПолей()

// Процедура формирует строковое представление адреса
//
// Параметры:
//	СтруктураТелефона	- Структура	- Структура телефонного номера
//
Процедура сфпСформироватьПредставлениеТелефонаПоСтруктуре(СтруктураТелефона) Экспорт
	Если ПустаяСтрока(СтруктураТелефона.НомерТелефона) Тогда
		// Если не заполнено поле НомерТелефона, то принудительно скидываем представление,
		// потому что код страны и код города явно мало для создания номера.
		СтруктураТелефона.КодСтраны = "";
		СтруктураТелефона.КодГорода = "";
		СтруктураТелефона.Представление = "";
	Иначе	
		СтруктураТелефона.Представление = СокрЛП(СтруктураТелефона.КодСтраны);
		Если НЕ ПустаяСтрока(СтруктураТелефона.КодГорода) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление 
				+ ?(ПустаяСтрока(СтруктураТелефона.Представление), "", " ") + "(" + СокрЛП(СтруктураТелефона.КодГорода) 
				+ ")";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураТелефона.НомерТелефона) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление 
				+ ?(ПустаяСтрока(СтруктураТелефона.Представление), "", " ") + СокрЛП(СтруктураТелефона.НомерТелефона);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураТелефона.Добавочный) Тогда
			СтруктураТелефона.Представление = СтруктураТелефона.Представление 
				+ ?(ПустаяСтрока(СтруктураТелефона.Представление), "", ", ") + НСтр("ru='доб. '") 
					+ СокрЛП(СтруктураТелефона.Добавочный);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // сфпСформироватьПредставлениеТелефонаПоСтруктуре()

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Функция возвращает список телефонов объектов из списка
//
// Параметры:
//	СписокОбъектов	- СписокЗначений	- Список объектов, для которых выбираются телефоны
//
// Возвращаемое значение:
//	СписокЗначений	- Список телефонов объектов
//
Функция сфпЗаполнитьСписокТелефонов(СписокОбъектов) Экспорт
	
	СписокТелефонов = Новый СписокЗначений();
	
	Для Каждого СтрокаКонтакт Из СписокОбъектов Цикл
		ТелефоныКонтакта = сфпСофтФонПроСервер.сфпПолучитьМассивТелефоновИФаксов(СтрокаКонтакт.Значение);
		Для Каждого Телефон Из ТелефоныКонтакта Цикл
			ПараметрыТелефона = Новый Структура();
			ПараметрыТелефона.Вставить("Контакт", Телефон.Объект);
			ПараметрыТелефона.Вставить("Владелец", СтрокаКонтакт.Значение);
			ПараметрыТелефона.Вставить("Телефон", Телефон.Представление);
			ПараметрыТелефона.Вставить("ЗадержкаДобавочногоНомера", Телефон.ЗадержкаДобавочногоНомера);
			ПараметрыТелефона.Вставить("ПрефиксНабора", Телефон.ПрефиксНабора);
						
			Отступ = "";
			Если СтрокаКонтакт.Значение <> Телефон.Объект Тогда
				Отступ = "  ";
			КонецЕсли;	
			
			СписокТелефонов.Добавить(ПараметрыТелефона, Отступ + СокрЛП(Телефон.Вид) + ": " + Телефон.Представление 
				+ ?(ЗначениеЗаполнено(Телефон.Объект)
				 И Телефон.Объект <> СтрокаКонтакт.Значение, ", " + Телефон.Объект, ""));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокТелефонов;

КонецФункции // сфпЗаполнитьСписокТелефонов()

/////////////////////////////////////////////////
// ОБЩИЕ ТЕЛЕФОННЫЕ КНИГИ СЕРВЕРА СОФТФОН

// Процедура записывает телефонную книгу на сервере СофтФон
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//
Процедура сфпЗаписатьТелефоннуюКнигу(СтруктураКниги) Экспорт
	
	Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) ИЛИ сфпПанельУправления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТелефоннойКниги = сфпСофтФонПроСервер.сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Ложь);
	Если ПустаяСтрока(ОписаниеТелефоннойКниги) Тогда
		Возврат;
	КонецЕсли;
	
	СтрОшибки = "";
	
	Попытка
		сфпПанельУправления.PutAddressBooks(ОписаниеТелефоннойКниги, СтрОшибки);
	Исключение
		СтрОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ВРЕГ(СтрОшибки) <> "OK" И ЗначениеЗаполнено(СтрОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОшибки);
	КонецЕсли;

КонецПроцедуры // сфпЗаписатьТелефоннуюКнигу()

// Процедура удаляет телефонную книгу на сервере СофтФон
//
// Параметры:
//	СтруктураКниги	- Структура	- Структура телефонной книги
//
Процедура сфпУдалитьТелефоннуюКнигу(СтруктураКниги) Экспорт
	Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеТелефоннойКниги = сфпСофтФонПроСервер.сфпСформироватьОписаниеТелефоннойКниги(СтруктураКниги, Истина);
	ОписаниеОшибки = "";
    // BSLLS:MissingCodeTryCatchEx-off
	Попытка
		сфпПанельУправления.PutAddressBooks(ОписаниеТелефоннойКниги, ОписаниеОшибки);
	Исключение
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	Если НЕ (ОписаниеОшибки = "Ok") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;	
КонецПроцедуры // сфпУдалитьТелефоннуюКнигу()

/////////////////////////////////////////////////
// СОСТОЯНИЯ ЛИНИЙ

// Функция возвращает номер телефона в котором убраны все символы, кроме цифр
//
// Параметры:
//	НомерТелефона	- Строка	- Номер телефона
//
// Возвращаемое значение:
//	Строка	- Очищенный номер телефона
//
Функция УбратьИзВнутреннегоНомераПрефиксы(НомерТелефона) Экспорт

	ПозицияРазделителя = СтрНайти(НомерТелефона, "@");
	Если ПозицияРазделителя > 0 Тогда
		НомерТелефона = Лев(НомерТелефона, ПозицияРазделителя - 1); 	
	КонецЕсли;	

	СтрокаЦифр = "0123456789";

	ОчищенныйНомер = "";
	ДлинаНомера = СтрДлина(НомерТелефона);
	Для НомерСимвола = 1 По ДлинаНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, НомерСимвола, 1);
		Если СтрНайти(СтрокаЦифр, ТекущийСимвол) > 0 Тогда
			ОчищенныйНомер = ОчищенныйНомер + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;

	// Убираем из начала полученного внутреннего номера лидирующие нули, если такие есть
	ЛевыйСимвол = Лев(ОчищенныйНомер, 1);
	Пока ЛевыйСимвол = "0" Цикл
		Если СтрДлина(ОчищенныйНомер) > 1 Тогда
			ОчищенныйНомер = Сред(ОчищенныйНомер, 2);
			ЛевыйСимвол = Лев(ОчищенныйНомер, 1);

		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ОчищенныйНомер;

КонецФункции // УбратьИзВнутреннегоНомераПрефиксы()

// Процедура получает состояния внутренних линий
//
Процедура сфпПолучитьСостоянияЛиний() Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Если НЕ сфпПроверитьДоступностьСофтФон(Ложь) Тогда
			Возврат;
		КонецЕсли;
	
		Если сфпПанельУправления <> Неопределено Тогда
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				сфпПанельУправления.GetAllLinesInfo();
			
			Исключение КонецПопытки;
			// BSLLS:MissingCodeTryCatchEx-on
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // сфпПолучитьСостоянияЛиний()

/////////////////////////////////////////////////
// МАСТЕР НАСТРОЙКИ IP-АТС AGAT UX

// Процедура выполняет запуск мастера настройки IP-АТС AgatUX
//
Процедура сфпЗапуститьМастерНастройкиAgatUX() Экспорт
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru='Работа мастера настройки AgatUX возможна только в тонком клиенте 1С'"), 5);
	#Иначе
		// Формируем и сохраняем список пользователей
		ФайлСпискаПользователей = Новый ТекстовыйДокумент;	
		МассивПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПользователей();
		Для Каждого ЭлементМассива Из МассивПользователей Цикл
			ФайлСпискаПользователей.ДобавитьСтроку(ЭлементМассива);
		КонецЦикла;
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			ФайлСпискаПользователей.Записать(КаталогВременныхФайлов() + "personal.txt"); 
		Исключение
		КонецПопытки;	
		// BSLLS:MissingCodeTryCatchEx-on
		// Извлекаем и сохраняем файл настроек мастера настройки Agat UX
		ОписаниеОповещения = Новый ОписаниеОповещения("сфпЗапуститьМастерНастройкиAgatUXЗавершение", сфпСофтФонПроКлиент);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения); 
	#КонецЕсли
КонецПроцедуры // сфпЗапуститьМастерНастройкиAgatUX()

// Процедура - Сфп запустить мастер настройки agat UXЗавершение
//
// Параметры:
//  КаталогВременныхФайлов	 - Строка	 - Путь к каталогу временных файлов
//  ДополнительныеПараметры	 - Структура - Структура параметров
//
Процедура сфпЗапуститьМастерНастройкиAgatUXЗавершение(КаталогВременныхФайлов, ДополнительныеПараметры) Экспорт
		// Извлекаем и сохраняем файл настроек мастера настройки Agat UX
	#Если НЕ ВебКлиент Тогда
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка 
			АдресХранилища = сфпСофтФонПроСервер.сфпВернутьХранилищеФайлаНастройкиМастера();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременныйФайл = КаталогВременныхФайлов + "SetupSettings.ini"; 
			ДвоичныеДанные.Записать(ВременныйФайл);
		Исключение
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
		// Извлекаем и запускаем мастер настройки Agat UX
		Попытка 
			АдресХранилища = сфпСофтФонПроСервер.сфпВернутьХранилищеМастераНастройки();
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВременныйФайл = ПолучитьИмяВременногоФайла("exe"); 
			ДвоичныеДанные.Записать(ВременныйФайл);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);	
			НачатьЗапускПриложения(ОписаниеОповещения, ВременныйФайл);
			ОписаниеОшибки = НСтр("ru='Установка мастера настройки AgatUX'") + Символы.ПС + ОписаниеОшибки;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось запустить установку мастера настройки AgatUX'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры // сфпЗапуститьМастерНастройкиAgatUX()

/////////////////////////////////////////////////
// ЗАПИСЬ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ

// Функция возвращает имя временного файла, в который выгружается запись разговора,
//  полученная с сервера СофтФона
//
// Параметры:
//  ИдентификаторЗаписи	 - Строка	 - Идентификатор записи.
// 
// Возвращаемое значение:
//  Строка - Имя файла для сохранения записи разговора
//
Функция сфпПолучитьИмяФайлаЗаписиРазговора(ИдентификаторЗаписи = "") Экспорт
	// Определяем путь к файлу для сохранение записи разговора
	// BSLLS:UsingHardcodePath-off
	ИмяКаталога = "c:\";
	// BSLLS:UsingHardcodePath-on
	#Если НЕ ВебКлиент Тогда
	ИмяКаталога = КаталогВременныхФайлов();
	#КонецЕсли
	ИмяФайлаЗаписи = "sf" +
	ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИдентификаторЗаписи, "") +
	".wav";
	Возврат (ИмяКаталога + ИмяФайлаЗаписи);
КонецФункции // сфпПолучитьИмяФайлаЗаписиРазговора()		

// Процедура получает файл записи разговора
//
// Параметры:
//	ИдентификаторЗаписи	- Строка	- ИдентификаторЗаписи
//	НомерЛинии			- Строка	- Номер линии
//
Процедура сфпПолучитьФайлРазговора(ИдентификаторЗаписи, НомерЛинии = "") Экспорт
	#Если ВебКлиент Тогда
		Состояние(НСтр("ru='Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если сфпПанельУправления = Неопределено Тогда
			Возврат;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпИспользоватьЗаписьПереговоров() Тогда
			Возврат;
		КонецЕсли;
		FileName = сфпПолучитьИмяФайлаЗаписиРазговора(ИдентификаторЗаписи);
		
		ФайлЗаписи = Новый Файл(FileName);
		ФайлЗаписиСуществует = ФайлЗаписи.Существует();
		Если ФайлЗаписиСуществует Тогда
			Попытка
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);
				НачатьЗапускПриложения(ОписаниеОповещения, FileName);
			Исключение
			КонецПопытки;
			Возврат;
		КонецЕсли;
		
		Если сфпСофтФонПроСервер.сфпИспользоватьСпрут7() Тогда
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				сфпПанельУправления.SaveRecordedFile(НомерЛинии, ИдентификаторЗаписи, FileName);
			Исключение	
			КонецПопытки;	
			// BSLLS:MissingCodeTryCatchEx-on
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
			Попытка
				КодВозврата = сфпObjCLON.GetSoundFile(ИдентификаторЗаписи, FileName);
			Исключение	
				КодВозврата = -1;
			КонецПопытки;
			Если КодВозврата = -1 Тогда
				// Переподключимся к CLON
				сфпПодключитьCLON();
				// Повторим получение файла
				Попытка
					КодВозврата = сфпObjCLON.GetSoundFile(ИдентификаторЗаписи, FileName);
				Исключение	
					КодВозврата = -1;
				КонецПопытки;
			КонецЕсли;	
			Если КодВозврата = -1 Тогда
				ПоказатьПредупреждение(, НСтр("ru='Ошибка получения файла записи разговора!'"), 5);
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // сфпПолучитьФайлРазговора()

/////////////////////////////////////////////////
// СИСТЕМА ЗАПИСИ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ CLON

// Процедура - обработчик установки внешней компоненты CLON
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ПодключениеВнешнейКомпонентыCLON(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПодключитьВнешнююКомпоненту Тогда
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПодключениеВнешнейКомпонентыCLON", сфпСофтФонПроКлиент);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, "ОбщийМакет.сфпКомпонентаCLON", "CLON", ТипВнешнейКомпоненты.Native);
		
	Иначе
		ЗакончитьПодключениеВнешнейКомпонентыCLON();
	КонецЕсли;

КонецПроцедуры // ПодключениеВнешнейКомпонентыCLON()

// Вызывается после завершения НачатьПодключениеВнешнейКомпоненты
//
// Параметры:
//	Подключено	- Булево - результат подключения
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ПродолжитьПодключениеВнешнейКомпонентыCLON(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Попытка
			сфпObjCLON = Новый ("AddIn.CLON.DbControl");
		
		Исключение сфпObjCLON = Неопределено;
		КонецПопытки;	
		Если сфпObjCLON = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось загрузить компоненту записи разговоров CLON'"), 5);
			Возврат;
	
		Иначе
			// Проверяем версию подключенной компоненты
			Попытка
				ВерсияКомпонентыCLON = сфпObjCLON.GetVersion();
			
			Исключение ВерсияКомпонентыCLON = "0.0.0.0";	
			КонецПопытки;	
			Если ВерсияКомпонентыCLON < "1.0.8.0" Тогда
				сфпObjCLON = Неопределено;
				ПоказатьПредупреждение(,
					 НСтр("ru='Не удалось обновить компоненту записи разговоров CLON. Удалите вручную файл компоненты'")
				+ """SearchModuleNative.dll""" + НСтр("ru=' и перезапустите программу'"), 5);
				Возврат;
			КонецЕсли;	
		КонецЕсли;

	Иначе	
		ПоказатьПредупреждение(, НСтр("ru='Не удалось подключить компоненту записи разговоров CLON'"), 5);
		Возврат;
	КонецЕсли;
	
	ЗакончитьПодключениеВнешнейКомпонентыCLON();

КонецПроцедуры // ПродолжитьПодключениеВнешнейКомпонентыCLON()

// Процедура выполняет подключение к серверу CLON
//
Процедура сфпПодключитьCLON() Экспорт
	
	сфпОтключитьCLON();
	
	Состояние("Загрузка компоненты записи разговоров CLON");
	
	Оповещение = Новый ОписаниеОповещения("сфпПодключитьCLON_Продолжить", сфпСофтФонПроКлиент);
	НачатьПодключениеВнешнейКомпоненты(Оповещение, "ОбщийМакет.сфпКомпонентаCLON", "CLON", ТипВнешнейКомпоненты.Native);

КонецПроцедуры // сфпПодключитьCLON()

// Процедура - Сфп подключить CLON продолжить
//
// Параметры:
//  Подключено				 - Булево	 - Признак подключения компоненты
//  ДополнительныеПараметры	 - Структура - Структура параметров
//
Процедура сфпПодключитьCLON_Продолжить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Попытка
			сфпObjCLON = Новый ("AddIn.CLON.DbControl");
		
		Исключение сфпObjCLON = Неопределено;
		КонецПопытки;
		Если сфпObjCLON <> Неопределено Тогда
			// Проверяем версию подключенной компоненты
			Попытка
				ВерсияКомпонентыCLON = сфпObjCLON.GetVersion();
			
			Исключение ВерсияКомпонентыCLON = "0.0.0.0";
			КонецПопытки;
			Если ВерсияКомпонентыCLON = "1.0.8.0" Тогда
				ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Ложь);
				ПодключениеВнешнейКомпонентыCLON(ДополнительныеПараметры);
				Возврат;

			Иначе	
				сфпОтключитьCLON();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры	= Новый Структура("ПодключитьВнешнююКомпоненту", Истина);
	ОповещениеУстановкиКомпоненты = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыCLON",
		 сфпСофтФонПроКлиент,
		 ДополнительныеПараметры);
	НачатьУстановкуВнешнейКомпоненты(ОповещениеУстановкиКомпоненты, "ОбщийМакет.сфпКомпонентаCLON");

КонецПроцедуры // сфпПодключитьCLON_Продолжить()

// Функция определяет продолжительность разговора
//
// Параметры:
//  ПродолжительностьРазговора	 - Строка	 - Продолжительность разговора
// 
// Возвращаемое значение:
//  Число - Продолжительность разговора
//
Функция сфпПолучитьПродолжительностьРазговораCLON(ПродолжительностьРазговора) Экспорт
	Попытка
		КоличествоЧасов 	= Число(Лев(ПродолжительностьРазговора, 2));
	Исключение
		КоличествоЧасов 	= 0;
	КонецПопытки;	
	Попытка
		КоличествоМинут 	= Число(Сред(ПродолжительностьРазговора, 4, 2));
	Исключение
		КоличествоМинут 	= 0;
	КонецПопытки;	
	Попытка
		КоличествоСекунд	= Число(Сред(ПродолжительностьРазговора, 7, 2));
	Исключение
		КоличествоСекунд 	= 0;
	КонецПопытки;	
	Возврат 1000 * (КоличествоЧасов * 3600 + КоличествоМинут * 60 + КоличествоСекунд);	
КонецФункции // сфполучитьПродолжительностьРазговораCLON()

// Функция определяет разницу во времени с сервером CLON
// 
// Возвращаемое значение:
//  Число - Смещение времени
//
Функция сфпПолучитьСмещениеВремениCLON() Экспорт
	СмещениеВремениCLON = 0;
	ДатаВремяКомпьютера = сфпСофтФонПроСервер.сфпТекущаяДата();
	Стр = сфпObjCLON.GetCurrentTime();
	Если НЕ ПустаяСтрока(Стр) Тогда
		ВремяКомпьютера = ДатаВремяКомпьютера - НачалоДня(ДатаВремяКомпьютера);
		ВремяСервераCLON = сфпПолучитьПродолжительностьРазговораCLON(Стр) / 1000;
		СмещениеВремениCLON = ВремяСервераCLON - ВремяКомпьютера;
	КонецЕсли;	
	Возврат СмещениеВремениCLON;
КонецФункции // сфпПолучитьСмещениеВремениCLON()	

// Функция ищет запись разговора в CLON по переданной структуре поиска
//
// Параметры:
//  ТелефонА		 - Строка	 - Номер звонящего
//  ТелефонБ		 - Строка	 - Номер принимающего звонок
//  ДатаНачала		 - Дата		 - Дата начала звонка
//  ДатаОкончания	 - Дата		 - Дата окончания звонка
//  Входящий		 - Булево	 - Признак входящего звонка
// 
// Возвращаемое значение:
//  ЭлементМассива - Структура или неопределено
//
Функция сфпНайтиЗаписьРазговораCLON(ТелефонА, ТелефонБ, ДатаНачала, ДатаОкончания, Знач Входящий) Экспорт
	ТелефонА = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТелефонА);
	ТелефонБ = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(ТелефонБ);
	СтруктураПоискаCLON = Новый Структура;
	СтруктураПоискаCLON.Вставить("ВремяНачалаЗвонка",		ДатаНачала - 300);
	СтруктураПоискаCLON.Вставить("ВремяЗавершенияЗвонка",	ДатаОкончания + 300);
	СтруктураПоискаCLON.Вставить("Входящий", 				Входящий);
	СтруктураПоискаCLON.Вставить("ТелефонА",				"");
	СтруктураПоискаCLON.Вставить("ТелефонБ",				"");
	// Находим все записи разговоров за переданный период
	МассивCLON = сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON);
	// +Дополнительный поиск с расширенным периодом по времени
	Если МассивCLON.Количество() = 0 Тогда
		СтруктураПоискаCLON.ВремяНачалаЗвонка = СтруктураПоискаCLON.ВремяНачалаЗвонка - 600;
		СтруктураПоискаCLON.ВремяЗавершенияЗвонка = СтруктураПоискаCLON.ВремяЗавершенияЗвонка + 600;
		МассивCLON = сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON);
	КонецЕсли;		
	// Если в результате поиска ничего не найдено, то сразу возвращаем неопределено
	Если МассивCLON.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	// Обрабатываем массив записей
	Для Каждого Запись Из МассивCLON Цикл
		Если Входящий Тогда
			Запись.number_a = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_a);
			Если Запись.number_a = ТелефонА Тогда
				// Совпал номер звонящего
				Возврат Запись;
			ИначеЕсли Запись.number_b = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли Запись.extra = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_a) И (Прав(ТелефонА, СтрДлина(Запись.number_a)) = Запись.number_a) Тогда
				// Частично совпал номер звонящего
				Возврат Запись;
			ИначеЕсли (СтрДлина(Запись.number_b) > 10) И (Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ) Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			// Данное условие работает только для нас	
			ИначеЕсли Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			КонецЕсли;
		Иначе
			Запись.number_b = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_b);
			Если Запись.number_b = ТелефонБ Тогда
				// Совпал набираемый номер
				Возврат Запись;
			ИначеЕсли Запись.number_a = ТелефонА Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_b) И (Прав(ТелефонБ, СтрДлина(Запись.number_b)) = Запись.number_b) Тогда
				// Частично совпал набираемый номер
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// Если запись не найдена, то меняем направление звонка
	Входящий = НЕ Входящий;
	// Обрабатываем массив записей еще раз
	Для Каждого Запись Из МассивCLON Цикл
		Если Входящий Тогда
			Запись.number_a = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_a);
			Если Запись.number_a = ТелефонА Тогда
				// Совпал номер звонящего
				Возврат Запись;
			ИначеЕсли Запись.number_b = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли Запись.extra = ТелефонБ Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_a) И (Прав(ТелефонА, СтрДлина(Запись.number_a)) = Запись.number_a) Тогда
				// Частично совпал номер звонящего
				Возврат Запись;
			ИначеЕсли (СтрДлина(Запись.number_b) > 10) И (Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ) Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			// Данное условие работает только для нас	
			ИначеЕсли Прав(Запись.number_b, СтрДлина(ТелефонБ)) = ТелефонБ Тогда
				// Найдено вхождение внутреннего номера (донабор)
				Возврат Запись;
			КонецЕсли;
		Иначе
			Запись.number_b = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксыВыходаНаЛинию(Запись.number_b);
			Если Запись.number_b = ТелефонБ Тогда
				// Совпал набираемый номер
				Возврат Запись;
			ИначеЕсли Запись.number_a = ТелефонА Тогда
				// Совпал внутренний номер
				Возврат Запись;
			ИначеЕсли НЕ ПустаяСтрока(Запись.number_b) И (Прав(ТелефонБ, СтрДлина(Запись.number_b)) = Запись.number_b) Тогда
				// Частично совпал набираемый номер
				Возврат Запись;
			ИначеЕсли ПустаяСтрока(Запись.number_a) И ПустаяСтрока(Запись.number_b) Тогда
				// Не определились оба номера
				Возврат Запись;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// Если запись не найдена
	Возврат Неопределено;
КонецФункции // сфпНайтиЗаписьРазговораCLON()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С JSON

// Заменяет недопустимые символы в XML-строке на заданные символы
//
// Параметры:
//  Текст		 - Строка	 - Строка, в которой требуется выполнить замену недопустимых символов.
//  СимволЗамены - Строка	 - Строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//  Строка - cтрока, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
#Если НЕ ВебКлиент Тогда
	ПозицияНачала = 1;
	Пока Истина Цикл
		Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		Если Позиция > 1 Тогда
			НедопустимыйСимвол = Сред(Текст, Позиция - 1, 1);
			Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
				Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
			КонецЕсли;
		КонецЕсли;
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Если НайтиНедопустимыеСимволыXML(НедопустимыйСимвол) > 0 Тогда
			Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		КонецЕсли;
		ПозицияНачала = Позиция + 1;
	КонецЦикла;
#КонецЕсли

	Возврат Текст;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНАЯ РЕКЛАМА COMAGIC

// Функция переводит строку внешних данных в структуру
//
// Параметры:
//  СтрокаВнешнихДанных	 - Строка	- Строка внешних данных
// 
// Возвращаемое значение:
//  Структура - Структура внешних данных
//
Функция сфпПолучитьСтруктуруВнешнихДанных(СтрокаВнешнихДанных) Экспорт
	СтруктураВнешнихДанных = Новый Структура;
	// Убираем символы перевода строк
	СтрокаПоиска = СтрЗаменить(СтрокаВнешнихДанных, Символы.ПС, "");
	// Убираем скобки
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "{", "");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "}", "");
	// Убираем проблеы слева и справа
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	// Ищем тег "comagic_context"
	ПозицияРазделителя = СтрНайти(СтрокаПоиска, """" + "comagic_context" + """" + ":");
	ПерваяСтрока = СокрЛП(Лев(СтрокаПоиска, ПозицияРазделителя - 1));
	ВтораяСтрока = СокрЛП(Сред(СтрокаПоиска, ПозицияРазделителя + 18));
	// Разбираем первую строку
	Пока Истина Цикл
		ПозицияРазделителя = СтрНайти(ПерваяСтрока, ",");
		Если ПозицияРазделителя = 0 Тогда
			РабочаяСтрока	= СтрокаПоиска;
			ПерваяСтрока	= "";	
		Иначе
			РабочаяСтрока	= СокрЛП(Лев(ПерваяСтрока, ПозицияРазделителя - 1));
			ПерваяСтрока	= СокрЛП(Сред(ПерваяСтрока, ПозицияРазделителя + 1));	
		КонецЕсли;
		ПозицияРазделителя = СтрНайти(РабочаяСтрока, ":");
		СтрокаКлюч = СокрЛП(Лев(РабочаяСтрока, ПозицияРазделителя - 1));
		СтрокаКлюч = Сред(СтрокаКлюч, 2, СтрДлина(СтрокаКлюч) - 2);
		СтрокаЗначение	= СокрЛП(Сред(РабочаяСтрока, ПозицияРазделителя + 1));
		СтрокаЗначение = Сред(СтрокаЗначение, 2, СтрДлина(СтрокаЗначение) - 2);
		СтруктураВнешнихДанных.Вставить(СтрокаКлюч, СтрокаЗначение);
		Если СтрДлина(ПерваяСтрока) = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// Разбираем вторую строку
	СтруктураЗначений = Новый Структура;
	Пока Истина Цикл
		ПозицияРазделителя = СтрНайти(ВтораяСтрока, ",");
		Если ПозицияРазделителя = 0 Тогда
			РабочаяСтрока	= ВтораяСтрока;
			ВтораяСтрока	= "";	
		Иначе
			РабочаяСтрока	= СокрЛП(Лев(ВтораяСтрока, ПозицияРазделителя - 1));
			ВтораяСтрока	= СокрЛП(Сред(ВтораяСтрока, ПозицияРазделителя + 1));	
		КонецЕсли;
		ПозицияРазделителя = СтрНайти(РабочаяСтрока, ":");
		СтрокаКлюч = СокрЛП(Лев(РабочаяСтрока, ПозицияРазделителя - 1));
		СтрокаКлюч = Сред(СтрокаКлюч, 2, СтрДлина(СтрокаКлюч) - 2);
		СтрокаЗначение	= СокрЛП(Сред(РабочаяСтрока, ПозицияРазделителя + 1));
		Если НЕ ПустаяСтрока(СтрокаЗначение) Тогда
			Если СтрокаЗначение = "null" Тогда
				СтрокаЗначение = "";
			Иначе
				Если НЕ СтрокаКлюч = "visitor_id" Тогда
					СтрокаЗначение = Сред(СтрокаЗначение, 2, СтрДлина(СтрокаЗначение) - 2);
					СтрокаЗначение = ПреобразоватьСтрокуИзУТФ8(СтрокаЗначение);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		СтруктураЗначений.Вставить(СтрокаКлюч, СтрокаЗначение);
		Если СтрДлина(ВтораяСтрока) = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураВнешнихДанных.Вставить("comagic_context", СтруктураЗначений);
	Возврат СтруктураВнешнихДанных;
КонецФункции // сфпПолучитьСтруктуруВнешнихДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ЗВОНКОВ

// Процедура открывает список записей регистра истории звонков
//
// Параметры:
//	Ссылка	- ДокументСсылка	- Ссылка на телефонный звонок
//
Процедура сфпОткрытьИсториюРазговора(Ссылка) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Звонок", Ссылка);
	ОткрытьФорму("РегистрСведений.сфпИсторияЗвонков.ФормаСписка", ПараметрыФормы);	
КонецПроцедуры // сфпОткрытьИсториюРазговора()

// Показывает расписание регламентного задания
//
// Параметры:
//	ИмяЗадания - Строка - имя задания.
//
Процедура ПоказатьРасписаниеРегламентногоЗадания(ИмяЗадания) Экспорт
	
	Расписание = сфпСофтФонПроСервер.ПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания);
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры	= Новый Структура("ИмяЗадания", ИмяЗадания);
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииДиалогаРасписания", сфпСофтФонПроКлиент, ДополнительныеПараметры);
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(Оповещение);
	
КонецПроцедуры

// Вызывается после закрытия диалога расписания
//
// Параметры:
//	Расписание - РасписаниеРегламентногоЗадания - Расписание - диалог закрыли по кнопке "OK"; Неопределено - в противном случае.
//	ДополнительныеПараметры	- Структура	- значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПриЗакрытииДиалогаРасписания(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	сфпСофтФонПроСервер.УстановитьРасписаниеРегламентногоЗадания(Расписание, ДополнительныеПараметры.ИмяЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьРезультатВызова(Ошибка, СтрокаПояснения = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Ошибка) Тогда
		ПоказатьПредупреждение(, Ошибка);

	Иначе	
		ПоказатьОповещениеПользователя(НСтр("ru='Набор номера'"), , СтрокаПояснения,
			 БиблиотекаКартинок.сфпТелефонныйЗвонокИсходящий);
	КонецЕсли;

КонецПроцедуры

// Получает значения параметров из строки.
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра - имя параметра; 
//                                Значение - его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
//                              кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//  Разделитель - Строка - символ, которым фрагменты отделяются друг от друга.
//
// Возвращаемое значение:
//  Структура - значения параметров, где ключ - имя параметра, значение - значение параметра.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки("File=""c:\InfoBases\Trade""; Usr=""Director"";""", ";");
//  - вернет структуру:
//     ключ "File" и значение "c:\InfoBases\Trade"
//     ключ "Usr"  и значение "Director".
//
Функция ПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ = Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				ЗначениеПараметра = сфпОбщегоНазначенияКлиентСервер.сфпСократитьДвойныеКавычки(ЗначениеПараметра);
				Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Заглушка для методов типа НачатьЗапускПриложения, с обязательным ОписаниеОповещения
Процедура ОбработчикОповещенияБезДействия(Результат, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

Функция ПредставлениеВыбраннойТелефонии() Экспорт
	
	ПредставлениеОператора = сфпСофтФонПроСервер.ПолучитьПредставлениеВыбраннойТелефонии();
	Возврат ПредставлениеОператора;
	
КонецФункции

Процедура ПанельЗвонка_АбонентыТелефонныхКнигПриАктивизацииЯчейки(ЭтаФорма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИдентификаторЗвонка)
		 И ЭтаФорма.Элементы.СтраницыКонтактыНомеронабиратель.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКонтакты Тогда
		ЭтаФорма.ДоступенНаборНомераДокумента = Ложь;
		
		ТекДанные = ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если НЕ ТекДанные.Свойство("ГруппировкаСтроки") И (ЗначениеЗаполнено(ТекДанные.НомерТелефона)
				 ИЛИ ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер)) Тогда
				Если ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер)
					
					 	 И ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент = ЭтаФорма.Элементы.АбонентыТелефонныхКнигВнутреннийНомер Тогда
					ЭтаФорма.ТекущийЗвонокНомерАбонента = ТекДанные.ВнутреннийНомер;
					
				ИначеЕсли ЗначениеЗаполнено(ТекДанные.НомерТелефона)
					
					 	 И ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент = ЭтаФорма.Элементы.АбонентыТелефонныхКнигНомерТелефона Тогда
					ЭтаФорма.ТекущийЗвонокНомерАбонента = ТекДанные.НомерТелефона;
					
				Иначе
					ЭтаФорма.ТекущийЗвонокНомерАбонента = ?(ЗначениеЗаполнено(ТекДанные.НомерТелефона),
						 ТекДанные.НомерТелефона,
						 ТекДанные.ВнутреннийНомер);
				КонецЕсли;

				ЭтаФорма.ДоступенНаборНомераДокумента = Истина;
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = ТекДанные.КонтактПредставление;
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ТекДанные.Владелец;
				ЭтаФорма.ТекущийЭлементДанныхКонтакта = ЭтаФорма.Элементы.АбонентыТелефонныхКниг.Имя;
				Если ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент <> Неопределено Тогда
					  ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта = ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущийЭлемент.Имя;
				Иначе ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта = "";
				КонецЕсли;

			Иначе
				ЭтаФорма.ТекущийЗвонокНомерАбонента = "";
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "";
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = "";
				ЭтаФорма.ТекущийЭлементДанныхКонтакта = "";
				ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта = "";
			КонецЕсли;	
		КонецЕсли;
		
		Если (ТекДанные = Неопределено ИЛИ ТекДанные.Свойство("ГруппировкаСтроки"))
			 И ЭтаФорма.Элементы.ТелефонныеЗвонки.ТекущиеДанные <> Неопределено Тогда
			Телефония_ТелефонныеЗвонкиПриАктивизацииСтроки(ЭтаФорма);
			
		Иначе
			УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Телефония_ТелефонныеЗвонкиПриАктивизацииСтроки(ЭтаФорма) Экспорт
	
	ДоступнаЗаписьРазговора = Ложь;

	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИдентификаторЗвонка) И ПустаяСтрока(ЭтаФорма.НабранныйНомер) Тогда
		ЭтаФорма.ДоступенНаборНомераДокумента = Ложь;
		ЭтаФорма.ТекущийЗвонокНомерАбонента = "";
		ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = "";
		ЭтаФорма.ТекущийЗвонокВладелецКонтакта = "";
		ЭтаФорма.ТекущийЭлементДанныхКонтакта = "";
		ЭтаФорма.ТекущаяЯчейкаДанныхКонтакта = "";
	
		ТекДанные = ЭтаФорма.Элементы.ТелефонныеЗвонки.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ЭтаФорма.ИспользуетсяОблачнаяАТС Тогда
				  ДоступнаЗаписьРазговора = Истина;
			Иначе ДоступнаЗаписьРазговора = ЗначениеЗаполнено(ТекДанные.сфпИдентификаторЗаписи);
			КонецЕсли;
			ЭтаФорма.ДоступенНаборНомераДокумента = ЗначениеЗаполнено(ТекДанные.АбонентКакСвязаться);
			ЭтаФорма.ТекущийЗвонокНомерАбонента = ТекДанные.АбонентКакСвязаться;
			ЭтаФорма.ТекущийЭлементДанныхКонтакта = ЭтаФорма.Элементы.ТелефонныеЗвонки.Имя;
			Если НЕ ЗначениеЗаполнено(ТекДанные.АбонентКонтакт) Тогда
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = ТекДанные.Клиент;
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ТекДанные.АбонентКонтакт;

			Иначе
				ЭтаФорма.ТекущийЗвонокПредставлениеКонтакта = ТекДанные.АбонентКонтакт;
				ЭтаФорма.ТекущийЗвонокВладелецКонтакта = ТекДанные.Клиент;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекДанные = Неопределено И ЭтаФорма.Элементы.АбонентыТелефонныхКниг.ТекущиеДанные <> Неопределено Тогда
			ПанельЗвонка_АбонентыТелефонныхКнигПриАктивизацииЯчейки(ЭтаФорма);
			
		Иначе
		    УстановитьДоступностьКомандПанелиЗвонка(ЭтаФорма, ТекДанные <> Неопределено);
		КонецЕсли;
	КонецЕсли;

	ЭтаФорма.Элементы.ПрослушатьЗапись.Доступность = ДоступнаЗаписьРазговора;

КонецПроцедуры

Процедура Телефония_ОбновитьКоличествоЗвонков(ЭтаФорма) Экспорт
	
	Попытка
		ПринадлежностьЗвонка = ЭтаФорма.ПринадлежностьЗвонка;
	Исключение
		Возврат;
	КонецПопытки;	
	
	ПользовательЗвонков = Неопределено;
	ПодразделенияЗвонка = Неопределено;
	КонтролируемыеПользователи = Неопределено;
	
	Если ПринадлежностьЗвонка = 1 Тогда
		ПользовательЗвонков = ЭтаФорма.ТекущийПользователь;

	ИначеЕсли ПринадлежностьЗвонка = 2 Тогда
		Если ЭтаФорма.ТекущиеПодчиненныеПодразделения.Количество() > 0 Тогда
			ПодразделенияЗвонка = ЭтаФорма.ТекущиеПодчиненныеПодразделения.ВыгрузитьЗначения();
		КонецЕсли;
		Если ЭтаФорма.ТекущиеПрослушиваемыеПользователи.Количество() > 0 Тогда
			КонтролируемыеПользователи = ЭтаФорма.ТекущиеПрослушиваемыеПользователи.ВыгрузитьЗначения();
		КонецЕсли;

	Иначе
		ПользовательЗвонков = ЭтаФорма.ТекущийПользователь;
		Если ЭтаФорма.ТекущиеПодчиненныеПодразделения.Количество() > 0 Тогда
			ПодразделенияЗвонка = ЭтаФорма.ТекущиеПодчиненныеПодразделения.ВыгрузитьЗначения();
		КонецЕсли;
		Если ЭтаФорма.ТекущиеПрослушиваемыеПользователи.Количество() > 0 Тогда
			КонтролируемыеПользователи = ЭтаФорма.ТекущиеПрослушиваемыеПользователи.ВыгрузитьЗначения();
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗвонков = сфпСофтФонПроСервер.Телефония_ПолучитьКоличествоЗвонков(ЭтаФорма.НачалоПериодаЗвонков,
		 ЭтаФорма.КонецПериодаЗвонков, ПользовательЗвонков, ПодразделенияЗвонка,
		 КонтролируемыеПользователи);
	ПроцентВходящих = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Входящие / КоличествоЗвонков.Все * 100));
	ПроцентИсходящих = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Исходящие / КоличествоЗвонков.Все * 100));
	ПроцентПропущенных = ?(КоличествоЗвонков.Все = 0, 0, ЦЕЛ(КоличествоЗвонков.Пропущенные / КоличествоЗвонков.Все * 100));
	
	Если (ПроцентВходящих + ПроцентИсходящих + ПроцентПропущенных) < 100 И КоличествоЗвонков.Все > 0 Тогда
		ПроцентМакс = МАКС(ПроцентВходящих, ПроцентИсходящих, ПроцентПропущенных);
		Если ПроцентМакс = ПроцентВходящих Тогда
			ПроцентВходящих = 100 - ПроцентИсходящих - ПроцентПропущенных;

		ИначеЕсли ПроцентМакс = ПроцентИсходящих Тогда
			ПроцентИсходящих = 100 - ПроцентВходящих - ПроцентПропущенных;

		Иначе
			ПроцентПропущенных = 100 - ПроцентВходящих - ПроцентИсходящих;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Элементы.ФильтрЗвонковПоВидуВсе.Заголовок = "Все: " + КоличествоЗвонков.Все + " (100%)";
	ЭтаФорма.Элементы.ФильтрЗвонковПоВидуВходящие.Заголовок = "Входящие: " 
		+ КоличествоЗвонков.Входящие + " (" + ПроцентВходящих 
		+ "%)";
	ЭтаФорма.Элементы.ФильтрЗвонковПоВидуИсходящие.Заголовок = "Исходящие: " 
		+ КоличествоЗвонков.Исходящие + " (" + ПроцентИсходящих 
		+ "%)";
	ЭтаФорма.Элементы.ФильтрЗвонковПоВидуПропущенные.Заголовок = "Пропущенные: " 
		+ КоличествоЗвонков.Пропущенные + " (" + ПроцентПропущенных 
		+ "%)";
	
КонецПроцедуры

Процедура ЗаполнитьМаршрутизациюПоМенеджерам() Экспорт

	Результат = сфпСофтФонПроСервер.ЗаполнитьМаршрутизациюПоМенеджерам();
	Если ПустаяСтрока(Результат) Тогда
		Результат = "Данных для обработки не обнаружено!";
	КонецЕсли;	
	
	ПоказатьПредупреждение(, Результат);
	
КонецПроцедуры	

Процедура ЗаписатьДанныеБизнесСтатистики(КонтекстВызова)
	
	Если ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.Партнеры") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.КарточкаКлиента");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.КарточкаКонтактногоЛицаКлиента");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.КарточкаФормыВзаимодействия");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.КарточкаПотенциальногоКлиента");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.ФормаИнтереса");
	ИначеЕсли ТипЗнч(КонтекстВызова) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.Задача");
	ИначеЕсли КонтекстВызова = Неопределено Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.Подключение.БезКонтекста");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДКЛЮЧЕНИЯ К СОФТФОН

// Функция выполняет подключение к серверу СофтФона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Результат подключения
//
Процедура сфпПодключиться()
	сфпСофтФонПроКлиентНативнаяКомпонента.сфпПодключитьсяНативнаяКомпонента(Истина);
КонецПроцедуры // сфпПодключиться()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТРУКТУРОЙ ЗВОНКА

// Функция возвращает ключ поиска звонка
//
// Параметры:
//	hCall	- Число, строка	- Идентификатор звонка.
//
// Возвращаемое значение:
//	Строка	- Ключ поиска звонка
//
Функция сфпПолучитьКлючПоиска(hCall)
	
	Если ТипЗнч(hCall) = Тип("Число") Тогда
		КлючПоиска = "_" + Формат(hCall, "ЧГ=0");
		
	Иначе
		КлючПоиска = "_" + СтрЗаменить(hCall, Символы.НПП, "");
		КлючПоиска = СтрЗаменить(КлючПоиска, " ", "");
		КлючПоиска = СтрЗаменить(КлючПоиска, "-", "");
		КлючПоиска = СтрЗаменить(КлючПоиска, ":", "");
		КлючПоиска = СтрЗаменить(КлючПоиска, "=", "");
	КонецЕсли;
	
	Возврат КлючПоиска;

КонецФункции	

// Процедура добавляет данные в структуру звонка
//
// Параметры:
//	hCall		- Число			- Идентификатор звонка.
//	Ключ		- Строка		- Имя элемента данных
//	Значение	- Произвольный	- Значение элемента данных
//
Процедура сфпДобавитьДанныеВСтруктуру(hCall, Ключ, Значение)
	
	КлючПоиска = сфпПолучитьКлючПоиска(hCall);

	НайденныйЗвонок	= Неопределено;
	
	Если сфпСтруктураЗвонков = Неопределено ИЛИ ТипЗнч(сфпСтруктураЗвонков) <> Тип("Структура") Тогда
		сфпСтруктураЗвонков = Новый Структура();
	КонецЕсли;	
	
	Если сфпСтруктураЗвонков.Свойство(КлючПоиска, НайденныйЗвонок) Тогда
		Если НайденныйЗвонок.Свойство(Ключ) Тогда
			НайденныйЗвонок[Ключ] = Значение;

		Иначе
			НайденныйЗвонок.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // сфпДобавитьДанныеВСтруктуру()

// Функция создает и заполняет структуру звонка
Функция сфпИнициализироватьСтруктуруЗвонка(hCall, LineName, LineType, CallerID, CallerInfoName,
	 CalledId, CalledInfoName, State, Origin, DopInfo, AvailableActions, AppValue, ImageData, ContactID,
	 Caller_Destination_Number, НомерЛинии,
	 НачалоЗвонка = Неопределено)
	
	МассивЗвонящих = Неопределено;
	Контакт = Неопределено;
	ВходящийЗвонок = сфпОпределитьВходящийЗвонок(Origin);
	НомерТелефона = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(?(ВходящийЗвонок, CallerID, CalledId));
	ВнешнийЗвонок = сфпОпределитьВнешнийЗвонок(Origin, НомерТелефона);
	
	сфпЗаполнитьПараметрыЗвонка(ВходящийЗвонок, НомерТелефона, МассивЗвонящих, Контакт, CallerInfoName,
		 CalledInfoName, DopInfo, AppValue, ImageData,
		 ContactID);
	
	СтруктураЗвонка = сфпСформироватьСтруктуруЗвонка(hCall, LineName, CallerID, CallerInfoName,
		 CalledId, CalledInfoName, DopInfo,
		State, Origin, AvailableActions, ContactID, Caller_Destination_Number, Контакт, ВходящийЗвонок, ВнешнийЗвонок, НомерТелефона, Неопределено,
		МассивЗвонящих, НомерЛинии, НачалоЗвонка);
		
	Возврат СтруктураЗвонка;
			
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАПРАВЛЕНИЯ ЗВОНКА

Процедура сфпЗаполнитьПараметрыЗвонка(ВходящийЗвонок, НомерТелефона, МассивЗвонящих, Контакт,
	 CallerInfoName, CalledInfoName, DopInfo, AppValue, ImageData,
	 ContactID)
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(AppValue);
			СтарыйНомер = Текст.ПолучитьСтроку(3);
			Если НЕ ПустаяСтрока(СтарыйНомер) И НЕ (СтарыйНомер = НомерТелефона) Тогда
				Если (СтрДлина(СтарыйНомер) > 7) И (СтрНайти(НомерТелефона, СтарыйНомер) > 0) Тогда
					НомерТелефона = СтарыйНомер;

				Иначе	
					AppValue = "";
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Контакт = Неопределено;
		ПредставлениеКонтакта = Неопределено;
		ПредставлениеВладельцаКонтакта = Неопределено;
		
		Если ЗначениеЗаполнено(СокрЛП(AppValue)) Тогда
			Текст = Новый ТекстовыйДокумент();
			Текст.УстановитьТекст(AppValue);
			ПредставлениеКонтакта = Текст.ПолучитьСтроку(1);

		ИначеЕсли НЕ ПустаяСтрока(ContactID) Тогда
			Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(ContactID);

		Иначе
			МассивВладельцевКонтактов = Неопределено;
			МассивЗвонящих = сфпСофтФонПроСервер.сфпНайтиОбъектВРегистреПоТелефону(НомерТелефона, МассивВладельцевКонтактов);
			Если МассивЗвонящих.Количество() = 1 Тогда
				Контакт	= МассивЗвонящих[0];

			ИначеЕсли МассивЗвонящих.Количество() > 1 Тогда
				Контакт = МассивЗвонящих[0];
				ПредставлениеКонтакта = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(МассивЗвонящих[0]);
				ПредставлениеКонтакта = НСтр("ru='Первый найденный контакт: '") + Символы.ПС + ПредставлениеКонтакта + Символы.ПС;
				ПредставлениеВладельцаКонтакта = Нстр("ru='Есть и другие совпадения'");
				
				ПредставлениеВладельца = "";
				// BSLLS:UnusedLocalVariable-off
				Если МассивВладельцевКонтактов.Количество() = 1 Тогда
					ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(
						МассивВладельцевКонтактов[0], ПредставлениеВладельца);
				ИначеЕсли МассивВладельцевКонтактов.Количество() > 1 Тогда
					ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(
						МассивЗвонящих[0], ПредставлениеВладельца);
				КонецЕсли;
				// BSLLS:UnusedLocalVariable-on
				
				Если ЗначениеЗаполнено(ПредставлениеВладельца) Тогда
					ПредставлениеВладельцаКонтакта = "" + ПредставлениеВладельца;
				КонецЕсли;
						
				// Составим многострочный текст из контактов для показа в панели, первая строка будет проигнорирована
				Сч = 1;
				Для Каждого СтрокаМассива Из МассивЗвонящих Цикл
					Если Сч = 5 Тогда
						ПредставлениеКонтакта = ПредставлениеКонтакта + "...";
						Прервать;
					КонецЕсли;
					
					ПредставлениеКонтакта = ПредставлениеКонтакта + ?(Сч = 1, "", ", ") + Строка(СтрокаМассива);
					
					Сч = Сч + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Контакт <> Неопределено Тогда
			Если ТипЗнч(Контакт) = Тип("Строка") Тогда
				ПредставлениеКонтакта = Контакт;
				
			Иначе	
				ПредставлениеКонтакта = сфпСофтФонПроСервер.сфпПолучитьПредставлениеКонтакта(Контакт);
				ContactID = сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(Контакт);
				ПредставлениеВладельца = "";
				// BSLLS:UnusedLocalVariable-off
				ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Контакт, ПредставлениеВладельца);
				// BSLLS:UnusedLocalVariable-on
				ПредставлениеВладельцаКонтакта = "" + ПредставлениеВладельца;
				ImageData = сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(Контакт, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ПредставлениеВладельцаКонтакта <> Неопределено Тогда
			DopInfo = ПредставлениеВладельцаКонтакта;
			
			Если ПредставлениеКонтакта <> Неопределено Тогда
				AppValue = ПредставлениеКонтакта + Символы.ПС + ПредставлениеВладельцаКонтакта + Символы.ПС + НомерТелефона;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеКонтакта) Тогда
			Если ВходящийЗвонок Тогда
				  CallerInfoName = ПредставлениеКонтакта;
			Иначе CalledInfoName = ПредставлениеКонтакта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ЗВОНКА 

// Функция разбирает переданную структуру номера телефона и возвращает строку номера, которую будет набирать АТС.
//
// Параметры:
//	СтруктураНомера	- Структура	- Структура телефонного номера.
//
// Возвращаемое значение:
//	Строка	- Строка для набора АТС.
//
Функция сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера)
	Возврат	сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
КонецФункции // ПреобразоватьНомерСУчетомПрефиксов()

// Процедура выполняет звонок через панель СофтФон
//
// Параметры:
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Функция сфпВыполнитьЗвонок(ДополнительныеПараметры)
	
	Если ПустаяСтрока(ДополнительныеПараметры.Телефон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ContactID		= "";
	ContactName		= "";
	ContactDopInfo	= "";
	ContactImage	= ""; 
	Если ЗначениеЗаполнено(ДополнительныеПараметры.СсылкаНаОбъект) Тогда
		ContactName = сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
		Если НЕ (ТипЗнч(ДополнительныеПараметры.СсылкаНаОбъект) = Тип("Строка")) Тогда
			ContactID			= сфпСофтФонПроСервер.сфпПолучитьИдентификаторКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
			ВладелецКонтакта	= сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(ДополнительныеПараметры.СсылкаНаОбъект);
			Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
				ContactDopInfo	= сфпСофтФонПроСервер.сфпПолучитьНаименованиеКонтакта(ВладелецКонтакта);
			Иначе
				ContactDopInfo	= "";
			КонецЕсли;
			ContactImage		= сфпСофтФонПроСервер.сфпПолучитьАватарКонтакта(ДополнительныеПараметры.СсылкаНаОбъект, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Телефон = СтрЗаменить(ДополнительныеПараметры.Телефон, "+", "");
	
	Ошибка = "";
	Если сфпСофтФонПроСервер.ИспользуемаяВерсияСофтФона() = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
		СтрокаПояснения = "";
		Событие = Неопределено;
		Если ДополнительныеПараметры.ДанныеЗаполнения = Неопределено Тогда
			сфпЛицензированиеЭкспортныеМетоды.ПозвонитьПоНомеру(ДополнительныеПараметры.Телефон,
				 ДополнительныеПараметры.СсылкаНаОбъект, Событие, Ошибка,
				 СтрокаПояснения);
		Иначе
			сфпЛицензированиеЭкспортныеМетоды.ПозвонитьПоНомеру(ДополнительныеПараметры.Телефон,
				 ДополнительныеПараметры.СсылкаНаОбъект, Событие, Ошибка, СтрокаПояснения,
				 ДополнительныеПараметры.ДанныеЗаполнения.Основание);
		КонецЕсли;
		ОбработатьРезультатВызова(Ошибка, СтрокаПояснения);

	Иначе
		ТелефонДляВызова = ДополнительныеПараметры.Телефон;
		
		ЕстьПоддержкаDTMF = Ложь;
		
		ВерсияПанели = Лев(ПараметрыПриложения["сфпВерсияПанели"], 3);
		Если ВерсияПанели = "3.0" Тогда
			ЕстьПоддержкаDTMF = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПараметрыПриложения["сфпВерсияПанели"],
				 "3.0.3.139") >= 0);
				
		ИначеЕсли ВерсияПанели = "3.1" Тогда
			ЕстьПоддержкаDTMF = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПараметрыПриложения["сфпВерсияПанели"],
				 "3.1.3.139") >= 0);
		КонецЕсли;
			
		Если ЕстьПоддержкаDTMF Тогда
			Если ДополнительныеПараметры.Свойство("ДобавочныйНомер") Тогда
				Если ЗначениеЗаполнено(ДополнительныеПараметры.ДобавочныйНомер) Тогда
					ЗадержкаДобавочногоНомера = 0;
					Если ДополнительныеПараметры.Свойство("ЗадержкаДобавочногоНомера") Тогда
						ЗадержкаДобавочногоНомера = ДополнительныеПараметры.ЗадержкаДобавочногоНомера;
					КонецЕсли;
					ЗадержкаДобавочногоНомера = ?(ЗадержкаДобавочногоНомера = 0, 5, ЗадержкаДобавочногоНомера);
						
					СтрокаЗадержки = ",";
					// BSLLS:UnusedLocalVariable-off
					Для к = 1 По ЗадержкаДобавочногоНомера Цикл
					// BSLLS:UnusedLocalVariable-on
						СтрокаЗадержки = СтрокаЗадержки + "P";
					КонецЦикла;
					
					ТелефонДляВызова = ТелефонДляВызова + СтрокаЗадержки + ДополнительныеПараметры.ДобавочныйНомер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ПрефиксНабора") Тогда
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ПрефиксНабора) Тогда
				ТелефонДляВызова = """" + ДополнительныеПараметры.ПрефиксНабора + """" + ТелефонДляВызова;
			КонецЕсли;
		КонецЕсли;
				
		Попытка
			Результат = сфпПанельУправления.MakeCall("", ТелефонДляВызова, ContactID, ContactName, ContactDopInfo, ContactImage);
			Если Результат = -2 Тогда
				ContactImage = "";
				Результат = сфпПанельУправления.MakeCall("", ТелефонДляВызова, ContactID, ContactName,
					 ContactDopInfo,
					 ContactImage);
			КонецЕсли;
			сфпДанныеЗаполнения	= ДополнительныеПараметры.ДанныеЗаполнения;
			
			Если ТипЗнч(сфпДанныеЗаполнения) <> Тип("Структура") Тогда
				сфпДанныеЗаполнения = Новый Структура();
			КонецЕсли;
			сфпДанныеЗаполнения.Вставить("ИсходящийЗвонокДата", ОбщегоНазначенияКлиент.ДатаСеанса());
			сфпДанныеЗаполнения.Вставить("ИсходящийЗвонокНомер", ТелефонДляВызова);
			
			Если ДополнительныеПараметры.Свойство("CRM_КонтекстВызова") Тогда
				сфпДанныеЗаполнения.Вставить("CRM_КонтекстВызова", ДополнительныеПараметры.CRM_КонтекстВызова);
			КонецЕсли;
			
		Исключение
			Ошибка = ОписаниеОшибки();
			сфпДанныеЗаполнения	= Неопределено;
			Состояние(НСтр("ru='Не удалось создать звонок'"));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПустаяСтрока(Ошибка);

КонецФункции // сфпВыполнитьЗвонок()

/////////////////////////////////////////////////
// СОСТОЯНИЯ ЛИНИЙ

Функция СтатусПользователяЛинии(ЛинияСтатус)
	
	ТекСтатус = Неопределено;
	Если НЕ ПустаяСтрока(ЛинияСтатус.Number) Тогда
		ОчищенныйНомер = УбратьИзВнутреннегоНомераПрефиксы(ЛинияСтатус.Number);
		Если СтрДлина(ОчищенныйНомер) = СтрДлина(ЛинияСтатус.Number) Тогда
			Если ЛинияСтатус.Свойство("UserState") Тогда
				UserState = ВРЕГ(ЛинияСтатус.UserState);
				Если UserState <> "НЕОПРЕДЕЛЕНО" Тогда
					ТекСтатус = UserState;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтатус = Неопределено Тогда
				LineState = ВРЕГ(ЛинияСтатус.LineState);
				Если LineState = "FREE" Тогда
					ТекСтатус = "В СЕТИ";
										
				ИначеЕсли LineState = "BUSY" Тогда
					ТекСтатус = "ЛИНИЯ ЗАНЯТА";
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтатус = Неопределено Тогда
				ТекСтатус = "НЕ В СЕТИ";
				Если ЛинияСтатус.LineState = 1 Тогда
					ТекСтатус = "В СЕТИ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

/////////////////////////////////////////////////
// СИСТЕМА ЗАПИСИ ТЕЛЕФОННЫХ ПЕРЕГОВОРОВ CLON

Процедура ЗакончитьПодключениеВнешнейКомпонентыCLON()
	
	// Подключаемся к серверу CLON
	НастройкиCLON = сфпСофтФонПроСервер.сфпПолучитьНастройкиCLON(); 
	КодВозврата = сфпObjCLON.Connect(НастройкиCLON.CLONServerIP, НастройкиCLON.CLONServerPort,
		 НастройкиCLON.CLONType, НастройкиCLON.CLONServerLogin,
		 НастройкиCLON.CLONServerPassword);
	Если КодВозврата = -1 Тогда
		// BSLLS:UnusedLocalVariable-off
		сфпCLON = Неопределено;
		// BSLLS:UnusedLocalVariable-on
		КодВозврата = сфпObjCLON.GetLastError();
		Если КодВозврата = 8 Тогда
			  ТекстПредупреждения = НСтр("ru='Проверьте параметры подключения к системе записи телефонных переговоров CLON!'");
		Иначе ТекстПредупреждения = НСтр("ru='Не удалось подключиться к системе записи разговоров CLON'");
		КонецЕсли;	
		ПоказатьПредупреждение(, ТекстПредупреждения, 5);
		
		сфпObjCLON = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗакончитьУстановкуВнешнейКомпонентыCLON()

// Процедура выполняет отключение от сервера CLON
//
// Параметры:
//	Нет.
//
Процедура сфпОтключитьCLON()
	
	Если сфпObjCLON = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    // BSLLS:MissingCodeTryCatchEx-off
	Попытка
		сфпObjCLON.Disconnect();				
	Исключение
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	
	сфпObjCLON = Неопределено;

КонецПроцедуры // сфпОтключитьCLON()

// Функция выполняет поиск записей телефонных переговоров
//
// Параметры:
//	СтруктураПоискаCLON	 - Структура	- Структура параметров поиска
//
// Возвращаемое значение:
//	Массив	- Массив структур записей разговоров
//
Функция сфпНайтиВсеЗаписиРазговоровCLON(СтруктураПоискаCLON)
	ВремяНачалаЗвонка		= СтруктураПоискаCLON.ВремяНачалаЗвонка;
	ВремяЗавершенияЗвонка	= СтруктураПоискаCLON.ВремяЗавершенияЗвонка;
	НомерА					= СтруктураПоискаCLON.ТелефонА;
	НомерБ					= СтруктураПоискаCLON.ТелефонБ;
	Входящий				= СтруктураПоискаCLON.Входящий;
	Дата1 = Лев(Строка(ВремяНачалаЗвонка), 10);
	Дата2 = Лев(Строка(ВремяЗавершенияЗвонка), 10);
	В1Ч = Строка(Час(ВремяНачалаЗвонка));
	Если СтрДлина(В1Ч) = 1 Тогда 
		В1Ч = "0" + В1Ч;
	КонецЕсли;	
	В1М = Строка(Минута(ВремяНачалаЗвонка));
	Если СтрДлина(В1М) = 1 Тогда 
		В1М = "0" + В1М;
	КонецЕсли;	
	В1С = Строка(Секунда(ВремяНачалаЗвонка));
	Если СтрДлина(В1С) = 1 Тогда 
		В1С = "0" + В1С;
	КонецЕсли;
	Дата1День = День(ВремяНачалаЗвонка);
	Если СтрДлина(Строка(Дата1День)) = 1 Тогда
		Дата1День = "0" + Строка(Дата1День);
	КонецЕсли;	
	Дата1Месяц = Месяц(ВремяНачалаЗвонка);
	Если СтрДлина(Строка(Дата1Месяц)) = 1 Тогда
		Дата1Месяц = "0" + Строка(Дата1Месяц);
	КонецЕсли;
	Дата1Год = Сред(Дата1, 7, 4);
	Дата2День = День(ВремяЗавершенияЗвонка);
	Если СтрДлина(Строка(Дата2День)) = 1 Тогда
		Дата2День = "0" + Строка(Дата2День);
	КонецЕсли;
	Дата2Месяц = Месяц(ВремяЗавершенияЗвонка);
	Если СтрДлина(Строка(Дата2Месяц)) = 1 Тогда
		Дата2Месяц = "0" + Строка(Дата2Месяц);
	КонецЕсли;
	Дата2Год = Сред(Дата2, 7, 4);
	В2Ч = Строка(Час(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2Ч) = 1 Тогда 
		В2Ч = "0" + В2Ч;
	КонецЕсли;	
	В2М = Строка(Минута(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2М) = 1 Тогда 
		В2М = "0" + В2М;
	КонецЕсли;	
	В2С = Строка(Секунда(ВремяЗавершенияЗвонка));
	Если СтрДлина(В2С) = 1 Тогда 
		В2С = "0" + В2С;
	КонецЕсли;	
    Время1 = В1Ч + ":" + В1М + ":" + В1С;
	Время2 = В2Ч + ":" + В2М + ":" + В2С;
	Если Время2 = "00:00:00" Тогда
		Время2 = "23:59:59";
	КонецЕсли;
	ДН = СтрЗаменить(Строка(Дата1Год), " ", "") + "." + Строка(Дата1Месяц) + "." + Строка(Дата1День);
	ДК = СтрЗаменить(Строка(Дата2Год), " ", "") + "." + Строка(Дата2Месяц) + "." + Строка(Дата2День);
	Если ПустаяСтрока(НомерА) Тогда
		НомерА = "";
	КонецЕсли;
	Если ПустаяСтрока(НомерБ) Тогда
		НомерБ = "";
	КонецЕсли;
	МассивCLON = Новый Массив;
	// BSLLS:MissingCodeTryCatchEx-off
	Попытка		
		Список = сфпСофтФонПроСервер.сфпПолучитьНастройкиCLON(); 
		Если Список.CLONType = 1 Тогда
			Если Входящий Тогда
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1,
					 Время2, "", "", "", "", НомерА, "", "", 0, "", 0, 0,
					 0);
			Иначе
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1,
					 Время2, "", "", "", "", "", НомерБ, "", 0, "", 0, 0,
					 0);
			КонецЕсли;	
		Иначе
			Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,extra,file", ДН, ДК, Время1,
				 Время2, "", "", "", "", НомерА, НомерБ, "", 0, "", 0, 0,
				 0);
			// Для случаев, когда не удалось найти запись по двум телефонам, ищем только по одному.
			Если Стр = Неопределено Тогда
				Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1,
					 Время2, "", "", "", "", "", НомерБ, "", 0, "", 0, 0,
					 0);
				Если Стр = Неопределено Тогда
					Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1,
						 Время2, "", "", "", "", НомерБ, "", "", 0, "", 0, 0,
						 0);
					Если Стр = Неопределено Тогда
						Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1,
							 Время2, "", "", "", "", НомерА, "", "", 0, "", 0, 0,
							 0);
						Если Стр = Неопределено Тогда
							Стр = сфпObjCLON.SearchRecord("date,time,duration,number_a,number_b,file", ДН, ДК, Время1,
								 Время2, "", "", "", "", "", НомерА, "", 0, "", 0, 0,
								 0);
						КонецЕсли;										
					КонецЕсли;						
				КонецЕсли;							
			КонецЕсли;				
		КонецЕсли;	
		Пока НЕ ПустаяСтрока(Стр) Цикл
			НомерВхождения = СтрНайти(Стр, "$");
			Если НомерВхождения = 0 Тогда
				Стр1	= Стр;
				Стр		= "";
			Иначе	
				Стр1	= Лев(Стр, НомерВхождения - 1);
				Стр		= Сред(Стр, НомерВхождения + 1);
			КонецЕсли;		
			СтруктураЗаписи = Новый Структура;
			НомерЗначения = 1;
			Пока НЕ ПустаяСтрока(Стр1) Цикл
				НомерВхождения = СтрНайти(Стр1, "@");
				Если НомерВхождения = 0 Тогда
					Значение	= Стр1;
					Стр1		= "";
				Иначе	
					Значение	= Лев(Стр1, НомерВхождения - 1);
					Стр1		= Сред(Стр1, НомерВхождения + 1);
				КонецЕсли;
				Если НомерЗначения = 1 Тогда
					СтруктураЗаписи.Вставить("date", Значение);
				ИначеЕсли НомерЗначения = 2 Тогда
					СтруктураЗаписи.Вставить("time", Значение);
				ИначеЕсли НомерЗначения = 3 Тогда
					СтруктураЗаписи.Вставить("duration", Значение);
				ИначеЕсли НомерЗначения = 4 Тогда
					СтруктураЗаписи.Вставить("number_a", Значение);
				ИначеЕсли НомерЗначения = 5 Тогда
					СтруктураЗаписи.Вставить("number_b", Значение);
				ИначеЕсли НомерЗначения = 6 Тогда
					СтруктураЗаписи.Вставить("extra", Значение);
				ИначеЕсли НомерЗначения = 7 Тогда
					СтруктураЗаписи.Вставить("file", Значение);					
				КонецЕсли;	
				НомерЗначения = НомерЗначения + 1;
			КонецЦикла;
			МассивCLON.Добавить(СтруктураЗаписи); 
		КонецЦикла;
	Исключение
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	Возврат МассивCLON;
КонецФункции // сфпНайтиВсеЗаписиРазговоровCLON()

////////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТНАЯ РЕКЛАМА COMAGIC

// Функция преобразовает строку из UTF-8
//
// Параметры:
//	Стр	- Строка	- Строка с шестнадцатеричными символами
//
// Возвращаемое значение:
//	Строка	- Строка после преобразования
//
Функция ПреобразоватьСтрокуИзУТФ8(Стр)
	РабочаяСтрока = Стр;
	Пока Истина Цикл
		ПозицияНачала = СтрНайти(РабочаяСтрока, "\u");
		Если ПозицияНачала = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаСимвола = Сред(РабочаяСтрока, ПозицияНачала, 6); 	
		НовыйСимвол = Символ(HexToDec(ВРег(Сред(СтрокаСимвола, 3))));
		РабочаяСтрока = СтрЗаменить(РабочаяСтрока, СтрокаСимвола, НовыйСимвол);
	КонецЦикла;	
	Возврат РабочаяСтрока; 
КонецФункции // ПреобразоватьСтрокуИзУТФ8()

// Функция переводит шестнадцатеричное число в десятичное
//
// Параметры:
//	_Hex	- Строка	- Шестнадцатеричное число
//
// Возвращаемое значение:
//	Число	- Десятичное число
//
Функция HexToDec(Знач ЗнHex)
	База = 16;
	ЗнHex = СокрЛП(ЗнHex);
	СтаршаяСтепень = СтрДлина(ЗнHex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >= 0 Цикл
		ЗнHexСимвол = Сред(ЗнHex, счСимволов, 1);
		Представление = СтрНайти("0123456789ABCDEF", ЗнHexСимвол) - 1;
		Результат = Результат + Представление * Степень(База, СтаршаяСтепень);
		СтаршаяСтепень = СтаршаяСтепень - 1;
		СчСимволов = СчСимволов + 1;
	КонецЦикла;	
	Возврат Результат;
КонецФункции // HexToDec()

// Функция вычисляет степень числа
//
// Параметры:
//	_База	- Число	- Число, возводимое в степень
//	_Степ	- Число	- Степень числа
//
// Возвращаемое значение:
//	Число	- Число, возведенное в степень
//
Функция Степень(ЗнБаза, ЗнСтеп)
	Результат = 1;
	// BSLLS:UnusedLocalVariable-off
	Для К = 1 По ЗнСтеп Цикл
	// BSLLS:UnusedLocalVariable-on
		Результат = Результат * ЗнБаза;
	КонецЦикла;
	Возврат Результат;
КонецФункции // Степень()

#КонецОбласти
