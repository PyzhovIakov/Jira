
#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьВложение(Форма, ОповещениеЗавершения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ДобавитьВложениеЗавершение", CRM_ЛентаСобытийКлиент, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОповещениеПродолжения);
	
КонецПроцедуры

Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Для Каждого ДанныеФайла Из ПомещенныеФайлы Цикл
		
		ИмяФайла = ДанныеФайла.ИмяФайла;
		
		Размер = ПолучитьИзВременногоХранилища(ДанныеФайла.Хранение).Размер();
		Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
		
		РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(ИмяФайла, Размер, Расширение);
		Если РезультатПроверки.Ошибка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока					= Форма.БыстрыйВвод_Вложения.Добавить();
		НоваяСтрока.ИмяФайла		= ИмяФайла;
		НоваяСтрока.АдресВХранилище	= ДанныеФайла.Хранение;
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	
КонецПроцедуры

Процедура УдалитьВложение(Форма, ИдентификаторВложения) Экспорт
	
	ТекущиеДанные = Форма.БыстрыйВвод_Вложения.НайтиПоИдентификатору(ИдентификаторВложения);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.БыстрыйВвод_Вложения.Удалить(ТекущиеДанные);
	
КонецПроцедуры

Процедура ВставитьФайлИзБуфераОбмена(Форма) Экспорт
	
	Если НЕ CRM_ПрисоединенныеФайлы.БуферЗаполненФайлами() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена'"), Форма.Окно.ПолучитьНавигационнуюСсылку(), 
										НСтр("ru = 'Буфер обмена пуст'"));
		Возврат;	
	КонецЕсли;
	
	МассивСсылокНаФайлы = CRM_ПрисоединенныеФайлы.МассивСсылокИзБуфера();
	
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = Форма.УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(СсылкаНаФайл,, ПараметрыДанныхФайла);
		
		НоваяСтрока					= Форма.БыстрыйВвод_Вложения.Добавить();
		НоваяСтрока.ИмяФайла		= ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		НоваяСтрока.АдресВХранилище	= ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ДанныеФайла.Расширение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаКомандОбъектовЛенты() Экспорт
	
	ИменаКоманд = Новый Массив;
	
	ИменаКоманд.Добавить("ВзаимодействиеПланов_Открыть_");
	ИменаКоманд.Добавить("ВзаимодействиеПланов_Отменить");
	ИменаКоманд.Добавить("ВзаимодействиеИстории_Открыть_");
	
	ИменаКоманд.Добавить("ЛичнаяЗадачаПланов_Открыть_");
	ИменаКоманд.Добавить("ЛичнаяЗадачаПланов_Удалить_");
	ИменаКоманд.Добавить("ЛичнаяЗадачаИстории_Открыть_");
	
	ИменаКоманд.Добавить("Примечание_Открыть_");
	ИменаКоманд.Добавить("Примечание_Удалить_");
	
	ИменаКоманд.Добавить("Счет_СоздатьНаОсновании_");
	ИменаКоманд.Добавить("Заказ_СоздатьНаОсновании_");
	
	ИменаКоманд.Добавить("Файл_Открыть_");
	ИменаКоманд.Добавить("Файл_Перейти_");
	ИменаКоманд.Добавить("Файлы_Показать_");
	
	ИменаКоманд.Добавить("ПрочиеОбъекты_Удалить_");
	ИменаКоманд.Добавить("ОбъектЛенты_Закрепить_");
	ИменаКоманд.Добавить("ОбъектЛенты_Открепить_");
	
	ИменаКоманд.Добавить("ОбъектЛенты_СохранитьВложение_");
	ИменаКоманд.Добавить("ОбъектЛенты_КопироватьВложение_");
	ИменаКоманд.Добавить("ОбъектЛенты_СохранитьВложениеОбщая_");
	ИменаКоманд.Добавить("ОбъектЛенты_КопироватьВложениеОбщая_");
	
	Возврат ИменаКоманд;
	
КонецФункции

Процедура ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, Форма) Экспорт
	
	Если ИмяКоманды = "ВзаимодействиеПланов_Открыть_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ИмяФормы = "Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая";
		ПараметрыФормы = Новый Структура("Ключ", ОбъектСсылка);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДокОснование = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ДокументОснование");
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.CRM_Интерес")
			И (Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
			Или ДокОснование <> Форма.Объект.Ссылка) Тогда
			ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая";
			ПараметрыФормы = Новый Структура("Ключ, ПозиционироватьНаВзаимодействие", ДокОснование, ОбъектСсылка);
			РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормы,
			ПараметрыФормы,
			Форма,
			Форма.УникальныйИдентификатор, , , ,
			РежимОткрытия);
			
	ИначеЕсли ИмяКоманды = "ВзаимодействиеИстории_Открыть_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокумента",
			Новый Структура("Ключ, ОткрыватьФорму", ОбъектСсылка, Истина),
			Форма,
			Форма.УникальныйИдентификатор, , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяКоманды = "ЛичнаяЗадачаПланов_Открыть_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ИмяФормы = "Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачиКраткая";
		ПараметрыФормы = Новый Структура("Ключ", ОбъектСсылка);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДокОснование = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Предмет");
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.CRM_Интерес")
			И (Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
			Или ДокОснование <> Форма.Объект.Ссылка) Тогда
			ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая";
			ПараметрыФормы = Новый Структура("Ключ, ПозиционироватьНаВзаимодействие", ДокОснование, ОбъектСсылка);
			РежимОткрытия = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормы,
			ПараметрыФормы,
			Форма,
			Форма.УникальныйИдентификатор, , , ,
			РежимОткрытия);
		
	ИначеЕсли ИмяКоманды = "ЛичнаяЗадачаИстории_Открыть_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи",
			Новый Структура("Ключ", ОбъектСсылка),
			Форма,
			Форма.УникальныйИдентификатор, , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяКоманды = "Примечание_Открыть_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ОткрытьФорму("Справочник.Заметки.Форма.CRM_ФормаЭлемента",
			Новый Структура("Ключ", ОбъектСсылка),
			Форма,
			Форма.УникальныйИдентификатор, , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяКоманды = "ВзаимодействиеПланов_Отменить" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда",			"Отменить");
		ДополнительныеПараметры.Вставить("ПараметрКоманды",	ПараметрКоманды);
		
		ТекстВопроса = НСтр("ru='Взаимодействие будет отменено. Продолжить?';en='Interaction will be cancelled. Continue?'");
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыполнитьКомандуЛентыЗавершение", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяКоманды = "ЛичнаяЗадачаПланов_Удалить_" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда",			"Удалить");
		ДополнительныеПараметры.Вставить("ПараметрКоманды",	ПараметрКоманды);
		
		ТекстВопроса = НСтр("ru='Задача будет удалена. Продолжить?';en='Task will be deleted. Continue?'");
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыполнитьКомандуЛентыЗавершение", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяКоманды = "Примечание_Удалить_" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда",			"Удалить");
		ДополнительныеПараметры.Вставить("ПараметрКоманды",	ПараметрКоманды);
		
		ТекстВопроса = НСтр("ru='Примечание будет удалено. Продолжить?';en='Note will be deleted. Continue?'");
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыполнитьКомандуЛентыЗавершение", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяКоманды = "Счет_СоздатьНаОсновании_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ИмяФормы = "Документ.CRM_СчетНаОплатуПокупателю.ФормаОбъекта";
		ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ОбъектСсылка), Форма, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяКоманды = "Заказ_СоздатьНаОсновании_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		ИмяФормы = "Документ.ЗаказКлиента.ФормаОбъекта";
		ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ОбъектСсылка), Форма, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяКоманды = "Файл_Открыть_" Тогда
		
		ДанныеФайла = CRM_ЛентаСобытий.ДанныеФайлаПоИдентификатору(ПараметрКоманды, Форма.УникальныйИдентификатор);
		
		Если ДанныеФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если (ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") 
			Или ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")) Тогда
			
			Если ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				ДанныеПисьма = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(ДанныеФайла.Владелец,
					 "УчетнаяЗапись, Ответственный,
					| Ссылка");
			Иначе
				ДанныеПисьма = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(ДанныеФайла.Владелец,
					 "УчетнаяЗапись, Ответственный, CRM_РольОтветственного,
					| Ссылка");
			КонецЕсли;
			
			Если Не CRM_ЛентаСобытий.ЕстьПраваДоступаКЭлектронномуПисьму(ДанныеПисьма, Форма.ТекущийПользователь) Тогда
				ТекстСообщения =
					CRM_ВзаимодействияКлиентСервер.ПолучитьТекстСообщенияОбОтсутствииПравДоступаКЭлектронномуПисьму(ДанныеПисьма.УчетнаяЗапись);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	ИначеЕсли ИмяКоманды = "Файл_Перейти_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр",	Форма.ТолькоПросмотр);
		ПараметрыФормы.Вставить("СкрыватьВладельца", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока",	ОбъектСсылка);
		
		ФормаФайлы = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
			 ПараметрыФормы, Форма,
			 Форма.УникальныйИдентификатор);
		ФормаФайлы.Открыть();
		
		ФормаФайлы.Элементы.Список.ТекущаяСтрока = ОбъектСсылка;
		
	ИначеЕсли ИмяКоманды = "Файлы_Показать_" Тогда
		
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ПоказатьЗначение(, ОбъектСсылка);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТолькоПросмотр",	Форма.ТолькоПросмотр);
			ПараметрыФормы.Вставить("СкрыватьВладельца", Истина);
			ПараметрыФормы.Вставить("ВладелецФайла",	ОбъектСсылка);
			
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы", ПараметрыФормы, Форма,
				 Форма.УникальныйИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "ПрочиеОбъекты_Удалить_" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда",			"Удалить");
		ДополнительныеПараметры.Вставить("ПараметрКоманды",	ПараметрКоманды);
		
		ТекстВопроса = НСтр("ru='Объект будет удален. Продолжить?';en='Object will be deleted. Continue?'");
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыполнитьКомандуЛентыЗавершение", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяКоманды = "ОбъектЛенты_Закрепить_" Тогда
		
		Если СтрНайти(Форма.ИмяФормы, "CRM_ФормаСписка") = 0 И СтрНайти(Форма.ИмяФормы, "CRM_Модуль_ФормаСписка") = 0 Тогда
			CRM_ЛентаСобытий.ЗакрепитьОткрепитьЗаписьЛенты(Форма.Объект.Ссылка, ПараметрКоманды, Истина);
		Иначе
			CRM_ЛентаСобытий.ЗакрепитьОткрепитьЗаписьЛенты(Форма.ПартнерОтбора, ПараметрКоманды, Истина);
		КонецЕсли;
		Оповестить("ЛентаСобытий_Обновить");
		
	ИначеЕсли ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
		
		Если СтрНайти(Форма.ИмяФормы, "CRM_ФормаСписка") = 0 И СтрНайти(Форма.ИмяФормы, "CRM_Модуль_ФормаСписка") = 0 Тогда
			CRM_ЛентаСобытий.ЗакрепитьОткрепитьЗаписьЛенты(Форма.Объект.Ссылка, ПараметрКоманды, Ложь);
		Иначе
			CRM_ЛентаСобытий.ЗакрепитьОткрепитьЗаписьЛенты(Форма.ПартнерОтбора, ПараметрКоманды, Ложь);
		КонецЕсли;
		Оповестить("ЛентаСобытий_Обновить");
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ОбъектЛенты_СохранитьВложение") Тогда
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		
		МассивСсылок = Новый Массив;
		
		Если СтрЗаканчиваетсяНа(ИмяКоманды, "Общая_") Тогда
			МассивСсылок = CRM_ЛентаСобытий.ПолучитьВложенияОбъекта(ОбъектСсылка);
		Иначе
			МассивСсылок.Добавить(ОбъектСсылка);
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("Форма, Вложения", Форма, МассивСсылок);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
		
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "ОбъектЛенты_КопироватьВложение") Тогда
		ОбъектСсылка = CRM_ЛентаСобытий.СсылкаПоИдентификатору(ПараметрКоманды);
		
		МассивСсылок = Новый Массив;
		
		Если СтрЗаканчиваетсяНа(ИмяКоманды, "Общая_") Тогда
			МассивСсылок = CRM_ЛентаСобытий.ПолучитьВложенияОбъекта(ОбъектСсылка);
		Иначе
			МассивСсылок.Добавить(ОбъектСсылка);
		КонецЕсли;
		
		CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
			
		ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Форма.Окно.ПолучитьНавигационнуюСсылку(), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуЛентыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытий.ВыполнитьКомандуЛентыНаСервере(
		ДополнительныеПараметры.Команда, ДополнительныеПараметры.ПараметрКоманды);
	Оповестить("ЛентаСобытий_Обновить");
	
КонецПроцедуры

Функция ПроверитьЗаполнениеБыстрогоВвода(Знач ТипОбъекта, Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПроверяемыеРеквизиты = Новый Соответствие;
	
	Если ТипОбъекта = "Примечание" Тогда
		
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Тема",				Элементы.БыстрыйВвод_ПримечаниеТема.Имя);
		
	ИначеЕсли ТипОбъекта = "Взаимодействие" Тогда
		
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ВзаимодействиеОтправитель",
				Элементы.БыстрыйВвод_ВзаимодействиеОтправитель.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ВзаимодействиеВид",			Элементы.БыстрыйВвод_ВзаимодействиеВид.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Тема",						Элементы.БыстрыйВвод_ВзаимодействиеТема.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ДатаНачала",					Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ДатаОкончания",
							Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Дата.Имя);
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ЗадачаПолучатель",	Элементы.БыстрыйВвод_ЗадачаПолучатель.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ДатаОкончания",		Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Тема",				Элементы.БыстрыйВвод_ЗадачаТема.Имя);
		
	ИначеЕсли ТипОбъекта = "Письмо" Тогда
		
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ПисьмоСписокПолучателейПисьма",
				Элементы.БыстрыйВвод_ПисьмоСписокПолучателейПисьма.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Тема",							Элементы.БыстрыйВвод_ПисьмоТема.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Содержание",						Элементы.БыстрыйВвод_ПисьмоСодержание.Имя);
		
	ИначеЕсли ТипОбъекта = "Чат" Тогда
		
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ЧатУчетнаяЗапись",	Элементы.БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_ЧатПолучатель",		Элементы.БыстрыйВвод_ЧатПредставлениеПолучателя.Имя);
		ПроверяемыеРеквизиты.Вставить("БыстрыйВвод_Содержание",			Элементы.БыстрыйВвод_ЧатСодержание.Имя);
		
	КонецЕсли;
	
	Успех = Истина;
	Для Каждого ОписаниеРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ИмяРеквизита = ОписаниеРеквизита.Ключ;
		ИмяЭлемента = ОписаниеРеквизита.Значение;
		
		Если Не ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда
			Успех = Ложь;
			ТекстСообщения = СтрШаблон(НСтр("ru='Поле ""%1"" не заполнено ';
				|en='Field ""%1"" is not filled '"),
				 Элементы[ИмяЭлемента].Заголовок);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успех;
	
КонецФункции

Процедура ПоказатьПолнуюФормуОбъекта(Знач Режим, Знач ТипОбъекта, Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ДанныеЗаполнения = ДанныеЗаполненияОбъектаБыстрогоВвода(Режим, ТипОбъекта, Форма);
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	
	Если ТипОбъекта = "Взаимодействие" Тогда
		ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
		ИмяФормы = "Документ.CRM_Взаимодействие.Форма.ФормаДокумента";
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		ПараметрыОткрытия.Вставить("ИзСпискаАктивностей", Ложь);
		ИмяФормы = "Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи";
	ИначеЕсли ТипОбъекта = "Письмо" Тогда
		ИмяФормы = "Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента";
	ИначеЕсли ТипОбъекта = "Заметки" Тогда
		ИмяФормы = "Справочник.Заметки.Форма.CRM_ФормаЭлемента";
	ИначеЕсли ТипОбъекта = "Примечание" Тогда
		ИмяФормы = "Справочник.Заметки.Форма.CRM_ФормаЭлемента";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыОткрытия,
		Форма,
		Форма.УникальныйИдентификатор, , , ,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

Функция ДанныеЗаполненияОбъектаБыстрогоВвода(Знач Режим, Знач ТипОбъекта, Форма,
	 Знач ДанныеОбъекта = Неопределено,
	 Знач Основание = Неопределено) Экспорт
	
	Если ДанныеОбъекта = Неопределено Тогда
		Если Режим = "ЛентаКлиента" И Не Форма.Элементы.Найти("Список") = Неопределено Тогда
			ДанныеОбъекта = Форма.Элементы.Список.ТекущиеДанные;
		Иначе
			ДанныеОбъекта = Форма.Объект;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ТипОбъекта = "Примечание" Тогда
		
		ДанныеЗаполнения.Вставить("ДатаИзменения",			ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеЗаполнения.Вставить("Предмет",				ДанныеОбъекта.Ссылка);
		ДанныеЗаполнения.Вставить("Автор",					Форма.ТекущийПользователь);
		ДанныеЗаполнения.Вставить("ТекстСодержания",		Форма.БыстрыйВвод_Тема);
		ДанныеЗаполнения.Вставить("CRM_ЗаметкаЛенты",		Истина);
		
	ИначеЕсли ТипОбъекта = "Взаимодействие" Тогда
		
		ДанныеЗаполнения.Вставить("Дата",					ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеЗаполнения.Вставить("ВидВзаимодействия",		Форма.БыстрыйВвод_ВзаимодействиеВид);
		Если Режим = "ЛентаИнтереса" Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование",	 ДанныеОбъекта.Ссылка);
			ДанныеЗаполнения.Вставить("Партнер",			 Форма.БыстрыйВвод_ВзаимодействиеПартнер);
			ДанныеЗаполнения.Вставить("ПотенциальныйКлиент", ДанныеОбъекта.ПотенциальныйКлиент);
			ДанныеЗаполнения.Вставить("СостояниеИнтереса",	 ДанныеОбъекта.СостояниеИнтереса);
		ИначеЕсли Режим = "ЛентаКлиента" Тогда
			ДанныеЗаполнения.Вставить("Партнер",			ДанныеОбъекта.Ссылка);
		ИначеЕсли Режим = "ЛентаКонтакта" Тогда
			ДанныеЗаполнения.Вставить("Партнер",			ДанныеОбъекта.Владелец);
		ИначеЕсли Режим = "ЛентаПотенциальногоКлиента" Тогда
			ДанныеЗаполнения.Вставить("ПотенциальныйКлиент", ДанныеОбъекта.Ссылка);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("КонтактноеЛицо",			Форма.БыстрыйВвод_ВзаимодействиеПолучатель);
		ДанныеЗаполнения.Вставить("ПлановаяДата",			Форма.БыстрыйВвод_ДатаНачала);
		ДанныеЗаполнения.Вставить("ПлановаяДатаЗавершение",	Форма.БыстрыйВвод_ДатаОкончания);
		ДанныеЗаполнения.Вставить("НаВесьДень",				Форма.БыстрыйВвод_ВзаимодействиеНаВесьДень);
		ДанныеЗаполнения.Вставить("Тема",					Форма.БыстрыйВвод_Тема);
		ДанныеЗаполнения.Вставить("Содержание",				Форма.БыстрыйВвод_Содержание);
		ДанныеЗаполнения.Вставить("Ответственный",			Форма.БыстрыйВвод_ВзаимодействиеОтправитель);
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		ИмяКонтактноеЛицо = "CRM_КонтактноеЛицо";
		
		ДанныеЗаполнения.Вставить("Дата",						 ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеЗаполнения.Вставить("Автор",						 Форма.ТекущийПользователь);
		ДанныеЗаполнения.Вставить("Исполнитель",				 Форма.БыстрыйВвод_ЗадачаПолучатель);
		ДанныеЗаполнения.Вставить("Предмет",					 ДанныеОбъекта.Ссылка);
		ДанныеЗаполнения.Вставить("ПредметСтрокой",				 CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ДанныеОбъекта.Ссылка));
		ДанныеЗаполнения.Вставить("ДатаНачала",					 Форма.БыстрыйВвод_ДатаНачала);
		ДанныеЗаполнения.Вставить("СрокИсполнения",				 Форма.БыстрыйВвод_ДатаОкончания);
		ДанныеЗаполнения.Вставить("Наименование",				 Форма.БыстрыйВвод_Тема);
		ДанныеЗаполнения.Вставить("Описание",					 Форма.БыстрыйВвод_Содержание);
		ДанныеЗаполнения.Вставить("Важность",					 ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Обычная"));
		Если Режим = "ЛентаИнтереса" Тогда
			ДанныеЗаполнения.Вставить("CRM_Партнер",			 ДанныеОбъекта.Партнер);
			ДанныеЗаполнения.Вставить("CRM_ПотенциальныйКлиент", ДанныеОбъекта.ПотенциальныйКлиент);
			ДанныеЗаполнения.Вставить(ИмяКонтактноеЛицо,		 ДанныеОбъекта.КонтактноеЛицо);
			ДанныеЗаполнения.Вставить("CRM_Проект",				 ДанныеОбъекта.Проект);
		ИначеЕсли Режим = "ЛентаКлиента" Тогда
			ДанныеЗаполнения.Вставить("CRM_Партнер",			 ДанныеОбъекта.Ссылка);
		ИначеЕсли Режим = "ЛентаПотенциальногоКлиента" Тогда
			ДанныеЗаполнения.Вставить("CRM_ПотенциальныйКлиент", ДанныеОбъекта.Ссылка);
		Иначе
			ДанныеЗаполнения.Вставить("CRM_Партнер",			 ДанныеОбъекта.Владелец);
			ДанныеЗаполнения.Вставить(ИмяКонтактноеЛицо,		 ДанныеОбъекта.Ссылка);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеОбъекта.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			ДанныеЗаполнения.Вставить(ИмяКонтактноеЛицо,		 ДанныеОбъекта.CRM_ОсновноеКонтактноеЛицо);
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("СостояниеБизнесПроцесса",
				ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен"));
		ДанныеЗаполнения.Вставить("ПринятаКИсполнению",			Истина);
		ДанныеЗаполнения.Вставить("CRM_Личная",					Истина);
		
	ИначеЕсли ТипОбъекта = "Письмо" Тогда
		
		ДанныеЗаполнения.Вставить("ДанныеБыстрогоВвода", 			Истина);
		Если Режим = "ЛентаИнтереса" Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование",			ДанныеОбъекта.Ссылка);
			Если ДанныеОбъекта.Свойство("Проект") Тогда
				ДанныеЗаполнения.Вставить("CRM_Проект",				ДанныеОбъекта.Проект);
			КонецЕсли;
			Если ДанныеОбъекта.Свойство("СостояниеИнтереса") Тогда
				ДанныеЗаполнения.Вставить("СостояниеИнтереса",		ДанныеОбъекта.СостояниеИнтереса);
			КонецЕсли;
		Иначе
			ДанныеЗаполнения.Вставить("ДокументОснование",			Неопределено);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Дата",							ОбщегоНазначенияКлиент.ДатаСеанса());
		ДанныеЗаполнения.Вставить("Шаблон",							Форма.Шаблон);
		ДанныеЗаполнения.Вставить("Автор",							Форма.ТекущийПользователь);
		ДанныеЗаполнения.Вставить("Ответственный",					Форма.ТекущийПользователь);
		ДанныеЗаполнения.Вставить("СписокПолучателейПисьма",		Форма.БыстрыйВвод_ПисьмоСписокПолучателейПисьма);
		ДанныеЗаполнения.Вставить("СписокПолучателейКопий",			Форма.БыстрыйВвод_ПисьмоСписокПолучателейКопий);
		ДанныеЗаполнения.Вставить("СписокПолучателейСкрытыхКопий",	Форма.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий);
		ДанныеЗаполнения.Вставить("Тема",							Форма.БыстрыйВвод_Тема);
		ДанныеЗаполнения.Вставить("ОтправлятьСразу",				Форма.БыстрыйВвод_ПисьмоОтправлятьСразу);
		ДанныеЗаполнения.Вставить("УникальныйИдентификатор",		Форма.УникальныйИдентификатор);
		
		Если Основание = Неопределено Тогда
			ТекстыПисьма = CRM_ЛентаСобытий.ТекстыПисьма(Форма.БыстрыйВвод_Содержание,
				Форма.БыстрыйВвод_ПисьмоУчетнаяЗапись, Форма.ТекущийПользователь);
		Иначе
			ТекстыПисьма = CRM_ЛентаСобытий.ТекстыПисьма(Форма.БыстрыйВвод_Содержание,
				Форма.БыстрыйВвод_ПисьмоУчетнаяЗапись, Форма.ТекущийПользователь, Основание);
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Текст",							ТекстыПисьма.ТекстПисьма);
		ДанныеЗаполнения.Вставить("ТекстHTML",						ТекстыПисьма.ТекстHTML);
		ДанныеЗаполнения.Вставить("ИдентификаторыКартинок",			ТекстыПисьма.ИдентификаторыКартинок);
		
		ДанныеЗаполнения.Вставить("ТипТекста",
									ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"));
		ДанныеЗаполнения.Вставить("УчетнаяЗапись",					Форма.БыстрыйВвод_ПисьмоУчетнаяЗапись);
		ДанныеЗаполнения.Вставить("ОтправительПредставление",		Форма.БыстрыйВвод_ПисьмоОтправительПредставление);
		
		ПолучателиМассив = Новый Массив;
		Для Каждого СтрокаПолучателя Из Форма.БыстрыйВвод_ПисьмоПолучатели Цикл
			НовыйЭлемент = Новый Структура("Адрес,Представление,Контакт");
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаПолучателя);
			ПолучателиМассив.Добавить(НовыйЭлемент);
		КонецЦикла;
		ДанныеЗаполнения.Вставить("ПолучателиПисьма",				ПолучателиМассив);
		
		ПолучателиМассив = Новый Массив;
		Для Каждого СтрокаПолучателя Из Форма.БыстрыйВвод_ПисьмоПолучателиКопий Цикл
			НовыйЭлемент = Новый Структура("Адрес,Представление,Контакт");
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаПолучателя);
			ПолучателиМассив.Добавить(НовыйЭлемент);
		КонецЦикла;
		ДанныеЗаполнения.Вставить("ПолучателиКопий",				ПолучателиМассив);
		
		ПолучателиМассив = Новый Массив;
		Для Каждого СтрокаПолучателя Из Форма.БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий Цикл
			НовыйЭлемент = Новый Структура("Адрес,Представление,Контакт");
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаПолучателя);
			ПолучателиМассив.Добавить(НовыйЭлемент);
		КонецЦикла;
		ДанныеЗаполнения.Вставить("ПолучателиСкрытыхКопий",			ПолучателиМассив);
		
	ИначеЕсли ТипОбъекта = "Чат" Тогда
		ЭтоЧатB2BПортала =  Форма.БыстрыйВвод_ЧатУчетнаяЗапись 
		= ПредопределенноеЗначение("Справочник.CRM_УчетныеЗаписиМессенджеров.B2BПортал");

		//ДанныеЗаполнения.Вставить("Содержание",	Форма.БыстрыйВвод_Содержание);
		//ДанныеЗаполнения.Вставить("Диалог",	Форма.БыстрыйВвод_ЧатДиалог);
		ДанныеЗаполнения.Вставить("Содержание",						Форма.БыстрыйВвод_Содержание);
		ДанныеЗаполнения.Вставить("УчетнаяЗапись",					Форма.БыстрыйВвод_ЧатУчетнаяЗапись);
		Если ЭтоЧатB2BПортала Тогда  
			// Для портала используется группа.
			// По ней производится поиск диалога,
			// Так как сообщения от всех пользователей в рамках обращения собираютися в один лиалог.
			
			ДанныеЗаполнения.Вставить("Группа",						Строка(ДанныеОбъекта.Ссылка.УникальныйИдентификатор()));
			ДанныеЗаполнения.Вставить("ГруппаПредставление",		ДанныеОбъекта.Ссылка);
		Иначе
			ДанныеЗаполнения.Вставить("Группа",						Форма.БыстрыйВвод_ЧатГруппа);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Адрес",							Форма.БыстрыйВвод_ЧатАдрес);
		ДанныеЗаполнения.Вставить("Получатель",						Форма.БыстрыйВвод_ЧатПолучатель);
		ДанныеЗаполнения.Вставить("ПредставлениеПолучателя",		Форма.БыстрыйВвод_ЧатПредставлениеПолучателя);
		ДанныеЗаполнения.Вставить("ЭтоНомерТелефона", Форма.БыстрыйВвод_ЧатЭтоНомерТелефона);
		
		Если Режим = "ЛентаИнтереса" Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование",			ДанныеОбъекта.Ссылка);
			ДанныеЗаполнения.Вставить("СостояниеИнтереса",			ДанныеОбъекта.СостояниеИнтереса);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Файл" Тогда
		
		ДанныеВложений = Новый Массив;
		Для Каждого СтрокаВложения Из Форма.БыстрыйВвод_Вложения Цикл
			
			ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор = Форма.ТекущийПользователь;
			ПараметрыФайла.ВладелецФайлов = ДанныеОбъекта.Ссылка;
			ПараметрыФайла.ИмяБезРасширения = СтрокаВложения.ИмяФайла;
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ПараметрыФайла", ПараметрыФайла);
			ДанныеФайла.Вставить("АдресФайлаВоВременномХранилище", СтрокаВложения.АдресВХранилище);
			ДанныеФайла.Вставить("Описание", Форма.БыстрыйВвод_Тема);
			
			ДанныеВложений.Добавить(ДанныеФайла);
			
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить("ДанныеВложений", ДанныеВложений);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура СоздатьОбъектОбычныйВвод(Знач Режим, Знач ТипОбъекта, Форма, Знач ДанныеОбъекта = Неопределено) Экспорт
	
	Если ДанныеОбъекта = Неопределено Тогда
		Если Режим = "ЛентаКлиента" И Не Форма.Элементы.Найти("Список") = Неопределено Тогда
			ДанныеОбъекта = Форма.Элементы.Список.ТекущиеДанные;
		Иначе
			ДанныеОбъекта = Форма.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОбъекта = "Интерес" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ДанныеОбъекта.Ссылка);
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Продажи.Интерес.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "Счет" Тогда
		
		ИмяФормы = "Документ.CRM_СчетНаОплатуПокупателю.ФормаОбъекта";
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ДанныеОбъекта.Ссылка);
		ОткрытьФорму(ИмяФормы, ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "ЗаказКлиента" Тогда
		
		ИмяФормы = "Документ.ЗаказКлиента.ФормаОбъекта";
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ДанныеОбъекта.Ссылка);
		ОткрытьФорму(ИмяФормы, ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "КоммерческоеПредложение" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ДанныеОбъекта.Ссылка);
		ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.ФормаОбъекта", ПараметрыОткрытия, Форма,
			 Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "Поручение" Тогда
		
		ПараметрыОснования = Новый Структура;
		Если Режим = "ЛентаКонтакта" Тогда
			ПараметрыОснования.Вставить("Основание", ДанныеОбъекта.Владелец);
			ПараметрыОснования.Вставить("КонтактноеЛицо", ДанныеОбъекта.Ссылка);
		Иначе
			ПараметрыОснования.Вставить("Основание", ДанныеОбъекта.Ссылка);
		КонецЕсли;
		ПараметрыОснования.Вставить("КартаМаршрута", ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
		
		ПараметрыОткрытия = Новый Структура("Основание", ПараметрыОснования);
		
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыОткрытия, Форма,
			 Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ПредметОснование", ДанныеОбъекта.Ссылка);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыборИзДерева", ПараметрыОткрытия, Форма,
			 Форма.УникальныйИдентификатор);
		
	ИначеЕсли ТипОбъекта = "СообщениеSMS" Тогда
		
		Если Режим = "ЛентаИнтереса" Тогда
			ПотенциальныйКлиент	= ДанныеОбъекта.ПотенциальныйКлиент;
			КонтактноеЛицо		= ДанныеОбъекта.КонтактноеЛицо;
			Партнер				= ДанныеОбъекта.Партнер;
		ИначеЕсли Режим = "ЛентаКлиента" Тогда
			ПотенциальныйКлиент	= Неопределено;
			КонтактноеЛицо		= ДанныеОбъекта.CRM_ОсновноеКонтактноеЛицо;
			Партнер				= ДанныеОбъекта.Ссылка;
		ИначеЕсли Режим = "ЛентаПотенциальногоКлиента" Тогда
			ПотенциальныйКлиент	= ДанныеОбъекта.Ссылка;
			КонтактноеЛицо		= Неопределено;
			Партнер				= Неопределено;
		Иначе
			ПотенциальныйКлиент	= Неопределено;
			КонтактноеЛицо		= ДанныеОбъекта.Ссылка;
			Партнер				= Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Контакт = КонтактноеЛицо;
		ИначеЕсли ЗначениеЗаполнено(Партнер) Тогда
			Контакт = Партнер;
		Иначе
			Контакт = ПотенциальныйКлиент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контакт) Тогда
			Возврат;
		КонецЕсли;
		
		ТелефонКонтакта = "";
		СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(Контакт);
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонКонтакта = СписокТелефонов[0].Значение;
		КонецЕсли;
		
		ПараметрыОснования = Новый Структура;
		ПараметрыОснования.Вставить("Ссылка",	Контакт);
		Если Режим = "ЛентаИнтереса" Тогда
			ПараметрыОснования.Вставить("ВзаимодействиеОснование", ДанныеОбъекта.Ссылка);
		КонецЕсли;
		ПараметрыОснования.Вставить("Телефон",	ТелефонКонтакта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Основание", ПараметрыОснования);
		ПараметрыОткрытия.Вставить("СокращеннаяФорма", Истина);
		ПараметрыОткрытия.Вставить("ДанныеЗаполнения", ДанныеОбъекта.Ссылка);
		
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросОЗаписиОбъекта(Форма, ОповещениеЗавершения, ПроверятьМодифицированность) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И (Форма.Объект.Ссылка.Пустая() Или (ПроверятьМодифицированность И Форма.Модифицированность)) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		ОповещениеПродолжения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОЗаписиОбъекта",
			 CRM_ЛентаСобытийКлиент,
			 ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Данные будут записаны. Продолжить?';en='Data will be written. Continue?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветНаВопросОЗаписиОбъекта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		CRM_ОбщегоНазначенияКлиент.Записать(Форма, Истина, ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	Вложения = ДополнительныеПараметры.Вложения;
		
	Если Подключено Тогда
		КаталогСохранения = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", Истина);
		ДополнительныеПараметры.Вставить("Форма", ДополнительныеПараметры.Форма);
		ДополнительныеПараметры.Вставить("ПолучаемыеФайлы", Новый Массив);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для Каждого ТекущееВложение Из Вложения Цикл
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	Вложения = ДополнительныеПараметры.Вложения;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ДополнительныеПараметры.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= Вложения.Количество() - 1 Тогда
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
		ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения",   ТекущийНомерВложения);
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	Вложения = ДополнительныеПараметры.Вложения;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	
	Если ТекущийНомерВложения <= Вложения.Количество() - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.Вложения.Количество() Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	КонецЕсли;		
КонецПроцедуры	

Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Сохраняется файл ""%1"" (%2 Мб)"
"Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПараметрыВложения.ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.Вложения.Количество() - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПараметрыВложения.ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПараметрыВложения.ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку), 1, НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Вложения = ДополнительныеПараметры.Вложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ШаблонТекстаВопроса	= НСтр("ru='Файл %1 уже существует.%2Выберите действие для всех существующих файлов:'");
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса,
		 ПараметрыВложения.ПолноеИмяФайла,
		 Символы.ПС);
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

#КонецОбласти
