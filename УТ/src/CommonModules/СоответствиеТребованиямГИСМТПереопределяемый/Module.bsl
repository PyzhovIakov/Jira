
#Область ПрограммныйИнтерфейс

// Перед определением параметров интеграции.
// Определяет необходимость встраивания гиперссылки в форме документа
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ВстроитьГиперссылку - Булево
Процедура ПередОпределениемПараметровИнтеграции(Форма, ВстроитьГиперссылку) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.СборкаТоваров.Форма.ФормаДокумента"



	Тогда
		ВстроитьГиперссылку = Истина;
	КонецЕсли;
	
КонецПроцедуры

// При определении параметров интеграции.
// Определяет группу для размещения статуса проверки документа в ГИС МТ
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПараметрыИнтеграции - Структура:
// * ИмяРеквизитаФормыОбъект - Строка - Имя реквизита объекта в форме
// * РазмещатьЭлементыИнтерфейса - Булево - Размещать элементы интерфейса
// * ИмяРодительскойГруппыФормы - Строка - Имя группы, в которую будет встроена гиперссылка
// * ИмяКомандыСоответствиеТребованиямГИСМТ - Строка - Дата документа
// * ЗапуститьПроверкуДокументаВФоне - Булево - значение константы ИспользоватьФоновуюПроверкуДокументовГИСМТ
// * ИнтервалОбработкиОжидания - Строка - интервал обработки ожидания при фоновой проверке
Процедура ПриОпределенииПараметровИнтеграции(Форма, ПараметрыИнтеграции) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.СборкаТоваров.Форма.ФормаДокумента"



	Тогда
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы  = "";
	Иначе
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы  = "ГруппаСостояниеЭДО";
	КонецЕсли;
	
	ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса = Истина;
	
КонецПроцедуры

// При определении реквизитов документа.
// Необходимо заполнить в структуре РеквизитыДокумента из прикладного документа поля:
// Дата, Организация, Контрагент.
// Параметры:
//  Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
//  РеквизитыДокумента - Структура:
// * Дата - Дата - Дата документа
// * Организация - Неопределено, ОпределяемыйТип.Организация - Организация
// * Контрагент - Неопределено, ОпределяемыйТип.КонтрагентГосИС - Контрагент
// * ДанныеЭлектронногоДокумента - Неопределено
Процедура ПриОпределенииРеквизитовДокумента(Документ, РеквизитыДокумента) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПриобретения")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		
		Реквизиты = "Дата, Организация, Контрагент";
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Реквизиты);
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЗначенияРеквизитов);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Документ);
			
			ПараметрыПечати = Новый Структура();
			ПараметрыПечати.Вставить("ЗаполнениеЭлектронногоДокумента");
			
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
			СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
			
			РеквизитыДокумента.ДанныеЭлектронногоДокумента = СтруктураДанных; 
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")

	Тогда
		
		Реквизиты = "Дата, Организация, ОрганизацияПолучатель";
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Реквизиты);
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЗначенияРеквизитов);
		
		РеквизитыДокумента.Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Документ);
			
			ПараметрыПечати = Новый Структура();
			ПараметрыПечати.Вставить("ЗаполнениеЭлектронногоДокумента");
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
				ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
			КонецЕсли;
			
			МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
		УстановитьПривилегированныйРежим(Истина);
			СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
			РеквизитыДокумента.ДанныеЭлектронногоДокумента = СтруктураДанных;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СборкаТоваров")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров")


		
		Тогда
		
		Реквизиты = "Дата, Организация";
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, Реквизиты);
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

// При определении типа документа.
// Необходимо заполнить тип документа ГИС МТ
// Параметры:
//  Документ - ОпределяемыйТип.ПрикладныеДокументыГИСМТ
//  ТипДокументаГИСМТ - ПеречислениеСсылка.ТипыДокументовГИСМТ - Тип документа
Процедура ПриОпределенииТипаДокументаГИСМТ(Документ, ТипДокументаГИСМТ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ТипДокументаГИСМТ = Перечисления.ТипыДокументовГИСМТ.УПД;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		
		ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидКорректировки");
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок Тогда
			ТипДокументаГИСМТ = Перечисления.ТипыДокументовГИСМТ.УПДИсправительный;
		Иначе
			ТипДокументаГИСМТ = Перечисления.ТипыДокументовГИСМТ.УКД;
		КонецЕсли;
	Иначе
		ТипДокументаГИСМТ = Перечисления.ТипыДокументовГИСМТ.ВнутреннееПотребление;
	КонецЕсли;
	
КонецПроцедуры

// При выполнении отдельных проверок продавца и покупателя.
// Параметры:
//  ПараметрыОбработки - Структура
Процедура ПриВыполненииОтдельныхПроверокПродавцаИПокупателя(ПараметрыОбработки) Экспорт
	
	Если Не ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИНН = ПараметрыОбработки.РеквизитыДокумента.ОрганизацияИНН;
	ДанныеШтрихкодов = ПараметрыОбработки.ДанныеШтрихкодов.ДанныеШтрихкодовДокумента;
	
	МассивИНН = Новый Массив;
	Для Каждого Строка Из ДанныеШтрихкодов Цикл
		
		Если Строка.ДанныеСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИННПоДаннымСервиса = Строка.ДанныеСервиса.ИННВладельца;
		
		МассивИНН.Добавить(ИННПоДаннымСервиса);
		
	КонецЦикла;
	
	СоответствиеОрганизаций = ИнтеграцияИСМП.ОрганизацииПоСпискуИНН(МассивИНН);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Строка Из ДанныеШтрихкодов Цикл
			
			Если Строка.ДанныеСервиса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИННПоДаннымСервиса = Строка.ДанныеСервиса.ИННВладельца;
			
			ОрганизацияВладелец = СоответствиеОрганизаций[ИННПоДаннымСервиса];
			
			Если ИННПоДаннымСервиса <> ОрганизацияИНН И ОрганизацияВладелец <> Неопределено Тогда
				
				МенеджерЗаписи = РегистрыСведений.КодыМаркировкиКПередачеМеждуОрганизациями.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ШтрихкодУпаковки      = Строка.ШтрихкодУпаковки;
				МенеджерЗаписи.Организация           = ОрганизацияВладелец;
				МенеджерЗаписи.ОрганизацияПолучатель = ПараметрыОбработки.РеквизитыДокумента.Организация;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
	
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При добавлении записи о передаче кодов маркировки между организациями по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ПараметрыОбработки.Документ,
			ПодробноеПредставлениеОшибки);
		
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru='ИСМП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Метаданные.РегистрыСведений.КодыМаркировкиКПередачеМеждуОрганизациями);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
	КонецПопытки;
	
КонецПроцедуры

// После проверки статуса ГИСМТ.
// Вызывается после проверки статуса документа в ГИС МТ. 
// Позволяет выполнить обработку, после получения статуса документа из сервиса ГИСМТ.
// Параметры:
//  ПараметрыОбработки - см. СоответствиеТребованиямГИСМТ.ИнициализироватьПараметрыОбработки
Процедура ПослеПроверкиСтатусаГИСМТ(ПараметрыОбработки) Экспорт
	
	Если Не ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработки.Статус = Перечисления.СтатусыДокументовИСМП.Проверен
		И ПараметрыОбработки.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ Тогда
		ШтрихкодыДокумента = ПараметрыОбработки.ДанныеШтрихкодов.ДанныеШтрихкодовДокумента.ВыгрузитьКолонку("ШтрихкодУпаковки");
		
		ПараметрыПередачи = Новый Структура;
		ПараметрыПередачи.Вставить("ШтрихкодыДокумента", ШтрихкодыДокумента);
		ПараметрыПередачи.Вставить("Организация",        ПараметрыОбработки.Организация);
		ПараметрыПередачи.Вставить("Документ",           ПараметрыОбработки.Документ);
		
		ИнтеграцияИСМПУТ.ЗавершитьПередачуКодовМаркировкиМеждуОрганизациями(ПараметрыПередачи);
			
	КонецЕсли;
	
КонецПроцедуры

// При получении статуса документа из очереди.
// Вызывается после проверки статуса документа в ГИС МТ. 
// Позволяет выполнить обработку, после получения статуса документа из сервиса ГИСМТ.
// Параметры:
//  СтрокаОчереди - СтрокаТаблицыЗначений из см.СоответствиеТребованиямГИСМТ.ИнициализироватьОчередьДокументов.
Процедура ПриПолученииСтатусаДокументаИзОчереди(СтрокаОчереди) Экспорт
	
	Если Не ОбщегоНазначенияУТВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОчереди.Статус = Перечисления.СтатусыДокументовИСМП.Проверен
		И СтрокаОчереди.СтатусОтправки = Перечисления.СтатусОтправкиГИСМТ.ДоставленВГИСМТ Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(СтрокаОчереди.Документ);
		
		ШтрихкодыУпаковокПоДокументу = ШтрихкодированиеИСМПСлужебный.ШтрихкодыУпаковокИзДокумента(
			СтрокаОчереди.Документ, ПараметрыСканирования);
		
		ШтрихкодыДокумента = ШтрихкодыУпаковокПоДокументу.ВыгрузитьКолонку("ШтрихкодУпаковки");
		
		ПараметрыПередачи = Новый Структура;
		ПараметрыПередачи.Вставить("ШтрихкодыДокумента", ШтрихкодыДокумента);
		ПараметрыПередачи.Вставить("Организация",        СтрокаОчереди.Организация);
		ПараметрыПередачи.Вставить("Документ",           СтрокаОчереди.Документ);
		
		ИнтеграцияИСМПУТ.ЗавершитьПередачуКодовМаркировкиМеждуОрганизациями(ПараметрыПередачи);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти