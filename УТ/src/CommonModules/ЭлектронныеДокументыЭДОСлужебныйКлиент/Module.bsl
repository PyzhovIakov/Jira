// @strict-types


#Область СлужебныеПроцедурыИФункции

#Область КонтрактМенеджераДействийЭДО

// Параметры:
//  МенеджерыДействийЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО) Экспорт
	
	МенеджерыДействийЭДО.Вставить(
		ЭлектронныеДокументыЭДОКлиентСервер.ИдентификаторМенеджераДействийЭДО(),
		ЭлектронныеДокументыЭДОСлужебныйКлиент);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. ЭлектронныеДокументыЭДОКлиент.НовыйРезультатОбработкиДействийИнтеграцииЭДО
//  РезультатВыполненияДействий - см. ЭлектронныеДокументыЭДО.НовыйРезультатДействийПоЭДО
//  СостояниеВыполненияДействий - см. НовоеСостояниеВыполненияДействийЭДО
//  ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
Процедура ОбработатьРезультатВыполненияДействийЭДО(ОповещениеОЗавершении, РезультатВыполненияДействий, СостояниеВыполненияДействий, ИсходныйНаборДействийЭДО, ПаролиСертификатов) Экспорт
	
	КонтекстОбработки = НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО();
	КонтекстОбработки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстОбработки.РезультатДействий = РезультатВыполненияДействий;
	КонтекстОбработки.ИсходныйНаборДействийЭДО = ИсходныйНаборДействийЭДО;
	КонтекстОбработки.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстОбработки.КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	
	Для Каждого ПарольСертификата Из РезультатВыполненияДействий.ПаролиСертификатов Цикл
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(ПарольСертификата.Ключ, ПарольСертификата.Значение);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(СостояниеВыполненияДействий) Тогда
		КонтекстОбработки.СостояниеВыполненияДействий = СостояниеВыполненияДействий;
	Иначе
		КонтекстОбработки.СостояниеВыполненияДействий = НовоеСостояниеВыполненияДействийЭДО();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыполненияДействий.РасшифрованныеМаркеры) Тогда
		КонтекстОбработки.РасшифрованныеМаркеры = РезультатВыполненияДействий.РасшифрованныеМаркеры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполненияДействий.ЗашифрованныеМаркеры) Тогда
		
		ИтогРасшифровки = КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных();
		ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки(ИтогРасшифровки, КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	КонтекстОбработки.РасшифрованныеМаркеры = КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных();
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, КонтекстОбработки);
	
	КриптографияБЭДКлиент.НачатьРасшифровкуНабораДанных(Оповещение, РезультатВыполненияДействий.ЗашифрованныеМаркеры,
		КонтекстОбработки.ПаролиСертификатов, КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатаВыполненияДействийЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * РезультатДействий - см. ЭлектронныеДокументыЭДО.НовыйРезультатДействийПоЭДО
//  * СостояниеВыполненияДействий - см. НовоеСостояниеВыполненияДействийЭДО
//  * ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * РасшифрованныеМаркеры - Неопределено
//                          - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  * ПроверенныеПодписи - см. НовыйНаборПроверенныхПодписей
//  * ОбработанныеУчетныеЗаписи - Соответствие из КлючИЗначение:
//  ** Ключ - Строка
//  ** Значение - см. ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи
Функция НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("РезультатДействий", Новый Структура);
	Контекст.Вставить("СостояниеВыполненияДействий", Новый Структура);
	Контекст.Вставить("ИсходныйНаборДействийЭДО", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("РасшифрованныеМаркеры", Неопределено);
	Контекст.Вставить("ПодписанныеСообщения", Новый Массив);
	Контекст.Вставить("ПроверенныеПодписи", НовыйНаборПроверенныхПодписей());
	Контекст.Вставить("ОбработанныеУчетныеЗаписи", Новый Соответствие);
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ВыполненныеДействияЭДО - см. НовыеВыполненныеДействияЭДО
//  * ПовторБезОбработкиПоДействиямЭДО - Булево
Функция НовоеСостояниеВыполненияДействийЭДО()
	Состояние = Новый Структура;
	Состояние.Вставить("ВыполненныеДействияЭДО", НовыеВыполненныеДействияЭДО());
	Состояние.Вставить("ПовторБезОбработкиПоДействиямЭДО", Ложь);
	Возврат Состояние;
КонецФункции

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДействияПоЭДО
Функция НовыеВыполненныеДействияЭДО()
	Возврат Новый Массив;
КонецФункции

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки(ИтогРасшифровки, КонтекстОбработки) Экспорт
	
	ОбработанныеУчетныеЗаписи = КонтекстОбработки.ОбработанныеУчетныеЗаписи;
	
	Если ЗначениеЗаполнено(ИтогРасшифровки.НаборРасшифрованныхДанных) Тогда
		Если КонтекстОбработки.РасшифрованныеМаркеры = Неопределено Тогда
			КонтекстОбработки.РасшифрованныеМаркеры = ИтогРасшифровки.НаборРасшифрованныхДанных;
		Иначе
			РасшифрованныеМаркеры = КонтекстОбработки.РасшифрованныеМаркеры; // См. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
				РасшифрованныеМаркеры, ИтогРасшифровки.НаборРасшифрованныхДанных, Истина);
		КонецЕсли;
		Для Каждого РасшифрованныхДанныеУчетнойЗаписи Из ИтогРасшифровки.НаборРасшифрованныхДанных Цикл
			ОбработаннаяУчетнаяЗапись = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = РасшифрованныхДанныеУчетнойЗаписи.Ключ;
			ОбработаннаяУчетнаяЗапись.ОтправкаПолучениеВыполнялись = Истина;
			ОбработанныеУчетныеЗаписи.Вставить(РасшифрованныхДанныеУчетнойЗаписи.Ключ, ОбработаннаяУчетнаяЗапись);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогРасшифровки.ОтказыРасшифровкиДанных) Тогда
		Для Каждого ОтказРасшифровкиДанных Из ИтогРасшифровки.ОтказыРасшифровкиДанных Цикл
			ОбработаннаяУчетнаяЗапись = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = ОтказРасшифровкиДанных.Ключ;
			ОбработаннаяУчетнаяЗапись.ПользовательОтказалсяОтОперации = ОтказРасшифровкиДанных.Значение;
			ОбработанныеУчетныеЗаписи.Вставить(ОтказРасшифровкиДанных.Ключ, ОбработаннаяУчетнаяЗапись);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогРасшифровки.ОшибкиРасшифровкиДанных) Тогда
		Для Каждого ОшибкаРасшифровкиДанных Из ИтогРасшифровки.ОшибкиРасшифровкиДанных Цикл
			ОбработаннаяУчетнаяЗапись = ДиагностикаЭДОКлиентСервер.НовоеОписаниеОбработаннойУчетнойЗаписи();
			ОбработаннаяУчетнаяЗапись.Идентификатор = ОшибкаРасшифровкиДанных.Ключ;
			ИнформацияОбОшибке = ОбработаннаяУчетнаяЗапись.ИнформацияОбОшибке;
			ИнформацияОбОшибке.КраткоеПредставление = НСтр("ru = 'Ошибка при расшифровке маркера'");
			ИнформацияОбОшибке.ПодробноеПредставление.Текст = ОшибкаРасшифровкиДанных.Значение;
			ОбработанныеУчетныеЗаписи.Вставить(ОшибкаРасшифровкиДанных.Ключ, ОбработаннаяУчетнаяЗапись);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыПодписания = КонтекстОбработки.РезультатДействий.ПараметрыПодписания;
	
	Если Не ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		
		ПодписанныеСообщения = Новый Массив; // Массив из см. НовоеОписаниеПодписанногоСообщения
		ОбработатьРезультатВыполненияДействийЭДОПослеПодписания(ПодписанныеСообщения, КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеПодписания",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, КонтекстОбработки);
	
	Подписать(Оповещение, ПараметрыПодписания.ДанныеДляПодписания, КонтекстОбработки.ПаролиСертификатов,
		КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеПодписания(ПодписанныеСообщения, КонтекстОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ПодписанныеСообщения) Тогда
		КонтекстОбработки.ПодписанныеСообщения = ПодписанныеСообщения;
	КонецЕсли;
	
	ПараметрыПроверкиПодписей = КонтекстОбработки.РезультатДействий.ПараметрыПроверкиПодписей;
	
	Если Не ЗначениеЗаполнено(ПараметрыПроверкиПодписей) Тогда
		
		ПроверенныеПодписи = НовыйНаборПроверенныхПодписей();
		ОбработатьРезультатВыполненияДействийЭДОПослеПроверкиПодписей(ПроверенныеПодписи, КонтекстОбработки);
		Возврат;
	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеПроверкиПодписей",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, КонтекстОбработки);
	
	Если ПараметрыПроверкиПодписей.ИсключитьДиагностику Тогда
		КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
		КонтекстДиагностики.СообщатьОбОшибке = Ложь;
	Иначе
		КонтекстДиагностики = КонтекстОбработки.КонтекстДиагностики;
	КонецЕсли;
	
	НачатьПроверкуПодписей(Оповещение, ПараметрыПроверкиПодписей.ПодписиДляПроверки, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПроверенныеПодписи - см. НовыйНаборПроверенныхПодписей
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеПроверкиПодписей(ПроверенныеПодписи, КонтекстОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ПроверенныеПодписи) Тогда
		КонтекстОбработки.ПроверенныеПодписи = ПроверенныеПодписи;
	КонецЕсли;
	
	ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки)
	
	РезультатОбработки = РезультатОбработкиДействийИнтеграцииЭДО(КонтекстОбработки);
	
	// См. ОбработатьРезультатВыполненияДействийЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстОбработки.ОповещениеОЗавершении, РезультатОбработки);
	
КонецПроцедуры

#Область Подписание

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения - см. Подписать.ОповещениеОЗавершении
//  * ИндексНабораДанных       - Число
//  * ДанныеДляПодписания      - Массив из см. ЭлектронныеДокументыЭДО.ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  * ПодписанныеСообщения     - Массив из см. НовоеОписаниеПодписанногоСообщения
//  * ПаролиСертификатов       - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * КонтекстДиагностики      - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики 
//  * ВыбраннаяМЧД             - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                             - Неопределено
//  * ОшибкиПроверкиПолномочий - Массив из см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочий
//  * ТребуетсяДоверенность    - Булево
//  * ПеревыборСертификата     - Булево - Истина, если по сертификату не удалось найти подходящую МЧД
//
Функция НовыйКонтекстПодписания()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ИндексНабораДанных", 0);
	Контекст.Вставить("ДанныеДляПодписания", Новый Массив);
	Контекст.Вставить("ПодписанныеСообщения", Новый Массив);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ВыбраннаяМЧД", Неопределено);
	Контекст.Вставить("ОшибкиПроверкиПолномочий", Новый Массив);
	Контекст.Вставить("ТребуетсяДоверенность", Ложь);
	Контекст.Вставить("ПеревыборСертификата", Ложь); 
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: Массив из см. НовоеОписаниеПодписанногоСообщения
//  ДанныеДляПодписания - Массив из см. ЭлектронныеДокументыЭДО.ОписаниеНабораДанныхДляИнтерактивногоПодписания
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура Подписать(ОповещениеОЗавершении, ДанныеДляПодписания, ПаролиСертификатов, КонтекстДиагностики)
	
	КонтекстПодписания = НовыйКонтекстПодписания();
	КонтекстПодписания.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстПодписания.ДанныеДляПодписания = ДанныеДляПодписания;
	КонтекстПодписания.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстПодписания.КонтекстДиагностики = КонтекстДиагностики;
	
	ПодписатьПослеПодготовкиКонтекста(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ПодписатьПослеПодготовкиКонтекста(КонтекстПодписания)
	
	ОписаниеНабораДанных = КонтекстПодписания.ДанныеДляПодписания[КонтекстПодписания.ИндексНабораДанных];
	
	Сертификаты = ОписаниеНабораДанных.Сертификаты;
	ПаролиСертификатов = ОписаниеНабораДанных.ПаролиСертификатов;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",      НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении",  Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",  Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",     Неопределено);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	ОписаниеДанных.Вставить("БезПодтверждения",     Истина);
	ОписаниеДанных.Вставить("ОтборСертификатов",    Сертификаты);
	ОписаниеДанных.Вставить("НаборДанных",          ОписаниеНабораДанных.НаборДанных);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПодписантовПослеВыбораСертификата",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, КонтекстПодписания);

	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		ДанныеСообщения.Данные = Оповещение;
	КонецЦикла;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		ПарольСертификата = ПаролиСертификатов[Сертификат];
		Если ЗначениеЗаполнено(ПарольСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, ПарольСертификата);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДанных = ОписаниеНабораДанных.НаборДанных.Количество();
	Если КоличествоДанных = 1 Тогда
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронного документа'"));
	Иначе
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронных документов'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			СтрШаблон(НСтр("ru = 'Электронные документы (%1)'"), КоличествоДанных));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатПодписания",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, КонтекстПодписания);
	
	ТипПредметаПодписания = НастройкиЭДОКлиентСервер.ТипПредметаПодписанияЭД();
	ТипПодписи = НастройкиЭДОКлиентПовтИсп.ТипПодписи(ТипПредметаПодписания);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, КонтекстПодписания.КонтекстДиагностики, , Оповещение,
		КонтекстПодписания.ПаролиСертификатов, ТипПодписи);
	
КонецПроцедуры

// Заполняет подписантов в электронном документе после выбора сертификата.
// 
// Параметры:
//  Результат - Структура:
//  * Оповещение - ОписаниеОповещения
//  * ОписаниеДанных - Структура:
//    ** ЗаголовокДанных - Строка
//    ** СообщитьОЗавершении - Булево
//    ** ПоказатьКомментарий - Булево
//    ** КонтекстОперации - Неопределено,Произвольный
//    ** ПрекратитьВыполнение - Булево
//    ** БезПодтверждения - Булево
//    ** ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** НаборДанных - Массив из См. ЭлектронныеДокументыЭДО.ДанныеСообщенияДляИнтерактивногоПодписания
//    ** ВыбранныйСертификат - Структура:
//       *** Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//       *** Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  КонтекстПодписания - См. НовыйКонтекстПодписания
//
Процедура ЗаполнитьПодписантовПослеВыбораСертификата(Результат, КонтекстПодписания) Экспорт
	
	ОписаниеНабораДанных = КонтекстПодписания.ДанныеДляПодписания[КонтекстПодписания.ИндексНабораДанных]; // См. ЭлектронныеДокументыЭДОСлужебный.ОписаниеНабораДанныхДляИнтерактивногоПодписания
	КонтекстПодписания.Вставить("РезультатВыбораСертификата", Результат);
	
	Сертификат = Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка; 
	КонтекстПодписания.ТребуетсяДоверенность = 
		ОписаниеНабораДанных.СертификатыТребующиеДоверенность[Сертификат] <> Неопределено;
		
	Если КонтекстПодписания.ТребуетсяДоверенность И ОписаниеНабораДанных.НаборДанных.Количество() Тогда
		
		КонтекстПодписания.ОшибкиПроверкиПолномочий = Новый Массив();
		
		Для Каждого Данные Из ОписаниеНабораДанных.НаборДанных Цикл
			
			ВыбраннаяМЧД = Данные.Доверенности.Получить(Сертификат);
			Если ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				Данные.ВыбраннаяМЧД = ВыбраннаяМЧД;
			КонецЕсли;
			
			Если Данные.ТребуетсяМЧД И НЕ ЗначениеЗаполнено(ВыбраннаяМЧД) Тогда
				
				КонтекстПодписания.ПеревыборСертификата = Истина;
				Ошибки = Данные.ОшибкиПроверкиПолномочий.Получить(Сертификат);
				Если ЗначениеЗаполнено(Ошибки) Тогда
					Для Каждого Ошибка Из Ошибки Цикл
						КонтекстПодписания.ОшибкиПроверкиПолномочий.Добавить(Ошибка.Значение);
					КонецЦикла;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
		Если КонтекстПодписания.ПеревыборСертификата Тогда
			ДанныеКПодписанию = Новый Структура("ОписаниеОшибки",
				КриптографияБЭДКлиент.КодОшибкиВыбораСертификатаТребующегоМЧД());
			ВыполнитьОбработкуОповещения(Результат.Оповещение, ДанныеКПодписанию);
		Иначе
			ВыбраннаяМЧД = ОписаниеНабораДанных.НаборДанных[0].Доверенности.Получить(Сертификат);
			ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(ВыбраннаяМЧД, КонтекстПодписания);
		КонецЕсли;
		
	Иначе
		
		ПустаяМЧД = ПредопределенноеЗначение("Справочник.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка");
		ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(ПустаяМЧД, КонтекстПодписания);
		
	КонецЕсли;
	
КонецПроцедуры  

// Обрабатывает выбор пользователя
// 
// Параметры:
//  РезультатВопроса - РежимДиалогаВопрос
//  ПараметрыОповещения - Структура:
//  * ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                 - Неопределено
//  * КонтекстПодписания - См. НовыйКонтекстПодписания
//
Процедура ОбработатьРезультатВопросаПовторитьПодписание(РезультатВопроса, ПараметрыОповещения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Повторить Тогда
		ПараметрыОповещения.КонтекстПодписания.ПеревыборСертификата = Ложь;
		ПодписатьПослеПодготовкиКонтекста(ПараметрыОповещения.КонтекстПодписания);
	Иначе
		ОбработатьСледующийНаборДанных(ПараметрыОповещения.КонтекстПодписания);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет подписантов и доверенности в электронном документе после выбора сертификата и уточнения доверенности.
// 
// Параметры:
//  РезультатУточненияМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  КонтекстПодписания - См. НовыйКонтекстПодписания
//
Процедура ЗаполнитьПодписантовИДоверенностиПослеУточненияМЧД(РезультатУточненияМЧД, КонтекстПодписания)
	
	КонтекстПодписания.ВыбраннаяМЧД = РезультатУточненияМЧД;
	КонтекстПодписания.РезультатВыбораСертификата.ОписаниеДанных.ВыбранныйСертификат.Вставить("МЧД", РезультатУточненияМЧД);
	Результат = КонтекстПодписания.РезультатВыбораСертификата;
	
	ОписаниеНабораДанных = КонтекстПодписания.ДанныеДляПодписания[КонтекстПодписания.ИндексНабораДанных];
	
	ДанныеДляЗаполнения = Новый Соответствие;
	
	НаборМЧД = Новый Массив; // Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
	Для Каждого ДанныеСообщения Из ОписаниеНабораДанных.НаборДанных Цикл
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ТребуетсяЗаполнитьПодписанта", ДанныеСообщения.ТребуетсяЗаполнитьПодписанта);
		ПараметрыЗаполнения.Вставить("ТребуетсяДоверенность", КонтекстПодписания.ТребуетсяДоверенность);
		ПараметрыЗаполнения.Вставить("Данные", ДанныеСообщения.ИсходныеДвоичныеДанные);
		
		Если КонтекстПодписания.ТребуетсяДоверенность И ЗначениеЗаполнено(РезультатУточненияМЧД) Тогда
			Если НаборМЧД.Найти(РезультатУточненияМЧД) = Неопределено Тогда
				НаборМЧД.Добавить(РезультатУточненияМЧД);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения.Вставить("НаборМЧД",  НаборМЧД);
		
		Если ПараметрыЗаполнения.ТребуетсяЗаполнитьПодписанта ИЛИ ПараметрыЗаполнения.ТребуетсяДоверенность Тогда
			ДанныеДляЗаполнения.Вставить(ДанныеСообщения.ПрисоединенныйФайл, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЦикла;

	Если ДанныеДляЗаполнения.Количество() > 0 Тогда
		РезультатыПоФайлам = ЭлектронныеДокументыЭДОВызовСервера.ЗаполнитьПодписантовИДоверенностиПоСертификату(
			ДанныеДляЗаполнения,
			Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка,
			КонтекстПодписания.КонтекстДиагностики,
			РезультатУточненияМЧД);
	КонецЕсли;
	
	НаборДанных = ОписаниеНабораДанных.НаборДанных;
	Счетчик = НаборДанных.Количество();
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		
		ДанныеСообщения = НаборДанных[Счетчик];
		ДанныеСообщения.Данные = ДанныеСообщения.ИсходныеДвоичныеДанные;
		
		Если РезультатыПоФайлам = Неопределено Тогда
			Продолжить; 
		КонецЕсли;
		
		РезультатЗаполнения = РезультатыПоФайлам[ДанныеСообщения.ПрисоединенныйФайл];
		
		Если РезультатЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатЗаполнения.Отказ Тогда
			НаборДанных.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		ДанныеСообщения.Данные = РезультатЗаполнения.ДанныеДляПодписания;
		ДанныеСообщения.АдресДанныхДляОбновления = РезультатЗаполнения.АдресДанныхДляОбновления;
		ДанныеСообщения.ДанныеИзменены = Истина;
		
	КонецЦикла;
	
	ДанныеДляПодписания = Неопределено;
	Если ЗначениеЗаполнено(НаборДанных) Тогда
		ДанныеДляПодписания = НаборДанных[0].Данные;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура("Данные", ДанныеДляПодписания);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

// Выполняет обработку результата подписания.
// 
// Параметры:
//  РезультатПодписания     - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    ** Данные             - ДвоичныеДанные
//    ** Представление      - Структура:
//       *** Значение       - ДокументСсылка.СообщениеЭДО
//       *** Представление  - Строка
//    ** ТребуетсяЗаполнитьПодписанта - Булево
//    ** ДанныеИзменены     - Булево
//    ** АдресДанныхДляОбновления - Строка
//    ** ВыбраннаяМЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций    
//    ** ТребуетсяМЧД - Булево
//    ** СвойстваПодписи    - Строка,
//                            См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ТекущийЭлементНабораДанных - Структура
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстПодписания     - См. НовыйКонтекстПодписания
//
Процедура ОбработатьРезультатПодписания(РезультатПодписания, КонтекстПодписания) Экспорт
	
	Если РезультатПодписания = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Отказ = РезультатПодписания.Отказ;
		Если Не Отказ
			И КонтекстПодписания.ВыбраннаяМЧД = Неопределено
			И КонтекстПодписания.ТребуетсяДоверенность Тогда
				Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если КонтекстПодписания.ПеревыборСертификата Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВыбраннаяМЧД", Неопределено);
		ПараметрыОповещения.Вставить("КонтекстПодписания", КонтекстПодписания);
		
		Сертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
		
		Оповещение = Новый ОписаниеОповещения(
			"ОбработатьРезультатВопросаПовторитьПодписание", ЭтотОбъект, ПараметрыОповещения);
			
		Если КонтекстПодписания.ОшибкиПроверкиПолномочий.Количество() = 0 Тогда
			
			ЭлектронныеДокументыЭДОКлиент.ПоказатьИнформациюПодписаниеСертификатомТолькоПоМЧД(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат), Оповещение);
			
		Иначе
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("ОшибкиПроверкиПолномочий", КонтекстПодписания.ОшибкиПроверкиПолномочий);
			ПараметрыОткрытия.Вставить("Сертификат", Сертификат);
			
			ОткрытьФорму("Обработка.РезультатыПроверкиПодписи.Форма.ОшибкиПроверкиПолномочийПриПодписании", 
				ПараметрыОткрытия,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		Возврат;
		
	КонецЕсли;

	КриптографияБЭДКлиент.ОбработатьОшибкиКриптографическойОперации(РезультатПодписания,
		НСтр("ru = 'Подписание данных'"), КонтекстПодписания.КонтекстДиагностики);
		
	Если Отказ Тогда
		ЗавершитьПодписание(КонтекстПодписания);
		Возврат;
	КонецЕсли;
	
	Если РезультатПодписания.Успех Тогда
		Для Каждого ДанныеСообщения Из РезультатПодписания.НаборДанных Цикл
			Если Не ДанныеСообщения.Свойство("СвойстваПодписи") Тогда
				Продолжить;
			КонецЕсли;
			ДанныеПодписанногоСообщения = НовоеОписаниеПодписанногоСообщения();
			ДанныеПодписанногоСообщения.Ссылка = ДанныеСообщения.Представление.Значение;
			ДанныеПодписанногоСообщения.ПрисоединенныйФайл = ДанныеСообщения.ПрисоединенныйФайл;
			ДанныеПодписанногоСообщения.СвойстваПодписи = ДанныеСообщения.СвойстваПодписи;
			ДанныеПодписанногоСообщения.ВыбранныйСертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
			ДанныеПодписанногоСообщения.АдресДанныхДляОбновления = ДанныеСообщения.АдресДанныхДляОбновления;
			ДанныеПодписанногоСообщения.Данные = ДанныеСообщения.Данные;
			ДанныеПодписанногоСообщения.ВыбраннаяМЧД = ДанныеСообщения.ВыбраннаяМЧД;
			ДанныеПодписанногоСообщения.ТребуетсяМЧД = ДанныеСообщения.ТребуетсяМЧД;
			КонтекстПодписания.ПодписанныеСообщения.Добавить(ДанныеПодписанногоСообщения);
		КонецЦикла;
		
		КонтекстПодписания.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	ОбработатьСледующийНаборДанных(КонтекстПодписания);
	
КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ОбработатьСледующийНаборДанных(КонтекстПодписания) 
	
	Если КонтекстПодписания.ИндексНабораДанных < КонтекстПодписания.ДанныеДляПодписания.Количество() - 1 Тогда
		КонтекстПодписания.ИндексНабораДанных = КонтекстПодписания.ИндексНабораДанных + 1;
		ПодписатьПослеПодготовкиКонтекста(КонтекстПодписания);
		Возврат;
	КонецЕсли;
	
	ЗавершитьПодписание(КонтекстПодписания);

КонецПроцедуры

// Параметры:
//  КонтекстПодписания - см. НовыйКонтекстПодписания
Процедура ЗавершитьПодписание(КонтекстПодписания)
	
	// См. Подписать.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстПодписания.ОповещениеОЗавершении, КонтекстПодписания.ПодписанныеСообщения);
	
КонецПроцедуры

// Возвращает пустое описание подписанного сообщения.
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка                   - Неопределено
//                             - ДокументСсылка.СообщениеЭДО
//  * ПрисоединенныйФайл       - Неопределено
//                             - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * СвойстваПодписи          - Неопределено
//                             - Строка
//                             - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ВыбранныйСертификат      - Неопределено
//                             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Данные                   - ДвоичныеДанные
//                             - Неопределено
//  * АдресДанныхДляОбновления - Строка
//  * ВыбраннаяМЧД		       - Неопределено
//                             - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ТребуетсяМЧД - Булево
//
Функция НовоеОписаниеПодписанногоСообщения()
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Ссылка", Неопределено);
	ОписаниеДанных.Вставить("ПрисоединенныйФайл", Неопределено);
	ОписаниеДанных.Вставить("СвойстваПодписи", Неопределено);
	ОписаниеДанных.Вставить("ВыбранныйСертификат", Неопределено);
	ОписаниеДанных.Вставить("АдресДанныхДляОбновления", "");
	ОписаниеДанных.Вставить("Данные", Неопределено);
	ОписаниеДанных.Вставить("ВыбраннаяМЧД", Неопределено);
	ОписаниеДанных.Вставить("ТребуетсяМЧД", Ложь);
	Возврат ОписаниеДанных;
КонецФункции

#КонецОбласти

#Область РезультатОбработкиДействийЭДО

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
//
// Возвращаемое значение:
//  См. ЭлектронныеДокументыЭДОКлиент.НовыйРезультатОбработкиДействийИнтеграцииЭДО
Функция РезультатОбработкиДействийИнтеграцииЭДО(КонтекстОбработки)
	
	РезультатОбработки = ЭлектронныеДокументыЭДОКлиент.НовыйРезультатОбработкиДействийИнтеграцииЭДО();
	
	РезультатДействий = КонтекстОбработки.РезультатДействий;
	
	РезультатОбработки.ИтогВыполненияДействий = РезультатДействий.Итог;
	РезультатОбработки.КонтекстДиагностики = РезультатДействий.КонтекстДиагностики;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатОбработки.ИтогВыполненияДействий.ОбработанныеУчетныеЗаписи,
		КонтекстОбработки.ОбработанныеУчетныеЗаписи, Ложь);
	
	СостояниеВыполненияДействий = КонтекстОбработки.СостояниеВыполненияДействий;
	ВыполненныеДействия = СостояниеВыполненияДействий.ВыполненныеДействияЭДО;
	ОбработаноПоДействиям = РезультатОбработки.ИтогВыполненияДействий.ОбработаноПоДействиям;
	
	Для Каждого ОбработаноПоДействию Из ОбработаноПоДействиям Цикл
		ВыполненныеДействия.Добавить(ОбработаноПоДействию.Ключ);
	КонецЦикла;
	
	РезультатОбработки.ДокументыДляОбработкиИзвещений = РезультатДействий.ДокументыДляОбработкиИзвещений;
	РезультатОбработки.ДокументыДляОбработкиДополнительныхСведений = РезультатДействий.ДокументыДляОбработкиДополнительныхСведений;
	
	РезультатОбработки.ОшибкиФормирования = РезультатДействий.ОшибкиФормирования;
	
	НаборДействийДляПродолжения = ЭлектронныеДокументыЭДОКлиент.НаборДействийПослеПодписанияРасшифровки(
		КонтекстОбработки.ИсходныйНаборДействийЭДО, ВыполненныеДействия);
	
	Если ЗначениеЗаполнено(ОбработаноПоДействиям) Или ЗначениеЗаполнено(НаборДействийДляПродолжения) Тогда
		СостояниеВыполненияДействий.ПовторБезОбработкиПоДействиямЭДО = Ложь;
	ИначеЕсли Не СостояниеВыполненияДействий.ПовторБезОбработкиПоДействиямЭДО Тогда
		СостояниеВыполненияДействий.ПовторБезОбработкиПоДействиямЭДО = Истина;
	Иначе
		ДействияСтрокой = СтрСоединить(ОбщегоНазначенияБЭДКлиент.ВыгрузитьКолонку(НаборДействийДляПродолжения, "Ключ"), ", ");
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось выполнить действия по ЭДО: %1'"), ДействияСтрокой);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстОшибки, ТекстОшибки);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстОбработки.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатОбработки.СостояниеВыполненияДействий = СостояниеВыполненияДействий;
	
	РезультатОбработки.ПродолжитьВыполнениеДействий =
		ЗначениеЗаполнено(КонтекстОбработки.РасшифрованныеМаркеры)
		ИЛИ ЗначениеЗаполнено(КонтекстОбработки.ПодписанныеСообщения)
		ИЛИ ЗначениеЗаполнено(КонтекстОбработки.ПроверенныеПодписи)
		ИЛИ ЗначениеЗаполнено(НаборДействийДляПродолжения);
	
	Если Не РезультатОбработки.ПродолжитьВыполнениеДействий Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ПараметрыПродолжения = НовыеПараметрыПродолженияВыполненияДействийЭДО();
	
	Если ЗначениеЗаполнено(НаборДействийДляПродолжения) Тогда
		ПараметрыПродолжения.НаборДействий = НаборДействийДляПродолжения;
	КонецЕсли;
	
	ПараметрыПродолжения.РасшифрованныеМаркеры = КонтекстОбработки.РасшифрованныеМаркеры;
	
	Если ЗначениеЗаполнено(КонтекстОбработки.ПодписанныеСообщения) Тогда
		РезультатОбработкиПодписания = НовыйРезультатОбработкиПодписания();
		РезультатОбработкиПодписания.ПодписанныеСообщения = КонтекстОбработки.ПодписанныеСообщения;
		ПараметрыПодписания = КонтекстОбработки.РезультатДействий.ПараметрыПодписания;
		РезультатОбработкиПодписания.АдресКонтекстаНаСервере = ПараметрыПодписания.АдресКонтекстаНаСервере;
		ПараметрыПродолжения.РезультатОбработкиПодписания = РезультатОбработкиПодписания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтекстОбработки.ПроверенныеПодписи) Тогда
		РезультатОбработкиПроверкиПодписей = НовыйРезультатОбработкиПроверкиПодписей();
		РезультатОбработкиПроверкиПодписей.ПроверенныеПодписи = КонтекстОбработки.ПроверенныеПодписи;
		ПараметрыПроверкиПодписей = КонтекстОбработки.РезультатДействий.ПараметрыПроверкиПодписей;
		РезультатОбработкиПроверкиПодписей.АдресКонтекстаНаСервере = ПараметрыПроверкиПодписей.АдресКонтекстаНаСервере;
		ПараметрыПродолжения.РезультатОбработкиПроверкиПодписей = РезультатОбработкиПроверкиПодписей;
	КонецЕсли;
	
	РезультатОбработки.ПараметрыПродолженияДействий = ПараметрыПродолжения;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * РасшифрованныеМаркеры - Неопределено
//                          - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * РезультатОбработкиПодписания - Неопределено
//                                 - см. НовыйРезультатОбработкиПодписания
//  * РезультатОбработкиПроверкиПодписей - Неопределено
//                                       - см. НовыйРезультатОбработкиПроверкиПодписей
Функция НовыеПараметрыПродолженияВыполненияДействийЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("НаборДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Параметры.Вставить("РасшифрованныеМаркеры", Неопределено);
	Параметры.Вставить("РезультатОбработкиПодписания", Неопределено);
	Параметры.Вставить("РезультатОбработкиПроверкиПодписей", Неопределено);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПодписанныеСообщения - Массив из см. НовоеОписаниеПодписанногоСообщения
//  * АдресКонтекстаНаСервере - Строка
Функция НовыйРезультатОбработкиПодписания() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПодписанныеСообщения", Новый Массив);
	Результат.Вставить("АдресКонтекстаНаСервере", "");
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ПроверенныеПодписи - см. НовыйНаборПроверенныхПодписей
//  * АдресКонтекстаНаСервере - Строка
Функция НовыйРезультатОбработкиПроверкиПодписей() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПроверенныеПодписи", НовыйНаборПроверенныхПодписей());
	Результат.Вставить("АдресКонтекстаНаСервере", "");
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДокументов

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПодписиДляПроверки -  Массив из См. НовыеДанныеДляПроверкиПодписейНаКлиенте
//  КонтекстДиагностики  - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//
Процедура НачатьПроверкуПодписей(ОповещениеОЗавершении, ПодписиДляПроверки, КонтекстДиагностики)
	
	ПараметрыПроверки = НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента();
	ПараметрыПроверки.ПодписиДляПроверки = ПодписиДляПроверки;
	ПараметрыПроверки.ОбработкаЗавершенияПроверки = ОповещениеОЗавершении;
	ПараметрыПроверки.ОбработкаПроверкиПодписи = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов",
		ЭлектронныеДокументыЭДОСлужебныйКлиент, ПараметрыПроверки);
	ПараметрыПроверки.КонтекстДиагностики = КонтекстДиагностики;
	ПараметрыПроверки.ОперацияМенеджераКриптографии = "ПолучениеСертификатов";
	ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписи(ПараметрыПроверки);
	
КонецПроцедуры

// Возвращает пустые параметры проверки подписей.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * Индекс - Число
//  * ОбработкаЗавершенияПроверки   - ОписаниеОповещения
//  * ОбработкаПроверкиПодписи      - ОписаниеОповещения
//  * ПодписиДляПроверки            - Массив из Структура:
//  ** ИдентификаторДанныхДокумента - Число
//  ** ДвоичныеДанныеФайла          - ДвоичныеДанные
//  ** ДвоичныеДанныеПодписи        - ДвоичныеДанные
//  ** ЭтоОсновныеДанные            - Булево
//  * МенеджерКриптографии          - Неопределено,
//                                    МенеджерКриптографии
//  * ОперацияМенеджераКриптографии - Строка
//  * КонтекстДиагностики           - Неопределено,
//                                    См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПроверенныеПодписи            - См. НовыйНаборПроверенныхПодписей
//
Функция НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента()
	Параметры = Новый Структура;
	Параметры.Вставить("Индекс", 0);
	Параметры.Вставить("ОбработкаЗавершенияПроверки", Новый ОписаниеОповещения);
	Параметры.Вставить("ОбработкаПроверкиПодписи", Новый ОписаниеОповещения);
	Параметры.Вставить("ПодписиДляПроверки", Новый Массив);
	Параметры.Вставить("МенеджерКриптографии", Неопределено);
	Параметры.Вставить("ОперацияМенеджераКриптографии", "");
	Параметры.Вставить("КонтекстДиагностики", Неопределено);
	Параметры.Вставить("ПроверенныеПодписи", НовыйНаборПроверенныхПодписей());
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Число - идентификатор данных документа
//  * Значение - См. НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента
Функция НовыйНаборПроверенныхПодписей()
	Возврат Новый Соответствие;
КонецФункции

// Возвращает пустое описание проверенных подписей файла.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ПодписиДополнительныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * ПодписиОсновныхДанных - Массив из См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//
Функция НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента()
	ПроверенныеПодписи = Новый Структура;
	ПроверенныеПодписи.Вставить("ПодписиОсновныхДанных", Новый Массив);
	ПроверенныеПодписи.Вставить("ПодписиДополнительныхДанных", Новый Массив);
	Возврат ПроверенныеПодписи;
КонецФункции

// Обрабатывает результат проверки электронных подписей.
// 
// Параметры:
//  РезультатПроверки - Структура:
//  * ОписаниеОшибки  - Строка
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписейПриЗагрузкеДокумента
//
Процедура ОбработатьРезультатПроверкиПодписиПриЗагрузкиДокументов(РезультатПроверки, ПараметрыПроверки) Экспорт
	
	ТекущиеДанные = ПараметрыПроверки.ПодписиДляПроверки[ПараметрыПроверки.Индекс];
	
	СвойстваПодписи = РезультатПроверки.СвойстваПодписи;
	СвойстваПодписи.Подпись = ТекущиеДанные.ДвоичныеДанныеПодписи;
	
	ПроверенныеПодписи = ПараметрыПроверки.ПроверенныеПодписи[ТекущиеДанные.ИдентификаторДанныхДокумента];
	Если ПроверенныеПодписи = Неопределено Тогда
		ПроверенныеПодписи = НовоеОписаниеПроверенныхПодписейПриЗагрузкеДокумента();
		ПараметрыПроверки.ПроверенныеПодписи.Вставить(ТекущиеДанные.ИдентификаторДанныхДокумента,
			ПроверенныеПодписи);
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоОсновныеДанные Тогда
		ПроверенныеПодписи.ПодписиОсновныхДанных.Добавить(СвойстваПодписи);
	Иначе
		ПроверенныеПодписи.ПодписиДополнительныхДанных.Добавить(СвойстваПодписи);
	КонецЕсли;
	
	ПараметрыПроверки.Индекс = ПараметрыПроверки.Индекс + 1;
	
	Если ПараметрыПроверки.ПодписиДляПроверки.Количество() > ПараметрыПроверки.Индекс Тогда
		ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписи(ПараметрыПроверки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПроверки.ОбработкаЗавершенияПроверки, ПараметрыПроверки.ПроверенныеПодписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
