
////////////////////////////////////////////////////////////////////////////////
// Оповещения сервер (CRM)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура создает оповещение по переданным в структуре данным.
//  
// Параметры:
//  ПараметрыОповещения					 - Структура - Параметры оповещения.
//
Процедура ДобавитьОповещение(ПараметрыОповещения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсключитьНедействительныхПолучателей(ПараметрыОповещения);
	Если ПараметрыОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	ОповещенияПараметрыНастроек = ПолучитьПараметрыНастроекОповещений();
	СозданоОповещениеПользователя = Ложь; 
	
	Для Каждого СтруктураОповещения Из ПараметрыОповещения Цикл
		СтруктураОповещения.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
		ТемаИСодержание				= СформироватьТекстТемыИСодержанияОповещения(СтруктураОповещения);
		ДатаОповещения				= ПолучитьДатуОповещения(СтруктураОповещения);
		ДатаАктуальностиОповещения	= ПолучитьДатуАктуальностиОповещения(СтруктураОповещения);
		Если (СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия)
			 И (ДатаОповещения <= ТекущаяДатаСеанса()) Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураОповещения.ВидОповещения = "ОповещениеУчастниковСобытия" Тогда
			СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия;
		КонецЕсли;
		Если ((СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма)
			ИЛИ (СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма))
			И (СтруктураОповещения.Получатель = Пользователи.ТекущийПользователь()) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание
			 И ОповещенияПараметрыНастроек.CRM_ИспользоватьНапоминания Тогда
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Пользователь"	, СтруктураОповещения.Получатель);
			ПараметрыНапоминания.Вставить("ДатаОповещения"	, ДатаОповещения);
			ПараметрыНапоминания.Вставить("СрокОповещения"	, СтруктураОповещения.СрокОповещения);
			ПараметрыНапоминания.Вставить("Периодичность"	, СтруктураОповещения.Периодичность);
			ПараметрыНапоминания.Вставить("ВидОповещения"	, СтруктураОповещения.ВидОповещения);
			ПараметрыНапоминания.Вставить("ДатаАктуальности", ДатаАктуальностиОповещения);
			ПараметрыНапоминания.Вставить("СозданоПриАдресацииНаРоль", 
				СтруктураОповещения.Свойство("СозданоПриАдресацииНаРоль") И СтруктураОповещения.СозданоПриАдресацииНаРоль);
			CRM_НапоминанияСервер.ДобавитьНапоминание(СтруктураОповещения.Предмет,
				 ТемаИСодержание.Содержание,
				 ПараметрыНапоминания);
			СозданоОповещениеПользователя = Истина; 
		КонецЕсли;
		
		Если ТипЗнч(СтруктураОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ОтветственныйОповещения = СтруктураОповещения.Предмет.Исполнитель;
		ИначеЕсли ТипЗнч(СтруктураОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ОтветственныйОповещения = СтруктураОповещения.Предмет.Ответственный;
		Иначе
			ОтветственныйОповещения = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		Если Не СозданоОповещениеПользователя 
			Или ОтветственныйОповещения <> СтруктураОповещения.Получатель Тогда
			Если СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
				И ТипЗнч(СтруктураОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И ЗначениеЗаполнено(СтруктураОповещения.Предмет.БизнесПроцесс)
				И ТипЗнч(СтруктураОповещения.Предмет.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") 
				И СтруктураОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
				И СтруктураОповещения.Предмет.БизнесПроцесс.ОповещатьАвтора Тогда
				
				ОповеститьАвтораПорученияОВыполненииЗадачи(СтруктураОповещения.Предмет, Истина);
				
			ИначеЕсли СтруктураОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
				И ТипЗнч(СтруктураОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				
				ОповеститьАвтораПорученияОВыполненииВзаимодействия(СтруктураОповещения.Предмет, Истина); 
				
			КонецЕсли;
		КонецЕсли;
		
		Если (СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта
			 И ОповещенияПараметрыНастроек.CRM_ИспользоватьОповещенияЭлектроннаяПочта )
			ИЛИ (СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер
				 И ОповещенияПараметрыНастроек.CRM_ИспользоватьОповещенияМессенджер )
			ИЛИ (СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС
				 И ОповещенияПараметрыНастроек.CRM_ИспользоватьОповещенияСМС )
				 И НЕ СтруктураОповещения.Получатель.CRM_ОтписалсяОтEmailРассылок Тогда
			Менеджер = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			Менеджер.Получатель			= СтруктураОповещения.Получатель;
			Менеджер.Предмет			= СтруктураОповещения.Предмет;
			Менеджер.ДатаОповещения		= ДатаОповещения;
			Менеджер.ДатаАктуальности	= ДатаАктуальностиОповещения;
			Если СтруктураОповещения.ВидОповещения = "ПринятаЗадачаИсполнителя"
			ИЛИ СтруктураОповещения.ВидОповещения = "ВыполненаЗадачаИсполнителя"
			ИЛИ СтруктураОповещения.ВидОповещения = "СозданаЗадачаИсполнителя" Тогда
				Менеджер.ВидОповещения	= Справочники.CRM_ВидыОповещений.ЗначимыеСобытия;
				Менеджер.Шаблон			= СтруктураОповещения.Шаблон;
				Если СтруктураОповещения.Свойство("Взаимодействие") Тогда
					Менеджер.Взаимодействие = СтруктураОповещения.Взаимодействие;
				КонецЕсли;
			Иначе
				Менеджер.ВидОповещения	= СтруктураОповещения.ВидОповещения;
				Менеджер.Тема			= ТемаИСодержание.Тема;
				Менеджер.Содержание		= ТемаИСодержание.Содержание;
			КонецЕсли;
			Менеджер.Канал				= СтруктураОповещения.Канал;
			Менеджер.СрокОповещения		= СтруктураОповещения.СрокОповещения;
			Менеджер.Периодичность		= СтруктураОповещения.Периодичность;
			Если СтруктураОповещения.Свойство("СозданоПриАдресацииНаРоль") Тогда
				Менеджер.СозданоПриАдресацииНаРоль = СтруктураОповещения.СозданоПриАдресацииНаРоль;
			КонецЕсли;
			Если СтруктураОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				Если CRM_MSExchangeВызовСервера.ВыполненОбменСMSExchange(СтруктураОповещения.Предмет) Тогда
					Менеджер.Удалить();
				Иначе	
					Менеджер.Записать();
				КонецЕсли;	
			Иначе	
				Менеджер.Записать();
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура удаляет все оповещения по объекту.
//
// Параметры:
//  Предмет			 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка, 
//					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка, 
//					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//  Пользователь	 - СправочникСсылка.Пользователи - Ссылка на пользователя.
//  Переадресация	 - Булево - Признак переадресации. 
//
Процедура УдалитьОповещения(Предмет, Пользователь = Неопределено, Переадресация = Ложь) Экспорт
	
	// напоминания
	НаборРегистра = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	Если НЕ Пользователь = Неопределено Тогда
		НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	КонецЕсли;
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() > 0 Тогда
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	КонецЕсли;
	
	// оповещения
	НаборРегистра = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	Если НЕ Пользователь = Неопределено Тогда
		НаборРегистра.Отбор.Получатель.Установить(Пользователь);
	КонецЕсли;
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() > 0 Тогда
		Для Каждого ЗаписьНабора Из НаборРегистра Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.Документ) Тогда
				Попытка
					ДокументОбъект = ЗаписьНабора.Документ.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет оповещения о запланированных событиях по объекту.
//
// Параметры:
//  Предмет			 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка, 
//					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка, 
//					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//
Процедура УдалитьОповещенияОЗапланированныхСобытиях(Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Напоминания.Пользователь КАК Пользователь,
		|	CRM_Напоминания.Предмет КАК Предмет,
		|	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
		|	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
		|	CRM_Напоминания.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Предмет = &Предмет
		|	И CRM_Напоминания.ВидОповещения = &ВидОповещения";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ВидОповещения", Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Отбор.ВидОповещения.Установить(Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура удаляет оповещения, созданные при адресации на роль исполнителья.
//
// Параметры:
//  Предмет			 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка, 
//					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка, 
//					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//
Процедура УдалитьОповещенияСозданныеПриАдресацииНаРоль(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Предмет = &Предмет
		|	И НЕ CRM_Напоминания.СозданоПриАдресацииНаРоль";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ТаблицаОставляемыхНапоминаний = Запрос.Выполнить().Выгрузить();
	НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(ТаблицаОставляемыхНапоминаний);
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Предмет = &Предмет
		|	И НЕ CRM_Оповещения.СозданоПриАдресацииНаРоль";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ТаблицаОставляемыхОповещений = Запрос.Выполнить().Выгрузить();
	НаборЗаписей = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(Предмет);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(ТаблицаОставляемыхОповещений);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Функция возвращает настройки оповещения пользователя для переданного
//  вида оповещения.
//
// Параметры:
//  Пользователь		 - СправочникСсылка.Пользователи - Ссылка на пользователя.
//  ВидОповещения		 - СправочникСсылка.CRM_ВидыОповещений	 - Ссылка на вид оповещения.
//  Предмет				 - ДокументСсылка, БизнесПроцессСсылка	 - Ссылка на предмет взаимодействия.
//  СтарыйСрокИсполнения - Дата, Неопределено	 - старый срок исполнения.
// 
// Возвращаемое значение:
//  Структура - Настройки оповещения.
//
Функция ПолучитьПараметрыОповещения(Пользователь, ВидОповещения, Предмет = Неопределено, СтарыйСрокИсполнения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	, Пользователь);
	Запрос.УстановитьПараметр("ВидОповещения"	, ВидОповещения);
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Запрос.УстановитьПараметр("ТекущийПользователь"	, Пользователи.ТекущийПользователь());
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
		|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
		|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		|	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
		|	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|		ПО ИсполнителиЗадач.Исполнитель = CRM_ОповещенияПользовательскиеНастройки.Пользователь
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &Пользователь
		|	И НЕ ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
		|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
		|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
		|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
		|	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
		|	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
		|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь";
		Если ТипЗнч(Пользователь) = Тип("Массив") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пользователь = &Пользователь", "Пользователь В(&Пользователь)"); 
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Напоминание Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения"	, Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	, Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			, Выборка.Сумма);
			
			Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ЗначениеЗаполнено(СтарыйСрокИсполнения) Тогда
					СтруктураОповещения.Вставить("СтарыйСрокИсполнения", СтарыйСрокИсполнения);
				КонецЕсли;
				СтруктураОповещения.Вставить("СозданоПриАдресацииНаРоль", 
					ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей"));
			КонецЕсли;
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если Выборка.ЭлектроннаяПочта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	, Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	, Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			, Выборка.Сумма);
			
			Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ЗначениеЗаполнено(СтарыйСрокИсполнения) Тогда
					СтруктураОповещения.Вставить("СтарыйСрокИсполнения", СтарыйСрокИсполнения);
				КонецЕсли;
				СтруктураОповещения.Вставить("СозданоПриАдресацииНаРоль", 
					ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей"));
			КонецЕсли;
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если Выборка.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	, Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	, Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			, Выборка.Сумма);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если Выборка.Мессенджер Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Выборка.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, Выборка.ВидОповещения);
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.Мессенджер);
			СтруктураОповещения.Вставить("СрокОповещения"	, Выборка.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность"	, Выборка.Периодичность);
			СтруктураОповещения.Вставить("Сумма"			, Выборка.Сумма);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
			ОтборПоПартнерам = Выборка.Хранилище.Получить();
			Если ТипЗнч(ОтборПоПартнерам) = Тип("ОтборКомпоновкиДанных") Тогда
				Если ОтборПоПартнерам.Элементы.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Для каждого Элемент Из ОтборПоПартнерам.Элементы Цикл
					Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(Строка(Элемент.ЛевоеЗначение),
						 "Клиент",
						 "Партнер"));
				КонецЦикла;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	НЕ Партнеры.ПометкаУдаления
			|";
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ТекстЗапроса = ТекстЗапроса + "И НЕ Партнеры.ЭтоГруппа";
			КонецЕсли;
			
			ПартнерыПоОтбору = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, ОтборПоПартнерам);
			Если ПартнерыПоОтбору.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					ИмяРеквизитаПартнер = "Партнер";	
				Иначе
					ИмяРеквизитаПартнер = "Клиент";
				КонецЕсли;				
				
				НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет[ИмяРеквизитаПартнер]));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Партнеры") Тогда
						Структура.Вставить("Партнеры", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
							Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
				//
				НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Партнер));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Партнеры") Тогда
						Структура.Вставить("Партнеры", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
							Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Получатели Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Партнер));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				бНайдено = Ложь;
				
				НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.ОтправительКонтакт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					бНайдено = Истина;
					Для Каждого Структура Из МассивСтруктур Цикл
						Если Не Структура.Свойство("Партнеры") Тогда
							Структура.Вставить("Партнеры", Новый Массив());
						КонецЕсли;
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
								Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("ПолучателиПисьма");
				МассивТЧ.Добавить("ПолучателиКопий");
				МассивТЧ.Добавить("ПолучателиОтвета");
				
				Для Каждого ТЧ Из МассивТЧ Цикл
					Для Каждого СтрокаТЧ Из Предмет[ТЧ] Цикл
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаТЧ.Контакт));
						Если НайденныеСтроки.Количество() > 0 Тогда
							бНайдено = Истина;
							Для Каждого Структура Из МассивСтруктур Цикл
								Если Не Структура.Свойство("Партнеры") Тогда
									Структура.Вставить("Партнеры", Новый Массив());
								КонецЕсли;
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
										Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				бНайдено = Ложь;
				
				МассивТЧ = Новый Массив();
				МассивТЧ.Добавить("ПолучателиПисьма");
				МассивТЧ.Добавить("ПолучателиКопий");
				МассивТЧ.Добавить("ПолучателиОтвета");
				
				Для Каждого ТЧ Из МассивТЧ Цикл
					Для Каждого СтрокаТЧ Из Предмет[ТЧ] Цикл
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаТЧ.Контакт));
						Если НайденныеСтроки.Количество() > 0 Тогда
							бНайдено = Истина;
							Для Каждого Структура Из МассивСтруктур Цикл
								Если Не Структура.Свойство("Партнеры") Тогда
									Структура.Вставить("Партнеры", Новый Массив());
								КонецЕсли;
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
										Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.СообщениеSMS") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Адресаты Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Контакт));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				бНайдено = Ложь;
				Для Каждого СтрокаПолучатель Из Предмет.Участники Цикл
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", СтрокаПолучатель.Партнер));
					Если НайденныеСтроки.Количество() > 0 Тогда
						бНайдено = Истина;
						
						Для Каждого Структура Из МассивСтруктур Цикл
							Если Не Структура.Свойство("Партнеры") Тогда
								Структура.Вставить("Партнеры", Новый Массив());
							КонецЕсли;
							Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
								Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
									Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Не бНайдено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
			Иначе
				// Попытки поиска у предмета реквизита "Партнер".
				Попытка
					НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Партнер));
				
				Исключение	НайденныеСтроки = Неопределено;
				КонецПопытки;
				Если НайденныеСтроки = Неопределено Тогда
					Попытка
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.CRM_Партнер));
					
					Исключение	НайденныеСтроки = Неопределено;
					КонецПопытки;
				КонецЕсли;
				Если НайденныеСтроки = Неопределено Тогда
					Попытка
						НайденныеСтроки = ПартнерыПоОтбору.НайтиСтроки(Новый Структура("Партнер", Предмет.Контрагент));
					
					Исключение	НайденныеСтроки = Неопределено;
					КонецПопытки;
				КонецЕсли;
				Если НайденныеСтроки = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Партнеры") Тогда
						Структура.Вставить("Партнеры", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Партнеры.Найти(НайденнаяСтрока.Партнер) = Неопределено Тогда
							Структура.Партнеры.Добавить(НайденнаяСтрока.Партнер);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
			ОтборПоПроектам = Выборка.Хранилище.Получить();
			Если ТипЗнч(ОтборПоПроектам) = Тип("ОтборКомпоновкиДанных") Тогда
				Если ОтборПоПроектам.Элементы.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Проекты.Ссылка КАК Проект
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	НЕ Проекты.ЭтоГруппа
			|	И НЕ Проекты.ПометкаУдаления
			|";
			ПроектыПоОтбору = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, ОтборПоПроектам);
			Если ПроектыПоОтбору.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если	ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг")
				ИЛИ	ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				//
				НайденныеСтроки = ПроектыПоОтбору.НайтиСтроки(Новый Структура("Проект", Предмет.Проект));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Проекты") Тогда
						Структура.Вставить("Проекты", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Проекты.Найти(НайденнаяСтрока.Проект) = Неопределено Тогда
							Структура.Проекты.Добавить(НайденнаяСтрока.Проект);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли	ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				ИЛИ		ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
				ИЛИ		ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				//
				НайденныеСтроки = ПроектыПоОтбору.НайтиСтроки(Новый Структура("Проект", Предмет.CRM_Проект));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Для Каждого Структура Из МассивСтруктур Цикл
					Если Не Структура.Свойство("Проекты") Тогда
						Структура.Вставить("Проекты", Новый Массив());
					КонецЕсли;
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если Структура.Проекты.Найти(НайденнаяСтрока.Проект) = Неопределено Тогда
							Структура.Проекты.Добавить(НайденнаяСтрока.Проект);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") И МассивСтруктур.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивСтруктур;
	КонецЕсли;
	
КонецФункции

// Получить дату оповещения
//
// Параметры:
//  ПараметрыОповещения	 - Структура - Параметры с оповещением.
// 
// Возвращаемое значение:
//  Дата - Дата оповещения.
//
Функция ПолучитьДатуОповещения(ПараметрыОповещения) Экспорт
	
	// Если срок оповещения передан в виде даты, значит формируется мгновенное оповещение
	// на пример оповещения участников события.
	Если ТипЗнч(ПараметрыОповещения.СрокОповещения) = Тип("Дата") Тогда
		Возврат ПараметрыОповещения.СрокОповещения;
	КонецЕсли;
	
	// 1. Запланированные события и дни рождения.
	
	ЭтоСобытие = ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач;
	
	Если ЭтоСобытие Тогда
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.ПлановаяДата;
			Организация				= ПараметрыОповещения.Предмет.Организация;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("Структура") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
			Организация				= ?(ПараметрыОповещения.Предмет.Свойство("Организация"),
				 ПараметрыОповещения.Предмет.Организация,
				 Неопределено);
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			ДатаНачалаПоПредмету	= ПараметрыОповещения.Предмет.Дата;
			Организация				= Неопределено;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
				ДатаНачалаПоПредмету = ПараметрыОповещения.Предмет.СрокИсполнения;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.СрокИсполнения) И ПараметрыОповещения.Предмет.CRM_Личная Тогда
					ДатаНачалаПоПредмету = ПараметрыОповещения.Предмет.СрокИсполнения;
					ПараметрыОповещения.Вставить("ВпередПоКалендарю"	, Ложь);
				Иначе	
					ДатаНачалаПоПредмету = ПараметрыОповещения.Предмет.ДатаНачала;
					ПараметрыОповещения.Вставить("ВпередПоКалендарю"	, Истина);
				КонецЕсли;	
			КонецЕсли;
			Организация				= Неопределено;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			МесяцевВГоду = 12;
			ЕжегодныеСобытия = ПолучитьМассивЕжегодныхСобытийКлиента();
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях
				И ЕжегодныеСобытия.Найти(ПараметрыОповещения.ВидСобытия) = Неопределено Тогда
				ДатаНачалаПоПредмету = 
					ПараметрыОповещения.Предмет.CRM_КлючевыеСобытия.Найти(ПараметрыОповещения.ВидСобытия, "ВидСобытия").ДатаСобытия;
			Иначе
				КоличествоЛет = Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения);
				ДатаНачалаПоПредмету = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения, КоличествоЛет * МесяцевВГоду);
			КонецЕсли;
			Если ДатаНачалаПоПредмету < ТекущаяДатаСеанса() Тогда
				ДатаНачалаПоПредмету = ДобавитьМесяц(ДатаНачалаПоПредмету, МесяцевВГоду);
			КонецЕсли;
			Организация				= Неопределено;
		КонецЕсли;
		
		СтруктураДлительности = Новый Структура();
		СтруктураДлительности.Вставить("Дней"	, 0);
		СтруктураДлительности.Вставить("Часов"	, 0);
		СтруктураДлительности.Вставить("Минут"	, 0);
		Если ПараметрыОповещения.Свойство("ВпередПоКалендарю") Тогда
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	, ПараметрыОповещения.ВпередПоКалендарю);
		Иначе	
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
		КонецЕсли;	
		СтруктураДлительности.Вставить("ВидОповещения"		, ПараметрыОповещения.ВидОповещения);
		
		Если ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
			
			СтруктураДлительности.Минут = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
			
			СтруктураДлительности.Часов = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
			
			СтруктураДлительности.Дней = ПараметрыОповещения.СрокОповещения;
			
		ИначеЕсли ПараметрыОповещения.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
			
			СтруктураДлительности.Дней = ПараметрыОповещения.СрокОповещения * 7;
			
		КонецЕсли;
		
		Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
			// Получим настройку пользователя не использовать графики в оповещениях.
			СтруктураДлительности.Вставить("УчитыватьПроизводственныйКалендарьПриВыводеОповещений",
				 CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПараметрыОповещения.Получатель,
				 "УчитыватьПроизводственныйКалендарьПриВыводеОповещений"));
		КонецЕсли;
		
		Возврат CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ДатаНачалаПоПредмету,
			 СтруктураДлительности, ,
			 Организация);
		
	// 2. Действия по партнерам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		
		Возврат ТекущаяДатаСеанса();
		
	// 3. Действия по проектам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		
		Возврат ТекущаяДатаСеанса();
		
	Иначе
		
		Возврат ТекущаяДатаСеанса();
		
	КонецЕсли;
	
КонецФункции

// Сформировать оповещения по задаче.
//
// Параметры:
//  Задача			 - ЗадачаСсылка - Ссылка на задачу. 
//  АдресНастроек	 - Строка - Адрес во временном хранилище. 
//
Процедура СформироватьОповещенияПоЗадаче(Задача, АдресНастроек) Экспорт
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресНастроек);
	ТаблицаНастроекОповещений					= СтруктураПараметров.ТаблицаНастроекОповещений;
	ЭтоНоваяЗадача								= СтруктураПараметров.ЭтоНоваяЗадача;
	Пользователь								= СтруктураПараметров.Пользователь;
	
	МассивСтруктур = Новый Массив;
	
	Если НЕ ЭтоНоваяЗадача Тогда
		УдалитьОповещения(Задача, Пользователь);
	КонецЕсли;
	
	// Опишем оповещения для текущего пользователя.
	Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель"		, Пользователь);
		СтруктураОповещения.Вставить("Предмет"			, Задача);
		СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал"			, СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения"	, СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	, СтрокаОповещения.Периодичность);
		СтруктураОповещения.Вставить("СозданоПриАдресацииНаРоль",
			ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей"));
		
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Сформировать оповещение по задаче.
//
// Параметры:
//  Предмет				 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка,
//  					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка,
//  					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//  ПараметрыОповещения	 - Структура - Параметры оповещения.
//  Событие				 - ПеречислениеСсылка.bpmСобытияЭтапа	 - Событие этапа.
//  Взаимодействие		 - ДокументСсылка						 - Ссылка на документ взаимодействия.
//
Процедура СформироватьОповещениеПоЗадаче(Предмет, ПараметрыОповещения, Событие, Взаимодействие = Неопределено) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	Если ТипЗнч(ПараметрыОповещения.Шаблон) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		Если ПараметрыОповещения.Исполнителю Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Предмет.Исполнитель);
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Ответственному Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Предмет.БизнесПроцесс.Ответственный);
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Клиенту И ЗначениеЗаполнено(Предмет.БизнесПроцесс.Партнер) Тогда
			
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,
				 ?(ЗначениеЗаполнено(Предмет.БизнесПроцесс.КонтактноеЛицо), Предмет.БизнесПроцесс.КонтактноеЛицо,
				 Предмет.БизнесПроцесс.Партнер));
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОповещения.Шаблон) = Тип("СправочникСсылка.SMS4B_ШаблоныСообщений") Тогда
		
		Если ПараметрыОповещения.Исполнителю Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Предмет.Исполнитель);
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Ответственному Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, Предмет.БизнесПроцесс.Ответственный);
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если ПараметрыОповещения.Клиенту И ЗначениеЗаполнено(Предмет.БизнесПроцесс.Партнер) Тогда
			
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		,
				 ?(ЗначениеЗаполнено(Предмет.БизнесПроцесс.КонтактноеЛицо), Предмет.БизнесПроцесс.КонтактноеЛицо,
				 Предмет.БизнесПроцесс.Партнер));
			// Если ЗначениеЗаполнено(Предмет.БизнесПроцесс.Интерес) Тогда
			//	СтруктураОповещения.Вставить("Предмет"			,Предмет.БизнесПроцесс.Интерес);
			// Иначе
				СтруктураОповещения.Вставить("Предмет"			, Предмет);
			// КонецЕсли;
			Если Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ПринятаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "ВыполненаЗадачаИсполнителя");
			ИначеЕсли Событие = Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи Тогда
				СтруктураОповещения.Вставить("ВидОповещения"	, "СозданаЗадачаИсполнителя");
			КонецЕсли;
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("Шаблон"			, ПараметрыОповещения.Шаблон);
			Если НЕ Взаимодействие = Неопределено Тогда
				СтруктураОповещения.Вставить("Взаимодействие"	, Взаимодействие);
			Иначе
				СтруктураОповещения.Вставить("Взаимодействие"	, Документы.CRM_Взаимодействие.ПустаяСсылка());
			КонецЕсли;
			МассивСтруктур.Добавить(СтруктураОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Сформировать оповещения по событию.
//
// Параметры:
//  Взаимодействие	 - ДокументСсылка - Ссылка на документ взаимодействия. 
//  АдресНастроек	 - Строка - Адрес во временном хранилище. 
//
Процедура СформироватьОповещенияПоСобытию(Взаимодействие, АдресНастроек) Экспорт
	
	СтруктураПараметров 						= ПолучитьИзВременногоХранилища(АдресНастроек);
	ТаблицаНастроекОповещений					= СтруктураПараметров.ТаблицаНастроекОповещений;
	ЭтоНовоеСобытие								= СтруктураПараметров.ЭтоНовоеСобытие;
	ИзмененСоставУчастников						= СтруктураПараметров.ИзмененСоставУчастников;
	Пользователь								= СтруктураПараметров.Пользователь;
	ПризнакПериодическоеСобытиеИнициализация	= СтруктураПараметров.ПризнакПериодическоеСобытиеИнициализация;
	НовыеУчастники								= СтруктураПараметров.НовыеУчастники;
	УдаленныеУчастники							= СтруктураПараметров.УдаленныеУчастники;
	ОтменаИлиЗавершениеВзаимодействия			= СтруктураПараметров.ОтменаИлиЗавершениеВзаимодействия;
	
	ДанныеДляФормированияОповещений = Новый Массив;
	
	Если ОтменаИлиЗавершениеВзаимодействия Тогда
		УдалитьОповещения(Взаимодействие, Взаимодействие.Ответственный);
		Для Каждого ДанныеУчастника Из Взаимодействие.СвоиЛица Цикл
			Если ТипЗнч(ДанныеУчастника.Лицо) = Тип("СправочникСсылка.Пользователи") И
				ЗначениеЗаполнено(ДанныеУчастника.Лицо) Тогда
				УдалитьОповещения(Взаимодействие, ДанныеУчастника.Лицо);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Отдельное формирование оповещения из переданных пармаетров - оно могло быть изменено на форме взаимодействия.
	Если НЕ ЭтоНовоеСобытие Тогда
		УдалитьОповещения(Взаимодействие, Пользователь);
	КонецЕсли;
	Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель"		, Пользователь);
		СтруктураОповещения.Вставить("Предмет"			, Взаимодействие);
		СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал"			, СтрокаОповещения.Канал);
		СтруктураОповещения.Вставить("СрокОповещения"	, СтрокаОповещения.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	, СтрокаОповещения.Периодичность);
		СтруктураОповещения.Вставить("СозданоПриАдресацииНаРоль", 
			ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей"));
		ДанныеДляФормированияОповещений.Добавить(СтруктураОповещения);
	КонецЦикла;
	
	Если ЭтоНовоеСобытие ИЛИ ИзмененСоставУчастников ИЛИ ПризнакПериодическоеСобытиеИнициализация Тогда
		
		// Формирование оповещений для новых участников.
		ТаблицаНастроекОповещений = ПолучитьНастройкиОповещенийПользователей(НовыеУчастники);
		
		Для Каждого СтрокаНастройки Из ТаблицаНастроекОповещений Цикл
			
			Если СтрокаНастройки.Пользователь = Пользователь Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель",		СтрокаНастройки.Пользователь);
			СтруктураОповещения.Вставить("Предмет",			Взаимодействие);
			СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
			СтруктураОповещения.Вставить("Канал",			СтрокаНастройки.Канал);
			СтруктураОповещения.Вставить("СрокОповещения",	СтрокаНастройки.СрокОповещения);
			СтруктураОповещения.Вставить("Периодичность",	СтрокаНастройки.Периодичность);
			СтруктураОповещения.Вставить("СозданоПриАдресацииНаРоль", Ложь);
			ДанныеДляФормированияОповещений.Добавить(СтруктураОповещения);
			
		КонецЦикла;
		
		// Удаление оповещений для удаленных участников.
		Если ИзмененСоставУчастников Или ПризнакПериодическоеСобытиеИнициализация Тогда
			Для Каждого ЭлементСписка Из УдаленныеУчастники Цикл
				УдалитьОповещения(Взаимодействие, ЭлементСписка.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьОповещение(ДанныеДляФормированияОповещений);
	
КонецПроцедуры

// Сформировать оповещение о поступлении оплаты
//
// Параметры:
//  Предмет				 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка,
//  					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка,
//  					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//  ПараметрыОповещения	 - Структура - Параметры оповещения.
//  СуммаОплаты			 - Число - Сумма поступившей оплаты.
//
Процедура СформироватьОповещениеОПоступленииОплаты(Предмет, ПараметрыОповещения, СуммаОплаты) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
		
		Если СтрокаПараметров.Напоминание Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, "ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("СуммаОплаты"		, СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если СтрокаПараметров.ЭлектроннаяПочта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, "ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("СуммаОплаты"		, СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если СтрокаПараметров.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, "ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("СуммаОплаты"		, СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
		
		Если СтрокаПараметров.Мессенджер Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель"		, СтрокаПараметров.Пользователь);
			СтруктураОповещения.Вставить("Предмет"			, Предмет);
			СтруктураОповещения.Вставить("ВидОповещения"	, "ПоступлениеОплаты");
			СтруктураОповещения.Вставить("Канал"			, Перечисления.CRM_КаналыОповещений.Мессенджер);
			СтруктураОповещения.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("Периодичность"	, 0);
			СтруктураОповещения.Вставить("СуммаОплаты"		, СуммаОплаты);
			
			МассивСтруктур.Добавить(СтруктураОповещения);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Функция возвращает таблицу параметров оповещения по переданному виду.
//
// Параметры:
//  ВидОповещения	 - СправочникСсылка.CRM_ВидыОповещений	 - Ссылка на вид оповещения.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьПараметрыОповещенияПоВиду(ВидОповещения) Экспорт
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	ИспользоватьОповещенияМессенджер		= Константы.CRM_ИспользоватьОповещенияМессенджер.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
	               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
	               |	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
	               |	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	               |	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
	               |	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
				   |	ДАТАВРЕМЯ(1,1,1) КАК ДатаОповещения,
				   |	Значение(Перечисление.CRM_КаналыОповещений.ПустаяСсылка) КАК Канал
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = &ВидОповещения
	               |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидОповещения";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ТаблицаОповещений = Запрос.Выполнить().Выгрузить();
	ТаблицаОповещений.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Напоминание И ИспользоватьНапоминания) Тогда
			НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
			НоваяСтрокаТаб.ВидОповещения = ВидОповещения;
			НоваяСтрокаТаб.Канал = Перечисления.CRM_КаналыОповещений.Напоминание;
			НоваяСтрокаТаб.СрокОповещения = Выборка.СрокОповещения;
			НоваяСтрокаТаб.Периодичность = Выборка.Периодичность;
			НоваяСтрокаТаб.Пользователь = Выборка.Пользователь;
			НоваяСтрокаТаб.ДатаОповещения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если (Выборка.СМС И ИспользоватьОповещенияСМС) Тогда
			НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
			НоваяСтрокаТаб.ВидОповещения = ВидОповещения;
			НоваяСтрокаТаб.Канал = Перечисления.CRM_КаналыОповещений.СМС;
			НоваяСтрокаТаб.СрокОповещения = Выборка.СрокОповещения;
			НоваяСтрокаТаб.Периодичность = Выборка.Периодичность;
			НоваяСтрокаТаб.Пользователь = Выборка.Пользователь;
			НоваяСтрокаТаб.ДатаОповещения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если (Выборка.Мессенджер И ИспользоватьОповещенияМессенджер) Тогда
			НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
			НоваяСтрокаТаб.ВидОповещения = ВидОповещения;
			НоваяСтрокаТаб.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер;
			НоваяСтрокаТаб.СрокОповещения = Выборка.СрокОповещения;
			НоваяСтрокаТаб.Периодичность = Выборка.Периодичность;
			НоваяСтрокаТаб.Пользователь = Выборка.Пользователь;
			НоваяСтрокаТаб.ДатаОповещения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если (Выборка.ЭлектроннаяПочта И ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
			НоваяСтрокаТаб.ВидОповещения = ВидОповещения;
			НоваяСтрокаТаб.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
			НоваяСтрокаТаб.СрокОповещения = Выборка.СрокОповещения;
			НоваяСтрокаТаб.Периодичность = Выборка.Периодичность;
			НоваяСтрокаТаб.Пользователь = Выборка.Пользователь;
			НоваяСтрокаТаб.ДатаОповещения = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОповещений;
	
КонецФункции

// Процедура заполняет таблицу оповещений.
//
// Параметры:
//	Ссылка - ДокументСсылка.CRM_Взаимодействие
//	ТаблицаОповещений - ТаблицаЗначений - Выходной параметр
//	Пользователь - СправочникСсылка.Пользователи
//	ПризнакИзмененыОповещения - Булево - Выходной параметр
//	ДополнительныеПараметры - Структура - содержит:
//	  * ИспользоватьНапоминания - Булево
//	  * ИспользоватьОповещенияСМС - Булево
//	  * ИспользоватьОповещенияЭлектроннаяПочта - Булево
//	  * ПлановаяДата - Дата
//	  * Ответственный - СправочникСсылка.Пользователи
//
Процедура ЗаполнитьТаблицуОповещений(Ссылка, ТаблицаОповещений, Пользователь,
	 ПризнакИзмененыОповещения,
	 ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Если НЕ Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь"	, Пользователь);
		Запрос.УстановитьПараметр("Предмет"			, Ссылка);
		Запрос.УстановитьПараметр("ОповещениеОПросроченномВзаимодействии", 
			Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения КАК СрокОповещения,
		|	CRM_Напоминания.Периодичность КАК Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|	И CRM_Напоминания.ВидОповещения <> &ОповещениеОПросроченномВзаимодействии
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
	Иначе
		ПризнакИзмененыОповещения = Истина;
		Запрос.УстановитьПараметр("Пользователь"	, Пользователь);
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
		// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
		|	ВЫБОР
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Мессенджер
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
		|	КОНЕЦ КАК Канал,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОповещения";
		// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание
			 И НЕ ДополнительныеПараметры.ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ДополнительныеПараметры.ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта
			 И НЕ ДополнительныеПараметры.ИспользоватьОповещенияЭлектроннаяПочта)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер
			 И НЕ ДополнительныеПараметры.ИспользоватьОповещенияМессенджер) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			, Новый Структура("Дата", ДополнительныеПараметры.ПлановаяДата));
		СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения"	, НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	, НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		, ДополнительныеПараметры.Ответственный);
		НоваяСтрокаТаб.ДатаОповещения = ПолучитьДатуОповещения(СтруктураОповещения);
	КонецЦикла;
	
КонецПроцедуры

// Оповестить автора поручения о выполнении задачи.
//
// Параметры:
//  Предмет	 	- ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка, 
//			 	  ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка, 
//			  	  ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//  Просрочено	- Булево - Признак просроченной задачи.
//
Процедура ОповеститьАвтораПорученияОВыполненииЗадачи(Предмет, Просрочено = Ложь) Экспорт
	
	Если НЕ Предмет.Исполнитель = Предмет.БизнесПроцесс.Автор Тогда
		
		ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
		
		Если НЕ Просрочено Тогда
			ТекстСодержания = Формат(Предмет.ДатаИсполнения, ?(ИспользоватьДатуИВремяВСрокахЗадач,
				 "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) 
				+ 
			НСтр("ru='  Выполнена задача: ""';en=' Completed task: ""'") + Строка(Предмет.Наименование) 
				+ НСтр("ru='""  исполнитель:'") + " " 
				+ Предмет.Исполнитель;
		Иначе
			ТекстСодержания = НСтр("ru='Истек срок выполнения задачи ""';en='Expiration of the task ""'") +
			Строка(Предмет.Наименование) + НСтр("ru='"" срок:';en='"" term:'") + " " +
			Формат(Предмет.СрокИсполнения, ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) +
			НСтр("ru=' исполнитель:';en=' executor:'") + " " + Предмет.Исполнитель;
		КонецЕсли;
		
		ПараметрыНапоминания = Новый Структура;
		ПараметрыНапоминания.Вставить("Пользователь"	, Предмет.БизнесПроцесс.Автор);
		ПараметрыНапоминания.Вставить("ДатаОповещения"	, ТекущаяДатаСеанса());
		ПараметрыНапоминания.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
		ПараметрыНапоминания.Вставить("Периодичность"	, Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
		
		Если Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
			ПараметрыНапоминания.Вставить("ДатаАктуальности", Дата("00010101"));
		Иначе
			ПараметрыНапоминания.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если НЕ Просрочено Тогда
			ПараметрыНапоминания.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ПустаяСсылка());
		Иначе
			ПараметрыНапоминания.Вставить("ВидОповещения"	,
				 Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
		КонецЕсли;
		CRM_НапоминанияСервер.ДобавитьНапоминание(Предмет, ТекстСодержания, ПараметрыНапоминания);
		
	КонецЕсли;
	
КонецПроцедуры 

// При смене отвественного события.
//
// Параметры:
//  Событие	 - ДокументСсылка.CRM_Взаимодействие - Ссылка на документ взаимодействия.
//
Процедура ПриСменеОтвественногоСобытия(Событие) Экспорт
	
	// Изменился ответственный, проверим, не является ли он участником события
	// если является, то надо сохранить ранее сохраненные настройки оповещений по событию (те, что флажками отмечены в ТЧ)
	// если нет настроенных оповещений, то проверим настройки оповещения для ответственного, если они есть,
	// то добавим оповещения по этим настройкам.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	, Событие);
	Запрос.УстановитьПараметр("Лицо"	, Событие.Ответственный);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ВзаимодействиеСвоиЛица.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.CRM_Взаимодействие.СвоиЛица КАК CRM_ВзаимодействиеСвоиЛица
	               |ГДЕ
	               |	CRM_ВзаимодействиеСвоиЛица.Ссылка = &Ссылка
	               |	И CRM_ВзаимодействиеСвоиЛица.Лицо = &Лицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	// Проверим, есть ли записи по оповещениям.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Получатель"		, Событие.Ответственный);
		Запрос.УстановитьПараметр("Предмет"			, Событие);
		Запрос.УстановитьПараметр("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Оповещения.Получатель КАК Получатель,
		|	CRM_Оповещения.Предмет КАК Предмет,
		|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
		|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
		|	CRM_Оповещения.Канал КАК Канал,
		|	CRM_Оповещения.ДатаАктуальности КАК ДатаАктуальности,
		|	CRM_Оповещения.Содержание КАК Содержание,
		|	CRM_Оповещения.Тема КАК Тема,
		|	CRM_Оповещения.СрокОповещения КАК СрокОповещения,
		|	CRM_Оповещения.Периодичность КАК Периодичность,
		|	CRM_Оповещения.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Получатель
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = &ВидОповещения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			// Уже есть записи оповещений по этому событию для ответственного.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Получим персональные настройки оповещений и создадим записи.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Событие.Ответственный);
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
	               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
	               |	ВЫБОР
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	               |	КОНЕЦ КАК Канал,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_1)
	               |	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	               |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь,
	               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	               |	ВЫБОР
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	               |	КОНЕЦ,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_2)
	               |	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	               |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_ОповещенияПользовательскиеНастройки.Пользователь,
	               |	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	               |	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	               |	ВЫБОР
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	               |		КОГДА CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	               |	КОНЕЦ,
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения
	               |ИЗ
	               |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	               |ГДЕ
	               |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_3)
	               |	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	               |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	               |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока ВыборкаНастроек.Следующий() Цикл
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Получатель",		ВыборкаНастроек.Пользователь);
		СтруктураОповещения.Вставить("Предмет",			Событие);
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("Канал",			ВыборкаНастроек.Канал);
		СтруктураОповещения.Вставить("СрокОповещения",	ВыборкаНастроек.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ВыборкаНастроек.Периодичность);
		МассивСтруктур.Добавить(СтруктураОповещения);
	КонецЦикла;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Удаляет оповещения по документу.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ.
//
Процедура УдалитьОповещенияПоДокументу(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	CRM_Оповещения.Получатель КАК Получатель,
	               |	CRM_Оповещения.Предмет КАК Предмет,
	               |	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	               |	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	               |	CRM_Оповещения.Канал КАК Канал
	               |ИЗ
	               |	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	               |ГДЕ
	               |	CRM_Оповещения.Документ = &Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьРегистра = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Получатель		= Выборка.Получатель;
		ЗаписьРегистра.Предмет			= Выборка.Предмет;
		ЗаписьРегистра.ДатаОповещения	= Выборка.ДатаОповещения;
		ЗаписьРегистра.ВидОповещения	= Выборка.ВидОповещения;
		ЗаписьРегистра.Канал			= Выборка.Канал;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сформировать, удалить напоминания о днях рождения.
//
// Параметры:
//  Предмет			 - ПланОбменаСсылка, БизнесПроцессСсылка, ДокументСсылка, 
//					   ПланВидовРасчетаСсылка, ЗадачаСсылка, ПланВидовХарактеристикСсылка, 
//					   ПланСчетовСсылка, СправочникСсылка	 -  Ссылка на объект.
//
Процедура СформироватьУдалитьНапоминанияОДняхРождения(Предмет) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	УдалитьОповещения(Предмет);
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Если ЗначениеЗаполнено(Предмет.ОсновнойМенеджер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь"	, Предмет.ОсновнойМенеджер);
            // BSLLS:LogicalOrInTheWhereSectionOfQuery-off
			// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
			|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
			|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
			|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
			|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
			|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
			|ИЗ
			|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
			|ГДЕ
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения)
			|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
			|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидОповещения";
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

			Выборка = Запрос.Выполнить().Выбрать();
			
			// Если есть настройки, тогда подготовим оповещение.
			Если Выборка.Следующий() Тогда
				
				СрокОповещения	= Выборка.СрокОповещения;
				Периодичность	= Выборка.Периодичность;
				
				СписокКаналов = Новый СписокЗначений;
				Если Выборка.Напоминание Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
				КонецЕсли;
				Если Выборка.ЭлектроннаяПочта Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
				КонецЕсли;
				Если Выборка.СМС Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
				КонецЕсли;
				Если Выборка.Мессенджер Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Мессенджер);
				КонецЕсли;
				
				ЗапросПоКЛ = Новый Запрос;
				ЗапросПоКЛ.УстановитьПараметр("ПустаяДата"	, Дата("00010101"));
				ЗапросПоКЛ.УстановитьПараметр("Владелец"	, Предмет);
				ЗапросПоКЛ.Текст = "ВЫБРАТЬ
				|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|ГДЕ
				|	КонтактныеЛицаПартнеров.Владелец = &Владелец
				|	И КонтактныеЛицаПартнеров.CRM_НапоминатьОДнеРождения
				|	И НЕ КонтактныеЛицаПартнеров.ДатаРождения = &ПустаяДата";
					
				Для Каждого ЭлементСписка Из СписокКаналов Цикл
					
					Если (Предмет.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо
					И ЗначениеЗаполнено(Предмет.ДатаРождения) И Предмет.CRM_НапоминатьОДнеРождения) Тогда
					
						СтруктураОповещения = Новый Структура;
						СтруктураОповещения.Вставить("Получатель"		, Предмет.ОсновнойМенеджер);
						СтруктураОповещения.Вставить("Предмет"			, Предмет);
						СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
						СтруктураОповещения.Вставить("Канал"			, ЭлементСписка.Значение);
						СтруктураОповещения.Вставить("СрокОповещения"	, СрокОповещения);
						СтруктураОповещения.Вставить("Периодичность"	, Периодичность);
						
						МассивСтруктур.Добавить(СтруктураОповещения);
					КонецЕсли;
					
					ВыборкаПоКЛ = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(ЗапросПоКЛ).Выбрать();
					Пока ВыборкаПоКЛ.Следующий() Цикл
						
						УдалитьОповещения(ВыборкаПоКЛ.Ссылка);
						
						СтруктураОповещения = Новый Структура;
						СтруктураОповещения.Вставить("Получатель"		, Предмет.ОсновнойМенеджер);
						СтруктураОповещения.Вставить("Предмет"			, ВыборкаПоКЛ.Ссылка);
						СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
						СтруктураОповещения.Вставить("Канал"			, ЭлементСписка.Значение);
						СтруктураОповещения.Вставить("СрокОповещения"	, СрокОповещения);
						СтруктураОповещения.Вставить("Периодичность"	, Периодичность);
						
						МассивСтруктур.Добавить(СтруктураОповещения);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Если ЗначениеЗаполнено(Предмет.Владелец.ОсновнойМенеджер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь"	, Предмет.Владелец.ОсновнойМенеджер);
            // BSLLS:LogicalOrInTheWhereSectionOfQuery-off
			// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
			|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
			|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
			|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
			|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
			|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
			|ИЗ
			|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
			|ГДЕ
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения)
			|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
			|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидОповещения";
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			// Если есть настройки, тогда подготовим оповещение.
			Если Выборка.Следующий() Тогда
				
				СрокОповещения	= Выборка.СрокОповещения;
				Периодичность	= Выборка.Периодичность;
				
				СписокКаналов = Новый СписокЗначений;
				Если Выборка.Напоминание Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
				КонецЕсли;
				Если Выборка.ЭлектроннаяПочта Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
				КонецЕсли;
				Если Выборка.СМС Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
				КонецЕсли;
				Если Выборка.Мессенджер Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Мессенджер);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Предмет.ДатаРождения) И Предмет.CRM_НапоминатьОДнеРождения Тогда
					
					Для Каждого ЭлементСписка Из СписокКаналов Цикл
						
						СтруктураОповещения = Новый Структура;
						СтруктураОповещения.Вставить("Получатель"		, Предмет.Владелец.ОсновнойМенеджер);
						СтруктураОповещения.Вставить("Предмет"			, Предмет);
						СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения);
						СтруктураОповещения.Вставить("Канал"			, ЭлементСписка.Значение);
						СтруктураОповещения.Вставить("СрокОповещения"	, СрокОповещения);
						СтруктураОповещения.Вставить("Периодичность"	, Периодичность);
						
						МассивСтруктур.Добавить(СтруктураОповещения);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьОповещение(МассивСтруктур);
	
КонецПроцедуры

// Процедура удаляет старые и добавляет новые оповещения для ключевых событий контакта.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт, для которого формируются напоминания.
//
Процедура CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(Контакт) Экспорт
	МассивСтруктур = Новый Массив;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		УдалитьОповещения(Контакт);
		Если ЗначениеЗаполнено(Контакт.Владелец.ОсновнойМенеджер) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Пользователь", Контакт.Владелец.ОсновнойМенеджер);
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
			// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
			|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
			|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
			|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
			|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
			|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
			|ИЗ
			|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
			|ГДЕ
			|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях)
			|	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
			|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
			|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидОповещения";
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

			Выборка = Запрос.Выполнить().Выбрать();
			// Если есть настройки, тогда подготовим оповещение.
			Если Выборка.Следующий() Тогда
				СрокОповещения	= Выборка.СрокОповещения;
				Периодичность	= Выборка.Периодичность;
				СписокКаналов = Новый СписокЗначений;
				Если Выборка.Напоминание Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Напоминание);
				КонецЕсли;
				Если Выборка.ЭлектроннаяПочта Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
				КонецЕсли;
				Если Выборка.СМС Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.СМС);
				КонецЕсли;
				Если Выборка.Мессенджер Тогда
					СписокКаналов.Добавить(Перечисления.CRM_КаналыОповещений.Мессенджер);
				КонецЕсли;
				Для Каждого СтрокаКлючевогоСобытия Из Контакт.CRM_КлючевыеСобытия Цикл 
					Если СтрокаКлючевогоСобытия.НапоминатьОСобытии И ЗначениеЗаполнено(СтрокаКлючевогоСобытия.ДатаСобытия) Тогда
						Для Каждого ЭлементСписка Из СписокКаналов Цикл
							СтруктураОповещения = Новый Структура;
							СтруктураОповещения.Вставить("Получатель",		Контакт.Владелец.ОсновнойМенеджер);
							СтруктураОповещения.Вставить("Предмет",			Контакт);
							СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях);
							СтруктураОповещения.Вставить("Канал",			ЭлементСписка.Значение);
							СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
							СтруктураОповещения.Вставить("Периодичность",	Периодичность);
							СтруктураОповещения.Вставить("ВидСобытия",		СтрокаКлючевогоСобытия.ВидСобытия);
							СтруктураОповещения.Вставить("ДатаСобытия",		СтрокаКлючевогоСобытия.ДатаСобытия);
							МассивСтруктур.Добавить(СтруктураОповещения);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если МассивСтруктур.Количество() > 0 Тогда
		ДобавитьОповещение(МассивСтруктур);
	КонецЕсли;	
КонецПроцедуры // CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область События

// Процедура заполняет настройки оповещений.
//
// Параметры:
//	Нет.
//
Процедура ПриСозданииНаСервере(Форма, Ссылка, ГруппаОповещений) Экспорт
	Если Не CRM_НапоминанияСервер.ИспользуютсяНапоминания() Тогда
		Возврат;	
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	Для Ид = 1 По 5 Цикл
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения" + Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения" + Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения" + Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения" + Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		НоваяКомандаФормы = Форма.Команды.Добавить("УдалитьОповещение_" + Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЦикла;
	НоваяКомандаФормы = Форма.Команды.Добавить("ДобавитьОповещение");
	НоваяКомандаФормы.Заголовок					= "Добавить оповещение";
	НоваяКомандаФормы.Отображение				= ОтображениеКнопки.Текст;
	НоваяКомандаФормы.Подсказка					= "Добавить новое оповещение";
	НоваяКомандаФормы.Действие					= "Подключаемый_ДобавитьОповещение";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИспользоватьНапоминания",	Константы.CRM_ИспользоватьНапоминания.Получить());
	ДополнительныеПараметры.Вставить("ИспользоватьОповещенияСМС", Константы.CRM_ИспользоватьОповещенияСМС.Получить());
	ДополнительныеПараметры.Вставить("ИспользоватьОповещенияМессенджер",
		Константы.CRM_ИспользоватьОповещенияМессенджер.Получить());
	ДополнительныеПараметры.Вставить("ИспользоватьОповещенияЭлектроннаяПочта",
			Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить());
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ДополнительныеПараметры.Вставить("ПлановаяДата",	Форма.Объект.ПлановаяДата);
		ДополнительныеПараметры.Вставить("Ответственный",	Форма.Объект.Ответственный);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ДополнительныеПараметры.Вставить("ПлановаяДата",	Форма.Объект.СрокИсполнения);
		ДополнительныеПараметры.Вставить("Ответственный",	Форма.ТекущийПользователь);
	КонецЕсли;
	
	ЗаполнитьТаблицуОповещений(Ссылка, Форма._ТаблицаОповещений, Форма.ТекущийПользователь,
		 Форма.ПризнакИзмененыОповещения,
		 ДополнительныеПараметры);
	мПараметрыВыбора = Новый Массив();
	ДанныеВыбора = Новый Массив();
	Если ДополнительныеПараметры.ИспользоватьНапоминания Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Напоминание"));
	КонецЕсли;	
	Если ДополнительныеПараметры.ИспользоватьОповещенияЭлектроннаяПочта Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта"));
	КонецЕсли;	
	Если ДополнительныеПараметры.ИспользоватьОповещенияСМС Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.СМС"));
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользоватьОповещенияМессенджер Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Мессенджер"));
	КонецЕсли;
	Параметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ДанныеВыбора));
	мПараметрыВыбора.Добавить(Параметр);

	КоличествоОповещений = Форма._ТаблицаОповещений.Количество();
	Для Ид = 1 По 5 Цикл
		ЭлементГруппа		= Форма.Элементы.Добавить("ГруппаКанала_" + Строка(Ид), Тип("ГруппаФормы"), ГруппаОповещений);
		ЭлементГруппа.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппа.Отображение	= ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппа.Группировка	= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ЭлементГруппа.ОтображатьЗаголовок	= Ложь;
		ЭлементГруппа.Видимость				= Ложь;	
		Элемент = Форма.Элементы.Добавить("ПолеКанала_" + Строка(Ид), Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид 					= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным				= "_КаналОповещения" + Строка(Ид);
		Элемент.АвтоМаксимальнаяШирина	= Ложь;
		Элемент.МаксимальнаяШирина		= 16;
		Элемент.Ширина					= 0;
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
 		Элемент = Форма.Элементы.Добавить("ДекорацияПолеСрокаОповещения_" + Строка(Ид),
 			 Тип("ДекорацияФормы"), ЭлементГруппа);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Заголовок = НСтр("ru='за';en='for'");
		Элемент = Форма.Элементы.Добавить("ПолеСрокаОповещения_" + Строка(Ид), Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения" + Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.АвтоМаксимальнаяШирина		= Ложь;
		Элемент.МаксимальнаяШирина			= 6;
		Элемент.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		Элемент = Форма.Элементы.Добавить("ПолеПериодаОповещения_" + Строка(Ид), Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения" + Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.АвтоМаксимальнаяШирина		= Ложь;
		Элемент.МаксимальнаяШирина			= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		НовыйЭлемент = Форма.Элементы.Добавить("Кнопка_УдалитьОповещение_" + Строка(Ид), Тип("КнопкаФормы"), ЭлементГруппа);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_" + Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.CRM_УдалитьСерая;
		НовыйЭлемент.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		Элемент = Форма.Элементы.Добавить("ПолеДатыОповещения_" + Строка(Ид), Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения" + Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Ширина						= 12;
		Если Ид > КоличествоОповещений Тогда
			Продолжить;
		КонецЕсли;
		ЭлементГруппа.Видимость	= Истина;	
		СтрокаТаб	= Форма._ТаблицаОповещений[Ид - 1];
		Форма["_КаналОповещения" + Строка(Ид)]	= СтрокаТаб.Канал;
		Форма["_СрокОповещения" + Строка(Ид)]	= СтрокаТаб.СрокОповещения;
		Форма["_ПериодОповещения" + Строка(Ид)]	= СтрокаТаб.Периодичность;
		Форма["_ДатаОповещения" + Строка(Ид)]	= СтрокаТаб.ДатаОповещения;
		ПолеДатыОповещения	= Форма.Элементы["ПолеДатыОповещения_" + Строка(Ид)];
		Если Форма["_ДатаОповещения" + Строка(Ид)] < CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() Тогда
			ПолеДатыОповещения.Подсказка			= НСтр("ru='Планируемая дата оповещения меньше текущего времени';
				|en='Schedulable date of the notification is less than the current time'");
			ПолеДатыОповещения.ОтображениеПодсказки	= ОтображениеПодсказки.Кнопка;
			ПолеДатыОповещения.ЦветТекста			= Новый Цвет(255, 0, 0);
		Иначе	
			ПолеДатыОповещения.Подсказка			= НСтр("ru='Планируемая дата оповещения';en='Schedulable date of the notification'");
			ПолеДатыОповещения.ОтображениеПодсказки	= ОтображениеПодсказки.Всплывающая;
			ПолеДатыОповещения.ЦветТекста			= Новый Цвет(0, 0, 0);
		КонецЕсли;
	КонецЦикла;
	НовыйЭлемент = Форма.Элементы.Добавить("ДобавитьНовоеОповещение", Тип("КнопкаФормы"), ГруппаОповещений);
	НовыйЭлемент.ИмяКоманды			= "ДобавитьОповещение";
	НовыйЭлемент.Заголовок			= "Добавить оповещение";
	НовыйЭлемент.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
	НовыйЭлемент.Отображение		= ОтображениеКнопки.Текст;
	НовыйЭлемент.ЦветТекста			= ЦветаСтиля.CRM_ОсновнойГолубой;
	НовыйЭлемент.Видимость			= (КоличествоОповещений < 5);
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик подписки на событие "CRM_ПередЗаписьюОбъектаОповещения".
//
Процедура ПередЗаписьюОбъектаОповещения(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовоеВзаимодействие"	, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиСтатус"			, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиОтветственного"	, Ложь);
		Источник.ДополнительныеСвойства.Вставить("ИзменилиПлановуюДату"		, Ложь);
		
		Если НЕ Источник.Ссылка = Источник.Ссылка Тогда
			Источник.ДополнительныеСвойства.ЭтоНовоеВзаимодействие = Истина;
		КонецЕсли;
		
		// Изменили статус
		Если НЕ Источник.СтатусВзаимодействия = Источник.Ссылка.СтатусВзаимодействия Тогда
			Источник.ДополнительныеСвойства.ИзменилиСтатус = Истина;
		КонецЕсли;
		
		// Изменили ответственного
		Если НЕ Источник.Ответственный = Источник.Ссылка.Ответственный Тогда
			Источник.ДополнительныеСвойства.ИзменилиОтветственного = Истина;
		КонецЕсли;
		
		// Изменили Плановую дату
		Если Не Источник.ЭтоНовый() И Не Источник.ПлановаяДата = Источник.Ссылка.ПлановаяДата Тогда
			Источник.ДополнительныеСвойства.ИзменилиПлановуюДату = Истина;
			Источник.ДополнительныеСвойства.Вставить("СтароеЗначениеПлановойДаты", Источник.Ссылка.ПлановаяДата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик подписки на событие "CRM_ПриЗаписиОбъектаОповещения".
//
Процедура ПриЗаписиОбъектаОповещения(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеСоздаватьОповещенияПоУмолчанию") 
		И (Не Источник.ДополнительныеСвойства.Свойство("СтароеЗначениеПлановойДаты") 
		Или  Источник.Ответственный = Пользователи.ТекущийПользователь()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Взаимодействие") Тогда
		ТаблицаОповещений = Новый ТаблицаЗначений;
		Если Не Источник.ДополнительныеСвойства.ЭтоНовоеВзаимодействие Тогда
			ТаблицаОповещений = ПолучитьСуществующиеНапоминания(Источник.Ссылка);
			УдалитьОповещенияОЗапланированныхСобытиях(Источник.Ссылка);
		КонецЕсли;
		
		Если НЕ (Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено) И
			НЕ (Источник.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено) Тогда
			Если ТаблицаОповещений.Количество() > 0 Тогда
				ТаблицаНастроекОповещений = ТаблицаОповещений;
			Иначе	
				ТаблицаНастроекОповещений = ПолучитьПараметрыОповещенияЗапланированныеСобытия(Источник.Ответственный,
					 Источник.Ссылка);
			КонецЕсли;
			МассивСтруктур = Новый Массив;
			Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель"		, Источник.Ответственный);
				СтруктураОповещения.Вставить("Предмет"			, Источник.Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
				СтруктураОповещения.Вставить("Канал"			, СтрокаОповещения.Канал);
				СтруктураОповещения.Вставить("СрокОповещения"	, СтрокаОповещения.СрокОповещения);
				СтруктураОповещения.Вставить("Периодичность"	, СтрокаОповещения.Периодичность);
				Если Источник.ДополнительныеСвойства.ИзменилиПлановуюДату Тогда
					СтруктураОповещения.Вставить("СтароеЗначениеПлановойДаты", 
						Источник.ДополнительныеСвойства.СтароеЗначениеПлановойДаты);
				КонецЕсли;
				МассивСтруктур.Добавить(СтруктураОповещения);
			КонецЦикла;
			ДобавитьОповещение(МассивСтруктур);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		Если Не Источник.CRM_Личная Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаОповещений = Новый ТаблицаЗначений;
		Если НЕ Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			ТаблицаОповещений = ПолучитьСуществующиеНапоминания(Источник.Ссылка);
			УдалитьОповещенияОЗапланированныхСобытиях(Источник.Ссылка);
		КонецЕсли;
		
		Если НЕ (Источник.Выполнена) И
			НЕ (Источник.ПометкаУдаления) Тогда
			Если ТаблицаОповещений.Количество() > 0 Тогда
				ТаблицаНастроекОповещений = ТаблицаОповещений;
			Иначе	
				ТаблицаНастроекОповещений = ПолучитьПараметрыОповещенияЗапланированныеСобытия(Источник.Исполнитель,
					 Источник.Ссылка);
			КонецЕсли;
			МассивСтруктур = Новый Массив;
			Для Каждого СтрокаОповещения Из ТаблицаНастроекОповещений Цикл
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель"		, Источник.Исполнитель);
				СтруктураОповещения.Вставить("Предмет"			, Источник.Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
				СтруктураОповещения.Вставить("Канал"			, СтрокаОповещения.Канал);
				СтруктураОповещения.Вставить("СрокОповещения"	, СтрокаОповещения.СрокОповещения);
				СтруктураОповещения.Вставить("Периодичность"	, СтрокаОповещения.Периодичность);
				Если Источник.ДополнительныеСвойства.Свойство("СтарыйСрокИсполнения") Тогда
					СтруктураОповещения.Вставить("СтарыйСрокИсполнения", Источник.ДополнительныеСвойства.СтарыйСрокИсполнения);
				КонецЕсли;
				МассивСтруктур.Добавить(СтруктураОповещения);
			КонецЦикла;
			ДобавитьОповещение(МассивСтруктур);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыОповещенияЗапланированныеСобытия(Пользователь, Предмет)
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	ИспользоватьОповещенияМессенджер		= Константы.CRM_ИспользоватьОповещенияМессенджер.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
	|	ВЫБОР
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	|	КОНЕЦ КАК Канал,
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
	|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидОповещения";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	ТаблицаОповещений = Запрос.Выполнить().Выгрузить();
	ТаблицаОповещений.Очистить();
	ТаблицаОповещений.Колонки.Добавить("ДатаОповещения", Новый ОписаниеТипов("Дата", , ,
		 Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
			ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
			ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер И НЕ ИспользоватьОповещенияМессенджер)
			ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта
				И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаб = ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Предмет);
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения",	НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		Пользователь);
		
		НоваяСтрокаТаб.ДатаОповещения = ПолучитьДатуОповещения(СтруктураОповещения);
		
	КонецЦикла;
	
	Возврат ТаблицаОповещений;
	
КонецФункции

Функция ПолучитьСуществующиеНапоминания(Предмет)
	НаборРегистра = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	НаборРегистра.Прочитать();
	ТаблицаОповещений = НаборРегистра.Выгрузить(, "СрокОповещения, Канал, Периодичность,
		| ВидОповещения, Получатель,
		| Предмет");
	ТаблицаОповещений.Колонки.Добавить("Канал");
	Для Каждого Строка Из ТаблицаОповещений Цикл
		Строка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание;
	КонецЦикла;	
	НаборРегистра = РегистрыСведений.CRM_Оповещения.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Предмет.Установить(Предмет);
	НаборРегистра.Прочитать();
	Для Каждого Запись Из НаборРегистра Цикл
		Стр = ТаблицаОповещений.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Запись);
	КонецЦикла;	
	Возврат ТаблицаОповещений;
КонецФункции	

#КонецОбласти

#Область ФормированиеОповещений

Процедура ФормированиеОповещений() Экспорт
	
	ИмяЗадания = "CRM_ФормированиеОповещений";
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания[ИмяЗадания]);
	
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Формирование записей оповещений о просроченных задачах, незавершенных событиях, контрольных точках.
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	ВидыОповещений = Новый Массив;
	ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
	ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ПустаяДата", ДАТА("00010101"));
	Запрос.УстановитьПараметр("ВидыОповещений", ВидыОповещений);

	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь КАК Пользователь,
	|	CRM_Напоминания.Предмет КАК Предмет,
	|	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Напоминания.ДатаАктуальности КАК ДатаАктуальности,
	|	CRM_Напоминания.Содержание КАК Содержание,
	|	CRM_Напоминания.Важность КАК Важность,
	|	CRM_Напоминания.Счетчик КАК Счетчик,
	|	CRM_Напоминания.СрокОповещения КАК СрокОповещения,
	|	CRM_Напоминания.Периодичность КАК Периодичность,
	|	CRM_Напоминания.ВидОповещения КАК ВидОповещения
	|ПОМЕСТИТЬ Напоминания
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения В (&ВидыОповещений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Оповещения.Получатель КАК Получатель,
	|	CRM_Оповещения.Предмет КАК Предмет,
	|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	|	CRM_Оповещения.Канал КАК Канал,
	|	CRM_Оповещения.ДатаАктуальности КАК ДатаАктуальности,
	|	CRM_Оповещения.Содержание КАК Содержание,
	|	CRM_Оповещения.СрокОповещения КАК СрокОповещения,
	|	CRM_Оповещения.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ Оповещения
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.ВидОповещения В (&ВидыОповещений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Участники.Ссылка КАК Предмет,
	|	Участники.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ КонтрольныеТочки
	|ИЗ
	|	Документ.CRM_ЭтапКалендарногоПлана.Участники КАК Участники
	|ГДЕ
	|	НЕ Участники.Ссылка.ПометкаУдаления
	|	И КОНЕЦПЕРИОДА(Участники.Ссылка.ПлановаяДатаОкончания, ДЕНЬ) < &ТекущаяДата
	|	И Участники.Ссылка.ПлановаяДатаОкончания > &НачалоПериода
	|	И Участники.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Предмет,
	|	ВЫБОР
	|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЗадачаИсполнителя.БизнесПроцесс.Ответственный
	|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	|	КОНЕЦ КАК Пользователь
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
	|	И ЗадачаИсполнителя.СрокИсполнения > &НачалоПериода
	|	И ВЫБОР
	|			КОГДА НЕ ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс)
	|			ИНАЧЕ НЕ ЗадачаИсполнителя.СрокИсполнения = &ПустаяДата
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Взаимодействие.Ссылка КАК Предмет,
	|	CRM_Взаимодействие.Ответственный КАК Пользователь
	|ПОМЕСТИТЬ Взаимодействия
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	НЕ CRM_Взаимодействие.ПометкаУдаления
	|	И CRM_Взаимодействие.ДатаЗавершенияВзаимодействия = ДАТАВРЕМЯ(1,1,1)
	|	И CRM_Взаимодействие.ПлановаяДатаЗавершение < &ТекущаяДата
	|	И CRM_Взаимодействие.ПлановаяДатаЗавершение > &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПросроченныеВзаимодействия.Предмет КАК Предмет,
	|	ПросроченныеВзаимодействия.Пользователь КАК Пользователь,
	|	ПросроченныеВзаимодействия.Напоминания КАК Напоминания,
	|	ПросроченныеВзаимодействия.Оповещения КАК Оповещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Взаимодействия.Предмет КАК Предмет,
	|		Взаимодействия.Пользователь КАК Пользователь,
	|		СУММА(ВЫБОР
	|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Напоминания,
	|		СУММА(ВЫБОР
	|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Оповещения
	|	ИЗ
	|		Взаимодействия КАК Взаимодействия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|			ПО Взаимодействия.Предмет = Напоминания.Предмет
	|				И Взаимодействия.Пользователь = Напоминания.Пользователь
	|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|			ПО Взаимодействия.Предмет = Оповещения.Предмет
	|				И Взаимодействия.Пользователь = Оповещения.Получатель
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Взаимодействия.Предмет,
	|		Взаимодействия.Пользователь) КАК ПросроченныеВзаимодействия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПросроченныеКонтрольныеТочки.Предмет,
	|	ПросроченныеКонтрольныеТочки.Пользователь,
	|	ПросроченныеКонтрольныеТочки.Напоминания,
	|	ПросроченныеКонтрольныеТочки.Оповещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтрольныеТочки.Предмет КАК Предмет,
	|		КонтрольныеТочки.Пользователь КАК Пользователь,
	|		СУММА(ВЫБОР
	|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Напоминания,
	|		СУММА(ВЫБОР
	|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Оповещения
	|	ИЗ
	|		КонтрольныеТочки КАК КонтрольныеТочки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|			ПО КонтрольныеТочки.Предмет = Напоминания.Предмет
	|				И КонтрольныеТочки.Пользователь = Напоминания.Пользователь
	|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|			ПО КонтрольныеТочки.Предмет = Оповещения.Предмет
	|				И КонтрольныеТочки.Пользователь = Оповещения.Получатель
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КонтрольныеТочки.Предмет,
	|		КонтрольныеТочки.Пользователь) КАК ПросроченныеКонтрольныеТочки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПросроченныеЗадачи.Предмет,
	|	ПросроченныеЗадачи.Пользователь,
	|	ПросроченныеЗадачи.Напоминания,
	|	ПросроченныеЗадачи.Оповещения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Задачи.Предмет КАК Предмет,
	|		Задачи.Пользователь КАК Пользователь,
	|		СУММА(ВЫБОР
	|				КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Напоминания,
	|		СУММА(ВЫБОР
	|				КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК Оповещения
	|	ИЗ
	|		Задачи КАК Задачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|			ПО Задачи.Предмет = Напоминания.Предмет
	|				И Задачи.Пользователь = Напоминания.Пользователь
	|			ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|			ПО Задачи.Предмет = Оповещения.Предмет
	|				И Задачи.Пользователь = Оповещения.Получатель
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Задачи.Предмет,
	|		Задачи.Пользователь) КАК ПросроченныеЗадачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато формирование регламентных оповещений';en='Formation of regulated notifications are beg'"));
	ВариантПоставкиКонфигурации = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьОсновнойВариантПоставки();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Напоминания > 0 ИЛИ Выборка.Оповещения > 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Выборка.Предмет) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			Если ВариантПоставкиКонфигурации <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
				ПараметрыОповещения =  Неопределено;
			Иначе
				ПараметрыОповещения = ПолучитьПараметрыОповещения(Выборка.Пользователь,
					 Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки,
					 Выборка.Предмет);
			КонецЕсли;
		Иначе
			ПараметрыОповещения = ПолучитьПараметрыОповещения(Выборка.Пользователь,
				 Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи,
				 Выборка.Предмет);
		КонецЕсли;
		
		Если НЕ (ПараметрыОповещения = Неопределено) Тогда
			Попытка
				ДобавитьОповещение(ПараметрыОповещения);
			Исключение
				ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Формирование записей оповещений о участии выбранных проектов/процессов, партнеров в документах.
	ФормированиеЗаписейОповещенийПоНовымПроектамПартнерам();
	
	// 3. Формирование записей оповещений о скором окончании срока задач.
	ФормированиеЗаписейОповещенийОСкоромОкончанииСрокаЗадач();
	
	// 4. Формирование записей оповещений о пропущенных телефонных звонках
	ФормированиеЗаписейОповещенийОПропущенныхТелефонныхЗвонках();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Закончено формирование регламентных оповещений';en='Formation of regulated notifications are finish'"));
	
КонецПроцедуры

// Формирует оповещения по новым партнерам / проектам.
//
Процедура ФормированиеЗаписейОповещенийПоНовымПроектамПартнерам()
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
    // В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОповещенияПользовательскиеНастройки.Пользователь	КАК Пользователь,
	|	ОповещенияПользовательскиеНастройки.ВидОповещения	КАК ВидОповещения
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	ОповещенияПользовательскиеНастройки.ВидОповещения В (&ВидыОповещений)
	|	И НЕ ОповещенияПользовательскиеНастройки.Пользователь.ПометкаУдаления
	|	И НЕ ОповещенияПользовательскиеНастройки.Пользователь.Недействителен
	|	И (ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	|		ИЛИ ОповещенияПользовательскиеНастройки.СМС
	|		ИЛИ ОповещенияПользовательскиеНастройки.Напоминание)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ОбъектыДляРегламентногоФормированияОповещений.Объект		КАК Предмет,
	|	ОбъектыДляРегламентногоФормированияОповещений.Объект.Автор	КАК Автор
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыДляРегламентногоФормированияОповещений КАК ОбъектыДляРегламентногоФормированияОповещений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	ВидыОповещений = Новый Массив;
	ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ДействияПоПроектам);
	ВидыОповещений.Добавить(Справочники.CRM_ВидыОповещений.ДействияПоПартнерам);
	Запрос.УстановитьПараметр("ВидыОповещений", ВидыОповещений);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПользователи = РезультатЗапроса[0].Выбрать();
	ВыборкаПредметы = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаПользователи.Следующий() Цикл
		ВыборкаПредметы.Сбросить();
		
		Пока ВыборкаПредметы.Следующий() Цикл
			Если ВыборкаПредметы.Автор = ВыборкаПользователи.Пользователь Тогда
				// Если документ создал сам пользователь, оповещать его об этом смысла нет - пропускаем его.
				Продолжить;
			КонецЕсли;
			
			ПараметрыОповещения = ПолучитьПараметрыОповещения(ВыборкаПользователи.Пользователь,
				 ВыборкаПользователи.ВидОповещения,
				 ВыборкаПредметы.Предмет);
			
			Если НЕ ПараметрыОповещения = Неопределено Тогда
				Попытка
					ДобавитьОповещение(ПараметрыОповещения);
				Исключение
					ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыДляРегламентногоФормированияОповещений.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

// Формирование записей оповещений о скором окончании срока задач.
//
Процедура ФормированиеЗаписейОповещенийОСкоромОкончанииСрокаЗадач()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Напоминания.Пользователь КАК Пользователь,
	|	CRM_Напоминания.Предмет КАК Предмет,
	|	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Напоминания.ДатаАктуальности КАК ДатаАктуальности,
	|	CRM_Напоминания.Содержание КАК Содержание,
	|	CRM_Напоминания.Важность КАК Важность,
	|	CRM_Напоминания.Счетчик КАК Счетчик,
	|	CRM_Напоминания.СрокОповещения КАК СрокОповещения,
	|	CRM_Напоминания.Периодичность КАК Периодичность,
	|	CRM_Напоминания.ВидОповещения КАК ВидОповещения
	|ПОМЕСТИТЬ Напоминания
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Оповещения.Получатель КАК Получатель,
	|	CRM_Оповещения.Предмет КАК Предмет,
	|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	|	CRM_Оповещения.Канал КАК Канал,
	|	CRM_Оповещения.ДатаАктуальности КАК ДатаАктуальности,
	|	CRM_Оповещения.Содержание КАК Содержание,
	|	CRM_Оповещения.СрокОповещения КАК СрокОповещения,
	|	CRM_Оповещения.Периодичность КАК Периодичность
	|ПОМЕСТИТЬ Оповещения
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	СУММА(ВЫБОР
	|			КОГДА Напоминания.ВидОповещения ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Напоминания,
	|	СУММА(ВЫБОР
	|			КОГДА Оповещения.ВидОповещения ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Оповещения
	|ПОМЕСТИТЬ ВсеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Напоминания КАК Напоминания
	|		ПО ЗадачаИсполнителя.Ссылка = Напоминания.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оповещения КАК Оповещения
	|		ПО ЗадачаИсполнителя.Ссылка = Оповещения.Предмет
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка)
	|	И ЗадачаИсполнителя.СрокИсполнения > &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачаИсполнителя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗадачи.Задача.Ссылка КАК Ссылка,
	|	ВсеЗадачи.Задача.СрокИсполнения КАК СрокИсполнения,
	|	ВсеЗадачи.Задача.Исполнитель КАК Исполнитель,
	|	ВсеЗадачи.Задача.РольИсполнителя КАК РольИсполнителя,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииДней КАК НапомнитьОбОкончанииДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииЧасов КАК НапомнитьОбОкончанииЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииМинут КАК НапомнитьОбОкончанииМинут
	|ИЗ
	|	ВсеЗадачи КАК ВсеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|		ПО ВсеЗадачи.Задача.БизнесПроцесс = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	|			И ВсеЗадачи.Задача.CRM_ТочкаМаршрута = CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута
	|ГДЕ
	|	ВсеЗадачи.Напоминания = 0
	|	И ВсеЗадачи.Оповещения = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато формирование регламентных оповещений';en='Formation of regulated notifications are beg'"));
			
	Пока Выборка.Следующий() Цикл
		Если (Выборка.НапомнитьОбОкончанииДней = 0) И (Выборка.НапомнитьОбОкончанииЧасов = 0)
			 И (Выборка.НапомнитьОбОкончанииМинут = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтруктур = Новый Массив;
		
		СрокОповещения		= ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииМинут), Выборка.НапомнитьОбОкончанииМинут, 0)
								+ ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииЧасов), Выборка.НапомнитьОбОкончанииЧасов * 60, 0)
								+ ?(ЗначениеЗаполнено(Выборка.НапомнитьОбОкончанииДней), Выборка.НапомнитьОбОкончанииДней * 24 * 60, 0);
								
		Если НЕ ЗначениеЗаполнено(СрокОповещения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			
			ПараметрыОповещения	= ПолучитьПараметрыОповещения(Выборка.Исполнитель,
				 Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
			Если ПараметрыОповещения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Предмет",			Выборка.Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
				СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
				СтруктураОповещения.Вставить("Периодичность",	Перечисления.CRM_ПериодичностьОповещений.Минута);
				СтруктураОповещения.Вставить("Получатель",		Выборка.Исполнитель);
				СтруктураОповещения.Вставить("Канал",			СтрокаПараметров.Канал);
				
				МассивСтруктур.Добавить(СтруктураОповещения);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.РольИсполнителя) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("РольИсполнителя", Выборка.РольИсполнителя);
			Запрос.Текст = "ВЫБРАТЬ
			|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
			
			МассивИсполнителей = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выгрузить().ВыгрузитьКолонку("Исполнитель");
			
			Для Каждого ИсполнительРоли Из МассивИсполнителей Цикл
				ПараметрыОповещения	= ПолучитьПараметрыОповещения(Выборка.Исполнитель,
					 Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
				Если ПараметрыОповещения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаПараметров Из ПараметрыОповещения Цикл
					СтруктураОповещения = Новый Структура;
					СтруктураОповещения.Вставить("Предмет",			Выборка.Ссылка);
					СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач);
					СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
					СтруктураОповещения.Вставить("Периодичность",	Перечисления.CRM_ПериодичностьОповещений.Минута);
					СтруктураОповещения.Вставить("Получатель",		ИсполнительРоли);
					СтруктураОповещения.Вставить("Канал",			СтрокаПараметров.Канал);
					
					МассивСтруктур.Добавить(СтруктураОповещения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ДобавитьОповещение(МассивСтруктур);
		Исключение
			ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Формирование записей оповещений о пропущенных телефонных звонках
//
Процедура ФормированиеЗаписейОповещенийОПропущенныхТелефонныхЗвонках()
	
	Если НЕ Константы.сфпОповещатьОПропущенныхЗвонках.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНапоминания	= ТекущаяДатаСеанса();
	
	//сфпОтветственный = Константы.сфпПользовательДляОповещений.Получить();
	//Если НЕ ЗначениеЗаполнено(сфпОтветственный) Тогда
	//	сфпОтветственный = сфпТекущийПользователь();
	//КонецЕсли;
	
	ПараметрыНапоминания = Новый Структура();
	ПараметрыНапоминания.Вставить("ДатаОповещения", ДатаНапоминания);
	ПараметрыНапоминания.Вставить("СрокОповещения", Неопределено);
	ПараметрыНапоминания.Вставить("Периодичность", Неопределено);
	ПараметрыНапоминания.Вставить("ВидОповещения", Неопределено);
	ПараметрыНапоминания.Вставить("ДатаАктуальности", КонецДня(ДатаНапоминания));
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Звонок,
	|	Звонок.Ответственный КАК Ответственный,
	|	Звонок.АбонентКакСвязаться КАК АбонентКакСвязаться,
	|	Звонок.АбонентПредставление КАК АбонентПредставление
	|ИЗ
	|	(ВЫБРАТЬ 
	|		НомерТелефона,
	|		МИНИМУМ(Звонок) КАК Звонок,
	|		СУММА(1) КАК Количество
	|	ИЗ
	|		РегистрСведений.сфпИсторияЗвонков
	|	ГДЕ
	|		Входящий
	|		И Звонок.сфпСостояниеЗвонка = ЗНАЧЕНИЕ(Перечисление.сфпСостоянияЗвонков.Пропущенный)
	|		И Звонок.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		И Звонок.Дата >= &НачалоПериода
	|	СГРУППИРОВАТЬ ПО
	|		НомерТелефона) КАК Пропущенные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_Напоминания КАК Напоминания
	|	ПО Напоминания.Пользователь = Звонок.Ответственный И Напоминания.Предмет = Звонок
	|ГДЕ
	|	Напоминания.Предмет ЕСТЬ NULL");
	
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыНапоминания.Вставить("Пользователь", Выборка.Ответственный);
		
		ТекстНапоминания = НСтр("ru='Пропущенный звонок по номеру: ';en='Missed call on number: '")
			+ Выборка.АбонентКакСвязаться + " от абонента: " + Выборка.АбонентПредставление;
			
		Попытка
			CRM_НапоминанияСервер.ДобавитьНапоминание(Выборка.Звонок, ТекстНапоминания, ПараметрыНапоминания, ДатаНапоминания);
		Исключение
			ЗаписьЖурналаРегистрации("Формирование регламентных оповещений",
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПоSMS

Процедура ОтправкаСМСОповещений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоСМС);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обработка записей регистра оповещений с последующим созданием СМС.
	ИспользоватьСМС				= ЗначениеЗаполнено(Константы.ПровайдерSMS.Получить());
	ИспользоватьОповещенияСМС	= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	Если ИспользоватьСМС И ИспользоватьОповещенияСМС Тогда
		
		ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS",
				УровеньЖурналаРегистрации.Информация, , ,
				НСтр("ru='Начато регламентное оповещение по SMS';en='The routine notification by SMS has begun'"));
			
			Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОповещения",	ТекущаяДатаСеанса());
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_Оповещения.Получатель,
		               |	CRM_Оповещения.Предмет,
		               |	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
		               |	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
		               |	CRM_Оповещения.Канал КАК Канал,
		               |	CRM_Оповещения.ДатаАктуальности,
		               |	CRM_Оповещения.Содержание,
		               |	CRM_Оповещения.СрокОповещения,
		               |	CRM_Оповещения.Периодичность,
		               |	CRM_Оповещения.Документ,
		               |	CRM_Оповещения.Тема,
					   |	CRM_Оповещения.Шаблон,
					   |	CRM_Оповещения.Взаимодействие
		               |ИЗ
		               |	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		               |ГДЕ
		               |	CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
		               |	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Канал,
		               |	ВидОповещения,
		               |	ДатаОповещения";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Получатель		= Выборка.Получатель;
			МенеджерЗаписи.Предмет			= Выборка.Предмет;
			МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
			МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Канал			= Выборка.Канал;
			МенеджерЗаписи.Прочитать();
			
			// Если Дата актуальности меньше НачалоПериода, то удаляем запись регистра.
			Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= НачалоПериода) Тогда
				Если МенеджерЗаписи.Выбран() Тогда
					Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
						СтруктураДлительности = Новый Структура();
						СтруктураДлительности.Вставить("Дней"	, 0);
						СтруктураДлительности.Вставить("Часов"	, 0);
						СтруктураДлительности.Вставить("Минут"	, 0);
						СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
						СтруктураДлительности.Вставить("ВидОповещения"		, МенеджерЗаписи.ВидОповещения);
						
						Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
							СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
							СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения * 7;
						КонецЕсли;
						
						ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,
							 12)), СтруктураДлительности, ,
							 Неопределено);
						
						МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
						МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60 * 60 * 24 * 7);
						МенеджерЗаписи.Записать();
					Иначе
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
			// Если Дата актуальности меньше текущей даты, то уже нет смысла отправлять.
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Документ)
				 И НЕ (Выборка.ДатаАктуальности = Дата("00010101"))
				 И (Выборка.ДатаАктуальности <= ТекущаяДатаСеанса()) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если документа нет, то значит еще не отправляли смс.
			Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
				
				СписокТелефонов = ПолучитьСписокНомеровТелефоновКонтрагента(Выборка.Получатель);
				Если СписокТелефонов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НовоеСообщение = СоздатьЗаполнитьСообщение(Выборка);
				
				Попытка
					НовоеСообщение.Записать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеСообщение.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
					Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И Не Выборка.Предмет.БизнесПроцесс = Неопределено
					И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
						Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						Набор.Отбор.БизнесПроцесс.Установить(Выборка.Предмет.БизнесПроцесс);
						Набор.Отбор.Объект.Установить(НовоеСообщение.Ссылка);
						Набор.Прочитать();
						Набор.Очистить();
						Набор.Записать();
						
						ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						ЗаписьРегистра.БизнесПроцесс	= Выборка.Предмет.БизнесПроцесс;
						ЗаписьРегистра.Задача			= Выборка.Предмет;
						ЗаписьРегистра.ТочкаМаршрута	= Выборка.Предмет.CRM_ТочкаМаршрута;
						ЗаписьРегистра.Объект			= НовоеСообщение.Ссылка;
						ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
						ЗаписьРегистра.ВидОбъекта		=
							CRM_ВоронкиПродажПовтИсп.ПолучитьСсылкуПВХВидыОбъектовБизнесПроцессовПоТипу(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
						ЗаписьРегистра.Записать();
						
						Если ЗначениеЗаполнено(Выборка.Взаимодействие) Тогда
							CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Выборка.Взаимодействие, НовоеСообщение.Ссылка);
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
			Иначе
			// Надо проверить состояние документа, если он отправлен, то просто удаляем запись регистра
			// об оповещении, если же состояние показывает ошибку, то удаляем запись регистра,
			// при состоянии, когда находится еще у провайдера, ничего не делаем.
			
				СостояниеДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "Состояние");
				Если ЗначениеЗаполнено(СостояниеДоставки) Тогда
					Если СостояниеДоставки = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Или
						 СостояниеДоставки = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено Тогда
						
						Если МенеджерЗаписи.Выбран() Тогда
							Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
								СтруктураДлительности = Новый Структура();
								СтруктураДлительности.Вставить("Дней"	, 0);
								СтруктураДлительности.Вставить("Часов"	, 0);
								СтруктураДлительности.Вставить("Минут"	, 0);
								СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
								СтруктураДлительности.Вставить("ВидОповещения"		, МенеджерЗаписи.ВидОповещения);
								
								Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
									СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
									СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
									СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
								ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
									СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения * 7;
								КонецЕсли;
								
								ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,
									 12)), СтруктураДлительности, ,
									 Неопределено);
								
								МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
								МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60 * 60 * 24 * 7);
								МенеджерЗаписи.Записать();
							Иначе
								МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
								МенеджерЗаписи.Записать();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации("Регламентное оповещение по SMS", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Закончено регламентное оповещение по SMS';en='The regulated notification on SMS are finish'"));
		
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьЗаполнитьСообщение(Выборка)
	
	АвторСообщения = Неопределено;
	Если ЗначениеЗаполнено(Выборка.Предмет)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка.Предмет, "Автор") Тогда
			АвторСообщения = Выборка.Предмет.Автор;
	КонецЕсли;
	
	НовоеСообщение = Документы.СообщениеSMS.СоздатьДокумент();
	
	НовоеСообщение.Дата 					= ТекущаяДатаСеанса();
	НовоеСообщение.ДатаКогдаОтправить		= ТекущаяДатаСеанса();
	НовоеСообщение.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовоеСообщение.Состояние				= Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
	Иначе
		НовоеСообщение.Тема					= Выборка.Тема;
	КонецЕсли;
	
	Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
	И Не Выборка.Предмет.БизнесПроцесс = Неопределено
	И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
		НовоеСообщение.ВзаимодействиеОснование	= Выборка.Предмет.БизнесПроцесс.Интерес;
	Иначе
		НовоеСообщение.ВзаимодействиеОснование	= Выборка.Предмет;
	КонецЕсли;
	
	Если НЕ АвторСообщения = Неопределено Тогда
		НовоеСообщение.Автор				= АвторСообщения;
		НовоеСообщение.Ответственный		= АвторСообщения;
	КонецЕсли;
	
	НовоеСообщение.SMS4B_ТипСообщения 		= ПредопределенноеЗначение("Перечисление.SMS4B_ТипыСообщений.Исходящее");
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПровайдерSMS = НастройкиОтправки.Провайдер;
	Если ПровайдерSMS = Перечисления.ПровайдерыSMS.SMS4B Тогда
		
		НастройкиСервиса = SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса();
		
		НовоеСообщение.SMS4B_ИмяОтправителя	= НастройкиОтправки.ИмяОтправителя;
		НовоеСообщение.SMS4B_ИспользоватьПериодЗапрета	= Константы.SMS4B_ИспользоватьПериодЗапретаОтправки.Получить();
		
		Если НовоеСообщение.SMS4B_ИспользоватьПериодЗапрета Тогда
			НовоеСообщение.SMS4B_НачалоПериодаЗапрета	= НастройкиСервиса.ПериодЗапрета.ДатаНачала;
			НовоеСообщение.SMS4B_КонецПериодаЗапрета	= НастройкиСервиса.ПериодЗапрета.ДатаОкончания;
		КонецЕсли;
		
		Если НастройкиСервиса.СрокЖизниСообщений = 0 Тогда
			НовоеСообщение.SMS4B_ФлагАктуальность	= Ложь;
		Иначе
			НовоеСообщение.SMS4B_ФлагАктуальность	= Истина;
			НовоеСообщение.ДатаАктуальностиОтправки	= НовоеСообщение.ДатаКогдаОтправить 
				+ (НастройкиСервиса.СрокЖизниСообщений * 3600);
		КонецЕсли;
	КонецЕсли;
	
	НовоеСообщение.ТекстСообщения			= Выборка.Содержание;
	
	Получатель = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник(Выборка.Получатель);
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = Выборка.Получатель;
	КонецЕсли;
	СписокТелефонов							= ПолучитьСписокНомеровТелефоновКонтрагента(Получатель);
	НомерПолучателя							= SMS4B_ОтправкаSMS.ФорматироватьНомер(СписокТелефонов[0].Значение);

	СтрокаПолучателя						= НовоеСообщение.Адресаты.Добавить();
	СтрокаПолучателя.Контакт				= Получатель;
	СтрокаПолучателя.ПредставлениеКонтакта	= Получатель.Наименование;
	СтрокаПолучателя.КакСвязаться			= СписокТелефонов[0].Представление;
	СтрокаПолучателя.НомерДляОтправки		= НомерПолучателя;
	Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
		НовоеСообщение.ТекстСообщения		= ПолучитьТекстСообщенияПоШаблону(Выборка.Шаблон, Получатель, Выборка.Предмет);
	КонецЕсли;
	
	Взаимодействия.УстановитьСостояниеИсходящееДокументСообщениеSMS(НовоеСообщение);
	
	Возврат НовоеСообщение;
	
КонецФункции

// Функция возвращает список номеров телефонов получателя.
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель.
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов.
//
Функция ПолучитьСписокНомеровТелефоновКонтрагента(Получатель)
	ТаблицаКЛ = Новый ТаблицаЗначений;
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель, ,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		КонтактныеЛицаКонтрагента = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Получатель);
		Если КонтактныеЛицаКонтрагента.Количество() > 0 Тогда
			КонтактныеЛицаМассив = КонтактныеЛицаКонтрагента.ВыгрузитьКолонку("КонтактноеЛицо");
			ТаблицаКЛ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта( ,
				 КонтактныеЛицаМассив,
				 Перечисления.ТипыКонтактнойИнформации.Телефон);
		Иначе
			ТаблицаКЛ = Новый ТаблицаЗначений;
		КонецЕсли;	
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(, Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаКИ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
			Продолжить;
		КонецЕсли;
		НомерТелефона = SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если СтрНайти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого Строка Из ТаблицаКЛ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
			Продолжить;
		КонецЕсли;
		НомерТелефона = SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если СтрНайти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // ПолучитьСписокНомеровТелефоновКонтрагента()

Функция ПолучитьТекстСообщенияПоШаблону(Шаблон, Получатель, Предмет = Неопределено)
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.СообщениеSMS")));
	
	Если Шаблон.CRM_ШаблонОповещения И ЗначениеЗаполнено(Предмет)
		 И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ЗадачаСсылка.ЗадачаИсполнителя")), , , , ТаблицаАвтотекста.Количество());
	КонецЕсли;
	
	РедактируемыйТекст = Шаблон.Содержание;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если СтрНайти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			СтруктураАвтотекста = Новый Структура;
			СтруктураАвтотекста.Вставить("Тэг",			СтрокаАвтотекста.Тэг);
			СтруктураАвтотекста.Вставить("Действие",	СтрокаАвтотекста.Действие);
			Если Шаблон.CRM_ШаблонОповещения И ЗначениеЗаполнено(Предмет)
				 И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста,
					 Новый Структура("Получатель,Задача", Получатель,
					 Предмет));
			Иначе
				ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста, Получатель);
			КонецЕсли;
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции

#КонецОбласти

#Область ОповещенияПоЭлектроннойПочте

Процедура ОтправкаОповещенийЭлектроннойПочтой() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийПоЭлектроннойПочте);

	// Обработка записей регистра оповещений с последующим созданием писем.
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	ИспользоватьОповещенияЭлектроннаяПочта = Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	Если НЕ ИспользоватьОповещенияЭлектроннаяПочта Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьДляОтправки = Константы.CRM_УчетнаяЗаписьОповещений.Получить();
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьДляОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОповещения", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(CRM_Оповещения.Получатель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Получатель,
			|	CRM_Оповещения.Предмет,
			|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
			|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
			|	CRM_Оповещения.Канал КАК Канал,
			|	CRM_Оповещения.ДатаАктуальности,
			|	CRM_Оповещения.Содержание,
			|	CRM_Оповещения.СрокОповещения,
			|	CRM_Оповещения.Периодичность,
			|	CRM_Оповещения.Тема,
			|	CRM_Оповещения.Документ,
			|	CRM_Оповещения.Шаблон,
			|	CRM_Оповещения.Взаимодействие
			|ИЗ
			|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
			|ГДЕ
			|	CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
			|	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Канал,
			|	ВидОповещения,
			|	ДатаОповещения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато регламентное оповещение по E-Mail';en='Regular notification by email has begun'"));
	
	Пока Выборка.Следующий() Цикл
		
		// Если Дата актуальности меньше НачалоПериода, то удаляем запись регистра.
		Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= НачалоПериода) Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Получатель		= Выборка.Получатель;
			МенеджерЗаписи.Предмет			= Выборка.Предмет;
			МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
			МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Канал			= Выборка.Канал;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
					СтруктураДлительности = Новый Структура();
					СтруктураДлительности.Вставить("Дней"	, 0);
					СтруктураДлительности.Вставить("Часов"	, 0);
					СтруктураДлительности.Вставить("Минут"	, 0);
					СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
					СтруктураДлительности.Вставить("ВидОповещения"		, МенеджерЗаписи.ВидОповещения);
					
					Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
						СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
						СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения * 7;
					КонецЕсли;
					
					ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,
						 12)), СтруктураДлительности, ,
						 Неопределено);
					
					МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
					МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60 * 60 * 24 * 7);
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		// Если Дата актуальности меньше текущей даты, то уже нет смысла отправлять.
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Документ)
			 И НЕ (Выборка.ДатаАктуальности = Дата("00010101"))
			 И (Выборка.ДатаАктуальности <= ТекущаяДатаСеанса()) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
			// получим емайл получателя
			Если НЕ ЗначениеЗаполнено(Выборка.Получатель) Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Получатель = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник(Выборка.Получатель);
				Если Не ЗначениеЗаполнено(Получатель) Тогда
					Получатель = Выборка.Получатель;
				КонецЕсли;
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Получатель,
					 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Выборка.Получатель,
					 Неопределено, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
					 Неопределено);
				
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Выборка.Получатель.Владелец,
					 Выборка.Получатель, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
					 Неопределено);
				
			КонецЕсли;
			
			// Если емайл получателя нет, то продолжим.
			Если Таб.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Адресаты = Новый Массив;
			
			// Нам нужны адреса, у которых стоит признак, что их можно использовать для оповещений
			// выбираем все адреса, отвечающие этому требованию.
			Для Каждого СтрокаТаб Из Таб Цикл
				Если СтрокаТаб.Вид.CRM_ИспользоватьДляОповещений Тогда
					Адресаты.Добавить(Новый Структура("Адрес,Представление,Контакт", СтрокаТаб.АдресЭП,
						 СтрокаТаб.Представление,
						 СтрокаТаб.Ссылка));
				КонецЕсли;
			КонецЦикла;
			
			// Если таких адресов не нашлось, то не отправляем.
			Если Адресаты.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполняем письмо по выбранному шаблону
			Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
				
				ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса = Ложь;
				ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
				
				ТекстHTML = "";
				// BSLLS:UnusedLocalVariable-off
				Текст = "";
				// BSLLS:UnusedLocalVariable-on
				
				СтруктураВложений		= Новый Структура;
				
				ТаблицаСоответствийИменВложенийИдентификаторам = Новый ТаблицаЗначений;
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИмяФайла");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("ИдентификаторФайлаДляHTML");
				ТаблицаСоответствийИменВложенийИдентификаторам.Колонки.Добавить("Картинка");
				
				ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Выборка.Шаблон,
					Выборка.Шаблон.Текст, СтруктураВложений);
				Если Выборка.Шаблон.ШаблонОповещения И ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					ЗаполнитьАвтотекст(Адресаты, ТекстHTML, Выборка.Предмет);
				Иначе
					ЗаполнитьАвтотекст(Адресаты, ТекстHTML);
				КонецЕсли;
				
				Для Каждого Вложение Из СтруктураВложений Цикл
					
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					НоваяСтрока.ИмяФайла = Вложение.Ключ;
					НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
					НоваяСтрока.Картинка = Вложение.Значение;
					
				КонецЦикла;
				
				Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
					
					ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
					Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
					ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
					ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
					
				КонецЕсли;
				
				Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
					ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
					Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстHTML);
				КонецЕсли;
				
				// Заполним параметры письма и отправим его.
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("УчетнаяЗапись",	УчетнаяЗаписьДляОтправки);
				ПараметрыПисьма.Вставить("Кому",			Адресаты);
				ПараметрыПисьма.Вставить("Тема",			Выборка.Шаблон.Тема);
				ПараметрыПисьма.Вставить("Тело",			ТекстHTML);
				ПараметрыПисьма.Вставить("Кодировка",		"utf-8");
				ПараметрыПисьма.Вставить("ТипТекста",		Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
				ПараметрыПисьма.Вставить("Важность",	ВажностьИнтернетПочтовогоСообщения.Обычная);
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И Не Выборка.Предмет.БизнесПроцесс = Неопределено
				И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
					ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса = Истина;
					ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет.БизнесПроцесс.Интерес);
				Иначе
					ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет);
				КонецЕсли;
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗаписьДляОтправки, ПараметрыПисьма);
				
				Вложения = Новый ТаблицаЗначений;
				Вложения.Колонки.Добавить("Ссылка");
				Вложения.Колонки.Добавить("ИмяФайла");
				Вложения.Колонки.Добавить("ИндексКартинки");
				Вложения.Колонки.Добавить("Размер");
				Вложения.Колонки.Добавить("Удалять");
				Вложения.Колонки.Добавить("Расположение");
				Вложения.Колонки.Добавить("ИмяФайлаНаКомпьютере");
				Вложения.Колонки.Добавить("РазмерСтрокой");
				Вложения.Колонки.Добавить("РазмерПредставление");
				Вложения.Колонки.Добавить("ПодписанЭП");
				Вложения.Колонки.Добавить("ИДФайлаЭлектронногоПисьма");
				
				табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Выборка.Шаблон, Истина);
				
				Для Каждого Стр Из табВложения Цикл
					Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
						новСтр = Вложения.Добавить();
						новСтр.Ссылка								= Стр.Ссылка;
						новСтр.ИмяФайла								= Стр.ИмяФайла;
						новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
						новСтр.Размер								= Стр.Размер;
						РазмерВложения								= Цел(новСтр.Размер / 1024);
						новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) 
							+ " байт");
						новСтр.РазмерПредставление					= Стр.РазмерПредставление;
						новСтр.Расположение							= 1;
						новСтр.ИДФайлаЭлектронногоПисьма	= "#";
					КонецЕсли;
				КонецЦикла;
				
				Если Вложения.Количество() > 0 Тогда
					НовоеЭлектронноеПисьмо.ЕстьВложения = Истина;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И Не Выборка.Предмет.БизнесПроцесс = Неопределено
				И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
					Строка200 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
					Строка11 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
					ОписаниеДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
					
					ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
					
					ТаблицаИнтересов = Новый ТаблицаЗначений;
					ТаблицаИнтересов.Колонки.Добавить("Дата"				, ОписаниеДата);
					ТаблицаИнтересов.Колонки.Добавить("Номер"				, Строка11);
					ТаблицаИнтересов.Колонки.Добавить("Тема"				, Строка200);
					ТаблицаИнтересов.Колонки.Добавить("Партнер"				, Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
					ТаблицаИнтересов.Колонки.Добавить("Ответственный"		, Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
					ТаблицаИнтересов.Колонки.Добавить("Подразделение"		, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
					ТаблицаИнтересов.Колонки.Добавить("Организация"			, Новый ОписаниеТипов("СправочникСсылка.Организации"));
					ТаблицаИнтересов.Колонки.Добавить("Ссылка"				, Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес"));
					ТаблицаИнтересов.Колонки.Добавить("СостояниеИнтереса"	,
						 Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияИнтересов"));
					ТаблицаИнтересов.Колонки.Добавить("ВведенНаОсновании"	, ОписаниеТипаБулево);
					ТаблицаИнтересов.Колонки.Добавить("ОсновнойИнтерес"		, ОписаниеТипаБулево);
					
					НоваяСтрока = ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Предмет.БизнесПроцесс.Интерес);
					НоваяСтрока.ВведенНаОсновании = Истина;
					
					НовоеЭлектронноеПисьмо.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаИнтересов);
				КонецЕсли;
				
				Попытка
					НовоеЭлектронноеПисьмо.Записать();
					
					Если НовоеЭлектронноеПисьмо.ЕстьВложения Тогда
						Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
							Если НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = ""
								 И НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "#" Тогда
								Продолжить;
							КонецЕсли;
							
							CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
							НовоеЭлектронноеПисьмо.Ссылка, СтрокаТаблицыВложений.Ссылка, Новый УникальныйИдентификатор());
						КонецЦикла;
					КонецЕсли;
					
					Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
						
						ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." 
							+ Вложение.Картинка.Формат();
						
						ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
						АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
						
						ПараметрыВложения = Новый Структура;
						ПараметрыВложения.Вставить("ИмяФайла", ИмяФайлаВложения);
						ПараметрыВложения.Вставить("Размер", ДвоичныеДанныеКартинки.Размер());
						
						ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
						НовоеЭлектронноеПисьмо.Ссылка,
						АдресКартинкиВоВременномХранилище,
						ПараметрыВложения);
						
						Если ПрисоединенныйФайл <> Неопределено Тогда
							ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
							ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
							ПрисоединенныйФайлОбъект.Записать();
						КонецЕсли;
					КонецЦикла;
					
					Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(НовоеЭлектронноеПисьмо.УчетнаяЗапись, "Исходящие");
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Выборка.Предмет);
					CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, Папка, Ложь, Ложь);
					
					// Добавим этот документ в запись регистра.
					МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Получатель		= Выборка.Получатель;
					МенеджерЗаписи.Предмет			= Выборка.Предмет;
					МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
					МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
					МенеджерЗаписи.Канал			= Выборка.Канал;
					МенеджерЗаписи.Прочитать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеЭлектронноеПисьмо.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
					Если ТребуетсяДобавитьЗаписьОбъектаБизнесПроцесса Тогда
						Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						Набор.Отбор.БизнесПроцесс.Установить(Выборка.Предмет.БизнесПроцесс);
						Набор.Отбор.Объект.Установить(НовоеЭлектронноеПисьмо.Ссылка);
						Набор.Прочитать();
						Набор.Очистить();
						Набор.Записать();
						
						ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						ЗаписьРегистра.БизнесПроцесс	= Выборка.Предмет.БизнесПроцесс;
						ЗаписьРегистра.Задача			= Выборка.Предмет;
						ЗаписьРегистра.ТочкаМаршрута	= Выборка.Предмет.CRM_ТочкаМаршрута;
						ЗаписьРегистра.Объект			= НовоеЭлектронноеПисьмо.Ссылка;
						ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
						ЗаписьРегистра.ВидОбъекта		=
							CRM_ВоронкиПродажПовтИсп.ПолучитьСсылкуПВХВидыОбъектовБизнесПроцессовПоТипу(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
						ЗаписьРегистра.Записать();
						
						Если ЗначениеЗаполнено(Выборка.Взаимодействие) Тогда
							CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Выборка.Взаимодействие, НовоеЭлектронноеПисьмо.Ссылка);
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			Иначе
				// Сформируем тему и текст письма.
				Если Выборка.Тема = "" Тогда
					СтруктураТекста = СформироватьТемуПисьма(Выборка.Предмет, Выборка.ВидОповещения);
				КонецЕсли;
				
				ФДок = Новый ФорматированныйДокумент;
				ФДок.Добавить(Выборка.Содержание);
				Если СтрНайти(Выборка.Содержание, "<html>") > 0 Тогда
					ТекстHTML = Выборка.Содержание;
				Иначе
					ТекстHTML = "";
					Вложение = "";
					ФДок.ПолучитьHTML(ТекстHTML, Вложение);
				КонецЕсли;
				
				// Заполним параметры письма и отправим его.
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("УчетнаяЗапись",	УчетнаяЗаписьДляОтправки);
				ПараметрыПисьма.Вставить("Кому",			Адресаты);
				ПараметрыПисьма.Вставить("Тема",			?(НЕ Выборка.Тема = "", Выборка.Тема, СтруктураТекста.Тема));
				ПараметрыПисьма.Вставить("Тело",			ТекстHTML);
				ПараметрыПисьма.Вставить("Кодировка",		"utf-8");
				ПараметрыПисьма.Вставить("ТипТекста",		Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
				ПараметрыПисьма.Вставить("Предмет",			Выборка.Предмет);
				Попытка
					ПараметрыПисьма.Вставить("Важность",	УправлениеЭлектроннойПочтой.ПолучитьВажность(Выборка.Предмет.Важность));
				Исключение
					ПараметрыПисьма.Вставить("Важность",	ВажностьИнтернетПочтовогоСообщения.Обычная);
				КонецПопытки;
				
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗаписьДляОтправки, ПараметрыПисьма);
				
				Попытка
					НовоеЭлектронноеПисьмо.Записать();
					
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Выборка.Предмет);
					Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(НовоеЭлектронноеПисьмо.УчетнаяЗапись, "Исходящие");
					CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, Папка, Ложь, Ложь);
					
					// Добавим этот документ в запись регистра.
					МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Получатель		= Выборка.Получатель;
					МенеджерЗаписи.Предмет			= Выборка.Предмет;
					МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
					МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
					МенеджерЗаписи.Канал			= Выборка.Канал;
					МенеджерЗаписи.Прочитать();
					
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Документ = НовоеЭлектронноеПисьмо.Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_Оповещения.Документ.УчетнаяЗапись КАК УчетнаяЗапись,
	|	CRM_Оповещения.Документ.Автор КАК Автор,
	|	CRM_Оповещения.Документ.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(CRM_НеотправленныеПисьма.Итерация, 0) КАК Итерация,
	|	CRM_Оповещения.Получатель КАК Получатель,
	|	CRM_Оповещения.Предмет КАК Предмет,
	|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	|	CRM_Оповещения.Канал КАК Канал
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеотправленныеПисьма
	|		ПО CRM_Оповещения.Документ = CRM_НеотправленныеПисьма.Рассылка
	|ГДЕ
	|	CRM_Оповещения.Документ ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
	|	И НЕ CRM_Оповещения.Документ = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)
	|	И НЕ CRM_Оповещения.Документ.ПометкаУдаления
	|	И CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
	|	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|	И CRM_Оповещения.Документ.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|ИТОГИ ПО
	|	УчетнаяЗапись,
	|	Автор";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивНеотправленныхПисемПоУчетнымЗаписям = Новый Массив;
	СервисРассылки = Константы.CRM_СервисРассылокОповещенийПоУмолчанию.Получить();
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Если СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
			Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
			
			Попытка
				Соединение = Новый ИнтернетПочта;
				Соединение.Подключиться(Профиль);
			Исключение
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Во время подключения к учетной записи %1 произошла ошибка"
"%2';en='An error occurred when connecting to account %1"
"%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ВыборкаУчетныеЗаписи.УчетнаяЗапись, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка, , ,
				                         ТекстСообщенияОбОшибке);
				
				МассивНеотправленныхПисемПоАвторам = Новый Массив;
				// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
				// создаем запись в РС CRM_НеОтправленныеПисьма.
				ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоАвторам.Следующий() Цикл
					
					МассивНеотправленныхПисем = Новый Массив;
					ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						Если ВыборкаПисьма.Итерация > 1 Тогда
							МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
						Иначе
							CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка,
								 ТекстСообщенияОбОшибке);
						КонецЕсли;
					КонецЦикла;
					
					Если МассивНеотправленныхПисем.Количество() > 0 Тогда
						МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",
							 ВыборкаПоАвторам.Автор,
							 МассивНеотправленныхПисем));
					КонецЕсли;
				КонецЦикла;
				
				Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
					МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",
						 ВыборкаУчетныеЗаписи.УчетнаяЗапись,
						 МассивНеотправленныхПисемПоАвторам));
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(СервисРассылки) Тогда
			НастройкиСервиса = CRM_ИнтеграцияССервисамиРассылок.НастройкиСервиса();
		КонецЕсли;
		
		МассивНеотправленныхПисемПоАвторам = Новый Массив;
		ВыборкаПоАвторам = ВыборкаУчетныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАвторам.Следующий() Цикл
			
			МассивНеотправленныхПисем = Новый Массив;
			ВыборкаПисьма = ВыборкаПоАвторам.Выбрать();
			Пока ВыборкаПисьма.Следующий() Цикл
				// Попытаемся отправить письмо.
				ПисьмоОбъект		= ВыборкаПисьма.Ссылка.ПолучитьОбъект();
				Попытка
					ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
					Если СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
						ИдентификаторПисьма	= CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
					ИначеЕсли ЗначениеЗаполнено(СервисРассылки) Тогда
						ТекстОшибки = "";
						ИдентификаторПисьма = CRM_ИнтеграцияССервисамиРассылок.ВыполнитьОтправкуПисьма(ПисьмоОбъект,
							 ПараметрыПисьма, НастройкиСервиса,
							 ТекстОшибки);
						Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
							Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = ИдентификаторПисьма;
								ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
								ЗаписьСтатуса.Записать();
								ВызватьИсключение ТекстОшибки;
							Иначе
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
								ЗаписьСтатуса.Записать();
							КонецЕсли;
						Иначе
							ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
							ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
							ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
							ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
							ЗаписьСтатуса.Записать();
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
					КонецЕсли;
				Исключение
					
					Если ВыборкаПисьма.Итерация > 1 Тогда
						МассивНеотправленныхПисем.Добавить(ВыборкаПисьма.Ссылка);
					Иначе
						CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка,
							 ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail",
						УровеньЖурналаРегистрации.Ошибка, , ,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					Продолжить;
				КонецПопытки;
					
				// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
				// если есть, то удалим.
				CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ПисьмоОбъект.Ссылка);
				
				ПисьмоОбъект.ИдентификаторСообщения	= ИдентификаторПисьма;
				Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
					ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
				КонецЕсли;
				ПисьмоОбъект.СтатусПисьма			=
					ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
				ПисьмоОбъект.ДатаОтправления		= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Отправленные");
				CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
				
				// Если удачно все отправили, то удаляем запись регистра оповещений.
				МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Получатель		= ВыборкаПисьма.Получатель;
				МенеджерЗаписи.Предмет			= ВыборкаПисьма.Предмет;
				МенеджерЗаписи.ДатаОповещения	= ВыборкаПисьма.ДатаОповещения;
				МенеджерЗаписи.ВидОповещения	= ВыборкаПисьма.ВидОповещения;
				МенеджерЗаписи.Канал			= ВыборкаПисьма.Канал;
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					// Для напоминаний о ДР просто переносим дату оповещения на один год.
					Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
						
						СтруктураДлительности = Новый Структура();
						СтруктураДлительности.Вставить("Дней"	, 0);
						СтруктураДлительности.Вставить("Часов"	, 0);
						СтруктураДлительности.Вставить("Минут"	, 0);
						СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
						СтруктураДлительности.Вставить("ВидОповещения"		, МенеджерЗаписи.ВидОповещения);
						
						Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
							СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
							СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
						ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
							СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения * 7;
						КонецЕсли;
						
						ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,
							 12)), СтруктураДлительности, ,
							 Неопределено);
						
						МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
						МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60 * 60 * 24 * 7);
						МенеджерЗаписи.Записать();
					// Для записи устанавливаем ДатуАктуальности как ТекущуюДату и при следующих выполнениях
					// рег. задания она будет удалена или пропущена.
					Иначе
						МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
						МенеджерЗаписи.Записать();
						// МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если МассивНеотправленныхПисем.Количество() > 0 Тогда
				МассивНеотправленныхПисемПоАвторам.Добавить(Новый Структура("Автор,Письма",
					 ВыборкаПоАвторам.Автор,
					 МассивНеотправленныхПисем));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивНеотправленныхПисемПоАвторам.Количество() > 0 Тогда
			МассивНеотправленныхПисемПоУчетнымЗаписям.Добавить(Новый Структура("УчетнаяЗапись,Письма",
				 ВыборкаУчетныеЗаписи.УчетнаяЗапись,
				 МассивНеотправленныхПисемПоАвторам));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНеотправленныхПисемПоУчетнымЗаписям.Количество() > 0 Тогда
		CRM_НапоминанияСервер.ДобавитьНапоминанияОНеотправленныхПисьмах(МассивНеотправленныхПисемПоУчетнымЗаписям);
		
		Для Каждого УчетнаяЗаписьИПисьма Из МассивНеотправленныхПисемПоУчетнымЗаписям Цикл
			Для Каждого АвторИПисьма Из УчетнаяЗаписьИПисьма.Письма Цикл
				Для Каждого Письмо Из АвторИПисьма.Письма Цикл
					CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(Письмо);
					
					ПисьмоОбъект				= Письмо.ПолучитьОбъект();
					ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
					ПисьмоОбъект.Записать();
					
					Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Черновики");
					CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение по E-Mail", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Закончено регламентное оповещение по E-Mail'"));
			
КонецПроцедуры

Функция СформироватьТемуПисьма(Предмет, ВидОповещения)
	
	Тема = "";
	ТекстПисьма = "";
	
	Если ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
		Тема = НСтр("ru='Оповещение о запланированном событии';en='Notification of a scheduled event'");
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ЗавершениеБизнесПроцесса Тогда
		
		Тема = НСтр("ru='Завершен бизнес-процесс';en='Business process is completed'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах Тогда
		
		Тема = НСтр("ru='Новая задача';en='New task'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах Тогда
		
		Тема = НСтр("ru='Переадресована задача/событие';en='Task / event redirected'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
		
		Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			Тема = НСтр("ru='Истек срок выполнения задачи';en='Expired task execution'");
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			
			Тема = НСтр("ru='Истек срок выполнения взаимодействия';en='Expired interaction execution'");
			
		КонецЕсли;
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Тогда
		
		Тема = НСтр("ru='Истек срок исполнения контрольной точки';en='The check point execution time has expired'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		
		Тема = НСтр("ru='Новый документ по партнерам';en='New document on partners'");
		
	ИначеЕсли ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		
		Тема = НСтр("ru='Новый документ по проекту';en='New Project Document'");
		
	КонецЕсли;
	
	Возврат Новый Структура("Тема, ТекстПисьма", Тема, ТекстПисьма);
	
КонецФункции

Функция СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(УчетнаяЗапись, ПараметрыПисьма)
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
	НовоеЭлектронноеПисьмо.Дата						= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеЭлектронноеПисьмо.УчетнаяЗапись			= ПараметрыПисьма.УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(НовоеЭлектронноеПисьмо.УчетнаяЗапись.ИмяПользователя,
		 НовоеЭлектронноеПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты,
		 "");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыПисьма, "Предмет")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыПисьма.Предмет, "Автор") Тогда
		НовоеЭлектронноеПисьмо.Ответственный			= ПараметрыПисьма.Предмет.Автор;
		НовоеЭлектронноеПисьмо.Автор					= ПараметрыПисьма.Предмет.Автор;
	КонецЕсли;

	НовоеЭлектронноеПисьмо.Важность					= ПараметрыПисьма.Важность;
	НовоеЭлектронноеПисьмо.Тема						= ПараметрыПисьма.Тема;
	НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	НовоеЭлектронноеПисьмо.Кодировка				= ПараметрыПисьма.Кодировка;
	НовоеЭлектронноеПисьмо.ТипТекста				= ПараметрыПисьма.ТипТекста;
	НовоеЭлектронноеПисьмо.Текст					= ПараметрыПисьма.Тело;
	НовоеЭлектронноеПисьмо.ТекстHTML				= ПараметрыПисьма.Тело;
	
	СписокПолучателейПисьма = "";
	
	Для Каждого СтруктураПолучателя Из ПараметрыПисьма.Кому Цикл
		ПредставлениеПолучателя					= Строка(СтруктураПолучателя.Контакт) + " <" + СтруктураПолучателя.Адрес + ">";
		СписокПолучателейПисьма					= СписокПолучателейПисьма + ?(СписокПолучателейПисьма = "", "", ",") 
			+ ПредставлениеПолучателя;
		
		НоваяСтрокаПолучателей					= НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
		НоваяСтрокаПолучателей.Адрес			= СтруктураПолучателя.Адрес;
		НоваяСтрокаПолучателей.Представление	= ПредставлениеПолучателя;
		НоваяСтрокаПолучателей.Контакт			= СтруктураПолучателя.Контакт;
	КонецЦикла;
	
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СписокПолучателейПисьма;
	
	Возврат НовоеЭлектронноеПисьмо;
	
КонецФункции

Процедура ЗаполнитьАвтотекст(ПолучателиПисьма, ТекстСТегами, Предмет = Неопределено)
	
	Если ПолучателиПисьма.Количество() > 0 Тогда
		
		// заполним автотекст
		СтруктураЗаполненияАвтотекста = Новый Структура;
		СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		
		Клиент = ПолучателиПисьма[0].Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если ЗначениеЗаполнено(Клиент.ФизическоеЛицо) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Клиент.ФизическоеЛицо;
				Иначе					
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
				
				Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Клиент)
					 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент, "Наименование") Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				КонецЕсли;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Адрес));
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаАвтотекста = Новый ТаблицаЗначений;
		
		ТаблицаАвтотекста.Колонки.Добавить("Тэг");
		ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("Действие");
		
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")));
		Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ЗадачаСсылка.ЗадачаИсполнителя")), , , , , ТаблицаАвтотекста.Количество());
		КонецЕсли;
		
		Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
			Если СтрНайти(ТекстСТегами, СтрокаАвтотекста.Тэг) > 0 Тогда
				Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					СтруктураЗаполненияАвтотекста.Вставить("Задача", Предмет);
					ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				Иначе
					ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				КонецЕсли;
				ТекстСТегами	= СтрЗаменить(ТекстСТегами, СтрокаАвтотекста.Тэг, ЗначениеТэга);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОповещенияПоSMS

Процедура ОтправкаОповещенийВМессенджер() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОтправкаОповещенийВМессенджер);
	
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обработка записей регистра оповещений с последующим созданием СМС.
	ИспользоватьОповещенияМессенджер = Константы.CRM_ИспользоватьОповещенияМессенджер.Получить();
	Если НЕ ИспользоватьОповещенияМессенджер Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьДляОтправки = Константы.CRM_УчетнаяЗаписьМессенджераОповещений.Получить();
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьДляОтправки) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ПолучитьНачалоПериодаПоПериодичностиОповещений();
	
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение через мессенджер",
	УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru='Начато регламентное оповещение через мессенджер';en='The routine notification by messenger has begun'"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОповещения",	ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Оповещения.Получатель,
	|	CRM_Оповещения.Предмет,
	|	CRM_Оповещения.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Оповещения.ВидОповещения КАК ВидОповещения,
	|	CRM_Оповещения.Канал КАК Канал,
	|	CRM_Оповещения.ДатаАктуальности,
	|	CRM_Оповещения.Содержание,
	|	CRM_Оповещения.СрокОповещения,
	|	CRM_Оповещения.Периодичность,
	|	CRM_Оповещения.Документ,
	|	CRM_Оповещения.Тема,
	|	CRM_Оповещения.Шаблон,
	|	CRM_Оповещения.Взаимодействие
	|ИЗ
	|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
	|ГДЕ
	|	CRM_Оповещения.ДатаОповещения <= &ДатаОповещения
	|	И CRM_Оповещения.Канал = ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Канал,
	|	ВидОповещения,
	|	ДатаОповещения";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.CRM_Оповещения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Получатель		= Выборка.Получатель;
		МенеджерЗаписи.Предмет			= Выборка.Предмет;
		МенеджерЗаписи.ДатаОповещения	= Выборка.ДатаОповещения;
		МенеджерЗаписи.ВидОповещения	= Выборка.ВидОповещения;
		МенеджерЗаписи.Канал			= Выборка.Канал;
		МенеджерЗаписи.Прочитать();
		
		// Если Дата актуальности меньше НачалоПериода, то удаляем запись регистра.
		Если НЕ (Выборка.ДатаАктуальности = Дата("00010101")) И (Выборка.ДатаАктуальности <= НачалоПериода) Тогда
			Если МенеджерЗаписи.Выбран() Тогда
				Если МенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
					СтруктураДлительности = Новый Структура();
					СтруктураДлительности.Вставить("Дней"	, 0);
					СтруктураДлительности.Вставить("Часов"	, 0);
					СтруктураДлительности.Вставить("Минут"	, 0);
					СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Ложь);
					СтруктураДлительности.Вставить("ВидОповещения"		, МенеджерЗаписи.ВидОповещения);
					
					Если МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
						СтруктураДлительности.Минут = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
						СтруктураДлительности.Часов = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения;
					ИначеЕсли МенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
						СтруктураДлительности.Дней = МенеджерЗаписи.СрокОповещения * 7;
					КонецЕсли;
					
					ДатаОповещения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(МенеджерЗаписи.ДатаОповещения,
					12)), СтруктураДлительности, ,
					Неопределено);
					
					МенеджерЗаписи.ДатаОповещения	= ДатаОповещения;
					МенеджерЗаписи.ДатаАктуальности = ДатаОповещения + (60 * 60 * 24 * 7);
					МенеджерЗаписи.Записать();
				Иначе
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			// Если Дата актуальности меньше текущей даты, то уже нет смысла отправлять.
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Документ)
			И НЕ (Выборка.ДатаАктуальности = Дата("00010101"))
			И (Выборка.ДатаАктуальности <= ТекущаяДатаСеанса()) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если документа нет, то значит еще не отправляли смс.
		Если НЕ ЗначениеЗаполнено(Выборка.Документ) Тогда
			
			Попытка
				
				НовоеСообщение = СоздатьЗаполнитьСообщениеМессенджера(Выборка, УчетнаяЗаписьДляОтправки);
				Если НовоеСообщение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Документ = НовоеСообщение.Ссылка;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И Не Выборка.Предмет.БизнесПроцесс = Неопределено
					И ЗначениеЗаполнено(Выборка.Предмет.БизнесПроцесс.Интерес) Тогда
					Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
					Набор.Отбор.БизнесПроцесс.Установить(Выборка.Предмет.БизнесПроцесс);
					Набор.Отбор.Объект.Установить(НовоеСообщение.Ссылка);
					Набор.Прочитать();
					Набор.Очистить();
					Набор.Записать();
					
					ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.БизнесПроцесс	= Выборка.Предмет.БизнесПроцесс;
					ЗаписьРегистра.Задача			= Выборка.Предмет;
					ЗаписьРегистра.ТочкаМаршрута	= Выборка.Предмет.CRM_ТочкаМаршрута;
					ЗаписьРегистра.Объект			= НовоеСообщение.Ссылка;
					ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
					ЗаписьРегистра.ВидОбъекта		=
					CRM_ВоронкиПродажПовтИсп.ПолучитьСсылкуПВХВидыОбъектовБизнесПроцессовПоТипу(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
					ЗаписьРегистра.Записать();
					
					Если ЗначениеЗаполнено(Выборка.Взаимодействие) Тогда
						CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Выборка.Взаимодействие, НовоеСообщение.Ссылка);
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				ЗаписьЖурналаРегистрации("Регламентное оповещение в мессенджере",
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Регламентное оповещение через мессенджер", 
	УровеньЖурналаРегистрации.Информация, , ,
	НСтр("ru='Закончено регламентное оповещение через мессенджер';en='The regulated notification on messenger are finish'"));
	
	
КонецПроцедуры

Функция СоздатьЗаполнитьСообщениеМессенджера(Выборка, УчетнаяЗапись)
	
	АвторСообщения = Неопределено;
	Если ЗначениеЗаполнено(Выборка.Предмет)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка.Предмет, "Автор") Тогда
			АвторСообщения = Выборка.Предмет.Автор;
	КонецЕсли;
	
	Получатель = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник(Выборка.Получатель);
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = Выборка.Получатель;
	КонецЕсли;
	МессенджерыПолучателя = ПолучитьМессенджерыПолучателя(Получатель, УчетнаяЗапись);
	Если МессенджерыПолучателя.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДиалога = Новый Структура;
	СтруктураДиалога.Вставить("ID_Пользователя", МессенджерыПолучателя[0].Значение);
	СтруктураДиалога.Вставить("Группа", МессенджерыПолучателя[0].Значение);
	СтруктураДиалога.Вставить("ГруппаПредставление", МессенджерыПолучателя[0].Значение);
	СтруктураДиалога.Вставить("Контакт", Получатель);
	СтруктураДиалога.Вставить("КонтактПредставление", Строка(Получатель));
	СтруктураДиалога.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Если УчетнаяЗапись.ТипМессенджера = "WhatsApp" Тогда
		СтруктураДиалога.Вставить("ЭтоНомерТелефона", Истина);
	КонецЕсли;
	СтруктураДиалога.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	Диалог = Справочники.CRM_Диалоги.ПолучитьСлужебныйДиалог(СтруктураДиалога);
	
	СообщениеСсылка = CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(
		Выборка.Содержание,
		Диалог,
		Новый СписокЗначений);
		
	Возврат СообщениеСсылка;
	
КонецФункции

// Функция возвращает данные мессенджера получателя.
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель.
//
// Возвращаемое значение:
//	Строка	- Данные мессенджера.
//
Функция ПолучитьМессенджерыПолучателя(Получатель, УчетнаяЗапись)
	ТаблицаКЛ = Новый ТаблицаЗначений;
	ВидКИ = CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(УчетнаяЗапись, Получатель);
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель, , , ВидКИ);
		КонтактныеЛицаКонтрагента = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Получатель);
		Если КонтактныеЛицаКонтрагента.Количество() > 0 Тогда
			КонтактныеЛицаМассив = КонтактныеЛицаКонтрагента.ВыгрузитьКолонку("КонтактноеЛицо");
			ТаблицаКЛ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта( ,
				 КонтактныеЛицаМассив, ,
				 ВидКИ);
		Иначе
			ТаблицаКЛ = Новый ТаблицаЗначений;
		КонецЕсли;	
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(, Получатель, , ВидКИ);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, ВидКИ,, Ложь);
		ТаблицаКЛ = Новый ТаблицаЗначений;
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
		ТаблицаКЛ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаКИ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Представление = СтрЗаменить(SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление), "+", "");
		Иначе
			Представление = СокрЛП(СтрЗаменить(Строка.Представление,
				CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(УчетнаяЗапись), ""))
		КонецЕсли;
		СписокВозврата.Добавить(Представление, Представление + " (" + Строка.Вид + ")");
	КонецЦикла;
	Для Каждого Строка Из ТаблицаКЛ Цикл
		Если НЕ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Представление = СтрЗаменить(SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление), "+", "");
		Иначе
			Представление = СокрЛП(СтрЗаменить(Строка.Представление,
				CRM_РаботаСМессенджерамиСерверПовтИсп.НачалоАдресаСтраницыПользователя(УчетнаяЗапись), ""))
		КонецЕсли;
		СписокВозврата.Добавить(Представление, Представление + " (" + Строка.Вид + ")");
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // ПолучитьСписокНомеровТелефоновКонтрагента()

#КонецОбласти

#Область Общее

// Функция - Получить начало периода по периодичности оповещений
// 
// Возвращаемое значение:
//  Дата -  Начало периода периодичности оповещения.
//
Функция ПолучитьНачалоПериодаПоПериодичностиОповещений()
	
	ДатаАктуальностиОповещений = Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Получить();
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса()) - (24*60*60*ДатаАктуальностиОповещений);
	
	Возврат НачалоПериода;
	
КонецФункции

Функция ПолучитьДатуАктуальностиОповещения(ПараметрыОповещения)
	
	Если ПараметрыОповещения.Свойство("ДатаАктуальности") Тогда
		Возврат ПараметрыОповещения.ДатаАктуальности;
	КонецЕсли;
	
	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	ДнейАктуальности = Константы.CRM_СрокАктуальностиНапоминанийПоУмолчанию.Получить() + 1;
	
	МесяцевВГоду = 12;
	СекундВСутках = 24 * 60 * 60;
	
	// Запланированные события и дни рождения.
	ЭтоСобытие = ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач 
		Или ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях;
	
	Если ЭтоСобытие Тогда
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			
			ДатаАктуальности = ПараметрыОповещения.Предмет.ПлановаяДата;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("Структура") Тогда
			
			ДатаАктуальности = ПараметрыОповещения.Предмет.Дата;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
			
			ДатаАктуальности = ПараметрыОповещения.Предмет.Дата;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
				ДатаАктуальности = ПараметрыОповещения.Предмет.СрокИсполнения;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.СрокИсполнения) И ПараметрыОповещения.Предмет.CRM_Личная Тогда
					ДатаАктуальности = ПараметрыОповещения.Предмет.СрокИсполнения;
				Иначе
					ДатаАктуальности = КонецДня(ПолучитьДатуОповещения(ПараметрыОповещения));
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			ЕжегодныеСобытия = ПолучитьМассивЕжегодныхСобытийКлиента();
			Если ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях
				И ЕжегодныеСобытия.Найти(ПараметрыОповещения.ВидСобытия) = Неопределено Тогда
				ДатаСобытия = 
					ПараметрыОповещения.Предмет.CRM_КлючевыеСобытия.Найти(ПараметрыОповещения.ВидСобытия, "ВидСобытия").ДатаСобытия;
				КоличествоЛет = Год(ТекущаяДатаСеанса()) - Год(ДатаСобытия);
				ДатаАктуальности = ДобавитьМесяц(ПараметрыОповещения.ДатаСобытия, КоличествоЛет * МесяцевВГоду);
			Иначе
				КоличествоЛет = Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения);
				ДатаАктуальности = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения, КоличествоЛет * МесяцевВГоду);
			КонецЕсли;
			
			Если ДатаАктуальности < ТекущаяДатаСеанса() Тогда
				ДатаАктуальности = ДобавитьМесяц(ДатаАктуальности, МесяцевВГоду);
			КонецЕсли;
			
			ДатаАктуальности = ДатаАктуальности + (ДнейАктуальности * СекундВСутках);
			
		КонецЕсли;
		
		Возврат ДатаАктуальности;
		
	Иначе
		
		ДатаАктуальности = ДатаАктуальности + (ДнейАктуальности * СекундВСутках);
		
		Возврат ДатаАктуальности;
		
	КонецЕсли;
	
КонецФункции

// Функция формирует текст содержания оповещения по переданному виду оповещения
// и предмету.
//
Функция СформироватьТекстТемыИСодержанияОповещения(ПараметрыОповещения)
	
	ТекстТемы		= "";
	ТекстСодержания	= "";
	
	// Оповещение участников события о новом/измененном событии.
	Если ПараметрыОповещения.ВидОповещения = "ОповещениеУчастниковСобытия" Тогда
		
		ТемаТекстСодержания = СформироватьТекстОповещенияПоСобытию(ПараметрыОповещения);
		
		ТекстТемы		= ТемаТекстСодержания.Тема;
		ТекстСодержания	= ТемаТекстСодержания.Содержание;
		
	ИначеЕсли ПараметрыОповещения.ВидОповещения = "ПоступлениеОплаты" Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстТемы				= НСтр("ru='Поступила оплата от клиента'");
			
			ПредставлениеПартнера	= СокрЛП(?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное),
				 ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное,
				 ПараметрыОповещения.Предмет.Партнер.Наименование));
			ПредставлениеСчета		= НСтр("ru=' по документу Счет №'") + ПараметрыОповещения.Предмет.Номер 
				+ НСтр("ru=' от '") + Формат(ПараметрыОповещения.Предмет.Дата,
				 "ДФ=dd.MM.yyyy");
			ПредставлениеСуммы		= НСтр("ru=' по документу Счет №';en=' by document Invoice №'") 
				+ Формат(ПараметрыОповещения.СуммаОплаты, "ЧЦ=15; ЧДЦ=2") + " " 
				+ ПараметрыОповещения.Предмет.Валюта;
			
			ТекстСодержания			= НСтр("ru='Поступила оплата от клиента '") + ПредставлениеПартнера 
				+ ПредставлениеСуммы 
				+ ПредставлениеСчета;
		Иначе
			ТекстТемы				= НСтр("ru='Поступила оплата от клиента'");
			
			ПредставлениеПартнера	= СокрЛП(?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное),
				 ПараметрыОповещения.Предмет.Партнер.НаименованиеПолное,
				 ПараметрыОповещения.Предмет.Партнер.Наименование));
			ПредставлениеСчета		= НСтр("ru=' по документу Счет №'") + ПараметрыОповещения.Предмет.Номер 
				+ НСтр("ru=' от '") + Формат(ПараметрыОповещения.Предмет.Дата,
				 "ДФ=dd.MM.yyyy");
			ПредставлениеСуммы		= НСтр("ru=' по документу Счет №';en=' by document Invoice №'") 
				+ Формат(ПараметрыОповещения.СуммаОплаты, "ЧЦ=15; ЧДЦ=2") + " " 
				+ ПараметрыОповещения.Предмет.Валюта;
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет.Партнер);
			ПартнерНавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеПартнера);
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			СчетНавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСчета);
				
			ТекстСодержания = "
			|<p>" + НСтр("ru='Поступила оплата от клиента '") + "%1 " + ПредставлениеСуммы + "%2</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%1", ПартнерНавигационнаяСсылкаСтрокой);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%2", СчетНавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 1. Запланированные события
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ДатаНачала, 
					ПараметрыОповещения.Предмет.СрокИсполнения);
					
				Если ПараметрыОповещения.Предмет.CRM_Личная Тогда
					ТекстСодержания = НСтр("ru='Срок окончания задачи ""'") 
						+ Строка(ПараметрыОповещения.Предмет.Наименование) + """ " 
						+ ДатыСобытияТекстом.ДатаОкончания
						+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, " " + ДатыСобытияТекстом.ВремяОкончания, "");
				Иначе
					ТекстСодержания = НСтр("ru='Запланирована задача ""'") 
						+ Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru='"", начало в '")
						+ ДатыСобытияТекстом.ДатаНачала
						+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, ДатыСобытияТекстом.ВремяНачала, "")
						+ НСтр("ru=' Срок окончания:'") + " " 
						+ ДатыСобытияТекстом.ДатаОкончания
						+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, ДатыСобытияТекстом.ВремяОкончания, "");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				
				ВидСобытия = ПараметрыОповещения.Предмет.ВидВзаимодействия.ВидСобытия;
				СтароеЗначениеПлановойДаты = Неопределено;
				Если ПараметрыОповещения.Свойство("СтароеЗначениеПлановойДаты") Тогда
					СтароеЗначениеПлановойДаты = ПараметрыОповещения.СтароеЗначениеПлановойДаты;
				КонецЕсли;
				ТекстПоВидуСобытия = ТекстПоВидуСобытия(ВидСобытия, Не ЗначениеЗаполнено(СтароеЗначениеПлановойДаты));
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ПлановаяДата, 
					ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение, СтароеЗначениеПлановойДаты);
				
				ТекстСодержания = ТекстПоВидуСобытия + " """ 
					+ Строка(ПараметрыОповещения.Предмет.Тема) + """: "
					+ ДатыСобытияТекстом.ДатаНачала + НСтр("ru='с '") + ДатыСобытияТекстом.ВремяНачала
					+ НСтр("ru='до '") + ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
					+ ?(СтароеЗначениеПлановойДаты = Неопределено, "", 
						НСтр("ru=' (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
						+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")");
				
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ДатаНачала, 
					ПараметрыОповещения.Предмет.СрокИсполнения);
					
				ТекстТемы = НСтр("ru='Запланирована задача ""'") 
					+ Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru='"", начало в'") + " " 
					+ ДатыСобытияТекстом.ДатаНачала
					+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, ДатыСобытияТекстом.ВремяНачала, "");
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					Строка(ПараметрыОповещения.Предмет.Наименование));
					
				ТекстСодержания = "
				|<p>" + НСтр("ru='Запланирована задача'") + "</p>
				|<p>""%1" + НСтр("ru='"", начало в '") + ДатыСобытияТекстом.ДатаНачала
					+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, ДатыСобытияТекстом.ВремяНачала, "")
					+ НСтр("ru=' Срок окончания:'") + " " 
					+ ДатыСобытияТекстом.ДатаОкончания
					+ ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, ДатыСобытияТекстом.ВремяОкончания, "") + "</p>";
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
					 НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				
				ВидСобытия = ПараметрыОповещения.Предмет.ВидВзаимодействия.ВидСобытия;
				СтароеЗначениеПлановойДаты = Неопределено;
				Если ПараметрыОповещения.Свойство("СтароеЗначениеПлановойДаты") Тогда
					СтароеЗначениеПлановойДаты = ПараметрыОповещения.СтароеЗначениеПлановойДаты;
				КонецЕсли;
				ТекстПоВидуСобытия = ТекстПоВидуСобытия(ВидСобытия, Не ЗначениеЗаполнено(СтароеЗначениеПлановойДаты));
				
				ТекстТемы = ТекстПоВидуСобытия + " """ 
					+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
					+ """";
				
				ПредставлениеСобытия = Строка(ПараметрыОповещения.Предмет.Содержание) + НСтр("ru=' от '") 
					+ Формат(ПараметрыОповещения.Предмет.ПлановаяДата, "ДФ='дд.ММ.гг ЧЧ:мм'");
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСобытия);
					
				ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																											, Новый Структура("Телефон, Почта",
																											Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																											Справочники.ВидыКонтактнойИнформации.EmailПользователя));
				ТекстСодержания = "
				|<p>" + ТекстПоВидуСобытия + "</p>
				|<p>%1</p>";
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Партнер) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Клиент: '") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Партнер)) + "</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.КонтактноеЛицо) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Контактное лицо: '") + СокрЛП(Строка(ПараметрыОповещения.Предмет.КонтактноеЛицо)) + "</p>";
				КонецЕсли;
				
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ПлановаяДата, 
					ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение, СтароеЗначениеПлановойДаты);
				
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Когда: '") + ДатыСобытияТекстом.ДатаНачала + НСтр("ru='с '")
											+ ДатыСобытияТекстом.ВремяНачала + НСтр("ru='до '")
											+ ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
											+ ?(СтароеЗначениеПлановойДаты = Неопределено, "", 
												НСтр("ru=' (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
											+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")") + "</p>";
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Содержание) Тогда
					МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОповещения.Предмет.Содержание,
						 Символы.ПС);
					
					ПерваяСтрока = Истина;
					Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
					Если ПерваяСтрока Тогда
					ТекстСодержания = ТекстСодержания + "
					|<p>" + НСтр("ru='Описание: '") + СтрокаИзМассива + "</p>";
					ПерваяСтрока = Ложь;
					Иначе
					ТекстСодержания = ТекстСодержания + "
					|<p style='margin-left: 80pt'>" + СтрокаИзМассива + "</p>";
					КонецЕсли;
					КонецЦикла;
				
				Иначе
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Описание: '") + НСтр("ru='не указано'") + "</p>";
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Ответственный: '") + ПараметрыОповещения.Предмет.Ответственный + "</p>";
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 20pt'>E-mail: " + СокрЛП(ИнформацияОтветственного.Почта) + "</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 20pt'>Телефон: " + СокрЛП(ИнформацияОтветственного.Телефон) + "</p>";
				КонецЕсли;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
					 НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				
			КонецЕсли;
			
		КонецЕсли;
	// 2. Переадресация ответственного.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах Тогда
		
		ТипОбъекта = ПараметрыОповещения.Предмет.Метаданные().Синоним;
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Тема;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
		Иначе
			ТемаНаименование = "";
		КонецЕсли;
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			Если ПараметрыОповещения.Свойство("ДобавлениеСоисполнителя") Тогда
				ТекстСодержания = НСтр("ru='Добавлен в соисполнение:'");
			ИначеЕсли ПараметрыОповещения.Свойство("УдалениеСоисполнителя") Тогда
				ТекстСодержания = НСтр("ru='Удален из соисполнения:'");
			ИначеЕсли ТипОбъекта = "Взаимодействие" Тогда
				ТекстСодержания = НСтр("ru='Переадресовано'");
			ИначеЕсли ТипОбъекта = "Задача" Тогда
				ТекстСодержания = НСтр("ru='Переадресована'");
			Иначе
				ТекстСодержания = НСтр("ru='Переадресован'");
			КонецЕсли;
			ТекстСодержания = ТекстСодержания + " " + ТипОбъекта + ?(ТемаНаименование = "", "", " """ 
				+ ТемаНаименование + """") + НСтр("ru=' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
				 "ДФ='дд.ММ.гг ЧЧ:мм'");
			Если ПараметрыОповещения.Свойство("ДобавлениеСоисполнителя") Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru='Добавил'") + ": " 
					+ ПараметрыОповещения.ДобавлениеСоисполнителя.Автор + " " 
					+ Формат(ПараметрыОповещения.ДобавлениеСоисполнителя.Дата, "ДЛФ=DT");
			ИначеЕсли ПараметрыОповещения.Свойство("УдалениеСоисполнителя") Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru='Удалил'") + ": " 
					+ ПараметрыОповещения.УдалениеСоисполнителя.Автор + " " 
					+ Формат(ПараметрыОповещения.УдалениеСоисполнителя.Дата, "ДЛФ=DT");
			КонецЕсли;
		Иначе
			Если ТемаНаименование = "" Тогда
				ТемаНаименование = ТипОбъекта;
			КонецЕсли;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru=' от '") 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			Если ПараметрыОповещения.Свойство("ДобавлениеСоисполнителя") Тогда
				ТекстТемы = НСтр("ru='Добавлен в соисполнение'");
				ТекстСодержания = "<p>" + НСтр("ru='Добавлен в соисполнение: '") + ТипОбъекта + "</p>";
			ИначеЕсли ПараметрыОповещения.Свойство("УдалениеСоисполнителя") Тогда
				ТекстТемы = НСтр("ru='Удален из соисполнения'");
				ТекстСодержания = "<p>" + НСтр("ru='Удален из соисполнения: '") + ТипОбъекта + "</p>";
			Иначе
				Если ТипОбъекта = "Взаимодействие" Тогда
					ТекстТемы = НСтр("ru='Переадресовано'");
				ИначеЕсли ТипОбъекта = "Задача" Тогда
					ТекстТемы = НСтр("ru='Переадресована'");
				Иначе
					ТекстТемы = НСтр("ru='Переадресован'");
				КонецЕсли;
				ТекстСодержания = "<p>" + ТекстТемы + " " + ТипОбъекта + "</p>";
			КонецЕсли;

			ТекстТемы = ТекстТемы + " " + ТипОбъекта + ?(ТемаНаименование = "", "", " """ + ТемаНаименование 
				+ """") + НСтр("ru=' от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
				 "ДФ='дд.ММ.гг ЧЧ:мм'");
			ТекстСодержания = ТекстСодержания +"
			|<p>%1</p>";

			Если ПараметрыОповещения.Свойство("ДобавлениеСоисполнителя") Тогда
				ТекстСодержания = ТекстСодержания + "<p>" + НСтр("ru='Добавил'") + ": " 
					+ ПараметрыОповещения.ДобавлениеСоисполнителя.Автор + " " 
					+ Формат(ПараметрыОповещения.ДобавлениеСоисполнителя.Дата, "ДЛФ=DT") + "</p>";
			ИначеЕсли ПараметрыОповещения.Свойство("УдалениеСоисполнителя") Тогда
				ТекстСодержания = ТекстСодержания + "<p>" + НСтр("ru='Удалил'") + ": " 
					+ ПараметрыОповещения.УдалениеСоисполнителя.Автор + " " 
					+ Формат(ПараметрыОповещения.УдалениеСоисполнителя.Дата, "ДЛФ=DT") + "</p>";
			КонецЕсли;
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 3. Новые задачи
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс)
				И ПараметрыОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
					ТекстСодержания = НСтр("ru='Добавлено поручение ""'");
				Иначе
					Если Не ПараметрыОповещения.Свойство("СтарыйСрокИсполнения") Тогда
						ТекстСодержания = НСтр("ru='Добавлена задача ""'");
					Иначе
						ТекстСодержания = НСтр("ru='Изменен срок исполнения задачи ""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + ПараметрыОповещения.Предмет.Наименование;
				СтарыйСрокИсполнения = ?(ПараметрыОповещения.Свойство("СтарыйСрокИсполнения"), 
					ПараметрыОповещения.СтарыйСрокИсполнения, Неопределено);
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ДатаНачала, 
					ПараметрыОповещения.Предмет.СрокИсполнения, СтарыйСрокИсполнения);
				
				ТекстСодержания = ТекстСодержания + НСтр("ru='"", срок:'") + " " 
					+ ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
					+ НСтр("ru=', автор:';en=', author:'") + " " + ПараметрыОповещения.Предмет.Автор
					+ ?(СтарыйСрокИсполнения = Неопределено, "", 
						НСтр("ru=', (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
						+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")");
			
			ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				Если ПараметрыОповещения.Предмет.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					ТекстСодержания = НСтр("ru='Добавлена контрольная точка ""'");
				Иначе
					ТекстСодержания = НСтр("ru='Добавлена задача проекта ""'");
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + ПараметрыОповещения.Предмет.Тема + """" + Символы.ПС;
				ТекстСодержания = ТекстСодержания + НСтр("ru=', дата начала:'") + " " 
					+ Формат(ПараметрыОповещения.Предмет.ПлановаяДатаНачала, "ДФ=дд.ММ.гггг")
					 + НСтр("ru=', дата окончания:'") + " " 
					 	+ Формат(ПараметрыОповещения.Предмет.ПлановаяДатаОкончания, "ДФ=дд.ММ.гггг") 
					 	+ Символы.ПС;
				ТекстСодержания = ТекстСодержания + НСтр("ru='проект:'") + " " + ПараметрыОповещения.Предмет.Проект + Символы.ПС;
				ТекстСодержания = ТекстСодержания +  НСтр("ru='Ответственный:'") + " " 
					+ ПараметрыОповещения.Предмет.ОтветственныйИсполнитель;
			КонецЕсли;
			
		Иначе
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс)
				И ПараметрыОповещения.Предмет.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
					ТекстТемы	= НСтр("ru='Добавлено поручение ""'");
					Стр			= "<P>" + НСтр("ru='Добавлено поручение ""'");
				Иначе
					Если Не ПараметрыОповещения.Свойство("СтарыйСрокИсполнения") Тогда
						ТекстТемы	= НСтр("ru='Добавлена задача ""'");
						Стр			= "<P>" + НСтр("ru='Добавлена задача ""'");
					Иначе
						ТекстТемы	= НСтр("ru='Изменен срок исполнения задачи ""'");
						Стр			= "<P>" + НСтр("ru='Изменен срок исполнения задачи ""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстТемы		= ТекстТемы + ПараметрыОповещения.Предмет.Наименование + """";
				ПредставлениеСсылки =  ПараметрыОповещения.Предмет.Наименование;
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
				Стр = Стр + НавигационнаяСсылкаСтрокой + """</P><BR>";
				
				ДатыСобытияТекстом = ДатыСобытияТекстом(ПараметрыОповещения.Предмет.ДатаНачала, 
					ПараметрыОповещения.Предмет.ДатаИсполнения, ПараметрыОповещения.Предмет.СрокИсполнения);
				
				// Стр	= Стр + СокрЛП(ПараметрыОповещения.Предмет.Наименование) + """</P><BR>";
				Стр = Стр + "<P>" + НСтр("ru='"" срок:'") + " " 
					+ ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания;
				Стр = Стр + НСтр("ru=' Автор:';en=' Author:") + " " + ПараметрыОповещения.Предмет.Автор;
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс) Тогда
					Стр = Стр + НСтр("ru=' Ответственный:'") + " " 
						+ ПараметрыОповещения.Предмет.БизнесПроцесс.Ответственный;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Исполнитель) Тогда
					Стр = Стр + НСтр("ru=' Ответственный:'") + " " 
						+ ПараметрыОповещения.Предмет.Исполнитель;
				Иначе
					Стр = Стр + НСтр("ru=' Ответственный:'") + " " 
						+ ПараметрыОповещения.Предмет.РольИсполнителя;
				КонецЕсли;
				Стр = Стр + ?(ПараметрыОповещения.Свойство("СтарыйСрокИсполнения"), 
					НСтр("ru=' Старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
						+ ДатыСобытияТекстом.СтароеЗначениеВремени, "")
					+ """</P><BR>";
				
				Стр_1 = "<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>" 
					+ НСтр("ru='Задача'") 
					+ "</STRONG></EM></span></P>";
					
				ТекстСодержания = "
				|<html>
				|<head>
				|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
				|<title></title>
				|</head>
				|<body>
				|" + Стр + "<P><BR>" 
					+ ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.БизнесПроцесс),
					CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеБизнесПроцесса(ПараметрыОповещения.Предмет) 
					+ Стр_1 
					+ CRM_БизнесПроцессыПереопределяемый.СформироватьИсториюБизнесПроцесса(ПараметрыОповещения.Предмет), "") 
					+ "
				|</body>
				|</html>";
				
			ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
				
				Если ПараметрыОповещения.Предмет.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
					ТекстТемы	= НСтр("ru='Добавлена контрольная точка ""'");
					Стр			= "<P>" + НСтр("ru='Добавлена контрольная точка ""'");
				Иначе
					ТекстТемы	= НСтр("ru='Добавлена задача проекта ""'");
					Стр			= "<P>" + НСтр("ru='Добавлена задача проекта ""'");
				КонецЕсли;
				
				ТекстТемы		= ТекстТемы + ПараметрыОповещения.Предмет.Тема + """";
				ПредставлениеСсылки =  ПараметрыОповещения.Предмет.Тема;
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
				Стр = Стр + НавигационнаяСсылкаСтрокой + """</P>";
				
				Стр = Стр + "<P>" + НСтр("ru='Дата начала:';en='Start Date:'") + " " 
					+ Формат(ПараметрыОповещения.Предмет.ПлановаяДатаНачала, "ДФ='дд.ММ.гггг'");
				Стр = Стр + "<P>" + НСтр("ru='Дата окончания:';en='End Date:'") + " " 
					+ Формат(ПараметрыОповещения.Предмет.ПлановаяДатаОкончания, "ДФ='дд.ММ.гггг'");
				Стр = Стр + "<P>" + НСтр("ru='Проект:';en='Project:'") + " " + ПараметрыОповещения.Предмет.Проект;
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Этап) Тогда
					Стр = Стр + "<P>" + НСтр("ru='Этап:'") + " " + ПараметрыОповещения.Предмет.Этап + "</P>";
				КонецЕсли;
				
				Стр = Стр + "<P>" + НСтр("ru='Ответственный:'") + " " + ПараметрыОповещения.Предмет.ОтветственныйИсполнитель;
				
				Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Описание) Тогда
					Стр = Стр + "<P>" + НСтр("ru='Описание:'") + "</P><P>" 
						+ СтрЗаменить(ПараметрыОповещения.Предмет.Описание, Символы.ПС, "<BR>") + "</P>";
				КонецЕсли;
				
				Стр_1 = "<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>" 
					+ НСтр("ru='Задача'") 
					+ "</STRONG></EM></span></P>";
				
				ТекстСодержания = "
				|<html>
				|<head>
				|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
				|<title></title>
				|</head>
				|<body>
				|" + Стр + "<P><BR>
				|</body>
				|</html>";
			КонецЕсли;
		КонецЕсли;
		
	// 4. Завершение бизнес-процесса.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ЗавершениеБизнесПроцесса Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = НСтр("ru='Завершен бизнес-процесс ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) +
			НСтр("ru='"" от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
		Иначе
			ПредставлениеСсылки = Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru=' от '") 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru='Завершен бизнес-процесс ""'") + Строка(ПараметрыОповещения.Предмет.Наименование) +
			НСтр("ru='"" от'") + " " + Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Завершен бизнес-процесс '") + "</p>
			|<p>%1</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 5. Просрочено событие/задача.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи Тогда
	
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТекстСодержания = НСтр("ru='Истек срок выполнения задачи ""'") 
					+ Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru='"" срок:'") + " " 
					+ Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
						 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'",
						 "ДФ='дд.ММ.гг'"));
			ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				ТекстСодержания = НСтр("ru='Истек срок выполнения взаимодействия ""'") 
					+ Строка(ПараметрыОповещения.Предмет) + НСтр("ru='"" срок:'") + " " 
					+ Формат(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение,
						 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'",
						 "ДФ='дд.ММ.гг'"));
			КонецЕсли;
			
		Иначе
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
			ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				ТемаНаименование = Строка(ПараметрыОповещения.Предмет);
			Иначе
				ТемаНаименование = "";
			КонецЕсли;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru=' от '") 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
			Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТекстТемы = НСтр("ru='Истек срок выполнения задачи ""'") + ТемаНаименование 
					+ НСтр("ru='"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
					 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'"));
				
				ТекстСодержания = "
				|<p>" + НСтр("ru='Истек срок выполнения задачи '") + "</p>
				|<p>%1</p>
				|<p>" + НСтр("ru='Срок: '") + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
					 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) + "</p>";
			ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				ТекстТемы = НСтр("ru='Истек срок выполнения взаимодействия ""'") + ТемаНаименование 
					+ НСтр("ru='"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение,
					 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'"));
				
				ТекстСодержания = "
				|<p>" + НСтр("ru='Истек срок выполнения взаимодействия '") + "</p>
				|<p>%1</p>
				|<p>" + НСтр("ru='Срок: '") + Формат(ПараметрыОповещения.Предмет.ПлановаяДатаЗавершение,
					 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) + "</p>";
			КонецЕсли;
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 6. Дни рождения
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
		
		ДатаРожденияВТекущемГоду = ДобавитьМесяц(ПараметрыОповещения.Предмет.ДатаРождения,
			 (Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.Предмет.ДатаРождения)) * 12);
		
		Если ДатаРожденияВТекущемГоду < ТекущаяДатаСеанса() Тогда
			ДатаРожденияВТекущемГоду = ДобавитьМесяц(ДатаРожденияВТекущемГоду, 12);
		КонецЕсли;
		
		СтрокаДаты = Формат(ДатаРожденияВТекущемГоду, "ДЛФ=DD");
		УдаляемыеЗнаки = Прав(СтрокаДаты, 7);
		СтрокаДаты = СтрЗаменить(СтрокаДаты, УдаляемыеЗнаки, "");
		
		// Исполняется = Строка(Окр((ТекущаяДатаСеанса() - ПараметрыОповещения.Предмет.ДатаРождения)/(60*60*24*365)));
		
// ************************************************************************
		// ТемаНапоминания = НСтр("ru='Поздравить с днем рождения: '") + Строка(Выборка.Ссылка) + ?(Выборка.ВидСправочника =
		// "КЛ"," ("
		//	+ Строка(Выборка.Владелец) + ")","");
		//	
		//	
		// ОписаниеНапоминания = ?(Выборка.ВидСправочника = "КЛ", ?(НЕ ЗначениеЗаполнено(Выборка.РольКонтактногоЛица),
		// "","Роль: " + Выборка.РольКонтактногоЛица + Символы.ПС) + ?(НЕ ЗначениеЗаполнено(Выборка.Должность), "",
		// "Должность: "+ Выборка.Должность + Символы.ПС),"");
		//
		//
		//
		// ОписаниеНапоминания =ТемаНапоминания + Символы.ПС+ ОписаниеНапоминания + НСтр("ru='Дата рождения: '")
		//	+ Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy") +Символы.ПС + НСтр("ru='Исполняется лет: '") + Исполняется;
// ************************************************************************
		
		Если ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				
				ТекстСодержания = СтрокаДаты + НСтр("ru='  у партнера:'") + " " 
					+ ПараметрыОповещения.Предмет.Наименование 
					+ НСтр("ru='  День Рождения.'");
				
			Иначе
				ТекстТемы = НСтр("ru='День рождения партнера'");
				
				ПредставлениеСсылки = ПараметрыОповещения.Предмет.Наименование;
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
				ТекстСодержания = "
				|<p>" + НСтр("ru='День Рождения у партнера: '") + "</p>
				|<p>%1</p>";
					
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
					 НавигационнаяСсылкаСтрокой);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПараметрыОповещения.Предмет) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				
				ТекстСодержания = СтрокаДаты + НСтр("ru='  у :'") + " " 
					+ ПараметрыОповещения.Предмет.Наименование + "(" 
					+ ПараметрыОповещения.Предмет.Владелец.Наименование + ")" 
					+ НСтр("ru='  День Рождения.'");
				
			Иначе
				ТекстТемы = НСтр("ru='День рождения контактного лица партнера'");
				ТекстСодержания = СтрокаДаты + НСтр("ru='  у :'") + " " 
					+ ПараметрыОповещения.Предмет.Наименование + "(" 
					+ ПараметрыОповещения.Предмет.Владелец.Наименование + ")" 
					+ НСтр("ru='  День Рождения.'");
			КонецЕсли;
			
		КонецЕсли;
	// 7. Просроченная контрольная точка.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = НСтр("ru='Истек срок проведения контрольной точки ""'") 
				+ Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru='"" дата начала:'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
		Иначе
			ПредставлениеСсылки = Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru=' дата начала: '") 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru='Истек срок проведения контрольной точки ""'") 
				+ Строка(ПараметрыОповещения.Предмет.Тема) + НСтр("ru='"" дата начала:'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Истек срок проведения контрольной точки '") + "</p>
			|<p>%1</p>";
			
			УчастникиКТ = СформироватьСписокУчастниковКонтрольнойТочкиСтрокой(ПараметрыОповещения.Предмет);
			
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Описание) Тогда
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОповещения.Предмет.Описание,
				 Символы.ПС);
			
			ПерваяСтрока = Истина;
			Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
			Если ПерваяСтрока Тогда
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Описание: '") + СтрокаИзМассива + "</p>";
			ПерваяСтрока = Ложь;
			Иначе
			ТекстСодержания = ТекстСодержания + "
			|<p style='margin-left: 80pt'>" + СтрокаИзМассива + "</p>";
			КонецЕсли;
			КонецЦикла;
			Иначе
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Описание: '") + НСтр("ru='не указано'") + "</p>";
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Когда: '") + Формат(ПараметрыОповещения.Предмет.ПлановаяДатаНачала,
				 "ДФ='дд.ММ.гг ЧЧ:мм'") + " - " +
											 Формат(ПараметрыОповещения.Предмет.ПлановаяДатаОкончания, "ДФ='дд.ММ.гг ЧЧ:мм'") + "</p>";
			
			Если НЕ УчастникиКТ.СписокУчастников = "" Тогда
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Участники:'") + "</p>
			|<p>" + УчастникиКТ.СписокУчастников + "</p>";
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Ответственный: '") + УчастникиКТ.Ответственный + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 8. Действия по партнерам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
		Если ПараметрыОповещения.Свойство("Партнеры") Тогда
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				ПартнерыСтрокой = "";
				ПартнерыСтрокойСПереносом = "";
				Для Каждого ПартнерСсылка Из ПараметрыОповещения.Партнеры Цикл
					ПартнерыСтрокой = ПартнерыСтрокой + ?(ЗначениеЗаполнено(ПартнерыСтрокой), ", ", "") + """" 
						+ Строка(ПартнерСсылка) 
						+ """";
					ПартнерыСтрокойСПереносом = ПартнерыСтрокойСПереносом 
						+ ?(ЗначениеЗаполнено(ПартнерыСтрокойСПереносом), Символы.ПС, "") + """" + Строка(ПартнерСсылка) + """";
				КонецЦикла;
				
				ПредставлениеПредмета = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				
				ТекстСодержания = ТекстСодержания
				+ НСтр("ru='Добавлен документ ""'")
				+ ПредставлениеПредмета
				+ НСтр("ru='"" по'") + " "
				+ ?(ПараметрыОповещения.Партнеры.Количество() = 1, НСтр("ru='партнеру'"), НСтр("ru='партнерам'"));
				//
				Если ПараметрыОповещения.Партнеры.Количество() > 3 Тогда
					ТекстСодержания = ТекстСодержания + ":" + Символы.ПС;
					ТекстСодержания = ТекстСодержания + ПартнерыСтрокойСПереносом;
				Иначе
					ТекстСодержания = ТекстСодержания + " " + ПартнерыСтрокой;
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания
				+ ?(ЗначениеЗаполнено(ТекстСодержания), Символы.ПС, "")
				+ ?(ПараметрыОповещения.Свойство("ТекстОповещения"), ПараметрыОповещения.ТекстОповещения + Символы.ПС, "")
				+ СформироватьТекстСодержанияДляОповещения(ПараметрыОповещения.Предмет);
				//
			Иначе
				СписокСсылок = Новый СписокЗначений;
				
				ПредставлениеСсылки = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
				СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
				
				Ном = 1;
				ТекстСодержания = "
				|<p>" + НСтр("ru='Добавлен документ '") + "</p>
				|<p>%" + Строка(Ном) + "</p>
				|<p>" + НСтр("ru='по '") + ?(ПараметрыОповещения.Партнеры.Количество() = 1,
					 НСтр("ru='партнеру'"), НСтр("ru='партнерам'")) + "</p>";
				
				ПартнерыСтрокой = "";
				Для Каждого ПартнерСсылка Из ПараметрыОповещения.Партнеры Цикл
					ПартнерыСтрокой = ПартнерыСтрокой + ?(ЗначениеЗаполнено(ПартнерыСтрокой), ", ", "") + """" 
						+ Строка(ПартнерСсылка) 
						+ """";
					
					Ном = Ном + 1;
					
					ПредставлениеСсылки = ПартнерСсылка.Наименование;
					НавигационнаяСсылка = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПартнерСсылка);
					НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
					СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
					
					ТекстСодержания = ТекстСодержания + "
					|<p>%" + Строка(Ном) + "</p>";
				КонецЦикла;
				
				ТекстТемы = ТекстТемы + НСтр("ru='Добавлен документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru='"" по'") + " "
				+ ?(ПараметрыОповещения.Партнеры.Количество() = 1, НСтр("ru='партнеру'"), НСтр("ru='партнерам'"))
				+ ": " + ПартнерыСтрокой;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				
				Ном = 0;
				Для Каждого ЭлементСписка Из СписокСсылок Цикл
					Ном = Ном + 1;
					
					ТекстСодержания = СтрЗаменить(ТекстСодержания, "%" + Строка(Ном), ЭлементСписка.Значение);
				КонецЦикла;
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
		
	// 9. Действия по проектам
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам Тогда
		Если ПараметрыОповещения.Свойство("Проекты") Тогда
			Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				ПроектыСтрокой = "";
				ПроектыСтрокойСПереносом = "";
				Для Каждого ПроектСсылка Из ПараметрыОповещения.Проекты Цикл
					ПроектыСтрокой = ПроектыСтрокой + ?(ЗначениеЗаполнено(ПроектыСтрокой), ", ", "") + """" 
						+ Строка(ПроектСсылка) 
						+ """";
					ПроектыСтрокойСПереносом = ПроектыСтрокойСПереносом 
						+ ?(ЗначениеЗаполнено(ПроектыСтрокойСПереносом), Символы.ПС, "") + """" + Строка(ПроектСсылка) + """";
				КонецЦикла;
				
				ПредставлениеПредмета = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				
				ТекстСодержания = ТекстСодержания
				+ НСтр("ru='Добавлен документ ""'")
				+ ПредставлениеПредмета
				+ НСтр("ru='"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru='проекту'"), НСтр("ru='проектам'"));
				//
				Если ПараметрыОповещения.Проекты.Количество() > 3 Тогда
					ТекстСодержания = ТекстСодержания + ":" + Символы.ПС;
					ТекстСодержания = ТекстСодержания + ПроектыСтрокойСПереносом;
				Иначе
					ТекстСодержания = ТекстСодержания + " " + ПроектыСтрокой;
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания
				+ ?(ЗначениеЗаполнено(ТекстСодержания), Символы.ПС, "")
				+ ?(ПараметрыОповещения.Свойство("ТекстОповещения"), ПараметрыОповещения.ТекстОповещения + Символы.ПС, "")
				+ СформироватьТекстСодержанияДляОповещения(ПараметрыОповещения.Предмет);
				//
			Иначе
				ТекстТемы = ТекстТемы + НСтр("ru='Добавлен документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru='"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru='проекту'"), НСтр("ru='проектам'"))
				+ ": " + ПроектыСтрокой;
				
				СписокСсылок = Новый СписокЗначений;
				
				ПредставлениеСсылки = ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет);
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
				СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
				
				Ном = 1;
				ТекстСодержания = "
				|<p>" + НСтр("ru='Добавлен документ '") + "</p>
				|<p>%" + Строка(Ном) + "</p>
				|<p>" + НСтр("ru='по '") + ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru='проекту'"),
					 НСтр("ru='проектам'")) 
					+ "</p>";
				
				ПроектыСтрокой = "";
				Для Каждого ПроектСсылка Из ПараметрыОповещения.Проекты Цикл
					ПроектыСтрокой = ПроектыСтрокой + ?(ЗначениеЗаполнено(ПроектыСтрокой), ", ", "") + """" 
						+ Строка(ПроектСсылка) 
						+ """";
					
					Ном = Ном + 1;
					
					ПредставлениеСсылки = Строка(ПроектСсылка);
					НавигационнаяСсылка = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПроектСсылка);
					НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
					ПредставлениеСсылки);
					
					СписокСсылок.Добавить(НавигационнаяСсылкаСтрокой);
					
					ТекстСодержания = ТекстСодержания + "
					|<p>%" + Строка(Ном) + "</p>";
				КонецЦикла;
				
				ТекстТемы = ТекстТемы + НСтр("ru='Добавлен документ ""'")
				+ ПолучитьПредставлениеПредметаДляОповещения(ПараметрыОповещения.Предмет, Истина)
				+ НСтр("ru='"" по'") + " "
				+ ?(ПараметрыОповещения.Проекты.Количество() = 1, НСтр("ru='проекту'"), НСтр("ru='проектам'"))
				+ ": " + ПроектыСтрокой;
				
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				
				Ном = 0;
				Для Каждого ЭлементСписка Из СписокСсылок Цикл
					Ном = Ном + 1;
					
					ТекстСодержания = СтрЗаменить(ТекстСодержания, "%" + Строка(Ном), ЭлементСписка.Значение);
				КонецЦикла;
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
		
	// 10. Коммерческое предложение на сумму.
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма Тогда
		
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ИмяРеквизитаПартнер = "Партнер";	
		Иначе
			ИмяРеквизитаПартнер = "Клиент";
		КонецЕсли;				
		Если ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксировано Коммерческое предложение с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента, ПараметрыОповещения.Предмет.Валюта) + Символы.ПС +
			НСтр("ru=' Организация:'") + " " + ПараметрыОповещения.Предмет.Организация + Символы.ПС +
			НСтр("ru=' Организация:';en=' Company:'") + " " + ПараметрыОповещения.Предмет[ИмяРеквизитаПартнер] + Символы.ПС;
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ТекстСодержания = ТекстСодержания + НСтр("ru=' Договор:'") + " " + ПараметрыОповещения.Предмет.Договор;
			КонецЕсли;	
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксировано Коммерческое предложение с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " 
					+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
					 ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксировано Коммерческое предложение с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " 
					+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
					 ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ПредставлениеСсылки = "№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от '") + 
								  Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") +
								  НСтр("ru=' Сумма: '") 
								  	+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
								  		 ПараметрыОповещения.Предмет.Валюта);
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru='Зафиксировано Коммерческое предложение с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета);
			
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ТекстДоговор = НСтр("ru=' Договор: '") + ПараметрыОповещения.Предмет.Договор;
			КонецЕсли;	
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Зафиксировано Коммерческое предложение с суммой более '") 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета)  
				+ "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru=' Организация: '") + ПараметрыОповещения.Предмет.Организация + "</p>
			|<p>" + НСтр("ru=' Организация: ';en=' Company: '") + ПараметрыОповещения.Предмет[ИмяРеквизитаПартнер] + "</p>
			|<p>" + ТекстДоговор + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 11. Счет на сумму
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
		
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		
		Если ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Напоминание Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксирован Счет на оплату покупателю с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента, ПараметрыОповещения.Предмет.Валюта) + Символы.ПС +
			НСтр("ru=' Организация:'") + " " + ПараметрыОповещения.Предмет.Организация + Символы.ПС +
			НСтр("ru=' Организация:';en=' Company:'") + " " + ПараметрыОповещения.Предмет.Партнер + Символы.ПС +
			НСтр("ru=' Клиент:';en=' Customer:'") + " " + ПараметрыОповещения.Предмет.Договор;
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.СМС Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксирован Счет на оплату покупателю с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " 
					+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
					 ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.Мессенджер Тогда
			
			ТекстСодержания = НСтр("ru='Зафиксирован Счет на оплату покупателю с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета) + Символы.ПС +
			"№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru=' Сумма:'") + " " 
					+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
					 ПараметрыОповещения.Предмет.Валюта);
			
		ИначеЕсли ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ПредставлениеСсылки = "№" + ПараметрыОповещения.Предмет.Номер + НСтр("ru=' от '") + 
								  Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'") +
								  НСтр("ru=' Сумма: '") 
								  	+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Предмет.СуммаДокумента,
								  		 ПараметрыОповещения.Предмет.Валюта);
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
			
			ТекстТемы = НСтр("ru='Зафиксирован Счет на оплату покупателю с суммой более'") + " " 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета);
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Зафиксирован Счет на оплату покупателю с суммой более '") 
				+ CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ПараметрыОповещения.Сумма, ВалютаУправленческогоУчета)  
				+ "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru=' Организация: '") + ПараметрыОповещения.Предмет.Организация + "</p>
			|<p>" + НСтр("ru=' Организация: ';en=' Company: '") + ПараметрыОповещения.Предмет.Партнер + "</p>
			|<p>" + НСтр("ru=' Клиент: ';en=' Customer: '") + ПараметрыОповещения.Предмет.Договор + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 12. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = НСтр("ru='Истекает срок выполнения задачи ""'") 
				+ Строка(ПараметрыОповещения.Предмет.Наименование) + НСтр("ru='"" срок:'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
					 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'",
					 "ДФ='дд.ММ.гг'"));
			
		Иначе
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
			
			ПредставлениеСсылки = ТемаНаименование + НСтр("ru=' от '") 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ПредставлениеСсылки);
				
			ТекстТемы = НСтр("ru='Истекает срок выполнения задачи ""'") + ТемаНаименование 
				+ НСтр("ru='"" срок:'") + " " + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
				 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'"));
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Истекает срок выполнения задачи '") + "</p>
			|<p>%1</p>
			|<p>" + НСтр("ru='Срок: '") + Формат(ПараметрыОповещения.Предмет.СрокИсполнения,
				 ?(ПараметрыОповещения.ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				 НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 13. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОшибкаСрабатыванияТриггера Тогда
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = НСтр("ru='Ошибка выполнения триггера'") + " """ 
				+ Строка(ПараметрыОповещения.Предмет.Наименование) 
				+ """";
			
		Иначе
			ТемаНаименование = ПараметрыОповещения.Предмет.Наименование;
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				ТемаНаименование);
				
			ТекстТемы = НСтр("ru='Ошибка выполнения триггера'") + " """ + ТемаНаименование + """";
			
			ТекстСодержания = "
			|<p>" + НСтр("ru='Ошибка выполнения триггера '") + "</p>
			|<p>" + НавигационнаяСсылкаСтрокой + "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	// 14. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях Тогда
		
		ЕжегодныеСобытия = ПолучитьМассивЕжегодныхСобытийКлиента();
		Если ЕжегодныеСобытия.Найти(ПараметрыОповещения.ВидСобытия) = Неопределено Тогда
			СтрокаДаты = Формат(ПараметрыОповещения.ДатаСобытия, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаРожденияВТекущемГоду = ДобавитьМесяц(ПараметрыОповещения.ДатаСобытия,
				(Год(ТекущаяДатаСеанса()) - Год(ПараметрыОповещения.ДатаСобытия)) * 12);
			
			СтрокаДаты = Формат(ДатаРожденияВТекущемГоду, "ДЛФ=DD");
			УдаляемыеЗнаки = Прав(СтрокаДаты, 7);
			СтрокаДаты = СтрЗаменить(СтрокаДаты, УдаляемыеЗнаки, "");
		КонецЕсли;
		
		ФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ПараметрыОповещения.Предмет.Наименование, 2,
				 ПараметрыОповещения.Предмет,
				?(ПараметрыОповещения.Предмет.Пол = Перечисления.ПолФизическогоЛица.Мужской, 1, 2));
		
		Если ПараметрыОповещения.ВидСобытия.Наименование = НСтр("ru = 'День рождения контактного лица'") Тогда
			
			Если ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				ТекстТемы = НСтр("ru='День рождения контактного лица партнера'");
			КонецЕсли;
			
			ТекстСодержания = СтрокаДаты + НСтр("ru=' у '") + ФИО + "("
				+ ПараметрыОповещения.Предмет.Владелец.Наименование + ")"
				+ НСтр("ru=' День Рождения.'");
			
		Иначе
			Если Не ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
				
				ТекстСодержания = СтрокаДаты + " "
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='у %1 (%2) важное событие'"),
						ФИО, ПараметрыОповещения.Предмет.Владелец)
					+ " - " + ПараметрыОповещения.ВидСобытия;
				
			Иначе
				
				НавигационнаяСсылка =
					CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
				НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"<a href=%1>%2</a>",
					КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL), ФИО);
					
				ТекстТемы = СтрокаДаты + " " 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='у %1 (%2) важное событие'"),
						ФИО, ПараметрыОповещения.Предмет.Владелец)
					+ " - " + ПараметрыОповещения.ВидСобытия;
				
				ТекстСодержания = "
				|<p>" + СтрокаДаты + " " 
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='у %1 (%2) важное событие'"),
						 НавигационнаяСсылкаСтрокой,
						 ПараметрыОповещения.Предмет.Владелец)
					+ " - " + ПараметрыОповещения.ВидСобытия + "</p>";
					
				ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
					 ТекстСодержания);
				
				ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
				ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
	// 15. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = "НазначениеЗамещающегоСотрудника" Тогда
	
		ФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ПараметрыОповещения.Предмет.Сотрудник.Наименование, 2);
		ДатаНачала = Формат(ПараметрыОповещения.Предмет.ДатаНачалаОтсутствия, "ДФ=dd.MM.yyyy");
		
		// АПК:1223-выкл отключаем проверку на использование местоимений "Вы", "Вас" и пр.
        	Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вы назначены замещающим %1 с %2.'"),
				 ФИО,
				 ДатаНачала);
			
		Иначе
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				Строка(ПараметрыОповещения.Предмет));
				
			ТекстТемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вы назначены замещающим %1 с %2.'"),
				 ФИО,
				 ДатаНачала);
			
			ТекстСодержания = "<p>" 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вы назначены замещающим %1 с %2.'"),
					 ФИО, ДатаНачала) + "</p>" +
			"<br><p>" 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ отсутствия: %1'"),
					 НавигационнаяСсылкаСтрокой) 
				+ "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		// АПК:1223-вкл

	// 16. 
	ИначеЕсли ПараметрыОповещения.ВидОповещения = "ЗавершениеЗамещенияСотрудника" Тогда
	
		ФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ПараметрыОповещения.Предмет.Сотрудник.Наименование, 2);
		ДатаНачала = Формат(ПараметрыОповещения.Предмет.ДатаНачалаОтсутствия, "ДФ=dd.MM.yyyy");
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено замещение %1.'"),
				 ФИО);
			
		Иначе
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				Строка(ПараметрыОповещения.Предмет));
				
			ТекстТемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено замещение %1.'"), ФИО);
			
			ТекстСодержания = "<p>" 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено замещение %1.'"),
					 ФИО, ДатаНачала) + "</p>" +
			"<br><p>" 
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ отсутствия: %1'"),
					 НавигационнаяСсылкаСтрокой) 
				+ "</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
		
	// 17. Создан новый интерес
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.СозданНовыйИнтерес Тогда
		
		Ссылка = ПараметрыОповещения.Предмет;
		Если Ссылка.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
			ТекстТемы = НСтр("ru='Создан новый интерес клиента'")
		Иначе
			ТекстТемы = НСтр("ru='Создано новое обращение");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ссылка.Партнер) Тогда
			ПредставлениеЛица = СокрЛП(?(ЗначениеЗаполнено(Ссылка.Партнер.НаименованиеПолное),
			Ссылка.Партнер.НаименованиеПолное,
			Ссылка.Партнер.Наименование));
		Иначе
			ПредставлениеЛица = СокрЛП(Ссылка.ПотенциальныйКлиент.Наименование);
		КонецЕсли;
			
		Если Не ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			ТекстСодержания = ТекстТемы + " " + ПредставлениеЛица;
			
		Иначе
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(ПараметрыОповещения.Предмет);
			ИнтересНавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				Строка(Ссылка));
				
			ТекстСодержания = "
			|<p>" + ТекстТемы + " " + "%1: %2</p>";
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				 ТекстСодержания);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%1", ПредставлениеЛица);
			ТекстСодержания = СтрЗаменить(ТекстСодержания, "%2", ИнтересНавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		КонецЕсли;
		
	// 18. Новое взаимодействие
	ИначеЕсли ПараметрыОповещения.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВзаимодействиях Тогда
		
		Ссылка = ПараметрыОповещения.Предмет;
		
		Если Не ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			СтароеЗначениеПлановойДаты = Неопределено;
			Если ПараметрыОповещения.Свойство("СтароеЗначениеПлановойДаты") Тогда
				СтароеЗначениеПлановойДаты = ПараметрыОповещения.СтароеЗначениеПлановойДаты;
				ТекстСодержания = "";
			Иначе
				ТекстСодержания = НСтр("ru='Добавлено взаимодействие: '");
			КонецЕсли;
			
			ВидСобытия = Ссылка.ВидВзаимодействия.ВидСобытия;
			ТекстПоВидуСобытия = ТекстПоВидуСобытия(ВидСобытия, Не ЗначениеЗаполнено(СтароеЗначениеПлановойДаты));
			
			ТекстСодержания = ТекстСодержания + СокрП(ТекстПоВидуСобытия);
			ДатыСобытияТекстом = ДатыСобытияТекстом(Ссылка.ПлановаяДата, 
				Ссылка.ПлановаяДатаЗавершение, СтароеЗначениеПлановойДаты);
				
			ТекстСодержания = ТекстСодержания + " """ 
					+ Строка(Ссылка.Тема) + """, "
					+ ДатыСобытияТекстом.ДатаНачала + НСтр("ru='с '") + ДатыСобытияТекстом.ВремяНачала
					+ НСтр("ru='до '") + ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
					+ ?(СтароеЗначениеПлановойДаты = Неопределено, "", 
						НСтр("ru=' (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
						+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")");
				
		Иначе
			
			СтароеЗначениеПлановойДаты = Неопределено;
			Если ПараметрыОповещения.Свойство("СтароеЗначениеПлановойДаты") Тогда
				СтароеЗначениеПлановойДаты = ПараметрыОповещения.СтароеЗначениеПлановойДаты;
				ТекстСодержания = "<P>";
				ТекстТемы = НСтр("ru='Изменено взаимодействие ");
			Иначе
				ТекстСодержания = "<P>" + НСтр("ru='Добавлено взаимодействие: '");
				ТекстТемы = НСтр("ru='Добавлено взаимодействие ");
			КонецЕсли;
			
			ТекстТемы = ТекстТемы + Строка(Ссылка);
			
			ВидСобытия = Ссылка.ВидВзаимодействия.ВидСобытия;
			ТекстПоВидуСобытия = ТекстПоВидуСобытия(ВидСобытия, Не ЗначениеЗаполнено(СтароеЗначениеПлановойДаты));
			
			ТекстСодержания = ТекстСодержания + СокрП(ТекстПоВидуСобытия);
			
			НавигационнаяСсылка =
				CRM_ОбщегоНазначенияКлиентСервер.ПолучитьНавигационнуюСсылкуНаОбъект(Ссылка);
			НавигационнаяСсылкаСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=%1>%2</a>",
				КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
				Строка(Ссылка));
			
			ТекстСодержания = ТекстСодержания + " " + НавигационнаяСсылкаСтрокой + """</P><BR>";
			
			ДатыСобытияТекстом = ДатыСобытияТекстом(Ссылка.ПлановаяДата, 
				Ссылка.ПлановаяДатаЗавершение, СтароеЗначениеПлановойДаты);
			
			ТекстСодержания = ТекстСодержания + "
			|<p>" + НСтр("ru='Когда: '") + ДатыСобытияТекстом.ДатаНачала + НСтр("ru='с '")
										+ ДатыСобытияТекстом.ВремяНачала + НСтр("ru='до '")
										+ ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
										+ ?(СтароеЗначениеПлановойДаты = Неопределено, "", 
											НСтр("ru=' (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
										+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")") + "</p>";
			
			ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																										, Новый Структура("Телефон, Почта",
																										Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																										Справочники.ВидыКонтактнойИнформации.EmailПользователя));
				
				Если ЗначениеЗаполнено(Ссылка.Партнер) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Клиент: '") + СокрЛП(Строка(Ссылка.Партнер)) + "</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Ссылка.КонтактноеЛицо) Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Контактное лицо: '") + СокрЛП(Строка(Ссылка.КонтактноеЛицо)) + "</p>";
				КонецЕсли;
				
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Когда: '") + ДатыСобытияТекстом.ДатаНачала + НСтр("ru='с '")
											+ ДатыСобытияТекстом.ВремяНачала + НСтр("ru='до '")
											+ ДатыСобытияТекстом.ДатаОкончания + ДатыСобытияТекстом.ВремяОкончания
											+ ?(СтароеЗначениеПлановойДаты = Неопределено, "", 
												НСтр("ru=' (старое значение - '") + ДатыСобытияТекстом.СтароеЗначениеДаты
											+ ДатыСобытияТекстом.СтароеЗначениеВремени + ")") + "</p>";
				
			Если ЗначениеЗаполнено(Ссылка.Содержание) Тогда
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ссылка.Содержание,
					 Символы.ПС);
				
				ПерваяСтрока = Истина;
				Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
				Если ПерваяСтрока Тогда
				ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Описание: '") + СтрокаИзМассива + "</p>";
				ПерваяСтрока = Ложь;
				Иначе
				ТекстСодержания = ТекстСодержания + "
				|<p style='margin-left: 80pt'>" + СтрокаИзМассива + "</p>";
				КонецЕсли;
				КонецЦикла;
			
			Иначе
				ТекстСодержания = ТекстСодержания + "
					|<p>" + НСтр("ru='Описание: '") + НСтр("ru='не указано'") + "</p>";
			КонецЕсли;
			
			ТекстСодержания = ТекстСодержания + "
				|<p>" + НСтр("ru='Ответственный: '") + Ссылка.Ответственный + "</p>";
			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
				ТекстСодержания = ТекстСодержания + "
					|<p style='margin-left: 20pt'>E-mail: " + СокрЛП(ИнформацияОтветственного.Почта) + "</p>";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
				ТекстСодержания = ТекстСодержания + "
					|<p style='margin-left: 20pt'>Телефон: " + СокрЛП(ИнформацияОтветственного.Телефон) + "</p>";
			КонецЕсли;
			
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПолучитьТелоТекстаПисьма(),
				ТекстСодержания);
			ТекстСодержания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСодержания,
				НавигационнаяСсылкаСтрокой);
			
			ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстСодержания);
			ТекстСодержания	= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("Тема,Содержание", ТекстТемы, ТекстСодержания);
	
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция СформироватьСписокУчастниковКонтрольнойТочкиСтрокой(КонтрольнаяТочка)
	
	СтруктураРезультат = Новый Структура("Ответственный,СписокУчастников", Неопределено, Неопределено);
	
	СписокУчастников = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КонтрольнаяТочка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Участники.Пользователь КАК Пользователь,
	|	Участники.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.CRM_ЭтапКалендарногоПлана.Участники КАК Участники
	|ГДЕ
	|	Участники.Ссылка = &Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СписокУчастников = "" Тогда
			СписокУчастников = СписокУчастников + "," + Символы.ПС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураРезультат.Ответственный) И Выборка.Ответственный Тогда
			СтруктураРезультат.Ответственный = Выборка.Пользователь;
		КонецЕсли;
		
		СписокУчастников = СписокУчастников + Строка(Выборка.Пользователь);
		
	КонецЦикла;
	
	СтруктураРезультат.СписокУчастников = СписокУчастников;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СформироватьТекстОповещенияПоСобытию(ПараметрыОповещения)
	
	ТекстТемы		= "";
	ТекстСодержания	= "";
	
	// Если Событие новое, то только об этом и сообщаем.
	Если ПараметрыОповещения.Состояние.Новое ИЛИ ПараметрыОповещения.ЭтоНовыйУчастник Тогда
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
		// АПК:1223-выкл отключаем проверку на использование местоимений "Вы", "Вас" и пр.
			ТекстСодержания = НСтр("ru='Вас включили в состав участников встречи: ""';
				|en='You are included in composition of participants of a meeting: ""'") 
				+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru='"" начало в'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru='место проведения:';en='location:'") 
					+ " " 
					+ СокрЛП(ПараметрыОповещения.Предмет.Место);
			КонецЕсли;
		Иначе
			ТекстТемы = НСтр("ru='Вас включили в состав участников встречи: ""';
				|en='You are included in composition of participants of a meeting: ""'") 
				+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
				+ """";
			
			УчастникиСобытия = СформироватьСписокУчастниковСобытияСтрокой(ПараметрыОповещения.Предмет);
			
			ТекстСодержания = НСтр("ru='Вас включили в состав участников встречи';en='You are included in composition of participants of a meeting'") + " " 
				+ Символы.ПС 
				+ 
			НСтр("ru='Тема:';en='Subject:'") + " " + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + Символы.ПС + 
			НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд ММММ'") 
				+ НСтр("ru=' с'") + " " 
				+ 
									 Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='ЧЧ-мм'") + НСтр("ru=' до';en=' to'") + " " + 
									 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='ЧЧ-мм'") + 
									 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата) = НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия), "", " " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд ММММ'; ДЛФ=DD")) + Символы.ПС +
			НСтр("ru='Где:';en='Where:'") + " " + ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место),
				 ПараметрыОповещения.Предмет.Место, НСтр("ru='не указано'")) + Символы.ПС +
			НСтр("ru='Описание:';en='Description:'") + " " 
				+ ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Описание),
					 СокрЛП(ПараметрыОповещения.Предмет.Описание), НСтр("ru='не указано'")) +
			?(НЕ УчастникиСобытия = "", Символы.ПС + НСтр("ru='Участники:';en='Participants:'") + " " + Символы.ПС + УчастникиСобытия,
				 "") 
				+ Символы.ПС;
			
			ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																										, Новый Структура("Телефон, Почта",
																										Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																										Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			
			ТекстСодержания = ТекстСодержания + НСтр("ru='Ответственный:';en='Responsible:'") + " " 
				+ ПараметрыОповещения.Предмет.Ответственный;
			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " + СокрЛП(ИнформацияОтветственного.Почта);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб 
					+ НСтр("ru='Телефон:';en='Phone:'") + " " 
					+ СокрЛП(ИнформацияОтветственного.Телефон);
			КонецЕсли;
			
			// ВРЕМЕННО
			ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
			"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС +
			НСтр("ru='Вас включили в состав участников встречи: ""';
				|en='You are included in composition of participants of a meeting: ""'") 
				+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + НСтр("ru='"" начало в'") + " " 
				+ Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='дд.ММ.гг ЧЧ:мм'");
			Если ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Место) Тогда
				ТекстСодержания = ТекстСодержания + Символы.ПС + НСтр("ru='место проведения:';en='location:'") 
					+ " " 
					+ СокрЛП(ПараметрыОповещения.Предмет.Место);
			КонецЕсли;
		// АПК:1223-вкл
		
		КонецЕсли;
	Иначе
		
		Если НЕ ПараметрыОповещения.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта Тогда
			
			// Если ПараметрыОповещения.Состояние.Отменено ИЛИ ПараметрыОповещения.Состояние.Завершено Тогда
			//	
			//	ТекстСодержания = ?(ПараметрыОповещения.Состояние.Отменено,
				//НСтр("ru='Отменено проведение встречи: ""';
				//|en='Carrying out of a meeting are cancel: ""'")
			//															 ,НСтр("ru='Завершено проведение встречи: ""';en='Carrying out of a meeting is completed: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
				//+ НСтр("ru='"" окончание в';en='"" ends at'") + " " 
				//+ Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'");
			//	
			// Иначе
				Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания =	НСтр("ru='Изменена дата и место проведения встречи: ""';
						|en='Meeting date and venue has been changed: ""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд.ММ.гг ЧЧ:мм'") + " - " 
											+ 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
					
					ТекстСодержания =	НСтр("ru='Изменена дата проведения встречи: ""';en='Meeting date has been changed: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """" 
						+ Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд.ММ.гг ЧЧ:мм'") + " - " 
											+ 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд.ММ.гг ЧЧ:мм'");
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания =	НСтр("ru='Изменено место проведения встречи: ""';en='Meeting venue has been changed:""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """" 
						+ Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
					
				КонецЕсли;
			// КонецЕсли;
		Иначе
			
			// Если ПараметрыОповещения.Состояние.Отменено ИЛИ ПараметрыОповещения.Состояние.Завершено Тогда
			//	
			//	ТекстТемы = ?(ПараметрыОповещения.Состояние.Отменено,
				//НСтр("ru='Отменено проведение встречи: ""';
				//|en='Carrying out of a meeting are cancel: ""'")
			//															 ,НСтр("ru='Завершено проведение встречи: ""';en='Carrying out of a meeting is completed: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """";
			//	
			//	ТекстСодержания = ?(ПараметрыОповещения.Состояние.Отменено,
				//НСтр("ru='Отменено проведение встречи: ""';
				//|en='Carrying out of a meeting are cancel: ""'")
			//															 ,НСтр("ru='Завершено проведение встречи: ""';en='Carrying out of a meeting is completed: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
				//+ НСтр("ru='"" окончание в';en='"" ends at'") + " " 
				//+ Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия,"ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС;
			//	
			//	Если ПараметрыОповещения.Состояние.Отменено Тогда
			//		ТекстСодержания = ТекстСодержания + 
			//		НСтр("ru='По причине: ""';en='For the reason: ""'") 
				//+ ?(ЗначениеЗаполнено(ПараметрыОповещения.Предмет.ПричинаОтказа),
					//СокрЛП(ПараметрыОповещения.Предмет.ПричинаОтказа),НСтр("ru='не указана'")) 
					//+ Символы.ПС;
			//	КонецЕсли;
			//	
			//	Если ПараметрыОповещения.Состояние.Завершено И ЗначениеЗаполнено(ПараметрыОповещения.Предмет.Результат) Тогда
			//		ТекстСодержания = ТекстСодержания + 
			//		НСтр("ru='Результат: ""';en='Result: ""'") + СокрЛП(ПараметрыОповещения.Предмет.Результат) + Символы.ПС;
			//	КонецЕсли;
			//	
			//	ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
			//																								,Новый Структура("Телефон, Почта",
			//																								Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
			//																								Справочники.ВидыКонтактнойИнформации.EmailПользователя));
			//	
			//	ТекстСодержания = ТекстСодержания + НСтр("ru='Ответственный:';en='Responsible:'") + " " 
				//+ ПараметрыОповещения.Предмет.Ответственный;
			//	
			//	Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
			//		ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " 
				//+ СокрЛП(ИнформацияОтветственного.Почта);
			//	КонецЕсли;
			//	
			//	Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
			//		ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб 
				//+ НСтр("ru='Телефон:';en='Phone:'") + " " 
				//+ СокрЛП(ИнформацияОтветственного.Телефон);
			//	КонецЕсли;
			//	
			//	
			//	// ВРЕМЕННО
			//	ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
			//	"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС +
			//	?(ПараметрыОповещения.Состояние.Отменено,
				//НСтр("ru='Отменено проведение встречи: ""';
				//|en='Carrying out of a meeting are cancel: ""'")
			//															 ,НСтр("ru='Завершено проведение встречи: ""';en='Carrying out of a meeting is completed: ""'")) + 
			//	СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
				//+ НСтр("ru='"" начало в';en='"" starts at'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
				//"ДФ='дд.ММ.гг ЧЧ:мм'");
			//	
			// Иначе
				Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстТемы = НСтр("ru='Изменена дата и место проведения встречи: ""';
						|en='Meeting date and venue has been changed: ""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """";
					
					ТекстСодержания =	НСтр("ru='Изменена дата и место проведения встречи: ""';
						|en='Meeting date and venue has been changed: ""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """" + Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд ММММ'") + НСтр("ru=' с'") + " " 
											+ 
																 Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='ЧЧ-мм'") + НСтр("ru=' до';en=' to'") + " " +
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='ЧЧ-мм'") + 
																 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата) = НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия), "", " " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд ММММ'; ДЛФ=DD")) + Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место) + Символы.ПС;
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
					
					ТекстТемы = НСтр("ru='Изменена дата проведения встречи: ""';en='Meeting date has been changed: ""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """";
					
					ТекстСодержания =	НСтр("ru='Изменена дата проведения встречи: ""';en='Meeting date has been changed: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """" 
						+ Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд ММММ'") + НСтр("ru=' с'") + " " 
											+ 
																 Формат(ПараметрыОповещения.Предмет.Дата, "ДФ='ЧЧ-мм'") + НСтр("ru=' до';en=' to'") + " " + 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='ЧЧ-мм'") + 
																 ?(НачалоДня(ПараметрыОповещения.Предмет.Дата) = НачалоДня(ПараметрыОповещения.Предмет.ОкончаниеМероприятия),
																 	 "", " " + Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд ММММ'; ДЛФ=DD")) 
																 	+ Символы.ПС;
										
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстТемы = НСтр("ru='Изменено место проведения встречи: ""';en='Meeting venue has been changed:""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """";
					
					ТекстСодержания =	НСтр("ru='Изменено место проведения встречи: ""';en='Meeting venue has been changed:""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) 
						+ """" 
						+ Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место) + Символы.ПС;
					
				КонецЕсли;
				
				ИнформацияОтветственного = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъектаДляОповещений(ПараметрыОповещения.Предмет.Ответственный
																											, Новый Структура("Телефон, Почта",
																											Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
																											Справочники.ВидыКонтактнойИнформации.EmailПользователя));
				
				ТекстСодержания = ТекстСодержания + НСтр("ru='Ответственный:';en='Responsible:'") + " " 
					+ ПараметрыОповещения.Предмет.Ответственный;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Почта) Тогда
					ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб + "E-mail: " + СокрЛП(ИнформацияОтветственного.Почта);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияОтветственного.Телефон) Тогда
					ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.Таб 
						+ НСтр("ru='Телефон:';en='Phone:'") + " " 
						+ СокрЛП(ИнформацияОтветственного.Телефон);
				КонецЕсли;
								
				// ВРЕМЕННО
				ТекстСодержания = ТекстСодержания + Символы.ПС + Символы.ПС +
				"++++++++++++++++++++++++++ ТЕКСТ НАПОМИНАНИЯ И СМС +++++++++++++++++++++++++++++++++" + Символы.ПС;
				
				Если ПараметрыОповещения.Состояние.ИзмененаДата И ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания  = ТекстСодержания 
						+ НСтр("ru='Изменена дата и место проведения встречи: ""';en='Meeting date and venue has been changed: ""'") 
						+ СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд.ММ.гг ЧЧ:мм'") + " - " 
											+ 

																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд.ММ.гг ЧЧ:мм'") + Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
					
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененаДата Тогда
					
					ТекстСодержания  = ТекстСодержания 
						+ НСтр("ru='Изменена дата проведения встречи: ""';en='Meeting date has been changed: ""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
										НСтр("ru='Когда:';en='When:'") + " " + Формат(ПараметрыОповещения.Предмет.Дата,
											 "ДФ='дд.ММ.гг ЧЧ:мм'") + " - " 
											+ 
																 Формат(ПараметрыОповещения.Предмет.ОкончаниеМероприятия, "ДФ='дд.ММ.гг ЧЧ:мм'");
										
				ИначеЕсли ПараметрыОповещения.Состояние.ИзмененоМесто Тогда
					
					ТекстСодержания  = ТекстСодержания 
						+ НСтр("ru='Изменено место проведения встречи: ""';en='Meeting venue has been changed:""'") + СокрЛП(Строка(ПараметрыОповещения.Предмет.Тема)) + """"  + Символы.ПС +
										НСтр("ru='Место проведения:';en='location:'") + " " + СокрЛП(ПараметрыОповещения.Предмет.Место);
					
				КонецЕсли;
			// КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Тема, Содержание", ТекстТемы, ТекстСодержания);
	
КонецФункции

Функция СформироватьСписокУчастниковСобытияСтрокой(Событие)
	
	СписокУчастников = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Событие);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_МероприятиеСторонниеЛица.Партнер КАК Партнер,
	|	CRM_МероприятиеСторонниеЛица.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ИСТИНА КАК СтороннееЛицо
	|ИЗ
	|	Документ.CRM_Взаимодействие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|ГДЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_МероприятиеСвоиЛица.Лицо,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка),
	|	ЛОЖЬ
	|ИЗ
	|	Документ.CRM_Взаимодействие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	|ГДЕ
	|	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ СписокУчастников = "" Тогда
			СписокУчастников = СписокУчастников + "," + Символы.ПС;
		КонецЕсли;
		
		Если Выборка.СтороннееЛицо И ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда
			СписокУчастников = СписокУчастников + Выборка.КонтактноеЛицо;
		Иначе
			СписокУчастников = СписокУчастников + Выборка.Партнер;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокУчастников;
	
КонецФункции

Функция ПолучитьТелоТекстаПисьма()
	
	ТекстШаблона = "
	|<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
	|<meta name=""format-detection"" content=""telephone=no"" />
	|<style type=""text/css"">
	|body{margin:0;padding:8px;overflow:auto;width:100%;height:100%;}
	|p{line-height:1.15;margin:0;}
	|ol,ul{margin-top:0;margin-bottom:0;}
	|img{border:none;}
	|</style>
	|</head>
	|<body><p>%1
	|</p></body>
	|</html>";
	
	Возврат ТекстШаблона;
	
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция ПолучитьПредставлениеПредметаДляОповещения(Предмет, РасширенноеПредставление = Ложь)
	Представление = "";
	
	ПредметМетаданные = Предмет.Метаданные();
	СинонимМетаданные = ПредметМетаданные.РасширенноеПредставлениеОбъекта;
	Если Не ЗначениеЗаполнено(СинонимМетаданные) Тогда
		СинонимМетаданные = ПредметМетаданные.Синоним;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СинонимМетаданные) Тогда
		Представление = СинонимМетаданные;
		Попытка
			НомерПредмета = СокрЛП(Предмет.Номер);
		
		Исключение	НомерПредмета = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(НомерПредмета) Тогда
			Представление = Представление + " №" + НомерПредмета;
		КонецЕсли;
		
		Попытка
			ДатаПредмета = Предмет.Дата;
		
		Исключение	ДатаПредмета = Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(ДатаПредмета) Тогда
			Представление = Представление + НСтр("ru=' от';en=' from'") + " " + Формат(Предмет.Дата, "ДФ ='дд.ММ.гггг ЧЧ:мм'");
		КонецЕсли;
	Иначе
		Представление = Строка(Предмет);
	КонецЕсли;
	
	Если РасширенноеПредставление Тогда
		Если ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			ТемаПредмета = Предмет.Наименование;
		Иначе
			Попытка
				ТемаПредмета = Предмет.Тема;
			
			Исключение	ТемаПредмета = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТемаПредмета) Тогда
			ЧислоСтрок = СтрЧислоСтрок(ТемаПредмета);
			ПерваяСтрокаТемы = "";
			
			Для НомерСтроки = 1 По ЧислоСтрок Цикл
				Стр = СтрПолучитьСтроку(ТемаПредмета, НомерСтроки);
				Если ЗначениеЗаполнено(Стр) Тогда
					ПерваяСтрокаТемы = Стр;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПерваяСтрокаТемы) Тогда
				Если СтрДлина(ПерваяСтрокаТемы) > 100 Тогда
					ПерваяСтрокаТемы = Лев(ПерваяСтрокаТемы, 97) + "...";
				КонецЕсли;
				Представление = Представление + ": " + ПерваяСтрокаТемы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

// Вспомогательная функция, используется в функции СформироватьТекстТемыИСодержанияОповещения().
//
Функция СформироватьТекстСодержанияДляОповещения(Предмет)
	Разделитель = ". ";
	РазделительПС = Символы.ПС;
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.СуммаДокумента) Тогда
			Текст = Текст + НСтр("ru='Сумма:';en='Amount:'") + " " + Формат(Предмет.СуммаДокумента, "ЧДЦ=2; ЧН=0");
			Если ЗначениеЗаполнено(Предмет.Валюта) Тогда
				ВалютаУправленческогоУчета = Предмет.Валюта;
			Иначе
				ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			КонецЕсли;
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				Текст = Текст + " " + Строка(ВалютаУправленческогоУчета);
			Иначе
				Текст = Текст + " " + НСтр("ru='руб.';en='rub.'");
			КонецЕсли;
		КонецЕсли;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ИмяРеквизитаПартнер = "Партнер";	
		Иначе
			ИмяРеквизитаПартнер = "Клиент";
		КонецЕсли;				
		Если ЗначениеЗаполнено(Предмет[ИмяРеквизитаПартнер]) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Строка(Предмет[ИмяРеквизитаПартнер]);
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.КонтактноеЛицо) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), ?(ЗначениеЗаполнено(Предмет[ИмяРеквизитаПартнер]), ",
				| ", Разделитель), "");
			Текст = Текст + Строка(Предмет.КонтактноеЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.CRM_Примечание) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.CRM_Примечание;
		КонецЕсли;
		
		Возврат Текст;
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru='Тема:';en='Subject:'") + " " + Предмет.Тема;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru='Тема:';en='Subject:'") + " " + Предмет.Тема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Текст) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Лев(Предмет.Текст, 100);
			Если СтрДлина(Предмет.Текст) > 100 Тогда
				Текст = Текст + "...";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru='Тема:';en='Subject:'") + " " + Предмет.Тема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Текст) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Лев(Предмет.Текст, 100);
			Если СтрДлина(Предмет.Текст) > 100 Тогда
				Текст = Текст + "...";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.ТекстСообщения) Тогда
			Текст = Текст + Предмет.ТекстСообщения;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Тема) Тогда
			Текст = Текст + НСтр("ru='Тема:';en='Subject:'") + " " + Предмет.Тема;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Комментарий) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Комментарий;
		КонецЕсли;
		
		Возврат Текст;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Текст = "";
		Если ЗначениеЗаполнено(Предмет.Наименование) Тогда
			Текст = Текст + НСтр("ru='Тема:';en='Subject:'") + " " + Предмет.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Предмет.Партнер) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Строка(Предмет.Партнер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Сумма) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + НСтр("ru='Сумма:';en='Amount:'") + " " + Формат(Предмет.Сумма, "ЧДЦ=2; ЧН=0");
			
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				Текст = Текст + " " + Строка(ВалютаУправленческогоУчета);
			Иначе
				Текст = Текст + " " + НСтр("ru='руб.';en='rub.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Ответственный) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + НСтр("ru='Ответственный:';en='Responsible:'") + " " + Строка(Предмет.Ответственный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет.Описание) Тогда
			Текст = Текст + ?(ЗначениеЗаполнено(Текст), РазделительПС, "");
			Текст = Текст + Предмет.Описание;
		КонецЕсли;
		
		Возврат Текст;
	Иначе
		Возврат Строка(Предмет);
		
	КонецЕсли;
КонецФункции

Функция ПолучитьПараметрыНастроекОповещений()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("CRM_ИспользоватьНапоминания", Константы.CRM_ИспользоватьНапоминания.Получить());
	СтруктураПараметров.Вставить("CRM_ИспользоватьОповещенияЭлектроннаяПочта",
		 Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить());
	СтруктураПараметров.Вставить("CRM_ИспользоватьОповещенияСМС", Константы.CRM_ИспользоватьОповещенияСМС.Получить());
	СтруктураПараметров.Вставить("CRM_ИспользоватьОповещенияМессенджер", Константы.CRM_ИспользоватьОповещенияМессенджер.Получить());
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьНастройкиОповещенийПользователей(Пользователи)
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
    // В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеНастройки.Пользователь КАК Пользователь,
	|	ПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	|	ПользовательскиеНастройки.Периодичность КАК Периодичность,
	|	ПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
	|	ВЫБОР
	|		КОГДА ПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА ПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|		КОГДА ПользовательскиеНастройки.Мессенджер
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	|	КОНЕЦ КАК Канал
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК ПользовательскиеНастройки
	|ГДЕ
	|	ПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_1)
	|	И ПользовательскиеНастройки.Пользователь В(&Пользователи)
	|	И (ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ ПользовательскиеНастройки.СМС
	|			ИЛИ ПользовательскиеНастройки.Мессенджер
	|			ИЛИ ПользовательскиеНастройки.Напоминание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПользовательскиеНастройки.Пользователь,
	|	ПользовательскиеНастройки.СрокОповещения,
	|	ПользовательскиеНастройки.Периодичность,
	|	ПользовательскиеНастройки.ВидОповещения,
	|	ВЫБОР
	|		КОГДА ПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА ПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|		КОГДА ПользовательскиеНастройки.Мессенджер
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК ПользовательскиеНастройки
	|ГДЕ
	|	ПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_2)
	|	И ПользовательскиеНастройки.Пользователь В(&Пользователи)
	|	И (ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ ПользовательскиеНастройки.СМС
	|			ИЛИ ПользовательскиеНастройки.Мессенджер
	|			ИЛИ ПользовательскиеНастройки.Напоминание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПользовательскиеНастройки.Пользователь,
	|	ПользовательскиеНастройки.СрокОповещения,
	|	ПользовательскиеНастройки.Периодичность,
	|	ПользовательскиеНастройки.ВидОповещения,
	|	ВЫБОР
	|		КОГДА ПользовательскиеНастройки.Напоминание
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
	|		КОГДА ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
	|		КОГДА ПользовательскиеНастройки.СМС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
	|		КОГДА ПользовательскиеНастройки.Мессенджер
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Мессенджер)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК ПользовательскиеНастройки
	|ГДЕ
	|	ПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.Оповещение_3)
	|	И ПользовательскиеНастройки.Пользователь В(&Пользователи)
	|	И (ПользовательскиеНастройки.ЭлектроннаяПочта
	|			ИЛИ ПользовательскиеНастройки.СМС
	|			ИЛИ ПользовательскиеНастройки.Мессенджер
	|			ИЛИ ПользовательскиеНастройки.Напоминание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	ВидОповещения";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Оповестить автора поручения о выполнении взаимодействия.
//
// Параметры:
//  Предмет	 	- Документ взаимодействия 
//  Просрочено	- Булево - Признак просроченной задачи.
//
Процедура ОповеститьАвтораПорученияОВыполненииВзаимодействия(Предмет, Просрочено = Ложь)
	
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	
	Если НЕ Просрочено Тогда
		ТекстСодержания = Формат(Предмет.ДатаИсполнения, ?(ИспользоватьДатуИВремяВСрокахЗадач,
			 "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) 
			+ 
		НСтр("ru='  Выполнено взаимодействие: ""';en=' Completed interaction: ""'") + Строка(Предмет) + НСтр("ru='""  Ответственный:'") 
			+ " " 
			+ Предмет.Ответственный;
	Иначе
		ТекстСодержания = НСтр("ru='Истек срок выполнения взаимодействия ""';en='Expiration of the interaction ""'") +
		Строка(Предмет) + НСтр("ru='"" срок:';en='"" term:'") + " " +
		Формат(Предмет.ПлановаяДатаЗавершение, ?(ИспользоватьДатуИВремяВСрокахЗадач,
			 "ДФ='дд.ММ.гг ЧЧ:мм'", "ДФ='дд.ММ.гг'")) +
		НСтр("ru=' Ответственный:';en=' executor:'") + " " + Предмет.Ответственный;
	КонецЕсли;
		
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Пользователь"	, Предмет.Ответственный);
	ПараметрыНапоминания.Вставить("ДатаОповещения"	, ТекущаяДатаСеанса());
	ПараметрыНапоминания.Вставить("СрокОповещения"	, ТекущаяДатаСеанса());
	ПараметрыНапоминания.Вставить("Периодичность"	, Перечисления.CRM_ПериодичностьОповещений.ПустаяСсылка());
	ПараметрыНапоминания.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
	Если НЕ Просрочено Тогда
		ПараметрыНапоминания.Вставить("ВидОповещения"	, Справочники.CRM_ВидыОповещений.ПустаяСсылка());
	Иначе
		ПараметрыНапоминания.Вставить("ВидОповещения"	,
			 Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи);
	КонецЕсли;
	CRM_НапоминанияСервер.ДобавитьНапоминание(Предмет, ТекстСодержания, ПараметрыНапоминания);
	
КонецПроцедуры

// Удаляет из параметров оповещения строки с недействительными пользователями
//
// Параметры:
//  ПараметрыОповещения - Массив структур с параметрами для создания оповещений.
//
Процедура ИсключитьНедействительныхПолучателей(ПараметрыОповещения)
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Для Каждого Элемент Из ПараметрыОповещения Цикл
		НоваяСтрока = Получатели.Добавить();
		НоваяСтрока.Получатель = Элемент.Получатель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Получатели.Получатель КАК Получатель
		|ПОМЕСТИТЬ втПолучатели
		|ИЗ
		|	&Получатели КАК Получатели
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Получатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПолучатели.Получатель КАК Получатель
		|ИЗ
		|	втПолучатели КАК втПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО втПолучатели.Получатель = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Недействителен";
	
	Запрос.УстановитьПараметр("Получатели", Получатели);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НедействительныеПользователи = РезультатЗапроса.Выгрузить();
		Индекс = ПараметрыОповещения.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			
			Строка = ПараметрыОповещения[Индекс];
			Если НедействительныеПользователи.Найти(Строка.Получатель) <> Неопределено Тогда
				ПараметрыОповещения.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстПоВидуСобытия(ВидСобытия, ЭтоНовоеСобытие)
	
	Если ЭтоНовоеСобытие Тогда
		Если ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок Тогда
			Текст = НСтр("ru='Запланирован '") + ВидСобытия;
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
			Текст = НСтр("ru='Запланирована '") + ВидСобытия;
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее Тогда
			Текст = НСтр("ru='Запланировано мероприятие'");
		Иначе
			Текст = НСтр("ru='Запланировано '") + ВидСобытия;
		КонецЕсли;
	Иначе
		Если ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок Тогда
			Текст = НСтр("ru='Изменена дата телефонного звонка '");
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
			Текст = НСтр("ru='Изменена дата личной встречи '");
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо Тогда
			Текст = НСтр("ru='Изменена дата почтового письма '");
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо Тогда
			Текст = НСтр("ru='Изменена дата электронного письма '");
		Иначе
			Текст = НСтр("ru='Изменена дата мероприятия '");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ДатыСобытияТекстом(ДатаНачала, ДатаОкончания, СтароеЗначение = '00010101')
	
	//ДеньНачалаИОкончанияСовпадает = (НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания));
	//ГодНачалаСовпадаетСТекущим = (Год(ДатаНачала) = Год(ТекущаяДатаСеанса()));
	//ГодОкончанияСовпадаетСТекущим = (Год(ДатаОкончания) = Год(ТекущаяДатаСеанса()));
	//НаВесьДень = (НачалоДня(ДатаОкончания) = ДатаНачала)
	//	И (КонецДня(ДатаНачала) = ДатаОкончания);
	//	
	//Текст = Формат(ДатаНачала, "ДФ='дддд, дд ММММ '")
	//	+ ?(ГодНачалаСовпадаетСТекущим, "", Формат(ДатаНачала, "ДФ='гггг '"));
	//
	//Если НаВесьДень Тогда
	//	Текст = Текст + НСтр("ru = 'на весь день'");
	//Иначе
	//	Текст = Текст 
	//		+ НСтр("ru = 'с '") 
	//		+ Формат(ДатаНачала,"ДФ='ЧЧ:мм '")
	//		+ НСтр("ru = 'до '") 
	//		+ ?(ДеньНачалаИОкончанияСовпадает, "", Формат(ДатаОкончания, "ДФ='дддд, дд ММММ, '"))
	//		+ ?(ГодОкончанияСовпадаетСТекущим, "", Формат(ДатаОкончания, "ДФ='гггг '"))
	//		+ Формат(ДатаОкончания,"ДФ='ЧЧ:мм'");
	//КонецЕсли;
	
	ДеньНачалаИОкончанияСовпадает = (НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания));
	ГодНачалаСовпадаетСТекущим = (Год(ДатаНачала) = Год(ТекущаяДатаСеанса()));
	ГодОкончанияСовпадаетСТекущим = (Год(ДатаОкончания) = Год(ТекущаяДатаСеанса()));
	НаВесьДень = (НачалоДня(ДатаОкончания) = ДатаНачала)
		И (КонецДня(ДатаНачала) = ДатаОкончания);
	
	ДатаНачалаТекстом = Формат(ДатаНачала, "ДФ='дддд, дд ММММ '")
		+ ?(ГодНачалаСовпадаетСТекущим, "", Формат(ДатаНачала, "ДФ='гггг '"));
		
	ВремяНачалаТекстом = Формат(ДатаНачала,"ДФ='ЧЧ:мм '");
	
	Если НаВесьДень Тогда
		ДатаОкончанияТекстом = НСтр("ru = 'на весь день'");
		ВремяОкончанияТекстом = "";
	Иначе
		ДатаОкончанияТекстом = ?(ДеньНачалаИОкончанияСовпадает, "", Формат(ДатаОкончания, "ДФ='дддд, дд ММММ, '"))
			+ ?(ГодОкончанияСовпадаетСТекущим, "", Формат(ДатаОкончания, "ДФ='гггг '"));
		ВремяОкончанияТекстом = Формат(ДатаОкончания,"ДФ='ЧЧ:мм'");
	КонецЕсли;
	
	СтароеЗначениеДатыТекстом = Формат(СтароеЗначение, "ДФ='дддд, дд ММММ '")
		+ ?(ГодНачалаСовпадаетСТекущим, "", Формат(СтароеЗначение, "ДФ='гггг '"));
	СтароеЗначениеВремениТекстом = Формат(СтароеЗначение, "ДФ='ЧЧ:мм'");
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачала", ДатаНачалаТекстом);
	Результат.Вставить("ВремяНачала", ВремяНачалаТекстом);
	Результат.Вставить("ДатаОкончания", ДатаОкончанияТекстом);
	Результат.Вставить("ВремяОкончания", ВремяОкончанияТекстом);
	Результат.Вставить("СтароеЗначениеДаты", СтароеЗначениеДатыТекстом);
	Результат.Вставить("СтароеЗначениеВремени", СтароеЗначениеВремениТекстом);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивЕжегодныхСобытийКлиента()
	
	ЕжегодныеСобытия = Новый Массив;
	
	Элемент = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("День рождения контактного лица", Истина);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЕжегодныеСобытия.Добавить(Элемент);
	КонецЕсли;
	
	Элемент = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("День рождения компании", Истина);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЕжегодныеСобытия.Добавить(Элемент);
	КонецЕсли;
	
	Элемент = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("Профессиональный праздник компании", Истина);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЕжегодныеСобытия.Добавить(Элемент);
	КонецЕсли;
	
	Элемент = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию("Профессиональный праздник контактного лица",
		Истина);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ЕжегодныеСобытия.Добавить(Элемент);
	КонецЕсли;
	
	Возврат ЕжегодныеСобытия;
	
КонецФункции

#КонецОбласти

#КонецОбласти
