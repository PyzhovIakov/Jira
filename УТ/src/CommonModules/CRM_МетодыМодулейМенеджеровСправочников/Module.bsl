////////////////////////////////////////////////////////////////////////////////
// CRM методы модулей менеджеров справочников
//  
// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.
// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОпределениеФормОбъектов

// Процедура - Обработка получения форм объектов CRM
//
// Параметры:
//  Источник				 - СправочникСсылка - Источник. 
//  ВидФормы				 - Строка - Имя стандартной формы. 
//  Параметры				 - Струтура	 - Параметры формы. 
//  ВыбраннаяФорма			 - Строка, ФормаКлиентскогоПриложения - Содержит имя открываемой формы или объект метаданных Форма.
//  ДополнительнаяИнформация - Струтура	 - Дополнительная информация открытия формы.
//  СтандартнаяОбработка	 - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияФормОбъектовCRM(Источник, ВидФормы, Параметры, ВыбраннаяФорма,
	 ДополнительнаяИнформация,
	 СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("Ключ") Тогда
		ВыбраннаяФорма = Неопределено;
	КонецЕсли;
	
	#Область ПолученияФормШаблоныАнкет
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ШаблоныАнкет") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.ШаблоныАнкет.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормВидыКонтактнойИнформации
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ВидыКонтактнойИнформации") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.ВидыКонтактнойИнформации.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормПользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Пользователи") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			
			Если Параметры.Свойство("РасширенныйПодбор") И Параметры.РасширенныйПодбор Тогда
				ВыбраннаяФорма = "Справочник.Пользователи.Форма.ФормаСписка";
			Иначе
				ВыбраннаяФорма = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормЗначенияСвойчтвОбъектов
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ЗначенияСвойствОбъектов") Тогда
		
		Если ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.ЗначенияСвойствОбъектов.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормУчетныеЗаписиЭлектроннойПочты
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Если ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВидФормы = "ФормаЭлемента" Тогда
			
			ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
			Если Не Параметры.Свойство("ЗначениеКопирования")
			И (Не Параметры.Свойство("Ключ") Или Не РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(Параметры.Ключ)) Тогда
				ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ПомощникНастройкиУчетнойЗаписи";
			Иначе
				ВыбраннаяФорма = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента";
			КонецЕсли;	
			СтандартнаяОбработка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПапкиЭлектронныхПисем
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ПапкиЭлектронныхПисем") Тогда
		
		Если ВидФормы = "ФормаСписка" Тогда
			
			ВыбраннаяФорма = "Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			
			ВыбраннаяФорма = "Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
			
			ВыбраннаяФорма = "Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормКонтактныеЛицаПартнеров
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.КонтактныеЛицаПартнеров") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлементаНовая";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормБизнесРегионы
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.БизнесРегионы") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы",
				 "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_Модуль_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы",
				 "CRM_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы",
				 "CRM_Модуль_ФормаСписка") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_Модуль_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы",
				 "CRM_ФормаСписка") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.БизнесРегионы.Формы", "CRM_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Справочник.БизнесРегионы.Форма.CRM_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормМаркетинговыеМероприятия
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.МаркетинговыеМероприятия") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.МаркетинговыеМероприятия.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормПроекты
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Проекты")
		И Не CRM_ОбщегоНазначенияПовтИсп.ЭтоУХ() Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Проекты.Формы",
				 "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_Модуль_ФормаЭлемента";
			Иначе
				ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаЭлемента";
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаГруппы" Тогда 
			ВыбраннаяФорма = "Справочник.Проекты.Форма.CRM_ФормаГруппы";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПолученияФормСтруктураПредприятия
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.СтруктураПредприятия") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.СтруктураПредприятия.Формы",
				 "CRM_Модуль_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_Модуль_ФормаЭлемента";
			Иначе
				ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаЭлемента";
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда 
			ВыбраннаяФорма = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаВыбора";
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область ПолученияФормРолиИсполнителей
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.РолиИсполнителей") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.РолиИсполнителей.Формы",
				 "CRM_ФормаЭлемента") Тогда
				ВыбраннаяФорма = "Справочник.РолиИсполнителей.Форма.CRM_ФормаЭлемента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти

	#Область Партнеры
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Партнеры") Тогда
		
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				
			Если ВидФормы = "ФормаОбъекта" Тогда
				
				Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
					
					ИспользоватьМастерВводаНового =
						CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента");
					ИспользоватьФормуУТ =
						CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьТиповуюФормуРегистрацииНовогоПартнера");
					Если ИспользоватьМастерВводаНового Тогда
						Если ИспользоватьФормуУТ Тогда
							ВыбраннаяФорма = "ПомощникНового";
						Иначе
							ВыбраннаяФорма = "CRM_Модуль_ФормаБыстрогоВвода";
						КонецЕсли;
					Иначе
						ВыбраннаяФорма = "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
					КонецЕсли;
					
					СтандартнаяОбработка = Ложь;
					
				Иначе
					
					Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
						 "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая") Тогда
						ВыбраннаяФорма = "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
						СтандартнаяОбработка = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВидФормы = "ФормаСписка" Тогда
				
				Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
					 "CRM_Модуль_ФормаСписка") Тогда 
					Если CRM_ОбщегоНазначенияСервер.ЭтоМобильныйКлиент() Тогда
						ВыбраннаяФорма = "CRM_Модуль_ФормаСпискаМобильныйКлиент";
					Иначе
						ВыбраннаяФорма = "CRM_Модуль_ФормаСписка";
					КонецЕсли;
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ВидФормы = "ФормаОбъекта" Тогда
				
				ИспользоватьМастерВводаНового =
					CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента");
				
				Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора И ИспользоватьМастерВводаНового Тогда
					ВыбраннаяФорма = "CRM_ФормаБыстрогоВвода";
				Иначе
					ВыбраннаяФорма = "CRM_ФормаЭлементаНовая";
				КонецЕсли;
				СтандартнаяОбработка = Ложь;
				
			ИначеЕсли ВидФормы = "ФормаСписка" Тогда
				
				Если CRM_ОбщегоНазначенияСервер.ЭтоМобильныйКлиент() Тогда
					ВыбраннаяФорма = "CRM_ФормаСпискаМобильныйКлиент";
				Иначе
					ВыбраннаяФорма = "CRM_ФормаСписка";
				КонецЕсли;
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область Контрагенты
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ТипЗнч(Источник) = Тип("СправочникМенеджер." + "Контрагенты") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если ПолучитьФункциональнуюОпцию("" + "ИспользоватьПартнеровКакКонтрагентов") Тогда
				СтандартнаяОбработка = Ложь;
				Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
					
					МодульПартнерыИКонтрагентыВызовСервера =
						CRM_ОбщегоНазначенияСервер.ОбщийМодуль("ПартнерыИКонтрагентыВызовСервера");
					Если МодульПартнерыИКонтрагентыВызовСервера <> Неопределено Тогда
						МодульПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаДляОткрытияФормыПартнера(Параметры);
					КонецЕсли;
					
					ВыбраннаяФорма = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
				Иначе
					ИспользоватьМастерВводаНового =
						CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента");
					ИспользоватьФормуУТ =
						CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьТиповуюФормуРегистрацииНовогоПартнера");
					Если ИспользоватьМастерВводаНового Тогда		
						Если ИспользоватьФормуУТ Тогда
							ВыбраннаяФорма = "Справочник.Партнеры.Форма.ПомощникНового";
						Иначе
							ВыбраннаяФорма = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаБыстрогоВвода";
						КонецЕсли;
					Иначе
						ВыбраннаяФорма = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Заметки
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Заметки") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область МакетыПечатныхФорм
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.МакетыПечатныхФорм") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.МакетыПечатныхФорм.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПравилаОбработкиЭлектроннойПочты
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.ПравилаОбработкиЭлектроннойПочты") Тогда
		
		Если ВидФормы = "ФормаОбъекта" Тогда
			ВыбраннаяФорма = "Справочник.ПравилаОбработкиЭлектроннойПочты.Форма.CRM_ФормаЭлемента";
			СтандартнаяОбработка = Ложь;
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда 
			ВыбраннаяФорма = "Справочник.ПравилаОбработкиЭлектроннойПочты.Форма.CRM_ФормаСписка";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	Если ВыбраннаяФорма = Неопределено И Параметры.Свойство("Ключ") Тогда
		ВыбраннаяФорма = "Справочник." + Параметры.Ключ.Метаданные().Имя + "." + ВидФормы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОпределениеФормОбъектов

#Область Справочник_СтруктураПредприятия

// Функция - Получить все подразделения родители
//
// Параметры:
//  Подразделение				 - СправочникСсылка	- Подразделение. 
//  ВключатьСвоеПодразделение	 - Булево - Включить в возвращаемые подразделения свое.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка - Массив подразделений.
//
Функция ПолучитьВсеПодразделенияРодители(Подразделение, ВключатьСвоеПодразделение = Истина) Экспорт
	МассивПодразделений = Новый Массив;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ВключатьСвоеПодразделение Тогда
			// Добавляем подразделение пользователя.
			МассивПодразделений.Добавить(Подразделение);
		КонецЕсли;	
		// Добавляем все вышестоящие подразделения.
		ПодразделениеРодитель = Подразделение;
		Пока ЗначениеЗаполнено(CRM_УправлениеДоступомСервер.CRM_ВышестоящееПодразделение(ПодразделениеРодитель)) Цикл
			ПодразделениеРодитель = ПодразделениеРодитель.Родитель;
			МассивПодразделений.Добавить(ПодразделениеРодитель);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивПодразделений;		
КонецФункции // ПолучитьВсеПодразделенияРодители()

// Функция возвращает подчиненные по иерерахии подразделения.
//
// Параметры:
//  ПодраздениеРодитель	 - СправочникСсылка	 - Подразделение.
//  МассивПодразделений	 - Массив - формируемый рекурсивно массив.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка - Массив подразделений.
//
Функция ПолучитьПодчиненныеПодразделенияПользователя(ПодраздениеРодитель, МассивПодразделений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", ПодраздениеРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПодразделений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		ПолучитьПодчиненныеПодразделенияПользователя(ВыборкаДетальныеЗаписи.Ссылка, МассивПодразделений);
	КонецЦикла;
	
	Возврат МассивПодразделений; 
		
КонецФункции // ПолучитьПодчиненныеПодразделенияПользователя()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаПолученияДанныхВыбора

Процедура ОбработкаПолученияДанныхВыбора(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	#Область Пользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.Пользователи") Тогда
		
		Если Параметры.Свойство("ТолькоДоступные") И Параметры.ТолькоДоступные Тогда
			ДанныеВыбора = ПолучитьСписокДоступныхПользователей(, Параметры.СтрокаПоиска);
			СтандартнаяОбработка = Ложь;
		ИначеЕсли Параметры.Свойство("Подразделение") И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			ДанныеВыбора = ПолучитьСписокПользователейПодразделения(Параметры.Подразделение, Параметры.СтрокаПоиска);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		ПолучитьСписокПользователейПоПартнеру(Параметры.СтрокаПоиска, Параметры, ДанныеВыбора, СтандартнаяОбработка);
		
		ПолучитьПредставленияПользователей(Параметры.СтрокаПоиска, Параметры, ДанныеВыбора, СтандартнаяОбработка);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Пользователи
	Если ТипЗнч(Источник) = Тип("СправочникМенеджер.СтруктураПредприятия") Тогда
		
		Если Параметры.Свойство("ТолькоДоступные") И Параметры.ТолькоДоступные Тогда
			ДанныеВыбора = ПолучитьСписокДоступныхПодразделений(, Параметры.СтрокаПоиска);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Процедура ПолучитьСписокПользователейПоПартнеру(СтрокаПоиска, Параметры, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	МодульУправлениеДоступомУровниДоступа = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом = Неопределено Или МодульУправлениеДоступомУровниДоступа = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВключеныОграниченияДоступа = МодульУправлениеДоступом.ИспользоватьОграниченияДоступа();
	Если Не ВключеныОграниченияДоступа Тогда
		Возврат;
	КонецЕсли;
	
	Партнер = Неопределено;
	КонтактноеЛицо = Неопределено;
	КонтактВзаимодействия = Неопределено;
	Параметры.Свойство("Партнер", Партнер);
	Параметры.Свойство("КонтактноеЛицо", КонтактноеЛицо);
	Параметры.Свойство("КонтактВзаимодействия", КонтактВзаимодействия);
	Если ЗначениеЗаполнено(Партнер) ИЛИ ЗначениеЗаполнено(КонтактноеЛицо)
		 ИЛИ ЗначениеЗаполнено(КонтактВзаимодействия) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(КонтактВзаимодействия) Тогда
			Если ТипЗнч(КонтактВзаимодействия) = Тип("СправочникСсылка.Партнеры") Тогда
				Партнер = КонтактВзаимодействия;
			ИначеЕсли ТипЗнч(КонтактВзаимодействия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Партнер = КонтактВзаимодействия.Владелец;
				КонтактноеЛицо = КонтактВзаимодействия;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений;
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	Пользователи.Ссылка КАК Ссылка
			                      |ИЗ
			                      |	Справочник.Пользователи КАК Пользователи
			                      |ГДЕ
			                      |	Пользователи.Наименование ПОДОБНО &СтрокаПоиска");
			Ном = 1;
			Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
				Запрос.Текст = Запрос.Текст + "
				| И Пользователи." + ЭлементОтбора.Ключ + " = &ЗначениеОтбора" + Строка(Ном);
				Запрос.УстановитьПараметр("ЗначениеОтбора" + Строка(Ном), ЭлементОтбора.Значение);
			КонецЦикла;
			Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
			ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		Кол = ДанныеВыбора.Количество();
		Для н = 1 По Кол Цикл
			Пользователь = ДанныеВыбора[Кол - н].Значение;
			Если ЗначениеЗаполнено(Партнер)
				 И МодульУправлениеДоступомУровниДоступа.РежимДоступаКПартнерам(Партнер, Пользователь, "И") < 1 Тогда
				ДанныеВыбора.Удалить(Кол - н);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(КонтактноеЛицо)
				 И МодульУправлениеДоступомУровниДоступа.РежимДоступаККонтактам(КонтактноеЛицо, Пользователь) < 1 Тогда
				ДанныеВыбора.Удалить(Кол - н);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПредставленияПользователей(СтрокаПоиска, Параметры, ДанныеВыбора, СтандартнаяОбработка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка КАК Ссылка,
	                      |	Пользователи.Наименование КАК Наименование,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ОтсутствиеСотрудников.Сотрудник ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Отсутствует,
	                      |	CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник КАК Замещающий,
	                      |	CRM_ОтсутствиеСотрудников.ДатаНачала КАК НачалоОтсутствия,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	                      |			ТОГДА ""<Дата не указана>""
	                      |		ИНАЧЕ CRM_ОтсутствиеСотрудников.ДатаОкончания
	                      |	КОНЕЦ КАК ОкончаниеОтсутствия
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |		ПО (CRM_ОтсутствиеСотрудников.Сотрудник = Пользователи.Ссылка)
	                      |			И (CRM_ОтсутствиеСотрудников.ДатаНачала <= &ПланируемаяДата)
	                      |			И (CRM_ОтсутствиеСотрудников.ДатаОкончания >= &ПланируемаяДата
	                      |				ИЛИ CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	                      |ГДЕ
	                      |	Пользователи.Ссылка В(&ДанныеВыбора)
	                      |	И Пользователи.Наименование ПОДОБНО &СтрокаПоиска");
	Если СтандартнаяОбработка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пользователи.Ссылка В(&ДанныеВыбора)", "Истина");
		Ном = 1;
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			Запрос.Текст = Запрос.Текст + "
			| И Пользователи." + ЭлементОтбора.Ключ + " = &ЗначениеОтбора" + Строка(Ном);
			Запрос.УстановитьПараметр("ЗначениеОтбора" + Строка(Ном), ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДанныеВыбора", ДанныеВыбора);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	Если Параметры.Свойство("ПланируемаяДата") И ЗначениеЗаполнено(Параметры.ПланируемаяДата) Тогда
		Запрос.УстановитьПараметр("ПланируемаяДата", Параметры.ПланируемаяДата);
	Иначе
		Запрос.УстановитьПараметр("ПланируемаяДата", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка, ?(Выборка.Отсутствует, Выборка.Наименование + " (" 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует с %1 по %2.'"),
			Формат(Выборка.НачалоОтсутствия, "ДФ=dd.MM.yyyy"),
			Формат(Выборка.ОкончаниеОтсутствия, "ДФ=dd.MM.yyyy")) + ")", ""));
	КонецЦикла;
	ДанныеВыбора = Результат;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПолучитьСписокПользователейПодразделения(Подразделение, СтрокаПоиска)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.Подразделение В ИЕРАРХИИ(&Подразделение)
	                      |	И Пользователи.Наименование ПОДОБНО &СтрокаПоиска");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ОбработкаПолученияДанныхВыбора

#Область Справочник_ВидыКонтактнойИнформации

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление.
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других.
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// Виды контактной информации CRM
	
	// Справочник "Потенциальные клиенты".
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
		 Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
			1);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь,
			2);
	
	// Справочник "Партнеры"
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера,
						Перечисления.ТипыКонтактнойИнформации.ВебСтраница,				Истина,	Ложь,
			4);
	
	// Справочник "Партнеры" частное лицо.
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица,
		 Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
			1);
	
	// Справочник "Партнеры" юридическое лицо.
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес,
								Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Истина,
			1);
	
	// Справочник "Пользователи"
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий,
			Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
			1);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя,
		 Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
			2);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		// Справочник "Организации"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
							Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Истина,
				1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
						Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь,
				2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
							Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь,
				3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
								Перечисления.ТипыКонтактнойИнформации.Факс,						Истина, Ложь,
				4);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
							Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь,
				5);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
					Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь,
				6);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
					Перечисления.ТипыКонтактнойИнформации.Другое,					Истина, Ложь,
				7);
		
		// Справочник "Партнеры"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
								Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь,
				3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
								Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
								Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь,
				2);
		
		// Справочник "Контактные лица партнеров".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
						Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
				Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь,
				3);
		
		// Справочник "Пользователи"
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
							Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь,
				3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
							Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				4);
		
		// Справочник "Физические лица".
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,
								Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина,	Ложь,
				1);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
				Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина,	Ложь,
				2);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
					Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				3);
		CRM_УправлениеКонтактнойИнформацией.ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
					Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина,	Ложь,
				4);
		
	КонецЕсли; 
	
	// Устнавливает признак "Основной".
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_СайтПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица);
	
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	
	УстановитьПризнакОсновнойДляВКИ(Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонПользователя);
	
КонецПроцедуры // ЗаполнитьСвойстваВидовКонтактнойИнформации()

// Процедура устанавливает признак основной для переданного вида контактной информации.
//
// Параметры:
//	ВидКИ	- СправочникСсылка	- Вид контактной информации.
//
Процедура УстановитьПризнакОсновнойДляВКИ(ВидКИ)
	
	Объект = ВидКИ.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
	Объект.ОтображатьВсегда = Истина;
	Объект.Записать();
	
КонецПроцедуры // УстановитьПризнакОсновнойДляВКИ()

// Процедура устанавливает признак ОтображатьВсегда в соответствии с настройками сделанными ранее.
//
Процедура ОбработатьОтображатьВсегдаПриПереходеНаВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.УдалитьCRM_Основной КАК УдалитьCRM_Основной
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.ОтображатьВсегда <> ВидыКонтактнойИнформации.УдалитьCRM_Основной");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
		Объект.ОтображатьВсегда = Выборка.УдалитьCRM_Основной;
		Объект.Записать();
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры // УстановитьПризнакОсновнойДляВКИ()

#КонецОбласти

#Область Справочник_ВидыКонтактнойИнформации

// Процедура заполнения ролей партнеров для предопределенных элементов справочника ВидыСвязейМеждуПартнерами.
//
Процедура CRM_ЗаполнитьРолиПартнеровДляВидовСвязей() Экспорт
	
	// Заполнение ОбратноеНаименование для справочника ВидыСвязейМеждуПартнерами.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСвязейМеждуПартнерами.РольПартнера1 КАК Роль1,
	|	ВидыСвязейМеждуПартнерами.РольПартнера2 КАК Роль2,
	|	ВидыСвязейМеждуПартнерами.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыСвязейМеждуПартнерами КАК ВидыСвязейМеждуПартнерами
	|ГДЕ
	|	ВидыСвязейМеждуПартнерами.ОбратноеНаименование = """"";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ОбратноеНаименование = Выборка.Роль2 + " - " + Выборка.Роль1;
		СправочникОбъект.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_КонтактныеЛицаПартнеров

Процедура КонтактныеЛицаПартнеровЗаполнитьПоФизЛицу(КонтактноеЛицоСсылка, ФизЛицо) Экспорт
	Если ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Объект = КонтактноеЛицоСсылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(КонтактноеЛицоСсылка) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда
		Объект = КонтактноеЛицоСсылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ДатаРождения		= ФизЛицо.ДатаРождения;
	Объект.Пол				= ФизЛицо.Пол;
	Объект.CRM_Фамилия		= ФизЛицо.CRM_Фамилия;
	Объект.CRM_Имя			= ФизЛицо.CRM_Имя;
	Объект.CRM_Отчество		= ФизЛицо.CRM_Отчество;
	Объект.Наименование		= ФизЛицо.Наименование;
	
	// В случае удаления КИ из клиента, необходимо зачистить КИ и в КЛ, поэтому заводим номера строк, которые точно не
	// пустые.
	
	СписокИзмененныхСтрок = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ФизЛицо.КонтактнаяИнформация Цикл
		ТекТипКИ = Неопределено;
		ТекВидКИ = Неопределено;
		Если СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТипКИ) И ЗначениеЗаполнено(ТекВидКИ) Тогда
			НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид", ТекТипКИ, ТекВидКИ));
			НайденныеНеИзмененныеСтроки = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если СписокИзмененныхСтрок.НайтиПоЗначению(НайденнаяСтрока.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НайденныеНеИзмененныеСтроки.Добавить(НайденнаяСтрока);
			КонецЦикла;
			Если НайденныеНеИзмененныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеНеИзмененныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТаблицы, , "Вид");
					НайденнаяСтрока.Вид = ТекВидКИ;
					СписокИзмененныхСтрок.Добавить(НайденнаяСтрока.НомерСтроки);
					Прервать;
				КонецЦикла;
			Иначе
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "Вид");
				НоваяСтрока.Вид = ТекВидКИ;
				СписокИзмененныхСтрок.Добавить(НоваяСтрока.НомерСтроки);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Далее определяем строчки предопределённой КИ, которые были очищены во владельце (физ. лице), чтобы удалить их у КЛ.
	Для Каждого СтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		Если СписокИзмененныхСтрок.НайтиПоЗначению(СтрокаКИ.НомерСтроки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица 
			ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица
			ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
				Объект.КонтактнаяИнформация.Удалить(СтрокаКИ);	
		КонецЕсли;									
	КонецЦикла;	
	
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
