///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

// @strict-types
#Область ПрограммныйИнтерфейс

//Получает все сертификаты контейнера внешней компоненты Рутокен.(AddIn.BIT.EDMSRutoken)
// Параметры:
// 	ОписаниеОповещения - ОписаниеОповещения -
// 	 ОписаниеОповещения, куда передается результат чтения сертификатов
//
Процедура ПолучитьСертификаты(ОписаниеОповещения) Экспорт

	ПараметрыФормы = Новый Структура("ТекущаяОперация",
		ПредопределенноеЗначение("Перечисление.ОперацииРутокенМобильногоЭДО.ЧтениеСертификатов"));

	ОткрытьФорму("ОбщаяФорма.ПодписаниеДокументаВМобильномЭДО",
		ПараметрыФормы,,
		Истина,,,
		ОписаниеОповещения);

КонецПроцедуры

//Активирует подписание в мобильном клиенте с помощью Рутокен
//Параметры:
// ОписаниеДанных - Структура - подготовленная структура с описанием данных
//  (см.ЭлектроннаяПодписьКлиент.Подписать.ОписаниеДанных)
// Оповещение - ОписаниеОповещения - Оповещение о результате подписания
//
Процедура Подписать(ОписаниеДанных, Оповещение) Экспорт

	Контекст = Новый Структура("ОписаниеДанных, Оповещение", ОписаниеДанных, Оповещение);

	Если ОписаниеДанных.ОтборСертификатов.Количество() = 0 Тогда
		ОповеститьОЗавершенииОперации(Контекст, Истина);
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСообщения Из Контекст.ОписаниеДанных.НаборДанных Цикл

		ПрисоединенныйФайл = Неопределено;
		ИсходныеДвоичныеДанные = Неопределено;
		Если ДанныеСообщения.Свойство("ПрисоединенныйФайл", ПрисоединенныйФайл) Тогда
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ПрисоединенныйФайл);
			ДанныеСообщения["Данные"] = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ИначеЕсли ДанныеСообщения.Свойство("ИсходныеДвоичныеДанные", ИсходныеДвоичныеДанные) Тогда
			ДанныеСообщения["Данные"]= ИсходныеДвоичныеДанные;
		КонецЕсли;

	КонецЦикла;
	
	ОписаниеОповещенияОбработатьРезультатПодписания =
		Новый ОписаниеОповещения("ОбработатьРезультатПодписания", ЭтотОбъект, Контекст);
	
	Контекст.Вставить("ОписаниеОповещенияОбработатьРезультатПодписания",
		ОписаниеОповещенияОбработатьРезультатПодписания);
	
	Оповестить("ВыполнитьПодписаниеДокументаВМобильномЭДО", Контекст);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Передает полученный результат подписания для фиксации в РС ЭлектронныеПодписи
//Параметры: 
// ОписаниеДанных - Структура - подготовленная структура с описанием данных
//  (см.ЭлектроннаяПодписьКлиент.Подписать.ОписаниеДанных)
// Контекст - Структура - Исходные контекст с описанием данных
//
Процедура ОбработатьРезультатПодписания(ОписаниеДанных, Контекст) Экспорт

	Если ОписаниеДанных = Неопределено Тогда
		ОповеститьОЗавершенииОперации(Контекст, Истина);
		Возврат;
	КонецЕсли;

	Попытка
		ОписаниеДанных.Вставить("ПаролиСертификатов", Неопределено);
		
		СвойстваПодписи = КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи();

		СвойстваПодписи.УстановившийПодпись = ПользователиКлиент.ТекущийПользователь();

		ДанныеВыбранногоСертификата = ОписаниеДанных.ВыбранныйСертификат;

		ОписаниеВыбранногоСертификата = ДанныеВыбранногоСертификата.Описание;

		СвойстваПодписи.КомуВыданСертификат = ОписаниеВыбранногоСертификата.КомуВыдан;

		СвойстваПодписи.Сертификат = ДанныеВыбранногоСертификата.ДвоичныеДанные;

		СвойстваПодписи.Отпечаток = ДанныеВыбранногоСертификата.Отпечаток;

		СвойстваПодписи.ОписаниеСертификата = ОписаниеВыбранногоСертификата;

		Для Каждого ДанныеСообщения Из ОписаниеДанных.НаборДанных Цикл
			СвойстваПодписи.ПодписьВерна = Истина;
			СвойстваПодписи.ДатаПроверкиПодписи = ТекущаяДата();
			СвойстваПодписи.Подпись = ДанныеСообщения.ДанныеПодписи;
			СвойстваПодписи.ПодписанныйОбъект = ДанныеСообщения.ПрисоединенныйФайл;
			СвойстваПодписи.Комментарий = НСтр("ru ='#Подписано с помощью Рутокен#'");
			ДанныеСообщения.Вставить("СвойстваПодписи", СвойстваПодписи);
		КонецЦикла;

		Контекст.ОписаниеДанных = ОписаниеДанных;

		ОповеститьОЗавершенииОперации(Контекст);

	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось добавить электронную подпись по причине:%1'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ТекстОшибки, ОписаниеОшибки()));
		ОповеститьОЗавершенииОперации(Контекст, Истина);
	КонецПопытки;

КонецПроцедуры

//Выполняет оповещение запущенной длительной операции о завершени операции взаимодействия с компонентой
// Параметры:
//  Контекст - Структура - Контекст операции подписания
//  ЕстьОшибки - Булево - Наличие ошибок в процедуре подписания
//
Процедура ОповеститьОЗавершенииОперации(Контекст, ЕстьОшибки = Ложь)

	Контекст.ОписаниеДанных.Вставить("Успех", Не ЕстьОшибки);
	Контекст.ОписаниеДанных.Вставить("Отказ", ЕстьОшибки);

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.ОписаниеДанных);

КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс