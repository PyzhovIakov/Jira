
////////////////////////////////////////////////////////////////////////////////
// Бизнес-процессы сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак использования бизнес-процессов.
//
// Возвращаемое значение:
//	Булево - признак использования бизнес-процессов.
//
Функция ИспользоватьБизнесПроцессы() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
КонецФункции

// Получить возможных исполнителей по роли.
//
// Параметры:
//  Роль	- СправочникСсылка.РолиИсполнителей	- Ссылка на роль.
//  Задача	- ЗадачаСсылка.ЗадачаИсполнителя	- Ссылка на задачу.
// 
// Возвращаемое значение:
//  СписокЗначений - Список исполнителей.
//
Функция ПолучитьВозможныхИсполнителейПоРоли(Роль, Задача = Неопределено) Экспорт
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	
	Если Роль = Справочники.РолиИсполнителей.CRM_ДинамическаяАдресация И ЗначениеЗаполнено(Задача) Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ИсполнителиДинамическойАдресации.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиДинамическойАдресации КАК CRM_ИсполнителиДинамическойАдресации
		|ГДЕ
		|	CRM_ИсполнителиДинамическойАдресации.Задача = &Задача";
		Запрос.УстановитьПараметр("Задача", Задача);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
		Запрос.УстановитьПараметр("РольИсполнителя", Роль);
	КонецЕсли;
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

// Получить роли по пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя.
// 
// Возвращаемое значение:
//  СписокЗначений - Список ролей.
//
Функция ПолучитьРолиПоПользователю(Пользователь) Экспорт
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

// Получить роли по пользователям.
//
// Параметры:
//  Пользователи - Список значений или массив - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  СписокЗначений - Список ролей.
//
Функция ПолучитьРолиПоПользователям(Пользователи) Экспорт
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнители", Пользователи);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель В (&Исполнители)";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

// Возвращает булево, если задача доступна для принятия к исполнению.
//
// Параметры:
//  Задача	 - ЗадачаСсылка.ЗадачаИсполнителя - Ссылка на задачу.
// 
// Возвращаемое значение:
//  Булево - Признак доступности для принятия к исполнению. 
//
Функция ЗадачаДоступнаДляПринятияКИсполнению(Задача) Экспорт

	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		Исполнитель = Задача.Исполнитель;
	Иначе
		Исполнитель = Задача.РольИсполнителя;
	КонецЕсли;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРоли(Исполнитель, Задача);
	Иначе
		СписокВозможныхИсполнителей = Новый списокЗначений;
		СписокВозможныхИсполнителей.Добавить(Исполнитель);
	КонецЕсли;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		// Если CRM не используется, то параметр сеанса "CRM_ДоступныеПользователи" пустой
		// и нельзя искать с ним пересечение со списком "СписокВозможныхИсполнителей".
		Возврат (СписокВозможныхИсполнителей.Количество() > 0);
	Иначе
		СписокДоступныхПользователей = ПараметрыСеанса.CRM_ДоступныеПользователи;
		Возврат (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(СписокВозможныхИсполнителей.ВыгрузитьЗначения(),
			 СписокДоступныхПользователей).Количество() > 0);
	КонецЕсли;
	
КонецФункции

// Функция получает представление варианта условия.
//
// Параметры:
//  ТочкаМаршрута		 - СправочникСсылка	 - Точка маршрута.
//  ВариантВыполнения	 - Число			 - Индекс варианта.
//  НомерВерсии			 - Число			 - Номер версии.
// 
// Возвращаемое значение:
//  Строка - Представление варианта условия.
//
Функция ПолучитьПредставлениеВариантаУсловия(ТочкаМаршрута, ВариантВыполнения, НомерВерсии) Экспорт
	СтруктураИсхТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, НомерВерсии);
	МассивСтрок			= СтруктураИсхТочки.ИсходящаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("Индекс,
		|НомерВерсии", ВариантВыполнения,
		 НомерВерсии));
	ЭтоВыборВарианта = СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта;
	СтроковоеПредставление = "";
	Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие ИЛИ ЭтоВыборВарианта Тогда
		СтроковоеПредставление = СтроковоеПредставление + СокрЛП(СтруктураИсхТочки.ИсходящаяТочка.Наименование)
			 + ?(ЭтоВыборВарианта, ":", "");
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтроковоеПредставление = СтроковоеПредставление + ?(СтроковоеПредставление = "", МассивСтрок[0].ВариантСиноним, "/" 
		+ МассивСтрок[0].ВариантСиноним);
	Иначе
		СтроковоеПредставление = СтроковоеПредставление + ?(СтроковоеПредставление = "", "", "/") 
		+ СтруктураИсхТочки.ИсходящаяТочка.Имя + ?(СтруктураИсхТочки.ИсходящаяТочка.ВариантЗавершения.Наименование = "", "",
		" (" + СтруктураИсхТочки.ИсходящаяТочка.ВариантЗавершения.Наименование + ")");
	КонецЕсли;
	
	Возврат СтроковоеПредставление;
КонецФункции

// Функция проверяет приведет ли бизнес-процесс к неудачному завершению.
//
// Параметры:
//  БизнесПроцесс		 - БизнесПроцессСсылка	 - Бизнес-процесс
//  ТочкаМаршрута		 - СправочникСсылка		 - Точка маршрута.
//  ВариантВыполнения	 - Число				 - Индекс варианта.
//	УчитыватьПричинуНеудачногоЗавершения - Булево - признак учета причины неудачного завершения.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ПриведетКНеудачномуЗавершению(БизнесПроцесс, ТочкаМаршрута, ВариантВыполнения,
	 УчитыватьПричинуНеудачногоЗавершения = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков
	И (НЕ УчитыватьПричинуНеудачногоЗавершения ИЛИ БизнесПроцесс.КартаМаршрута.УказыватьПричинуНеудачногоЗавершения) Тогда
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс,
			 ТочкаМаршрута, , ,
			 ВариантВыполнения);
		Если (МассивИсходящихТочек.Количество() = 1)
			 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			Возврат(МассивИсходящихТочек[0].ИсходящаяТочка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПриведетКНеудачномуЗавершению()

////////////////////////////////////////////////////////////////////////////////
// Процедуры досрочного завершения бизнес-процессов.

// Процедура - обработчик досрочного завершения бизнес-процесса.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс.
//
Процедура ОбработкаДосрочногоЗавершенияБизнесПроцесса(БизнесПроцесс) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	НЕ ЗадачаИсполнителя.Выполнена
	               |	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Задача);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК ВложенныйБизнесПроцесс
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.Завершен
	|	И НЕ CRM_БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
	|	И CRM_БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.CRM_БизнесПроцесс");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ВложенныйБизнесПроцесс);
			Блокировка.Заблокировать();
			БизнесПроцессОбъект = Выборка.ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Завершен					= Истина;
			БизнесПроцессОбъект.ЗавершенДосрочно			= Истина;
			БизнесПроцессОбъект.ВариантЗавершения			= БизнесПроцесс.ВариантЗавершения;
			БизнесПроцессОбъект.ПричинаДосрочногоЗавершения	= БизнесПроцесс.ПричинаДосрочногоЗавершения;
			БизнесПроцессОбъект.ДатаЗавершения				= БизнесПроцесс.ДатаЗавершения;
			БизнесПроцессОбъект.Записать();
			
			СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцессОбъект.Ссылка, , Истина, Истина);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи';en='Business processes and tasks'"), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры // ОбработкаДосрочногоЗавершенияБизнесПроцесса()

// Процедура досрочно завершает бизнес-процесс.
//
// Параметры:
//	ПараметрыДосрочногоЗавершения	- Структура	- Параметры досрочного завершения.
//
Процедура ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения) Экспорт
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс.CRM_БизнесПроцесс");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыДосрочногоЗавершения.Задача.БизнесПроцесс);
		Блокировка.Заблокировать();
		БизнесПроцессОбъект = ПараметрыДосрочногоЗавершения.Задача.БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Завершен					= ПараметрыДосрочногоЗавершения.ЗавершенДосрочно;
		БизнесПроцессОбъект.ЭтапДосрочногоЗавершения	= ПараметрыДосрочногоЗавершения.ЭтапДосрочногоЗавершения;
		БизнесПроцессОбъект.ЗавершенДосрочно			= ПараметрыДосрочногоЗавершения.ЗавершенДосрочно;
		БизнесПроцессОбъект.ВариантЗавершения			= ПараметрыДосрочногоЗавершения.ВариантЗавершения;
		БизнесПроцессОбъект.ПричинаДосрочногоЗавершения	= ПараметрыДосрочногоЗавершения.ПричинаДосрочногоЗавершения;
		БизнесПроцессОбъект.ДатаЗавершения				= ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Записать();
		
		Если ЗначениеЗаполнено(БизнесПроцессОбъект.Интерес)
			И БизнесПроцессОбъект.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
			ОбъектБП = БизнесПроцессОбъект.Интерес.ПолучитьОбъект();
			Если ПараметрыДосрочногоЗавершения.ЭтапДосрочногоЗавершения.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
				ОбъектБП[БизнесПроцессОбъект.РеквизитОбъектаСтрокой] =
					БизнесПроцессОбъект.КартаМаршрута.СостояниеДосрочногоЗавершения;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "ПричинаОтказа") Тогда
				ОбъектБП.ПричинаОтказа = ПараметрыДосрочногоЗавершения.ПричинаДосрочногоЗавершения;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "CRM_ПричинаОтказа") Тогда
				ОбъектБП.CRM_ПричинаОтказа = ПараметрыДосрочногоЗавершения.ПричинаДосрочногоЗавершения;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "ПричинаОтказаКомментарий")
				И ПараметрыДосрочногоЗавершения.Свойство("ПричинаДосрочногоЗавершенияКомментарий") Тогда
				
				ОбъектБП.ПричинаОтказаКомментарий = ПараметрыДосрочногоЗавершения.ПричинаДосрочногоЗавершенияКомментарий;
			КонецЕсли;
			ОбъектБП.ДополнительныеСвойства.Вставить("ОбъектЗаписанУправляющимБП");
			ОбъектБП.Записать();
		КонецЕсли;
		
		СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцессОбъект.Ссылка, , Истина, Истина);

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи';en='Business processes and tasks'"), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры // ЗавершитьДосрочноБизнесПроцесс()

// Процедура создает или удаляет кнопки создания бизнес-процесса на форме.
//
// Параметры:
//	ЭтаФорма		- ФормаКлиентскогоПриложения						- Форма документа.
//	ЭлементРодитель	- ЭлементФормы							- Командная панель, в которую добавляются или удаляются кнопки.
//	КартаМаршрута	- СправочникСсылка.CRM_КартыМаршрута	- Карта маршрута.
//	ФлагУдалить		- Булево								- Если Истина - кнопки создаются, Ложь - удаляются.
//
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтаФорма,
	 ЭлементРодитель = Неопределено, КартаМаршрута = Неопределено,
	 ФлагУдалить) Экспорт
	Элементы = ЭтаФорма.Элементы;
	Команды = ЭтаФорма.Команды;
	
	Если ФлагУдалить Тогда
		ЭлементНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
		Если НЕ ЭлементНачатьБизнесПроцесс = Неопределено Тогда
			Элементы.Удалить(ЭлементНачатьБизнесПроцесс);
		КонецЕсли;
	Иначе
		ЗаголовокКнопки = КартаМаршрута.Наименование;
		
		КомандаФормы = Команды.Найти("Команда_НачатьБизнесПроцесс");
		Если КомандаФормы = Неопределено Тогда
			НоваяКомандаФормы = Команды.Добавить("Команда_НачатьБизнесПроцесс");
			НоваяКомандаФормы.Заголовок					= НСтр("ru='Начать ""';en='Begin ""'") + ЗаголовокКнопки + """";
			НоваяКомандаФормы.Подсказка					= НСтр("ru='Начать бизнес-процесс ""';en='Start Business Process ""'") 
				+ ЗаголовокКнопки 
				+ """";
			НоваяКомандаФормы.Действие					= "Подключаемый_КомандаНачатьБизнесПроцесс";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
			НоваяКомандаФормы.Картинка					= БиблиотекаКартинок.bpm_ЗапуститьПроцесс;
			КомандаФормы = НоваяКомандаФормы;
		Иначе
			КомандаФормы.Заголовок						= НСтр("ru='Начать ""';en='Begin ""'") + ЗаголовокКнопки + """";
			КомандаФормы.Подсказка						= НСтр("ru='Начать бизнес-процесс ""';en='Start Business Process ""'") + ЗаголовокКнопки 
				+ """";
		КонецЕсли;
		
		СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
		Если СписокТочекСтарта.Количество() > 1 Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Точки.Ссылка					КАК Ссылка,
			|	Точки.Наименование				КАК Наименование,
			|	Точки.РеквизитДопУпорядочивания	КАК Порядок
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов КАК Точки
			|ГДЕ
			|	Точки.Ссылка В (&Точки)
			|УПОРЯДОЧИТЬ ПО
			|	Точки.РеквизитДопУпорядочивания, Точки.Ссылка
			|");
			Запрос.УстановитьПараметр("Точки", СписокТочекСтарта.ВыгрузитьЗначения());
			Выборка = Запрос.Выполнить().Выбрать();
			СписокТочекСтарта = Новый СписокЗначений();
			Пока Выборка.Следующий() Цикл
				СписокТочекСтарта.Добавить(Выборка.Ссылка, ?(ЗначениеЗаполнено(Выборка.Наименование),
					 Выборка.Наименование,
					 Строка(Выборка.Ссылка)));
			КонецЦикла;
			
			КнопкаНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
			Если КнопкаНачатьБизнесПроцесс <> Неопределено Тогда
				Элементы.Удалить(КнопкаНачатьБизнесПроцесс);
			КонецЕсли;
			
			ПодменюТочкиСтарта = Элементы.Найти("Подменю_ТочкиСтартаБизнесПроцесса");
			Если ПодменюТочкиСтарта = Неопределено Тогда
				ПодменюТочкиСтарта = Элементы.Вставить("Подменю_ТочкиСтартаБизнесПроцесса", Тип("ГруппаФормы"),
					 ЭлементРодитель,
					 Элементы.ЗапуститьПроизвольныйБизнесПроцесс);
				ПодменюТочкиСтарта.Вид			= ВидГруппыФормы.Подменю;
				ПодменюТочкиСтарта.Заголовок	= КомандаФормы.Заголовок;
				ПодменюТочкиСтарта.Подсказка	= КомандаФормы.Подсказка;
				ПодменюТочкиСтарта.Отображение	= ОтображениеКнопки.Текст;
			КонецЕсли;
			Пока ПодменюТочкиСтарта.ПодчиненныеЭлементы.Количество() > 0 Цикл
				Элементы.Удалить(ПодменюТочкиСтарта.ПодчиненныеЭлементы[0]);
			КонецЦикла;
			
			Для Каждого ТочкаСтартаЗначение Из СписокТочекСтарта Цикл
				ДополнениеКИмениКнопки = СтрЗаменить(СокрЛП(Строка(ТочкаСтартаЗначение.Значение.УникальныйИдентификатор())),
					 "-",
					 "_");
				НовыйПунктМеню = Элементы.Вставить("КнопкаТочкаСтартаБизнесПроцесса_" + ДополнениеКИмениКнопки,
					 Тип("КнопкаФормы"), ПодменюТочкиСтарта);
				НовыйПунктМеню.Заголовок = Строка(ТочкаСтартаЗначение.Представление);
				
				ИмяКоманды = "КомандаТочкаСтартаБизнесПроцесса_" + ДополнениеКИмениКнопки;
				КомандаФормы = Команды.Найти(ИмяКоманды);
				Если КомандаФормы = Неопределено Тогда
					КомандаФормы = Команды.Добавить(ИмяКоманды);
					КомандаФормы.Заголовок					= НовыйПунктМеню.Заголовок;
					КомандаФормы.Подсказка					= НовыйПунктМеню.Заголовок;
					КомандаФормы.Действие					= "Подключаемый_КомандаНачатьБизнесПроцесс";
					КомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
				КонецЕсли;
				НовыйПунктМеню.ИмяКоманды = ИмяКоманды;
			КонецЦикла;
			
		Иначе
			ПодменюТочкиСтарта = Элементы.Найти("Подменю_ТочкиСтартаБизнесПроцесса");
			Если ПодменюТочкиСтарта <> Неопределено Тогда
				Элементы.Удалить(ПодменюТочкиСтарта);
			КонецЕсли;
			
			КнопкаНачатьБизнесПроцесс = Элементы.Найти("Кнопка_НачатьБизнесПроцесс");
			Если КнопкаНачатьБизнесПроцесс = Неопределено Тогда
				КнопкаНачатьБизнесПроцесс = Элементы.Вставить("Кнопка_НачатьБизнесПроцесс", Тип("КнопкаФормы"),
					 ЭлементРодитель,
					 Элементы.ЗапуститьПроизвольныйБизнесПроцесс);
				КнопкаНачатьБизнесПроцесс.ИмяКоманды = "Команда_НачатьБизнесПроцесс";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с бизнес-процессом.

// Функция формирует представление бизнес-процесса.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс.
//
// Возвращаемое значение:
//	Строка	- Представление бизнес-процесса.
//
Функция СформироватьПредставлениеБизнесПроцесса(БизнесПроцесс) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3';
		|en='%1 No. %2 of %3'"), СокрЛП(БизнесПроцесс.Наименование), БизнесПроцесс.Номер,
		 БизнесПроцесс.Дата);
КонецФункции // СформироватьПредставлениеБизнесПроцесса()

////////////////////////////////////////////////////////////////////////////////
// Формирование, сохранение изменений Маршрута и исполнителей бизнес-процесса.

// Процедура формирует/корректирует маршрут и исполнителей при завершении редактирования карт маршрута.
//
// Параметры:
//  КартаМаршрута			 - СправочникСсылка	 - Карта маршрута.
//  ДополнительныеНастройки	 - Структура		 - Дополнительные настройки.
//
Процедура СформироватьМаршрутИИсполнителейКартыМаршрута(КартаМаршрута, ДополнительныеНастройки = Неопределено) Экспорт
	
	ПреднастройкиЭтапов			= Неопределено;
	ПреднастройкиИсполнителей	= Неопределено;
	ПреднастройкиОбъектов		= Неопределено;
	
	Если НЕ ДополнительныеНастройки = Неопределено Тогда
		
		ПреднастройкиЭтапов			= ДополнительныеНастройки.НастройкиМаршрута;
		ПреднастройкиИсполнителей	= ДополнительныеНастройки.Исполнители;
		ПреднастройкиОбъектов		= ДополнительныеНастройки.Объекты;
		
	КонецЕсли;
	
	СписокВидов = Новый массив;
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Действие);
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс);
	СписокВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Завершение);
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(КартаМаршрута);
	НаборМаршрута.Прочитать();
	
	ТабМаршрут		= НаборМаршрута.Выгрузить();
	
	Если НаборМаршрута.Количество() > 0 Тогда
		НаборМаршрута.Очистить();
	КонецЕсли;
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(КартаМаршрута);
	НаборИсполнителей.Прочитать();
	
	ТабИсполнители	= НаборИсполнителей.Выгрузить();
	
	Если НаборИсполнителей.Количество() > 0 Тогда
		НаборИсполнителей.Очистить();
	КонецЕсли;
	
	НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(КартаМаршрута);
	НаборОбъектов.Прочитать();
	НаборОбъектов.Очистить();
	
	// Получим точки маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка,
	|	CRM_ТочкиМаршрутов.Имя КАК Имя,
	|	CRM_ТочкиМаршрутов.Наименование КАК Наименование,
	|	CRM_ТочкиМаршрутов.Вид КАК Вид,
	|	CRM_ТочкиМаршрутов.Групповая КАК Групповая,
	|	CRM_ТочкиМаршрутов.ВложенныйПроцесс КАК ВложенныйПроцесс,
	|	CRM_ТочкиМаршрутов.Пояснение КАК Пояснение,
	|	CRM_ТочкиМаршрутов.РеквизитДопУпорядочивания КАК Порядок
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец
	|	И (НЕ CRM_ТочкиМаршрутов.НеИспользуется)
	|	И CRM_ТочкиМаршрутов.Вид В(&СписокВидов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	
	//Выборка = запрос.Выполнить().Выбрать();
	// Пока Выборка.Следующий() Цикл
	ТаблицаТочекКарты = запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из ТаблицаТочекКарты Цикл
		
		Если НЕ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			СтруктураИсхТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Выборка.Ссылка,
				 КартаМаршрута.НомерВерсии);
			
			Если СтруктураИсхТочки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаНабора = НаборМаршрута.Добавить();
		НоваяСтрокаНабора.Объект								= КартаМаршрута;
		НоваяСтрокаНабора.ТочкаМаршрута							= Выборка.Ссылка;
		НоваяСтрокаНабора.Используется							= Истина;
		НоваяСтрокаНабора.Порядок								= Выборка.Порядок;
		НоваяСтрокаНабора.ЗапрашиватьРезультатВыполненияПриЗавершении = Истина;
		
		Если НЕ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			НоваяСтрокаНабора.ВариантВыполнения						= 0;
			НоваяСтрокаНабора.ДлительностьДней						= 1;
			НоваяСтрокаНабора.ДлительностьЧасов						= 0;
			НоваяСтрокаНабора.ДлительностьМинут						= 0;
			Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
				НоваяСтрокаНабора.ВариантВыполнения					= 1;
			КонецЕсли;
			
			Если СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
			ИЛИ СтруктураИсхТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
			
				МассивВариантов = СтруктураИсхТочки.ИсходящаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии",
					 КартаМаршрута.НомерВерсии));
				Для Каждого СтрокаВарианта Из МассивВариантов Цикл
					Если ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(СтруктураИсхТочки.ИсходящаяТочка,
						 КартаМаршрута.НомерВерсии, СтрокаВарианта.Индекс,
						 Истина) Тогда
						НоваяСтрокаНабора.ВариантВыполнения = СтрокаВарианта.Индекс;
						НоваяСтрокаНабора.ВариантВыполненияСтрокой = ПолучитьПредставлениеВариантаУсловия(Выборка.Ссылка,
							 СтрокаВарианта.Индекс,
							 КартаМаршрута.НомерВерсии);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НоваяСтрокаНабора.ВариантВыполненияСтрокой = "" Тогда
					НоваяСтрокаНабора.ВариантВыполнения = 0;
					НоваяСтрокаНабора.ВариантВыполненияСтрокой = ПолучитьПредставлениеВариантаУсловия(Выборка.Ссылка,
						 0,
						 КартаМаршрута.НомерВерсии);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТабМаршрут = Неопределено;
			Если НЕ ПреднастройкиЭтапов = Неопределено Тогда // Поищем в переданных настройках.
				МассивСтрок = ПреднастройкиЭтапов.НайтиСтроки(Новый Структура("Имя, Вид", Выборка.Имя, Выборка.Вид));
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаТабМаршрут = МассивСтрок[0];
					
					НоваяСтрокаНабора.ДлительностьДней						= СтрокаТабМаршрут.ДлительностьДней;
					НоваяСтрокаНабора.ДлительностьЧасов						= СтрокаТабМаршрут.ДлительностьЧасов;
					НоваяСтрокаНабора.ДлительностьМинут						= СтрокаТабМаршрут.ДлительностьМинут;
					НоваяСтрокаНабора.Задание								= СтрокаТабМаршрут.Задание;
					НоваяСтрокаНабора.Используется							= СтрокаТабМаршрут.Используется;
					НоваяСтрокаНабора.Порядок								= СтрокаТабМаршрут.Порядок;
					НоваяСтрокаНабора.ВариантВыполнения						= СтрокаТабМаршрут.ВариантВыполнения;
					НоваяСтрокаНабора.ВариантВыполненияСтрокой				= СтрокаТабМаршрут.ВариантВыполненияСтрокой;
					Если ПреднастройкиЭтапов.Колонки.Найти("Состояние") <> Неопределено Тогда
						НоваяСтрокаНабора.Состояние = СтрокаТабМаршрут.Состояние;
					КонецЕсли;
					Если ПреднастройкиЭтапов.Колонки.Найти("ЗапрашиватьРезультатВыполненияПриЗавершении") <> Неопределено Тогда
						НоваяСтрокаНабора.ЗапрашиватьРезультатВыполненияПриЗавершении =
							СтрокаТабМаршрут.ЗапрашиватьРезультатВыполненияПриЗавершении;
					КонецЕсли;
					Если ПреднастройкиЭтапов.Колонки.Найти("ЗапрашиватьРезультатВыполненияПриЗавершении") <> Неопределено Тогда
						НоваяСтрокаНабора.ОбязательноФиксироватьРезультат = СтрокаТабМаршрут.ОбязательноФиксироватьРезультат;
					КонецЕсли;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабМаршрут,
						"ОтложитьНачалоЭтапаДней") Тогда
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаДней = СтрокаТабМаршрут.ОтложитьНачалоЭтапаДней;
					КонецЕсли;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабМаршрут,
						"ОтложитьНачалоЭтапаЧасов") Тогда
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаЧасов = СтрокаТабМаршрут.ОтложитьНачалоЭтапаЧасов;
					КонецЕсли;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабМаршрут,
						"ОтложитьНачалоЭтапаМинут") Тогда
						НоваяСтрокаНабора.ОтложитьНачалоЭтапаМинут = СтрокаТабМаршрут.ОтложитьНачалоЭтапаМинут;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТабМаршрут.Шаблон) И ОбъектБДСуществует(СтрокаТабМаршрут.Шаблон) Тогда
						НоваяСтрокаНабора.Шаблон						= СтрокаТабМаршрут.Шаблон;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТабМаршрут = Неопределено Тогда
				СтрокаТабМаршрут = ТабМаршрут.Найти(Выборка.Ссылка, "ТочкаМаршрута");
				
				Если НЕ СтрокаТабМаршрут = Неопределено И Выборка.Вид = СтрокаТабМаршрут.ТочкаМаршрута.Вид Тогда
					НоваяСтрокаНабора.ДлительностьДней						= СтрокаТабМаршрут.ДлительностьДней;
					НоваяСтрокаНабора.ДлительностьЧасов						= СтрокаТабМаршрут.ДлительностьЧасов;
					НоваяСтрокаНабора.ДлительностьМинут						= СтрокаТабМаршрут.ДлительностьМинут;
					НоваяСтрокаНабора.Используется							= СтрокаТабМаршрут.Используется;
					НоваяСтрокаНабора.Задание								= СтрокаТабМаршрут.Задание;
					НоваяСтрокаНабора.Шаблон								= СтрокаТабМаршрут.Шаблон;
					НоваяСтрокаНабора.Состояние								= СтрокаТабМаршрут.Состояние;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабМаршрут = ТабМаршрут.Найти(Выборка.Ссылка, "ТочкаМаршрута");
			
			Если НЕ СтрокаТабМаршрут = Неопределено И Выборка.Вид = СтрокаТабМаршрут.ТочкаМаршрута.Вид Тогда
				НоваяСтрокаНабора.Состояние = СтрокаТабМаршрут.Состояние;
			КонецЕсли;
			Если НЕ ПреднастройкиЭтапов = Неопределено Тогда // Поищем в переданных настройках.
				МассивСтрок = ПреднастройкиЭтапов.НайтиСтроки(Новый Структура("Имя, Вид", Выборка.Имя, Выборка.Вид));
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаТабМаршрут = МассивСтрок[0];
					НоваяСтрокаНабора.Состояние = СтрокаТабМаршрут.Состояние;
					Если ПреднастройкиЭтапов.Колонки.Найти("ВариантЗавершения") <> Неопределено
						 И ЗначениеЗаполнено(СтрокаТабМаршрут.ВариантЗавершения)
						 И СтрокаТабМаршрут.ВариантЗавершения.ПолучитьОбъект() <> Неопределено Тогда
						Если НоваяСтрокаНабора.ТочкаМаршрута.ВариантЗавершения <> СтрокаТабМаршрут.ВариантЗавершения Тогда
							ОбТочка = НоваяСтрокаНабора.ТочкаМаршрута.ПолучитьОбъект();
							ОбТочка.ВариантЗавершения = СтрокаТабМаршрут.ВариантЗавершения;
							ОбТочка.ОбменДанными.Загрузка = Истина;
							ОбТочка.Записать();
							НоваяСтрокаНабора.ТочкаМаршрута = ОбТочка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
            КонецЕсли;
		КонецЕсли;
		
		ИсполнительСтрокой = "";
		
		Если Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			СтрокаТабМаршрут		= Неопределено;
			СтрокиТабИсполнители	= Неопределено;
			Если НЕ ПреднастройкиИсполнителей = Неопределено Тогда // Поищем в переданных настройках.
				
				СтрокиТабИсполнители = ПреднастройкиИсполнителей.НайтиСтроки(Новый Структура("Имя, Вид", Выборка.Имя, Выборка.Вид));
				
				Если СтрокиТабИсполнители.Количество() > 0 Тогда
					
					Если Выборка.Групповая Тогда
						Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
							
							НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
							НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
							НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
							
							Если ЗначениеЗаполнено(ЭлементМассива.Исполнитель) И ОбъектБДСуществует(ЭлементМассива.Исполнитель) Тогда
								НоваяСтрокаИсполнителя.Исполнитель = ЭлементМассива.Исполнитель;
							ИначеЕсли ЗначениеЗаполнено(ЭлементМассива.ТочкаИмя) Тогда
								МассивТочек = ТаблицаТочекКарты.НайтиСтроки(Новый Структура("Имя, Вид",
									 ЭлементМассива.ТочкаИмя,
									 ЭлементМассива.ТочкаВид));
								Если МассивТочек.Количество() > 0 Тогда
									НоваяСтрокаИсполнителя.Исполнитель = МассивТочек[0].Ссылка;
								Иначе
									НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
								КонецЕсли;
							Иначе
								НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
							КонецЕсли;
							
							Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
							Иначе
								СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
							КонецЕсли;
							ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой = "", "", "; ") + СтрокаИсполнителя;
							
						КонецЦикла;
					Иначе
						НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
						НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
						НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
						
						Если ЗначениеЗаполнено(СтрокиТабИсполнители[0].Исполнитель)
							 И ОбъектБДСуществует(СтрокиТабИсполнители[0].Исполнитель) Тогда
							НоваяСтрокаИсполнителя.Исполнитель = СтрокиТабИсполнители[0].Исполнитель;
						ИначеЕсли ЗначениеЗаполнено(СтрокиТабИсполнители[0].ТочкаИмя) Тогда
							МассивТочек = ТаблицаТочекКарты.НайтиСтроки(Новый Структура("Имя, Вид",
								 СтрокиТабИсполнители[0].ТочкаИмя,
								 СтрокиТабИсполнители[0].ТочкаВид));
							Если МассивТочек.Количество() > 0 Тогда
								НоваяСтрокаИсполнителя.Исполнитель = МассивТочек[0].Ссылка;
							Иначе
								НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
							КонецЕсли;
						Иначе
							НоваяСтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
						КонецЕсли;
						
						Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
							СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
						Иначе
							СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
						КонецЕсли;
						ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой = "", "", "; ") + СтрокаИсполнителя;
						
					КонецЕсли;
				Иначе
					СтрокиТабИсполнители	= Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокиТабИсполнители = Неопределено Тогда
				СтрокиТабИсполнители = ТабИсполнители.НайтиСтроки(Новый Структура("ТочкаМаршрута", Выборка.Ссылка));
				
				Если СтрокиТабИсполнители.Количество() > 0 Тогда
					Если Выборка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
						Если Выборка.Групповая Тогда
							Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
								НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя, ЭлементМассива);
								Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
									СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
								Иначе
									СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
								КонецЕсли;
								ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой = "", "", "; ") + СтрокаИсполнителя;
							КонецЦикла;
						Иначе
							НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя, СтрокиТабИсполнители[0]);
							Если ТипЗнч(НоваяСтрокаИсполнителя.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								СтрокаИсполнителя = БизнесПроцессыИЗадачиСервер.РольСтрокой(НоваяСтрокаИсполнителя.Исполнитель);
							Иначе
								СтрокаИсполнителя = СокрЛП(Строка(НоваяСтрокаИсполнителя.Исполнитель));
							КонецЕсли;
							ИсполнительСтрокой = ИсполнительСтрокой + ?(ИсполнительСтрокой = "", "", "; ") + СтрокаИсполнителя;
						КонецЕсли;
					Иначе
						НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
						Для Каждого ЭлементМассива Из СтрокиТабИсполнители Цикл
							Если ТипЗнч(ЭлементМассива.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
								Продолжить;
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя, ЭлементМассива);
							Прервать;
						КонецЦикла;
						Если НЕ ЗначениеЗаполнено(НоваяСтрокаИсполнителя.Исполнитель) Тогда
							НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
							НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
							НоваяСтрокаИсполнителя.Исполнитель		= Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НоваяСтрокаИсполнителя = НаборИсполнителей.Добавить();
					НоваяСтрокаИсполнителя.Объект			= КартаМаршрута;
					НоваяСтрокаИсполнителя.ТочкаМаршрута	= Выборка.Ссылка;
					НоваяСтрокаИсполнителя.Исполнитель		= Перечисления.CRM_ВидыИсполнителейЗадач.Автор;
					ИсполнительСтрокой = ИсполнительСтрокой + СокрЛП(Строка(Перечисления.CRM_ВидыИсполнителейЗадач.Автор));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаНабора.ИсполнительСтрокой = ИсполнительСтрокой;
	КонецЦикла;
	НаборМаршрута.Записать();
	НаборИсполнителей.Записать();
	
	// Заполним объекты из преднастроек.
	Если НЕ ПреднастройкиОбъектов = Неопределено Тогда
		времТаб = НаборМаршрута.Выгрузить();
				
		СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
		
		Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
			НовСтр = времТаб.Добавить();
			НовСтр.ТочкаМаршрута = ЭлементСписка.Значение;
		КонецЦикла;
		
		Для Каждого СтрокаНабора Из НаборМаршрута Цикл
			МассивОбъектов = ПреднастройкиОбъектов.НайтиСтроки(Новый Структура("Имя, Вид",
				 СтрокаНабора.ТочкаМаршрута.Имя,
				 СтрокаНабора.ТочкаМаршрута.Вид));
			Для Каждого ЭлементМассива Из МассивОбъектов Цикл
				
				Если ОбъектБДСуществует(ЭлементМассива.ВидОбъекта) Тогда
					
					НоваяСтрокаОбъекта = НаборОбъектов.Добавить();
					НоваяСтрокаОбъекта.Объект			= КартаМаршрута;
					НоваяСтрокаОбъекта.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
					НоваяСтрокаОбъекта.ВидОбъекта		= ЭлементМассива.ВидОбъекта;
					НоваяСтрокаОбъекта.Обязательный		= ЭлементМассива.Обязательный;
					
					Для Каждого СтрокаВремТаб Из времТаб Цикл
						Если СтрокаВремТаб.ТочкаМаршрута.Имя = ЭлементМассива.ЭтапОснованияИмя
							 И СтрокаВремТаб.ТочкаМаршрута.Вид = ЭлементМассива.ЭтапОснованияВид Тогда
							НоваяСтрокаОбъекта.ЭтапОснования		= СтрокаВремТаб.ТочкаМаршрута;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Если НаборОбъектов.Количество() > 0 Тогда
			НаборОбъектов.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СформироватьМаршрутИИсполнителейКартыМаршрута()

// Процедура заполняет настройки этапов бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//  БизнесПроцесс						 - БизнесПроцессСсылка	 - Бизнес-процесс
//  Отказ								 - Булево				 - Флаг отмены.
//  КорректироватьДлительностьВедущего	 - Булево	 - Корректировать длительность ведущего.
//  ПараметрыПериодическогоСтарта		 - Структура - Параметры периодического старта. 
//
Процедура ЗаполнитьНастройкиЭтаповБизнесПроцесса(БизнесПроцесс, Отказ,
	 КорректироватьДлительностьВедущего,
	 ПараметрыПериодическогоСтарта = Неопределено) Экспорт
	
	Если ПараметрыПериодическогоСтарта = Неопределено Тогда
	
		НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
		НаборМаршрут.Прочитать();
		
		Отказ = (НаборМаршрут.Количество() = 0);
		Если НЕ Отказ Тогда
			ТабНаборМаршрут = НаборМаршрут.Выгрузить();
			ТабНаборМаршрут.Колонки.Удалить("Объект");
			ТабНаборМаршрут.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
			ТабНаборМаршрут.Колонки.Добавить("ДатаНачала");
			ТабНаборМаршрут.Колонки.Добавить("ДатаВыполнения");
			ТабНаборМаршрут.Колонки.Добавить("ДатаНачалаВходящая");
			ТабНаборМаршрут.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
			
			Если ЗначениеЗаполнено(БизнесПроцесс.ДатаСтарта) И БизнесПроцесс.ДатаСтарта > ТекущаяДатаСеанса() Тогда
				НачПериода = БизнесПроцесс.ДатаСтарта;
			Иначе
				НачПериода = ТекущаяДатаСеанса();
			КонецЕсли;
			//НачПериода	= ?(НачалоДня(БизнесПроцесс.Дата) = НачалоДня(БизнесПроцесс.ДатаСтарта),
				// БизнесПроцесс.Дата,
				// БизнесПроцесс.ДатаСтарта);
			РассчитатьДатыВыполненияЭтаповПоМаршруту(БизнесПроцесс.НомерВерсииКартыМаршрута,
				 БизнесПроцесс.Организация, БизнесПроцесс.ТочкаСтарта, ТабНаборМаршрут,
				 НачПериода);
			
			НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс);
			НаборМаршрут.Прочитать();
			НаборМаршрут.Загрузить(ТабНаборМаршрут);
			НаборМаршрут.Записать();
			
			Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) И КорректироватьДлительностьВедущего Тогда
				
				ТабНаборМаршрут.Сортировать("ДатаВыполнения УБЫВ");
				
				ВедущийБП		= БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
				ВедущаяТочка	= БизнесПроцесс.ВедущаяЗадача.CRM_ТочкаМаршрута;
				
				НаборВедущего = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
				НаборВедущего.Отбор.Объект.Установить(ВедущийБП);
				НаборВедущего.Прочитать();
				
				ТабНаборВедущего			= НаборВедущего.Выгрузить();
				СтрокаТаб					= ТабНаборВедущего.Найти(ВедущаяТочка, "ТочкаМаршрута");
				СтрокаТаб.ДатаВыполнения	= ТабНаборМаршрут[0].ДатаВыполнения;
				
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ВедущаяТочка,
					 ВедущийБП.НомерВерсииКартыМаршрута,
					 СтрокаТаб.ВариантВыполнения);
				РассчитатьДатыВыполненияЭтаповПоМаршруту(ВедущийБП.НомерВерсииКартыМаршрута,
					 ВедущийБП.Организация, СтруктураТочки.ИсходящаяТочка, ТабНаборВедущего, СтрокаТаб.ДатаВыполнения,
					 СтрокаТаб.ВариантВыполнения);
				
				НаборВедущего.Загрузить(ТабНаборВедущего);
				НаборВедущего.Записать();
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='Отсутствуют настройки этапов карты маршрута бизнес-процесса!';
				|en='There no settings of stages of business process route map!'");		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТабНаборМаршрут = ПараметрыПериодическогоСтарта.НастройкиЭтаповБизнесПроцесса;
		ТабНаборМаршрут.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		
		НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборМаршрут.Отбор.Объект.Установить(БизнесПроцесс);
		НаборМаршрут.Прочитать();
		НаборМаршрут.Загрузить(ТабНаборМаршрут);
		НаборМаршрут.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиЭтаповБизнесПроцесса()

// Процедура заполняет настройки объектов по этапам бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ			- Булево				- Флаг отмены.
//
Процедура ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса(БизнесПроцесс, Отказ) Экспорт
	НаборОбъекты = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
	НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
	НаборОбъекты.Прочитать();
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
КонецПроцедуры // ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса()

// Процедура заполняет настройки объектов по этапам бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ			- Булево				- Флаг отмены.
//
Процедура ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса_Новая(БизнесПроцесс, Отказ) Экспорт
	
	НаборОбъекты = РегистрыСведений.bpmУсловияЭтапов.СоздатьНаборЗаписей();
	НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
	НаборОбъекты.Прочитать();
	
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса()

// Заполнить условия маршрутизации.
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка - Ссылка на бизнес процесс. 
//  Отказ			 - Булево - Признак отказа. 
//
Процедура ЗаполнитьУсловияМаршрутизации(БизнесПроцесс, Отказ) Экспорт
	
	НаборОбъекты = РегистрыСведений.bpmУсловияМаршрутизации.СоздатьНаборЗаписей();
	НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
	НаборОбъекты.Прочитать();
	
	Если НаборОбъекты.Количество() > 0 Тогда
		ТабНаборОбъекты = НаборОбъекты.Выгрузить();
		ТабНаборОбъекты.Колонки.Удалить("Объект");
		ТабНаборОбъекты.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборОбъекты.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
		НаборОбъекты = РегистрыСведений.bpmУсловияМаршрутизацииПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборОбъекты.Отбор.Объект.Установить(БизнесПроцесс);
		НаборОбъекты.Прочитать();
		НаборОбъекты.Загрузить(ТабНаборОбъекты);
		НаборОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет исполнителей этапов бизнес-процесса при записи бизнес-процессов.
//
// Параметры:
//	БизнесПроцесс		- БизнесПроцессСсылка	- Бизнес-процесс
//	Отказ				- Булево				- Флаг отмены.
//	ТаблицаИсполнителей	- ТаблицаЗначений		- Таблица исполнителей.
//
Процедура ЗаполнитьИсполнителейЭтаповБизнесПроцесса(БизнесПроцесс, Отказ, ТаблицаИсполнителей = Неопределено) Экспорт
	 // Таблица ТаблицаИсполнителей передается из формы бизнес-процесса.
	 // Если таблица не передана, значит БП вложенный или стартован программно.
	Если ТаблицаИсполнителей = Неопределено Тогда 
		// Для программно стартованных БП берем настройки карты.
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
		НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс.КартаМаршрута);
		НаборИсполнители.Прочитать();
		
		ТабНаборИсполнители = НаборИсполнители.Выгрузить();
		ТабНаборИсполнители.Колонки.Удалить("Объект");
		ТабНаборИсполнители.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
		ТабНаборИсполнители.ЗаполнитьЗначения(БизнесПроцесс, "Объект");
	Иначе
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		ТабНаборИсполнители = НаборИсполнители.ВыгрузитьКолонки();
		Для Каждого СтрокаТаб Из ТаблицаИсполнителей Цикл
			Если ТипЗнч(СтрокаТаб.Исполнитель) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из СтрокаТаб.Исполнитель Цикл
					НоваяСтрокаТаб = ТабНаборИсполнители.Добавить();
					НоваяСтрокаТаб.Объект			= БизнесПроцесс;
					НоваяСтрокаТаб.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
					НоваяСтрокаТаб.Исполнитель		= ЭлементСписка.Значение;
					НоваяСтрокаТаб.Все				= ЭлементСписка.Пометка;
				КонецЦикла;
			Иначе
				НоваяСтрокаТаб = ТабНаборИсполнители.Добавить();
				НоваяСтрокаТаб.Объект			= БизнесПроцесс;
				НоваяСтрокаТаб.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
				НоваяСтрокаТаб.Исполнитель		= СтрокаТаб.Исполнитель;
			КонецЕсли;
			Если БизнесПроцесс.КартаМаршрута.УказыватьСрокВыполненияЭтапов И ЗначениеЗаполнено(СтрокаТаб.ДатаВыполнения) Тогда
				ЗаписьЭтапа = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьМенеджерЗаписи();
				ЗаписьЭтапа.Объект			= БизнесПроцесс;
				ЗаписьЭтапа.ТочкаМаршрута	= СтрокаТаб.ТочкаМаршрута;
				ЗаписьЭтапа.Прочитать();
				Если ЗаписьЭтапа.Выбран() Тогда
					ЗаписьЭтапа.ДатаВыполнения = СтрокаТаб.ДатаВыполнения;
					ЗаписьЭтапа.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Отказ = (ТабНаборИсполнители.Количество() = 0);
	Если НЕ Отказ Тогда
		НаборИсполнители = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнители.Отбор.Объект.Установить(БизнесПроцесс);
		НаборИсполнители.Прочитать();
		НаборИсполнители.Загрузить(ТабНаборИсполнители);
		НаборИсполнители.Записать();
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствуют исполнители этапов карты маршрута бизнес-процесса!';
			|en='There no executors of stages of business process route map!'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры // ЗаполнитьИсполнителейЭтаповБизнесПроцесса()	

// Функция возвращает список значений с доступными вариантами точки условия или выбора варианта
//  в качестве точки маршрута передается входящая точка действия(вложенного бизнес-процесса).
//
// Параметры:
//  Процесс			 - СправочникСсылка	 - Процесс
//  ТочкаМаршрута	 - СправочникСсылка	 - Точка маршрута.
//  Маршрут			 - СправочникСсылка	 - Маршрут
// 
// Возвращаемое значение:
//  Неопределено, СписокЗначений - Список значений с доступными вариантами точки условия или выбора варианта.
//
Функция СформироватьСписокДоступныхВариантовТочкиМаршрута(Процесс, ТочкаМаршрута, Маршрут) Экспорт
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		НомерВерсии = Процесс.НомерВерсииКартыМаршрута;
	ИначеЕсли ТипЗнч(Процесс) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		НомерВерсии = Процесс.НомерВерсии;
	КонецЕсли;
	// Получим точку выбора варианта(условия).
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, НомерВерсии);
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
		ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
		СписокВариантов = Новый СписокЗначений;
		// Получим исходящие из варианта(условия) точки маршрута, вместе с ними получим и информацию по вариантам.
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка,
			 НомерВерсии);
		// Обойдем все варианты и проверим на зацикливание (в данном случае когда маршрут
		// по данному варианту приводит снова к этой же точке выбора варианта(условия)).
		Для Каждого СтруктураВарианта Из МассивИсходящихТочек Цикл
			МассивТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Процесс,
				 ТочкаМаршрута, , Маршрут,
				 СтруктураВарианта.Индекс);
			Для Каждого СтруктураИсхТочкиВарианта Из МассивТочек Цикл
				Если СтруктураИсхТочкиВарианта.ИсходящаяТочка = ТочкаМаршрута Тогда
					СтрокаМаршрута = Маршрут.Найти(СтруктураИсхТочкиВарианта.ИсходящаяТочка, "ТочкаМаршрута");
					Если СтрокаМаршрута.Используется Тогда
						СписокВариантов.Добавить(СтруктураВарианта.Индекс, СтруктураВарианта.ВариантСиноним);
						Прервать;
					КонецЕсли;
				Иначе
					СписокВариантов.Добавить(СтруктураВарианта.Индекс, СтруктураВарианта.ВариантСиноним);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			СписокВариантов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		КонецЕсли;
		Возврат СписокВариантов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // СформироватьСписокДоступныхВариантовТочкиМаршрута()

// Функция возвращает структуру с вариантами выполнения задачи.
//
// Параметры:
//  Задача	 - ЗадачаСсылка	 - Задача.
// 
// Возвращаемое значение:
//  Структура - Структура с вариантами выполнения задачи.
//
Функция ПолучитьВариантыВыполненияЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеТочкиЗаголовок	= "";
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборМаршрута.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборМаршрута.Прочитать();
	ТабНабора = НаборМаршрута.Выгрузить();
	СтрокаМаршрута = ТабНабора.Найти(Задача.CRM_ТочкаМаршрута, "ТочкаМаршрута");
	СписокВариантов = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда
		СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,
		Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, 0);
		Если НЕ (СтруктураТочки = Неопределено)
			 И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие 
			ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта) Тогда
			ПредставлениеТочкиЗаголовок = СтруктураТочки.ИсходящаяТочка.Наименование;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка,
			Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
				СписокВариантов.Добавить(ЗначениеМассива.Индекс, ЗначениеМассива.ВариантСиноним,
					 (СтрокаМаршрута.ВариантВыполнения = ЗначениеМассива.Индекс));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Новый Структура("СписокВариантов, ПредставлениеТочкиЗаголовок", СписокВариантов, ПредставлениеТочкиЗаголовок);
	
КонецФункции // ПолучитьВариантыВыполненияЗадачи()

// Функция проверяет наличие у точек задачи исполнителей.
//
// Параметры:
//  Задача	 - ЗадачаСсылка	 - Задача.
// 
// Возвращаемое значение:
//  СписокЗначений - Список точек маршрута без исполнителей.
//
Функция ПроверитьНаличиеСледующегоИсполнителя(Задача, ВариантВыполнения = Неопределено) Экспорт
	Если ВариантВыполнения = Неопределено Тогда
		ВариантВыполнения = Задача.CRM_ВариантВыполнения;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	СписокТочекМаршрута = Новый СписокЗначений;
	МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
		 Задача.CRM_ТочкаМаршрута, , ,
		 ВариантВыполнения);
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регИсполнителиТекущейТочки.Отбор.Объект.Установить(Задача.БизнесПроцесс);
		регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива.ИсходящаяТочка);
		регИсполнителиТекущейТочки.Прочитать();
		Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
			СтруктураИсполнителя = ПолучитьАдресациюЗадачи(СтрокаИсполнителя,
				Задача.БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка, Задача);
			Если СтруктураИсполнителя.Исполнитель = Неопределено Тогда
				СписокТочекМаршрута.Добавить(ЗначениеМассива.ИсходящаяТочка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокТочекМаршрута;
КонецФункции // ПроверитьНаличиеСледующегоИсполнителя()

// Функция проверяет наличие исполнителя у переданных этапов.
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка	 - Ссылка на бизнес процесс.
//  МассивЭтапов	 - Массив				 - Массив с этапами.
// 
// Возвращаемое значение:
//  СписокЗначений - Список точек маршрута без исполнителей.
//
Функция ПроверитьНаличиеСледующегоИсполнителяУЭтапов(БизнесПроцесс, МассивЭтапов) Экспорт
	СписокТочекМаршрута = Новый СписокЗначений;
	
	Для Каждого ЗначениеМассива Из МассивЭтапов Цикл
		регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		регИсполнителиТекущейТочки.Отбор.Объект.Установить(БизнесПроцесс);
		регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива);
		регИсполнителиТекущейТочки.Прочитать();
		Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
			СтруктураИсполнителя = ПолучитьАдресациюЗадачи(СтрокаИсполнителя, БизнесПроцесс, ЗначениеМассива);
			Если СтруктураИсполнителя.Исполнитель = Неопределено Тогда
				СписокТочекМаршрута.Добавить(ЗначениеМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат СписокТочекМаршрута;
	
КонецФункции // ПроверитьНаличиеСледующегоИсполнителя()

// Функция возвращает структуру типов объектов, которые должны быть созданы/выбраны при выполнении задачи.
//
// Параметры:
//  Задача	 - ЗадачаСсылка	 - Задача.
// 
// Возвращаемое значение:
//  Структура - Структура типов объектов.
//
Функция ПолучитьСтруктуруТипов(Задача) Экспорт
	СписокОбязательныхТипов	= Новый СписокЗначений;
	ТаблицаТипов			= Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ВидОбъекта");
	ТаблицаТипов.Колонки.Добавить("ЭтапОснования");
	ТаблицаТипов.Колонки.Добавить("Обязательный");
	НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборОбъектов.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборОбъектов.Прочитать();
	Для Каждого СтрокаНабора Из НаборОбъектов Цикл
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.ВидОбъекта		= СтрокаНабора.ВидОбъекта;
		НоваяСтрока.ЭтапОснования	= СтрокаНабора.ЭтапОснования;
		НоваяСтрока.Обязательный	= СтрокаНабора.Обязательный;
		МассивТипов = СтрокаНабора.ВидОбъекта.ТипЗначения.Типы();
		Если СтрокаНабора.Обязательный Тогда
			СписокОбязательныхТипов.Добавить(МассивТипов[0]);
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("ТаблицаТипов,СписокОбязательныхТипов", ТаблицаТипов, СписокОбязательныхТипов);
КонецФункции // ПолучитьСтруктуруТипов()

// Функция возвращает структуру типов объектов, которые должны быть созданы/выбраны при выполнении задачи.
//
// Параметры:
//  Задача	 - ЗадачаСсылка	 - Задача.
// 
// Возвращаемое значение:
//  Структура - Структура типов объектов.
//
Функция ПолучитьСтруктуруТипов_Новая(Задача) Экспорт
	
	НаборОбъектов = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	НаборОбъектов.Отбор.Объект.Установить(Задача.БизнесПроцесс);
	НаборОбъектов.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
	НаборОбъектов.Прочитать();
	
	СписокОбязательныхТипов	= Новый СписокЗначений;
	ТаблицаТипов			= Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ВидОбъекта");
	ТаблицаТипов.Колонки.Добавить("ЭтапОснования");
	ТаблицаТипов.Колонки.Добавить("Обязательный");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Задача.CRM_ТочкаМаршрута);
	Запрос.УстановитьПараметр("ТипДействия", Перечисления.bpmТипыДействий.ВводДокумента);
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект КАК Объект,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута КАК ТочкаМаршрута,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Идентификатор КАК Идентификатор,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Событие КАК Событие,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия КАК ТипДействия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Проверка КАК Проверка,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Исполнителю КАК Исполнителю,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Ответственному КАК Ответственному,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Клиенту КАК Клиенту,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ВыражениеУсловия КАК ВыражениеУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ПредставлениеОтбора КАК ПредставлениеОтбора,
	|	bpmУсловияЭтаповПоБизнесПроцессам.СпособЗаданияУсловия КАК СпособЗаданияУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Наименование КАК Наименование,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Цель КАК Цель,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаКомбинацииУсловий КАК НастройкаКомбинацииУсловий,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаУсловия КАК НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК bpmУсловияЭтаповПоБизнесПроцессам
	|ГДЕ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект = &Объект
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия = &ТипДействия
	|	И НЕ bpmУсловияЭтаповПоБизнесПроцессам.Цель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.ВидОбъекта		= Выборка.Цель;
		НоваяСтрока.ЭтапОснования	= Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка();
		НоваяСтрока.Обязательный	= Выборка.Проверка;
		МассивТипов = Выборка.Цель.ТипЗначения.Типы();
		Если Выборка.Проверка Тогда
			СписокОбязательныхТипов.Добавить(МассивТипов[0]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаТипов,СписокОбязательныхТипов", ТаблицаТипов, СписокОбязательныхТипов);
	
КонецФункции // ПолучитьСтруктуруТипов()

// Функция проверяет наличие объектов по бизнес-процессу.
//
// Параметры:
//  Задача					 - ЗадачаСсылка	 - Задача
//  СписокОбязательныхТипов	 - СписокЗначений	 - Список обязательных типов.
//  ЭтоПроцессОбъекта		 - Булево			 - Признак процесса.
//  ТолькоПроведенные		 - Булево			 - Признак проверки наличия только проведенных объектов.
// 
// Возвращаемое значение:
//  Массив - Массив ошибок
//
Функция ПроверкаНаличияОбъектовПоБизнесПроцессу(Задача, СписокОбязательныхТипов = Неопределено,
	 ЭтоПроцессОбъекта = Ложь,
	 ТолькоПроведенные = Ложь) Экспорт
	Если СписокОбязательныхТипов = Неопределено Тогда
		СтруктураТипов = ПолучитьСтруктуруТипов_Новая(Задача);
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
	КонецЕсли;
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(Задача.БизнесПроцесс);
	//РегНабор.Отбор.Задача.Установить(Задача.Ссылка);
	РегНабор.Прочитать();
	МассивОшибок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокОбязательныхТипов Цикл
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("Тип") Тогда
			ИскомыйТип = ЭлементСписка.Значение;
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ИскомыйТип = ТипЗнч(ЭлементСписка.Значение.ЗначениеПустойСсылки);
		Иначе
			Продолжить;
		КонецЕсли;
		ЕстьОбъект = Ложь;
		Для Каждого СтрокаНабора Из РегНабор Цикл
			Если ТипЗнч(СтрокаНабора.Объект) = ИскомыйТип 
				И Не СтрокаНабора.Объект.ПометкаУдаления
				И (Не ТолькоПроведенные
					 Или (СтрокаНабора.Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить
					ИЛИ СтрокаНабора.Объект.Проведен)) Тогда
				ЕстьОбъект = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьОбъект Тогда
			МетаДокумента = Метаданные.НайтиПоТипу(ИскомыйТип);
			Синоним = МетаДокумента.Синоним;
			
			ТекстСообщения = НСтр("ru='Ошибка! Для корректного выполнения задачи требуется добавить/выбрать документ %Синоним%';
				|en='Error! For correct execution of the task it is required to add/select the document %Synonym%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Синоним%", Синоним);
			МассивОшибок.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивОшибок;
КонецФункции // ПроверкаНаличияОбъектовПоБизнесПроцессу()

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за расчет сроков исполнения этапов.

// Рассчитать даты выполнения этапов по маршруту.
//
// Параметры:
//  НомерВерсииКарты		 - Число			 			 - Номер версии карты.
//  Организация				 - СправочникСсылка.Организации	 - Ссылка на организацию.
//  ТочкаМаршрута			 - ТочкаМаршрута				 - Точка маршрута для получения.
//  ТаблицаМаршрута			 - ТаблицаЗначений				 - Таблица маршрута.
//  НачалоПериода			 - Дата							 - Начало периода.
//  Вариант					 - Число						 - Индекс точки маршрута.
//  КалендарьЗаполнен		 - Булево						 - Признак заполнения календаря.
//  ТаблицаРассчитанныхТочек - ТаблицаЗначений				 - Таблица рассчитанных точек.
//  КонтрольнаяТочка		 - ТочкаМаршрута				 - Контрольная точка.
//  ОтложитьСледующийЭтап	 - Неопределено, Дата			 - Отложить следующий этап на дату.
// 
// Возвращаемое значение:
//  Структура - Результат функции.
//
Функция РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация, ТочкаМаршрута,
													ТаблицаМаршрута, Знач НачалоПериода, Вариант = Неопределено,
													КалендарьЗаполнен = Истина, ТаблицаРассчитанныхТочек = Неопределено, КонтрольнаяТочка = Неопределено, ОтложитьСледующийЭтап = Неопределено) Экспорт
	
	Перем ВариантВыполнения;
	
	НачПериода = НачалоПериода;
	
	Если ТаблицаРассчитанныхТочек = Неопределено Тогда
		ТаблицаРассчитанныхТочек = Новый ТаблицаЗначений;
		ТаблицаРассчитанныхТочек.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;
	
	Если НЕ Вариант = Неопределено Тогда
		ВариантВыполнения = Вариант;
	КонецЕсли;
	
	ТекущаяТочка		= ТочкаМаршрута;
	
	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Цикл
		
		ПроверкаНаЗацикливание = ТаблицаРассчитанныхТочек.Найти(ТекущаяТочка, "ТочкаМаршрута");
		Если ПроверкаНаЗацикливание = Неопределено Тогда
			НоваяСтрока = ТаблицаРассчитанныхТочек.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		Иначе
			Прервать;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
			
			ВариантВыполнения = 0;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
			
			СтрокаЭтапа			= ТаблицаМаршрута.Найти(ТекущаяТочка, "ТочкаМаршрута");
			ВариантВыполнения	= СтрокаЭтапа.ВариантВыполнения;
			
			СтруктураДлительностиНачалоПериода = Новый Структура();
			СтруктураДлительностиНачалоПериода.Вставить("Дней"	, СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
			СтруктураДлительностиНачалоПериода.Вставить("Часов"	, СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
			СтруктураДлительностиНачалоПериода.Вставить("Минут"	, СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
			
			СтруктураДлительностиКонПериода = Новый Структура();
			СтруктураДлительностиКонПериода.Вставить("Дней"	, СтрокаЭтапа.ДлительностьДней);
			СтруктураДлительностиКонПериода.Вставить("Часов", СтрокаЭтапа.ДлительностьЧасов);
			СтруктураДлительностиКонПериода.Вставить("Минут", СтрокаЭтапа.ДлительностьМинут);
			
			Если НЕ КонтрольнаяТочка = Неопределено Тогда
				УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка, "ТочкаМаршрута");
				
				Если КонтрольнаяТочка = ТекущаяТочка ИЛИ НЕ УжеПрошли = Неопределено Тогда
					//СтрокаЭтапа.ДатаНачала	= НачПериода;
					СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
					Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
						СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
						ОтложитьСледующийЭтап = Неопределено;
					Иначе
						СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
							 СтруктураДлительностиНачалоПериода, , Организация, ,
							 КалендарьЗаполнен);
					КонецЕсли;
					КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,
						 СтруктураДлительностиКонПериода, , Организация, ,
						 КалендарьЗаполнен);
				Иначе
					СтрокаЭтапа.ДатаНачала	= НачалоПериода;
					КонПериода				= НачалоПериода;
				КонецЕсли;
			Иначе
				//СтрокаЭтапа.ДатаНачала		= НачПериода;
				СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
				Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
					СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
					ОтложитьСледующийЭтап = Неопределено;
				Иначе
					СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
						 СтруктураДлительностиНачалоПериода, , Организация, ,
						 КалендарьЗаполнен);
				КонецЕсли;
				КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,
					 СтруктураДлительностиКонПериода, , Организация, ,
					 КалендарьЗаполнен);
			КонецЕсли;
			
			//СтрокаЭтапа.ДатаНачала		= НачПериода;
			СтрокаЭтапа.ДатаВыполнения	= КонПериода;
			НачПериода					= КонПериода;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			СтрокаЭтапа			= ТаблицаМаршрута.Найти(ТекущаяТочка, "ТочкаМаршрута");
			ВариантВыполнения	= 0;
			Если ЗначениеЗаполнено(СтрокаЭтапа.Шаблон) Тогда
				// Определим длительность вложенного БП по шаблону.
				
				НаборМаршрутВложенного = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
				НаборМаршрутВложенного.Отбор.Объект.Установить(СтрокаЭтапа.Шаблон);
				НаборМаршрутВложенного.Прочитать();
				
				ТабНаборМаршрутВложенного = НаборМаршрутВложенного.Выгрузить();
				ТабНаборМаршрутВложенного.Колонки.Удалить("Объект");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаНачала");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаВыполнения");
				ТабНаборМаршрутВложенного.Колонки.Добавить("ДатаНачалаВходящая");
				
				Если НаборМаршрутВложенного.Количество() > 0 Тогда
					
					КонПериода = Дата("00010101");
					СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(СтрокаЭтапа.Шаблон);
					Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
						РассчитатьДатыВыполненияЭтаповПоМаршруту(СтрокаЭтапа.Шаблон.НомерВерсии, Организация,
							 ЭлементСписка.Значение, ТабНаборМаршрутВложенного, НачПериода, , КалендарьЗаполнен, , ,
							 ОтложитьСледующийЭтап);
						
						ТабНаборМаршрутВложенного.Сортировать("ДатаВыполнения УБЫВ");
						
						Если КонПериода < ТабНаборМаршрутВложенного[0].ДатаВыполнения Тогда
							КонПериода = ТабНаборМаршрутВложенного[0].ДатаВыполнения;
						КонецЕсли;
					КонецЦикла;
					
					ОтложитьСледующийЭтап = Неопределено;
					
					СтрокаЭтапа.ДатаНачала		= НачПериода;
					СтрокаЭтапа.ДатаВыполнения	= КонПериода;
					НачПериода					= КонПериода;
					
					СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
						 НомерВерсииКарты,
						 ВариантВыполнения);
					ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДлительностиНачалоПериода = Новый Структура();
			СтруктураДлительностиНачалоПериода.Вставить("Дней"	, СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
			СтруктураДлительностиНачалоПериода.Вставить("Часов"	, СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
			СтруктураДлительностиНачалоПериода.Вставить("Минут"	, СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
			
			СтруктураДлительностиКонПериода = Новый Структура();
			СтруктураДлительностиКонПериода.Вставить("Дней"	, СтрокаЭтапа.ДлительностьДней);
			СтруктураДлительностиКонПериода.Вставить("Часов", СтрокаЭтапа.ДлительностьЧасов);
			СтруктураДлительностиКонПериода.Вставить("Минут", СтрокаЭтапа.ДлительностьМинут);
			
			Если НЕ КонтрольнаяТочка = Неопределено Тогда
				УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка, "ТочкаМаршрута");
				
				Если КонтрольнаяТочка = ТекущаяТочка ИЛИ НЕ УжеПрошли = Неопределено Тогда
					//СтрокаЭтапа.ДатаНачала	= НачПериода;
					СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
					Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
						СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
						ОтложитьСледующийЭтап = Неопределено;
					Иначе
						СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
							 СтруктураДлительностиНачалоПериода, , Организация, ,
							 КалендарьЗаполнен);
					КонецЕсли;
					КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,
						 СтруктураДлительностиКонПериода, , Организация, ,
						 КалендарьЗаполнен);
				Иначе
					СтрокаЭтапа.ДатаНачала	= НачалоПериода;
					КонПериода				= НачалоПериода;
				КонецЕсли;
			Иначе
				//СтрокаЭтапа.ДатаНачала		= НачПериода;
				СтрокаЭтапа.ДатаНачалаВходящая = НачПериода;
				Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
					СтрокаЭтапа.ДатаНачала	= ОтложитьСледующийЭтап;
					ОтложитьСледующийЭтап = Неопределено;
				Иначе
					СтрокаЭтапа.ДатаНачала	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
						 СтруктураДлительностиНачалоПериода, , Организация, ,
						 КалендарьЗаполнен);
				КонецЕсли;
				КонПериода				= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(СтрокаЭтапа.ДатаНачала,
					 СтруктураДлительностиКонПериода, , Организация, ,
					 КалендарьЗаполнен);
			КонецЕсли;
			
			//КонПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
			//	СтруктураДлительности,,Организация,,
			//	КалендарьЗаполнен);
			
			//СтрокаЭтапа.ДатаНачала		= НачПериода;
			СтрокаЭтапа.ДатаВыполнения	= КонПериода;
			НачПериода					= КонПериода;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			
			ВариантВыполнения	= 0;
			СтруктураТочки		= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка		= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсииКарты);
			
			ДатаРазделения = Дата("00010101");
			Для Каждого СтруктураТочки Из МассивСтруктурТочек Цикл
				
				СтруктураВетки = РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация,
					 СтруктураТочки.ИсходящаяТочка, ТаблицаМаршрута, НачПериода, , КалендарьЗаполнен, ,
					 КонтрольнаяТочка,
					 ОтложитьСледующийЭтап);
				Если СтруктураВетки.ДатаВетки > ДатаРазделения Тогда
					ДатаРазделения = СтруктураВетки.ДатаВетки;
				КонецЕсли;
			КонецЦикла;
			
			ОтложитьСледующийЭтап = Неопределено;
			
			НачПериода = ДатаРазделения;
			ВариантВыполнения = 0;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтруктураВетки.ТочкаСлияния,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			Возврат Новый Структура("ТочкаСлияния,ДатаВетки", ТекущаяТочка, НачПериода);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КонтрольнаяТочка = Неопределено Тогда
		УжеПрошли = ТаблицаРассчитанныхТочек.Найти(КонтрольнаяТочка, "ТочкаМаршрута");
		Если УжеПрошли = Неопределено Тогда
			РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация, КонтрольнаяТочка,
				 ТаблицаМаршрута, НачалоПериода, , КалендарьЗаполнен, , ,
				 ОтложитьСледующийЭтап);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Рассчитать плановую дату завершения БП.
//
// Параметры:
//  НомерВерсииКарты - Число							 - Номер версии карты.
//  Организация		 - СправочникСсылка.Организации		 - Ссылка на организацию.
//  ТочкаМаршрута	 - ТочкаМаршрута					 - Точка маршрута для получения.
//  Проект			 - СправочникСсылка.Проекты			 - Ссылка на проект.
//  КартаМаршрута	 - СправочникСсылка.CRM_КартыМаршрутов	 - Ссылка на карту маршрута.
//  ДатаСтарта		 - Дата									 - Дата старта.
// 
// Возвращаемое значение:
//  Дата - Плановая дата завершения БП.
//
Функция РассчитатьПлановуюДатуЗавершенияБП(НомерВерсииКарты, Организация, ТочкаМаршрута, Проект,
	 КартаМаршрута,
	 Знач ДатаСтарта) Экспорт
	
	НаборМаршрут = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборМаршрут.Отбор.Объект.Установить(КартаМаршрута);
	НаборМаршрут.Прочитать();

	ТабНаборМаршрут = НаборМаршрут.Выгрузить();
	ТабНаборМаршрут.Колонки.Удалить("Объект");
	ТабНаборМаршрут.Колонки.Добавить("Объект", Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	ТабНаборМаршрут.Колонки.Добавить("ДатаНачала");
	ТабНаборМаршрут.Колонки.Добавить("ДатаВыполнения");
	ТабНаборМаршрут.Колонки.Добавить("ДатаНачалаВходящая");
	Если ЗначениеЗаполнено(ДатаСтарта) И ДатаСтарта > ТекущаяДатаСеанса() Тогда
		НачПериода = ДатаСтарта;
	Иначе
		НачПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	РассчитатьДатыВыполненияЭтаповПоМаршруту(НомерВерсииКарты, Организация, ТочкаМаршрута, ТабНаборМаршрут, НачПериода);
	Возврат CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(ТабНаборМаршрут);
	
КонецФункции

// Пересчитать сроки исполнения задач бизнес процесса.
//
// Параметры:
//  Задача					 - ЗадачаСсылка		 - Ссылка на задачу.
//  НачПериода				 - Дата				 - Начало периода.
//  ВариантВыполнения		 - Число			 - Индекс точки маршрута.
//  ТочкаМаршрута			 - ТочкаМаршрута	 - Точка маршрута для получения.
//  ОтложитьСледующийЭтап	 - Неопределено, Дата	 - Отложить следующий этап на дату.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица этапов.  
//
Функция ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Задача, НачПериода,
	 ВариантВыполнения = Неопределено, ТочкаМаршрута = Неопределено,
	 ОтложитьСледующийЭтап = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект КАК Объект,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Состояние КАК Состояние,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения КАК ВариантВыполнения,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой КАК ВариантВыполненияСтрокой,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней КАК ДлительностьДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов КАК ДлительностьЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут КАК ДлительностьМинут,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаДней КАК ОтложитьНачалоЭтапаДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаЧасов КАК ОтложитьНачалоЭтапаЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаМинут КАК ОтложитьНачалоЭтапаМинут,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачалаВходящая КАК ДатаНачалаВходящая,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Используется КАК Используется,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Задание КАК Задание,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок КАК Порядок,
	|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон КАК Шаблон,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой КАК ИсполнительСтрокой,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала КАК ДатаНачала,
	|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения КАК ДатаВыполнения,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииДней КАК НапомнитьОбОкончанииДней,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииЧасов КАК НапомнитьОбОкончанииЧасов,
	|	CRM_НастройкиЭтаповБизнесПроцессов.НапомнитьОбОкончанииМинут КАК НапомнитьОбОкончанииМинут
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Задача.БизнесПроцесс);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	
	СтрокаЭтапа = ТаблицаЭтапов.Найти(Задача.CRM_ТочкаМаршрута, "ТочкаМаршрута");
	СтрокаЭтапа.ДатаВыполнения = НачПериода;
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,
		 Задача.БизнесПроцесс.НомерВерсииКартыМаршрута, ?(ВариантВыполнения = Неопределено,
		 СтрокаЭтапа.ВариантВыполнения,
		 ВариантВыполнения));
	РассчитатьДатыВыполненияЭтаповПоМаршруту(Задача.БизнесПроцесс.НомерВерсииКартыМаршрута,
		 Задача.БизнесПроцесс.Организация,
												СтруктураТочки.ИсходящаяТочка, ТаблицаЭтапов, НачПериода,
												?(ВариантВыполнения = Неопределено, СтрокаЭтапа.ВариантВыполнения, ВариантВыполнения), , , ТочкаМаршрута, ОтложитьСледующийЭтап);
	
	Возврат ТаблицаЭтапов;
	
КонецФункции

// Процедура перезаполняет длительности этапов из таблицы исполнителей.
//
// Параметры:
//  БизнесПроцесс	     - БизнесПроцессСсылка	 - Ссылка на бизнес процесс.
//  ТаблицаИсполнителей	 - ТаблицаЗначений - Таблица исполнителей.
//
Процедура СкорректироватьДлительностьЭтаповБизнесПроцесса(БизнесПроцесс, ТаблицаИсполнителей) Экспорт
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(БизнесПроцесс);
	НаборЭтапов.Прочитать();
	
	Для Каждого СтрокаНабора Из НаборЭтапов Цикл
		СтрокаТаблицы = ТаблицаИсполнителей.Найти(СтрокаНабора.ТочкаМаршрута, "ТочкаМаршрута");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			СтрокаНабора.ДлительностьДней	= СтрокаТаблицы.ДлительностьДней;
			СтрокаНабора.ДлительностьЧасов	= СтрокаТаблицы.ДлительностьЧасов;
			СтрокаНабора.ДлительностьМинут	= СтрокаТаблицы.ДлительностьМинут;
			СтрокаНабора.ДатаНачала			= СтрокаТаблицы.ДатаНачала;
			СтрокаНабора.ДатаВыполнения		= СтрокаТаблицы.ДатаВыполнения;
		КонецЕсли;
	КонецЦикла;
	
	НаборЭтапов.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за формирование задач и вложенных бизнес-процессов.

// Функция получает результат выполнения задачи.
//
// Параметры:
//  Задача	 - ЗадачаСсылка	 - Задача.
// 
// Возвращаемое значение:
//  Массив - Массив ошибок
//
Функция ПолучитьРезультатВыполнения(Задача) Экспорт
	СписокБП = Новый СписокЗначений;
	МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
		 Задача.CRM_ТочкаМаршрута, , ,
		 Задача.CRM_ВариантВыполнения);
		 
	МассивТочек = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			МассивТочек.Добавить(ЗначениеМассива.ИсходящаяТочка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивТочек.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	(НЕ CRM_БизнесПроцесс.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка))
		|	И (НЕ CRM_БизнесПроцесс.ПометкаУдаления)
		|	И (НЕ CRM_БизнесПроцесс.Стартован)
		|	И CRM_БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
		|	И CRM_БизнесПроцесс.ВедущаяЗадача.CRM_ТочкаМаршрута В (&ТочкиМаршрута)";
		Запрос.УстановитьПараметр("БизнесПроцесс", Задача.БизнесПроцесс);
		Запрос.УстановитьПараметр("ТочкиМаршрута", МассивТочек);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокБП.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокБП;
КонецФункции // ПолучитьРезультатВыполнения()

// Процедура вызывается из подписки на событие "CRM_ПриВыполненииЗадачиИсполнителя".
//
// Параметры:
//  Источник		 - БизнесПроцессСсылка, Неопределено - Источник.
//  Отказ			 - Булево - Признак отказа. 
//  ТочкаМаршрута	 - ТочкаМаршрута - Точка маршрута для получения.
//  ЭтоСменаЭтапа	 - Булево - Признак смены этапов. 
//
Процедура ПриВыполненииЗадачиИсполнителя(Источник, Отказ, ТочкаМаршрута = Неопределено, ЭтоСменаЭтапа = Ложь) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс)
		 И Не ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ЗадачаИсполнителяМодульОбъектаПриЗаписи(Источник, Отказ);
	
	Если ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		
		ДинамическиРассчитыватьСрокиВыполненияЭтапов =
			Источник.БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		
		Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
			ТаблицаЭтапов = ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Источник, ТекущаяДатаСеанса(),
				 Источник.CRM_ВариантВыполнения, ТочкаМаршрута,
				 ?(Источник.ДополнительныеСвойства.Свойство("ОтложитьСледующийЭтап"),
				 Источник.ДополнительныеСвойства.ОтложитьСледующийЭтап,
				 Неопределено));
		КонецЕсли;
		
		Если ЭтоСменаЭтапа = Неопределено И НЕ Источник.CRM_Переадресована Тогда
			Если НЕ Источник.CRM_ЗавершенДосрочно Тогда
				Источник.CRM_Неудача =
					(Источник.БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
				Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
			Иначе
				Взаимодействие = Неопределено;
			КонецЕсли;
			
			ПолучитьСледующуюТочкуСформироватьЗадачи(Источник.Ссылка, ТаблицаЭтапов, Отказ,
				 ?(Источник.ДополнительныеСвойства.Свойство("ОтложитьСледующийЭтап"),
				 Источник.ДополнительныеСвойства.ОтложитьСледующийЭтап, Неопределено),
				 Взаимодействие);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
				НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
				НаборЭтапов.Отбор.Объект.Установить(Источник.БизнесПроцесс);
				НаборЭтапов.Прочитать();
				НаборЭтапов.Загрузить(ТаблицаЭтапов);
				НаборЭтапов.Записать();
			КонецЕсли;
			CRM_ОповещенияСервер.УдалитьОповещения(Источник.Ссылка);
			
			Если Источник.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение 
				И Источник.БизнесПроцесс.ОповещатьАвтора И НЕ Источник.CRM_Переадресована Тогда
				CRM_ОповещенияСервер.ОповеститьАвтораПорученияОВыполненииЗадачи(Источник.Ссылка);
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(Источник.БизнесПроцесс.Проект) И НЕ Источник.CRM_Переадресована
				// И НЕ Источник.CRM_Неудача Тогда
			Если НЕ Источник.CRM_Переадресована И НЕ Источник.CRM_Неудача Тогда
				// Если Бизнес-процесс стартован по проекту, то возможно для процесса были настроены
				// оповещения для этапов. В таком случае надо сформировать оповещения.
				
				//НастройкиОповещения = РегистрыСведений.CRM_ОповещенияЭтапов.СоздатьНаборЗаписей();
				//НастройкиОповещения.Отбор.Объект.Установить(Источник.БизнесПроцесс.Проект);
				//НастройкиОповещения.Отбор.ТочкаМаршрута.Установить(Источник.CRM_ТочкаМаршрута);
				//НастройкиОповещения.Отбор.Событие.Установить(Перечисления.CRM_СобытияЗадачи.ПриЗавершении);
				//НастройкиОповещения.Прочитать();
				//
				//ПараметрыОповещения = НастройкиОповещения.Выгрузить();
				//
				//CRM_ОповещенияСервер.СформироватьОповещениеПоЗадаче(Источник.Ссылка, ПараметрыОповещения);
				
				Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
					Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
				Иначе
					Взаимодействие = Неопределено;
				КонецЕсли;
				
				ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка,
					 Перечисления.bpmСобытияЭтапа.ПриЗавершении,
					 Взаимодействие);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли Источник.БизнесПроцесс = Неопределено И Источник.CRM_Личная Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Источник.Ссылка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс)
		 И Источник.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		ДействияПослеВыполненияЗадачи(Источник);
	КонецЕсли;
	
КонецПроцедуры

// Получить задачи по запросу выполнить
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка - Задача.
//
Процедура ПолучитьЗадачиПоЗапросуВыполнить(ЗадачаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	МассивЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
	
	Для Каждого Задача Из МассивЗадач Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, , ,
			 НСтр("ru='Выполнена автоматически по причине: Выполнена задача по которой был создан запрос.';
			|en='Completed automatically due to: The task on which the query was created was performed.'"));
	КонецЦикла;
	
КонецПроцедуры

// Сформировать запись о текущем этапе бизнес процесса
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка	 - Ссылка на бизнес процесс.
//  ТекущаяЗадача	 - ЗадачаСсылка			 - Текущая задача.
//  ЗавершенДосрочно - Булево				 - Признак завершения досрочно.
//  Завершен		 - Булево				 - Признак завершения.
//
Процедура СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс, ТекущаяЗадача = Неопределено,
	 ЗавершенДосрочно = Ложь,
	 Завершен = Ложь) Экспорт
	
	ПредставлениеЭтапа = "";
	
	Если НЕ ЗавершенДосрочно И НЕ Завершен Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		Запрос.УстановитьПараметр("ТекущаяЗадача", ТекущаяЗадача);
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Если НЕ ТекущаяЗадача = Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ ЗадачаИсполнителя.Ссылка = &ТекущаяЗадача";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута";
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеЭтапа = ПредставлениеЭтапа + ?(ПредставлениеЭтапа = "", "", "; ") + Строка(Выборка.CRM_ТочкаМаршрута);
			
		КонецЦикла;
		
	ИначеЕсли ЗавершенДосрочно Тогда // Бизнес-процесс завершен досрочно.
		
		ВариантЗавершенияСтрокой = ?(ЗначениеЗаполнено(БизнесПроцесс.ВариантЗавершения),
			 НРег(Строка(БизнесПроцесс.ВариантЗавершения)),
			 "");
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ЭтапДосрочногоЗавершения) Тогда
			Если ЗначениеЗаполнено(БизнесПроцесс.ПричинаДосрочногоЗавершения) Тогда
				ПредставлениеЭтапа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Процесс завершен досрочно %1 по причине ""%2""';
					|en='It is completed ahead of schedule %1 for the reason: ""%2""'"),
																							 ВариантЗавершенияСтрокой,
																							 Строка(БизнесПроцесс.ПричинаДосрочногоЗавершения));
			Иначе
				ПредставлениеЭтапа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Процесс завершен досрочно %1';
					|en='It is completed ahead of schedule %1'"),
																							 ВариантЗавершенияСтрокой);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(БизнесПроцесс.ПричинаДосрочногоЗавершения) Тогда
				ПредставлениеЭтапа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Процесс завершен досрочно %1 по причине ""%2""';
					|en='It is completed ahead of schedule %1 for the reason: ""%2""'"),
																							 ВариантЗавершенияСтрокой,
																							 Строка(БизнесПроцесс.ПричинаДосрочногоЗавершения));
			Иначе
				ПредставлениеЭтапа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Процесс завершен досрочно %1';
					|en='It is completed ahead of schedule %1'"),
																							 ВариантЗавершенияСтрокой);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Завершен Тогда // бизнес-процесс завершен
		Если ЗначениеЗаполнено(БизнесПроцесс.ВариантЗавершения) Тогда
			ПредставлениеЭтапа = НСтр("ru='Процесс завершен';en='Process completed'") + " " 
				+ НРег(Строка(БизнесПроцесс.ВариантЗавершения));
		Иначе
			ПредставлениеЭтапа = НСтр("ru='Процесс завершен';en='Process completed'");
		КонецЕсли;
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект		= БизнесПроцесс;
	НоваяЗапись.ТекущийЭтап	= ПредставлениеЭтапа;
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Процедура вызывается из модуля объекта задачи исполнителя(при выполнении)
//  выполняет проверки на возможность создания следующей задачи, формирует задачи,
//  выполняет обработчики прописанные в точках маршрута.
//
// Параметры:
//  Задача					 - ЗадачаСсылка		 - Задача
//  ТаблицаЭтапов			 - ТаблицаЗначений	 - Таблица этапов.
//  Отказ					 - Булево			 - Флаг отказа.
//  ОтложитьСледующийЭтап	 - Неопределено, Дата	 - Отложить следующий этап на дату.
//  Взаимодействие			 - Произвольный			 - Взаимодействие.
//
Процедура ПолучитьСледующуюТочкуСформироватьЗадачи(Задача, ТаблицаЭтапов = Неопределено, Отказ,
	 ОтложитьСледующийЭтап = Неопределено,
	 Взаимодействие = Неопределено) Экспорт
	
	Перем мОтказ;
	
	мОтказ = Ложь;
	
	Если Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
		Если НЕ Задача.CRM_ЗавершенДосрочно Тогда
			ТекстСообщения = "";
			
			// Аналог обработки задачей события ПриВыполнении.
			CRM_БизнесПроцессыПереопределяемый.ТочкаДействияПриВыполнении(Задача.CRM_ТочкаМаршрута, Задача,
				 мОтказ,
				 ТекстСообщения);
			
			Если мОтказ Тогда
				Если ТекстСообщения = "" Тогда
					ТекстСообщения = НСтр("ru='Не удалось выполнить задачу.';en='It were not possible to carry out the task.'");
				КонецЕсли;
				
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НеФормируемЗадачи	= Ложь;
		ФормируемыеЗадачи	= Новый Массив;
		ДосрочноеЗавершение = Ложь;
		ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		// Если бизнес-процесс завершен досрочно, то не двигаемся дальше.
		Если Задача.БизнесПроцесс.ЗавершенДосрочно Тогда
			НеФормируемЗадачи	= Истина;
			ДосрочноеЗавершение = Истина;
		КонецЕсли;
		// Если бизнес-процесс завершен досрочно, то не двигаемся дальше в данной задаче досрочно завершили БП.
		Если Задача.CRM_ЗавершенДосрочно Тогда
			НеФормируемЗадачи	= Истина;
			ДосрочноеЗавершение = Истина;
		КонецЕсли;
		
		ПроверитьНаРазделения(Задача, Задача.CRM_ТочкаМаршрута);
		
		Если НЕ НеФормируемЗадачи Тогда
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
				 Задача.CRM_ТочкаМаршрута, , , Задача.CRM_ВариантВыполнения, ,
				 Истина);
			СлияниеНеПройдено = ПроверитьНаСлияниеЗаписатьРезультат(Задача, МассивИсходящихТочек);
			БизнесПроцессЗавершен = ПроверитьНаЗавершение(Задача, МассивИсходящихТочек);
			
			Если БизнесПроцессЗавершен Тогда
				СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(Задача.БизнесПроцесс, , , Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НеФормируемЗадачи И НЕ БизнесПроцессЗавершен И НЕ СлияниеНеПройдено Тогда
			СформироватьМассивЗадач(Задача.БизнесПроцесс, Задача.ТочкаМаршрута, МассивИсходящихТочек,
				 ФормируемыеЗадачи, Задача, ТаблицаЭтапов, Отказ, , ОтложитьСледующийЭтап,
				 Взаимодействие);
			Если НЕ Отказ Тогда
				ЗаписатьЗадачи(ФормируемыеЗадачи, ТаблицаЭтапов);
				
				СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(Задача.БизнесПроцесс, Задача);
			КонецЕсли;
		КонецЕсли;
		Если НЕ Отказ И НЕ ДосрочноеЗавершение Тогда
			Если Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПослеВыполнения(Задача, ФормируемыеЗадачи);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСледующуюТочкуСформироватьЗадачи()

// Процедура формирует задачи по переданному массиву точек маршрута
//  вызывается процедурой ПолучитьСледующуюТочкуСформироватьЗадачи и из модуля объекта бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс				 - БизнесПроцессСсылка	 - Ссылка на бизнес-процесс.
//  ТочкаМаршрутаБизнесПроцесса	 - СправочникСсылка		 - Точка маршрута родной карты бизнес-процесса.
//  МассивИсходящихТочек		 - Массив из Структура	 - содержит точки маршрута, по кот. требуется создать задачи.
//  ФормируемыеЗадачи			 - Массив из ЗадачаОбъект.ЗадачаИсполнителя - содержит создаваемые задачи.
//  Задача						 - ЗадачаСсылка			 - Ссылка на предыдущую задачу, нужна при получении исполнителей.
//  ТаблицаЭтапов				 - ТаблицаЗначений		 - Таблица этапов.
//  Отказ						 - Булево				 - Флаг отмены.
//  СтандартнаяОбработка		 - Булево				 - Флаг стандартной обработки.
//  ОтложитьСледующийЭтап		 - Неопределено, Дата	 - Отложить следующий этап на дату.
//  Взаимодействие				 - Произвольный			 - Взаимодействие.
//	ОбъектПроцесса				 - Произвольный			 - Объект процесса.
//
Процедура СформироватьМассивЗадач(БизнесПроцесс, ТочкаМаршрутаБизнесПроцесса, МассивИсходящихТочек,
	 ФормируемыеЗадачи, Задача = Неопределено, ТаблицаЭтапов = Неопределено, Отказ,
	 СтандартнаяОбработка = Истина, ОтложитьСледующийЭтап = Неопределено, Взаимодействие = Неопределено,
	 ОбъектПроцесса = Неопределено) Экспорт
	
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		
		ФормируемыеЗадачиПоТочке = Новый Массив;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru='Для точки вложенного бизнес-процесса ""';en='For a point of nested business process ""'") 
				+ ЗначениеМассива.ИсходящаяТочка.Наименование 
				+ НСтр("ru='"" не указан процесс."
				"Скорректируйте маршрут бизнес-процесса:'") + " " + СокрЛП(БизнесПроцесс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Прервать;
		Иначе
			
			Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПередСозданиемЗадач(БизнесПроцесс ,
					 ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке,
					 СтандартнаяОбработка);
				
			ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПередСозданиемЗадач(БизнесПроцесс ,
					 ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке,
					 СтандартнаяОбработка);
				
			КонецЕсли;
			
			ТекстОшибки = "";
			
			Если СтандартнаяОбработка Тогда
			
				Если ТаблицаЭтапов = Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	CRM_НастройкиЭтаповБизнесПроцессов.Объект КАК Объект,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Состояние КАК Состояние,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения КАК ВариантВыполнения,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой КАК ВариантВыполненияСтрокой,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней КАК ДлительностьДней,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов КАК ДлительностьЧасов,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут КАК ДлительностьМинут,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаДней КАК ОтложитьНачалоЭтапаДней,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаЧасов КАК ОтложитьНачалоЭтапаЧасов,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ОтложитьНачалоЭтапаМинут КАК ОтложитьНачалоЭтапаМинут,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Используется КАК Используется,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Задание КАК Задание,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок КАК Порядок,
					|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон КАК Шаблон,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой КАК ИсполнительСтрокой,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала КАК ДатаНачала,
					|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения КАК ДатаВыполнения
					|ИЗ
					|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
					|ГДЕ
					|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
					
					Запрос.УстановитьПараметр("Объект", БизнесПроцесс);
					ТаблицаЭтапов = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выгрузить();
				КонецЕсли;
				
				СтрокаЭтапа = ТаблицаЭтапов.Найти(ЗначениеМассива.ИсходящаяТочка, "ТочкаМаршрута");
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект КАК Объект,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель КАК Исполнитель,
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Все
				|ИЗ
				|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
				|ГДЕ
				|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект
				|	И CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута = &ТочкаМаршрута";
				Запрос.УстановитьПараметр("Объект"			, БизнесПроцесс);
				Запрос.УстановитьПараметр("ТочкаМаршрута"	, ЗначениеМассива.ИсходящаяТочка);
				
				ТаблицаИсполнителей = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выгрузить();
				
				Для Каждого СтрокаИсполнителя Из ТаблицаИсполнителей Цикл
					
					Если СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный
						И БизнесПроцесс.Ответственный = Справочники.Пользователи.ПустаяСсылка() Тогда
						
						ТекстОшибки = НСтр("ru = 'Требуется указание ответственного пользователя.'");
						Продолжить;
					КонецЕсли;
					
					СтруктураИсполнителя = ПолучитьАдресациюЗадачи(СтрокаИсполнителя, БизнесПроцесс,
						 ЗначениеМассива.ИсходящаяТочка,
						 Задача);
					
					СписокИсполнителейРоли = Неопределено;
					Если СтрокаИсполнителя.Все И ЗначениеЗаполнено(СтруктураИсполнителя.РольИсполнителя) Тогда
						СписокИсполнителейРоли = ПолучитьВозможныхИсполнителейПоРоли(СтруктураИсполнителя.РольИсполнителя, Задача);
					КонецЕсли;
					
					НомерПоследнейИтерации = ПолучитьИтерациюЗадачи(БизнесПроцесс, ЗначениеМассива.ИсходящаяТочка);
					
					МассивСтруктурИсполнителей = Новый Массив;
					Если СписокИсполнителейРоли = Неопределено Тогда
						МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителя);
					Иначе
						Для Каждого ЭлементСписка Из СписокИсполнителейРоли Цикл
							СтруктураИсполнителяРоли = Новый Структура("Исполнитель, РольИсполнителя,
								| ОсновнойОбъектАдресации,
								| ДополнительныйОбъектАдресации");
							СтруктураИсполнителяРоли.Исполнитель					= ЭлементСписка.Значение;
							СтруктураИсполнителяРоли.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
							СтруктураИсполнителяРоли.ОсновнойОбъектАдресации		= Неопределено;
							СтруктураИсполнителяРоли.ДополнительныйОбъектАдресации	= Неопределено;
							МассивСтруктурИсполнителей.Добавить(СтруктураИсполнителяРоли);
						КонецЦикла;
					КонецЕсли;
					
					Для Каждого СтруктураИсполнителя Из МассивСтруктурИсполнителей Цикл
						
						НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
						НоваяЗадача.БизнесПроцесс					= БизнесПроцесс;
						Если ОбъектПроцесса <> Неопределено Тогда
							НоваяЗадача.ДополнительныеСвойства.Вставить("ОбъектПроцесса", ОбъектПроцесса);
						КонецЕсли;
						// Для бизнес-процесса на основании предопределенной карты "Поручение" наименование задачи формируем по своему.
						Если БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
							Если ЗначениеМассива.ИсходящаяТочка.Имя = "Действие1" Тогда
								НоваяЗадача.Наименование			= БизнесПроцесс.Наименование;
							ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Имя = "Действие2" Тогда
								НоваяЗадача.Наименование			= "Проверить: """ + БизнесПроцесс.Наименование + """";
							Иначе
								НоваяЗадача.Наименование			= ЗначениеМассива.ИсходящаяТочка.Наименование;
							КонецЕсли;
						Иначе
							НоваяЗадача.Наименование				= БизнесПроцесс.Наименование + " (" 
								+ ЗначениеМассива.ИсходящаяТочка.Наименование 
								+ ")";
						КонецЕсли;
						НоваяЗадача.CRM_Проект						= БизнесПроцесс.Проект;
						НоваяЗадача.CRM_Партнер						= БизнесПроцесс.Партнер;
						НоваяЗадача.CRM_КонтактноеЛицо				= БизнесПроцесс.КонтактноеЛицо;
						НоваяЗадача.CRM_ПотенциальныйКлиент			= БизнесПроцесс.ПотенциальныйКлиент;
						НоваяЗадача.ТочкаМаршрута					= ТочкаМаршрутаБизнесПроцесса;
						НоваяЗадача.CRM_ТочкаМаршрута				= ЗначениеМассива.ИсходящаяТочка;
						НоваяЗадача.CRM_Итерация					= НомерПоследнейИтерации + 1;
						НоваяЗадача.Описание						= СтрокаЭтапа.Задание;
						НоваяЗадача.Дата							= ТекущаяДатаСеанса();
						НоваяЗадача.CRM_СостояниеИнтереса			= СтрокаЭтапа.Состояние;
						
						СтруктураДлительностиНачалоПериода = Новый Структура();
						СтруктураДлительностиНачалоПериода.Вставить("Дней"	, СтрокаЭтапа.ОтложитьНачалоЭтапаДней);
						СтруктураДлительностиНачалоПериода.Вставить("Часов"	, СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов);
						СтруктураДлительностиНачалоПериода.Вставить("Минут"	, СтрокаЭтапа.ОтложитьНачалоЭтапаМинут);
						
						Если НЕ ОтложитьСледующийЭтап = Неопределено Тогда
							НоваяЗадача.ДатаНачала = ОтложитьСледующийЭтап;
						Иначе
							НоваяЗадача.ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ТекущаяДатаСеанса(),
								 СтруктураДлительностиНачалоПериода, ,
								 БизнесПроцесс.Организация);
						КонецЕсли;
						
						Если БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
						ИначеЕсли БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
						ИначеЕсли БизнесПроцесс.Важность = Перечисления.ВариантыВажностиВзаимодействия.Низкая Тогда
							НоваяЗадача.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;
						КонецЕсли;
						
						Если ОтложитьСледующийЭтап = Неопределено И ЗначениеЗаполнено(СтрокаЭтапа.ДатаВыполнения) Тогда
							НоваяЗадача.СрокИсполнения				= ?(СтрокаЭтапа.ДатаВыполнения < ТекущаяДатаСеанса(),
								 ТекущаяДатаСеанса(),
								 СтрокаЭтапа.ДатаВыполнения);
						Иначе
							НачПериода = НоваяЗадача.ДатаНачала;
							
							СтруктураДлительностиКонПериода = Новый Структура();
							СтруктураДлительностиКонПериода.Вставить("Дней"	, СтрокаЭтапа.ДлительностьДней);
							СтруктураДлительностиКонПериода.Вставить("Часов", СтрокаЭтапа.ДлительностьЧасов);
							СтруктураДлительностиКонПериода.Вставить("Минут", СтрокаЭтапа.ДлительностьМинут);
							
							КонПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачПериода,
								 СтруктураДлительностиКонПериода, ,
								 БизнесПроцесс.Организация);
							
							НоваяЗадача.СрокИсполнения				= КонПериода;
						КонецЕсли;
						НоваяЗадача.CRM_ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
						НоваяЗадача.CRM_ВариантВыполненияСтрокой	= СтрокаЭтапа.ВариантВыполненияСтрокой;
						НоваяЗадача.Автор							= Пользователи.ТекущийПользователь();
						НоваяЗадача.Исполнитель						= СтруктураИсполнителя.Исполнитель;
						НоваяЗадача.РольИсполнителя					= СтруктураИсполнителя.РольИсполнителя;
						НоваяЗадача.ОсновнойОбъектАдресации			= СтруктураИсполнителя.ОсновнойОбъектАдресации;
						НоваяЗадача.ДополнительныйОбъектАдресации	= СтруктураИсполнителя.ДополнительныйОбъектАдресации;
						НоваяЗадача.Предмет							= БизнесПроцесс.Предмет;
						
						Если НЕ Взаимодействие = Неопределено Тогда
							НоваяЗадача.ДополнительныеСвойства.Вставить("Взаимодействие", Взаимодействие);
						КонецЕсли;
						
						ФормируемыеЗадачиПоТочке.Добавить(НоваяЗадача);
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
				
				ОчиститьМассивЗадач = Ложь;
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиДействияПриСозданииЗадач(БизнесПроцесс ,
					 ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке,
					 ОчиститьМассивЗадач);
				
				Если НЕ ОчиститьМассивЗадач Тогда
					Для Каждого ЭлементМассива Из ФормируемыеЗадачиПоТочке Цикл
						ФормируемыеЗадачи.Добавить(ЭлементМассива);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				
				ОчиститьМассивЗадач = Ложь;
				CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПриСозданииЗадач(БизнесПроцесс ,
					 ЗначениеМассива.ИсходящаяТочка, ФормируемыеЗадачиПоТочке,
					 ОчиститьМассивЗадач);
				
				Если НЕ ОчиститьМассивЗадач Тогда
					Для Каждого ЭлементМассива Из ФормируемыеЗадачиПоТочке Цикл
						ФормируемыеЗадачи.Добавить(ЭлементМассива);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ФормируемыеЗадачи.Количество() = 0 Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru='Не создано ни одной задачи в точке бизнес-процесса ""'") 
					+ ЗначениеМассива.ИсходящаяТочка.Наименование + """.";
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru = ' По причине:'")+ Символы.ПС + ТекстОшибки;
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СформироватьМассивЗадач()

// Функция возвращает структуру с параметрами адресации для задачи.
//
// Параметры:
//	Исполнитель		- Произвольный			- Исполнитель
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс ссылка.
//	ТекущаяТочка	- СправочникСсылка		- Ссылка на текущую точку маршрута.
//	Задача			- ЗадачаСсылка			- Ссылка на задачу исполнителя.
//
// Возвращаемое значение:
//	Структура	- Структура исполнителя.
//
Функция ПолучитьАдресациюЗадачи(Исполнитель, БизнесПроцесс, ТекущаяТочка, Задача = Неопределено) Экспорт
	СтруктураИсполнителя = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации,
		| ДополнительныйОбъектАдресации");
	Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СтруктураИсполнителя.Исполнитель					= Справочники.Пользователи.ПустаяСсылка();
		СтруктураИсполнителя.РольИсполнителя				= Исполнитель.Исполнитель;
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
		Если Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
			
			СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
			СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Ответственный Тогда
			
			СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Ответственный;
			СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ИсполнительПредыдущейЗадачи Тогда
			
			Если НЕ Задача = Неопределено Тогда
				Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
					СтруктураИсполнителя.Исполнитель					= Задача.Исполнитель;
					СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
					СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
				Иначе
					СтруктураИсполнителя.Исполнитель					= Неопределено;
				КонецЕсли;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Руководитель Тогда
			Если НЕ Задача = Неопределено Тогда
				Если ЗначениеЗаполнено(Задача.Исполнитель.Подразделение)
					 И ЗначениеЗаполнено(Задача.Исполнитель.Подразделение.ТекущийРуководитель) Тогда
					Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СтруктураИсполнителя.Исполнитель = Задача.Исполнитель.Подразделение.ТекущийРуководитель;
					Иначе
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						|	Пользователи.Ссылка КАК Пользователь
						|ИЗ
						|	Справочник.Пользователи КАК Пользователи
						|ГДЕ
						|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо";
						Запрос.УстановитьПараметр("ФизическоеЛицо", Задача.Исполнитель.Подразделение.ТекущийРуководитель);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СтруктураИсполнителя.Исполнитель = Выборка.Пользователь;
						КонецЕсли;
					КонецЕсли;
					СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
					СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
				Иначе
					СтруктураИсполнителя.Исполнитель					= Неопределено;
				КонецЕсли;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер Тогда
			Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) И ЗначениеЗаполнено(БизнесПроцесс.Партнер.ОсновнойМенеджер) Тогда
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Партнер.ОсновнойМенеджер;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			Иначе
				СтруктураИсполнителя.Исполнитель					= Неопределено;
			КонецЕсли;
		ИначеЕсли Исполнитель.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан Тогда
			
			СтруктураИсполнителя.Исполнитель					= Неопределено;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		СтруктураИсполнителя.Исполнитель					= Исполнитель.Исполнитель;
		СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
		СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
		СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
	ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
		Если НЕ Задача = Неопределено И Исполнитель.Исполнитель = Задача.CRM_ТочкаМаршрута Тогда
			СтруктураИсполнителя.Исполнитель					= Задача.Исполнитель;
			СтруктураИсполнителя.РольИсполнителя				= Задача.РольИсполнителя;
			СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
			СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс"	, БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута"	, Исполнитель.Исполнитель);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &ТочкаМаршрута
			|	И ЗадачаИсполнителя.Выполнена
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаИсполнения УБЫВ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураИсполнителя.Исполнитель					= Выборка.Исполнитель;
				СтруктураИсполнителя.РольИсполнителя				= Выборка.РольИсполнителя;
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			Иначе
				СтруктураИсполнителя.Исполнитель					= БизнесПроцесс.Автор;
				СтруктураИсполнителя.РольИсполнителя				= Справочники.РолиИсполнителей.ПустаяСсылка();
				СтруктураИсполнителя.ОсновнойОбъектАдресации		= Неопределено;
				СтруктураИсполнителя.ДополнительныйОбъектАдресации	= Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураИсполнителя;
КонецФункции // ПолучитьАдресациюЗадачи()

// Процедура сохраняет результат прохождения точки слияния в маршруте бизнес-процесса
// в дальнейшем эти данные нужны для получения следующей точки маршрута.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//	ТекущаяТочка	- СправочникСсылка		- Ссылка на текущую точку маршрута.
//	ИсходящаяТочка	- СправочникСсылка		- Ссылка на исходящую точку маршрута.
//
Процедура ЗаписатьРезультатСлиянияМаршрута(БизнесПроцесс, ТекущаяТочка, ИсходящаяТочка) Экспорт
	НоваяЗапись = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьМенеджерЗаписи();
	НоваяЗапись.БизнесПроцесс	= БизнесПроцесс;
	НоваяЗапись.ТочкаСлияния	= ИсходящаяТочка;
	НоваяЗапись.ВходящаяТочка	= ТекущаяТочка;
	НоваяЗапись.Записать();
КонецПроцедуры // ЗаписатьРезультатСлиянияМаршрута()

// Функция проверяет все ли ветки маршрута после точки разделения дошли до точки слияния.
//
// Параметры:
//  МассивИсходящихТочек - Массив из Структура	 - содержит точки маршрута.
//  БизнесПроцесс		 - БизнесПроцессСсылка	 - Ссылка на бизнес-процесс.
//  ТочкаМаршрута		 - ТочкаМаршрута		 - Точка маршрута для получения.
//  ВызовИзИнтереса		 - Булево				 - Признак вызова из интереса.
// 
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, БизнесПроцесс,
	 ТочкаМаршрута = Неопределено,
	 ВызовИзИнтереса = Ложь) Экспорт
	ТочкаСлияния = Неопределено;
	Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
		Если ЗначениеМассива.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			ТочкаСлияния = ЗначениеМассива.ИсходящаяТочка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ТочкаСлияния = Неопределено Тогда
		МассивВходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВходящиеТочки(ТочкаСлияния,
			 БизнесПроцесс.НомерВерсииКартыМаршрута);
	КонецЕсли;
	Результат = Истина;
	
	МассивТочек = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивВходящихТочек Цикл
		МассивТочек.Добавить(ЗначениеМассива.ВходящаяТочка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивТочек"		, МассивТочек);
	Запрос.УстановитьПараметр("НомерВерсии"		, БизнесПроцесс.НомерВерсииКартыМаршрута);
	Запрос.УстановитьПараметр("БизнесПроцесс"	, БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаСлияния"	, ТочкаСлияния);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка КАК Ссылка,
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВетки КАК НомерВетки
	               |ПОМЕСТИТЬ Точки
	               |ИЗ
	               |	Справочник.CRM_ТочкиМаршрутов.ТочкиРазделенияСлияния КАК CRM_ТочкиМаршрутовТочкиРазделенияСлияния
	               |ГДЕ
	               |	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка В(&МассивТочек)
	               |	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВерсии = &НомерВерсии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_РезультатыСлиянияМаршрутов.ВходящаяТочка КАК ВходящаяТочка,
	               |	CRM_РезультатыСлиянияМаршрутов.ТочкаСлияния КАК ТочкаСлияния
	               |ПОМЕСТИТЬ Результат
	               |ИЗ
	               |	РегистрСведений.CRM_РезультатыСлиянияМаршрутов КАК CRM_РезультатыСлиянияМаршрутов
	               |ГДЕ
	               |	CRM_РезультатыСлиянияМаршрутов.БизнесПроцесс = &БизнесПроцесс
	               |	И CRM_РезультатыСлиянияМаршрутов.ТочкаСлияния = &ТочкаСлияния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Точки.Ссылка КАК Ссылка,
	               |	Точки.НомерВетки КАК НомерВетки,
	               |	ВЫБОР
	               |		КОГДА Результат.ТочкаСлияния ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Результат
	               |ИЗ
	               |	Точки КАК Точки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Результат КАК Результат
	               |		ПО Точки.Ссылка = Результат.ВходящаяТочка
	               |ИТОГИ
	               |	СУММА(Результат)
	               |ПО
	               |	НомерВетки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Результат = Истина;
	
	Если ВызовИзИнтереса Тогда
		МассивТочек = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("ТочкаМаршрута,
			| НомерВерсии", ТочкаСлияния,
			 БизнесПроцесс.НомерВерсииКартыМаршрута));
		Пока Выборка.Следующий() Цикл
			Если Выборка.НомерВетки = МассивТочек[0].НомерВетки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Результат = 0 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если Выборка.Результат = 0 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Раз все ветки дошли до точки слияния, то записи в регистре сведений уже не нужны.
	Если Результат И НЕ ВызовИзИнтереса Тогда
		Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		Набор.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПроверитьТочкиПередСозданиемЗадач()

// Процедура записывает ранее созданные задачи из массива формируемых задач.
//  Если задача является ведущей, то создает вложенный бизнес-процесс
//  вызывается процедурой ПолучитьСледующуюТочкуСформироватьЗадачи и из модуля объекта бизнес-процесса.
//
// Параметры:
//  ФормируемыеЗадачи				 - Массив из ЗадачаОбъект.ЗадачаИсполнителя	 - содержит создаваемые задачи.
//  ТаблицаЭтапов					 - ТаблицаЗначений	 - Таблица этапов.
//  ПараметрыПериодическогоСтарта	 - Структура		 - Параметры периодического старта.
//
Процедура ЗаписатьЗадачи(ФормируемыеЗадачи, ТаблицаЭтапов, ПараметрыПериодическогоСтарта = Неопределено) Экспорт
	Для Каждого ЗадачаОбъект Из ФормируемыеЗадачи Цикл
		Если НЕ ПараметрыПериодическогоСтарта = Неопределено Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("мСостояниеСтрокой", ПараметрыПериодическогоСтарта.СостояниеСтрокой);
		КонецЕсли;
		ЗадачаОбъект.Записать();
		Если ЗадачаОбъект.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			СформироватьВложенныйБизнесПроцесс(ЗадачаОбъект.БизнесПроцесс, ЗадачаОбъект.Ссылка, ТаблицаЭтапов);
		Иначе
			//СодержаниеНапоминания = НСтр("ru='Новая задача: '") + ЗадачаОбъект.Наименование +"
			//|" + НСтр("ru='Бизнес-процесс: '") +
			//CRM_БизнесПроцессыСервер.СформироватьПредставлениеБизнесПроцесса(ЗадачаОбъект.БизнесПроцесс) 
				//+" |" + НСтр("ru='Срок выполнения: '") + Формат(ЗадачаОбъект.СрокИсполнения,
				// "ДФ ='дд.ММ.гггг ЧЧ:мм'");
			//CRM_НапоминанияСервер.ДобавитьНапоминание(ЗадачаОбъект.Ссылка, СодержаниеНапоминания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьЗадачи()

// Процедура если точка задачи групповая, то делается проверка на выполнение всех задач
// созданных по этой точке и с текущей итерацией.
//
//
// Параметры:
//	Задача	- ЗадачаСсылка	- Ссылка на задачу.
//	Отказ	- Булево		- Флаг отмены.
//
Процедура ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, Отказ) Экспорт
	// Проверим групповая ли точка, если да, то проверим все ли задачи завершены
	// если не все задачи, то не создаем новую.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",				Задача);
	Запрос.УстановитьПараметр("БизнесПроцесс",		Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("CRM_Итерация",		Задача.CRM_Итерация);
	Запрос.УстановитьПараметр("CRM_ТочкаМаршрута",	Задача.CRM_ТочкаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И ЗадачаИсполнителя.CRM_Итерация = &CRM_Итерация
	               |	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &CRM_ТочкаМаршрута
	               |	И (НЕ ЗадачаИсполнителя.Выполнена)
	               |	И (НЕ ЗадачаИсполнителя.Ссылка = &Ссылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Отказ = Выборка.Следующий();
КонецПроцедуры // ПроверитьВыполнениеГрупповойПереадресованнойЗадачи()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за формирование точек маршрута карты маршрута.

// Процедура заполняет карту маршрута по макету.
//
// Параметры:
//  КартаМаршрута	 - СправочникСсылка	 - Карта маршрута.
//  ИмяФайла		 - Строка - Имя файла. 
//
Процедура ЗаполнитьКартуМаршрутаПоМакету(КартаМаршрута, ИмяФайла) Экспорт
	
	НомерНовойВерсии	= 0;
	КартаОбъект			= КартаМаршрута.ПолучитьОбъект();
	
	// Прочитаем данные из XML файла.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	ИначеЕсли НЕ ЧтениеXML.Имя = "НастройкиКартыМаршрута" Тогда
		Возврат;
	КонецЕсли;
	
	СхемаМаршрута		= Неопределено;
	НастройкиЭтапов		= Неопределено;
	ИсполнителиЭтапов	= Неопределено;
	ОбъектыЭтапов		= Неопределено;
	
	ЛокальноеИмя = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Тогда 
			Хранилище = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			
			Если ЛокальноеИмя = "КартаМаршрута" Тогда
				СхемаМаршрута = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "НастройкиЭтапов" Тогда
				НастройкиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ИсполнителиЭтапов" Тогда
				ИсполнителиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ОбъектыЭтапов" Тогда
				ОбъектыЭтапов = Хранилище.Получить();
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ЛокальноеИмя = "Комментарий" Тогда
				КартаОбъект.Комментарий = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНастроек = Новый Структура("НастройкиМаршрута, Исполнители, Объекты", НастройкиЭтапов,
		 ИсполнителиЭтапов,
		 ОбъектыЭтапов);
	
	// Далее временное решение ибо не понятно как обойтись без записи и создания новой ГС.
	
	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(".grs");
	СхемаМаршрута.Записать(ПутьКВременномуФайлу);
	НоваяСхема	= Новый ГрафическаяСхема;
	НоваяСхема.Прочитать(ПутьКВременномуФайлу);
	АдресСхемы	= ПоместитьВоВременноеХранилище(НоваяСхема, Новый УникальныйИдентификатор);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКВременномуФайлу, КодировкаТекста.UTF8);
	
	СтруктураДанных = CRM_БизнесПроцессыЭкспортныеМетоды.ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута,
		 ТекстовыйДокумент);
	ТаблицаТочек	= СтруктураДанных.ТабТочекМаршрута;
	Если КартаОбъект.НомерВерсии = 0 Тогда
		CRM_БизнесПроцессыЭкспортныеМетоды.ОчиститьВходящиеИсходящиеТочки(КартаОбъект.Ссылка, НомерНовойВерсии);
	КонецЕсли;
	НомерНовойВерсии = КартаОбъект.НомерВерсии + 1;
	ДатаНовойВерсии = ТекущаяДатаСеанса();
	КартаОбъект.НомерВерсии = НомерНовойВерсии;
	CRM_БизнесПроцессыЭкспортныеМетоды.СформироватьТочкиМаршрута(ТаблицаТочек, КартаОбъект.Ссылка, НомерНовойВерсии);
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьПометкуУдаленияНеАктуальныхТочек(КартаОбъект.Ссылка);
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьАктуальностьТочекОтносительноПоследнейВерсии(КартаОбъект.Ссылка,
		 КартаОбъект.НомерВерсии);
	Если НЕ НомерНовойВерсии = 0 Тогда
		СтрокаКарты = КартаОбъект.ВерсииКартыМаршрута.Найти(НомерНовойВерсии, "НомерВерсии");
		Если СтрокаКарты = Неопределено Тогда
			СтрокаКарты = КартаОбъект.ВерсииКартыМаршрута.Добавить();
			СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
		Иначе	
			СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
		КонецЕсли;
		СтрокаКарты.НомерВерсии		= НомерНовойВерсии;
		СтрокаКарты.ДатаСоздания	= ДатаНовойВерсии;
		НомерНовойВерсии = 0;
	КонецЕсли;
	КартаОбъект.ОписаниеБизнесПроцессаВСодержаниеЗадачи	= Истина;
	КартаОбъект.ИсторияБизнесПроцессаВСодержаниеЗадачи	= Истина;
	КартаОбъект.УказыватьСрокВыполненияЭтапов			= (КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение);
	КартаОбъект.УказыватьПричинуНеудачногоЗавершения	= Истина;
	КартаОбъект.СостояниеПроцесса						= Перечисления.bpmСостояниеПроцесса.Действует;
	КартаОбъект.Записать();
	
	СформироватьМаршрутИИсполнителейКартыМаршрута(КартаОбъект.Ссылка, СтруктураНастроек);
	
	// Для точек "неудачных" завершения пропишем вариант завершения.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",	КартаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Имя",		"ЗавершениеНеудача");
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутов.Вид = Значение(Перечисление.CRM_ВидыТочекМаршрута.Завершение)
	|	И CRM_ТочкиМаршрутов.Имя = &Имя";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Точка = Выборка.Ссылка.ПолучитьОбъект();
		Точка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно;
		Точка.Записать();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКартуМаршрутаПоМакету()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт бизнес-процессов по сделке.

// Вернуть ссылку на бизнес процесс по сделке.
//
// Параметры:
//  Ссылка				 - ДокументСсылка	 - Ссылка на источник получения данных для БП.
//  ИзмененыИсполнители	 - Булево			 - Признак изменения исполнителей.
//  Исполнители			 - ТаблицаЗначений	 - Таблица с исполнителями.
//  ИзмененаДлительность - Булево			 - Измененеа длительность.
//  ДатаСтартаБП		 - Дата				 - Дата старта БП.
// 
// Возвращаемое значение:
//  БизнесПроцессСсылка.CRM_БизнесПроцесс - Ссылка на БП.
//
Функция ВернутьСсылкуНаБизнесПроцессПоСделке(Ссылка, ИзмененыИсполнители = Ложь,
	 Знач Исполнители = Неопределено, ИзмененаДлительность = Ложь,
	 ДатаСтартаБП) Экспорт
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата						= Ссылка.Дата;
	НовыйБизнесПроцесс.ДатаСтарта				= Ссылка.Дата;
	НовыйБизнесПроцесс.Организация				= Ссылка.Организация;
	НовыйБизнесПроцесс.Подразделение			= Ссылка.Подразделение;
	НовыйБизнесПроцесс.Партнер					= Ссылка.Клиент;
	НовыйБизнесПроцесс.КонтактноеЛицо			= Ссылка.КонтактноеЛицо;
	НовыйБизнесПроцесс.Важность					= Ссылка.Важность;
	НовыйБизнесПроцесс.Автор					= Пользователи.ТекущийПользователь();
	НовыйБизнесПроцесс.Ответственный			= Пользователи.ТекущийПользователь();
	НовыйБизнесПроцесс.Предмет					= Ссылка;
	
	НовыйБизнесПроцесс.Наименование				= Ссылка.Тема;
	НовыйБизнесПроцесс.Проект					= Ссылка.Проект;
	НовыйБизнесПроцесс.Сумма					= Ссылка.СуммаПотенциал;
	НовыйБизнесПроцесс.Описание					= Ссылка.Описание;
	НовыйБизнесПроцесс.КартаМаршрута			= Ссылка.КартаМаршрута;
	НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Ссылка.НомерВерсииКартыМаршрута;
	
	СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
	НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
	
	CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс, НовыйБизнесПроцесс.Проект);
	
	Если ИзмененыИсполнители Тогда
		НовыйБизнесПроцесс.мИсполнители								= Исполнители;
		НовыйБизнесПроцесс.мТребуетсяСохранитьИсполнителейЭтапов	= Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		НовыйБизнесПроцесс.мИсполнители = Исполнители;
		НовыйБизнесПроцесс.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
	ДатаСтартаБП = НовыйБизнесПроцесс.ДатаСтарта;
	
	Возврат НовыйБизнесПроцесс.Ссылка;
	
КонецФункции

// Процедура - Зафиксировать изменения настроек бизнес процесса из сделки
//
// Параметры:
//  Ссылка				 - БизнесПроцессСсылка.CRM_БизнесПроцесс - Ссылка на БП. 
//  Исполнители			 - ТаблицаЗначений	 - Таблица с исполнителями.
//  ИзмененыИсполнители	 - Булево			 - Признак изменения исполнителей.
//  ИзмененаДлительность - Булево			 - Измененеа длительность.
//
Процедура ЗафиксироватьИзмененияНастроекБизнесПроцессаИзСделки(Ссылка, Исполнители = Неопределено,
	 ИзмененыИсполнители = Ложь,
	 ИзмененаДлительность = Ложь) Экспорт
	
	БизнесПроцессОбъект = Ссылка.ПолучитьОбъект();
	
	Если ИзмененыИсполнители Тогда
		БизнесПроцессОбъект.мИсполнители								= Исполнители;
		БизнесПроцессОбъект.мТребуетсяСохранитьИсполнителейЭтапов	= Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		БизнесПроцессОбъект.мИсполнители = Исполнители;
		БизнесПроцессОбъект.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие получение всех этапов после указанного этапа.

// Получить массив следующих точек.
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка.CRM_БизнесПроцесс - Ссылка на БП.
//  ТочкаВхождения	 - ТочкаМаршрута						 - Точка вхождения.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.CRM_ТочкиМаршрутов - содержит точки.
//
Функция ПолучитьМассивТочекПосле(БизнесПроцесс, ТочкаВхождения = Неопределено) Экспорт
	
	МассивТочек = Новый Массив;
	ПолучитьСледующиеТочкиДобавитьВМассив(БизнесПроцесс.НомерВерсииКартыМаршрута,
		 БизнесПроцесс.ТочкаСтарта, МассивТочек, , ,
		 ТочкаВхождения);
	
	Возврат МассивТочек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт бизнес-процессов по запросам.

// Отправить запрос на перенос срока исполнения.
//
// Параметры:
//  ВедущаяЗадача	 - ЗадачаСсылка	 - Ведущая задача.
//  ТекстЗапроса	 - Строка		 - Текст запроса.
//
Процедура ОтправитьЗапросНаПереносСрокаИсполнения(ВедущаяЗадача, ТекстЗапроса = "") Экспорт
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.Организация				= ВедущаяЗадача.БизнесПроцесс.Организация;
	НовыйБизнесПроцесс.Подразделение			= ВедущаяЗадача.БизнесПроцесс.Подразделение;
	НовыйБизнесПроцесс.Важность					= ВедущаяЗадача.БизнесПроцесс.Важность;
	НовыйБизнесПроцесс.Автор					= ВедущаяЗадача.БизнесПроцесс.Ответственный;
	НовыйБизнесПроцесс.Ответственный			= ВедущаяЗадача.БизнесПроцесс.Ответственный;
	НовыйБизнесПроцесс.Предмет					= ВедущаяЗадача;
	НовыйБизнесПроцесс.ВедущаяЗадача			= ВедущаяЗадача;
	
	НовыйБизнесПроцесс.Наименование				= НСтр("ru='Запрос на перенос срока исполнения.'");
	НовыйБизнесПроцесс.Проект					= ВедущаяЗадача.БизнесПроцесс.Проект;
	НовыйБизнесПроцесс.Описание					= ТекстЗапроса;
	НовыйБизнесПроцесс.КартаМаршрута			= Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков;
	НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков.НомерВерсии;
	
	СписокТочекСтарта							=
		CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков);
	НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
	
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
КонецПроцедуры

// Процедура делает записи о изменениях в реквизитах партнера
//
// Параметры:
//	БизнесПроцессЗадача					- СправочникСсылка.Партнеры, СправочникСсылка.КонтактныеЛицаПартнеров	- Ссылка на партнера
	// или КЛ партнера
//	СтруктураОбрабатываемыеРеквизиты	- Структура	- Структура в которой указано, какие реквизиты обрабатывать
//	НаДату								- Дата		- Если передан, то используется как дата в истории вместо текущей даты
//	АвторИзменений						- СправочникСсылка.Пользователи	- ссылка на пользователя, делающего изменения
//
Процедура ЗаписатьИсториюРеквизитовБизнесПроцесса(БизнесПроцессЗадача,
	 СтруктураОбрабатываемыеРеквизиты, НаДату = Неопределено,
	 АвторИзменений = Неопределено) Экспорт
	//Если Не ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов") Тогда Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(БизнесПроцессЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = РегистрыСведений.bpmНастройкаВерсионированияРеквизитовБизнесПроцессов.ПолучитьНастройку();
	Если ТипЗнч(Настройка) = Тип("Структура") И Настройка.Свойство("СтруктураНастройки") Тогда
		Если ТипЗнч(Настройка.СтруктураНастройки) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Реквизиты = Неопределено;
	РеквизитыЗадачи = Неопределено;
	Настройка.СтруктураНастройки.Свойство("Реквизиты", Реквизиты);
	Настройка.СтруктураНастройки.Свойство("РеквизитыЗадачи", РеквизитыЗадачи);
	
	Если ТипЗнч(Реквизиты) <> Тип("Массив") И ТипЗнч(РеквизитыЗадачи) <> ТипЗнч("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения =
		ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ТекДата = ?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса());
	Автор = ?(ЗначениеЗаполнено(АвторИзменений), АвторИзменений, Пользователи.АвторизованныйПользователь());
	
	Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс")
		 Или СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
		ТаблицаДанныеИстории = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СрезПоследних(ТекДата,
			 Новый Структура("Объект",
			 БизнесПроцессЗадача));
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СоздатьНаборЗаписей();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Если ТипЗнч(БизнесПроцессЗадача) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ИтераторРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(БизнесПроцессЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИтераторРеквизитов = РеквизитыЗадачи;
	Иначе
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ИтераторРеквизитов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ИтераторРеквизитов Цикл
		
		Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс")
			 Или СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
			бСохранять = Ложь;
			
			Попытка
				ЗначениеРеквизита = БизнесПроцессЗадача[Реквизит];
			
			Исключение	Продолжить;
			КонецПопытки;
			
			Если Не бСохранять Тогда
				НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", Реквизит));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если НайденныеСтроки[0].Значение <> ЗначениеРеквизита Тогда
						бСохранять = Истина;
					КонецЕсли;
				Иначе
					бСохранять = ЗначениеЗаполнено(ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
			Если бСохранять Тогда
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Объект		= БизнесПроцессЗадача;
				НоваяСтрока.Автор		= Автор;
				НоваяСтрока.Период		= ТекДата;
				НоваяСтрока.ПутьКДанным	= Реквизит;
				НоваяСтрока.Значение	= ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьДополнительныеРеквизитыИСведения Тогда
		
		Если СтруктураОбрабатываемыеРеквизиты.Свойство("БизнесПроцесс") Тогда
			БизнесПроцессСсылка = БизнесПроцессЗадача;
		ИначеЕсли СтруктураОбрабатываемыеРеквизиты.Свойство("Задача") Тогда
			БизнесПроцессСсылка = БизнесПроцессЗадача.бизнесПроцесс;
		КонецЕсли;
		
		НаборЗначенийСвойств = РегистрыСведений.bpmДополнительныеРеквизиты.СоздатьНаборЗаписей();
		НаборЗначенийСвойств.Отбор.БизнесПроцесс.Установить(БизнесПроцессСсылка);
		НаборЗначенийСвойств.Прочитать();
		ТаблицаЗначенийСвойств = НаборЗначенийСвойств.Выгрузить(, "Свойство,Значение");
		
		Для Каждого СтрокаДопРеквизита Из ТаблицаЗначенийСвойств Цикл
			Если СтрокаДопРеквизита <> Неопределено Тогда
				ЗначениеРеквизита = СтрокаДопРеквизита.Значение;
			КонецЕсли;
		
			Если Не бСохранять Тогда
				НайденныеСтроки = ТаблицаДанныеИстории.НайтиСтроки(Новый Структура("ПутьКДанным", СтрокаДопРеквизита.Свойство));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если НайденныеСтроки[0].Значение <> ЗначениеРеквизита Тогда
						бСохранять = Истина;
					КонецЕсли;
				Иначе
					бСохранять = ЗначениеЗаполнено(ЗначениеРеквизита);
				КонецЕсли;
			КонецЕсли;
			
			Если бСохранять Тогда
				НоваяСтрока = ТаблицаЗаписей.Добавить();
				НоваяСтрока.Объект		= БизнесПроцессЗадача;
				НоваяСтрока.Автор		= Автор;
				НоваяСтрока.Период		= ТекДата;
				НоваяСтрока.ПутьКДанным	= СтрокаДопРеквизита.Свойство;
				НоваяСтрока.Значение	= ЗначениеРеквизита;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		СтрокаСвернуть = "";
		Для Каждого Измерение Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Измерения Цикл
			СтрокаСвернуть = СтрокаСвернуть + Измерение.Имя + ",";
		КонецЦикла;
		Для Каждого Ресурс Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Ресурсы Цикл
			СтрокаСвернуть = СтрокаСвернуть + Ресурс.Имя + ",";
		КонецЦикла;
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.Реквизиты Цикл
			СтрокаСвернуть = СтрокаСвернуть + Реквизит.Имя + ",";
		КонецЦикла;
		СтрокаСвернуть = СтрокаСвернуть + "Период";
		ТаблицаЗаписей.Свернуть(СтрокаСвернуть);
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
			МенеджерЗаписи = РегистрыСведений.bpmИсторияРеквизитовБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, СтрокаСвернуть);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт процессных бизнес-процессов.

// Процедура - Выполнить переход бизнес процесса на этап
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка.CRM_БизнесПроцесс - Ссылка на БП.
//  ТочкаМаршрута	 - ТочкаМаршрута						 - Точка маршрута.
//  РезультатЗавершения - Строка - выходной параметр.
//
Процедура ВыполнитьПереходБизнесПроцессаНаЭтап(БизнесПроцесс, ТочкаМаршрута, РезультатЗавершения = "") Экспорт
	
	// Определим, принадлежит ли точка какой-либо ветке разделения, если да, то надо исключить
	// задачи других веток, т.к. их не откатываем.
	МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс, ТочкаМаршрута);
	
	МассивИсключаемыхТочек.Добавить(ТочкаМаршрута);
	
	// Проверим, указан ли исполнитель выбранного этапа. Если нет, то попросим указать.
	МассивПроверяемыхЭтапов = Новый Массив;
	МассивПроверяемыхЭтапов.Добавить(ТочкаМаршрута);
	
	СписокТочекМаршрута = ПроверитьНаличиеСледующегоИсполнителяУЭтапов(БизнесПроцесс, МассивПроверяемыхЭтапов);
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		
	Иначе
		
		ЗавершитьВсеЗадачиБизнесПроцесса(БизнесПроцесс, МассивИсключаемыхТочек, ТочкаМаршрута, РезультатЗавершения);
		
		СоздатьЗадачуВТочкеОтката(БизнесПроцесс, ТочкаМаршрута);
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаМаршрута);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет точку на принадлежность ветке разделения.
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка.CRM_БизнесПроцесс
//  ТочкаМаршрута	 - СправочникСсылка.CRM_ТочкиМаршрутов
//
Процедура ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	// Если точка принадлежит ветке разделения.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборЗаписей.Отбор.ТочкаСлияния.Установить(СвязаннаяСРазделениемТочкаСлияния);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,Вид",
			 БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		НомерВетки		= МассивСтрок[0].НомерВетки;
		
		МассивВходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВходящиеТочки(ТочкаСлияния,
			 БизнесПроцесс.НомерВерсииКартыМаршрута);
		
		// Проверим, есть ли записи в регистре результатов слияния, если есть, значит БП
		// еще не дошел до точки слияния и удаляем запись только для ветки, в которой выбрали 
		// точку маршрута. Иначе БП прошел точку слияния(или вообще еще не заходил в это разделение), тогда
		// для всех веток разделения, кроме той, в которой мы выбрали точку для смены этапа, создаем запись в регистре,
		// якобы эти ветки уже пройдены.
		Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		Набор.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
		Набор.Прочитать();
		
		СоздаемЗаписиПоВеткам = (Набор.Количество() = 0);
		
		Для Каждого СтруктураТочки Из МассивВходящихТочек Цикл
			
			ВходящаяТочка	= СтруктураТочки.ВходящаяТочка;
			МассивСтрок		= ВходящаяТочка.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
				|ТочкаМаршрута", БизнесПроцесс.НомерВерсииКартыМаршрута,
				 ТочкаСлияния));
			
			Если МассивСтрок[0].НомерВетки = НомерВетки Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
				НаборЗаписей.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
				НаборЗаписей.Отбор.ВходящаяТочка.Установить(ВходящаяТочка);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
				
			ИначеЕсли СоздаемЗаписиПоВеткам Тогда
				
				ЗаписьРегистра = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.БизнесПроцесс	= БизнесПроцесс;
				ЗаписьРегистра.ТочкаСлияния		= ТочкаСлияния;
				ЗаписьРегистра.ВходящаяТочка	= ВходящаяТочка;
				ЗаписьРегистра.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не принадлежит ли точка слияния ветке другого разделения.
		// Если принадлежит, то надо скорректировать записи регистра сведений
		// для этого разделения.
		ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаСлияния);
	КонецЕсли;
	
КонецПроцедуры

// Стартует процессы при записи нового объекта процесса.
//
// Параметры:
//	Источник - Произвольный - объект процесса.
//
Процедура ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяДокумента = Источник.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяДокумента", ИмяДокумента);
		
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|	И НЕ CRM_КартыМаршрутов.Редактируется
	|	И CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И CRM_КартыМаршрутов.ВидОбъектаСтрокой = &ИмяДокумента
	|	И CRM_КартыМаршрутов.СостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Стартовали = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если Стартовали Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отказано в старте процесса ""%1"" по причине:"
"%2"
"Обратитесь к администратору.'"),
			Выборка.Ссылка.Наименование, 
			НСтр("ru='Уже есть стартованный процесс.'"));
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Отказано в старте процесса по объекту'"), 
				УровеньЖурналаРегистрации.Предупреждение, Источник.Метаданные(), Источник,
				ТекстИсключения);
		Иначе
			Попытка
				Стартовали = ПроверитьУсловияПроцессаСтартовать(Источник, Выборка.Ссылка);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи';en='Business processes and tasks'"), 
					УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник, 
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Рассчитать длительность бизнес процесса
//
// Параметры:
//  БизнесПроцесс	 - БизнесПроцессСсылка.CRM_БизнесПроцесс - Ссылка на БП.
// 
// Возвращаемое значение:
//  Дата - Длительность бизнес процесса. 
//
Функция РассчитатьДлительностьБизнесПроцесса(БизнесПроцесс) Экспорт
	Если БизнесПроцесс.Завершен Тогда
		Длительность = БизнесПроцесс.ДатаЗавершения - БизнесПроцесс.ДатаСтарта;
	Иначе
		Длительность = ТекущаяДатаСеанса() - БизнесПроцесс.ДатаСтарта;
	КонецЕсли;	
	Возврат Длительность;
КонецФункции

// Получить условие этапа, проверить применимость.
//
// Параметры:
//  Предмет				 - ЗадачаСсылка	 - Предмет.
//  ПринятаКИсполнению	 - Булево - Признак необходимости принятия к исполнению. 
// 
// Возвращаемое значение:
//   Число - Уловие этапа цифрой. 
//
Функция ПолучитьУсловиеЭтапаПроверитьПрименимость(Предмет, ПринятаКИсполнению = Ложь) Экспорт
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Предмет.БизнесПроцесс);
	Набор.Отбор.ТочкаМаршрута.Установить(Предмет.CRM_ТочкаМаршрута);
	Набор.Прочитать();
	
	ЕстьУсловия = Ложь;
	
	Для Каждого СтрокаНабора Из Набор Цикл
		
		Если НЕ СтрокаНабора.ТипДействия = Перечисления.bpmТипыДействий.ПроверкаУсловия Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, СтрокаНабора.НастройкаУсловия.Получить());
				
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
			
			ЕстьУсловия = Истина;
			
			Настройки = СтрокаНабора.НастройкаКомбинацииУсловий.Получить();
			ЗаполнитьКомбинациюПравил(Предмет, Настройки.Отбор.Элементы);
			Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, Настройки, "Условия");
			
		ИначеЕсли СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			ЕстьУсловия = Истина;
			Результат = ПроверитьУсловиеНаВстроенномЯзыке(Предмет, СтрокаНабора);
			
		КонецЕсли;
		
		Если ЕстьУсловия И НЕ Результат Тогда
			Возврат 3;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУсловия И Результат Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 5;
	
КонецФункции

// Получить условие этапа, сформировать описание.
//
// Параметры:
//  Предмет				 - ЗадачаСсылка	 - Предмет.
//  ПринятаКИсполнению	 - Булево - Признак необходимости принятия к исполнению. 
// 
// Возвращаемое значение:
//   Число - Уловие этапа цифрой. 
//
Функция ПолучитьУсловиеЭтапаСформироватьОписание(Предмет, ПринятаКИсполнению = Ложь) Экспорт
	
	Результат = Ложь;
	
	Набор = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Предмет.БизнесПроцесс);
	Набор.Отбор.ТочкаМаршрута.Установить(Предмет.CRM_ТочкаМаршрута);
	Набор.Прочитать();
	
	ЕстьУсловия = Ложь;
	
	Для Каждого СтрокаНабора Из Набор Цикл
		
		Если ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПринятаКИсполнению И СтрокаНабора.Событие = Перечисления.bpmСобытияЭтапа.ПриЗавершении Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора
				Или СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий
				Или СтрокаНабора.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			ЕстьУсловия = Истина;
			
		КонецЕсли;
		
		Если ЕстьУсловия И НЕ Результат Тогда
			Возврат 3;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУсловия И Результат Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 5;
	
КонецФункции

// Вернуть список доступных карт.
//
// Параметры:
//  СписокДляМастера - Булево	 - Список для мастера.
// 
// Возвращаемое значение:
//  СписокЗначенией - Результат функции.
//
Функция ВернутьСпискиДоступныхКарт(СписокДляМастера = Ложь) Экспорт
	
	СписокКарт				= Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КартыМаршрутов.Ссылка КАК КартаМаршрута,
	|	CRM_КартыМаршрутов.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	CRM_КартыМаршрутов.ТипПроцесса КАК ТипПроцесса
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	НЕ CRM_КартыМаршрутов.ПометкаУдаления
	|	" + ?(СписокДляМастера, "И CRM_КартыМаршрутов.ИспользоватьПриПринятииОбращения", "") + "
	|	И НЕ CRM_КартыМаршрутов.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.ПроцессОбъекта)
	|	И CRM_КартыМаршрутов.СостояниеПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmСостояниеПроцесса.Действует)
	|	И НЕ CRM_КартыМаршрутов.Ссылка = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков)
	|	
	|	УПОРЯДОЧИТЬ ПО
	|	CRM_КартыМаршрутов.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
			СхемаКомпоновкиДанных		= Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			НастройкиКомпоновкиДанных	= Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			
			Если (СхемаКомпоновкиДанных = Неопределено) ИЛИ (НастройкиКомпоновкиДанных = Неопределено) Тогда
				Продолжить;
			КонецЕсли;			
			
			Если СхемаКомпоновкиДанных <> Неопределено И НастройкиКомпоновкиДанных <> Неопределено
				 И ПроверитьУсловия(Пользователи.ТекущийПользователь(), СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных) Тогда
				СписокКарт.Добавить(Выборка.КартаМаршрута);
			КонецЕсли;
		ИначеЕсли НЕ СписокДляМастера Тогда
			СписокКарт.Добавить(Выборка.КартаМаршрута);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокКарт;
	
КонецФункции

#Область ГрупповыеПредметыБизнеспроцессов

// Используемые типы групповых предметов процессов.
// 
// Возвращаемое значение:
//  Массив из Строка - содержит идентификаторы.
//
Функция ИспользуемыеТипыГрупповыхПредметовПроцессов() Экспорт
	
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Номенклатура"));
	МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Партнеры"));
	// +СофтФон
	МассивИдентификаторов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ТелефонныйЗвонок"));
	// -СофтФон	
	CRM_БизнесПроцессыПереопределяемый.ИспользуемыеТипыГрупповыхПредметовПроцессов(МассивИдентификаторов);
	
	Возврат МассивИдентификаторов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура вызывается из подписки на событие "CRM_ЗадачаИсполнителяПриУстановкеНовогоНомера".
//
Процедура ПриУстановкеНовогоНомераЗадачиИсполнителя(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Если Источник.CRM_Личная Тогда
		Префикс = "Л-";
		ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(Источник, СтандартнаяОбработка, Префикс);
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается из подписки на событие "CRM_ПриЗаписиЗадачиИсполнителя".
//
Процедура ПриЗаписиЗадачиИсполнителя(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс)
		 И Не ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ЗадачаИсполнителяМодульОбъектаПриЗаписи(Источник, Отказ);
	
	Если ЗначениеЗаполнено(Источник.БизнесПроцесс)
		 И (ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс")) Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОповеститьОПринятииКИсполнению")
			 И Источник.ДополнительныеСвойства.ОповеститьОПринятииКИсполнению Тогда
			
			ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка, Перечисления.bpmСобытияЭтапа.ПриПринятииКИсполнению);
			
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			Если Источник.ДополнительныеСвойства.Свойство("Взаимодействие") Тогда
				Взаимодействие = Источник.ДополнительныеСвойства.Взаимодействие;
			Иначе
				Взаимодействие = Неопределено;
			КонецЕсли;
			
			ПолучитьУсловияЭтапаСформироватьОповещения(Источник.Ссылка,
				 Перечисления.bpmСобытияЭтапа.ПриСозданииЗадачи,
				 Взаимодействие);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из подписки на событие "CRM_ПередЗаписьюЗадачиИсполнителя".
//
Процедура ПередЗаписьюЗадачиИсполнителя(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Если Источник.СрокИсполнения <> '00010101' И Источник.ДатаНачала > Источник.СрокИсполнения Тогда
			Источник.ДатаНачала = НачалоДня(Источник.СрокИсполнения);
		КонецЕсли;
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() И ЗначениеЗаполнено(Источник.БизнесПроцесс)
		 И ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс") 
		И ЗначениеЗаполнено(Источник.БизнесПроцесс.Интерес) И Не Источник.ПринятаКИсполнению
			 И ЗначениеЗаполнено(Источник.Исполнитель) Тогда
		
		Источник.ПринятаКИсполнению = Истина;
		Источник.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
	КонецЕсли;
	Если (ЗначениеЗаполнено(Источник.БизнесПроцесс)
		И (ТипЗнч(Источник.БизнесПроцесс) = ТИП("БизнесПроцессСсылка.CRM_БизнесПроцесс"))) 
		Или ЗначениеЗаполнено(Источник.РольИсполнителя) Тогда
		Если Источник.ЭтоНовый() И (ЗначениеЗаполнено(Источник.РольИсполнителя)
			ИЛИ (НЕ ЗначениеЗаполнено(Источник.РольИсполнителя) И НЕ Источник.Исполнитель = Пользователи.ТекущийПользователь())) Тогда
			Источник.ДополнительныеСвойства.Вставить("мСоздатьОповещениеОНовойЗадаче", Истина);
		КонецЕсли;
		Если Не Источник.ЭтоНовый() И (ЗначениеЗаполнено(Источник.РольИсполнителя)
			Или (Не ЗначениеЗаполнено(Источник.РольИсполнителя) И Не Источник.Исполнитель = Пользователи.ТекущийПользователь())) 
			И Источник.СрокИсполнения <> Источник.Ссылка.СрокИсполнения Тогда
			Источник.ДополнительныеСвойства.Вставить("мСоздатьОповещениеОбИзмененииСрокаИсполнения", Истина);
			Источник.ДополнительныеСвойства.Вставить("СтарыйСрокИсполнения", Источник.Ссылка.СрокИсполнения);
		КонецЕсли;
		// Если Бизнес-процесс стартован по проекту, то возможно для процесса были настроены
		// оповещения для этапов. В таком случае надо сформировать оповещения.
		Если Источник.ПринятаКИсполнению И (НЕ Источник.Ссылка.ПринятаКИсполнению) Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ОповеститьОПринятииКИсполнению", Истина);
			
		КонецЕсли;
	КонецЕсли;
	//Если Источник.ПринятаКИсполнению И НЕ Источник.Исполнитель.Пустая() Тогда
	//	Источник.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
	//КонецЕсли;	
	
КонецПроцедуры

// При записи объекта бизнес процесса.
//
// Параметры:
//  Источник - 	 - 
//  Отказ	 - 	 - 
//
Процедура ПриЗаписиОбъектаБизнесПроцесса(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьБизнесПроцессы() Тогда
		Возврат;
	КонецЕсли;
	
	ТипПоддерживается =
		Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(ТипЗнч(Источник.Ссылка));
	Если ТипПоддерживается Тогда
		
		МетаданныеДокумента = Источник.Метаданные();
		
		МассивРеквизитов = Новый Массив;
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) 
			И Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.СодержитТип(ТипЗнч(Источник[ИмяРеквизита])) Тогда
				Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(Источник[ИмяРеквизита]);
				Набор.Прочитать();
				Если Набор.Количество() > 0 Тогда
					Для Каждого ЗаписьНабора Из Набор Цикл
						НаборПоИсточнику = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
						НаборПоИсточнику.Отбор.БизнесПроцесс.Установить(ЗаписьНабора.БизнесПроцесс);
						НаборПоИсточнику.Отбор.Объект.Установить(Источник.Ссылка);
						НаборПоИсточнику.Прочитать();
						//ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
						//ЗаписьРегистра.БизнесПроцесс	= ЗаписьНабора.БизнесПроцесс;
						//ЗаписьРегистра.Задача			= ЗаписьНабора.Задача;
						//ЗаписьРегистра.ТочкаМаршрута	= ЗаписьНабора.ТочкаМаршрута;
						//ЗаписьРегистра.Объект			= Источник.Ссылка;
						//ЗаписьРегистра.Прочитать();
						//Если НЕ ЗаписьРегистра.Выбран() Тогда
						Если НаборПоИсточнику.Количество() = 0 Тогда
							ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
							ЗаписьРегистра.БизнесПроцесс	= ЗаписьНабора.БизнесПроцесс;
							ЗаписьРегистра.Задача			= ЗаписьНабора.Задача;
							ЗаписьРегистра.ТочкаМаршрута	= ЗаписьНабора.ТочкаМаршрута;
							ЗаписьРегистра.Объект			= Источник.Ссылка;
							ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
							
							Выборка = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Выбрать();
							Пока Выборка.Следующий() Цикл
								Если Выборка.ТипЗначения.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
									ЗаписьРегистра.ВидОбъекта = Выборка.Ссылка;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							ЗаписьРегистра.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;
	
	// Добавить действие диалога
	Если ТипЗнч(Источник) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
		 И ТипЗнч(Источник.Предмет) = Тип("СправочникСсылка.CRM_Диалоги")
		 И Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И Источник.ДополнительныеСвойства.ЭтоНовый И Источник.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
		
		Справочники.CRM_Диалоги.ДобавитьДействие(Источник.Предмет, Перечисления.CRM_ДействияСДиалогами.СозданоПоручение
		, Источник.Дата, Источник.Ответственный, Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИсполнителяЭтапаПоручения(Задача, Исполнитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
		
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(Задача.БизнесПроцесс);
		НаборИсполнителей.Отбор.ТочкаМаршрута.Установить(Задача.CRM_ТочкаМаршрута);
		НаборИсполнителей.Прочитать();
		
		НаборИсполнителей[0].Исполнитель = Исполнитель;
		НаборИсполнителей.Записать();
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиСервер.ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, Исполнитель);
	
КонецПроцедуры

Процедура ПередЗаписьюОбъектаПроцесса(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			Источник.ДополнительныеСвойства.ЭтоНовый = Истина;
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОбъектаПроцесса(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьБизнесПроцессы() Тогда
		Возврат;
	КонецЕсли;

	// Объект перезаписывается уже запущенным БП (установка начального значения управляемого реквизита)
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьОбъектаУправляющимБП") Тогда
		Возврат;
	КонецЕсли;
	
	// Объект перезаписывается в той же транзакции уже после запуска БП (пример: триггер)
	Если Источник.ДополнительныеСвойства.Свойство("СтартованБизнесПроцессОбъекта") Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
		Если Источник.ДополнительныеСвойства.ЭтоНовый И НЕ ОбъектСвязанСБизнесПроцессом(Источник.Ссылка) Тогда
			ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник);
		Иначе
			ТекущийБП = ПолучитьБизнесПроцессПоОбъекту(Источник.Ссылка, НЕ Источник.ПометкаУдаления);
			Если ТекущийБП <> Неопределено Тогда
				ИзменяемыеРеквизиты = Новый Структура;
				Если ТекущийБП.Наименование <> Источник.Тема Тогда
					ИзменяемыеРеквизиты.Вставить("Наименование", Источник.Тема);
				КонецЕсли;
				Если ТекущийБП.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
					ИзменяемыеРеквизиты.Вставить("ПометкаУдаления", Источник.ПометкаУдаления);
				КонецЕсли;
				Если ТекущийБП.Проект <> Источник.Проект Тогда
					ИзменяемыеРеквизиты.Вставить("Проект", Источник.Проект);
				КонецЕсли;
				Если ИзменяемыеРеквизиты.Количество() > 0 Тогда
					СкорректироватьРеквизитыБП(ТекущийБП, ИзменяемыеРеквизиты);
				КонецЕсли;
			Иначе
				ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Источник.ДополнительныеСвойства.ЭтоНовый ИЛИ НЕ ОбъектСвязанСБизнесПроцессом(Источник.Ссылка) Тогда
		ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(Источник);
	Иначе
		ТекущийБП = ПолучитьБизнесПроцессПоОбъекту(Источник.Ссылка);
		Если ТекущийБП <> Неопределено Тогда
			ИзменяемыеРеквизиты = Новый Структура;
			Если ТекущийБП.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
				ИзменяемыеРеквизиты.Вставить("ПометкаУдаления", Источник.ПометкаУдаления);
			КонецЕсли;
			Если ИзменяемыеРеквизиты.Количество() > 0 Тогда
				СкорректироватьРеквизитыБП(ТекущийБП, ИзменяемыеРеквизиты);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Основание является задача.
//
// Параметры:
//  НовыйЗвонок	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОснованиеЯвляетсяЗадача(НовыйЗвонок) Экспорт
	
	Если ЗначениеЗаполнено(НовыйЗвонок.ВзаимодействиеОснование)
		 И ТипЗнч(НовыйЗвонок.ВзаимодействиеОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат НовыйЗвонок.ВзаимодействиеОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за отрисовку и работу кнопок выполнения задач на форме документов.

Функция ОбъектСвязанСБизнесПроцессом(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И CRM_БизнесПроцесс.Интерес = &Интерес";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьНеВыполненныеЗадачи(Ссылка, ПоТекущемуПользователю = Ложь) Экспорт
	
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес", Ссылка);
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК CRM_СостояниеИнтереса
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО
	|	И ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес";
	Если ПоТекущемуПользователю Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ВЫБОР
		|			КОГДА НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ТОГДА ЗадачаИсполнителя.Исполнитель В (&Исполнитель)
		|			ИНАЧЕ ИСТИНА В
		|			(ВЫБРАТЬ
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ГДЕ
		|				ЗадачаИсполнителя.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|				И ЗадачаИсполнителя.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|				И ЗадачаИсполнителя.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|				И ИсполнителиЗадач.Исполнитель В (&Исполнитель)
		|	
		|			ОБЪЕДИНИТЬ
		|	
		|			ВЫБРАТЬ
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.CRM_ИсполнителиДинамическойАдресации КАК CRM_ИсполнителиДинамическойАдресации
		|			ГДЕ
		|				ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация)
		|				И ЗадачаИсполнителя.Ссылка = CRM_ИсполнителиДинамическойАдресации.Задача
		|				И CRM_ИсполнителиДинамическойАдресации.Исполнитель В (&Исполнитель)) 
		|			КОНЕЦ";

		Запрос.УстановитьПараметр("Исполнитель", 
			РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(Пользователи.ТекущийПользователь()));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.CRM_СостояниеИнтереса) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьБизнесПроцессПоОбъекту(Ссылка, НеУчитыватьПометкуУдаления = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес", Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", ПользователиКлиентСервер.АвторизованныйПользователь());
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.БизнесПроцесс КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачаИсполнителя.Дата УБЫВ";
	
	Если НеУчитыватьПометкуУдаления Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И НЕ ЗадачаИсполнителя.ПометкаУдаления", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйБизнесПроцесс(Задача, ПолучатьЗавершенные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
	               |	И НЕ CRM_БизнесПроцесс.Завершен";
	Запрос.УстановитьПараметр("ВедущаяЗадача", Задача);
	Если ПолучатьЗавершенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ CRM_БизнесПроцесс.Завершен", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ГруппаАвтоКнопки = Форма.Элементы.Найти("ГруппаАвтоКнопки");
	Если ГруппаАвтоКнопки = Неопределено Тогда
		ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма);
	КонецЕсли;
	ЗаблокироватьУправляемыйРеквизит(Форма);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры) Экспорт
	
	ГруппаАвтоКнопки = Форма.Элементы.Найти("ГруппаАвтоКнопки");
	Если ГруппаАвтоКнопки = Неопределено Тогда
		ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма);
	Иначе
		ЭтоЧужаяЗадача = Ложь;
		МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(ТекущийОбъект.Ссылка, Истина);
		Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
			МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(ТекущийОбъект.Ссылка);
			ЭтоЧужаяЗадача = Истина;
		КонецЕсли;
	
		Если НЕ ЭтоЧужаяЗадача
			 И МассивЗадачПоОбъекту[0].CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			ЭтоЧужаяЗадача = Истина;
		КонецЕсли;
		
		ОбновитьКоманднуюПанельРаботыСЗадачами(Форма, МассивЗадачПоОбъекту, ЭтоЧужаяЗадача);
	КонецЕсли;
	ЗаблокироватьУправляемыйРеквизит(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ГруппаАвтоКнопки = Форма.Элементы.Найти("ГруппаАвтоКнопки");
	Если ГруппаАвтоКнопки = Неопределено Тогда
		Форма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПослеВыполненияЗадачи(ЗадачаИсполнителя) Экспорт
	
	БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс;
	Если ЗадачаИсполнителя.Выполнена
		И БизнесПроцесс.Завершен
		И Не ЗадачаИсполнителя.CRM_ЗавершенДосрочно Тогда
		
		ОбъектБП = БизнесПроцесс.Интерес.ПолучитьОбъект();
		ЗаписатьОбъектБП = Ложь;
		
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(БизнесПроцесс,
			ЗадачаИсполнителя.CRM_ТочкаМаршрута, , ,
			ЗадачаИсполнителя.CRM_ВариантВыполнения);
		
		Если МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(БизнесПроцесс);
			НаборЭтапов.Отбор.ТочкаМаршрута.Установить(МассивИсходящихТочек[0].ИсходящаяТочка);
			НаборЭтапов.Прочитать();
			
			Если (НаборЭтапов.Количество() > 0) И ЗначениеЗаполнено(НаборЭтапов[0].Состояние) Тогда
				
				Если ЗначениеЗаполнено(БизнесПроцесс.ВидОбъектаСтрокой)
					И ЗначениеЗаполнено(БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
					Если СтрНайти(БизнесПроцесс.РеквизитОбъектаСтрокой, "%Свойство%") Тогда
						
						СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(БизнесПроцесс.РеквизитОбъектаСтрокой,
							 "%Свойство%",
							 "")));
						
						МассивСтрок = ОбъектБП.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СсылкаНаСвойство));
						
						Если МассивСтрок.Количество() > 0 Тогда
							МассивСтрок[0].Значение = НаборЭтапов[0].Состояние;
							ЗаписатьОбъектБП = Истина;
						КонецЕсли;
						
					Иначе
						Если ЗначениеЗаполнено(НаборЭтапов[0].Состояние)
							 И ОбъектБП[ЗадачаИсполнителя.БизнесПроцесс.РеквизитОбъектаСтрокой] <> НаборЭтапов[0].Состояние Тогда
							ОбъектБП[ЗадачаИсполнителя.БизнесПроцесс.РеквизитОбъектаСтрокой] = НаборЭтапов[0].Состояние;
							ЗаписатьОбъектБП = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
			СостояниеДосрочногоЗавершения = БизнесПроцесс.КартаМаршрута.СостояниеДосрочногоЗавершения;
			Если ЗначениеЗаполнено(БизнесПроцесс.ВидОбъектаСтрокой)
				И ЗначениеЗаполнено(БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
				Если СтрНайти(БизнесПроцесс.РеквизитОбъектаСтрокой, "%Свойство%") Тогда
					
					СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(БизнесПроцесс.РеквизитОбъектаСтрокой,
						 "%Свойство%",
						 "")));
					
					МассивСтрок = ОбъектБП.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СсылкаНаСвойство));
					
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].Значение = СостояниеДосрочногоЗавершения;
						ЗаписатьОбъектБП = Истина;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(СостояниеДосрочногоЗавершения) Тогда
						ОбъектБП[БизнесПроцесс.РеквизитОбъектаСтрокой] = СостояниеДосрочногоЗавершения;
						ЗаписатьОбъектБП = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "ДатаЗавершенияВзаимодействия") Тогда
			ОбъектБП.ДатаЗавершенияВзаимодействия = ЗадачаИсполнителя.ДатаИсполнения;
			ОбъектБП.ЗавершившийПользователь = ЗадачаИсполнителя.Исполнитель;
			ЗаписатьОбъектБП = Истина;
		КонецЕсли;
		
		Если ЗадачаИсполнителя.ДополнительныеСвойства.Свойство("ПричинаДосрочногоЗавершения") Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "ПричинаОтказа") Тогда
				ОбъектБП.ПричинаОтказа = ЗадачаИсполнителя.ДополнительныеСвойства.ПричинаДосрочногоЗавершения;
				ЗаписатьОбъектБП = Истина;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "CRM_ПричинаОтказа") Тогда
				ОбъектБП.CRM_ПричинаОтказа = ЗадачаИсполнителя.ДополнительныеСвойства.ПричинаДосрочногоЗавершения;
				ЗаписатьОбъектБП = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьОбъектБП Тогда
			ОбъектБП.ДополнительныеСвойства.Вставить("ОбъектЗаписанУправляющимБП");
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектБП, "Проведен") Тогда
				РежимЗаписи = ?(ОбъектБП.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
				ОбъектБП.Записать(РежимЗаписи);
			Иначе
				ОбъектБП.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКоманднуюПанельРаботыСЗадачами(Форма, МассивЗадачПоОбъекту, ЭтоЧужаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого ЭлементФормы Из Форма.Элементы Цикл
		Если СтрНайти(ЭлементФормы.Имя, "Кнопка_ВыполнитьЗадачу_") > 0
			И ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			МассивУдаляемыхЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементИмя Из МассивУдаляемыхЭлементов Цикл
		Форма.Элементы.Удалить(Форма.Элементы.Найти(ЭлементИмя));
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	
	Для Каждого КомандаФормы Из Форма.Команды Цикл
		Если СтрНайти(КомандаФормы.Имя, "Команда_ВыполнитьЗадачу_") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяКоманды Из МассивУдаляемыхКоманд Цикл
		Форма.Команды.Удалить(Форма.Команды[ИмяКоманды]);
	КонецЦикла;
	
	ТекстТекущегоЭтапа = "";
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		БизнесПроцесс = ПолучитьБизнесПроцессПоОбъекту(Форма.Объект.Ссылка);
		Если НЕ БизнесПроцесс = Неопределено Тогда
			Форма.ЗадачаИсполнителя_БизнесПроцесс = БизнесПроцесс;
			
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				ТекстТекущегоЭтапа = ЗаписьТекущегоЭтапа.ТекущийЭтап;
			КонецЕсли;
			
			Форма.Элементы.Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая.Видимость = Ложь;
			Форма.Элементы.ГруппаОписаниеЗадачи.Видимость = Ложь;
			Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
				Форма.Элементы.Декорация_ЗаголовокЗадачиЧужая.Заголовок = ТекстТекущегоЭтапа;
			Иначе	
				Форма.Элементы.Декорация_ЗаголовокЗадачиЧужая.Заголовок = Строка(Форма.Объект[БизнесПроцесс.РеквизитОбъектаСтрокой]) 
					+ ", " 
					+ ТекстТекущегоЭтапа;
			КонецЕсли;
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
			
			Если БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно Тогда
				Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница.ЦветФона = Новый Цвет(220, 250, 220);
			ИначеЕсли БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
				Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница.ЦветФона = Новый Цвет(250, 220, 220);
			КонецЕсли;
			
			Если Не Форма.Элементы.Найти("Кнопка_Команда_ЗапуститьПроцессЗаново") = Неопределено Тогда
				Форма.Элементы.Кнопка_Команда_ЗапуститьПроцессЗаново.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Задача = МассивЗадачПоОбъекту[0];
		
		Если ЭтоЧужаяЗадача Тогда
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = Задача.БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				ТекстТекущегоЭтапа = ?(Задача.БизнесПроцесс.Завершен, "", НСтр("ru='Задача'") + ": ") 
					+ ЗаписьТекущегоЭтапа.ТекущийЭтап 
					+ " ("
				+ ?(Задача.Исполнитель = Справочники.Пользователи.ПустаяССылка(), Задача.РольИсполнителя, Задача.Исполнитель) + ")";
			КонецЕсли;
		Иначе
			ТекстТекущегоЭтапа = ?(Задача.БизнесПроцесс.Завершен, "", НСтр("ru='Задача'") + ": ") 
				+ Строка(Задача.CRM_ТочкаМаршрута);
		КонецЕсли;
		
		Форма.ЗадачаИсполнителя									= Задача;
		Форма.ЗадачаИсполнителя_БизнесПроцесс					= Задача.БизнесПроцесс;
		Форма.ЗадачаИсполнителя_ПринятаКИсполнению				= Задача.ПринятаКИсполнению;
		Форма.ЗадачаИсполнителя_ТекущийПользователь				= ПользователиКлиентСервер.АвторизованныйПользователь();
		Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения	= Ложь;
		Форма.ЗадачаИсполнителя_ТочкаМаршрута					= Задача.CRM_ТочкаМаршрута;
		Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута		= Задача.БизнесПроцесс.НомерВерсииКартыМаршрута;
		Форма.ЗадачаИсполнителя_УсловияВыполнены				= ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя,
			 Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
		
		ПолучитьСписокОбъектовПоБизнесПроцессу(Форма, Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_БизнесПроцесс);
		
		// ЗАДАЧА ПРИНЯТА К ИСПОЛНЕНИЮ
		СтруктураВариантовВыполнения = ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_0");
			НоваяКомандаФормы.Заголовок                 = НСтр("ru='Выполнить'");
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";

			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0", Тип("КнопкаФормы"),
				 Форма.Элементы.ГруппаПринятоВыполнитьПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
		КонецЕсли;
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Задача.БизнесПроцесс.Ссылка);
		НаборЭтапов.Прочитать();
		
		// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
		Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута Тогда
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_" + ?(НаборЭтапов[1].Используется, "1", "0"));
			НоваяКомандаФормы.Заголовок                 = НСтр("ru='Выполнить'");
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			//НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0", Тип("КнопкаФормы"),
				 Форма.Элементы.ГруппаПринятоВыполнитьПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_" + ?(НаборЭтапов[1].Используется, "1", "0");
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			НовыйПунктМеню.ТолькоВоВсехДействиях = Ложь;
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
			
		Иначе
			Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения =
				(СтруктураВариантовВыполнения.СписокВариантов.Количество() > 1);
			
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_" + СокрЛП(Строка(ЭлементСписка.Значение)));
				НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
				НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";

				Форма.Элементы.ПодменюАвтоКоманд.Заголовок = "   " 
					+ СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок 
					+ "   ";
				
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_" 
					+ СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), Форма.Элементы.ПодменюАвтоКоманд);
				НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_" + СокрЛП(Строка(ЭлементСписка.Значение));
				НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
				НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
				КнопкаПоУмолчанию					= ЭлементСписка.Пометка;
				НовыйПунктМеню.КнопкаПоУмолчанию	= КнопкаПоУмолчанию;
				НовыйПунктМеню.ТолькоВоВсехДействиях = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		// Задача не принята
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_ПослеПринятия",
			 Тип("КнопкаФормы"),
			 Форма.Элементы.ГруппаПринятоВыполнитьНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 ИЛИ
			(Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута) Тогда
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		Иначе
			НовыйПунктМеню.Заголовок = "   " + СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок + "   ";
		КонецЕсли;
		НовыйПунктМеню.Доступность			= Ложь;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
		НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
		НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
		НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
		
		Форма.Элементы.ПолеИсполнительЗадачи.Видимость = ЗначениеЗаполнено(Задача.Исполнитель);
		Форма.Элементы.ПолеРольИсполнителяЗадачи.Видимость = НЕ ЗначениеЗаполнено(Задача.Исполнитель);
		
		Если Задача.ПринятаКИсполнению И НЕ ЭтоЧужаяЗадача Тогда
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиПринята;
		ИначеЕсли НЕ ЭтоЧужаяЗадача Тогда
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиНеПринята;
		Иначе
			Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница = Форма.Элементы.СтраницаЗадачиЧужая;
		КонецЕсли;
		Форма.Элементы.ПанельСтраницАвтоКнопки.ТекущаяСтраница.ЦветФона = Новый Цвет(237, 237, 237);
		Форма.Элементы.ГруппаАвтоКнопки.ТолькоПросмотр = ЭтоЧужаяЗадача;
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
			Заголовок =  ТекстТекущегоЭтапа;
		Иначе
			Заголовок =  Строка(ЗначениеРеквизитаОбъекта(Форма.Объект, Задача.БизнесПроцесс.РеквизитОбъектаСтрокой)) + ". " 
				+ ТекстТекущегоЭтапа
			+ ?(ЗначениеЗаполнено(Задача.БизнесПроцесс.ДатаЗавершения), " " 
				+ Формат(Задача.БизнесПроцесс.ДатаЗавершения, "ДФ=dd.MM.yyyy"),
				 "");
		КонецЕсли;	
		Форма.Элементы.Декорация_ЗаголовокЗадачиПринята.Заголовок = Заголовок;
		Форма.Элементы.Декорация_ЗаголовокЗадачиНеПринята.Заголовок = Заголовок;
		Форма.Элементы.Декорация_ЗаголовокЗадачиЧужая.Заголовок = Заголовок;
		Если Не Форма.Элементы.Найти("Кнопка_Команда_ЗапуститьПроцессЗаново") = Неопределено Тогда
			Форма.Элементы.Кнопка_Команда_ЗапуститьПроцессЗаново.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтрисоватьКоманднуюПанельРаботыСЗадачами(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоЧужаяЗадача = Ложь;
	ЭтоИнтерес = (ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес"));
	
	МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка, Истина);
	Если Форма.Параметры.Свойство("ОткрываемаяЗадача") Тогда
		Если МассивЗадачПоОбъекту.Найти(Форма.Параметры.ОткрываемаяЗадача) <> Неопределено Тогда
			МассивЗадачПоОбъекту = Новый Массив;
			МассивЗадачПоОбъекту.Добавить(Форма.Параметры.ОткрываемаяЗадача);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		МассивЗадачПоОбъекту = ПолучитьНеВыполненныеЗадачи(Форма.Объект.Ссылка);
		ЭтоЧужаяЗадача = Истина;
	КонецЕсли;
	
	ЕстьПравоНаОткатБП = (РольДоступна("ПолныеПрава") Или РольДоступна("CRM_УправлениеБизнесПроцессами"));
	
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		
		БизнесПроцесс = ПолучитьБизнесПроцессПоОбъекту(Форма.Объект.Ссылка);
		Если НЕ БизнесПроцесс = Неопределено Тогда
			
			ТекстТекущегоЭтапа = "";
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				ТекстТекущегоЭтапа = ?(БизнесПроцесс.Завершен, "", НСтр("ru='Задача'") + ": ") + ЗаписьТекущегоЭтапа.ТекущийЭтап;
			КонецЕсли;
			
			// Добавим необходимыеРеквизиты
			МассивДобавляемыхРеквизитов = Новый Массив;
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя",
				 Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя")));
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_БизнесПроцесс",
				 Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс")));
			
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
			Форма.ЗадачаИсполнителя_БизнесПроцесс = БизнесПроцесс;
			
			ГруппаРазмещения = Форма.Элементы.Найти("ГруппаБизнесПроцессаОбъекта");
			Если ГруппаРазмещения = Неопределено Тогда
				Для Каждого ЭлементФормы Из Форма.Элементы Цикл
					ПервыйЭлемент = ЭлементФормы;
					Прервать;
				КонецЦикла;
				ГруппаАвтоКнопки = Форма.Элементы.Вставить("ГруппаАвтоКнопки", Тип("ГруппаФормы"), , ПервыйЭлемент);
			Иначе
				ГруппаАвтоКнопки = Форма.Элементы.Добавить("ГруппаАвтоКнопки", Тип("ГруппаФормы"), ГруппаРазмещения);
			КонецЕсли;
			
			ГруппаАвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаАвтоКнопки.Заголовок     = "ГруппаАвтоКнопки";
			ГруппаАвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаАвтоКнопки.ОтображатьЗаголовок = Ложь;
			ГруппаАвтоКнопки.РастягиватьПоВертикали = Ложь;
			ГруппаАвтоКнопки.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			ГруппаАвтоКнопки.ТолькоПросмотр = ЭтоЧужаяЗадача;
			
			АвтоКнопки = Форма.Элементы.Добавить("АвтоКнопки", Тип("ГруппаФормы"), ГруппаАвтоКнопки);
			АвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			АвтоКнопки.Заголовок     = "АвтоКнопки";
			АвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			АвтоКнопки.ОтображатьЗаголовок = Ложь;
			АвтоКнопки.РастягиватьПоВертикали = Ложь;
			АвтоКнопки.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			ПанельСтраницАвтоКнопки = Форма.Элементы.Добавить("ПанельСтраницАвтоКнопки", Тип("ГруппаФормы"), АвтоКнопки);
			ПанельСтраницАвтоКнопки.Вид = ВидГруппыФормы.Страницы;
			ПанельСтраницАвтоКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			
			СтраницаЗадачиЧужая = Форма.Элементы.Добавить("СтраницаЗадачиЧужая", Тип("ГруппаФормы"), ПанельСтраницАвтоКнопки);
			СтраницаЗадачиЧужая.Вид = ВидГруппыФормы.Страница;
			СтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			СтраницаЗадачиЧужая.РастягиватьПоГоризонтали = Истина;

			ГруппаЗаголовокЧужая = Форма.Элементы.Добавить("ГруппаЗаголовокЗадачиЧужая", Тип("ГруппаФормы"),
				 СтраницаЗадачиЧужая);
			ГруппаЗаголовокЧужая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗаголовокЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЗаголовокЧужая.ОтображатьЗаголовок = Ложь;
			
			ДекорацияЗаголовок = Форма.Элементы.Добавить("Декорация_ЗаголовокЗадачиЧужая",
				 Тип("ДекорацияФормы"),
				 ГруппаЗаголовокЧужая);
			ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияЗаголовок.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
			Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
				ТекстТекущегоЭтапа = "";
				ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
				ЗаписьТекущегоЭтапа.Объект = БизнесПроцесс;
				ЗаписьТекущегоЭтапа.Прочитать();
				Если ЗаписьТекущегоЭтапа.Выбран() Тогда
					ТекстТекущегоЭтапа =  ЗаписьТекущегоЭтапа.ТекущийЭтап;
				КонецЕсли;
				ДекорацияЗаголовок.Заголовок =  ТекстТекущегоЭтапа;
			Иначе	
				ДекорацияЗаголовок.Заголовок =  Строка(ЗначениеРеквизитаОбъекта(Форма.Объект, БизнесПроцесс.РеквизитОбъектаСтрокой)) 
					+ ". " 
					+ ТекстТекущегоЭтапа
				+ ?(ЗначениеЗаполнено(БизнесПроцесс.ДатаЗавершения), " " + Формат(БизнесПроцесс.ДатаЗавершения,
					 "ДФ=dd.MM.yyyy"),
					 "");
			КонецЕсли;	
			ДекорацияЗаголовок.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияЗаголовок.РастягиватьПоГоризонтали = Истина;
			ДекорацияЗаголовок.Шрифт = Новый Шрифт(, 10, Истина);
			
			ГруппаЭлементовСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиЧужая",
				 Тип("ГруппаФормы"),
				 СтраницаЗадачиЧужая);
			ГруппаЭлементовСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементовСтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементовСтраницаЗадачиЧужая.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементовСтраницаЗадачиЧужая.РастягиватьПоВертикали = Ложь;
			
			ПанельАвтоКнопокСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиЧужая",
				 Тип("ГруппаФормы"),
				 СтраницаЗадачиЧужая);
			ПанельАвтоКнопокСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.КоманднаяПанель;
			ПанельАвтоКнопокСтраницаЗадачиЧужая.РастягиватьПоГоризонтали	= Истина;
			
			// КОМАНДЫ
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_КартаМаршрута");
			НоваяКомандаФормы.Заголовок                 = "Карта маршрута";
			НоваяКомандаФормы.Подсказка                 = "Открыть карту маршрута бизнес-процесса";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеБизнесПроцесса");
			НоваяКомандаФормы.Заголовок                 = "Описание бизнес-процесса";
			НоваяКомандаФормы.Подсказка                 = "Описание бизнес-процесса и задач";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.Задача;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПередвинутьЭтап");
			НоваяКомандаФормы.Заголовок                 = "Сменить текущий этап";
			НоваяКомандаФормы.Подсказка                 = "Сменить текущий этап";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ОтветитьНаЭлектронноеПисьмо;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
			
			// ЧУЖАЯ ЗАДАЧА
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая",
				 Тип("КнопкаФормы"),
				 ГруппаЭлементовСтраницаЗадачиЧужая);
			НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			//НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
			
			Если Не ЭтоИнтерес Тогда
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая",
					 Тип("КнопкаФормы"),
					 ГруппаЭлементовСтраницаЗадачиЧужая);
				НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
				НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				НовыйПунктМеню.Ширина = 3;
				НовыйПунктМеню.Высота = 1;
			КонецЕсли;
			
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиЧужая;
			
			Если БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно Тогда
				АвтоКнопки.ЦветФона = Новый Цвет(220, 250, 220);
			ИначеЕсли БизнесПроцесс.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
				АвтоКнопки.ЦветФона = Новый Цвет(250, 220, 220);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоддерживаетПовторныйЗапускБП") Тогда
				НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ЗапуститьПроцессЗаново");
				НоваяКомандаФормы.Заголовок                 = "Запустить бизнес-процесс";
				НоваяКомандаФормы.Подсказка                 = "Запустить бизнес-процесс повторно";
				НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПовторныйЗапускБП";
				НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
				НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Текст;
				
				Если ГруппаРазмещения = Неопределено Тогда
					Для Каждого ЭлементФормы Из Форма.Элементы Цикл
						ПервыйЭлемент = ЭлементФормы;
						Прервать;
					КонецЦикла;
					НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Команда_ЗапуститьПроцессЗаново",
						 Тип("КнопкаФормы"),
						 ПервыйЭлемент);
				Иначе
					НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Команда_ЗапуститьПроцессЗаново",
						 Тип("КнопкаФормы"),
						 ГруппаРазмещения);
				КонецЕсли;
				НовыйПунктМеню.ИмяКоманды			= "Команда_ЗапуститьПроцессЗаново";
				НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
				НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
				НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
				НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
			КонецЕсли;

			Если ЕстьПравоНаОткатБП Тогда
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиЧужая",
				Тип("КнопкаФормы"),
				ГруппаЭлементовСтраницаЗадачиЧужая);
				НовыйПунктМеню.ИмяКоманды			= "Команда_ПередвинутьЭтап";
				НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				НовыйПунктМеню.Ширина = 3;
				НовыйПунктМеню.Высота = 1;
			КонецЕсли;

		КонецЕсли;
	Иначе
		Задача = МассивЗадачПоОбъекту[0];
		
		Если НЕ ЭтоЧужаяЗадача
			 И Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			ЭтоЧужаяЗадача = Истина;
		КонецЕсли;
			
		ТекстТекущегоЭтапа = "";
		Если ЭтоЧужаяЗадача Тогда
			ЗаписьТекущегоЭтапа = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаписьТекущегоЭтапа.Объект = Задача.БизнесПроцесс;
			ЗаписьТекущегоЭтапа.Прочитать();
			Если ЗаписьТекущегоЭтапа.Выбран() Тогда
				Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
					ТекстТекущегоЭтапа =  Строка(Задача.CRM_ТочкаМаршрута) + НСтр("ru='; Исполнитель: '") + Задача.Исполнитель;
				Иначе
					ТекстТекущегоЭтапа = ?(Задача.БизнесПроцесс.Завершен, "", НСтр("ru='Задача'") + ": ") 
						+ ЗаписьТекущегоЭтапа.ТекущийЭтап 
						+ " ("
					+ ?(Задача.Исполнитель = Справочники.Пользователи.ПустаяССылка(), Задача.РольИсполнителя, Задача.Исполнитель) + ")";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
				ТекстТекущегоЭтапа =  Строка(Задача.CRM_ТочкаМаршрута) + НСтр("ru='; Исполнитель: '") + Задача.Исполнитель;
			Иначе
				ТекстТекущегоЭтапа = ?(Задача.БизнесПроцесс.Завершен, "", НСтр("ru='Задача'") + ": ") 
					+ Строка(Задача.CRM_ТочкаМаршрута);
			КонецЕсли;
		КонецЕсли;
		
		// Добавим необходимыеРеквизиты
		МассивДобавляемыхРеквизитов = Новый Массив;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя",
			 Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_БизнесПроцесс",
			 Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ПринятаКИсполнению",
			 Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_НесколькоВариантовВыполнения",
			 Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ТекущийПользователь",
			 Новый ОписаниеТипов("СправочникСсылка.Пользователи")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ОтложитьНаДату",
			 Новый ОписаниеТипов("Дата", , ,
			 Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ТочкаМаршрута",
			 Новый ОписаниеТипов("СправочникСсылка.CRM_ТочкиМаршрутов")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_НомерВерсииКартыМаршрута",
			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,
			 0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ВариантВыполнения",
			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,
			 0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_ВариантВыполненияСтрокой",
			 Новый ОписаниеТипов("Строка", ,
			 Новый КвалификаторыСтроки(250))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_УсловияВыполнены",
			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,
			 0))));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_Выполнена",
			 Новый ОписаниеТипов("Булево")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗадачаИсполнителя_СрокИсполнения",
			 Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)), ,
			 НСтр("ru='Срок'")));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОбъектыПоБизнесПроцессам",
			Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("БизнесПроцесс",
			Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс"), "ОбъектыПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Задача",
			Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"), "ОбъектыПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТочкаМаршрута",
			Новый ОписаниеТипов("СправочникСсылка.CRM_ТочкиМаршрутов"), "ОбъектыПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Объект",
			Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип, "ОбъектыПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДатаРегистрации",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя), "ОбъектыПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОбъекта",
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_ВидыОбъектовБизнесПроцессов"),
			"ОбъектыПоБизнесПроцессам"));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТипыОбъектовПоБизнесПроцессам",
			Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВидОбъекта",
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.CRM_ВидыОбъектовБизнесПроцессов"),
			"ТипыОбъектовПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТипЗначения",
			Новый ОписаниеТипов("ОписаниеТипов"), "ТипыОбъектовПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтапОснования",
			Новый ОписаниеТипов("СправочникСсылка.CRM_ТочкиМаршрутов"), "ТипыОбъектовПоБизнесПроцессам"));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Обязательный",
			Новый ОписаниеТипов("Булево"), "ТипыОбъектовПоБизнесПроцессам"));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТипыОбъектовПоБизнесПроцессамСписок",
			Новый ОписаниеТипов("СписокЗначений")));
		
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		Форма.ЗадачаИсполнителя									= Задача;
		Форма.ЗадачаИсполнителя_БизнесПроцесс					= Задача.БизнесПроцесс;
		Форма.ЗадачаИсполнителя_ПринятаКИсполнению				= Задача.ПринятаКИсполнению;
		Форма.ЗадачаИсполнителя_ТекущийПользователь				= ПользователиКлиентСервер.АвторизованныйПользователь();
		Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения	= Ложь;
		Форма.ЗадачаИсполнителя_ТочкаМаршрута					= Задача.CRM_ТочкаМаршрута;
		Форма.ЗадачаИсполнителя_НомерВерсииКартыМаршрута		= Задача.БизнесПроцесс.НомерВерсииКартыМаршрута;
		Форма.ЗадачаИсполнителя_УсловияВыполнены				= ПолучитьУсловиеЭтапаПроверитьПрименимость(Форма.ЗадачаИсполнителя,
			 Форма.ЗадачаИсполнителя_ПринятаКИсполнению);
		Форма.ЗадачаИсполнителя_СрокИсполнения					= Задача.СрокИсполнения;
		
		ГруппаРазмещения = Форма.Элементы.Найти("ГруппаБизнесПроцессаОбъекта");
		Если ГруппаРазмещения = Неопределено Тогда
			Для Каждого ЭлементФормы Из Форма.Элементы Цикл
				ПервыйЭлемент = ЭлементФормы;
				Прервать;
			КонецЦикла;
			ГруппаАвтоКнопки = Форма.Элементы.Вставить("ГруппаАвтоКнопки", Тип("ГруппаФормы"), , ПервыйЭлемент);
		Иначе
			ГруппаАвтоКнопки = Форма.Элементы.Добавить("ГруппаАвтоКнопки", Тип("ГруппаФормы"), ГруппаРазмещения);
		КонецЕсли;
		
		ГруппаАвтоКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАвтоКнопки.Заголовок = "ГруппаАвтоКнопки";
		ГруппаАвтоКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаАвтоКнопки.ОтображатьЗаголовок = Ложь;
		ГруппаАвтоКнопки.РастягиватьПоВертикали = Ложь;
		ГруппаАвтоКнопки.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		ГруппаАвтоКнопки.ТолькоПросмотр = ЭтоЧужаяЗадача;
		
		АвтоКнопки = Форма.Элементы.Добавить("АвтоКнопки", Тип("ГруппаФормы"), ГруппаАвтоКнопки);
		АвтоКнопки.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		АвтоКнопки.Заголовок     = "АвтоКнопки";
		АвтоКнопки.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		АвтоКнопки.ОтображатьЗаголовок = Ложь;
		АвтоКнопки.РастягиватьПоВертикали = Ложь;
		АвтоКнопки.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
		АвтоКнопки.ЦветФона = Новый Цвет(237, 237, 237);
		
		ПанельСтраницАвтоКнопки = Форма.Элементы.Добавить("ПанельСтраницАвтоКнопки", Тип("ГруппаФормы"), АвтоКнопки);
		ПанельСтраницАвтоКнопки.Вид = ВидГруппыФормы.Страницы;
		ПанельСтраницАвтоКнопки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		СтраницаЗадачиПринята = Форма.Элементы.Добавить("СтраницаЗадачиПринята", Тип("ГруппаФормы"), ПанельСтраницАвтоКнопки);
		СтраницаЗадачиПринята.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		СтраницаЗадачиПринята.РастягиватьПоГоризонтали = Истина;
		
		ГруппаЗаголовокПринята = Форма.Элементы.Добавить("ГруппаЗаголовокЗадачиПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиПринята);
		ГруппаЗаголовокПринята.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокПринята.ОтображатьЗаголовок = Ложь;
		ГруппаЗаголовокПринята.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ДекорацияЗаголовок = Форма.Элементы.Добавить("Декорация_ЗаголовокЗадачиПринята",
			 Тип("ДекорацияФормы"),
			 ГруппаЗаголовокПринята);
		ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЗаголовок.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
			ДекорацияЗаголовок.Заголовок =  ТекстТекущегоЭтапа;
		Иначе
			ДекорацияЗаголовок.Заголовок =  Строка(ЗначениеРеквизитаОбъекта(Форма.Объект, Задача.БизнесПроцесс.РеквизитОбъектаСтрокой)) 
				+ ". " 
				+ ТекстТекущегоЭтапа
			+ ?(ЗначениеЗаполнено(Задача.БизнесПроцесс.ДатаЗавершения), " " 
				+ Формат(Задача.БизнесПроцесс.ДатаЗавершения, "ДФ=dd.MM.yyyy"),
				 "");
		КонецЕсли;	
		ДекорацияЗаголовок.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияЗаголовок.РастягиватьПоГоризонтали = ЭтоИнтерес;
		ДекорацияЗаголовок.Шрифт = Новый Шрифт(, 10, Истина);
		
		СтраницаЗадачиНеПринята = Форма.Элементы.Добавить("СтраницаЗадачиНеПринята", Тип("ГруппаФормы"),
			 ПанельСтраницАвтоКнопки);
		СтраницаЗадачиНеПринята.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиНеПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		СтраницаЗадачиНеПринята.РастягиватьПоГоризонтали = Истина;
		
		ГруппаЗаголовокНеПринята = Форма.Элементы.Добавить("ГруппаЗаголовокЗадачиНеПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиНеПринята);
		ГруппаЗаголовокНеПринята.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокНеПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокНеПринята.ОтображатьЗаголовок = Ложь;
		ГруппаЗаголовокНеПринята.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ДекорацияЗаголовок = Форма.Элементы.Добавить("Декорация_ЗаголовокЗадачиНеПринята",
			 Тип("ДекорацияФормы"),
			 ГруппаЗаголовокНеПринята);
		ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЗаголовок.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
			ДекорацияЗаголовок.Заголовок =  ТекстТекущегоЭтапа;
		Иначе
			ДекорацияЗаголовок.Заголовок =  Строка(ЗначениеРеквизитаОбъекта(Форма.Объект, Задача.БизнесПроцесс.КартаМаршрута.РеквизитОбъектаСтрокой)) 
				+ ". " 
				+ ТекстТекущегоЭтапа
			+ ?(ЗначениеЗаполнено(Задача.БизнесПроцесс.ДатаЗавершения), " " 
				+ Формат(Задача.БизнесПроцесс.ДатаЗавершения, "ДФ=dd.MM.yyyy"),
				 "");
		КонецЕсли;	
		ДекорацияЗаголовок.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияЗаголовок.РастягиватьПоГоризонтали = ЭтоИнтерес;
		ДекорацияЗаголовок.Шрифт = Новый Шрифт(, 10, Истина);
		
		СтраницаЗадачиЧужая = Форма.Элементы.Добавить("СтраницаЗадачиЧужая", Тип("ГруппаФормы"), ПанельСтраницАвтоКнопки);
		СтраницаЗадачиЧужая.Вид = ВидГруппыФормы.Страница;
		СтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		СтраницаЗадачиЧужая.РастягиватьПоГоризонтали = Истина;
		
		ГруппаЗаголовокЧужая = Форма.Элементы.Добавить("ГруппаЗаголовокЗадачиЧужая", Тип("ГруппаФормы"), СтраницаЗадачиЧужая);
		ГруппаЗаголовокЧужая.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовокЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовокЧужая.ОтображатьЗаголовок = Ложь;
		ГруппаЗаголовокЧужая.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ДекорацияЗаголовок = Форма.Элементы.Добавить("Декорация_ЗаголовокЗадачиЧужая",
			 Тип("ДекорацияФормы"),
			 ГруппаЗаголовокЧужая);
		ДекорацияЗаголовок.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЗаголовок.ГоризонтальноеПоложение		= ГоризонтальноеПоложениеЭлемента.Лево;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
			ДекорацияЗаголовок.Заголовок =  ТекстТекущегоЭтапа;
		Иначе	
			ДекорацияЗаголовок.Заголовок =  Строка(ЗначениеРеквизитаОбъекта(Форма.Объект, Задача.БизнесПроцесс.КартаМаршрута.РеквизитОбъектаСтрокой)) 
				+ ", " 
				+ ТекстТекущегоЭтапа
			+ ?(ЗначениеЗаполнено(Задача.БизнесПроцесс.ДатаЗавершения), " " 
				+ Формат(Задача.БизнесПроцесс.ДатаЗавершения, "ДФ=dd.MM.yyyy"),
				 "");
		КонецЕсли;	
		ДекорацияЗаголовок.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияЗаголовок.РастягиватьПоГоризонтали = ЭтоИнтерес;
		ДекорацияЗаголовок.Шрифт = Новый Шрифт(, 10, Истина);
		
		ГруппаЭлементовСтраницаЗадачиПринята = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиПринята);
		ГруппаЭлементовСтраницаЗадачиПринята.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементовСтраницаЗадачиПринята.ОтображатьЗаголовок = Ложь;
		
		ГруппаАвтоКнопокСтраницаЗадачиПринята = Форма.Элементы.Добавить("ГруппаАвтоКнопокСтраницаЗадачиПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиПринята);
		ГруппаАвтоКнопокСтраницаЗадачиПринята.РастягиватьПоГоризонтали	= Истина;
		ГруппаАвтоКнопокСтраницаЗадачиПринята.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАвтоКнопокСтраницаЗадачиПринята.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаАвтоКнопокСтраницаЗадачиПринята.ОтображатьЗаголовок = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиПринята = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиПринята",
			 Тип("ГруппаФормы"),
			 ГруппаАвтоКнопокСтраницаЗадачиПринята);
		ПанельАвтоКнопокСтраницаЗадачиПринята.Вид           = ВидГруппыФормы.КоманднаяПанель;
		ПанельАвтоКнопокСтраницаЗадачиПринята.РастягиватьПоГоризонтали	= ЭтоИнтерес;
		
		ГруппаПринятоВыполнитьПринята = Форма.Элементы.Добавить("ГруппаПринятоВыполнитьПринята",
			 Тип("ГруппаФормы"),
			 ПанельАвтоКнопокСтраницаЗадачиПринята);
		ГруппаПринятоВыполнитьПринята.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		ГруппаЭлементовСтраницаЗадачиНеПринята = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиНеПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиНеПринята);
		ГруппаЭлементовСтраницаЗадачиНеПринята.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиНеПринята.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементовСтраницаЗадачиНеПринята.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементовСтраницаЗадачиНеПринята.РастягиватьПоВертикали = Ложь;
		
		ГруппаАвтоКнопокСтраницаЗадачиНеПринята = Форма.Элементы.Добавить("ГруппаАвтоКнопокСтраницаЗадачиНеПринята",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиНеПринята);
		ГруппаАвтоКнопокСтраницаЗадачиНеПринята.РастягиватьПоГоризонтали	= Истина;
		ГруппаАвтоКнопокСтраницаЗадачиНеПринята.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАвтоКнопокСтраницаЗадачиНеПринята.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаАвтоКнопокСтраницаЗадачиНеПринята.ОтображатьЗаголовок = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиНеПринята = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиНеПринята",
			 Тип("ГруппаФормы"),
			 ГруппаАвтоКнопокСтраницаЗадачиНеПринята);
		ПанельАвтоКнопокСтраницаЗадачиНеПринята.Вид           = ВидГруппыФормы.КоманднаяПанель;
		ПанельАвтоКнопокСтраницаЗадачиНеПринята.РастягиватьПоГоризонтали = ЭтоИнтерес;
		
		ГруппаПринятоВыполнитьНеПринята = Форма.Элементы.Добавить("ГруппаПринятоВыполнитьНеПринята",
			 Тип("ГруппаФормы"),
			 ПанельАвтоКнопокСтраницаЗадачиНеПринята);
		ГруппаПринятоВыполнитьНеПринята.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		ГруппаЭлементовСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ГруппаЭлементовСтраницаЗадачиЧужая",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиЧужая);
		ГруппаЭлементовСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементовСтраницаЗадачиЧужая.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементовСтраницаЗадачиЧужая.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементовСтраницаЗадачиЧужая.РастягиватьПоВертикали = Ложь;
		
		ПанельАвтоКнопокСтраницаЗадачиЧужая = Форма.Элементы.Добавить("ПанельАвтоКнопокСтраницаЗадачиЧужая",
			 Тип("ГруппаФормы"),
			 СтраницаЗадачиЧужая);
		ПанельАвтоКнопокСтраницаЗадачиЧужая.Вид           = ВидГруппыФормы.КоманднаяПанель;
		ПанельАвтоКнопокСтраницаЗадачиЧужая.РастягиватьПоГоризонтали = ЭтоИнтерес;
		
		ГруппаПринятоВыполнитьЧужая = Форма.Элементы.Добавить("ГруппаПринятоВыполнитьЧужая",
			 Тип("ГруппаФормы"),
			 ПанельАвтоКнопокСтраницаЗадачиЧужая);
		ГруппаПринятоВыполнитьЧужая.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		ГруппаОписаниеЗадачи = Форма.Элементы.Добавить("ГруппаОписаниеЗадачи", Тип("ГруппаФормы"), ГруппаАвтоКнопки);
		ГруппаОписаниеЗадачи.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОписаниеЗадачи.Поведение = ПоведениеОбычнойГруппы.Всплывающая; 
		ГруппаОписаниеЗадачи.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
		ГруппаОписаниеЗадачи.ШрифтЗаголовка = Новый Шрифт(, 1);
		ГруппаОписаниеЗадачи.Заголовок     = " ";
		ГруппаОписаниеЗадачи.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаОписаниеЗадачи.РастягиватьПоВертикали = Ложь;
		ГруппаОписаниеЗадачи.РастягиватьПоГоризонтали = Ложь;
		ГруппаОписаниеЗадачи.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
		
		ГруппаСрокИИсполнитель = Форма.Элементы.Добавить("ГруппаСрокИИсполнитель", Тип("ГруппаФормы"), ГруппаОписаниеЗадачи);
		ГруппаСрокИИсполнитель.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСрокИИсполнитель.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ПолеОписанияЗадачи = Форма.Элементы.Добавить("ПолеСрокИсполненияЗадачи", Тип("ПолеФормы"), ГруппаСрокИИсполнитель);
		ПолеОписанияЗадачи.Вид					= ВидПоляФормы.ПолеВвода;
		ПолеОписанияЗадачи.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Лево;
		ПолеОписанияЗадачи.ТолькоПросмотр		=
			НЕ Форма.ЗадачаИсполнителя_БизнесПроцесс.КартаМаршрута.РедактироватьСрокВыполненияЗадач;
		ПолеОписанияЗадачи.ПутьКДанным			= "ЗадачаИсполнителя_СрокИсполнения";
		ПолеОписанияЗадачи.АвтоМаксимальнаяШирина = Истина;
		ПолеОписанияЗадачи.РастягиватьПоГоризонтали = Ложь;
		ПолеОписанияЗадачи.УстановитьДействие("ПриИзменении", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
		ПолеОписанияЗадачи = Форма.Элементы.Добавить("ПолеИсполнительЗадачи", Тип("ПолеФормы"), ГруппаСрокИИсполнитель);
		ПолеОписанияЗадачи.Вид					= ВидПоляФормы.ПолеВвода;
		ПолеОписанияЗадачи.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Лево;
		ПолеОписанияЗадачи.ТолькоПросмотр		= Истина;
		ПолеОписанияЗадачи.ПутьКДанным			= "ЗадачаИсполнителя.Исполнитель";
		ПолеОписанияЗадачи.КнопкаВыбора = Ложь;
		ПолеОписанияЗадачи.Видимость = ЗначениеЗаполнено(Задача.Исполнитель);
		
		ПолеОписанияЗадачи = Форма.Элементы.Добавить("ПолеРольИсполнителяЗадачи", Тип("ПолеФормы"), ГруппаСрокИИсполнитель);
		ПолеОписанияЗадачи.Вид					= ВидПоляФормы.ПолеВвода;
		ПолеОписанияЗадачи.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Лево;
		ПолеОписанияЗадачи.ТолькоПросмотр		= Истина;
		ПолеОписанияЗадачи.ПутьКДанным			= "ЗадачаИсполнителя.РольИсполнителя";
		ПолеОписанияЗадачи.КнопкаВыбора = Ложь;
		ПолеОписанияЗадачи.Видимость = НЕ ЗначениеЗаполнено(Задача.Исполнитель);
		
		ПолеОписанияЗадачи = Форма.Элементы.Добавить("ПолеОписанияЗадачи", Тип("ПолеФормы"), ГруппаОписаниеЗадачи);
		ПолеОписанияЗадачи.Вид					= ВидПоляФормы.ПолеВвода;
		ПолеОписанияЗадачи.МногострочныйРежим	= Истина;
		ПолеОписанияЗадачи.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеОписанияЗадачи.ТолькоПросмотр		= Истина;
		ПолеОписанияЗадачи.ПутьКДанным			= "ЗадачаИсполнителя.Описание";
		ПолеОписанияЗадачи.РастягиватьПоВертикали = Ложь;
		ПолеОписанияЗадачи.АвтоМаксимальнаяШирина = Ложь;
		ПолеОписанияЗадачи.РастягиватьПоГоризонтали = Ложь;
		ПолеОписанияЗадачи.Ширина = 74;
		
		// ОБЪЕКТЫ ПО ЗАДАЧЕ
		ГруппаОбъектыПоЗадаче = Форма.Элементы.Добавить("ГруппаОбъектыПоЗадаче",
			Тип("ГруппаФормы"), ГруппаАвтоКнопки);
		ГруппаОбъектыПоЗадаче.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОбъектыПоЗадаче.Поведение = ПоведениеОбычнойГруппы.Всплывающая; 
		ГруппаОбъектыПоЗадаче.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
		ГруппаОбъектыПоЗадаче.ШрифтЗаголовка = Новый Шрифт(, 1);
		ГруппаОбъектыПоЗадаче.Заголовок     = " ";
		ГруппаОбъектыПоЗадаче.Группировка   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаОбъектыПоЗадаче.РастягиватьПоВертикали = Ложь;
		ГруппаОбъектыПоЗадаче.РастягиватьПоГоризонтали = Ложь;
		ГруппаОбъектыПоЗадаче.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
		ГруппаОбъектыПоЗадаче.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		ГруппаЗаголовок = Форма.Элементы.Добавить("ГруппаОбъектыПоЗадачеЗаголовок",
			Тип("ГруппаФормы"), ГруппаОбъектыПоЗадаче);
		ГруппаЗаголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЗаголовок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		ГруппаЗаголовок.РастягиватьПоВертикали = Ложь;
		ГруппаЗаголовок.РастягиватьПоГоризонтали = Ложь;
		ГруппаЗаголовок.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
		ГруппаЗаголовок.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаголовок.ОтображатьЗаголовок = Ложь;
		ГруппаЗаголовок.Ширина = 74;
		
		ДекорацияЧтоДелаемКартинка = Форма.Элементы.Добавить("ДекорацияЧтоДелаемКартинка",
			Тип("ДекорацияФормы"), ГруппаЗаголовок);
		ДекорацияЧтоДелаемКартинка.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияЧтоДелаемКартинка.Картинка = БиблиотекаКартинок.CRM_СтруктураПодчиненности24;
		ДекорацияЧтоДелаемКартинка.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		ДекорацияЧтоДелаемКартинка.Ширина = 3;
		
		ДекорацияЧтоДелам = Форма.Элементы.Добавить("ДекорацияЧтоДелам",
			Тип("ДекорацияФормы"), ГруппаЗаголовок);
		ДекорацияЧтоДелам.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияЧтоДелам.Заголовок = НСтр("ru = 'ДОКУМЕНТЫ ПО ЗАДАЧЕ'");
		ДекорацияЧтоДелам.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияЧтоДелам.РастягиватьПоГоризонтали = Истина;
		
		ГруппаПанельГиперссылок = Форма.Элементы.Добавить("ГруппаПанельГиперссылок",
			Тип("ГруппаФормы"), ГруппаОбъектыПоЗадаче);
		ГруппаПанельГиперссылок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПанельГиперссылок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаПанельГиперссылок.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПанельГиперссылок.ОтображатьЗаголовок = Ложь;
		
		ОбъектыПоБизнесПроцессам = Форма.Элементы.Добавить("ОбъектыПоБизнесПроцессам",
			Тип("ТаблицаФормы"), ГруппаОбъектыПоЗадаче);
		ОбъектыПоБизнесПроцессам.ПутьКДанным = "ОбъектыПоБизнесПроцессам";
		ОбъектыПоБизнесПроцессам.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ОбъектыПоБизнесПроцессам.Шапка = Ложь;
		ОбъектыПоБизнесПроцессам.ВысотаВСтрокахТаблицы = 5;
		ОбъектыПоБизнесПроцессам.РастягиватьПоВертикали = Ложь;
		ОбъектыПоБизнесПроцессам.РастягиватьПоГоризонтали = Ложь;
		ОбъектыПоБизнесПроцессам.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ОбъектыПоБизнесПроцессам.ТолькоПросмотр = Истина;
		ОбъектыПоБизнесПроцессам.Ширина = 74;
		ОбъектыПоБизнесПроцессам.УстановитьДействие("Выбор",
			"Подключаемый_ВыполнитьПереопределяемуюКоманду");
		ОбъектыПоБизнесПроцессам.УстановитьДействие("ОбработкаЗаписиНового",
			"Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
		ПолеОбъект = Форма.Элементы.Добавить("ОбъектыПоБизнесПроцессамТочкаМаршрута",
			Тип("ПолеФормы"), ОбъектыПоБизнесПроцессам);
		ПолеОбъект.Вид = ВидПоляФормы.ПолеВвода;
		ПолеОбъект.ПутьКДанным = "ОбъектыПоБизнесПроцессам.Объект";
		ПолеОбъект.ТолькоПросмотр = Истина;
		
		ПолучитьСписокОбъектовПоБизнесПроцессу(Форма, Форма.ЗадачаИсполнителя, Форма.ЗадачаИсполнителя_БизнесПроцесс);
		
		// КОМАНДЫ
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПоказатьОбъекты");
		НоваяКомандаФормы.Заголовок = НСтр("ru = 'Показать объекты'");
		НоваяКомандаФормы.Подсказка = НСтр("ru = 'Показать объекты'");
		НоваяКомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка = БиблиотекаКартинок.CRM_СтрелкаВниз;
		НоваяКомандаФормы.Отображение = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_КартаМаршрута");
		НоваяКомандаФормы.Заголовок                 = "Карта маршрута";
		НоваяКомандаФормы.Подсказка                 = "Открыть карту маршрута бизнес-процесса";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеБизнесПроцесса");
		НоваяКомандаФормы.Заголовок                 = "Описание бизнес-процесса";
		НоваяКомандаФормы.Подсказка                 = "Описание бизнес-процесса и задач";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.Задача;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		//НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПеренестиСрок");
		//НоваяКомандаФормы.Заголовок                 = "Отложить следующую задачу на...";
		//НоваяКомандаФормы.Подсказка                 = "Отложить следующую задачу на...";
		//НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		//НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_Просрочено;
		//НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_Перенаправить");
		НоваяКомандаФормы.Заголовок                 = "Перенаправить";
		НоваяКомандаФормы.Подсказка                 = "Перенаправить";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПередатьДокумент;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ОписаниеЗадачи");
		НоваяКомандаФормы.Заголовок                 = "Описание задачи";
		НоваяКомандаФормы.Подсказка                 = "Описание задачи";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_Информация;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПередвинутьЭтап");
		НоваяКомандаФормы.Заголовок                 = "Сменить текущий этап";
		НоваяКомандаФормы.Подсказка                 = "Сменить текущий этап";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ОтветитьНаЭлектронноеПисьмо;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		
		НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ПринятьКИсполнению");
		НоваяКомандаФормы.Заголовок                 = "Принять";
		НоваяКомандаФормы.Подсказка                 = "Принять к исполнению";
		НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_КИсполнению;
		НоваяКомандаФормы.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		
		// ЗАДАЧА ПРИНЯТА К ИСПОЛНЕНИЮ
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПоказатьОбъекты_СтраницаЗадачиПринята",
			Тип("КнопкаФормы"), ГруппаЗаголовокПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПоказатьОбъекты";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		НовыйПунктМеню = Форма.Элементы.Добавить("Кнопка_ПеренаправитьЗадачуБП", Тип("КнопкаФормы"), ГруппаСрокИИсполнитель);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Перенаправить";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		Если ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПринятьКИсполнению_СтраницаЗадачиПринята",
				 Тип("КнопкаФормы"),
				 ГруппаПринятоВыполнитьПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ПринятьКИсполнению";
			НовыйПунктМеню.Заголовок			= НСтр("ru='Принято'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.CRM_КИсполнению;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
		КонецЕсли;
		
		СтруктураВариантовВыполнения = ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_0");
			НоваяКомандаФормы.Заголовок                 = НСтр("ru='Выполнить'");
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			//НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0", Тип("КнопкаФормы"),
				 ГруппаПринятоВыполнитьПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
		КонецЕсли;
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Задача.БизнесПроцесс.Ссылка);
		НаборЭтапов.Прочитать();
		
		// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
		Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута Тогда
			
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_" + ?(НаборЭтапов[1].Используется, "1", "0"));
			НоваяКомандаФормы.Заголовок                 = НСтр("ru='Выполнить'");
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			//НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_0", Тип("КнопкаФормы"),
				 ГруппаПринятоВыполнитьПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_" + ?(НаборЭтапов[1].Используется, "1", "0");
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			НовыйПунктМеню.ТолькоВоВсехДействиях = Ложь;
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
			
		Иначе
			
			Форма.ЗадачаИсполнителя_НесколькоВариантовВыполнения =
				(СтруктураВариантовВыполнения.СписокВариантов.Количество() > 1);
			
			ПодменюАвтоКоманд = Форма.Элементы.Вставить("ПодменюАвтоКоманд", Тип("ГруппаФормы"), ГруппаПринятоВыполнитьПринята);
			ПодменюАвтоКоманд.Вид = ВидГруппыФормы.Подменю;
			ПодменюАвтоКоманд.Заголовок = "   " + СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок + "   ";
			ПодменюАвтоКоманд.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
			ПодменюАвтоКоманд.ЦветРамки = ЦветаСтиля.CRM_ОсновнойГолубой;
			ПодменюАвтоКоманд.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветФонаПоля;
			ПодменюАвтоКоманд.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ВыполнитьЗадачу_" + СокрЛП(Строка(ЭлементСписка.Значение)));
				НоваяКомандаФормы.Заголовок = ЭлементСписка.Представление;
				НоваяКомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
				//НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
				
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_" 
					+ СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), ПодменюАвтоКоманд);
				НовыйПунктМеню.ИмяКоманды = "Команда_ВыполнитьЗадачу_" + СокрЛП(Строка(ЭлементСписка.Значение));
				НовыйПунктМеню.Заголовок = ЭлементСписка.Представление;
				НовыйПунктМеню.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КнопкаПоУмолчанию = ЭлементСписка.Пометка;
				НовыйПунктМеню.КнопкаПоУмолчанию = КнопкаПоУмолчанию;
				НовыйПунктМеню.ТолькоВоВсехДействиях = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиПринята",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		Если ЕстьПравоНаОткатБП
			Или Форма.ЗадачаИсполнителя_БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиПринята",
				 Тип("КнопкаФормы"),
				 ГруппаЗаголовокПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ПередвинутьЭтап";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
		КонецЕсли;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиПринята",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		Если Не ЭтоИнтерес Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиПринята",
				 Тип("КнопкаФормы"),
				 ГруппаЗаголовокПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
		КонецЕсли;
		
		// ЗАДАЧА НЕ ПРИНЯТА К ИСПОЛНЕНИЮ
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПоказатьОбъекты_СтраницаЗадачиНеПринята",
			Тип("КнопкаФормы"), ГруппаЗаголовокНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПоказатьОбъекты";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиНеПринята",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
			
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПринятьКИсполнению_СтраницаЗадачиНеПринята",
			 Тип("КнопкаФормы"),
			 ГруппаПринятоВыполнитьНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ПринятьКИсполнению";
		НовыйПунктМеню.Заголовок			= НСтр("ru='Принять'");
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.CRM_КИсполнению;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
		НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
		НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ВыполнитьЗадачу_ПослеПринятия",
			 Тип("КнопкаФормы"),
			 ГруппаПринятоВыполнитьНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ВыполнитьЗадачу_0";
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 ИЛИ
			(Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = Задача.CRM_ТочкаМаршрута) Тогда
			НовыйПунктМеню.Заголовок			= НСтр("ru='Выполнить'");
			НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		Иначе
			НовыйПунктМеню.Заголовок = "   " + СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок + "   ";
		КонецЕсли;
		НовыйПунктМеню.Доступность			= Ложь;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
		НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
		НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
		
		Если Форма.ЗадачаИсполнителя_БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ПередвинутьЭтап_СтраницаЗадачиНеПринята",
				 Тип("КнопкаФормы"),
				 ГруппаЗаголовокНеПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ПередвинутьЭтап";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
		КонецЕсли;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиНеПринята",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокНеПринята);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		Если Не ЭтоИнтерес Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиНеПринята",
				 Тип("КнопкаФормы"),
				 ГруппаЗаголовокНеПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
		КонецЕсли;
		
		// ЧУЖАЯ ЗАДАЧА
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Показатьобъекты_СтраницаЗадачиЧужая",
			Тип("КнопкаФормы"), ГруппаЗаголовокЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Показатьобъекты";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеЗадачи_СтраницаЗадачиЧужая",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеЗадачи";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_КартаМаршрута_СтраницаЗадачиЧужая",
			 Тип("КнопкаФормы"),
			 ГруппаЗаголовокЧужая);
		НовыйПунктМеню.ИмяКоманды			= "Команда_КартаМаршрута";
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.Ширина = 3;
		НовыйПунктМеню.Высота = 1;
		
		Если Не ЭтоИнтерес Тогда
			НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_ОписаниеБизнесПроцесса_СтраницаЗадачиЧужая",
				 Тип("КнопкаФормы"),
				 ГруппаЗаголовокЧужая);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ОписаниеБизнесПроцесса";
			НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.Ширина = 3;
			НовыйПунктМеню.Высота = 1;
		КонецЕсли;
		
		Если Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ДосрочноеЗавершениеБП");
			
			СостояниеПриЗавершении = Задача.БизнесПроцесс.КартаМаршрута.СостояниеДосрочногоЗавершения;
			Если Не ЗначениеЗаполнено(СостояниеПриЗавершении) Тогда
				СостояниеПриЗавершении = ПолучитьСостояниеОбъектаБППриНеудачномЗавершении(Задача);
			КонецЕсли;
			
			НоваяКомандаФормы.Заголовок = ?(ЗначениеЗаполнено(СостояниеПриЗавершении),
				 Строка(СостояниеПриЗавершении),
				 НСтр("ru='Завершить досрочно'"));
			НоваяКомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Команда_ДосрочноеЗавершениеБППринята",
				 Тип("КнопкаФормы"),
				 ГруппаАвтоКнопокСтраницаЗадачиПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ДосрочноеЗавершениеБП";
			НовыйПунктМеню.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.ЦветТекста			= WebЦвета.Красный;
			НовыйПунктМеню.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			
			НовыйПунктМеню = Форма.Элементы.Вставить("Команда_ДосрочноеЗавершениеБПНеПринята",
				 Тип("КнопкаФормы"),
				 ГруппаАвтоКнопокСтраницаЗадачиНеПринята);
			НовыйПунктМеню.ИмяКоманды			= "Команда_ДосрочноеЗавершениеБП";
			НовыйПунктМеню.ОтображениеФигуры	= ОтображениеФигурыКнопки.Нет;
			НовыйПунктМеню.ЦветТекста			= WebЦвета.Красный;
			НовыйПунктМеню.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		КонецЕсли;
		
		Если Задача.ПринятаКИсполнению И НЕ ЭтоЧужаяЗадача Тогда
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиПринята;
		ИначеЕсли НЕ ЭтоЧужаяЗадача Тогда
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиНеПринята;
		Иначе
			ПанельСтраницАвтоКнопки.ТекущаяСтраница = СтраницаЗадачиЧужая;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоддерживаетПовторныйЗапускБП") Тогда
			НоваяКомандаФормы = Форма.Команды.Добавить("Команда_ЗапуститьПроцессЗаново");
			НоваяКомандаФормы.Заголовок                 = "Запустить бизнес-процесс";
			НоваяКомандаФормы.Подсказка                 = "Запустить бизнес-процесс повторно";
			НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПовторныйЗапускБП";
			НоваяКомандаФормы.Картинка                  = БиблиотекаКартинок.CRM_ПодсистемаБизнесПроцессы_Такси;
			НоваяКомандаФормы.Отображение               = ОтображениеКнопки.Текст;
			
			Если ГруппаРазмещения = Неопределено Тогда
				Для Каждого ЭлементФормы Из Форма.Элементы Цикл
					ПервыйЭлемент = ЭлементФормы;
					Прервать;
				КонецЦикла;
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Команда_ЗапуститьПроцессЗаново",
					 Тип("КнопкаФормы"),
					 ПервыйЭлемент);
			Иначе
				НовыйПунктМеню = Форма.Элементы.Вставить("Кнопка_Команда_ЗапуститьПроцессЗаново",
					 Тип("КнопкаФормы"),
					 ГруппаРазмещения);
			КонецЕсли;
			НовыйПунктМеню.ИмяКоманды			= "Команда_ЗапуститьПроцессЗаново";
			НовыйПунктМеню.ЦветФона				= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветРамки			= ЦветаСтиля.CRM_ОсновнойГолубой;
			НовыйПунктМеню.ЦветТекста			= ЦветаСтиля.ЦветФонаПоля;
			НовыйПунктМеню.Шрифт = Новый Шрифт(, , Истина);
			НовыйПунктМеню.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ГруппаАвтоКнопки <> Неопределено Тогда
		ДекорацияРазделитель = Форма.Элементы.Добавить("Декорация_ЗаверщениеРазделаБП",
			 Тип("ДекорацияФормы"),
			 ГруппаАвтоКнопки);
		ДекорацияРазделитель.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияРазделитель.Высота = 1;
		ДекорацияРазделитель.Шрифт = Новый Шрифт(, 1);
		ДекорацияРазделитель.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
		ДекорацияРазделитель.РастягиватьПоГоризонтали = Истина;
		ДекорацияРазделитель.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияРазделитель.ЦветРамки = Новый Цвет(199, 199, 199);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСписокОбъектовПоБизнесПроцессу(Форма, Задача, БизнесПроцесс)
	
	ОбъектыЗначение = Форма.РеквизитФормыВЗначение("ОбъектыПоБизнесПроцессам");
	
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегНабор.Отбор.Задача.Установить(Задача);
	РегНабор.Прочитать();
	
	ОбъектыЗначение = РегНабор.Выгрузить();
	
	Форма.ЗначениеВРеквизитФормы(ОбъектыЗначение, "ОбъектыПоБизнесПроцессам");
	
	Форма.ТипыОбъектовПоБизнесПроцессам.Очистить();
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(Задача);
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = Форма.ТипыОбъектовПоБизнесПроцессам.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ТипЗначения		= СтрокаТаб.ВидОбъекта.ТипЗначения;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	УдаляемыеЭлементы.Добавить("ГиперссылкаВвести");
	УдаляемыеЭлементы.Добавить("ГиперссылкаВыбрать");
	УдаляемыеЭлементы.Добавить("ГиперссылкаУдалить");
	Для Каждого ИмяЭлемента Из УдаляемыеЭлементы Цикл
		Элемент = Форма.Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Форма.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ТипыОбъектовПоБизнесПроцессамСписок.Очистить();
	
	Если Форма.ТипыОбъектовПоБизнесПроцессам.Количество() > 0 Тогда
		
		ГиперссылкаВвести = Форма.Элементы.Добавить("ГиперссылкаВвести", Тип("ДекорацияФормы"),
			 Форма.Элементы.ГруппаПанельГиперссылок);
		ГиперссылкаВвести.Заголовок = НСтр("ru='Создать документ';en='Create the document'");
		ГиперссылкаВвести.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаВвести.Гиперссылка = Истина;
		ГиперссылкаВвести.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
		ГиперссылкаВыбрать = Форма.Элементы.Добавить("ГиперссылкаВыбрать", Тип("ДекорацияФормы"),
			 Форма.Элементы.ГруппаПанельГиперссылок);
		ГиперссылкаВыбрать.Заголовок = НСтр("ru='Выбрать документ';en='Select the document'");
		ГиперссылкаВыбрать.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаВыбрать.Гиперссылка = Истина;
		ГиперссылкаВыбрать.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
		ГиперссылкаУдалить = Форма.Элементы.Добавить("ГиперссылкаУдалить", Тип("ДекорацияФормы"),
			 Форма.Элементы.ГруппаПанельГиперссылок);
		ГиперссылкаУдалить.Заголовок = НСтр("ru = 'Удалить документ'");
		ГиперссылкаУдалить.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаУдалить.Гиперссылка = Истина;
		ГиперссылкаУдалить.УстановитьДействие("Нажатие", "Подключаемый_ВыполнитьПереопределяемуюКоманду");
		
		Для Каждого СтрокаТаб Из Форма.ТипыОбъектовПоБизнесПроцессам Цикл
			МассивТипов = СтрокаТаб.ВидОбъекта.ТипЗначения.Типы();
			МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
			Форма.ТипыОбъектовПоБизнесПроцессамСписок.Добавить(МетаданныеДок.ПолноеИмя(), МетаданныеДок.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаблокироватьУправляемыйРеквизит(Форма)
	
	Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗадачаИсполнителя_БизнесПроцесс")
		И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс)
		И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.ВидОбъектаСтрокой)
		И ЗначениеЗаполнено(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой) Тогда
		Если СтрНайти(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой, "%Свойство%") Тогда
			
			Если Форма.Элементы.Найти("Свойства_ОписаниеДополнительныхРеквизитов") = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрЗаменить(Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой,
					"%Свойство%", "")));
			
			МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",
				СсылкаНаСвойство));
			
			Если МассивСтрок.Количество() > 0 Тогда
				Элемент = Форма.Элементы.Найти(МассивСтрок[0].ИмяРеквизитаЗначение);
				Если Элемент <> Неопределено 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ТолькоПросмотр") Тогда
					Элемент.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого ЭлементФормы Из Форма.Элементы Цикл
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ПутьКДанным")
					И ЭлементФормы.ПутьКДанным = "Объект." + Форма.ЗадачаИсполнителя_БизнесПроцесс.РеквизитОбъектаСтрокой
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ТолькоПросмотр") Тогда
					ЭлементФормы.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отмечает указанную задачу как принятую к исполнению.
//
Функция ПринятьЗадачуКИсполнениюИзФормыДокумента(Задача, ТекущийПользователь) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗадачаОбъект.ПринятаКИсполнению = Истина;
		ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			ЗадачаОбъект.Исполнитель = ТекущийПользователь;
		КонецЕсли;
		
		ДатаПринятияКИсполнениюСтрокой =
			CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ЗадачаОбъект.ДатаПринятияКИсполнению);
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой + " " 
			+ НСтр("ru='Принята к исполнению -> '") 
			+ Строка(ТекущийПользователь);
		
		Если НЕ ЗадачаОбъект.РезультатВыполнения = "" Тогда
			ЗадачаОбъект.РезультатВыполнения = "
			|" + ДатаПринятияКИсполнениюСтрокой + " " + НСтр("ru='Принята к исполнению -> '") + Строка(ТекущийПользователь) + "
			|
			|" + ЗадачаОбъект.РезультатВыполнения;
		Иначе
			ЗадачаОбъект.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой + " " 
				+ НСтр("ru='Принята к исполнению -> '") 
				+ Строка(ТекущийПользователь);
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Отмечает указанную задачу как не принятую к исполнению.
//
Функция ОтменитьПринятиеЗадачиКИсполнениюИзФормыДокумента(Задача) Экспорт
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗадачаОбъект.ПринятаКИсполнению = Ложь;
		ЗадачаОбъект.ДатаПринятияКИсполнению = Дата(1, 1, 1);
		Если Не ЗадачаОбъект.РольИсполнителя.Пустая() Тогда
			ЗадачаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// 
//
Функция ЗафиксироватьРезультатПеренаправления(Задача, Результат) Экспорт
	
	РезультатПеренаправления = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПричинаПеренаправления = Результат.ПричинаПеренаправления;
		Если НЕ ЗначениеЗаполнено(ПричинаПеренаправления) Тогда
			ПричинаПеренаправления = НСтр("ru='Без указания причины.'");
		КонецЕсли;
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой + " " + НСтр("ru='Перенаправлена -> '") 
			+ Строка(?(Результат.Исполнитель = Неопределено, Результат.Роль, Результат.Исполнитель));
		
		ЗадачаОбъект.РезультатВыполнения = "
		|" + ДатаСтрокой + " " + НСтр("ru='Перенаправлена -> '") 
			+ Строка(?(Результат.Исполнитель = Неопределено, Результат.Роль, Результат.Исполнитель)) + "
		|" + ПричинаПеренаправления + "
		|
		|" + ЗадачаОбъект.РезультатВыполнения;
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатПеренаправления;
	
КонецФункции

Функция ПользовательУчастникРоли(Пользователь, Роль) Экспорт
	
	Набор = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	Набор.Отбор.РольИсполнителя.Установить(Роль);
	Набор.Отбор.Исполнитель.Установить(Пользователь);
	Набор.Прочитать();
	
	Возврат (Набор.Количество() > 0);
	
КонецФункции

Функция ЗафиксироватьРезультатВыполненияЗадачи(Задача, Результат, ПараметрыВыполнения) Экспорт
	
	РезультатВыполнения = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
		Блокировка.Заблокировать();
		
		// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
		// позволить выполнять перенаправление по команде из формы этой задачи.
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗадачаОбъект.CRM_ВариантВыполнения			= ПараметрыВыполнения.ВариантВыполнения;
		ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= ПараметрыВыполнения.ВариантВыполненияСтрокой;
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
		
		ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой + " " + НСтр("ru='Выполнена -> '") 
			+ Строка(ЗадачаОбъект.Исполнитель); 
		
		РезультатНовый = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой + Символы.ПС;
		
		Если Не ПустаяСтрока(ЗадачаОбъект.CRM_ВариантВыполненияСтрокой) Тогда
			РезультатНовый = РезультатНовый
				+ НСтр("ru = 'Выбрано: {'; en = 'Selected: {'")
				+ СтрЗаменить(ЗадачаОбъект.CRM_ВариантВыполненияСтрокой, "/", " ") + "}" + Символы.ПС;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Результат.РезультатВыполнения) Тогда
			РезультатНовый = РезультатНовый +
			"
			|" + НСтр("ru='Результат: ';en='Result:'") + "
			|" + Результат.РезультатВыполнения + "
			|";
		КонецЕсли;
		
		РезультатНовый = РезультатНовый + Символы.ПС;
		
		ЗадачаОбъект.РезультатВыполнения = РезультатНовый + ЗадачаОбъект.РезультатВыполнения;
		ЗадачаОбъект.РезультатВыполнения = СокрП(ЗадачаОбъект.РезультатВыполнения);
		
		ЗадачаОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Получить следующее состояние объекта бизнес процесса после выполнения задачи.
//
// Параметры:
//  ЗадачаИсполнителя  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//  ВариантВыполнения  - Число - вариант выполнения задачи.
//
// Возвращаемое значение:
//   Булево   - Признак возможности перехода в новое состояние.
//
Функция ПолучитьСледующееСостояниеОбъектаБП(ЗадачаИсполнителя, ВариантВыполнения) Экспорт
	
	МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(ЗадачаИсполнителя.БизнесПроцесс,
		 ЗадачаИсполнителя.CRM_ТочкаМаршрута, , , ВариантВыполнения, ,
		 Ложь);
	Если МассивИсходящихТочек.Количество() > 0 Тогда
		Пока МассивИсходящихТочек.Количество() = 1
			 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Цикл
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(ЗадачаИсполнителя.БизнесПроцесс,
				 МассивИсходящихТочек[0].ИсходящаяТочка, , , , ,
				 Ложь);
		КонецЦикла;
		
		МассивТочек = Новый Массив;
		Для каждого ИсходящаяТочка Из МассивИсходящихТочек Цикл
			МассивТочек.Добавить(ИсходящаяТочка.ИсходящаяТочка);
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_НастройкиЭтаповБизнесПроцессов.Состояние КАК Состояние
		                      |ИЗ
		                      |	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		                      |ГДЕ
		                      |	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект
		                      |	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивТочек)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	CRM_НастройкиЭтаповБизнесПроцессов.Порядок УБЫВ");
		Запрос.УстановитьПараметр("Объект", ЗадачаИсполнителя.БизнесПроцесс);
		Запрос.УстановитьПараметр("МассивТочек", МассивТочек);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
				Возврат Выборка.Состояние;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получить состояние объекта бизнес процесса при неудачном завершении.
//
// Параметры:
//  ЗадачаИсполнителя  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//  ВариантВыполнения  - Число - вариант выполнения задачи.
//
// Возвращаемое значение:
//   Булево   - Признак возможности перехода в новое состояние.
//
Функция ПолучитьСостояниеОбъектаБППриНеудачномЗавершении(ЗадачаИсполнителя) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|ГДЕ
	|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект
	|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута.ВариантЗавершения = &ВариантЗавершения");
	Запрос.УстановитьПараметр("Объект", ЗадачаИсполнителя.БизнесПроцесс);
	Запрос.УстановитьПараметр("ВариантЗавершения", Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
			Возврат Выборка.Состояние;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает настройки этапа.
//
// Параметры:
//  Задача_ТочкаМаршрута - Ссылка - Точка маршрута.
//
// Возвращаемое значение:
//   Структура - Настройки этапа.
//
Функция ПолучитьНастройкиЭтапа(Задача_ТочкаМаршрута) Экспорт
	
	Если ТипЗнч(Задача_ТочкаМаршрута) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
		ТочкаМаршрута = Задача_ТочкаМаршрута;
	Иначе
		ТочкаМаршрута = Задача_ТочкаМаршрута.CRM_ТочкаМаршрута;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	*
	                      |ИЗ
	                      |	РегистрСведений.CRM_НастройкиЭтапов КАК CRM_НастройкиЭтапов
	                      |ГДЕ
	                      |	CRM_НастройкиЭтапов.ТочкаМаршрута = &ТочкаМаршрута");

	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	ТЗНастроек = Запрос.Выполнить().Выгрузить();
	СтруктураСтрокой = "";
    НужнаЗапятая = Ложь;
    Для Каждого Колонка Из ТЗНастроек.Колонки Цикл
        Если НужнаЗапятая Тогда
            СтруктураСтрокой = СтруктураСтрокой + ",";
        КонецЕсли;
        СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
        НужнаЗапятая = Истина;
    КонецЦикла;
    Настройки = Новый Структура(СтруктураСтрокой);
	Если ТЗНастроек.Количество() = 0 Тогда
		ТЗНастроекПустая = Новый ТаблицаЗначений;
		Для Каждого Колонка Из ТЗНастроек.Колонки Цикл
			ТЗНастроекПустая.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения, , "Null"));
		КонецЦикла;
		ТЗНастроекПустая.Добавить();
		ЗаполнитьЗначенияСвойств(Настройки, ТЗНастроекПустая[0]);
	Иначе
		ЗаполнитьЗначенияСвойств(Настройки, ТЗНастроек[0]);
	КонецЕсли;
	Возврат Настройки;

КонецФункции

Процедура СкорректироватьРеквизитыБП(ТекущийБП, ИзменяемыеРеквизиты)
	ТекущийБПОбъект = ТекущийБП.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ТекущийБПОбъект, ИзменяемыеРеквизиты);
	ТекущийБПОбъект.Записать();
КонецПроцедуры

Функция ЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита)
	Если СтрНайти(ИмяРеквизита, "%Свойство%") = 1 Тогда
		СсылкаНаСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИмяРеквизита,
			 "%Свойство%",
			 "")));
		СтрДопРеквизит = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СсылкаНаСвойство));
		Если СтрДопРеквизит.Количество() > 0 Тогда
			Возврат СтрДопРеквизит[0].Значение;
		КонецЕсли;
	Иначе
		Возврат Объект[ИмяРеквизита];
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование, сохранение изменений Маршрута и исполнителей бизнес-процесса.

// Функция проверяет варианты выполнения на зацикливание и возвращает
// первый вариант, который приводит к успешному завершению бизнес-процесса.
//
Функция ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(ТочкаМаршрута, НомерВерсииКарты,
	 Знач ВариантВыполнения = 0, ПроверяемВариант,
	 Знач таблицаПройденныхТочек = Неопределено)
	Перем ТекущаяТочка;
	
	ТекущаяТочка = ТочкаМаршрута;
	
	Если таблицаПройденныхТочек = Неопределено Тогда
		таблицаПройденныхТочек = Новый ТаблицаЗначений;
		таблицаПройденныхТочек.Колонки.Добавить("ТочкаМаршрут");
	КонецЕсли;
	
	СидимВЦикле = Истина;
	Пока СидимВЦикле Цикл
		
		СтрокаТаб = таблицаПройденныхТочек.Найти(ТекущаяТочка, "ТочкаМаршрут");
		Если НЕ СтрокаТаб = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НоваяСтрока = таблицаПройденныхТочек.Добавить();
		НоваяСтрока.ТочкаМаршрут = ТекущаяТочка;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсииКарты, 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			Если ПроверяемВариант Тогда
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
					 НомерВерсииКарты,
					 ВариантВыполнения);
				ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
				ПроверяемВариант	= Ложь;
				Продолжить;
			КонецЕсли;
			
			МассивВариантов = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии", НомерВерсииКарты));
			Для Каждого СтрокаВарианта Из МассивВариантов Цикл
				
				СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
					 НомерВерсииКарты,
					 СтрокаВарианта.Индекс);
				
				таблицаПройденныхТочекКопия = таблицаПройденныхТочек.Скопировать();
				Если ПроверитьУсловиеВыборВариантаВернутьВариантВыполнения(СтруктураТочки.ИсходящаяТочка,
					 НомерВерсииКарты, 0, Истина,
					 таблицаПройденныхТочекКопия) Тогда
					ВариантВыполнения = СтрокаВарианта.Индекс;
					Прервать;
				Иначе
					ВариантВыполнения = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Если ВариантВыполнения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка,
				 НомерВерсииКарты,
				 ВариантВыполнения);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			
			МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТекущаяТочка, НомерВерсииКарты);
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(МассивСтруктурТочек[0].ИсходящаяТочка,
				 НомерВерсииКарты,
				 0);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			
			Если ТекущаяТочка.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно
			ИЛИ ТекущаяТочка.ВариантЗавершения <> Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ОбъектБДСуществует(ТестоваяСсылка)

	МД = Метаданные.НайтиПоТипу(ТипЗнч(ТестоваяСсылка));
	ИмяОбъекта = МД.Имя;
	ПолноеИмяОбъекта = МД.ПолноеИмя();

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|   ИСТИНА КАК СсылкаБДСуществует
	|ИЗ
	|   " + ПолноеИмяОбъекта + " КАК " + ИмяОбъекта + "
	|ГДЕ
	|   " + ИмяОбъекта + ".Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ТестоваяСсылка);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за формирование задач и вложенных бизнес-процессов.

Процедура ПолучитьУсловияЭтапаСформироватьОповещения(ЗадачаСсылка, Событие, Взаимодействие = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ЗадачаСсылка.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ЗадачаСсылка.CRM_ТочкаМаршрута);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияЭтапов.Цель КАК Шаблон,
	|	УсловияЭтапов.Исполнителю КАК Исполнителю,
	|	УсловияЭтапов.Ответственному КАК Ответственному,
	|	УсловияЭтапов.Клиенту КАК Клиенту,
	|	УсловияЭтапов.ВыражениеУсловия КАК ВыражениеУсловия,
	|	УсловияЭтапов.ПредставлениеОтбора КАК ПредставлениеОтбора,
	|	УсловияЭтапов.СпособЗаданияУсловия КАК СпособЗаданияУсловия,
	|	УсловияЭтапов.Наименование КАК Наименование,
	|	УсловияЭтапов.НастройкаКомбинацииУсловий КАК НастройкаКомбинацииУсловий,
	|	УсловияЭтапов.НастройкаУсловия КАК НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК УсловияЭтапов
	|ГДЕ
	|	УсловияЭтапов.Объект = &Объект
	|	И УсловияЭтапов.ТочкаМаршрута = &ТочкаМаршрута
	|	И УсловияЭтапов.Событие = &Событие
	|	И УсловияЭтапов.ТипДействия В (ЗНАЧЕНИЕ(Перечисление.bpmТипыДействий.Оповещение), ЗНАЧЕНИЕ(Перечисление.bpmТипыДействий.ОповещениеСМС))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (НЕ Выборка.Исполнителю И НЕ Выборка.Ответственному И НЕ Выборка.Клиенту)
		ИЛИ НЕ ЗначениеЗаполнено(Выборка.Шаблон) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
			
			Результат = ПроверитьУсловиеВРежимеКонструктора(ЗадачаСсылка, Выборка.НастройкаУсловия.Получить());
			
		ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
			
			Настройки = Выборка.НастройкаКомбинацииУсловий.Получить();
			ЗаполнитьКомбинациюПравил(ЗадачаСсылка, Настройки.Отбор.Элементы);
			Результат = ПроверитьУсловиеВРежимеКонструктора(ЗадачаСсылка, Настройки, "Условия");
			
		ИначеЕсли Выборка.СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
			
			Результат = ПроверитьУсловиеНаВстроенномЯзыке(ЗадачаСсылка, Выборка);
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Результат) = Тип("Булево") И Результат Тогда
			CRM_ОповещенияСервер.СформироватьОповещениеПоЗадаче(ЗадачаСсылка, Выборка, Событие, Взаимодействие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает номер итерации для создаваемой задачи.
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Ссылка на бизнес-процесс.
//	ТочкаМаршрута	- СправочникСсылка		- Ссылка на точку маршрута.
//
// Возвращаемое значение:
//	Число	- Номер итерации
//
Функция ПолучитьИтерациюЗадачи(БизнесПроцесс, ТочкаМаршрута)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс",		БизнесПроцесс);
	Запрос.УстановитьПараметр("CRM_ТочкаМаршрута",	ТочкаМаршрута);
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) КАК Ссылка,
	|	ЗадачаИсполнителя.CRM_Итерация КАК Итерация
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута = &CRM_ТочкаМаршрута
	|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачаИсполнителя.CRM_Итерация
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Итерация УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Итерация;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // ПолучитьИтерациюЗадачи()

// Процедура проверяет является ли следующая точка разделением,
// если да, тогда удаляются записи в регистре CRM_РезультатыСлиянияМаршрутов.
//
Процедура ПроверитьНаРазделения(Задача, ТочкаМаршрута)
	
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Задача.CRM_ТочкаМаршрута,
		 Задача.БизнесПроцесс.НомерВерсииКартыМаршрута,
		 Задача.CRM_ВариантВыполнения);
	
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие
	ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
		СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтруктураТочки.ИсходящаяТочка,
			 Задача.БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Задача.CRM_ВариантВыполнения);
	КонецЕсли;
	
	Если СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		
		МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка,
			 Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
		
		Для Каждого РазделениеСтруктураТочки Из МассивСтруктурТочек Цикл
			СтруктураТочкиСлияния = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьТочкуСлияния(РазделениеСтруктураТочки.ИсходящаяТочка,
				 Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Если НЕ СтруктураТочкиСлияния = Неопределено Тогда
				
				Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
				Набор.Отбор.БизнесПроцесс.Установить(Задача.БизнесПроцесс);
				Набор.Отбор.ТочкаСлияния.Установить(СтруктураТочкиСлияния.ТочкаСлияния);
				Набор.Прочитать();
				Если Набор.Количество() > 0 Тогда
					Набор.Очистить();
					Набор.Записать();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет является ли след. точка маршрута слиянием, если да, то:
// 1. делает запись в рег. сведений 
// 2. если все ветки пройдены, то получает след. точку маршрута.
//
// Параметры:
//	Задача					- ЗадачаСсылка	- Ссылка на задачу.
//	МассивИсходящихТочек	- Массив		- Массив структур, содержит точки маршрута.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьНаСлияниеЗаписатьРезультат(Задача, МассивИсходящихТочек)
	Если (МассивИсходящихТочек.Количество() = 1)
		 И (МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние) Тогда
		ЗаписатьРезультатСлиянияМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ТекущаяТочка,
			 МассивИсходящихТочек[0].ИсходящаяТочка);
		Если ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс) Тогда
			// Получим следующую точку и проверим не слияние ли это.
			ТекТочка = МассивИсходящихТочек[0].ИсходящаяТочка;
			Пока Истина Цикл
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
					 ТекТочка);
				Если (МассивИсходящихТочек.Количество() = 1) 
					И (МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние) Тогда
					// Если точка является слиянием, то для нее надо сделать соответствующую запись в регистре сведений результата
					// слияния.
					ЗаписатьРезультатСлиянияМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ТекущаяТочка,
						МассивИсходящихТочек[0].ИсходящаяТочка);
					ТекТочка = МассивИсходящихТочек[0].ИсходящаяТочка;
					// Проверим текущее слияние на возможность продолжения маршрута,
					Если НЕ ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс) Тогда
						Возврат Истина;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьНаСлияниеЗаписатьРезультат()

// Процедура проверяет не является ли след. точка маршрута точкой завершения
// если да, то создавать задачи не надо.
//
// Параметры:
//	Задача					- ЗадачаСсылка	- Ссылка на задачу.
//	МассивИсходящихТочек	- Массив		- Массив структур, содержит точки маршрута.
//
// Возвращаемое значение:
//	Булево	- Результат проверки.
//
Функция ПроверитьНаЗавершение(Задача, МассивИсходящихТочек)
	Если (МассивИсходящихТочек.Количество() = 1)
		 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
		// В таком случае бизнес-процесс завершаем.
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.ВариантЗавершения	= МассивИсходящихТочек[0].ИсходящаяТочка.ВариантЗавершения;
		БизнесПроцессОбъект.ДатаЗавершения		= ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Завершен = Истина;
		БизнесПроцессОбъект.Записать();
		Если ЗначениеЗаполнено(БизнесПроцессОбъект.ВедущаяЗадача) Тогда
			Если Задача.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков
			И ЗначениеЗаполнено(БизнесПроцессОбъект.ВедущаяЗадача.CRM_ПеренестиСрокИсполненияНа) Тогда
				Если НЕ БизнесПроцессОбъект.ВедущаяЗадача.Выполнена Тогда
					НачатьТранзакцию();
					Попытка
						
						ЗадачаОбъект = БизнесПроцессОбъект.ВедущаяЗадача.ПолучитьОбъект();
						ЗадачаОбъект.Заблокировать();
						
						Если БизнесПроцессОбъект.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Успешно Тогда
							ЗадачаОбъект.СрокИсполнения = ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа;
							ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа = Дата("00010101");
							СтрокаРезультата = Символы.ПС + Символы.ПС + Формат(БизнесПроцессОбъект.ДатаЗавершения,
								 "ДЛФ=DT") + НСтр("ru='/ Перенос срока исполнения одобрен / '") + Строка(Задача.Исполнитель) 
								+ Символы.ПС 
								+ Задача.РезультатВыполнения;
						Иначе
							ЗадачаОбъект.CRM_ПеренестиСрокИсполненияНа = Дата("00010101");
							СтрокаРезультата = Символы.ПС + Символы.ПС + Формат(БизнесПроцессОбъект.ДатаЗавершения,
								 "ДЛФ=DT'") + НСтр("ru='/ В переносе срока исполнения отказано / '") + Строка(Задача.Исполнитель) 
								+ Символы.ПС 
								+ Задача.РезультатВыполнения;
						КонецЕсли;
						
						ЗадачаОбъект.РезультатВыполнения = ЗадачаОбъект.РезультатВыполнения + СтрокаРезультата;
						ЗадачаОбъект.Записать();
						ЗадачаОбъект.Разблокировать();
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
					КонецПопытки;
				КонецЕсли;
			Иначе
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(БизнесПроцессОбъект.ВедущаяЗадача.CRM_ТочкаМаршрута,
					 БизнесПроцессОбъект.ВедущаяЗадача.БизнесПроцесс.НомерВерсииКартыМаршрута);
				ЗадачаОбъект = БизнесПроцессОбъект.ВедущаяЗадача.ПолучитьОбъект();
				// Если после точки вложенного БП по карте идет точка условия, то в зависимости от того, как
				// закончился вложенный БП (успешно или неудачно) пропишем вариант выполнения у ведущей задачи
				// для того, чтобы корректно получить следующую точку маршрута.
				Если МассивИсходящихТочек.Количество() = 1
					 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
					ЗадачаОбъект.CRM_ВариантВыполнения = ?(БизнесПроцессОбъект.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
						 0,
						 1);
					ЗадачаОбъект.Записать();
				КонецЕсли;
				ЗадачаОбъект.ВыполнитьЗадачу();
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПроверитьНаЗавершение()

// Процедура создает вложенные бизнес-процессы.
//
//
// Параметры:
//	БизнесПроцесс	- БизнесПроцессСсылка	- Бизнес-процесс ссылка.
//	ВедущаяЗадача	- ЗадачаСсылка			- Ссылка на задачу исполнителя.
//
Процедура СформироватьВложенныйБизнесПроцесс(БизнесПроцесс, ВедущаяЗадача, ТаблицаЭтапов)
	
	СтрокаТаблицыЭтапов = ТаблицаЭтапов.Найти(ВедущаяЗадача.CRM_ТочкаМаршрута, "ТочкаМаршрута");
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.ВедущаяЗадача			= ВедущаяЗадача;
	НовыйБизнесПроцесс.ГлавнаяЗадача			= ВедущаяЗадача;
	НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
	НовыйБизнесПроцесс.Организация				= БизнесПроцесс.Организация;
	НовыйБизнесПроцесс.Подразделение			= БизнесПроцесс.Подразделение;
	НовыйБизнесПроцесс.Важность					= БизнесПроцесс.Важность;
	НовыйБизнесПроцесс.Автор					= ВедущаяЗадача.Исполнитель;
	НовыйБизнесПроцесс.Ответственный			= ВедущаяЗадача.Исполнитель;
	Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		НовыйБизнесПроцесс.Партнер				= БизнесПроцесс.Партнер;
		НовыйБизнесПроцесс.КонтактноеЛицо		= БизнесПроцесс.КонтактноеЛицо;
	Иначе
		НовыйБизнесПроцесс.ПотенциальныйКлиент	= БизнесПроцесс.ПотенциальныйКлиент;
	КонецЕсли;
	Если ЗначениеЗаполнено(БизнесПроцесс.Предмет) Тогда
		НовыйБизнесПроцесс.Предмет = БизнесПроцесс.Предмет;
	Иначе
		НовыйБизнесПроцесс.Предмет = БизнесПроцесс.Ссылка;
	КонецЕсли;
	ЕстьШаблон = ЗначениеЗаполнено(СтрокаТаблицыЭтапов.Шаблон);
	Если ЕстьШаблон Тогда
		Если ТипЗнч(СтрокаТаблицыЭтапов.Шаблон) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Если ЗначениеЗаполнено(БизнесПроцесс.Проект) Тогда
				НовыйБизнесПроцесс.Проект = БизнесПроцесс.Проект;
				CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс, БизнесПроцесс.Проект);
			КонецЕсли;
			НовыйБизнесПроцесс.КартаМаршрута			= СтрокаТаблицыЭтапов.Шаблон;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= СтрокаТаблицыЭтапов.Шаблон.НомерВерсии;
			НовыйБизнесПроцесс.Наименование				= СтрокаТаблицыЭтапов.Шаблон.Наименование;
		Иначе
			НовыйБизнесПроцесс.Проект					= СтрокаТаблицыЭтапов.Шаблон;
			НовыйБизнесПроцесс.Наименование				= СтрокаТаблицыЭтапов.Шаблон.Наименование;
			CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(НовыйБизнесПроцесс, СтрокаТаблицыЭтапов.Шаблон);
			НовыйБизнесПроцесс.КартаМаршрута			= СтрокаТаблицыЭтапов.Шаблон.КартаМаршрута;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= СтрокаТаблицыЭтапов.Шаблон.КартаМаршрута.НомерВерсии;
		КонецЕсли;
		СписокТочекБезИсполнителя = Новый СписокЗначений;
		СписокВариантовСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
		Если СписокВариантовСтарта.Количество() = 1 Тогда
			НовыйБизнесПроцесс.ТочкаСтарта = СписокВариантовСтарта[0].Значение;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(СтрокаТаблицыЭтапов.Шаблон,
				 НовыйБизнесПроцесс.ТочкаСтарта);
			Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
				регИсполнителиТекущейТочки = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				регИсполнителиТекущейТочки.Отбор.Объект.Установить(СтрокаТаблицыЭтапов.Шаблон);
				регИсполнителиТекущейТочки.Отбор.ТочкаМаршрута.Установить(ЗначениеМассива.ИсходящаяТочка);
				регИсполнителиТекущейТочки.Прочитать();
				Для Каждого СтрокаИсполнителя Из регИсполнителиТекущейТочки Цикл
					Если СтрокаИсполнителя.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан Тогда
						СписокТочекБезИсполнителя.Добавить(ЗначениеМассива.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПриСозданииВложенногоБизнесПроцесса(НовыйБизнесПроцесс,
		 ВедущаяЗадача);
	НовыйБизнесПроцесс.Записать();
	
	Если БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|ГДЕ
		|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыполнения УБЫВ";
		Запрос.УстановитьПараметр("Объект", НовыйБизнесПроцесс.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТаблицыЭтапов.ДатаВыполнения = Выборка.ДатаВыполнения;
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(СтрокаТаблицыЭтапов.ТочкаМаршрута,
				 СтрокаТаблицыЭтапов.Объект.НомерВерсииКартыМаршрута,
				 СтрокаТаблицыЭтапов.ВариантВыполнения);
			РассчитатьДатыВыполненияЭтаповПоМаршруту(СтрокаТаблицыЭтапов.Объект.НомерВерсииКартыМаршрута,
				 СтрокаТаблицыЭтапов.Объект.Организация, СтруктураТочки.ИсходящаяТочка, ТаблицаЭтапов,
				 СтрокаТаблицыЭтапов.ДатаВыполнения,
				 СтрокаТаблицыЭтапов.ВариантВыполнения);
		КонецЕсли;
	КонецЕсли;
	
	CRM_БизнесПроцессыПереопределяемый.ОбработчикТочкиВложенныйБизнесПроцессПослеСозданияВложенногоБизнесПроцесса(НовыйБизнесПроцесс,
		 ВедущаяЗадача);
	Если ЕстьШаблон Тогда
		Если (СписокВариантовСтарта.Количество() = 1) И (СписокТочекБезИсполнителя.Количество() = 0) Тогда
			НовыйБизнесПроцесс.Старт();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьВложенныйБизнесПроцесс()

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие получение всех этапов после указанного этапа.

Функция ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии, ТекущийЭтап, МассивТочек,
	 ТаблицаПройденных = Неопределено, ПисатьВМассив = Ложь, ТочкаВхождения,
	 ПроходимРазделение = Ложь)
	
	Если ТаблицаПройденных = Неопределено Тогда
		ТаблицаПройденных = Новый ТаблицаЗначений;
		ТаблицаПройденных.Колонки.Добавить("ТочкаМаршрута");
	КонецЕсли;
	
	ТекущаяТочка = ТекущийЭтап;
	
	Пока ТекущаяТочка.Вид <> Перечисления.CRM_ВидыТочекМаршрута.Завершение Цикл
			
		Результат = ТаблицаПройденных.Найти(ТекущаяТочка, "ТочкаМаршрута");
		Если Результат = Неопределено Тогда
			НоваяСтрока = ТаблицаПройденных.Добавить();
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		ИначеЕсли ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			Возврат ТекущаяТочка;
		Иначе
			Прервать;
		КонецЕсли;
		
		Если ТекущаяТочка = ТочкаВхождения Тогда
			ПисатьВМассив = Истина;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			
			Если ПисатьВМассив Тогда
				МассивТочек.Добавить(ТекущаяТочка);
			КонецЕсли;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			
			СтруктураТочки		= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТекущаяТочка, НомерВерсии);
			ТекущаяТочка		= СтруктураТочки.ИсходящаяТочка;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
		ИЛИ ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			
			МассивИсходящихТочек = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии", НомерВерсии));
			
			ТекущееСостояние = ПисатьВМассив;
			
			Слияние = Неопределено;
			
			Для Каждого СтрокаИсходящейТочки Из МассивИсходящихТочек Цикл
				
				РезультатПрохождения = ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии,
					 СтрокаИсходящейТочки.ТочкаМаршрута, МассивТочек, ТаблицаПройденных, ПисатьВМассив, ТочкаВхождения,
					 ПроходимРазделение);
				
				Если НЕ РезультатПрохождения = Неопределено Тогда
					Слияние = РезультатПрохождения;
				КонецЕсли;
				
				Если НЕ ТекущееСостояние И ПисатьВМассив Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПроходимРазделение Тогда
				Возврат Слияние;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			
			МассивИсходящихТочек = ТекущаяТочка.ИсходящиеТочки.НайтиСтроки(Новый Структура("НомерВерсии", НомерВерсии));
			
			ТекущееСостояние = ПисатьВМассив;
			Слияние = Неопределено;
			
			МассивТочекРазделения = Новый Массив;
			
			Для Каждого СтрокаИсходящейТочки Из МассивИсходящихТочек Цикл
				
				Слияние = ПолучитьСледующиеТочкиДобавитьВМассив(НомерВерсии, СтрокаИсходящейТочки.ТочкаМаршрута,
					 МассивТочекРазделения, ТаблицаПройденных, ПисатьВМассив, ТочкаВхождения,
					 Истина);
				
				Если НЕ ТекущееСостояние И ПисатьВМассив Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТочкаИзРазделения Из МассивТочекРазделения Цикл
				МассивТочек.Добавить(ТочкаИзРазделения);
			КонецЦикла;
			
			СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(Слияние, НомерВерсии);
			ТекущаяТочка	= СтруктураТочки.ИсходящаяТочка;
		КонецЕсли;
		
		Если ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			Возврат ТекущаяТочка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроходимРазделение И ТекущаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
		Возврат Слияние;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за создание и старт процессных бизнес-процессов.

Функция ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс, ТочкаМаршрута,
	 МассивИсключаемыхТочек = Неопределено)
	
	Если МассивИсключаемыхТочек = Неопределено Тогда
		МассивИсключаемыхТочек = Новый Массив;
	КонецЕсли;
	
	// Если точка маршрута является разделением, то получим связанную с ней точку слияния и
	// проверим, не принадлежит ли она другому разделению.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	// Если нашли, значит точка находится в одной из веток разделения.
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		Ветка			= МассивСтрок[0].НомерВетки;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец"	 , БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаСлияния);
		Запрос.УстановитьПараметр("Вид"			 , ТочкаСлияния.Вид);
		Запрос.УстановитьПараметр("НомерВерсии"	 , БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("НомерВетки"	 , Ветка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ТочкиРазделенияСлияния КАК CRM_ТочкиМаршрутовТочкиРазделенияСлияния
		|ГДЕ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Вид = &Вид
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВерсии = &НомерВерсии
		|	И НЕ CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВетки = &НомерВетки
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.ТочкаМаршрута = &ТочкаМаршрута";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
			ИЛИ Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				МассивИсключаемыхТочек.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не ходит ли точка слияния в ветку другого разделения.
		МассивСтрок			= ТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,
			| Вид", БизнесПроцесс.НомерВерсииКартыМаршрута,
			 Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		// Если нашли, значит точка находится в одной из веток разделения.
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс, ТочкаСлияния, МассивИсключаемыхТочек);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивИсключаемыхТочек;
	
КонецФункции

Процедура ЗавершитьВсеЗадачиБизнесПроцесса(БизнесПроцесс, МассивИсключаемыхТочек,
	 ТочкаМаршрута = Неопределено,
	 РезультатЗавершения = "")
	
	// 1. Завершим все задачи и вложенные бизнес-процессы.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И НЕ ЗадачаИсполнителя.Выполнена
	               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	               |	И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&МассивИсключаемыхТочек)";
	Запрос.УстановитьПараметр("БизнесПроцесс"		  , БизнесПроцесс);
	Запрос.УстановитьПараметр("МассивИсключаемыхТочек", МассивИсключаемыхТочек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Завершаем вложенный бизнес-процесс.
		Если Выборка.Ссылка.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			ВложенныйБП = ПолучитьПодчиненныйБизнесПроцесс(Выборка.Ссылка);
			Если ВложенныйБП <> Неопределено Тогда
				ПараметрыДосрочногоЗавершения = Новый Структура();
				ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				, Истина);
				ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"				,
					 Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,
					 Справочники.CRM_ПричиныОтказов.ОткатБизнесПроцесса);
				ПараметрыДосрочногоЗавершения.Вставить("Задача"							, Новый Структура("БизнесПроцесс", ВложенныйБП));
				ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"		, Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка());
				
				ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
			КонецЕсли;
		КонецЕсли;
		
		// Завершаем задачу
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДатаИсполнения					= ТекущаяДатаСеанса();
			ЗадачаОбъект.Выполнена						= Истина;
			
			ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ТекущаяДатаСеанса());
			ПоследнееДействиеСтрокой = ДатаСтрокой + " " + ?(ЗначениеЗаполнено(РезультатЗавершения),
				 РезультатЗавершения, НСтр("ru=' -> Завершена автоматически'"));
			
			ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой	= ПоследнееДействиеСтрокой;
			ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= "Завершена автоматически";
			ЗадачаОбъект.РезультатВыполнения			= ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),
				 ПоследнееДействиеСтрокой, ПоследнееДействиеСтрокой + Символы.ПС 
				+ ЗадачаОбъект.РезультатВыполнения);
			ЗадачаОбъект.ОбменДанными.Загрузка			= Истина;
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуЗагрузки", Истина);
			ЗадачаОбъект.Записать();
			ЗавершитьЗадачуВАРМ(Выборка.Ссылка);
			ПриВыполненииЗадачиИсполнителя(ЗадачаОбъект, Ложь, ТочкаМаршрута, Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьЗадачуВАРМ(Источник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыАРМ.Объект КАК Объект,
	|	CRM_ОбъектыАРМ.НаименованиеАРМ КАК НаименованиеАРМ,
	|	CRM_ОбъектыАРМ.ИзмерениеАРМ КАК ИзмерениеАРМ,
	|	CRM_ОбъектыАРМ.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	|ГДЕ
	|	CRM_ОбъектыАРМ.Объект = &Объект
	|	И CRM_ОбъектыАРМ.НаименованиеАРМ = &НаименованиеАРМ
	|	И CRM_ОбъектыАРМ.ИзмерениеАРМ = &ИзмерениеАРМ
	|";
	Запрос.УстановитьПараметр("НаименованиеАРМ", "МоиДела");
	Запрос.УстановитьПараметр("Объект", Источник);
	Запрос.УстановитьПараметр("ИзмерениеАРМ", "Текущие");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Запись = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
		Запись.Объект = Выборка.Объект;
		Запись.НаименованиеАРМ = "МоиДела";
		Запись.ИзмерениеАРМ = Выборка.ИзмерениеАРМ;
		Запись.Пользователь = Выборка.Пользователь;
		Запись.Прочитать();
		Запись.ИзмерениеАРМ = "Завершенные";
		Запись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗадачуВТочкеОтката(БизнесПроцесс, ТочкаМаршрута)
	
	МассивЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	// |ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.Дата КАК Дата,
	|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &ТочкаМаршрута
	|	И ЗадачаИсполнителя.Выполнена
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Итерация УБЫВ,
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
							
			// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
			// позволить выполнять перенаправление по команде из формы этой задачи.
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Заполнить(ЗадачаОбъект);
			
			МассивЗадач.Добавить(НоваяЗадача);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект КАК Объект,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения КАК ВариантВыполнения,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой КАК ВариантВыполненияСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней КАК ДлительностьДней,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов КАК ДлительностьЧасов,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут КАК ДлительностьМинут,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Используется КАК Используется,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Задание КАК Задание,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок КАК Порядок,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон КАК Шаблон,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой КАК ИсполнительСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала КАК ДатаНачала,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения КАК ДатаВыполнения
			|ИЗ
			|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
			|ГДЕ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект", БизнесПроцесс);
			ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
				
			ЗаписатьЗадачи(МассивЗадач, ТаблицаЭтапов);
			
			СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		
		Отказ = Ложь;
		МассивИсходящихТочек = Новый Массив;
		МассивИсходящихТочек.Добавить(Новый Структура("ИсходящаяТочка", ТочкаМаршрута));
		
		ТаблицаЭтапов = Неопределено;
		СформироватьМассивЗадач(БизнесПроцесс,
			 БизнесПроцессы.CRM_БизнесПроцесс.ТочкиМаршрута.ЗадачаБизнесПроцесса, МассивИсходящихТочек,
			 МассивЗадач, , ТаблицаЭтапов,
			 Отказ);
		Если НЕ Отказ Тогда
			НачатьТранзакцию();
			Попытка
				ЗаписатьЗадачи(МассивЗадач, ТаблицаЭтапов);
				
				СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru='Бизнес-процессы и задачи'"), 
					УровеньЖурналаРегистрации.Ошибка, , , 
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьУсловияПроцессаСтартовать(Источник, КартаМаршрута)
	
	СхемаКомпоновкиДанных		= КартаМаршрута.ХранилищеСхемыКомпоновкиДанных.Получить();
	НастройкиКомпоновкиДанных	= КартаМаршрута.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	РезультатПроверки = Истина;
	Попытка
		РезультатПроверки = ПроверитьУсловия(Источник.Ссылка, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	Исключение
		Если КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			СхемаКомпоновкиДанных =
				CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(КартаМаршрута.ВидОбъектаСтрокой);
		ИначеЕсли КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			СхемаКомпоновкиДанных = CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
		КонецЕсли;
		РезультатПроверки = ПроверитьУсловия(Источник.Ссылка, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	КонецПопытки;
	
	Если РезультатПроверки Тогда
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
			Если Источник.СостояниеИнтереса.Родитель <> КартаМаршрута.СценарийИнтереса Тогда
				Возврат Ложь;
			КонецЕсли;
				
			НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			НовыйБизнесПроцесс.Дата						= Источник.Дата;
			НовыйБизнесПроцесс.ДатаСтарта				= Источник.Дата;
			НовыйБизнесПроцесс.Организация				= Источник.Организация;
			НовыйБизнесПроцесс.Подразделение			= Источник.Подразделение;
			НовыйБизнесПроцесс.Партнер					= Источник.Партнер;
			НовыйБизнесПроцесс.КонтактноеЛицо			= Источник.КонтактноеЛицо;
			НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			НовыйБизнесПроцесс.Автор					= ПользователиКлиентСервер.ТекущийПользователь();
			НовыйБизнесПроцесс.Ответственный			= Источник.Ответственный;
			НовыйБизнесПроцесс.Предмет					= Источник.Ссылка;
			НовыйБизнесПроцесс.Проект                   = Источник.Проект;
			
			НовыйБизнесПроцесс.Наименование	= ?(ЗначениеЗаполнено(Источник.Тема), Источник.Тема, "#" + Источник.Номер);
			НовыйБизнесПроцесс.Сумма					= Источник.ОжидаемаяВыручка;
			НовыйБизнесПроцесс.Описание					= Источник.Описание;
			НовыйБизнесПроцесс.КартаМаршрута			= КартаМаршрута;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
			НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
			
			НовыйБизнесПроцесс.Интерес					= Источник.Ссылка;
			НовыйБизнесПроцесс.ВидОбъектаСтрокой		= КартаМаршрута.ВидОбъектаСтрокой;
			НовыйБизнесПроцесс.РеквизитОбъектаСтрокой	= КартаМаршрута.РеквизитОбъектаСтрокой;
			
		Иначе
			НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			Если Метаданные.Документы.Содержит(Источник.Метаданные()) Тогда
				НовыйБизнесПроцесс.Дата						= Источник.Дата;
				НовыйБизнесПроцесс.ДатаСтарта				= Источник.Дата;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Организация") Тогда
					НовыйБизнесПроцесс.Организация				= Источник.Организация;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Партнер") Тогда
					НовыйБизнесПроцесс.Партнер					= Источник.Партнер;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Клиент") Тогда
					НовыйБизнесПроцесс.Партнер					= Источник.Клиент;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "КонтактноеЛицо") Тогда
					НовыйБизнесПроцесс.КонтактноеЛицо			= Источник.КонтактноеЛицо;
				КонецЕсли;
			Иначе
				НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
				НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
			КонецЕсли;
			НовыйБизнесПроцесс.Автор					= ПользователиКлиентСервер.ТекущийПользователь();
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.CRM_ЖурналыВстреч") Тогда
				НовыйБизнесПроцесс.Ответственный			= Источник.Ответственный;
			Иначе	
				НовыйБизнесПроцесс.Ответственный			= ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;
			НовыйБизнесПроцесс.Предмет					= Источник.Ссылка;
			
			НовыйБизнесПроцесс.КартаМаршрута			= КартаМаршрута;
			НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			НовыйБизнесПроцесс.ВидОбъектаСтрокой		= КартаМаршрута.ВидОбъектаСтрокой;
			НовыйБизнесПроцесс.РеквизитОбъектаСтрокой	= КартаМаршрута.РеквизитОбъектаСтрокой;
			
			НовыйБизнесПроцесс.Наименование				= НовыйБизнесПроцесс.КартаМаршрута.Наименование;

			СписокТочекСтарта							=
				CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
			НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
			
			НовыйБизнесПроцесс.Интерес					= Источник.Ссылка;
		КонецЕсли;
		
		Попытка
			НовыйБизнесПроцесс.ДополнительныеСвойства.Вставить("ОбъектПроцесса", Источник);
			НовыйБизнесПроцесс.Записать();
			НовыйБизнесПроцесс.Старт();
			
			Источник.ДополнительныеСвойства.Вставить("СтартованБизнесПроцессОбъекта", НовыйБизнесПроцесс.Ссылка);
			
			Возврат Истина;
		Исключение
			Инфо = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Старт процесса по объекту'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При попытке старта процесса ""%1"" возникла ошибка:"
"%2"
"Обратитесь к администратору.'"),
				КартаМаршрута.Наименование, 
				Инфо.Описание);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьУсловия(Источник, СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	Параметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Ссылка");
	Параметр.Значение = Источник;
	Параметр.Использование = Истина;
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаписьСуществующегоУсловияПоНаименованию(Объект, НаименованиеУсловия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект КАК Объект,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута КАК ТочкаМаршрута,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Идентификатор КАК Идентификатор,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Событие КАК Событие,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ТипДействия КАК ТипДействия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Проверка КАК Проверка,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Исполнителю КАК Исполнителю,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Ответственному КАК Ответственному,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Клиенту КАК Клиенту,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ВыражениеУсловия КАК ВыражениеУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.ПредставлениеОтбора КАК ПредставлениеОтбора,
	|	bpmУсловияЭтаповПоБизнесПроцессам.СпособЗаданияУсловия КАК СпособЗаданияУсловия,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Наименование КАК Наименование,
	|	bpmУсловияЭтаповПоБизнесПроцессам.Цель КАК Цель,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаКомбинацииУсловий КАК НастройкаКомбинацииУсловий,
	|	bpmУсловияЭтаповПоБизнесПроцессам.НастройкаУсловия КАК НастройкаУсловия
	|ИЗ
	|	РегистрСведений.bpmУсловияЭтаповПоБизнесПроцессам КАК bpmУсловияЭтаповПоБизнесПроцессам
	|ГДЕ
	|	bpmУсловияЭтаповПоБизнесПроцессам.Объект = &Объект
	|	И bpmУсловияЭтаповПоБизнесПроцессам.Наименование = &Наименование
	|	И bpmУсловияЭтаповПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеУсловия);
	Запрос.УстановитьПараметр("Объект", Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.CRM_ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	   Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьКомбинациюПравил(Предмет, ЭлементыКомбинации, ТипМакета = "ШаблонСхемы")
	
	Для Каждого ЭлементОтбора Из ЭлементыКомбинации Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьКомбинациюПравил(Предмет, ЭлементОтбора.Элементы);
		Иначе
			
			ПравоеЗначение = ПолучитьЗаписьСуществующегоУсловияПоНаименованию(Предмет, ЭлементОтбора.ПравоеЗначение);
			
			Если ПравоеЗначение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СпособЗаданияУсловия = ПравоеЗначение.СпособЗаданияУсловия;
			Если СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
				
				Результат = ПроверитьУсловиеНаВстроенномЯзыке(Предмет, ПравоеЗначение);
				
			ИначеЕсли СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				
				Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, ПравоеЗначение.НастройкаУсловия.Получить(), ТипМакета);
					
			ИначеЕсли СпособЗаданияУсловия = Перечисления.bpmСпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				
				НастройкиВложенногоПравила = ПравоеЗначение.НастройкаКомбинацииУсловий.Получить();
				ЗаполнитьКомбинациюПравил(Предмет, НастройкиВложенногоПравила.Отбор.Элементы);
				
				Результат = ПроверитьУсловиеВРежимеКонструктора(Предмет, НастройкиВложенногоПравила, "Условия");
					
			КонецЕсли;
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ПолеДляПроверки");
    		ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
    		ЭлементОтбора.Использование = Истина;
    		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьУсловиеВРежимеКонструктора(Предмет, Настройки, ТипМакета = "ШаблонСхемы")
	
	Если ТипМакета = "ШаблонСхемы" Тогда
	
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.ВерсияДанных КАК ВерсияДанных,
		|	ЗадачаИсполнителя.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗадачаИсполнителя.Номер КАК Номер,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.Наименование КАК Наименование,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.CRM_ВариантВыполнения КАК CRM_ВариантВыполнения,
		|	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой КАК CRM_ВариантВыполненияСтрокой,
		|	ЗадачаИсполнителя.CRM_ЗавершенДосрочно КАК CRM_ЗавершенДосрочно,
		|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
		|	ЗадачаИсполнителя.CRM_КонтактноеЛицо КАК CRM_КонтактноеЛицо,
		|	ЗадачаИсполнителя.CRM_Личная КАК CRM_Личная,
		|	ЗадачаИсполнителя.CRM_НачалоПереадресации КАК CRM_НачалоПереадресации,
		|	ЗадачаИсполнителя.CRM_Неудача КАК CRM_Неудача,
		|	ЗадачаИсполнителя.CRM_ОсновнаяКатегория КАК CRM_ОсновнаяКатегория,
		|	ЗадачаИсполнителя.CRM_Партнер КАК CRM_Партнер,
		|	ЗадачаИсполнителя.CRM_Переадресована КАК CRM_Переадресована,
		|	ЗадачаИсполнителя.CRM_Проект КАК CRM_Проект,
		|	ЗадачаИсполнителя.CRM_ПроцентВыполненияЗадачи КАК CRM_ПроцентВыполненияЗадачи,
		|	ЗадачаИсполнителя.CRM_Родитель КАК CRM_Родитель,
		|	ЗадачаИсполнителя.CRM_СостояниеСтрокой КАК CRM_СостояниеСтрокой,
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
		|	ЗадачаИсполнителя.CRM_Этап КАК CRM_Этап,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Важность КАК Важность,
		|	ЗадачаИсполнителя.ГруппаИсполнителейЗадач КАК ГруппаИсполнителейЗадач,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	ЗадачаИсполнителя.ДатаНачала КАК ДатаНачала,
		|	ЗадачаИсполнителя.ДатаПринятияКИсполнению КАК ДатаПринятияКИсполнению,
		|	ЗадачаИсполнителя.Описание КАК Описание,
		|	ЗадачаИсполнителя.Предмет КАК Предмет,
		|	ЗадачаИсполнителя.ПредметСтрокой КАК ПредметСтрокой,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.АвторСтрокой КАК АвторСтрокой,
		|	ЗадачаИсполнителя.CRM_ПеренестиСрокИсполненияНа КАК CRM_ПеренестиСрокИсполненияНа,
		|	ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой КАК CRM_ПоследнееДействиеСтрокой,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Предмет";
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияМаршрутизации.ПолучитьМакет(ТипМакета);
		
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
		
		НаборДанных.Запрос = ТекстЗапроса;
		
		Если Настройки = Неопределено Тогда
			Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Предмет");
		Параметр.Значение = Предмет;
		Параметр.Использование = Истина;
		
	ИначеЕсли ТипМакета = "Интерес" Тогда
		
		МетаОбъект = Предмет.Метаданные();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|%Поля%
		|ИЗ
		|	%Источник%
		|ГДЕ
		|	%Условие%
		|";
		
		ТекстИсточника = МетаОбъект.ПолноеИмя() + " КАК " + МетаОбъект.Имя;
		
		ТекстПолей		= МетаОбъект.Имя + ".Ссылка";
		ТекстУсловия	= МетаОбъект.Имя + ".Ссылка = &Предмет";
		Для Каждого Реквизит Из МетаОбъект.Реквизиты Цикл
			ТекстПолей = ТекстПолей + ",
			|" + МетаОбъект.Имя + "." + Реквизит.Имя;
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Поля%", ТекстПолей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Источник%", ТекстИсточника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", ТекстУсловия);
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияМаршрутизации.ПолучитьМакет("ШаблонСхемы");
		
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
		
		НаборДанных.Запрос = ТекстЗапроса;
		
		Если Настройки = Неопределено Тогда
			Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Предмет");
		Параметр.Значение = Предмет;
		Параметр.Использование = Истина;
		
	Иначе
		
		СхемаКомпоновкиДанных = РегистрыСведений.bpmУсловияЭтаповПоБизнесПроцессам.ПолучитьМакет(ТипМакета);
		
	КонецЕсли;
		
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
		
КонецФункции

Функция ПроверитьУсловиеНаВстроенномЯзыке(Предмет, СсылкаНаУсловие)
	
	Результат = Истина;
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(СсылкаНаУсловие.ВыражениеУсловия);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Проверка условия этапа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Предмет.Метаданные(),
			Предмет,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При проверке условия этапа ""%1"" возникла ошибка:"
"%2"
"Обратитесь к администратору.'"),
			СсылкаНаУсловие.Наименование, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
