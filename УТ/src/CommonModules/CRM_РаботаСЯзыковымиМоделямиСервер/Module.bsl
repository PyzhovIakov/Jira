////////////////////////////////////////////////////////////////////////////////
// Работа с большими языковыми моделями
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает список поддерживаемых сервисов больших языковых моделей
// 
// Возвращаемое значение:
//   - СписокЗначений
//
Функция СписокПоддерживаемыхСервисов() Экспорт
	
	СписокСервисов = Новый СписокЗначений;
	СписокСервисов.Добавить("OpenAi", "ChatGPT",, БиблиотекаКартинок.CRM_ЯМ_ChatGPT);
	СписокСервисов.Добавить("Claude", "Claude",, БиблиотекаКартинок.CRM_ЯМ_Claude);
	СписокСервисов.Добавить("GigaChat", "GigaChat",, БиблиотекаКартинок.CRM_ЯМ_GigaChat);
	СписокСервисов.Добавить("OpenRouter", "OpenRouter",, БиблиотекаКартинок.CRM_ЯМ_OpenRouter);
	СписокСервисов.Добавить("YandexGPT", "YandexGPT",, БиблиотекаКартинок.CRM_ЯМ_YandexGPT);
	
	Возврат СписокСервисов;
	
КонецФункции

// Функция возвращает структуру настроек для сервиса
//
// Параметры:
//  ИмяСервиса	 - Строка	 - Имя сервиса
// 
// Возвращаемое значение:
//   - Структура
//
Функция СтруктураНастроекСервиса(ИмяСервиса, Настройки, Прокси) Экспорт
	
	СтруктураНастройки = Новый Структура;
	Если ИмяСервиса = "GigaChat" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина));
		СписокВерсий = Новый СписокЗначений;
		СписокВерсий.Добавить("GIGACHAT_API_PERS");
		СписокВерсий.Добавить("GIGACHAT_API_B2B");
		СписокВерсий.Добавить("GIGACHAT_API_CORP");
		СтруктураНастройки.Вставить("Версия", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Версия", Истина, СписокВерсий));
		СписокМоделей = Новый СписокЗначений;
		СписокМоделей.Добавить("GigaChat");
		СписокМоделей.Добавить("GigaChat-Pro");
		СписокМоделей.Добавить("GigaChat-Max");
		СтруктураНастройки.Вставить("Модель", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Модель", Истина, СписокМоделей));
	ИначеЕсли ИмяСервиса = "YandexGPT" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина)); 
		СтруктураНастройки.Вставить("Каталог", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Каталог", Истина)); 
		СписокМоделей = Новый СписокЗначений;
		СписокМоделей.Добавить("yandexgpt-lite");
		СписокМоделей.Добавить("yandexgpt");
		СписокМоделей.Добавить("yandexgpt-32k");
		СтруктураНастройки.Вставить("Модель", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Модель", Истина, СписокМоделей));
	ИначеЕсли ИмяСервиса = "OpenRouter" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина)); 
		СписокМоделей = СписокМоделейСервиса("OpenRouter", Настройки, Прокси);
		СтруктураНастройки.Вставить("Модель", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Модель", Истина, СписокМоделей));
	ИначеЕсли ИмяСервиса = "DeepSeek" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина)); 
	ИначеЕсли ИмяСервиса = "OpenAi" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина)); 
		Если Настройки.Свойство("Ключ") Тогда
			СписокМоделей = СписокМоделейСервиса("OpenAi", Настройки, Прокси);
		Иначе
			СписокМоделей = Новый СписокЗначений;
		КонецЕсли;
		СтруктураНастройки.Вставить("Модель", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Модель", Истина, СписокМоделей));
	ИначеЕсли ИмяСервиса = "Claude" Тогда
		СтруктураНастройки.Вставить("Ключ", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения",
			"", "Ключ", Истина)); 
		Если Настройки.Свойство("Ключ") Тогда
			СписокМоделей = СписокМоделейСервиса("Claude", Настройки, Прокси);
		Иначе
			СписокМоделей = Новый СписокЗначений;
		КонецЕсли;
		СтруктураНастройки.Вставить("Модель", Новый Структура("Значение, Заголовок, ПроверкаЗаполнения, СписокВыбора",
			"", "Модель", Истина, СписокМоделей));
	КонецЕсли;
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Функция выполняет проверку подключения к сервису.
//
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
//  НастройкиПодключения - Структура	 - Настройки подключения.
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверитьПодключение(ИмяСервиса, НастройкиПодключения, НастройкиПрокси) Экспорт
	Сервис = Новый Структура();
	Сервис.Вставить("ИмяСервиса", ИмяСервиса);
	Сервис.Вставить("ХранилищеНастроек", Новый ХранилищеЗначения(НастройкиПодключения));
	
	Если НастройкиПрокси <> Неопределено Тогда
		Сервис.Вставить("ПроксиСервер", НастройкиПрокси.ПроксиСервер);
		Сервис.Вставить("ПроксиПорт", НастройкиПрокси.ПроксиПорт);
		Сервис.Вставить("ПроксиПользователь", НастройкиПрокси.ПроксиПользователь);
		Сервис.Вставить("ПроксиПароль", НастройкиПрокси.ПроксиПароль);
	Иначе
		Сервис.Вставить("ПроксиСервер", "");
	КонецЕсли;
	
	Ответ = ВыполнитьЗапросКЯзыковойМодели(Сервис, "", "Привет.");
	Возврат Ответ.Сообщение;
КонецФункции

// Функция выполняет запрос к языковой модели.
//
// Параметры:
//  Сервис			 - СправочникСсылка.CRM_СервисыЯзыковыхМоделей	 - Сервис.
//  СистемныйПромт	 - Строка	 - Системный промт.
//  Сообщение		 - Строка	 - Сообщение.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВыполнитьЗапросКЯзыковойМодели(Сервис, СистемныйПромт, Сообщение) Экспорт
	
	НастройкиДоступа = Сервис.ХранилищеНастроек.Получить();
	
	Если Сервис.ИмяСервиса = "GigaChat" Тогда
		ОбновитьТокенДоступаGigaChat(Сервис, НастройкиДоступа);
	КонецЕсли;
	
	ПараметрыHTTP = ПараметрыСоединения(Сервис.ИмяСервиса);
	
	Если Не ЗначениеЗаполнено(Сервис.ПроксиСервер) Тогда
		HTTPПрокси = Неопределено;
	Иначе
		HTTPПрокси = Новый ИнтернетПрокси;
		HTTPПрокси.Установить("https", Сервис.ПроксиСервер, Сервис.ПроксиПорт,
			Сервис.ПроксиПользователь, Сервис.ПроксиПароль, Ложь); 
	КонецЕсли;
	
	HTTP = Новый HTTPСоединение(ПараметрыHTTP.Сервер, ПараметрыHTTP.Порт, , ,
		HTTPПрокси, 60, Новый ЗащищенноеСоединениеOpenSSL);
		
	ЗаголовкиHTTP = ЗаголовкиЗапроса(Сервис.ИмяСервиса, НастройкиДоступа);
	
	СтруктураСообщения = СтруктураСообщения(Сервис.ИмяСервиса, НастройкиДоступа, СистемныйПромт, Сообщение);
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыHTTP.Ресурс, ЗаголовкиHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(СтруктураСообщения));
	Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ТекстОтвета);
	
	Результат = ПолучитьРезультатИзОтвета(Сервис.ИмяСервиса, СтруктураОтвета);
	
	Возврат Результат;
	
КонецФункции

// Процедура выплняет необходимые действия при создании формы.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма.
//  ИмяЭлементаРодителя	 - Строка	 - Имя элемента родителя.
//
Процедура ПриСозданииНаСервере(Форма, ИмяЭлементаРодителя = "", ИзменятьИсходныйТекст = Истина) Экспорт

	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСервисыЯзыковыхМоделей") Тогда
		ЗащищенныйОбъект = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку();
		ЗащищенныйОбъект.СервисыЯзыковыхМоделей_ПриСозданииНаСервере(Форма, ИмяЭлементаРодителя, ИзменятьИсходныйТекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеМетоды

// Функция формирует параметры соединения.
//
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
// 
// Возвращаемое значение:
//  ПараметрыСоединения - Структура
//
Функция ПараметрыСоединения(ИмяСервиса)
    
    Параметры = Новый Структура();
    
    Если ИмяСервиса = "GigaChat" Тогда   
                
        Параметры.Вставить("Сервер", "gigachat.devices.sberbank.ru"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "api/v1/chat/completions");      
        
    ИначеЕсли ИмяСервиса = "YandexGPT" Тогда
        
        Параметры.Вставить("Сервер", "llm.api.cloud.yandex.net"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "foundationModels/v1/completion");      
        
    ИначеЕсли ИмяСервиса = "OpenRouter" Тогда
        
        Параметры.Вставить("Сервер", "openrouter.ai"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "/api/v1/chat/completions");      
        
    ИначеЕсли ИмяСервиса = "DeepSeek" Тогда
        
        Параметры.Вставить("Сервер", "api.deepseek.com"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "/chat/completions");      
        
    ИначеЕсли ИмяСервиса = "OpenAi" Тогда
        
        Параметры.Вставить("Сервер", "api.openai.com"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "/v1/chat/completions");      
        
    ИначеЕсли ИмяСервиса = "Claude" Тогда
        
        Параметры.Вставить("Сервер", "api.anthropic.com"); 
        Параметры.Вставить("Порт", Неопределено);
        Параметры.Вставить("Ресурс", "/v1/messages");      
        
    КонецЕсли;        
    
    Возврат Параметры; 
    
КонецФункции

//Функция формирует список доступных моделей сервиса.
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
// 
// Возвращаемое значение:
//  СписокМоделей - СписокЗначение
//
Функция СписокМоделейСервиса(ИмяСервиса, Настройки, Прокси)

	СписокМоделей = Новый СписокЗначений;

	Если Прокси = Неопределено Тогда
		HTTPПрокси = Неопределено;
	Иначе
		HTTPПрокси = Новый ИнтернетПрокси;
		HTTPПрокси.Установить("https", Прокси.ПроксиСервер, Прокси.ПроксиПорт,
			Прокси.ПроксиПользователь, Прокси.ПроксиПароль, Ложь); 
	КонецЕсли;

	Если ИмяСервиса = "OpenRouter" Тогда
		HTTP = Новый HTTPСоединение("openrouter.ai", , , ,
			HTTPПрокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
			
		HTTPЗапрос = Новый HTTPЗапрос("api/v1/models");
		Ответ = HTTP.Получить(HTTPЗапрос);
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		СтруктураОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ТекстОтвета);
		
		Если СтруктураОтвета.Свойство("Data") Тогда
			Для Каждого Элемент Из СтруктураОтвета.Data Цикл
				СписокМоделей.Добавить(Элемент.id, Элемент.name);
			КонецЦикла;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли;
	ИначеЕсли ИмяСервиса = "Claude" Тогда
		HTTP = Новый HTTPСоединение("api.anthropic.com", , , ,
			HTTPПрокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
			
		ЗаголовкиHTTP = ЗаголовкиЗапроса(ИмяСервиса, Настройки);

		HTTPЗапрос = Новый HTTPЗапрос("/v1/models", ЗаголовкиHTTP);
		Ответ = HTTP.Получить(HTTPЗапрос);
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		СтруктураОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ТекстОтвета);
		
		Если СтруктураОтвета.Свойство("Data") Тогда
			Для Каждого Элемент Из СтруктураОтвета.Data Цикл
				СписокМоделей.Добавить(Элемент.id, Элемент.display_name);
			КонецЦикла;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли;
	ИначеЕсли ИмяСервиса = "OpenAi" Тогда
		HTTP = Новый HTTPСоединение("api.openai.com", , , ,
			HTTPПрокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
			
		ЗаголовкиHTTP = ЗаголовкиЗапроса(ИмяСервиса, Настройки);

		HTTPЗапрос = Новый HTTPЗапрос("/v1/models", ЗаголовкиHTTP);
		Ответ = HTTP.Получить(HTTPЗапрос);
		
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		СтруктураОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ТекстОтвета);
		
		Если СтруктураОтвета.Свойство("Data") Тогда
			Для Каждого Элемент Из СтруктураОтвета.Data Цикл
				СписокМоделей.Добавить(Элемент.id);
			КонецЦикла;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли;
	КонецЕсли;

	Возврат СписокМоделей;
	
КонецФункции

// Функция формирует заголовки http запроса.
//
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
//  Настройки			 - Структура	 - Настройки доступа.
// 
// Возвращаемое значение:
//  ЗаголовкиHTTP - Соответствие
//
Функция ЗаголовкиЗапроса(ИмяСервиса, Настройки)
	ЗаголовкиHTTP = Новый Соответствие;
	Если ИмяСервиса = "GigaChat" Тогда
		ЗаголовкиHTTP.Вставить("Authorization","Bearer " + Настройки.Токен);
		ЗаголовкиHTTP.Вставить("Content-Type","application/x-www-form-urlencoded");
		ЗаголовкиHTTP.Вставить("Accept","*/*");
		ЗаголовкиHTTP.Вставить("Accept-Encoding","gzip, deflate, br");
		ЗаголовкиHTTP.Вставить("Connection","keep-alive");
		ЗаголовкиHTTP.Вставить("RqUID", Строка(Новый УникальныйИдентификатор()));
	ИначеЕсли ИмяСервиса = "YandexGPT" Тогда
		ЗаголовкиHTTP.Вставить("Authorization","Api-Key " + Настройки.Ключ);
		ЗаголовкиHTTP.Вставить("Content-Type","application/json");
	ИначеЕсли ИмяСервиса = "OpenRouter" Или ИмяСервиса = "DeepSeek"
		Или ИмяСервиса = "OpenAi" Тогда
		ЗаголовкиHTTP.Вставить("Authorization","Bearer " + Настройки.Ключ);
		ЗаголовкиHTTP.Вставить("Content-Type","application/json");
	ИначеЕсли ИмяСервиса = "Claude" Тогда
		ЗаголовкиHTTP.Вставить("x-api-key", Настройки.Ключ);
		ЗаголовкиHTTP.Вставить("anthropic-version","2023-06-01");
		ЗаголовкиHTTP.Вставить("Content-Type","application/json");
	КонецЕсли;
	
	Возврат ЗаголовкиHTTP;
КонецФункции

// Функция формирует структуру сообщения к языковой модели.
//
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
//  Настройки			 - Структура - Настройки доступа.
//  СистемныйПромт		 - Строка	 - Системный промт для языковой модели.
//  ТекстЗапроса		 - Строка	 - Текст запроса к языковой модели.
// 
// Возвращаемое значение:
//  СтруктураСообщения - Структура
//
Функция СтруктураСообщения(ИмяСервиса, Настройки, СистемныйПромт, ТекстЗапроса)
	ТелоСообщения = Новый Структура;
	Если ИмяСервиса = "GigaChat" Тогда
		
		ТелоСообщения.Вставить("model", Настройки.Модель);
		ТелоСообщения.Вставить("stream", Ложь);
		ТелоСообщения.Вставить("temperature", 0.01);
		ИмяСвойстваТекст = "content";
		
	ИначеЕсли ИмяСервиса = "YandexGPT" Тогда
		
		ТелоСообщения = Новый Структура;
		ТелоСообщения.Вставить("modelUri","gpt://"+Настройки.Каталог+"/" + Настройки.Модель + "/latest");
		ТелоСообщения.Вставить("completionOptions", Новый Структура("stream, temperature, maxTokens", Ложь, 0.01, 4048));
		ТелоСообщения.Вставить("messages",Новый Массив);
		ИмяСвойстваТекст = "text";
		
	ИначеЕсли ИмяСервиса = "OpenRouter"
		Или ИмяСервиса = "OpenAi" Или ИмяСервиса = "Claude" Тогда
		
		ТелоСообщения.Вставить("model", Настройки.Модель);
		ТелоСообщения.Вставить("stream", Ложь);
		ТелоСообщения.Вставить("temperature", 0.01);
		ИмяСвойстваТекст = "content";
		
		Если ИмяСервиса = "Claude" Тогда
			ТелоСообщения.Вставить("max_tokens", 4048);
		КонецЕсли;
		
	ИначеЕсли ИмяСервиса = "DeepSeek" Тогда
		
		ТелоСообщения.Вставить("model", "deepseek-chat");
		ТелоСообщения.Вставить("stream", Ложь);
		ТелоСообщения.Вставить("temperature", 0.01);
		ИмяСвойстваТекст = "content";
		
	КонецЕсли;
	
	ТелоСообщения.Вставить("messages",Новый Массив);

	Если ИмяСервиса = "Claude" Тогда
		ТелоСообщения.Вставить("system", СистемныйПромт + Символы.ПС + СтандартныйПромтКонтроляСодержания());
	Иначе
		Сообщение = Новый Структура;
		Сообщение.Вставить("role", "system");
		Сообщение.Вставить(ИмяСвойстваТекст, СистемныйПромт + Символы.ПС + СтандартныйПромтКонтроляСодержания());
		//
		ТелоСообщения.messages.Добавить(Сообщение);
	КонецЕсли;

	//
	Сообщение = Новый Структура;
	Сообщение.Вставить("role", "user");
	Сообщение.Вставить(ИмяСвойстваТекст, ТекстЗапроса);
	//
	ТелоСообщения.messages.Добавить(Сообщение);
	//
	Возврат ТелоСообщения;
КонецФункции


// Функция разбирает ответ языковой модели и возвращает текст ответа.
//
// Параметры:
//  ИмяСервиса			 - Строка	 - Имя сервиса.
//  СтруктураОтвета		 - Структура - Ответ языковой модели.
// 
// Возвращаемое значение:
//  ТекстОтвета - Строка
//
Функция ПолучитьРезультатИзОтвета(ИмяСервиса, СтруктураОтвета)
	
	Результат = Новый Структура;
	
	ТекстОшибкиРазмер = "Текст запроса превысил допустимую длину.
						|Выделите фрагмент для обработки или попробуйте сократить текст.";
	Сообщение = "";
	Ошибка = "";
	Если ИмяСервиса = "GigaChat" Тогда
		Если СтруктураОтвета.Свойство("choices")
			И СтруктураОтвета.choices.Количество() > 0 Тогда
			Сообщение = СтруктураОтвета.choices[0].message.content;
		ИначеЕсли СтруктураОтвета.Свойство("message") Тогда	
			Если СтрНайти(СтруктураОтвета.message, "context too long") > 0 Тогда
				Ошибка = ТекстОшибкиРазмер;
			Иначе	
				ВызватьИсключение СтруктураОтвета.message;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСервиса = "YandexGPT" Тогда
		
		Если СтруктураОтвета.Свойство("result")
			И СтруктураОтвета.result.Свойство("alternatives")
			И СтруктураОтвета.result.alternatives.Количество() > 0 Тогда
			Сообщение = СтруктураОтвета.result.alternatives[0].message.text;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда	
			Если СтрНайти(СтруктураОтвета.error.message, "number of input tokens must be no more than") > 0 Тогда
				Ошибка = ТекстОшибкиРазмер;
			Иначе	
				ВызватьИсключение СтруктураОтвета.error.message;
			КонецЕсли;
		КонецЕсли
	ИначеЕсли ИмяСервиса = "OpenRouter"
		Или ИмяСервиса = "DeepSeek" Или ИмяСервиса = "OpenAi" Тогда
		
		Если СтруктураОтвета.Свойство("choices")
			И СтруктураОтвета.choices.Количество() > 0 Тогда
			Сообщение = СтруктураОтвета.choices[0].message.content;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда	
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли
	ИначеЕсли ИмяСервиса = "Claude" Тогда
		
		Если СтруктураОтвета.Свойство("content")
			И СтруктураОтвета.content.Количество() >0 Тогда
			Сообщение = СтруктураОтвета.content[0].text;
		ИначеЕсли СтруктураОтвета.Свойство("error") Тогда	
			ВызватьИсключение СтруктураОтвета.error.message;
		КонецЕсли
	КонецЕсли;
	
	Возврат Новый Структура("Сообщение, Ошибка", Сообщение, Ошибка);
КонецФункции

// Процедура обновляет временный токен для GigaChat.
//
// Параметры:
//  Сервис			 - СправочникСсылка.CRM_СервисыЯзыковыхМоделей	 - Сервис.
//  НастройкиДоступа - Структура - Настройки доступа.
// 
Процедура ОбновитьТокенДоступаGigaChat(Сервис, НастройкиДоступа)
	Если ТипЗнч(Сервис) = Тип("СправочникСсылка.CRM_СервисыЯзыковыхМоделей") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_ТокеныДоступаКСервисам.Токен КАК Токен
		                      |ИЗ
		                      |	РегистрСведений.CRM_ТокеныДоступаКСервисам КАК CRM_ТокеныДоступаКСервисам
		                      |ГДЕ
		                      |	CRM_ТокеныДоступаКСервисам.Сервис = &Сервис
		                      |	И CRM_ТокеныДоступаКСервисам.СрокДействия > &СрокДействия");
		
		Запрос.УстановитьПараметр("Сервис", Сервис);
		Запрос.УстановитьПараметр("СрокДействия", ТекущаяДата() + 60);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НастройкиДоступа.Вставить("Токен", Выборка.Токен);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Сервер = "ngw.devices.sberbank.ru";
	Ресурс = "api/v2/oauth";
	Порт = 9443;

	HTTPПрокси = Неопределено;
	HTTP =  Новый HTTPСоединение(Сервер, Порт, , , HTTPПрокси, 30, Новый ЗащищенноеСоединениеOpenSSL);

	ЗапросТекст = "scope=" + НастройкиДоступа.Версия;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization","Bearer " + НастройкиДоступа.Ключ);
	ЗаголовокHTTP.Вставить("Content-Type","application/x-www-form-urlencoded");
	ЗаголовокHTTP.Вставить("Accept","*/*");
	ЗаголовокHTTP.Вставить("Accept-Encoding","gzip, deflate, br");
	ЗаголовокHTTP.Вставить("Connection","keep-alive");
	ЗаголовокHTTP.Вставить("RqUID", Строка(Новый УникальныйИдентификатор()));

	HTTPЗапрос = Новый HTTPЗапрос(Ресурс, ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросТекст); //, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеИзСтрокиJSON(ТекстОтвета);
	
	Если СтруктураОтвета.Свойство("access_token") Тогда
		Токен = СтруктураОтвета.access_token;
		Срок = МестноеВремя(Дата(1970, 1, 1) + СтруктураОтвета["expires_at"]/1000);
		
		НастройкиДоступа.Вставить("Токен", Токен);
		
		Если ТипЗнч(Сервис) = Тип("СправочникСсылка.CRM_СервисыЯзыковыхМоделей") Тогда
			ЗаписьТокена = РегистрыСведений.CRM_ТокеныДоступаКСервисам.СоздатьМенеджерЗаписи();
			ЗаписьТокена.Сервис = Сервис;
			ЗаписьТокена.Токен = Токен;
			ЗаписьТокена.СрокДействия = Срок;
			ЗаписьТокена.Записать();
		КонецЕсли;
	ИначеЕсли СтруктураОтвета.Свойство("message") Тогда
		ВызватьИсключение СтруктураОтвета.message;
	КонецЕсли;
	
КонецПроцедуры

Функция СтандартныйПромтКонтроляСодержания()
	Возврат "### Важно:  
	|- Твой ответ должен быть **полностью безопасным, нейтральным и приемлемым** для широкой аудитории.  
	|- Запрещены **оскорбления, дискриминационные высказывания, агрессивный или угрожающий тон**.  
	|- Не допускается **дезинформация, манипуляции или искажение смысла текста**.  
	|- Не изменяй изначальный смысл текста таким образом, который может ввести в заблуждение.  
	|- Соблюдай **нейтральный, профессиональный и уважительный стиль**, избегая любых предвзятых интерпретаций.  
	|- Если текст содержит потенциально проблемный или неясный контент, **сформулируй его максимально корректно**, не усиливая негативные аспекты.  
	|
	|Твой ответ должен соответствовать этим правилам, независимо от исходного текста."
КонецФункции

#КонецОбласти