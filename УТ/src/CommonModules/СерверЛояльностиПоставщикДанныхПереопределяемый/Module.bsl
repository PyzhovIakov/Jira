///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет использование библиотеки сервера лояльности
//
// Параметры:
//  Ответ		 - HTTPСервисОтвет	 - ответ сервера лояльности.
//  Результат	 - Булево			 - Истина, если Сервер лояльности используется, Ложь - если не используется.
//
Процедура ИспользоватьСерверЛояльности(Ответ, Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ИспользоватьСерверЛояльности(Ответ, Результат);
	
КонецПроцедуры

// Заполняет бонусную программу по дисконтной карте покупателя
//
// Параметры:
//  ДисконтнаяКарта				 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 -карта лояльности, по которой будут заполнены данные о бонусах.
//  БонуснаяПрограммаЛояльности	 - ОпределяемыйТип.БонуснаяПрограммаСерверЛояльности - Бонусная программа лояльности.
//
Процедура ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьБонуснуюПрограммуПоДисконтнойКарте(ДисконтнаяКарта, БонуснаяПрограммаЛояльности);
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об остатках бонусных баллов
//
// Параметры:
//  ДисконтнаяКарта	 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаБонусыКлиента
//
Процедура ЗаполнитьДанныеОБонусах(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьДанныеОБонусах(ДисконтнаяКарта, СтруктураОтвета);
	
КонецПроцедуры

// Выполняет обработку состояния бонусов клиентов
//  Происходит проверка наличия заблокированных бонусов клиентов
//  Если такие найдены и время экспирации для них истекло - происходит разблокировка.
//
Процедура ОбработкаСостоянияБонусов() Экспорт

КонецПроцедуры

// Получает код валюты
//
// Параметры:
//  КодВалюты	 - Строка	 - код валюты.
//
Процедура ПолучитьКодВалюты(КодВалюты = "") Экспорт
	

	
КонецПроцедуры

// Производит проверку параметраов карты клиента по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры клиента:
//  * ИдентификаторКартыКлиента - Строка - код карты лояльности
//  * Клиент - Строка - ФИО владельца карты
//  * АдресЭП - Строка - адрес электронной почты владельца карты
//  * НомерТелефона - Строка - номер телефона владельца карты
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаКартаКлиента
//
Процедура ПроверитьДанныеКартыКлиента(ПараметрыМетода, СтруктураОтвета) Экспорт

КонецПроцедуры

// Производит поиск карты клиента по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры клиента:
//  	* ИдентификаторКартыКлиента - Строка - код карты лояльности
//  	* Клиент - Строка - ФИО владельца карты
//  	* АдресЭП - Строка - адрес электронной почты владельца карты
//  	* НомерТелефона - Строка - номер телефона владельца карты
//  Результат		 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - дисконтная карта клиента
//
Процедура НайтиКартуКлиента(ПараметрыМетода, Результат = Неопределено) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.НайтиКартуКлиента(ПараметрыМетода, Результат);
	
КонецПроцедуры

// Создает карты клиента
//
// Параметры:
//  ДанныеКарты		 - Структура - структура, содержащая данные карты лояльности:
//  	* ИдентификаторКартыКлиента - Строка - код карты лояльности
//  	* Клиент - Строка - ФИО владельца карты
//  	* АдресЭП - Строка - адрес электронной почты владельца карты
//  	* НомерТелефона - Строка - номер телефона владельца карты
//  Результат		 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности, Неопределено - содержит значение,
//  							в котором будет храниться ссылка на созданную карту лояльности.
//  ДругойКлиент	 - СправочникСсылка.Контрагенты	 - контрагент с совпадающим e-mail, но другим телефоном
//  ОписаниеОшибки	 - Строка	 - Подробное описание ошибки
//
Процедура СоздатьКартуКлиента(ДанныеКарты, Результат = Неопределено, ДругойКлиент = Неопределено, ОписаниеОшибки = "") Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.СоздатьКартуКлиента(ДанныеКарты, Результат, ДругойКлиент, ОписаниеОшибки);
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными дисконтной карты
//
// Параметры:
//  ДисконтнаяКарта	 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - Карта лояльности.
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаКартаКлиента
//  КартаСуществует	 - Булево											 - Признак наличия карты.
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует = Ложь) Экспорт 
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьСтруктуруОтветаДаннымиКарты(ДисконтнаяКарта, СтруктураОтвета, КартаСуществует);
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными клиента
//
// Параметры:
//  Клиент			 - СправочникСсылка.Контрагенты	 - Владелец карты лояльности.
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаКартаКлиента
//
Процедура ЗаполнитьСтруктуруОтветаДаннымиКлиента(Клиент, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьСтруктуруОтветаДаннымиКлиента(Клиент, СтруктураОтвета);
	
КонецПроцедуры

// Производит поиск подарочного сертификата по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры подарочного сертификата
//  					см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаДанныеПодарочногоСертификата
//  Результат		 - Структура - данные найденного подарочный сертификат:
//  * СерийныйНомер		 - ОпределяемыйТип.СерийныйНомерСерверЛояльности
//  * ПодарочныйСертификат - ОпределяемыйТип.ПодарочныйСертификатСерверЛояльности
//
Процедура НайтиПодарочныйСертификат(ПараметрыМетода, Результат) Экспорт
	

	
КонецПроцедуры

// Производит поиск промокода по параметрам, полученным через http-сервис
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры подарочного сертификата
//  							см. СерверЛояльностиПоставщикДанных.ПараметрыЗапросаПромокода
//  Результат		 - Структура - данные найденного подарочный сертификат:
//  * Промокод		 - ОпределяемыйТип.ПромокодСерверЛояльности - Значение переданного промокода
//  * ДоступноПрименений - Число - количество доступных применений. 0 когда промокод не доступен.
//  * ОписаниеОшибки - Строка - Не обязательный. Когда промокод не доступен, возвращается пояснение, по какой причине
//  							он не доступен.
//
Процедура НайтиПромокод(ПараметрыМетода, Результат) Экспорт
	

	
КонецПроцедуры

// Возвращает данные о подарочном сертификате
//
// Параметры:
//  ДанныеСертификата	 - Структура - содержит данные подарочного сертификата:
//  * СерийныйНомер		 - ОпределяемыйТип.СерийныйНомерСерверЛояльности
//  * ПодарочныйСертификат - ОпределяемыйТип.ПодарочныйСертификатСерверЛояльности
//  СтруктураОтвета		 - Структура - содержит данные о балансе сертификата,
// 								 см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаДанныеПодарочногоСертификата
//
Процедура ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета) Экспорт
	

	
КонецПроцедуры

// Возвращает данные о состоянии промокода
//
// Параметры:
//  ДанныеПромокода			 - Структура - содержит данные подарочного сертификата.
//  							см. СерверЛояльностиПоставщикДанных.ПараметрыЗапросаПромокода
//  СтруктураОтвета			 - Структура - содержит данные о балансе сертификата,
//  							см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаДанныеПромокода
//  РезервироватьПромокод	 - Булево	 - резервировать применение промокода.
//
Процедура ПолучитьСостояниеПромокода(ДанныеПромокода, СтруктураОтвета, РезервироватьПромокод = Ложь) Экспорт
	

	
КонецПроцедуры

// Заполняет параметры шаблона карты клиента
//
// Параметры:
//  ДанныеКарты - Структура - структура, содержащая данные карты лояльности:
//    * ИдентификаторКартыКлиента	 - Строка - код карты лояльности.
//    * Клиент						 - Строка - ФИО владельца карты.
//    * АдресЭП						 - Строка - адрес электронной почты владельца карты.
//    * НомерТелефона				 - Строка - номер телефона владельца карты.
//  СтруктураШаблона - Структура - содержит данные шаблона регистрации дисконтных карт.
//
Процедура ЗаполнитьПараметрыШаблонаКарты(ДанныеКарты, СтруктураШаблона) Экспорт

КонецПроцедуры

// Возвращает данные об использовании автоматических скидок
//
// Параметры:
//  Результат	 - Булево	 - Истина, автоматические скидки используются,
//  							Ложь, автоматические скидки не используются.
//
Процедура ИспользоватьАвтоматическиеСкидки(Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ИспользоватьАвтоматическиеСкидки(Результат);
	
КонецПроцедуры

// Возвращает данные об использовании бонусов контрагентов
//
// Параметры:
//  Результат	 - Булево	 - Истина, используются,
//  							Ложь, не используются.
//
Процедура ИспользоватьБонусыКонтрагентов(Результат) Экспорт
	

	
КонецПроцедуры

// Рассчитывает автоматические скидки
//
// Параметры:
//  ПараметрыРасчета - Структура - см. ДесериализоватьПараметрыРасчета.
//  Результат		 - Структура - структура данных с рассчитанными автоматическими скидками.
//
Процедура РассчитатьАвтоматическиеСкидки(ПараметрыРасчета, Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.РассчитатьАвтоматическиеСкидки(ПараметрыРасчета, Результат);
	
КонецПроцедуры

// Десериализует параметры расчета автоматических скидок, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных с десериализованными параметрами расчета автоматических скидок:
//   * ВходныеПараметры				 - Структура:
//    ** ТолькоПредварительныйРасчет - Булево
//   * Товары							 - ТаблицаЗначений
//   * ВалютаУправленческогоУчета		 - СправочникСсылка.Валюты
//   * ВариантСовместногоПрименения	 - ПеречислениеСсылка.ВариантыСовместногоПримененияСкидокНаценок
//   * Пользователь					 - Неопределено
//   * ТекущаяДата						 - Дата
//   * Дата							 - Дата
//   * ТолькоСообщенияПослеОформления	 - Булево
//   * Регистратор						 - ДокументСсылка.ЧекККМ
//   * Ссылка							 - ДокументСсылка.ЧекККМ
//   * СуммаВключаетНДС				 - Булево
//   * СкидкиРассчитаны				 - Булево
//   * ДисконтнаяКарта					 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности
//   * ВидДисконтнойКарты				 - Неопределено
//   * Контрагент						 - Неопределено
//   * ПроцентСкидкиПоДисконтнойКарте	 - Число
//   * Магазин							 - Неопределено
//   * СкидкиНаценки					 - ТаблицаЗначений -
//   * ВидЦен							 - СправочникСсылка.ВидыЦен
//   * ВалютаДокумента					 - СправочникСсылка.Валюты
//
Процедура ДесериализоватьПараметрыРасчета(ВходящиеДанные, Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ДесериализоватьПараметрыРасчета(ВходящиеДанные, Результат);
	
КонецПроцедуры

// Проверяет подарочный сертификат на факт продажи/списания.
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры подарочного сертификата:
//  * НомерСертификата - Строка - номер подарочного сертификата.
//  СтруктураОтвета	 - Структура - структура, содержащая в себе параметры ответа:
//  * GiftCardUsed - Булево - признак того, что подарочный сертификат был уже использован ранее.
//
Процедура ПроверитьПодарочныйСертификат(ПараметрыМетода, СтруктураОтвета) Экспорт
	

	
КонецПроцедуры

// Проверяет использование функции оплаты подарочными сертификатами
//
// Параметры:
//  Результат	 - Булево	 - переменная, в которую будет записан результат проверки использования
//  							функции оплаты подарочными сертификатами.
//
Процедура ПроверитьИспользованиеПодарочныхСертификатов(Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ПроверитьИспользованиеПодарочныхСертификатов(Результат);
	
КонецПроцедуры

// Возвращает структуру данных о текущих запретах продаж
//
// Параметры:
//  ПараметрыМетода	 - Структура		 - набор параметров для получения данных о запретах продаж.
//											см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаИнформацияОЗапретеПродаж
//  Результат		 - Структура, Неопределено	 - содержит данные о запретах продаж
//  							см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруЗапретаПродаж
//
Процедура ДанныеОЗапретахПродаж(ПараметрыМетода, Результат) Экспорт
	

	
КонецПроцедуры

// Получает данные серии по ГУИД
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры подарочного сертификата:
//  * ГУИДСерии - Строка - ГУИД серии.
//  СтруктураОтвета	 - Структура - структура, содержащая в себе параметры ответа:
//  * NameBatch - Строка - наименование серии.
//
Процедура ПолучитьДанныеСерии(ПараметрыМетода, СтруктураОтвета) Экспорт
	

	
КонецПроцедуры

// Заполняет полученную структуру реквизитов именами реквизитов документа продажи (ЧекККМ)
//
// Параметры:
//  ИменаРеквизитов	  - Неопределено,Структура - Имена реквизитов поставщика данных:
//  	* ИмяРеквизитаДисконтнаяКарта - Строка
//  	* ИмяРеквизитаТаблицаОплата - Строка
//  	* ИмяРеквизитаПодарочныйСертификат - Строка
//  	* ИмяРеквизитаСерийныйНомер - Строка
//  	* ИмяРеквизитаСуммаБонусов - Строка
//  	* ИмяРеквизитаТаблицаПогашенияСертификатов - Строка
//  	* ИмяРеквизитаСуммаПогашенияСертификата - Строка
//
Процедура ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьИменаРеквизитовПоставщикаДанных(ИменаРеквизитов);
	
КонецПроцедуры

// Заполняет список управляемых скидок
//
// Параметры:
//  Результат		 - Неопределено, ТаблицаЗначений - возвращаемое значение.
//  ПараметрыРасчета - Структура					 - структура, содержащая в себе параметры отбора управляемых скидок.
//  													см.СерверЛояльностиПоставщикДанных.ПараметрыЗапросаУправляемыеСкидки
//
Процедура ЗаполнитьТаблицуУправляемыхСкидок(Результат, ПараметрыРасчета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьТаблицуУправляемыхСкидок(Результат);
	
КонецПроцедуры

// Заполняет список скидок, зависящих от выбранной оплаты
//
// Параметры:
//  Результат	 - Неопределено, ТаблицаЗначений - возвращаемое значение.
//
Процедура ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты(Результат) Экспорт
	

	
КонецПроцедуры

// Заполняет структуру параметров из http запроса
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - содержит в себе набор параметров, которые могут быть переданы через http-запрос:
//  * Номенклатура 	- Строка
//  * Характеристика 	- Строка
//  * Упаковка 		- Строка
//
Процедура ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, Результат) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, Результат);
	
КонецПроцедуры

// Заполняет данные об остатках товара
//
// Параметры:
//  ПараметрыМетода	 - Структура - содержит параметры получения остатков,
//  								см. СерверЛояльностиПоставщикДанныхПереопределяемый.ПараметрыИзЗапросаПолучитьОстатки
//  СтруктураОтвета	 - Структура - содержит данные о балансе сертификата,
//  								см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаОстатки
//
Процедура ПолучитьОстатки(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ОстаткиПоНоменклатуреВРазрезеСкладовИХарактеристик(ПараметрыМетода, СтруктураОтвета);
	
КонецПроцедуры

// Заполняет массив промокодов использованных в документе
//
// Параметры:
//  Документ		 - ДокументСсылка	 - ссылка на документ с применением промокодов.
//  МассивПромокодов - Массив из Строка	 - Массив примененных промокодов
//
Процедура ПолучитьТаблицуИспользованныхПромокодов(Документ, МассивПромокодов) Экспорт
	

	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса данными найденных карт
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры поиска карт:
//  * ИдентификаторКартыКлиента - Строка - код карты лояльности
//  * НомерТелефона - Строка - номер телефона или последняя часть номера телефона для поиска
//  * АдресЭП - Строка - адрес электронной почты владельца карты для поиска
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаСписокКартЛояльности
//
Процедура НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета);
	
КонецПроцедуры

// Заполняет карту лояльности клиента
//
// Параметры:
//  СтрокаУникальногоИдентификатора	 - Строка						 - уникальный идентификатор карты,
//  КартаКлиента					 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - карта клиента
//
Процедура ПолучитьКартуКлиентаПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора, КартаКлиента) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ПолучитьКартуКлиентаПоУникальномуИдентификатору(СтрокаУникальногоИдентификатора, КартаКлиента);
	
КонецПроцедуры

// Заполняет структуру ответа http-сервиса номерами и уникальным идентификатором дисконтной карты
//
// Параметры:
//  КартаКлиента	 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - Карта лояльности.
//  СтруктураОтвета	 -  см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаБонусыКлиента
//
Процедура ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета);
	
КонецПроцедуры

// Заполняет список видов карт
//
// Параметры:
//  Результат		 - Неопределено, ТаблицаЗначений - возвращаемое значение
//  ПараметрыРасчета - Структура					 - структура, содержащая в себе параметры настроек для работы с видами дисконтных карт
//														см.СерверЛояльностиПоставщикДанных.ПараметрыЗапросаВидыДисконтныхКарт
//
Процедура ЗаполнитьТаблицуВидовКарт(Результат, ПараметрыРасчета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьТаблицуВидовКарт(Результат, ПараметрыРасчета);
	
КонецПроцедуры

// Заполняет структуру ответа Сервера лояльности данными об оборотах
//
// Параметры:
//  ДисконтнаяКарта	 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - карта лояльности, по которой будут заполнены данные о бонусах
//  СтруктураОтвета	 - см. СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтветаОборотыПродаж
//
Процедура ЗаполнитьДанныеОбОборотахПродаж(ДисконтнаяКарта, СтруктураОтвета) Экспорт
	
	СерверЛояльностиПоставщикДанныхУТ.ЗаполнитьДанныеОбОборотахПродаж(ДисконтнаяКарта, СтруктураОтвета);
	
КонецПроцедуры

// Десериализуются параметры списка сотрудников, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных с параметрами списка сотрудников:
//  * Магазин							 - Неопределено
//
Процедура ДесериализоватьПараметрыРасчетаСписокСотрудников(ВходящиеДанные, Результат) Экспорт
	

	
КонецПроцедуры

// Десериализуются параметры серий, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных с параметрами серий:
//  * ВходныеПараметры					 - Структура
//  * Магазин							 - Неопределено
//
Процедура ДесериализоватьПараметрыСерий(ВходящиеДанные, Результат) Экспорт
	

	
КонецПроцедуры

// Заполняет список сотрудников
//
// Параметры:
//  ПараметрыРасчета - Структура				 - параметры расчета см. СтруктураТаблицыСотрудников
//  Результат		 - Неопределено, ТаблицаЗначений - возвращаемое значение
//
Процедура ЗаполнитьТаблицуСотрудников(ПараметрыРасчета, Результат) Экспорт
	

	
КонецПроцедуры

// Заполняет список серий
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры расчета
// 									см. СерверЛояльностиПоставщикДанных.ПараметрыЗапросаСпискаСерий
//  Результат		 - Структура - структура серий - возвращаемое значение
//
Процедура ЗаполнитьСписокСерий(ПараметрыРасчета, Результат) Экспорт
	

	
КонецПроцедуры

// ++ Локализация

// Заполняет структуру параметров из http запроса
//
// Параметры:
//  ВходящиеДанные					 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  ПараметрыОбработкиКодаМаркировки - Структура - содержит в себе набор параметров обработки кода маркировки.
//
Процедура ПараметрыИзЗапросаОбработатьКодМаркировки(ВходящиеДанные, ПараметрыОбработкиКодаМаркировки) Экспорт
	

	
КонецПроцедуры

// Заполняет данные о результатах обработки кода маркировки
//
// Параметры:
//  ПараметрыОбработкиКодаМаркировки - Структура - содержит в себе набор параметров обработки кода маркировки.
//  РезультатОтвета					 - Строка	 - Сериализованная структура результата обработки кода маркировки.
//
Процедура ОбработатьКодМаркировки(ПараметрыОбработкиКодаМаркировки, РезультатОтвета) Экспорт
	

	
КонецПроцедуры

// Заполняет структуру параметров из http запроса
//
// Параметры:
//  ВходящиеДанные						 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  ПараметрыПолученияТокенаАвторизации	 - Структура - содержит в себе набор параметров получения токена авторизации.
//
Процедура ПараметрыИзЗапросаПолучитьТокенАвторизацииГосИС(ВходящиеДанные, ПараметрыПолученияТокенаАвторизации) Экспорт
	

	
КонецПроцедуры

// Заполняет данные о результатах получения токена авторизации
//
// Параметры:
//  ПараметрыПолученияТокенаАвторизации	 - Структура - содержит в себе набор параметров получения токена авторизации.
//  РезультатОтвета						 - Строка	 - Сериализованная структура результата получения токена авторизации.
//
Процедура ПолучитьТокенАвторизацииГосИС(ПараметрыПолученияТокенаАвторизации, РезультатОтвета) Экспорт
	
КонецПроцедуры

// -- Локализация

// Процедура получает актуальную цену товара по параметрам
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры получения цены:
//  * ГУИДСерии - Строка - ГУИД серии.
//  * ГУИДВидЦены - Строка - ГУИД вида цены.
//  * ГУИДНоменклатуры - Строка - ГУИД номенклатуры.
//  * Характеристика - Строка - ГУИД характеристики.
//  СтруктураОтвета	 - Структура - структура, содержащая в себе параметры ответа:
//  * Price - Число - актуальная цена номенклатуры.
//
Процедура ПолучитьАктуальнуюЦену(ПараметрыМетода, СтруктураОтвета) Экспорт
	
	
КонецПроцедуры

// Проверяет заполненность бонусной программы в карте лояльности
//
// Параметры:
//  КартаКлиента				 - ОпределяемыйТип.КартаЛояльностиСерверЛояльности	 - карта лояльности, по которой будут заполнены данные о бонусах.
//  ТребуетсяБлокировкаБонусов	 - Булево											 - признак необходимости блокировки бонусов
//
Процедура ПроверитьБонуснуюПрограмму(КартаКлиента, ТребуетсяБлокировкаБонусов) Экспорт
	

	
КонецПроцедуры

// Десериализует параметры запроса, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных с десериализованными параметрами расчета автоматических скидок:
//  * БонусныеКарты							 - ТаблицаЗначений
//  * БонуснаяПрограмма						 - СправочникСсылка.БонусныеПрограммыЛояльности
//
Процедура ПараметрыМетодаИзЗапросаОбъединитьБонусныеКарты(ВходящиеДанные, Результат) Экспорт
	

	
КонецПроцедуры

// Создает списание и начисление бонусов по полученным параметрам с сервера лояльности
//
// Параметры:
//  ПараметрыМетода	 - Структура - структура, содержащая в себе параметры списания/начисления бонусных баллов:
//  * БонуснаяПрограмма - СправочникСсылка.БонусныеПрограммыЛояльности - бонусная программа.
//  * БонуснаяКарта - ОпределяемыйТип.КартаЛояльностиСерверЛояльности - бонусная карта начисления.
//  * ТаблицаБонусныхКарт - ТаблицаЗначений - Таблица бонусных карт.
//  СтруктураОтвета	 - Структура - структура, содержащая в себе параметры ответа:
//  * ЕстьОшибки - Булево - признак наличия ошибок при выполнении метода.
//  * ТекстОшибки - Булево - признак наличия ошибок при выполнении метода.
//
Процедура ОбъединитьБонусныеКарты(ПараметрыМетода, СтруктураОтвета) Экспорт
	

	
КонецПроцедуры

// Десериализует параметры запроса, полученными в формате JSON
//
// Параметры:
//  ВходящиеДанные	 - Строка	 - содержит строковое значение тела запроса в формате JSON.
//  Результат		 - Структура - структура данных с десериализованными параметрами расчета автоматических скидок:
//  * ПодарочныйСертификат				- СправочникСсылка.Номенклатура
//  * НомерПодарочногоСертификата		- СправочникСсылка.СерииНоменклатуры
//  * Товары							- ТаблицаЗначений
//
Процедура ПараметрыМетодаИзЗапросаПолучитьДанныеПодарочногоСертификата(ВходящиеДанные, Результат) Экспорт
	

	
КонецПроцедуры

#КонецОбласти
