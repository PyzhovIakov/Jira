
#Область ПрограммныйИнтерфейс

// Возвращает интервал времени строкой.
//
// Параметры:
//	ВремяОкончания - Дата - Время окончания.
//	ВремяНачала	   - Дата - Время начала.
//
// Возвращаемое значение:
//	Строка - интервал времени строкой.
//
Функция ИнтервалВремениСтрокой(ВремяОкончания, ВремяНачала = Неопределено) Экспорт
	
	Если ВремяНачала = Неопределено Тогда
		ВремяНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗнакИнтервала = "";
	ВеличинаИнтервала = ВремяОкончания - ВремяНачала;
	Если ВеличинаИнтервала < 0 Тогда
		ВеличинаИнтервала = -ВеличинаИнтервала;
		ЗнакИнтервала = "-";
	КонецЕсли;
	
	ВеличинаИнтервалаВДнях = Цел(ВеличинаИнтервала / 60 / 60 / 24);
	ОстатокЧасовМинут = ВеличинаИнтервала - ВеличинаИнтервалаВДнях * 60 * 60 * 24;
	ВеличинаИнтервалаВЧасах = Цел(ОстатокЧасовМинут / 60 / 60);
	ОстатокМинут = ОстатокЧасовМинут - ВеличинаИнтервалаВЧасах * 60 * 60;
	ВеличинаИнтервалаВМинутах = Цел(ОстатокМинут / 60);
	
	ОписаниеИнтервала = ЗнакИнтервала +
		?(ВеличинаИнтервалаВДнях = 0, "", Строка(ВеличинаИнтервалаВДнях) + НСтр("ru = 'д'; en = 'd'") + " ") +
		?(ВеличинаИнтервалаВЧасах = 0, "", Строка(ВеличинаИнтервалаВЧасах) + НСтр("ru = 'ч'; en = 'h'") + " ") +
		?(ВеличинаИнтервалаВМинутах = 0, "", Строка(ВеличинаИнтервалаВМинутах) + НСтр("ru = 'мин'; en = 'min'"));
	
	Возврат ОписаниеИнтервала;
	
КонецФункции

// Возвращает ключ обратной связи по обращению.
//
// Параметры:
//	Обращение - ДокументСсылка.CRM_Интерес - Обращение для установки обратной связи.
//
// Возвращаемое значение:
//	Строка - ключ обратной связи по обращению.
//
Функция КлючОбратнойСвязиПоОбращению(Обращение) Экспорт
	
	Ключ = СтрЗаменить(Обращение.УникальныйИдентификатор(), "-", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеОбратнойСвязи.Ключ КАК Ключ
	|ИЗ
	|	РегистрСведений.CRM_ДанныеОбратнойСвязи КАК ДанныеОбратнойСвязи
	|ГДЕ
	|	ДанныеОбратнойСвязи.Ключ = &Ключ");
	
	Запрос.Параметры.Вставить("Ключ", Ключ);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_ДанныеОбратнойСвязи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ключ = Ключ;
		МенеджерЗаписи.Обращение = Обращение;
		МенеджерЗаписи.ДатаОценки = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ключ;
	
КонецФункции

// Возвращает адрес страницы обратной связи.
//
// Возвращаемое значение:
//	Строка - адрес страницы обратной связи.
//
Функция АдресСтраницыОбратнойСвязи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	АдресПубликации = Константы.CRM_АдресСервисаОбратнойСвязи.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПубликации);
	
	АдресОбратнойСвязи =  СтруктураАдреса.Схема + "://" +
		СтруктураАдреса.Хост +
		?(ЗначениеЗаполнено(СтруктураАдреса.Порт), ":" + ?(ТипЗНЧ(СтруктураАдреса.Порт) = Тип("Число"),
			 Формат(СтруктураАдреса.Порт, "ЧГ="), СтруктураАдреса.Порт), "") + "/" +
		СтруктураАдреса.ПутьНаСервере;
		
	Возврат АдресОбратнойСвязи;
	
КонецФункции

// Процедура предназначена для регистрации потерянных обращений.
//
Процедура CRM_РегистрацияПотерянныхОбращений() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_РегистрацияПотерянныхОбращений);

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ИсточникиПолученияЛидов.Ссылка КАК Канал,
	                      |	CRM_ИсточникиПолученияЛидов.CRM_СрокЖизниОбращения КАК CRM_СрокЖизниОбращения
	                      |ПОМЕСТИТЬ СрокиЖизни
	                      |ИЗ
	                      |	Справочник.CRM_ИсточникиПолученияЛидов КАК CRM_ИсточникиПолученияЛидов
	                      |ГДЕ
	                      |	CRM_ИсточникиПолученияЛидов.CRM_ИсточникЛидов
	                      |	И CRM_ИсточникиПолученияЛидов.CRM_СрокЖизниОбращения > 0
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка,
	                      |	CRM_УчетныеЗаписиМессенджеров.CRM_СрокЖизниОбращения
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеров.CRM_ИсточникЛидов
	                      |	И CRM_УчетныеЗаписиМессенджеров.CRM_СрокЖизниОбращения > 0
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	                      |	УчетныеЗаписиЭлектроннойПочты.CRM_СрокЖизниОбращения
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочты.CRM_ИсточникЛидов
	                      |	И УчетныеЗаписиЭлектроннойПочты.CRM_СрокЖизниОбращения > 0
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	НЕОПРЕДЕЛЕНО,
	                      |	CRM_СрокЖизниЗвонков.Значение
	                      |ИЗ
	                      |	Константа.CRM_СрокЖизниЗвонков КАК CRM_СрокЖизниЗвонков
	                      |ГДЕ
	                      |	CRM_СрокЖизниЗвонков.Значение > 0
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_ОбъектыАРМ_Обращения.Объект КАК Объект
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОбъектыАРМ_Обращения КАК CRM_ОбъектыАРМ_Обращения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СрокиЖизни КАК СрокиЖизни
	                      |		ПО CRM_ОбъектыАРМ_Обращения.КаналПолучения = СрокиЖизни.Канал
	                      |ГДЕ
	                      |	РАЗНОСТЬДАТ(CRM_ОбъектыАРМ_Обращения.Дата, &ТекущаяДата, ДЕНЬ) > СрокиЖизни.CRM_СрокЖизниОбращения");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Выборка.Объект,
			Справочники.CRM_СостоянияЛидов.Потерян,,, НСтр("ru = 'Истек срок жизни обращения.'"));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
