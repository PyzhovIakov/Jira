////////////////////////////////////////////////////////////////////////////////
// Содержит события форм, вызываемые на сервере
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					 - Булево			 - признак отказа от создания формы.
//  СтандартнаяОбработка	 - Булево			 - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	 - Структура		 - дополнительные параметры.
//
// Возвращаемое значение:
//	Булево - результат выполнения.
//
Функция ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт

	// +Рабочий стол
	СписокДоступныхФормРабочегоСтола = CRM_РабочийСтолСервер.ПолучитьСписокДоступныхФорм();
	
	Если СписокДоступныхФормРабочегоСтола.НайтиПоЗначению(Форма.ИмяФормы) <> Неопределено Тогда
		CRM_РабочийСтолСервер.ПриСозданииНаСервере(Форма, Отказ);
	КонецЕсли;
	// -Рабочий стол
	
	// +Доступные пользователи
	Если ДополнительныеПараметры = Неопределено
		ИЛИ НЕ ДополнительныеПараметры.Свойство("ОтключитьОграничениеПоПользователям") Тогда
		УстановитьОграниченияПоПользователям(Форма, , ДополнительныеПараметры);
	КонецЕсли;
	// -Доступные пользователи
	
	Если СтрНайти(Форма.ИмяФормы, "CRM_") > 0
		И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьНапоминанияПользователя") Тогда
		
		Кнопка = Форма.Элементы.Найти("ФормаОбщаяКомандаНапомнить");
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Группа = Форма.Элементы.Найти("ГруппаКомманднаяПанельПодменюОтчетыСмТакже");
		Если Группа <> Неопределено Тогда
			Группа.Видимость = Ложь;
		КонецЕсли;
		Группа = Форма.Элементы.Найти("ПодменюОтчетыСмТакже");
		Если Группа <> Неопределено Тогда
			Группа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		 
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка)
			И CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
			CRM_БизнесПроцессыСервер.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
		CRM_ТриггерыСервер.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);

		CRM_ТрудозатратыСервер.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Если Форма.ИмяФормы = "Документ.ЗаказКлиента.Форма.ФормаДокумента" Тогда
			
			МодульРаботаСФормамиСервер = ОбщегоНазначения.ОбщийМодуль("CRM_МетодыФормДокументовСервер");
			МодульРаботаСФормамиСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(Форма);
			
		ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
			CRM_КлассификаторыЭкспортныеМетоды.ДобавитьЗакладкуКлассификацияВТиповуюФорму(Форма);
			// / Классификаторы
			Если НЕ Форма.Элементы.Найти("СтраницыКарточкаНоменклатуры") = Неопределено Тогда
				Форма.Элементы.ГруппаКлассификация.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
			КонецЕсли;
		ИначеЕсли Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаВыбораБезПолнотекстовогоПоиска" Тогда
			Если Форма.Параметры.Свойство("Отбор")
				И Форма.Параметры.Отбор.Свойство("ЮрФизЛицо")
				И Форма.Параметры.Отбор.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания
				И СтрНайти(Форма.Список.ТекстЗапроса, "Контрагенты.ЮрФизЛицо") > 0 Тогда
				Форма.Параметры.Отбор.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
		КонецЕсли;
		
		// +CRM_Модуль
		ГруппаСвязанныеСписки = Форма.Элементы.Найти("ГруппаСвязанныеСписки");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИнциденты") И Не ГруппаСвязанныеСписки = Неопределено Тогда
			
			ТипЗначенияОбъекта = ТипЗнч(Форма.Объект.Ссылка);
			
			// Добавить кнопку на форму
			Если Метаданные.ОпределяемыеТипы.ПредметИнцидента.Тип.СодержитТип(ТипЗначенияОбъекта) Тогда
				
				КомандаФормы = Форма.Команды.Добавить("ОбщаяКомандаИнцидентыПоПредмету");
				КомандаФормы.Действие = "Подключаемый_ИнцидентыПоПредмету";
				КомандаФормы.Заголовок = НСтр("ru = 'Инциденты'");
				КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
				
				НовыйЭлемент = Форма.Элементы.Добавить("КнопкаИнцидентыПоПредмету", Тип("КнопкаФормы"), ГруппаСвязанныеСписки);
				НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
				НовыйЭлемент.ИмяКоманды = "ОбщаяКомандаИнцидентыПоПредмету";
				НовыйЭлемент.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				
				ЭлементВложения = Форма.Элементы.Найти("ВложенияПредставление");
				Если Не ЭлементВложения = Неопределено Тогда
					Форма.Элементы.Переместить(НовыйЭлемент, ЭлементВложения.Родитель, ЭлементВложения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		// -CRM_Модуль
		
		Если Форма.Параметры.Свойство("ПолучитьИмяРеквизитаСписка") Тогда
			
			// найдем реквизит списка
			
			МассивРеквизитыФормы = Форма.ПолучитьРеквизиты();
			
			ИмяРеквизитаСписка = "";
			
			ИмяПервогоДинамическогоСписка = "";
			
			Для Каждого РеквизитФормы Из МассивРеквизитыФормы Цикл
				
				// проверим, является ли реквизит динамическим списком
				
				МассивТипов = РеквизитФормы.ТипЗначения.Типы();
				
				Для Каждого ТипРеквизита Из МассивТипов Цикл
					
					Если ТипРеквизита = Тип("ДинамическийСписок") Тогда
						
						Если ПустаяСтрока(ИмяПервогоДинамическогоСписка) Тогда
							
							ИмяПервогоДинамическогоСписка = РеквизитФормы.Имя;
							
						КонецЕсли;
							
						Если СтрНайти(РеквизитФормы.Имя, "Список") > 0 Тогда
							
							ИмяРеквизитаСписка = РеквизитФормы.Имя;
							
							Прервать;
							
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЦикла;
					
				Если Не ПустаяСтрока(ИмяРеквизитаСписка) Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПустаяСтрока(ИмяРеквизитаСписка) Тогда
				
				ИмяРеквизитаСписка = ИмяПервогоДинамическогоСписка;
				
			КонецЕсли;	
			
			// добавим реквизит для обмена с формами выбора документов
			
			ДобавляемыеРеквизиты = Новый Массив; 
			Реквизит = Новый РеквизитФормы("ИмяРеквизитаСписка", Новый ОписаниеТипов("Строка")); 
			ДобавляемыеРеквизиты.Добавить(Реквизит); 
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
			Если НЕ ПустаяСтрока(ИмяРеквизитаСписка) Тогда
				
				Форма["ИмяРеквизитаСписка"] = ИмяРеквизитаСписка;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(Форма.ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Возврат Истина;
КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- Объект - объект, который будет прочитан.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
			CRM_БизнесПроцессыСервер.ПриЧтенииНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
			CRM_КлассификаторыЭкспортныеМетоды.ФормаОбъектаПриЧтенииНаСервере(Форма, Форма.Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, из обработчика события которой происходит вызов процедуры.
//  Отказ			 - Булево - Отказ.
//  ТекущийОбъект	 - ЛюбойТип - Текущий объект.
//  ПараметрыЗаписи	 - Структура - Параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		CRM_ТриггерыСервер.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ТаблицаИнтересов") Тогда
		МодульРаботаСФормамиСервер = ОбщегоНазначения.ОбщийМодуль("CRM_МетодыФормДокументовСервер");
		МодульРаботаСФормамиСервер.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект	 - ЛюбойТип - Текущий объект.
//  ПараметрыЗаписи	 - Структура - Параметры записи.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") Тогда
		Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Форма.Объект.Ссылка) Тогда
			CRM_БизнесПроцессыСервер.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		CRM_ТриггерыСервер.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
