///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП".
// ОбщийМодуль.СистемаБыстрыхПлатежейСервис.
//
// Серверные процедуры обмена данными с Системой быстрых платежей:
//  - предоставление учетных данных мерчанта;
//  - загрузка и обработка настроек;
//  - определение статусов заказов на оплату.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Определяет статус заказа на оплату в Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторыОплат - ТаблицаЗначений - данные для проверки статуса:
//    * Идентификатор - Строка - идентификатор QR-кода СБП;
//    * ДатаЗапросаСтатуса - Дата - дата последнего запроса статуса;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ИдентификаторОперации - Строка - идентификатор операции проверки наличия статуса;
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * Идентификаторы - Массив Из Строка - идентификаторы оплат, по которым получен терминальный статус.
//
Функция ОперацияПроверкаНаличияСтатусаОперацийОплат(
		ИдентификаторыОплат,
		ИдентификаторУчастника,
		ИдентификаторОперации) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Идентификаторы", Новый Массив);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/status-manager/payments/statuses/test-check-needed",
			ИдентификаторУчастника));
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = payments_test_check_needed(
		ИдентификаторыОплат,
		ИдентификаторОперации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации());
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию о статусах операций.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При проверке статусов операции сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			ПараметрыОтправки.Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Идентификаторы = ПрочитатьДанные_payments_test_check_needed(
		РезультатОтправки.Содержимое);
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит проверку данных аутентификации в сервисе участника СБП.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации;
//  URLОперации - Строка - URL для проверки подключения.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		URLОперации) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	КонецЕсли;
	
	РезультатСБП = СистемаБыстрыхПлатежейСлужебный.ЗаголовокАвторизацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		ДанныеДляПодписи,
		ЗначениеЗаполнено(ПараметрыНастройкиПодключения.НастройкаПодключения));
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;

	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = get_merchant_info(
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить данные аутентификации в банке.
				|
				|%1
				|
				|%2'"),
			РезультатОперации.СообщениеОбОшибке,
			СистемаБыстрыхПлатежейСлужебный.ТехническаяИнформацияОбОшибке(
				URLОперации,
				РезультатОтправки.КодОшибки,
				Заголовки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ИдентификаторМерчантаОтвет = ПрочитатьДанные_get_merchant_info(
		РезультатОтправки.Содержимое);
	
	Если ИдентификаторМерчантаОтвет <> ПараметрыНастройкиПодключения.ИдентификаторМерчанта Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор мерчанта отличается от исходного.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор мерчанта отличается от исходного.'");
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВызовОперацийАутентификации

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/auth/get-credentials-grant.

// Получает обновленный токен для схемы аутентификации Resource owner password
// credentials grant (https://tools.ietf.org/html/rfc6749#section-4.3).
//
// Параметры:
//  Логин - Строка - логин пользователя;
//  Пароль - Строка - пароль пользователя;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП.
//
// Возвращаемое значение:
//  Структура - получения данных аутентификации:
//    * Токен - Строка, Неопределено - идентификатор, по которому выполняется оплата;
//    * ТипТокена - Строка, Неопределено - идентификатор оплаты в СБП;
//    * ИстеченияСрока - Дата, Неопределено - идентификатор оплаты в СБП;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПредоставлениеУчетныхДанных(Логин, Пароль, ИдентификаторУчастника) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Обновление токена Resource owner password credentials grant.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Токен",              Неопределено);
	РезультатОперации.Вставить("ТипТокена",          Неопределено);
	РезультатОперации.Вставить("ИстеченияСрока", Неопределено);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/auth/get-credentials-grant",
			ИдентификаторУчастника));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = get_credentials_grant(
		Логин,
		Пароль,
		РезультатИПП.ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		// Для метода используется собственное переопределении ошибки
		// т.к. формат ошибок указанный в rfc 6749 отличается
		// от выбранного для других методов.
		РезультатОперации.СообщениеОбОшибке = ПереопределитьСообщениеПользователюPasswordCredentialsGrant(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить токен аутентификации.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении токена сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеАутентификации = ПрочитатьДанные_get_credentials_grant(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.Токен              = ДанныеАутентификации.sbpMemberResponse.access_token;
	РезультатОперации.ИстеченияСрока = ДанныеАутентификации.sbpMemberResponse.expires_in;
	РезультатОперации.ТипТокена          = ДанныеАутентификации.sbpMemberResponse.token_type;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено обновление токена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/auth/get-credentials-grant.
//
Функция get_credentials_grant(
		Логин,
		Пароль,
		ДанныеАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("username");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/v1/members/{memberId}/auth/get-credentials-grant.
//
Функция ПрочитатьДанные_get_credentials_grant(ТелоJSON)
	
	// Ответ сервиса:
	// {
	//  "accessToken": "string",
	//  "expiresIn": 0,
	//  "tokenType": "string"
	// }
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПолучениеНастроекУчастников

////////////////////////////////////////////////////////////////////////////////
// Вызов операции GET /sbp/v1/members/infos

// Получает идентификаторы участников СБП из сервиса.
//
// Возвращаемое значение:
//  Массив из Структура - загруженные настройки.
//
Функция ОперацияНастройкиУчастниковСБП() Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Загрузка идентификаторов платежных систем СБП.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Настройки", Неопределено);
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		"/members/infos");
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить информацию об идентификаторах участников СБП.
				|
				|Техническая информация об ошибке:
				|При получении информации об идентификаторах платежных систем СБП возникли ошибки.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(ИнформацияОбОшибке),
			Истина);
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить список участников СБП.'");
		РезультатОперации.ИнформацияОбОшибке = ИнформацияОбОшибке;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Настройки = ПрочитатьДанные_sbp_members(РезультатОтправки.Содержимое);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена загрузка идентификаторов платежных систем СБП.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа операции:
// /attachments/sbp/sbp-members.json.
//
Функция ПрочитатьДанные_sbp_members(ТелоJSON)
	
	// Ответ сервиса:
	// [
	//  {
	//    "memberId": "string",
	//    "memberName": "string",
	//    "biks": [
	//      "string"
	//    ],
	//    "integrationEnabled": true,
	//    "personalAccountPageUrl": "string",
	//    "attentionText": "string",
	//    "c2bSupported": true,
	//    "c2bVerified": true,
	//    "c2bIntegrationSupported": true,
	//    "c2bCashRegisterPaymentSupported": true,
	//    "authorizationType": "RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT",
	//    "inn": "string",
	//    "reconciliationOfSettlementsSupported": true,
	//    "paymentAggregator": true
	//  }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийЗагрузкиМакетов

// Выполняет получение и разбор файла содержащего описание макетов СБП.
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    * Описание - ТаблицаЗначений, Неопределено - Описание макетов СБП по данным сервиса:
//      ** Идентификатор    - Строка - Идентификатор макета СБП.
//      ** КонтрольнаяСумма - Строка - Хеш сумма файла макета (SHA256).
//      ** URLЗагрузки      - Строка - URL для загрузки файла макета.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияОписаниеМакетов() Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Описание", Неопределено);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение описания макетов СБП.'"),
		Ложь);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = URLДанныхМакетов("/templates.json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод" , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета" , 1);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси" , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут" , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить описание макетов СБП.
				|
				|Техническая информация об ошибке:
				|При получении описания макетов СБП возникли ошибки.
				|URL: %1
				|Код ошибки: %2
				|Подробная информация:
				|%3'"),
			URLОперации,
			РезультатОтправки.КодОшибки,
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(ИнформацияОбОшибке),
			Истина);
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);

		РезультатОперации.ИнформацияОбОшибке = ИнформацияОбОшибке;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОперации.Описание = ПрочитатьДанные_templates(РезультатОтправки.Содержимое);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение описания макетов СБП.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Чтение ответа с описанием макетов СБП:
// /templates.json.
//
Функция ПрочитатьДанные_templates(ТелоJSON)
	
	// Ответ сервиса:
	// [
	//  {
	//    "id": "CashLinkNarrowHorizontal",
	//    "downloadURL": "https://payment-gateway.1c.ru/resources/templates/cash-link-narrow-horizontal.mxl",
	//    "sha256": "ec210724f22f51c32a91f205178e669d3b31ca876edc77afe0dc6b8cb5df5255"
	//  }
	// ]
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	РезультатЧтения = ПрочитатьJSON(ЧтениеОтвета);
	
	ОписаниеМакетов = Новый ТаблицаЗначений;
	ОписаниеМакетов.Колонки.Добавить(
		"Идентификатор",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОписаниеМакетов.Колонки.Добавить(
		"КонтрольнаяСумма",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(64, ДопустимаяДлина.Фиксированная)));
	ОписаниеМакетов.Колонки.Добавить("URLЗагрузки", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ДанныеМакета Из РезультатЧтения Цикл
		ОписаниеМакета = ОписаниеМакетов.Добавить();
		ОписаниеМакета.Идентификатор    = ДанныеМакета.id;
		ОписаниеМакета.КонтрольнаяСумма = ДанныеМакета.sha256;
		ОписаниеМакета.URLЗагрузки      = ДанныеМакета.downloadURL;
	КонецЦикла;
	
	Возврат ОписаниеМакетов;
	
КонецФункции

// Выполняет обновление макетов СБП в кэше.
//
// Параметры:
//  ОписаниеОбновляемыхМакетов - Массив из Структура - описание макета для обновления:
//    * Идентификатор - Строка - Идентификатор макета.
//    * URLЗагрузки - Строка - URL загрузки обновляемого макета
//
// Возвращаемое значение:
//  Структура - данные сверке взаиморасчетов:
//    * ОбновленныеМакеты - Структура - Описание обновленных макетов СБП:
//      ** Ключ    - Строка - Идентификатор макета СБП.
//      ** Значение - ТабличныйДокумент - обновленный макет.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияОбновлениеМакетов(ОписаниеОбновляемыхМакетов) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ОбновленныеМакеты", Новый Структура);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Загрузка макетов СБП из сервиса.'"),
		Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод",                    "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета",             2);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	Для Каждого ОбновляемыйМакет Из ОписаниеОбновляемыхМакетов Цикл
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Получение макета : %1'"),
				ОбновляемыйМакет.Идентификатор),
			Ложь);
			
		ИнтернетПоддержкаПользователей.ПроверитьURL(ОбновляемыйМакет.URLЗагрузки);
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			ОбновляемыйМакет.URLЗагрузки,
			,
			,
			ПараметрыОтправки);
			
		Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
				РезультатОтправки.КодСостояния);
			РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
				РезультатОперации.КодОшибки,
				РезультатОтправки.Содержимое);
				
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл макета %1.
					|%2
					|
					|Техническая информация об ошибке:
					|При загрузке файла сервис вернул ошибку.
					|Код ошибки: %3.
					|URL Файла: %4
					|Подробная информация:
					|%5'"),
				ОбновляемыйМакет.Идентификатор,
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				ОбновляемыйМакет.URLЗагрузки,
				РезультатОтправки.ИнформацияОбОшибке);
			
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				РезультатОперации.ИнформацияОбОшибке,
				Истина);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанных.Добавить(РезультатОтправки.Содержимое);
		КонтрольнаяСуммаМакета = НРег(СтрЗаменить(ХешированиеДанных.ХешСумма, " ", ""));
		
		Если ОбновляемыйМакет.КонтрольнаяСумма <> КонтрольнаяСуммаМакета Тогда
			
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиФайлНеЗагружен();
			РезультатОперации.СообщениеОбОшибке  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении файла макета %1: 
					|%2'"),
				ОбновляемыйМакет.Идентификатор,
				НСтр("ru = 'Получен некорректный файл.'"));
			
			РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить файл макета %1.
					|Контрольная сумма полученного файла отличается от ожидаемой.'"),
				ОбновляемыйМакет.Идентификатор);
				
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(РезультатОперации.ИнформацияОбОшибке);
			
			Возврат РезультатОперации;
			
		КонецЕсли;
		
		Макет = Новый ТабличныйДокумент;
		Поток = РезультатОтправки.Содержимое.ОткрытьПотокДляЧтения();
		Макет.Прочитать(Поток);
		Поток.Закрыть();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запись = РегистрыСведений.КэшМакетовСБП.СоздатьМенеджерЗаписи();
		Запись.Идентификатор    = ОбновляемыйМакет.Идентификатор;
		Запись.КонтрольнаяСумма = КонтрольнаяСуммаМакета;
		Запись.Макет            = Новый ХранилищеЗначения(Макет);
		Запись.ДатаОбновления   = ТекущаяДатаСеанса();
		Запись.Заполнить(Неопределено);
		Запись.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		РезультатОперации.ОбновленныеМакеты.Вставить(ОбновляемыйМакет.Идентификатор, Макет);
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПроверкиСостояний

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/v1/members/{memberId}/status-manager/payments/statuses/test-check-needed

// Формирует параметры запроса для проверки наличия статуса операций оплаты.
//
Функция payments_test_check_needed(
		ИдентификаторОплат,
		ИдентификаторОперации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("operation");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторОперации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrs");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ДанныеОплаты Из ИдентификаторОплат Цикл
		
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrId");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеОплаты.Идентификатор);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("lastStatusCheckDate");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(
			ЗаписатьДатуJSON(
				ДанныеОплаты.ДатаЗапросаСтатуса,
				ФорматДатыJSON.ISO,
				ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа проверки наличия статуса операции.
//
Функция ПрочитатьДанные_payments_test_check_needed(ТелоJSON)
	
	// Ответ сервиса:
	//
	// {
	//  "checkByObjectIds": [
	//    "string"
	//  ],
	//  "responseDate": "2021-11-17T13:41:39.511Z"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.checkByObjectIds;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПроверкиПараметровПодключения

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /members/{memberId}/merchants/{merchantId}/get-merchant-info

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/merchants/{merchantId}/get-merchant-info.
//
Функция get_merchant_info(
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторУчастника)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторУчастника);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /sbp/v1/members/{memberId}/merchants/{merchantId}/get-merchant-info.
//
Функция ПрочитатьДанные_get_merchant_info(ТелоJSON)
	
	// Ответ сервиса:
	//  merchantId - идентификатор мерчанта;
	// 
	// {
	//   "merchantId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат.sbpMemberResponse.merchantId;
	
КонецФункции

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    * ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    * ИнформацияОбОшибке - Строка    - информация об ошибке для пользователя.
//    * Ошибка - Булево - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ResourceOwnerPasswordCredentialsGrant

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию
//   СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса.
//  ТелоJSON  - Строка - содержимое ответа сервиса.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователюPasswordCredentialsGrant(
		КодОшибки,
		ТелоJSON = "")
	
	КодОшибкиСервиса = "";
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		КодОшибкиСервиса = ВРег(Результат.error);
	Исключение
		КодОшибкиСервиса = "";
	КонецПопытки;
	
	Если КодОшибкиСервиса = "BAD_REQUEST_1C" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису Портала 1С:ИТС.'");
	ИначеЕсли КодОшибкиСервиса = "USER_AUTHENTICATION_EXCEPTION_1C" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации на Портале 1С:ИТС.'");
	ИначеЕсли КодОшибкиСервиса = "INVALID_REQUEST"
		Или КодОшибкиСервиса = "INVALID_CLIENT"
		Или КодОшибкиСервиса = "INVALID_GRANT"
		Или КодОшибкиСервиса = "UNAUTHORIZED_CLIENT"
		Или КодОшибкиСервиса = "UNSUPPORTED_GRANT_TYPE" Тогда
		Возврат НСтр("ru = 'Ошибка аутентификации в сервисе банка.'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Определяет URL для вызова сервиса с данными макетов Системы быстрых платежей.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLДанныхМакетов(Операция)
	
	Возврат "https://payment-gateway.1c.ru/resources/templates" + Операция;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийЗапросТокенаАутентификацииСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/{serviceNick}/tokens/request

// Получает токен для аутентификации в сервисе payment-gateway.
//
// Параметры:
//  ПараметрыНастройки - Структура - данные настройки подключения;
//  ПараметрыАутентификации - Структура - данные аутентификации;
//  ИдентификаторТокена - Строка - уникальный идентификатор токена;
//  ИмяСервиса - Строка - имя сервиса для которого выпускается токен.
//
// Возвращаемое значение:
//  Структура - получения данных аутентификации:
//    *Токен - Строка, Неопределено - идентификатор, по которому выполняется оплата;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияЗапросТокенаАутентификацииСервиса(
	ПараметрыНастройки,
	ПараметрыАутентификации,
	ИдентификаторТокена,
	ИмяСервиса) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение токена в сервисе payment-gateway.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("Токен", Неопределено);
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/%1/tokens/request",
			ИмяСервиса));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = tokens_request(
		ПараметрыНастройки,
		ПараметрыАутентификации,
		ИдентификаторТокена,
		РезультатИПП.ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации в сервисе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении токена сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеТокена = ПрочитатьДанные_tokens_request(РезультатОтправки.Содержимое);
	
	РезультатОперации.Токен = ДанныеТокена.serviceToken;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение токена.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// //sbp/{serviceNick}/tokens/request.
//
Функция tokens_request(
		ПараметрыНастройки,
		ПараметрыАутентификации,
		ИдентификаторТокена,
		ДанныеАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("apiSecretObject");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	Если ПараметрыНастройки.ТипАутентификации 
		= Перечисления.ТипыАутентификацииСБП.RESOURCE_OWNER_PASSWORD_CREDENTIALS_GRANT
		Или ПараметрыНастройки.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BASIC Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("userName");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыАутентификации.login);
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыАутентификации.password);
		
	ИначеЕсли ПараметрыНастройки.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.BEARER Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("token");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыАутентификации.token);
		
	ИначеЕсли ПараметрыНастройки.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA1
		Или ПараметрыНастройки.ТипАутентификации = Перечисления.ТипыАутентификацииСБП.HMAC_SHA256 Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("key");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПолучитьHexСтрокуИзДвоичныхДанных(ПараметрыАутентификации.key));
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("islMemberId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройки.ИдентификаторУчастника);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройки.ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientTokenId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторТокена);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("model");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторВариантаНастройки(ПараметрыНастройки.ВариантНастройки));
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /sbp/{serviceNick}/tokens/request
//
Функция ПрочитатьДанные_tokens_request(ТелоJSON)
	
	// Ответ сервиса:
	// {
	//   "serviceToken": "string"
	// }
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

// Определяет идентификатор для сервиса на основании варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки Системы быстрых платежей.
//
// Возвращаемое значение:
//  Строка - идентификатор для сервиса.
//
Функция ИдентификаторВариантаНастройки(ВариантНастройки)
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		Возврат "C2B";
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		Возврат "B2B";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийОтзывТокеновАутентификацииСервиса

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /sbp/{serviceNick}/tokens/request

// Получает токен для аутентификации в сервисе payment-gateway.
//
// Параметры:
//  ИдентификаторыТокенов - Массив Из Строка - идентификаторы токенов для деактивации;
//  ИмяСервиса - Строка - имя сервиса для которого выпускается токен.
//
// Возвращаемое значение:
//  Структура - получения данных аутентификации:
//    *Токен - Строка, Неопределено - идентификатор, по которому выполняется оплата;
//    *КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияОтзывТокеновАутентификацииСервиса(
	ИдентификаторыТокенов,
	ИмяСервиса) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Отзыв токенов в сервисе payment-gateway.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/%1/tokens/revoke",
			ИмяСервиса));
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = tokens_revoke(
		РезультатИПП.ДанныеАутентификации,
		ИдентификаторыТокенов);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-Correlation-ID", Строка(Новый УникальныйИдентификатор));
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отозвать токены аутентификации в сервисе.
				|
				|%1
				|
				|Техническая информация об ошибке:
				|При получении токена сервис вернул ошибку.
				|URL: %2
				|Код ошибки: %3
				|X-Correlation-ID: %4
				|Подробная информация:
				|%5'"),
			РезультатОперации.СообщениеОбОшибке,
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки.Получить("X-Correlation-ID"),
			РезультатОтправки.ИнформацияОбОшибке);
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Отзыв токенов завершен.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует параметры запроса для операции
// //sbp/{serviceNick}/tokens/revoke.
//
Функция tokens_revoke(
		ДанныеАутентификации,
		ИдентификаторыТокенов)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("clientTokenIds");
	
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	
	Для Каждого ИдентификаторТокена Из ИдентификаторыТокенов Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторТокена);
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецОбласти
