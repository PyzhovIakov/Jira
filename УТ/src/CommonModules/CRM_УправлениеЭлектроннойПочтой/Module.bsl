////////////////////////////////////////////////////////////////////////////////
// Управление электронной почтой (CRM)
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область Новые

Процедура ОпределитьПапкуОтправленные(УчетнаяЗапись, Соединение) Экспорт
	
	ПапкаОтправленные = ПапкаУчетнойЗаписи(УчетнаяЗапись, "Отправленные");
	
	ИменаПапкиОтправленные = Новый Массив;
	Если ЗначениеЗаполнено(ПапкаОтправленные) Тогда
		ИмяНаСервере = ПапкаОтправленные.CRM_ИмяНаСервере;
		Если ЗначениеЗаполнено(ИмяНаСервере) Тогда
			ИменаПапкиОтправленные.Добавить(НРег(ИмяНаСервере));
		Иначе
			ИменаПапкиОтправленные.Добавить(НРег(ПапкаОтправленные.Наименование));
		КонецЕсли;
	КонецЕсли;
	ИменаПапкиОтправленные.Добавить("отправленные");
	ИменаПапкиОтправленные.Добавить("inbox.sent");
	ИменаПапкиОтправленные.Добавить("sent");
	
	ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
	Для Каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
		ПапкаУстановлена = Ложь;
		Для Каждого ИмяПапкиОтправленные Из ИменаПапкиОтправленные Цикл
			Если НРег(ПочтовыйЯщик) = ИмяПапкиОтправленные Тогда
				Соединение.ТекущийПочтовыйЯщик = ПочтовыйЯщик;
				ПапкаУстановлена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПапкаУстановлена Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из HTML-Текста теги "img", не содержащие параметра src
//
// Параметры:
//  ТекстHTML  - Строка - HTML-текст, содержащий картинки
//
// Возвращаемое значение:
//   Строка   - Отредактированный HTML-текст 
//
Функция УдалитьНекорректныеКартинкиИзТекстаHTML(ТекстHTML) Экспорт
	
	ОстатокТекстаHTML = ТекстHTML;
	
	НовыйТекстHTML = "";
	
	НомерПервогоСимволаТега = 1;
	
	Пока НомерПервогоСимволаТега > 0 Цикл
	
		НомерПервогоСимволаТега = СтрНайти(ОстатокТекстаHTML, "<img", НаправлениеПоиска.СНачала, НомерПервогоСимволаТега);
		
		Если НомерПервогоСимволаТега = 0 Тогда
			
			НовыйТекстHTML = НовыйТекстHTML + ОстатокТекстаHTML; 			
			
		Иначе	
			
			НомерПоследнегоСимволаТега = СтрНайти(ОстатокТекстаHTML, ">", НаправлениеПоиска.СНачала, НомерПервогоСимволаТега);
			
			// Если нет закрывающего тега завершаем поиск.
			Если НомерПоследнегоСимволаТега = 0 Тогда
				НовыйТекстHTML = НовыйТекстHTML + ОстатокТекстаHTML;
				Прервать;
			КонецЕсли;
			
			ТегСодержитОшибки = Ложь;
			
			НомерПервогоСимволаПараметра = СтрНайти(ОстатокТекстаHTML, " src", НаправлениеПоиска.СНачала,
				 НомерПервогоСимволаТега);
			
			Если НомерПервогоСимволаПараметра > 0 И НомерПервогоСимволаПараметра < НомерПоследнегоСимволаТега Тогда
				
				ТекущийСимволСтрокиНомер = НомерПервогоСимволаПараметра + 4;
				
				НомерСимволаЗнакРавенства = 0;
				НомерПервойОдинарнойКавычки = 0;
				НомерПервойДвойнойКавычки = 0;
				НомерВторойОдинарнойКавычки = 0;
				НомерВторойДвойнойКавычки = 0;
				
				ПроверкаУспешноЗавершена = Ложь;
				
				Пока ТекущийСимволСтрокиНомер < НомерПоследнегоСимволаТега И НЕ ТегСодержитОшибки И НЕ ПроверкаУспешноЗавершена Цикл
					
					ТекущийСимволСтроки = Сред(ОстатокТекстаHTML, ТекущийСимволСтрокиНомер, 1);
					
					// первым значащим символом после параметра должен быть знак равенства
					
					Если НомерСимволаЗнакРавенства = 0 Тогда
						
						Если ТекущийСимволСтроки = "=" Тогда
							
							НомерСимволаЗнакРавенства = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли НЕ ТекущийСимволСтроки = " " Тогда
							
							ТегСодержитОшибки = Истина;
							
						КонецЕсли;	
							
					// следующим символом должна быть одиночная или двойная кавычка	
						
					ИначеЕсли НомерПервойОдинарнойКавычки + НомерПервойДвойнойКавычки = 0 Тогда
					
						Если ТекущийСимволСтроки = """" Тогда
							
							НомерПервойДвойнойКавычки = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли ТекущийСимволСтроки = "'" Тогда
							
							НомерПервойОдинарнойКавычки = ТекущийСимволСтрокиНомер;
							
						ИначеЕсли НЕ ТекущийСимволСтроки = " " Тогда
							
							ТегСодержитОшибки = Истина;
							
						КонецЕсли;
						
					// закрывать одиночную кавычку может только одиночная кавычка	
						
					ИначеЕсли НомерПервойОдинарнойКавычки > 0 Тогда						
						
						Если ТекущийСимволСтроки = "'" Тогда
							
							НомерВторойОдинарнойКавычки = ТекущийСимволСтрокиНомер;
							
							// проверим на пустые кавычки
							
							Если НомерВторойОдинарнойКавычки - НомерПервойОдинарнойКавычки = 1 Тогда
							
								ТегСодержитОшибки = Истина;
								
							Иначе
								
								ПроверкаУспешноЗавершена = Истина;
							
							КонецЕсли;
							
						КонецЕсли;
						
					// закрывать одиночную кавычку может только одиночная кавычка	
						
					ИначеЕсли НомерПервойДвойнойКавычки > 0 Тогда						
						
						Если ТекущийСимволСтроки = """" Тогда
							
							НомерВторойДвойнойКавычки = ТекущийСимволСтрокиНомер;
							
							// проверим на пустые кавычки
							
							Если НомерВторойДвойнойКавычки - НомерПервойДвойнойКавычки = 1 Тогда
							
								ТегСодержитОшибки = Истина;
								
							Иначе
								
								ПроверкаУспешноЗавершена = Истина;
							
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ (ТегСодержитОшибки ИЛИ ПроверкаУспешноЗавершена) Тогда
					
						ТекущийСимволСтрокиНомер = ТекущийСимволСтрокиНомер + 1;
						
					КонецЕсли;	
				
				КонецЦикла;
				
				Если НЕ ПроверкаУспешноЗавершена Тогда
					
					ТегСодержитОшибки = Истина;	
					
				КонецЕсли;	
				
			Иначе
				
				ТегСодержитОшибки = Истина;
				
			КонецЕсли;			
				
			Если ТегСодержитОшибки Тогда
				
				// удалим некорректный тег "img"
				
				НовыйТекстHTML = НовыйТекстHTML + Лев(ОстатокТекстаHTML, НомерПервогоСимволаТега - 1);
				
				// попробуем найти закрывающий тэг и удалить его
				
				ОстатокТекстаHTML = Сред(ОстатокТекстаHTML, НомерПоследнегоСимволаТега + 1);
				
				ПервыеШестьСимволовПослеПробелов = Лев(СокрЛ(ОстатокТекстаHTML), 6);
				
				Если ПервыеШестьСимволовПослеПробелов = "</img>" Тогда					
					
					ОстатокТекстаHTML = Сред(СокрЛ(ОстатокТекстаHTML), 7);
					
				КонецЕсли;	
				
			Иначе
				
				НовыйТекстHTML = НовыйТекстHTML + Лев(ОстатокТекстаHTML, НомерПоследнегоСимволаТега);
				
				ОстатокТекстаHTML = Сред(ОстатокТекстаHTML, НомерПоследнегоСимволаТега + 1);
				
			КонецЕсли;
			
			НомерПервогоСимволаТега = 1;			
		
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат НовыйТекстHTML;

КонецФункции // УдалитьНекорректныеКартинкиИзТекстаHTML()

// Возвращает подпись пользователя
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты	 - учетная запись электронной почты пользователя
//  Пользователь	 - СправочникСсылка.Пользователи	 - пользователь, для которого требуется получить подпись
// 
// Возвращаемое значение:
// СправочникСсылка.CRM_Подписи  - подпись
//
Функция ПолучитьПодписьПользователя(УчетнаяЗапись, Пользователь) Экспорт
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 И ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
		
		Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		
		СтруктураВложений					= Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);

		ТекстПодписиФорматированныйДокумент	= Новый ФорматированныйДокумент;
		ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
		Возврат ТекстПодписиФорматированныйДокумент;
	Иначе
		ПараметрыУЗ =
				Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
				УчетнаяЗапись,
				Перечисления.СпособыРедактированияЭлектронныхПисем.HTML,
				Истина);
	    Возврат ПараметрыУЗ.Подпись;
	КонецЕсли;
	
КонецФункции

// Возвращает имя отправителя пользователя
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты	 - учетная запись электронной почты пользователя
//  Пользователь	 - СправочникСсылка.Пользователи	 - пользователь, для которого требуется получить подпись
// 
// Возвращаемое значение:
// 	Строка - Имя отправителя
//
Функция ИмяОтправителяПользователя(УчетнаяЗапись, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи.ИмяОтправителя) Тогда
		Возврат МенеджерЗаписи.ИмяОтправителя;
	КонецЕсли;
	
	Возврат УчетнаяЗапись.ИмяПользователя;
	
КонецФункции

// Процедура добавляет запись о неотправленном письме.
//
// Параметры:
//  Письмо		 - ДокументСсылка.ЭлектронноеПисьмоИсходящее - Ссылка на письмо.
//  ТекстОшибки	 - Строка - Текст с ошибкой. 
//
Процедура ДобавитьЗаписьОНеотправленномПисьме(Письмо, ТекстОшибки) Экспорт
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Письмо);
	Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
	И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
		Рассылка = Предмет;
	Иначе
		Рассылка = Письмо;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.CRM_НеОтправленныеПисьма.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Рассылка	= Рассылка;
	ЗаписьРегистра.Письмо	= Письмо;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		Если ЗаписьРегистра.Итерация < 3 Тогда
			ЗаписьРегистра.Итерация = ЗаписьРегистра.Итерация + 1;
		КонецЕсли;
		ЗаписьРегистра.ТекстОшибки = ТекстОшибки;
	Иначе
		ЗаписьРегистра.Рассылка	= Рассылка;
		ЗаписьРегистра.Письмо	= Письмо;
		ЗаписьРегистра.Итерация = 1;
		ЗаписьРегистра.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

// Процедура удаляет запись о неотправленном письме.
//
// Параметры:
//  Письмо - ДокументСсылка.ЭлектронноеПисьмоИсходящее - Ссылка на письмо.
//
Процедура УдалитьЗаписьОНеотправленномПисьме(Письмо) Экспорт
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Письмо);
	Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
	И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
		Рассылка = Предмет;
	Иначе
		Рассылка = Письмо;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.CRM_НеОтправленныеПисьма.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Рассылка	= Рассылка;
	ЗаписьРегистра.Письмо	= Письмо;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить снять пометку о прочтении
//
// Параметры:
//  ВыделенныеПисьма	 - ДокументСсылка.ЭлектронноеПисьмоВходящее	 - Выделенные письма.
//  УстановитьПометку	 - Булево - Установить пометку о прочтении.  
//
Процедура УстановитьСнятьПометкуОПрочтении(ДанныеПисем, ПометкаНовая, Регистрировать = Истина) Экспорт
	
	ПисьмаКОбработке = Новый Массив;
	
	Если ТипЗнч(ДанныеПисем) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПисьмаКОбработке.Добавить(ДанныеПисем);
	ИначеЕсли ТипЗнч(ДанныеПисем) = Тип("Массив") Тогда
		Для Каждого Письмо Из ДанныеПисем Цикл
			Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				ПисьмаКОбработке.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Письмо Из ПисьмаКОбработке Цикл
		
		МенеджерЗаписи = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо = Письмо;
		МенеджерЗаписи.Прочитать();
		ПометкаУстановленная = (Не МенеджерЗаписи.Выбран());
		
		Если ПометкаУстановленная = ПометкаНовая Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПометкаНовая Тогда
			
			МенеджерЗаписи.Письмо			= Письмо;
			МенеджерЗаписи.Записать();
			
		ИначеЕсли ПометкаНовая И Не ПометкаУстановленная Тогда
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если Регистрировать Тогда
			ЗарегистрироватьИзменениеПометкиПрочтенияIMAP(Письмо, ПометкаНовая);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Функция возвращает значение права текущего пользователя на работу с учетной записью.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - проверяемая учетная запись;
//  ИмяПрава	  - Строка - имя проверяемого права (значения: "Администрирование" или "Запись");
//
// Возвращаемое значение:
//  Булево - наличие права 
//
Функция ТекущийПользовательПолучитьПравоУчетнойЗаписи(УчетнаяЗапись, ИмяПрава) Экспорт
	
	ЗначениеПраваУчетнойЗаписи = Ложь;
	
	// Полноправным пользователям разрешены все действия независимо от настроек.
	Если ИмяПрава = "Администрирование" Тогда
		
		ЗначениеПраваУчетнойЗаписи = Пользователи.ЭтоПолноправныйПользователь();
	
	Иначе
		
		ЗначениеПраваУчетнойЗаписи = УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеПраваУчетнойЗаписи Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.Администрирование КАК Администрирование,
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.Запись КАК Запись
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
			               |ГДЕ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь В (&Пользователь)";
			
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
			РолиПользователя.Добавить(ТекущийПользователь);
			Запрос.УстановитьПараметр("Пользователь", РолиПользователя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				ЗначениеПраваУчетнойЗаписи = Выборка[ИмяПрава];
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЕсли; 
	
	Возврат ЗначениеПраваУчетнойЗаписи;

КонецФункции // ПолучитьПравоПользователяУчетнойЗаписи() 

////////////////////////////////////////////////////////////////////
// Работа с папками электронных писем.

// Функция возвращает папку учетной записи заданного вида.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись.
//  Вид				 - ПеречислениеСсылка.CRM_ВидыПапокЭлектроннойПочты	 - Вид папок электронной почты.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПапкиЭлектронныхПисем - Папка электронных писем. 
//
Функция ПапкаУчетнойЗаписи(УчетнаяЗапись, Вид) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидПапки = Вид;
	Если ТипЗнч(Вид) = Тип("Строка") Тогда
		ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты[Вид];
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПапкиУчетныхЗаписей.Папка КАК Папка
	|ИЗ
	|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|ГДЕ
	|	ПапкиУчетныхЗаписей.УчетнаяЗапись = &Владелец
	|	И ПапкиУчетныхЗаписей.ВидПапки = &ВидПапки";
	
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидПапки", ВидПапки);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Папка;
	КонецЕсли;
	
	Возврат Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка();
	
КонецФункции

Функция ЭтоПредопределеннаяПапкаУчетнойЗаписи(Папка, Вид = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидПапки = Вид;
	Если ТипЗнч(Вид) = Тип("Строка") Тогда
		ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты[Вид];
	КонецЕсли;	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПапкиУчетныхЗаписей.ВидПапки КАК ВидПапки
	|ИЗ
	|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|ГДЕ
	|	ПапкиУчетныхЗаписей.Папка = &Папка");
	
	Запрос.Параметры.Вставить("Папка", Папка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Вид = Выборка.ВидПапки;
		Если ВидПапки = Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат (ВидПапки = Выборка.ВидПапки);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИменаПредопределенныхПапок() Экспорт
	
	ИменаПредопределенных = Новый Структура;
	
	ИменаПапкиВходящие = Новый Массив;
	ИменаПапкиВходящие.Добавить("Входящие");
	ИменаПапкиВходящие.Добавить("Inbox");
	ИменаПредопределенных.Вставить("Входящие", ИменаПапкиВходящие);
	
	ИменаПапкиОбработанные = Новый Массив;
	ИменаПапкиОбработанные.Добавить("Обработанные");
	ИменаПредопределенных.Вставить("Обработанные", ИменаПапкиОбработанные);
	
	ИменаПапкиИсходящие = Новый Массив;
	ИменаПапкиИсходящие.Добавить("Исходящие");
	ИменаПапкиИсходящие.Добавить("Outgoing");
	ИменаПапкиИсходящие.Добавить("Outbox");
	ИменаПредопределенных.Вставить("Исходящие", ИменаПапкиИсходящие);
	
	ИменаПапкиОтправленные = Новый Массив;
	ИменаПапкиОтправленные.Добавить("Отправленные");
	ИменаПапкиОтправленные.Добавить("Sent");
	ИменаПредопределенных.Вставить("Отправленные", ИменаПапкиОтправленные);
	
	ИменаПапкиУдаленные = Новый Массив;
	ИменаПапкиУдаленные.Добавить("Удаленные");
	ИменаПапкиУдаленные.Добавить("Корзина");
	ИменаПапкиУдаленные.Добавить("Deleted");
	ИменаПапкиУдаленные.Добавить("Trash");
	ИменаПредопределенных.Вставить("Удаленные", ИменаПапкиУдаленные);
	
	ИменаПапкиЧерновики = Новый Массив;
	ИменаПапкиЧерновики.Добавить("Черновики");
	ИменаПапкиЧерновики.Добавить("Drafts");
	ИменаПредопределенных.Вставить("Черновики", ИменаПапкиЧерновики);
	
	ИменаПапкиСпам = Новый Массив;
	ИменаПапкиСпам.Добавить("Нежелательная почта");
	ИменаПапкиСпам.Добавить("Спам");
	ИменаПапкиСпам.Добавить("Spam");
	ИменаПапкиСпам.Добавить("Junk");
	ИменаПредопределенных.Вставить("Нежелательные", ИменаПапкиСпам);
	
	Возврат Новый ФиксированнаяСтруктура(ИменаПредопределенных);
	
КонецФункции

Функция ВидПапкиПоНаименованию(Знач Наименование, Знач ИменаПредопределенных = Неопределено) Экспорт
	
	ВидПапки = Неопределено;
	
	Если ИменаПредопределенных = Неопределено Тогда
		ИменаПредопределенных = CRM_УправлениеЭлектроннойПочтой.ИменаПредопределенныхПапок();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ИменаПредопределенных Цикл
		
		Для Каждого ИмяПредопределеннойПапки Из КлючИЗначение.Значение Цикл
			Если Наименование = ИмяПредопределеннойПапки Тогда
				КлючВидаПапки = КлючИЗначение.Ключ;
				Если КлючВидаПапки = "Нежелательные" Тогда
					КлючВидаПапки = "НежелательнаяПочта";
				КонецЕсли;
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты[КлючВидаПапки];
				Исключение
					// Обработка не требуется.
				КонецПопытки; 
				// BSLLS:MissingCodeTryCatchEx-on

				Если ЗначениеЗаполнено(ВидПапки) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВидПапки) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидПапки;
	
КонецФункции

Процедура ЗаполнитьПапкиЭлектронныхПисем(УчетныеЗаписиПотока = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмо.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТекущиеПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&УчетныеЗаписиПотока)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&УчетныеЗаписиПотока)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеПисьма.Ссылка КАК Ссылка
	|ИЗ
	|	ТекущиеПисьма КАК ТекущиеПисьма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиПисем
	|		ПО ТекущиеПисьма.Ссылка = ПапкиПисем.Взаимодействие
	|ГДЕ
	|	ПапкиПисем.ПапкаЭлектронногоПисьма ЕСТЬ NULL");
	
	Если УчетныеЗаписиПотока = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронноеПисьмо.УчетнаяЗапись В(&УчетныеЗаписиПотока)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("УчетныеЗаписиПотока", УчетныеЗаписиПотока);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата) - 3600 * 24 * 2);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПисьмаБезПапок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Взаимодействия.УстановитьПапкиДляМассиваПисем(ПисьмаБезПапок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Синхронизация писем по IMAP

Процедура ВыполнитьОтложенныеОперацииПоIMAP(ДанныеУчетнойЗаписи, Почта, МассивИменАктивныхПапок)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацииПоIMAP.Письмо КАК Письмо,
	|	ОперацииПоIMAP.Действие КАК Действие,
	|	ОперацииПоIMAP.Папка КАК Папка,
	|	ОперацииПоIMAP.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ОперацииПоIMAP.ПапкаНовая КАК ПапкаНовая,
	|	ВЫБОР
	|		КОГДА ОперацииПоIMAP.Действие = ЗНАЧЕНИЕ(Перечисление.CRM_ДействияПоIMAP.УдалитьПисьмо)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	РегистрСведений.CRM_ОтложенныеОперацииПоIMAP КАК ОперацииПоIMAP
	|ГДЕ
	|	ОперацииПоIMAP.УчетнаяЗапись = &УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	Письмо,
	|	Порядок
	|ИТОГИ ПО
	|	Письмо");
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПисьма = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПисьма.Следующий() Цикл
		
		ВыборкаДействия = ВыборкаПисьма.Выбрать();
		Пока ВыборкаДействия.Следующий() Цикл
			
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				Если Почта.ТекущийПочтовыйЯщик <> ВыборкаДействия.Папка Тогда
					Почта.ТекущийПочтовыйЯщик = ВыборкаДействия.Папка;
				КонецЕсли;
			Исключение
				// Обработка не требуется.
			КонецПопытки;
			// BSLLS:MissingCodeTryCatchEx-on	
			
			Если ВыборкаДействия.Действие = Перечисления.CRM_ДействияПоIMAP.УдалитьПисьмо Тогда
				
				Идентификаторы = Новый Массив;
				Идентификаторы.Добавить(ВыборкаДействия.ИдентификаторНаСервере);
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Почта.УдалитьСообщения(Идентификаторы);
				Исключение
					// Обработка не требуется.
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
				
				Прервать; // Следующие действия выполнять нет необходимости.
				
			ИначеЕсли ВыборкаДействия.Действие = Перечисления.CRM_ДействияПоIMAP.УстановитьФлагПрочтения Тогда
				
				ФлагиСоответствие = Новый Соответствие;
				Флаги = Новый ФлагиИнтернетПочтовогоСообщения;
				Флаги.Прочитанное = Истина;
				ФлагиСоответствие.Вставить(ВыборкаДействия.ИдентификаторНаСервере, Флаги); 
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Почта.УстановитьФлагиСообщений(ФлагиСоответствие);
				Исключение
					// Обработка не требуется.
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on  

			ИначеЕсли ВыборкаДействия.Действие = Перечисления.CRM_ДействияПоIMAP.СнятьФлагПрочтения Тогда
				
				ФлагиСоответствие = Новый Соответствие;
				Флаги = Новый ФлагиИнтернетПочтовогоСообщения;
				Флаги.Прочитанное = Ложь;
				ФлагиСоответствие.Вставить(ВыборкаДействия.ИдентификаторНаСервере, Флаги);
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Почта.УстановитьФлагиСообщений(ФлагиСоответствие);
				Исключение
					// Обработка не требуется.
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
				
			ИначеЕсли ВыборкаДействия.Действие = Перечисления.CRM_ДействияПоIMAP.ПереместитьПисьмоВПапку Тогда
				
				Идентификаторы = Новый Массив;
				Идентификаторы.Добавить(ВыборкаДействия.ИдентификаторНаСервере);
				
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					Почта.ПереместитьВПочтовыйЯщик(Идентификаторы, ВыборкаДействия.ПапкаНовая);
				Исключение
					// Обработка не требуется.
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on

			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(ДанныеУчетнойЗаписи.Ссылка);
		НаборЗаписей.Отбор.Письмо.Установить(ВыборкаПисьма.Письмо);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для Каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
		
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		Почта.ОчиститьУдаленныеСообщения();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьПисьмаВПапкахПоIMAP(ДанныеУчетнойЗаписи, Почта, МассивИменАктивныхПапок, ДатаЗагрузкиПисем)
	
	ПапкиIMAP = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
	|	ВЫБОР
	|		КОГДА ПапкиЭлектронныхПисем.CRM_ИмяНаСервере = """"
	|			ТОГДА ПапкиЭлектронныхПисем.Наименование
	|		ИНАЧЕ ПапкиЭлектронныхПисем.CRM_ИмяНаСервере
	|	КОНЕЦ КАК ИмяПапки
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗапись
	|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ПапкиЭлектронныхПисем.CRM_ИмяНаСервере = """"
	|				ТОГДА ПапкиЭлектронныхПисем.Наименование
	|			ИНАЧЕ ПапкиЭлектронныхПисем.CRM_ИмяНаСервере
	|		КОНЕЦ В (&ИменаАктивныхПапок)");
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	Запрос.Параметры.Вставить("ИменаАктивныхПапок", МассивИменАктивныхПапок);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПапкиIMAP.Вставить(Выборка.ИмяПапки, Выборка.Папка);
	КонецЦикла;
	
	ПериодСинхронизацииДней = ДанныеУчетнойЗаписи.ПериодСинхронизации;
	Если ПериодСинхронизацииДней = 0 Тогда
		ПериодСинхронизацииДней = 7;
	КонецЕсли;
	
	ДанныеДляСинхронизации = Новый ТаблицаЗначений;
	ДанныеДляСинхронизации.Колонки.Добавить("ИдентификаторНаСервере", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДанныеДляСинхронизации.Колонки.Добавить("ИдентификаторСообщения", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДанныеДляСинхронизации.Колонки.Добавить("Папка", Новый ОписаниеТипов("СправочникСсылка.ПапкиЭлектронныхПисем"));
	ДанныеДляСинхронизации.Колонки.Добавить("Прочитанное", Новый ОписаниеТипов("Булево"));
	
	ДанныеОтбора = Новый Структура;
	ДанныеОтбора.Вставить("ПослеДатыОтправления", НачалоДня(ДатаЗагрузкиПисем) - ПериодСинхронизацииДней * 86400);
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
		
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		Попытка
			ПолученныеЗаголовки = Почта.ПолучитьЗаголовки(ДанныеОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ИдентификаторыНаСервере = Новый Массив;
		Для Каждого ЗаголовокПисьма Из ПолученныеЗаголовки Цикл
			ИдентификаторыНаСервере.Добавить(ЗаголовокПисьма.Идентификатор[0]);
		КонецЦикла;
		
		Попытка
			ФлагиСообщений = Почта.ПолучитьФлагиСообщений(ИдентификаторыНаСервере);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Для Каждого ЗаголовокПисьма Из ПолученныеЗаголовки Цикл
			
			// +CRM
			//Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
			Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) 
				Или СтрНайти(НРег(ЗаголовокПисьма.ИдентификаторСообщения), "null") > 0 Тогда
			// -CRM
				Продолжить;
			КонецЕсли;
			
			ИдентификаторНаСервере = ЗаголовокПисьма.Идентификатор[0];
			ДанныеФлагов = ФлагиСообщений.Получить(ИдентификаторНаСервере);
			
			НоваяСтрока = ДанныеДляСинхронизации.Добавить();
			НоваяСтрока.ИдентификаторНаСервере = ИдентификаторНаСервере;
			НоваяСтрока.ИдентификаторСообщения = ЗаголовокПисьма.ИдентификаторСообщения;
			НоваяСтрока.Папка = ПапкиIMAP.Получить(ИмяАктивнойПапки);
			НоваяСтрока.Прочитанное = ДанныеФлагов.Прочитанное;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ДанныеДляСинхронизации.Папка КАК Папка,
	|	ДанныеДляСинхронизации.Прочитанное КАК Прочитанное
	|ПОМЕСТИТЬ ДанныеДляСинхронизации
	|ИЗ
	|	&ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Письмо,
	|	ДанныеДляСинхронизации.Папка КАК Папка,
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.Прочитанное КАК Прочитанное
	|ПОМЕСТИТЬ ВсеДанныеНаСервере
	|ИЗ
	|	ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ДанныеДляСинхронизации.ИдентификаторСообщения = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ДанныеДляСинхронизации.Папка,
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.Прочитанное
	|ИЗ
	|	ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ДанныеДляСинхронизации.ИдентификаторСообщения = ЭлектронноеПисьмоВходящее.ХешСумма
	|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ДанныеДляСинхронизации.Папка,
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.Прочитанное
	|ИЗ
	|	ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ДанныеДляСинхронизации.ИдентификаторСообщения = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|			И (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ДанныеДляСинхронизации.Папка,
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.Прочитанное
	|ИЗ
	|	ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ДанныеДляСинхронизации.ИдентификаторСообщения = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщенияОтправкаIMAP
	|			И (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ДанныеДляСинхронизации.Папка,
	|	ДанныеДляСинхронизации.ИдентификаторНаСервере,
	|	ДанныеДляСинхронизации.Прочитанное
	|ИЗ
	|	ДанныеДляСинхронизации КАК ДанныеДляСинхронизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ДанныеДляСинхронизации.ИдентификаторСообщения = ЭлектронноеПисьмоИсходящее.ХешСумма
	|			И (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДанныеНаСервере.Письмо КАК Письмо,
	|	ВсеДанныеНаСервере.Папка КАК Папка,
	|	ВсеДанныеНаСервере.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ВсеДанныеНаСервере.Прочитанное КАК Прочитанное
	|ПОМЕСТИТЬ ДанныеНаСервере
	|ИЗ
	|	ВсеДанныеНаСервере КАК ВсеДанныеНаСервере
	|ГДЕ
	|	НЕ ВсеДанныеНаСервере.Письмо В
	|				(ВЫБРАТЬ
	|					РегистрСведений.CRM_ОтложенныеОперацииПоIMAP.Письмо КАК Письмо
	|				ИЗ
	|					РегистрСведений.CRM_ОтложенныеОперацииПоIMAP)";
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	Запрос.Параметры.Вставить("ДанныеДляСинхронизации", ДанныеДляСинхронизации);
	Запрос.Выполнить();
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
    // ИЛИ в выборке из временных таблиц
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПапкиПисем.Взаимодействие КАК Письмо,
	|	ПапкиПисем.ПапкаЭлектронногоПисьма КАК Папка,
	|	ПапкиПисем.ИдентификаторНаСервере КАК ИдентификаторНаСервере
	|ПОМЕСТИТЬ ДанныеПапокНаКлиенте
	|ИЗ
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиПисем
	|ГДЕ
	|	ПапкиПисем.Взаимодействие В
	|			(ВЫБРАТЬ
	|				ДанныеНаСервере.Письмо КАК Письмо
	|			ИЗ
	|				ДанныеНаСервере)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеНаСервере.Письмо, ДанныеПапокНаКлиенте.Письмо) КАК Письмо
	|ПОМЕСТИТЬ ИзмененияВПапках
	|ИЗ
	|	ДанныеНаСервере КАК ДанныеНаСервере
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеПапокНаКлиенте КАК ДанныеПапокНаКлиенте
	|		ПО ДанныеНаСервере.Письмо = ДанныеПапокНаКлиенте.Письмо
	|			И ДанныеНаСервере.Папка = ДанныеПапокНаКлиенте.Папка
	|			И ДанныеНаСервере.ИдентификаторНаСервере = ДанныеПапокНаКлиенте.ИдентификаторНаСервере
	|ГДЕ
	|	(ДанныеПапокНаКлиенте.Письмо ЕСТЬ NULL
	|			ИЛИ ДанныеНаСервере.Письмо ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНаСервере.Письмо КАК Письмо,
	|	ДанныеНаСервере.Папка КАК Папка,
	|	ДанныеНаСервере.ИдентификаторНаСервере КАК ИдентификаторНаСервере
	|ИЗ
	|	ДанныеНаСервере КАК ДанныеНаСервере
	|ГДЕ
	|	ДанныеНаСервере.Письмо В
	|			(ВЫБРАТЬ
	|				ИзмененияВПапках.Письмо КАК Письмо
	|			ИЗ
	|				ИзмененияВПапках)
	|ИТОГИ ПО
	|	Письмо";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПисьма = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПисьма.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.CRM_ПапкиВзаимодействий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Взаимодействие.Установить(ВыборкаПисьма.Письмо);
			
			ВыборкаПапки = ВыборкаПисьма.Выбрать();
			Пока ВыборкаПапки.Следующий() Цикл
				
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Взаимодействие = ВыборкаПапки.Письмо;
				НоваяСтрока.ПапкаЭлектронногоПисьма = ВыборкаПапки.Папка;
				НоваяСтрока.ИдентификаторНаСервере = ВыборкаПапки.ИдентификаторНаСервере;
				
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНаСервере.Письмо КАК Письмо,
	|	ДанныеНаСервере.Прочитанное КАК Прочитанное
	|ПОМЕСТИТЬ ДанныеПрочтенияНаСервере
	|ИЗ
	|	ДанныеНаСервере КАК ДанныеНаСервере
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПрочтенияНаСервере.Письмо КАК Письмо,
	|	ДанныеПрочтенияНаСервере.Прочитанное КАК Прочитанное
	|ИЗ
	|	ДанныеПрочтенияНаСервере КАК ДанныеПрочтенияНаСервере
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК НепрочитанныеПисьма
	|		ПО ДанныеПрочтенияНаСервере.Письмо = НепрочитанныеПисьма.Письмо
	|ГДЕ
	|	ДанныеПрочтенияНаСервере.Прочитанное <> ВЫБОР
	|			КОГДА НепрочитанныеПисьма.Письмо ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПисем = Новый Массив;
			МассивПисем.Добавить(Выборка.Письмо);
			УстановитьСнятьПометкуОПрочтении(МассивПисем, Выборка.Прочитанное, Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПеремещениеПисьмаIMAP(Письмо, Папка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "УчетнаяЗапись, ПометкаУдаления");
	
	СинхронизироватьПапкиСПочтовымСервером = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыПисьма.УчетнаяЗапись, "CRM_СинхронизироватьПапкиСПочтовымСервером");
	
	Если Не СинхронизироватьПапкиСПочтовымСервером Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПисьма = ПапкаИИдентификаторПисьма(Письмо);
	Если Не ЗначениеЗаполнено(ДанныеПисьма.Папка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Папка, "Наименование,CRM_ИмяНаСервере");
	
	// Установка нового действия.
	ЗаписьДействия = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьМенеджерЗаписи();
	
	ЗаписьДействия.Письмо = Письмо;
	ЗаписьДействия.УчетнаяЗапись = РеквизитыПисьма.УчетнаяЗапись;
	ЗаписьДействия.Действие = Перечисления.CRM_ДействияПоIMAP.ПереместитьПисьмоВПапку;
	ЗаписьДействия.ИдентификаторНаСервере = ДанныеПисьма.ИдентификаторНаСервере;
	ЗаписьДействия.Папка = ДанныеПисьма.Папка;
	Если ДанныеПапки.CRM_ИмяНаСервере = "" Тогда
		ЗаписьДействия.ПапкаНовая = ДанныеПапки.Наименование;
	Иначе
		ЗаписьДействия.ПапкаНовая = ДанныеПапки.CRM_ИмяНаСервере;
	КонецЕсли;
	ЗаписьДействия.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьУдалениеПисьмаIMAP(Письмо, Удалить) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "УчетнаяЗапись, ПометкаУдаления");
	
	РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыПисьма.УчетнаяЗапись, "CRM_СинхронизироватьПапкиСПочтовымСервером, CRM_УдалятьПисьмаНаПочтовомСервере");
	
	Если Не РеквизитыУчетнойЗаписи.CRM_СинхронизироватьПапкиСПочтовымСервером Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РеквизитыУчетнойЗаписи.CRM_УдалятьПисьмаНаПочтовомСервере Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПисьма = ПапкаИИдентификаторПисьма(Письмо);
	Если Не ЗначениеЗаполнено(ДанныеПисьма.Папка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Удалить Тогда
		
		// Установка нового действия.
		ЗаписьДействия = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьМенеджерЗаписи();
		ЗаписьДействия.Письмо = Письмо;
		ЗаписьДействия.УчетнаяЗапись = РеквизитыПисьма.УчетнаяЗапись;
		ЗаписьДействия.Действие = Перечисления.CRM_ДействияПоIMAP.УдалитьПисьмо;
		ЗаписьДействия.ИдентификаторНаСервере = ДанныеПисьма.ИдентификаторНаСервере;
		ЗаписьДействия.Папка = ДанныеПисьма.Папка;
		ЗаписьДействия.Записать();
		
	Иначе
		
		// Отмена регистрации удаления.
		ЗаписьДействия = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьМенеджерЗаписи();
		ЗаписьДействия.Письмо = Письмо;
		ЗаписьДействия.УчетнаяЗапись = РеквизитыПисьма.УчетнаяЗапись;
		ЗаписьДействия.Действие = Перечисления.CRM_ДействияПоIMAP.УдалитьПисьмо;
		ЗаписьДействия.Прочитать();
		Если ЗаписьДействия.Выбран() Тогда
			ЗаписьДействия.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеПометкиПрочтенияIMAP(Письмо, Пометка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "УчетнаяЗапись, ПометкаУдаления");
	Если РеквизитыПисьма.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьПапкиСПочтовымСервером = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		РеквизитыПисьма.УчетнаяЗапись, "CRM_СинхронизироватьПапкиСПочтовымСервером");
	
	Если Не СинхронизироватьПапкиСПочтовымСервером Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПисьма = ПапкаИИдентификаторПисьма(Письмо);
	Если Не ЗначениеЗаполнено(ДанныеПисьма.Папка) Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление прежнего действия.
	Если Пометка Тогда
		СтароеДействие = Перечисления.CRM_ДействияПоIMAP.СнятьФлагПрочтения;
	Иначе
		СтароеДействие = Перечисления.CRM_ДействияПоIMAP.УстановитьФлагПрочтения;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(РеквизитыПисьма.УчетнаяЗапись);
	НаборЗаписей.Отбор.Письмо.Установить(Письмо);
	НаборЗаписей.Отбор.Действие.Установить(СтароеДействие);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
	// Установка нового действия.
	Если Пометка Тогда
		НовоеДействие = Перечисления.CRM_ДействияПоIMAP.УстановитьФлагПрочтения;
	Иначе
		НовоеДействие = Перечисления.CRM_ДействияПоIMAP.СнятьФлагПрочтения;
	КонецЕсли;
	
	ЗаписьДействия = РегистрыСведений.CRM_ОтложенныеОперацииПоIMAP.СоздатьМенеджерЗаписи();
	
	ЗаписьДействия.Письмо = Письмо;
	ЗаписьДействия.УчетнаяЗапись = РеквизитыПисьма.УчетнаяЗапись;
	ЗаписьДействия.Действие = НовоеДействие;
	ЗаписьДействия.ИдентификаторНаСервере = ДанныеПисьма.ИдентификаторНаСервере;
	ЗаписьДействия.Папка = ДанныеПисьма.Папка;
	ЗаписьДействия.Записать();
	
КонецПроцедуры

Функция ПапкаИИдентификаторПисьма(Письмо)
	
	Результат = Новый Структура;
	Результат.Вставить("Папка", Неопределено);
	Результат.Вставить("ИдентификаторНаСервере", "");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиВзаимодействий.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ВЫБОР
	|		КОГДА ПапкиЭлектронныхПисем.CRM_ИмяНаСервере = """"
	|			ТОГДА ПапкиЭлектронныхПисем.Наименование
	|		ИНАЧЕ ПапкиЭлектронныхПисем.CRM_ИмяНаСервере
	|	КОНЕЦ КАК Папка
	|ПОМЕСТИТЬ ДанныеПапок
	|ИЗ
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	|ГДЕ
	|	ПапкиВзаимодействий.Взаимодействие = &Письмо
	|	И ПапкиВзаимодействий.ИдентификаторНаСервере <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтложенныеОперацииIMAP.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ОтложенныеОперацииIMAP.Папка КАК Папка
	|ПОМЕСТИТЬ ДанныеОпераций
	|ИЗ
	|	РегистрСведений.CRM_ОтложенныеОперацииПоIMAP КАК ОтложенныеОперацииIMAP
	|ГДЕ
	|	ОтложенныеОперацииIMAP.Письмо = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПапок.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
	|	ДанныеПапок.Папка КАК Папка
	|ИЗ
	|	ДанныеПапок КАК ДанныеПапок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОпераций.ИдентификаторНаСервере,
	|	ДанныеОпераций.Папка
	|ИЗ
	|	ДанныеОпераций КАК ДанныеОпераций");
	
	Запрос.Параметры.Вставить("Письмо", Письмо);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////
// Загрузка вложений.

Функция ЗапуститьЗагрузкуВложенийВФоне(Письмо, УникальныйИдентификатор) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Письмо", Письмо);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("CRM_УправлениеЭлектроннойПочтой.ЗагрузитьВложенияПисьма",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Процедура ЗагрузитьВложенияПисьма(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	УчетнаяЗапись = Параметры.Письмо.УчетнаяЗапись;
	
	ПротоколВходящейПочты = УчетнаяЗапись.ПротоколВходящейПочты;
	СинхронизироватьПапкиСПочтовымСервером = УчетнаяЗапись.CRM_СинхронизироватьПапкиСПочтовымСервером;
	
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ПротоколВходящейПочты = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, Протокол);
	Исключение
		
		ТекстСообщения = НСтр("ru='Во время подключения к учетной записи %1 произошла ошибка ""%2""'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			УчетнаяЗапись,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщенияОбОшибке);
		
		Возврат;
		
	КонецПопытки;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПапкиВзаимодействий.ИдентификаторНаСервере КАК ИдентификаторНаСервере
	|ИЗ
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиВзаимодействий
	|ГДЕ
	|	ПапкиВзаимодействий.Взаимодействие = &Взаимодействие");
	
	Запрос.Параметры.Вставить("Взаимодействие", Параметры.Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИдентификаторыДляЗагрузки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторНаСервере) Тогда
			ИдентификаторыДляЗагрузки.Добавить(Выборка.ИдентификаторНаСервере);
		Иначе
			ИдентификаторНаСервере = ИдентификаторНаСервере(Параметры.Письмо, Почта);
			СинхронизироватьПапкиСПочтовымСервером = Ложь;
			ИдентификаторыДляЗагрузки.Добавить(ИдентификаторНаСервере);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторСообщенияОтправкаIMAP = "";
	Если ТипЗнч(Параметры.Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ИдентификаторСообщенияОтправкаIMAP = Параметры.Письмо.ИдентификаторСообщенияОтправкаIMAP;
		Если ЗначениеЗаполнено(ИдентификаторСообщенияОтправкаIMAP) Тогда
			ИдентификаторыДляЗагрузки.Добавить(ИдентификаторСообщенияОтправкаIMAP);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторыДляЗагрузки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыДляЗагрузки);
	
	Если ИдентификаторыДляЗагрузки.Количество() = 0 Тогда
		Почта.Отключиться();
		Возврат;
	КонецЕсли;
	
	Если ПротоколВходящейПочты = "IMAP" Тогда
		
		ДанныеУчетноеЗаписи = Новый Структура;
		ДанныеУчетноеЗаписи.Вставить("Ссылка", УчетнаяЗапись);
		ДанныеУчетноеЗаписи.Вставить("СинхронизироватьПапкиСПочтовымСервером", СинхронизироватьПапкиСПочтовымСервером);
		
		МассивИменАктивныхПапок = ИменаАктивныхПапок(Почта, ДанныеУчетноеЗаписи);
		Для Каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
			Попытка
				Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Сообщения = Почта.Выбрать(Ложь, ИдентификаторыДляЗагрузки, Ложь);
			Если Сообщения.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Сообщения = Почта.Выбрать(Ложь, ИдентификаторыДляЗагрузки, Истина);
	КонецЕсли;
	
	// Отдельная попытка поиска для отправленных.
	Если Сообщения.Количество() = 0 И ПротоколВходящейПочты = "IMAP" Тогда
		Если ТипЗнч(Параметры.Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			
			ДатаОтправкиНачало = НачалоДня(Параметры.Письмо.ДатаОтправления);
			ДатаОтправкиОкончание = ДатаОтправкиНачало + 86400;
			
			ИдентификаторСообщения = Параметры.Письмо.ИдентификаторСообщения;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДатаОтправкиНачало);
			ПараметрыОтбора.Вставить("ДоДатыОтправления", ДатаОтправкиОкончание);
			
			Для Каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
				
				Попытка
					Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
				Исключение
					Продолжить;
				КонецПопытки;
				
				НайденныйИдентификатор = "";
				
				Заголовки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
				Для Каждого Заголовок Из Заголовки Цикл
					Если Заголовок.ИдентификаторСообщения = ИдентификаторСообщения
						Или Заголовок.ИдентификаторСообщения = ИдентификаторСообщенияОтправкаIMAP Тогда
						НайденныйИдентификатор = Заголовок.Идентификатор[0];
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(НайденныйИдентификатор) Тогда
					ИдентификаторыДляЗагрузки.Добавить(НайденныйИдентификатор);
					Сообщения = Почта.Выбрать(Ложь, ИдентификаторыДляЗагрузки, Ложь);
					Если Сообщения.Количество() > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВложений = Новый ТаблицаЗначений;
	ДанныеВложений.Колонки.Добавить("Данные");
	ДанныеВложений.Колонки.Добавить("ХешСумма");
	ДанныеВложений.Колонки.Добавить("Имя");
	ДанныеВложений.Колонки.Добавить("ИмяФайла");
	
	Для Каждого Вложение Из Сообщения[0].Вложения Цикл
		
		Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Вложение.Данные;
		ИначеЕсли ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			ДвоичныеДанные = Вложение.Данные.ПолучитьИсходныеДанные();
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеВложений.Добавить();
		НоваяСтрока.Данные = ДвоичныеДанные;
		НоваяСтрока.ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДвоичныеДанные);
		НоваяСтрока.Имя = Вложение.Имя;
		НоваяСтрока.ИмяФайла = Вложение.ИмяФайла;
		
	КонецЦикла;
	
	ДанныеПрисоединенныхФайлов  = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.Письмо);
	
	Для Каждого ДанныеФайла Из ДанныеПрисоединенныхФайлов Цикл
		
		Если Не ДанныеФайла.ОчищенПоНастройке Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ДанныеВложений.Найти(ДанныеФайла.ХешСумма, "ХешСумма");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(НайденнаяСтрока.Данные);
			
			ИнФормацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВХранилище);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", АдресВХранилище);
			
			// Процедура РаботаСФайлами.ОбновитьФайл изменена для корректного определения пути загружаемого файла.
			CRM_РаботаСФайлами.ОбновитьФайл(ДанныеФайла.Ссылка, ИнформацияОФайле);
			
			ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
			ФайлОбъект.CRM_ОчищенПоНастройке = Ложь;
			ФайлОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Почта.Отключиться();
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Многопоточная доставка почты.

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток1
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток1() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(1);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток2
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток2() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(2);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток3
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток3() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(3);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток4
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток4() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(4);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток5
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток5() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(5);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток6
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток6() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(6);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток7
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток7() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(7);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток8
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток8() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(8);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток9
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток9() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(9);
КонецПроцедуры

// Обработчик регламентного задания CRM_ПолучениеИОтправкаЭлектронныхПисемПоток10
Процедура ПолучениеИОтправкаЭлектронныхПисемПоток10() Экспорт
	ПолучениеИОтправкаЭлектронныхПисемВПотоке(10);
КонецПроцедуры

Процедура ПолучениеИОтправкаЭлектронныхПисемВПотоке(НомерПотока)
	
	ИмяЗадания = "CRM_ПолучениеИОтправкаЭлектронныхПисемПоток" + НомерПотока;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания[ИмяЗадания]);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты") Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ПеренестиДанныеВПисьма();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПотокиДоставки.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.CRM_ПотокиДоставкиПочты КАК ПотокиДоставки
		|ГДЕ
		|	ПотокиДоставки.НомерПотока = &НомерПотока
		|	И ПотокиДоставки.УчетнаяЗапись.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетнаяЗапись";
	Запрос.УстановитьПараметр("НомерПотока", НомерПотока);
	УчетныеЗаписиПотока = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
	
	Если УчетныеЗаписиПотока.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное получение и отправка электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ПолученныеПисьма = ПолученныеПисьма();
	ЗагрузитьЭлектронныеПисьма(ПолученныеПисьма, УчетныеЗаписиПотока);
	ОтправитьЭлектронныеПисьма(ПолученныеПисьма.ПисьмаДляОпределенияПапок,
		 ПолученныеПисьма.ВсеПолученныеПисьма,
		 УчетныеЗаписиПотока);
	
	Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(ПолученныеПисьма.ВсеПолученныеПисьма);
	Взаимодействия.УстановитьПапкиДляМассиваПисем(ПолученныеПисьма.ПисьмаДляОпределенияПапок);
	Взаимодействия.РассчитатьРассмотреноПоПредметам(ПолученныеПисьма.ВсеПолученныеПисьма);
	Взаимодействия.РассчитатьРассмотреноПоКонтактам(ПолученныеПисьма.ВсеПолученныеПисьма);
	
	ОтправитьУведомленияОПрочтении(Ложь, УчетныеЗаписиПотока);
	
	ЗаполнитьПапкиЭлектронныхПисем(УчетныеЗаписиПотока);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное получение и отправка электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Рассылки.

// Выполняет отправку рассылок электронных писем.
Процедура ОтправкаРассылокЭлектронныхПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_ОтправкаРассылокЭлектронныхПисем);
	
	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКонстанты = "CRM_ИспользоватьРассылкиЭлектронныхПисем";
	Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено И НЕ ПолучитьФункциональнуюОпцию(ИмяКонстанты) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Начата регламентная отправка рассылок электронных писем';en='Regulated sending of mailings of electronic letters are beg'"));
	
	МассивПисем = Новый Массив;
	
	// Отправка писем
	
	// Получим массив неотправленных писем, которые пытались отправить 3 раза.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_НеОтправленныеПисьма.Письмо КАК Письмо
	|ИЗ
	|	РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеОтправленныеПисьма
	|ГДЕ
	|	CRM_НеОтправленныеПисьма.Рассылка ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|	И CRM_НеОтправленныеПисьма.Итерация > 2";
	МассивНеОтправленныхПисем = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки КАК УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА) КАК ТребуетсяОпределениеПапки,
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ПредметыПапкиВзаимодействий.Предмет.СервисРассылки КАК СервисРассылки,
	|	ПредметыПапкиВзаимодействий.Предмет.Дата КАК ДатаРассылки,
	|	ПредметыПапкиВзаимодействий.Предмет.Номер КАК НомерРассылки
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК ВременныеДанныеОтправленныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ВременныеДанныеОтправленныхПисем.Письмо
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ЭлектронноеПисьмоИсходящее.УчетнаяЗапись.ИспользоватьДляОтправки
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.CRM_РассылкаЭлектронныхПисем
	|	И (ПредметыПапкиВзаимодействий.Предмет.ДатаНачалаВыполненияРассылки = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ПредметыПапкиВзаимодействий.Предмет.ДатаНачалаВыполненияРассылки <= &ТекущаяДата)
	|	И ПредметыПапкиВзаимодействий.Предмет <> ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
	|	И НЕ ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Предмет КАК Документ.CRM_РассылкаЭлектронныхПисем).ОтправлятьПисьмаСразу
	|	И ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Предмет КАК Документ.CRM_РассылкаЭлектронныхПисем).Запущена
	|	И НЕ ЭлектронноеПисьмоИсходящее.Ссылка В (&МассивНеОтправленныхПисем)
	|	И ВременныеДанныеОтправленныхПисем.Письмо ЕСТЬ NULL
	|
	|ИТОГИ ПО
	|	СервисРассылки,
	|	УчетнаяЗапись";   
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ПисемВПакете = Константы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Получить();
	Если ПисемВПакете <> 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 10", "ПЕРВЫЕ " + Формат(ПисемВПакете, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивНеОтправленныхПисем", МассивНеОтправленныхПисем);
	Запрос.УстановитьПараметр("ТекущаяДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	ВыборкаСервисы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСервисы.Следующий() Цикл
		ВыборкаУчетныеЗаписи = ВыборкаСервисы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
			
			Если ВыборкаСервисы.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
				Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
				Попытка
					Соединение = Новый ИнтернетПочта;
					Соединение.Подключиться(Профиль);
				Исключение
					
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Во время подключения к учетной записи %1 произошла ошибка"
	"%2';en='An error occurred when connecting to account %1"
	"%2'"), ВыборкаУчетныеЗаписи.УчетнаяЗапись, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					                         УровеньЖурналаРегистрации.Ошибка, , ,
					                         ТекстСообщенияОбОшибке);
					
					// Если не можем подключиться к учетной записи, то для всех писем по этой учетной записи
					// создаем запись в РС CRM_НеОтправленныеПисьма.
					ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ТекстСообщенияОбОшибке);
					КонецЦикла;
					
					Продолжить;
					
				КонецПопытки;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаСервисы.СервисРассылки) Тогда
				НастройкиСервиса = CRM_ИнтеграцияССервисамиРассылок.НастройкиСервиса(ВыборкаСервисы.СервисРассылки);
			КонецЕсли;
			
			ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
			Пока ВыборкаПисьма.Следующий() Цикл
				
				ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
				Попытка
					ТекстОшибки = "";
					ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
					Если ВыборкаСервисы.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
						ИдентификаторПисьма = CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение, ПараметрыПисьма);
					ИначеЕсли ЗначениеЗаполнено(ВыборкаСервисы.СервисРассылки) Тогда
						ИдентификаторПисьма = CRM_ИнтеграцияССервисамиРассылок.ВыполнитьОтправкуПисьма(ПисьмоОбъект,
							 ПараметрыПисьма, НастройкиСервиса,
							 ТекстОшибки);
						Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
							Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = ИдентификаторПисьма;
								ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
								ЗаписьСтатуса.Записать();
								ВызватьИсключение ТекстОшибки;
							Иначе
								ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
								ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
								ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
								ЗаписьСтатуса.Записать();
							КонецЕсли;
						Иначе
							ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
							ЗаписьСтатуса.Письмо = ВыборкаПисьма.Ссылка;
							ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
							ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
							ЗаписьСтатуса.Записать();
							ВызватьИсключение ТекстОшибки;
						КонецЕсли;
					КонецЕсли;
				Исключение
					// +CRM	
					// Если не отправилось по причине отсутствия получателей, то кидаем письмо в черновики
					// со статусом черновик.
					Если (ПисьмоОбъект.ПолучателиПисьма.Количество() = 0)
					И (ПисьмоОбъект.ПолучателиКопий.Количество() = 0)
					И (ПисьмоОбъект.ПолучателиСкрытыхКопий.Количество() = 0) Тогда
						ПисьмоОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
						ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВЖурнале", Истина);
						ПисьмоОбъект.Записать();
						Папка = ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Черновики");
						CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
					КонецЕсли;
					// -CRM
					// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
						ТекстОшибки = ИнформацияОбОшибке();
					ДобавитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка, ИнформацияОбОшибке().Описание);
					
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Во время отправки электронного письма %1 произошла ошибка"
	"%2'"), ВыборкаПисьма.ПредставлениеПисьма, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщенияОбОшибке);
					
					Продолжить;
				КонецПопытки;
				
				// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
				// если есть, то удалим.
				УдалитьЗаписьОНеотправленномПисьме(ВыборкаПисьма.Ссылка);
				
				Если ВыборкаПисьма.УдалятьПослеОтправки Тогда
					ПисьмоОбъект.Удалить();
				Иначе
					ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
					Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
						ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
					КонецЕсли;
					ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
					ПисьмоОбъект.Размер = Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
					ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
					ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьВЖурнале", Истина);
					ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
					Папка = ПапкаУчетнойЗаписи(ПисьмоОбъект.УчетнаяЗапись, "Отправленные");
					CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
					Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
						МассивПисем.Добавить(ВыборкаПисьма.Ссылка);
					КонецЕсли;
					
					Если Не ВыборкаСервисы.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP
						И ЗначениеЗаполнено(ВыборкаСервисы.СервисРассылки) Тогда
						
						МенеджерЗаписи = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Письмо = ПисьмоОбъект.Ссылка;
						МенеджерЗаписи.Прочитать();
						Если МенеджерЗаписи.Выбран() Тогда
							МенеджерЗаписи.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправлено;
							МенеджерЗаписи.Записать();
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыборкаСервисы.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
				Соединение.Отключиться();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Проверка завершения рассылок
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РассылкаЭлектронныхПисем.Ссылка КАК Ссылка,
	|	РассылкаЭлектронныхПисем.Представление КАК Представление
	|ПОМЕСТИТЬ ПроверяемыеРассылки
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем КАК РассылкаЭлектронныхПисем
	|ГДЕ
	|	РассылкаЭлектронныхПисем.Запущена
	|	И НЕ РассылкаЭлектронныхПисем.Завершена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеРассылки.Ссылка КАК Ссылка,
	|	ПроверяемыеРассылки.Представление КАК Представление
	|ИЗ
	|	ПроверяемыеРассылки КАК ПроверяемыеРассылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК НеотправленныеПисьма
	|			ПО ПредметыПапкиВзаимодействий.Взаимодействие = НеотправленныеПисьма.Письмо
	|		ПО ПроверяемыеРассылки.Ссылка = ПредметыПапкиВзаимодействий.Предмет
	|			И (ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма <> ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено))
	|			И (НеотправленныеПисьма.Письмо ЕСТЬ NULL)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие ЕСТЬ NULL");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РассылкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РассылкаОбъект.Завершена = Истина;
		Попытка
			РассылкаОбъект.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При завершении рассылки %1 произошла ошибка %2'"), Выборка.Представление, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщенияОбОшибке);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Работа с Punycode.

Функция КодироватьАдресВPunycode(Знач Адрес) Экспорт
	
	КодироватьАдрес = Ложь;
	Для Сч = 1 По СтрДлина(Адрес) Цикл
		Если Не ЭтоASCII(КодСимвола(Адрес, Сч)) Тогда
			КодироватьАдрес = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не КодироватьАдрес Тогда
		Возврат Адрес;
	КонецЕсли;
	
	ЧастиАдреса = СтрРазделить(Адрес, "@", Ложь);
	Если ЧастиАдреса.Количество() <> 2 Тогда
		Возврат Адрес;
	КонецЕсли;
	
	Префикс = "xn--";
	
	ЧастиДоменногоИмени = СтрРазделить(ЧастиАдреса[1], ".", Ложь);
	
	Для Инд = 0 По ЧастиДоменногоИмени.ВГраница() Цикл
		
		Строка = ЧастиДоменногоИмени[Инд];
		Для Сч = 1 По СтрДлина(Строка) Цикл
			Если Не ЭтоASCII(КодСимвола(Строка, Сч)) Тогда
				ЧастиДоменногоИмени[Инд] = Префикс + КодироватьСтрокуВPunycode(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЧастиАдреса[0] + "@" + СтрСоединить(ЧастиДоменногоИмени, ".");
	
КонецФункции

Функция ДекодироватьАдресИзPunycode(Знач Адрес) Экспорт
	
	Префикс = "xn--";
	Если СтрНайти(Адрес, Префикс) = 0 Тогда
		Возврат Адрес;
	КонецЕсли;
	
	ЧастиАдреса = СтрРазделить(Адрес, "@", Ложь);
	Если ЧастиАдреса.Количество() <> 2 Тогда
		Возврат Адрес;
	КонецЕсли;
	
	ЧастиДоменногоИмени = СтрРазделить(ЧастиАдреса[1], ".", Ложь);
	
	Для Инд = 0 По ЧастиДоменногоИмени.ВГраница() Цикл
		Строка = ЧастиДоменногоИмени[Инд];
		Если СтрНачинаетсяС(Строка, Префикс) Тогда
			ЧастиДоменногоИмени[Инд] = ДекодироватьСтрокуИзPunycode(СтрЗаменить(Строка, Префикс, ""));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧастиАдреса[0] + "@" + СтрСоединить(ЧастиДоменногоИмени, ".");
	
КонецФункции

Функция КодироватьСтрокуВPunycode(Знач Строка)
	
	Параметры = ПараметрыКодированияPunycode();
	
	Результат = Новый Массив;
	
	ДлинаСтроки = СтрДлина(Строка);
	
	// Вывод ASCII-символов в начало результирующей строки.
	ОбработаноСимволов = 0;
	Для Сч = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(Строка, Сч);
		Если ЭтоASCII(КодСимвола) Тогда
			Результат.Добавить(Сред(Строка, Сч, 1));
			ОбработаноСимволов = ОбработаноСимволов + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление разделителя ASCII в конец строки.
	КоличествоСимволовASCII = ОбработаноСимволов;
	Если КоличествоСимволовASCII > 0 Тогда
		Результат.Добавить(Параметры.Разделитель);
	КонецЕсли;
	
	ТекущийКодСимвола = Параметры.НачальныйКодСимвола;
	ТекущееСмещение = Параметры.НачальноеСмещение;
	ТекущаяДельта = 0;
	
	// Обработка не-ASCII символов.
	Пока ОбработаноСимволов < ДлинаСтроки Цикл
		
		СледующийКодСимвола = Параметры.МаксимальноеЧисло;
		Для Сч = 1 По ДлинаСтроки Цикл
			КодСимвола = КодСимвола(Строка, Сч);
			Если КодСимвола >= ТекущийКодСимвола И КодСимвола < СледующийКодСимвола Тогда
				СледующийКодСимвола = КодСимвола;
			КонецЕсли;
		КонецЦикла;
		
		ТекущаяДельта = ТекущаяДельта + (СледующийКодСимвола - ТекущийКодСимвола) * (ОбработаноСимволов + 1);
		ТекущийКодСимвола = СледующийКодСимвола;
		
		Для Сч = 1 По ДлинаСтроки Цикл
			
			КодСимвола = КодСимвола(Строка, Сч);
			Если КодСимвола < ТекущийКодСимвола Тогда
				
				ТекущаяДельта = ТекущаяДельта + 1;
				
			ИначеЕсли КодСимвола = ТекущийКодСимвола Тогда
				
				СкорректированнаяДельта = ТекущаяДельта;
				Перемещение = Параметры.Base;
				
				Пока Истина Цикл
					
					Если Перемещение <= ТекущееСмещение Тогда
						ПорядковыйНомер = Параметры.TMin;
					ИначеЕсли Перемещение >= ТекущееСмещение + Параметры.TMax Тогда
						ПорядковыйНомер = Параметры.TMax;
					Иначе
						ПорядковыйНомер = Перемещение - ТекущееСмещение;
					КонецЕсли;
					
					Если СкорректированнаяДельта < ПорядковыйНомер Тогда
						Прервать;
					КонецЕсли;
					
					КодированныйСимвол = СимволПоНомеру(ПорядковыйНомер +
						(СкорректированнаяДельта - ПорядковыйНомер) % (Параметры.Base - ПорядковыйНомер));
					Результат.Добавить(КодированныйСимвол);
					
					СкорректированнаяДельта = Цел((СкорректированнаяДельта - ПорядковыйНомер) / (Параметры.Base - ПорядковыйНомер));
					Перемещение = Перемещение + Параметры.Base;
				КонецЦикла;
				
				Результат.Добавить(СимволПоНомеру(СкорректированнаяДельта));
				
				ТекущееСмещение = АдаптироватьСмещение(ТекущаяДельта, ОбработаноСимволов + 1,
					 ОбработаноСимволов = КоличествоСимволовASCII);
				ТекущаяДельта = 0;
				ОбработаноСимволов = ОбработаноСимволов + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекущаяДельта = ТекущаяДельта + 1;
		ТекущийКодСимвола = ТекущийКодСимвола + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

Функция ДекодироватьСтрокуИзPunycode(Знач Строка)
	
	Параметры = ПараметрыКодированияPunycode();
	
	Результат = Новый Массив;
	
	ПозицияЧтения = СтрНайти(Строка, Параметры.Разделитель, НаправлениеПоиска.СКонца);
	Если ПозицияЧтения > 0 Тогда
		Для Сч = 1 По ПозицияЧтения - 1 Цикл
			Символ = Сред(Строка, Сч, 1);
			Результат.Добавить(Символ);
		КонецЦикла;
	КонецЕсли;
	ПозицияЧтения = ПозицияЧтения + 1;
	
	ТекущийКодСимвола = Параметры.НачальныйКодСимвола;
	ТекущееСмещение = Параметры.НачальноеСмещение;
	ПозицияВставки = 0;
	
	Пока ПозицияЧтения <= СтрДлина(Строка) Цикл
		
		ПредыдущаяПозицияВставки = ПозицияВставки;
		МультипликаторПозицииВставки = 1;
		Перемещение = Параметры.Base;
		
		Пока Истина Цикл
			
			ТекущийСимвол = Сред(Строка, ПозицияЧтения, 1);
			
			ПозицияЧтения = ПозицияЧтения + 1;
			
			ПорядковыйНомерОчередногоСимвола = НомерСимвола(ТекущийСимвол);
			
			ПозицияВставки = ПозицияВставки + ПорядковыйНомерОчередногоСимвола * МультипликаторПозицииВставки;
			
			ПорядковыйНомер = 0;
			Если Перемещение <= ТекущееСмещение Тогда
				ПорядковыйНомер = Параметры.TMin;
			ИначеЕсли Перемещение >= ТекущееСмещение + Параметры.TMax Тогда
				ПорядковыйНомер = Параметры.TMax;
			Иначе
				ПорядковыйНомер = Перемещение - ТекущееСмещение;
			КонецЕсли;
			Если ПорядковыйНомерОчередногоСимвола < ПорядковыйНомер Тогда
				Прервать;
			КонецЕсли;
			
			МультипликаторПозицииВставки = МультипликаторПозицииВставки * (Параметры.Base - ПорядковыйНомер);
			Перемещение = Перемещение + Параметры.Base;
			
		КонецЦикла;
		
		ТекущееСмещение = АдаптироватьСмещение(ПозицияВставки - ПредыдущаяПозицияВставки, Результат.Количество() + 1,
			 ПредыдущаяПозицияВставки = 0);
		
		ТекущийКодСимвола = ТекущийКодСимвола + Цел(ПозицияВставки / (Результат.Количество() + 1));
		ПозицияВставки = ПозицияВставки % (Результат.Количество() + 1);
		Результат.Вставить(ПозицияВставки, Символ(ТекущийКодСимвола));
		ПозицияВставки = ПозицияВставки + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

Функция АдаптироватьСмещение(Знач Дельта, Знач ПозицияСимвола, Знач ПерваяАдаптация)
	
	Параметры = ПараметрыКодированияPunycode();
	
	Дельта = Цел(?(ПерваяАдаптация, Дельта / Параметры.Damp, Дельта / 2));
	Дельта = Дельта + Цел(Дельта / ПозицияСимвола);
	
	ДелительДельты = Параметры.Base - Параметры.TMin;
	Порог = Цел(ДелительДельты * Параметры.TMax / 2);
	Перемещение = 0;
	
	Пока Дельта > Порог Цикл
		Дельта = Цел(Дельта / ДелительДельты);
		Перемещение = Перемещение + Параметры.Base;
	КонецЦикла;
	
	Возврат Перемещение + Цел((ДелительДельты + 1) * Дельта / (Дельта + Параметры.Skew));
	
КонецФункции

Функция СимволПоНомеру(Знач Номер)
	//  0..25 : ASCII a..z
	// 26..35 : ASCII 0..9
	Возврат Символ(Номер + 22 + 75 * (Номер < 26));
КонецФункции

Функция НомерСимвола(Знач Символ)
	
	КодСимвола = КодСимвола(Символ);
	
	КодСимвола0 = КодСимвола("0");
	КодСимволаA = КодСимвола("a");
	
	Если КодСимвола - КодСимвола0 < 10 Тогда
		// '0'..'9' : 26..35
		Возврат КодСимвола - КодСимвола0 + 26;
	ИначеЕсли КодСимвола - КодСимволаA < 26 Тогда
		// 'a'..'z' : 0..25
		Возврат КодСимвола - КодСимволаA;
	КонецЕсли;
	
КонецФункции

Функция ЭтоASCII(Знач КодСимвола)
	Возврат КодСимвола < 128; // 0x80
КонецФункции

Функция ПараметрыКодированияPunycode()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("НачальныйКодСимвола",	128);
	Параметры.Вставить("НачальноеСмещение",		72);
	Параметры.Вставить("МаксимальноеЧисло",		9999999999);
	Параметры.Вставить("Разделитель",			"-");
	Параметры.Вставить("TMin",					1);
	Параметры.Вставить("TMax",					26);
	Параметры.Вставить("Base",					36);
	Параметры.Вставить("Damp",					700);
	Параметры.Вставить("Skew",					38);
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

#КонецОбласти

#Область Измененные

////////////////////////////////////////////////////////////////////////////////
// Получение и отправка писем

Процедура УстановитьДатуПоследнейЗагрузкиПисем(УчетнаяЗапись, ДатаЗагрузки) Экспорт

	МенеджерЗаписи = РегистрыСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись     = УчетнаяЗапись;
	МенеджерЗаписи.ДатаЗагрузкиПисем = ДатаЗагрузки;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ПолучениеИОтправкаЭлектронныхПисем() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент") Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты") Тогда
		Возврат;
	КонецЕсли;
	РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ПеренестиДанныеВПисьма();
	// -CRM
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное получение и отправка электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ПолученныеПисьма = ПолученныеПисьма();
	ЗагрузитьЭлектронныеПисьма(ПолученныеПисьма);
	ОтправитьЭлектронныеПисьма(ПолученныеПисьма.ПисьмаДляОпределенияПапок, ПолученныеПисьма.ВсеПолученныеПисьма);
	
	Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(ПолученныеПисьма.ВсеПолученныеПисьма);
	Взаимодействия.УстановитьПапкиДляМассиваПисем(ПолученныеПисьма.ПисьмаДляОпределенияПапок);
	Взаимодействия.РассчитатьРассмотреноПоПредметам(ПолученныеПисьма.ВсеПолученныеПисьма);
	Взаимодействия.РассчитатьРассмотреноПоКонтактам(ПолученныеПисьма.ВсеПолученныеПисьма);
	
	// +CRM
	ЗаполнитьПапкиЭлектронныхПисем();
	Если ПолученныеПисьма.ВсеПолученныеПисьма.Количество() > 0 Тогда
		ПереслатьПисьма(ПолученныеПисьма.ВсеПолученныеПисьма);
	КонецЕсли;
	// -CRM
	
	ОтправитьУведомленияОПрочтении(Ложь);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное получение и отправка электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

Функция ЗагрузитьЭлектронныеПисьма(ПолученныеПисьма, УчетныеЗаписиПотока = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                        КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                         КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                  КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи
	|	КОНЕЦ                                                                                       КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере                              КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере                              КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя                                               КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты                                         КАК ПротоколВходящейПочты,
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1))      КАК ДатаЗагрузкиПисем,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                        КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	// +CRM
	|	,УчетныеЗаписиЭлектроннойПочты.CRM_СинхронизироватьПапкиСПочтовымСервером КАК СинхронизироватьПапкиСПочтовымСервером,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ИсточникЛидов КАК CRM_ИсточникЛидов,
	|	ВЫБОР
	|		КОГДА ПапкиУчетныхЗаписей.Папка ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА ПапкиУчетныхЗаписей.Папка.CRM_ИмяНаСервере = """"
	|			ТОГДА ПапкиУчетныхЗаписей.Папка.Наименование
	|		ИНАЧЕ ПапкиУчетныхЗаписей.Папка.CRM_ИмяНаСервере
	|	КОНЕЦ КАК ИмяПапкиВходящие,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ПериодСинхронизацииПапок КАК ПериодСинхронизации,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ЗагружатьВложенияПриПолученииПисем КАК ЗагружатьВложения
	// -CRM
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|		ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = ПапкиУчетныхЗаписей.УчетнаяЗапись
	|			И ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие)
	// -CRM
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты <> """"
	// +CRM
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)
	// -CRM
	|	И ВЫБОР
	|		КОГДА &РазделениеВключено
	|			ТОГДА ВЫБОР 
	|				КОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ДатаПоследнегоИспользования, ДАТАВРЕМЯ(1,1,1)) > &ДатаМесяцНазад 
	|					ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	// +CRM
	Если УчетныеЗаписиПотока = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("УчетныеЗаписиПотока", УчетныеЗаписиПотока);
	КонецЕсли;
	// -CRM
	
	Запрос.УстановитьПараметр("ДатаМесяцНазад",     ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), - 1));
	Запрос.УстановитьПараметр("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Получено = 0;
		ПолученныеПисьма.ПолученныеПисьмаПоУчетнойЗаписи.Очистить();
		// @skip-check query-in-loop - Порционная загрузка писем из разных почтовых ящиков.
		ПолучитьПисьма(Выборка, Ложь, Получено, ПолученныеПисьма);
		// @skip-check query-in-loop - Порционная загрузка писем из разных почтовых ящиков.
		ОпределитьЗагруженныеРанееПодчиненныеПисьма(Выборка.Ссылка, ПолученныеПисьма.ПолученныеПисьмаПоУчетнойЗаписи);
	КонецЦикла;

	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ОтправитьЭлектронныеПисьма(ПисьмаДляОпределенияПапок, ВсеПолученныеПисьма, УчетныеЗаписиПотока = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка                                                  КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка)                                   КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки                                    КАК УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись                                           КАК УчетнаяЗапись,
	// +CRM
	//|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА)                      КАК ТребуетсяОпределениеПапки,
	|	ВЫБОР
	|		КОГДА ПапкиУчетныхЗаписей.Папка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                              КАК ТребуетсяОпределениеПапки,
	// -CRM
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
	// +CRM
	|	,ЭлектронноеПисьмоИсходящее.Автор КАК Автор,
	|	ЕСТЬNULL(РассылкаЭлектронныхПисем.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)) КАК Рассылка,
	|	ЕСТЬNULL(РассылкаЭлектронныхПисем.ОтправлятьПисьмаСразу, ЛОЖЬ) КАК РассылкаОтправлятьПисьмаСразу,
	|	ЕСТЬNULL(НеотправленныеПисьма.Итерация, 0) КАК Итерация
	|ПОМЕСТИТЬ ВсеПисьмаКОтправке
	// -CRM
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	// +CRM
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_РассылкаЭлектронныхПисем КАК РассылкаЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.Предмет = РассылкаЭлектронныхПисем.Ссылка
	// -CRM
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО (НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК НеотправленныеПисьма
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = НеотправленныеПисьма.Письмо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК ВременныеДанныеОтправленныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ВременныеДанныеОтправленныхПисем.Письмо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПапкиВзаимодействий.Взаимодействие
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|			ПО ПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиУчетныхЗаписей.Папка
	// -CRM
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	// +CRM
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	// -CRM
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	|	И ВЫБОР
	|		КОГДА &РазделениеВключено
	|			ТОГДА ВЫБОР 
	|				КОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ДатаПоследнегоИспользования, ДАТАВРЕМЯ(1,1,1)) > &ДатаМесяцНазад 
	|					ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	// +CRM
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)
	|	И ВременныеДанныеОтправленныхПисем.Письмо ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПредставлениеПисьма КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки КАК УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.ТребуетсяОпределениеПапки КАК ТребуетсяОпределениеПапки,
	|	ЭлектронноеПисьмоИсходящее.КоличествоПопыток КАК КоличествоПопыток,
	|	ЭлектронноеПисьмоИсходящее.Автор КАК Автор,
	|	ЭлектронноеПисьмоИсходящее.Итерация КАК Итерация,
	|	ЛОЖЬ КАК ЭтоРассылка
	|ПОМЕСТИТЬ ПисьмаКОтправке
	|ИЗ
	|	ВсеПисьмаКОтправке КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_Оповещения КАК Оповещения
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = Оповещения.Документ
	|ГДЕ
	|	Оповещения.Документ ЕСТЬ NULL
	|	И ЭлектронноеПисьмоИсходящее.Рассылка = ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
	|	И ЭлектронноеПисьмоИсходящее.Итерация < 3
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.ТребуетсяОпределениеПапки,
	|	ЭлектронноеПисьмоИсходящее.КоличествоПопыток,
	|	ЭлектронноеПисьмоИсходящее.Автор,
	|	ЭлектронноеПисьмоИсходящее.Итерация,
	|	ИСТИНА
	|ИЗ
	|	ВсеПисьмаКОтправке КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Рассылка <> ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
	|	И ЭлектронноеПисьмоИсходящее.РассылкаОтправлятьПисьмаСразу
	|	И ЭлектронноеПисьмоИсходящее.Итерация < 3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПредставлениеПисьма КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки КАК УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.ТребуетсяОпределениеПапки КАК ТребуетсяОпределениеПапки,
	|	ЭлектронноеПисьмоИсходящее.КоличествоПопыток КАК КоличествоПопыток,
	|	ЭлектронноеПисьмоИсходящее.Автор КАК Автор,
	|	ЭлектронноеПисьмоИсходящее.Итерация КАК Итерация,
	|	ЭлектронноеПисьмоИсходящее.ЭтоРассылка КАК ЭтоРассылка
	|ИЗ
	|	ПисьмаКОтправке КАК ЭлектронноеПисьмоИсходящее
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.ТребуетсяОпределениеПапки,
	|	ЭлектронноеПисьмоИсходящее.КоличествоПопыток,
	|	ЭлектронноеПисьмоИсходящее.Автор,
	|	ЭлектронноеПисьмоИсходящее.Итерация,
	|	ЭлектронноеПисьмоИсходящее.ЭтоРассылка
	|
	// -CRM
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("ТекущаяДата",        ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаМесяцНазад",     ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), - 1));
	Запрос.УстановитьПараметр("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	// +CRM
	Если УчетныеЗаписиПотока = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("УчетныеЗаписиПотока", УчетныеЗаписиПотока);
	КонецЕсли;
	// -CRM
	
	ОтправитьПисьма(Запрос, ВсеПолученныеПисьма, ПисьмаДляОпределенияПапок);
	
КонецПроцедуры

Процедура ОтправитьПисьма(Запрос, ВсеПолученныеПисьма, ПисьмаДляОпределенияПапок,
	 ОтправленоПисем = 0, ЕстьОшибки = Ложь, Интерактивно = Ложь)
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Истина);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		УчетнаяЗапись = ВыборкаУчетныеЗаписи.УчетнаяЗапись;
		// @skip-check query-in-loop - Порционная загрузка писем из разных почтовых ящиков.
		Если Не ЗаблокироватьУчетнуюЗапись(УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РазделениеВключено Тогда
			РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.ОбновитьДатуИспользованияУчетнойЗаписи(УчетнаяЗапись);
		КонецЕсли;
		
		Письма      = Новый Массив;
		ДанныеПисем = Новый Соответствие;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			// +CRM
			Если ЗначениеЗаполнено(ПисьмоОбъект.ИдентификаторСообщения) Тогда
				Продолжить;
			КонецЕсли;
			//ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
			ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
			// -CRM
			Попытка
				Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
			Исключение
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Письмо %1 не подготовлено к отправке по причине:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияОбОшибке, 
					Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема, ПисьмоОбъект.Дата),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо            = ВыборкаПисьма.Ссылка;
				МенеджерЗаписи.КоличествоПопыток = 5;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
				
			КонецПопытки;
			
			Письма.Добавить(Письмо);
			
			ДанныеПисьма = Новый Структура;
			ДанныеПисьма.Вставить("Письмо",              Письмо);
			ДанныеПисьма.Вставить("КоличествоПопыток",   ВыборкаПисьма.КоличествоПопыток);
			ДанныеПисьма.Вставить("ПредставлениеПисьма", ВыборкаПисьма.ПредставлениеПисьма);
			
			ДанныеПисем.Вставить(ВыборкаПисьма.Ссылка, ДанныеПисьма);
			
		КонецЦикла;
		
		ТекстОшибки = Неопределено;
		Попытка
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись, Письма, ТекстОшибки);
			СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись);
		Исключение
			СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись);
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось подключиться к почте %1 по причине:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, 
				УчетнаяЗапись, РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
			
			Если Не ЗначениеЗаполнено(РезультатОтправки) Тогда 
				
				Если Письма.Количество() <> 0 Тогда
					ДанныеПервогоПисьма = СсылкаНаПисьмоПоОтправляемомуПочтовомуСообщению(ДанныеПисем, Письма[0]); 
					
					Если ДанныеПервогоПисьма <> Неопределено Тогда
						
						ПараметрыОбработкиОшибки = ПараметрыОбработкиОшибкиОтправки();
						ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ДанныеПервогоПисьма.Ключ.ПолучитьОбъект();
						ПараметрыОбработкиОшибки.Ссылка                            = ДанныеПервогоПисьма.Ключ;
						ПараметрыОбработкиОшибки.ПредставлениеПисьма               = ДанныеПервогоПисьма.Значение.ПредставлениеПисьма;
						ПараметрыОбработкиОшибки.КоличествоПопыток                 = ДанныеПервогоПисьма.Значение.КоличествоПопыток;
						ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Истина;
						ПараметрыОбработкиОшибки.СообщатьПользователю              = Интерактивно;
						ПараметрыОбработкиОшибки.ТекстОшибки                       = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						
						РезультатОбработкиОшибки = ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, Новый Массив);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
		ТекстыОшибок = Новый Массив;
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			ПисьмоСсылка = ВыборкаПисьма.Ссылка;
			РезультатОтправкиПисьма = РезультатОтправки[ДанныеПисем[ПисьмоСсылка].Письмо];
			ОшибочныеПолучатели = Неопределено;
			Если РезультатОтправкиПисьма <> Неопределено Тогда
				// +CRM Обработка ошибки отправки письма (Пример: отправка письма c вложением exe файла, через gmail) 
				Если РезультатОтправкиПисьма.Свойство("ТекстОшибки") И ЗначениеЗаполнено(РезультатОтправкиПисьма.ТекстОшибки) Тогда
					
					МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Письмо            = ВыборкаПисьма.Ссылка;
					МенеджерЗаписи.КоличествоПопыток = 5;
					МенеджерЗаписи.ИнформацияООшибке = РезультатОтправкиПисьма.ТекстОшибки;
					МенеджерЗаписи.Записать();
					
					ТекстыОшибок.Добавить(РезультатОтправкиПисьма.ТекстОшибки);
					Продолжить;
				КонецЕсли;
				// -CRM
				
				ОшибочныеПолучатели = РезультатОтправкиПисьма.ОшибочныеПолучатели;
				Если ЗначениеЗаполнено(ОшибочныеПолучатели) Тогда
				
					ПараметрыОбработкиОшибки = ПараметрыОбработкиОшибкиОтправки();
					ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
					ПараметрыОбработкиОшибки.Ссылка                            = ВыборкаПисьма.Ссылка;
					ПараметрыОбработкиОшибки.ПредставлениеПисьма               = ВыборкаПисьма.ПредставлениеПисьма;
					ПараметрыОбработкиОшибки.КоличествоПопыток                 = ВыборкаПисьма.КоличествоПопыток;
					ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Истина;
					ПараметрыОбработкиОшибки.СообщатьПользователю              = Интерактивно;
					
					РезультатОбработкиОшибки = ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, ОшибочныеПолучатели);
					Если Не РезультатОбработкиОшибки.ПисьмоОтправлено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтправленоПисем = ОтправленоПисем + 1;
				УдалятьПослеОтправки = ВыборкаПисьма.УдалятьПослеОтправки;
				
				ТекстОшибки = ПослеВыполненияОтправкиПисьма(ПисьмоСсылка, РезультатОтправкиПисьма.ИдентификаторПисьмаSMTP, 
				РезультатОтправкиПисьма.ИдентификаторПисьмаIMAP, УдалятьПослеОтправки, Ложь);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				Если Не ВыборкаПисьма.УдалятьПослеОтправки Тогда
					Если ВыборкаПисьма.ТребуетсяОпределениеПапки Тогда
						ПисьмаДляОпределенияПапок.Добавить(ВыборкаПисьма.Ссылка);
					КонецЕсли;
					ВсеПолученныеПисьма.Добавить(ВыборкаПисьма.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатОтправки.Количество() <> Письма.Количество() Тогда
			
			Для Каждого ОтправляемоеПисьмо Из Письма Цикл
				
				Если РезультатОтправки[ОтправляемоеПисьмо] = Неопределено Тогда
					
					ДанныеПервогоНеотправленногоПисьма = СсылкаНаПисьмоПоОтправляемомуПочтовомуСообщению(ДанныеПисем, ОтправляемоеПисьмо);
					
					Если ДанныеПервогоНеотправленногоПисьма <> Неопределено Тогда
						
						ПараметрыОбработкиОшибки = ПараметрыОбработкиОшибкиОтправки();
						ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ДанныеПервогоНеотправленногоПисьма.Ключ.ПолучитьОбъект();
						ПараметрыОбработкиОшибки.Ссылка                            = ДанныеПервогоНеотправленногоПисьма.Ключ;
						ПараметрыОбработкиОшибки.ПредставлениеПисьма               = ДанныеПервогоНеотправленногоПисьма.Значение.ПредставлениеПисьма;
						ПараметрыОбработкиОшибки.КоличествоПопыток                 = ДанныеПервогоНеотправленногоПисьма.Значение.КоличествоПопыток;
						ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Истина;
						ПараметрыОбработкиОшибки.СообщатьПользователю              = Интерактивно;
						ПараметрыОбработкиОшибки.ТекстОшибки                       = НСтр("ru = 'Непредвиденная ошибка при отправке письма'");
						ПараметрыОбработкиОшибки.ВыполнятьЗаписьВЖурналРегистрации = Ложь;
						
						РезультатОбработкиОшибки = ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, Новый Массив);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстыОшибок) Тогда
			ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаНаПисьмоПоОтправляемомуПочтовомуСообщению(ДанныеПисем, ОтправляемоеПисьмо)
	
	Для Каждого ДанныеПисьма Из ДанныеПисем Цикл
		
		Если ДанныеПисьма.Значение.Письмо = ОтправляемоеПисьмо Тогда
			
			Возврат ДанныеПисьма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РасширениеДляЗашифрованныхФайлов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Возврат МодульЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляЗашифрованныхФайлов;
	Иначе
		Возврат "p7m";
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьУведомленияОПрочтении(ДляТекущегоПользователя, УчетныеЗаписиПотока = Неопределено)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомленияОПрочтении.Письмо КАК Письмо,
		|	ПРЕДСТАВЛЕНИЕ(УведомленияОПрочтении.Письмо) КАК ПредставлениеПисьма,
		|	УведомленияОПрочтении.ДатаПрочтения КАК ДатаПрочтения,
		|	ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении.(
		|		Адрес КАК Адрес,
		|		Представление КАК Представление,
		|		Контакт КАК Контакт
		|	) КАК АдресаУведомленияОПрочтении,
		|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК ОтправительПредставление,
		|	ЭлектронноеПисьмоВходящее.ОтправительАдрес КАК ОтправительАдрес,
		|	ЭлектронноеПисьмоВходящее.Дата КАК Дата,
		|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
		|	ЭлектронноеПисьмоВходящее.Тема КАК Тема,
		// +CRM
		|	ЭлектронноеПисьмоВходящее.Ответственный КАК Ответственный,
		// -CRM
		|	УведомленияОПрочтении.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|			ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|		ПО УведомленияОПрочтении.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	УведомленияОПрочтении.ТребуетсяОтправка
		|	И &ДляТекущегоПользователя
		// +CRM
		|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		// -CRM
		|ИТОГИ ПО
		|	УчетнаяЗапись";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДляТекущегоПользователя", 
		?(ДляТекущегоПользователя, "УведомленияОПрочтении.Пользователь = &Пользователь", "ИСТИНА"));
	Запрос = Новый Запрос(ТекстЗапроса);
	Если ДляТекущегоПользователя Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	// +CRM
	Если УчетныеЗаписиПотока = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("УчетныеЗаписиПотока", УчетныеЗаписиПотока);
	КонецЕсли;
	// -CRM
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		УчетнаяЗапись = ВыборкаУчетныеЗаписи.УчетнаяЗапись;
		Письма = Новый Массив;
		СсылкиПисем = Новый Соответствие;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			ПараметрыПисьма = Новый Структура;
			
			Взаимодействия.ДобавитьВПараметрАдресатов(ВыборкаПисьма, ПараметрыПисьма, "Кому", "АдресаУведомленияОПрочтении");
			
			ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Уведомление о прочтении'") + " / " + "Reading Confirmation");
			ПараметрыПисьма.Вставить("Тело", СформироватьТекстУведомленияОПрочтении(ВыборкаПисьма));
			ПараметрыПисьма.Вставить("Кодировка", "UTF-8");
			ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Обычная);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
			// +CRM
			ПараметрыПисьма.Вставить("GUID", Строка(ВыборкаПисьма.Письмо.УникальныйИдентификатор()));
			ПараметрыПисьма.Вставить("ИмяОтправителя",
				CRM_УправлениеЭлектроннойПочтой.ИмяОтправителяПользователя(УчетнаяЗапись, ВыборкаПисьма.Ответственный));
			// -CRM
			
			Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
			Письма.Добавить(Письмо);
			
			СсылкиПисем.Вставить(Письмо, ВыборкаПисьма.Письмо);
		КонецЦикла;
		
		ОтправленныеПисьма = РаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись, Письма);
		Для Каждого Письмо Из СсылкиПисем Цикл
			Если ОтправленныеПисьма[Письмо.Ключ] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Ссылка = Письмо.Значение;
			УстановитьПризнакОтправкиУведомления(Ссылка, Ложь);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Выполняет получение электронной почты по доступным для пользователя учетным записям.
//
// Параметры:
//   Результат - Структура:
//   * Получено               - Число - в данный параметр будет возвращено количество полученных писем.
//   * ДоступноУчетныхЗаписей - Число - в данный параметр будет возвращено количество доступных пользователю учетных
//                                   записей.
//   * ЕстьОшибки             - Булево - признак наличия ошибок при получении писем.
//
Процедура ЗагрузитьПочтуПользователя(Результат, УчетныеЗаписиПотока)
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Получение почты'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                                        КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                                         КАК АдресЭлектроннойПочты,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование                                                  КАК Наименование,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования, ЛОЖЬ) КАК ПомещатьПисьмоВПапкуПисьмаОснования,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи
	|	КОНЕЦ КАК ОтветственныйЗаОбработкуПисем,
	|	УчетныеЗаписиЭлектроннойПочты.ОставлятьКопииСообщенийНаСервере КАК ОставлятьКопии,
	|	УчетныеЗаписиЭлектроннойПочты.ПериодХраненияСообщенийНаСервере КАК ОставлятьДней,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК ПротоколВходящейПочты,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	|	ЕСТЬNULL(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗагрузкиПисем,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты = ""IMAP""
	|			ТОГДА ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.ОбработкаПисемВыполняетсяВДругомПочтовомКлиенте, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбработкаПисемВедетсяВДругомПочтовомКлиенте
	// +CRM
	|	,УчетныеЗаписиЭлектроннойПочты.CRM_ИсточникЛидов КАК CRM_ИсточникЛидов,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_СинхронизироватьПапкиСПочтовымСервером КАК СинхронизироватьПапкиСПочтовымСервером,
	|	ВЫБОР
	|		КОГДА ПапкиУчетныхЗаписей.Папка ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА ПапкиУчетныхЗаписей.Папка.CRM_ИмяНаСервере = """"
	|			ТОГДА ПапкиУчетныхЗаписей.Папка.Наименование
	|		ИНАЧЕ ПапкиУчетныхЗаписей.Папка.CRM_ИмяНаСервере
	|	КОНЕЦ КАК ИмяПапкиВходящие,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ПериодСинхронизацииПапок КАК ПериодСинхронизации,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ЗагружатьВложенияПриПолученииПисем КАК ЗагружатьВложения
	// -CRM
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	|		ПО (ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|		ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = ПапкиУчетныхЗаписей.УчетнаяЗапись
	|			И ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие)
	// -CRM
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	// +CRM
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)
	// -CRM
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)";
	
	// +CRM
	Запрос.УстановитьПараметр("УчетныеЗаписиПотока", УчетныеЗаписиПотока);
	// -CRM
	
	Выборка = Запрос.Выполнить().Выбрать();

	Результат.ПолученоПисем = 0;
	Результат.ДоступноУчетныхЗаписей = Выборка.Количество();
	Если Результат.ДоступноУчетныхЗаписей = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет доступных учетных записей для получения почты.'"));
		Результат.ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Пока Выборка.Следующий() Цикл
		
		Если РазделениеВключено Тогда
			РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.ОбновитьДатуИспользованияУчетнойЗаписи(Выборка.Ссылка);
		КонецЕсли;
		
		Получено = 0;
		ПолученныеПисьма = ПолученныеПисьма();
		
		// @skip-check query-in-loop - Порционная загрузка писем из разных почтовых ящиков.
		ПолучитьПисьма(Выборка, Результат.ЕстьОшибки, Получено, ПолученныеПисьма);
		Результат.ПолученоПисем = Результат.ПолученоПисем + Получено;
		
		// @skip-check query-in-loop - Порционная загрузка писем из разных почтовых ящиков.
		ОпределитьЗагруженныеРанееПодчиненныеПисьма(Выборка.Ссылка, ПолученныеПисьма.ПолученныеПисьмаПоУчетнойЗаписи);
		Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(ПолученныеПисьма.ВсеПолученныеПисьма);
		Взаимодействия.УстановитьПапкиДляМассиваПисем(ПолученныеПисьма.ПисьмаДляОпределенияПапок);
		Взаимодействия.РассчитатьРассмотреноПоПредметам(ПолученныеПисьма.ВсеПолученныеПисьма);
		Взаимодействия.РассчитатьРассмотреноПоКонтактам(ПолученныеПисьма.ВсеПолученныеПисьма);
		
		// +CRM
		Если ПолученныеПисьма.ВсеПолученныеПисьма.Количество() > 0 Тогда
			ПереслатьПисьма(ПолученныеПисьма.ВсеПолученныеПисьма);
		КонецЕсли;
		// -CRM
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьПочтуПользователя(Результат, УчетныеЗаписиПотока)
	
	ДлительныеОперации.СообщитьПрогресс(, НСтр("ru = 'Отправка почты'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                               КАК УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.Ссылка                                                  КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка)                                   КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УдалятьПослеОтправки                                    КАК УдалятьПослеОтправки,
	// +CRM
	//|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ИСТИНА)                      КАК ТребуетсяОпределениеПапки,
	|	ВЫБОР
	|		КОГДА ПапкиУчетныхЗаписей.Папка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТребуетсяОпределениеПапки,
	|	
	// -CRM
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) КАК КоличествоПопыток
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
	// +CRM
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиУчетныхЗаписей.Папка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_РассылкаЭлектронныхПисем КАК РассылкаЭлектронныхПисем
	|			ПО ПредметыПапкиВзаимодействий.Предмет = РассылкаЭлектронныхПисем.Ссылка
	// -CRM
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК ВременныеДанныеОтправленныхПисем
	|		ПО ВременныеДанныеОтправленныхПисем.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка
	// -CRM
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить < &ТекущаяДата
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭлектронноеПисьмоИсходящее.ДатаАктуальностиОтправки > &ТекущаяДата
	|		КОНЕЦ
	|	И ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0) < 5
	// +CRM
	|	И ЕСТЬNULL(РассылкаЭлектронныхПисем.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка)
	|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&УчетныеЗаписиПотока)
	|	И ВременныеДанныеОтправленныхПисем.Письмо ЕСТЬ NULL 
	// -CRM
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.КоличествоПопыток, 0)
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	// +CRM
	ДоступныеДляОтправкиУчетныеЗаписи = Новый СписокЗначений;
	ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеДляОтправкиУчетныеЗаписи);
	
	ДоступныеУчетныеЗаписиПотока = Новый Массив;
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиПотока Цикл
		Если ДоступныеДляОтправкиУчетныеЗаписи.НайтиПоЗначению(УчетнаяЗапись) <> Неопределено Тогда
			ДоступныеУчетныеЗаписиПотока.Добавить(УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("УчетныеЗаписиПотока", ДоступныеУчетныеЗаписиПотока);
	// -CRM
	
	ПисьмаДляОпределенияПапок = Новый Массив;
	ВсеПолученныеПисьма = Новый Массив;
	Результат.ОтправленоПисем = 0;
	
	ОтправитьПисьма(Запрос, ВсеПолученныеПисьма, ПисьмаДляОпределенияПапок, Результат.ОтправленоПисем,
		 Результат.ЕстьОшибки,
		 Истина);
	
	Взаимодействия.УстановитьПапкиДляМассиваПисем(ПисьмаДляОпределенияПапок);
	ОтправитьУведомленияОПрочтении(Истина);
	
КонецПроцедуры

Процедура ОтправитьЗагрузитьПочтуПользователя(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	// +CRM
	УчетныеЗаписиПотока = ПараметрыВыгрузки.УчетныеЗаписиПотока;
	// -CRM
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправленоПисем",        0);
	Результат.Вставить("ПолученоПисем",          0);
	Результат.Вставить("ДоступноУчетныхЗаписей", 0);
	Результат.Вставить("ЕстьОшибки",             Ложь);
	
	// +CRM
	//ОтправитьПочтуПользователя(Результат);
	//ЗагрузитьПочтуПользователя(Результат);
	РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ПеренестиДанныеВПисьма();
	ОтправитьПочтуПользователя(Результат, УчетныеЗаписиПотока);
	ЗагрузитьПочтуПользователя(Результат, УчетныеЗаписиПотока);
	ЗаполнитьПапкиЭлектронныхПисем(УчетныеЗаписиПотока);
	// -CRM
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Заполняет ИнтернетПочтовыеАдреса в объекте ИнтернетПочтовоеСообщение по переданной таблице адресов.
//
// Параметры:
//  ТабличнаяЧасть  - ИнтернетПочтовыеАдреса - адреса, которые будут заполнены в письме.
//  Адреса          - ТаблицаЗначений - таблица, содержащая адреса для указания в письме.
//
Процедура ЗаполнитьИнтернетПочтовыеАдреса(ТабличнаяЧасть, Адреса) Экспорт
	
	Для Каждого Адрес Из Адреса Цикл
		// +CRM
		Если Адрес.Адрес = "@" Тогда
			Продолжить;
		КонецЕсли;
		// -CRM
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Адрес         = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.Адрес, "");
		// +CRM
		НоваяСтрока.Адрес = ДекодироватьАдресИзPunycode(НоваяСтрока.Адрес);
		НоваяСтрока.Адрес = СтрЗаменить(НоваяСтрока.Адрес, "<", "");
		НоваяСтрока.Адрес = СтрЗаменить(НоваяСтрока.Адрес, ">", "");
		// -CRM
		НоваяСтрока.Представление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Адрес.ОтображаемоеИмя, "");
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Почта - ИнтернетПочта
//  ДанныеУчетнойЗаписи - ВыборкаИзРезультатаЗапроса
//  ИдентификаторыПисемКЗагрузке - Массив из Строка
//  ПолученныеПисьма - см. ПолученныеПисьма
//  ВсеИдентификаторы - Массив из Строка
//
// Возвращаемое значение:
//  Число - количество полученных писем.
//
Функция ПолучитьПисьмаПоИдентификаторам(Почта, ДанныеУчетнойЗаписи, ИдентификаторыПисемКЗагрузке, 
	ПолученныеПисьма, ВсеИдентификаторы = Неопределено, ЭтоЗагрузка = Ложь, НеОбрабатыватьКакНовые = Ложь,
	ТаблицаПустыхИдентификаторов = Неопределено) Экспорт
	
	ПолученоПисем = 0;
	
	Если ИдентификаторыПисемКЗагрузке.Количество() <> 0 Тогда
		
		ОтветственныйЗаОбработкуПисем = ДанныеУчетнойЗаписи.ОтветственныйЗаОбработкуПисем;
		КоличествоОшибокПриЗаписи = 0;
		КоличествоНеАктуальныхСообщений = 0;
		
		// +CRM
		МассивСозданныхПисемДляОповещения = Новый Массив;
		ЭтоПапкаВходящих = ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP"
			И НРег(Почта.ТекущийПочтовыйЯщик) = НРег(ДанныеУчетнойЗаписи.ИмяПапкиВходящие);
		// -CRM
		
		Пока ИдентификаторыПисемКЗагрузке.Количество() > (ПолученоПисем + КоличествоОшибокПриЗаписи + КоличествоНеАктуальныхСообщений) Цикл
			
			КоличествоВПорции = 0;
			ИдентификаторыПорцииДляЗагрузки = Новый Массив;
			
			Для Индекс = (ПолученоПисем + КоличествоОшибокПриЗаписи) По ИдентификаторыПисемКЗагрузке.Количество() - 1 Цикл
				
				ИдентификаторыПорцииДляЗагрузки.Добавить(ИдентификаторыПисемКЗагрузке.Получить(Индекс));
				КоличествоВПорции = КоличествоВПорции + 1;
				Если КоличествоВПорции = 5 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Попытка
				Сообщения = Почта.Выбрать(Ложь, ИдентификаторыПорцииДляЗагрузки,
					?(ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP", Ложь, Истина)); // Массив из ИнтернетПочтовоеСообщение
			Исключение
			
				ТекстОшибкиДляЖурналаРегистрации = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
					ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка());
					
				ТекстОшибкиДляЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключиться к почте ""%1"" по причине:
						|%2';
						|en = 'Cannot connect to the ""%1"" email due to:
						|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ДанныеУчетнойЗаписи.Ссылка,
						ТекстОшибкиДляЖурналаРегистрации);
					
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибкиДляЖурналаРегистрации);
					
				ТекстОшибкиДляПользователя = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
					ИнформацияОбОшибке(), , Ложь);
					
				ТекстОшибкиДляПользователя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключиться к почте ""%1"" по причине:
						 |%2';
						 |en = 'Cannot connect to the ""%1"" email due to:
						 |%2'"),
						ДанныеУчетнойЗаписи.Ссылка,
						ТекстОшибкиДляПользователя);	
				
				ВызватьИсключение ТекстОшибкиДляПользователя;
				
			КонецПопытки;
			
			// +CRM
			Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером Тогда
				ФлагиСообщений = Почта.ПолучитьФлагиСообщений(ИдентификаторыПорцииДляЗагрузки);
			Иначе
				ФлагиСообщений = Новый Соответствие;
			КонецЕсли;
			// -CRM
			
			КоличествоНеАктуальныхСообщений = КоличествоНеАктуальныхСообщений + (КоличествоВПорции - Сообщения.Количество());
			
			Для Каждого Сообщение Из Сообщения Цикл
				
				ДобавлятьВМассивПисемДляПолученияПапки = Ложь;
				
				Блокировка = Новый БлокировкаДанных;
				Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
					ЭлементБлокировки = Блокировка.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.ПапкиЭлектронныхПисем");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					Блокировка.Добавить("РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем");
					Блокировка.Добавить("РегистрСведений.УведомленияОПрочтении");
					Блокировка.Добавить("Документ.ЭлектронноеПисьмоИсходящее");
					Блокировка.Добавить("Документ.ЭлектронноеПисьмоВходящее");
				КонецЕсли;
				
				НачатьТранзакцию();
				
				Попытка
					Блокировка.Заблокировать();
					
					ЭтоИсходящееПисьмо = ПочтовыеАдресаРавны(ДанныеУчетнойЗаписи.АдресЭлектроннойПочты,
						АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель));
					
					// +CRM
					//// @skip-check query-in-loop - По-объектная запись данных.
					//СозданноеПисьмо = ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи, Сообщение, 
					//	ОтветственныйЗаОбработкуПисем, ДанныеУчетнойЗаписи.ПомещатьПисьмоВПапкуПисьмаОснования,
					//	ДобавлятьВМассивПисемДляПолученияПапки, ЭтоИсходящееПисьмо);
					
					ЭтоИсходящееПисьмо = ЭтоИсходящееПисьмо И Не ЭтоПапкаВходящих;
					
					ФлагиСообщения = ФлагиСообщений.Получить(?(Сообщение.Идентификатор.Количество() = 0, "",
						 Сообщение.Идентификатор[0]));
						 
					ПапкаЗагрузки = Неопределено;
					Если ЭтоЗагрузка Тогда
						ПапкаЗагрузки = Справочники.ПапкиЭлектронныхПисем.НайтиПоРеквизиту("CRM_ИмяНаСервере", Почта.ТекущийПочтовыйЯщик,
							 , ДанныеУчетнойЗаписи.Ссылка);
					КонецЕсли;
					
					ХешСумма = Неопределено;
					Если ТаблицаПустыхИдентификаторов <> Неопределено Тогда
						НайденнаяСтрока = ТаблицаПустыхИдентификаторов.Найти(Сообщение.Идентификатор[0], "ИдентификаторНаСервере");
						Если НайденнаяСтрока <> Неопределено Тогда
							ХешСумма = НайденнаяСтрока.ХешСумма;
						КонецЕсли;
					КонецЕсли;
					
					// @skip-check query-in-loop - По-объектная запись данных.
					СозданноеПисьмо = ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи, Сообщение, 
						ОтветственныйЗаОбработкуПисем, ДанныеУчетнойЗаписи.ПомещатьПисьмоВПапкуПисьмаОснования,
						ДобавлятьВМассивПисемДляПолученияПапки, ЭтоИсходящееПисьмо, ЭтоЗагрузка,
						ПолученныеПисьма, ФлагиСообщения, ПапкаЗагрузки, НеОбрабатыватьКакНовые, ХешСумма);
					// -CRM
					
					ПолученоПисем = ПолученоПисем + 1;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить письмо %1 от %2, отправленное c адреса %3, по причине:
						|%4';
						|en = 'Cannot receive the %1 email dated %2 from %3. Reason:
						|%4'", ОбщегоНазначения.КодОсновногоЯзыка()),
							Сообщение.Тема, Сообщение.ДатаОтправления, Сообщение.Отправитель.Адрес,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , ,
						ТекстСообщенияОбОшибке);
					
					КоличествоОшибокПриЗаписи = КоличествоОшибокПриЗаписи + 1;
					
					Если ВсеИдентификаторы <> Неопределено Тогда
						Для Каждого ИдентификаторСообщения Из Сообщение.Идентификатор Цикл
							ИндексИдентификатораВМассиве = ВсеИдентификаторы.Найти(ИдентификаторСообщения);
							Если ИндексИдентификатораВМассиве <> Неопределено Тогда
								ВсеИдентификаторы.Удалить(ИндексИдентификатораВМассиве);
							КонецЕсли;
							Продолжить;
						КонецЦикла;
					КонецЕсли;
					
				КонецПопытки;
				
				// +CRM
				Если Не ЗначениеЗаполнено(СозданноеПисьмо) Тогда
					Продолжить;
				КонецЕсли;
				// -CRM
				
				ПолученныеПисьма.ВсеПолученныеПисьма.Добавить(СозданноеПисьмо);
				ПолученныеПисьма.ПолученныеПисьмаПоУчетнойЗаписи.Добавить(СозданноеПисьмо);
				Если ДобавлятьВМассивПисемДляПолученияПапки Тогда
					ПолученныеПисьма.ПисьмаДляОпределенияПапок.Добавить(СозданноеПисьмо);
				КонецЕсли;
				
				// +CRM
				Если Не ЭтоИсходящееПисьмо Тогда
					МассивСозданныхПисемДляОповещения.Добавить(СозданноеПисьмо);
				КонецЕсли;
				
				Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером И Не ЭтоЗагрузка Тогда
					Если ЗначениеЗаполнено(СозданноеПисьмо.ИдентификаторСообщения) Тогда
						ДанныеДляПоиска = Новый Структура("ИдентификаторПисьма", СозданноеПисьмо.ИдентификаторСообщения);
					Иначе
						ДанныеДляПоиска = Новый Структура("ХешСумма", СозданноеПисьмо.ХешСумма);
					КонецЕсли;
					НайденныеСтроки = ПолученныеПисьма.ПолученныеПапки.НайтиСтроки(ДанныеДляПоиска);
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.Письмо = СозданноеПисьмо;
					КонецЦикла;
					
				КонецЕсли;
				// -CRM
				
			КонецЦикла;
			
		КонецЦикла;
		
		// +CRM
		CRM_НапоминанияСервер.ДобавитьНапоминанияОВходящихПисьмах(МассивСозданныхПисемДляОповещения,
			 ДанныеУчетнойЗаписи.Ссылка);
		// -CRM
		
	КонецЕсли;
	
	Возврат ПолученоПисем;
	
КонецФункции

// Параметры:
//  ДанныеУчетнойЗаписи - ВыборкаИзРезультатаЗапроса
//  Почта - ИнтернетПочта
//  ПолученоПисем - Число
//  ПолученныеПисьма - см. ПолученныеПисьма
//
Процедура ПолучитьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта, ПолученоПисем, ПолученныеПисьма)
	
	// +CRM
	//МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	ИменаАктивныхПапок = ИменаАктивныхПапок(Почта, ДанныеУчетнойЗаписи);
	// -CRM
	
	КвалификаторСтроки255 =  Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(255,
		 ДопустимаяДлина.Переменная));
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки255);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки255);
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторОригинальногоПисьмаMicrosoft", КвалификаторСтроки255);
	
	ТаблицаПустыхИдентификаторов  = Новый ТаблицаЗначений;
	ТаблицаПустыхИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки255);
	ТаблицаПустыхИдентификаторов.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	
	ДатаЗагрузкиПисем = ТекущаяДатаСеанса();
	
	// +CRM
	Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером Тогда
		
		ПолученныеПапки = Новый ТаблицаЗначений;
		ПолученныеПапки.Колонки.Добавить("Письмо");
		ПолученныеПапки.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки255);
		ПолученныеПапки.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки255);
		ПолученныеПапки.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(32));
		ПолученныеПапки.Колонки.Добавить("Папка", КвалификаторСтроки255);
		
		УстановленныеПапкиIMAP = Новый ТаблицаЗначений;
		УстановленныеПапкиIMAP.Колонки.Добавить("Письмо");
		УстановленныеПапкиIMAP.Колонки.Добавить("Папка", КвалификаторСтроки255);
		
		Для Каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
			
			Попытка
				Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
			Исключение
				Продолжить;
			КонецПопытки;
			
			ПараметрыОтбора = Новый Структура;
			Если Не ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем = Дата(1, 1, 1) Тогда 
				ПараметрыОтбора.Вставить("ПослеДатыОтправления",
					ДатаОтбораЗагрузкиПисемПоПротоколуIMAP(ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем));
			Иначе
				ПараметрыОтбора.Вставить("Удаленные", Ложь);
			КонецЕсли;
			
			Попытка
				ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить заголовки писем для папки ""%1"" учетной записи ""%2"", по причине: %3'"),
				ИмяАктивнойПапки, ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, 
				РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка(), Ложь)); 
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПапкиЭлектронныхПисем,, ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			КоличествоПисемКЗагрузке = ЗаголовкиПисемДляЗагрузки.Количество();
			Если КоличествоПисемКЗагрузке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Начало получения писем из папки ""%1"" учетной записи ""%2"". Писем к загрузке: %3'"),
			                ИмяАктивнойПапки, ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, КоличествоПисемКЗагрузке); 
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.ПапкиЭлектронныхПисем,, ТекстСообщения);
				
			Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
				
				НоваяСтрока = ПолученныеПапки.Добавить();
				// +CRM
				//Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
				Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) 
					Или СтрНайти(НРег(ЗаголовокПисьма.ИдентификаторСообщения), "null") > 0 Тогда
				// -CRM
					НоваяСтрока.ХешСумма               = ХешСуммаПочтовогоСообщения(ЗаголовокПисьма);
				КонецЕсли;
				НоваяСтрока.ИдентификаторНаСервере = ?(ЗаголовокПисьма.Идентификатор.Количество() = 0,
				                                       "", 
				                                       ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ЗаголовокПисьма.Идентификатор[0], ""));
				НоваяСтрока.ИдентификаторПисьма    = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ЗаголовокПисьма.ИдентификаторСообщения,
					 "");
				НоваяСтрока.Папка = ИмяАктивнойПапки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПолученныеПисьма.Вставить("ПолученныеПапки", ПолученныеПапки);
		ПолученныеПисьма.Вставить("УстановленныеПапкиIMAP", УстановленныеПапкиIMAP);
		
	КонецЕсли;
	// -CRM
	
	Для каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		Если Не ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем = Дата(1, 1, 1) Тогда 
			ПараметрыОтбора.Вставить("ПослеДатыОтправления",
				ДатаОтбораЗагрузкиПисемПоПротоколуIMAP(ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем));
		Иначе
			ПараметрыОтбора.Вставить("Удаленные", Ложь);
		КонецЕсли;
		
		Попытка
			ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить заголовки писем для папки ""%1"" учетной записи ""%2"", по причине: %3'"),
				ИмяАктивнойПапки, ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, 
				РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка(), Ложь)); 
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПапкиЭлектронныхПисем,, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоПисемКЗагрузке = ЗаголовкиПисемДляЗагрузки.Количество();
		Если КоличествоПисемКЗагрузке = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Начало получения писем из папки ""%1"" учетной записи ""%2"". Писем к загрузке: %3'"),
		                ИмяАктивнойПапки, ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, КоличествоПисемКЗагрузке); 
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ПапкиЭлектронныхПисем,, ТекстСообщения);
		
		ЗаголовкиСПустымИдентификатором = Новый Массив;
		ТаблицаИдентификаторов.Очистить();
		ТаблицаПустыхИдентификаторов.Очистить();
		
		Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
			// +CRM
			//Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
			Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) 
				Или СтрНайти(НРег(ЗаголовокПисьма.ИдентификаторСообщения), "null") > 0 Тогда
			// -CRM
				ЗаголовкиСПустымИдентификатором.Добавить(ЗаголовокПисьма);
				Продолжить;
			КонецЕсли;
			ОпределитьИдентификаторыВходящегоСообщения(ЗаголовокПисьма, ТаблицаИдентификаторов);
		КонецЦикла;
		
		Если ЗаголовкиСПустымИдентификатором.Количество() > 0 Тогда
			Для Каждого ЗаголовокПисьма Из ЗаголовкиСПустымИдентификатором Цикл
				НоваяСтрока = ТаблицаПустыхИдентификаторов.Добавить();
				НоваяСтрока.ИдентификаторНаСервере = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(
					ЗаголовокПисьма.Идентификатор[0], "");
				НоваяСтрока.ХешСумма = ХешСуммаПочтовогоСообщения(ЗаголовокПисьма);
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаИдентификаторов.Количество() > 0 Или ЗаголовкиСПустымИдентификатором.Количество() > 0 Тогда
		
			// АПК:96-выкл Ключевое слово ОБЪЕДИНИТЬ, т.к. двум запросам-условиям может соответствовать письмо с одним и тем же идентификатором.
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма КАК ИдентификаторПисьма,
			|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
			|	ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft КАК ИдентификаторОригинальногоПисьмаMicrosoft
			|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
			|ИЗ
			|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПустыеИдентификаторыПисемКЗагрузке.ХешСумма,
			|	ПустыеИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
			|ПОМЕСТИТЬ ПустыеИдентификаторыПисемКЗагрузке
			|ИЗ
			|	&ПустыеИдентификаторыПисемКЗагрузке КАК ПустыеИдентификаторыПисемКЗагрузке
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере
			|ИЗ
			|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
			|		ПО ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
			|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
			|		ПО (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
			|			И (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
			|				ИЛИ ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщенияОтправкаIMAP
			|				ИЛИ ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
			|					И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
			|					И ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения <> """")
			// +CRM
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК ВременныеДанныеОтправленныхПисем
			|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ВременныеДанныеОтправленныхПисем.ИдентификаторСообщения
			|			ИЛИ	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ВременныеДанныеОтправленныхПисем.ИдентификаторСообщенияОтправкаIMAP)
			|			И (ВременныеДанныеОтправленныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
			// -CRM
			|ГДЕ
			|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL
			|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL
			// +CRM
			|	И ВременныеДанныеОтправленныхПисем.Письмо ЕСТЬ NULL
			// -CRM
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере
			|ИЗ
			|	ПустыеИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
			|		ПО ИдентификаторыПисемКЗагрузке.ХешСумма = ЭлектронноеПисьмоВходящее.ХешСумма
			|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
			|		ПО (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
			|			И (ИдентификаторыПисемКЗагрузке.ХешСумма = ЭлектронноеПисьмоИсходящее.ХешСумма)
			|ГДЕ
			|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL
			|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL";
			// АПК:96-вкл
			
			Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
			Запрос.УстановитьПараметр("ПустыеИдентификаторыПисемКЗагрузке", ТаблицаПустыхИдентификаторов);
			Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
			
			// @skip-check query-in-loop - Порционная загрузка писем из папок.
			ИдентификаторыПисемКЗагрузке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
			
			ПолученоПисемПоИдентификаторам = ПолучитьПисьмаПоИдентификаторам(Почта, ДанныеУчетнойЗаписи, 
			                        ИдентификаторыПисемКЗагрузке, ПолученныеПисьма, , , , ТаблицаПустыхИдентификаторов);
			
			ПолученоПисем = ПолученоПисем + ПолученоПисемПоИдентификаторам;
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Получено писем из папки ""%1"" учетной записи ""%2"": %3'"),
			                ИмяАктивнойПапки, ДанныеУчетнойЗаписи.АдресЭлектроннойПочты, ПолученоПисемПоИдентификаторам); 
		
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Информация,
			                         Метаданные.Справочники.ПапкиЭлектронныхПисем,
			                         ,
			                         ТекстСообщения);
		
		КонецЕсли;
	КонецЦикла;
	
	// +CRM
	// Синхронизация измененных на клиенте папок с сервером.
	Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером Тогда
		
		CRM_Взаимодействия.УстановитьПапкиДляМассиваПисем(ПолученныеПисьма.ПисьмаДляОпределенияПапок,
			 ПолученныеПисьма.УстановленныеПапкиIMAP);
		ПолученныеПисьма.ПисьмаДляОпределенияПапок.Очистить();
		
		ПолученныеПапки = ПолученныеПисьма.ПолученныеПапки;
		УстановленныеПапкиIMAP = ПолученныеПисьма.УстановленныеПапкиIMAP;
		
		Если УстановленныеПапкиIMAP.Количество() > 0 Тогда
			
			УдаляемыеСтроки = Новый Массив;
			Для Каждого Строка Из ПолученныеПапки Цикл
				Если Не ЗначениеЗаполнено(Строка.Письмо) Тогда
					УдаляемыеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			Если УдаляемыеСтроки.Количество() > 0 Тогда
				Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					ПолученныеПапки.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого Строка Из УстановленныеПапкиIMAP Цикл
				
				ДанныеОтбора = Новый Структура("Письмо", Строка.Письмо);
				НайденныеСтроки = ПолученныеПапки.НайтиСтроки(ДанныеОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ПапкаНазначения = НайденнаяСтрока.Папка;
					
					Если ПапкаНазначения = Строка.Папка Тогда
						Продолжить;
					КонецЕсли;
					
					Если Почта.ТекущийПочтовыйЯщик <> ПапкаНазначения Тогда
						Попытка
							Почта.ТекущийПочтовыйЯщик = ПапкаНазначения;
						Исключение
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					
					ПеремещаемыеИдентификаторы = Новый Массив;
					ПеремещаемыеИдентификаторы.Добавить(НайденнаяСтрока.ИдентификаторНаСервере);
					// BSLLS:MissingCodeTryCatchEx-off
					Попытка
						Почта.ПереместитьВПочтовыйЯщик(ПеремещаемыеИдентификаторы, Строка.Папка);
					Исключение
						// Обработка не требуется.
					КонецПопытки;
					// BSLLS:MissingCodeTryCatchEx-on

					Прервать;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ДанныеУчетнойЗаписи.ДатаЗагрузкиПисем = Дата(1, 1, 1) Тогда
			ВыполнитьОтложенныеОперацииПоIMAP(ДанныеУчетнойЗаписи, Почта, ИменаАктивныхПапок);
			СинхронизироватьПисьмаВПапкахПоIMAP(ДанныеУчетнойЗаписи, Почта, ИменаАктивныхПапок, ДатаЗагрузкиПисем);
		КонецЕсли;
		
	КонецЕсли;
	// -CRM
	
	УстановитьДатуПоследнейЗагрузкиПисем(ДанныеУчетнойЗаписи.Ссылка, ДатаЗагрузкиПисем);
	
КонецПроцедуры

Процедура СинхронизироватьПризнакРассмотреноССервером(Почта, ДанныеУчетнойЗаписи, МассивЗагруженныхПисем)

	Если НЕ ДанныеУчетнойЗаписи.ОбработкаПисемВедетсяВДругомПочтовомКлиенте Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM
	//МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
	МассивИменАктивныхПапок = ИменаАктивныхПапок(Почта, ДанныеУчетнойЗаписи);
	// -CRM
	
	МассивИдентификаторовНеПрочитанныхПисем = Новый Массив;
	
	Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Прочитанные", Ложь);
		
		Попытка
			ЗаголовкиПрочитанныхПисем = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Для Каждого ЗаголовокПисьма Из ЗаголовкиПрочитанныхПисем Цикл
			
			МассивИдентификаторовНеПрочитанныхПисем.Добавить(ЗаголовокПисьма.ИдентификаторСообщения);
			
		КонецЦикла;
			
	КонецЦикла;
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	// +CRM
	// ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", 
	//                                        Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", 
	                                        Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	// -CRM
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаИдентификаторов,
	                                                       МассивИдентификаторовНеПрочитанныхПисем,
	                                                       "Идентификатор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИдентификаторыПрочтенныхПисем.Идентификатор
	|ПОМЕСТИТЬ ИдентификаторыПрочтенныхПисем
	|ИЗ
	|	&ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК Рассмотрено
	|ИЗ
	|	ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ПО ИдентификаторыПрочтенныхПисем.Идентификатор = Взаимодействия.ИдентификаторСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие)
	|ГДЕ
	|	Взаимодействия.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыПрочтенныхПисем КАК ИдентификаторыПрочтенныхПисем
	|		ПО ИдентификаторыПрочтенныхПисем.Идентификатор = Взаимодействия.ИдентификаторСообщения
	|ГДЕ
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ЛОЖЬ
	|	И Взаимодействия.УчетнаяЗапись = &УчетнаяЗапись
	|	И ИдентификаторыПрочтенныхПисем.Идентификатор IS NULL";
	
	Запрос.УстановитьПараметр("ИдентификаторыПрочтенныхПисем", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисемРассмотрено   = Новый Массив;
	МассивПисемНеРассмотрено = Новый Массив;
	
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		ТаблицаОбластиБлокировки = Новый ТаблицаЗначений;
		ТаблицаОбластиБлокировки.Колонки.Добавить("Взаимодействие");
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Рассмотрено Тогда
				МассивПисемРассмотрено.Добавить(Выборка.Ссылка);
			Иначе
				МассивПисемНеРассмотрено.Добавить(Выборка.Ссылка);
			КонецЕсли;
			НоваяСтрока = ТаблицаОбластиБлокировки.Добавить();
			НоваяСтрока.Взаимодействие = Выборка.Ссылка;
		КонецЦикла;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПредметыПапкиВзаимодействий");
		ЭлементБлокировки.ИсточникДанных = ТаблицаОбластиБлокировки;
		Блокировка.Заблокировать();
	
		ЕстьИзменения = Ложь;
		
		Взаимодействия.УстановитьПризнакРассмотрено(МассивПисемРассмотрено, Истина, ЕстьИзменения);
		Взаимодействия.УстановитьПризнакРассмотрено(МассивПисемНеРассмотрено, Ложь, ЕстьИзменения);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗагруженныхПисем, МассивПисемРассмотрено, Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗагруженныхПисем, МассивПисемНеРассмотрено, Ложь);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения =
			НСтр("ru = 'Не удалось изменить информацию о признаке рассмотрено для писем по причине : %Причина%.'");
		ТекстСообщения = 
			СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ПредметыПапкиВзаимодействий,
			,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Записать электронное письмо
//
// Параметры:
//  ДанныеУчетнойЗаписи						 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Учетная запись.
//  Сообщение								 - ИнтернетПочтовоеСообщение  - Сообщение.
//  ОтветственныйЗаОбработкуПисем			 - СправочникСсылка.Пользователи - Ответственнный за обработку писем. 
//  ПомещатьПисьмоВПапкуПисьмаОснования		 - Булево - Помещать письмо в папку письма основания.
//  ДобавлятьВМассивПисемДляПолученияПапки	 - Булево - Добавлять в массив писем для получения папки. 
//  ЭтоИсходящееПисьмо						 - Булево - Тип письма. 
//  ЭтоЗагрузкаПисьма						 - Булево - Признак загрузки.
//  ПапкаIMAP						 		 - Строка - Папка IMAP.
//  ФлагиСообщения						 	 - Соответствие - Флаги сообщения.
//  ПапкаЗагрузки							 - СправочникСсылка.ПапкиЭлектронныхПисем - Папка для загрузки электронного письма
// 
// Возвращаемое значение:
//  ДокументСсылка - Электронное письмо.
//
Функция ЗаписатьЭлектронноеПисьмо(ДанныеУчетнойЗаписи, Сообщение, ОтветственныйЗаОбработкуПисем,
	ПомещатьПисьмоВПапкуПисьмаОснования, ДобавлятьВМассивПисемДляПолученияПапки, ЭтоИсходящееПисьмо,
	ЭтоЗагрузкаПисьма = Ложь, СтруктураМассивовСозданныхПисем = Неопределено, ФлагиСообщения = Неопределено,
	ПапкаЗагрузки = Неопределено, НеОбрабатыватьКакНовое, ХешСумма) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если ЭтоИсходящееПисьмо Тогда
			Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		Иначе
			Письмо = Документы.ЭлектронноеПисьмоВходящее.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение, ЭтоИсходящееПисьмо, ХешСумма);
		Письмо.УчетнаяЗапись = ДанныеУчетнойЗаписи.Ссылка;
		
		// +CRM
		Если НеОбрабатыватьКакНовое Тогда
			Письмо.ДополнительныеСвойства.Вставить("НеОбрабатыватьКакНовое", Истина);
		КонецЕсли;
		// -CRM
		
		ПредметИПапка = ПредметИПапкаЗагружаемогоПисьма(Письмо, ДанныеУчетнойЗаписи.Ссылка,
		                                                ЭтоИсходящееПисьмо, ПомещатьПисьмоВПапкуПисьмаОснования);
		// +CRM
		//ЗаполнитьКонтактыВЗагружаемомПисьме(Письмо, ЭтоИсходящееПисьмо);
		//Письмо.Ответственный = ОтветственныйЗаОбработкуПисем;
		ЗаполнитьКонтактыВЗагружаемомПисьме(Письмо, ЭтоИсходящееПисьмо, ДанныеУчетнойЗаписи.Ссылка);
		Если Не ЭтоИсходящееПисьмо Тогда
			Справочники.CRM_ПравилаОбработкиОбращений.ПрименитьПравило(Письмо);
		КонецЕсли;
		Если Не (ЗначениеЗаполнено(Письмо.Ответственный) 
			ИЛИ (Не ЭтоИсходящееПисьмо И ЗначениеЗаполнено(Письмо.CRM_РольОтветственного))) Тогда
			Письмо.Ответственный = ОтветственныйЗаОбработкуПисем;
			Если ЗначениеЗаполнено(ПредметИПапка.Предмет) И ТипЗнч(ПредметИПапка.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				Письмо.Ответственный = ПредметИПапка.Предмет.Ответственный;
			Иначе
				
				// Попытка сопоставить пользователя входящему письму по его персональной настройке для данной учетной записи
				ОтветственныйПоИмениПользователя = Неопределено;
				Если НЕ ЭтоИсходящееПисьмо И Письмо.ПолучателиПисьма.Количество() > 0 Тогда
					МассивПредставлений = Письмо.ПолучателиПисьма.Выгрузить().ВыгрузитьКолонку("Представление");
					ОтветственныйПоИмениПользователя = 
						CRM_ОбщегоНазначенияСервер.НайтиОтветственногоПоИмениПользователя(Письмо.УчетнаяЗапись, МассивПредставлений);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОтветственныйПоИмениПользователя) Тогда
					Письмо.Ответственный = ОтветственныйПоИмениПользователя;
				Иначе // Стандартное заполнение из учетной записи
					Если Не ЭтоИсходящееПисьмо И ЗначениеЗаполнено(Письмо.УчетнаяЗапись.CRM_РольОтветственного) Тогда
						Письмо.CRM_РольОтветственного = Письмо.УчетнаяЗапись.CRM_РольОтветственного;
					Иначе
						Письмо.Ответственный = Письмо.УчетнаяЗапись.CRM_Ответственный;
					КонецЕсли;
				КонецЕсли;			
				
			КонецЕсли;
		КонецЕсли;
		// -CRM
		Письмо.Записать();
		
		// +CRM
		РезультатОбработки = Справочники.CRM_ПравилаОбработкиОбращений.ОбработатьОбращение(Письмо, ПапкаЗагрузки);
		ПапкаУстановлена = РезультатОбработки.ПапкаУстановлена;
		
		Если ПапкаУстановлена Тогда
			Папка = РезультатОбработки.Папка;
		КонецЕсли;
		
		// Снимем установим отметку о прочтение
		Если (ФлагиСообщения <> Неопределено И Не ФлагиСообщения.Прочитанное)
			Или (ФлагиСообщения = Неопределено И ТипЗнч(Письмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")) Тогда
			
			УстановитьСнятьПометкуОПрочтении(Письмо.Ссылка, Ложь, Ложь);
			
		КонецЕсли;
		// -CRM
		
		Если ДанныеУчетнойЗаписи.ОбработкаПисемВедетсяВДругомПочтовомКлиенте Тогда 
			ПризнакРассмотрено = Истина;
		Иначе
			ПризнакРассмотрено = ?(ЭтоИсходящееПисьмо, Истина, Ложь);
		КонецЕсли;
		
		Реквизиты = РегистрыСведений.ПредметыПапкиВзаимодействий.РеквизитыВзаимодействия();
		Реквизиты.Папка                  = ПредметИПапка.Папка;
		// +CRM
		// Реквизиты.Предмет                 = ПредметИПапка.Предмет;
		Реквизиты.Предмет                = ?(ЗначениеЗаполнено(ПредметИПапка.Предмет), ПредметИПапка.Предмет, Письмо.Ссылка);
		// -CRM
		Реквизиты.Рассмотрено            = ПризнакРассмотрено;
		Реквизиты.РассчитыватьРассмотрено = Ложь;
		РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Письмо.Ссылка, Реквизиты);
		
		Если Не ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
			ЗаписатьИдентификаторПолученногоПисьма(ДанныеУчетнойЗаписи.Ссылка, Письмо.ИдентификаторНаСервере,
			Сообщение.ДатаПолучения);
		КонецЕсли;
		
		Если Не ЭтоИсходящееПисьмо И Письмо.УведомитьОПрочтении Тогда
			ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Запишем вложения вне транзакции записи письма
	УникальныеИменаВложений = Новый Соответствие;
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		УникальныеИменаВложений[Вложение.ИмяФайла] = ?(УникальныеИменаВложений[Вложение.ИмяФайла] = Неопределено,
			Истина, Ложь);
	КонецЦикла;
	
	ИменаВложений = Новый Массив;
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если УникальныеИменаВложений[Вложение.ИмяФайла] = Истина Тогда 
			ИменаВложений.Добавить(Вложение.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		ВложенияИПодписи = МодульЭлектроннаяПодписьСлужебный.ИменаФайловПодписейИменФайловДанных(ИменаВложений);
	Иначе
		ВложенияИПодписи = Новый Соответствие;
		Для Каждого ИмяФайлаВложения Из ИменаВложений Цикл
			ВложенияИПодписи.Вставить(ИмяФайлаВложения, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоПустыхИменВоВложениях = 0;
	Для каждого ЭлементСоответствия Из ВложенияИПодписи Цикл
		
		НайденноеВложение = Неопределено;
		ПодписиФайла    = Новый Массив;
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			Если Вложение.ИмяФайла = ЭлементСоответствия.Ключ Тогда
				НайденноеВложение = Вложение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденноеВложение <> Неопределено И ЭлементСоответствия.Значение.Количество() > 0 Тогда
			Для каждого Вложение Из Сообщение.Вложения Цикл
				Если ЭлементСоответствия.Значение.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					ПодписиФайла.Добавить(Вложение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденноеВложение <> Неопределено Тогда
			// +CRM
			// ЗаписатьВложениеЭлектронногоПисьма(
			//	Письмо,НайденноеВложение,
			//	ПодписиФайла,
			//	КоличествоПустыхИменВоВложениях);
			СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Имя);
			Если СтрокиПути.Количество() > 1 Тогда
				РасширениеФайла = СтрокиПути[СтрокиПути.Количество() - 1];
				Если НЕ РаботаСФайламиСлужебный.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаписатьВложениеЭлектронногоПисьма(Письмо, НайденноеВложение, ПодписиФайла,
				КоличествоПустыхИменВоВложениях, ДанныеУчетнойЗаписи.ЗагружатьВложения);
			// -CRM
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если УникальныеИменаВложений[Вложение.ИмяФайла] = Ложь Тогда // дублирующиеся имена вложений
			// +CRM
			//ЗаписатьВложениеЭлектронногоПисьма(Письмо, Вложение, Новый Массив, КоличествоПустыхИменВоВложениях);
			СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(Вложение.Имя);
			Если СтрокиПути.Количество() > 1 Тогда
				РасширениеФайла = СтрокиПути[СтрокиПути.Количество() - 1];
				Если НЕ РаботаСФайламиСлужебный.ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, Ложь) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаписатьВложениеЭлектронногоПисьма(Письмо, Вложение, Новый Массив,
				КоличествоПустыхИменВоВложениях, ДанныеУчетнойЗаписи.ЗагружатьВложения);
			// -CRM
		КонецЕсли;
	КонецЦикла;
	
	// +CRM
	// Если (Не ПомещатьПисьмоВПапкуПисьмаОснования) ИЛИ Не ЗначениеЗаполнено(ПредметИПапка.Папка) Тогда
	Если Не ЗначениеЗаполнено(ПредметИПапка.Папка) Тогда
	// -CRM
		ДобавлятьВМассивПисемДляПолученияПапки = Истина;
	КонецЕсли;
	
	// +CRM
	Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером И ЗначениеЗаполнено(ПредметИПапка.Папка)
		И Не ЭтоЗагрузкаПисьма Тогда
		НоваяСтрока = СтруктураМассивовСозданныхПисем.УстановленныеПапкиIMAP.Добавить();
		НоваяСтрока.Письмо = Письмо.Ссылка;
		НоваяСтрока.Папка = ПредметИПапка.Папка.CRM_ИмяНаСервере;
	КонецЕсли;
	// -CRM
	
	Возврат Письмо.Ссылка;
	
КонецФункции

// Заполнить электронное письмо.
//
// Параметры:
//  Письмо - ДокументСсылка.ЭлектронноеПисьмоИсходящее - Ссылка на письмо.
//  Сообщение			 - ПочтовоеСообщение  - Почтовое сообщение.
//  ЭтоИсходящееПисьмо	 - Булево - Признак письма. 
//
Процедура ЗаполнитьДокументЭлектронноеПисьмо(Письмо, Сообщение, ЭтоИсходящееПисьмо, ХешСумма) Экспорт
	
	ОтправительАдрес = АдресОтправителяИнтернетПочтовогоСообщения(Сообщение.Отправитель);
	// +CRM
	ОтправительАдрес = ДекодироватьАдресИзPunycode(ОтправительАдрес);
	// -CRM
	
	Если Не ЭтоИсходящееПисьмо Тогда
		
		Письмо.ДатаПолучения    = Сообщение.ДатаПолучения;
		Письмо.ОтправительАдрес = ОтправительАдрес; 
		// +CRM
		Письмо.CRM_СмещениеДатыОтправления = Сообщение.СмещениеДатыОтправления;
		Письмо.CRM_СмещениеДатыОтправленияЗаполнено = Истина;
		// -CRM
		
	Иначе
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		Письмо.ДатаОтправления = Сообщение.ДатаОтправления;
	КонецЕсли;
	
	ИмяОтправителя = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.ИмяОтправителя, "");
	Письмо.ОтправительПредставление = ?(ПустаяСтрока(Сообщение.ИмяОтправителя),
		ОтправительАдрес,
		ИмяОтправителя + " <"+ ОтправительАдрес +">");
	
	Письмо.Важность = ПолучитьВажностьЭлектронногоПисьма(Сообщение.Важность);
	Письмо.Дата = ?(Сообщение.ДатаОтправления = Дата(1, 1, 1), ТекущаяДатаСеанса(), Сообщение.ДатаОтправления);
	Письмо.ВнутреннийЗаголовок = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Заголовок, "");
	Письмо.ИдентификаторНаСервере = ?(Сообщение.Идентификатор.Количество() = 0, "", 
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Идентификатор[0], ""));
	Письмо.ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.ИдентификаторСообщения,
		 "");
	Письмо.Кодировка = Сообщение.Кодировка;
	Письмо.УведомитьОДоставке = Сообщение.УведомитьОДоставке;
	Письмо.УведомитьОПрочтении = Сообщение.УведомитьОПрочтении;
	
	Письмо.Размер = Сообщение.Размер;
	Письмо.Тема = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Сообщение.Тема);
	
	УстановитьТекстПисьма(Письмо, Сообщение);
	
	РаботаСПочтовымиСообщениямиСлужебный.ДекодироватьАдресаВПисьме(Сообщение);
	
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиКопий , Сообщение.Копии);
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, Сообщение.ОбратныйАдрес);
	// +CRM
	Если Письмо.ПолучателиОтвета.Количество() = 0 Тогда
		АдресОтправителя = Новый Массив;
		АдресОтправителя.Добавить(Сообщение.Отправитель);
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиОтвета, АдресОтправителя);
	КонецЕсли;
	// -CRM
	ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиПисьма, Сообщение.Получатели);
	
	Если ЭтоИсходящееПисьмо Тогда
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.ПолучателиСкрытыхКопий, Сообщение.СлепыеКопии);
	Иначе
		ЗаполнитьИнтернетПочтовыеАдреса(Письмо.АдресаУведомленияОПрочтении, Сообщение.АдресаУведомленияОПрочтении);
	КонецЕсли;
	
	// +CRM
	Письмо.CRM_Избранный = (Письмо.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая);
	Письмо.СписокПолучателейПисьма	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма),
		 "_");
	Письмо.СписокПолучателейКопий	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),
		 "_");
	// -CRM
	
	Письмо.ИдентификаторОснования    = СтроковоеПолеЗаголовкаИзПисьма(Сообщение, "In-Reply-To");
	// +CRM
	// Письмо.ИдентификаторыОснований   = СтроковоеПолеЗаголовкаИзПисьма(Сообщение, "References");
	//Письмо.ХешСумма                  = ХешСуммаПочтовогоСообщения(Сообщение);
	Письмо.ИдентификаторыОснований   = ПолучитьИдентификаторыОснованийПисьмаИзЗаголовка(Сообщение.Заголовок);
	Если ЗначениеЗаполнено(ХешСумма) Тогда
		Письмо.ХешСумма = ХешСумма;
	Иначе
		Письмо.ХешСумма = ХешСуммаПочтовогоСообщения(Сообщение);
	КонецЕсли;
	// -CRM
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		Если ПустаяСтрока(Вложение.Идентификатор) Или СтрНайти(Письмо.ТекстHTML, Вложение.Идентификатор) = 0 Тогда
			Письмо.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредметИПапкаЗагружаемогоПисьма(Письмо, УчетнаяЗапись, ЭтоИсходящееПисьмо, ПомещатьПисьмоВПапкуПисьмаОснования)
	
	Результат = Новый Структура("Предмет,Папка", Письмо.Ссылка, Неопределено);
	
	// Получим идентификаторы писем оснований.
	// +CRM
	//МассивИдентификаторов = Новый Массив;
	//СтрокаИдентификаторы = Письмо.ИдентификаторыОснований;
	//Пока Не ПустаяСтрока(СтрокаИдентификаторы) Цикл
	//	Позиция = СтрНайти(СтрокаИдентификаторы, "<");
	//	Если Позиция = 0 Тогда
	//		Прервать;
	//	КонецЕсли;
	//	СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	//	
	//	Позиция = СтрНайти(СтрокаИдентификаторы, ">");
	//	Если Позиция = 0 Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	ТекущийИдентификатор = СокрЛП(Лев(СтрокаИдентификаторы, Позиция-1));
	//	СтрокаИдентификаторы = СокрЛП(Сред(СтрокаИдентификаторы, Позиция+1));
	//	
	//	Если Не ПустаяСтрока(ТекущийИдентификатор) Тогда
	//		МассивИдентификаторов.Добавить(ТекущийИдентификатор);
	//	КонецЕсли;
	//КонецЦикла;
	МассивИдентификаторов = МассивИдентификаторовОснованийПисьма(Письмо);
	// -CRM
	
	Если (МассивИдентификаторов.Найти(Письмо.ИдентификаторОснования) = Неопределено) 
		И (НЕ ПустаяСтрока(Письмо.ИдентификаторОснования)) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторОснования);
	КонецЕсли;
	
	Если МассивИдентификаторов.Найти(Письмо.ИдентификаторСообщения) = Неопределено 
		И НЕ ПустаяСтрока(Письмо.ИдентификаторСообщения) Тогда
		МассивИдентификаторов.Добавить(Письмо.ИдентификаторСообщения);
	КонецЕсли;
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(МассивИдентификаторов);
	
	// Получим все основания
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата   КАК Дата,
	|	0                                КАК Приоритет
	|ПОМЕСТИТЬ ВсеЭлектронныеПисьма
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата   КАК Дата,
	|	0                                 КАК Приоритет
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ТаблицаИдентификаторов.Идентификатор = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоВходящее.Дата   КАК Дата,
	|	1                                КАК Приоритет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмоВходящее.ИдентификаторОснования = &ИдентификаторСообщения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Дата   КАК Дата,
	|	1                                 КАК Приоритет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмоИсходящее.ИдентификаторОснования = &ИдентификаторСообщения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВсеЭлектронныеПисьма.Ссылка КАК Ссылка,
	|	ВсеЭлектронныеПисьма.Приоритет КАК Приоритет,
	|	ВсеЭлектронныеПисьма.Дата КАК Дата,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО) КАК Предмет,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма, ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)) КАК Папка,
	|	ЕСТЬNULL(ПапкиЭлектронныхПисем.ПредопределеннаяПапка, ЛОЖЬ) КАК ПредопределеннаяПапка
	|ИЗ
	|	ВсеЭлектронныеПисьма КАК ВсеЭлектронныеПисьма
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ВсеЭлектронныеПисьма.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО (ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеЭлектронныеПисьма.Приоритет Возр,
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Письмо.ИдентификаторСообщения);
	
	НачалоВыполненияЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса =  Окр((ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполненияЗапроса)/1000, 2);
	
	Если ВремяВыполненияЗапроса > 1 Тогда
		
		ТекстЗаписиЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрос по получению данных писем основания загружаемого письма выполнялся дольше %1 сек, это дольше ожидаемого.'"),
			ВремяВыполненияЗапроса);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Письмо, ТекстЗаписиЖурнала);
		
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		
		Результат.Предмет = Выборка.Предмет;
		Если Выборка.Приоритет = 0 Тогда
			Письмо.ВзаимодействиеОснование = Выборка.Ссылка;
			Если ПомещатьПисьмоВПапкуПисьмаОснования И Не Выборка.ПредопределеннаяПапка Тогда
				Результат.Папка = Выборка.Папка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКонтактыВЗагружаемомПисьме(Письмо, ЭтоИсходящееПисьмо, УчетнаяЗапись)
	
	// +CRM
	//СоответствиеКонтактов = СоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование);
	СоответствиеКонтактов = СоответствиеКонтактовВПисьме(Письмо.ВзаимодействиеОснование, Письмо.УчетнаяЗапись);
	// -CRM
	
	НеопределенныеАдреса = Новый Массив;
	УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо);
	
	// Если есть неопределенные адреса, то поищем их по контактной информации.
	// +CRM
	// СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса);
	СоответствиеКонтактов = НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(НеопределенныеАдреса,
		Письмо.УчетнаяЗапись.АдресЭлектроннойПочты,
		Письмо.УчетнаяЗапись);
	// -CRM
	Если СоответствиеКонтактов.Количество() > 0 Тогда
		УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо);
	КонецЕсли;
	
	// +CRM
	//Письмо.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма,
		// Ложь);
	//Письмо.СписокПолучателейКопий  = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий,
		// Ложь);
	Письмо.СписокПолучателейПисьма	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма),
		 "_");
	Письмо.СписокПолучателейКопий	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),
		 "_");
	// -CRM
	
	Если ТипЗнч(Письмо) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		// +CRM
		//Письмо.СписокПолучателейСкрытыхКопий  = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий,
			// Ложь);
		Письмо.СписокПолучателейСкрытыхКопий =
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиКопий),
			"_");
	ИначеЕсли Не ЗначениеЗаполнено(Письмо.ОтправительКонтакт)
		И Не УчетнаяЗапись.АдресЭлектроннойПочты = Письмо.ОтправительАдрес Тогда
		
		CRM_КлиентыСервер.СоздатьКонтактВзаимодействия(Письмо);
		// -CRM
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстПисьма(Письмо, Сообщение) Экспорт
	
	ТекстHTML = "";
	ТекстПростой = "";
	ТекстРазмеченный = "";

	Для Каждого ТекстПочтовогоСообщения Из Сообщение.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			
			ТекстHTML = ТекстHTML + ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			// +CRM
			ТекстHTML = УдалитьНекорректныеКартинкиИзТекстаHTML(ТекстHTML);
			// -CRM
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			
			ТекстПростой = ТекстПростой 
				+ ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда
			ТекстРазмеченный = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПочтовогоСообщения.Текст);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстHTML <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Письмо.ТекстHTML = ТекстHTML;
		Письмо.Текст = ?(ТекстПростой <> "", ТекстПростой, ПолучитьПростойТекстИзHTML(ТекстHTML));
		
	ИначеЕсли ТекстРазмеченный <> "" Тогда
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст;
		Письмо.Текст = ТекстРазмеченный;
		
	Иначе
		Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		Письмо.Текст = ТекстПростой;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаАктивныхПапок(Почта, ДанныеУчетнойЗаписи = Неопределено)
	
	Результат = Новый Массив;
	
	// +CRM
	//ИменаАктивныхПапок     = Почта.ПолучитьПочтовыеЯщикиПоПодписке();
	
	ИменаАктивныхПапок = Новый Массив;
	Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Наименование КАК Наименование,
		|	ПапкиЭлектронныхПисем.CRM_ИмяНаСервере КАК CRM_ИмяНаСервере
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец = &Владелец
		|	И ПапкиЭлектронныхПисем.CRM_Подписаться
		|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("Владелец", ДанныеУчетнойЗаписи.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИменаАктивныхПапок.Добавить(?(ЗначениеЗаполнено(Выборка.CRM_ИмяНаСервере),
				 Выборка.CRM_ИмяНаСервере,
				 Выборка.Наименование));
		КонецЦикла;
		
	КонецЕсли;
	// -CRM
	
	Если ИменаАктивныхПапок.Количество() = 0 Тогда
		ИменаАктивныхПапок = Почта.ПолучитьПочтовыеЯщики();
	КонецЕсли;
	
	// +CRM
	//Разделитель = ""; 
	Разделитель = "/";
	// -CRM 
	// BSLLS:MissingCodeTryCatchEx-off
	Попытка
		Разделитель = Почта.СимволРазделитель;
	Исключение
		// АПК:280 Некоторые почтовые сервера не поддерживают эту команду.
	КонецПопытки;
	// BSLLS:MissingCodeTryCatchEx-on
	
	// +CRM
	//МассивИгнорируемыхИмен = МассивИменПапокДляКоторыхНеВыполняетсяЗагрузкаПисем();
	Если ДанныеУчетнойЗаписи.СинхронизироватьПапкиСПочтовымСервером Тогда
		МассивИгнорируемыхИмен = Новый Массив;
	Иначе
		МассивИгнорируемыхИмен  = ИменаПапокНеДляЗагрузкиПисем(ДанныеУчетнойЗаписи.Ссылка, Разделитель);
	КонецЕсли;
	// -CRM
	
	Для Каждого ИмяАктивнойПапки Из ИменаАктивныхПапок Цикл
		
		Если Не ПустаяСтрока(Разделитель) Тогда
			
			МассивСтрокИмениПапки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИмяАктивнойПапки, Разделитель);
			Если МассивСтрокИмениПапки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяПапкиБезРазделителя = МассивСтрокИмениПапки[МассивСтрокИмениПапки.Количество() - 1];
			Если ПустаяСтрока(ИмяПапкиБезРазделителя) Тогда
				Продолжить;
			КонецЕсли;
			Если Лев(ИмяПапкиБезРазделителя, 1) = "[" И Прав(ИмяПапкиБезРазделителя, 1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			// +CRM
			// Если МассивИгнорируемыхИмен.Найти(НРег(ИмяПапкиБезРазделителя)) <> Неопределено Тогда
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяАктивнойПапки)) <> Неопределено Тогда
			// -CRM
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если Лев(ИмяАктивнойПапки, 1) = "[" И Прав(ИмяАктивнойПапки, 1) = "]" Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИгнорируемыхИмен.Найти(НРег(ИмяАктивнойПапки)) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Добавить(ИмяАктивнойПапки);
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ИменаПапокНеДляЗагрузкиПисем(УчетнаяЗапись, Разделитель)
	
	// CRM - метод переписан полностью
	
	МассивИмен = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПапкиУчетныхЗаписей.Папка КАК Ссылка
	|ПОМЕСТИТЬ ПапкиПоУмолчанию
	|ИЗ
	|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|ГДЕ
	|	ПапкиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
	|	И ПапкиУчетныхЗаписей.ВидПапки В(&ВидыПапок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
	|	ПапкиЭлектронныхПисем.Родитель КАК Родитель,
	|	ПапкиЭлектронныхПисем.Наименование КАК Наименование,
	|	ПапкиЭлектронныхПисем.CRM_ИмяНаСервере КАК ИмяНаСервере
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ПапкиПоУмолчанию.Ссылка КАК Ссылка
	|			ИЗ
	|				ПапкиПоУмолчанию)");
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	ВидыПапок = Новый Массив;
	ВидыПапок.Добавить(Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта);
	ВидыПапок.Добавить(Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные);
	ВидыПапок.Добавить(Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики);
	ВидыПапок.Добавить(Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие);
	Запрос.Параметры.Вставить("ВидыПапок", ВидыПапок);
	
	ДанныеПапок = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ДанныеПапок Цикл
		ИмяНаСервере = СокрЛП(Строка.ИмяНаСервере);
		Если Не ЗначениеЗаполнено(ИмяНаСервере) Тогда
			ИмяНаСервере = Строка.Наименование;
			СтрокаРодителя = ДанныеПапок.Найти(Строка.Родитель, "Ссылка");
			Пока СтрокаРодителя <> Неопределено Цикл
				Если ЗначениеЗаполнено(СтрокаРодителя.ИмяНаСервере) Тогда
					ИмяНаСервере = СтрокаРодителя.ИмяНаСервере + Разделитель + ИмяНаСервере;
					Прервать;
				Иначе
					ИмяНаСервере = СтрокаРодителя.Наименование + Разделитель + ИмяНаСервере;
				КонецЕсли;
				СтрокаРодителя = ДанныеПапок.Найти(СтрокаРодителя.Родитель, "Ссылка");
			КонецЦикла;
		КонецЕсли;
		МассивИмен.Добавить(НРег(ИмяНаСервере));
	КонецЦикла;
	
	Возврат МассивИмен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с вложения электронных писем.

// Получает вложения электронного письма.
//
// Параметры:
//  Письмо							 - ДокументСсылка	 - документ электронное письмо для которого необходимо получить вложения.
//  ФормироватьРазмерПредставление	 - Булево - Формировать размер представление.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, содержащая информацию о вложениях.
//
Функция ПолучитьВложенияЭлектронногоПисьма(Письмо, ФормироватьРазмерПредставление = Ложь,
	 ТолькоСПустымИД = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПрисоединенныхФайловПисьма = Взаимодействия.ДанныеПрисоединенныхФайловПисьма(Письмо);
	ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныхФайлов;
	ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.ВладелецФайлов;
	
	Если ИмяОбъектаМетаданных = Неопределено Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ФормироватьРазмерПредставление Тогда
		ТекстРазмерПредставление = ",
		|ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление";
	Иначе
		ТекстРазмерПредставление = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка                    КАК Ссылка,
	|	Файлы.ИндексКартинки            КАК ИндексКартинки,
	|	Файлы.Размер                    КАК Размер,
	// +CRM
	//|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	";
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		Или ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		Или ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
		Или ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныРассылки")
		Или ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_Подписи")
		Или ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныПроектов")
		Или ТипЗнч(Письмо) = Тип("СправочникСсылка.Проекты") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	"""" КАК ИДФайлаЭлектронногоПисьма,";
	КонецЕсли;
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		Или ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Файлы.CRM_ОчищенПоНастройке КАК ОчищенПоНастройке,
		|	Файлы.CRM_ХешСумма КАК ХешСумма,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ЛОЖЬ КАК ОчищенПоНастройке,
		|	"""" КАК ХешСумма,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	// -CRM
	|	&ПодписанЭП                     КАК ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = &ПустаяСтрока
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла" + ТекстРазмерПредставление + "
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо
	|	И НЕ Файлы.ПометкаУдаления";
	
	// +CRM
	Если ТипЗнч(Письмо) = Тип("СправочникСсылка.Проекты") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ Файлы.ЭтоГруппа";
	КонецЕсли;
	// -CRM
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		СтрокаПодписанЭП = "Файлы.ПодписанЭП";
	Иначе
		СтрокаПодписанЭП = "ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодписанЭП", СтрокаПодписанЭП);
	
	Если ТолькоСПустымИД Тогда
		Запрос.Текст = Запрос.Текст + "
		| И Файлы.ИДФайлаЭлектронногоПисьма = """""; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Письмо", ВладелецФайлов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТаблицаКВозврату =  Запрос.Выполнить().Выгрузить(); // См. ПолучитьВложенияЭлектронногоПисьма
	
	Если ФормироватьРазмерПредставление Тогда
		Для каждого СтрокаТаблицы Из ТаблицаКВозврату Цикл
			
			// +CRM
			//СтрокаТаблицы.РазмерПредставление = 
			//	ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер);
			СтрокаТаблицы.РазмерПредставление =
				CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер);
			// -CRM
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаКВозврату.Индексы.Добавить("ИДФайлаЭлектронногоПисьма");
	
	Возврат ТаблицаКВозврату;
	
КонецФункции

Функция ИсключитьПисьмаСОчищеннымиВложениями(МассивПисем) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	МАКСИМУМ(ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.CRM_ОчищенПоНастройке) КАК CRM_ОчищенПоНастройке
	|ПОМЕСТИТЬ ПисьмаСОчищеннымиВложениями
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоВходящееПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ПометкаУдаления
	|	И ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ВладелецФайла В(&МассивПисем)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ВладелецФайла
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла,
	|	МАКСИМУМ(ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.CRM_ОчищенПоНастройке)
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла В(&МассивПисем)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПисьмаТЗ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеПисьма
	|ИЗ
	|	&ВсеПисьмаТЗ КАК ВсеПисьмаТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПисьмаТЗ.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПисьмаСОчищеннымиВложениями.CRM_ОчищенПоНастройке, ЛОЖЬ) КАК CRM_ОчищенПоНастройке
	|ИЗ
	|	ВсеПисьма КАК ВсеПисьмаТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПисьмаСОчищеннымиВложениями КАК ПисьмаСОчищеннымиВложениями
	|		ПО ВсеПисьмаТЗ.Ссылка = ПисьмаСОчищеннымиВложениями.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(ПисьмаСОчищеннымиВложениями.CRM_ОчищенПоНастройке, ЛОЖЬ)";
	
	ВсеПисьмаТЗ = Новый ТаблицаЗначений;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	ОписаниеТиповПисьма = Новый ОписаниеТипов(МассивТипов);
    
	ВсеПисьмаТЗ.Колонки.Добавить("Ссылка", ОписаниеТиповПисьма);
	Для Каждого Письмо Из МассивПисем Цикл
		НС = ВсеПисьмаТЗ.Добавить();
		НС.Ссылка = Письмо;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВсеПисьмаТЗ", ВсеПисьмаТЗ);
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Записывает вложение электронного письма, расположенное во временном хранилище в файл.
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо, АдресВоВременномХранилище,
	ПараметрыВложения, КоличествоПустыхИменВоВложениях = 0) Экспорт
	
	// +CRM
	//ИмяФайлаДляРазбора = ПараметрыВложения.ИмяФайла;
	//ИмяБезРасширения   = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
	
	ИмяФайлаДляРазбора = ПараметрыВложения.ИмяФайла;
	ИмяФайлаДляРазбора = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора, "_");
	ИмяФайлаДляРазбора = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ИмяФайлаДляРазбора, "_");
	
	ИмяБезРасширения = ИмяФайлаДляРазбора;
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяБезРасширения);
	// -CRM
	
	Если ПустаяСтрока(ИмяБезРасширения) Тогда
		
		ИмяБезРасширения = НСтр("ru = 'Вложение без имени'")
			+ ?(КоличествоПустыхИменВоВложениях = 0, "", " " + Строка(КоличествоПустыхИменВоВложениях + 1));
		КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
		
	Иначе
		ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения,
			Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
	КонецЕсли;
	// +CRM
	// Если наименование файла больше 256 символов, то не запишется и упадет.
	// в этом случае имя без расширения меняем.
	Если СтрДлина(ИмяФайлаДляРазбора) > 256 Тогда
		ИмяБезРасширения = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
	КонецЕсли;
	// -CRM
	
	ДополнительныеПараметры = Новый Массив;
	Если ПараметрыВложения.Свойство("ИДФайлаЭлектронногоПисьма") Тогда
		ДополнительныеПараметры.Добавить("ИДФайлаЭлектронногоПисьма");
	КонецЕсли;
	Если ПараметрыВложения.Свойство("ЭтоВложениеПисьмо") Тогда
		ДополнительныеПараметры.Добавить("ЭтоВложениеПисьмо");
	КонецЕсли;
	Если ПараметрыВложения.Свойство("ПодписанЭП") Тогда
		ДополнительныеПараметры.Добавить("ПодписанЭП");
	КонецЕсли;
	Если ПараметрыВложения.Свойство("Зашифрован") Тогда
		ДополнительныеПараметры.Добавить("Зашифрован");
	Иначе
		Если СтрЗаканчиваетсяНа(НРег(ИмяФайлаДляРазбора), "." + НРег(РасширениеДляЗашифрованныхФайлов())) Тогда
			
			Зашифрован = Истина;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
				МодульЭлектроннаяПодписьСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
				ТипДанных = МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ОпределитьТипДанных(АдресВоВременномХранилище);
				Если ТипДанных <> "ЗашифрованныеДанные" Тогда
					Зашифрован = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Зашифрован Тогда
				ДополнительныеПараметры.Добавить("Зашифрован");
				ПараметрыВложения.Вставить("Зашифрован", Зашифрован);
				
				РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяБезРасширения);
				ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения,
					Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));

			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеПараметры);
	ПараметрыФайла.ВладелецФайлов = Письмо;
	ПараметрыФайла.ИмяБезРасширения = ИмяБезРасширения;
	ПараметрыФайла.РасширениеБезТочки = РасширениеБезТочки;
	ПараметрыФайла.ВремяИзмененияУниверсальное = Неопределено;
	
	Если ПараметрыВложения.Свойство("ИДФайлаЭлектронногоПисьма") Тогда
		ПараметрыФайла.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
	КонецЕсли;
	Если ПараметрыВложения.Свойство("ЭтоВложениеПисьмо") Тогда
		ПараметрыФайла.ЭтоВложениеПисьмо = ПараметрыВложения.ЭтоВложениеПисьмо;
	КонецЕсли;
	Если ПараметрыВложения.Свойство("ПодписанЭП") Тогда
		ПараметрыФайла.ПодписанЭП = ПараметрыВложения.ПодписанЭП;
	КонецЕсли;
	Если ПараметрыВложения.Свойство("Зашифрован") Тогда
		ПараметрыФайла.Зашифрован = ПараметрыВложения.Зашифрован;
	КонецЕсли;
	
	// +CRM
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если НавигационнаяСсылкаИнформационнойБазы <> "" Тогда
		ПозицияПараметров = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");		
		Если ПозицияПараметров > 0 Тогда
			НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияПараметров - 1);
		КонецЕсли;
		НавигационнаяСсылка = СтрЗаменить(АдресВоВременномХранилище, НавигационнаяСсылкаИнформационнойБазы + "/", "");
	Иначе
		НавигационнаяСсылка = АдресВоВременномХранилище;
	КонецЕсли;
	// -CRM
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		НавигационнаяСсылка,
		"");
	
КонецФункции

Процедура ДоступныеУчетныеЗаписиДляОтправкиБезУчетаИспользования(СписокВыбора,
	 ТаблицаДанныхУчетнойЗаписи = Неопределено,
	 Знач ТекущийПользователь = Неопределено) Экспорт
	
	СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоДоступнымУчетнымЗаписямБезУчетаИспользования();
	
	// +CRM
	//Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ТекущийПользователь = ?(ТекущийПользователь = Неопределено, Пользователи.ТекущийПользователь(), ТекущийПользователь);
	РолиТекущегоПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиТекущегоПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиТекущегоПользователя", РолиТекущегоПользователя);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	// -CRM
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.УчетнаяЗапись, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.ИмяПользователя,
			                                                         Выборка.АдресЭлектроннойПочты,
			                                                         ""));
	КонецЦикла;
	
	// +CRM
	// ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	Если Не (ТаблицаДанныхУчетнойЗаписи = Неопределено) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

Функция ТекстЗапросаПоДоступнымУчетнымЗаписямБезУчетаИспользования()
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Возврат	"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПослеОтправки,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = &ТекущийПользователь
	|			ТОГДА 1
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем = &ТекущийПользователь
	|			ТОГДА 2
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ПО CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	|	И (CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь В (&РолиТекущегоПользователя)
	|				И CRM_УчетныеЗаписиЭлектроннойПочты.Запись
	|			ИЛИ УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
КонецФункции

// Преобразует письмо в двоичные данные и подготавливает к сохранению на диск.
//
// Параметры:
//  Письмо                  - ДокументСсылка.ЭлектронноеПисьмоВходящее
//                          - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо, которое подготавливается к сохранению.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, из которой была вызвана команда сохранения.
//
// Возвращаемое значение:
//  Структура - структура, содержащая подготовленные данные письма.
//
Функция ДанныеПисьмаДляСохраненияКакФайл(Письмо, УникальныйИдентификатор) Экспорт
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        "");
	ДанныеФайла.Вставить("ОтносительныйПуть",                  "");
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная",       Дата(1, 1, 1));
	ДанныеФайла.Вставить("ИмяФайла",                           "");
	ДанныеФайла.Вставить("Наименование",                       "");
	ДанныеФайла.Вставить("Расширение",                         "");
	ДанныеФайла.Вставить("Размер",                             "");
	ДанныеФайла.Вставить("Редактирует",                        Неопределено);
	ДанныеФайла.Вставить("ПодписанЭП",                         Ложь);
	ДанныеФайла.Вставить("Зашифрован",                         Ложь);
	ДанныеФайла.Вставить("ФайлРедактируется",                  Ложь);
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	ДанныеФайла.Вставить("ПолноеНаименованиеВерсии",           "");
	
	ДанныеПисьма = Взаимодействия.ИнтернетПочтовоеСообщениеИзПисьма(Письмо);
	Если ДанныеПисьма <> Неопределено Тогда
		
		ДвоичныеДанные = ДанныеПисьма.ИнтернетПочтовоеСообщение.ПолучитьИсходныеДанные(); // ДвоичныеДанные
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);

		ДанныеФайла.Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			Взаимодействия.ПредставлениеПисьма(ДанныеПисьма.ИнтернетПочтовоеСообщение.Тема,
			ДанныеПисьма.ДатаПисьма));
		
		ДанныеФайла.Расширение  = "eml";
		ИмяФайлаДляРазбора = ДанныеФайла.Наименование;
		ИмяФайлаДляРазбора = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
		ДанныеФайла.ИмяФайла    = ИмяФайлаДляРазбора + "." + ДанныеФайла.Расширение;
		ДанныеФайла.Размер      = ДвоичныеДанные.Размер();
		ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);
		ДанныеФайла.ДатаМодификацииУниверсальная = ТекущаяДатаСеанса();
		ДанныеФайла.ПолноеНаименованиеВерсии = ИмяФайлаДляРазбора;
		
	КонецЕсли;
	
	Возврат ДанныеФайла;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ПолучитьПростойТекстИзHTML(ТекстHTML)
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// +CRM
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	// -CRM
	
	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
КонецФункции

// Получает и добавляет в список значений доступные пользователю учетные записи электронной почты.
//
// Параметры:
//  СписокВыбора				 - СписокЗначений	 - В него будут добавлены доступные пользователю записи электронной почты.
//  ТаблицаДанныхУчетнойЗаписи	 - ТаблицаЗначений	 - Таблица с данными учетной записи.
//  ТекущийПользователь			 - СправочникСсылка.Пользователи - Текущий пользователь. 
//
Процедура ПолучитьДоступныеУчетныеЗаписиДляОтправки(СписокВыбора,
	 ТаблицаДанныхУчетнойЗаписи = Неопределено,
	 Знач ТекущийПользователь = Неопределено) Экспорт
	
	СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоДоступнымУчетнымЗаписям();
	
	// +CRM
	//Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ТекущийПользователь = ?(ТекущийПользователь = Неопределено, Пользователи.ТекущийПользователь(), ТекущийПользователь);
	РолиТекущегоПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиТекущегоПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("РолиТекущегоПользователя", РолиТекущегоПользователя);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	// -CRM
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// +CRM
		ИмяОтправителя = ?(ЗначениеЗаполнено(Выборка.ПерсональноеИмяОтправителя),
												Выборка.ПерсональноеИмяОтправителя,
												Выборка.ИмяПользователя);
		// -CRM
		СписокВыбора.Добавить(Выборка.УчетнаяЗапись, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ИмяОтправителя,// +CRM
			                                                         Выборка.АдресЭлектроннойПочты,
			                                                         ""));
	КонецЦикла;
	
	// +CRM
	// ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	Если Не (ТаблицаДанныхУчетнойЗаписи = Неопределено) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаДанныхУчетнойЗаписи);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

Функция ТекстЗапросаПоДоступнымУчетнымЗаписям()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПоследняяИспользовавшаясяУчетная
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма <> ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.Автор = &ТекущийПользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящее.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// +CRM
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК УчетнаяЗапись,
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Запись КАК Запись,
	|	ЕСТЬNULL(CRM_ПодписиУчетныхЗаписей.ИмяОтправителя, """") КАК ПерсональноеИмяОтправителя
	|ПОМЕСТИТЬ РСУчетныеЗаписиЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПодписиУчетныхЗаписей КАК CRM_ПодписиУчетныхЗаписей
	|		ПО CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись = CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись
	|		И CRM_ПодписиУчетныхЗаписей.Пользователь = CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
    // BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	// -CRM
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя КАК ИмяПользователя,
	// +CRM
	|	РСУчетныеЗаписиЭлектроннойПочты.ПерсональноеИмяОтправителя КАК ПерсональноеИмяОтправителя,
	// -CRM
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПослеОтправки,
	|	ВЫБОР
	|		КОГДА НЕ ПоследняяИспользовавшаясяУчетная.УчетнаяЗапись ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = &ТекущийПользователь
	|			ТОГДА 1
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаОбработкуПисем = &ТекущийПользователь
	|			ТОГДА 2
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РСУчетныеЗаписиЭлектроннойПочты КАК РСУчетныеЗаписиЭлектроннойПочты
	|		ПО РСУчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	// -CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ПО (НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследняяИспользовавшаясяУчетная КАК ПоследняяИспользовавшаясяУчетная
	|		ПО ПоследняяИспользовавшаясяУчетная.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.НеИспользоватьВоВстроенномПочтовомКлиенте, ЛОЖЬ)
	// +CRM
	//|	И (УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = &ТекущийПользователь
	//|			ИЛИ УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И (РСУчетныеЗаписиЭлектроннойПочты.Пользователь В (&РолиТекущегоПользователя)
	|				И РСУчетныеЗаписиЭлектроннойПочты.Запись
	|			ИЛИ УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись)
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	// -CRM
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	
КонецФункции

// Процедура создает предопределенные папки для учетной записи электронной почты.
//
// Параметры:
//	УчетнаяЗапись	- СправочникСсылка	- Учетная запись, для которой будут созданы предопределенные папки.
//
Процедура СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.ТипПредопределеннойПапки
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", УчетнаяЗапись);
	
	МассивИмеющихсяПапок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипПредопределеннойПапки");
	
	// +CRM
	//Для каждого ТипПредопределеннойПапки Из МассивТиповПредопределенныхПапок Цикл
	//	Если МассивИмеющихсяПапок.Найти(ТипПредопределеннойПапки) = Неопределено Тогда
	//		
	//		СоздатьПредопределеннуюПапкуЭлектронныхПисем(ТипПредопределеннойПапки, УчетнаяЗапись);
	//		
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Индекс = 0 По Перечисления.CRM_ВидыПапокЭлектроннойПочты.Количество() - 1 Цикл
		
		ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты[Индекс];
		ИмяПапки = Строка(ВидПапки);
		
		Если МассивИмеющихсяПапок.Найти(ИмяПапки) = Неопределено Тогда
			
			ПапкаОбъект = Справочники.ПапкиЭлектронныхПисем.СоздатьЭлемент();
			ПапкаОбъект.УстановитьНовыйКод();
			ПапкаОбъект.ОбменДанными.Загрузка		= Истина;
			ПапкаОбъект.Владелец					= УчетнаяЗапись;
			ПапкаОбъект.Наименование				= ИмяПапки;
			ПапкаОбъект.РеквизитДопУпорядочивания	= Индекс + 1;
			ПапкаОбъект.ПредопределеннаяПапка		= Истина;
			ПапкаОбъект.Записать();
			
			РегистрыСведений.CRM_ПапкиУчетныхЗаписей.УстановитьПапку(УчетнаяЗапись, ВидПапки, ПапкаОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	// -CRM
	
КонецПроцедуры

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
Функция ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	 Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
		
	// +CRM
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
		
		Возврат "CRM_РассылкаЭлектронныхПисемПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		
		Возврат "МаркетинговыеМероприятияПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		
		Возврат "CRM_ШаблоныРассылкиПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_Подписи") Тогда
		
		Возврат "CRM_ПодписиПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_Решения") Тогда
		
		Возврат "CRM_РешенияПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		
		Возврат "CRM_ТелемаркетингПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		Возврат "CRM_ИнтересПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.Проекты") Тогда
		
		Возврат "ПроектыПрисоединенныеФайлы";
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("СправочникСсылка.CRM_ШаблоныПроектов") Тогда
		
		Возврат "CRM_ШаблоныПроектовПрисоединенныеФайлы";
	// -CRM
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

// Преобразует текст в HTML
//
// Параметры:
//  Текст	 - Строка	 - текст доя преобразования
// 
// Возвращаемое значение:
//  Строка - преобразоыанный текст
//
Функция ТекстВHTML(Текст) Экспорт
	
	Если СтрНайти(НРег(Текст), "</html>", НаправлениеПоиска.СКонца) > 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		ЭлементТекст = ДокументHTML.СоздатьТекстовыйУзел(Строка);
		ЭлементБлок.ДобавитьДочерний(ЭлементТекст);
	КонецЦикла;
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Результат = ЗаписьHTML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Типовые

////////////////////////////////////////////////////////////////////////////////
// Получение и отправка писем

Функция ДатаОтбораЗагрузкиПисемПоПротоколуIMAP(ДатаЗагрузкиПисем)
	
	Возврат Мин(ДатаЗагрузкиПисем, УниверсальноеВремя(ДатаЗагрузкиПисем, ЧасовойПояс()));
	
КонецФункции

Процедура ОпределитьИдентификаторыВходящегоСообщения(ЗаголовокПисьма, ТаблицаИдентификаторов)
	
	СтрокаТаблицыИдентификаторов = ТаблицаИдентификаторов.Добавить();
	СтрокаТаблицыИдентификаторов.ИдентификаторНаСервере = ?(ЗаголовокПисьма.Идентификатор.Количество() = 0,
		"", 
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ЗаголовокПисьма.Идентификатор[0], ""));
	
	СтрокаТаблицыИдентификаторов.ИдентификаторПисьма =
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ЗаголовокПисьма.ИдентификаторСообщения, "");
	
	Если СтрНайти(НРег(ЗаголовокПисьма.ИдентификаторСообщения), "outlook.com") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПозицияIDОригинальногоСообщения = СтрНайти(ЗаголовокПисьма.Заголовок, "X-Microsoft-Original-Message-ID");
	Если ПозицияIDОригинальногоСообщения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Начало = СтрНайти(ЗаголовокПисьма.Заголовок, "<", НаправлениеПоиска.СНачала, ПозицияIDОригинальногоСообщения);
	Конец = СтрНайти(ЗаголовокПисьма.Заголовок, ">", НаправлениеПоиска.СНачала, ПозицияIDОригинальногоСообщения);
	ОригинальныйIDСообщенияMicrosoft = Сред(ЗаголовокПисьма.Заголовок, Начало + 1, Конец - Начало - 1);
	
	СтрокаТаблицыИдентификаторов.ИдентификаторОригинальногоПисьмаMicrosoft =
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ОригинальныйIDСообщенияMicrosoft, "");
	
КонецПроцедуры

Функция ПослеВыполненияОтправкиПисьма(Ссылка, ИдентификаторСообщения,
	 ИдентификаторСообщенияОтправкаIMAP, УдалятьПослеОтправки,
	 ВызыватьИсключение = Истина)

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронноеПисьмоИсходящее");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		Если УдалятьПослеОтправки Тогда
			ПисьмоОбъект = Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.Удалить();
		Иначе
			ПисьмоОбъект = Ссылка.ПолучитьОбъект(); // ДокументОбъект.ЭлектронноеПисьмоИсходящее
			ПисьмоОбъект.ИдентификаторСообщения             = ИдентификаторСообщения;
			ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ИдентификаторСообщенияОтправкаIMAP;
			
			ПисьмоОбъект.СтатусПисьма                       = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			ПисьмоОбъект.Размер                             =
				Взаимодействия.ОценитьРазмерИсходящегоЭлектронногоПисьма(ПисьмоОбъект.Ссылка);
			ПисьмоОбъект.ДатаОтправления                    = ТекущаяДатаСеанса();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		// +CRM
		РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ЗарегистрироватьДанные(Ссылка, ИдентификаторСообщения,
			ИдентификаторСообщенияОтправкаIMAP, ТекущаяДатаСеанса());
		// -CRM
		Если ВызыватьИсключение Тогда
			ВызватьИсключение;
		КонецЕсли;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Ссылка.Метаданные(),
			ПисьмоОбъект, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Формирует пустую структуру для заполнения параметров обработки ошибки отправки письма.
//
// Возвращаемое значение:
//   Структура:
//     * ПисьмоОбъект                      - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо.
//     * Ссылка                            - ДокументСсылка.ЭлектронноеПисьмоИсходящее - ссылка на отправляемое письмо.
//     * ПредставлениеПисьма               - Строка
//     * КоличествоПопыток                 - Число - количество уже совершенных попыток по отправке письма.
//     * ИнкрементироватьКоличествоПопыток - Булево
//     * СообщатьПользователю              - Булево - признак того, что нужно вывести сообщение пользователю.
//
Функция ПараметрыОбработкиОшибкиОтправки() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПисьмоОбъект",                       Неопределено);
	Параметры.Вставить("Ссылка",                             Неопределено);
	Параметры.Вставить("ПредставлениеПисьма",                "");
	Параметры.Вставить("КоличествоПопыток",                  0);
	Параметры.Вставить("ИнкрементироватьКоличествоПопыток" , Ложь);
	Параметры.Вставить("СообщатьПользователю",               Ложь);
	Параметры.Вставить("ТекстОшибки",                        "");
	Параметры.Вставить("ВыполнятьЗаписьВЖурналРегистрации",  Истина);
	
	Возврат Параметры;
	
КонецФункции

// Обрабатывает ошибку отправки электронного письма
// 
// Параметры:
//  ПараметрыОбработкиОшибки - см. ПараметрыОбработкиОшибкиОтправки
//  ПараметрыПисьма          - Структура - параметры отправляемого письма.
// Возвращаемое значение:
//  Результат - Структура:
//    * ТекстСообщения - Строка - текст сообщения об ошибке
//    * ПисьмоОтправлено - Булево - признак того, что письмо было отправлено
//
Функция ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, Знач ОшибочныеПолучатели) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ПисьмоОтправлено", Ложь);
	
	РезультатАнализа = РезультатАнализаОшибочныхПолучателей(ПараметрыОбработкиОшибки.ПисьмоОбъект, ОшибочныеПолучатели);
	ВсеАдресатыПисьмаОтвергнутыСервером           = РезультатАнализа.ВсеАдресатыПисьмаОтвергнутыСервером;
	ПредставлениеОшибочныхАдресатов               = РезультатАнализа.ПредставлениеОшибочныхАдресатов;
	ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = РезультатАнализа.ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов;
	
	Если ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов Тогда
		
		Если Не ВсеАдресатыПисьмаОтвергнутыСервером Тогда
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Следующие адресаты письма ""%1"" не приняты почтовым сервером:
				|%2. Письмо отправлено остальным адресатам.'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось отправить письмо ""%1"".
				|Следующие адресаты письма не приняты почтовым сервером:
				|%2.'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке,
		                                                                                 ПараметрыОбработкиОшибки.ПредставлениеПисьма,
		                                                                                 ПредставлениеОшибочныхАдресатов);
		
	Иначе
		
		ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось отправить письмо ""%1"".
			|По причине: %2.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке,
		                                                                                 ПараметрыОбработкиОшибки.ПредставлениеПисьма,
		                                                                                 ПараметрыОбработкиОшибки.ТекстОшибки)
		
	КонецЕсли;
	
	Если ПараметрыОбработкиОшибки.ВыполнятьЗаписьВЖурналРегистрации Тогда
	
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		                        УровеньЖурналаРегистрации.Ошибка, 
		                        ПараметрыОбработкиОшибки.Ссылка.Метаданные(), 
		                        ПараметрыОбработкиОшибки.Ссылка, 
		                        ТекстСообщенияОбОшибке);
		
	КонецЕсли;
	
	Результат.ТекстСообщения = ТекстСообщенияОбОшибке;
	
	Если ПараметрыОбработкиОшибки.СообщатьПользователю Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияОбОшибке, ПараметрыОбработкиОшибки.Ссылка);
	КонецЕсли;
	
	Если ВсеАдресатыПисьмаОтвергнутыСервером
		Или Не ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов Тогда
		
		Если ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток Тогда
			
			МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Письмо = ПараметрыОбработкиОшибки.Ссылка;
			МенеджерЗаписи.КоличествоПопыток = ?(ВсеАдресатыПисьмаОтвергнутыСервером, 5, ПараметрыОбработкиОшибки.КоличествоПопыток + 1);
			МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
			МенеджерЗаписи.Записать();
		
		КонецЕсли;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ПисьмоОтправлено = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатАнализаОшибочныхПолучателей(ПисьмоОбъект, ОшибочныеПолучатели)

	Результат = Новый Структура;
	Результат.Вставить("ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов", Ложь);
	Результат.Вставить("ВсеАдресатыПисьмаОтвергнутыСервером", Ложь);
	Результат.Вставить("ПредставлениеОшибочныхАдресатов", "");
	
	КоличествоОшибочныхПолучателей = ОшибочныеПолучатели.Количество();
	
	Если КоличествоОшибочныхПолучателей > 0 Тогда
		
		Результат.ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = Истина;
		
		МассивПолучателейПисьма = Новый Массив;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиПисьма Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиКопий Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаПолучателя Из ПисьмоОбъект.ПолучателиСкрытыхКопий Цикл
			Если МассивПолучателейПисьма.Найти(СтрокаПолучателя.Адрес) = Неопределено Тогда
				МассивПолучателейПисьма.Добавить(СтрокаПолучателя.Адрес);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоПолучателейПисьма = МассивПолучателейПисьма.Количество();
		
		Если КоличествоПолучателейПисьма = КоличествоОшибочныхПолучателей Тогда
			Результат.ВсеАдресатыПисьмаОтвергнутыСервером = Истина;
		КонецЕсли;
		
		ПредставлениеОшибочныхАдресатов = "";
		Для Каждого ОшибочныйАдресат Из ОшибочныеПолучатели Цикл
			Если Не ПустаяСтрока(ПредставлениеОшибочныхАдресатов) Тогда
				ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов + ", ";
			КонецЕсли;
			ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов + ОшибочныйАдресат.Ключ;
		КонецЦикла;
		
		Результат.ПредставлениеОшибочныхАдресатов = ПредставлениеОшибочныхАдресатов;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьПисьма(Знач ДанныеУчетнойЗаписи, ЕстьОшибки, Получено, ПолученныеПисьма)
	
	Если Не ЗаблокироватьУчетнуюЗапись(ДанныеУчетнойЗаписи.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Попытка
		Почта = РаботаСПочтовымиСообщениями.ПодключениеКПочте(ДанныеУчетнойЗаписи.Ссылка, Истина);
	Исключение
		СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
		
		ЕстьОшибки = Истина;
		ТекстСообщенияОбОшибке = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
			ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключиться к почте %1 по причине:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ДанныеУчетнойЗаписи.Ссылка,
				ТекстСообщенияОбОшибке);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
		Возврат;
		
	КонецПопытки;
	
	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда
		ПолучитьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта, Получено, ПолученныеПисьма);
	Иначе
		ПолучитьПочтуПоПроколуIMAP(ДанныеУчетнойЗаписи, Почта, Получено, ПолученныеПисьма);
		СинхронизироватьПризнакРассмотреноССервером(Почта, ДанныеУчетнойЗаписи, ПолученныеПисьма.ВсеПолученныеПисьма);
	КонецЕсли;
	
	Почта.Отключиться();
	
	СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
	
	// +CRM
	РегистрыСведений.CRM_АвтоответчикПочты.ВыполнитьПроверкуИОтправкуПисьмаАвтоответчика(
		ПолученныеПисьма.ПолученныеПисьмаПоУчетнойЗаписи, ДанныеУчетнойЗаписи.Ссылка);
	// -CRM
	
КонецПроцедуры

Процедура ПолучитьПочтуПоПроколуPOP3(ДанныеУчетнойЗаписи, Почта, ПолученоПисем, ПолученныеПисьма)

	Идентификаторы = Почта.ПолучитьИдентификаторы();
	Если Идентификаторы.Количество() = 0 И (Не ДанныеУчетнойЗаписи.ОставлятьКопии) Тогда
		// Если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений
		// ИдентификаторыПолученныхЭлектронныхПисем.
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Определим какие сообщения нужно получать.
	ИдентификаторыПисемКЗагрузке = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
	ПолученоПисем = ПолученоПисем + ПолучитьПисьмаПоИдентификаторам(Почта, ДанныеУчетнойЗаписи,
		ИдентификаторыПисемКЗагрузке, ПолученныеПисьма, Идентификаторы);
	
	// Удалим ненужные сообщения на сервере.
	УдалятьВсе = Не ДанныеУчетнойЗаписи.ОставлятьКопии;
	Если УдалятьВсе Тогда
		УдаляемыеСообщения = Идентификаторы;
	Иначе
		Если ДанныеУчетнойЗаписи.ОставлятьДней > 0 Тогда
			УдаляемыеСообщения = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, 
				ДанныеУчетнойЗаписи.Ссылка, 
				ТекущаяДатаСеанса() - ДанныеУчетнойЗаписи.ОставлятьДней * 24 * 60 * 60);
		Иначе
			УдаляемыеСообщения = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если УдаляемыеСообщения.Количество() <> 0 Тогда
		Почта.УдалитьСообщения(УдаляемыеСообщения);
	КонецЕсли;
	
	Если УдалятьВсе Тогда
		УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
	Иначе
		УдалитьИдентификаторыРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка, Идентификаторы, УдаляемыеСообщения);
	КонецЕсли;

КонецПроцедуры

Функция ПочтовыеАдресаРавны(ПервыйАдрес, ВторойАдрес)

	ОбработанныйПервыйАдрес = НРег(СокрЛП(ПервыйАдрес));
	ОбработанныйВторойАдрес = НРег(СокрЛП(ВторойАдрес));
	
	ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ОбработанныйПервыйАдрес);
	ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ОбработанныйВторойАдрес);
	
	Возврат (ОбработанныйПервыйАдрес = ОбработанныйВторойАдрес);
	
КонецФункции

Функция СтруктураАдресаЭлектроннойПочты(АдресЭлектроннойПочты)
	
	МассивАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресЭлектроннойПочты, "@");
	
	Если МассивАдреса.Количество() = 2 Тогда
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("ИмяПочтовогоЯщика", МассивАдреса[0]);
		СтруктураАдреса.Вставить("Домен"            , МассивАдреса[1]);
		
		Возврат СтруктураАдреса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//   * ВсеПолученныеПисьма - Массив из ДокументСсылка.ЭлектронноеПисьмоВходящее
//                         - Массив из ДокументСсылка.ЭлектронноеПисьмоИсходящее
//   * ПисьмаДляОпределенияПапок - Массив из ДокументСсылка.ЭлектронноеПисьмоВходящее
//                               - Массив из ДокументСсылка.ЭлектронноеПисьмоИсходящее
//   * ПолученныеПисьмаПоУчетнойЗаписи - Массив из ДокументСсылка.ЭлектронноеПисьмоВходящее
//                                     - Массив из ДокументСсылка.ЭлектронноеПисьмоИсходящее
//
Функция ПолученныеПисьма()
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеПолученныеПисьма",             Новый Массив);
	Результат.Вставить("ПисьмаДляОпределенияПапок",       Новый Массив);
	Результат.Вставить("ПолученныеПисьмаПоУчетнойЗаписи", Новый Массив);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьИдентификаторыВсехРанееПолученныхПисем(УчетнаяЗапись)
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем");
		ЭлементБлокировки.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
		|ИЗ
		|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
		|ГДЕ
		|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
			Набор.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьИдентификаторыРанееПолученныхПисем(УчетнаяЗапись, ИдентификаторыНаСервере, ИдентификаторыУдалять)
	
	// Получим список идентификаторов которые не нужно удалять.
	ИдентификаторыКУдалению = Новый Соответствие;
	Для Каждого Элемент Из ИдентификаторыУдалять Цикл
		ИдентификаторыКУдалению.Вставить(Элемент, Истина);
	КонецЦикла;
	
	ИдентификаторыОставляем = Новый Массив;
	Для Каждого Элемент Из ИдентификаторыНаСервере Цикл
		Если ИдентификаторыКУдалению.Получить(Элемент) = Неопределено Тогда
			ИдентификаторыОставляем.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Получим идентификаторы которые нужно удалить, те которые есть в регистре, но не нужно оставлять.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(ИдентификаторыОставляем);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗапись                                         КАК УчетнаяЗапись,
	|	ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|ГДЕ
	|	ТаблицаИдентификаторов.Идентификатор ЕСТЬ NULL
	|	 И ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись";
	
	ТаблицаУдаляемыхИдентификаторов = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем");
		ЭлементБлокировки.ИсточникДанных = ТаблицаУдаляемыхИдентификаторов;
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаТаблицы Из ТаблицаУдаляемыхИдентификаторов Цикл
			Набор = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьНаборЗаписей();
			Набор.Отбор.УчетнаяЗапись.Установить(СтрокаТаблицы["УчетнаяЗапись"]);
			Набор.Отбор.Идентификатор.Установить(СтрокаТаблицы["Идентификатор"]);
			Набор.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения =
			НСтр("ru = 'Не удалось очистить информацию о ранее полученных идентификаторах по причине: %Причина%.'");
		ТекстСообщения = 
			СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем,
			СтрокаТаблицы.УчетнаяЗапись,
			ТекстСообщения);
	
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьТаблицуСИдентификаторами(Идентификаторы)
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , ,
		 Новый КвалификаторыСтроки(100)));
	Для Каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Идентификатор, "");
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторов;
	
КонецФункции

Функция ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, УчетнаяЗапись)

	// Получим список сообщений которые не были раньше получены.
	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись",          УчетнаяЗапись);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись ЕСТЬ NULL ";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ПолучитьИдентификаторыПисемДляУдаленияНаСервере(Идентификаторы, УчетнаяЗапись, ДатаПоКоторуюУдалять)

	ТаблицаИдентификаторов = СоздатьТаблицуСИдентификаторами(Идентификаторы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаПолучения", ДатаПоКоторуюУдалять);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыПолученныхЭлектронныхПисем КАК ИдентификаторыПолученныхЭлектронныхПисем
	|		ПО ТаблицаИдентификаторов.Идентификатор = ИдентификаторыПолученныхЭлектронныхПисем.Идентификатор
	|			И (ИдентификаторыПолученныхЭлектронныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
	|ГДЕ
	|	ИдентификаторыПолученныхЭлектронныхПисем.ДатаПолучения <= &ДатаПолучения";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");

КонецФункции

Функция ХешСуммаПочтовогоСообщения(Сообщение)
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СокрЛП(Сообщение.Заголовок), ХешФункция.CRC32);
	
КонецФункции

Процедура УстановитьКонтактыВПисьме(Письмо, СоответствиеКонтактов, НеопределенныеАдреса, ЭтоИсходящееПисьмо)
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиПисьма Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиКопий Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Письмо.ПолучателиОтвета Цикл
		ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
	КонецЦикла;
	
	Если ЭтоИсходящееПисьмо Тогда
		Для Каждого СтрокаТаблицы Из Письмо.ПолучателиСкрытыхКопий Цикл
			ОбработатьПоляКонтактИАдрес(СтрокаТаблицы.Адрес, СтрокаТаблицы.Контакт, СоответствиеКонтактов, НеопределенныеАдреса);
		КонецЦикла;
	Иначе
		ОбработатьПоляКонтактИАдрес(Письмо.ОтправительАдрес, Письмо.ОтправительКонтакт,
			 СоответствиеКонтактов,
			 НеопределенныеАдреса);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьПоляКонтактИАдрес(Адрес, Контакт, СоответствиеКонтактов, НеопределенныеАдреса)
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКонтакт = СоответствиеКонтактов.Получить(ВРег(Адрес));
	Если НайденныйКонтакт <> Неопределено И ТипЗнч(НайденныйКонтакт) <> Тип("Строка") Тогда
		Контакт = НайденныйКонтакт;
		Возврат;
	КонецЕсли;
	
	Если НеопределенныеАдреса.Найти(Адрес) = Неопределено Тогда
		НеопределенныеАдреса.Добавить(Адрес);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторПолученногоПисьма(УчетнаяЗапись, Идентификатор, ДатаПолучения)

	Запись = РегистрыСведений.ИдентификаторыПолученныхЭлектронныхПисем.СоздатьМенеджерЗаписи();
	Запись.УчетнаяЗапись = УчетнаяЗапись;
	Запись.Идентификатор = Идентификатор;
	Запись.ДатаПолучения = ДатаПолучения;
	Запись.Записать();

КонецПроцедуры

Функция СтроковоеПолеЗаголовкаИзПисьма(Сообщение, ИмяЗаголовка)
	
	СтрокаИдентификаторы = СокрЛП(Сообщение.ПолучитьПолеЗаголовка(ИмяЗаголовка, "Строка"));
	
	Если ПустаяСтрока(СтрокаИдентификаторы) Тогда 
		
		СтрокаИдентификаторы = ПолеЗаголовкаПисьма(Сообщение.Заголовок, ИмяЗаголовка); 
		
	КонецЕсли;

	Позиция = СтрНайти(СтрокаИдентификаторы, "<");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция+1);
	КонецЕсли;
	
	Позиция = СтрНайти(СтрокаИдентификаторы, ">");
	Если Позиция <> 0 Тогда
		СтрокаИдентификаторы = Лев(СтрокаИдентификаторы, Позиция-1);
	КонецЕсли;
	
	Возврат СтрокаИдентификаторы;
	
КонецФункции

Функция ПолеЗаголовкаПисьма(ЗаголовокСообщения, ПолеЗаголовка)
	
	ПолеЗаголовка = ПолеЗаголовка + ":";
	
	МассивСтрок = СтрРазделить(ЗаголовокСообщения, Символы.ПС);
	
	Для Каждого СтрокаЗаголовка Из МассивСтрок Цикл
		
		Если СтрНачинаетсяС(СтрокаЗаголовка, ПолеЗаголовка) Тогда
			Возврат СокрЛП(Прав(СтрокаЗаголовка, СтрДлина(СтрокаЗаголовка) - СтрДлина(ПолеЗаголовка))); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция АдресОтправителяИнтернетПочтовогоСообщения(Отправитель)
	
	Если ТипЗнч(Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда
		ОтправительАдрес = Отправитель.Адрес;
	Иначе
		ОтправительАдрес = Отправитель;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ОтправительАдрес, "");
	
КонецФункции

Процедура ИзменитьДоменВПочтовомАдресеЕслиНеобходимо(ПочтовыйАдрес)
	
	СинонимыДоменовЭлектроннойПочты = Новый Соответствие;
	
	ВзаимодействияЛокализация.ПриОпределенииСинонимовДоменовЭлектроннойПочты(СинонимыДоменовЭлектроннойПочты);
	
	Если СинонимыДоменовЭлектроннойПочты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураАдреса =  СтруктураАдресаЭлектроннойПочты(ПочтовыйАдрес);
	Если СтруктураАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоменНаКоторыйНеобходимоЗаменить = СинонимыДоменовЭлектроннойПочты[СтруктураАдреса.Домен];
	Если ДоменНаКоторыйНеобходимоЗаменить <> Неопределено Тогда
		ПочтовыйАдрес = СтруктураАдреса.ИмяПочтовогоЯщика + "@" + ДоменНаКоторыйНеобходимоЗаменить;
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьЗагруженныеРанееПодчиненныеПисьма(УчетнаяЗапись, ПолученныеПисьма)
	
	Если ПолученныеПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивДобавляемыхКОбработкеПисем = Новый Массив;
	МетаданныеИсходящееПисьмо = Метаданные.Документы.ЭлектронноеПисьмоИсходящее;
	МетаданныеВходящееПисьмо = Метаданные.Документы.ЭлектронноеПисьмоВходящее;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
	|ПОМЕСТИТЬ ПолученныеПисьмаИдентификаторы
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка В(&МассивПисем)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка                                      КАК Письмо,
	|	ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование                     КАК ТекущееОснование,
	|	ПолученныеПисьмаИдентификаторы.Ссылка                                  КАК СсылкаНаОснование,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийОснования.Предмет, НЕОПРЕДЕЛЕНО)   КАК ПредметПисьмаОснования,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийПодчиненные.Предмет, НЕОПРЕДЕЛЕНО) КАК ПредметПисьмаПодчиненное
	|ИЗ
	|	ПолученныеПисьмаИдентификаторы КАК ПолученныеПисьмаИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ПолученныеПисьмаИдентификаторы.ИдентификаторСообщения = ЭлектронноеПисьмоИсходящее.ИдентификаторОснования
	|			И (ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование <> ПолученныеПисьмаИдентификаторы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийПодчиненные
	|		ПО (ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействийПодчиненные.Взаимодействие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийОснования
	|		ПО ПолученныеПисьмаИдентификаторы.Ссылка = ПредметыПапкиВзаимодействийОснования.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ВзаимодействиеОснование,
	|	ПолученныеПисьмаИдентификаторы.Ссылка,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийОснования.Предмет, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействийПодчиненные.Предмет, НЕОПРЕДЕЛЕНО) 
	|ИЗ
	|	ПолученныеПисьмаИдентификаторы КАК ПолученныеПисьмаИдентификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПолученныеПисьмаИдентификаторы.ИдентификаторСообщения = ЭлектронноеПисьмоВходящее.ИдентификаторОснования
	|			И (ЭлектронноеПисьмоВходящее.ВзаимодействиеОснование <> ПолученныеПисьмаИдентификаторы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийПодчиненные
	|		ПО (ЭлектронноеПисьмоВходящее.Ссылка = ПредметыПапкиВзаимодействийПодчиненные.Взаимодействие)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействийОснования
	|		ПО ПолученныеПисьмаИдентификаторы.Ссылка = ПредметыПапкиВзаимодействийОснования.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("МассивПисем", ПолученныеПисьма);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			МетаданныеДокумента = ?(ТипЗнч(Выборка.Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"),
			                        МетаданныеВходящееПисьмо, МетаданныеИсходящееПисьмо);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Письмо);
			РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаблокироватьПредметыПапокВзаимодействий(Блокировка, Выборка.Письмо);
			РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаблокироватьПредметыПапокВзаимодействий(Блокировка,
				 Выборка.СсылкаНаОснование);
			Блокировка.Заблокировать();
			
			ПисьмоОбъект = Выборка.Письмо.ПолучитьОбъект(); // ДокументОбъект.ЭлектронноеПисьмоВходящее, ДокументОбъект.ЭлектронноеПисьмоИсходящее - 
				ПисьмоОбъект.ВзаимодействиеОснование = Выборка.СсылкаНаОснование;
			ПисьмоОбъект.Записать();
			
			// +CRM
			CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(ПисьмоОбъект);
			// -CRM
			
			Если Выборка.ПредметПисьмаОснования <> Выборка.ПредметПисьмаПодчиненное Тогда
				
				Если Выборка.ПредметПисьмаПодчиненное = Выборка.Письмо Тогда
					
					Взаимодействия.УстановитьПредмет(Выборка.Письмо, Выборка.ПредметПисьмаОснования, Ложь);
					
				ИначеЕсли НЕ ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Выборка.ПредметПисьмаПодчиненное) Тогда
					
					Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Выборка.ПредметПисьмаОснования) Тогда
						Взаимодействия.УстановитьПредмет(Выборка.Письмо, Выборка.ПредметПисьмаОснования, Ложь);
						МассивДобавляемыхКОбработкеПисем.Добавить(Выборка.Письмо);
					Иначе 
						Взаимодействия.УстановитьПредмет(Выборка.СсылкаНаОснование, Выборка.ПредметПисьмаПодчиненное, Ложь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не установить письмо основание у %1 по причине %2'"),
				Выборка.Письмо, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента, Выборка.Письмо, ТекстСообщения);
		КонецПопытки;
	
	КонецЦикла;
	 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПолученныеПисьма, МассивДобавляемыхКОбработкеПисем, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с вложения электронных писем.

// Записывает вложение электронного письма, копируя вложение другого письма.
//
// Параметры:
//  Письмо						 - ДокументСсылка - Ссылка на письмо. 
//  СсылкаНаФайл				 - СправочникСсылка - Ссылка на файл.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы. 
// 
// Возвращаемое значение:
//  СправочникСсылка - Ссылка на присоединенный файл. 
//
Функция ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
	Письмо,
	СсылкаНаФайл,
	УникальныйИдентификаторФормы) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(
		СсылкаНаФайл, УникальныйИдентификаторФормы, Истина);
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов = Письмо;
	ПараметрыФайла.ИмяБезРасширения = ДанныеФайла.Наименование;
	ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
	ПараметрыФайла.ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		"");
	
КонецФункции
	
// Записывает вложение электронного письма, копируя вложение другого письма с сохранением
// идентификатора файла.
//
// Параметры:
//  Письмо						 - ДокументСсылка - Ссылка на письмо. 
//  СсылкаНаФайл				 - СправочникСсылка - Ссылка на файл.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы. 
// 
// Возвращаемое значение:
//  СправочникСсылка - Ссылка на присоединенный файл. 
//
Функция CRM_ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
	Письмо,
	СсылкаНаФайл,
	УникальныйИдентификаторФормы,
	ИдентификаторФайла) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(
		СсылкаНаФайл, УникальныйИдентификаторФормы, Истина);
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов = Письмо;
	ПараметрыФайла.ИмяБезРасширения = ДанныеФайла.Наименование;
	ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
	ПараметрыФайла.ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
	ПараметрыФайла.Вставить("ИДФайлаЭлектронногоПисьма", ИдентификаторФайла);
	
	Возврат РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла,
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		"");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Уведомления о прочтении

Процедура ЗаписатьНеобходимостьОбработкиУведомленияОПрочтении(Письмо)
	
	Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
	Запись.Письмо = Письмо;
	Запись.Записать();
	
КонецПроцедуры

// Устанавливает признак отправки уведомления о прочтении электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо для которого устанавливается признак.
//  Отправлять  - Булево - если Истина, то признак будет установлен, снят если Ложь.
//
Процедура УстановитьПризнакОтправкиУведомления(Письмо, Отправлять) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Отправлять Тогда
		
		Запись = РегистрыСведений.УведомленияОПрочтении.СоздатьМенеджерЗаписи();
		Запись.Письмо = Письмо;
		Запись.ТребуетсяОтправка = Истина;
		Запись.ДатаПрочтения     = ПолучитьДатуСтрокойСоСмещениемGMT(ТекущаяДатаСеанса());
		Запись.Пользователь      = Пользователи.ТекущийПользователь();
		Запись.Записать();
		
	Иначе
		
		НаборЗаписей = РегистрыСведений.УведомленияОПрочтении.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Письмо.Установить(Письмо);
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ПолучитьВажностьЭлектронногоПисьма(Важность)
	
	Если (Важность = ВажностьИнтернетПочтовогоСообщения.Высокая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Наивысшая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Высокая;

	ИначеЕсли (Важность = ВажностьИнтернетПочтовогоСообщения.Наименьшая)
		ИЛИ (Важность = ВажностьИнтернетПочтовогоСообщения.Низкая) Тогда
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Низкая;

	Иначе
		
		Возврат Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстУведомленияОПрочтении(Выборка)

	ТекстУведомленияАнглийский = "
		|Your message from " + Выборка.ОтправительПредставление + "<" + Выборка.ОтправительАдрес + ">
		|Subject: " + Выборка.Тема + "
		|Sent " + Выборка.Дата + "
		|Has been read " +  Выборка.ДатаПрочтения + "
		|By Recipient " + Выборка.ИмяПользователя + "<" + Выборка.АдресЭлектроннойПочты + ">";
	
	ЛокализованноеУведомление = Символы.ПС + НСтр("ru = 'Сообщение от %1 < %2 >
		|Тема: %3
		|Отправленное %4
		|Было прочитано %5
		|Получателем %6 <%7>'");
	
	ЛокализованноеУведомление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЛокализованноеУведомление,
		Выборка.ОтправительПредставление,
		Выборка.ОтправительАдрес,
		Выборка.Тема,
		Выборка.Дата,
		Выборка.ДатаПрочтения,
		Выборка.ИмяПользователя,
		Выборка.АдресЭлектроннойПочты);
	
	Возврат ЛокализованноеУведомление + Символы.ПС + Символы.ПС + ТекстУведомленияАнглийский;

КонецФункции

Функция ПолучитьДатуСтрокойСоСмещениемGMT(Дата)
	
	СмещениеВремениВСекундах = УниверсальноеВремя(Дата) - Дата; 
	ЧасыСмещения = Цел(СмещениеВремениВСекундах / 3600); 
	СтрокаЧасыСмещения = ?(ЧасыСмещения > 0, "+", "") + Формат(ЧасыСмещения, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	МинутыСмещения = СмещениеВремениВСекундах % 3600;
	Если МинутыСмещения < 0 Тогда
		МинутыСмещения = - МинутыСмещения;
	КонецЕсли;
	СтрокаМинутыСмещения = Формат(МинутыСмещения, "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=");
	
	Возврат Формат(Дата, "ДЛФ=DT") + " GMT " + СтрокаЧасыСмещения + СтрокаМинутыСмещения;

КонецФункции

Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Взаимодействия'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи");
		ЭлементБлокировки.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
		Блокировка.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
		НаборЗаписей.Записать();

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаблокироватьУчетнуюЗапись(УчетнаяЗапись)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи");
		ЭлементБлокировки.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
		Блокировка.Заблокировать();
		
		// Проверим блокировку учетной записи и если она доступна для получения, установим блокировку.
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаблокированныеДляПолученияУчетныеЗаписи.ДатаБлокировки
		|ИЗ
		|	РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи КАК ЗаблокированныеДляПолученияУчетныеЗаписи
		|ГДЕ
		|	ЗаблокированныеДляПолученияУчетныеЗаписи.УчетнаяЗапись = &УчетнаяЗапись";
		
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ДатаБлокировки + 60 * 60 > ТекущаяДатаСеанса() Тогда
				ЗафиксироватьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЗаблокированныеДляПолученияУчетныеЗаписи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись  = УчетнаяЗапись;
		МенеджерЗаписи.ДатаБлокировки = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьПочтуЗаПериод(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУчетнойЗаписи = Параметры.ДанныеУчетнойЗаписи;
	ДатаНачалаПериода = Параметры.ДатаНачалаПериода;
	ДатаОкончанияПериода = Параметры.ДатаОкончанияПериода;
	ОбрабатыватьКакНовые = Параметры.ОбрабатыватьКакНовые;
	
	Если Не ЗаблокироватьУчетнуюЗапись(ДанныеУчетнойЗаписи.Ссылка) Тогда
		ТекстОшибки = НСтр("ru='Учетная запись заблокирована для получения почты. Попробуйте повторить загрузку позже.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ДанныеУчетнойЗаписи.Ссылка, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ДанныеУчетнойЗаписи.ПротоколВходящейПочты = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(Профиль, Протокол);
	Исключение
		
		СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
		
		ТекстСообщенияОбОшибке = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
			ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка());
			
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ДанныеУчетнойЗаписи.Ссылка,
				ТекстСообщенияОбОшибке);
			
		ЗаписьЖурналаРегистрации(CRM_УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
		
		Возврат;
		
	КонецПопытки;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
		ПараметрыОтбора.Вставить("ПослеДатыОтправления", ДатаНачалаПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		ПараметрыОтбора.Вставить("ДоДатыОтправления", ДатаОкончанияПериода);
	КонецЕсли;
	
	КоличествоПисем = 0;
	ПолученоПисемВсего = 0;
	ПолученныеПисьма = ПолученныеПисьма();
	ВремяНачалаОперации = ТекущаяДатаСеанса();

	Если Протокол = ПротоколИнтернетПочты.POP3 Тогда
		
		// Получим идентификаторы сообщений на сервере.
		Идентификаторы = Почта.ПолучитьИдентификаторы(, ПараметрыОтбора);
		Если Идентификаторы.Количество() = 0 И (Не ДанныеУчетнойЗаписи.ОставлятьКопии) Тогда
			// Если на сервере сообщений нет, то удалим все записи по учетной записи в регистре сведений
			// ИдентификаторыПолученныхЭлектронныхПисем.
			УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
			Возврат;
		КонецЕсли;
		
		// -----------------------------------------------------------------
		// Определим какие сообщения нужно получать.
		ИдЗагружать = ПолучитьИдентификаторыПисемДляЗагрузки(Идентификаторы, ДанныеУчетнойЗаписи.Ссылка);
		КоличествоПисем = ИдЗагружать.Количество();
		
		ПолучитьПочтуЗаПериодПоПорциям(Почта, 
		                               ДанныеУчетнойЗаписи,
		                               ИдЗагружать, 
		                               ПолученоПисемВсего, 
		                               ПолученныеПисьма,
		                               КоличествоПисем,
		                               ВремяНачалаОперации,
				                       ОбрабатыватьКакНовые);
	
		// -----------------------------------------------------------------
		// Удалим ненужные сообщения на сервере.
		Если Не ДанныеУчетнойЗаписи.ОставлятьКопии Тогда
			// удалять все
			МассивКУдалению = Идентификаторы;
			УдалятьВсе = Истина;
		Иначе
			УдалятьВсе = Ложь;
			Если ДанныеУчетнойЗаписи.ОставлятьДней > 0 Тогда
				МассивКУдалению = ПолучитьИдентификаторыПисемДляУдаленияНаСервере(
				Идентификаторы, 
				ДанныеУчетнойЗаписи.Ссылка, 
				ТекущаяДатаСеанса() - ДанныеУчетнойЗаписи.ОставлятьДней * 24 * 60 * 60);
			Иначе
				МассивКУдалению = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивКУдалению.Количество() <> 0 Тогда
			Почта.УдалитьСообщения(МассивКУдалению);
		КонецЕсли;
		
		// -----------------------------------------------------------------
		// Удалим ненужные идентификаторы в регистре сведений.
		Если УдалятьВсе Тогда
			УдалитьИдентификаторыВсехРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		Иначе
			УдалитьИдентификаторыРанееПолученныхПисем(ДанныеУчетнойЗаписи.Ссылка, Идентификаторы, МассивКУдалению);
		КонецЕсли;
		
	Иначе
		
		// +CRM
		//МассивИменАктивныхПапок = МассивИменАктивныхПапок(Почта);
		МассивИменАктивныхПапок = ИменаАктивныхПапок(Почта, ДанныеУчетнойЗаписи);
		// -CRM
		
		КвалификаторСтроки255 =  Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(255,
			 ДопустимаяДлина.Переменная));
		
		ТаблицаИдентификаторов = Новый ТаблицаЗначений;
		ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки255);
		ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПисьма", КвалификаторСтроки255);
		ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторОригинальногоПисьмаMicrosoft", КвалификаторСтроки255);
		
		ТаблицаПустыхИдентификаторов = Новый ТаблицаЗначений;
		ТаблицаПустыхИдентификаторов.Колонки.Добавить("ИдентификаторНаСервере", КвалификаторСтроки255);
		ТаблицаПустыхИдентификаторов.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(32));
		
		МассивВсехИдентификаторов = Новый Массив;
		
		ДатаЗагрузкиПисем = ТекущаяДатаСеанса();
		
		Для каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
			
			Попытка
				Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				ЗаголовкиПисемДляЗагрузки = Почта.ПолучитьЗаголовки(ПараметрыОтбора);
			Исключение
				Продолжить;
			КонецПопытки;
			
			МассивЗаголовковСПустымИдентификатором = Новый Массив;
			ТаблицаИдентификаторов.Очистить();
			Для Каждого ЗаголовокПисьма Из ЗаголовкиПисемДляЗагрузки Цикл
				
				// +CRM
				//Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) Тогда
				Если ПустаяСтрока(ЗаголовокПисьма.ИдентификаторСообщения) 
					Или СтрНайти(НРег(ЗаголовокПисьма.ИдентификаторСообщения), "null") > 0 Тогда
				// -CRM
					МассивЗаголовковСПустымИдентификатором.Добавить(ЗаголовокПисьма);
					Продолжить;
				КонецЕсли;
				
				ОпределитьИдентификаторыВходящегоСообщения(ЗаголовокПисьма, ТаблицаИдентификаторов);
				
			КонецЦикла;
			
			Если ТаблицаИдентификаторов.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма КАК ИдентификаторПисьма,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft КАК ИдентификаторОригинальногоПисьмаMicrosoft
				|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
				|ИЗ
				|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма КАК ИдентификаторПисьма,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft КАК ИдентификаторОригинальногоПисьмаMicrosoft
				|ИЗ
				|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
				|		ПО ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоВходящее.ИдентификаторСообщения
				|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				|		ПО (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
				|			И (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения
				|				ИЛИ ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщенияОтправкаIMAP
				|				ИЛИ ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft <> """"
				|					И ИдентификаторыПисемКЗагрузке.ИдентификаторОригинальногоПисьмаMicrosoft = ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения)
				|			И (ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено))
		// +CRM
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныеДанныеОтправленныхПисем КАК ВременныеДанныеОтправленныхПисем
				|		ПО (ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ВременныеДанныеОтправленныхПисем.ИдентификаторСообщения
				|			ИЛИ	ИдентификаторыПисемКЗагрузке.ИдентификаторПисьма = ВременныеДанныеОтправленныхПисем.ИдентификаторСообщенияОтправкаIMAP)
				|			И (ВременныеДанныеОтправленныхПисем.УчетнаяЗапись = &УчетнаяЗапись)
		// -CRM
				|ГДЕ
				|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL
				|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL
		// +CRM
				|	И ВременныеДанныеОтправленныхПисем.Письмо ЕСТЬ NULL";
		// -CRM
				
				Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаИдентификаторов);
				Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
				
				ИдЗагружать = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(
					Запрос).Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
				КоличествоПисем = КоличествоПисем + ИдЗагружать.Количество();
				Если ИдЗагружать.Количество() > 0 Тогда
					МассивВсехИдентификаторов.Добавить(Новый Структура("ТекущийПочтовыйЯщик, ИдЗагружать",
						 ИмяАктивнойПапки,
						 ИдЗагружать));
				КонецЕсли;
				
			КонецЕсли;
			
			Если МассивЗаголовковСПустымИдентификатором.Количество() > 0 Тогда
				
				ТаблицаПустыхИдентификаторов.Очистить();
				
				Для Каждого ЗаголовокПисьма Из МассивЗаголовковСПустымИдентификатором Цикл
					НоваяСтрока = ТаблицаПустыхИдентификаторов.Добавить();
					НоваяСтрока.ИдентификаторНаСервере = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ЗаголовокПисьма.Идентификатор[0],
						 "");
					НоваяСтрока.ХешСумма               = ХешСуммаПочтовогоСообщения(ЗаголовокПисьма);
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ИдентификаторыПисемКЗагрузке.ХешСумма КАК ХешСумма,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере
				|ПОМЕСТИТЬ ИдентификаторыПисемКЗагрузке
				|ИЗ
				|	&ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИдентификаторыПисемКЗагрузке.ХешСумма КАК ХешСумма,
				|	ИдентификаторыПисемКЗагрузке.ИдентификаторНаСервере КАК ИдентификаторНаСервере
				|ИЗ
				|	ИдентификаторыПисемКЗагрузке КАК ИдентификаторыПисемКЗагрузке
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
				|		ПО ИдентификаторыПисемКЗагрузке.ХешСумма = ЭлектронноеПисьмоВходящее.ХешСумма
				|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				|		ПО (ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись)
				|			И (ИдентификаторыПисемКЗагрузке.ХешСумма = ЭлектронноеПисьмоИсходящее.ХешСумма)
				|ГДЕ
				|	ЭлектронноеПисьмоВходящее.Ссылка ЕСТЬ NULL
				|	И ЭлектронноеПисьмоИсходящее.Ссылка ЕСТЬ NULL";
				
				Запрос.УстановитьПараметр("ИдентификаторыПисемКЗагрузке", ТаблицаПустыхИдентификаторов);
				Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
				
				ИдЗагружать = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(
					Запрос).Выгрузить().ВыгрузитьКолонку("ИдентификаторНаСервере");
				КоличествоПисем = КоличествоПисем + ИдЗагружать.Количество();
				Если ИдЗагружать.Количество() > 0 Тогда
					МассивВсехИдентификаторов.Добавить(Новый Структура("ТекущийПочтовыйЯщик, ИдЗагружать",
						 ИмяАктивнойПапки,
						 ИдЗагружать));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СписокИдентификаторов Из МассивВсехИдентификаторов Цикл
			Почта.ТекущийПочтовыйЯщик = СписокИдентификаторов.ТекущийПочтовыйЯщик;
			ПолучитьПочтуЗаПериодПоПорциям(Почта, 
			                               ДанныеУчетнойЗаписи,
			                               СписокИдентификаторов.ИдЗагружать, 
			                               ПолученоПисемВсего, 
			                               ПолученныеПисьма,
			                               КоличествоПисем,
			                               ВремяНачалаОперации,
			                               ОбрабатыватьКакНовые, 
			                               ТаблицаПустыхИдентификаторов);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
			ПараметрыОтбора = Новый Структура("УчетнаяЗапись", ДанныеУчетнойЗаписи.Ссылка);
			ДатаПоследнейЗагрузки =
				РегистрыСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений.Получить(ПараметрыОтбора).ДатаЗагрузкиПисем;
			Если ДатаОкончанияПериода > ДатаПоследнейЗагрузки Тогда
				УстановитьДатуПоследнейЗагрузкиПисем(ДанныеУчетнойЗаписи.Ссылка, Мин(ДатаОкончанияПериода, ДатаЗагрузкиПисем));
			КонецЕсли;
		Иначе
			УстановитьДатуПоследнейЗагрузкиПисем(ДанныеУчетнойЗаписи.Ссылка, ДатаЗагрузкиПисем);
		КонецЕсли;
		
	КонецЕсли;
	
	Почта.Отключиться();
	СнятьБлокировкуУчетнойЗаписиДляПолучения(ДанныеУчетнойЗаписи.Ссылка);
	
КонецПроцедуры

Процедура ПолучитьПочтуЗаПериодПоПорциям(Почта, ДанныеУчетнойЗаписи, МассивИдентификаторов,
	 ПолученоПисемВсего, ПолученныеПисьма, КоличествоПисем, ВремяНачалаОперации,
	 ОбрабатыватьКакНовые, ТаблицаПустыхИдентификаторов = Неопределено)

	Пока МассивИдентификаторов.Количество() > 0 Цикл
		
		РазмерПорции = Мин(МассивИдентификаторов.Количество(), 5);
		Получено = 0;
		
		МассивИдентификаторовКПолучению = Новый Массив();
		// BSLLS:UnusedLocalVariable-off
		Для Элемент = 1 По РазмерПорции Цикл
		// BSLLS:UnusedLocalVariable-on
			МассивИдентификаторовКПолучению.Добавить(МассивИдентификаторов[0]);
			МассивИдентификаторов.Удалить(0);
		КонецЦикла;
		
		ПолучитьПисьмаПоИдентификаторам(Почта, ДанныеУчетнойЗаписи,
			МассивИдентификаторовКПолучению, ПолученныеПисьма, МассивИдентификаторов, 
			Истина, Не ОбрабатыватьКакНовые, ТаблицаПустыхИдентификаторов);
		
		Взаимодействия.ЗаполнитьКонтактыМассиваВзаимодействий(ПолученныеПисьма.ВсеПолученныеПисьма);
		Взаимодействия.УстановитьПапкиДляМассиваПисем(ПолученныеПисьма.ПисьмаДляОпределенияПапок);
		Взаимодействия.РассчитатьРассмотреноПоПредметам(ПолученныеПисьма.ВсеПолученныеПисьма);
		Взаимодействия.РассчитатьРассмотреноПоКонтактам(ПолученныеПисьма.ВсеПолученныеПисьма);
		ОтправитьУведомленияОПрочтении(Ложь);
		ЗаполнитьПапкиЭлектронныхПисем(ДанныеУчетнойЗаписи.Ссылка);
		
		ПолученоПисемВсего = ПолученоПисемВсего + Получено; 
		
		Прогресс = Окр(ПолученоПисемВсего / КоличествоПисем * 100, 0);
		ПрошедшееВремя = ТекущаяДатаСеанса() - ВремяНачалаОперации;
		ОставшеесяВремя = ?(Прогресс <> 0, Окр(ПрошедшееВремя / Прогресс * (100 - Прогресс), 0), 0);
		Сообщение = СтрШаблон(НСтр("ru='Осталось ~ %1 сек.'"), ОставшеесяВремя);
		ДлительныеОперации.СообщитьПрогресс(Прогресс, Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НаПроверку

// Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов)
Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов, АдресУЗ, УчетнаяЗапись)
	
	СоответствиеКонтактов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	// +CRM
	//|	(ВЫБРАТЬ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	// -CRM
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	// +CRM
	|,
	|		5 КАК Флаг
	|,
	|		0 КАК СтатусКонтакта
	// -CRM
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	// +CRM
	|		И НЕ КонтактнаяИнформация.АдресЭП = &АдресУЗ
	// -CRM
	|		И &ТекстЗапросаДругиеТипыКонтактов)КАК Контакты
	// +CRM
	|УПОРЯДОЧИТЬ ПО
	|	Контакты.Флаг,
	|	Контакты.СтатусКонтакта
	// -CRM
	|ИТОГИ ПО
	|	АдресЭП
	|";
	
	ТекстЗапросаДругиеТипыКонтактов = "";
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" 
			// +CRM
			Или ЭлементМассиваОписания.Имя = "ФизическиеЛица" Тогда
			// -CRM
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		// +CRM
		|";
		Если ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
			|,
			|		1 КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "Партнеры" Тогда
			ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
			|,
			|		ВЫБОР КОГДА КлючЛица.Физлицо Есть NULL ТОГДА 2 ИНАЧЕ 0 КОНЕЦ КАК Флаг";
		ИначеЕсли ЭлементМассиваОписания.Имя = "CRM_ПотенциальныеКлиенты" Тогда
			ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
			|,
			|		3 КАК Флаг";
		КонецЕсли;
		Если ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
			|,
			|	ВЫБОР
			|		КОГДА КонтактнаяИнформация.Ссылка.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
			|			ТОГДА 2
			|		КОГДА КонтактнаяИнформация.Ссылка.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СтатусКонтакта";
		Иначе
			ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
			|,
			|		0 КАК СтатусКонтакта";
		КонецЕсли;
		ТекстЗапросаДругиеТипыКонтактов = ТекстЗапросаДругиеТипыКонтактов + "
		// -CRM
		|ИЗ
		|	&ТаблицаКонтактнаяИнформация КАК КонтактнаяИнформация
		// +CRM
		|	" + ?(ЭлементМассиваОписания.Имя <> "Партнеры", "",
			"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК КлючЛица
			| ПО КлючЛица.ФизЛицо = КонтактнаяИнформация.Ссылка") + "
			|
		// -CRM
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
		ТекстЗапросаДругиеТипыКонтактов = СтрЗаменить(ТекстЗапросаДругиеТипыКонтактов, "&ТаблицаКонтактнаяИнформация", "Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация");
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстЗапросаДругиеТипыКонтактов", ТекстЗапросаДругиеТипыКонтактов);
	
	// +CRM
	Запрос.УстановитьПараметр("АдресУЗ", АдресУЗ);
	// -CRM
	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// +CRM
		Пока (ВыборкаПоСсылкам.Следующий()) Цикл	
			// Проверим, если включено использование уровней доступа, контактом является партнер или КЛ партнера
			// и пользователям учетной записи доступен партнер, тогда добавим в соответствие.
			Если ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.Партнеры")
			Или ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если Не КонтактДоступен(?(ТипЗнч(ВыборкаПоСсылкам.Ссылка) = Тип("СправочникСсылка.Партнеры"),
					 ВыборкаПоСсылкам.Ссылка, ВыборкаПоСсылкам.Ссылка.Владелец),
					 УчетнаяЗапись) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		// -CRM
			СоответствиеКонтактов.Вставить(ВРег(Выборка.АдресЭП), ВыборкаПоСсылкам.Ссылка);
			// +CRM
			Прервать;
			// -CRM
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоответствиеКонтактов;
	
КонецФункции

Функция СоответствиеКонтактовВПисьме(Письмо, УчетнаяЗапись)
	
	СоответствиеКонтактов = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат СоответствиеКонтактов;
	КонецЕсли;
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ТекстЗапросаОтправитель = "
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|";
		
		ТекстЗапросаОтправитель = ТекстЗапросаОтправитель + "
		|ВЫБРАТЬ
		|		ЭлектронноеПисьмоВходящее.ОтправительАдрес   КАК Адрес,
		|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт КАК Контакт
		|	ИЗ
		|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|	ГДЕ
		|		ЭлектронноеПисьмоВходящее.Ссылка = &Письмо";
		
	Иначе
		
		ТекстЗапросаОтправитель = "";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адреса.Адрес,
	|	Адреса.Контакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		Получатели.Адрес    КАК Адрес,
	|		Получатели.Контакт  КАК Контакт
	|	ИЗ
	|		&ИмяТаблицыПолучателиПисьма КАК Получатели
	|	ГДЕ
	|		Получатели.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Получатели.Адрес,
	|		Получатели.Контакт
	|	ИЗ
	|		&ИмяТаблицыПолучателиКопий  КАК Получатели
	|	ГДЕ
	|		Получатели.Ссылка = &Письмо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Получатели.Адрес,
	|		Получатели.Контакт
	|	ИЗ
	|		&ИмяТаблицыПолучателиОтвет КАК Получатели
	|	ГДЕ
	|		Получатели.Ссылка = &Письмо И &ТекстЗапросаОтправитель) КАК Адреса";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстЗапросаОтправитель", ТекстЗапросаОтправитель);
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиПисьма", "Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиКопий", "Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиОтвет", "Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиПисьма", "Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиКопий", "Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыПолучателиОтвет", "Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Контакт) <> Тип("Строка") Тогда
			// +CRM
			// Проверим, если включено использование уровней доступа, контактом является партнер или КЛ партнера
			// и пользователям учетной записи доступен партнер, тогда добавим в соответствие
			Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры")
			ИЛИ ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если НЕ КонтактДоступен(?(ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Партнеры"),
					 Выборка.Контакт, Выборка.Контакт.Владелец),
					 УчетнаяЗапись) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -CRM
			СоответствиеКонтактов.Вставить(ВРег(Выборка.Адрес), Выборка.Контакт);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеКонтактов;
	
КонецФункции

Процедура ЗаписатьВложениеЭлектронногоПисьма(Объект, Вложение, ПодписиВложения, КоличествоПустыхИменВоВложениях,
	 ЗаписыватьДвоичныеДанные = Истина) Экспорт
	
	ПисьмоСсылка = Объект.Ссылка;
	Размер = 0;
	ЭтоВложениеПисьмо = Ложь;
	
	Если ТипЗнч(Вложение.Данные) = Тип("ДвоичныеДанные") Тогда
		
		ДанныеВложения = Вложение.Данные;
		// +CRM
		//ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Вложение.ИмяФайла, "");
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Вложение.ИмяФайла, "_");
		// -CRM
		ЭтоВложениеПисьмо = УправлениеЭлектроннойПочтой.ФайлЯвляетсяЭлектроннымПисьмом(ИмяФайла, ДанныеВложения);
		
	Иначе
		
		ДанныеВложения = Вложение.Данные.ПолучитьИсходныеДанные();
		ИмяФайла = Взаимодействия.ПредставлениеПисьма(Вложение.Данные.Тема, Вложение.Данные.ДатаПолучения) + ".eml";
		ЭтоВложениеПисьмо = Истина;
		
	КонецЕсли;
	
	Размер = ДанныеВложения.Размер();
	Адрес = ПоместитьВоВременноеХранилище(ДанныеВложения, "");
	
	Если Не ПустаяСтрока(Вложение.Идентификатор) Тогда
		
		Если СтрНайти(Объект.ТекстHTML, Вложение.Идентификатор) = 0 
			Или (СтрНайти(Объект.ТекстHTML, Вложение.Имя) > 0 
			И СтрНайти(Вложение.Идентификатор, Вложение.Имя + "@") = 0
			И СтрНайти(Объект.ТекстHTML, "alt=" + """" + Вложение.Имя + """") = 0) Тогда
			
			Вложение.Идентификатор = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьПодписи = (ПодписиВложения.Количество() > 0)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись");
		
	ЭтоОтображаемыйФайл = НЕ ПустаяСтрока(Вложение.Идентификатор);
	
	ПараметрыВложения = Новый Структура;
	ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
	ПараметрыВложения.Вставить("Размер", Размер);
	Если ЭтоОтображаемыйФайл Тогда
		ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", Вложение.Идентификатор);
	КонецЕсли;
	Если ЭтоВложениеПисьмо Тогда
		ПараметрыВложения.Вставить("ЭтоВложениеПисьмо", Истина);
	КонецЕсли;
	Если ЕстьПодписи Тогда
		ПараметрыВложения.Вставить("ПодписанЭП", Истина);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(НРег(ИмяФайла), "." + НРег(РасширениеДляЗашифрованныхФайлов())) Тогда
		
		Зашифрован = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодписьСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебныйКлиентСервер");
			ТипДанных = МодульЭлектроннаяПодписьСлужебныйКлиентСервер.ОпределитьТипДанных(ДанныеВложения);
			Если ТипДанных <> "ЗашифрованныеДанные" Тогда
				Зашифрован = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Зашифрован Тогда
			ПараметрыВложения.Вставить("Зашифрован", Зашифрован);
			ПараметрыВложения.Вставить("ИмяФайла", Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));
		КонецЕсли;
		
	КонецЕсли;
	
	ВложениеПисьмаСсылка = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		ПисьмоСсылка, Адрес, ПараметрыВложения, КоличествоПустыхИменВоВложениях);
	
	Если ЕстьПодписи Тогда
		
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		МодульЭлектроннаяПодписьКлиентСервер= ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		Для Каждого ПодписьВложения Из ПодписиВложения Цикл
			
			Попытка
				ДанныеПодписиВложения = МодульЭлектроннаяПодпись.ПодписьВКодировкеDER(ПодписьВложения.Данные);
			Исключение
				ТекстСобытия = НСтр("ru = 'Не удалось прочитать данные подписи вложения %1: %2'");
				ОшибкаНеУдалосьПрочитатьДанныеПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСобытия, ВложениеПисьмаСсылка, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , ОшибкаНеУдалосьПрочитатьДанныеПодписи);
				Продолжить;
			КонецПопытки;
			
			ДанныеПодписи = МодульЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
			ДанныеПодписи.Подпись = ДанныеПодписиВложения;
			РезультатЧтенияСвойствПодписи = МодульЭлектроннаяПодпись.СвойстваПодписи(ДанныеПодписиВложения);
			
			Если РезультатЧтенияСвойствПодписи.Успех <> Ложь Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПодписи, РезультатЧтенияСвойствПодписи);
				ДанныеПодписи.Вставить("ДатаПодписиИзМетки", РезультатЧтенияСвойствПодписи.ДатаПодписиИзМетки);
				ДанныеПодписи.Вставить("НеподтвержденнаяДатаПодписи", РезультатЧтенияСвойствПодписи.НеподтвержденнаяДатаПодписи);
			Иначе
				ТекстСобытия = НСтр("ru = 'Не удалось прочитать данные подписи вложения %1: %2'");
				ОшибкаНеУдалосьПрочитатьДанныеПодписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСобытия, ВложениеПисьмаСсылка, РезультатЧтенияСвойствПодписи.ТекстОшибки);
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , ОшибкаНеУдалосьПрочитатьДанныеПодписи);
				Продолжить;
			КонецЕсли;
			
			ДанныеПодписи.Комментарий = НСтр("ru = 'Вложение электронного письма'");
			
			РаботаСФайлами.ДобавитьПодписьКФайлу(ВложениеПисьмаСсылка, ДанныеПодписи);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// +CRM
	Если Не ЗаписыватьДвоичныеДанные Тогда
		CRM_ОчисткаВложенийЭлектронныхПисем.ОчиститьВложение(ВложениеПисьмаСсылка);
	КонецЕсли;
	// -CRM
	
	УдалитьИзВременногоХранилища(Адрес);
	
КонецПроцедуры

Функция КонтактДоступен(Контакт, УчетнаяЗапись) Экспорт
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Истина;
	КонецЕсли;
	Если УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Константы["CRM_ИспользоватьОграниченияДоступа"].Получить() Тогда
		// Если у партнера не прописаны урови доступа, то доступен всем.
		Если Контакт["CRM_УровниДоступа"].Количество() = 0 Тогда
			Возврат Истина;
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
			               |ГДЕ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись
			               |	И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь ССЫЛКА Справочник.Пользователи
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	ИсполнителиЗадач.Исполнитель
			               |ИЗ
			               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			               |		ПО CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = ИсполнителиЗадач.РольИсполнителя
			               |ГДЕ
			               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись";
			
			МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
			
			// Если хотя бы у одного пользователя учетной записи нет доступа к партнеру
			// то партнер считается недоступным и отменяем сопоставление.
			Для Каждого Пользователь Из МассивПользователей Цикл
				
				// Исключим из проверки пользователей с полными правами и тех, для кого нет пользователя ИБ.
				Если НЕ ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
					 ИЛИ Пользователи.РолиДоступны("ПолныеПрава", Пользователь) Тогда
					Продолжить;
				КонецЕсли; 
				
				// Если у пользователя не указан уровень доступа, партнер недоступен.
				Если НЕ ЗначениеЗаполнено(Пользователь.CRM_УровеньДоступа) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
				Если Не Модуль.ДоступРазрешен(Контакт, Пользователь) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Выбирает входящие письма, для которых настроена автоматическая пересылка, и пересылает их на указанный адрес.
//
// Параметры:
//  МассивПисем  - Массив - Массив полученных входящих писем.
//
Процедура ПереслатьПисьма(МассивПисем)
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("УчетнаяЗапись");
	ТаблицаСоответствий.Колонки.Добавить("АдресПересылки");
	ТаблицаСоответствий.Колонки.Добавить("Письмо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаОбработкиЭлектроннойПочты.Владелец КАК УчетнаяЗапись,
	               |	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек КАК КомпоновщикНастроек,
	               |	ПравилаОбработкиЭлектроннойПочты.CRM_ПересылатьНаАдрес КАК АдресПересылки,
	               |	ПравилаОбработкиЭлектроннойПочты.Ссылка КАК Ссылка,
	               |	ПравилаОбработкиЭлектроннойПочты.Наименование КАК НаименованиеПравила
	               |ИЗ
	               |	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	               |ГДЕ
	               |	ПравилаОбработкиЭлектроннойПочты.Владелец В
	               |			(ВЫБРАТЬ
	               |				Взаимодействия.УчетнаяЗапись КАК УчетнаяЗапись
	               |			ИЗ
	               |				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	               |			ГДЕ
	               |				Взаимодействия.Ссылка В (&МассивПисем))
	               |	И НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления
	               |	И ПравилаОбработкиЭлектроннойПочты.CRM_ПересылатьНаАдрес <> """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания
	               |ИТОГИ ПО
	               |	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаУчетнаяЗапись = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетнаяЗапись.Следующий() Цикл
		Выборка = ВыборкаУчетнаяЗапись.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Попытка
				
				СхемаПравилаОбработки = 
					Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
				КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор, "Ссылка", МассивПисем, ВидСравненияКомпоновкиДанных.ВСписке);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор,
					"Ссылка.УчетнаяЗапись",
					ВыборкаУчетнаяЗапись.УчетнаяЗапись,
					ВидСравненияКомпоновкиДанных.Равно);
				
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
					СхемаПравилаОбработки,
					КомпоновщикНастроек.ПолучитьНастройки(),
					, ,
					Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				// BSLLS:CreateQueryInCycle-off
				// Выполнение различных запросов
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
				ЗапросПравило = Новый Запрос(ТекстЗапроса);
				Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
				КонецЦикла;
				
				РезультатПисьма = ЗапросПравило.Выполнить();
				// BSLLS:CreateQueryInCycle-on	
				Если Не РезультатПисьма.Пустой() Тогда
					ВыборкаПисьма = РезультатПисьма.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
						НоваяСтрокаТаблицы.УчетнаяЗапись = Выборка.УчетнаяЗапись;
						НоваяСтрокаТаблицы.АдресПересылки = Выборка.АдресПересылки;
						НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
					КонецЦикла;
				КонецЕсли;
				
			Исключение
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось применить правило обработки писем ""%1"" для учетной записи 
					|""%2"" по причине: %3
					|Требуется исправить правило.'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияОбОшибке, 
					Выборка.НаименованиеПравила,
					Выборка.УчетнаяЗапись,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщенияОбОшибке);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УчетныеЗаписи = ТаблицаСоответствий.Скопировать(, "УчетнаяЗапись");
	УчетныеЗаписи.Свернуть("УчетнаяЗапись");
	
	Для Каждого Строка Из УчетныеЗаписи Цикл
		
		УчетнаяЗапись = Строка.УчетнаяЗапись;
		Если Не ЗаблокироватьУчетнуюЗапись(УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		ПересылаемыеПисьма = ТаблицаСоответствий.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗапись));
		Письма = Новый Массив;
		СоответствиеСообщенийИПисем = Новый Соответствие;
		
		Для Каждого СтрокаТЗ Из ПересылаемыеПисьма Цикл
			
			ПересылаемоеПисьмо = СтрокаТЗ.Письмо;
	
			НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
			
			НовоеЭлектронноеПисьмо.Дата						= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			НовоеЭлектронноеПисьмо.УчетнаяЗапись			= УчетнаяЗапись;
			НовоеЭлектронноеПисьмо.CRM_ОтправительАдрес		= УчетнаяЗапись.АдресЭлектроннойПочты;
			НовоеЭлектронноеПисьмо.ОтправительПредставление	= Строка(УчетнаяЗапись.АдресЭлектроннойПочты);
			НовоеЭлектронноеПисьмо.Тема						= "FW: " + ПересылаемоеПисьмо.Тема;
			НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
			НовоеЭлектронноеПисьмо.ЕстьВложения				= ПересылаемоеПисьмо.ЕстьВложения;
			НовоеЭлектронноеПисьмо.ТипТекста				= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
			НовоеЭлектронноеПисьмо.Кодировка				= ПересылаемоеПисьмо.Кодировка;
			Если ПустаяСтрока(НовоеЭлектронноеПисьмо.Кодировка) Тогда
				НовоеЭлектронноеПисьмо.Кодировка			= "utf-8";
			КонецЕсли;
			
			ТекстПисьмаHTML = "<br>";
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаHTML);
			ИдентификаторыКартинокПисьма = Новый СписокЗначений;
			
			Если Не УчетнаяЗапись.CRM_ПодписьВнизуПисьма Тогда
				ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
					ТекстПисьмаHTML, УчетнаяЗапись, Неопределено, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			КонецЕсли;
				
			CRM_Взаимодействия.ДобавитьТекстИсходногоПисьма(ТекстПисьмаHTML, ПересылаемоеПисьмо, ПересылаемоеПисьмо);
			ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(ТекстПисьмаHTML,
				ПересылаемоеПисьмо, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
			
			Если УчетнаяЗапись.CRM_ПодписьВнизуПисьма Тогда
				ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
					ТекстПисьмаHTML, УчетнаяЗапись, Неопределено, Новый УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			КонецЕсли;

			КартинкиДобавленные = Новый СписокЗначений;
			CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстПисьмаHTML,
				ИдентификаторыКартинокПисьма, КартинкиДобавленные, Новый СписокЗначений);
				
			НовоеЭлектронноеПисьмо.ТекстHTML = ТекстПисьмаHTML;
			
			НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
			НоваяСтрокаПолучателей.Адрес         = СтрокаТЗ.АдресПересылки;
			НоваяСтрокаПолучателей.Представление = Строка(СтрокаТЗ.АдресПересылки);
			НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = Строка(СтрокаТЗ.АдресПересылки);
			
			НовоеЭлектронноеПисьмо.Записать();
	
			Для Каждого Строка Из КартинкиДобавленные Цикл
				
				ПараметрыВложения = Строка.Значение;
				
				ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					НовоеЭлектронноеПисьмо.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			НовоеЭлектронноеПисьмоОбъект = НовоеЭлектронноеПисьмо.Ссылка.ПолучитьОбъект();
			
			ПересылатьВложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "CRM_ЗагружатьВложенияПриПолученииПисем");
			Если ПересылатьВложения Тогда
				ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(НовоеЭлектронноеПисьмоОбъект, ПересылаемоеПисьмо);
			Иначе
				ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(НовоеЭлектронноеПисьмоОбъект);
			КонецЕсли;
				
			Попытка
				
				Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
				
			Исключение
				
				ШаблонСообщенияОбОшибке = НСтр("ru = 'При подготовке письма %1 к отправке произошла ошибка 
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияОбОшибке, 
					Взаимодействия.ПредставлениеПисьма(НовоеЭлектронноеПисьмоОбъект.Тема, НовоеЭлектронноеПисьмоОбъект.Дата),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
				
				МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Письмо            = НовоеЭлектронноеПисьмо;
				МенеджерЗаписи.КоличествоПопыток = 5;
				МенеджерЗаписи.ИнформацияООшибке = ТекстСообщенияОбОшибке;
				МенеджерЗаписи.Записать();
				
				Продолжить;
				
			КонецПопытки;
			
			Письма.Добавить(Письмо);
			СоответствиеСообщенийИПисем.Вставить(Письмо, НовоеЭлектронноеПисьмо.Ссылка);
			
		КонецЦикла;
		
		ТекстОшибки = Неопределено;
		Попытка
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьма(УчетнаяЗапись, Письма, ТекстОшибки);
			СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись);
			Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗапись, "Отправленные");
			Для Каждого Письмо Из Письма Цикл
				Взаимодействия.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, Папка, Ложь);
			КонецЦикла;
		Исключение
			СнятьБлокировкуУчетнойЗаписиДляПолучения(УчетнаяЗапись);
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, 
				УчетнаяЗапись, РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщенияОбОшибке);
			Если Не ЗначениеЗаполнено(РезультатОтправки) Тогда
				Продолжить;
			КонецЕсли;
		КонецПопытки;
		
		ТекстыОшибок = Новый Массив;
		Для Каждого Письмо Из Письма Цикл
			РезультатОтправкиПисьма = РезультатОтправки[Письмо];
			ПисьмоДокумент = СоответствиеСообщенийИПисем[Письмо];
			ОшибочныеПолучатели = Неопределено;
			Если РезультатОтправкиПисьма <> Неопределено Тогда
				// +CRM Обработка ошибки отправки письма
				Если РезультатОтправкиПисьма.Свойство("ТекстОшибки") И ЗначениеЗаполнено(РезультатОтправкиПисьма.ТекстОшибки) Тогда
					
					МенеджерЗаписи = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Письмо            = ПисьмоДокумент;
					МенеджерЗаписи.КоличествоПопыток = 5;
					МенеджерЗаписи.ИнформацияООшибке = РезультатОтправкиПисьма.ТекстОшибки;
					МенеджерЗаписи.Записать();
					
					ТекстыОшибок.Добавить(РезультатОтправкиПисьма.ТекстОшибки);
					Продолжить;
				КонецЕсли;
				// -CRM
				
				ОшибочныеПолучатели = РезультатОтправкиПисьма.ОшибочныеПолучатели;
				Если ЗначениеЗаполнено(ОшибочныеПолучатели) Тогда
					ПараметрыОбработкиОшибки = ПараметрыОбработкиОшибкиОтправки();
					ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ПисьмоДокумент.ПолучитьОбъект();
					ПараметрыОбработкиОшибки.Ссылка                            = ПисьмоДокумент;
					ПараметрыОбработкиОшибки.ПредставлениеПисьма               = Строка(ПисьмоДокумент);
					РезультатОбработкиОшибки = ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, ОшибочныеПолучатели);
					Если Не РезультатОбработкиОшибки.ПисьмоОтправлено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = ПослеВыполненияОтправкиПисьма(ПисьмоДокумент, РезультатОтправкиПисьма.ИдентификаторПисьмаSMTP, 
					РезультатОтправкиПисьма.ИдентификаторПисьмаIMAP, Ложь, Ложь);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстыОшибок) Тогда
			ВызватьИсключение СтрСоединить(ТекстыОшибок, Символы.ПС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор письма на сервере
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее или ДокументСсылка.ЭлектронноеПисьмоИсходящее
//  Почта  - Почта
//
// Возвращаемое значение:
//   Строка   - идентификатор письма на почтовом сервере
//
Функция ИдентификаторНаСервере(Письмо, Почта)
	
	ИдентификаторНаСервере = "";
	
	ЭтоИсходящееПисьмо = (ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	УчетнаяЗапись = Письмо.УчетнаяЗапись;
	
	МассивИменАктивныхПапок = Почта.ПолучитьПочтовыеЯщики();
	
	ПапкиIMAP = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
	|	ВЫБОР
	|		КОГДА ПапкиЭлектронныхПисем.CRM_ИмяНаСервере = """"
	|			ТОГДА ПапкиЭлектронныхПисем.Наименование
	|		ИНАЧЕ ПапкиЭлектронныхПисем.CRM_ИмяНаСервере
	|	КОНЕЦ КАК ИмяПапки
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец = &УчетнаяЗапись
	|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ПапкиЭлектронныхПисем.CRM_ИмяНаСервере = """"
	|				ТОГДА ПапкиЭлектронныхПисем.Наименование
	|			ИНАЧЕ ПапкиЭлектронныхПисем.CRM_ИмяНаСервере
	|		КОНЕЦ В (&ИменаАктивныхПапок)");
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Параметры.Вставить("ИменаАктивныхПапок", МассивИменАктивныхПапок);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ИдентификаторНаСервере;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПапкиIMAP.Вставить(Выборка.ИмяПапки, Выборка.Папка);
	КонецЦикла;
	
	ДанныеДляСинхронизации = Новый ТаблицаЗначений;
	ДанныеДляСинхронизации.Колонки.Добавить("ИдентификаторНаСервере", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ДанныеДляСинхронизации.Колонки.Добавить("ИдентификаторСообщения", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	ДанныеОтбора = Новый Структура;
	ДанныеОтбора.Вставить("ДатаОтправления", Письмо.Дата);
	ДанныеОтбора.Вставить("Тема", Письмо.Тема);
	
	Для Каждого ИмяАктивнойПапки Из МассивИменАктивныхПапок Цикл
		
		Попытка
			Почта.ТекущийПочтовыйЯщик = ИмяАктивнойПапки;
		Исключение
			Продолжить;
		КонецПопытки;
		
		Попытка
			ПолученныеЗаголовки = Почта.ПолучитьЗаголовки(ДанныеОтбора);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Для Каждого ЗаголовокПисьма Из ПолученныеЗаголовки Цикл
			
			Если ЗаголовокПисьма.ИдентификаторСообщения = Письмо.ИдентификаторСообщения 
				Или ЗаголовокПисьма.ИдентификаторСообщения = Письмо.ХешСумма 
				Или (ЭтоИсходящееПисьмо И ЗаголовокПисьма.ИдентификаторСообщения = Письмо.ИдентификаторСообщенияОтправкаIMAP) Тогда
				
				ИдентификаторНаСервере = ЗаголовокПисьма.Идентификатор[0];
				
				НаборЗаписей = РегистрыСведений.CRM_ПапкиВзаимодействий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Взаимодействие.Установить(Письмо);
				НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл
					Если Запись.ПапкаЭлектронногоПисьма = ПапкиIMAP.Получить(ИмяАктивнойПапки) Тогда
						Запись.ИдентификаторНаСервере = ИдентификаторНаСервере;
						НаборЗаписей.Записать();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИдентификаторНаСервере) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторНаСервере;
	
КонецФункции

// Разбивает строку с идентификаторами оснований письма на массив.
//
// Параметры:
//  Письмо  - ДокументОбъект.ЭлектронноеПисьмоВходящее или ДокументОбъект.ЭлектронноеПисьмоИсходящее
//
// Возвращаемое значение:
//   Массив   - массив идентификаторов оснований письма
//
Функция МассивИдентификаторовОснованийПисьма(Письмо) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	СтрокаИдентификаторы = Письмо.ИдентификаторыОснований;
	Пока Не ПустаяСтрока(СтрокаИдентификаторы) Цикл
		Позиция = СтрНайти(СтрокаИдентификаторы, "<");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		СтрокаИдентификаторы = Сред(СтрокаИдентификаторы, Позиция + 1);
		
		Позиция = СтрНайти(СтрокаИдентификаторы, ">");
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекущийИдентификатор = СокрЛП(Лев(СтрокаИдентификаторы, Позиция - 1));
		СтрокаИдентификаторы = СокрЛП(Сред(СтрокаИдентификаторы, Позиция + 1));
		
		Если Не ПустаяСтрока(ТекущийИдентификатор) Тогда
			МассивИдентификаторов.Добавить(ТекущийИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

// Получает список идентификаторов оснований письма из заголовка письма в одной строке
//
// Параметры:
//  ЗаголовокСообщения  - Строка - поле Заголовок ИнтернетПочтовоеСообщение
//
// Возвращаемое значение:
//   Строка   - идентификаторы оснований
//
Функция ПолучитьИдентификаторыОснованийПисьмаИзЗаголовка(ЗаголовокСообщения)
	
	Заголовок = СтрЗаменить(ЗаголовокСообщения, Символы.ВК, "");
	МассивСтрок = СтрРазделить(Заголовок, Символы.ПС);
	
	ОснованияПисьма = "";
	ЭтоИдентификаторОснования = Ложь;
	ПолеЗаголовка = "References:";
	
	Для Каждого СтрокаЗаголовка Из МассивСтрок Цикл
		
		Если ЭтоИдентификаторОснования Тогда
			Если СтрНачинаетсяС(СтрокаЗаголовка, " <") Тогда
				ОснованияПисьма = ОснованияПисьма + СтрокаЗаголовка;
			Иначе
				Возврат СокрП(ОснованияПисьма);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СтрокаЗаголовка, ПолеЗаголовка) Тогда
			ОснованияПисьма = СокрЛП(Прав(СтрокаЗаголовка, СтрДлина(СтрокаЗаголовка) - СтрДлина(ПолеЗаголовка))); 
			ЭтоИдентификаторОснования = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти
