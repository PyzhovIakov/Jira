///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.ОнлайнЗаказы".
// ОбщийМодуль.ОнлайнЗаказыСлужебный.
//
// Серверные процедуры настройки и выполнения обмена данными с онлайн-заказами:
//  - настройка использования подключения к онлайн-заказам;
//  - проверка доступности функциональности на основании ролей пользователя;
//  - инициализация параметров подключения;
//  - обработчики интеграции с Библиотекой стандартных подсистем;
//  - обработчики интеграции с Библиотекой технологии сервиса;
//  - подготовка и обработка ответов сервиса;
//  - обработка ошибок сервиса;
//  - формирование и настройка шаблонов сообщений;
//  - алгоритмы настройки формы "Интернет-поддержка и сервисы".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСППодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	Если Не ОнлайнЗаказыДоступны() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаОснованийЗаказа = ПолучитьИменаОснованийЗаказа();
	
	ТипыОбъектов = Новый Массив;
	Для Каждого ПолноеИмя Из ИменаОснованийЗаказа Цикл
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда = Команды.Добавить();
	Команда.Вид = "ОнлайнЗаказы";
	Команда.Идентификатор = "ОнлайнЗаказы";
	Команда.Представление = НСтр("ru = 'Онлайн-заказ'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 52;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.ЛоготипОнлайнЗаказы;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "ОнлайнЗаказыКлиент.Подключаемый_ОткрытьФормуURLЗаказа";
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ОнлайнЗаказы";
	Вид.ИмяПодменю = "ПодменюОнлайнЗаказы";
	Вид.Заголовок = НСтр("ru = 'Онлайн-заказ'");
	Вид.Картинка = БиблиотекаКартинок.ЛоготипОнлайнЗаказы;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ = "ДобавитьКомандыОнлайнЗаказы";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
//
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.НастройкиПодключенияКОнлайнЗаказам.Чтение.Организации
	|Справочник.НастройкиПодключенияКОнлайнЗаказам.Изменение.Организации
	|РегистрСведений.ИдентификаторыОнлайнЗаказов.Чтение.Организации
	|РегистрСведений.ИдентификаторыОнлайнЗаказов.Изменение.Организации
	|";
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.НастройкиПодключенияКОнлайнЗаказам, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИдентификаторыОнлайнЗаказов, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область БСПБазоваяФункциональность

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		ХостСервисаОбменаДанными(),
		443,
		НСтр("ru = 'Сервис онлайн-заказов'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТехнологияСервисаОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОнлайнЗаказов.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьБИП

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	Если ЗначениеЗаполнено(Логин) Тогда
		Если Справочники.НастройкиПодключенияКОнлайнЗаказам.ЕстьНастройкиПодключения() Тогда
			ДобавитьЗаданиеЗагрузкаСтатусовЗаказов();
		КонецЕсли;
	Иначе
		УдалитьЗаданияЗагрузкаСтатусовЗаказов();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описание используемых в подсистеме хостов сервисов Интернет-поддержки.
//
// Параметры:
//  ХостыСервисовИнтернетПоддержки - Соответствие - хост и название используемого сервиса.
//
Процедура ПриЗаполненииХостовСервисовИнтернетПоддержки(
		ХостыСервисовИнтернетПоддержки) Экспорт
	
	ХостыСервисовИнтернетПоддержки.Вставить(
		ХостСервисаОбменаДанными(),
		НСтр("ru = 'Онлайн-заказы'"));
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПрограммы

// Возвращает параметры окружения панели администрирования БИП.
//
// Возвращаемое значение:
//  Структура:
//    * ОнлайнЗаказыДоступны - Булево
//    * НастройкаОнлайнЗаказовДоступна - Булево
//
Функция ПараметрыОкруженияФормыИнтернетПоддержкаИСервисы() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ОнлайнЗаказыДоступны", ОнлайнЗаказы.ОнлайнЗаказыДоступны());
	Результат.Вставить("НастройкаОнлайнЗаказовДоступна", ОнлайнЗаказы.НастройкаОнлайнЗаказовДоступна());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкаПодключения

// Возвращает признак существования настроек подключения, в которых указана переданная настройка оплаты.
//
// Возвращаемое значение:
//  Булево - признак наличия настроек.
//
Функция СуществуютНастройкиПоНастройкеОплаты(НастройкаПодключения) Экспорт
	
	Возврат Справочники.НастройкиПодключенияКОнлайнЗаказам.СуществуютНастройкиПоНастройкеОплаты(
		НастройкаПодключения);
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(
		Реквизиты,
		Вложения,
		НазначениеШаблона,
		ДополнительныеПараметры) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОнлайнЗаказов(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "ПредставлениеСсылкиОнлайнЗаказа";
	НовыйРеквизит.Представление = НСтр("ru = 'Ссылка на онлайн-заказ'");
	
	НовыйРеквизит = Реквизиты.Добавить();
	НовыйРеквизит.Имя = "СуммаОнлайнЗаказа";
	НовыйРеквизит.Представление = НСтр("ru = 'Сумма онлайн-заказа'");
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(
		Сообщение,
		НазначениеШаблона,
		ПредметСообщения,
		ПараметрыШаблона) Экспорт
	
	Если ПустаяСтрока(НазначениеШаблона) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоДокументОнлайнЗаказов(НазначениеШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщение.ЗначенияРеквизитов["СуммаОнлайнЗаказа"] = Неопределено
		И Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиОнлайнЗаказа"] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = ДанныеЗаполненияШаблона(
		ПредметСообщения,
		Сообщение);
	
	Если Сообщение.ЗначенияРеквизитов["СуммаОнлайнЗаказа"] <> Неопределено
			И ПараметрыСообщения.СуммаОнлайнЗаказа <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["СуммаОнлайнЗаказа"] = ПараметрыСообщения.СуммаОнлайнЗаказа;
	КонецЕсли;
	
	Если ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа <> Неопределено Тогда
		ЗаполнитьПредставлениеСсылки(
			Сообщение,
			ПараметрыШаблона,
			ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаДанныхАутентификации".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиДанныеАутентификацииНеЗаполнены() Экспорт
	
	Возврат "ДанныеАутентификацииНеЗаполнены";
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыОпераций

Функция ИдентификаторОперацииОбновленияНастройки() Экспорт
	
	Возврат "ОбновлениеНастройки";
	
КонецФункции

#КонецОбласти

#Область СтатусыОпераций

// Возвращает статус заказа "COMPLETED".
//
// Возвращаемое значение:
//  Строка - код состояния.
//
Функция СтатусЗаказаОплачен() Экспорт
	
	Возврат "COMPLETED";
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// Проверяет права на создание/обновление онлайн-заказов,
// в случае отсутствия прав, вызывается исключение.
//
Процедура СлужебнаяОнлайнЗаказыДоступны()
	
	Если Не ОнлайнЗаказыДоступны() Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещена работа с онлайн-заказами.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет доступность создания/обновления онлайн-заказов
// на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, создание/обновление заказов доступно.
//
Функция ОнлайнЗаказыДоступны() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиПодключенияКОнлайнЗаказам)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИдентификаторыОнлайнЗаказов)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПечатныеФормыОнлайнЗаказов)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ФайлыОнлайнЗаказов);
	
КонецФункции

// Проверяет права на создание/обновление онлайн-заказов
//
// Возвращаемое значение:
//  Булево - если Истина, создание/обновление заказов доступно.
//
Функция НастройкаОнлайнЗаказовДоступна() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиПодключенияКОнлайнЗаказам)
		И ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиПодключенияКОнлайнЗаказам);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Создает регламентное задание "ЗагрузкаСтатусовОнлайнЗаказов".
//
Процедура ДобавитьЗаданиеЗагрузкаСтатусовЗаказов() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОнлайнЗаказов);
	ЗаданияОбновления = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если ЗаданияОбновления.Количество() = 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня = 60 * 60 * 3; // Попытка получения статуса выполняется каждые 3 часа.
		Расписание.ПериодПовтораДней = 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОнлайнЗаказов);
		ПараметрыЗадания.Вставить("Расписание",    Расписание);
		ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Загрузка статусов онлайн-заказов'"));
		
		Попытка
			РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Исключение
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось создать регламентное задание Загрузка статусов онлайн-заказов по причине:
							|%1'"),
						ИнформацияОбОшибке),
					Истина);
			ВызватьИсключение ИнформацияОбОшибке;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Создано регламентное задание Загрузка статусов онлайн-заказов.'"),
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все задания "ЗагрузкаСтатусовОнлайнЗаказов".
//
Процедура УдалитьЗаданияЗагрузкаСтатусовЗаказов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОнлайнЗаказов);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 0 Тогда
			Для каждого Задание Из Задания Цикл
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания "ЗагрузкаСтатусовОнлайнЗаказов".
//
Процедура ЗагрузкаСтатусовОнлайнЗаказов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаСтатусовОнлайнЗаказов);
	
	ОбработанныеОперации = АктуализироватьСтатусыЗаказов();
	
	Если ОбработанныеОперации.Количество() <> 0 Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружены статусы %1 онлайн-заказов.'"),
				ОбработанныеОперации.Количество()),
				Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Возвращает полные имена объектов метаданных, которые могут выступать в качестве оснований заказа.
//
// Возвращаемое значение:
//  Массив Из Строка - имена объектов метаданных оснований заказа.
//
Функция ПолучитьИменаОснованийЗаказа()
	
	ИменаОснованийЗаказа = Новый Массив;
	ИнтеграцияПодсистемБИП.ПриОпределенииОснованияЗаказа(ИменаОснованийЗаказа);
	ОнлайнЗаказыПереопределяемый.ПриОпределенииОснованияЗаказа(ИменаОснованийЗаказа);
	
	Возврат ИменаОснованийЗаказа;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросовСервиса

// Формирует настройки подключения для выполнения запросов.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка выполнения операции.
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - Содержит параметры настройки:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка подключения к сервису;
//    * ПредставлениеОрганизации - Строка - Представление организации на странице заказа;
//    * Используется - Булево- Признак использования настройки подключения;
//    * НастройкиОплат - Соответствие - Содержит данные по способам оплат:
//      ** Ключ - ПеречислениеСсылка.СпособыОплатыОнлайнЗаказов - Допустимый способ оплаты заказа;
//      ** Значение - Произвольный - Настройка подключения по способу оплаты.
//
Функция ПараметрыНастройки(НастройкаПодключения) Экспорт
	
	Возврат Справочники.НастройкиПодключенияКОнлайнЗаказам.ПараметрыНастройки(НастройкаПодключения);
	
КонецФункции

// Восстанавливает значение даты из JSON, если значение не равно Неопределено.
//
// Параметры:
//  Свойство - Строка - имя свойства;
//  Значение - Строка, Неопределено - значение свойства;
//  ДополнительныеПараметры - Структура, Неопределено - параметры восстановления.
//
// Возвращаемое значение:
//  Дата, Неопределено - результат восстановления.
//
Функция ВосстановитьДатуJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		// Свойства с датами необходимо обрабатывать и хранить в формате UTC.
		Результат = ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Возврат Результат;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Определяет URL для вызова сервиса Онлайн-заказов.
//
// Параметры:
//  Операция - Строка - путь к ресурсу;
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервиса(Операция) Экспорт
	
	Возврат "https://"
		+ ХостСервисаОбменаДанными()
		+ "/pm/api/isl/authorized"
		+ Операция;
	
КонецФункции

// Определяет хост для вызова сервиса онлайн-заказов.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаОбменаДанными()
	
	
	Возврат "orders.1c.ru";
	
КонецФункции

// Создает структуру настроек подключения к сервису ОФД.
//
// Возвращаемое значение:
//  Структура - настройки подключения:
//   *НастройкиПроксиСервера - Структура - параметры прокси сервера.
//
Функция ИнициализироватьПараметрыПодключения() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ИнициализироватьПараметрыПодключения();
	
КонецФункции

// Возвращает представление статуса заказа по переданному идентификатору из сервиса,
// исключение если переданное значение неизвестно.
//
// Параметры:
//  СтатусЗаказа - Строка - статус заказа переданный из сервиса;
//
// Возвращаемое значение:
//  Строка - идентификатор статуса заказа.
//
Функция ПредставлениеСтатусаЗаказа(ИдентификаторСтатуса)
	
	Если ИдентификаторСтатуса = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется()
		Или ИдентификаторСтатуса = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
		Возврат "Выполняется";
	ИначеЕсли ИдентификаторСтатуса = ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен() Тогда
		Возврат "Неактивен";
	ИначеЕсли ИдентификаторСтатуса = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
		Возврат "ИстекСрокЖизни";
	ИначеЕсли ИдентификаторСтатуса = СтатусЗаказаОплачен() Тогда
		Возврат "Оплачен";
	Иначе
		ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан неизвестный статус заказа %1'"),
				ИдентификаторСтатуса);
				
		ЗаписатьИнформациюВЖурналРегистрации(
			ПредставлениеОшибки,
			Истина);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать ответ сервиса. %1 Подробности в журнале регистрации.'"),
			ПредставлениеОшибки);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Определяет по коду состояния и коду ошибки сервиса тип ошибки для потребителей.
//
// Параметры:
//  КодСостояния - Число - код состояния ответа сервиса;
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ПереопределитьКодОшибкиСервиса(КодСостояния) Экспорт
	
	Если КодСостояния = 200 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 400
		Или КодСостояния = 404
		Или КодСостояния = 422 Тогда
		Возврат КодОшибкиНеверныйФорматЗапроса();
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат КодОшибкиНеверныйЛогинИлиПароль();
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат КодОшибкиОтсутствуетДоступКСервису();
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус();
	ИначеЕсли КодСостояния = 429 Тогда
		Возврат "ПревышеноКоличествоПопыток";
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат "СервисВременноНеДоступен";
	ИначеЕсли КодСостояния = 500
		Или КодСостояния = 501
		Или КодСостояния = 502
		Или КодСостояния > 503 Тогда
		Возврат "ОшибкаСервиса";
	ИначеЕсли КодСостояния = 0 Тогда
		Возврат КодОшибкиОшибкаПодключения();
	Иначе
		Возврат КодОшибкиНеизвестнаяОшибка();
	КонецЕсли;
	
КонецФункции

// Определяет по коду ошибки сообщение пользователю.
//
// Параметры:
//  КодОшибки - Строка - ошибка сервиса см. функцию ПереопределитьКодОшибкиСервиса.
//  СодержимоеОтвета  - Строка, Структура - содержимое ответа сервиса.
//  ИдентификаторОперации  - Строка - Идентификатор выполняемой операции.
//
// Возвращаемое значение:
//  Строка - сообщение пользователю.
//
Функция ПереопределитьСообщениеПользователю(
	КодОшибки,
	СодержимоеОтвета = "",
	ИдентификаторОперации = "") Экспорт
	
	КодОшибкиСервиса = "";
	Если ЗначениеЗаполнено(СодержимоеОтвета) Тогда
		КодОшибкиСервиса = ОпределитьКодОшибкиСервиса(СодержимоеОтвета);
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_REQUEST" Тогда
		Возврат НСтр("ru = 'Неверный набор параметров или формат запроса к сервису.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_PAYMENT_GATEWAY_B2B_TOKEN_CHECK" Тогда
		Возврат НСтр("ru = 'Не удалось проверить корректность токена B2B. Передан невалидный токен.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "BAD_PAYMENT_GATEWAY_C2B_TOKEN_CHECK" Тогда
		Возврат НСтр("ru = 'Не удалось проверить корректность токена C2B. Передан невалидный токен.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "UNPROCESSABLE" Тогда
		Возврат НСтр("ru = 'Нарушение бизнес-логики.'");
	ИначеЕсли КодОшибки = КодОшибкиНеверныйФорматЗапроса()
		И КодОшибкиСервиса = "NOT_FOUND" Тогда
		Возврат НСтр("ru = 'Объект не найден.'");
	КонецЕсли;
	
	Если КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус()
		И КодОшибкиСервиса = "ILLEGAL_ORDER_STATUS" Тогда
		Возврат НСтр("ru = 'Недопустимый статус заказа.'");
	КонецЕсли;
	
	Если КодОшибки = КодОшибкиНеверныйЛогинИлиПароль() Тогда
		Возврат НСтр("ru = 'Ошибка авторизации. Обратитесь к администратору.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаПодключения" Тогда
		Возврат НСтр("ru = 'Не удалось подключиться к сервису.'");
	КонецЕсли;
	
	Если КодОшибки = "ПревышеноКоличествоПопыток"
		И КодОшибкиСервиса = "TOO_MANY_REQUESTS" Тогда
		Возврат НСтр("ru = 'Превышено количество попыток обращения к сервису ОФД с не верными данными авторизации.'")
			+ " "
			+ НСтр("ru = 'Проверьте правильность данных авторизации и повторите попытку через 30 минут.'");
	КонецЕсли;
	
	Если КодОшибки = "ОшибкаСервиса" Тогда
		Возврат НСтр("ru = 'Возникла неизвестная ошибка при подключении к сервису. Повторите попытку позже.'");
	КонецЕсли;
	
	Если КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "ACCESS_DENIED"
		И ИдентификаторОперации = ИдентификаторОперацииОбновленияНастройки() Тогда
		Возврат НСтр("ru = 'Невозможно обновить данные в сервисе. Настройка связана с другим пользователем интернет-поддержки.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "ACCESS_DENIED" Тогда
		Возврат НСтр("ru = 'Ошибка доступа.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "PAYMENT_GATEWAY_C2B_TOKEN_OWNER_MISMATCH" Тогда
		Возврат НСтр("ru = 'Не удалось проверить корректность токена C2B. Токен принадлежит другому пользователю интернет-поддержки.'");
	ИначеЕсли КодОшибки = "ОтсутствуетДоступКСервису"
		И КодОшибкиСервиса = "PAYMENT_GATEWAY_B2B_TOKEN_OWNER_MISMATCH" Тогда
		Возврат НСтр("ru = 'Не удалось проверить корректность токена B2B. Токен принадлежит другому пользователю интернет-поддержки.'");
	КонецЕсли;
	
	Возврат НСтр("ru = 'Неизвестная ошибка.'");
	
КонецФункции

// Производит чтение кода ошибки сервиса из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьКодОшибкиСервиса(ТелоJSON)
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		Возврат Результат.type;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Производит чтение статуса заказа в сервисе в случае ошибки ILLEGAL_ORDER_STATUS из тела ответа.
//
// Параметры:
//  ТелоJSON - Строка - тело ответа сервиса.
//
// Возвращаемое значение:
//  Строка - код ошибки сервиса.
//
Функция ОпределитьСтатусЗаказаВСервисе(ТелоJSON) Экспорт
	
	// Ответ сервиса:
	//
	//  {
	//  "type": "string",
	//  "title": "string",
	//  "status": "string",
	//  "detail": "string",
	//  "instance": "string"
	// }
	
	// Определение ошибки выполняется через попытку, т.к. в случае ошибки сервиса
	// есть вероятность получить не формализованное сообщение.
	Попытка
		ЧтениеОтвета = Новый ЧтениеJSON;
		ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
		Результат = ПрочитатьJSON(ЧтениеОтвета);
		Возврат Результат.data.orderStatus;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина) Экспорт
	
	УровеньЖР = ?(Ошибка,
		УровеньЖурналаРегистрации.Ошибка,
		УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

#КонецОбласти

#Область КодыОшибок

// Возвращает код ошибки "ОшибкаПодключения".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОшибкаПодключения() Экспорт
	
	Возврат "ОшибкаПодключения";
	
КонецФункции

// Возвращает код ошибки "НеизвестнаяОшибка".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеизвестнаяОшибка() Экспорт
	
	Возврат "НеизвестнаяОшибка";
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "УжеОплачен".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиУжеОплачен() Экспорт
	
	Возврат "УжеОплачен";
	
КонецФункции

// Возвращает код ошибки "НеверныйЛогинИлиПароль".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйЛогинИлиПароль() Экспорт
	
	Возврат "НеверныйЛогинИлиПароль";
	
КонецФункции

// Возвращает код ошибки "ОтсутствуетДоступКСервису".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОтсутствуетДоступКСервису() Экспорт
	
	Возврат "ОтсутствуетДоступКСервису";
	
КонецФункции

#КонецОбласти

#Область НастройкаПодключения

// Выполняет обновление настройки подключения онлайн-заказов.
// Параметры:
// НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка выполнения операции.
// РезультатОбработки - Структура - Результат обработки изменения использования настройки оплаты.
//
// Возвращаемое значение:
//  Структура - результат обновления настройки страницы онлайн-заказов:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновлениеНастройки(НастройкаПодключения, РезультатОбработки = Неопределено) Экспорт
	
	ПараметрыОперации = ПараметрыОперацииОбновленияНастройки(НастройкаПодключения, РезультатОбработки);
	Возврат ОнлайнЗаказыСервис.ОбновлениеНастройки(ПараметрыОперации);
	
КонецФункции

// Выполняет обновление настроек подключения к онлайн-заказам.
// Параметры:
// НастройкаПодключения - Массив Из СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//
// Возвращаемое значение:
//  Структура - результат обновления настройки страницы онлайн-заказов:
//    * НеобработанныеНастройки - Массив Из СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//      содержит перечень настроек по которым не удалось выполнить обновление настроек в сервисе.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновлениеНастроекПодключения(НастройкиПодключения) Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("НеобработанныеНастройки", Новый Массив);
	НеобработанныеНастройки = Новый Массив;
	
	Для Каждого НастройкаПодключения Из НастройкиПодключения Цикл
		
		ПараметрыОперации = ПараметрыОперацииОбновленияНастройки(НастройкаПодключения, Неопределено);
		РезультатВыполнения = ОнлайнЗаказыСервис.ОбновлениеНастройки(ПараметрыОперации);
		
		Если Не ПустаяСтрока(РезультатВыполнения.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатВыполнения);
			НеобработанныеНастройки.Добавить(НастройкаПодключения);
			Справочники.НастройкиПодключенияКОнлайнЗаказам.УстановитьОшибкуСинхронизации(
				НастройкаПодключения);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатОперации.НеобработанныеНастройки = НеобработанныеНастройки;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет формирование настроек подключения онлайн-заказов для передачи в сервис.
// Параметры:
// НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка подключения,
//   для которой формируются параметры.
// РезультатОбработки - Структура - Результат обработки изменения использования настройки оплаты.
//
// Возвращаемое значение:
//  Структура - результат обновления настройки страницы онлайн-заказов:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка подключения,
//      обновляемая в сервисе;
//    * ТокенСПБc2b - Строка - Токен подключения, используемый для оплаты СБП c2b;
//    * ТокенСПБb2b - Строка - Токен подключения, используемый для оплаты СБП b2b.
//
Функция ПараметрыОперацииОбновленияНастройки(НастройкаПодключения, РезультатОбработки)
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("НастройкаПодключения", НастройкаПодключения);
	ПараметрыОперации.Вставить("ТокенСПБc2b",          "");
	ПараметрыОперации.Вставить("ТокенСПБb2b",          "");
	
	// Для неиспользуемой настройки обнуляем токены, нет необходимости их получать.
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаПодключения, "Используется") Тогда
		Возврат ПараметрыОперации;
	КонецЕсли;
	
	НастройкиОплат = Справочники.НастройкиПодключенияКОнлайнЗаказам.НастройкиОплат(НастройкаПодключения);
	
	Для Каждого НастройкаОплаты Из НастройкиОплат Цикл
		
		РезультатОперации = НовыйРезультатОперации();
		РезультатОперации.Вставить("Токен", Неопределено);
		
		Если РезультатОбработки <> Неопределено
			И НастройкаОплаты.Значение = РезультатОбработки.НастройкаОплаты Тогда
			
			РезультатОперации.Токен = РезультатОбработки.Токен;
			
		Иначе
			ОнлайнЗаказыСобытия.ПриПолученииТокенаСпособаОплаты(
				НастройкаОплаты.Ключ,
				НастройкаОплаты.Значение,
				РезультатОперации);
		КонецЕсли;
		
		Если РезультатОперации.Токен = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаОплаты.Ключ = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b Тогда
			ПараметрыОперации.ТокенСПБc2b = РезультатОперации.Токен;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Выполняет получение URL для перехода к настройке внешнего вида страницы онлайн-заказов.
// Параметры:
// НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
// настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат получения URL:
//    * URLНастройкиПодключения - Строка - URL для перехода к настройке внешнего вида страницы онлайн-заказов.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция URLНастройкиПодключения(НастройкаПодключения) Экспорт
	
	Возврат ОнлайнЗаказыСервис.URLНастройкиПодключения(НастройкаПодключения);
	
КонецФункции

// Выполняет отзыв токена данных оплат по переданному способу и настройке подключения.
//
// Параметры:
//  СпособОплаты - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты для которого получается токен;
//  НастройкаПодключения - Произвольный - настройка подключения способа оплаты,
//    по которой осуществляется отзыв токена.
//
// Возвращаемое значение:
//  Структура - результат выполнения операции см. ОнлайнЗаказыСлужебный.НовыйРезультатОперации
//
Функция ОтозватьТокенНастройкиОплаты(СпособОплаты, НастройкаПодключения) Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	ОнлайнЗаказыСобытия.ПриОтключенииТокенаСпособаОплаты(СпособОплаты, НастройкаПодключения, РезультатОперации);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет создание/получение токена данных оплат по переданному способу и настройке подключения.
//
// Параметры:
//  НеиспользуемыеНастройки - Массив Из Соответствие - 
//    * Ключ - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты для которого получается токен;
//    * Значение - Произвольный - настройки подключения способа оплаты, по которой осуществляется отзыв токена.
//
// Возвращаемое значение:
//  Структура - результат выполнения операции см. ОнлайнЗаказыСлужебный.НовыйРезультатОперации
//
Функция ОтозватьНеиспользуемыеТокеныНастройкиПодключения(НеиспользуемыеНастройки) Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	
	Для Каждого НеиспользуемаяНастройка Из НеиспользуемыеНастройки Цикл
		
		РезультатОтзыва = НовыйРезультатОперации();
		ОнлайнЗаказыСобытия.ПриОтключенииТокенаСпособаОплаты(
			НеиспользуемаяНастройка.Ключ,
			НеиспользуемаяНастройка.Значение,
			РезультатОтзыва);
		
		Если ЗначениеЗаполнено(РезультатОтзыва.СообщениеОбОшибке) Тогда
			РезультатОперации.КодОшибки = "ОшибкаОтзываТокенов";
			РезультатОперации.СообщениеОбОшибке
				= НСтр("ru = 'Возникли ошибки при отзыве токенов. Подробности в журнале регистрации.'");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаСсылки

// Возвращает/создает URL онлайн-заказа.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат создания ссылки заказа:
//    * URLЗаказа - Строка - ссылка на онлайн-заказ.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - получение URL заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция URLЗаказа(
		ДокументЗаказа,
		НастройкаПодключения) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("URLЗаказа", "");
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройки = ПараметрыНастройки(НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		НастройкаПодключения,
		ПараметрыНастройки,
		Истина,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
		ДокументЗаказа);
	
	Если ЗначениеЗаполнено(ПараметрыСсылки.URLЗаказа) Тогда
		РезультатОперации.URLЗаказа = ПараметрыСсылки.URLЗаказа;
	Иначе
		РезультатСозданияЗаказа = НовыйЗаказ(ДокументЗаказа, НастройкаПодключения);
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатСозданияЗаказа);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает новый заказ на оплату.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат создания ссылки онлайн-заказа:
//    * URLЗаказа - Строка - Ссылка на онлайн-заказ;
//    * СтатусЗаказа - Строка - Текущий статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйЗаказ(
		ДокументЗаказа,
		НастройкаПодключения) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатДанныеЗаказа();
	РезультатОперации.Вставить("ОшибкиВалидацииЗаказа", Новый Массив);
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройки = ПараметрыНастройки(НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		НастройкаПодключения,
		ПараметрыНастройки,
		Истина,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеЗаказа = ДанныеЗаказаНаОплатуПоДокументу(
		РезультатОперации,
		ДокументЗаказа,
		ПараметрыНастройки);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.ОшибкиВалидацииЗаказа = ОшибкиВалидацииЗаказа(ДанныеЗаказа);
	
	Если ЗначениеЗаполнено(РезультатОперации.ОшибкиВалидацииЗаказа) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ИдентификаторЗаказа = РегистрыСведений.ИдентификаторыОнлайнЗаказов.НовыйИдентификаторЗаказа(
		ДокументЗаказа,
		НастройкаПодключения);
	
	ДанныеЗаказа.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	
	НастройкиОплаты = НастройкиОплаты(ПараметрыНастройки.НастройкиОплат, ДанныеЗаказа.ПараметрыОплат);
	
	// Создание нового заказа на оплату.
	РезультатВызова = ОнлайнЗаказыСервис.СформироватьЗаказ(
		ДанныеЗаказа,
		НастройкаПодключения,
		НастройкиОплаты);
		
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатВызова);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьДанныеЗаказа(
		ДокументЗаказа,
		ДанныеЗаказа,
		РезультатОперации.URLЗаказа,
		НастройкаПодключения,
		ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется());
	
	Возврат РезультатОперации;
	
КонецФункции

// Обновляет заказ на оплату.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат создания ссылки онлайн-заказа:
//    * URLЗаказа - Строка - Ссылка на онлайн-заказ;
//    * СтатусЗаказа - Строка - Текущий статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьЗаказ(
		ДокументЗаказа,
		НастройкаПодключения) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатДанныеЗаказа();
	РезультатОперации.Вставить("ОшибкиВалидацииЗаказа", Новый Массив);
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройки = ПараметрыНастройки(НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		НастройкаПодключения,
		ПараметрыНастройки,
		Истина,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеЗаказа = ДанныеЗаказаНаОплатуПоДокументу(
		РезультатОперации,
		ДокументЗаказа,
		ПараметрыНастройки);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.ОшибкиВалидацииЗаказа = ОшибкиВалидацииЗаказа(ДанныеЗаказа);
	
	Если ЗначениеЗаполнено(РезультатОперации.ОшибкиВалидацииЗаказа) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
		ДокументЗаказа);
	
	Если Не ЗначениеЗаполнено(ПараметрыСсылки.СтатусЗаказа) Тогда
		Возврат НовыйЗаказ(ДокументЗаказа, НастройкаПодключения);
	Иначе
		РезультатДеактивации = ДеактивироватьЗаказ(ДокументЗаказа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатДеактивации.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатДеактивации);
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("ИдентификаторЗаказа", ПараметрыСсылки.ИдентификаторЗаказа);
	
	НастройкиОплаты = НастройкиОплаты(ПараметрыНастройки.НастройкиОплат, ДанныеЗаказа.ПараметрыОплат);
	
	// Создание нового заказа на оплату.
	РезультатВызова = ОнлайнЗаказыСервис.СформироватьЗаказ(
		ДанныеЗаказа,
		НастройкаПодключения,
		НастройкиОплаты);
		
	ЗаполнитьЗначенияСвойств(
		РезультатОперации,
		РезультатВызова);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьДанныеЗаказа(
		ДокументЗаказа,
		ДанныеЗаказа,
		РезультатОперации.URLЗаказа,
		НастройкаПодключения,
		ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется());
	
	Возврат РезультатОперации;
	
КонецФункции

// Обновляет заказ на оплату вместе с вложениями.
//
// Параметры:
//   ПараметрыОперации - Структура - параметры операции:
//     * ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//       являющийся основанием для заказа.
//     * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//       настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат создания ссылки онлайн-заказа:
//    * URLЗаказа - Строка - Ссылка на онлайн-заказ;
//    * СтатусЗаказа - Строка - Текущий статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОбновитьЗаказСВложениями(ПараметрыОперации) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатДанныеЗаказа();
	
	РезультатОбновления = ОбновитьЗаказ(
		ПараметрыОперации.ДокументЗаказа,
		ПараметрыОперации.НастройкаПодключения);
		
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОбновления);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
			ПараметрыОперации.ДокументЗаказа,
			РезультатОперации.СтатусЗаказа,
			Неопределено,
			Неопределено);
			
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатОтправки = ОтправитьВложения(ПараметрыОперации);
	
	Если ЗначениеЗаполнено(РезультатОбновления.КодОшибки) Тогда
		
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
			ПараметрыОперации.ДокументЗаказа,
			РезультатОперации.СтатусЗаказа,
			Неопределено,
			Неопределено);
			
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет проверку статуса заказа в сервисе.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//
// Возвращаемое значение:
//  Структура - результат создания онлайн-заказа:
//    * URLЗаказа - Строка - URL онлайн-заказа.
//    * СуммаЗаказа - Число - Сумма онлайн-заказа.
//    * НеобходимоАктуализировать - Булево - признак необходимости актуализации заказа.
//    * СтатусЗаказа - Строка - текущее состояние ссылки заказа. Возможные значения:
//        - "READY" - заказ активен и доступен к оплате покупателем;
//        - "EXPIRED" - истек срок жизни заказа;
//        - "INACTIVE" - заказ отменен пользователем или истек срок жизни заказа;
//        - "PAYMENT_SESSION_IN_PROGRESS" - начат процесс оплаты покупателем;
//        - "COMPLETED" - покупатель оплатил заказ;
//        - "ERROR" - неконсистентное состояние заказа, рекомендуется выполнить полное обновление;
//        - "SERVICE_ERROR" - не удалось выполнить проверку оплаты из-за ошибки сервиса;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который может быть обработан вызывающим методом:
//        - <Пустая строка> - получение статуса заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - некорректный логин/пароль ИПП;
//        - "СервисВременноНеДоступен" - временная недоступность сервиса;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатусЗаказа(ДокументЗаказа) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатСтатусЗаказа();
	ПараметрыЗаказа = ПараметрыЗаказа(ДокументЗаказа);
	
	Если ПараметрыЗаказа = Неопределено
		Или ПустаяСтрока(ПараметрыЗаказа.ИдентификаторЗаказа) Тогда
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Идентификатор заказа по документу не обнаружен.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Идентификатор заказа по документу не обнаружен.'");
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если ПараметрыЗаказа.СтатусЗаказа = СтатусЗаказаОплачен()
		Или ПараметрыЗаказа.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка() Тогда
		РезультатОперации.Статус = ПараметрыЗаказа.СтатусЗаказа;
		РезультатОперации.СуммаЗаказа = ПараметрыЗаказа.СуммаОплаты;
	ИначеЕсли ПараметрыЗаказа.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется()
		Или ПараметрыЗаказа.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен() Тогда
		РезультатОперации = АктуализироватьСтатусЗаказа(ПараметрыЗаказа);
	Иначе
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Неизвестный статус операции.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Неизвестный статус операции.'");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция АктуализироватьСтатусЗаказа(ПараметрыЗаказа)
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатСтатусЗаказа();
	РезультатОперации.Вставить("ОшибкиВалидацииЗаказа", Новый Массив);
	
	ИдентификаторыЗаказов = Новый Массив;
	ИдентификаторыЗаказов.Добавить(ПараметрыЗаказа.ИдентификаторЗаказа);
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("НастройкаПодключения",  ПараметрыЗаказа.НастройкаПодключения);
	ПараметрыОперации.Вставить("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
	
	РезультатПолучения = ОнлайнЗаказыСервис.ПолучениеИнформацииПоЗаказам(ПараметрыОперации);
	
	Если ЗначениеЗаполнено(РезультатПолучения.КодОшибки) Тогда
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатПолучения,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	Для Каждого ДанныеЗаказа Из РезультатПолучения.ДанныеЗаказов Цикл
		
		Если ДанныеЗаказа.ИдентификаторЗаказа <> ПараметрыЗаказа.ИдентификаторЗаказа Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОперации.СтатусЗаказа = ДанныеЗаказа.Статус;
		РезультатОперации.СуммаЗаказа  = ДанныеЗаказа.СуммаЗаказа;
		РезультатОперации.URLЗаказа    = ПараметрыЗаказа.URLЗаказа;
		
		ПараметрыОплаты = Новый Соответствие;
		ПараметрыНастройкиОплаты = Новый Структура;
		
		Если ДанныеЗаказа.Статус = СтатусЗаказаОплачен() Тогда
			
			ОнлайнЗаказыСобытия.ПриЗаполненииПараметровОплаты(
				ДанныеЗаказа,
				ПараметрыОплаты,
				ПараметрыНастройкиОплаты,
				ПараметрыЗаказа.НастройкаПодключения);
			
			ОнлайнЗаказыСобытия.ПриЗаписиДанныхОплаты(
				ПараметрыЗаказа.ДокументЗаказа,
				ДанныеЗаказа.СпособОплаты,
				ПараметрыОплаты,
				ПараметрыНастройкиОплаты);
			
		КонецЕсли;
		
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
			ПараметрыЗаказа.ДокументЗаказа,
			ДанныеЗаказа.Статус,
			ДанныеЗаказа.СпособОплаты,
			ДанныеЗаказа.СуммаЗаказа);
		
		Если ДанныеЗаказа.Статус = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется() Тогда
			
			ПараметрыНастройки = ПараметрыНастройки(ПараметрыЗаказа.НастройкаПодключения);
			
			ЗаказНаОплату = ДанныеЗаказаНаОплатуПоДокументу(
				РезультатОперации,
				ПараметрыЗаказа.ДокументЗаказа,
				ПараметрыНастройки);
			
			Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
				Возврат РезультатОперации;
			КонецЕсли;
			
			Если ЗаказНаОплату.КонтрольнаяСумма.Значение <> ДанныеЗаказа.КонтрольнаяСумма Тогда
				РезультатОперации.НеобходимоАктуализировать = Истина;
			КонецЕсли;
			
			РезультатОперации.ОшибкиВалидацииЗаказа = ОшибкиВалидацииЗаказа(ЗаказНаОплату);
			
		ИначеЕсли ДанныеЗаказа.Статус = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни()
				Или ДанныеЗаказа.Статус = СтатусЗаказаОплачен() Тогда
			
			ПриЗагрузкеСтатусаЗаказа(
				ПараметрыЗаказа.ДокументЗаказа,
				ПараметрыОплаты,
				ДанныеЗаказа.Статус,
				"",
				Новый Массив);
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Если ПустаяСтрока(РезультатОперации.СтатусЗаказа) Тогда
		
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса();
		РезультатОперации.КодОшибки          = КодОшибкиНеизвестнаяОшибка();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Сервис не вернул данные по заказу.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Сервис не вернул данные по заказу.'");
		
		// Сервис не вернул данные по идентификатору заказа, увеличиваем количество попыток.
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.УвеличитьКоличествоПопытокЗапросаСтатуса(
			ПараметрыЗаказа.ДокументЗаказа);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция АктивироватьЗаказ(ДокументЗаказа, НастройкаПодключения) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатСтатусЗаказа();
	РезультатОперации.Вставить("ОшибкиВалидацииЗаказа", Новый Массив);
	
	РезультатАктивации = ОнлайнЗаказыСервис.АктивироватьЗаказ(ДокументЗаказа);
	
	Если ЗначениеЗаполнено(РезультатАктивации.КодОшибки) Тогда
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатАктивации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		
		Если РезультатАктивации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
				ДокументЗаказа,
				РезультатАктивации.СтатусЗаказаВСервисе,
				Неопределено,
				Неопределено);
			РезультатОперации.СтатусЗаказа = РезультатАктивации.СтатусЗаказаВСервисе;
		Иначе
			РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		КонецЕсли;
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ЗаказНаОплату = ДанныеЗаказаНаОплатуПоДокументу(
		РезультатОперации,
		ДокументЗаказа,
		ПараметрыНастройки(НастройкаПодключения));
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатАктивации);
	
	Если ЗаказНаОплату.КонтрольнаяСумма.Значение <> РезультатАктивации.КонтрольнаяСумма Тогда
		РезультатОперации.НеобходимоАктуализировать = Истина;
	КонецЕсли;
	
	РезультатОперации.ОшибкиВалидацииЗаказа = ОшибкиВалидацииЗаказа(ЗаказНаОплату);
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ДеактивироватьЗаказ(ДокументЗаказа) Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	РезультатОперации = НовыйРезультатСтатусЗаказа();
	
	РезультатДеактивации = ОнлайнЗаказыСервис.ДеактивироватьЗаказ(ДокументЗаказа);
	
	Если ЗначениеЗаполнено(РезультатДеактивации.КодОшибки) Тогда
		
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатДеактивации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		
		Если РезультатДеактивации.КодОшибки = ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			
			РезультатОперации.СтатусЗаказа = РезультатДеактивации.СтатусЗаказаВСервисе;
			
			Если РезультатОперации.СтатусЗаказа = СтатусЗаказаОплачен()
				Или РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
				ПараметрыЗаказа = ПараметрыЗаказа(ДокументЗаказа);
				РезультатПолученияСтатуса = АктуализироватьСтатусЗаказа(ПараметрыЗаказа);
				РезультатОперации.СуммаЗаказа = РезультатПолученияСтатуса.СуммаЗаказа;
				РезультатОперации.URLЗаказа = РезультатПолученияСтатуса.URLЗаказа;
			Иначе
				РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
					ДокументЗаказа,
					РезультатОперации.СтатусЗаказа,
					Неопределено,
					Неопределено);
			КонецЕсли;
			
		Иначе
			РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			РезультатДеактивации);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// Производит валидацию общих параметров оплаты.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//    являющийся основанием для заказа.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам - настройка выполнения операции;
//  ПараметрыНастройки - см. ОнлайнЗаказыСлужебный.ПараметрыНастройки
//  ПроверятьИспользованиеНастройки - Булево - Признак проверки использования настройки,
//    Ложь если неиспользуемые настройки допустимы.
//  РезультатОперации  - Структура - результат проверки:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПроверитьОбщиеНастройкиПодключения(
		ДокументЗаказа,
		НастройкаПодключения,
		ПараметрыНастройки,
		ПроверятьИспользованиеНастройки,
		РезультатОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументЗаказа) Тогда
		
		РезультатОперации.КодОшибки          = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Документ для выполнения операции не определен. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Для выполнения операции необходимо записать документ.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыНастройки) Тогда
		
		РезультатОперации.КодОшибки          = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Не удалось определить параметры онлайн-заказов. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Не удалось определить параметры онлайн-заказов.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	ИначеЕсли ПроверятьИспользованиеНастройки И Не ПараметрыНастройки.Используется Тогда
		
		РезультатОперации.КодОшибки          = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Выбрана неиспользуемая настройка онлайн-заказов.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Выбрана неиспользуемая настройка онлайн-заказов.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет параметры и доступность функциональности создания заказа на основании переданного документа.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ, по данным которого
//    будет создан новый заказ.
//
// Возвращаемое значение:
//  Структура - результат заполнения параметров:
//    * СозданиеЗаказаДоступно - Булево - признак доступности создания нового заказа.
//    * СообщениеОбОшибке - Строка - текст сообщения ошибки для пользователя.
//    * НастройкиПодключения - Массив из Справочник.НастройкиПодключенияКОнлайнЗаказам - перечень настроек
//      допустимых для создания нового заказа по документу.
//    * Организация - ОпределяемыйТип.Организация - организация основания онлайн-заказа.
//
Функция ПриОпределенииПараметровСозданияЗаказа(ДокументЗаказа) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СозданиеЗаказаДоступно", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Организация", Неопределено);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровСозданияЗаказа(
		ДокументЗаказа,
		Результат);
	ОнлайнЗаказыПереопределяемый.ПриОпределенииПараметровСозданияЗаказа(
		ДокументЗаказа,
		Результат);
	
	Если Не ЗначениеЗаполнено(Результат.Организация) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена организация по данным основания заказа.'");
	КонецЕсли;
	
	Результат.Вставить(
		"НастройкиПодключения",
		Справочники.НастройкиПодключенияКОнлайнЗаказам.НастройкиОрганизации(Результат.Организация));
	
	Возврат Результат;
	
КонецФункции

// Возвращает список использованных для создания заказа настроек подключения по документу.
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ, по данным которого
//    необходимо получить список настроек.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам, Неопределено -
//  используемая в документе, настройка онлайн-заказов.
//
Функция НастройкаПодключенияПоДокументуЗаказа(ДокументЗаказа) Экспорт
	
	Возврат РегистрыСведений.ИдентификаторыОнлайнЗаказов.НастройкаПодключенияПоДокументуЗаказа(
		ДокументЗаказа);
	
КонецФункции

Функция ПараметрыЗаказа(ДокументЗаказа)
	
	Возврат РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыЗаказа(
		ДокументЗаказа);
	
КонецФункции

// Создает описание результат создания заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат выполнения операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатОперации() Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки", "");
	РезультатОперации.Вставить("СообщениеОбОшибке", "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результат создания заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату:
//    * URLЗаказа - Строка - ссылка на заказ в сервисе;
//    * СтатусЗаказа - Строка - текущее состояние  заказа. Возможные значения:
//      - "READY" - заказ активен и доступен к оплате покупателем;
//      - "EXPIRED" - истек срок жизни заказа;
//      - "INACTIVE" - заказ отменен пользователем или истек срок жизни заказа;
//      - "PAYMENT_SESSION_IN_PROGRESS" - начат процесс оплаты покупателем;
//      - "COMPLETED" - покупатель оплатил заказ;
//      - "ERROR" - неконсистентное состояние заказа, рекомендуется выполнить полное обновление;
//      - "SERVICE_ERROR" - не удалось выполнить проверку оплаты из-за ошибки сервиса;
//    * СуммаЗаказа - Строка - сумма заказа в сервисе;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция НовыйРезультатДанныеЗаказа() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("URLЗаказа",    "");
	РезультатОперации.Вставить("СтатусЗаказа", "");
	РезультатОперации.Вставить("СуммаЗаказа",  0);
	
	Возврат РезультатОперации;
	
КонецФункции

// Создает описание результат статуса заказа.
//
// Возвращаемое значение:
//  Структура - результат операции получения статуса заказа:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * URLЗаказа - Строка - ссылка на заказ в сервисе;
//    * СтатусЗаказа - Строка - текущее состояние  заказа. Возможные значения:
//      - "READY" - заказ активен и доступен к оплате покупателем;
//      - "EXPIRED" - истек срок жизни заказа;
//      - "INACTIVE" - заказ отменен пользователем или истек срок жизни заказа;
//      - "PAYMENT_SESSION_IN_PROGRESS" - начат процесс оплаты покупателем;
//      - "COMPLETED" - покупатель оплатил заказ;
//      - "ERROR" - неконсистентное состояние заказа, рекомендуется выполнить полное обновление;
//      - "SERVICE_ERROR" - не удалось выполнить проверку оплаты из-за ошибки сервиса;
//    * СуммаЗаказа - Строка - сумма заказа в сервисе;
//    * НеобходимоАктуализировать - Булево - признак необходимости актуализации заказа в сервисе.
//
Функция НовыйРезультатСтатусЗаказа() Экспорт
	
	РезультатОперации = НовыйРезультатОперации();
	РезультатОперации.Вставить("URLЗаказа",                 "");
	РезультатОперации.Вставить("СтатусЗаказа",              "");
	РезультатОперации.Вставить("СуммаЗаказа",               0);
	РезультатОперации.Вставить("НеобходимоАктуализировать", Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Формирует новое описание колонки товаров онлайн-заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание онлайн-заказа:
//    * Идентификатор - Строка - уникальный идентификатор колонки.
//    * Представление - Строка - представление колонки пользователю (шапка табличной части).
//    * ПорядокОтображения - Число - Порядок отображения колонок пользователю, упорядочивание по возрастанию.
//    * Видимость - Булево - признак видимости колонки пользователю.
//
Функция НоваяКолонкаТовары() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор",      "");
	Результат.Вставить("Представление",      "");
	Результат.Вставить("ПорядокОтображения", 0);
	Результат.Вставить("Видимость",          Истина);
	
	Возврат Результат
	
КонецФункции

// Определяет представление основания заказа для отображения пользователю на форме отправки ссылки
// и на странице онлайн-заказа
//
// Параметры:
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание заказа,
//  для которого необходимо определить представление.
//
// Возвращаемое значение:
//  Структура - Содержит описание представлений основания заказа:
//    * ПредставлениеОснования - Структура - Содержит описание представлений основания заказа:
//      ** РезультатСклонения - Структура - Содержит данные склонения представления по падежам:
//        *** ИменительныйПадеж - Строка - Представления основания в именительном падеже
//        *** РодительныйПадеж - Строка - Представление Основания в родительном падеже
//        *** ДательныйПадеж - Строка - Представление Основания в дательном падеже
//        *** ВинительныйПадеж - Строка - Представление Основания в винительном падеже
//        **** ТворительныйПадеж - Строка - Представление Основания в творительном падеже
//       * ПредложныйПадеж - Строка - Представление Основания в винительном падеже
//   * ДанныеОснования - Структура - Содержит описание данных заказа:
//     ** НомерЗаказа - Строка - номер заказа
//
Функция ОписаниеОснования(ДокументЗаказа) Экспорт
	
	ПредставлениеОснования = НовоеОписаниеПредставленияОснования();
	ДанныеОснования = НовыеДанныеОснованияЗаказа();
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПредставленияОснованияЗаказа(
		ДокументЗаказа,
		ПредставлениеОснования,
		ДанныеОснования);
	
	ОнлайнЗаказыПереопределяемый.ПриОпределенииПредставленияОснованияЗаказа(
		ДокументЗаказа,
		ПредставлениеОснования,
		ДанныеОснования);
	
	ПроверитьПредставлениеЗаказа(ПредставлениеОснования);
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеОснования", ПредставлениеОснования);
	Результат.Вставить("ДанныеОснования", ДанныеОснования);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьПредставлениеЗаказа(ПредставлениеОснования)
	
	ЕстьЗаполненныеПадежи = Ложь;
	ЕстьПустыеПадежи = Ложь;
	
	Для Каждого Падеж Из ПредставлениеОснования.РезультатСклонения Цикл
		Если ПустаяСтрока(Падеж.Значение) Тогда
			ЕстьПустыеПадежи = Истина;
		Иначе
			ЕстьЗаполненныеПадежи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьЗаполненныеПадежи И ЕстьПустыеПадежи Тогда
		ВызватьИсключение НСтр("ru = 'Обнаружено частичное заполнение результатов склонения в описании представления документа.'");
	ИначеЕсли ЕстьПустыеПадежи Тогда
		ЗаполнитьПредставлениеДокументаПоУмолчанию(ПредставлениеОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеДокументаПоУмолчанию(ПредставлениеОснования)
	
	РезультатСклонения = ПредставлениеОснования.РезультатСклонения;
	РезультатСклонения.ИменительныйПадеж = НСтр("ru = 'заказ'");
	РезультатСклонения.РодительныйПадеж = НСтр("ru = 'заказа'");
	РезультатСклонения.ДательныйПадеж = НСтр("ru = 'заказу'");
	РезультатСклонения.ВинительныйПадеж = НСтр("ru = 'заказ'");
	РезультатСклонения.ТворительныйПадеж = НСтр("ru = 'заказом'");
	РезультатСклонения.ПредложныйПадеж = НСтр("ru = 'заказе'");
	
КонецПроцедуры

// Формирует новое описание таблицы товаров онлайн-заказа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит описание таблицы товаров с перечнем обязательных колонок.
//
Функция НовыйОписаниеТаблицыТовары(ОписаниеПредставленияТоваров)
	
	Товары = Новый ТаблицаЗначений;
	
	ОписаниеЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	Товары.Колонки.Добавить("ИдентификаторТовара", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Товары.Колонки.Добавить("Наименование",        ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Товары.Колонки.Добавить("СуммаСоСкидкой",      ОписаниеЧисла);
	Товары.Колонки.Добавить("Скидка",              ОписаниеЧисла);
	Товары.Колонки.Добавить("СуммаНДС",            ОписаниеЧисла);
	Товары.Колонки.Добавить(
		"Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого ОписаниеРеквизита Из ОписаниеПредставленияТоваров Цикл
		
		Если Товары.Колонки.Найти(ОписаниеРеквизита.Идентификатор) = Неопределено Тогда
			Товары.Колонки.Добавить(ОписаниеРеквизита.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

// Формирует новое описание товара для покупателя.
//
// Возвращаемое значение:
//  Структура - содержит описание онлайн-заказа:
//    * Идентификатор - Строка - уникальный идентификатор предмета расчета.
//    * ДанныеТовара - Массив Из Структура - описывает данные товара отображаемые пользователю.
//
Функция НовоеОписаниеПредставленияТоваров()
	
	КолонкаИдентификаторТовара = НоваяКолонкаТовары();
	КолонкаИдентификаторТовара.Представление = НСтр("ru = 'Идентификатор товара'");
	КолонкаИдентификаторТовара.Идентификатор = "ИдентификаторТовара";
	КолонкаИдентификаторТовара.Видимость = Ложь;
	КолонкаИдентификаторТовара.ПорядокОтображения = 0;
	
	КолонкаНаименование = НоваяКолонкаТовары();
	КолонкаНаименование.Представление = НСтр("ru = 'Наименование'");
	КолонкаНаименование.Идентификатор = "Наименование";
	КолонкаНаименование.ПорядокОтображения = 1;
	
	КолонкаКоличество = НоваяКолонкаТовары();
	КолонкаКоличество.Представление = НСтр("ru = 'Количество'");
	КолонкаКоличество.Идентификатор = "Количество";
	КолонкаКоличество.ПорядокОтображения = 2;
	
	КолонкаСуммаСоСкидкой = НоваяКолонкаТовары();
	КолонкаСуммаСоСкидкой.Представление = НСтр("ru = 'Сумма со скидкой'");
	КолонкаСуммаСоСкидкой.Идентификатор = "СуммаСоСкидкой";
	КолонкаСуммаСоСкидкой.ПорядокОтображения = 3;
	
	КолонкаСкидка = НоваяКолонкаТовары();
	КолонкаСкидка.Представление = НСтр("ru = 'Скидка'");
	КолонкаСкидка.Идентификатор = "Скидка";
	КолонкаСкидка.ПорядокОтображения = 4;
	
	КолонкаСуммаНДС = НоваяКолонкаТовары();
	КолонкаСуммаНДС.Представление = НСтр("ru = 'Сумма НДС'");
	КолонкаСуммаНДС.Идентификатор = "СуммаНДС";
	КолонкаСуммаНДС.ПорядокОтображения = 5;
	
	ВизуализацияТоваров = Новый Массив;
	ВизуализацияТоваров.Добавить(КолонкаИдентификаторТовара);
	ВизуализацияТоваров.Добавить(КолонкаНаименование);
	ВизуализацияТоваров.Добавить(КолонкаКоличество);
	ВизуализацияТоваров.Добавить(КолонкаСуммаСоСкидкой);
	ВизуализацияТоваров.Добавить(КолонкаСкидка);
	ВизуализацияТоваров.Добавить(КолонкаСуммаНДС);
	
	Возврат ВизуализацияТоваров;
	
КонецФункции

// Формирует описание представлений основания заказа:
//
// Возвращаемое значение:
//  Структура - Содержит описание представлений основания заказа:
//    * РезультатСклонения - Структура - Содержит данные склонения представления по падежам:
//      * ИменительныйПадеж - Строка - Представления основания в именительном падеже
//      * РодительныйПадеж - Строка - Представление Основания в родительном падеже
//      * ДательныйПадеж - Строка - Представление Основания в дательном падеже
//      * ВинительныйПадеж - Строка - Представление Основания в винительном падеже
//      * ТворительныйПадеж - Строка - Представление Основания в творительном падеже
//      * ПредложныйПадеж - Строка - Представление Основания в винительном падеже
//
Функция НовоеОписаниеПредставленияОснования()
	
	Результат = Новый Структура;
	
	РезультатСклонения = Новый Структура;
	РезультатСклонения.Вставить("ИменительныйПадеж", "");
	РезультатСклонения.Вставить("РодительныйПадеж", "");
	РезультатСклонения.Вставить("ДательныйПадеж", "");
	РезультатСклонения.Вставить("ВинительныйПадеж", "");
	РезультатСклонения.Вставить("ТворительныйПадеж", "");
	РезультатСклонения.Вставить("ПредложныйПадеж", "");
	
	Результат.Вставить("РезультатСклонения", РезультатСклонения);
	
	Возврат Результат;
	
КонецФункции

// Формирует описание данных основания заказа:
//
// Возвращаемое значение:
//  Структура - Содержит описание представлений основания заказа:
//    * НомерЗаказа - Строка - номер заказа.
//
Функция НовыеДанныеОснованияЗаказа()
	
	Результат = Новый Структура;
	Результат.Вставить("НомерЗаказа", "");
	
	Возврат Результат;
	
КонецФункции

// Формирует новое описание параметров оплат онлайн-заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание параметров оплат онлайн-заказа.
//
Функция ПараметрыОплатЗаказа(ДокументЗаказа, НастройкиОплат)
	
	ПараметрыОплат = Новый Структура;
	ПараметрыОплат.Вставить("СБП", Неопределено);
	
	ОнлайнЗаказыСобытия.ПриФормированииПараметровОплат(ДокументЗаказа, ПараметрыОплат, НастройкиОплат);
	
	Возврат ПараметрыОплат;
	
КонецФункции

// Формирует новое описание параметров визуализации табличной части товаров/услуг онлайн-заказа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит описание параметров визуализации товаров/услуг онлайн-заказа.
//
Функция ОписаниеНастроекВизуализации(ОписаниеПредставленияТоваров)
	
	НастройкиВизуализации = Новый ТаблицаЗначений;
	
	НастройкиВизуализации.Колонки.Добавить("ПорядокОтображения", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	НастройкиВизуализации.Колонки.Добавить("Идентификатор",      ОбщегоНазначения.ОписаниеТипаСтрока(50));
	НастройкиВизуализации.Колонки.Добавить("Представление",      ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ОписаниеСвойства Из ОписаниеПредставленияТоваров Цикл
		
		Если ОписаниеСвойства.Видимость = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяНастройка = НастройкиВизуализации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, ОписаниеСвойства);
		
	КонецЦикла;
	
	НастройкиВизуализации.Сортировать("ПорядокОтображения");
	
	Возврат НастройкиВизуализации;
	
КонецФункции

// Формирует и заполняет новое описание онлайн-заказа. При передаче данных в сервис
// проверяется заполнение всех свойств заказа.
// Параметры:
//  РезультатОперации - Структура - результат подготовки см.
//    ОнлайнЗаказыСлужебный.НовыйРезультатДанныеЗаказа.
//  ДокументЗаказа - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//  ПараметрыНастройки - Структура - параметры настройки подключения
//    см. ОнлайнЗаказыСлужебный.ПараметрыНастройки;
//  ДополнительныеПараметры - Структура - Дополнительные параметры,
//    будут переданы в методы ОнлайнЗаказыПереопределяемый.ПриНастройкеТаблицыТоваров и
//    ОнлайнЗаказыПереопределяемый.ПриФормированииЗаказаНаОплату.
//
// Возвращаемое значение:
//  ЗаказНаОплату - Структура - содержит описание онлайн-заказа:
//    * ОбщиеПараметрыЗаказа - Структура - описывает общие параметры заказа:
//      ** СрокЖизни - Дата - содержит значение срока жизни заказа,
//         по наступлению указанного времени заказ будет аннулирован.
//         В случае передачи значения меньше текущей даты возвращается ошибка "НеверныйФорматЗапроса".
///    * ВизуализацияЗаказа - Структура - содержит описание шапки заказа на его странице.
//       ** Представление - Строка - представление заказа на странице.
//       ** ДополнительнаяИнформация - Строка - дополнительная информация о заказе.
//       ** ПоставщикПредставление - Строка - содержит данные поставщика отображаемые на странице заказа.
//       ** ПоставщикЗаголовок - Строка - представление поставщика (пример: Поставщик, Исполнитель, Продавец).
//       ** ПокупательПредставление - Строка - содержит данные покупателя отображаемые на странице заказа.
//       ** ПокупательЗаголовок - Строка - представление покупателя (пример: Покупатель, Клиент).
//    * Товары - ТаблицаЗначений - Содержит данные товарного наполнения заказа.
//      Состав колонок определяется в методе ОнлайнЗаказыПереопределяемый.ПриНастройкеТаблицыТоваров
//    * ПараметрыОплат - Структура - Содержит описание видов оплат с их параметрами:
//      ** СБП - Структура - Содержит описание параметров оплаты СБП по вариантам сценария,
//         Неопределено, если подсистема не внедрена:
//        *** c2b - Структура, Неопределено - Содержит описание параметров оплаты СБП сценарию c2b,
//            Неопределено, если подсистема не внедрена или сценарий не используется:
//          **** НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//               в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//               делать строку не длинной и включать информацию об организации, которая
//               является получателем денежных средств, например: Оплата СБП 524,00 RUB ООО Ромашка
//               Если строка не заполнена, будет передано стандартное представление
//               назначения: Оплата СБП {ЗаказНаОплату.ВизуализацияЗаказа.Представление}.
//               Длина строки не должна превышать 140 символов, в противном случае будет
//               обрезана принудительно. Система быстрых платежей имеет дополнительные требования
//               к символам и их кодировке. Возможна передача следующих значений:
//                 - символы латинского алфавита (A-Z и a-z) с десятичными кодами из диапазонов
//                 [065-090] и [097-122] в кодировке UTF-8;
//                 - символы русского алфавита (А-Я и а-я) с десятичными кодами из диапазона
//                 [1040-1103] в кодировке UTF-8;
//                 - цифры 0-9 с десятичными кодами из диапазона [048-057] в кодировке UTF-8;
//                 - специальные символы с десятичными кодами из диапазонов [032-047], [058-064],
//                 [091-096], [123-126] в кодировке UTF-8;
//                 - символ "№" под номером 8470 в кодировке UTF-8.
//
Функция ДанныеЗаказаНаОплатуПоДокументу(
		РезультатОперации,
		ДокументЗаказа,
		ПараметрыНастройки)
	
	ОписаниеПредставленияТоваров = НовоеОписаниеПредставленияТоваров();
	
	ИнтеграцияПодсистемБИП.ПриНастройкеТаблицыТоваров(
		ДокументЗаказа,
		ОписаниеПредставленияТоваров);
	
	ОнлайнЗаказыПереопределяемый.ПриНастройкеТаблицыТоваров(
		ДокументЗаказа,
		ОписаниеПредставленияТоваров);
	
	ЗаказНаОплату = НовыйОписаниеЗаказаНаОплату(
		ДокументЗаказа,
		ОписаниеПредставленияТоваров,
		ПараметрыНастройки);
	
	ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаОплату(
		ДокументЗаказа,
		ЗаказНаОплату);
	
	ОнлайнЗаказыПереопределяемый.ПриФормированииЗаказаНаОплату(
		ДокументЗаказа,
		ЗаказНаОплату);
	
	Если ЗаказНаОплату.ПараметрыОплат.СБП <> Неопределено
		И ЗаказНаОплату.ПараметрыОплат.СБП.c2b <> Неопределено Тогда
		ЗаказНаОплату.ПараметрыОплат.СБП.c2b.Удалить("ШаблоныНазначения");
	КонецЕсли;
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации);
		
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаказНаОплату.Вставить(
		"НастройкиВизуализации",
		ОписаниеНастроекВизуализации(ОписаниеПредставленияТоваров));
	
	ЗаказНаОплату.Вставить(
		"КонтрольнаяСумма",
		РассчитатьКонтрольнуюСумму(ЗаказНаОплату));
	
	ОписаниеОснования = ОписаниеОснования(ДокументЗаказа);
	
	ЗаказНаОплату.Вставить(
		"ПредставлениеОснованияЗаказа",
		ОписаниеОснования.ПредставлениеОснования.РезультатСклонения.ИменительныйПадеж);
	
	Если ЗаказНаОплату.ПараметрыОплат.СБП <> Неопределено
		И ЗаказНаОплату.ПараметрыОплат.СБП.c2b <> Неопределено Тогда
		
		Если ПустаяСтрока(ЗаказНаОплату.ПараметрыОплат.СБП.c2b.НазначениеПлатежа) Тогда
			ЗаказНаОплату.ПараметрыОплат.СБП.c2b.НазначениеПлатежа = ЗаказНаОплату.ВизуализацияЗаказа.Представление;
		КонецЕсли;
		
		ОнлайнЗаказыСобытия.ПриПодготовкеНазначенияПлатежа(
			ЗаказНаОплату.ПараметрыОплат.СБП.c2b.НазначениеПлатежа,
			Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b);
		
	КонецЕсли;
	
	ЗаказНаОплату.ОбщиеПараметрыЗаказа.Вставить("Валюта", "RUB");
	
	Возврат ЗаказНаОплату;
	
КонецФункции

// Производит валидацию параметров онлайн-заказа.
//
// Параметры:
//  ЗаказНаОплату - Структура - данные заказа.
//  РезультатОперации  - Структура - результат проверки заказа:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    *СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    *ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//
Процедура ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации)
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.ОбщиеПараметрыЗаказа.СрокЖизни) Тогда
		
		РезультатОперации.КодОшибки = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Некорректно заполнены общие параметры заказа. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке онлайн-заказа возникли ошибки.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.ВизуализацияЗаказа.Представление)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ВизуализацияЗаказа.ПоставщикЗаголовок)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ВизуализацияЗаказа.ПоставщикПредставление)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ВизуализацияЗаказа.ПокупательЗаголовок)
		Или Не ЗначениеЗаполнено(ЗаказНаОплату.ВизуализацияЗаказа.ПокупательПредставление) Тогда
		
		РезультатОперации.КодОшибки = КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке =
			НСтр("ru = 'Некорректно заполнены данные представления заказа. Обратитесь к администратору.'");
		РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке онлайн-заказа возникли ошибки.'");
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
	Для Каждого Товар Из ЗаказНаОплату.Товары Цикл
		Если Не ЗначениеЗаполнено(Товар.ИдентификаторТовара)
			Или Не ЗначениеЗаполнено(Товар.Количество) Тогда
			
			РезультатОперации.КодОшибки = КодОшибкиНеверныйФорматЗапроса();
			РезультатОперации.СообщениеОбОшибке
				= НСтр("ru = 'Некорректно заполнены данные товара. Обратитесь к администратору.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'При проверке онлайн-заказа возникли ошибки.'");
			
			ЗаписатьИнформациюВЖурналРегистрации(
				Строка(РезультатОперации.ИнформацияОбОшибке),
				Истина);
			
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = НовыйРезультатОперации();
	
	ОнлайнЗаказыСобытия.ПриПроверкеПараметровОплат(
		ЗаказНаОплату.ПараметрыОплат,
		РезультатПроверки);
	
	Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
		
		ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатПроверки);
		
		ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует новое описание онлайн-заказа. При создании заказа
// проверяется заполнение всех свойств.
//
// Возвращаемое значение:
//  Структура - содержит описание онлайн-заказа:
//    * ОбщиеПараметрыЗаказа - Структура - описывает общие параметры заказа:
//      ** Представление - Строка - представление онлайн-заказа.
//      ** СрокЖизни - Число - содержит значение срока жизни заказа.
//         Минимальное значение - 1 минута, максимальное значение - 43 200 минут
//         (30 дней в минутах). В случае передачи значения не входящего в выше
//         описанный диапазон возвращается ошибка "НеверныйФорматЗапроса".
//    * ШапкаЗаказа - Структура - содержит описание шапки онлайн-заказа.
//      ** Поставщик - Строка - содержит данные поставщика отображаемые на странице заказа.
//      ** ПоставщикПредставление - Строка - представление поставщика (пример: Поставщик, Исполнитель, Продавец).
//      ** Покупатель - Строка - содержит данные покупателя отображаемые на странице заказа.
//      ** ПокупательПредставление - Строка - представление покупателя (пример: Покупатель, Клиент).
//      ** ДополнительнаяИнформация - Строка - дополнительная информация об онлайн-заказе.
//    * Товары - Массив из Структура - описывает товарное наполнение заказа.
//    * ОписаниеТаблицыТовары - Массив из Структура - описывает колонки товаров,
//      отображаемые пользователю на странице заказа.
//    * ПредставлениеТоваров - Массив из Структура - описывает представление товаров покупателю.
//
Функция НовыйОписаниеЗаказаНаОплату(
	ДокументЗаказа,
	ОписаниеПредставленияТоваров,
	ПараметрыНастройки)
	
	ОбщиеПараметрыЗаказа = Новый Структура;
	ОбщиеПараметрыЗаказа.Вставить("СрокЖизни", 0); 
	
	ВизуализацияЗаказа = Новый Структура;
	ВизуализацияЗаказа.Вставить("Представление", "");
	ВизуализацияЗаказа.Вставить("ПоставщикПредставление",   "");
	ВизуализацияЗаказа.Вставить("ПоставщикЗаголовок",       "");
	ВизуализацияЗаказа.Вставить("ПокупательПредставление",  "");
	ВизуализацияЗаказа.Вставить("ПокупательЗаголовок",      "");
	ВизуализацияЗаказа.Вставить("ДополнительнаяИнформация", "");
	
	ЗаказНаОплату = Новый Структура;
	ЗаказНаОплату.Вставить("ОбщиеПараметрыЗаказа",  ОбщиеПараметрыЗаказа);
	ЗаказНаОплату.Вставить("ВизуализацияЗаказа",    ВизуализацияЗаказа);
	ЗаказНаОплату.Вставить(
		"Товары",
		НовыйОписаниеТаблицыТовары(
			ОписаниеПредставленияТоваров));
	ЗаказНаОплату.Вставить(
		"ПараметрыОплат",
		ПараметрыОплатЗаказа(
			ДокументЗаказа,
			ПараметрыНастройки.НастройкиОплат));
	
	Возврат ЗаказНаОплату;
	
КонецФункции

Функция РассчитатьКонтрольнуюСумму(ЗаказНаОплату)
	
	ДанныеЗаказа = Новый Структура;
	
	Для Каждого ЭлементЗаказаНаОплату Из ЗаказНаОплату Цикл
		Если ТипЗнч(ЭлементЗаказаНаОплату.Значение) = Тип("ТаблицаЗначений") Тогда
			ДанныеЗаказа.Вставить(
				ЭлементЗаказаНаОплату.Ключ,
				ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭлементЗаказаНаОплату.Значение));
		Иначе
			ДанныеЗаказа.Вставить(
				ЭлементЗаказаНаОплату.Ключ,
				ЭлементЗаказаНаОплату.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗаказа);
	ДанныеЗаказаСтрокой = ЗаписьJSON.Закрыть();
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДанныеЗаказаСтрокой);
	ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
	
	Результат = Новый Структура;
	Результат.Вставить("Значение",      ХешСумма);
	Результат.Вставить("ВерсияРасчета", 1);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиОплаты(НастройкиОплатПодключения, ПараметрыОплатЗаказа)
	
	НастройкиОплатСервиса = Новый Структура;
	НастройкиОплатСервиса.Вставить("СБП", Неопределено);
	
	ОнлайнЗаказыСобытия.ПриЗаполненииНастроекОплаты(
		НастройкиОплатПодключения,
		НастройкиОплатСервиса);
	
	Если НастройкиОплатСервиса.СБП <> Неопределено
		И ПараметрыОплатЗаказа.СБП.c2b <> Неопределено Тогда
		
		НастройкиОплатСервиса.СБП.НазначениеПлатежа = ПараметрыОплатЗаказа.СБП.c2b.НазначениеПлатежа;
		
	КонецЕсли;
	
	Возврат НастройкиОплатСервиса;
	
КонецФункции

Функция ОшибкиВалидацииЗаказа(ДанныеЗаказа)
	
	ОшибкиВалидации = Новый Массив;
	
	Если ДанныеЗаказа.ОбщиеПараметрыЗаказа.СрокЖизни <= ТекущаяДатаСеанса() Тогда
		ОшибкиВалидации.Добавить(НСтр("ru = 'Срок жизни заказа меньше текущей даты.'"));
	КонецЕсли;
	
	Если ДанныеЗаказа.Товары.Количество() = 0 Тогда
		ОшибкиВалидации.Добавить(НСтр("ru = 'Заказ не содержит строк с товарами.'"));
	КонецЕсли;
	
	Если ДанныеЗаказа.Товары.Итог("СуммаСоСкидкой") <= 0 Тогда
		ОшибкиВалидации.Добавить(НСтр("ru = 'Сумма заказа должна быть больше ноля.'"));
	КонецЕсли;
	
	Возврат ОшибкиВалидации;
	
КонецФункции

#КонецОбласти

#Область ПечатныеФормыЗаказа

Функция ПечатныеФормыЗаказа(ДокументЗаказа) Экспорт
	
	ПечатныеФормы = НовыйОписаниеТаблицыПечатныхФорм();
	ИнтеграцияПодсистемБИП.ПриОпределенииПечатныхФормЗаказа(ДокументЗаказа, ПечатныеФормы);
	ОнлайнЗаказыПереопределяемый.ПриОпределенииПечатныхФормЗаказа(ДокументЗаказа, ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция НовыйОписаниеТаблицыПечатныхФорм()
	
	ПечатныеФормы = Новый ТаблицаЗначений;
	
	ПечатныеФормы.Колонки.Добавить(
		"Идентификатор",
		Новый ОписаниеТипов(
			"Строка",
			,
			,
			,
			Новый КвалификаторыСтроки(50)));
	ПечатныеФормы.Колонки.Добавить(
		"Представление",
		Новый ОписаниеТипов(
			"Строка",
			,
			,
			,
			Новый КвалификаторыСтроки(100)));
			
	ПечатныеФормы.Колонки.Добавить(
		"ФорматСохранения",
		Новый ОписаниеТипов("ТипФайлаТабличногоДокумента"));
			
	ПечатныеФормы.Колонки.Добавить(
		"ИмяФайлаВТранслите",
		Новый ОписаниеТипов("Булево"));
		
	ПечатныеФормы.Колонки.Добавить(
		"ПодписьИПечать",
		Новый ОписаниеТипов("Булево"));
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти

#Область ОтправкаВложений

Функция ОтправитьВложения(ПараметрыОперации) Экспорт
	
	РезультатОперации = НовыйРезультатДанныеЗаказа();
	
	ТекущееСостояниеЗаказа = СтатусЗаказа(ПараметрыОперации.ДокументЗаказа);
	Если ТекущееСостояниеЗаказа.СтатусЗаказа <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется()Тогда
		ЗаполнитьЗначенияСвойств(РезультатОперации, ТекущееСостояниеЗаказа);
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеВложений = ПодготовитьДанныеВложений(ПараметрыОперации);
	
	ПараметрыОперации.Вставить("ДанныеВложений", ДанныеВложений);
	
	РезультатОтправки = ОнлайнЗаказыСервис.ОтправкаВложений(
		ПараметрыОперации);
	
	ЗаполнитьЗначенияСвойств(РезультатОперации, РезультатОтправки);
	
	Если ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется();
		
		РегистрыСведений.ПечатныеФормыОнлайнЗаказов.ЗаписатьПечатныеФормыЗаказа(
			ПараметрыОперации.ДокументЗаказа,
			ПараметрыОперации.ПечатныеФормы);
			
		РегистрыСведений.ФайлыОнлайнЗаказов.ЗаписатьФайлы(
			ПараметрыОперации.ДокументЗаказа,
			ПараметрыОперации.ПрисоединенныеФайлы,
			ДанныеВложений);
			
	ИначеЕсли РезультатОтправки.КодОшибки = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса() Тогда
		
		РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
			ПараметрыОперации.ДокументЗаказа,
			РезультатОперации.СтатусЗаказа,
			Неопределено,
			Неопределено);
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

Функция ПодготовитьДанныеВложений(
		ПараметрыОперации)
	
	Вложения = Новый Соответствие;
	ПодготовитьПечатныеФормыКОтправке(
		ПараметрыОперации,
		Вложения);
	ПодготовитьПрисоединенныеФайлыКОтправке(
		ПараметрыОперации,
		Вложения);
	
	Возврат Вложения;
	
КонецФункции

Процедура ПодготовитьПечатныеФормыКОтправке(ПараметрыОперации, Вложения)
	
	Если Не ЗначениеЗаполнено(ПараметрыОперации.ПечатныеФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПечатныхФорм = ДанныеПечатныхФорм(
		ПараметрыОперации.ДокументЗаказа,
		ПараметрыОперации.ПечатныеФормы);
	
	Для Каждого ПечатнаяФорма Из ПараметрыОперации.ПечатныеФормы Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор", ПечатнаяФорма.Идентификатор);
		
		НайденныеСтроки = ДанныеПечатныхФорм.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <> 1 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось подготовить печатные формы к отправке вложений.
				|Неоднозначные данные для формы ""%1"".'"),
				ПечатнаяФорма.Представление);
		Иначе
			ФайлПечатнойФормы = НайденныеСтроки[0];
		КонецЕсли;
		
		Вложение = НовыйОписаниеВложения();
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ФайлПечатнойФормы.ДвоичныеДанные,
			ПараметрыОперации.УникальныйИдентификатор);
		Вложение.ХешСумма      = ФайлПечатнойФормы.ХешСумма;
		Вложение.ИмяФайла      = ФайлПечатнойФормы.ИмяФайла;
		Вложение.Представление = ПечатнаяФорма.Представление;
		Вложение.Идентификатор = ПечатнаяФорма.Идентификатор;
		
		Вложения.Вставить(ПечатнаяФорма.Идентификатор, Вложение);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьПрисоединенныеФайлыКОтправке(ПараметрыОперации, Вложения)
	
	Если Не ЗначениеЗаполнено(ПараметрыОперации.ПрисоединенныеФайлы)
		Или Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеДанные = РегистрыСведений.ФайлыОнлайнЗаказов.ФайлыЗаказа(
		ПараметрыОперации.ДокументЗаказа);
	
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	
	Для Каждого ПрисоединенныйФайл Из ПараметрыОперации.ПрисоединенныеФайлы Цикл
		
		Вложение = НовыйОписаниеВложения();
		ДанныеФайла = МодульРаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
		СохраненныеДанныеФайла = СохраненныеДанные.Получить(ПрисоединенныйФайл);
		
		Если СохраненныеДанныеФайла = Неопределено
			Или СохраненныеДанныеФайла.ДатаМодификации <> ДанныеФайла.ДатаМодификацииУниверсальная
			Или СохраненныеДанныеФайла.Размер <> ДанныеФайла.Размер Тогда
			
			ДвоичныеДанныеФайла = МодульРаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
			
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
			ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
			ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
			
			Вложение = НовыйОписаниеВложения();
			Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеФайла,
				ПараметрыОперации.УникальныйИдентификатор);
			Вложение.ХешСумма        = ХешСумма;
			Вложение.ДатаМодификации = ДанныеФайла.ДатаМодификацииУниверсальная;
			Вложение.Размер          = ДанныеФайла.Размер;
			
		Иначе
			ЗаполнитьЗначенияСвойств(
				Вложение,
				СохраненныеДанныеФайла);
		КонецЕсли;
		
		Вложение.ИмяФайла        = ДанныеФайла.ИмяФайла;
		Вложение.Идентификатор = Строка(ПрисоединенныйФайл.УникальныйИдентификатор());
		Вложение.Представление  = ДанныеФайла.Наименование;
		
		Вложения.Вставить(Вложение.Идентификатор, Вложение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеВложения()
	
	ОписаниеВложения = Новый Структура;
	ОписаниеВложения.Вставить("Идентификатор",             "");
	ОписаниеВложения.Вставить("Представление",             "");
	ОписаниеВложения.Вставить("ИмяФайла",                  "");
	ОписаниеВложения.Вставить("АдресВоВременномХранилище", "");
	ОписаниеВложения.Вставить("ХешСумма",                  "");
	ОписаниеВложения.Вставить("ДатаМодификации",           Дата(1, 1, 1));
	ОписаниеВложения.Вставить("Размер",                    0);
	
	Возврат ОписаниеВложения;
	
КонецФункции

Функция ДанныеПечатныхФорм(ДокументЗаказа, ВыбранныеПечатныеФормы)
	
	ДанныеПечатныхФорм = НовыйОписаниеТаблицыДанныеПечатныхФорм();
	
	КомандыПечатиОбъекта = ОнлайнЗаказы.КомандыПечатиОбъектаДоступныеДляВложений(
		ДокументЗаказа.Метаданные());
		
	ОбъектПечати = Новый Массив;
	ОбъектПечати.Добавить(ДокументЗаказа);
	
	Для Каждого ВыбраннаяПечатнаяФорма Из ВыбранныеПечатныеФормы Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УникальныйИдентификатор", ВыбраннаяПечатнаяФорма.Идентификатор);
		
		НайденныеСтроки = КомандыПечатиОбъекта.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() <> 1 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось однозначно определить печатную форму по ее идентификатору ""%1"".'"),
				ВыбраннаяПечатнаяФорма.Идентификатор);
			Продолжить;
		Иначе
			КомандаПечати = НайденныеСтроки[0];
		КонецЕсли;
		
		РасширениеMXL = НРег(Строка(ТипФайлаТабличногоДокумента["MXL"]));
		
		ФорматыСохранения = Новый Массив;
		ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента["MXL"]);
		
		Если ВыбраннаяПечатнаяФорма.ФорматСохранения <> ТипФайлаТабличногоДокумента["MXL"]
			И ВыбраннаяПечатнаяФорма.ФорматСохранения <> ТипФайлаТабличногоДокумента["MXL7"] Тогда
			
			РасширениеПечатнойФормы = НРег(Строка(ВыбраннаяПечатнаяФорма.ФорматСохранения));
			ФорматыСохранения.Добавить(ВыбраннаяПечатнаяФорма.ФорматСохранения);
			
		Иначе
			РасширениеПечатнойФормы = РасширениеMXL;
		КонецЕсли;
		
		НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
		НастройкиСохранения.ФорматыСохранения = ФорматыСохранения;
		НастройкиСохранения.УпаковатьВАрхив = Ложь;
		НастройкиСохранения.ПереводитьИменаФайловВТранслит = ВыбраннаяПечатнаяФорма.ИмяФайлаВТранслите;
		НастройкиСохранения.ПодписьИПечать = ВыбраннаяПечатнаяФорма.ПодписьИПечать;
		
		ПечатныеФормы = УправлениеПечатью.НапечататьВФайл(
			КомандаПечати,
			ОбъектПечати,
			НастройкиСохранения);
		
		ДанныеПечатнойФормы = НовыйОписаниеДанныеПечатнойФормы();
		ДанныеПечатнойФормы.Идентификатор = ВыбраннаяПечатнаяФорма.Идентификатор;
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
			Если СтрНайти(ПечатнаяФорма.ИмяФайла, РасширениеПечатнойФормы) > 0 Тогда
				ДанныеПечатнойФормы.ДвоичныеДанные = ПечатнаяФорма.ДвоичныеДанные;
				ДанныеПечатнойФормы.ИмяФайла       = ПечатнаяФорма.ИмяФайла;
			КонецЕсли;
			Если СтрНайти(ПечатнаяФорма.ИмяФайла, РасширениеMXL) > 0 Тогда
				ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
				ХешированиеДанных.Добавить(ПечатнаяФорма.ДвоичныеДанные);
				ДанныеПечатнойФормы.ХешСумма = СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", "");
			КонецЕсли;
		КонецЦикла;
		
		НовыеДанныеПечатнойФормы = ДанныеПечатныхФорм.Добавить();
		ЗаполнитьЗначенияСвойств(
			НовыеДанныеПечатнойФормы,
			ДанныеПечатнойФормы);
		
	КонецЦикла;
	
	Возврат ДанныеПечатныхФорм;
	
КонецФункции

Функция НовыйОписаниеТаблицыДанныеПечатныхФорм()
	
	ФайлыПечатныхФорм = Новый ТаблицаЗначений;
	
	ФайлыПечатныхФорм.Колонки.Добавить(
		"Идентификатор",
		Новый ОписаниеТипов(
			"Строка",
			,
			,
			,
			Новый КвалификаторыСтроки(50)));
	ФайлыПечатныхФорм.Колонки.Добавить(
		"ИмяФайла",
		Новый ОписаниеТипов(
			"Строка",
			,
			,
			,
			Новый КвалификаторыСтроки(100)));
	ФайлыПечатныхФорм.Колонки.Добавить(
		"ХешСумма",
		Новый ОписаниеТипов(
			"Строка",
			,
			,
			,
			Новый КвалификаторыСтроки(64)));
	ФайлыПечатныхФорм.Колонки.Добавить("ДвоичныеДанные", Неопределено);
	
	Возврат ФайлыПечатныхФорм;
	
КонецФункции

Функция НовыйОписаниеДанныеПечатнойФормы()
	
	ДанныеПечатнойФормы = Новый Структура;
	
	ДанныеПечатнойФормы.Вставить("Идентификатор",  "");
	ДанныеПечатнойФормы.Вставить("ДвоичныеДанные", Неопределено);
	ДанныеПечатнойФормы.Вставить("ИмяФайла",       "");
	ДанныеПечатнойФормы.Вставить("ХешСумма",       "");
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

#КонецОбласти

#Область ОтложенноеПолучениеСтатусов

// Выполняет загрузку статусов онлайн-заказов, по которым было
// отложено получение результата.
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ДокументОнлайнЗаказаБИП - перечень обработанных документов.
//
Функция АктуализироватьСтатусыЗаказов() Экспорт
	
	СлужебнаяОнлайнЗаказыДоступны();
	
	ОбработанныеЗаказы = Новый Массив;
	ДанныеЗаказов = ДанныеЗаказовДляПолученияСтатуса(ОбработанныеЗаказы);
	
	Если ДанныеЗаказов.Количество() = 0 Тогда
		Возврат ОбработанныеЗаказы;
	КонецЕсли;
	
	Для Каждого ЗаказыПоНастройке Из ДанныеЗаказов Цикл
		
		ИдентификаторыЗаказов = Новый Массив;
		
		Для Каждого ИдентификаторЗаказа Из ЗаказыПоНастройке.Значение Цикл
			ИдентификаторыЗаказов.Добавить(ИдентификаторЗаказа.Ключ);
		КонецЦикла;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НастройкаПодключения",  ЗаказыПоНастройке.Ключ);
		ПараметрыОперации.Вставить("ИдентификаторыЗаказов", ИдентификаторыЗаказов);
		
		РезультатПолучения = ОнлайнЗаказыСервис.ПолучениеИнформацииПоЗаказам(ПараметрыОперации);
		
		// Ошибка запроса увеличим количество попыток запроса для всех документов заказа.
		Если ЗначениеЗаполнено(РезультатПолучения.КодОшибки) Тогда
			
			Для Каждого ИдентификаторЗаказа Из ЗаказыПоНастройке.Значение Цикл
				РегистрыСведений.ИдентификаторыОнлайнЗаказов.УвеличитьКоличествоПопытокЗапросаСтатуса(
					ИдентификаторЗаказа.Значение);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ИдентификаторыДанныхСервиса = Новый Массив;
		Для Каждого ДанныеЗаказа Из РезультатПолучения.ДанныеЗаказов Цикл
			
			ДокументЗаказа = ЗаказыПоНастройке.Значение.Получить(
				ДанныеЗаказа.ИдентификаторЗаказа);
			ИдентификаторыДанныхСервиса.Добавить(
				ДанныеЗаказа.ИдентификаторЗаказа);
			
			ПараметрыОплаты = Новый Соответствие;
			ПараметрыНастройкиОплаты = Новый Структура;
			
			Если ДанныеЗаказа.Статус = СтатусЗаказаОплачен() Тогда
				
				ОнлайнЗаказыСобытия.ПриЗаполненииПараметровОплаты(
					ДанныеЗаказа,
					ПараметрыОплаты,
					ПараметрыНастройкиОплаты,
					ЗаказыПоНастройке.Ключ);
					
				ОнлайнЗаказыСобытия.ПриЗаписиДанныхОплаты(
					ДокументЗаказа,
					ДанныеЗаказа.СпособОплаты,
					ПараметрыОплаты,
					ПараметрыНастройкиОплаты);
				
			КонецЕсли;
			
			РегистрыСведений.ИдентификаторыОнлайнЗаказов.ЗаписатьСтатусЗаказа(
				ДокументЗаказа,
				ДанныеЗаказа.Статус,
				ДанныеЗаказа.СпособОплаты,
				ДанныеЗаказа.СуммаЗаказа);
			
			Если ДанныеЗаказа.Статус = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни()
				Или ДанныеЗаказа.Статус = СтатусЗаказаОплачен() Тогда
				ПриЗагрузкеСтатусаЗаказа(
					ДокументЗаказа,
					ПараметрыОплаты,
					ДанныеЗаказа.Статус,
					"",
					ОбработанныеЗаказы);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
			
			Если ИдентификаторыДанныхСервиса.Найти(ИдентификаторЗаказа) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Сервис не вернул данные по идентификатору заказа, увеличиваем количество попыток.
			РегистрыСведений.ИдентификаторыОнлайнЗаказов.УвеличитьКоличествоПопытокЗапросаСтатуса(
				ЗаказыПоНастройке.Значение.Получить(ИдентификаторЗаказа));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбработанныеЗаказы;
	
КонецФункции

// Определяет заказы по котором необходимо выполнить получение статуса.
//
// Параметры:
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ в информационной базе,
//   являющийся основанием для заказа.
//
// Возвращаемое значение:
//  Массив - данные заказов, по которым необходимо загрузить статус.
//
Функция ДанныеЗаказовДляПолученияСтатуса(ОбработанныеЗаказы)
	
	ОтложенныеЗаказы = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ОтложенныеЗаказы();
	
	ДанныеОтложенныхЗаказов = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ОтложенныеЗаказы Цикл
		
		ИдентификаторыДляОбработки = Новый Соответствие;
		
		Для Каждого ОтложенныйЗаказ Из КлючЗначение.Значение Цикл
			
			// Если заказ уже в терминальном статусе, выполнять запрос
			// не имеет смысла, необходимо выполнить обработку в прикладной
			// логике и перейти к следующей.
			Если ОтложенныйЗаказ.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни()
				Или ОтложенныйЗаказ.СтатусЗаказа = СтатусЗаказаОплачен() Тогда
				ПриЗагрузкеСтатусаЗаказа(
					ОтложенныйЗаказ.ДокументЗаказа,
					ОтложенныйЗаказ.ПараметрыОплаты,
					ОтложенныйЗаказ.СтатусЗаказа,
					"",
					ОбработанныеЗаказы);
				Продолжить;
			Иначе
				ИдентификаторыДляОбработки.Вставить(
					ОтложенныйЗаказ.ИдентификаторЗаказа,
					ОтложенныйЗаказ.ДокументЗаказа);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыДляОбработки.Количество() > 0 Тогда
			ДанныеОтложенныхЗаказов.Вставить(КлючЗначение.Ключ, ИдентификаторыДляОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОтложенныхЗаказов;
	
КонецФункции

// Определяет алгоритм обработки операций, статус которых был получен регламентным заданием.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ, который отражает
//    операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОнлайнЗаказам -
//    настройка выполнения операций;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * ИдентификаторОплаты- Строка - идентификатор оплаты;
//    * ДокументОснование - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ основание онлайн-заказа;
//  СтатусЗаказаСервис - Строка - текущее состояние заказа по данным сервиса. Для проверки статуса,
//    необходимо использовать функции программного интерфейса общего модуля
//    ОнлайнЗаказыКлиентСервер. Возможные значения:
//      - "Отменен" - онлайн-заказ отменен;
//      - "Оплачен" - онлайн-заказ оплачен;
//      - "Ошибка" - не удалось выполнить проверку статуса заказа из-за ошибки.
//  СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОнлайнЗаказаБИП - данные обработанных документов.
//
Процедура ПриЗагрузкеСтатусаЗаказа(
		ДокументЗаказа,
		ПараметрыОплаты,
		СтатусЗаказаСервис,
		СообщениеОбОшибке,
		ОбработанныеЗаказы)
	
	Если СтатусЗаказаСервис <> СтатусЗаказаОплачен()
		И СтатусЗаказаСервис <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан не валидный статус операции %1 в отложенную обработку.'"),
				СтатусЗаказаСервис),
			Истина);
		РегистрыСведений.ИдентификаторыОнлайнЗаказов.УстановитьОтложенноеПолучениеСтатуса(
			ДокументЗаказа,
			Ложь);
		
	КонецЕсли;
	
	Попытка
		
		Обработан = Ложь;
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеСтатусаЗаказа(
			ДокументЗаказа,
			ПредставлениеСтатусаЗаказа(СтатусЗаказаСервис),
			ПараметрыОплаты,
			Обработан);
		ОнлайнЗаказыПереопределяемый.ПриЗагрузкеСтатусаЗаказа(
			ДокументЗаказа,
			ПредставлениеСтатусаЗаказа(СтатусЗаказаСервис),
			ПараметрыОплаты,
			Обработан);
		
		Если Обработан = Истина Тогда
			РегистрыСведений.ИдентификаторыОнлайнЗаказов.УстановитьОтложенноеПолучениеСтатуса(
				ДокументЗаказа,
				Ложь);
			ОбработанныеЗаказы.Добавить(ДокументЗаказа);
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменаТранзакции = Ложь;
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию(); // АПК:325 Отмена незакрытых транзакций.
				ОтменаТранзакции = Истина;
			КонецЦикла;
			
			Если ОтменаТранзакции Тогда
				ЗаписатьИнформациюВЖурналРегистрации(
					НСтр("ru = 'По завершении выполнения обработчика ПриЗагрузкеСтатусаЗаказ не была закрыта транзакция.'"),
					Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Возвращает описание настроек использования подсистемы ШаблоныСообщений.
//
// Возвращаемое значение:
//  Структура - содержит описание настроек использования подсистемы ШаблоныСообщений.
//   * Существует - Булево - признак существования подсистемы ШаблоныСообщений в составе конфигурации;
//   * Используется - Булево - признак включения функциональной опции использования шаблонов сообщений.
//
Функция НастройкиШаблоновСообщений() Экспорт
	
	Настройки = Новый Структура;
	
	ЕстьШаблоныСообщений = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений");
	ИспользуютсяШаблоныСообщений = Ложь;
	Если ЕстьШаблоныСообщений Тогда
		МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
		ИспользуютсяШаблоныСообщений = МодульШаблоныСообщений.ИспользуютсяШаблоныСообщений();
	КонецЕсли;
	
	Настройки.Вставить("Существует", ЕстьШаблоныСообщений);
	Настройки.Вставить("Используется", ИспользуютсяШаблоныСообщений);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает признак использования шаблонов для онлайн-заказов.
//
// Возвращаемое значение:
//  Булево - признак использования шаблонов, Истина - шаблоны используются для онлайн-заказов.
//
Функция ИспользоватьШаблоныСообщений() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	Если Не ЕстьОтправкаSMS И Не ЕстьОтправкаПисем Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьШаблоныСообщений = Ложь;
	ИнтеграцияПодсистемБИП.ПриПроверкеИспользованияШаблоновСообщенийОнлайнЗаказов(
		ИспользоватьШаблоныСообщений);
	ОнлайнЗаказыПереопределяемый.ПриПроверкеИспользованияШаблоновСообщенийОнлайнЗаказов(
		ИспользоватьШаблоныСообщений);
	
	Возврат ИспользоватьШаблоныСообщений;
	
КонецФункции

// Возвращает признак создания всех описанных шаблонов.
//
// Возвращаемое значение:
//  Булево - Истина, если все описанные шаблоны созданы.
//
Функция ВсеШаблоныСозданы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеШаблоны", Истина);
	Результат.Вставить("Письмо", Истина);
	Результат.Вставить("SMS", Истина);
	
	Шаблоны = Новый Массив;
	ШаблоныПоТипу = ШаблоныСообщенийДокументовОперации();
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(
		ПредопределенныеШаблоныСообщений);
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(
			ДанныеШаблона,
			ШаблоныПоТипу);
		
		Если СозданныйШаблон.Пустая() Тогда
			
			ПодсистемаСМС = ОбщегоНазначения.ПодсистемаСуществует(
				"СтандартныеПодсистемы.ОтправкаSMS");
			ПодсистемаПочта = ОбщегоНазначения.ПодсистемаСуществует(
				"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
			
			Если (Шаблон.ТипШаблона = "SMS" И ПодсистемаСМС)
				Или (Шаблон.ТипШаблона = "Письмо" И ПодсистемаПочта) Тогда
				Результат.ВсеШаблоны = Ложь;
			КонецЕсли;
			
			Результат[Шаблон.ТипШаблона] = Ложь;
			
		Иначе
			Шаблоны.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Шаблоны", Шаблоны);
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие, содержащее сохраненные предопределенные шаблоны сообщений подсистемы по типу отправки.
//
// Возвращаемое значение:
//  Соответствие - определения шаблонов:
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки шаблонов:
//       ** Ключ - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Функция ШаблоныСообщенийДокументовОперации() Экспорт
	
	ШаблоныПоТипу = Константы.ПредопределенныеШаблоныСообщенийОнлайнЗаказов.Получить().Получить();
	
	Если ШаблоныПоТипу = Неопределено Тогда
		ШаблоныПоТипу = Новый Соответствие;
		ШаблоныПоТипу.Вставить("Письмо", Новый Соответствие);
		ШаблоныПоТипу.Вставить("SMS", Новый Соответствие);
	КонецЕсли;
	
	Возврат ШаблоныПоТипу;
	
КонецФункции

// Записывает соответствие предопределенных шаблонов подсистемы в соответствующую константу.
//
// Параметры:
//  ШаблоныСообщенийПоТипу - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки шаблонов:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
Процедура УстановитьСоответствиеШаблоновДокументамОперации(
		ШаблоныСообщенийПоТипу)
	
	Константы.ПредопределенныеШаблоныСообщенийОнлайнЗаказов.Установить(
		Новый ХранилищеЗначения(ШаблоныСообщенийПоТипу));
	
КонецПроцедуры

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Возвращаемое значение:
// См. СоздатьПредопределенныеШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщенийПроверкаПодсистем() Экспорт
	
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	ЕстьОтправкаПисем = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	Возврат СоздатьПредопределенныеШаблоныСообщений(ЕстьОтправкаПисем, ЕстьОтправкаSMS);
	
КонецФункции

// Создает предопределенные шаблоны сообщений после проверки существования соответствующих подсистем.
//
// Параметры:
//  СоздатьШаблоныПисем - Булево - признак создания шаблонов сообщений для электронной почты.
//  СоздатьШаблоныСМС - Булево - признак создания шаблонов сообщений СМС.
//
// Возвращаемое значение:
//  Массив - Массив созданных предопределенных шаблонов,
//    элементами массива являются ссылки на справочник ШаблоныСообщений.
//
Функция СоздатьПредопределенныеШаблоныСообщений(
		СоздатьШаблоныПисем,
		СоздатьШаблоныСМС) Экспорт
	
	МассивСозданныхШаблонов = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	МассивПредопределенныхШаблоновСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(МассивПредопределенныхШаблоновСообщений);
	
	Если Не МассивПредопределенныхШаблоновСообщений.Количество() Тогда
		Возврат МассивСозданныхШаблонов;
	КонецЕсли;
	
	ШаблоныСообщенийПоТипу = ШаблоныСообщенийДокументовОперации();
	
	Для Каждого Шаблон Из МассивПредопределенныхШаблоновСообщений Цикл 
		
		Если Не Шаблон.Свойство("ТипШаблона") Тогда // АПК:1416 Поддержка обратной совместимости.
			Продолжить;
		ИначеЕсли Врег(Шаблон.ТипШаблона) <> Врег("SMS") И Врег(Шаблон.ТипШаблона) <> Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныПисем И Врег(Шаблон.ТипШаблона) = Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли Не СоздатьШаблоныСМС И Врег(Шаблон.ТипШаблона) = Врег("SMS") Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщенийСсылка = НайтиПредопределенныйШаблонСообщений(Шаблон,
			ШаблоныСообщенийПоТипу);
		
		Если ШаблонСообщенийСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыШаблона,
				Шаблон,
				Истина);
			
			ШаблонСообщенийСсылка = МодульШаблоныСообщений.СоздатьШаблон(
				Шаблон.Наименование,
				ПараметрыШаблона);
			
			МассивСозданныхШаблонов.Добавить(ШаблонСообщенийСсылка);
			
		КонецЕсли;
		
		ШаблоныСообщенийПоТипу[Шаблон.ТипШаблона].Вставить(
			Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСообщенийСсылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	УстановитьСоответствиеШаблоновДокументамОперации(
		ШаблоныСообщенийПоТипу);
	
	Возврат МассивСозданныхШаблонов;
	
КонецФункции

// Возвращает перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//
// Возвращаемое значение:
//  Структура - перечень предопределенных шаблонов сообщений подсистемы, структурированный по типам назначения.
//   * Ключ - Строка - тип назначения шаблона, может принимать значения - Письмо, SMS.
//   * Значение - Массив из СправочникСсылка.ШаблоныСообщений - перечень предопределенных шаблонов подсистемы по типу.
//
Функция ШаблоныСообщенийПоТипам() Экспорт
	
	ШаблоныЭлектронныхПисем    = Новый Массив;
	ШаблоныSMS                 = Новый Массив;
	ШаблоныСообщенийДокументов = ШаблоныСообщенийДокументовОперации();
	
	ПредопределенныеШаблоныСообщений = Новый Массив;
	ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(
		ПредопределенныеШаблоныСообщений);
	
	Для Каждого Шаблон Из ПредопределенныеШаблоныСообщений Цикл
		
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("ПолноеИмяТипаНазначения", Шаблон.ПолноеИмяТипаНазначения);
		ДанныеШаблона.Вставить("ТипШаблона", Шаблон.ТипШаблона);
		
		СозданныйШаблон = НайтиПредопределенныйШаблонСообщений(ДанныеШаблона, ШаблоныСообщенийДокументов);
		Если СозданныйШаблон.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Шаблон.ТипШаблона = "Письмо" Тогда
			ШаблоныЭлектронныхПисем.Добавить(СозданныйШаблон);
		ИначеЕсли Шаблон.ТипШаблона = "SMS" Тогда
			ШаблоныSMS.Добавить(СозданныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Письмо", ШаблоныЭлектронныхПисем);
	Результат.Вставить("SMS",    ШаблоныSMS);
	
	Возврат Результат;
	
КонецФункции

// См. ОнлайнЗаказыПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам
//
Процедура ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(
		ПредопределенныеШаблоныСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(
		ПредопределенныеШаблоныСообщений);
	ОнлайнЗаказыПереопределяемый.ПриОпределенииПредопределенныхШаблоновСообщенийОнлайнЗаказовПоТипам(
		ПредопределенныеШаблоныСообщений);
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника ШаблоныСообщений по переданным параметрам.
//
// Параметры:
//  Шаблон - Структура - описание искомого шаблона:
//    * ПолноеИмяТипаНазначения - Строка - содержит полное имя типа назначения шаблона;
//    * ТипШаблона - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//  ШаблоныСообщенийПоТипу - Соответствие - описание предопределенных шаблонов подсистемы
//    * Ключ - Строка - признак принадлежности шаблонов для отправки посредством письма или СМС.
//    * Значение - Соответствие - настройки шаблонов:
//       ** Ключ    - Строка - содержит полное имя типа назначения шаблона;
//       ** Значение - УникальныйИдентификатор - представление ссылки на элемент справочника ШаблоныСообщений.
//
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныСообщений - результат поиска, 
//    пустая ссылка, если по данной структуре шаблон не найден.
//
Функция НайтиПредопределенныйШаблонСообщений(
		Шаблон,
		ШаблоныСообщенийПоТипу)
	
	МенеджерШаблоновСообщений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШаблоныСообщений");
	
	ШаблонСсылка = МенеджерШаблоновСообщений.ПустаяСсылка();
	
	ИдентификаторШаблона =
		ШаблоныСообщенийПоТипу[Шаблон.ТипШаблона].Получить(Шаблон.ПолноеИмяТипаНазначения);
		
	Если Не ТипЗнч(ИдентификаторШаблона) = Тип("УникальныйИдентификатор") Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	НайденныйШаблон = МенеджерШаблоновСообщений.ПолучитьСсылку(ИдентификаторШаблона);
	Если НайденныйШаблон.Пустая() Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ДанныеШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НайденныйШаблон,
		"ПометкаУдаления, ПолноеИмяТипаПараметраВводаНаОсновании, ПредназначенДляЭлектронныхПисем");
	
	Если ДанныеШаблона.ПометкаУдаления = Неопределено Тогда
		Возврат ШаблонСсылка;
	ИначеЕсли ДанныеШаблона.ПометкаУдаления Тогда 
		Возврат ШаблонСсылка;
	ИначеЕсли Не ДанныеШаблона.ПолноеИмяТипаПараметраВводаНаОсновании = Шаблон.ПолноеИмяТипаНазначения Тогда
		Возврат ШаблонСсылка;
	КонецЕсли;
	
	ШаблонСсылка = НайденныйШаблон;
	
	Возврат ШаблонСсылка;
	
КонецФункции

// Включает функциональные опции необходимые для работы с шаблонами сообщений.
//
Процедура УстановитьИспользованиеШаблоновСообщенийПроверкаПодсистем() Экспорт
	
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеSMS();
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеЭлектроннойПочты();
	ИнтернетПоддержкаПользователей.УстановитьОтправкуПисемВФорматеHTML();
	ИнтернетПоддержкаПользователей.УстановитьИспользованиеШаблоновСообщений();
	
КонецПроцедуры

// Проверяет является ли объект основанием онлайн-заказов.
//
// Параметры:
//  Объект - ЛюбаяСсылка, Строка - ссылка на объект или полное имя объекта метаданных для проверки.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является основанием онлайн-заказов, иначе Ложь.
//
Функция ЭтоДокументОнлайнЗаказов(Знач Объект)
	
	ПолноеИмя = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		
		ПолноеИмя = Объект;
		
	Иначе
		
		МетаданныеОбъекта = Объект.Метаданные();
		ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаДокументов = ПолучитьИменаОснованийЗаказа();
	
	Возврат (ИменаДокументов.Найти(ПолноеИмя) <> Неопределено);
	
КонецФункции

// Создает описание параметров отправки сообщений.
//
// Возвращаемое значение:
//  Структура - описание параметров отправки сообщений:
//    * ПараметрыОтправкиПисем - Структура - описание отправки электронных писем:
//       ** ОтправлятьПисьмаВФорматеHTML - Булево, Неопределено - признак отправки электронных писем в формате HTML.
//
Функция НовыйПараметрыОтправкиСообщений()
	
	ПараметрыОтправкиСообщений = Новый Структура;
	
	ПараметрыОтправкиПисем = Новый Структура;
	ПараметрыОтправкиПисем.Вставить("ОтправлятьПисьмаВФорматеHTML", Неопределено);
	
	ПараметрыОтправкиСообщений.Вставить("ПараметрыОтправкиПисем", ПараметрыОтправкиПисем);
	
	Возврат ПараметрыОтправкиСообщений;
	
КонецФункции

// Возвращает признак отправки писем с использованием шаблонов СБП в формате HTML.
//
// Возвращаемое значение:
//  Булево - признак отправки писем с использованием шаблонов СБП в формате HTML.
//
Функция ОтправлятьПисьмаВФорматеHTML(
		ПараметрыОтправкиСообщений)
	
	Попытка
		ОтправлятьПисьмаВФорматеHTML = ПараметрыОтправкиСообщений.ПараметрыОтправкиПисем.ОтправлятьПисьмаВФорматеHTML;
	Исключение
		ВызватьИсключение НСтр("ru = 'Нарушение структуры параметров отправки сообщений в переопределяемом методе
			|ОнлайнЗаказыПереопределяемый.ПриОпределенииПараметровОтправкиСообщений'");
	КонецПопытки;
	
	Если ОтправлятьПисьмаВФорматеHTML = Неопределено Тогда
		Возврат ИнтернетПоддержкаПользователей.ОтправлятьПисьмаВФорматеHTML();
	Иначе
		Возврат ОтправлятьПисьмаВФорматеHTML;
	КонецЕсли;
	
КонецФункции

// См. ОнлайнЗаказыПереопределяемый.ПриОпределенииПараметровОтправкиСообщений.
//
Процедура ПриОпределенииПараметровОтправкиСообщений(
		ПараметрыОтправкиСообщений)
	
	ИнтеграцияПодсистемБИП.ПриОпределенииПараметровОтправкиСообщенийОнлайнЗаказов(
		ПараметрыОтправкиСообщений);
	ОнлайнЗаказыПереопределяемый.ПриОпределенииПараметровОтправкиСообщений(
		ПараметрыОтправкиСообщений);
	
КонецПроцедуры

// Формирует данные для заполнения шаблона сообщения.
//
// Параметры:
//  ПредметСообщения - - ОпределяемыйТип.ДокументОнлайнЗаказаБИП - документ, по данным которого
//    необходимо сформировать сообщение;
//  Сообщение - сообщение для отправки.
//
// Возвращаемое значение:
//  Структура - данные для заполнения.
//
Функция ДанныеЗаполненияШаблона(
		ПредметСообщения,
		Сообщение)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ПредставлениеСсылкиОнлайнЗаказа", Неопределено);
	ПараметрыСообщения.Вставить("СуммаОнлайнЗаказа", Неопределено);
	
	// АПК:1416-выкл Обработка различных сценариев отправки.
	// АПК:1415-выкл Обработка различных сценариев отправки.
	
	Если Сообщение.ДополнительныеПараметры.Свойство("ПараметрыСообщения")
		И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.ПараметрыСообщения) Тогда
		Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство(
			"ПредставлениеСсылкиОнлайнЗаказа",
			ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа);
		Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Свойство(
			"СуммаОнлайнЗаказа",
			ПараметрыСообщения.СуммаОнлайнЗаказа);
	Иначе
		Сообщение.ДополнительныеПараметры.Свойство(
			"ПредставлениеСсылкиОнлайнЗаказа",
			ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа);
		Сообщение.ДополнительныеПараметры.Свойство(
			"СуммаОнлайнЗаказа",
			ПараметрыСообщения.СуммаОнлайнЗаказа);
	КонецЕсли;
	
	// АПК:1416-вкл
	// АПК:1415-вкл
	
	Если Не ЗначениеЗаполнено(ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа) Тогда
		
		ПараметрыСсылки = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ПараметрыСсылкиПоДокументуЗаказа(
			ПредметСообщения);
		
		Если ЗначениеЗаполнено(ПараметрыСсылки.НастройкаПодключения) Тогда
			
			НастройкаПодключения = ПараметрыСсылки.НастройкаПодключения;
			
		Иначе
			
			ПараметрыЗаказа = ПриОпределенииПараметровСозданияЗаказа(ПредметСообщения);
			
			Если Не ПараметрыЗаказа.СозданиеЗаказаДоступно Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Недостаточно прав для создания нового онлайн-заказа.'"));
					Возврат ПараметрыСообщения;
			ИначеЕсли Не ЗначениеЗаполнено(ПараметрыЗаказа.НастройкиПодключения) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось определить настройку подключения к онлайн-заказам.'"));
					Возврат ПараметрыСообщения;
			КонецЕсли;
			
			НастройкаПодключения = ПараметрыЗаказа.НастройкиПодключения[0];
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСсылки.ИдентификаторЗаказа)
			И ЗначениеЗаполнено(ПараметрыСсылки.URLЗаказа) Тогда
			РезультатОперации = СтатусЗаказа(ПредметСообщения);
		Иначе
			РезультатОперации = НовыйЗаказ(ПредметСообщения, НастройкаПодключения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось получить данные онлайн-заказа.'"));
					Возврат ПараметрыСообщения;
		КонецЕсли;
		
		ПараметрыСообщения.ПредставлениеСсылкиОнлайнЗаказа = РезультатОперации.URLЗаказа;
		ПараметрыСообщения.СуммаОнлайнЗаказа = РезультатОперации.СуммаЗаказа;
		
	КонецЕсли;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

// Заполнение представление ссылки в шаблоне сообщения.
//
// Параметры:
//  Сообщение - Структура - сообщение для отправки;
//  ПараметрыШаблона - Структура- параметры сообщения;
//  ПредставлениеСсылкиОнлайнЗаказа - Строка - ссылка на заказ для заполнения в сообщении.
//
Процедура ЗаполнитьПредставлениеСсылки(
		Сообщение,
		ПараметрыШаблона,
		ПредставлениеСсылкиОнлайнЗаказа)
	
	ПараметрыОтправкиСообщений = НовыйПараметрыОтправкиСообщений();
	ПриОпределенииПараметровОтправкиСообщений(ПараметрыОтправкиСообщений);
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо"
		И ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
		И ОтправлятьПисьмаВФорматеHTML(ПараметрыОтправкиСообщений) Тогда
		
		Если Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиОнлайнЗаказа"] <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиОнлайнЗаказа"]
				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '<p>Заказ доступен по ссылке: <a href=""%1"">%1</a></p>'"),
					ПредставлениеСсылкиОнлайнЗаказа);
		КонецЕсли;
		
	Иначе
		Сообщение.ЗначенияРеквизитов["ПредставлениеСсылкиОнлайнЗаказа"] = ?(
			ПараметрыШаблона.ТипШаблона = "SMS",
			ПредставлениеСсылкиОнлайнЗаказа,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ доступен по ссылке:
					|%1'"),
			ПредставлениеСсылкиОнлайнЗаказа));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет операцию обновления настроек страниц онлайн-заказов.
//
// Параметры:
//   ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой
//     необходимо поместить результат выполнения процедуры.
//  НастройкаОплаты - Произвольный -  - настройки подключения способа оплаты,
//   по которой необходимо выбрать настройки онлайн-закзов для цели их обновления в сервисе.
//
// Возвращаемое значение:
//  Структура: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//                          - Неопределено - если Статус <> "Выполняется" и фоновое задание не запускалось.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                      помещен результат работы функции.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * Сообщения - ФиксированныйМассив - если Статус <> "Выполняется", то массив объектов СообщениеПользователю,
//                                      которые были сформированы в фоновом задании.
//
Функция ОбновитьНастройкиСтраницЗапускЗадания(
		ИдентификаторФормы,
		НастройкаОплаты) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление настроек страниц в сервисе.'");
	
	НастройкиСтраниц = Справочники.НастройкиПодключенияКОнлайнЗаказам.НастройкиПодключенияПоНастройкеОплаты(
		НастройкаОплаты);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ОбновлениеНастроекПодключения",
		НастройкиСтраниц);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Возвращает имя события для журнала регистрации, которое используется
// для записи событий загрузки данных из внешних систем.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Онлайн-заказы'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
