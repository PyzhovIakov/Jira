
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-процессы и задачи".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы.

// Вызывается при создании формы списка задач на сервере.
//
// Параметры:
//  СписокЗадачИлиЕгоУсловноеОформление - ДинамическийСписок
//                                      - УсловноеОформлениеКомпоновкиДанных - условное оформление списка задач.
//
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) Экспорт
	
	Если ТипЗнч(СписокЗадачИлиЕгоУсловноеОформление) = Тип("ДинамическийСписок") Тогда
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформлениеСпискаЗадач.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	Иначе
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление;
	КонецЕсли;
	
	// Удаление предустановленных элементов оформления.
	Предустановленные = Новый Массив;
	Элементы = УсловноеОформлениеСпискаЗадач.Элементы;
	Для каждого ЭлементУсловногоОформления Из Элементы Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	// +CRM
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	// -CRM
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	// +CRM
	//ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочена");
	// -CRM
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	// +CRM
	//ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	// -CRM
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	// +CRM
	//ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	// -CRM
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	// +CRM
	//ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	//ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ВыполненнаяЗадача.Значение; 

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(245, 251, 247);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(104, 144, 87);
	// -CRM
	ЭлементЦветаОформления.Использование = Истина;
	
	// +CRM
	// Установка оформления для важных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для принятых задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(255, 252, 218);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(105, 72, 47);
	ЭлементЦветаОформления.Использование = Истина;
	// -CRM
	
	// Установка оформления для задач, не принятых к исполнению.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Срок".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Срок не указан'");
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для внешних пользователей, поле Автор пустое.
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
			ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
			ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Автор");
			ОформляемоеПоле.Использование = Истина;
			
			ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор");
			ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбораДанных.ПравоеЗначение = Пользователи.АвторизованныйПользователь();
			ЭлементОтбораДанных.Использование = Истина;
			
			ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
			ЭлементЦветаОформления.Значение = НСтр("ru = 'Представитель организации'");
			ЭлементЦветаОформления.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает описание предмета задача в виде текстовой строки.
//
// Параметры:
//  ПредметСсылка - ЛюбаяСсылка - объект ссылочного типа, который выступает в качестве предмета задачи.
// 
// Возвращаемое значение:
//  Строка - описание предмета.
//
Функция ПредметСтрокой(ПредметСсылка) Экспорт
	
	ПредметЗаполнен = ПредметСсылка <> Неопределено И НЕ ПредметСсылка.Пустая();
	Если НЕ ПредметЗаполнен Тогда
		Возврат НСтр("ru='не задан';en='not specified'");
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(Метаданные.НайтиПоТипу(ТипЗнч(ПредметСсылка))) Тогда
		Возврат Строка(ПредметСсылка);
	Иначе
		ПредставлениеОбъекта = ПредметСсылка.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			 ПредставлениеОбъекта = ПредметСсылка.Метаданные().Представление();
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)", Строка(ПредметСсылка), ПредставлениеОбъекта);
	КонецЕсли;
		
КонецФункции

// Процедура устанавливает нового ответственного в выбранных документах.
//
// Параметры:
//  МассивДокументов	 - Массив - Массив выбранных документов;
//  НовыйОтветственный	 - СправочникСсылка.Пользователи - Новый ответственный.
// 
// Возвращаемое значение:
//  Строка - Строка с ошибкой, или пустая строка. 
//
Функция УстановитьНовогоОтветственного(Знач МассивДокументов, НовыйОтветственный) Экспорт
	
	ТипОтветственного = ТипЗнч(НовыйОтветственный);
	Если ТипОтветственного = Тип("СправочникСсылка.Пользователи") Тогда
		НовоеПодразделение = НовыйОтветственный.Подразделение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка КАК Взаимодействие,
		|	CRM_Взаимодействие.ДокументОснование КАК Основание
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование В (&МассивДокументов)
		|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
		|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)";
				
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		ВзаимодействияДокументов = Запрос.Выполнить().Выгрузить();

		Для Каждого ТекущийДокумент Из МассивДокументов Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				Если ТекущийДокумент.Менеджер = НовыйОтветственный Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ТекущийДокумент.Ответственный = НовыйОтветственный Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МетаданныеОбъекта = ТекущийДокумент.Ссылка.Метаданные();
			
			Попытка
				СодержитОтдельныйРеквизитДляРоли = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийДокумент,
					 "CRM_РольОтветственного");
				Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
					СтарыйОтветственный = ТекущийДокумент.Менеджер;
				Иначе
					СтарыйОтветственный = ТекущийДокумент.Ответственный;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(СтарыйОтветственный) И СодержитОтдельныйРеквизитДляРоли Тогда
					СтарыйОтветственный = ТекущийДокумент.CRM_РольОтветственного;
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Подразделение", МетаданныеОбъекта) Тогда
					ИмяРеквизита = "Подразделение";
				ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("CRM_Подразделение", МетаданныеОбъекта) Тогда
					ИмяРеквизита = "CRM_Подразделение";
				ИначеЕсли CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПодразделениеПолучатель", МетаданныеОбъекта) Тогда
					ИмяРеквизита = "ПодразделениеПолучатель";
				Иначе
					ИмяРеквизита = "";
				КонецЕсли;
				
				Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
					CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Менеджер, Истина);
				Иначе
					CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Ответственный, Истина);
				КонецЕсли;
				
				ТекущийДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
				Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
					ТекущийДокументОбъект.Менеджер = НовыйОтветственный;
				ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
					Если ТекущийДокументОбъект.СвоиЛица.Количество() = 1 Тогда
						ТекущийДокументОбъект.СвоиЛица.Очистить();
					КонецЕсли;
					ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
				ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					Или ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
					ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
				Иначе
					ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяРеквизита) И ТекущийДокументОбъект[ИмяРеквизита] <> НовоеПодразделение Тогда
					Если ЗначениеЗаполнено(НовоеПодразделение) Тогда
						ТекущийДокументОбъект[ИмяРеквизита] = НовоеПодразделение;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					Если НЕ ЗначениеЗаполнено(НовыйОтветственный.Подразделение) Тогда
						Возврат НСтр("ru='У выбранного пользователя не заполнено подразделение. Перенаправление невозможно!';
							|en='The selected user does not have a department. Redirection is impossible!'");
					КонецЕсли;
					ТекущийДокументОбъект.Подразделение = ТекущийДокументОбъект.Ответственный.Подразделение;
					ТекущийДокументОбъект.Офис = ТекущийДокументОбъект.Ответственный.Подразделение.CRM_Офис;
					Если ЗначениеЗаполнено(ТекущийДокументОбъект.ТипУслуги) Тогда
						// Если типа услуги нет в массиве своих услуг, то его очищаем.
						МассивСвоихТиповУслуг =
							CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(ТекущийДокументОбъект.Подразделение);
						Если (МассивСвоихТиповУслуг.Количество() > 0)
							 И (МассивСвоихТиповУслуг.Найти(ТекущийДокументОбъект.ТипУслуги) = Неопределено) Тогда
							ТекущийДокументОбъект.ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
						КонецЕсли;	
					КонецЕсли;

					ВзаимодействияДокумента = ВзаимодействияДокументов.НайтиСтроки(Новый Структура("Основание", ТекущийДокумент));
					Для Каждого Строка Из  ВзаимодействияДокумента Цикл
						вОбъект = Строка.Взаимодействие.ПолучитьОбъект();
						вОбъект.Ответственный = НовыйОтветственный;
						вОбъект.Подразделение = НовыйОтветственный.Подразделение;
						Если вОбъект.СвоиЛица.Количество() = 1 Тогда
							вОбъект.СвоиЛица.Очистить();
						КонецЕсли;
						Попытка
							вОбъект.Записать();
						Исключение
							Возврат НСтр("ru='Не удалось обновить данные взаимодействия!';en='Failed to update the interaction data!'");
						КонецПопытки;
					КонецЦикла;
					
					ПереадресоватьЗадачуПоОтветственномуЛицу(ТекущийДокумент, НовыйОтветственный, СтарыйОтветственный);
					
				КонецЕсли;
				
				Если ТипЗнч(ТекущийДокумент) = Тип("СправочникСсылка.CRM_Диалоги") Тогда // нужно переадресовать также последнее сообщение диалога
					ПоследнееСообщение = CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(ТекущийДокумент);
					ПоследнееСообщениеОбъект = ПоследнееСообщение.Сообщение.ПолучитьОбъект();
					ПоследнееСообщениеОбъект.Ответственный = НовыйОтветственный;
					ПоследнееСообщениеОбъект.Записать();
				КонецЕсли;
				
				ТекущийДокументОбъект.ДополнительныеСвойства.Вставить("ПереданВручную", Истина);
				
				ТекущийДокументОбъект.Записать();
				
				// Если объект перенаправил на себя текущий пользователь, то оповещать его об этом не надо.
				Если НЕ НовыйОтветственный = Пользователи.ТекущийПользователь() Тогда
					ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(НовыйОтветственный,
						 Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах,
						 ТекущийДокументОбъект.Ссылка);
					Если НЕ (ПараметрыОповещения = Неопределено) Тогда
						CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
					КонецЕсли;
				КонецЕсли;
				
				Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(ТекущийДокументОбъект.Ссылка) Тогда
					БизнесПроцесс = CRM_БизнесПроцессыСервер.ПолучитьБизнесПроцессПоОбъекту(ТекущийДокументОбъект.Ссылка);
					
					ПараметрКоманды = Новый Массив;
					ПараметрКоманды.Добавить(БизнесПроцесс);
					
					УстановитьНовогоОтветственного(ПараметрКоманды, НовыйОтветственный);
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Для Каждого ТекущийДокумент Из МассивДокументов Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СодержитОтдельныйРеквизитДляРоли = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийДокумент,
				 "CRM_РольОтветственного");
			ПоддерживаетАдресациюНаРоль = CRM_ОбщегоНазначенияСервер.ОтветственныйПоддерживаетАдресациюНаРоль(ТекущийДокумент);
			
			Если НЕ (СодержитОтдельныйРеквизитДляРоли ИЛИ ПоддерживаетАдресациюНаРоль) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				СтарыйОтветственный = ТекущийДокумент.Менеджер;
			Иначе
				СтарыйОтветственный = ТекущийДокумент.Ответственный;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтарыйОтветственный) И СодержитОтдельныйРеквизитДляРоли Тогда
				СтарыйОтветственный = ТекущийДокумент.CRM_РольОтветственного;
			КонецЕсли;
			
			ТекущийДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			
			Если ПоддерживаетАдресациюНаРоль Тогда
				
				CRM_ОповещенияСервер.УдалитьОповещения(ТекущийДокумент, ТекущийДокумент.Ответственный, Истина);
				
				ТекущийДокументОбъект.Ответственный = НовыйОтветственный;
				
				ТекущийДокументОбъект.Подразделение	= CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(ТекущийДокументОбъект.Ответственный,
					 "Подразделение");
				ТекущийДокументОбъект.Офис = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийДокументОбъект.Подразделение,
					 "CRM_Офис");
				
				Если ЗначениеЗаполнено(ТекущийДокументОбъект.ТипУслуги) Тогда
					// Если типа услуги нет в массиве своих услуг, то его очищаем.
					МассивСвоихТиповУслуг =
						CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(ТекущийДокументОбъект.Подразделение);
					Если (МассивСвоихТиповУслуг.Количество() > 0)
						 И (МассивСвоихТиповУслуг.Найти(ТекущийДокументОбъект.ТипУслуги) = Неопределено) Тогда
						ТекущийДокументОбъект.ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
				
				// Если объект перенаправил на себя текущий пользователь, то оповещать его об этом не надо.
				Если НЕ НовыйОтветственный = Пользователи.ТекущийПользователь() Тогда
					ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(НовыйОтветственный,
						 Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах,
						 ТекущийДокументОбъект.Ссылка);
					Если НЕ (ПараметрыОповещения = Неопределено) Тогда
						CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
					КонецЕсли;
				КонецЕсли;
				
				ПереадресоватьЗадачуПоОтветственномуЛицу(ТекущийДокумент, НовыйОтветственный, СтарыйОтветственный);
				
			ИначеЕсли СодержитОтдельныйРеквизитДляРоли Тогда
				
				ТекущийДокументОбъект.CRM_РольОтветственного = НовыйОтветственный;
				ТекущийДокументОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
				
			КонецЕсли;
			
			ТекущийДокументОбъект.ДополнительныеСвойства.Вставить("ПереданВручную", Истина);
			
			ТекущийДокументОбъект.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОтметитьПисьмоНепрочитаннымДляМоиДелаВПочте(ТекущийДокумент, НовыйОтветственный, СтарыйОтветственный);
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Процедура завершает взаимодействия по задаче.
//
// Параметры:
//  МассивВзаимодействий - Массив - Массив взаимодействий.
//
Процедура ЗавершитьВзавимодействияПоЗадаче(МассивВзаимодействий) Экспорт
	
	Для Каждого Взаимодействие Из МассивВзаимодействий Цикл
		ИзмененноеВзаимодействие = Взаимодействие.ПолучитьОбъект();
		ИзмененноеВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		ИзмененноеВзаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(ИзмененноеВзаимодействие.Результат) Тогда
			ИзмененноеВзаимодействие.Результат = "Задача выполнена";
		КонецЕсли;
		ИзмененноеВзаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает карту маршрута.
//
// Параметры:
//  КартаПроцесс - СправочникСсылка.CRM_КартыМаршрутов - Карта маршрута бизнес процесса.
// 
// Возвращаемое значение:
//  Справочники.CRM_КартыМаршрутов - Возвращает карту маршрута.
//
Функция ЭтоПоручение(КартаПроцесс) Экспорт
	Возврат КартаПроцесс = Справочники.CRM_КартыМаршрутов.Поручение;
КонецФункции

#Область ГрупповыеПредметыБизнеспроцессов

// Формирование и заполнения групповых предметов.
//
// Параметры:
//  Форма			 - УправляемаФорма	 - Передаваемая форма.
//  Процесс			 - БизнесПроцесс.Ссылка	 - Передаваемый бизнес процесс.
//  ГруппаРазмещения - ГруппаФормы	 - группа размещения предметов для бизнес процессов.
//  ЭтоСтарт		 - Булево	 - Старт бизнес процесса. 
//
Процедура СформироватьИЗаполнитьГрупповыхПредметы(Форма, Процесс, ГруппаРазмещения, ЭтоСтарт = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элементы = Форма.Элементы;
	ДобавляемыеРеквизиты = Новый Массив;
	
	НастройкиСценария = Справочники.CRM_СценарииВыполненияПоручений.ПараметрыНастройки(Процесс.Сценарий);
	Для каждого ИспользуемыйОбъект Из НастройкиСценария.ИспользуемыеОбъекты Цикл
		Если ЭтоСтарт
			
			 	 И ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриВыполненииЗадач Тогда Продолжить;  КонецЕсли; 
		
		НаборНаименование = "НаборЗаписейПредметы" + ИспользуемыйОбъект.Ключ.Имя;
		
		Если Элементы.Найти(НаборНаименование) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НаборНаименование,
			 Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.CRM_ПредметыБизнесПроцессов")
			 ));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для каждого ИспользуемыйОбъект Из НастройкиСценария.ИспользуемыеОбъекты Цикл
		Если ЭтоСтарт
			
			 	 И ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриВыполненииЗадач Тогда Продолжить; КонецЕсли; 
		
		ТипНаименование = ИспользуемыйОбъект.Ключ.Имя;
		ТипСиноним = ИспользуемыйОбъект.Ключ.Синоним;
		НаборНаименование = "НаборЗаписейПредметы" + ТипНаименование;
		
		Если Элементы.Найти(НаборНаименование) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.CRM_ПредметыБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
		НаборЗаписей.Отбор.ТипПредмета.Установить(ИспользуемыйОбъект.Ключ);
		НаборЗаписей.Прочитать();
		
		Форма.ЗначениеВРеквизитФормы(НаборЗаписей, НаборНаименование);
		
		НоваяГруппа = Элементы.Добавить("Группа" + НаборНаименование, Тип("ГруппаФормы"), ГруппаРазмещения);
		НоваяГруппа.Заголовок = ТипСиноним;
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		НоваяГруппа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		НоваяГруппа.РастягиватьПоГоризонтали = Истина;
		НоваяГруппа.РастягиватьПоВертикали = Истина;
		
		НовыйЭлемент = Элементы.Добавить(НаборНаименование, Тип("ТаблицаФормы"), НоваяГруппа);
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = НаборНаименование;
		НовыйЭлемент.РастягиватьПоВертикали = Истина;
		НовыйЭлемент.ТолькоПросмотр = (ИспользуемыйОбъект.Значение = Перечисления.CRM_ВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач)
			 И Не ЭтоСтарт;
		НовыйЭлемент.УстановитьДействие("Выбор", "Подключаемый_ПредметыПроцессаВыбор");
		НовыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПредметыПроцессаОбработкаВыбора");
		
		CRM_ПодборКлассификаторДоступен = (ИспользуемыйОбъект.Ключ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Номенклатура")
											ИЛИ ИспользуемыйОбъект.Ключ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Партнеры"));
		
		Если Не НовыйЭлемент.ТолькоПросмотр И CRM_ПодборКлассификаторДоступен Тогда
			НоваяКоманда = Форма.Команды.Добавить(НаборНаименование + "Подбор");
			НоваяКоманда.Заголовок = НСтр("ru='Подбор';en='Selection'");
			НоваяКоманда.Действие = "Подключаемый_ПредметыПроцессаПодбор";
			
			ЭлементКнопка 				= Форма.Элементы.Добавить(НаборНаименование + "Подбор", Тип("КнопкаФормы"),
				 НовыйЭлемент.КоманднаяПанель);
			ЭлементКнопка.Вид 			= ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементКнопка.Отображение 	= ОтображениеКнопки.Картинка;
			ЭлементКнопка.Картинка 		= БиблиотекаКартинок.ЗагрузитьКлассификаторы;
			ЭлементКнопка.ИмяКоманды 	= НаборНаименование + "Подбор";
		КонецЕсли;
		
		Если НЕ ЭтоСтарт Тогда
			Колонка = Элементы.Добавить(НаборНаименование + "Обработан", Тип("ПолеФормы"), НовыйЭлемент);
			Колонка.Вид = ВидПоляФормы.ПолеФлажка;
			Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Колонка.ПутьКДанным = НаборНаименование + ".Обработан";
			Колонка.Подсказка = НСтр("ru='Обработан';en='Processed'");
			Колонка.КартинкаШапки = БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
		КонецЕсли;
		
		Колонка = Элементы.Добавить(НаборНаименование + "Предмет", Тип("ПолеФормы"), НовыйЭлемент);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ОграничениеТипа = Новый ОписаниеТипов(СтрЗаменить(ИспользуемыйОбъект.Ключ.ПолноеИмя, ".", "Ссылка."));
		Колонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Колонка.ПутьКДанным = НаборНаименование + ".Предмет";
		Колонка.Заголовок = НСтр("ru='Наименование';en='Name'");
	
	КонецЦикла;
	
КонецПроцедуры

// Запись групповые предметы.
//
// Параметры:
//  Форма			 - УправляемаФорма	 - Передаваемая форма.
//  Процесс			 - БизнесПроцесс.Ссылка	 - Передаваемый бизнес процесс. 
//
Процедура ЗаписатьГрупповыеПредметы(Форма, Процесс) Экспорт
	
	НастройкиСценария = Справочники.CRM_СценарииВыполненияПоручений.ПараметрыНастройки(Процесс.Сценарий);
	Для каждого ИспользуемыйОбъект Из НастройкиСценария.ИспользуемыеОбъекты Цикл
		НаборНаименование = "НаборЗаписейПредметы" + ИспользуемыйОбъект.Ключ.Имя;
		
		Если Форма.Элементы.Найти(НаборНаименование) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = Форма.РеквизитФормыВЗначение(НаборНаименование);
		Если НЕ ЗначениеЗаполнено(НаборЗаписей.Отбор.БизнесПроцесс.Значение) Тогда
			НаборЗаписей.Отбор.БизнесПроцесс.Установить(Процесс);
		КонецЕсли;
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Строка Из НаборЗаписей Цикл
				Строка.ТипПредмета = ИспользуемыйОбъект.Ключ;
				Строка.БизнесПроцесс = Процесс;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помечает на удаление задачи бизнес-процесса БизнесПроцессСсылка.
//
// Параметры:
//  БизнесПроцессСсылка  - бизнес-процесс.
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УдалитьОповещенияПриУстановкеПометкиУдаления(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	Если ПометкаУдаления Тогда
		Попытка
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Задачи.Ссылка КАК Ссылка 
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК Задачи
				|ГДЕ
				|	Задачи.БизнесПроцесс = &БизнесПроцесс");
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				CRM_ОповещенияСервер.УдалитьОповещения(Выборка.Ссылка);
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
				БизнесПроцессСсылка.Метаданные(), БизнесПроцессСсылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНезависимыйПроцесс(КартаПроцесс) Экспорт
	Возврат КартаПроцесс.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
КонецФункции

Процедура ПолучитьАктивныеВзаимодействияЗавершить(Задача) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
		Взаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		Взаимодействие.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Взаимодействие.Результат) Тогда
			Взаимодействие.Результат = НСтр("ru='Задача перенаправлена';en='The task are redirect'");
		КонецЕсли;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереадресоватьЗапланированныеВзаимодействияПоЗадаче(ЗадачаСтарая, ЗадачаНовая) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", ЗадачаСтарая);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = ЗадачаНовая;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПринятьЗапланированныеВзаимодействияПоЗадаче(Задача, Пользователь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_Взаимодействие.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	                      |ГДЕ
	                      |	CRM_Взаимодействие.ДокументОснование = &ЗадачаСтарая
	                      |	И CRM_Взаимодействие.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Запланировано)");
	Запрос.УстановитьПараметр("ЗадачаСтарая", Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Ссылка.ПолучитьОбъект();
		Взаимодействие.Ответственный = Пользователь;
		Взаимодействие.Подразделение = Пользователь.Подразделение;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьАктивныеВзаимодействияПеренаправить(Задача, НоваяЗадача, Ответственный) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
	МассивСтатусов.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЕСТЬNULL(CRM_Взаимодействие.Ссылка, ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)) КАК Взаимодействие
	|ПОМЕСТИТЬ ЗадачаИВзавимодействия
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|		ПО ЗадачаИсполнителя.Ссылка = CRM_Взаимодействие.ДокументОснование
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА ЗадачаИсполнителя.CRM_Личная
	|				ТОГДА ЗадачаИсполнителя.CRM_Личная
	|			ИНАЧЕ ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|					И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
	|		КОНЕЦ
	|	И CRM_Взаимодействие.СтатусВзаимодействия В(&МассивСтатусов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИВзавимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	ЗадачаИВзавимодействия КАК ЗадачаИВзавимодействия
	|ГДЕ
	|	НЕ ЗадачаИВзавимодействия.Взаимодействие = ЗНАЧЕНИЕ(Документ.CRM_Взаимодействие.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Взаимодействие = Выборка.Взаимодействие.ПолучитьОбъект();
		Взаимодействие.ДокументОснование = НоваяЗадача;
		Взаимодействие.Ответственный = Ответственный;
		Взаимодействие.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИзбранныхПолучателей(Знач ПланируемаяДата = Неопределено) Экспорт
	Если ПланируемаяДата = Неопределено Тогда
		ПланируемаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	СписокИзбранных = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПланируемаяДата", ПланируемаяДата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ИзбранныеПолучатели.Получатель КАК Получатель,
	               |	CRM_ИзбранныеПолучатели.Получатель.Наименование КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА CRM_ОтсутствиеСотрудников.Сотрудник ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Отсутствует,
	               |	CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник КАК Замещающий,
	               |	CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник.Наименование КАК ЗамещающийНаименование,
	               |	CRM_ОтсутствиеСотрудников.ДатаНачала КАК НачалоОтсутствия,
	               |	ВЫБОР
	               |		КОГДА CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ""<Дата не указана>""
	               |		ИНАЧЕ CRM_ОтсутствиеСотрудников.ДатаОкончания
	               |	КОНЕЦ КАК ОкончаниеОтсутствия,
	               |	CRM_ИзбранныеПолучатели.Получатель.ФизическоеЛицо.Пол КАК ПолучательПол
	               |ИЗ
	               |	РегистрСведений.CRM_ИзбранныеПолучатели КАК CRM_ИзбранныеПолучатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	               |		ПО (CRM_ОтсутствиеСотрудников.Сотрудник = CRM_ИзбранныеПолучатели.Получатель)
	               |			И (CRM_ОтсутствиеСотрудников.ДатаНачала <= &ПланируемаяДата)
	               |			И (CRM_ОтсутствиеСотрудников.ДатаОкончания >= &ПланируемаяДата
	               |				ИЛИ CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	               |ГДЕ
	               |	CRM_ИзбранныеПолучатели.Пользователь = &Пользователь
	               |	И НЕ CRM_ИзбранныеПолучатели.Получатель.ПометкаУдаления
	               |	И НЕ CRM_ИзбранныеПолучатели.Получатель.Недействителен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ИзбранныеПолучатели.Получатель.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИзбранных.Добавить(Выборка.Получатель, ?(Выборка.Отсутствует, Выборка.Наименование + " (" 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует с %1 по %2.'"),
			Формат(Выборка.НачалоОтсутствия, "ДФ=dd.MM.yyyy"),
			Формат(Выборка.ОкончаниеОтсутствия, "ДФ=dd.MM.yyyy")) + ")", ""));
		Если Выборка.Отсутствует И ЗначениеЗаполнено(Выборка.Замещающий) Тогда
			СписокИзбранных.Добавить(Выборка.Замещающий, Выборка.ЗамещающийНаименование 
				+ " (Замещает " + CRM_ОбщегоНазначенияСервер.Склонение(Выборка.Наименование, "В", Выборка.ПолучательПол) + ")");
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИзбранных;
КонецФункции // ПолучитьИзбранныхПолучателей()

// Возвращает признак использования ролевой адресации объекта.
//
// Параметры:
//	Ссылка - Ссылка - Ссылка на объект адресации.
//
// Возвращаемое значение:
//  Булево - признак использования ролевой адресации объекта.
//
Функция ИспользуетсяРолеваяАдресацияОбъекта(Ссылка) Экспорт
	ТипСсылки = ТипЗнч(Ссылка);
	Если (ТипСсылки = Тип("ЗадачаСсылка.ЗадачаИсполнителя")	И НЕ Ссылка.CRM_Личная) Тогда
			
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	СправочникРолиИсполнителейПереопределяемый.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.РолиИсполнителей.Назначение КАК РолиИсполнителейНазначениеПереопределяемый
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК СправочникРолиИсполнителейПереопределяемый
		                      |		ПО РолиИсполнителейНазначениеПереопределяемый.Ссылка = СправочникРолиИсполнителейПереопределяемый.Ссылка
		                      |ГДЕ
		                      |	РолиИсполнителейНазначениеПереопределяемый.ТипПользователей = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		                      |	И НЕ СправочникРолиИсполнителейПереопределяемый.ПометкаУдаления");
		Результат = Запрос.Выполнить();
		Возврат НЕ Результат.Пустой();
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

Процедура ПереадресоватьЗадачуПоОтветственномуЛицу(Задача, НовыйОтветственный, СтарыйОтветственный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ЖурналДокументов.Объект КАК Ссылка
	|ПОМЕСТИТЬ ЖурналДокументов
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.CRM_Интерес = &CRM_Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов КАК ОбъектыЖурнала
	|		ПО ЗадачаИсполнителя.Ссылка = ОбъектыЖурнала.Ссылка
	|			И (НЕ(ЗадачаИсполнителя.Выполнена
	|					ИЛИ ЗадачаИсполнителя.ПометкаУдаления))
	|ГДЕ
	|	ЗадачаИсполнителя.Автор <> &Автор";
	
	Запрос.УстановитьПараметр("CRM_Интерес", Задача);
	Запрос.УстановитьПараметр("Автор", СтарыйОтветственный);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		иОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если иОбъект.CRM_Личная Тогда
			
			Если ТипЗнч(НовыйОтветственный) = Тип("СправочникСсылка.Пользователи") Тогда
				иОбъект.Исполнитель = НовыйОтветственный;
			ИначеЕсли ТипЗнч(НовыйОтветственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				иОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
				иОбъект.РольИсполнителя = НовыйОтветственный;
			КонецЕсли;
			Попытка
				иОбъект.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка, , , 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОтметитьПисьмоНепрочитаннымДляМоиДелаВПочте(Ссылка, НовыйОтветственный, СтарыйОтветственный)
	
	Если ЗначениеЗаполнено(СтарыйОтветственный) Тогда
		НаборЗаписей = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьмаМоиДела.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Письмо.Установить(Ссылка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ТипЗнч(НовыйОтветственный) = Тип("СправочникСсылка.Пользователи") Тогда
		МенеджерЗаписи = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьмаМоиДела.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Письмо = Ссылка;
		МенеджерЗаписи.Пользователь = НовыйОтветственный;
		МенеджерЗаписи.Записать();
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
			|ИЗ
			|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
		
		Запрос.УстановитьПараметр("РольИсполнителя", НовыйОтветственный);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			НаборЗаписей = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьмаМоиДела.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Письмо.Установить(Ссылка);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Письмо = Ссылка;
				НоваяЗапись.Пользователь = Выборка.Исполнитель;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания CRM_РасчетВажностиИСрочностиЗадач,
// рассчитывает срочность и важность задач по настройкам,
// зависящим от текущей даты
//
Процедура РассчитатьВажностьИСрочностьЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.CRM_РасчетВажностиИСрочностиЗадач);
	
	Запрос = Новый Запрос;
	Условие = "CRM_ВажностьСрочностьЗадач.ТребуетсяПересчет";
	Запрос.Текст = ТекстЗапросаДляРасчетаВажностиИСрочностиЗадач(Условие);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОбработатьРезультатЗапросаВажностиИСрочностиЗадач(РезультатЗапроса);
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета важности и срочности задач
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаДляРасчетаВажностиИСрочностиЗадач(Условие) Экспорт
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	CRM_ВажностьСрочностьЗадач.Задача КАК Задача,
	        |	CRM_ОбъектыАРМ.Пользователь КАК Пользователь,
	        |	CRM_ОбъектыАРМ.Пользователь.Подразделение КАК Подразделение,
	        |	CRM_ВажностьСрочностьЗадач.РучнаяУстановкаВажностиИСрочности КАК РучнаяУстановкаВажностиИСрочности,
	        |	CRM_ВажностьСрочностьЗадач.ТребуетсяПересчет КАК ТребуетсяПересчет
	        |ПОМЕСТИТЬ втДанныеРегистра
	        |ИЗ
	        |	РегистрСведений.CRM_ВажностьСрочностьЗадач КАК CRM_ВажностьСрочностьЗадач
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	        |		ПО CRM_ВажностьСрочностьЗадач.Задача = CRM_ОбъектыАРМ.Объект
	        |ГДЕ
	        |	" + Условие + "
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	втДанныеРегистра.Задача КАК Задача,
	        |	втДанныеРегистра.Пользователь КАК Пользователь,
	        |	втДанныеРегистра.Подразделение КАК Подразделение
	        |ИЗ
	        |	втДанныеРегистра КАК втДанныеРегистра
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	втДанныеРегистра.Пользователь КАК Пользователь
	        |ПОМЕСТИТЬ втПользователи
	        |ИЗ
	        |	втДанныеРегистра КАК втДанныеРегистра
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	CRM_НастройкиРаспределенияЗадач.Объект КАК Объект,
	        |	CRM_НастройкиРаспределенияЗадач.НастройкиВажности КАК НастройкиВажности,
	        |	CRM_НастройкиРаспределенияЗадач.НастройкиСрочности КАК НастройкиСрочности
	        |ИЗ
	        |	РегистрСведений.CRM_НастройкиРаспределенияЗадач КАК CRM_НастройкиРаспределенияЗадач
	        |ГДЕ
	        |	ВЫРАЗИТЬ(CRM_НастройкиРаспределенияЗадач.Объект КАК Справочник.Пользователи) В
	        |			(ВЫБРАТЬ
	        |				втПользователи.Пользователь КАК Пользователь
	        |			ИЗ
	        |				втПользователи КАК втПользователи)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	CRM_НастройкиРаспределенияЗадач.Объект,
	        |	CRM_НастройкиРаспределенияЗадач.НастройкиВажности,
	        |	CRM_НастройкиРаспределенияЗадач.НастройкиСрочности
	        |ИЗ
	        |	РегистрСведений.CRM_НастройкиРаспределенияЗадач КАК CRM_НастройкиРаспределенияЗадач
	        |ГДЕ
	        |	(CRM_НастройкиРаспределенияЗадач.Объект ССЫЛКА Справочник.СтруктураПредприятия
	        |			ИЛИ CRM_НастройкиРаспределенияЗадач.Объект = ""Общие настройки"")";
	
КонецФункции

// Процедура определяет и записывает важность и срочности задач
// по настройкам из результата запроса
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса
//
Процедура ОбработатьРезультатЗапросаВажностиИСрочностиЗадач(РезультатЗапроса) Экспорт
	
	ВыборкаЗадач = РезультатЗапроса[1].Выбрать();
	ВыборкаНастроек = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаЗадач.Следующий() Цикл
		
		МассивОбъектовНастроек = 
			CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ВыборкаЗадач.Подразделение);
		МассивОбъектовНастроек.Вставить(0, ВыборкаЗадач.Пользователь);
		МассивОбъектовНастроек.Добавить("Общие настройки");
		
		НастройкиВажности = Неопределено;
		НастройкиСрочности = Неопределено;
		Для Каждого ОбъектНастройки Из МассивОбъектовНастроек Цикл
			ВыборкаНастроек.Сбросить();
			Если ВыборкаНастроек.НайтиСледующий(ОбъектНастройки, "Объект") Тогда
				ВыборкаНастройкиВажности = ВыборкаНастроек.НастройкиВажности.Получить();
				ВыборкаНастройкиСрочности = ВыборкаНастроек.НастройкиСрочности.Получить();
				Если Не ЗначениеЗаполнено(НастройкиВажности)
					И ЗначениеЗаполнено(ВыборкаНастройкиВажности) Тогда
				НастройкиВажности = ВыборкаНастройкиВажности;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НастройкиСрочности)
					И ЗначениеЗаполнено(ВыборкаНастройкиСрочности) Тогда
					НастройкиСрочности = ВыборкаНастройкиСрочности;
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкиВажности)
					И ЗначениеЗаполнено(НастройкиСрочности) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Важная = Ложь;
		Если ЗначениеЗаполнено(НастройкиВажности) Тогда
			Важная = ЗадачаСоответствуетНастройкам(ВыборкаЗадач.Задача, НастройкиВажности);
		КонецЕсли;
			
		Срочная = Ложь;
		Если ЗначениеЗаполнено(НастройкиСрочности) Тогда
			Срочная = ЗадачаСоответствуетНастройкам(ВыборкаЗадач.Задача, НастройкиСрочности);
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.CRM_ВажностьСрочностьЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задача = ВыборкаЗадач.Задача;
		МенеджерЗаписи.Важная = Важная;
		МенеджерЗаписи.Срочная = Срочная;
		МенеджерЗаписи.РучнаяУстановкаВажностиИСрочности = Ложь;
		МенеджерЗаписи.ТребуетсяПересчет = Ложь;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура записывает важность и срочность задач
// при установке признаков вручную
//
// Параметры:
//   Ссылка - ЗадачаСсылка.ЗадачаИсполнителя
//   Важная - Булево
//   Срочная - Булево
//
Процедура ЗаписатьВажностьСрочность(Ссылка, Важная, Срочная) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.CRM_ВажностьСрочностьЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = Ссылка;
	МенеджерЗаписи.Важная = Важная;
	МенеджерЗаписи.Срочная = Срочная;
	МенеджерЗаписи.РучнаяУстановкаВажностиИСрочности = Истина;
	МенеджерЗаписи.ТребуетсяПересчет = Ложь;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Функция определяет соответствие задачи исполнителя
// настройкам распределения задач
//
// Параметры:
//  Ссылка  -  ЗадачаСсылка.ЗадачаИсполнителя
//  Настройки  -  НастройкиКомпоновкиДанных
//
// Возвращаемое значение:
//   Булево - задача соответствует настройкам
//
Функция ЗадачаСоответствуетНастройкам(Ссылка, Настройки)
	
	Схема = Новый СхемаКомпоновкиДанных;
	Источник = Схема.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных1";
	Источник.ТипИсточникаДанных = "Local";
	
	НовыйНаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НовыйНаборДанных.Имя = "НаборДанных1";
	НовыйНаборДанных.ИсточникДанных = Источник.Имя;
	НовыйНаборДанных.Запрос = 
		"ВЫБРАТЬ *
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Ссылка";
	
	НовыйПараметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("Ссылка");
	НовыйПараметр.Значение = Ссылка;
	НовыйПараметр.Использование = Истина;
	
	НовыйПараметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	НовыйПараметр.Параметр = Новый ПараметрКомпоновкиДанных("ТекДатаСеанса");
	НовыйПараметр.Значение = ТекущаяДатаСеанса();
	НовыйПараметр.Использование = Истина;
	
	Настройки.Выбор.Элементы.Очистить();
	ЭлементВыбранныхПолей = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ЭлементВыбранныхПолей.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	Настройки.Структура.Очистить();
	НоваяСтруктура = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = НоваяСтруктура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , ТипГенератора);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	УстановитьПривилегированныйРежим(Истина);
	РезультатКомпоновки = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат РезультатКомпоновки.Количество() > 0
	
КонецФункции

// Процедура записывает, что нужно пересчитать срочность и важность задачи исполнителя
//
// Параметры:
//  Ссылка  - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ЗаписатьПризнакНеобходимостиПересчетаВажностиСрочностиЗадачи(Ссылка) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.CRM_ВажностьСрочностьЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задача = Ссылка;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Задача = Ссылка;
	КонецЕсли;
	Если Не МенеджерЗаписи.РучнаяУстановкаВажностиИСрочности Тогда
		МенеджерЗаписи.ТребуетсяПересчет = Истина;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
