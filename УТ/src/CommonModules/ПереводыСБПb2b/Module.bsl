///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b".
// ОбщийМодуль.ПереводыСБПb2b.
//
// Серверные процедуры выполнения оплаты, возвратов и настройки операций b2b СБП:
//  - создание, проверка статуса заказов на оплату;
//  - получение данных функциональных ссылок;
//  - определение идентификаторов операций и управление операциями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкиОпераций

// Определяет доступность использования функциональности выполнения операций
// на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, оплата в Системе быстрых платежей доступна.
//
Функция ПереводыСБПДоступны() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b)
		И СистемаБыстрыхПлатежейСлужебный.ЧтениеНастроекДоступно();
	
КонецФункции

// Определяет доступность использования функциональности чтения операций
// в на основании прав доступа пользователя.
//
// Возвращаемое значение:
//  Булево - если Истина, чтение операций доступно.
//
Функция ЧтениеПереводовСБПДоступно() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b)
		И СистемаБыстрыхПлатежейСлужебный.ЧтениеНастроекДоступно();
	
КонецФункции

#КонецОбласти

#Область СтатическиеСсылки

// Создает новый заказ на оплату и получает идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ТребуетсяОплата" - требуется оплата сервиса;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.СтатическаяСсылка";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"НастройкаПодключения",
		НастройкаПодключения,
		Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей"));
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатОперации.Вставить("ПлатежнаяСсылка", "");
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	СистемаБыстрыхПлатежейСлужебный.ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание новой статической ссылки.
	Возврат ПереводыСБПb2bСервис.СтатическаяСсылка(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ДинамическиеСсылки

// Создает новый заказ на оплату и получает
// идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ТребуетсяОплата" - требуется оплата сервиса;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДинамическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.ДинамическаяСсылка";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"НастройкаПодключения",
		НастройкаПодключения,
		Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей"));
	
	Результат = ПереводыСБПb2bСлужебный.СлужебныйДинамическаяСсылка(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры);
	
	Результат.Удалить("ПлатежнаяСсылкаСБП");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОперацииОплат

// Выполняет проверку статуса оплаты в Системе быстрых платежей по ранее
// сформированному идентификатору оплаты.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    устарело. Не используется. Настройка выполнения операции.
//  ДлительныйВызов - Булево - если Истина, получение статуса оплаты будет выполнятся
//   в цикле. Длительность выполнения операции определяется на основании
//   данных константы ДлительностьОперацииСистемыБыстрыхПлатежей.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * СтатусОперации - Строка - текущее состояние операции оплаты. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Выполняется" - подтверждение оплаты не получено;
//        - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//        - "Выполнена" - участник СБП подтвердил оплату;
//        - "Ошибка" - не удалось выполнить проверку оплаты из-за ошибки;
//    * ПараметрыОперации - Структура - дополнительные данные по оплате:
//        ** ДатаОперации - Дата, Неопределено - фактическая дата оплаты в UTC;
//        ** СуммаОперации - Число, Неопределено - фактическая суммы оплаты по документу;
//        ** ИдентификаторОперации - Строка, Неопределено - идентификатор выполненной операции;
//        ** ИдентификаторОплаты - Строка, Неопределено - идентификатор оплаты;
//        ** РасчетныйСчет - Строка - расчетный счет получателя платежа;
//        ** ИдентификаторПлатежа - Строка - уникальный Идентификатор Платежа, назначаемый Получателем;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - оплата успешно проведена;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к Системе быстрых платежей;
//        - "ТребуетсяОплата" - требуется оплата сервиса;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//        обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция СтатусОплаты(
		ДокументОперации,
		НастройкаПодключения,
		ДлительныйВызов = Истина) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.СтатусОплаты";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"НастройкаПодключения",
		НастройкаПодключения,
		Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей"));
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	РезультатОперации = ПереводыСБПb2bСлужебный.НовыйРезультатДлительнойОперации();
	СистемаБыстрыхПлатежейСлужебный.УдалитьСвойстваЧастичныхОплат(
		РезультатОперации);
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = ПереводыСБПb2bСлужебный.ПараметрыНастройкиПодключенияПоДокументу(
		ДокументОперации);
	
	// Проверка общих параметров подключения.
	СистемаБыстрыхПлатежейСлужебный.ПроверитьОбщиеНастройкиПодключения(
		ДокументОперации,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Проверка статуса оплаты по ранее сформированному QR-коду.
	РезультатОперации = ПереводыСБПb2bСервис.СтатусОплаты(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ДлительныйВызов);
	
	СистемаБыстрыхПлатежейСлужебный.УдалитьСвойстваЧастичныхОплат(
		РезультатОперации);
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти

#Область ДанныеСсылок

// Получает данные функциональной ссылки Системы быстрых платежей.
//
// Параметры:
//  ФункциональнаяСсылка - Строка - функциональная ссылка;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//
// Возвращаемое значение:
//  Структура - результат создания динамической ссылки в Системе быстрых платежей:
//    * ДанныеСсылки - Структура, Неопределено - данные функциональной ссылки:
//      ** ТипСсылки - Строка - тип Функциональной ссылки СБП. Допустимые варианты:
//          - "01" - статическая ссылка СБП для B2B;
//          - "02" - динамическая ссылка СБП для B2B;
//      ** СуммаОплаты - Число, Неопределено - сумма оплаты указанная получателем
//        платежа. Для статический ссылок поле может быть не заполнено;
//      ** Наименование - Строка - сокращенное наименование ЮЛ или ИП - получателя платежа;
//      ** ИНН - Строка - ИНН ЮЛ или ИП - получателя платежа;
//      ** СчетПолучателя - Строка - счет получателя платежа;
//      ** БИК - Строка - БИК банка, в котором открыт счет получателя платежа;
//      ** НаименованиеМагазина - Строка - торговое наименование магазина или торговой точки;
//      ** АдресМагазина - Строка - фактический адрес магазина или торговой точки;
//      ** ОблагаетсяНДС - Булево - Информация о взимании НДС. Если Истина - облагается НДС,
//         если Ложь - не облагается НДС.
//      ** СуммаНДС - Строка, Неопределено - сумма НДС, если поле ОблагаетсяНДС равно Ложь,
//         поле не заполняется. Если поле ОблагаетсяНДС равно Истина, при этом поле СуммаНДС не заполнено
//         при регистрации Платежной ссылки СБП B2B, то Плательщик при составлении распоряжения
//         на перевод по Операции СБП B2B должен указать сумму НДС по выполняемой Операции СБП для передачи
//         значения Банком;
//      ** НазначениеПлатежа - Строка - Назначение платежа. Дополнительная информация об оплате.
//         Если поле отсутствует, то Плательщик должен указать назначение платежа при составлении
//         распоряжения на перевод по Операции СБП B2B.
//      ** ИдентификаторОплаты - Строка - уникальный Идентификатор платежа.
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//        - <Пустая строка> - создание нового заказа выполнено успешно;
//        - "НеверныйФорматЗапроса" - передан некорректный запрос или настройка подключения;
//        - "УжеОплачен" - документ уже оплачен;
//        - "НеверныйЛогинИлиПароль" - неверный логин или пароль или параметры
//          подключения к участнику СБП;
//        - "ТребуетсяОплата" - требуется оплата сервиса;
//        - "ОтсутствуетДоступКСервису" - у пользователя нет доступа к сервису;
//        - "ПревышеноКоличествоПопыток" - превышено количество попыток
//          обращения к сервису с некорректным логином и паролем;
//        - "ОшибкаПодключения" - ошибка при подключении к сервису;
//        - "ОшибкаСервиса" - внутренняя ошибка сервиса;
//        - "НеизвестнаяОшибка" - при получении информации возникла
//          неизвестная (не обрабатываемая) ошибка;
//        - "СервисВременноНеДоступен" - на сервере ведутся регламентные работы;
//        - "ИнтеграцияНеИспользуется" - использование отключено в настройках;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ДанныеФункциональнойСсылки(
		ФункциональнаяСсылка,
		НастройкаПодключения) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.ДанныеФункциональнойСсылки";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ФункциональнаяСсылка",
		ФункциональнаяСсылка,
		Тип("Строка"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"НастройкаПодключения",
		НастройкаПодключения,
		Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей"));
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	РезультатОперации = ПереводыСБПb2bСлужебный.НовыйРезультатОперацииДанныеСсылки();
	
	// Подготовка параметров настройки подключения.
	ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
		НастройкаПодключения);
	
	// Проверка общих параметров подключения.
	СистемаБыстрыхПлатежейСлужебный.ПроверитьОбщиеНастройкиПодключенияБезДокументаОперации(
		НастройкаПодключения,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФункциональнаяСсылка) Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Не заполнена функциональная ссылка.'");
		РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат ПереводыСБПb2bСервис.ДанныеФункциональнойСсылки(
		ФункциональнаяСсылка,
		ПараметрыНастройкиПодключения);
	
КонецФункции

#КонецОбласти

#Область ДополнительныеМетоды

// Формирует коллекцию, содержащую платежные ссылки по переданным документам операций.
//
// Параметры:
//  ДокументыОпераций - Массив Из ОпределяемыйТип.ДокументОперацииСБП - документы, которые отражают
//    оплату в информационной базе.
//  СтатусыОпераций - Массив Из Строка - допустимые статусы операций (фильтруют возвращаемую коллекцию),
//    Список статусов:
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена - операция успешно выполнена.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется - операция выполняется.
//      см. СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена - операция отклонена.
//
// Возвращаемое значение:
//  Соответствие - данные платежных ссылок по документам операций:
//    * Ключ - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//      оплату в информационной базе.
//    * Значение - Строка - платежная ссылка по документу операции.
//
Функция ПлатежныеСсылкиПоДокументамОпераций(
		ДокументыОпераций,
		СтатусыОпераций) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.ПлатежныеСсылкиПоДокументамОпераций";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументыОпераций",
		ДокументыОпераций,
		Тип("Массив"));
		
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ПлатежныеСсылкиПоДокументамОпераций(
		ДокументыОпераций,
		СтатусыОпераций,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
	
КонецФункции

// Удаляет идентификатор операции из информационной базы.
// Процедуру необходимо использовать только в том случае, если при вызове
// методов оплаты в качестве документа оплаты была передана ссылка нового
// и после выполнения оплаты объект не был записан. Во всех остальных случаях
// вызов метода не рекомендуется.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе.
//
Процедура УдалитьИдентификаторыОперации(ДокументОперации) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.УдалитьИдентификаторыОперации";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	Набор = РегистрыСведений.ИдентификаторыОперацийСБПb2b.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
	Набор.Заполнить(Неопределено);
	Набор.Записать();
	
КонецПроцедуры

// Выполняет установку признака загрузки статуса регламентным заданием, если
// ранее под документу была сгенерирован идентификатор оплаты СБП. Установка
// признака доступна только для сформированных операций у которых текущий статус
// "Выполняется".
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен,
//   Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументОперации, Значение) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.УстановитьОтложенноеПолучениеСтатуса";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	Возврат СистемаБыстрыхПлатежейСлужебный.УстановитьОтложенноеПолучениеСтатуса(
		ДокументОперации,
		Значение,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя)
	
КонецФункции

// Возвращает данные оплат по документу основанию платежа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции;
//
// Возвращаемое значение:
//  Структура - данные оплат по документу в Системе быстрых платежей:
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ,
//      который отражает продажу в информационной базе;
//    * Сумма - Число - сумма выполненных оплат по документу;
//    * ДанныеОпераций - Массив Из Структура - содержит перечень данных оплат по документу основанию:
//        ** ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ операции в СБП
//        ** СуммаОперации - Число - Сумма оплаты в СБП
//        ** СтатусОперации - Строка - текущее состояние операции оплаты. Возможные значения:
//           - "Выполняется" - подтверждение оплаты не получено;
//           - "Отменена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Выполнена" - участник СБП подтвердил оплату;
//           - "Отклонена" - оплата по ранее сформированному QR-коду невозможна;
//           - "Ошибка" - неизвестный статус операции.
//        ** ДатаОперации - Дата - фактическая дата оплаты в UTC;
//        ** ИдентификаторОперации - Строка - идентификатор выполненной операции;
//        ** ИдентификаторОплаты - Строка - идентификатор оплаты;
//        ** Оплата - Булево - если Истина, была выполнена оплата.
//
Функция ОперацииПоДокументу(ДокументОперации) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.ОперацииПоДокументу";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ОперацииПоДокументу(
		ДокументОперации,
		Перечисления.ВариантыНастройкиСБП.b2b);
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыОпераций

// Определяет идентификатор функциональной ссылки.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе.
//
// Возвращаемое значение: 
//  Строка - идентификатор функциональной ссылки.
//
Функция ИдентификаторФункциональнойСсылки(ДокументОперации) Экспорт
	
	// Проверка входных параметров
	ИмяФункции = "ПереводыСБПb2b.ИдентификаторФункциональнойСсылки";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		ИмяФункции,
		"ДокументОперации",
		ДокументОперации,
		Метаданные.ОпределяемыеТипы.ДокументОперацииСБП.Тип);
	
	ПереводыСБПb2bСлужебный.ПроверитьПраваНаВыполнениеОперации();
	
	ИдентификаторыОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторыОперацииСБП(
		ДокументОперации,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
	
	Если ИдентификаторыОплаты = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Идентификатор оплаты не обнаружен.'");
	КонецЕсли;
	
	Возврат ИдентификаторыОплаты.ИдентификаторОплаты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

