// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область МаркерыАвторизации

// Параметры:
//  МаркерыАвторизации - Массив из См. НовыйМаркерАвторизацииВФорматеСервиса
// 
// Возвращаемое значение:
//  См. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
Функция ЗашифрованныеМаркерыИзМаркеровАвторизации(МаркерыАвторизации) Экспорт
	
	ЗашифрованныеМаркеры = КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки();
	
	Для Каждого МаркерАвторизации Из МаркерыАвторизации Цикл
		ИдентификаторУчетнойЗаписиЭДО = МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО;
		ДанныеПоСертификатам = ЗашифрованныеМаркеры[ИдентификаторУчетнойЗаписиЭДО];
		Если ДанныеПоСертификатам = Неопределено Тогда
			ДанныеПоСертификатам = Новый Массив;
			ЗашифрованныеМаркеры.Вставить(ИдентификаторУчетнойЗаписиЭДО, ДанныеПоСертификатам);
		КонецЕсли;
		ДанныеРасшифровки = КриптографияБЭДКлиентСервер.НовыеДанныеРасшифровки();
		ДанныеРасшифровки.Сертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(МаркерАвторизации.ОтпечатокСертификата);
		ДанныеРасшифровки.Данные = Base64Значение(МаркерАвторизации.Данные);
		ДанныеПоСертификатам.Добавить(ДанныеРасшифровки);
	КонецЦикла;
	
	Возврат ЗашифрованныеМаркеры;
	
КонецФункции

// Параметры:
//  РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
// 
// Возвращаемое значение:
//  Массив из см. НовыйМаркерАвторизацииВФорматеСервиса
Функция МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры) Экспорт
	
	МаркерыАвторизации = Новый Массив; // см. МаркерыАвторизацииИзРасшифрованныхМаркеров
	
	Если Не ЗначениеЗаполнено(РасшифрованныеМаркеры) Тогда
		Возврат МаркерыАвторизации;
	КонецЕсли;
	
	Сертификаты = Новый Массив; // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
	Для Каждого РасшифрованныйМаркер Из РасшифрованныеМаркеры Цикл
		Сертификат = РасшифрованныйМаркер.Значение.Сертификат;
		Если Сертификаты.Найти(Сертификат) = Неопределено Тогда
			Сертификаты.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;
	
	ОтпечаткиПоСертификатам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сертификаты, "Отпечаток");
	
	Для Каждого РасшифрованныйМаркер Из РасшифрованныеМаркеры Цикл
		ДанныеРасшифровки = РасшифрованныйМаркер.Значение;
		
		МаркерАвторизации = НовыйМаркерАвторизацииВФорматеСервиса();
		МаркерАвторизации.ИдентификаторУчетнойЗаписиЭДО = РасшифрованныйМаркер.Ключ;
		МаркерАвторизации.ОтпечатокСертификата = ОтпечаткиПоСертификатам[ДанныеРасшифровки.Сертификат];
		МаркерАвторизации.Данные = Base64Строка(ДанныеРасшифровки.Данные);
		МаркерыАвторизации.Добавить(МаркерАвторизации);
	КонецЦикла;
	
	Возврат МаркерыАвторизации;
	
КонецФункции

// Параметры:
//  ОтпечаткиСертификатов - Массив из Строка
//  ИдентификаторыУчетныхЗаписейЭДО - Неопределено
//                                  - Массив из Строка
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО(ОтпечаткиСертификатов, ИдентификаторыУчетныхЗаписейЭДО = Неопределено) Экспорт
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО",
		ОтпечаткиСертификатов, ИдентификаторыУчетныхЗаписейЭДО);
КонецФункции

#КонецОбласти

#Область АвторизацияВСервисеЭДО

// Возвращаемое значение:
//  Структура:
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатАвторизацииВСервисеЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки());
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИдентификаторыУчетныхЗаписейЭДО - Массив из Строка
//  ОтпечаткиПоКонтекстам - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  См. НовыйРезультатАвторизацииВСервисеЭДО
Функция АвторизоватьсяВСервисеЭДО(ИдентификаторыУчетныхЗаписейЭДО, ОтпечаткиПоКонтекстам,
	ВыбранныйСертификат = Неопределено) Экспорт
	
	Результат = НовыйРезультатАвторизацииВСервисеЭДО();
	
	ВидОперации = НСтр("ru = 'Авторизация в сервисе ЭДО'");
	ОтпечаткиПоКонтекстам = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации, Неопределено,
		ОтпечаткиПоКонтекстам);
	
	Если ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
		Отпечаток = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйСертификат, "Отпечаток"); // Строка
		Отпечатки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отпечаток); // Массив из Строка
		ОтпечаткиПоУчетнымЗаписямЭДО = Новый Соответствие;
		Для Каждого ИдентификаторЭДО Из ИдентификаторыУчетныхЗаписейЭДО Цикл
			ОтпечаткиПоУчетнымЗаписямЭДО.Вставить(ИдентификаторЭДО, Отпечатки);
		КонецЦикла;
	Иначе
		ОтпечаткиПоУчетнымЗаписямЭДО = УчетныеЗаписиЭДО.ОтпечаткиДействующихСертификатовПоУчетнымЗаписям(
			ОтпечаткиПоКонтекстам, ИдентификаторыУчетныхЗаписейЭДО);
	КонецЕсли;
	
	УчетныеЗаписиСервиса = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиПоИдентификаторамЭДО(
		ИдентификаторыУчетныхЗаписейЭДО);
	
	Для Каждого УчетнаяЗапись Из УчетныеЗаписиСервиса Цикл
		
		Отпечатки = Новый Массив; // Массив из Строка
		ОтпечаткиУчетнойЗаписиЭДО = ОтпечаткиПоУчетнымЗаписямЭДО[УчетнаяЗапись.Ключ];
		Если ЗначениеЗаполнено(ОтпечаткиУчетнойЗаписиЭДО) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отпечатки, ОтпечаткиУчетнойЗаписиЭДО);
		КонецЕсли;
		
		ИдентификаторыЭДО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УчетнаяЗапись.Ключ);
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗапись.Значение, Пользователи.ТекущийПользователь());
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО", Отпечатки, ИдентификаторыЭДО);
		
		РезультатПолучения = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
			Результат.КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПолучитьМаркерыАвторизацииПоУчетнымЗаписямЭДО
		
		Если ЗначениеЗаполнено(РезультатПолучения.Ошибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатПолучения, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // АвторизацияВСервисеЭДО

#Область Регистрация

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьУчетныеЗаписиЭДО() Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	УчетныеЗаписиОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетныеЗаписиОблачногоЭДО();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса("СписокУчетныхЗаписейЭДО");
	
	Для Каждого УчетнаяЗаписьОблачногоЭДО Из УчетныеЗаписиОблачногоЭДО Цикл
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		РезультатСервиса = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
			ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СписокУчетныхЗаписейЭДО
		
		Если Не ЗначениеЗаполнено(РезультатСервиса) Тогда
			Продолжить;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат КонтекстДиагностики;
	
КонецФункции

// Параметры:
//  ПараметрыДанных - см. УчетныеЗаписиЭДО.НовыеПараметрыДанныхПоИдентификаторамДляРегистрацииВЭДО
// 
// Возвращаемое значение:
//  См. УчетныеЗаписиЭДО.НовыеДанныеПоИдентификаторамДляРегистрацииВЭДО
Функция ДанныеПоИдентификаторамДляРегистрацииВЭДО(ПараметрыДанных) Экспорт
	
	Результат = УчетныеЗаписиЭДО.НовыеДанныеПоИдентификаторамДляРегистрацииВЭДО();
	
	Организация = ПараметрыДанных.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	Если ПараметрыДанных.ЗаполнятьИдентификаторыОрганизации Тогда
		КлючевыеРеквизитыОрганизации = ИнтеграцияЭДО.КлючевыеРеквизитыОрганизации(Организация);
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ИдентификаторыУчетныхЗаписейЭДОВСервисе1СЭДО", КлючевыеРеквизитыОрганизации);
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	КонецЕсли;
	
	Если ПараметрыДанных.ЗаполнятьОператоровЭДО Тогда
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"ОператорыДляРегистрацииВЭДО");
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	КонецЕсли;
	
	Попытка
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			ПараметрыДанных.УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	Исключение
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(
			ПараметрыДанных.УчетнаяЗаписьОблачногоЭДО);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ДополнительныеПараметрыОшибки = Новый Структура("СсылкаНаОбъект",
			ПараметрыДанных.УчетнаяЗаписьОблачногоЭДО);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки,
			ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		Возврат Результат;
	КонецПопытки;
	
	РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
		Результат.КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатыПакета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыДанных.ЗаполнятьИдентификаторыОрганизации Тогда
		ИдентификаторыОрганизацииВФорматеСервиса = РезультатыПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ИдентификаторыУчетныхЗаписейЭДОВСервисе1СЭДО
		Результат.ИдентификаторыОрганизации = ИдентификаторыОрганизацииИзФорматаСервиса(
			ИдентификаторыОрганизацииВФорматеСервиса);
	КонецЕсли;
	
	Если ПараметрыДанных.ЗаполнятьОператоровЭДО Тогда
		ОператорыВФорматеСервиса = РезультатыПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ОператорыДляРегистрацииВЭДО
		Результат.ОператорыЭДО = ОператорыДляРегистрацииВЭДОИзФорматаСервиса(ОператорыВФорматеСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * СертификатыДляВыбора - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ДанныеСоглашения - Неопределено,ДвоичныеДанные
//  * ДанныеДляРегистрации - Неопределено,ДвоичныеДанные
Функция НовыеДанныеДляПодписанияНаРегистрациюВЭДО() Экспорт
	ДанныеДляПодписания = Новый Структура;
	ДанныеДляПодписания.Вставить("СертификатыДляВыбора", Новый Массив);
	ДанныеДляПодписания.Вставить("ДанныеСоглашения", Неопределено);
	ДанныеДляПодписания.Вставить("ДанныеДляРегистрации", Неопределено);
	Возврат ДанныеДляПодписания;
КонецФункции

// Параметры:
//  ПараметрыРегистрации - см. УчетныеЗаписиЭДОИнтеграцияОблакаКлиент.НовыеПараметрыРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * ИдентификаторЗаявки - Строка
//  * СертификатыУжеЗарегистрированы - Булево
//  * ДанныеДляПодписания - Неопределено - заявка на регистрацию не сформирована.
//                        - См. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО(ПараметрыРегистрации) Экспорт
	
	РезультатПодготовкиДанных = Новый Структура;
	РезультатПодготовкиДанных.Вставить("ИдентификаторЗаявки", "");
	РезультатПодготовкиДанных.Вставить("СертификатыУжеЗарегистрированы", Ложь);
	РезультатПодготовкиДанных.Вставить("ДанныеДляПодписания", Неопределено);
	РезультатПодготовкиДанных.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	КонтекстДиагностики = РезультатПодготовкиДанных.КонтекстДиагностики;
	
	ДанныеОрганизации = ДанныеОрганизацииДляРегистрацииВЭДО(ПараметрыРегистрации.Организация);
	ДанныеЗаявки = ДанныеЗаявкиНаРегистрациюВЭДО(ПараметрыРегистрации);
	РезультатПодготовкиДанных.ИдентификаторЗаявки = ДанныеЗаявки.Идентификатор;
	
	Попытка
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			ПараметрыРегистрации.УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	Исключение
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ВидОшибки = ИнтеграцияОблачногоЭДО.ВидОшибкиОтсутствуютДанныеАвторизации(
			ПараметрыРегистрации.УчетнаяЗаписьОблачногоЭДО);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ДополнительныеПараметрыОшибки = Новый Структура("СсылкаНаОбъект",
			ПараметрыРегистрации.УчетнаяЗаписьОблачногоЭДО);
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки,
			ДополнительныеПараметрыОшибки);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		Возврат РезультатПодготовкиДанных;
	КонецПопытки;
	
	ОписаниеМетодаСформироватьЗаявку = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"СформироватьЗаявкуНаРегистрациюВЭДО", ДанныеОрганизации, ДанныеЗаявки);
	
	РезультатФормированияЗаявки = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения,
		ОписаниеМетодаСформироватьЗаявку, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СформироватьЗаявкуНаРегистрациюВЭДО
	
	Если Не ЗначениеЗаполнено(РезультатФормированияЗаявки) Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	СертификатыБезДоверенностей = СертификатыДляРегистрацииБезДоверенностей(РезультатФормированияЗаявки);
	
	Если ЗначениеЗаполнено(СертификатыБезДоверенностей) Тогда
		Для Каждого СертификатБезДоверенности Из СертификатыБезДоверенностей Цикл
			ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
			ВидОшибки = ВидОшибкиОтсутствуетДоверенностьСертификатаДляРегистрацииВЭДО();
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не указана доверенность при регистрации сертификата %1 в ЭДО.'"),
				СертификатБезДоверенности);
			ДополнительныеПараметрыОшибки = Новый Структура("Сертификат, СсылкаНаОбъект",
				СертификатБезДоверенности, ПараметрыРегистрации.УчетнаяЗаписьОблачногоЭДО);
			Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки,
				ДополнительныеПараметрыОшибки);
			ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		КонецЦикла;
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	Если Не ЗаявкаНаРегистрациюВЭДОСформирована(РезультатФормированияЗаявки, РезультатПодготовкиДанных) Тогда
		
		Если РезультатФормированияЗаявки.Ошибка.СертификатыУжеЗарегистрированы Тогда
			УчетныеЗаписиЭДО.ЗаписатьСертификатыУчетнойЗаписи(ПараметрыРегистрации.ИдентификаторОрганизации,
				ПараметрыРегистрации.СертификатыДляРегистрации);
		КонецЕсли;
		
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;

	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО", ДанныеЗаявки.Идентификатор);
	
	РезультатПодготовкиДанныхВФорматеСервиса = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(
		ПараметрыВыполнения, ОписаниеМетода, КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанныхВФорматеСервиса) Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных.ДанныеДляПодписания = ДанныеДляПодписанияНаРегистрациюВЭДО(
		РезультатПодготовкиДанныхВФорматеСервиса, ПараметрыРегистрации.СертификатыДляПодписания, КонтекстДиагностики);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ИдентификаторЗаявки - Строка
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Структура:
//  * ДанныеДляПодписания - Неопределено
//                        - См. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ЗаполнитьДанныеДляПодписанияНаРегистрациюВЭДОПоСертификату(УчетнаяЗаписьОблачногоЭДО, ИдентификаторЗаявки, Сертификат) Экспорт
	
	РезультатЗаполненияДанных = Новый Структура;
	РезультатЗаполненияДанных.Вставить("ДанныеДляПодписания", Неопределено);
	РезультатЗаполненияДанных.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	КонтекстДиагностики = РезультатЗаполненияДанных.КонтекстДиагностики;
	ОтпечатокСертификата = КриптографияБЭД.ОтпечатокСертификата(Сертификат);
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО", ИдентификаторЗаявки, ОтпечатокСертификата);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО", ИдентификаторЗаявки);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатыПакета) Тогда
		Возврат РезультатЗаполненияДанных;
	КонецЕсли;
	
	РезультатЗаполненияПодписанта = РезультатыПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО
	
	Если Не ЗначениеЗаполнено(РезультатЗаполненияПодписанта) Тогда
		Возврат РезультатЗаполненияДанных;
	ИначеЕсли ЗначениеЗаполнено(РезультатЗаполненияПодписанта.Ошибка) Тогда
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
			РезультатЗаполненияПодписанта.Ошибка);
		Возврат РезультатЗаполненияДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных = РезультатыПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных) Тогда
		Возврат РезультатЗаполненияДанных;
	КонецЕсли;
	
	РезультатЗаполненияДанных.ДанныеДляПодписания = ДанныеДляПодписанияНаРегистрациюВЭДО(РезультатПодготовкиДанных,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат), КонтекстДиагностики);
	
	Возврат РезультатЗаполненияДанных;
	
КонецФункции

// Параметры:
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  ИдентификаторЗаявки - Строка
//  Подписи - Структура:
//  * ПодписьСоглашения - ДвоичныеДанные
//  * ПодписьДанныхДляРегистрации - ДвоичныеДанные
//  * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОтправитьРегистрационныйПакетЭДО(УчетнаяЗаписьОблачногоЭДО, ИдентификаторЗаявки, Подписи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ПакетМетодов = ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса();
	
	ПодписиЗаявки = НовыеПодписиЗаявкиНаРегистрациюВЭДО();
	ПодписиЗаявки.Идентификатор = ИдентификаторЗаявки;
	ПодписиЗаявки.ПодписьСоглашения = Base64Строка(Подписи.ПодписьСоглашения);
	ПодписиЗаявки.ПодписьДанныхДляРегистрации = Base64Строка(Подписи.ПодписьДанныхДляРегистрации);
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДобавитьПодписиЗаявкиНаРегистрациюВЭДО", ПодписиЗаявки);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОтправитьЗаявкуНаРегистрациюВЭДО", ИдентификаторЗаявки);
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода);
	
	РезультатыПакета = ИнтеграцияОблачногоЭДО.ВыполнитьПакетМетодовСервиса(ПараметрыВыполнения, ПакетМетодов,
		КонтекстДиагностики);
	
	Если Не ЗначениеЗаполнено(РезультатыПакета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	
	РезультатДобавленияПодписей = РезультатыПакета[0]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДобавитьПодписиЗаявкиНаРегистрациюВЭДО
	
	Если Не МетодВыполненУспешно(РезультатДобавленияПодписей, КонтекстДиагностики) Тогда
		Результат.Успех = Ложь;
	КонецЕсли;
	
	РезультатОтправки = РезультатыПакета[1]; // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ОтправитьЗаявкуНаРегистрациюВЭДО
	
	Если Не МетодВыполненУспешно(РезультатОтправки, КонтекстДиагностики) Тогда
		Результат.Успех = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЗаявкиДляПроверки - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - Массив из Строка - идентификаторы заявок на регистрацию в ЭДО.
// 
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиРегистрационныхПакетовЭДО
Функция ПроверитьОбработкуРегистрационныхПакетовЭДО(ЗаявкиДляПроверки) Экспорт
	
	Результат = НовыйРезультатОбработкиРегистрационныхПакетовЭДО();
	
	КонтекстДиагностики = Результат.КонтекстДиагностики;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого УчетнаяЗаписьИЗаявки Из ЗаявкиДляПроверки Цикл
		
		УчетнаяЗаписьОблачногоЭДО = УчетнаяЗаписьИЗаявки.Ключ;
		ИдентификаторыЗаявок = УчетнаяЗаписьИЗаявки.Значение;
		
		ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
			УчетнаяЗаписьОблачногоЭДО, ТекущийПользователь);
		
		ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
			"СостоянияРегистрацииЗаявокВЭДО", ИдентификаторыЗаявок);
		
		СостоянияРегистрации = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
			КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СостоянияРегистрацииЗаявокВЭДО
		
		ЗаполнитьРезультатОбработкиПоСостояниямРегистрацииВЭДО(Результат, СостоянияРегистрации,
			УчетнаяЗаписьОблачногоЭДО);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
// 
// Возвращаемое значение:
//  Структура - Информация об учетной записи:
// * ИдентификаторЭДО - Строка - 
// * Наименование - Строка - 
// * Назначение - Строка - 
// * ПодробноеОписание - Строка - 
Функция ИнформацияОбУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО = "") Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЭДО", ИдентификаторУчетнойЗаписиЭДО);
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Назначение", "");
	Результат.Вставить("ПодробноеОписание", "");
	Если ЗначениеЗаполнено(ИдентификаторУчетнойЗаписиЭДО) Тогда
		ИнформацияОбУчетнойЗаписи = УчетныеЗаписиЭДО.ИнформацияОбУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
		ЗаполнитьЗначенияСвойств(Результат, ИнформацияОбУчетнойЗаписи);
	КонецЕсли;
	Возврат Результат; 
КонецФункции

// Параметры:
//  ИнформацияОбУчетнойЗаписиЭДО - см. ИнформацияОбУчетнойЗаписи
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьИнформациюОбУчетнойЗаписиЭДО(ИнформацияОбУчетнойЗаписиЭДО) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	ИдентификаторУчетнойЗаписиЭДО = ИнформацияОбУчетнойЗаписиЭДО.ИдентификаторЭДО;
	Если ПустаяСтрока(ИнформацияОбУчетнойЗаписиЭДО.Наименование) Тогда
		ИнформацияОбУчетнойЗаписиЭДО = ИнформацияОбУчетнойЗаписи(ИдентификаторУчетнойЗаписиЭДО);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИнформацияОбУчетнойЗаписиЭДО) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена учетная запись ЭДО с идентификатором %1'"),
			ИдентификаторУчетнойЗаписиЭДО);
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		ИдентификаторУчетнойЗаписиЭДО);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена учетная запись облачного ЭДО по идентификатору ЭДО %1'"),
			ИдентификаторУчетнойЗаписиЭДО);
		ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОбновитьИнформациюОбУчетнойЗаписиЭДО", ИнформацияОбУчетнойЗаписиЭДО);
	
	РезультатОбновления = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
		КонтекстДиагностики); // См. УчетныеЗаписиЭДОВОблаке.ОбновитьИнформациюОбУчетнойЗаписиЭДО
	
	Если МетодВыполненУспешно(РезультатОбновления, КонтекстДиагностики) Тогда
		Результат.Успех = Истина;
	КонецЕсли;
	
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  ПараметрыУведомлений - См. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  РасшифрованныеМаркеры - См. МаркерыАвторизацииИзРасшифрованныхМаркеров.РасшифрованныеМаркеры
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, ПараметрыУведомлений, РасшифрованныеМаркеры) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
	Если Не ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики,
			НСтр("ru = 'Не указан маркер для авторизации в сервисе ЭДО'"));
		Возврат Результат;
	КонецЕсли;
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		ИдентификаторУчетнойЗаписиЭДО);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена учетная запись облачного ЭДО по идентификатору ЭДО %1'"),
			ИдентификаторУчетнойЗаписиЭДО);
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО",
		ИдентификаторУчетнойЗаписиЭДО, ПараметрыУведомлений, МаркерыАвторизации[0]);
	
	РезультатОбновления = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
		КонтекстДиагностики); // См. УчетныеЗаписиЭДОВОблаке.ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО
	
	Если МетодВыполненУспешно(РезультатОбновления, КонтекстДиагностики) Тогда
		Результат.Успех = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  РасшифрованныеМаркеры - См. МаркерыАвторизацииИзРасшифрованныхМаркеров.РасшифрованныеМаркеры
// 
// Возвращаемое значение:
//  Структура:
//  * ПараметрыУведомлений - Неопределено
//                         - См. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НастройкиУведомленийУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, РасшифрованныеМаркеры) Экспорт
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыУведомлений", Неопределено);
	Результат.Вставить("КонтекстДиагностики", КонтекстДиагностики);
	
	МаркерыАвторизации = МаркерыАвторизацииИзРасшифрованныхМаркеров(РасшифрованныеМаркеры);
	Если Не ЗначениеЗаполнено(МаркерыАвторизации) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики,
			НСтр("ru = 'Не указан маркер для авторизации в сервисе ЭДО'"));
		Возврат Результат;
	КонецЕсли;
	
	УчетнаяЗаписьОблачногоЭДО = РегистрыСведений.НастройкиОблачногоЭДО.УчетнаяЗаписьОблачногоЭДО(
		ИдентификаторУчетнойЗаписиЭДО);
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьОблачногоЭДО) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена учетная запись облачного ЭДО по идентификатору ЭДО %1'"),
			ИдентификаторУчетнойЗаписиЭДО);
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыВыполнения = ИнтеграцияОблачногоЭДОПовтИсп.ПараметрыВыполненияМетодаСервиса(
		УчетнаяЗаписьОблачногоЭДО, Пользователи.ТекущийПользователь());
	
	ОписаниеМетода = ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"НастройкиУведомленийУчетнойЗаписиЭДО", ИдентификаторУчетнойЗаписиЭДО, МаркерыАвторизации[0]);
	
	РезультатПолучения = ИнтеграцияОблачногоЭДО.ВыполнитьМетодСервиса(ПараметрыВыполнения, ОписаниеМетода,
		КонтекстДиагностики); // См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.НастройкиУведомленийУчетнойЗаписиЭДО
	
	Если Не ЗначениеЗаполнено(РезультатПолучения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПараметрыУведомлений = РезультатПолучения.Настройки;
	
	Если ЗначениеЗаполнено(РезультатПолучения.Ошибка) Тогда
		ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, РезультатПолучения.Ошибка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Получение

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаДанныеУчетныхЗаписейЭДОСОшибками(ПакетМетодов, ПараметрыОперации) Экспорт
	
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.УчетныеЗаписиЭДО;
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		ТипДанных];
	Если МеткиВремениПоИдентификаторамЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЭДО = ОбщегоНазначения.ВыгрузитьКолонку(МеткиВремениПоИдентификаторамЭДО, "ИдентификаторЭДО");
	ИдентификаторыЭДОСОшибками = РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ОбъектыСОшибками(
		ТипДанных, ИдентификаторыЭДО);
		
	Если ЗначениеЗаполнено(ИдентификаторыЭДОСОшибками) Тогда
		ОписаниеМетода = ОписаниеМетодаДанныеУчетныхЗаписейЭДО(ИдентификаторыЭДОСОшибками);
		ИдентификаторМетода = ИдентификаторМетодаДанныеУчетныхЗаписейЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПакетМетодов - См. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
//  ПараметрыОперации - См. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыеПараметрыОперацииПоДействиямЭДО
Процедура ДобавитьОписаниеМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(ПакетМетодов, ПараметрыОперации) Экспорт
	МеткиВремениПоИдентификаторамЭДО = ПараметрыОперации.ОбъектыОперации.МеткиВремениТиповСинхронизации[
		Перечисления.ТипыСинхронизацииОблачногоЭДО.УчетныеЗаписиЭДО];
	Если ЗначениеЗаполнено(МеткиВремениПоИдентификаторамЭДО) Тогда
		ОписаниеМетода = ОписаниеМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(МеткиВремениПоИдентификаторамЭДО);
		ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени();
		ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодов, ОписаниеМетода, ИдентификаторМетода);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ИдентификаторМетода - Строка
//  РезультатМетода - Структура,Массив из Структура
//  РезультатДействий - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПоДействиямЭДО(ИдентификаторМетода, РезультатМетода,
	РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно) Экспорт
	
	Если ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени() Тогда
		
		ОбработатьРезультатМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(
			РезультатМетода, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно);
		
	ИначеЕсли ИдентификаторМетода = ИдентификаторМетодаДанныеУчетныхЗаписейЭДО() Тогда
		
		ОбработатьРезультатМетодаДанныеУчетныхЗаписейЭДО(РезультатМетода, РезультатДействий, КонтекстДиагностики);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиОтключенаНастройкаИспользоватьОблачныйЭДО(ИдентификаторУчетнойЗаписи) Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОтключенаНастройкаИспользоватьОблачныйЭДО";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отключена настройка ""Использовать облачный ЭДО""'");
	ВидОшибки.ОписаниеПроблемы = ТекстОшибкиОтключенаНастройкаИспользоватьОблачныйЭДО(ИдентификаторУчетнойЗаписи);
	ВидОшибки.ОписаниеРешения = 
		НСтр("ru = 'Включить настройку ""Использовать облачный ЭДО"" и повторить операцию.'");
	Возврат ВидОшибки;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ТекстОшибкиОтключенаНастройкаИспользоватьОблачныйЭДО(ИдентификаторУчетнойЗаписи) Экспорт
	
	Возврат СтрШаблон(
		НСтр("ru = 'Учетная запись ""%1"" создана в Облачном ЭДО и не может быть использована с отключенной настройкой ""Использовать облачный ЭДО""'"),
		ИдентификаторУчетнойЗаписи);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МаркерыАвторизации

// Возвращаемое значение:
//  Структура - Новые данные сервиса для расшифровки:
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ОтпечатокСертификата - Строка
//  * Данные - Строка - двоичные данные в формате base64.
Функция НовыйМаркерАвторизацииВФорматеСервиса()
	ЗашифрованныйМаркер = Новый Структура;
	ЗашифрованныйМаркер.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	ЗашифрованныйМаркер.Вставить("ОтпечатокСертификата", "");
	ЗашифрованныйМаркер.Вставить("Данные", "");
	Возврат ЗашифрованныйМаркер;
КонецФункции

#КонецОбласти

#Область АвторизацияВСервисеЭДО

// Параметры:
//  РезультатПолучения - см. АвторизоватьсяВСервисеЭДО
//  РезультатДействий - Структура:
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаПолученияМаркеровАвторизации(РезультатПолучения, РезультатДействий)
	
	Если Не ЗначениеЗаполнено(РезультатПолучения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗашифрованныеМаркеры = ЗашифрованныеМаркерыИзМаркеровАвторизации(РезультатПолучения.ЗашифрованныеМаркеры);
	
	Если ЗначениеЗаполнено(РезультатДействий.ЗашифрованныеМаркеры) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РезультатДействий.ЗашифрованныеМаркеры,
			ЗашифрованныеМаркеры, Истина);
	Иначе
		РезультатДействий.ЗашифрованныеМаркеры = ЗашифрованныеМаркеры;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // АвторизацияВСервисеЭДО

#Область Регистрация

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ОператорЭДО - Строка
//  * ИдентификаторЭДО - Строка
//  * АдресОрганизации - Строка
//  * КодНалоговогоОргана - Строка
//  * ЭлектроннаяПочта - Строка
//  * СертификатыДляРегистрации - Массив из Строка
//  * ДоверенностиСертификатов - Массив из см. НовыеДанныеДоверенностиСертификата
Функция НовыеДанныеЗаявкиНаРегистрациюВЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("ОператорЭДО", "");
	Данные.Вставить("ИдентификаторЭДО", "");
	Данные.Вставить("АдресОрганизации", "");
	Данные.Вставить("КодНалоговогоОргана", "");
	Данные.Вставить("ЭлектроннаяПочта", "");
	Данные.Вставить("СертификатыДляРегистрации", Новый Массив);
	Данные.Вставить("ДоверенностиСертификатов", Новый Массив);
	Возврат Данные;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОтпечатокСертификата - Строка
//  * ДанныеДоверенности - Неопределено
//                         - См. МашиночитаемыеДоверенностиИнтеграцияОблака.ДанныеДоверенностиВФорматеСервиса
Функция НовыеДанныеДоверенностиСертификата()
	Описание = Новый Структура;
	Описание.Вставить("ОтпечатокСертификата", "");
	Описание.Вставить("ДанныеДоверенности", Неопределено);
	Возврат Описание;
КонецФункции

// Параметры:
//  ПараметрыРегистрации - см. ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО.ПараметрыРегистрации
// 
// Возвращаемое значение:
//  См. НовыеДанныеЗаявкиНаРегистрациюВЭДО
Функция ДанныеЗаявкиНаРегистрациюВЭДО(ПараметрыРегистрации)
	
	ДанныеЗаявки = НовыеДанныеЗаявкиНаРегистрациюВЭДО();
	ДанныеЗаявки.Идентификатор = РаботаСФайламиБЭД.НовыйUUID();
	ДанныеЗаявки.ОператорЭДО = ПараметрыРегистрации.ОператорЭДО;
	ДанныеЗаявки.ИдентификаторЭДО = ПараметрыРегистрации.ИдентификаторОрганизации;
	ДанныеЗаявки.КодНалоговогоОргана = ПараметрыРегистрации.КодНалоговогоОргана;
	ДанныеЗаявки.ЭлектроннаяПочта = ПараметрыРегистрации.ЭлектроннаяПочта;
	ДанныеЗаявки.АдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		ПараметрыРегистрации.АдресОрганизации);
	
	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(ПараметрыРегистрации.СертификатыДляРегистрации);
	Для Каждого СвойстваСертификата Из СвойстваСертификатов Цикл
		ДанныеСертификата = СвойстваСертификата.Значение.ДанныеСертификата; // ДвоичныеДанные
		ДанныеСертификатаСтрокой = Base64Строка(ДанныеСертификата);
		ДанныеЗаявки.СертификатыДляРегистрации.Добавить(ДанныеСертификатаСтрокой);
	КонецЦикла;
	
	Для Каждого ДоверенностьСертификата Из ПараметрыРегистрации.Доверенности Цикл
		Сертификат = ДоверенностьСертификата.Ключ;
		Доверенность = ДоверенностьСертификата.Значение;
		СвойстваСертификатаДоверенности = СвойстваСертификатов[Сертификат];
		Если СвойстваСертификатаДоверенности = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеДоверенностиСертификата = НовыеДанныеДоверенностиСертификата();
		ДанныеДоверенностиСертификата.ОтпечатокСертификата = СвойстваСертификатаДоверенности.Отпечаток;
		ДанныеДоверенностиСертификата.ДанныеДоверенности =
			МашиночитаемыеДоверенностиИнтеграцияОблака.ДанныеДоверенностиВФорматеСервиса(Доверенность);
		ДанныеЗаявки.ДоверенностиСертификатов.Добавить(ДанныеДоверенностиСертификата);
	КонецЦикла;
	
	Возврат ДанныеЗаявки;
	
КонецФункции

// Параметры:
//  РезультатФормирования - Структура:
//  * Успех - Булево
//  * Ошибка - Неопределено - ошибка отсутствует.
//           - Структура:
//  ** СертификатыУжеЗарегистрированы - Булево
//  ** ОтпечаткиСертификатовБезДоверенностей - Неопределено - отсутствуют сертификаты без доверенностей.
//                                - Массив из Строка - набор отпечатков сертификатов, по которым не найдена доверенность.
//  ** ОжиданиеДругойЗаявки - Неопределено - ожидание отсутствует.
//                         - Строка - идентификатор ожидаемой заявки.
//  ** Представление - Строка
//  РезультатПодготовкиДанных - см. ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ЗаявкаНаРегистрациюВЭДОСформирована(РезультатФормирования, РезультатПодготовкиДанных)
	
	Если Не ЗначениеЗаполнено(РезультатФормирования.Ошибка) Тогда
		Возврат РезультатФормирования.Успех;
	КонецЕсли;
	
	Ошибка = РезультатФормирования.Ошибка;
	
	РезультатПодготовкиДанных.СертификатыУжеЗарегистрированы = Ошибка.СертификатыУжеЗарегистрированы;
	Если РезультатПодготовкиДанных.СертификатыУжеЗарегистрированы Тогда
		Возврат РезультатФормирования.Успех;
	КонецЕсли;
	
	ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
	
	ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(РезультатПодготовкиДанных.КонтекстДиагностики, ВидОперации,
		Ошибка.Представление);
	
	Возврат РезультатФормирования.Успех;
	
КонецФункции

// Параметры:
//  РезультатФормирования - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.СформироватьЗаявкуНаРегистрациюВЭДО
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция СертификатыДляРегистрацииБезДоверенностей(РезультатФормирования)
	
	Сертификаты = Новый Массив; // См. СертификатыДляРегистрацииБезДоверенностей
	
	Если Не ЗначениеЗаполнено(РезультатФормирования.Ошибка) Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	ОтпечаткиСертификатовБезДоверенностей = РезультатФормирования.Ошибка.ОтпечаткиСертификатовБезДоверенностей;
	
	Если Не ЗначениеЗаполнено(ОтпечаткиСертификатовБезДоверенностей) Тогда
		Возврат Сертификаты;
	КонецЕсли;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(ОтпечаткиСертификатовБезДоверенностей);
	
	Сертификаты = ОбщегоНазначения.ВыгрузитьКолонку(СертификатыПоОтпечаткам, "Значение");
	
	Возврат Сертификаты;
	
КонецФункции

// Параметры:
//  РезультатПодготовкиДанных - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
//  ДоступныеСертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеДанныеДляПодписанияНаРегистрациюВЭДО
Функция ДанныеДляПодписанияНаРегистрациюВЭДО(РезультатПодготовкиДанных, ДоступныеСертификаты, КонтекстДиагностики)
	
	Если ЗначениеЗаполнено(РезультатПодготовкиДанных.Ошибка) Тогда
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
			 РезультатПодготовкиДанных.Ошибка);
		Возврат Неопределено
	КонецЕсли;
	
	ДанныеДляПодписанияВФорматеСервиса = РезультатПодготовкиДанных.ДанныеДляПодписания;
	
	СертификатыПоОтпечаткам = КриптографияБЭД.СертификатыПоОтпечаткам(
		ДанныеДляПодписанияВФорматеСервиса.ОтпечаткиСертификатов);
	
	СертификатыЗаявки = ОбщегоНазначения.ВыгрузитьКолонку(СертификатыПоОтпечаткам, "Значение");
	
	ДанныеДляПодписания = НовыеДанныеДляПодписанияНаРегистрациюВЭДО();
	ДанныеДляПодписания.СертификатыДляВыбора = ОбщегоНазначенияБЭД.ПересечениеМассивов(
		ДоступныеСертификаты, СертификатыЗаявки);
	ДанныеДляПодписания.ДанныеСоглашения = Base64Значение(ДанныеДляПодписанияВФорматеСервиса.ДанныеСоглашения);
	ДанныеДляПодписания.ДанныеДляРегистрации = Base64Значение(ДанныеДляПодписанияВФорматеСервиса.ДанныеДляРегистрации);
	
	Возврат ДанныеДляПодписания;
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Идентификатор - Строка
//  * ПодписьСоглашения - Строка
//  * ПодписьДанныхДляРегистрации - Строка
Функция НовыеПодписиЗаявкиНаРегистрациюВЭДО()
	ПодписиЗаявки = Новый Структура;
	ПодписиЗаявки.Вставить("Идентификатор", "");
	ПодписиЗаявки.Вставить("ПодписьСоглашения", "");
	ПодписиЗаявки.Вставить("ПодписьДанныхДляРегистрации", "");
	Возврат ПодписиЗаявки;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторыЭДО - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор заявки.
//  ** Значение - Строка - идентификатор ЭДО.
//  * ЗаявкиВОбрабоке - Соответствие из КлючИЗначение:
//  ** Ключ - ОпределяемыйТип.Организация
//  ** Значение - Массив из Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатОбработкиРегистрационныхПакетовЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЭДО", Новый Соответствие);
	Результат.Вставить("ЗаявкиВОбрабоке", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  РезультатОбработки - см. НовыйРезультатОбработкиРегистрационныхПакетовЭДО
//  СостоянияРегистрации - Массив из Структура:
//  * ИдентификаторЗаявки - Строка
//  * ВОбработке - Булево
//  * ИдентификаторЭДО - Неопределено,Строка
//  * Ошибка - Неопределено,Строка
//  УчетнаяЗаписьОблачногоЭДО - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Процедура ЗаполнитьРезультатОбработкиПоСостояниямРегистрацииВЭДО(РезультатОбработки, СостоянияРегистрации, УчетнаяЗаписьОблачногоЭДО)
	
	Если Не ЗначениеЗаполнено(СостоянияРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкиВОбрабоке = РезультатОбработки.ЗаявкиВОбрабоке;
	ИдентификаторыЭДО = РезультатОбработки.ИдентификаторыЭДО;
	КонтекстДиагностики = РезультатОбработки.КонтекстДиагностики;
	
	Для Каждого СостояниеРегистрации Из СостоянияРегистрации Цикл
		
		Если СостояниеРегистрации.ВОбработке Тогда
			ЗаявкиПоОрганизации = ЗаявкиВОбрабоке[УчетнаяЗаписьОблачногоЭДО];
			Если ЗаявкиПоОрганизации = Неопределено Тогда
				ЗаявкиПоОрганизации = Новый Массив; // Массив из Строка
				ЗаявкиВОбрабоке.Вставить(УчетнаяЗаписьОблачногоЭДО, ЗаявкиПоОрганизации);
			КонецЕсли;
			ЗаявкиПоОрганизации.Добавить(СостояниеРегистрации.ИдентификаторЗаявки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеРегистрации.ИдентификаторЭДО) Тогда
			ИдентификаторыЭДО.Вставить(СостояниеРегистрации.ИдентификаторЗаявки, СостояниеРегистрации.ИдентификаторЭДО);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеРегистрации.Ошибка) Тогда
			ВидОперации = НСтр("ru = 'Регистрация сертификата в сервисе ЭДО.'");
			ТекстСообщения = СостояниеРегистрации.Ошибка;
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуОбновленияИнформацииОбУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Обновление информации об учетной записи ЭДО'");
	ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуПолученияНастройкиУведомленийУчетнойЗаписиЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Получение настройки уведомлений учетной записи ЭДО'");
	ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Параметры:
//  РезультатМетода - Структура:
//  * Успех - Булево
//  * Ошибка - Строка
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Булево
Функция МетодВыполненУспешно(РезультатМетода, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(РезультатМетода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатМетода.Ошибка) Тогда
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, РезультатМетода.Ошибка);
	КонецЕсли;
	
	Возврат РезультатМетода.Успех
	
КонецФункции

// Параметры:
//  ИдентификаторыОрганизацииВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Наименование - Строка
//  
// Возвращаемое значение:
//  СписокЗначений из Строка
Функция ИдентификаторыОрганизацииИзФорматаСервиса(ИдентификаторыОрганизацииВФорматеСервиса)
	
	СписокИдентификаторов = Новый СписокЗначений; // СписокЗначений из Строка
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОрганизацииВФорматеСервиса) Тогда
		Возврат СписокИдентификаторов;
	КонецЕсли;
	
	ИдентификаторыЭДО = Новый Массив; // Массив из строка
	
	Для Каждого ЭлементСпискаВФорматеСервиса Из ИдентификаторыОрганизацииВФорматеСервиса Цикл
		ИдентификаторыЭДО.Добавить(ЭлементСпискаВФорматеСервиса.Идентификатор);
		СписокИдентификаторов.Добавить(ЭлементСпискаВФорматеСервиса.Идентификатор,
			ЭлементСпискаВФорматеСервиса.Наименование);
	КонецЦикла;
	
	ОрганизацииУчетныхЗаписей = УчетныеЗаписиЭДО.ОрганизацииУчетныхЗаписей(ИдентификаторыЭДО);
	
	Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
		Если ОрганизацииУчетныхЗаписей[ЭлементСписка.Значение] <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокИдентификаторов;
	
КонецФункции

// Параметры:
//  ОператорыВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ОператорыДляРегистрацииВЭДО
// 
// Возвращаемое значение:
//  См. УчетныеЗаписиЭДО.НовыйСписокОператоровДляРегистрацииВЭДО
Функция ОператорыДляРегистрацииВЭДОИзФорматаСервиса(ОператорыВФорматеСервиса)
	
	Операторы = УчетныеЗаписиЭДО.НовыйСписокОператоровДляРегистрацииВЭДО();
	
	Если Не ЗначениеЗаполнено(ОператорыВФорматеСервиса) Тогда
		Возврат Операторы;
	КонецЕсли;
	
	МетаданныеПеречисленияСпособыОбменаЭД = Метаданные.Перечисления.СпособыОбменаЭД;
	
	Для Каждого ОператорВФорматеСервиса Из ОператорыВФорматеСервиса Цикл
		Оператор = Операторы.Добавить();
		Оператор.Идентификатор = ОператорВФорматеСервиса.Идентификатор;
		Оператор.Наименование = ОператорВФорматеСервиса.Наименование;
		Оператор.ИНН = ОператорВФорматеСервиса.ИНН;
		Оператор.КПП = ОператорВФорматеСервиса.КПП;
		Оператор.ОГРН = ОператорВФорматеСервиса.ОГРН;
		Оператор.Сертификат = ОператорВФорматеСервиса.ОтпечатокСертификата;
		СпособОбмена = ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(ОператорВФорматеСервиса.СпособОбмена,
			МетаданныеПеречисленияСпособыОбменаЭД); // ПеречислениеСсылка.СпособыОбменаЭД
		Оператор.СпособОбмена = СпособОбмена;
	КонецЦикла;
	
	Возврат Операторы;
	
КонецФункции

// Параметры:
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  См. НовыеДанныеОрганизацииДляРегистрацииВЭДО
Функция ДанныеОрганизацииДляРегистрацииВЭДО(Организация)
	ДанныеЮрФизЛица = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Организация);
	ДанныеОрганизации = НовыеДанныеОрганизацииДляРегистрацииВЭДО();
	ДанныеОрганизации.НаименованиеСокращенное = ДанныеЮрФизЛица.СокращенноеНаименование;
	ДанныеОрганизации.НаименованиеПолное = ДанныеЮрФизЛица.СокращенноеНаименование;
	ДанныеОрганизации.ИНН = ДанныеЮрФизЛица.ИНН;
	ДанныеОрганизации.КПП = ДанныеЮрФизЛица.КПП;
	ДанныеОрганизации.ОГРН = ДанныеЮрФизЛица.ОГРН;
	ДанныеОрганизации.СвидетельствоДатаВыдачи = ДанныеЮрФизЛица.СвидетельствоДатаВыдачи;
	ДанныеОрганизации.СвидетельствоСерияНомер = ДанныеЮрФизЛица.СвидетельствоСерияНомер;
	Возврат ДанныеОрганизации;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * НаименованиеСокращенное - Строка
//  * НаименованиеПолное - Строка
//  * ИНН - Строка
//  * КПП - Строка
//  * ОГРН - Строка
//  * СвидетельствоДатаВыдачи - Строка
//  * СвидетельствоСерияНомер - Строка
Функция НовыеДанныеОрганизацииДляРегистрацииВЭДО()
	Данные = Новый Структура;
	Данные.Вставить("НаименованиеСокращенное", "");
	Данные.Вставить("НаименованиеПолное", "");
	Данные.Вставить("ИНН", "");
	Данные.Вставить("КПП", "");
	Данные.Вставить("ОГРН", "");
	Данные.Вставить("СвидетельствоДатаВыдачи", "");
	Данные.Вставить("СвидетельствоСерияНомер", "");
	Возврат Данные;
КонецФункции

// Возвращает вид ошибки для документа, имеющего подписи с непроверенными МЧД, когда доверенность не найдена.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиОтсутствуетДоверенностьСертификатаДляРегистрацииВЭДО() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОтсутствуетДоверенностьСертификатаДляРегистрацииВЭДО";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствует электронная доверенность'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Не указана доверенность при регистрации сертификата в ЭДО'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = 'Оформите подходящую доверенность или загрузите ее в программу.'"); 
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#Область Удаление

// Параметры:
//  ИдентификаторЭДО - Строка
Процедура ПриУдаленииУчетнойЗаписи(ИдентификаторЭДО) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НастройкиОблачногоЭДО.Удалить(ИдентификаторЭДО);
КонецПроцедуры

#КонецОбласти

#Область Получение

// Параметры:
//  ИдентификаторыЭДО - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииУчетныхЗаписейЭДО.ИдентификаторыЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаДанныеУчетныхЗаписейЭДО(ИдентификаторыЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ДанныеСинхронизацииУчетныхЗаписейЭДО", ИдентификаторыЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаДанныеУчетныхЗаписейЭДО()
	Возврат "ПолучитьУчетныеЗаписиЭДО";
КонецФункции

// Параметры:
//  ДанныеПриглашенийВФорматеСервиса - См. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ДанныеСинхронизацииУчетныхЗаписейЭДО
//  РезультатДействий - см. ЭлектронныеДокументыЭДОИнтеграцияОблака.НовыйРезультатДействийЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Процедура ОбработатьРезультатМетодаДанныеУчетныхЗаписейЭДО(ДанныеПриглашенийВФорматеСервиса,
	РезультатДействий, КонтекстДиагностики)
	
	Если Не ЗначениеЗаполнено(ДанныеПриглашенийВФорматеСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетныхЗаписейЭДО = ДанныеСинхронизацииУчетныхЗаписейЭДОИзФорматаСервиса(ДанныеПриглашенийВФорматеСервиса);
	
	ОбновитьУчетныеЗаписиЭДОПоДаннымСинхронизации(ДанныеУчетныхЗаписейЭДО, КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  МеткиВремениПоИдентификаторамЭДО - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииУчетныхЗаписейЭДОПоМеткамВремени.МеткиВремениПоИдентификаторамЭДО
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса
Функция ОписаниеМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(МеткиВремениПоИдентификаторамЭДО)
	Возврат ИнтеграцияОблачногоЭДО.ОписаниеМетодаСервиса(
		"ПорцияДанныхСинхронизацииУчетныхЗаписейЭДОПоМеткамВремени",
		МеткиВремениПоИдентификаторамЭДО);
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени()
	Возврат "ПолучитьУчетныеЗаписиЭДОПоМеткамВремени";
КонецФункции

// Параметры:
//  ПорцияДанных - см. ПрограммныйИнтерфейсОблачногоЭДОВерсия1.ПорцияДанныхСинхронизацииУчетныхЗаписейЭДОПоМеткамВремени
//  РезультатДействий - см. ОбработатьРезультатМетодаПоДействиямЭДО.РезультатДействий
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ПакетМетодовПовторно - см. ИнтеграцияОблачногоЭДО.НовыйПакетМетодовСервиса
Процедура ОбработатьРезультатМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(
		ПорцияДанных, РезультатДействий, КонтекстДиагностики, ПакетМетодовПовторно)
	
	Если Не ЗначениеЗаполнено(ПорцияДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУчетныхЗаписейЭДО = ДанныеСинхронизацииУчетныхЗаписейЭДОИзФорматаСервиса(ПорцияДанных.НаборДанных);
	
	РезультатОбновления = ОбновитьУчетныеЗаписиЭДОПоДаннымСинхронизации(
		ДанныеУчетныхЗаписейЭДО, КонтекстДиагностики);
	
	Для Каждого МеткаВремениПоИдентификаторуЭДО Из РезультатОбновления.МеткиВремениПоИдентификаторамЭДО Цикл
		
		ИдентификаторЭДО = МеткаВремениПоИдентификаторуЭДО.Ключ;
		МеткаВремени = МеткаВремениПоИдентификаторуЭДО.Значение;
		ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.УчетныеЗаписиЭДО;
		
		Попытка
			РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.Записать(ИдентификаторЭДО, ТипДанных, МеткаВремени);
		Исключение
			ВидОперации = НСтр("ru = 'Синхронизация приглашений с облачным ЭДО'");
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось зафиксировать состояние синхронизации облачного ЭДО
				|для типа данных %1 по идентификатору ЭДО %2'"), ТипДанных, ИдентификаторЭДО);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПорцияДанных.ЭтоПоследний Тогда
		Возврат;
	КонецЕсли;
	
	МеткиВремениИдентификаторовЭДО =
		РегистрыСведений.СостоянияСинхронизацииОблачногоЭДО.МеткиВремениИдентификаторовЭДОПоРезультатуОбработки(
			РезультатОбновления);
	
	Если Не ЗначениеЗаполнено(МеткиВремениИдентификаторовЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМетода = ОписаниеМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени(МеткиВремениИдентификаторовЭДО);
	ИдентификаторМетода = ИдентификаторМетодаПорцияДанныхУчетныхЗаписейЭДОПоМеткамВремени();
	ИнтеграцияОблачногоЭДО.ДобавитьОписаниеМетодаВПакет(ПакетМетодовПовторно, ОписаниеМетода, ИдентификаторМетода);
	
КонецПроцедуры

// Параметры:
//  НаборДанныхВФорматеСервиса - Массив из Структура:
//  * Идентификатор - Строка
//  * Состояние - Неопределено,Структура:
//    ** ИдентификаторЭДО - Строка 
//    ** МеткаВремени - Число
//    ** Удаление - Булево
//  * Описание  - Неопределено,Структура:
//    ** Идентификатор - Строка
//    ** Наименование - Строка
//    ** Назначение - Строка
//    ** ПодробноеОписание - Строка
//    ** ОператорЭДО - Строка
//    ** ПредставлениеОператораЭДО - Строка
//    ** СпособОбмена - Строка
//    ** ЭлектроннаяПочтаДляУведомлений - Строка
//    ** ОжидатьИзвещениеОПолучении - Булево
//    ** УведомлятьОНовыхПриглашениях - Булево
//    ** УведомлятьОбОтветахНаПриглашения - Булево
//    ** УведомлятьОНовыхДокументах - Булево
//    ** УведомлятьОНеОбработанныхДокументах - Булево
//    ** УведомлятьОбОкончанииСрокаДействияСертификата - Булево
//    ** КодНалоговогоОргана - Строка
//    ** АдресОрганизации - Строка
//    ** ПринятыУсловияИспользования - Булево
//    ** Организация - Структура:
//       *** ИНН - Строка
//       *** КПП - Строка
//    ** Сертификаты - Массив из Структура:
//       *** Данные - Строка
//       *** Доверенность - Неопределено,Структура:
//           **** Номер - Строка
//           **** ДанныеФайла - Строка
//           **** ДанныеПодписи - Строка
//           **** СтатусВРеестреФНС - Строка
// Возвращаемое значение:
//  Массив из см. ПриглашенияЭДОСлужебный.НовыеЗначенияСвойствПриглашенияДляОбновления
Функция ДанныеСинхронизацииУчетныхЗаписейЭДОИзФорматаСервиса(НаборДанныхВФорматеСервиса)
	
	НаборДанных = Новый Массив; // см. ДанныеСинхронизацииУчетныхЗаписейЭДОИзФорматаСервиса
	Если Не ЗначениеЗаполнено(НаборДанныхВФорматеСервиса) Тогда
		Возврат НаборДанных;
	КонецЕсли;
	
	РеквизитыОрганизаций = Новый Массив; // Массив из см. ИнтеграцияЭДО.НовыеКлючевыеРеквизитыУчастникаЭДО
	
	Для Каждого ДанныеСинхронизацииВФорматеСервиса Из НаборДанныхВФорматеСервиса Цикл
		ОписаниеВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Описание;
		Если Не ЗначениеЗаполнено(ОписаниеВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияБЭД.ДобавитьЗаполненноеЗначение(РеквизитыОрганизаций, ОписаниеВФорматеСервиса.Организация);
	КонецЦикла;
	
	ОрганизацииПоРеквизитам = ИнтеграцияЭДО.ОрганизацииПоКлючевымРеквизитам(РеквизитыОрганизаций);
	МетаданныеПеречисленияСпособыОбменаЭД = Метаданные.Перечисления.СпособыОбменаЭД;
	МетаданныеПеречисленияСтатусыВРеестреФНС = Метаданные.Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС;
	
	Для Каждого ДанныеСинхронизацииВФорматеСервиса Из НаборДанныхВФорматеСервиса Цикл
		
		СостояниеВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Состояние;
		ОписаниеВФорматеСервиса = ДанныеСинхронизацииВФорматеСервиса.Описание;
		
		Если Не ЗначениеЗаполнено(СостояниеВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСинхронизации = НовыеДанныеСинхронизацииУчетныхЗаписейЭДО();
		НаборДанных.Добавить(ДанныеСинхронизации);
		
		СостояниеСинхронизации = ДанныеСинхронизации.Состояние;
		СостояниеСинхронизации.ИдентификаторОбъекта = ДанныеСинхронизацииВФорматеСервиса.Идентификатор;
		СостояниеСинхронизации.ИдентификаторЭДО = СостояниеВФорматеСервиса.ИдентификаторЭДО;
		СостояниеСинхронизации.МеткаВремени = СостояниеВФорматеСервиса.МеткаВремени;
		СостояниеСинхронизации.Удаление = СостояниеВФорматеСервиса.Удаление;
		
		Если Не ЗначениеЗаполнено(ОписаниеВФорматеСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеУчетнойЗаписи = УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи();
		ДанныеСинхронизации.Описание = ОписаниеУчетнойЗаписи;
		
		ОписаниеУчетнойЗаписи.ЭтоОблачныйЭДО = Истина;
		ОписаниеУчетнойЗаписи.Идентификатор = ОписаниеВФорматеСервиса.Идентификатор;
		ОписаниеУчетнойЗаписи.Наименование = ОписаниеВФорматеСервиса.Наименование;
		ОписаниеУчетнойЗаписи.Назначение = ОписаниеВФорматеСервиса.Назначение;
		ОписаниеУчетнойЗаписи.ПодробноеОписание = ОписаниеВФорматеСервиса.ПодробноеОписание;
		ОписаниеУчетнойЗаписи.Оператор = ОписаниеВФорматеСервиса.ОператорЭДО;
		ОписаниеУчетнойЗаписи.ПредставлениеОператора = ОписаниеВФорматеСервиса.ПредставлениеОператораЭДО;
		ОписаниеУчетнойЗаписи.СпособОбмена = СпособОбменаИзФорматаСервиса(ОписаниеВФорматеСервиса.СпособОбмена,
			МетаданныеПеречисленияСпособыОбменаЭД);
		ОписаниеУчетнойЗаписи.ПринятыУсловияИспользования = ОписаниеВФорматеСервиса.ПринятыУсловияИспользования;
		
		ОписаниеУчетнойЗаписи.КодНалоговогоОргана = ОписаниеВФорматеСервиса.КодНалоговогоОргана;
		ОписаниеУчетнойЗаписи.Организация = ИнтеграцияЭДО.ОрганизацияИзОтбораПоКлючевымРеквизитам(
			ОрганизацииПоРеквизитам, ОписаниеВФорматеСервиса.Организация);
		Если ЗначениеЗаполнено(ОписаниеВФорматеСервиса.АдресОрганизации) Тогда
			ОписаниеУчетнойЗаписи.АдресОрганизации = ОписаниеВФорматеСервиса.АдресОрганизации;
			ОписаниеУчетнойЗаписи.АдресОрганизацииЗначение = 
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ОписаниеВФорматеСервиса.АдресОрганизации, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;
		
		ПараметрыУведомлений = СервисЭДОКлиентСервер.НовыеПараметрыУведомлений();
		ПараметрыУведомлений.АдресУведомлений = ОписаниеВФорматеСервиса.ЭлектроннаяПочтаДляУведомлений;
		ПараметрыУведомлений.УведомлятьОНовыхПриглашениях = ОписаниеВФорматеСервиса.УведомлятьОНовыхПриглашениях;
		ПараметрыУведомлений.УведомлятьОбОтветахНаПриглашения = ОписаниеВФорматеСервиса.УведомлятьОбОтветахНаПриглашения;
		ПараметрыУведомлений.УведомлятьОНовыхДокументах = ОписаниеВФорматеСервиса.УведомлятьОНовыхДокументах;
		ПараметрыУведомлений.УведомлятьОНеобработанныхДокументах =
			ОписаниеВФорматеСервиса.УведомлятьОНеОбработанныхДокументах;
		ПараметрыУведомлений.УведомлятьОбОкончанииСрокаДействияСертификата =
			ОписаниеВФорматеСервиса.УведомлятьОбОкончанииСрокаДействияСертификата;
		ОписаниеУчетнойЗаписи.ПараметрыУведомлений = ПараметрыУведомлений;
		
		Для Каждого СертификатУчетнойЗаписи Из ОписаниеВФорматеСервиса.Сертификаты Цикл
			
			ДанныеСертификата = Base64Значение(СертификатУчетнойЗаписи.Данные);
			СсылкаНаСертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(ДанныеСертификата);
			Если Не ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
				СсылкаНаСертификат = ЭлектроннаяПодпись.ЗаписатьСертификатВСправочник(ДанныеСертификата);
			КонецЕсли;
			ОписаниеУчетнойЗаписи.Сертификаты.Добавить(СсылкаНаСертификат);
			
			ДанныеДоверенности = СертификатУчетнойЗаписи.Доверенность;
			Если Не ЗначениеЗаполнено(ДанныеДоверенности) Тогда
				Продолжить;
			КонецЕсли;
			
			Доверенность = МашиночитаемыеДоверенностиИнтеграцияОблака.ДоверенностьПоДаннымСервиса(ДанныеДоверенности);
			Если ЗначениеЗаполнено(Доверенность) Тогда
				ОписаниеУчетнойЗаписи.Доверенности.Вставить(СсылкаНаСертификат, Доверенность);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НаборДанных;
	
КонецФункции

// Параметры:
//  СпособОбменаВФорматеСервиса - Строка
//  МетаданныеПеречисления - ОбъектМетаданныхПеречисление
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыОбменаЭД
Функция СпособОбменаИзФорматаСервиса(СпособОбменаВФорматеСервиса, МетаданныеПеречисления)
	Если МетаданныеПеречисления = Неопределено Тогда
		МетаданныеПеречисления = Метаданные.Перечисления.СпособыОбменаЭД;
	КонецЕсли;
	Возврат ОбщегоНазначенияБЭД.ЗначениеПеречисленияПоИмени(СпособОбменаВФорматеСервиса, МетаданныеПеречисления);
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Состояние - см. НовоеСостояниеСинхронизацииУчетныхЗаписейЭДО
//  * Описание  - Неопределено
//              - см. УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи
Функция НовыеДанныеСинхронизацииУчетныхЗаписейЭДО()
	Данные = Новый Структура;
	Данные.Вставить("Состояние", НовоеСостояниеСинхронизацииУчетныхЗаписейЭДО());
	Данные.Вставить("Описание", Неопределено);
	Возврат Данные;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторОбъекта - Строка
//  * ИдентификаторЭДО - Строка
//  * МеткаВремени - Число
//  * Удаление - Булево
Функция НовоеСостояниеСинхронизацииУчетныхЗаписейЭДО()
	Состояние = Новый Структура;
	Состояние.Вставить("ИдентификаторОбъекта", "");
	Состояние.Вставить("ИдентификаторЭДО", "");
	Состояние.Вставить("МеткаВремени", 0);
	Состояние.Вставить("Удаление", Ложь);
	Возврат Состояние;
КонецФункции

// Параметры:
//  НаборДанныхСинхронизации - Массив из см. НовыеДанныеСинхронизацииУчетныхЗаписейЭДО
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//  * МеткиВремениПоИдентификаторамЭДО - Соответствие из КлючИЗначение:
//    ** Ключ - Строка
//    ** Значение - Число
//  * ФиксированныеМеткиВремени - Соответствие из КлючИЗначение:
//    ** Ключ - Строка - идентификатор ЭДО.
//    ** Значение - Булево
Функция ОбновитьУчетныеЗаписиЭДОПоДаннымСинхронизации(НаборДанныхСинхронизации, КонтекстДиагностики)
	
	Результат = Новый Структура;
	Результат.Вставить("МеткиВремениПоИдентификаторамЭДО", Новый Соответствие);
	Результат.Вставить("ФиксированныеМеткиВремени", Новый Соответствие);
	
	Если Не ЗначениеЗаполнено(НаборДанныхСинхронизации) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидОперации = НСтр("ru = 'Синхронизация приглашений с облачным ЭДО'");
	МеткиВремениПоИдентификаторамЭДО = Результат.МеткиВремениПоИдентификаторамЭДО;
	ФиксированныеМеткиВремени = Результат.ФиксированныеМеткиВремени;
	ТипДанных = Перечисления.ТипыСинхронизацииОблачногоЭДО.УчетныеЗаписиЭДО;
	
	Для Каждого ДанныеСинхронизации Из НаборДанныхСинхронизации Цикл
		
		СостояниеСинхронизации = ДанныеСинхронизации.Состояние; // См. НовоеСостояниеСинхронизацииУчетныхЗаписейЭДО
		ИдентификаторЭДО = СостояниеСинхронизации.ИдентификаторЭДО;
		
		Попытка
			
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьСостояние(
				ТипДанных, СостояниеСинхронизации);
			
			Если СостояниеСинхронизации.Удаление Тогда
				УчетныеЗаписиЭДО.УдалитьУчетнуюЗапись(ИдентификаторЭДО);
			Иначе
				ОписаниеУчетнойЗаписи = ДанныеСинхронизации.Описание; // См. УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи
				ОбновитьУчетнуюЗаписьЭДО(ОписаниеУчетнойЗаписи);
			КонецЕсли;
			
			МеткаВремени = МеткиВремениПоИдентификаторамЭДО[ИдентификаторЭДО];
			Если ФиксированныеМеткиВремени[ИдентификаторЭДО] = Неопределено
				И (МеткаВремени = Неопределено
				Или МеткаВремени < СостояниеСинхронизации.МеткаВремени) Тогда
				МеткиВремениПоИдентификаторамЭДО.Вставить(ИдентификаторЭДО,
					СостояниеСинхронизации.МеткаВремени);
			КонецЕсли;
			
			Продолжить;
			
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось синхронизировать учетную запись ЭДО с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
		Попытка
			РегистрыСведений.СостоянияСинхронизацииОбъектовОблачногоЭДО.ЗаписатьОшибку(
				ТипДанных, ДанныеСинхронизации.Состояние, ТекстОшибкиПодробно);
		Исключение
			ФиксированныеМеткиВремени.Вставить(ИдентификаторЭДО, Истина);
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зафиксировать ошибку при синхронизации учетной записи ЭДО с идентификатором %1'"),
				СостояниеСинхронизации.ИдентификаторОбъекта);
			ТекстОшибкиПодробно = ТекстОшибки + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИнтеграцияОблачногоЭДО.ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации,
				ТекстОшибки, ТекстОшибкиПодробно);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОписаниеУчетнойЗаписиЭДО - см. УчетныеЗаписиЭДОКлиентСервер.НовоеОписаниеУчетнойЗаписи
Процедура ОбновитьУчетнуюЗаписьЭДО(ОписаниеУчетнойЗаписиЭДО)
	
	НаборЗаписей = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(ОписаниеУчетнойЗаписиЭДО.Идентификатор);
	
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			ЗаписьНабора = НаборЗаписей[0];
			УчетныеЗаписиЭДО.ЗаполнитьДанныеУчетнойЗаписи(ЗаписьНабора, ОписаниеУчетнойЗаписиЭДО);
			НаборЗаписей.Записать();
			УчетныеЗаписиЭДО.ЗаписатьСертификатыУчетнойЗаписи(ОписаниеУчетнойЗаписиЭДО.Идентификатор,
				ОписаниеУчетнойЗаписиЭДО.Сертификаты, Истина, ОписаниеУчетнойЗаписиЭДО.Доверенности);
		Иначе
			УчетныеЗаписиЭДО.СоздатьУчетнуюЗапись(ОписаниеУчетнойЗаписиЭДО);
			Если Не ТранзакцияАктивна() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление учетной записи электронного документооборота'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КраткийТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, КраткийТекстОшибки,
			"ОбменСКонтрагентами");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
