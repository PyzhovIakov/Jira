
#Область ПрограммныйИнтерфейс

// Отправить письмо.
//
// Параметры:
//	Объект			 - СправочникОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо. 
//  ПараметрыПисьма	 - Структура - Параметры письма. 
//  НастройкиСервиса - СправочникСсылка.CRM_СервисыРассылок - Используемый сервис рассылки.
//	ТекстОтвета		 - Строка - Текст ответа.
// 
// Возвращаемое значение:
//  Структура - Структура ответа. 
//
Функция ВыполнитьОтправкуПисьма(Объект, ПараметрыПисьма, НастройкиСервиса, ТекстОтвета) Экспорт
	
	МодульМенеджера = НастройкиСервиса.МодульМенеджера;
	Если МодульМенеджера = Неопределено Тогда
		ТекстОтвета = НСтр("ru = 'Не найдена обработка'") + " - CRM_РаботаССервисомРассылок" + НастройкиСервиса.ИмяСервиса;
		Возврат Неопределено;
	КонецЕсли;
	Возврат МодульМенеджера.ВыполнитьОтправкуПисьма(Объект, ПараметрыПисьма, НастройкиСервиса, ТекстОтвета);
	
КонецФункции
	
// Настройки сервиса рассылки
// 
// Параметры:
//  СервисРассылки - СправочникСсылка.CRM_СервисыРассылок - Используемый сервис рассылки. 
// 
// Возвращаемое значение:
//  Структура - Данные доступа.
//
Функция НастройкиСервиса(СервисРассылки) Экспорт
	ДанныеДоступа = СервисРассылки.ХранилищеНастроек.Получить();
	Если ДанныеДоступа = Неопределено Тогда
		ДанныеДоступа = Новый Структура;
	КонецЕсли;
	ДанныеДоступа.Вставить("СервисРассылки", СервисРассылки);
	ДанныеДоступа.Вставить("ИмяСервиса", СервисРассылки.ИмяСервиса);
	ДанныеДоступа.Вставить("МодульМенеджера", МодульМенеджера(СервисРассылки.ИмяСервиса));
	Возврат ДанныеДоступа;
КонецФункции
	
// Возвращает менеджер обработки для работы с сервисом.
//
// Параметры:
//	ИмяСервиса - Строка - Имя сервиса.
// 
// Возвращаемое значение:
//  ОбработкаМенеджер - менеджер обработки для работы с сервисом.
//
Функция МодульМенеджера(ИмяСервиса) Экспорт
	ИмяОбработки = "CRM_РаботаССервисомРассылок" + ИмяСервиса;
	МД = Метаданные.Обработки.Найти(ИмяОбработки);
	Если МД <> Неопределено Тогда
		Возврат Обработки[ИмяОбработки];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает статусы в доставке.
// 
// Возвращаемое значение:
//  СписокЗначений - статусы в доставке.
//
Функция СтатусыВДоставке() Экспорт
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется);
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Отправлено);
	СписокСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Доставлено);
	Возврат СписокСтатусов;
	
КонецФункции

// Обновляет статусы e-mail рассылок.
//
// Параметры:
//	СервисРассылок - СправочникСсылка.CRM_СервисыРассылок - Сервис рассылок.
//	ТаблицаПисем   - ТаблицаЗначений - Таблица писем.
//
Процедура ОбновитьСтатусыEmailРассылок(СервисРассылок, ТаблицаПисем) Экспорт
	НастройкиСервиса = НастройкиСервиса(СервисРассылок);
	НастройкиСервиса.МодульМенеджера.ОбновитьСтатусыEmailРассылок(НастройкиСервиса, ТаблицаПисем);
КонецПроцедуры
	
// Получить статус письма
//
// Параметры:
//  Письмо	 - ДокументСсылка - Ссылка на письмо.
// 
// Возвращаемое значение:
//  Структура - Структура статусов письма. 
//
Функция ПолучитьСтатусПисьма(Письмо) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СтатусыПисемEmailРассылки.Статус КАК Статус,
	                      |	CRM_СтатусыПисемEmailРассылки.СтатусСтрокой КАК СтатусСтрокой,
	                      |	CRM_РасшифровкиСтатусовПисемEmailРассылки.Расшифровка КАК Расшифровка
	                      |ИЗ
	                      |	РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК CRM_СтатусыПисемEmailРассылки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки КАК CRM_РасшифровкиСтатусовПисемEmailРассылки
	                      |		ПО CRM_СтатусыПисемEmailРассылки.СтатусСтрокой = CRM_РасшифровкиСтатусовПисемEmailРассылки.КодСтатуса
	                      |ГДЕ
	                      |	CRM_СтатусыПисемEmailРассылки.Письмо = &Письмо");
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураСтатуса = Новый Структура;
	Если Выборка.Следующий() Тогда
		СтруктураСтатуса.Вставить("Статус", Выборка.Статус);
		СтруктураСтатуса.Вставить("СтатусСтрокой", Выборка.СтатусСтрокой);
		СтруктураСтатуса.Вставить("РасшифровкаСтатуса", Выборка.Расшифровка);
	Иначе
		СтруктураСтатуса.Вставить("Статус", Перечисления.CRM_СтатусыПисемEmailРассылки.ПустаяСсылка());
		СтруктураСтатуса.Вставить("СтатусСтрокой", "");
		СтруктураСтатуса.Вставить("РасшифровкаСтатуса", "");
	КонецЕсли;
	Возврат СтруктураСтатуса;
	
КонецФункции
	
// Массив шаблонов сервиса
//
// Параметры:
//	СервисРассылки - СправочникСсылка.CRM_СервисыРассылок - Сервис рассылки.
// 
// Возвращаемое значение:
//  Структура - Структура ответа. 
//
Функция МассивШаблоновСервиса(СервисРассылки) Экспорт
	
	НастройкиСервиса = НастройкиСервиса(СервисРассылки);
	
	Если НастройкиСервиса.МодульМенеджера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НастройкиСервиса.МодульМенеджера.МассивШаблоновСервиса(НастройкиСервиса);
	
КонецФункции

// Шаблон uni sender
//
// Параметры:
//	СервисРассылки - СправочникСсылка.CRM_СервисыРассылок - Сервис рассылки.
//  Шаблон	 - Строка - ИД шаблона. 
// 
// Возвращаемое значение:
//  Структура - Структура ответа.
//
Функция ШаблонСервиса(СервисРассылки, Шаблон) Экспорт
	
	НастройкиСервиса = НастройкиСервиса(СервисРассылки);
	Возврат НастройкиСервиса.МодульМенеджера.ШаблонСервиса(НастройкиСервиса, Шаблон);
	
КонецФункции

// Подписать получателя на рассылки
//
// Параметры:
//  Объект		 - СправочникОбъект	 - Передаваемый объект. 
//  Подписать	 - Булево	 -  Признак подписи.
//  Отказ		 - Булево	 -  Признак отказа.
//
Процедура ПодписатьПолучателяНаРассылки(Объект, Подписать = Истина, Отказ) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			 Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			 Справочники.ВидыКонтактнойИнформации.EmailПартнера));
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			 Справочники.ВидыКонтактнойИнформации.EmailПользователя));
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			 Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид",
			 Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента));	
	КонецЕсли;
	Если Строки.Количество() > 0 Тогда
		Для каждого Строка Из Строки Цикл
			Если Подписать Тогда
				Если НЕ ПодписатьАдресНаРассылки(Строка.АдресЭП) Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ОтписатьАдресОтРассылки(Строка.АдресЭП) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет адрес учетной записи.
//
// Параметры:
//	СервисРассылки - СправочникСсылка.CRM_СервисыРассылок - Сервис рассылки.
//  email		   - Строка - Строка с email адресом.
// 
// Возвращаемое значение:
//  Булево - Существование адреса. 
//
Функция ПроверитьАдресУчетнойЗаписи(СервисРассылки, email) Экспорт
	
	НастройкиСервиса = НастройкиСервиса(СервисРассылки);
	Возврат НастройкиСервиса.МодульМенеджера.ПроверитьАдресУчетнойЗаписи(НастройкиСервиса, email);
	
КонецФункции

// Возвращает адреса электронной почты в контактной информации.
//
// Параметры:
//	МассивАдресов - Массив - адреса электронной почты.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие контактов и адресов электронной почты. 
//
Функция НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов) Экспорт
	
	СоответствиеКонтактов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка КАК Ссылка,
	|	Контакты.АдресЭП КАК АдресЭП
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП В(&МассивАдресов)
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	|ИТОГИ ПО
	|	АдресЭП";

	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСсылкам.Следующий() Цикл
			СоответствиеКонтактов.Вставить(ВыборкаПоСсылкам.Ссылка, ВРег(Выборка.АдресЭП));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоответствиеКонтактов;
	
КонецФункции

// Получить картинку мессенджера.
//
// Параметры:
//	СервисРассылки - СправочникСсылка.CRM_СервисыРассылок - Сервис рассылки.
//	ИмяМакета	   - Строка - Имя макета.
//
// Возвращаемое значение:
//  Картинка - картинка мессенджера.
//
Функция КартинкаСервиса(СервисРассылки, ИмяМакета = "Иконка_16") Экспорт
	
	МодульМенеджера = МодульМенеджера(СервисРассылки.ИмяСервиса);
	Если МодульМенеджера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеКартинки = МодульМенеджера.ПолучитьМакет(ИмяМакета);
	Картинка = Новый Картинка(ДанныеКартинки);
	Возврат Картинка;
	
КонецФункции

// Возвращает текст заголовка.
//
// Параметры:
//	ИмяСервиса - Строка - Имя сервиса.
// 
// Возвращаемое значение:
//  Строка - текст заголовка.
//
Функция ТекстЗаголовка(ИмяСервиса) Экспорт
	МодульМенеджера = МодульМенеджера(ИмяСервиса);
	Если МодульМенеджера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Макет = МодульМенеджера.ПолучитьМакет("МакетФорматированнойСтроки");
	Заголовок = Макет.ПолучитьОбласть("Заголовок").ТекущаяОбласть.Текст;
	Возврат Заголовок;
КонецФункции

// Получить список сервисов
//
// Параметры:
//	РазмерИконки - Строка - Размер иконки.
// 
// Возвращаемое значение:
//  СписокЗначений - Список сервисов.
//
Функция ПолучитьСписокСервисов(РазмерИконки = 16) Экспорт
	СписокМессенджеров = Новый СписокЗначений;
	Для каждого Обработка Из Метаданные.Обработки Цикл
		Если СтрНайти(Обработка.Имя, "CRM_РаботаССервисомРассылок") = 1 Тогда
			ТипМессенджера = СтрЗаменить(Обработка.Имя, "CRM_РаботаССервисомРассылок", "");
			Если Обработка.Макеты.Найти("Иконка_" + Строка(РазмерИконки)) <> Неопределено Тогда
				МакетКартинки = Обработки[Обработка.Имя].ПолучитьМакет("Иконка_" + Строка(РазмерИконки));
				Картинка = Новый Картинка(МакетКартинки);
			Иначе
				Картинка = Неопределено;
			КонецЕсли;
			СписокМессенджеров.Добавить(ТипМессенджера, , , Картинка);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокМессенджеров;
КонецФункции

// Возвращает сервис рассылки по умолчанию.
//
// Возвращаемое значение:
//	СправочникСсылка.CRM_СервисыРассылок - сервис рассылки по умолчанию.
//
Функция СервисРассылкиПоУмолчанию() Экспорт
	
	Сервис = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("СервисРассылки");
	Если НЕ ЗначениеЗаполнено(Сервис) ИЛИ (НЕ Сервис.Включен) ИЛИ Сервис.ПометкаУдаления Тогда
		Сервис = Константы.CRM_СервисРассылокПоУмолчанию.Получить();
		Если НЕ ЗначениеЗаполнено(Сервис) ИЛИ (НЕ Сервис.Включен) ИЛИ Сервис.ПометкаУдаления Тогда
			Сервис = Справочники.CRM_СервисыРассылок.SMTP;
		КонецЕсли;
	КонецЕсли;
	Возврат Сервис;
	
КонецФункции

// Возвращает Используется ли обновление статусов.
//
// Параметры:
//  ИмяСервиса	 - Строка	 - Имя сервиса
// 
// Возвращаемое значение:
//  Булево - Используется ли обновление статусов.
//
Функция ИспользуетсяОбновлениеСтатусов(ИмяСервиса) Экспорт
	МодульМенеджера = МодульМенеджера(ИмяСервиса);
	Если МодульМенеджера = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Результат = МодульМенеджера.ИспользуетсяОбновлениеСтатусов();
	Возврат Результат;
КонецФункции

// Обновляем статусы писем рассылки отправленных через сервис.
Процедура CRM_СтатусыEmailРассылок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_СтатусыEmailРассылок);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыПисемРассылки.Письмо КАК Письмо,
	|	СтатусыПисемРассылки.Письмо.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ПредметыПапкиВзаимодействий.Предмет.СервисРассылки КАК СервисРассылки
	|ИЗ
	|	РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК СтатусыПисемРассылки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО СтатусыПисемРассылки.Письмо = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	СтатусыПисемРассылки.Статус В(&СтатусыВДоставке)
	|	И ПредметыПапкиВзаимодействий.Предмет.СервисРассылки <> ЗНАЧЕНИЕ(Справочник.CRM_СервисыРассылок.ПустаяСсылка)
	|	И ПредметыПапкиВзаимодействий.Предмет.СервисРассылки.ПериодОбновленияСтатусов <> 0
	|	И ДОБАВИТЬКДАТЕ(СтатусыПисемРассылки.Письмо.ДатаОтправления, ДЕНЬ, ПредметыПапкиВзаимодействий.Предмет.СервисРассылки.ПериодОбновленияСтатусов) > &ТекДата
	|ИТОГИ ПО
	|	СервисРассылки");
	
	Запрос.УстановитьПараметр("СтатусыВДоставке", CRM_ИнтеграцияССервисамиРассылок.СтатусыВДоставке());
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	
	ВыборкаСервис = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСервис.Следующий() Цикл
		Выборка = ВыборкаСервис.Выбрать();
		Количество = 0;
		ТаблицаПисем = Новый ТаблицаЗначений;
		ТаблицаПисем.Колонки.Добавить("Письмо");
		ТаблицаПисем.Колонки.Добавить("ИдентификаторСообщения");
		Пока Выборка.Следующий() Цикл
			Если Количество = 100 Тогда
				Количество = 0;
				ОбновитьСтатусыEmailРассылок(ВыборкаСервис.СервисРассылки, ТаблицаПисем);
				ТаблицаПисем.Очистить();
			КонецЕсли;
			НоваяСтрока = ТаблицаПисем.Добавить();
			НоваяСтрока.Письмо = Выборка.Письмо;
			НоваяСтрока.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
			Количество = Количество + 1;
		КонецЦикла;
		ОбновитьСтатусыEmailРассылок(ВыборкаСервис.СервисРассылки, ТаблицаПисем);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодписатьАдресНаРассылки(email)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СервисыРассылок.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СервисыРассылок КАК CRM_СервисыРассылок
	                      |ГДЕ
	                      |	НЕ CRM_СервисыРассылок.ПометкаУдаления
	                      |	И НЕ CRM_СервисыРассылок.Предопределенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Истина;
	Пока Выборка.Следующий() Цикл
		НастройкиСервиса = НастройкиСервиса(Выборка.Ссылка);
		Результат = Результат И НастройкиСервиса.МодульМенеджера.ПодписатьАдресНаРассылки(НастройкиСервиса, email);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОтписатьАдресОтРассылки(email)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СервисыРассылок.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СервисыРассылок КАК CRM_СервисыРассылок
	                      |ГДЕ
	                      |	CRM_СервисыРассылок.Включен
	                      |	И НЕ CRM_СервисыРассылок.ПометкаУдаления
	                      |	И НЕ CRM_СервисыРассылок.Предопределенный");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Истина;
	Пока Выборка.Следующий() Цикл
		НастройкиСервиса = НастройкиСервиса(Выборка.Ссылка);
		Результат = Результат И НастройкиСервиса.МодульМенеджера.ОтписатьАдресОтРассылки(НастройкиСервиса, email);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти
