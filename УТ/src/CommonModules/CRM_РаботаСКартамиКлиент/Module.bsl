
#Область СлужебныеПроцедурыИФункции

// Обработка события формы "ОбработкаВыбора"
Функция  СобытиеФормыОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, Модуль, ОбъектБД = Неопределено) Экспорт
	ИмяФормы = ИсточникВыбора.ИмяФормы;
	 
	Если  ИмяФормы = "Справочник.CRM_АдресаОфисовКомпании.Форма.ПросмотрКарты" Тогда 
		// новые координаты получены из окна редактирования координат
		Если ОбъектБД = Неопределено Тогда
			Модуль.Объект.Долгота = ВыбранноеЗначение.Долгота;
			Модуль.Объект.Широта  = ВыбранноеЗначение.Широта;
		Иначе
			ОбъектБД.Долгота = ВыбранноеЗначение.Долгота;
			ОбъектБД.Широта  = ВыбранноеЗначение.Широта;
		КонецЕсли;
		Модуль.ПредставлениеКоординат = CRM_РаботаСКартамиКлиентСервер.ПредставениеКоординат(ВыбранноеЗначение.Широта,
			 ВыбранноеЗначение.Долгота);
		Модуль.Модифицированность = Истина;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура СобытиеЭлементФормыНачалоВыбора(ДанныеФормы, Владелец) Экспорт
	ВыборКоординат(ДанныеФормы, Владелец);
КонецПроцедуры

Процедура СобытиеЭлементФормыОткрытие(ДанныеФормы, Владелец) Экспорт
	Если ДанныеФормы.Широта = 0 И ДанныеФормы.Долгота = 0 Тогда
		Если ДанныеФормы.Свойство("Документ") Тогда // форма открыта из документа
			Текст = НСтр("ru='У данного документа не заданы координаты места создания.';
				|uk='У даного документа не задані координати місця створення.'");
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Неопределено, Текст, 
				РежимДиалогаВопрос.ОК);
			Возврат;
		Иначе
			Текст = НСтр("ru='Координаты не заданы,
				| просмотр объекта на карте не возможен. Хотите задать координаты?';uk=""Координати не задані,
				| перегляд об'єкта на карті не можливий. Хочете поставити координати?""");
			Параметр = Новый Структура("ДанныеФормы, Владелец, Режим", ДанныеФормы, Владелец, "ЗадатьКоординаты");
			Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаПользователю", ЭтотОбъект, Параметр);
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, Текст, РежимДиалогаВопрос.ДаНет
					);
		КонецЕсли;
	Иначе // открываем карту и показываем на ней объект
		ОбъектСсылка = Неопределено;
		Если ДанныеФормы.Свойство("Ссылка", ОбъектСсылка) Тогда
			Наименование = ДанныеФормы.Наименование;
		ИначеЕсли ДанныеФормы.Свойство("Документ", ОбъектСсылка) Тогда
			Наименование = Строка(ОбъектСсылка);
		Иначе
			ВызватьИсключение НСтр("ru = 'Обработка открыта для просмотра неизвестного объекта.';
				| uk = 'Обробка відкрита для перегляду невідомого об'єкта.'");
		КонецЕсли;
		
		Параметры = Новый Структура("ОбъектСсылка, Широта, Долгота, Наименование, Режим",
						ОбъектСсылка, ДанныеФормы.Широта, ДанныеФормы.Долгота, Наименование, "ДляПросмотра");
		ПоказатьКарту(Параметры, Владелец); 
		
	КонецЕсли;
КонецПроцедуры

Процедура СобытиеЭлементаФормыУказатьНаКарте(ДанныеФормы, Владелец) Экспорт
	Параметры = Новый Структура("ОбъектСсылка, Широта, Долгота, Наименование, Режим",
					ДанныеФормы.ОбъектСсылка, ДанныеФормы.Широта, ДанныеФормы.Долгота, ДанныеФормы.Наименование, "ДляУказанияКоординат");
	ПоказатьКарту(Параметры, Владелец);
КонецПроцедуры

Процедура СобытиеЭлементФормыОчистить(ДанныеФормы, Владелец) Экспорт
	
	ДанныеФормы.Широта  = 0;
	ДанныеФормы.Долгота	= 0;
	Владелец.ПредставлениеКоординат = CRM_РаботаСКартамиКлиентСервер.ПредставениеКоординат(ДанныеФормы.Широта,
		 ДанныеФормы.Долгота);	
	Владелец.Модифицированность = Истина;

КонецПроцедуры

Процедура ПоказатьОбъектНаКарте(ОбъектСсылка, Владелец) Экспорт
	Параметры = Новый Структура("ОбъектСсылка, Режим", ОбъектСсылка, "ДляПросмотра");
	ПоказатьКарту(Параметры, Владелец);
КонецПроцедуры

Процедура ОбработкаВопросаПользователю(Результат, Параметр) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Режим = Параметр.Режим;
	Если Режим = "ЗадатьКоординаты" Тогда
		Если Результат.Значение = КодВозвратаДиалога.Да Тогда   
			ВыборКоординат(Параметр.ДанныеФормы, Параметр.Владелец);
		КонецЕсли;
	ИначеЕсли Режим = "..." Тогда 
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыборКоординат(ДанныеФормы, Владелец) 
	Параметры = Новый Структура("ДанныеФормы, ОбъектИзменен", ДанныеФормы, Владелец.Модифицированность);
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ПросмотрКарты", Параметры, Владелец,
		 Владелец.УникальныйИдентификатор);
КонецПроцедуры

Процедура ПоказатьКарту(Параметры, Владелец) 
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ПросмотрКарты", Параметры, Владелец,
		 Владелец.УникальныйИдентификатор);
КонецПроцедуры

// Процедура включает таймер обработки очереди событий для поля браузера, 
// при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
// Также должен быть объявлен реквизит формы ТаймерОжидания.
// Реквизит формы "ТаймерОжидания" используется для организациии очереди передачи команд в поле браузера, 
// т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
//
Процедура Таймер_Включить(Событие, Модуль) Экспорт
	Если ТипЗнч(Модуль.ТаймерОжидания) <> Тип("Структура") Тогда // реквизит еще не инициализировался
		Модуль.ТаймерОжидания = Новый Структура("Включен,Очередь,Время", Ложь, Неопределено, Неопределено);
		Модуль.ТаймерОжидания.Очередь = Новый Массив; // стэк событий для взаимодействия с полем браузера (обрабатывается в порядке добавления событий) 
	КонецЕсли;
	ТаймерОжидания = Модуль.ТаймерОжидания;
	ТаймерОжидания.Очередь.Добавить(Событие);
	ТаймерОжидания.Время = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Не ТаймерОжидания.Включен Тогда
		ТаймерОжидания.Включен = Истина;
		Модуль.ПодключитьОбработчикОжидания("Таймер_Обработчик", 1);
	КонецЕсли;	
КонецПроцедуры

// Процедура выключает таймер обработки очереди событий для поля браузера, 
// или удаляет из очереди первое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
//
Процедура Таймер_Выключить(Знач ВыключитьДляВсехСобытий, Модуль) Экспорт
	ТаймерОжидания = Модуль.ТаймерОжидания;
	Если Не ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Очередь.Удалить(0);
		Если ТаймерОжидания.Очередь.Количество() = 0 Тогда
			ВыключитьДляВсехСобытий = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Включен = Ложь;
		Модуль.ОтключитьОбработчикОжидания("Таймер_Обработчик");
	КонецЕсли;
КонецПроцедуры

#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
Функция ВыполнитьЗапросКСерверу(ПреобразованныйАдрес)
	Возврат CRM_РаботаСКартамиСервер.ВыполнитьHTTPЗапрос(ПреобразованныйАдрес);
КонецФункции
#Иначе
Функция ВыполнитьЗапросКСерверу(ПреобразованныйАдрес)
	
	// BSLLS:UnusedLocalVariable-off
	СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
	
	Прокси = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение("geocode-maps.yandex.ru", , , , Прокси, 30, ssl);
	
	Возврат Соединение.Получить(Новый HTTPЗапрос(ПреобразованныйАдрес)).ПолучитьТелоКакСтроку();
	// BSLLS:UnusedLocalVariable-on
	
КонецФункции
#КонецЕсли

// Выполняет обращение к сервису геокодирования и разбирает ответ в структуру
//
//  Параметры:
//   Адрес - Строка - адрес, для которого нужно определить координаты
//
//  Возвращаемое значение:
//   СтруктураОтвета - Структура - структура, содержащая координаты и адрес, для которого были определены координаты
//
Функция ПолучитьКоординатыПоЗапросу(Адрес) Экспорт	
	
	ПреобразованныйАдрес = "1.x/?geocode=" + CRM_РаботаСКартамиКлиентСервер.ПреобразоватьСтрокуВУТФ8(Адрес);
		
	Попытка
		ОтветСервера = ВыполнитьЗапросКСерверу(ПреобразованныйАдрес); 
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось определить координаты по адресу по причине:'")
								 + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
								 + Символы.ПС + НСтр("ru='Возможный способ устранения: обновите платформу до последнего релиза.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат CRM_РаботаСКартамиСервер.КонвертироватьКоординаты(ОтветСервера);
	
КонецФункции 

Функция ВыполнитьЗапросКВебСервису(Знач url = Неопределено, ВебЗапрос, ВернутьJSONСтруктуру = Ложь) Экспорт
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
	Возврат CRM_РаботаСКартамиСервер.ВыполнитьЗапросКВебСервисуНаСервере(url, ВебЗапрос, ВернутьJSONСтруктуру);
	#Иначе
	СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
	Если url = Неопределено Тогда
		url = "geocode-maps.yandex.ru";
	КонецЕсли;
	
	Прокси = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(url, , , , Прокси, 30, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	ОписаниеОшибки = "";
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Ошибка обращения к веб-сервису: '") 
			+ Символы.ПС 
			+ ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат CRM_РаботаСКартамиСервер.ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли; 
	#КонецЕсли
КонецФункции

Функция ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты) Экспорт
	
	//Сообщить("1");
	//
	#Если ВебКлиент Тогда
	//	Сообщить("2");
	Возврат CRM_РаботаСКартамиСервер.ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты);
		
	#Иначе
	
	ВебЗапрос  = "1.x/?geocode=" + CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррКоординаты.Долгота) 
		+ "," + CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррКоординаты.Широта) + "&kind=locality";
	
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	
	// Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Результат = Неопределено;

	// Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяПараметра = "text" Тогда
			ЧтениеОтвета.Прочитать();
			Результат = СокрЛП(ЧтениеОтвета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;
	#КонецЕсли

КонецФункции

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
Процедура ЗагрузитьКарту(Документ, ТекстМакета) Экспорт

	Документ.designMode = "On";
	Документ.write(ТекстМакета);	
	Документ.designMode = "Off"; 
	
КонецПроцедуры

// Функция выполняет метод из скрипта и возвращает полученное значение
// МетодСкрипта - название функции в скрипте
// СписокПараметров - массив параметров функции, следующих по порядку согласно параметрам функции стрипта
Функция ВыполнитьМетодСкрипта(Документ, МетодСкрипта, СписокПараметров = Неопределено) Экспорт

	ТекстКоманды = МетодСкрипта + "(";
	Если ЗначениеЗаполнено(СписокПараметров) Тогда
	 	КолЭлем = СписокПараметров.Количество();
		Если КолЭлем > 0 Тогда 
			НомерПослЭлем = КолЭлем;
			Сч = 1;
			Для каждого ЗначПарам Из СписокПараметров Цикл
				ТипПараметра = ТипЗнч(ЗначПарам);
				Если ТипПараметра = Тип("Число") Тогда
					ТекстКоманды = ТекстКоманды + Формат(ЗначПарам, "ЧРД=.; ЧН=0; ЧГ=0");
				ИначеЕсли Не ЗначениеЗаполнено(ЗначПарам) Тогда
					ТекстКоманды = ТекстКоманды + """""";
				Иначе
					ТекстЗначПарам = СтрЗаменить(Строка(ЗначПарам), "\", "\\");
					ТекстЗначПарам = СтрЗаменить(Строка(ТекстЗначПарам), """", """""");
					ТекстКоманды = ТекстКоманды + "'" + ТекстЗначПарам + "'";
				КонецЕсли;
				Если НомерПослЭлем <> Сч Тогда
					ТекстКоманды = ТекстКоманды + ", ";
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	ТекстКоманды = ТекстКоманды + ")";
	// устанавливаем текст команды
	Документ.getElementById("ExtCommand").innerHTML = ТекстКоманды;
	
	// Посылаем сообщение невидимой кнопке, чтобы выполнить команду
	Команда = Документ.getElementById("SendEvent");
	Команда.fireEvent("onmouseup");
		
	// получаем результат из контейнера DIV
	Возврат Документ.getElementById("BufferData").innerHTML;

КонецФункции

// Процедура устаналвивает регион для приоритета геокодирования.
// Параметры:
// 		стррРегион - Структура - свойства структуры:
// 			Широта, Долгота - Число - координаты центра региона в формате NMEA
// 			Ширина, Высота  - Число - (не обязательно) - ширина
	// и высота региона в градусах в формате WGS84. Если не указано, то значения 2x2
//
Процедура УстановитьРегионГеокодера(стррРегион, СтррКонтекст) Экспорт

	Если стррРегион = Неопределено Тогда
		СтррКонтекст.РегионГеокодера = "";
	Иначе
		// координаты центра региона
		стрШирота  = CRM_РаботаСКартамиКлиентСервер.
			ЧислоВСтроку(Окр(CRM_РаботаСКартамиКлиентСервер.КонвертироватьNMEAWGS84(стррРегион.Широта), 2));
			
		стрДолгота = CRM_РаботаСКартамиКлиентСервер.
			ЧислоВСтроку(Окр(CRM_РаботаСКартамиКлиентСервер.КонвертироватьNMEAWGS84(стррРегион.Долгота), 2));
		Если стррРегион.Свойство("Ширина") И стррРегион.Свойство("Высота") Тогда 
			// Ширина и высота региона, значения в градусах WGS84
			стрРазмер = CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррРегион.Ширина) + "," 
				+ CRM_РаботаСКартамиКлиентСервер.ЧислоВСтроку(стррРегион.Высота);
		Иначе
			стрРазмер = "2,2";
		КонецЕсли; 
		СтррКонтекст.РегионГеокодера = "&ll=" + стрДолгота + "," + стрШирота + "&spn=" + стрРазмер;
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьКоординатыПользователя() Экспорт
	
	стррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	Если ТипЗнч(стррОтвет) = Тип("Структура") И стррОтвет.Свойство("city") И стррОтвет.city <> Неопределено
		И стррОтвет.city.Свойство("lat") И стррОтвет.city.Свойство("lon") Тогда
		
		стррРезультат = Новый Структура("Широта,Долгота,Город,Регион", 
		  		CRM_РаботаСКартамиКлиентСервер.КоординатаИзWGS84вNMEA(стррОтвет.city.lat),
				CRM_РаботаСКартамиКлиентСервер.КоординатаИзWGS84вNMEA(стррОтвет.city.lon)
			);
		стррОтвет.city.Свойство("name_ru", стррРезультат.Город);
		Если стррОтвет.Свойство("region") Тогда
			стррОтвет.region.Свойство("name_ru", стррРезультат.Регион);
		КонецЕсли;
	Иначе
		// Проверка ошибки "Превышено количество запросов для IP или Домена"
		Если ТипЗнч(стррОтвет) = Тип("Структура") И стррОтвет.Свойство("error") И ЗначениеЗаполнено(стррОтвет.error) Тогда
			Текст = НСтр("ru='Не удалось автоматически определить центр карты по причине: '") + стррОтвет.error;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);	
		КонецЕсли;

		стррРезультат = Неопределено;
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

Функция МестоположениеПользователяПолучить() Экспорт
	
	стррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	стррРезультат = Новый Структура;	
	
	Если ТипЗнч(стррОтвет) = Тип("Структура") Тогда
		
		Если стррОтвет.Свойство("city") И ЗначениеЗаполнено(стррОтвет.city) Тогда
			стррРезультат.Вставить("city_ru", стррОтвет.city.name_ru);
			стррРезультат.Вставить("city_en", стррОтвет.city.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("country") И ЗначениеЗаполнено(стррОтвет.country) Тогда
			стррРезультат.Вставить("country_ru", стррОтвет.country.name_ru); 
			стррРезультат.Вставить("country_en", стррОтвет.country.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("region") И ЗначениеЗаполнено(стррОтвет.region) Тогда
			стррРезультат.Вставить("region_ru", стррОтвет.region.name_ru); 
			стррРезультат.Вставить("region_en", стррОтвет.region.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство("error") И ЗначениеЗаполнено(стррОтвет.error) Тогда
		    стррРезультат.Вставить("error", стррОтвет.error); 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если стррРезультат.Количество() = 0 Тогда
		стррРезультат.Вставить("error", "Ошибка определения местоположения."); 
	Иначе
		МестоположениеПользователяСкорректироватьНазвания(стррРезультат);
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

Процедура МестоположениеПользователяСкорректироватьНазвания(стррМестоположение) 
	
	Для Каждого Элемент Из стррМестоположение Цикл
		Ключ = Элемент.Ключ;
		Если Прав(Ключ, 3) = "_ru" Тогда
			Значение = Элемент.Значение;
			Если СтрНайти(Значение, "ь") <> 0 Или СтрНайти(Значение, "ъ") <> 0 Или СтрНайти(Значение, "й") <> 0 Тогда
				КлючАнгл = Лев(Ключ, СтрДлина(Ключ) - 3) + "_en";
				Name = СтрЗаменить(стррМестоположение[КлючАнгл], "'", "");
				стррМестоположение[КлючАнгл] = Name;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//  Процедура - Заменить строку скрипта
//
// Параметры:
//  ТекстСкрипта	 - Строка						 - Содержит текст скрипта
//  ИсточникКарты	 - СправочникСсылка.апОнлайнКарты	 - ссылка на карту
//  Широта			 - Число							 - Широта
//  Долгота			 - Число							 - Долгота
//  Режим			 - Строка							 - Режим отображения координат
//
Процедура ЗаменитьСтрокуСкрипта(ТекстСкрипта, ИсточникКарты, Широта = 0, Долгота = 0, Режим = "Report") Экспорт 
	ПустойДивКоординатЦентра 		= "<div id=""СoordinatesСenter"" style=""display:none""></div>";
	ДивКоординатЦентраСоЗначением   = "<div id=""СoordinatesСenter"" style=""display:none"">" 
		+  CRM_РаботаСКартамиСервер.СформироватьПараметрРежимРедактора(Режим, ИсточникКарты, Широта, Долгота) 
		+ "</div>";
	ТекстСкрипта 					= СтрЗаменить(ТекстСкрипта, ПустойДивКоординатЦентра, ДивКоординатЦентраСоЗначением);
КонецПроцедуры

// Процедура - Поле браузера документ сформирован
//
// Параметры:
//  ИспользованиеWebKit	 - 	Булево - использование механизма webkit , начиная с платформы 8.3.14.0
//  Элемент				 - 	ПолеФормы 
//  ИсточникКарты		 - 	СправочникСсылка.ОнлайнКарты - Карта
//  Режим				 - 	Строка - Режим отображения координат
//
Процедура ПолеБраузераДокументСформирован(ИспользованиеWebKit, Элемент, ИсточникКарты, Режим = "Report") Экспорт
	
	Если НЕ ИспользованиеWebKit  Тогда
		ДокументБраузера = Элемент.Документ;
		ОкноБраузера 	 = ДокументБраузера.parentWindow;
		Если ОкноБраузера = Неопределено Тогда
			ОкноБраузера = ДокументБраузера.defaultView;
		КонецЕсли;
		
		ОкноБраузера.name = CRM_РаботаСКартамиСервер.СформироватьПараметрРежимРедактора(Режим, ИсточникКарты);
	Иначе
		
		#Если ВебКлиент Тогда
			СисИнфо = Новый СистемнаяИнформация;
			Если СтрНайти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") = 0 Тогда
				Документ = Элемент.Document;
				HTMLWindow = ?(Документ.parentWindow <> Неопределено, Документ.parentWindow, Документ.defaultView);
				HTMLWindow.name = CRM_РаботаСКартамиСервер.СформироватьПараметрРежимРедактора(Режим, ИсточникКарты);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
