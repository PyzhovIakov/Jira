
// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеДанныхКомпонентовИнтерфейса

// @skip-check invocation-parameter-type-intersect, property-return-type
// 
// Параметры:
//  ДанныеКомпонентов - см. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокумента(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ОписанияПодписей = Неопределено; // Неопределено,См. ОписанияУстановленныхПодписейДокумента
	ОбъектыУчета = ПараметрыЗаполнения.ОбъектыУчетаДокумента;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр; // См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПометкиНаУдаление) Тогда
		ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(
			ДанныеКомпонентов.ПанельПометкиНаУдаление, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		ДанныеКомпонентов.ПанельВизуализации.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
		ДанныеКомпонентов.ПанельКомандНастроекВизуализации.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		Если ЗначениеЗаполнено(ПредварительныйПросмотр)
			И ЗначениеЗаполнено(ПредварительныйПросмотр.ИтогиДокумента) Тогда
			ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
				ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента, ПредварительныйПросмотр.ИтогиДокумента);
		Иначе
			ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонентов.ПанельИтогов,
				СвойстваДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтветственного) Тогда
		ЗаполнитьДанныеКомпонентаПанельОтветственного(
			ДанныеКомпонентов.ПанельОтветственного, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандВходящегоДокумента) Тогда
		ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандВходящегоДокумента, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандИсходящегоДокумента) Тогда
		ИмяФайла = ?(ЗначениеЗаполнено(ПредварительныйПросмотр), ПредварительныйПросмотр.ИмяДобавляемогоФайла, "");
		ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(
			ДанныеКомпонентов.ПанельКомандИсходящегоДокумента,
			СвойстваДокумента,
			НастройкиФормы,
			ОбъектыУчета,
			ИмяФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		ЗаполнитьДанныеКомпонентаПанельПакета(
			ДанныеКомпонентов.ПанельПакета, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКарточки) Тогда
		ЗаполнитьДанныеКомпонентаПанельКарточки(
			ДанныеКомпонентов.ПанельКарточки, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСостояния) Тогда
		ЗаполнитьДанныеКомпонентаПанельСостояния(
			ДанныеКомпонентов.ПанельСостояния, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтраженияВУчете) Тогда
		ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(
			ДанныеКомпонентов.ПанельОтраженияВУчете, СвойстваДокумента, ОбъектыУчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		ОписанияПодписей = ОписанияУстановленныхПодписейДокумента(СвойстваДокумента.Ссылка);
		ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонентов.ПанельПодписей,
			ОписанияПодписей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		СопроводительныеЗаписи = СопроводительныеЗаписиДокумента(СвойстваДокумента.Ссылка);
		ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента,
			СвойстваДокумента,
			СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		СопроводительныеЗаписи = СопроводительныеЗаписиДокумента(СвойстваДокумента.Ссылка);
		ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента,
			СвойстваДокумента,
			СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел) Тогда
		ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельВизуализацииТекущихДел, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) Тогда
		ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельПредставленияФайла, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельРеквизитов) Тогда
		ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента(
			ДанныеКомпонентов.ПанельРеквизитов, СвойстваДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ОписанияУстановленныхПодписейДокумента(СвойстваДокумента.Ссылка);
		КонецЕсли;
		ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонентов.ПанельМаршрута,
			СвойстваДокумента, ОписанияПодписей, ПараметрыЗаполнения.ИзмененМаршрутПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ОписанияУстановленныхПодписейДокумента(СвойстваДокумента.Ссылка);
		КонецЕсли;
		СопроводительныеЗаписи = СопроводительныеЗаписиДокумента(СвойстваДокумента.Ссылка);
		ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента(
			ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента, ОписанияПодписей, СопроводительныеЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		Если ОписанияПодписей = Неопределено Тогда
			ОписанияПодписей = ОписанияУстановленныхПодписейДокумента(СвойстваДокумента.Ссылка);
		КонецЕсли;
		СопроводительныеЗаписи = СопроводительныеЗаписиДокумента(СвойстваДокумента.Ссылка);
		ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(
			ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента, ОписанияПодписей, СопроводительныеЗаписи,
			СвойстваДокумента);
	КонецЕсли;
	
КонецПроцедуры

//@skip-check statement-type-change, property-return-type, invocation-parameter-type-intersect
//
// Параметры:
//  ДанныеКомпонентов - см. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПолученияДанныхКомпонентов
Процедура ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	ПредварительныйПросмотр = ПараметрыЗаполнения.ПредварительныйПросмотр; // См. ЛегкийИнтерфейсДокументовЭДО.НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов 
	ТребуетсяОбновитьКэш = ПараметрыЗаполнения.НастройкиФормы.ПеречитатьКэшВизуализации;
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации)
		И ДанныеКомпонентов.ПанельВизуализации.АсинхронноеПолучение Тогда
		ПараметрыВизуализации = ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = НастройкиФормы.ВыводитьБанковскиеРеквизиты;
		ПараметрыВизуализации.ВыводитьДопДанные = Не НастройкиФормы.ОтключитьВыводДопДанных;
		ПараметрыВизуализации.ВыводитьКопияВерна = Не НастройкиФормы.ОтключитьВыводКопияВерна;
		ПараметрыВизуализации.ВыводитьШапкуСИдДокумента = Ложь;
		
		Если ЗначениеЗаполнено(ПредварительныйПросмотр) Тогда
			ПараметрыПредварительнойВизуализации = ЭлектронныеДокументыЭДО.НовыеПараметрыПредварительнойВизуализацииДокумента();
			ПараметрыПредварительнойВизуализации.ТипДокумента = СвойстваДокумента.ТипДокумента;
			ПараметрыПредварительнойВизуализации.ВидДокумента = СвойстваДокумента.ВидДокумента;
			ПараметрыПредварительнойВизуализации.ДвоичныеДанныеФайла = 
				ПредварительныйПросмотр.ДвоичныеДанныеДобавляемогоФайла;
			ПараметрыПредварительнойВизуализации.ИмяФайла = ПредварительныйПросмотр.ИмяДобавляемогоФайла;
			ПараметрыПредварительнойВизуализации.ПараметрыВизуализации = ПараметрыВизуализации;
			ПараметрыПредварительнойВизуализации.ДвоичныеДанныеФайлаОтвета = 
				ПредварительныйПросмотр.ДвоичныеДанныеФайлаОтвета;
			ПараметрыПредварительнойВизуализации.ФорматОсновногоТитула = СвойстваДокумента.ФорматОсновногоТитула;
			
			ВизуализацияДокумента = ВизуализацияЭДОСлужебный.ПредварительнаяВизуализацияДокумента(ПараметрыПредварительнойВизуализации);
		Иначе
			ДанныеДокументаДляФормированияВизуализации = ВизуализацияЭДОСлужебный.НовыеСвойстваДокументаДляФормированияВизуализации();
			ЗаполнитьЗначенияСвойств(ДанныеДокументаДляФормированияВизуализации, СвойстваДокумента);
			ВизуализацияДокумента = ВизуализацияЭДОСлужебный.ВизуализацияДокумента(
				ДанныеДокументаДляФормированияВизуализации, ПараметрыВизуализации, ТребуетсяОбновитьКэш);
		КонецЕсли;
		
		ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонентов.ПанельВизуализации, ВизуализацияДокумента,
			НастройкиФормы);
		
		Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
			ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(
				ДанныеКомпонентов.ПанельКомандНастроекВизуализации, ВизуализацияДокумента, НастройкиФормы);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов)
		И ДанныеКомпонентов.ПанельИтогов.АсинхронноеПолучение Тогда
		ИтогиДокумента = ЭлектронныеДокументыЭДО.ИтогиДокументаПоСодержанию(СвойстваДокумента.Ссылка);
		
		ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(
			ДанныеКомпонентов.ПанельИтогов, СвойстваДокумента, ИтогиДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализацииТекущихДел)
		И ДанныеКомпонентов.ПанельВизуализацииТекущихДел.АсинхронноеПолучение Тогда
		ПараметрыВизуализации = ЭлектронныеДокументыЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = Ложь;
		ПараметрыВизуализации.ВыводитьДопДанные = Ложь;
		ПараметрыВизуализации.ВыводитьКопияВерна = Ложь;
		ПараметрыВизуализации.ВыводитьШапкуСИдДокумента = Ложь;
		
		ДанныеДокументаДляФормированияВизуализации = ЭлектронныеДокументыЭДО.НовыеСвойстваДокументаДляФормированияВизуализации();
		ЗаполнитьЗначенияСвойств(ДанныеДокументаДляФормированияВизуализации, СвойстваДокумента);
		ВизуализацияДокумента = ВизуализацияЭДОСлужебный.ВизуализацияДокумента(ДанныеДокументаДляФормированияВизуализации,
			ПараметрыВизуализации, ТребуетсяОбновитьКэш);
		
		ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел(
			ДанныеКомпонентов.ПанельВизуализацииТекущихДел, ВизуализацияДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла)
		И ДанныеКомпонентов.ПанельПредставленияФайла.АсинхронноеПолучение Тогда
		НастройкиПредставления = ВизуализацияЭДО.НовыеНастройкиПредставления();
		КэшФайлаВизуализации = ВизуализацияЭДО.ПолучитьВизуализациюИзКэша(
			СвойстваДокумента.Ссылка, НастройкиПредставления);
		Если КэшФайлаВизуализации.ПросмотрДоступен 
			И КэшФайлаВизуализации.ТипДанных = Перечисления.ТипыДанныхВизуализацииДокументаЭДО.PdfДокумент Тогда
			РезультатШтампирования = Новый Структура;
			РезультатШтампирования.Вставить("Успех", Истина);
			РезультатШтампирования.Вставить("ПредставлениеДокумента", КэшФайлаВизуализации.ПредставлениеДокумента);
			РезультатШтампирования.Вставить("ТекстОшибки", "");
		Иначе
			РезультатШтампирования = Неопределено;
		КонецЕсли;
		ЗаполнитьДанныеКомпонентаПанельПредставленияФайла(
			ДанныеКомпонентов.ПанельПредставленияФайла, РезультатШтампирования);
	КонецЕсли;
	
КонецПроцедуры

#Область ПанельКарточки

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКарточки
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКарточки
//  СвойстваДокумента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельКарточки(ДанныеКомпонента, СвойстваДокумента) Экспорт
	
	КоличествоДокументовВПакете = 0;
	Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
		ЗаполнитьДанныеКомпонентаПанельКарточкиПоПараметрам(ДанныеКомпонента, СвойстваДокумента,
			КоличествоДокументовВПакете);
		Возврат;
	КонецЕсли;
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(СвойстваДокумента.Ссылка);
	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ЭлектронныеДокументыПакета = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
		КоличествоДокументовВПакете = ЭлектронныеДокументыПакета.Количество();
	КонецЕсли;
	
	ЗаполнитьДанныеКомпонентаПанельКарточкиПоПараметрам(ДанныеКомпонента, СвойстваДокумента,
		КоличествоДокументовВПакете);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельКарточки
// 
// Возвращаемое значение:
//  Структура:
// * ТекстЗаголовка - Строка
Функция НовыеДанныеКомпонентаПанельКарточки() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ТекстЗаголовка", "");
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельКарточки

#Область ПанельПометкиНаУдаление

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПометкиНаУдаление
//  СвойстваДокумента - Структура:
//  * ПометкаУдаления - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(ДанныеКомпонента, СвойстваДокумента) Экспорт

	//@skip-check property-return-type
	ДанныеКомпонента.ДокументПомеченНаУдаление = СвойстваДокумента.ПометкаУдаления;

КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПометкиНаУдаление
// 
// Возвращаемое значение:
//  Структура:
//  * ДокументПомеченНаУдаление - Булево
Функция НовыеДанныеКомпонентаПанельПометкиНаУдаление() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ДокументПомеченНаУдаление", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельПометкиНаУдаление

#Область ПанельКомандВходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента
// @skip-check property-return-type, invocation-parameter-type-intersect, dynamic-access-method-not-found, variable-value-type
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
//  СвойстваДокумента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(ДанныеКомпонента, СвойстваДокумента) Экспорт
	
	ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
	
	СостояниеЭДОДокумента = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(ЭлектронныйДокумент);
	
	СвойстваДокументаДляОпределенияДействий = 
		ЭлектронныеДокументыЭДО.НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО();
	ЗаполнитьЗначенияСвойств(СвойстваДокументаДляОпределенияДействий, СвойстваДокумента);
	
	ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
		СостояниеЭДОДокумента, СвойстваДокументаДляОпределенияДействий);
		
	ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокументаПакета = 
		ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокумента);
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
	ДанныеКомпонента.ЭтоПакетДокументов = ЗначениеЗаполнено(ИдентификаторПакета);
	
	ДанныеКомпонента.ИспользуетсяОтложеннаяОтправка = НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
	
	ДанныеКомпонента.ЕстьПравоВыполненияОбмена = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ДанныеКомпонента.ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	ВидыДокументовИнтеркампани = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИнтеркампани();
	ДанныеКомпонента.ЭтоИнтеркампани = ВидыДокументовИнтеркампани.Найти(СвойстваДокумента.ВидДокумента) <> Неопределено;
	
	ДанныеКомпонента.ТипДокумента = СвойстваДокумента.ТипДокумента;
	
	ДанныеКомпонента.ЭтоПрикладнойВидДокумента = ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(
		СвойстваДокумента.ВидДокумента);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * ДоступныеДействияПоЭДОДляДокумента - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступныеДействияПоЭДОДляДокументаПакета - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ЭтоПакетДокументов - Булево
//  * ЭтоИнтеркампани - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭтоПрикладнойВидДокумента - Булево
Функция НовыеДанныеКомпонентаПанельКомандВходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ДоступныеДействияПоЭДОДляДокумента", Новый Соответствие);
	ДанныеКомпонента.Вставить("ДоступныеДействияПоЭДОДляДокументаПакета", Новый Соответствие);
	ДанныеКомпонента.Вставить("ИспользуетсяОтложеннаяОтправка", Ложь);
	ДанныеКомпонента.Вставить("ЕстьПравоОбработкиДокументов", Ложь);
	ДанныеКомпонента.Вставить("ЕстьПравоВыполненияОбмена", Ложь);
	ДанныеКомпонента.Вставить("ЭтоПакетДокументов", Ложь);
	ДанныеКомпонента.Вставить("ЭтоИнтеркампани", Ложь);
	ДанныеКомпонента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ЭтоПрикладнойВидДокумента", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельКомандВходящегоДокумента

#Область ПанельКомандИсходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента
// @skip-check property-return-type, invocation-parameter-type-intersect, dynamic-access-method-not-found, variable-value-type
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
//  НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
//  ОбъектыУчета - Неопределено
//               - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ИмяДобавляемогоФайла - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(ДанныеКомпонента, СвойстваДокумента,
	НастройкиФормы, ОбъектыУчета = Неопределено, ИмяДобавляемогоФайла = "") Экспорт
	
	ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
	
	СостояниеЭДОДокумента = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(ЭлектронныйДокумент);
	
	СвойстваДокументаДляОпределенияДействий = 
		ЭлектронныеДокументыЭДО.НовыеСвойстваДокументаДляОпределенияДоступныхДействийПоЭДО();
	ЗаполнитьЗначенияСвойств(СвойстваДокументаДляОпределенияДействий, СвойстваДокумента);
	
	ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
		СостояниеЭДОДокумента, СвойстваДокументаДляОпределенияДействий);
		
	ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокументаПакета = 
		ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокумента);
	
	ДанныеКомпонента.ДоступноИзменениеПакета = Истина;
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
	СостоянияЭлектронныхДокументов = Новый Массив; // Массив Из ПеречислениеСсылка.СостоянияДокументовЭДО
	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДанныеКомпонента.ЭтоПакетДокументов = Истина;

		ЭлектронныеДокументыПакета = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
		СостоянияПоДокументам = ЭлектронныеДокументыЭДО.СостоянияДокументов(ЭлектронныеДокументыПакета);
		Для Каждого СостояниеПоДокументу Из СостоянияПоДокументам Цикл
			СостоянияЭлектронныхДокументов.Добавить(СостояниеПоДокументу.Значение);
		КонецЦикла;
	Иначе
		СостоянияЭлектронныхДокументов.Добавить(СостояниеЭДОДокумента);
	КонецЕсли;
	
	Если ДанныеКомпонента.ЭтоПакетДокументов
		И ЭлектронныеДокументыЭДО.ВыполнениеДействийДляОтдельногоДокументаПакетаЗапрещеноПоСостоянию(
			СостояниеЭДОДокумента) Тогда
		
		ДействияДляУдаления = Новый Массив; // Массив Из ПеречислениеСсылка.ДействияПоЭДО
		Для Каждого ДоступноеДействие Из ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокументаПакета Цикл
			
			Если ЭлектронныеДокументыЭДО.ДействиеДляОтдельногоДокументаПакетаНеЗависитОтЗапретаПоСостоянию(
				ДоступноеДействие.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияДляУдаления.Добавить(ДоступноеДействие.Ключ);
		КонецЦикла;
		
		Для Каждого ДействиеДляУдаления Из ДействияДляУдаления Цикл
			ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокументаПакета.Удалить(ДействиеДляУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоВнутреннийВидДокумента = ИнтерфейсДокументовЭДО.ЭтоВнутреннийВидДокумента(
		СвойстваДокумента.ВидДокумента);
		
	ЭтоПрикладнойВидДокумента = ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(СвойстваДокумента.ВидДокумента);
	
	ДанныеКомпонента.ДоступноИзменениеПакета = Не ЭтоВнутреннийВидДокумента 
		И СвойстваДокумента.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		И ПакетыДокументовЭДО.ДоступноИзменениеПакета(СостоянияЭлектронныхДокументов);
	
	ДанныеКомпонента.ИспользуетсяОтложеннаяОтправка = НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
	
	ДанныеКомпонента.ЕстьПравоВыполненияОбмена = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ДанныеКомпонента.ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	ДанныеКомпонента.ОтключитьТранслитерацию = НастройкиФормы.ОтключитьТранслитерацию;
	
	Если СвойстваДокумента.ЭтоНовыйДокумент
		И СвойстваДокумента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Неформализованный
		И СостояниеЭДОДокумента = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		
		ДанныеКомпонента.ТранслитерацияДоступна = Не ЭтоВнутреннийВидДокумента И Не ЭтоПрикладнойВидДокумента
			И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ИмяДобавляемогоФайла);
		
	КонецЕсли; 
	
	ДанныеКомпонента.ДоступноФормированиеФормализованныхЭДИзФайлов = 
		Не ПолучитьФункциональнуюОпцию("ЗапретитьФормированиеФормализованныхЭДИзФайлов");
	
	ДанныеКомпонента.СостояниеЭДО = СостояниеЭДОДокумента;
	 
	ДанныеКомпонента.ЭтоВнутреннийВидДокумента = ЭтоВнутреннийВидДокумента;
	
	ДанныеКомпонента.ЭтоПрикладнойВидДокумента = ЭтоПрикладнойВидДокумента;
	
	Если ЗначениеЗаполнено(ОбъектыУчета) Тогда
		ДанныеКомпонента.ПереформированиеДоступно = Не ЭтоВнутреннийВидДокумента И Не ЭтоПрикладнойВидДокумента
			И ПереформированиеДоступно(СостояниеЭДОДокумента, СвойстваДокумента.ТипДокумента, ОбъектыУчета[0]);
	КонецЕсли;
	
	ДанныеКомпонента.ТипРегламента = СвойстваДокумента.ТипРегламента;
	
	ДанныеКомпонента.ЭтоНовыйДокумент = СвойстваДокумента.ЭтоНовыйДокумент;
	
	ВидыДокументовИнтеркампани = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИнтеркампани();
	ДанныеКомпонента.ЭтоИнтеркампани = ВидыДокументовИнтеркампани.Найти(СвойстваДокумента.ВидДокумента) <> Неопределено;
	
	ДанныеКомпонента.ТипДокумента = СвойстваДокумента.ТипДокумента;
	
	ДанныеКомпонента.ДоступноИзменениеНастроекФормированияИОтправки = 
		(СвойстваДокумента.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО 
		Или СвойстваДокумента.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		И (СостояниеЭДОДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или СостояниеЭДОДокумента = Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * ДоступныеДействияПоЭДОДляДокумента - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступныеДействияПоЭДОДляДокументаПакета - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступноИзменениеПакета - Булево
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ОтключитьТранслитерацию - Булево
//  * ТранслитерацияДоступна - Булево
//  * ДоступноФормированиеФормализованныхЭДИзФайлов - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ЭтоВнутреннийВидДокумента - Булево
//  * ПереформированиеДоступно - Булево
//  * ЭтоПакетДокументов - Булево
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ЭтоНовыйДокумент - Булево
//  * ЭтоИнтеркампани - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭтоПрикладнойВидДокумента - Булево
//  * ДоступноИзменениеНастроекФормированияИОтправки - Булево
Функция НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ДоступныеДействияПоЭДОДляДокумента", Новый Соответствие);
	ДанныеКомпонента.Вставить("ДоступныеДействияПоЭДОДляДокументаПакета", Новый Соответствие);
	ДанныеКомпонента.Вставить("ДоступноИзменениеПакета", Ложь);
	ДанныеКомпонента.Вставить("ИспользуетсяОтложеннаяОтправка", Ложь);
	ДанныеКомпонента.Вставить("ЕстьПравоОбработкиДокументов", Ложь);
	ДанныеКомпонента.Вставить("ЕстьПравоВыполненияОбмена", Ложь);
	ДанныеКомпонента.Вставить("ОтключитьТранслитерацию", Ложь);
	ДанныеКомпонента.Вставить("ТранслитерацияДоступна", Ложь); 
	ДанныеКомпонента.Вставить("ДоступноФормированиеФормализованныхЭДИзФайлов", Ложь);
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ЭтоВнутреннийВидДокумента", Ложь);
	ДанныеКомпонента.Вставить("ПереформированиеДоступно", Ложь); 
	ДанныеКомпонента.Вставить("ЭтоПакетДокументов", Ложь);
	ДанныеКомпонента.Вставить("ТипРегламента", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ЭтоНовыйДокумент", Ложь);
	ДанныеКомпонента.Вставить("ЭтоИнтеркампани", Ложь);
	ДанныеКомпонента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ЭтоПрикладнойВидДокумента", Ложь);
	ДанныеКомпонента.Вставить("ДоступноИзменениеНастроекФормированияИОтправки", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельКомандИсходящегоДокумента

#Область ПанельПакета

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакета
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПакета
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ЭтоНовыйДокумент - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента) Экспорт
	
	Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ДанныеДокументовПакета = ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета(СвойстваДокумента);
	Если ДанныеДокументовПакета <> Неопределено Тогда
		ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам(ДанныеКомпонента, ДанныеДокументовПакета);
	КонецЕсли;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ИменаФайловОтправителей - См. ЭлектронныеДокументыЭДО.ИменаФайловОтправителейДокументов
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ИдентификаторПакета - Неопределено,УникальныйИдентификатор
//  * ВыборкаСвойствДокументов - ВыборкаИзРезультатаЗапроса:
//    ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//    ** НомерДокумента - Строка
//    ** ДатаДокумента - Дата
//    ** ФорматОсновногоТитула - Строка
//    ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ВыборкаСостоянийДокументов - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//    ** Комментарий - Строка
//  * ВыборкаОбъектовУчета - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** СпособОбработки - Строка
//    ** Актуальный - Булево
//  * ВыборкаСостоянийОтраженияВУчете - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** СопоставитьНоменклатуру - Булево
//    ** СоздатьУчетныйДокумент - Булево
//    ** ПровестиУчетныйДокумент - Булево
//  * ВыборкаСостоянийПроверкиПодписи - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ДатаПроверкиПодписиПоМЧД - Дата
//    ** ЕстьНевалидныеПодписиПоМЧД - Булево
//  * ИменаФайловОтправителей - Неопределено
//                            - Соответствие Из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - Строка
Функция ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета(СвойстваДокумента,
	ИменаФайловОтправителей = Неопределено) Экспорт
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(
		СвойстваДокумента.Ссылка);
	
	Если Не ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныеДокументыПакета = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
	
	ТекстыЗапроса = Новый Массив; // Массив Из Строка
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаДанныхДокументовДляФормированияПредставления());
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянийДокументов());
	ТекстыЗапроса.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	ТекстыЗапроса.Добавить(ОтражениеВУчетеЭДО.ТекстЗапросаДанныхКонтроляОтраженияВУчете());
	ТекстыЗапроса.Добавить(ТекстЗапросаНевалидныхПодписейПоМЧДЭлектронныхДокументов());
	Если ИменаФайловОтправителей = Неопределено Тогда
		ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаИменФайловОтправителейДокументов());
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументыПакета);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныеДокументыПакета);

	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИменаФайловОтправителей = Неопределено Тогда
		ИменаФайловОтправителей = Новый Соответствие; // Соответствие Из КлючИЗначение
		ВыборкаИменФайлов = РезультатыЗапросов[5].Выбрать();
		Пока ВыборкаИменФайлов.Следующий() Цикл
			//@skip-check property-return-type
			ИменаФайловОтправителей.Вставить(ВыборкаИменФайлов.ЭлектронныйДокумент, ВыборкаИменФайлов.ПолноеИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДокументовПакета = Новый Структура;
	ДанныеДокументовПакета.Вставить("ИдентификаторПакета", ИдентификаторПакета);
	ДанныеДокументовПакета.Вставить("ВыборкаСвойствДокументов", РезультатыЗапросов[0].Выбрать());
	ДанныеДокументовПакета.Вставить("ВыборкаСостоянийДокументов", РезультатыЗапросов[1].Выбрать());
	ДанныеДокументовПакета.Вставить("ВыборкаОбъектовУчета", РезультатыЗапросов[2].Выбрать());
	ДанныеДокументовПакета.Вставить("ВыборкаСостоянийОтраженияВУчете", РезультатыЗапросов[3].Выбрать());
	ДанныеДокументовПакета.Вставить("ВыборкаСостоянийПроверкиПодписи", РезультатыЗапросов[4].Выбрать());
	ДанныеДокументовПакета.Вставить("ИменаФайловОтправителей", ИменаФайловОтправителей);
	Возврат ДанныеДокументовПакета;
	
КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам
// @skip-check property-return-type, invocation-parameter-type-intersect, dynamic-access-method-not-found, variable-value-type
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПакета
//  ДанныеДокументовПакета - См. ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета
Процедура ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам(ДанныеКомпонента, ДанныеДокументовПакета) Экспорт
	
	ДанныеКомпонента.ДанныеДокументовПакета.Очистить();
	
	ИменаФайловОтправителей = ДанныеДокументовПакета.ИменаФайловОтправителей;
	ВыборкаСвойствДокументов = ДанныеДокументовПакета.ВыборкаСвойствДокументов;
	Пока ВыборкаСвойствДокументов.Следующий() Цикл
		НовыйДокументПакета = ДанныеКомпонента.ДанныеДокументовПакета.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйДокументПакета, ВыборкаСвойствДокументов);
		НовыйДокументПакета.ЭлектронныйДокумент = ВыборкаСвойствДокументов.ЭлектронныйДокумент;
		НовыйДокументПакета.ПолноеСостояние = НовыеДанныеКомпонентаПанельСостояния();
		НовыйДокументПакета.ИмяФайла = ИменаФайловОтправителей[ВыборкаСвойствДокументов.ЭлектронныйДокумент];
	КонецЦикла;
	
	СостоянияДокументовПакета = Новый Массив; // Массив из ПеречислениеСсылка.СостоянияДокументовЭДО
	ВыборкаСостоянийДокументов = ДанныеДокументовПакета.ВыборкаСостоянийДокументов;
	Пока ВыборкаСостоянийДокументов.Следующий() Цикл
		СостоянияДокументовПакета.Добавить(ВыборкаСостоянийДокументов.Состояние);
		ПолноеСостояниеПоДокументу = ДанныеКомпонента.ДанныеДокументовПакета.Найти(
			ВыборкаСостоянийДокументов.ЭлектронныйДокумент, "ЭлектронныйДокумент").ПолноеСостояние;
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоСостояниюЭДО(ПолноеСостояниеПоДокументу,
			ВыборкаСостоянийДокументов.Состояние, ВыборкаСостоянийДокументов.Комментарий);
	КонецЦикла;
	
	ВыборкаОбъектовУчета = ДанныеДокументовПакета.ВыборкаОбъектовУчета;
	Пока ВыборкаОбъектовУчета.Следующий() Цикл
		ПолноеСостояниеПоДокументу = ДанныеКомпонента.ДанныеДокументовПакета.Найти(
			ВыборкаОбъектовУчета.ЭлектронныйДокумент, "ЭлектронныйДокумент").ПолноеСостояние;
		ЗаполнитьДанныеКомпонентаПанельСостоянияДляПринятогоКУчетуДокумента(ПолноеСостояниеПоДокументу);
	КонецЦикла;
	
	ВыборкаСостоянийОтраженияВУчете = ДанныеДокументовПакета.ВыборкаСостоянийОтраженияВУчете;
	Пока ВыборкаСостоянийОтраженияВУчете.Следующий() Цикл
		ПолноеСостояниеПоДокументу = ДанныеКомпонента.ДанныеДокументовПакета.Найти(
			ВыборкаСостоянийОтраженияВУчете.ЭлектронныйДокумент, "ЭлектронныйДокумент").ПолноеСостояние;
		ДанныеКонтроля = НовыеДанныеКонтроляОтраженияВУчете();
		ДанныеКонтроля.ПроведенУчетныйДокумент = Не ВыборкаСостоянийОтраженияВУчете.ПровестиУчетныйДокумент;
		ДанныеКонтроля.СозданУчетныйДокумент = Не ВыборкаСостоянийОтраженияВУчете.СоздатьУчетныйДокумент;
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоДаннымКонтроляОтраженияВУчете(ПолноеСостояниеПоДокументу,
			ДанныеКонтроля);
	КонецЦикла;
	
	ВыборкаСостоянийПроверкиПодписи = ДанныеДокументовПакета.ВыборкаСостоянийПроверкиПодписи;
	Пока ВыборкаСостоянийПроверкиПодписи.Следующий() Цикл
		ПолноеСостояниеПоДокументу = ДанныеКомпонента.ДанныеДокументовПакета.Найти(
			ВыборкаСостоянийПроверкиПодписи.ЭлектронныйДокумент, "ЭлектронныйДокумент").ПолноеСостояние;
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоНаличиюНевалидныхПодписей(ПолноеСостояниеПоДокументу,
			ВыборкаСостоянийПроверкиПодписи.ЕстьНевалидныеПодписиПоМЧД);
	КонецЦикла;
	
	ДанныеКомпонента.ИдентификаторПакета = ДанныеДокументовПакета.ИдентификаторПакета;
	ДанныеКомпонента.СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПакета);
	ДанныеКомпонента.СостоянияПакетаОднородно = ЗначениеЗаполнено(ДанныеКомпонента.СостояниеПакета);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПакета
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ДанныеДокументовПакета - См. НовыйНаборДанныхДокументовПакета
//  * ИдентификаторПакета - Неопределено
//                        - УникальныйИдентификатор
//  * СостояниеПакета - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостоянияПакетаОднородно - Булево
Функция НовыеДанныеКомпонентаПанельПакета() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("ДанныеДокументовПакета", НовыйНаборДанныхДокументовПакета());
	ДанныеКомпонента.Вставить("ИдентификаторПакета", Неопределено);
	ДанныеКомпонента.Вставить("СостояниеПакета", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("СостоянияПакетаОднородно", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДО.НовыйНаборДанныхДокументовПакета
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ИмяФайла - Строка
//  * ФорматОсновногоТитула - Строка
//  * ТипРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ПолноеСостояние - См. НовыеДанныеКомпонентаПанельСостояния
Функция НовыйНаборДанныхДокументовПакета() Экспорт

	ДанныеДокументовПакета = Новый ТаблицаЗначений;
	ДанныеДокументовПакета.Колонки.Добавить("ЭлектронныйДокумент", Новый ОписаниеТипов(
		"ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	ДанныеДокументовПакета.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО"));
	ДанныеДокументовПакета.Колонки.Добавить("ТипДокумента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовЭДО"));
	ДанныеДокументовПакета.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДокументовПакета.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеДокументовПакета.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДанныеДокументовПакета.Колонки.Добавить("ФорматОсновногоТитула", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДокументовПакета.Колонки.Добавить("ТипРегламента", 
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРегламентовЭДО"));
	ДанныеДокументовПакета.Колонки.Добавить("ПолноеСостояние");
	Возврат ДанныеДокументовПакета;

КонецФункции

#КонецОбласти // ПанельПакета

#Область ПанельСостояния

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСостояния
// @skip-check property-return-type, invocation-parameter-type-intersect
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
//  СвойстваДокумента - Структура:
//  * ЭтоНовыйДокумент - Булево
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельСостояния(ДанныеКомпонента, СвойстваДокумента) Экспорт

	Если СвойстваДокумента.ЭтоНовыйДокумент Тогда
		ДанныеКомпонента.СостояниеЭДО = 
			ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив; // Массив Из Строка
	ТекстыЗапроса.Добавить(ЭлектронныеДокументыЭДО.ТекстЗапросаСостоянияДокумента());
	ТекстыЗапроса.Добавить(ИнтеграцияЭДО.ТекстЗапросаОбъектовУчетаЭлектронныхДокументов());
	ТекстыЗапроса.Добавить(ОтражениеВУчетеЭДО.ТекстЗапросаДанныхКонтроляОтраженияВУчете());
	ТекстыЗапроса.Добавить(ТекстЗапросаНевалидныхПодписейПоМЧДЭлектронныхДокументов());

	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СвойстваДокумента.Ссылка);

	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаДанныхПоСостоянию = РезультатыЗапросов[0].Выбрать();
	Если ВыборкаДанныхПоСостоянию.Следующий() Тогда
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоСостояниюЭДО(ДанныеКомпонента, ВыборкаДанныхПоСостоянию.Состояние,
			ВыборкаДанныхПоСостоянию.Комментарий);
	КонецЕсли;

	ВыборкаДанныхПоОбъектамУчета = РезультатыЗапросов[1].Выбрать();
	Если ВыборкаДанныхПоОбъектамУчета.Следующий() Тогда
		ЗаполнитьДанныеКомпонентаПанельСостоянияДляПринятогоКУчетуДокумента(ДанныеКомпонента);
	КонецЕсли;

	ВыборкаДанныхПоОтражениюВУчете = РезультатыЗапросов[2].Выбрать();
	Если ВыборкаДанныхПоОтражениюВУчете.Следующий() Тогда
		ДанныеКонтроля = НовыеДанныеКонтроляОтраженияВУчете();
		ДанныеКонтроля.ПроведенУчетныйДокумент = Не ВыборкаДанныхПоОтражениюВУчете.ПровестиУчетныйДокумент;
		
		ДанныеКонтроля.СозданУчетныйДокумент = Не ВыборкаДанныхПоОтражениюВУчете.СоздатьУчетныйДокумент;
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоДаннымКонтроляОтраженияВУчете(ДанныеКомпонента, ДанныеКонтроля);
	КонецЕсли;

	ВыборкаДанныхНевалидныхПодписей = РезультатыЗапросов[3].Выбрать();
	Пока ВыборкаДанныхНевалидныхПодписей.Следующий() Цикл
		ЗаполнитьДанныеКомпонентаПанельСостоянияПоНаличиюНевалидныхПодписей(ДанныеКомпонента,
			ВыборкаДанныхНевалидныхПодписей.ЕстьНевалидныеПодписиПоМЧД);
	КонецЦикла;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельСостояния
// 
// Возвращаемое значение:
//  Структура:
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО 
//  * КомментарийКСостояниюЭДО - Строка
//  * КонтрольОтраженияВУчете - См. НовыеДанныеКонтроляОтраженияВУчете
//  * ОшибкиВПодписях - Булево 
Функция НовыеДанныеКомпонентаПанельСостояния() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("КомментарийКСостояниюЭДО", "");
	ДанныеКомпонента.Вставить("КонтрольОтраженияВУчете", НовыеДанныеКонтроляОтраженияВУчете());
	ДанныеКомпонента.Вставить("ОшибкиВПодписях", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКонтроляОтраженияВУчете
// 
// Возвращаемое значение:
//  Структура:
// * ТребуетсяОтражениеВУчете - Булево
// * СозданУчетныйДокумент - Булево
// * ПроведенУчетныйДокумент - Булево
Функция НовыеДанныеКонтроляОтраженияВУчете() Экспорт

	ДанныеПринятияКУчету = Новый Структура;
	ДанныеПринятияКУчету.Вставить("ТребуетсяОтражениеВУчете", Ложь);
	ДанныеПринятияКУчету.Вставить("СозданУчетныйДокумент", Ложь);
	ДанныеПринятияКУчету.Вставить("ПроведенУчетныйДокумент", Ложь);
	Возврат ДанныеПринятияКУчету;

КонецФункции

#КонецОбласти // ПанельСостояния

#Область ПанельИтогов

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтогов
//
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  * ФорматОсновногоТитула - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента) Экспорт
	
	ДанныеКомпонента.СуммаДокумента = СвойстваДокумента.СуммаДокумента;
	
	Если ЗначениеЗаполнено(СвойстваДокумента.ФорматОсновногоТитула) Тогда
		ДанныеКомпонента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  ДанныеИзСодержания - Неопределено,Структура:
//  * Сумма - Число
//  * СуммаНДС - Число
//  * ПредставлениеВалюты - Строка
//  * ПредставлениеСтавкиНДС - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(ДанныеКомпонента, СвойстваДокумента, 
	ДанныеИзСодержания) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	ДанныеКомпонента.СуммаДокумента = СвойстваДокумента.СуммаДокумента;
	
	Если ДанныеИзСодержания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.СуммаДокумента = ДанныеИзСодержания.Сумма;
	ДанныеКомпонента.СуммаНДСДокумента = ДанныеИзСодержания.СуммаНДС;
	ДанныеКомпонента.ВалютаДокумента = ДанныеИзСодержания.ПредставлениеВалюты;
	ДанныеКомпонента.СтавкаНДСДокумента = ДанныеИзСодержания.ПредставлениеСтавкиНДС;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельИтогов
//
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СуммаДокумента - Число
//  * ВалютаДокумента - Строка
//  * СтавкаНДСДокумента - Строка
//  * СуммаНДСДокумента - Число
Функция НовыеДанныеКомпонентаПанельИтогов() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("СуммаДокумента", 0);
	ДанныеКомпонента.Вставить("ВалютаДокумента", "");
	ДанныеКомпонента.Вставить("СтавкаНДСДокумента", "");
	ДанныеКомпонента.Вставить("СуммаНДСДокумента", 0);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельИтогов

#Область ПанельОтветственного

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтветственного
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельОтветственного
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельОтветственного(ДанныеКомпонента, СвойстваДокумента) Экспорт

	ДанныеКомпонента.ОтветственныйПоДокументу = СвойстваДокумента.Ответственный;
	ДанныеКомпонента.ИспользуетсяРазделениеДокументовПоОтветственным = 
		ПолучитьФункциональнуюОпцию("ИспользоватьРазделениеДокументовПоОтветственнымЭДО");
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельОтветственного
// 
// Возвращаемое значение:
//  Структура:
//  * ОтветственныйПоДокументу - СправочникСсылка.Пользователи
//  * ИспользуетсяРазделениеДокументовПоОтветственным - Булево
Функция НовыеДанныеКомпонентаПанельОтветственного() Экспорт
	
	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ОтветственныйПоДокументу", Справочники.Пользователи.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ИспользуетсяРазделениеДокументовПоОтветственным", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельОтветственного

#Область ПанельОтраженияВУчете

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельОтраженияВУчете
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
//  ОбъектыУчета - Неопределено
//               - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(ДанныеКомпонента, СвойстваДокумента,
	ОбъектыУчета = Неопределено) Экспорт

	ДанныеДокументаДляПроверкиРаспознавания = ЭлектронныеДокументыЭДО.НовыеДанныеДокументаДляПроверкиРаспознавания();
	ПроверкаЗаписанногоДокумента = ЭлектронныеДокументыЭДО.НовыеДанныеЗаписанногоДокументаДляПроверкиРаспознавания();
	ЗаполнитьЗначенияСвойств(ПроверкаЗаписанногоДокумента, СвойстваДокумента);
	ДанныеДокументаДляПроверкиРаспознавания.ПроверкаЗаписанногоДокумента = ПроверкаЗаписанногоДокумента;
	ДанныеКомпонента.ДокументРаспознан = ЭлектронныеДокументыЭДО.ДокументРаспознан(
		ДанныеДокументаДляПроверкиРаспознавания);
		
	ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
	СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(СвойстваДокумента.ФорматОсновногоТитула) Тогда
		ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете = ИнтеграцияЭДО.ДоступноОтражениеВУчете(
			СвойстваДокумента.ФорматОсновногоТитула, СвойстваДокумента.ТипДокумента, СостояниеЭДО);
	Иначе
		ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете = ДанныеКомпонента.ДокументРаспознан;
	КонецЕсли;
		
	ДанныеКомпонента.ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	ДанныеКомпонента.ЭтоВнутреннийВидДокумента = ИнтерфейсДокументовЭДО.ЭтоВнутреннийВидДокумента(
		СвойстваДокумента.ВидДокумента);
		
	ДанныеКомпонента.ЭтоПрикладнойВидДокумента = ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(
		СвойстваДокумента.ВидДокумента);
	
	ДанныеКомпонента.ОбъектыУчетаДокумента.Очистить();
	Если СвойстваДокумента.ЭтоНовыйДокумент 
		И ЗначениеЗаполнено(ОбъектыУчета) Тогда
		Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
			Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
				Продолжить;
			КонецЕсли;
			НовыеДанныеОбъектаУчета = НовыеДанныеОбъектаУчетаДокумента();
			НовыеДанныеОбъектаУчета.ОбъектУчета = ОбъектУчета;
			ДанныеКомпонента.ОбъектыУчетаДокумента.Добавить(НовыеДанныеОбъектаУчета);
		КонецЦикла;
		Возврат;
	ИначеЕсли СвойстваДокумента.ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчетаДокумента = ИнтеграцияЭДО.АктуальныеОбъектыУчетаСДаннымиПроведения(ЭлектронныйДокумент);
	Для Каждого ОбъектУчета Из ОбъектыУчетаДокумента Цикл
		НовыеДанныеОбъектаУчета = НовыеДанныеОбъектаУчетаДокумента();
		ЗаполнитьЗначенияСвойств(НовыеДанныеОбъектаУчета, ОбъектУчета);
		ДанныеКомпонента.ОбъектыУчетаДокумента.Добавить(НовыеДанныеОбъектаУчета);
	КонецЦикла;
	
	ИдентификаторПакета = ПакетыДокументовЭДОПовтИспНаВызов.ИдентификаторПакетаДокумента(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДокументыДляПроверки = ПакетыДокументовЭДОПовтИспНаВызов.ДокументыПакета(Строка(ИдентификаторПакета));
	Иначе
		ДокументыДляПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент);
	КонецЕсли;
	
	ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ДокументыДляПроверки);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	ДанныеКомпонента.ЕстьНоменклатураНаКонтроле = ЗначениеЗаполнено(НаКонтроле);
	
	Если ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете Тогда
		СпособыОбработки = ИнтеграцияЭДО.СписокОперацийВидаДокумента(СвойстваДокумента.ВидДокумента);
	Иначе
		СпособыОбработки = ИнтеграцияЭДО.СписокОперацийВсехТиповДокумента();
	КонецЕсли;
	
	СпособыОбработкиДополнительные = Новый СписокЗначений;
	Если СвойстваДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		МашиночитаемыеДоверенности.ОграничитьВариантыОтраженияВУчетеПоДаннымЭлектронногоДокумента(
			СвойстваДокумента.Ссылка, СпособыОбработки);
	КонецЕсли;
	
	Если СвойстваДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда

		ДанныеЭлектронныхДокументов = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СвойстваДокумента.Ссылка));
		Если ЗначениеЗаполнено(ДанныеЭлектронныхДокументов) Тогда
			ДанныеЭлектронногоДокумента = ДанныеЭлектронныхДокументов[0];
			ДополнительныеВиды = ЭлектронныеДокументыЭДО.ДополнительныеВидыДокументовУПД(
				ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла);
		Иначе
			ДополнительныеВиды = Новый Массив;
		КонецЕсли;
		
		Для Каждого ДополнительныйВидДокумента Из ДополнительныеВиды Цикл
			СпособыОбработкиВидаДокумента = ИнтеграцияЭДО.СписокОперацийВидаДокумента(ДополнительныйВидДокумента);
			ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(СпособыОбработкиДополнительные,
				СпособыОбработкиВидаДокумента);
		КонецЦикла;

	ИначеЕсли СвойстваДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда

		ВидДокумента = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости);
		СпособыОбработкиВидаДокумента = ИнтеграцияЭДО.СписокОперацийВидаДокумента(ВидДокумента);
		ОбщегоНазначенияБЭДКлиентСервер.ДополнитьСписокЗначений(СпособыОбработкиДополнительные,
			СпособыОбработкиВидаДокумента);

	КонецЕсли;
	
	Для Каждого ЭлементСпискаТипов Из СпособыОбработки Цикл
		ДанныеКомпонента.СпособыОбработкиОсновные.Добавить(СокрЛП(ЭлементСпискаТипов.Значение),
			СокрЛП(ЭлементСпискаТипов.Представление));
	КонецЦикла;
	
	Для Каждого ЭлементСпискаТипов Из СпособыОбработкиДополнительные Цикл
		//@skip-check invocation-parameter-type-intersect
		ДанныеКомпонента.СпособыОбработкиДополнительные.Добавить(СокрЛП(ЭлементСпискаТипов.Значение),
			СокрЛП(ЭлементСпискаТипов.Представление));
	КонецЦикла;
	
	ОбщегоНазначенияБЭДКлиентСервер.УдалитьЗначенияПоНачалуСтроки(ДанныеКомпонента.СпособыОбработкиДополнительные, "Удалить");
	ОбщегоНазначенияБЭДКлиентСервер.УдалитьЗначенияПоНачалуСтроки(ДанныеКомпонента.СпособыОбработкиОсновные, "Удалить");
	
	ДанныеКомпонента.СпособыОбработкиДополнительные.СортироватьПоПредставлению();
	ДанныеКомпонента.СпособыОбработкиОсновные.СортироватьПоПредставлению();
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельОтраженияВУчете
// 
// Возвращаемое значение:
//  Структура:
//  * ОбъектыУчетаДокумента - Массив из См. НовыеДанныеОбъектаУчетаДокумента
//  * ЕстьВозможностьОтраженияВУчете - Булево
//  * ДокументРаспознан - Булево
//  * ЕстьНоменклатураНаКонтроле - Булево
//  * СпособыОбработкиОсновные - СписокЗначений Из Строка
//  * СпособыОбработкиДополнительные - СписокЗначений Из Строка
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ЭтоВнутреннийВидДокумента - Булево
//  * ЭтоПрикладнойВидДокумента - Булево
Функция НовыеДанныеКомпонентаПанельОтраженияВУчете() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("ОбъектыУчетаДокумента", Новый Массив);
	ДанныеКомпонента.Вставить("ЕстьВозможностьОтраженияВУчете", Ложь);
	ДанныеКомпонента.Вставить("ДокументРаспознан", Ложь);
	ДанныеКомпонента.Вставить("ЕстьНоменклатураНаКонтроле", Ложь);
	ДанныеКомпонента.Вставить("СпособыОбработкиОсновные", Новый СписокЗначений);
	ДанныеКомпонента.Вставить("СпособыОбработкиДополнительные", Новый СписокЗначений);
	ДанныеКомпонента.Вставить("ЕстьПравоОбработкиДокументов", Ложь);
	ДанныеКомпонента.Вставить("ЭтоВнутреннийВидДокумента", Ложь);
	ДанныеКомпонента.Вставить("ЭтоПрикладнойВидДокумента", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * СпособОбработки - Строка
Функция НовыеДанныеОбъектаУчетаДокумента() Экспорт
	ДанныеОбъектаУчета = Новый Структура;
	ДанныеОбъектаУчета.Вставить("ОбъектУчета", Неопределено);
	ДанныеОбъектаУчета.Вставить("СпособОбработки", "");
	Возврат ДанныеОбъектаУчета;
КонецФункции

#КонецОбласти // ПанельОтраженияВУчете

#Область ПанельЗакладокВходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
//  СопроводительныеЗаписи - ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента(ДанныеКомпонента, ОписанияПодписей,
	СопроводительныеЗаписи) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ДанныеКомпонента.КоличествоПодписей = ОписанияПодписей.Количество();
	
	ДанныеКомпонента.КоличествоСопроводительныхЗаписок = СопроводительныеЗаписи.Количество();
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * КоличествоПодписей - Число
//  * КоличествоСопроводительныхЗаписок - Число
Функция НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("КоличествоПодписей", 0);
	ДанныеКомпонента.Вставить("КоличествоСопроводительныхЗаписок", 0);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельЗакладокВходящегоДокумента

#Область ПанельЗакладокИсходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
//  СопроводительныеЗаписи - ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
//  СвойстваДокумента - Структура:
//   * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(ДанныеКомпонента, ОписанияПодписей,
	СопроводительныеЗаписи, СвойстваДокумента) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ДанныеКомпонента.КоличествоПодписей = ОписанияПодписей.Количество();
	
	ДанныеКомпонента.КоличествоСопроводительныхЗаписок = СопроводительныеЗаписи.Количество();
	
	СообщениеОбъектМаршрута = ЭлектронныеДокументыЭДО.СообщениеОтправителя(СвойстваДокумента.Ссылка);
	ДанныеКомпонента.ПредставлениеПрогрессаПодписания = МаршрутыПодписанияБЭД.ПредставлениеПрогрессаПодписания(
		СообщениеОбъектМаршрута, ОписанияПодписей.Количество());
		
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * КоличествоПодписей - Число
//  * КоличествоСопроводительныхЗаписок - Число
//  * ПредставлениеПрогрессаПодписания - Строка
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("КоличествоПодписей", 0);
	ДанныеКомпонента.Вставить("КоличествоСопроводительныхЗаписок", 0);
	ДанныеКомпонента.Вставить("ПредставлениеПрогрессаПодписания", "");
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельЗакладокИсходящегоДокумента

#Область ПанельВизуализации

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализации
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализации
//  ВизуализацияДокумента - Структура:
//  * ПредставлениеДокумента - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * ИмяФайла - Строка
//  * РазмерФайла - Число
//  НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонента, ВизуализацияДокумента, НастройкиФормы) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;

	ПредставлениеДокумента = ВизуализацияДокумента.ПредставлениеДокумента;
	ТипВизуализации = ВизуализацияДокумента.ТипДанных;
	
	Если ТипВизуализации = ТипыДанныхВизуализации().ТабличныйДокумент Тогда
		ИзменитьЦветРамокТабличногоДокумента(ПредставлениеДокумента);
	КонецЕсли;
	
	НаименованиеФайла = ВизуализацияДокумента.ИмяФайла;
	ДанныеКомпонента.НаименованиеФайла = НаименованиеФайла;
	ДанныеКомпонента.РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(НаименованиеФайла);
	ДанныеКомпонента.РазмерФайла = ВизуализацияДокумента.РазмерФайла;
	ДанныеКомпонента.ТипДанных = ТипВизуализации;
	ДанныеКомпонента.Данные = ПредставлениеДокумента;
	ДанныеКомпонента.ОтключитьТранслитерацию = НастройкиФормы.ОтключитьТранслитерацию;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельВизуализации
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * Данные - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * НаименованиеФайла - Строка
//  * РасширениеФайла - Строка
//  * РазмерФайла - Число
//  * ЕстьОшибка - Булево
//  * ОтключитьТранслитерацию - Булево
Функция НовыеДанныеКомпонентаПанельВизуализации() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("ТипДанных", Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("Данные", "");
	ДанныеКомпонента.Вставить("НаименованиеФайла", "");
	ДанныеКомпонента.Вставить("РасширениеФайла", "");
	ДанныеКомпонента.Вставить("РазмерФайла", 0);
	ДанныеКомпонента.Вставить("ЕстьОшибка", Ложь);
	ДанныеКомпонента.Вставить("ОтключитьТранслитерацию", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельВизуализации

#Область ПанельКомандНастроекВизуализации

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандНастроекВизуализации
//  ВизуализацияДокумента - См. ЭлектронныеДокументыЭДО.ВизуализацияДокумента
//  НастройкиФормы - См. ЛегкийИнтерфейсДокументовЭДО.НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра 
Процедура ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(ДанныеКомпонента, ВизуализацияДокумента,
	НастройкиФормы) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	НастройкиВизуализации = ВизуализацияДокумента.ПользовательскиеНастройкиПредставления;
	
	ДанныеКомпонента.ЕстьНастройкаВыводаБанковскихРеквизитов = 
		НастройкиВизуализации.ЕстьНастройкаВыводаБанковскихРеквизитов;
		
	ДанныеКомпонента.ЕстьНастройкаВыводаДополнительныхДанных = 
		НастройкиВизуализации.ЕстьНастройкаВыводаДополнительныхДанных;
		
	ДанныеКомпонента.ЕстьНастройкаВыводаКопияВерна =
		НастройкиВизуализации.ЕстьНастройкаВыводаКопияВерна;
		
	ДанныеКомпонента.ВыводитьДополнительныеДанные = Не НастройкиФормы.ОтключитьВыводДопДанных;
	
	ДанныеКомпонента.ВыводитьКопияВерна = Не НастройкиФормы.ОтключитьВыводКопияВерна;
	
	ДанныеКомпонента.ВыводитьБанковскиеРеквизиты = НастройкиФормы.ВыводитьБанковскиеРеквизиты;
	
	ДанныеКомпонента.ИспользуетсяПросмотрPDFДокументов = НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов();
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ЕстьНастройкаВыводаБанковскихРеквизитов - Булево
//  * ЕстьНастройкаВыводаДополнительныхДанных - Булево
//  * ЕстьНастройкаВыводаКопияВерна - Булево
//  * ВыводитьДополнительныеДанные - Булево
//  * ВыводитьКопияВерна - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ИспользуетсяПросмотрPDFДокументов - Булево
//
Функция НовыеДанныеКомпонентаПанельКомандНастроекВизуализации() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("ЕстьНастройкаВыводаБанковскихРеквизитов", Ложь);
	ДанныеКомпонента.Вставить("ЕстьНастройкаВыводаДополнительныхДанных", Ложь);
	ДанныеКомпонента.Вставить("ЕстьНастройкаВыводаКопияВерна", Ложь);
	ДанныеКомпонента.Вставить("ВыводитьДополнительныеДанные", Ложь);
	ДанныеКомпонента.Вставить("ВыводитьКопияВерна", Ложь);
	ДанныеКомпонента.Вставить("ВыводитьБанковскиеРеквизиты", Ложь);
	ДанныеКомпонента.Вставить("ИспользуетсяПросмотрPDFДокументов", Ложь);
	Возврат ДанныеКомпонента;
	
КонецФункции

#КонецОбласти // ПанельКомандНастроекВизуализации

#Область ПанельВизуализацииТекущихДел

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента(ДанныеКомпонента, 
	СвойстваДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(СвойстваДокумента.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.ФайлПомеченНаУдаление = СвойстваДокумента.ПометкаУдаления;
	Если Не СвойстваДокумента.ПометкаУдаления Тогда
		ДанныеКомпонента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
//  ВизуализацияДокумента - См. ЭлектронныеДокументыЭДО.ВизуализацияДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел(ДанныеКомпонента, ВизуализацияДокумента) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если Не ЗначениеЗаполнено(ВизуализацияДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеДокумента = ВизуализацияДокумента.ПредставлениеДокумента;
	ТипВизуализации = ВизуализацияДокумента.ТипДанных;
	
	Если ТипВизуализации = ТипыДанныхВизуализации().ТабличныйДокумент Тогда
		ИзменитьЦветРамокТабличногоДокумента(ПредставлениеДокумента);
	КонецЕсли;
	
	НаименованиеФайла = ВизуализацияДокумента.ИмяФайла;
	ДанныеКомпонента.НаименованиеФайла = НаименованиеФайла;
	ДанныеКомпонента.РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(НаименованиеФайла);
	
	ЭтоРасширениеPDF = РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(ДанныеКомпонента.РасширениеФайла);
	МожноПроштамповатьЧерез1СШтамп = НастройкиЭДО.ИспользуетсяСервис1СШтамп() 
		И Интеграция1СШтампКлиентСервер.РасширениеОсновногоФайлаПоддерживается(
		ДанныеКомпонента.РасширениеФайла);
	
	ДанныеКомпонента.ФайлМожноПроштамповать = НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов()
		И (ЭтоРасширениеPDF Или МожноПроштамповатьЧерез1СШтамп);
	ДанныеКомпонента.ТипДанных = ТипВизуализации;
	ДанныеКомпонента.Данные = ПредставлениеДокумента;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * Данные - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * НаименованиеФайла - Строка
//  * РасширениеФайла - Строка
//  * ЕстьОшибка - Булево
//  * ФайлПомеченНаУдаление - Булево
//  * ФайлМожноПроштамповать - Булево
Функция НовыеДанныеКомпонентаПанельВизуализацииТекущихДел() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("ТипДанных", Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("Данные", "");
	ДанныеКомпонента.Вставить("НаименованиеФайла", "");
	ДанныеКомпонента.Вставить("РасширениеФайла", "");
	ДанныеКомпонента.Вставить("ЕстьОшибка", Ложь);
	ДанныеКомпонента.Вставить("ФайлПомеченНаУдаление", Ложь);
	ДанныеКомпонента.Вставить("ФайлМожноПроштамповать", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельВизуализацииТекущихДел

#Область ПанельПредставленияФайла

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПредставленияФайла
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента(ДанныеКомпонента,
	СвойстваДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(СвойстваДокумента.Ссылка) 
		Или Не НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.ФайлПомеченНаУдаление = СвойстваДокумента.ПометкаУдаления;
	Если Не СвойстваДокумента.ПометкаУдаления Тогда
		ДанныеКомпонента.АсинхронноеПолучение = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПредставленияФайла
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПредставленияФайла
//  РезультатШтампирования - Неопределено
//                         - Структура:
//                           * ПредставлениеДокумента - Неопределено,ДвоичныеДанные
//                           * ТекстОшибки - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельПредставленияФайла(ДанныеКомпонента, РезультатШтампирования) Экспорт
	
	Если Не НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	Если РезультатШтампирования = Неопределено Тогда
		ДанныеКомпонента.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонента.Данные = РезультатШтампирования.ПредставлениеДокумента;
	ДанныеКомпонента.ЕстьОшибка = ЗначениеЗаполнено(РезультатШтампирования.ТекстОшибки);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * Данные - ДвоичныеДанные
//           - Неопределено
//  * ЕстьОшибка - Булево
//  * ФайлПомеченНаУдаление - Булево
//
Функция НовыеДанныеКомпонентаПанельПредставленияФайла() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("Данные", Неопределено);
	ДанныеКомпонента.Вставить("ЕстьОшибка", Ложь);
	ДанныеКомпонента.Вставить("ФайлПомеченНаУдаление", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельПредставленияФайла

#Область ПанельПодписей

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельПодписей
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПодписей
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
Процедура ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонента, ОписанияПодписей) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ПодписиДокумента = ДанныеКомпонента.ПодписиДокумента;
	
	Если ЗначениеЗаполнено(ПодписиДокумента) Тогда
		ПодписиДокумента.Очистить();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОписанияПодписей, ПодписиДокумента);
	
	ДанныеКомпонента.ЕстьПравоИзмененияМЧД = МашиночитаемыеДоверенности.ИмеетсяПравоИзмененияМЧД();
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельПодписей
// 
// Возвращаемое значение:
//  Структура:
// * АсинхронноеПолучение - Булево
// * ПодписиДокумента - См. НовыеОписанияУстановленныхПодписей
// * ЕстьПравоИзмененияМЧД - Булево
Функция НовыеДанныеКомпонентаПанельПодписей() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("ПодписиДокумента", НовыеОписанияУстановленныхПодписей());
	ДанныеКомпонента.Вставить("ЕстьПравоИзмененияМЧД", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеОписанияУстановленныхПодписей
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,Строка
//  * ПорядковыйНомер - Число
//  * Владелец - Строка
//  * ДатаПодписи - Дата
//  * ДатаПроверкиПодписи - Дата 
//  * ДоверенностьПредставление - Строка
//  * ПодписьВерна - Булево
//  * ПодписьВернаПредставление - Строка
//  * ЭтоВходящаяПодпись - Булево
//  * ЭтоПодписьПоДоверенности - Булево
//  * ПодписьПоДоверенностиВерна - Булево
//  * ДоверенностьПроверенаУспешно - Булево
//  * ПроверкаДоверенностиВыполненаВручную - Булево
//  * ПроверкаПолномочийВыполненаБезОшибок - Булево
Функция НовыеОписанияУстановленныхПодписей() Экспорт
	ОписанияПодписей = Новый ТаблицаЗначений;
	ОписанияПодписей.Колонки.Добавить("ПодписанныйОбъект", 
		Новый ОписаниеТипов("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы, Строка"));
	ОписанияПодписей.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	ОписанияПодписей.Колонки.Добавить("Владелец", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ОписанияПодписей.Колонки.Добавить("ДатаПодписи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОписанияПодписей.Колонки.Добавить("ДатаПроверкиПодписи", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОписанияПодписей.Колонки.Добавить("ДоверенностьПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ОписанияПодписей.Колонки.Добавить("ПодписьВерна", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ПодписьВернаПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ОписанияПодписей.Колонки.Добавить("ЭтоВходящаяПодпись", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ЭтоПодписьПоДоверенности", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ПодписьПоДоверенностиВерна", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ДоверенностьПроверенаУспешно", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ПроверкаДоверенностиВыполненаВручную", Новый ОписаниеТипов("Булево"));
	ОписанияПодписей.Колонки.Добавить("ПроверкаПолномочийВыполненаБезОшибок", Новый ОписаниеТипов("Булево"));
	Возврат ОписанияПодписей;
КонецФункции

#КонецОбласти // ПанельПодписей

#Область ПанельСопроводительнойЗапискиВходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - См. НовыеСопроводительныеЗаписи
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(ДанныеКомпонента, СвойстваДокумента, 
	СопроводительныеЗаписи) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ЗаполнитьСопроводительныеЗаписиКомпонента(ДанныеКомпонента.СопроводительныеЗаписки, СвойстваДокумента,
		СопроводительныеЗаписи);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
// * АсинхронноеПолучение - Булево
// * СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
Функция НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("СопроводительныеЗаписки", НовыйНаборСопроводительныхЗаписокДокумента());
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиВходящегоДокумента

#Область ПанельСопроводительнойЗапискиИсходящегоДокумента

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - См. НовыеСопроводительныеЗаписи
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(ДанныеКомпонента, СвойстваДокумента,
	СопроводительныеЗаписи) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ЗаполнитьСопроводительныеЗаписиКомпонента(ДанныеКомпонента.СопроводительныеЗаписки, СвойстваДокумента,
		СопроводительныеЗаписи);
	
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
// 
// Возвращаемое значение:
//  Структура:
// * АсинхронноеПолучение - Булево
// * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// * СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
Функция НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("СопроводительныеЗаписки", НовыйНаборСопроводительныхЗаписокДокумента());
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиИсходящегоДокумента

#Область ПанельСопроводительнойЗапискиОбщее

// См. ЛегкийИнтерфейсДокументовЭДО.НовыйНаборСопроводительныхЗаписокДокумента
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Автор - ОпределяемыйТип.УчастникЭДО
//  * Дата - Дата
//  * Текст - Строка
Функция НовыйНаборСопроводительныхЗаписокДокумента() Экспорт

	ДанныеСопроводительнойЗаписки = Новый ТаблицаЗначений;
	ДанныеСопроводительнойЗаписки.Колонки.Добавить("Автор", Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ДанныеСопроводительнойЗаписки.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеСопроводительнойЗаписки.Колонки.Добавить("Текст", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Возврат ДанныеСопроводительнойЗаписки;

КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьСопроводительныеЗаписиКомпонента
//
// Параметры:
//  СопроводительныеЗаписиКомпонента - См. НовыйНаборСопроводительныхЗаписокДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - См. НовыеСопроводительныеЗаписи
Процедура ЗаполнитьСопроводительныеЗаписиКомпонента(СопроводительныеЗаписиКомпонента, СвойстваДокумента, 
	СопроводительныеЗаписи) Экспорт

	Если ЗначениеЗаполнено(СопроводительныеЗаписиКомпонента) Тогда
		СопроводительныеЗаписиКомпонента.Очистить();
	КонецЕсли;
	
	Для Каждого СопроводительнаяЗапись Из СопроводительныеЗаписи Цикл
		
		Если Не ЗначениеЗаполнено(СопроводительнаяЗапись.ДополнительнаяИнформация) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСопроводительнаяЗапискаПанели = СопроводительныеЗаписиКомпонента.Добавить();
		Если СопроводительнаяЗапись.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			НоваяСопроводительнаяЗапискаПанели.Автор = СвойстваДокумента.Контрагент;
		Иначе
			НоваяСопроводительнаяЗапискаПанели.Автор = СвойстваДокумента.Организация;
		КонецЕсли;
		НоваяСопроводительнаяЗапискаПанели.Дата = СопроводительнаяЗапись.Дата;
		НоваяСопроводительнаяЗапискаПанели.Текст = СопроводительнаяЗапись.ДополнительнаяИнформация;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеСопроводительныеЗаписи
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * Дата - Дата
// * ДополнительнаяИнформация - Строка 
Функция НовыеСопроводительныеЗаписи() Экспорт
	СопроводительныеЗаписи = Новый ТаблицаЗначений;
	СопроводительныеЗаписи.Колонки.Добавить("Направление", Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭДО"));
	СопроводительныеЗаписи.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СопроводительныеЗаписи.Колонки.Добавить("ДополнительнаяИнформация", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Возврат СопроводительныеЗаписи;
КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиОбщее

#Область ПанельРеквизитов

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельРеквизитов
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента(ДанныеКомпонента, СвойстваДокумента) Экспорт
	
	ЭлектронныйДокумент = СвойстваДокумента.Ссылка;
	ВидДокумента = СвойстваДокумента.ВидДокумента;
	
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(ЭлектронныйДокумент);
	ДанныеКомпонента.ТипДокумента = СвойстваДокумента.ТипДокумента;
	ДанныеКомпонента.ЭтоВнутреннийВидДокумента = ЭлектронныеДокументыЭДО.ЭтоВнутреннийВидДокумента(ВидДокумента);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельРеквизитов
// 
// Возвращаемое значение:
//  Структура:
// * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЭтоВнутреннийВидДокумента - Булево
Функция НовыеДанныеКомпонентаПанельРеквизитов() Экспорт

	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ЭтоВнутреннийВидДокумента", Ложь);
	Возврат ДанныеКомпонента;

КонецФункции

#КонецОбласти // ПанельРеквизитов

#Область ПанельМаршрута

// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентаПанельМаршрута
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельМаршрута
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * МаршрутУказанВНастройках - Булево
//  ОписанияПодписей - Неопределено
//                   - См. НовыеОписанияУстановленныхПодписей
//  ИзмененМаршрутПодписания - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонента, СвойстваДокумента, ОписанияПодписей,
	ИзмененМаршрутПодписания = Ложь) Экспорт
	
	ДанныеКомпонента.АсинхронноеПолучение = Ложь;
	
	ДанныеКомпонента.СостояниеЭДО = ЭлектронныеДокументыЭДОПовтИспНаВызов.СостояниеДокумента(СвойстваДокумента.Ссылка);
	ДанныеКомпонента.КоличествоПодписей = ?(ЗначениеЗаполнено(ОписанияПодписей), ОписанияПодписей.Количество(), 0);
	
	ВидыДокументовИнтеркампани = ЭлектронныеДокументыЭДО.ИспользуемыеВидыДокументовИнтеркампани();
	ДанныеКомпонента.ЭтоИнтеркампани = ВидыДокументовИнтеркампани.Найти(СвойстваДокумента.ВидДокумента) <> Неопределено;
	
	ДанныеКомпонента.СхемаМаршрутаПодписания = 
		ЭлектронныеДокументыЭДО.СостояниеПодписанияИнформацииОтправителя(СвойстваДокумента, ИзмененМаршрутПодписания);

	ДанныеКомпонента.ВидПодписи = СвойстваДокумента.ВидПодписи;

	ДанныеКомпонента.МаршрутПодписания = СвойстваДокумента.МаршрутПодписания;
	
	ДанныеКомпонента.ИзмененМаршрутПодписания = ИзмененМаршрутПодписания;
	
	ДанныеКомпонента.МаршрутУказанВНастройках = СвойстваДокумента.МаршрутУказанВНастройках;
	
	СвойстваДокументаДляПредставленияМаршрута = НовыеСвойстваДокументаДляПолученияПредставленияМаршрута();
	ЗаполнитьЗначенияСвойств(СвойстваДокументаДляПредставленияМаршрута, СвойстваДокумента);
	ДанныеКомпонента.ПредставлениеМаршрута = 
		ПредставлениеМаршрутаПодписанияДокумента(СвойстваДокументаДляПредставленияМаршрута);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеКомпонентаПанельМаршрута
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СхемаМаршрутаПодписания - См. МаршрутыПодписанияБЭД.ПустаяТаблицаТребованийКПодписанию
//  * ПредставлениеМаршрута - Строка
//  * ЭтоИнтеркампани - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * ИзмененМаршрутПодписания - Булево
//  * МаршрутУказанВНастройках - Булево
//  * КоличествоПодписей - Число
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
Функция НовыеДанныеКомпонентаПанельМаршрута() Экспорт
	
	ДанныеКомпонента = Новый Структура;
	ДанныеКомпонента.Вставить("АсинхронноеПолучение", Ложь);
	ДанныеКомпонента.Вставить("СхемаМаршрутаПодписания", МаршрутыПодписанияБЭД.ПустаяТаблицаТребованийКПодписанию());
	ДанныеКомпонента.Вставить("ПредставлениеМаршрута", "");
	ДанныеКомпонента.Вставить("ЭтоИнтеркампани", Ложь);
	ДанныеКомпонента.Вставить("СостояниеЭДО", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ДанныеКомпонента.Вставить("МаршрутПодписания", Справочники.МаршрутыПодписания.ПустаяСсылка());
	ДанныеКомпонента.Вставить("ИзмененМаршрутПодписания", Ложь);
	ДанныеКомпонента.Вставить("МаршрутУказанВНастройках", Ложь);
	ДанныеКомпонента.Вставить("КоличествоПодписей", 0);
	ДанныеКомпонента.Вставить("ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.ПустаяСсылка());
	Возврат ДанныеКомпонента;
	
КонецФункции

#КонецОбласти // ПанельМаршрута

#КонецОбласти // ЗаполнениеДанныхКомпонентовИнтерфейса

#Область ПросмотрФайлаЭлектронногоДокумента

//  См. ЛегкийИнтерфейсДокументовЭДО.ДанныеФайлаИнформацииОтправителяДокумента
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО 
//  ИдентификаторФормы - УникальныйИдентификатор - для помещения двоичных данных во временное хранилище
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокумента(ЭлектронныйДокумент, ИдентификаторФормы) Экспорт
	
	Результат = ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя();

	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	
	Если Не ЗначениеЗаполнено(ОсновнойФайл) Тогда
		ВидОперации = НСтр("ru = 'Получение файла электронного документа'");
		ТекстСообщения = ИнтерфейсДокументовЭДОКлиентСервер.ТекстСообщенияОбОтсутствииФайлаЭлектронногоДокумента();
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыПолучения = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыПолучения.ИдентификаторФормы = ИдентификаторФормы;
	ПараметрыПолучения.ВызыватьИсключение = Ложь;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ОсновнойФайл, ПараметрыПолучения);
		
	Если РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(ДанныеФайла.Расширение)
		Или НастройкиЭДО.ИспользуетсяСервис1СШтамп() Тогда
		Возврат ДанныеФайлаИнформацииОтправителяДокументаСВизуализацией(
			ОсновнойФайл, ИдентификаторФормы);
	КонецЕсли;
	
	Если Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ДанныеФайла.ПолноеНаименованиеВерсии) Тогда
		ДанныеФайла.ПолноеНаименованиеВерсии = 
			Обработки.ФорматДоговорныйДокумент101.ОбработанноеИмяФайлаДляОткрытия(ДанныеФайла.ПолноеНаименованиеВерсии);
	КонецЕсли;
	
	ДанныеФайлаИнформацииОтправителя = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеФайлаИнформацииОтправителя();
	ДанныеФайлаИнформацииОтправителя.ДвоичныеДанные = ПолучитьИзВременногоХранилища(
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеФайлаИнформацииОтправителя.ИмяФайла = СтрШаблон("%1.%2", ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайла.Расширение);
	ДанныеФайлаИнформацииОтправителя.ПолныеДанныеФайла = ДанныеФайла;
	ДанныеФайлаИнформацииОтправителя.ПомеченНаУдаление = ДанныеФайла.ПометкаУдаления;
	
	Результат.ДанныеФайла = ДанныеФайлаИнформацииОтправителя;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПросмотрФайлаЭлектронногоДокумента

#Область Визуализация

// Возвращаемое значение:
//  ПеречислениеМенеджер.ТипыДанныхВизуализацииДокументаЭДО
Функция ТипыДанныхВизуализации() Экспорт
	Возврат Перечисления["ТипыДанныхВизуализацииДокументаЭДО"];
КонецФункции

#КонецОбласти // Визуализация

#Область Подписи

// См. ЛегкийИнтерфейсДокументовЭДО.ОписанияУстановленныхПодписейДокумента
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. НовыеОписанияУстановленныхПодписей
Функция ОписанияУстановленныхПодписейДокумента(ЭлектронныйДокумент) Экспорт
	
	ОписанияПодписей = НовыеОписанияУстановленныхПодписей();
	
	СвойстваСообщений = ЭлектронныеДокументыЭДОПовтИспНаВызов.СвойстваСообщенийПросмотраКарточкиДокумента(
		ЭлектронныйДокумент);
	
	СвойстваСообщенияОтправителя = СвойстваСообщений.Найти(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя, "ТипЭлементаРегламента");
	
	Если Не ЗначениеЗаполнено(СвойстваСообщенияОтправителя) Тогда
		Возврат ОписанияПодписей;
	КонецЕсли;
	
	УстановленныеПодписи = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
		СвойстваСообщенияОтправителя.Ссылка);
	
	Если Не ЗначениеЗаполнено(УстановленныеПодписи) Тогда
		Возврат ОписанияПодписей;
	КонецЕсли;
	
	Для Каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
		
		ДобавитьОписаниеУстановленнойПодписи(ОписанияПодписей, УстановленнаяПодпись);
		
	КонецЦикла;
	
	СвойстваСообщенияПолучателя = СвойстваСообщений.Найти(
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя, "ТипЭлементаРегламента");
	
	Если Не ЗначениеЗаполнено(СвойстваСообщенияПолучателя) Тогда
		Возврат ОписанияПодписей;
	КонецЕсли;
	
	УстановленныеПодписиПолучателя = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(
		СвойстваСообщенияПолучателя.Ссылка);
	
	Если Не ЗначениеЗаполнено(УстановленныеПодписиПолучателя) Тогда
		Возврат ОписанияПодписей;
	КонецЕсли;
	
	Для Каждого УстановленнаяПодпись Из УстановленныеПодписиПолучателя Цикл
		
		ДобавитьОписаниеУстановленнойПодписи(ОписанияПодписей, УстановленнаяПодпись);
		
	КонецЦикла;
	
	Возврат ОписанияПодписей;
	
КонецФункции

#КонецОбласти // Подписи

#Область СопроводительнаяЗаписка

// См. ЛегкийИнтерфейсДокументовЭДО.СопроводительныеЗаписиДокумента
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
Функция СопроводительныеЗаписиДокумента(ЭлектронныйДокумент) Экспорт
	
	СвойстваСообщений = ЭлектронныеДокументыЭДОПовтИспНаВызов.СвойстваСообщенийПросмотраКарточкиДокумента(
		ЭлектронныйДокумент);
		
	СопроводительныеЗаписи = НовыеСопроводительныеЗаписи();
	
	Для Каждого СвойстваСообщения Из СвойстваСообщений Цикл
		Если Не ЗначениеЗаполнено(СвойстваСообщения.ДополнительнаяИнформация) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСопроводительнаяЗапись = СопроводительныеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСопроводительнаяЗапись, СвойстваСообщения);
	КонецЦикла;
	
	Возврат СопроводительныеЗаписи;
	
КонецФункции

#КонецОбласти // СопроводительнаяЗаписка

#Область МаршрутПодписания

// См. ЛегкийИнтерфейсДокументовЭДО.ПредставлениеМаршрутаПодписанияДокумента
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеМаршрутаПодписанияДокумента(СвойстваДокумента) Экспорт
	
	ПредставлениеМаршрута = "";
	
	Если ЗначениеЗаполнено(СвойстваДокумента.СписокПодписантов) Тогда
		ПредставлениеМаршрута = МаршрутыПодписанияБЭД.ПредставлениеМаршрутаВыбранногоВДокументе(
			Истина, СвойстваДокумента.СписокПодписантов, СвойстваДокумента.МаршрутПодписания);
	Иначе
		Если ЗначениеЗаполнено(СвойстваДокумента.МаршрутПодписания) Тогда
			ПредставлениеМаршрута = Строка(СвойстваДокумента.МаршрутПодписания);
		Иначе
			ПредставлениеМаршрута = МаршрутыПодписанияБЭД.ПредставлениеНеВыбранногоМаршрута();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеМаршрута;
	
КонецФункции

// Возвращаемое значение:
// Структура:
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - См. НовыйСписокПодписантовДляПолученияПредставленияМаршрута
Функция НовыеСвойстваДокументаДляПолученияПредставленияМаршрута() Экспорт
	СвойстваДокумента = Новый Структура;
	СвойстваДокумента.Вставить("МаршрутПодписания", Справочники.МаршрутыПодписания.ПустаяСсылка());
	СвойстваДокумента.Вставить("СписокПодписантов", НовыйСписокПодписантовДляПолученияПредставленияМаршрута());
	Возврат СвойстваДокумента;
КонецФункции

// Возвращаемое значение:
// ТаблицаЗначений:
// * Подписант - ОпределяемыйТип.Пользователь
// * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция НовыйСписокПодписантовДляПолученияПредставленияМаршрута() Экспорт
	СписокПодписантов = Новый ТаблицаЗначений();
	СписокПодписантов.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	СписокПодписантов.Колонки.Добавить("Сертификат",
		Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
	Возврат СписокПодписантов;
КонецФункции

#КонецОбласти // МаршрутПодписания

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ПанельКарточки

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКарточки
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ЭтоНовыйДокумент - Булево
//  КоличествоДокументовВПакете - Число
Процедура ЗаполнитьДанныеКомпонентаПанельКарточкиПоПараметрам(ДанныеКомпонента, СвойстваДокумента,
	КоличествоДокументовВПакете)

	Если КоличествоДокументовВПакете > 0 Тогда
		//@skip-check bsl-legacy-check-dynamic-feature-access
		ДанныеКомпонента.ТекстЗаголовка = ПакетыДокументовЭДО.ЗаголовокОтображенияПакетов(
			КоличествоДокументовВПакете);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СвойстваДокумента.ВидДокумента) Тогда
		ДанныеКомпонента.ТекстЗаголовка = ПакетыДокументовЭДО.ЗаголовокНовогоПроизвольногоДокумента();
		Возврат;
	КонецЕсли;

	ПараметрыПредставления = ИнтерфейсДокументовЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента = СвойстваДокумента.ВидДокумента;
	ПараметрыПредставления.НомерДокумента = СвойстваДокумента.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента = СвойстваДокумента.ДатаДокумента;

	ДанныеКомпонента.ТекстЗаголовка = ИнтерфейсДокументовЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления,
		СвойстваДокумента.ЭтоНовыйДокумент);

КонецПроцедуры

#КонецОбласти // ПанельКарточки

#Область ПанельСостояния

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  Комментарий - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельСостоянияПоСостояниюЭДО(ДанныеКомпонента, СостояниеЭДО, Комментарий)

	ДанныеКомпонента.СостояниеЭДО = СостояниеЭДО;
	ДанныеКомпонента.КомментарийКСостояниюЭДО = Комментарий;

КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
Процедура ЗаполнитьДанныеКомпонентаПанельСостоянияДляПринятогоКУчетуДокумента(ДанныеКомпонента)

	ДанныеКомпонента.КонтрольОтраженияВУчете.ТребуетсяОтражениеВУчете = Истина;
	ДанныеКомпонента.КонтрольОтраженияВУчете.СозданУчетныйДокумент = Истина;
	ДанныеКомпонента.КонтрольОтраженияВУчете.ПроведенУчетныйДокумент = Истина;

КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
//  ДанныеКонтроля - См. НовыеДанныеКонтроляОтраженияВУчете
Процедура ЗаполнитьДанныеКомпонентаПанельСостоянияПоДаннымКонтроляОтраженияВУчете(ДанныеКомпонента, ДанныеКонтроля)

	ДанныеКомпонента.КонтрольОтраженияВУчете.ТребуетсяОтражениеВУчете = Истина;
	ДанныеКомпонента.КонтрольОтраженияВУчете.СозданУчетныйДокумент = ДанныеКонтроля.СозданУчетныйДокумент;
	ДанныеКомпонента.КонтрольОтраженияВУчете.ПроведенУчетныйДокумент = ДанныеКонтроля.ПроведенУчетныйДокумент;

КонецПроцедуры

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
//  ЕстьНевалидныеПодписи - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельСостоянияПоНаличиюНевалидныхПодписей(ДанныеКомпонента, ЕстьНевалидныеПодписи)

	Если ЕстьНевалидныеПодписи Тогда
		ДанныеКомпонента.ОшибкиВПодписях = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ПанельСостояния

#Область ПанельВизуализации

// Параметры:
//  ПредставлениеДокумента - ТабличныйДокумент
Процедура ИзменитьЦветРамокТабличногоДокумента(ПредставлениеДокумента)

	ПредставлениеДокумента.Область("R1:R" + ПредставлениеДокумента.ВысотаТаблицы).ЦветРамки =
		Метаданные.ЭлементыСтиля.ЦветРамкиПредпросмотраЭлектронногоДокумента.Значение;

КонецПроцедуры

#КонецОбласти // ПанельВизуализации

//@skip-check statement-type-change, property-return-type
// 
// Параметры:
//  ОписанияПодписей - См. ЛегкийИнтерфейсДокументовЭДО.НовыеОписанияУстановленныхПодписей
//  УстановленнаяПодпись - См. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
Процедура ДобавитьОписаниеУстановленнойПодписи(ОписанияПодписей, УстановленнаяПодпись)
	
	СвойстваПодписи = УстановленнаяПодпись.СвойстваПодписи; // См. НовыеДанныеПодписи
	
	ИнтерфейсДокументовЭДО.СкорректироватьДатыПодписиНаЧасовойПоясКлиента(СвойстваПодписи);
	
	ОписаниеПодписи = ОписанияПодписей.Добавить();
	ЗаполнитьЗначенияСвойств(ОписаниеПодписи, УстановленнаяПодпись);
	ЗаполнитьЗначенияСвойств(ОписаниеПодписи, СвойстваПодписи);
	ОписаниеПодписи.ЭтоВходящаяПодпись = СвойстваПодписи.ВходящаяПодпись;
	Если ЗначениеЗаполнено(УстановленнаяПодпись.РезультатПроверкиПоМЧД) Тогда
		ОписаниеПодписи.ПодписьПоДоверенностиВерна = УстановленнаяПодпись.РезультатПроверкиПоМЧД.ПодписьВерна;
	КонецЕсли;
	
	ДанныеДляПолученияПредставления = ИнтерфейсДокументовЭДО.НовыеДанныеДляПолученияПредставленияСостоянияПодписи();
	ЗаполнитьЗначенияСвойств(ДанныеДляПолученияПредставления, УстановленнаяПодпись);
	ЗаполнитьЗначенияСвойств(ДанныеДляПолученияПредставления, СвойстваПодписи);
	
	ПредставлениеСостояния = ИнтерфейсДокументовЭДО.ПредставлениеСостоянияПодписи(ДанныеДляПолученияПредставления);
	ОписаниеПодписи.ПодписьВернаПредставление = ПредставлениеСостояния.ПодписьВернаПредставление;
	ОписаниеПодписи.ДоверенностьПредставление = ПредставлениеСостояния.ДоверенностьПредставление;
	
	РезультатПроверкиПоМЧД = УстановленнаяПодпись.РезультатПроверкиПоМЧД; // см. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
	Если Не ЗначениеЗаполнено(РезультатПроверкиПоМЧД) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПодписи.ПроверкаДоверенностиВыполненаВручную = 
		МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиПоМЧД);
	
	ПротоколПроверки = РезультатПроверкиПоМЧД.ПротоколПроверки; // см. МашиночитаемыеДоверенности.НовыйПротоколПроверкиМЧД
	Если Не ЗначениеЗаполнено(ПротоколПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПодписи.ПроверкаПолномочийВыполненаБезОшибок = ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех;
		
	//@skip-check invocation-parameter-type-intersect
	ОписаниеПодписи.ДоверенностьПроверенаУспешно = 
		МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД);
	
КонецПроцедуры

// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  Основание - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ПереформированиеДоступно(СостояниеЭДО, ТипДокумента, Основание)
	
	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ЭлектронныеДокументыЭДО.ПереформированиеЗапрещеноПоТипуДокумента(ТипДокумента)
		Или Не ЗначениеЗаполнено(Основание) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("ТипДокумента", ТипДокумента);
	ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчетаПоОтбору(Основание, Отбор, Ложь);
	Возврат ЗначениеЗаполнено(ОписаниеОбъектаУчета);
	
КонецФункции

// Возвращаемое значение:
//  Строка - текст запроса с отбором по электронному документу.
//           Отбор выполняется по условию "В (&ЭлектронныйДокумент)".
Функция ТекстЗапросаНевалидныхПодписейПоМЧДЭлектронныхДокументов()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПроверкиЭлектронныхПодписейЭДО.ЭлектронныйДокумент,
		|	ПроверкиЭлектронныхПодписейЭДО.ДатаПроверкиПодписиПоМЧД,
		|	ПроверкиЭлектронныхПодписейЭДО.ЕстьНевалидныеПодписиПоМЧД
		|ИЗ
		|	РегистрСведений.ПроверкиЭлектронныхПодписейЭДО КАК ПроверкиЭлектронныхПодписейЭДО
		|ГДЕ
		|	ПроверкиЭлектронныхПодписейЭДО.ЭлектронныйДокумент В (&ЭлектронныйДокумент)";
	Возврат ТекстЗапроса;

КонецФункции

// Параметры:
//  Файл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокументаСВизуализацией(Файл, ИдентификаторФормы)
	
	Результат = ЛегкийИнтерфейсДокументовЭДО.НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя();
	
	ПараметрыПолучения = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыПолучения.ИдентификаторФормы = ИдентификаторФормы;
	ПараметрыПолучения.ВызыватьИсключение = Ложь;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, ПараметрыПолучения);
	
	ЭлектронныеДокументыЭДО.ПодменитьФайлНаФайлСВизуализацией(ДанныеФайла, ИдентификаторФормы);
	
	Если Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ДанныеФайла.ПолноеНаименованиеВерсии) Тогда
		ДанныеФайла.ПолноеНаименованиеВерсии = 
			Обработки.ФорматДоговорныйДокумент101.ОбработанноеИмяФайлаДляОткрытия(ДанныеФайла.ПолноеНаименованиеВерсии);
	КонецЕсли;
	
	ДанныеФайлаИнформацииОтправителя = ЛегкийИнтерфейсДокументовЭДО.НовыеДанныеФайлаИнформацииОтправителя();
	ДанныеФайлаИнформацииОтправителя.ДвоичныеДанные = ПолучитьИзВременногоХранилища(
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеФайлаИнформацииОтправителя.ИмяФайла = СтрШаблон("%1.%2", ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайла.Расширение);
	ДанныеФайлаИнформацииОтправителя.ПолныеДанныеФайла = ДанныеФайла;
	ДанныеФайлаИнформацииОтправителя.ПомеченНаУдаление = ДанныеФайла.ПометкаУдаления;
	
	Результат.ДанныеФайла = ДанныеФайлаИнформацииОтправителя;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
