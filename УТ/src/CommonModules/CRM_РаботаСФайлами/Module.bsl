
#Область ПрограммныйИнтерфейс

// Позволяет определить параметры электронного письма перед отправкой файла по почте.
//
// Параметры:
//  ФайлыДляОтправки  - Массив из ОпределяемыйТип.ПрисоединенныйФайл - список файлов для отправки.
//  ПараметрыОтправки - см. РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//  ВладелецФайлов    - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект-владелец файлов.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор,
//                который необходимо использовать, есть требуется помещение данных во временное хранилище.
//
Процедура ПриОтправкеФайловПочтой(ПараметрыОтправки, ФайлыДляОтправки, ВладелецФайлов, УникальныйИдентификатор) Экспорт
	
	Если ПараметрыОтправки.Свойство("Получатель") Тогда
		
		Получатель = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		СписокПолучателей = Новый СписокЗначений;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФайлов, "КонтактнаяИнформация") Тогда
			Получатель = ВладелецФайлов;
		ИначеЕсли ТипЗнч(ВладелецФайлов) = Тип("СправочникСсылка.Проекты") Тогда
			Если ЗначениеЗаполнено(ВладелецФайлов.CRM_КонтактноеЛицоПартнера) Тогда
				Получатель = ВладелецФайлов.CRM_КонтактноеЛицоПартнера;
			Иначе
				Получатель = ВладелецФайлов.CRM_Партнер;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФайлов, "КонтактноеЛицо") Тогда
			Получатель = ВладелецФайлов.КонтактноеЛицо;
			Если Не ЗначениеЗаполнено(Получатель) 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФайлов, "Партнер") Тогда
				
				Получатель = ВладелецФайлов.Партнер;
			КонецЕсли;
		КонецЕсли;
		
		КонтактыТЧ = Получатель.КонтактнаяИнформация;
		ПочтаСтрокаТЧ = КонтактыТЧ.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
		Если ПочтаСтрокаТЧ = Неопределено Тогда
			
			Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
				Получатель = Получатель.CRM_ОсновноеКонтактноеЛицо;
			ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Получатель = Получатель.КонтактноеЛицо;
			ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФайлов, "Партнер") Тогда
				Получатель = ВладелецФайлов.Партнер;
			КонецЕсли;
			
			КонтактыТЧ = Получатель.КонтактнаяИнформация;
			ПочтаСтрокаТЧ = КонтактыТЧ.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
			
		КонецЕсли;
		СписокПолучателей.Добавить(Получатель, ?(ПочтаСтрокаТЧ <> Неопределено, ПочтаСтрокаТЧ.АдресЭП, ""));
		
		ПараметрыОтправки.Получатель = СписокПолучателей;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФайлов) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыОтправки.Вставить("ВладелецФайлов", ВладелецФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет запрос компоновщика данных в форме обработки "ПереносФайлов".
// Служит для обхода проблемы переноса файлов электронных писем, ранее удаленных 
// регламентным заданием по удалению старых вложений.
//
//  Параметры:
//   ТекстЗапроса - Строка - тест запроса компоновщика данных 
//
Процедура ДополнитьТекстЗапросаДляПереносаУдаленныхФайловПисем(ТекстЗапроса) Экспорт

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		 "Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК СправочникФайлов",
		"Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК СправочникФайлов" + Символы.ПС
			+ "ГДЕ" + Символы.ПС
			+ "	НЕ СправочникФайлов.CRM_ОчищенПоНастройке");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		 "Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК СправочникФайлов",
		"Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК СправочникФайлов" + Символы.ПС
			+ "ГДЕ" + Символы.ПС
			+ "	НЕ СправочникФайлов.CRM_ОчищенПоНастройке");
	
КонецПроцедуры // ДополнитьТекстЗапросаДляПереносаУдаленныхФайловПисем()

// Обновляет свойства файла БЕЗ учета версий - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  ИнформацияОФайле - Структура:
//     * АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//     * АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                 извлеченного из файла.
//     * ИмяБезРасширения               - Строка - необязательное, если свойство не указано или не заполнено,
//                                                 тогда не будет изменено.
//     * ДатаМодификацииУниверсальная   - Дата   - необязательное, дата последнего изменения файла, если
//                                                 свойство не указано или не заполнено, тогда будет
//                                                 установлена текущая дата сеанса.
//     * Расширение                     - Строка - необязательное, новое расширение файла.
//     * Редактирует                    - ЛюбаяСсылка - необязательное, новый пользователь, редактирующий файл.
//     * Кодировка                      - Строка - необязательное, кодировка, в которой сохранен файл.
//                                                 Список поддерживаемых кодировок см. в справке к методу
//                                                 глобального контекста "ПолучитьДвоичныеДанныеИзСтроки".
//
Процедура ОбновитьФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
		ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	
	РеквизитыЗначения = Новый Структура;
	
	Если ИнформацияОФайле.Свойство("ИмяБезРасширения") И ЗначениеЗаполнено(ИнформацияОФайле.ИмяБезРасширения) Тогда
		РеквизитыЗначения.Вставить("Наименование", ИнформацияОФайле.ИмяБезРасширения);
	КонецЕсли;
	
	СвойствоДатаМодификацииУниверсальная = "ДатаМодификацииУниверсальная";
	Если Не ИнформацияОФайле.Свойство(СвойствоДатаМодификацииУниверсальная)
		Или Не ЗначениеЗаполнено(ИнформацияОФайле.ДатаМодификацииУниверсальная)
		Или ИнформацияОФайле.ДатаМодификацииУниверсальная > ТекущаяУниверсальнаяДата() Тогда
		
		// Заполнение текущей даты в формате универсального времени.
		РеквизитыЗначения.Вставить(СвойствоДатаМодификацииУниверсальная, ТекущаяУниверсальнаяДата());
	Иначе
		РеквизитыЗначения.Вставить(СвойствоДатаМодификацииУниверсальная, ИнформацияОФайле.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Кодировка") И Не ПустаяСтрока(ИнформацияОФайле.Кодировка) Тогда
		РегистрыСведений.КодировкиФайлов.ЗаписатьКодировкуВерсииФайла(ПрисоединенныйФайл, ИнформацияОФайле.Кодировка);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	МетаданныеФайла = Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл));
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	Если МетаданныеФайла.ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска Тогда
		РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(ИнформацияОФайле.АдресВременногоХранилищаТекста, 
			ДвоичныеДанные, ПрисоединенныйФайл.Расширение);
		РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", РезультатИзвлеченияТекста.СтатусИзвлеченияТекста);
		РеквизитыЗначения.Вставить("ТекстХранилище", РезультатИзвлеченияТекста.ТекстХранилище);
	Иначе
		РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
		РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(""));
	КонецЕсли;
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Заменяет двоичные данные файла в ИБ на данные во временном хранилище.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//  АдресФайлаВоВременномХранилищеДвоичныеДанные - Строка - адрес новых двоичных данных файла.
//  РеквизитыЗначения - Структура:
//     * Наименование                   - Строка - необязательное, имя файла без расширения.
//     * ДатаМодификацииУниверсальная   - Дата   - необязательное, дата последнего изменения файла, если
//                                                 свойство не указано или не заполнено, тогда будет
//                                                 установлена текущая дата сеанса.
//     * Расширение                     - Строка - необязательное, новое расширение файла.
//     * Редактирует                    - ЛюбаяСсылка - необязательное, новый пользователь, редактирующий файл.
//     * Кодировка                      - Строка - необязательное, кодировка, в которой сохранен файл.
//                                                 Список поддерживаемых кодировок см. в справке к методу
//                                                 глобального контекста "ПолучитьДвоичныеДанныеИзСтроки".
//
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(Знач ПрисоединенныйФайл,
	                                           Знач АдресФайлаВоВременномХранилищеДвоичныеДанные,
	                                           Знач РеквизитыЗначения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ЭтоСсылка = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл));
	
	Контекст = РаботаСФайламиСлужебный.КонтекстОбновленияФайла(ПрисоединенныйФайл, 
		АдресФайлаВоВременномХранилищеДвоичныеДанные);
	
	// Очищенный файл приравнивается к новому, чтобы не совпадали старый и новый пути при обновлении файла.
	Если ПрисоединенныйФайл.CRM_ОчищенПоНастройке Тогда
		Контекст.ЭтоНовый = Истина;
	КонецЕсли;
	
	МенеджерФайла = РаботаСФайламиСлужебный.МенеджерФайлов(ПрисоединенныйФайл);
	МенеджерФайла.ПередОбновлениемДанныхФайла(Контекст);
	
	НачатьТранзакцию();
	Попытка
		Если ЭтоСсылка Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл)).ПолноеИмя());
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПрисоединенныйФайл);
			БлокировкаДанных.Заблокировать();
			
			ЗаблокироватьДанныеДляРедактирования(ПрисоединенныйФайл);
			
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		Иначе
			ФайлОбъект = ПрисоединенныйФайл;
		КонецЕсли;
		
		ФайлОбъект.Изменил = Пользователи.АвторизованныйПользователь();
		
		Если ТипЗнч(РеквизитыЗначения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ФайлОбъект, РеквизитыЗначения);
		КонецЕсли;
		
		МенеджерФайла.ПередЗаписьюДанныхФайла(Контекст, ФайлОбъект);
		ФайлОбъект.Записать();
		МенеджерФайла.ПриОбновленииДанныхФайла(Контекст, ФайлОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
	МенеджерФайла.ПослеОбновленияДанныхФайла(Контекст, Истина);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
