///////////////////////////////////////////////////////////////////////////////////////////////////////
// CRM взаимодействия клиент сервер
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область Новые

Процедура ДобавитьНеобходимыеТэгиHTML(ТекстHTML) Экспорт
	
	НРегТекстHTML = НРег(ТекстHTML);
	ПозицияТэгаHTML = СтрНайти(НРегТекстHTML, "<html");
	ПозицияТэгаBODY = СтрНайти(НРегТекстHTML, "<body");
	Если ПозицияТэгаHTML = 0 И ПозицияТэгаBODY = 0 Тогда
		ТекстHTML = "<html><body style=""margin:0; padding:8px"">" + ТекстHTML + "</body></html>";
	ИначеЕсли ПозицияТэгаHTML = 0 И ПозицияТэгаBODY > 0 Тогда
		ТекстHTML = "<html>" + ТекстHTML + "</html>";
	ИначеЕсли ПозицияТэгаHTML > 0 И ПозицияТэгаBODY = 0 Тогда
		ПозицияОкончанияТэгаHTML = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, ">", ПозицияТэгаHTML);
		Голова = Лев(ТекстHTML, ПозицияОкончанияТэгаHTML);
		ПозицияЗакрывающегосяТэгаHTML = СтрНайти(НРегТекстHTML, "</html>");
		Хвост = Сред(ТекстHTML, ПозицияЗакрывающегосяТэгаHTML);
		Середина = Сред(ТекстHTML, ПозицияОкончанияТэгаHTML + 1,
			 ПозицияЗакрывающегосяТэгаHTML - ПозицияОкончанияТэгаHTML - 1);
		ТекстHTML = Голова + "<body style=""margin:0; padding:8px"">" + Середина + "</body>" + Хвост;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСостояниеCRM(ТекКонтакт)
	
	ПредставлениеУвольнения = "";
	Если ТипЗнч(ТекКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		 И ЗначениеЗаполнено(ТекКонтакт)
		 И ЗначениеЗаполнено(ТекКонтакт.CRM_Состояние) Тогда
		Если Не ТекКонтакт.CRM_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.Работает") Тогда
			ПредставлениеУвольнения = ТекКонтакт.CRM_Состояние;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеУвольнения;
КонецФункции

// При необходимости дополняет массив строковых представлений типов предметов взаимодействий.
// Используется, если в конфигурации определен хотя бы один предмет взаимодействий. Например, заказы, вакансии и т.п.
//
// Параметры:
//  ТипыПредметов  - Массив - массив, в который добавляются строковые представления типов предметов взаимодействий.
//
Процедура ПриОпределенииВозможныхПредметов(ТипыПредметов) Экспорт
	
	// +CRM
	ТипыПредметов.Добавить("ДокументСсылка.CRM_РассылкаЭлектронныхПисем");
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю") Тогда
		ТипыПредметов.Добавить("ДокументСсылка.CRM_СчетНаОплатуПокупателю");
	КонецЕсли;
	ТипыПредметов.Добавить("ДокументСсылка.CRM_Телемаркетинг");
	ТипыПредметов.Добавить("БизнесПроцессСсылка.CRM_БизнесПроцесс");
	// -CRM
	
КонецПроцедуры

// Дополняет описания возможных типов контактов.
// Используется, если в конфигурации определен хотя бы один тип контактов взаимодействий,
// помимо справочника Пользователи. Например, партнеры, контактные лица и т.п.
//
// Параметры:
//  ТипыКонтактов - Массив - массив структур, в котором описываются возможные типы контактов.
//    Каждая структура содержит описание одного типа контактов и содержит следующие поля:
//       *Тип                                - Тип    - тип ссылки контакта.
//       *ВозможностьИнтерактивногоСоздания  - Булево - признак возможности интерактивного создания контакта из
//                                                      документов - взаимодействий.
//       *Имя                                 - Строка - имя типа контакта , как оно определено в метаданных.
//       *Представление                       - Строка - представление типа контакта для отображения пользователю.
//       *Иерархический                       - Булево - признак того, является ли справочник иерархическим.
//       *ЕстьВладелец                        - Булево - признак того, что у контакта есть владелец.
//       *ИмяВладельца                        - Строка - имя владельца контакта, как оно определено в метаданных.
//       *ИскатьПоДомену                      - Булево - признак того, что по данному типу контакта будет осуществляться
//                                                       поиск по домену.
//       *Связь                               - Строка - описывает возможную связь данного контакта с другим контактом, в
//                                                       случае когда текущий контакт является реквизитом другого контакта.
//                                                       Описывается следующей строкой "ИмяТаблицы.ИмяРеквизита".
//       *ИмяРеквизитаПредставлениеКонтакта   - Строка - имя реквизита контакта, из которого будет получено
//                                                       представление контакта.
//
Процедура ПриОпределенииВозможныхКонтактов(ТипыКонтактов) Экспорт
	
	Контакт = ВзаимодействияКлиентСервер.НовоеОписаниеКонтакта();
	Контакт.Тип = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	Контакт.Имя = "CRM_ПотенциальныеКлиенты";
	Контакт.Представление = НСтр("ru='Потенциальные клиенты';en='Potential Customers'");
	Контакт.ИскатьПоДомену = Ложь;
	ТипыКонтактов.Добавить(Контакт);
	
КонецПроцедуры

Функция ПолучитьТекстСообщенияОбОтсутствииПравДоступаКЭлектронномуПисьму(УчетнаяЗапись) Экспорт
	
	ТекстСообщения = СтрШаблон(НСтр("ru='Недостаточно прав для работы с письмами учетной записи %1!"
			"Текущий пользователь должен быть добавлен в список пользователей учетной записи либо"
			"являться Ответственным данного письма либо"
			"в учетной записи должен стоять флаг ""Разрешить просмотр писем всем пользователям системы"""
			"';en='Insufficient rights to work with letters of account %1!"
			"Current user must be added to list of users of account either"
			"be Responsible of this letter either"
			"the account must have the flag ""Allow viewing messages to all users of the system""'"), УчетнаяЗапись);
	
	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

#Область Измененные

// Формирует представление адресата электронной почты.
//
// Параметры:
//  Имя     - Строка - имя адресата.
//  Адрес   - Строка - адрес электронной почты адресата.
//  Контакт - СправочникСсылка - контакт, которому принадлежит имя и адрес почты.
//
// Возвращаемое значение:
//   Строка - сформированное представление адресата электронной почты.
//
Функция ПолучитьПредставлениеАдресата(Имя, Адрес, Контакт) Экспорт
	
	// CRM - метод переписан полностью.
	
	АдресСоСкобками = "<" + Адрес + ">";
	ИмяСоСкобками = "<" + Имя + ">";
	
	Если Имя = Адрес Или Имя = "" Или СтрНайти(Адрес, ИмяСоСкобками) > 0 Тогда
		Результат = Адрес;
	Иначе
		Если ПустаяСтрока(Адрес) Тогда
			Результат = Имя;
		Иначе
			Результат = СокрЛП(СтрЗаменить(Имя, АдресСоСкобками, "")) + " " + АдресСоСкобками;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Результат, "<") = 0 Тогда
		Результат = "<" + Результат + ">";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) <> Тип("Строка") Тогда
		Результат = Результат + " [" + Строка(Контакт) + "]";
	Иначе
		Результат = Результат + Контакт;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление списка адресатов электронной почты для коллекции адресатов.
//
// Параметры:
//  ТаблицаАдресатов    - ТаблицаЗначений - таблица с данным адресатов.
//  ВключатьИмяКонтакта - Булево - признак необходимости включения в представление данных контакта.
//
// Возвращаемое значение:
//  Строка - сформированное представление списка адресатов электронной почты.
//
Функция ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресатов, ВключатьИмяКонтакта = Истина) Экспорт

	Представление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаАдресатов Цикл
		// +CRM
		ПризнакУволенного = ПолучитьСостояниеCRM(СтрокаТаблицы.Контакт);
		Если ПризнакУволенного = "" Тогда
		// -CRM
			Представление = Представление 
	              + ПолучитьПредставлениеАдресата(СтрокаТаблицы.Представление,
	                                              СтрокаТаблицы.Адрес, 
	                                             ?(ВключатьИмяКонтакта, СтрокаТаблицы.Контакт, "")) + ", ";
		// +CRM
		Иначе
			Представление = Представление 
	              + ПолучитьПредставлениеАдресата(СтрокаТаблицы.Представление,
	                                              СтрокаТаблицы.Адрес, 
	                                             Строка(" ( " + СтрокаТаблицы.Контакт.Владелец + " / " + ПризнакУволенного + " )")) + ", ";
		// -CRM
		КонецЕсли;
	КонецЦикла;
	
	// +CRM уберем запятую в конце.
	Представление = СокрЛП(Представление);
	
	Если Прав(Представление, 1) = "," Тогда
		ДлинаСтрокиБезЗапятой = СтрДлина(Представление) - 1;
		Представление = Лев(Представление, ДлинаСтрокиБезЗапятой);
	КонецЕсли;
	// -CRM
	
	Возврат Представление;
	
КонецФункции

// Получает строковое представление размера файла.
//
// Параметры:
//  РазмерВБайтах - Число - размер в байтах вложенного файла электронного письма.
//
// Возвращаемое значение:
//   Строка   - строковое представление размера вложенного файла электронного письма.
//
Функция ПолучитьСтроковоеПредставлениеРазмераФайла(РазмерВБайтах) Экспорт
	
	// +CRM
	Если РазмерВБайтах < 1024 Тогда
		СтрокаРазмер = Формат(РазмерВБайтах, "ЧДЦ=0") + " " + НСтр("ru = 'Б'");
		Возврат СтрокаРазмер;
	КонецЕсли;
	// -CRM
	
	РазмерМб = РазмерВБайтах / (1024 * 1024);
	Если РазмерМб > 1 Тогда
		СтрокаРазмер = Формат(РазмерМб, "ЧДЦ=1") + " " + НСтр("ru = 'Мб'");
	Иначе
		СтрокаРазмер = Формат(РазмерВБайтах / 1024, "ЧДЦ=0; ЧН=0") + " " + НСтр("ru = 'Кб'");
	КонецЕсли;
	
	Возврат СтрокаРазмер;
	
КонецФункции

#КонецОбласти

#КонецОбласти
