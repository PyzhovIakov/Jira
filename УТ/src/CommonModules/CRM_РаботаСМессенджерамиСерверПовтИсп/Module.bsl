
////////////////////////////////////////////////////////////////////////////////
// CRM работа с мессенджерами сервер повт исп
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Функция - Найти контакт по контактной информации
//
// Параметры:
//  ИДПользователя	 - Строка - ID Пользователя.
//  УчетнаяЗапись	 - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
//  ТипКИ			 - ПеречислениеСсылка.ТипыКонтактнойИнформации	 - Тип контактной информации.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - Найденный контакт.
//
Функция НайтиКонтактПоКонтактнойИнформации(ИДПользователя, УчетнаяЗапись, ТипКИ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контакты.Ссылка КАК Ссылка,
	|	Контакты.ИДПользователя КАК ИДПользователя,
	|	Контакты.Порядок КАК Порядок
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.Представление КАК ИДПользователя,
	|		9 КАК Порядок
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Представление = &ИДПользователя
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементМассиваОписания.Тип = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") 
			И Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов") Тогда
			Продолжить;
		КонецЕсли;
		
		Связь = "";
		Если ЭлементМассиваОписания.Тип = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Порядок = "1";
		ИначеЕсли ЭлементМассиваОписания.Тип = Тип("СправочникСсылка.Партнеры") Тогда
			Порядок = "ВЫБОР КОГДА КлючЛица.Физлицо Есть NULL ТОГДА 2 ИНАЧЕ 0 КОНЕЦ";
			Связь = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров КАК КлючЛица
			| ПО КлючЛица.ФизЛицо = КонтактнаяИнформация.Ссылка";
		ИначеЕсли ЭлементМассиваОписания.Тип = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Порядок = "3";
		Иначе
			Порядок = "9";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактнаяИнформация.Представление КАК ИДПользователя,
		|	" + Порядок + " КАК Порядок
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|	" + Связь + "
		|ГДЕ
		|	КонтактнаяИнформация.Представление = &ИДПользователя
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
	КонецЦикла;	
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ИДПользователя";

	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КонтактнаяИнформация.Представление = &ИДПользователя",
												"КонтактнаяИнформация.НомерТелефона = &ИДПользователя");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИДПользователя", ИДПользователя);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если (ВыборкаПоСсылкам.Следующий()) Тогда
			Возврат ВыборкаПоСсылкам.Ссылка;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Получить вид контактной информации мессенджера
//
// Параметры:
//  ТипМессенджера	 - Строка	 - Тип мессенджера.
//  Контакт			 - СправочникСсылка	 - Тип контактного лица.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - Найденный контакт.
//
Функция ПолучитьВидКИМессенджера(Знач ТипМессенджера, Контакт) Экспорт
	
	Если ТипЗнч(ТипМессенджера) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров") Тогда
		ТипМессенджера = ТипМессенджера.ТипМессенджера;
	КонецЕсли;
	
	ВидКИ = РегистрыСведений.CRM_ВидыКонтактнойИнформацииМессенджеров.ВидКонтактнойИнформацииМессенджера(ТипМессенджера,
		 Контакт);
	Если ЗначениеЗаполнено(ВидКИ) Тогда
		Возврат ВидКИ;
	КонецЕсли;
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	Возврат МодульМенеджера.ПолучитьВидКИМессенджера(Контакт);
	
КонецФункции

// Тип контактной информации мессенджера
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контакной информации. 
//
Функция ТипКИМессенджера(УчетнаяЗапись) Экспорт
	
	ТипКИМессенджера = Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка();
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Если НЕ МодульМенеджера = Неопределено Тогда
		ТипКИМессенджера = МодульМенеджера.ТипКИМессенджера();
	КонецЕсли;
	
	Возврат ТипКИМессенджера;
	
КонецФункции

// Возвращает структуру с параметрами доступа.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Структура - Структура с параметрами доступа.
//
Функция СтруктураПараметровДоступа(УчетнаяЗапись) Экспорт
	ПараметрыДоступа = УчетнаяЗапись.ХранилищеПараметровДоступа.Получить();
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура")
		И Не ПараметрыДоступа.Свойство("ПараметрыПрокси") Тогда

		ПараметрыДоступа.Вставить("ПараметрыПрокси", ПараметрыПрокси(УчетнаяЗапись));
	КонецЕсли;
	Возврат ПараметрыДоступа;
КонецФункции

// Возвращает параметры работы мессенджера.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Структура - Структура с параметрами.
//
Функция ПараметрыМессенджера(УчетнаяЗапись) Экспорт
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.ПараметрыМессенджера();

КонецФункции

// Функция - Начало адреса страницы пользователя
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Строка - Строка с адресом страницы.
//
Функция НачалоАдресаСтраницыПользователя(УчетнаяЗапись) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.НачалоАдресаСтраницыПользователя();
КонецФункции

// Функция - Начало адреса страницы пользователя
//
// Параметры:
//  УчетнаяЗапись 	- СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
//	ID_Пользователя - Строка - Идентификатор пользователя.  
// 
// Возвращаемое значение:
//  Строка - Строка с адресом страницы.
//
Функция ПредставлениеКонтактнойИнформацииПользователя(УчетнаяЗапись, ID_Пользователя) Экспорт
	
	ПредставлениеКИПользователя = "";
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Если НЕ МодульМенеджера = Неопределено Тогда
		ПредставлениеКИПользователя = МодульМенеджера.ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя);
	КонецЕсли;
	
	Возврат ПредставлениеКИПользователя;
	
КонецФункции

// Возвращает признак возможности изменения сообщений.
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Булево - признак возможности изменения сообщений.
//
Функция ВозможноИзменениеСообщений(УчетнаяЗапись) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.ВозможноИзменениеСообщений();
КонецФункции

// Возвращает признак использования вложений.
//
// Параметры:
//	УчетнаяЗапись - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Булево - признак использования вложений.
//
Функция ИспользуютсяВложения(УчетнаяЗапись) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Возврат МодульМенеджера.ИспользуютсяВложения();
КонецФункции

// Возвращает HTML-текст контекста.
//
// Параметры:
//	УчетнаяЗапись  - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
//	idПользователя - Строка - Идентификатор пользователя.
//	idГруппы	   - Строка - Идентификатор группы.
// 
// Возвращаемое значение:
//  Строка - HTML-текст контекста.
//
Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Контекст = МодульМенеджера.HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы);
	Возврат ?(ЗначениеЗаполнено(Контекст), Контекст, ""); 
КонецФункции

// Возвращает тип MIME по расширению файла.
//
// Параметры:
//	Расширение - Строка - Расширение файла.
// 
// Возвращаемое значение:
//  Строка - тип MIME по расширению файла.
//
Функция ТипMIMEПоРасширениюФайла(Расширение) Экспорт
	
	ТипыMIME = ТипыMIME();
	
	Тип = ТипыMIME.Получить(НРег(Расширение));
	Если Тип = Неопределено Тогда
		Тип = "application/octet-stream";
	КонецЕсли;
	Возврат Тип;
	
КонецФункции

// Возвращает расширение по типу MIME.
//
// Параметры:
//	Тип - Строка - Тип MIME.
// 
// Возвращаемое значение:
//  Строка - расширение файла.
//
Функция РасширениеПоТипуMIME(Тип) Экспорт
	
	ТипыMIME = ТипыMIME();
	
	Для каждого КлючЗначение Из ТипыMIME Цикл
		Если СтрНайти(НРег(Тип), НРег(КлючЗначение.Значение)) <> 0 Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Функция возвращает соответствие типов MIME
// 
// Возвращаемое значение:
//   - Соответствие
//
Функция ТипыMIME() Экспорт
	
	ТипыMIME = Новый Соответствие;
	
	ТипыMIME.Вставить("aac", "audio/aac");
	ТипыMIME.Вставить("abw", "application/x-abiword");
	ТипыMIME.Вставить("arc", "application/octet-stream");
	ТипыMIME.Вставить("avi", "video/x-msvideo");
	ТипыMIME.Вставить("azw", "application/vnd.amazon.ebook");
	ТипыMIME.Вставить("bin", "application/octet-stream");
	ТипыMIME.Вставить("bz", "application/x-bzip");
	ТипыMIME.Вставить("bz2", "application/x-bzip2");
	ТипыMIME.Вставить("csh", "application/x-csh");
	ТипыMIME.Вставить("css", "text/css");
	ТипыMIME.Вставить("csv", "text/csv");
	ТипыMIME.Вставить("doc", "application/msword");
	ТипыMIME.Вставить("eot", "application/vnd.ms-fontobject");
	ТипыMIME.Вставить("epub", "application/epub+zip");
	ТипыMIME.Вставить("gif", "image/gif");
	ТипыMIME.Вставить("htm", "text/html");
	ТипыMIME.Вставить("html", "text/html");
	ТипыMIME.Вставить("ico", "image/x-icon");
	ТипыMIME.Вставить("ics", "text/calendar");
	ТипыMIME.Вставить("jar", "application/java-archive");
	ТипыMIME.Вставить("jpeg", "image/jpeg");
	ТипыMIME.Вставить("jpg", "image/jpeg");
	ТипыMIME.Вставить("js", "application/javascript");
	ТипыMIME.Вставить("json", "application/json");
	ТипыMIME.Вставить("mid", "audio/midi");
	ТипыMIME.Вставить("midi", "audio/midi");
	ТипыMIME.Вставить("mp3", "audio/mpeg");
	ТипыMIME.Вставить("mpeg", "video/mpeg");
	ТипыMIME.Вставить("mp4", "video/mp4");
	ТипыMIME.Вставить("mpkg", "application/vnd.apple.installer+xml");
	ТипыMIME.Вставить("odp", "application/vnd.oasis.opendocument.presentation");
	ТипыMIME.Вставить("ods", "application/vnd.oasis.opendocument.spreadsheet");
	ТипыMIME.Вставить("odt", "application/vnd.oasis.opendocument.text");
	ТипыMIME.Вставить("oga", "audio/ogg");
	ТипыMIME.Вставить("ogv", "video/ogg");
	ТипыMIME.Вставить("ogx", "application/ogg");
	ТипыMIME.Вставить("otf", "font/otf");
	ТипыMIME.Вставить("png", "image/png");
	ТипыMIME.Вставить("pdf", "application/pdf");
	ТипыMIME.Вставить("ppt", "application/vnd.ms-powerpoint");
	ТипыMIME.Вставить("rar", "application/x-rar-compressed");
	ТипыMIME.Вставить("rtf", "application/rtf");
	ТипыMIME.Вставить("sh", "application/x-sh");
	ТипыMIME.Вставить("svg", "image/svg+xml");
	ТипыMIME.Вставить("swf", "application/x-shockwave-flash");
	ТипыMIME.Вставить("tar", "application/x-tar");
	ТипыMIME.Вставить("tif", "image/tiff");
	ТипыMIME.Вставить("tiff", "image/tiff");
	ТипыMIME.Вставить("ts", "video/vnd.dlna.mpeg-tts");
	ТипыMIME.Вставить("ttf", "font/ttf");
	ТипыMIME.Вставить("vsd", "application/vnd.visio");
	ТипыMIME.Вставить("wav", "audio/x-wav");
	ТипыMIME.Вставить("weba", "audio/webm");
	ТипыMIME.Вставить("webm", "video/webm");
	ТипыMIME.Вставить("webp", "image/webp");
	ТипыMIME.Вставить("woff", "font/woff");
	ТипыMIME.Вставить("woff2", "font/woff2");
	ТипыMIME.Вставить("xhtml", "application/xhtml+xml");
	ТипыMIME.Вставить("xls", "application/vnd.ms-excel");
	ТипыMIME.Вставить("xml", "application/xml");
	ТипыMIME.Вставить("xul", "application/vnd.mozilla.xul+xml");
	ТипыMIME.Вставить("zip", "application/zip");
	ТипыMIME.Вставить("3gp", "video/3gpp");
	ТипыMIME.Вставить("3g2", "video/3gpp2");
	ТипыMIME.Вставить("7z", "application/x-7z-compressed");
	
	Возврат ТипыMIME;
	
КонецФункции

// Получить картинку мессенджера.
//
// Параметры:
//	УчетнаяЗапись  - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
//	ИмяМакета	   - Строка - Имя макета.
// 
// Возвращаемое значение:
//  СписокЗначений - Список мессенджеров.
//
Функция КартинкаМессенджера(УчетнаяЗапись, ИмяМакета = "Иконка_16") Экспорт
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(УчетнаяЗапись.ТипМессенджера);
	Если МодульМенеджера = Неопределено Тогда
		Картинка = Новый Картинка;
	Иначе
		ДанныеКартинки = МодульМенеджера.ПолучитьМакет(ИмяМакета);
		Картинка = Новый Картинка(ДанныеКартинки);
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Возвращает текст заголовка.
//
// Параметры:
//	ТипМессенджера - Строка - Тип мессенджера.
// 
// Возвращаемое значение:
//  Строка - текст заголовка.
//
Функция ТекстЗаголовка(ТипМессенджера) Экспорт
	
	Заголовок = "{}"; // Строка в формате JSON
	
	МодульМенеджера = CRM_РаботаСМессенджерамиСерверПовтИсп.МенеджерМессенджера(ТипМессенджера);
	Если НЕ МодульМенеджера = Неопределено Тогда
		Макет = МодульМенеджера.ПолучитьМакет("МакетФорматированнойСтроки");
		Заголовок = Макет.ПолучитьОбласть("Заголовок").ТекущаяОбласть.Текст;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает параметры прокси сервера.
//
// Параметры:
//	УчетнаяЗапись  - СправочникСсылка.CRM_УчетныеЗаписиМессенджеров - Учетная запись.
// 
// Возвращаемое значение:
//  Структура - Структура с параметрами.
//
Функция ПараметрыПрокси(УчетнаяЗапись) Экспорт
	Если ЗначениеЗаполнено(УчетнаяЗапись.ПроксиСервер) Тогда
		СтруктураПрокси = Новый Структура("Сервер, Порт, Пользователь, Пароль",
			 УчетнаяЗапись.ПроксиСервер, УчетнаяЗапись.ПроксиПорт, УчетнаяЗапись.ПроксиПользователь,
			 УчетнаяЗапись.ПроксиПароль);
	Иначе
		СтруктураПрокси = Неопределено;
	КонецЕсли;
	Возврат СтруктураПрокси;
КонецФункции

// Возвращает массив типов мессенджеров в которых используются групповые чаты.
//
// Возвращаемое значение:
//  Массив - Массив типов мессенджеров.
//
Функция ГрупповыеМессенджеры() Экспорт
	ГрупповыеМессенджеры = Новый Массив;
	ГрупповыеМессенджеры.Добавить("WhatsApp");
	ГрупповыеМессенджеры.Добавить("Telegram");
	Возврат ГрупповыеМессенджеры;
КонецФункции

// Возвращает массив всех типов мессенджеров.
//
// Возвращаемое значение:
//  Массив - Массив типов мессенджеров.
//
Функция ВсеТипыМессенджеров() Экспорт
	
	ВсеТипыМессенджеров = Новый Массив;
	ВсеТипыМессенджеров.Добавить("B2BПортал");
	ВсеТипыМессенджеров.Добавить("Facebook");
	ВсеТипыМессенджеров.Добавить("Instagram");
	ВсеТипыМессенджеров.Добавить("InstagramDirect");
	ВсеТипыМессенджеров.Добавить("Telegram");
	ВсеТипыМессенджеров.Добавить("TelegramBot");
	ВсеТипыМессенджеров.Добавить("Viber");
	ВсеТипыМессенджеров.Добавить("WhatsApp");
	ВсеТипыМессенджеров.Добавить("ВКонтакте");
	ВсеТипыМессенджеров.Добавить("ВКонтактеКомментарии");
	ВсеТипыМессенджеров.Добавить("СистемаВзаимодействия");
	
	Возврат ВсеТипыМессенджеров;
	
КонецФункции

// Возвращает массив типов мессенджеров с возможностью писать первыми.
//
// Возвращаемое значение:
//  Массив - Массив типов мессенджеров.
//
Функция МессенджерыСВозможностьюПисатьПервыми() Экспорт
	
	ВсеТипыМессенджеров = ВсеТипыМессенджеров();
	ТипыМессенджеров = Новый Массив;
	
	Для Каждого ТекТип Из ВсеТипыМессенджеров Цикл
		МодульМенеджера = МенеджерМессенджера(ТекТип);
		ПараметрыМессенджера = МодульМенеджера.ПараметрыМессенджера();
		Если ПараметрыМессенджера.ВозможностьПисатьПервыми Тогда
			ТипыМессенджеров.Добавить(ТекТип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипыМессенджеров;
	
КонецФункции

#КонецОбласти

// Возвращает массив типов мессенджеров в которых используются групповые чаты.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты	 - Учетная запись.
// 
// Возвращаемое значение:
//  Массив - Массив типов мессенджеров.
//
Функция МессенджерПоддерживаетГрупповыеЧаты(УчетнаяЗапись) Экспорт
	Возврат (ГрупповыеМессенджеры().Найти(УчетнаяЗапись.ТипМессенджера) <> Неопределено);
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает менеджер обработки мессенджера.
//
// Параметры:
//	ТипМессенджера - Строка - Тип мессенджера.
// 
// Возвращаемое значение:
//  ОбработкаМенеджер, Неопределено - менеджер обработки мессенджера.
//
Функция МенеджерМессенджера(ТипМессенджера) Экспорт
	
	Перем МодульМенеджера;
	
	Если ЗначениеЗаполнено(ТипМессенджера) Тогда
		МодульМенеджера = Обработки["CRM_РаботаСМессенджером" + Строка(ТипМессенджера)];
	КонецЕсли;
	
	Возврат МодульМенеджера;
	
КонецФункции

#КонецОбласти
