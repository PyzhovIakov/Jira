////////////////////////////////////////////////////////////////////////////////
//	Общие процедуры для обработки проверки правописания в поле HTML-документа
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьПравописание(Форма, ПолеДокументаHTML, ПроверяемыйТекст, ТипТекста = Неопределено, 
		ИмяКнопкиПроверки = Неопределено) Экспорт
	
	Если ТипТекста = Неопределено Тогда
		ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяКнопкиПроверки) И Не Форма.Элементы[ИмяКнопкиПроверки].Пометка Тогда
		Форма.CRM_НомерТекущейОшибки = 0;
	Иначе
		СоздатьРеквизитыФормы(Форма, ПолеДокументаHTML, ПроверяемыйТекст, ТипТекста);
	КонецЕсли;
	
	РезультатПроверки = ПроверитьТекстЧерезСервис(ПроверяемыйТекст, Форма.CRM_ЯзыкПроверки, ТипТекста);
	РазметитьОшибки(Форма, ПроверяемыйТекст, РезультатПроверки);
	
	Если НЕ (ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст) Тогда
		CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ПроверяемыйТекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВариантыЗаменыВКонтекстноеМеню(Форма, НомерОшибки) Экспорт
	
	ВариантыЗамены = Форма.CRM_СписокОшибок[НомерОшибки].Значение.s;
	
	ГруппаДляКоманд = Форма.Элементы.МенюГруппаВариантыЗамены;
	Пока ГруппаДляКоманд.ПодчиненныеЭлементы.Количество() > 0 Цикл
		УдаляемыйЭлемент = ГруппаДляКоманд.ПодчиненныеЭлементы[0];
		УдаляемаяКоманда = Форма.Команды.Найти(УдаляемыйЭлемент.ИмяКоманды);
		Форма.Элементы.Удалить(ГруппаДляКоманд.ПодчиненныеЭлементы[0]);
		Форма.Команды.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	Счетчик = 0;
	
	Для Каждого Вариант Из ВариантыЗамены Цикл
		ИмяКоманды = "ЗаменитьНаВариант" + Счетчик;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие = "Подключаемый_ЗаменитьНаВариантНажатие";
		ПунктМеню = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДляКоманд);
		ПунктМеню.Заголовок = Вариант;
		ПунктМеню.ИмяКоманды = ИмяКоманды;
		ПунктМеню.Шрифт = Новый Шрифт(, , Истина, Истина);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Форма.CRM_НомерТекущейОшибки = НомерОшибки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьРеквизитыФормы(Форма, ПолеДокументаHTML, ПроверяемыйТекст, ТипТекста)
	
	ГруппаПроверкаПравописания = Форма.Элементы.CRM_ГруппаПроверкаПравописания;
	ТипГруппаФормы 		= Тип("ГруппаФормы");
	ТипКнопкаФормы 		= Тип("КнопкаФормы");
	ТипДекорацияФормы 	= Тип("ДекорацияФормы");
	ТипПолеФормы 		= Тип("ПолеФормы");
	
	Если ГруппаПроверкаПравописания.ПодчиненныеЭлементы.Количество() = 0 Тогда
		
		ДействиеКоманды = "Подключаемый_ВыполнитьКомандуПроверкиПравописания";
		
		ГруппаПроверкаПравописания.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаПроверкаПравописания.Ширина = 20;
		ГруппаПроверкаПравописания.РастягиватьПоГоризонтали = Ложь;
	
		ДобавляемыеРеквизиты = Новый Массив;
		ТипСтрока = "Строка";
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_СписокОшибок", Новый ОписаниеТипов("СписокЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ТекстСОшибкой", Новый ОписаниеТипов(ТипСтрока)));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ВариантыЗамены", Новый ОписаниеТипов("СписокЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ЯзыкПроверки", Новый ОписаниеТипов(ТипСтрока)));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ТекстИзменен", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_РежимПроверки", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_НомерТекущейОшибки", Новый ОписаниеТипов("Число")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.CRM_ВариантыЗамены.ТипЗначения = Новый ОписаниеТипов(ТипСтрока);
		
		Элемент = Форма.Элементы.Добавить("РедактируемыйТекст", ТипПолеФормы, ГруппаПроверкаПравописания);
		Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		Элемент.ПутьКДанным = "CRM_ТекстСОшибкой";
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.РастягиватьПоВертикали = Истина;
		Элемент.ТолькоПросмотр = Истина;
		
		Элемент = Форма.Элементы.Добавить("ВариантыЗамены", Тип("ТаблицаФормы"), ГруппаПроверкаПравописания);
		Элемент.ПутьКДанным = "CRM_ВариантыЗамены";
		Элемент.Заголовок = НСтр("ru='Исправить на'");
		Элемент.ШрифтЗаголовка = Новый Шрифт( , , Истина);
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элемент.Высота = 6;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
		Элемент.ТолькоПросмотр = Истина;
		
		Колонка = Форма.Элементы.Добавить("Значение", ТипПолеФормы, Элемент);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ПутьКДанным = "CRM_ВариантыЗамены.Значение";
		Элемент.УстановитьДействие("Выбор", ДействиеКоманды);
		
		ГруппаЭлементов = Форма.Элементы.Добавить("ГруппаСлово", ТипГруппаФормы, ГруппаПроверкаПравописания);
		ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		ИмяКоманды = "Пропустить";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ДействиеКоманды;
		КомандаФормы.Заголовок = ИмяКоманды;
		КомандаФормы.Картинка = БиблиотекаКартинок.CRM_ПропуститьСлово;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ГруппаЭлементов);
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Ширина = 13;
		
		ИмяКоманды = "Заменить";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ДействиеКоманды;
		КомандаФормы.Заголовок = ИмяКоманды;
		КомандаФормы.Картинка = БиблиотекаКартинок.CRM_ЗаменитьСлово;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ГруппаЭлементов);
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Ширина = 13;
		
		ГруппаЭлементов = Форма.Элементы.Добавить("ГруппаВсеСлова", ТипГруппаФормы, ГруппаПроверкаПравописания);
		ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
		
		ИмяКоманды = "ПропуститьВсе";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ДействиеКоманды;
		КомандаФормы.Заголовок = НСтр("ru = 'Пропустить все'");
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ГруппаЭлементов);
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Ширина = 13;
		
		ИмяКоманды = "ЗаменитьВсе";
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = ДействиеКоманды;
		КомандаФормы.Заголовок = НСтр("ru = 'Заменить все'");
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ГруппаЭлементов);
		Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Ширина = 13;
		
		Элемент = Форма.Элементы.Добавить("ДекорацияПустая", ТипДекорацияФормы, ГруппаПроверкаПравописания);
		Элемент.Заголовок = "";
		Элемент.РастягиватьПоВертикали = Истина;
		
		Элемент = Форма.Элементы.Добавить("ДекорацияYandexSpeller", ТипДекорацияФормы, ГруппаПроверкаПравописания);
		Элемент.Заголовок = "Проверка правописания: Яндекс.Спеллер";
		Элемент.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		Элемент.Гиперссылка = Истина;
		Элемент.УстановитьДействие("Нажатие", ДействиеКоманды);
		
		Элемент = Форма.Элементы.Добавить("ЯзыкПроверки", ТипПолеФормы, ГруппаПроверкаПравописания);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок = НСтр("ru = 'Язык'; en = 'Language'");
		Элемент.ПутьКДанным = "CRM_ЯзыкПроверки";
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.СписокВыбора.Добавить("ru, en", "ru + en");
		Элемент.СписокВыбора.Добавить("uk, en", "uk + en");
		Элемент.СписокВыбора.Добавить("ru", "ru");
		Элемент.СписокВыбора.Добавить("uk", "uk");
		Элемент.СписокВыбора.Добавить("en", "en");
		Форма.CRM_ЯзыкПроверки = Элемент.СписокВыбора[0].Значение;
		
		ГруппаКМ = Форма.Элементы.Вставить("МенюГруппаВариантыЗамены", ТипГруппаФормы, ПолеДокументаHTML.КонтекстноеМеню,
			ПолеДокументаHTML.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
		ГруппаКМ.Вид = ВидГруппыФормы.ГруппаКнопок;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазметитьОшибки(Форма, ПроверяемыйТекст, РезультатПроверки)
	
	Если ТипЗнч(РезультатПроверки) = Тип("Строка") Тогда
		ТекстСообщения = РезультатПроверки + Символы.ПС 
			+ Нстр("ru='Если для интернет-соединения используется прокси-сервер,';"
			+ "en='If for the Internet connection the proxy-server are us,'")
			+ Символы.ПС 
			+ Нстр("ru='то заполните его параметры и создайте файл настроек прокси';"
			+ "en='that fill it parameters and create a file of settings of a proxy'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли РезультатПроверки.СписокОшибок.Количество() = 0 Тогда
		Возврат;
	
	Иначе
		
		Форма.CRM_СписокОшибок = РезультатПроверки.СписокОшибок;
		Форма.CRM_ВариантыЗамены.ЗагрузитьЗначения(РезультатПроверки.СписокОшибок[0].Значение.s);
		
		// Учитываем смещение, вызываемое символами замены неотображаемых ("квадратик"),
		// и помечаем возможные ошибки правописания в строке с HTML
		СписокОшибок = Форма.CRM_СписокОшибок;
		КоличествоОшибок = СписокОшибок.Количество();
		ПроверяемыйТекст = РезультатПроверки.ПроверяемыйТекст;
		
		Смещение = 0;
		СимволКвадрата = Символ(55357);
		
		Если СтрНайти(ПроверяемыйТекст, СимволКвадрата) <> 0 Тогда
			
			Для Счетчик = 0 По КоличествоОшибок - 1 Цикл
				
				НачальныйНомер = ?(Счетчик = 0, 1, СписокОшибок[Счетчик - 1].Значение.pos);
				КонечныйНомер = СписокОшибок[Счетчик].Значение.pos;
				ЧислоСимволов = КонечныйНомер - НачальныйНомер;
				ПроверяемаяСтрока = Сред(ПроверяемыйТекст, НачальныйНомер, ЧислоСимволов);
				ЧислоВхождений = СтрЧислоВхождений(ПроверяемаяСтрока, СимволКвадрата);
				
				Если ЧислоВхождений <> 0 Или Смещение <> 0 Тогда
					Если ЧислоВхождений <> 0 Тогда
						Смещение = Смещение + ЧислоВхождений;
					КонецЕсли;
					СписокОшибок[Счетчик].Значение.pos = СписокОшибок[Счетчик].Значение.pos + Смещение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоОшибок > 0 Тогда
			Счетчик = КоличествоОшибок - 1;
			МассивДляРазметкиОшибок = Новый Массив(КоличествоОшибок);
			Пока Счетчик >= 0 Цикл
				Вставка = СтрШаблон("<span id=""mistake%1"" class=""mistake"">%2</span>", Счетчик,
					СписокОшибок[Счетчик].Значение.word);
				
				Если Счетчик = КоличествоОшибок - 1 Тогда
					МассивДляРазметкиОшибок[Счетчик] = Вставка + Сред(ПроверяемыйТекст, 
						СписокОшибок[Счетчик].Значение.pos + СписокОшибок[Счетчик].Значение.len + 1);
				Иначе
					МассивДляРазметкиОшибок[Счетчик] = Вставка + Сред(ПроверяемыйТекст, 
						СписокОшибок[Счетчик].Значение.pos + СписокОшибок[Счетчик].Значение.len + 1,
						СписокОшибок[Счетчик + 1].Значение.pos - СписокОшибок[Счетчик].Значение.pos 
						- СписокОшибок[Счетчик].Значение.len);
				КонецЕсли;
				
				Счетчик = Счетчик - 1;
			КонецЦикла;
			ПроверяемыйТекст = Лев(ПроверяемыйТекст, СписокОшибок[0].Значение.pos) + СтрСоединить(МассивДляРазметкиОшибок);
			
		КонецЕсли;
		
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		ПроверяемыйТекст = СтрЗаменить(ПроверяемыйТекст, "<base href="""">", 
			"<base href=""" + НавигационнаяСсылкаИнформационнойБазы + ">");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьТекстЧерезСервис(ПроверяемыйТекст, ЯзыкПроверки, ТипТекста)
	
	Попытка
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		HTTPСоединение = Новый HTTPСоединение("speller.yandex.net" , , , , Прокси, , Новый ЗащищенноеСоединениеOpenSSL);
	Исключение
		HTTPСоединение = Неопределено;
	КонецПопытки;	
	
	Если HTTPСоединение = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка подключения к Яндекс.Спеллер!';en='Error of connection to Yandex. Speller!'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	ПроверяемыйТекст = СтрЗаменить(ПроверяемыйТекст, НавигационнаяСсылкаИнформационнойБазы, "");
	
	Попытка
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		//Заголовки.Вставить("Content-Length", КоличествоСимволов);
		HTTPЗапрос = Новый HTTPЗапрос("/services/spellservice.json/checkText", Заголовки);		
		
		СтрокаПараметров = "options=0";		
		СтрокаПараметров = СтрокаПараметров + "&format="
			+ ?(ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст, "plain", "html");
		СтрокаПараметров = СтрокаПараметров + "&lang=" + ЯзыкПроверки;
		
		Если НЕ (ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст) Тогда
			CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ПроверяемыйТекст, Истина);
		КонецЕсли;
				
		СтрокаПараметров = СтрокаПараметров + "&text=" + ПроверяемыйТекст;
		
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
		
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
				
	Исключение
		Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если Ответ = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка проверки правописания в Яндекс.Спеллер!';
			|en='Error of spell check in Yandex. Speller!'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	РезультатПроверки = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатПроверки);
	РезультатПроверкиJSON = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	// Заполняем список ошибок
	СписокОшибок = Новый СписокЗначений;
	Для Каждого СтрокаОшибки Из РезультатПроверкиJSON Цикл
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("code",	СтрокаОшибки.code);
		СтруктураОшибки.Вставить("col",		СтрокаОшибки.col);
		СтруктураОшибки.Вставить("len",		СтрокаОшибки.len);
		СтруктураОшибки.Вставить("pos",		СтрокаОшибки.pos);
		СтруктураОшибки.Вставить("row",		СтрокаОшибки.pos);
		СтруктураОшибки.Вставить("word",	СтрокаОшибки.word);
		СтруктураОшибки.Вставить("shift",	0);
		СтруктураОшибки.Вставить("offset",	0);
		МассивВариантов = Новый Массив;
		Для Каждого ВариантЗамены Из СтрокаОшибки.s Цикл
			Если СтрНачинаетсяС(ВариантЗамены, ",,,")
				И СтрокаОшибки.word = СтрЗаменить(ВариантЗамены, ",,,", "") Тогда
				Продолжить;
			КонецЕсли;
			МассивВариантов.Добавить(ВариантЗамены);
		КонецЦикла;
		Если МассивВариантов.Количество() > 0 Тогда
			СтруктураОшибки.Вставить("s",		МассивВариантов);
			СписокОшибок.Добавить(СтруктураОшибки, СтрокаОшибки.word);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("СписокОшибок, ПроверяемыйТекст", СписокОшибок, ПроверяемыйТекст);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
