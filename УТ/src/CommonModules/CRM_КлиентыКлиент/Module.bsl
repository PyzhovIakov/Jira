////////////////////////////////////////////////////////////////////////////////
// Клиенты клиент
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция отделяет часть наименования физического лица (обращение и ФИО).
//
// Параметры:
//  ИсходнаяСтрока	- Строка	- Строка наименования, у которого надо отделить часть.
//
// Возвращаемое значение:
//	Строка	- Выделенная часть наименования. 
//
Функция ВыделитьЧастьНаименованияКонтактногоЛица(ИсходнаяСтрока) Экспорт
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = СтрНайти(Буфер, " ");
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	Возврат ВыделенноеСлово;
КонецФункции // ВыделитьЧастьНаименованияКонтактногоЛица()

// Функция приводит ФИО "иВаНов    ИВАН  иванович" к виду "Иванов Иван Иванович".
//
// Параметры:
//  ИсходнаяСтрока	- ФИО	- Строка для обработки.
//
// Возвращаемое значение:
//	Строка	- Приведенное к стандартному виду ФИО. 
//
Функция ПривестиФИОКСтандартномуВиду(ИсходнаяСтрока) Экспорт
	ФИОКЛ = СокрЛП(ИсходнаяСтрока);
	ФамилияКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ФИОКЛ = СокрЛП(ФИОКЛ);
	
	// Обработка двойной фамилии, напр., Салтыков-Щедрин
	МассивФамилий = Новый Массив;
	МассивИсходныхФамилий = СтрРазделить(ФамилияКЛ, "-", Ложь);
	
	Для Каждого ЭлФамилия Из МассивИсходныхФамилий Цикл
		
		ПервыйСимвол = ВРег(Лев(ЭлФамилия, 1));
		ЭлФамилия = ПервыйСимвол + НРег(Прав(ЭлФамилия, СтрДлина(ЭлФамилия) - 1));
		
		МассивФамилий.Добавить(ЭлФамилия);
		
	КонецЦикла;
	
	ФамилияКЛ = СтрСоединить(МассивФамилий, "-");
	
	ИмяКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ФИОКЛ = СокрЛП(ФИОКЛ);
	ПервыйСимвол = ВРег(Лев(ИмяКЛ, 1));
	ИмяКЛ = ПервыйСимвол + НРег(Прав(ИмяКЛ, СтрДлина(ИмяКЛ) - 1));
	ОтчествоКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
	ПервыйСимвол = ВРег(Лев(ОтчествоКЛ, 1));
	ОтчествоКЛ = ПервыйСимвол + НРег(Прав(ОтчествоКЛ, СтрДлина(ОтчествоКЛ) - 1));
	Возврат СокрЛП(ФамилияКЛ + " " + ИмяКЛ + " " + ОтчествоКЛ + " " + СокрЛП(ФИОКЛ));
КонецФункции	

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Объект			 - СправочникСсылка	 - Изменяемый объект.
//  ИспользоватьИП	 - Булево			 - Признак использования ИП.
//  ПрефиксРеквизита - Строка			 - Префикс реквизита.
// 
// Возвращаемое значение:
//  Массив - Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛица(Объект, ИспользоватьИП = Истина, ПрефиксРеквизита = "CRM_") Экспорт
	
	РеквизитФамилия = ПрефиксРеквизита + "Фамилия";
	РеквизитИмя = ПрефиксРеквизита + "Имя";
	РеквизитОтчество = ПрефиксРеквизита + "Отчество";
	
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Объект[РеквизитФамилия]) И НЕ ПустаяСтрока(Объект[РеквизитИмя]) Тогда
		Если ИспользоватьИП Тогда
			СписокВыбора.Добавить("ИП " + СокрЛП(Объект[РеквизитФамилия]) + " " 
				+ СокрЛП(Объект[РеквизитИмя]) + ?(ЗначениеЗаполнено(Объект[РеквизитОтчество]), " " 
				+ Объект[РеквизитОтчество], ""));
		КонецЕсли;
		СписокВыбора.Добавить((СокрЛП(Объект[РеквизитФамилия]) + " " + СокрЛП(Объект[РеквизитИмя])));
		СписокВыбора.Добавить((СокрЛП(Объект[РеквизитИмя]) + " " + СокрЛП(Объект[РеквизитФамилия])));
		СписокВыбора.Добавить((СокрЛП(Объект[РеквизитФамилия]) + " " + СокрЛП(Сред(Объект[РеквизитИмя], 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект[РеквизитФамилия]) И НЕ ПустаяСтрока(Объект[РеквизитИмя])
		 И НЕ ПустаяСтрока(Объект[РеквизитОтчество]) Тогда
		СписокВыбора.Добавить((СокрЛП(Объект[РеквизитФамилия]) + " " + СокрЛП(Объект[РеквизитИмя]) + " " 
			+ СокрЛП(Объект[РеквизитОтчество])));
		СписокВыбора.Добавить((СокрЛП(Объект[РеквизитФамилия]) + " " + СокрЛП(Сред(Объект[РеквизитИмя], 1, 1)) 
			+ "." + СокрЛП(Сред(Объект[РеквизитОтчество], 1, 1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция возвращает список выбора представлений физического лица исходя из его обращения и ФИО.
//
// Параметры:
//  Фамилия	 - Строка - Фамилия физического лица.
//  Имя		 - Строка - Имя физического лица.
//  Отчество - Строка - Отчество физического лица.
// 
// Возвращаемое значение:
//  Массив - Массив представлений физического лица.
//
Функция ПолучитьСписокПредставленийФизЛицаИзФИО(Фамилия, Имя, Отчество) Экспорт
	СписокВыбора = Новый Массив;
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить("ИП " + СокрЛП(Фамилия) + " " + СокрЛП(Имя) + ?(ЗначениеЗаполнено(Отчество),
			 " " + Отчество,
			 ""));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Имя) + " " + СокрЛП(Фамилия)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) + "."));
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя)
		 И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " 
			+ СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя, 1, 1)) 
			+ "." + СокрЛП(Сред(Отчество, 1, 1)) + "."));
	КонецЕсли; 
	Возврат СписокВыбора;
КонецФункции // ПолучитьСписокПредставленийФизЛица()

// Функция определяет пол человека по его имени.
//
// Параметры:
//  Имя	 - Строка - По последней букве имени, пытаемся определить пол.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка - Пол человека, определенный по его имени.
//
Функция ОпределитьПол(Имя) Экспорт
	СписокМужскихИсключений = Новый СписокЗначений;
	СписокМужскихИсключений.Добавить("ИЛЬЯ");
	СписокМужскихИсключений.Добавить("НИКОЛА");
	СписокМужскихИсключений.Добавить("САВВА");
	СписокМужскихИсключений.Добавить("КУЗЬМА");
	СписокМужскихИсключений.Добавить("НИКИТА");
	СписокМужскихИсключений.Добавить("ДАНИЛА");
	СписокМужскихИсключений.Добавить("ЕМЕЛЯ");
	СписокЖенскихИсключений = Новый СписокЗначений;
	СписокЖенскихИсключений.Добавить("ЛЮБОВЬ");
	Окончание = ВРег(Прав(СокрП(Имя), 1));
	Если (СтрНайти("АЯ", Окончание) И СписокМужскихИсключений.НайтиПоЗначению(ВРег(Имя)) = Неопределено) Или
		СписокЖенскихИсключений.НайтиПоЗначению(ВРег(Имя)) <> Неопределено Тогда // Вероятно женщина
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	Иначе
		Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	КонецЕсли; 
	Возврат Пол;
КонецФункции // ОпределитьПол()

// Процедура заполняет КПП на базе ИНН.
//
// Параметры:
//  ИНН							 - Строка	 - ИНН на основании которого будет сгенерирован КПП.
//  КПП							 - Строка	 - КПП, текущий КПП контрагента.
//  БезусловноеЗаполнениеКПП	 - Булево	 - если Истина, то не будет запрашиваться подтверждение пользователя при смене
//  	КПП.
//  УникальныйИдентификаторФормы - Строка	 - Уникальный идентификатор формы.
//
Процедура ЗаполнитьКППпоИНН(Знач ИНН, КПП, БезусловноеЗаполнениеКПП = Истина, УникальныйИдентификаторФормы) Экспорт
	
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
	// первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009
	// КПП 771201001
		
	// Если не указано ИНН или заполнено КПП то прерываем выполнение операции.
	Если (СтрДлина(ИНН) < 4) Тогда
		Возврат;
	КонецЕсли;
	
	ПревыеСимволыИНН = Лев(ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// Если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции.
	Если (НовоеЗначениеКПП = КПП) Тогда
		Возврат;
	КонецЕсли;
	
	// Если безусловно нужно поменять - меняем.
	Если БезусловноеЗаполнениеКПП ИЛИ НЕ ЗначениеЗаполнено(КПП) Тогда
		КПП = НовоеЗначениеКПП;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменить КПП  на ""%1""?';
		|en='Change RRC to ""%1""?'"),
		 НовоеЗначениеКПП);
	// +ЕИС
	//ОтветНужноМенятьКПП = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	// Если ОтветНужноМенятьКПП Тогда
	//	КПП = НовоеЗначениеКПП;
	//КонецЕсли;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовоеЗначениеКПП", НовоеЗначениеКПП);
	Дополнительно.Вставить("КПП", КПП);
	Дополнительно.Вставить("УникальныйИндентфикаторФормы", УникальныйИдентификаторФормы);
	
	ОповещениеОбработкиДиалога = Новый ОписаниеОповещения("ОбработкаОповещенияВопросаКПП", ЭтотОбъект, Дополнительно);
	ПоказатьВопрос(ОповещениеОбработкиДиалога, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	// -ЕИС
КонецПроцедуры

// +CRM

// Процедура открывает форму быстрого ввода партнера
//
// Параметры:
//  ФормаВладелец	 - ФормаКлиентскогоПриложения - Владелец формы. 
//  ПараметрыФормы	 - Структура - Параметры формы. 
//
Процедура ОткрытьФормуБыстрогоВводаПартнера(Знач ФормаВладелец = Неопределено,
	 Знач ПараметрыФормы = Неопределено) Экспорт
	
	ИмяФормыБыстрогоВводаПартнера = "";
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
		 "CRM_Модуль_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаБыстрогоВвода";
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
		 "CRM_ФормаБыстрогоВвода") Тогда
		
		ИмяФормыБыстрогоВводаПартнера = "Справочник.Партнеры.Форма.CRM_ФормаБыстрогоВвода";
		
	КонецЕсли;	
		
	Если НЕ ПустаяСтрока(ИмяФормыБыстрогоВводаПартнера) Тогда
	
		ФормаБыстрогоВводаПартнера = ПолучитьФорму(ИмяФормыБыстрогоВводаПартнера, ПараметрыФормы, ФормаВладелец);
		
		Если ПараметрыФормы.Свойство("Наименование") Тогда
			Если Не ЗначениеЗаполнено(ФормаБыстрогоВводаПартнера.Наименование) Тогда
				ФормаБыстрогоВводаПартнера.Наименование = ПараметрыФормы.Наименование;				
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("КонтактноеЛицо") Тогда
			ФИОКЛ = ПараметрыФормы.КонтактноеЛицо;
			ФамилияКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ИмяКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ОтчествоКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			Если ЗначениеЗаполнено(ФамилияКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ФамилияКонтактногоЛица = ФамилияКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ИмяКонтактногоЛица = ИмяКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчествоКЛ) Тогда
				ФормаБыстрогоВводаПартнера.ОтчествоКонтактногоЛица = ОтчествоКЛ;
			КонецЕсли;
		КонецЕсли;
		
		ФормаБыстрогоВводаПартнера.Открыть();		
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура открывает форму ввода партнера
//
// Параметры:
//  ФормаВладелец	 - ФормаКлиентскогоПриложения - Владелец формы. 
//  ПараметрыФормы	 - Структура - Параметры формы. 
//
Процедура ОткрытьФормуВводаПартнера(Знач ФормаВладелец = Неопределено, Знач ПараметрыФормы = Неопределено) Экспорт
	
	ИмяФормыВводаПартнера = "";
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
		 "CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая") Тогда
		
		ИмяФормыВводаПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Партнеры.Формы",
		 "CRM_ФормаЭлементаНовая") Тогда
		
		ИмяФормыВводаПартнера = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая";
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ИмяФормыВводаПартнера) Тогда
	
		ФормаВводаПартнера = ПолучитьФорму(ИмяФормыВводаПартнера, ПараметрыФормы, ФормаВладелец);
		
		Если ПараметрыФормы.Свойство("Наименование") Тогда
			Если Не ЗначениеЗаполнено(ФормаВводаПартнера.Наименование) Тогда
				ФормаВводаПартнера.Наименование = ПараметрыФормы.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("КонтактноеЛицо") Тогда
			ФИОКЛ = ПараметрыФормы.КонтактноеЛицо;
			ФамилияКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ИмяКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			ОтчествоКЛ = ВыделитьЧастьНаименованияКонтактногоЛица(ФИОКЛ);
			Если ЗначениеЗаполнено(ФамилияКЛ) Тогда
				ФормаВводаПартнера.ФамилияКонтактногоЛица = ФамилияКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяКЛ) Тогда
				ФормаВводаПартнера.ИмяКонтактногоЛица = ИмяКЛ;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчествоКЛ) Тогда
				ФормаВводаПартнера.ОтчествоКонтактногоЛица = ОтчествоКЛ;
			КонецЕсли;
		КонецЕсли;
		
		ФормаВводаПартнера.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет контактное лицо в таблицу контактных лиц.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения	- Форма. 
//	КонтактноеЛицо	- СправочникСсылка				- Контактное лицо.
//
Процедура ДобавитьНовоеКЛ(Форма, КонтактноеЛицо) Экспорт
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	МассивТиповКИ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	НоваяСтрока	= Форма["КонтактныеЛицаПартнера"].Добавить();
	НоваяСтрока.КонтактноеЛицо	= КонтактноеЛицо;
	ЗначенияРеквизитов			= CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(КонтактноеЛицо,
		 "Наименование, CRM_Должность, CRM_Состояние,
		| Автор");
	НоваяСтрока.Представление	= ЗначенияРеквизитов.Наименование;
	НоваяСтрока.Должность		= ЗначенияРеквизитов.CRM_Должность;
	НоваяСтрока.Состояние		= ЗначенияРеквизитов.CRM_Состояние;
	НоваяСтрока.Доступен		= Истина;
	НоваяСтрока.Порядок			= Форма["КонтактныеЛицаПартнера"].Количество(); 
	НоваяСтрока.Автор			= ЗначенияРеквизитов.Автор;
	Для Каждого ТипКИ Из МассивТиповКИ Цикл
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьМассивКонтактнойИнформацииПоТипуКИ(НоваяСтрока.КонтактноеЛицо,
			 ТипКИ);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ИмяТипаКИ		= CRM_ОбщегоНазначенияСервер.ПолучитьИмяЗначенияПеречисления(ТипКИ);
			ИмяКолонки		= "КИТипа" + ИмяТипаКИ;
			ИмяКолонкиТип	= "ТипКИ" + ИмяТипаКИ;
			НоваяСтрока[ИмяКолонки]		= КонтактнаяИнформация[0].Представление;
			НоваяСтрока[ИмяКолонкиТип]	= КонтактнаяИнформация[0].Тип;
		КонецЕсли;
	КонецЦикла;
	Форма["ИзмененПорядок"]								= Истина;
	Форма.Элементы["ПрименитьИзмененияКЛ"].Видимость	= Истина;
	Форма.Элементы["КоманднаяПанельСвернутьРазвернутьГруппу"].Ширина = 39;
	Форма.Элементы["ПереместитьКЛВверх"].Доступность	= (Форма["КонтактныеЛицаПартнера"].Количество() > 1);
	Форма.Элементы["ПереместитьКЛВниз"].Доступность		= (Форма["КонтактныеЛицаПартнера"].Количество() > 1);
КонецПроцедуры	

// Обработчик события "Нажатие" списка контактных лиц.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Владелец формы.
//	Команда - КомандаФормы - выполненная команда.
//
Процедура КонтактныеЛицаНажатие(Форма, Команда) Экспорт
	
	Если Команда.Имя = "ЭлементЕщеКонтакты" Тогда
		Форма.Элементы["ГруппаСписокКЛ"].Показать();

	ИначеЕсли Команда.Имя = "ДобавитьНовоеКЛ" Тогда
		РеквизитПартнер = "";
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			РеквизитПартнер = "Ссылка";
		ИначеЕсли Форма.Объект.Свойство("Партнер") Тогда
			РеквизитПартнер = "Партнер";
		КонецЕсли;
		Если РеквизитПартнер <> "" Тогда
			ПараметрыФормы = Новый Структура("Владелец", Форма.Объект[РеквизитПартнер]);
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Клиенты.КонтактноеЛицо.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;

	ИначеЕсли Команда.Имя = "СделатьКЛОсновным" Тогда
		ТекущаяСтрокаКЛ = Форма.Элементы.ЭлементСписокКЛ.ТекущиеДанные;
		Если ТекущаяСтрокаКЛ <> Неопределено Тогда
			Если ЗначениеЗаполнено(Форма.ИмяРеквизитаКонтактноеЛицо) Тогда
				Если Лев(Форма.ИмяРеквизитаКонтактноеЛицо, 7) = "Объект." Тогда
					Форма["Объект"][Сред(Форма.ИмяРеквизитаКонтактноеЛицо, 8)] = ТекущаяСтрокаКЛ.КонтактноеЛицо;
				Иначе
					Форма[Форма.ИмяРеквизитаКонтактноеЛицо] = ТекущаяСтрокаКЛ.КонтактноеЛицо;
				КонецЕсли;
				СделатьКЛОсновным(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо);
				УстановитьТекущуюСтрокуКЛ(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо);
				Форма["ИзмененПорядок"]								= Истина;
				Форма.Элементы["ПрименитьИзмененияКЛ"].Видимость	= Истина;
				Форма.Элементы["КоманднаяПанельСвернутьРазвернутьГруппу"].Ширина = 39;
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Команда.Имя = "ПереместитьКЛВверх" Тогда
		ТекущаяСтрокаКЛ = Форма.Элементы.ЭлементСписокКЛ.ТекущиеДанные;
		ПереместитьКЛ(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо, Истина);
		УстановитьТекущуюСтрокуКЛ(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо);
		Форма["ИзмененПорядок"]							   = Истина;
		Форма.Элементы["ПрименитьИзмененияКЛ"].Видимость = Истина;
		Форма.Элементы["КоманднаяПанельСвернутьРазвернутьГруппу"].Ширина = 39;

	ИначеЕсли Команда.Имя = "ПереместитьКЛВниз" Тогда
		ТекущаяСтрокаКЛ = Форма.Элементы.ЭлементСписокКЛ.ТекущиеДанные;
		ПереместитьКЛ(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо, Ложь);
		УстановитьТекущуюСтрокуКЛ(Форма, ТекущаяСтрокаКЛ.КонтактноеЛицо);
		Форма["ИзмененПорядок"]								= Истина;
		Форма.Элементы["ПрименитьИзмененияКЛ"].Видимость	= Истина;
		Форма.Элементы["КоманднаяПанельСвернутьРазвернутьГруппу"].Ширина = 39;

	ИначеЕсли Команда.Имя = "ПрименитьИзмененияКЛ" Тогда
		Если Форма["ИзмененПорядок"] Тогда
			Форма.Элементы["ГруппаСписокКЛ"].Скрыть();
			СохранитьОсновноеКЛ(Форма);
			СписокКЛ	= Новый СписокЗначений; 
			Для Каждого СтрокаТаблицы Из Форма["КонтактныеЛицаПартнера"] Цикл
				СписокКЛ.Добавить(СтрокаТаблицы.КонтактноеЛицо, , СтрокаТаблицы.Основное);
			КонецЦикла;	
			CRM_КлиентыСервер.СохранитьПорядокКонтактов(СписокКЛ);
		КонецЕсли;
		Форма.Элементы["ПрименитьИзмененияКЛ"].Видимость	= Ложь;
		Форма.Элементы["КоманднаяПанельСвернутьРазвернутьГруппу"].Ширина = 39;

	ИначеЕсли СтрНайти(Команда.Имя, "ЭлементКЛ") > 0 Тогда
		ТекущиеСтрокиКЛ = Форма.КонтактныеЛицаПартнера.НайтиСтроки(Новый Структура("ИмяРеквизита", Команда.Имя));
		Если ТекущиеСтрокиКЛ.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ПоказатьЗначение(, ТекущиеСтрокиКЛ[0].КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "Выбор" списка контактных лиц.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - Владелец формы.
//	Элемент				 - ЭлементФормы - Элемент формы, содержащий список.
//	ВыбраннаяСтрока		 - СправочникСсылка.КонтактныеЛица - Выбранная строка.
//	Поле				 - ПолеФормы - Поле формы.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура КонтактныеЛицаВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт

	Если Поле.Имя = "ЭлементСписокКЛПоказатьДопНомера" И Элемент.ТекущиеДанные.ЕстьДопНомера Тогда
		Оповестить("ДопТелефоны_ПоказатьПодменю", Элемент.ТекущиеДанные.КонтактноеЛицо, Форма);
		Возврат;
	ИначеЕсли Поле.Имя = "ЭлементСписокКЛПоказатьДопАдреса" И Элемент.ТекущиеДанные.ЕстьДопАдреса Тогда
		Оповестить("ДопАдресаЭП_ПоказатьПодменю", Элемент.ТекущиеДанные.КонтактноеЛицо, Форма);
		Возврат;
	КонецЕсли;
	КонтактноеЛицо = Элемент.ТекущиеДанные.КонтактноеЛицо;
	Если Поле.Имя = "ЭлементСписокКЛПредставление" Тогда
		ПоказатьЗначение(, КонтактноеЛицо);
	ИначеЕсли СтрНайти(Поле.Имя, "КИТипа") > 0 Тогда
		КИКонтактногоЛица = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "ЭлементСписокКЛ", "")];
		ТипКИКонтактногоЛица = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "ЭлементСписокКЛКИТипа", "ТипКИ")];
		Если ТипКИКонтактногоЛица = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
				Возврат;
			КонецЕсли;
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("Основание",	Форма.Объект.Ссылка);	
			ДополнительныеПараметры	= Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
			сфпСофтФонПроКлиент.сфпПозвонить(КИКонтактногоЛица, КонтактноеЛицо, ДополнительныеПараметры);
		ИначеЕсли ТипКИКонтактногоЛица = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			ПараметрыФормы = Новый Структура("Основание", Форма.Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеЗаполнения", Форма.Объект.Ссылка);
			СписокАдресов = Новый СписокЗначений;
			СписокАдресов.Добавить(КонтактноеЛицо, КИКонтактногоЛица);
			ПараметрыФормы.Вставить("Кому", СписокАдресов);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление процента заполнения информации.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//
Процедура ОбновитьПроцентЗаполнения(Форма) Экспорт

	Если Форма.Модифицированность Тогда
		ПоказатьПредупреждение(, "На форме есть несохраненные данные, необходимо записать объект");
		Возврат;
	КонецЕсли; 
		
	// Вызываем серверную процедуру формы для запуска длительной операции
	Форма["ДлительнаяОперация_РасчетПроцентаЗаполнения"] = 
		CRM_КлиентыСервер.ЗапуститьДлительнуюОперацию_РасчетПроцентаЗаполнения(Форма.Объект.Ссылка,
		Форма.УникальныйИдентификатор);
	// Инициализируем параметры ожидания (посмотрите документацию, там можно включить режим вывода прогресса
	// выполнения и методами СообщитьПрогресс/ПрочитатьПрогресс указывать прогресс выполнения операции.
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.Вставить("ТекстСообщения", "Расчет показателя заполнения"); 
	// Подключаем обработчик ожидания и указываем описание оповещения о завершении задания
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииДлительнойОперации_РасчетПроцентаЗаполнения", CRM_КлиентыКлиент,
		Форма);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Форма["ДлительнаяОперация_РасчетПроцентаЗаполнения"], Оповещение,
		ПараметрыОжидания);
	
КонецПроцедуры

// Процедура-обработчик завершения длительной операции расчета процента заполнения.
//
// Параметры:
//  Результат	 - Структура	 - Результат выполнения длительной операции расчета.
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма.
//
Процедура ПриЗавершенииДлительнойОперации_РасчетПроцентаЗаполнения(Результат, Форма) Экспорт
	Форма.Прочитать();
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// +CRM
Процедура ОбработкаОповещенияВопросаКПП(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		КПП = Дополнительно.НовоеЗначениеКПП;
	Иначе
		КПП = Дополнительно.КПП;
	КонецЕсли;
	Оповестить("Изменение КПП", КПП , Дополнительно.УникальныйИндентфикаторФормы);
КонецПроцедуры

// Процедура устанавливает текущую строку по контактному лицу.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения	- Форма. 
//	КонтактноеЛицо	- СправочникСсылка				- Контактное лицо.
//
Процедура УстановитьТекущуюСтрокуКЛ(Форма, КонтактноеЛицо)
	МассивСтрок	= Форма["КонтактныеЛицаПартнера"].НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактноеЛицо));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Форма.Элементы.ЭлементСписокКЛ.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
КонецПроцедуры

// Процедура перемещает строку контактноого лица в таблице контактных лиц.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения	- Форма. 
//	КонтактноеЛицо	- СправочникСсылка				- Контактное лицо.
//	Вверх			- Булево					    - Направление перемещения.
//
Процедура ПереместитьКЛ(Форма, КонтактноеЛицо, Вверх = Истина)
	ТаблицаКонтактныхЛиц = Форма["КонтактныеЛицаПартнера"];
	КоличествоСтрок	= ТаблицаКонтактныхЛиц.Количество() - 1;
	СтрокиТаблицы	= ТаблицаКонтактныхЛиц.НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактноеЛицо));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = ТаблицаКонтактныхЛиц.Индекс(СтрокиТаблицы[0]);
	
	Если ИндексСтроки = 0 Тогда
		Возврат;
	ИначеЕсли ИндексСтроки = КоличествоСтрок Тогда
		Если Вверх Тогда
			Если ИндексСтроки - 1 <= 0 Тогда
				Возврат;
			КонецЕсли;
			ТаблицаКонтактныхЛиц.Сдвинуть(ИндексСтроки, -1);
		Иначе
			ТаблицаКонтактныхЛиц.Сдвинуть(ИндексСтроки, -КоличествоСтрок + 1);
		КонецЕсли;
	Иначе
		Если Вверх Тогда
			Если ИндексСтроки - 1 <= 0 Тогда
				Возврат;
			КонецЕсли;
			ТаблицаКонтактныхЛиц.Сдвинуть(ИндексСтроки, -1);
		Иначе
			ТаблицаКонтактныхЛиц.Сдвинуть(ИндексСтроки, 1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает контактное лицо основным.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения	- Форма. 
//	КонтактноеЛицо	- СправочникСсылка				- Контактное лицо.
//
Процедура СделатьКЛОсновным(Форма, КонтактноеЛицо)
	ТаблицаКонтактныхЛиц = Форма["КонтактныеЛицаПартнера"];
	СтрокиТаблицы	= ТаблицаКонтактныхЛиц.НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактноеЛицо));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаКонтактныхЛиц[0].Основное = Ложь;
	СтрокиТаблицы[0].Основное = Истина;
	
	// Старое основное
	Идентификатор = СТРЗаменить(Строка(ТаблицаКонтактныхЛиц[0].КонтактноеЛицо.УникальныйИдентификатор()), "-", "_");
	НайденноеКЛ = Форма.Элементы.Найти("ЭлементКЛ" + Идентификатор);
	Если НайденноеКЛ <> Неопределено Тогда
		НайденноеКЛ.Шрифт = Новый Шрифт(, , Ложь);
	КонецЕсли;
	
	// Новое основное
	Идентификатор = СТРЗаменить(Строка(СтрокиТаблицы[0].КонтактноеЛицо.УникальныйИдентификатор()), "-", "_");
	НайденноеКЛ = Форма.Элементы.Найти("ЭлементКЛ" + Идентификатор);
	Если НайденноеКЛ <> Неопределено Тогда
		НайденноеКЛ.Шрифт = Новый Шрифт(, , Истина);
	КонецЕсли;
	
	ИндексСтроки = ТаблицаКонтактныхЛиц.Индекс(СтрокиТаблицы[0]);
	Если ИндексСтроки = 0 Тогда
		Возврат;
	Иначе
		ТаблицаКонтактныхЛиц.Сдвинуть(ИндексСтроки, -ИндексСтроки);
	КонецЕсли;
КонецПроцедуры

// Процедура сохраняет основное контактное лицо.
//
// Параметры:
//  Форма	- ФормаКлиентскогоПриложения	- Форма. 
//
Процедура СохранитьОсновноеКЛ(Форма)
	Если НЕ ЗначениеЗаполнено(Форма.ИмяРеквизитаКонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	МассивСтрок	= Форма["КонтактныеЛицаПартнера"].НайтиСтроки(Новый Структура("Основное", Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Лев(Форма.ИмяРеквизитаКонтактноеЛицо, 7) = "Объект." Тогда
		Форма["Объект"][Сред(Форма.ИмяРеквизитаКонтактноеЛицо, 8)] = МассивСтрок[0].КонтактноеЛицо;
	Иначе
		Форма[Форма.ИмяРеквизитаКонтактноеЛицо] = МассивСтрок[0].КонтактноеЛицо;
	КонецЕсли;
	Форма.Записать();
КонецПроцедуры

// -CRM

#КонецОбласти
