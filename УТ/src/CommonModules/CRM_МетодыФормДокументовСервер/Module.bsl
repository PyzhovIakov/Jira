
////////////////////////////////////////////////////////////////////////////////
// CRM методы форм документов сервер
//  
// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов.
// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Документ_Анкета_ФормаСписка

// Формирует представление строки для дерева анкет.
//
// Параметры:
//  СтрокаДерева  - СтрокаДереваЗначений - на основании ее формируется представление 
//                 анкет и опросов в дереве.
//
// Возвращаемое значение:
//	Строка - представление строки для дерева анкет.
//
Функция ПолучитьПредставлениеСтрокиДереваАнкеты(СтрокаДерева) Экспорт
	
	СтрокаВозврата = "";
	
	ЕстьОграниченияПоСроку = ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания);
	ПараметрНаименованиеАнкеты = "'" + СтрокаДерева.Наименование + "'";
	ПараметрДатаАнкеты = "";
	ПараметрДатаОкончания = "";	
	
	Если ТипЗнч(СтрокаДерева.АнкетаОпрос) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='Анкета %1';en='Questionnaire %1'");
	ИначеЕсли ТипЗнч(СтрокаДерева.АнкетаОпрос) = Тип("ДокументСсылка.Анкета") Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='Анкета  %1,
			| последний раз редактировавшаяся %2';en='Questionnaire %1, last edited %2'");
		ПараметрДатаАнкеты = Формат(СтрокаДерева.ДатаАнкеты, "ДФ=dd.MM.yyyy");
	Иначе	
		Возврат СтрокаВозврата;
	КонецЕсли;
	
	Если ЕстьОграниченияПоСроку Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru=', к заполнению до %3';en=', to be filled in within %3'");
		ПараметрДатаОкончания = Формат(НачалоДня(КонецДня(СтрокаДерева.ДатаОкончания) + 1), "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	СтрокаВозврата = СтрокаВозврата + ".";
	СтрокаВозврата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаВозврата,
		 ПараметрНаименованиеАнкеты, ПараметрДатаАнкеты,
		 ПараметрДатаОкончания);	
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Возвращает признак проведения Анкеты.
//
// Параметры:
//  ДокументАнкета	 - ДокументСсылка - Ссылка на Анкету. 
// 
// Возвращаемое значение:
//  Булево - Признак проведения Анкеты. 
//
Функция АнкетаПроведена(ДокументАнкета) Экспорт
	
	Возврат ДокументАнкета.Проведен;
	
КонецФункции // АнкетаПроведена(ДокументАнкета)

#КонецОбласти

#Область Документ_CRM_РассылкаЭлектронныхПисем_ФормаДокумента

// Процедура - Заполнить созданный документ рассылки
//
// Параметры:
//  ДокОбъект	 - ДокументСсылка - Ссылка на документ CRM_РассылкаЭлектронныхПисем.
//  Ссылка		 - СправочникСсылка - Ссылка на справочник CRM_СпискиРассылок.
//
Процедура ЗаполнитьСозданныйДокументРассылки(ДокОбъект, Ссылка) Экспорт
	
	МассивДанных = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(Ссылка);
	
	Для Каждого СтрокаДанных Из МассивДанных Цикл
		
		Если ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт;
			НоваяСтрока.КонтактноеЛицо		= СтрокаДанных.Контакт.CRM_ОсновноеКонтактноеЛицо;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес), Строка(НоваяСтрока.Партнер) + " <" + СтрокаДанных.Адрес 
				+ ">",
				 "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.КонтактноеЛицо		= СтрокаДанных.Контакт;			
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт.Владелец;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес), Строка(НоваяСтрока.КонтактноеЛицо) + " <" + СтрокаДанных.Адрес 
				+ ">",
				 "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес), Строка(НоваяСтрока.Партнер) + " <" + СтрокаДанных.Адрес 
				+ ">",
				 "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.Партнер				= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(СтрокаДанных.Адрес), Строка(НоваяСтрока.Партнер) + " <" + СтрокаДанных.Адрес 
				+ ">",
				 "");
			
		ИначеЕсли ТипЗнч(СтрокаДанных.Контакт) = Тип("Строка") Тогда
			
			НоваяСтрока						= ДокОбъект.Получатели.Добавить();
			НоваяСтрока.ПартнерСтрокой		= СтрокаДанных.Контакт;
			НоваяСтрока.Адрес				= СтрокаДанных.Адрес;
			НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаДанных.Адрес), НоваяСтрока.ПартнерСтрокой + " <" + СтрокаДанных.Адрес 
				+ ">",
				 "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ДокументыОбращений

// Возвращает признак невозможности отклонить обращение.
//
// Параметры:
//  Обращение	 - РегистрСведений.CRM_СостоянияЛидов.Лид - Ссылка на обращение. 
//  ТекущееСостояние - СправочникСсылка.CRM_СостоянияОбращений - Выходной параметр.
// 
// Возвращаемое значение:
//  Булево - Признак невозможности отклонить обращение. 
//
Функция ОбращениеНельзяОтклонить(Обращение, ТекущееСостояние) Экспорт
	
	СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Обращение);
	
	Если СтруктураСостоянияЛида = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ТекущееСостояние = СтруктураСостоянияЛида.Состояние;
		Возврат ТекущееСостояние <> Справочники.CRM_СостоянияЛидов.Новый И ТекущееСостояние.Предопределенный;
	КонецЕсли;
	
КонецФункции

// Создает команду и кнопку отмены отклонения обращения
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма.
//  ГруппаФормы - ЭлементФормы - Группа формы, где будет создана кнопка отклонения.
//
Процедура ДобавитьКомандуОтменитьОтклонение(Форма, ГруппаФормы) Экспорт
	
	Если Форма.Команды.Найти("ОтменитьОтклонение") = Неопределено Тогда
		
		НоваяКомандаФормы = Форма.Команды.Добавить("ОтменитьОтклонение");
		НоваяКомандаФормы.Заголовок = НСтр("ru = 'Отменить отклонение'");
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		НоваяКомандаФормы.Действие = "Подключаемый_ОтменитьОтклонение";

		Кнопка = Форма.Элементы.Добавить("ФормаОтменитьОтклонение", Тип("КнопкаФормы"), ГруппаФормы);
		Кнопка.ИмяКоманды = НоваяКомандаФормы.Имя;
		
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		ГруппаФормы.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

// Меняет состояние обращения на Новый
//
// Параметры:
//  Обращение - РегистрСведений.CRM_СостоянияЛидов.Лид - ссылка на обращение
//
Процедура ОтменитьОтклонение(Обращение) Экспорт
	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение, Справочники.CRM_СостоянияЛидов.Новый);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("CRM_СкрытьВАРМ", Обращение.Метаданные()) Тогда
		ОбъектОбращение = Обращение.ПолучитьОбъект();
		ОбъектОбращение.CRM_СкрытьВАРМ = Ложь;
		ОбъектОбращение.Записать();
	КонецЕсли;
КонецПроцедуры

// Сохраняет настройки элементов состояния обращения.
//
// Параметры:
//  Форма			- ФормаКлиентскогоПриложения - форма.
//  МассивЭлементов - Массив - Массив элементов формы.
//	НаборСвойств	- Массив - Набор свойств.
// 
// Возвращаемое значение:
//  Строка - адрес сохраненных настроек в хранилище. 
//
Функция СохранитьНастройкиЭлементовСостоянияОбращения(Форма, МассивЭлементов, НаборСвойств = Неопределено) Экспорт
		
	Настройки = Новый Структура;
	
	Если НаборСвойств = Неопределено Тогда
		НаборСвойств = Новый Массив;
		НаборСвойств.Добавить("Видимость");
	КонецЕсли;
	
	РазделительНабораСвойств = ",";
	Настройки.Вставить("НаборСвойств", СтрСоединить(НаборСвойств, РазделительНабораСвойств));
	Настройки.Вставить("РазделительНабораСвойств", РазделительНабораСвойств);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		Для Каждого СвойствоЭлемента Из НаборСвойств Цикл
			Настройки.Вставить(Элемент.Имя + "_" + СвойствоЭлемента, Элемент[СвойствоЭлемента]);
		КонецЦикла;
		
	КонецЦикла;
	
	АдресНастройки = ПоместитьВоВременноеХранилище(Настройки, Форма.УникальныйИдентификатор);
	
	Возврат АдресНастройки;
	
КонецФункции

// Восстанавливает настройки элементов состояния обращения.
//
// Параметры:
//  АдресНастроек - Строка - адрес сохраненных настроек в хранилище.
//  МассивЭлементов - Массив - Массив элементов формы.
//
Процедура ВосстановитьНастройкиЭлементовСостоянияОбращения(АдресНастроек, МассивЭлементов) Экспорт
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		Возврат;
	КонецЕсли;
		
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	
	НаборСвойств = СтрРазделить(Настройки.НаборСвойств, Настройки.РазделительНабораСвойств, Ложь);	
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		Для Каждого СвойствоЭлемента Из НаборСвойств Цикл
			Элемент[СвойствоЭлемента] = Настройки[Элемент.Имя + "_" + СвойствоЭлемента];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СвязьСИнтересами

// Процедура создает реквизиты группы интерес
//  предназначена для создания таблицы с документыми интерес, относящихся к документу Объект
//  и размещении ее на форме документа.
//
// Параметры:
//  Форма					 - 	 - упр форма, на которой размещается группа создаваемых реквизитов.
//  ИмяЭлементаДляРазмещения - 	 - имя элемента формы, по умолчанию не задано.
//
Процедура СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(Форма, ИмяЭлементаДляРазмещения = "") Экспорт
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ТипОбъекта = ТипЗнч(Форма.Объект.Ссылка);
	
	ЭлементДляРазмещения = Неопределено;
	Если ИмяЭлементаДляРазмещения <> "" Тогда
		ЭлементДляРазмещения = Форма.Элементы.Найти(ИмяЭлементаДляРазмещения);
	КонецЕсли;
	
	Если ЭлементДляРазмещения = Неопределено Тогда
		ЭлементДляРазмещения	= Форма.Элементы.Вставить("ГруппаИнтерес", Тип("ГруппаФормы"), , Форма.ПодчиненныеЭлементы[0]);
		ЭлементДляРазмещения.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементДляРазмещения.ОтображатьЗаголовок	= Ложь;
		ЭлементДляРазмещения.Отображение			= ОтображениеОбычнойГруппы.Нет;
		ЭлементДляРазмещения.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	Строка250 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250));
	Строка200 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	Строка11 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	ОписаниеДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_ИнтересСтрокой", Строка250, , "Интерес", Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьИнтересыДляВыбора",
		 ОписаниеТипаБулево, , "Есть интересы"	,
		 Ложь));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИнтересИзменен", ОписаниеТипаБулево, , , Ложь));
	Если ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Или ТипОбъекта = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_Интерес_КлиентСписок",
			 Новый ОписаниеТипов("СписокЗначений"), , "Список клиентов",
			 Ложь));
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.Задание") ИЛИ ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	Иначе
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_Интерес_Клиент",
			 Новый ОписаниеТипов("СправочникСсылка.Партнеры"), , "Клиент",
			 Ложь));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("CRM_Интерес_Контакт",
			 Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров")	, , "Контакт",
			 Ложь));
	КонецЕсли;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СкрытьПоказатьИнтересы",
		 ОписаниеТипаБулево, , "Скрыть/показать интересы",
		 Ложь));
	
	// Создадим таблицу значений которая будет заполняться
	// связанными с документом интересами.
	ИмяОписания = "CRM_ТаблицаИнтересов";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания		,
		 Новый ОписаниеТипов("ТаблицаЗначений"), , ,
		 Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Дата"				, ОписаниеДата													, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Номер"			, Строка11														, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тема"				, Строка200														, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Партнер"			,
		 Новый ОписаниеТипов("СправочникСсылка.Партнеры")				,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Ответственный"	,
		 Новый ОписаниеТипов("СправочникСсылка.Пользователи")			,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Подразделение"	,
		 Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")	,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Организация"		,
		 Новый ОписаниеТипов("СправочникСсылка.Организации")			,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Ссылка"			,
		 Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес")				,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СостояниеИнтереса",
		 Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияИнтересов"),
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ВведенНаОсновании",
		 ОписаниеТипаБулево											,
		 ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ОсновнойИнтерес"	,
		 ОписаниеТипаБулево											,
		 ИмяОписания));
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаСтрокаИнтереса	= Форма.Элементы.Добавить("ГруппаСтрокаИнтереса", Тип("ГруппаФормы"), ЭлементДляРазмещения);
	ГруппаСтрокаИнтереса.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаИнтереса.ОтображатьЗаголовок	= Ложь;
	ГруппаСтрокаИнтереса.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаИнтереса.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСтрокаИнтереса.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элемент							= Форма.Элементы.Добавить("CRM_ИнтересСтрокой", Тип("ПолеФормы"), ГруппаСтрокаИнтереса);
	Элемент.Вид						= ВидПоляФормы.ПолеВвода;
	
	Элемент.Подсказка	   = НСтр("ru = 'По клиенту есть несколько актуальных интересов. Выберите один из них.'");
	Элемент.ПодсказкаВвода = НСтр("ru = 'По клиенту есть несколько актуальных интересов. Выберите один из них...'");
	
	Элемент.ПутьКДанным				= "CRM_ИнтересСтрокой";
	Элемент.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.КнопкаВыбора			= Истина;
	Элемент.КнопкаОткрытия			= Ложь;
	Элемент.КнопкаОчистки			= Истина;
	Элемент.РедактированиеТекста	= Ложь;
	Элемент.ПропускатьПриВводе		= Истина;
	Элемент.АвтоМаксимальнаяШирина	= Ложь;
	
	Элемент.УстановитьДействие("НачалоВыбора"		, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	Элемент.УстановитьДействие("ПриИзменении"		, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	НоваяКомандаФормы = Форма.Команды.Добавить("ОткрытьИнтерес");
	НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Открыть интерес'");
	НоваяКомандаФормы.Подсказка                 = НСтр("ru = 'Открыть интерес'");
	НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопкаФормы = Форма.Элементы.Добавить("ОткрытьИнтерес", Тип("КнопкаФормы"), ГруппаСтрокаИнтереса);
	НоваяКнопкаФормы.Вид				= ВидКнопкиФормы.ОбычнаяКнопка;
	НоваяКнопкаФормы.ИмяКоманды			= "ОткрытьИнтерес";
	НоваяКнопкаФормы.Заголовок			= НСтр("ru = 'Открыть интерес'");
	НоваяКнопкаФормы.Картинка			= БиблиотекаКартинок.CRM_Найти;
	НоваяКнопкаФормы.Отображение		= ОтображениеКнопки.Картинка;
	НоваяКнопкаФормы.ОтображениеФигуры  = ОтображениеФигурыКнопки.Нет;
	
	// Команда и кнопка скрыть показать таблицу интересов.
	НоваяКомандаФормы = Форма.Команды.Добавить("СкрытьПоказатьИнтересы");
	НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКомандаФормы.Подсказка                 = НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКомандаФормы.Действие                  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопкаФормы = Форма.Элементы.Добавить("СкрытьПоказатьИнтересы", Тип("КнопкаФормы"), ГруппаСтрокаИнтереса);
	НоваяКнопкаФормы.Вид				= ВидКнопкиФормы.ОбычнаяКнопка;
	НоваяКнопкаФормы.ИмяКоманды			= "СкрытьПоказатьИнтересы";
	НоваяКнопкаФормы.Заголовок			= НСтр("ru = 'Скрыть\показать интересы'");
	НоваяКнопкаФормы.Картинка			= БиблиотекаКартинок.CRM_ВыпадающийСписок;
	НоваяКнопкаФормы.Отображение		= ОтображениеКнопки.Картинка;
	НоваяКнопкаФормы.ОтображениеФигуры  = ОтображениеФигурыКнопки.Нет;
	
	// Добавим таблицу интересов
	ГруппаТаблицыИнтересов	= Форма.Элементы.Добавить("ГруппаCRM_ТаблицаИнтересов", Тип("ГруппаФормы"),
		 ЭлементДляРазмещения);
	ГруппаТаблицыИнтересов.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблицыИнтересов.ОтображатьЗаголовок	= Ложь;
	ГруппаТаблицыИнтересов.Отображение			= ОтображениеОбычнойГруппы.Нет;
	ГруппаТаблицыИнтересов.Видимость			= Ложь;
	
	ЭлементТаблица = Форма.Элементы.Добавить("CRM_ТаблицаИнтересов", Тип("ТаблицаФормы"), ГруппаТаблицыИнтересов);
	ЭлементТаблица.ПутьКДанным			= "CRM_ТаблицаИнтересов";
	ЭлементТаблица.РежимВыделения		= РежимВыделенияТаблицы.Одиночный;
	ЭлементТаблица.РежимВыделенияСтроки	= РежимВыделенияСтрокиТаблицы.Строка;
	ЭлементТаблица.Шапка				= Ложь;
	ЭлементТаблица.Высота				= 4;
	ЭлементТаблица.РастягиватьПоВертикали = Ложь;
	ЭлементТаблица.КоманднаяПанель.Видимость = Ложь;
	ЭлементТаблица.КоманднаяПанель.Доступность = Ложь;
	
	ЭлементТаблица.ТолькоПросмотр = Истина;
	ЭлементТаблица.ИзменятьСоставСтрок = Ложь;
	ЭлементТаблица.ИзменятьПорядокСтрок = Ложь;
	
	ЭлементТаблица.УстановитьДействие("Выбор"					, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления"	, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементТаблица.УстановитьДействие("ОбработкаВыбора"			, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"			, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	ЭлементТаблица.УстановитьДействие("ПослеУдаления"			, "Подключаемый_ВыполнитьПереопределяемуюКоманду");
	
	// команда добавить
	НоваяКомандаФормы = Форма.Команды.Добавить("ДобавитьИнтерес");
	НоваяКомандаФормы.Заголовок 	= "Добавить";
	НоваяКомандаФормы.Подсказка 	= "Добавить интерес";
	НоваяКомандаФормы.Действие 		= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопка = Форма.Элементы.Добавить("ДобавитьИнтерес", Тип("КнопкаФормы"), ЭлементТаблица.КонтекстноеМеню);
	НоваяКнопка.ИмяКоманды = "ДобавитьИнтерес";
	НоваяКнопка.Картинка			= БиблиотекаКартинок.СоздатьЭлементСписка;
	
	// команда добавить
	НоваяКомандаФормы = Форма.Команды.Добавить("УдалитьИнтерес");
	НоваяКомандаФормы.Заголовок 	= "Удалить";
	НоваяКомандаФормы.Подсказка 	= "Удалить интерес";
	НоваяКомандаФормы.Действие 		= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопка = Форма.Элементы.Добавить("УдалитьИнтерес", Тип("КнопкаФормы"), ЭлементТаблица.КонтекстноеМеню);
	НоваяКнопка.ИмяКоманды = "УдалитьИнтерес";
	НоваяКнопка.Картинка			= БиблиотекаКартинок.Удалить;
	
	// команда основной
	НоваяКомандаФормы = Форма.Команды.Добавить("CRM_Интерес_Основной");
	НоваяКомандаФормы.Заголовок 	= "Основной";
	НоваяКомандаФормы.Подсказка 	= "Установить интерес основным";
	НоваяКомандаФормы.Действие 		= "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	НоваяКнопка = Форма.Элементы.Добавить("CRM_Интерес_Основной", Тип("КнопкаФормы"), ЭлементТаблица.КонтекстноеМеню);
	НоваяКнопка.ИмяКоманды = "CRM_Интерес_Основной";
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовДата", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Дата";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовНомер", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Номер";
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Видимость 	= Ложь;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовТема", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Тема";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовКлиент", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Партнер";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовОтветственный", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Ответственный";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовОргЕдиница", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Подразделение";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовЮрЛицо", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Организация";
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовСсылка", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.Ссылка";
	Элемент.Видимость 	= Ложь;
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент				= Форма.Элементы.Добавить("CRM_ТаблицаИнтересовВведенНаОсновании", Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид			= ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным	= "CRM_ТаблицаИнтересов.ВведенНаОсновании";
	Элемент.Видимость 	= Ложь;
	Элемент.ТолькоПросмотр = Истина;
	
	// Добавим условное оформление таблицы интересов.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.CRM_ТаблицаИнтересов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_ТаблицаИнтересов.ВведенНаОсновании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	
	ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, Форма, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	ЗаполнитьНадписьВСтрокеИнтереса(Форма, Объект);
	
КонецПроцедуры

// Процедура заполняет интерес в документе в зависимости от выбранного клиента
//  и контакта.
//
// Параметры:
//  Объект						 - ДокументОбъект	 - Объект для заполнения.
//  Форма						 - ФормаКлиентскогоПриложения - упр форма, на которой размещается группа создаваемых реквизитов.
//  ПриСозданииФормыНаСервере	 - Булево			 - Признак создания формы.
//  ИзмененКлиентКонтакт		 - Булево			 - Признак изменения контакта.
//  ТипОбъекта					 - Произвольный		 - Тип объекта.
//  ЭтоНовый					 - Булево			 - Признак не записанного/записанного элемента.
//
Процедура ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, Форма, ПриСозданииФормыНаСервере = Ложь,
	 ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено,
	 ЭтоНовый = Ложь) Экспорт
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		Возврат;
	КонецЕсли;
	
	Форма.CRM_ТаблицаИнтересов.Очистить();
	Форма.CRM_ИнтересСтрокой = "";
	
	ЗаполнитьДанныеДляОтбораИнтересов(Объект, Форма, ТипОбъекта);
	
	Если ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS")
		Или ТипОбъекта = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеДокументаМероприятиеИлиСМССообщение(Объект, Форма,
			ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеИсходящегоПисьма(Объект, Форма,
			ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		ЗаполнитьГруппуИнтересаВФормеТелефонногоЗвонка(Объект, Форма,
			ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	Иначе
		
		ЗаполнитьГруппуИнтересаВФормеПрочихДокументов(Объект, Форма,
			ПриСозданииФормыНаСервере, ИзмененКлиентКонтакт, ТипОбъекта, ЭтоНовый);
		
	КонецЕсли;
	
	Если Форма.CRM_ТаблицаИнтересов.Количество() > 1 Тогда
		Форма.Элементы.СкрытьПоказатьИнтересы.Картинка = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу данных связанных интересов.
//
// Параметры:
//  Объект				 - Характеристика.CRM_ОбъектыЖурналаДокументов	 - Объект журнала документов.
//  ТолькоГлавнаяЗапись	 - Булево	 - Признак необходимости получать только главную запись.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ДанныеСвязанныхИнтересов(Объект, ТолькоГлавнаяЗапись = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналДокументов.CRM_Интерес КАК Ссылка,
	|	ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес,
	|	ЖурналДокументов.ИнтересЯвляетсяОснованием КАК ВведенНаОсновании
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|	И ЖурналДокументов.ГлавнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойИнтерес УБЫВ";
	
	Если Не ТолькоГлавнаяЗапись Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЖурналДокументов.ГлавнаяЗапись", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура заполняет надпись в строке интереса.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - упр форма, на которой размещается группа создаваемых реквизитов.
//  Объект	 - ДокументОбъект	 - Документ объект.
//
Процедура ЗаполнитьНадписьВСтрокеИнтереса(Форма, Объект) Экспорт
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаголовковЭлементов = Поддержка_СтруктураЗаголовковЭлементов(Объект.Ссылка);
	
	Элемент	= Форма.Элементы.Найти("CRM_ИнтересСтрокой");
	
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Задание")
		 ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЭтоЗадача = Истина;
	Иначе
		ЭтоЗадача = Ложь;		
	КонецЕсли;
	
	Если ЭтоЗадача Тогда
		Элемент.Подсказка	   = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаЭтоЗадача;
		Элемент.ПодсказкаВвода = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаЭтоЗадача;
	Иначе
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СообщениеSMS")
			 ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			КоличествоИнтересов = ПолучитьКоличествоИнтересовПоСпискуКлиентов(Форма.CRM_Интерес_КлиентСписок);
		Иначе		
			Если НЕ ЗначениеЗаполнено(Форма.CRM_Интерес_Клиент) Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Партнер") Тогда 
					КоличествоИнтересов = ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Объект.Партнер, Объект.Ссылка);
				КонецЕсли;							
			Иначе				
				КоличествоИнтересов = ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Форма.CRM_Интерес_Клиент, Объект.Ссылка);
			КонецЕсли;				
		КонецЕсли;			
		Если (КоличествоИнтересов = 0 ИЛИ КоличествоИнтересов = Неопределено) Тогда
			Если Форма.CRM_ИнтересСтрокой = "" Тогда
				Элемент.Подсказка = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаНетИнтересов;
			Иначе	
				Элемент.Подсказка = "";
			КонецЕсли;
			Элемент.ПодсказкаВвода = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаНетИнтересов;
		ИначеЕсли КоличествоИнтересов = 1 Тогда
			Элемент.Подсказка	   = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаОдинИнтерес;
			Элемент.ПодсказкаВвода = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаОдинИнтерес;
		Иначе
			Элемент.Подсказка	   = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаНесколькоИнтересов;
			Элемент.ПодсказкаВвода = СтруктураЗаголовковЭлементов.CRM_ИнтересСтрокой_ПодсказкаНесколькоИнтересов;
		КонецЕсли; 

	КонецЕсли;
		
КонецПроцедуры

// Возвращает структуру строки интересов
//
// Параметры:
//  Интерес	 - ДокументСсылка.Интерес	 - Документ Интерес
// 
// Возвращаемое значение:
//  Структура - структура строки интересов
//
Функция ПолучитьСтруктуруСтрокиИнтересов(Интерес) Экспорт
	СтруктураВозврата = Новый Структура("ВведенНаОсновании,Дата,Номер,Организация,ОсновнойИнтерес,
		|Ответственный,Партнер,Подразделение,СостояниеИнтереса,Ссылка,
		|Тема");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, Интерес);
	Возврат СтруктураВозврата;
КонецФункции

// Обработчик события формы "Перед записью на сервере"
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения	 - форма клиентского приложения
//  Отказ			 - Булево						 - признак отказа
//  ТекущийОбъект	 - ДокументОбъект				 - записываемый объект
//  ПараметрыЗаписи	 - Структура					 - структура, содержащая параметры записи
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ИспользоватьCRM() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ТаблицаИнтересов") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ТаблицаИнтересовЗнач = Форма.РеквизитФормыВЗначение("CRM_ТаблицаИнтересов", Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", CRM_ТаблицаИнтересовЗнач);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтересИзменен", Форма.ИнтересИзменен);
	Если Форма.ИнтересИзменен
		 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийОбъект, "CRM_СкрытьВАРМ") Тогда
		Если Не ЗначениеЗаполнено(ТекущийОбъект.Ответственный) Тогда
			ТекущийОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сформировать представление интереса строкой
//
// Параметры:
//  Интерес	 - ДокументСсылка - Интерес.
// 
// Возвращаемое значение:
//  Строка - Представление интереса.
//
Функция СформироватьПредставлениеИнтересаСтрокой(Интерес) Экспорт
	
	Если ТипЗнч(Интерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Возврат "[" + Формат(Интерес.Дата, "ДФ=dd.MM.yyyy") + "]: " + Интерес.Тема;
	ИначеЕсли  ТипЗнч(Интерес) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
		Возврат Интерес.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция - Связь объекта с интересом возможна
//
// Параметры:
//  СвязываемыйОбъект	 - СправочникСсылка	 - связываемый с документом "Интерес" объект
//  Интерес				 - Документссылка.Интерес	 - документ "Интерес"
//  ВыводитьСообщение	 - Булево					 - признак вывода сообщения
// 
// Возвращаемое значение:
//  Булево - результат выполненияфункции
//
Функция СвязьОбъектаСИнтересомВозможна(СвязываемыйОбъект, Интерес, ВыводитьСообщение = Истина) Экспорт
	
	ОсуществитьПроверку = НЕ ОбъектПоддерживаетПривязкуОбращенийПоддержки(СвязываемыйОбъект);
							
	Если Не ОсуществитьПроверку Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Интерес.ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес Тогда
		Если ВыводитьСообщение Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Данный объект можно связать только с документом Интерес'"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Документ_НазначениеОпросов_ФормаДокумента

Процедура ПодключаемыеКомандыВыполнитьКоманду(Объект, ИмяЭлемента, РезультатВыполнения) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(Объект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Документ_ЭлектронноеПисьмоИсходящее_ФормаДокумента

// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции // ТекущийПользователь()

#КонецОбласти

// Заполняет группу интереса в форме документа "Мероприятие" или "СМС-Сообщение".
//
// Параметры:
//  Объект					  - ДокументОбъект	 - Документ объект.
//  Форма					  - ФормаКлиентскогоПриложения	 - форма, на которой размещается группа создаваемых реквизитов.
//	ПриСозданииФормыНаСервере - Булево - Признак при создании формы на сервере.
//  ИзмененКлиентКонтакт	  - Булево - Признак изменен клиент или контакт.
//  ТипОбъекта				  - ДокументСсылка	 - тип документа, из формы которого был вызван, необазятельный параметр.
//  ЭтоНовый				  - Булево - Признак это новый.
//
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаМероприятиеИлиСМССообщение(Объект, Форма,
	 ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено,
	 ЭтоНовый = Ложь)
	
	СсылкаНаОснование = Неопределено;
	
	ИмяРеквизитаОснования = CRM_ОбщегоНазначенияСервер.ВернутьИмяРеквизитаОснования(ТипОбъекта);
	Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
	ИначеЕсли ЭтоНовый И Форма.Параметры.Свойство("Основание")
		 И ТипЗнч(Форма.Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		СсылкаНаОснование = Форма.Параметры.Основание;
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		
		ЕстьИнтересы = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
			
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование);
				ЕстьИнтересы = Истина;
				
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
				И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
				
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование.ДокументОснование);
				ЕстьИнтересы = Истина;
				
			Иначе
				
				ДанныеИнтересов = ДанныеСвязанныхИнтересов(СсылкаНаОснование);
				Для Каждого Строка Из ДанныеИнтересов Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
					НоваяСтрока.ВведенНаОсновании = Строка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес	 = Строка.ОсновнойИнтерес;
				КонецЦикла;
				
				ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
				
				Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
					Форма.ЕстьИнтересыДляВыбора = Истина;
					Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Форма.CRM_Интерес_КлиентСписок.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				, Форма.CRM_Интерес_КлиентСписок);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер В (&Партнер)
			|	И НЕ CRM_Интерес.Завершен
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Форма.ЕстьИнтересыДляВыбора = Истина;
				Если Выборка.Количество() = 1 Тогда
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		ДанныеИнтересов = ДанныеСвязанныхИнтересов(Объект.Ссылка);
		Для Каждого Строка Из ДанныеИнтересов Цикл
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Строка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Строка.ОсновнойИнтерес;
		КонецЦикла;
		
		ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора = Истина;
			Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененКлиентКонтакт Тогда
		
		ЕстьИнтересы = Ложь;
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
		// если связан, то не важно уже есть ли вообще клиенты.
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ЕстьИнтересы				= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы И Форма.CRM_Интерес_КлиентСписок.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				, Форма.CRM_Интерес_КлиентСписок);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер В (&Партнер)
			|	И НЕ CRM_Интерес.Завершен
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ЕстьИнтересы = Истина;
				Форма.ЕстьИнтересыДляВыбора = Истина;
				
				Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
				НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуИнтересаВФормеИсходящегоПисьма(Объект, Форма,
	ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	СсылкаНаОснование = Неопределено;
	
	ИмяРеквизитаОснования = "ВзаимодействиеОснование";
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование = Объект[ИмяРеквизитаОснования];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОснование) Тогда
		ИмяРеквизитаОснования	= CRM_ОбщегоНазначенияСервер.ВернутьИмяРеквизитаОснования(ТипОбъекта);
		Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
			СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
		КонецЕсли;
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		
		ЕстьИнтересы = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
			
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование);
				ЕстьИнтересы = Истина;
				
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
			
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование.ДокументОснование);
				ЕстьИнтересы = Истина;
			
			Иначе
				
				ДанныеИнтересов = ДанныеСвязанныхИнтересов(СсылкаНаОснование);
				Для Каждого Строка Из ДанныеИнтересов Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
					НоваяСтрока.ВведенНаОсновании = Строка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес	 = Строка.ОсновнойИнтерес;
				КонецЦикла;
				
				ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
				
				Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		ДанныеИнтересов = ДанныеСвязанныхИнтересов(Объект.Ссылка);
		Для Каждого Строка Из ДанныеИнтересов Цикл
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Строка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Строка.ОсновнойИнтерес;
		КонецЦикла;
		
		ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененКлиентКонтакт Тогда
		
		ЕстьИнтересы = Ложь;
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
		// если связан, то не важно уже есть ли вообще клиенты.
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ЕстьИнтересы				= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			
			СпособСвязи = 0;
			ПараметрСвязи = Неопределено;
			
			НомерИнтереса = CRM_ОбщегоНазначенияСервер.НомерДокументаИзТекста(Объект.Тема);
			Если ЗначениеЗаполнено(НомерИнтереса) Тогда
				СпособСвязи = 1;
				ПараметрСвязи = НомерИнтереса;
			КонецЕсли;
			
			Если СпособСвязи = 0 Тогда
				Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
					СпособСвязи = 2;
					ПараметрСвязи = СсылкаНаОснование;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрСвязи) Тогда
				
				Если СпособСвязи = 1 Тогда
					
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	Интерес.Ссылка КАК Ссылка,
					|	Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
					|	ЛОЖЬ КАК ОсновнойИнтерес,
					|	ЛОЖЬ КАК ВведенНаОсновании
					|ИЗ
					|	Документ.CRM_Интерес КАК Интерес
					|ГДЕ
					|	Интерес.Номер = &ПараметрСвязи
					|	И НЕ Интерес.ПометкаУдаления
					|	И НЕ Интерес.Завершен
					|
					|УПОРЯДОЧИТЬ ПО
					|	Интерес.Дата УБЫВ";
					
					Запрос = Новый Запрос;
					Запрос.Текст = ТекстЗапроса;
					Запрос.УстановитьПараметр("ПараметрСвязи", ПараметрСвязи);
					
					ДанныеИнтересов = Запрос.Выполнить().Выгрузить();
					
				ИначеЕсли СпособСвязи = 2 Тогда
					
					ДанныеИнтересов = ДанныеСвязанныхИнтересов(ПараметрСвязи);
					
				КонецЕсли;
				
				Для Каждого Строка Из ДанныеИнтересов Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
					НоваяСтрока.ВведенНаОсновании = Строка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес	 = Строка.ОсновнойИнтерес;
				КонецЦикла;
				
				ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
				
				Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуИнтересаВФормеТелефонногоЗвонка(Объект, Форма,
	ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	СсылкаНаОснование = Неопределено;
	
	ИмяРеквизитаОснования	= CRM_ОбщегоНазначенияСервер.ВернутьИмяРеквизитаОснования(ТипОбъекта);
	Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		
		ЕстьИнтересы = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
			
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование);
				ЕстьИнтересы = Истина;
				
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
			
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование.ДокументОснование);
				ЕстьИнтересы = Истина;
			
			Иначе
				
				ДанныеИнтересов = ДанныеСвязанныхИнтересов(СсылкаНаОснование);
				Для Каждого Строка Из ДанныеИнтересов Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
					НоваяСтрока.ВведенНаОсновании = Строка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес	 = Строка.ОсновнойИнтерес;
				КонецЦикла;
				
				ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
				
				Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		ДанныеИнтересов = ДанныеСвязанныхИнтересов(Объект.Ссылка);
		Для Каждого Строка Из ДанныеИнтересов Цикл
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Строка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Строка.ОсновнойИнтерес;
		КонецЦикла;
		
		ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуИнтересаВФормеПрочихДокументов(Объект, Форма,
	ПриСозданииФормыНаСервере = Ложь, ИзмененКлиентКонтакт = Ложь, ТипОбъекта = Неопределено, ЭтоНовый = Ложь)
	
	СсылкаНаОснование = Неопределено;
	
	ИмяРеквизитаОснования	= CRM_ОбщегоНазначенияСервер.ВернутьИмяРеквизитаОснования(ТипОбъекта);
	Если НЕ ИмяРеквизитаОснования = Неопределено И ЗначениеЗаполнено(Объект[ИмяРеквизитаОснования]) Тогда
		СсылкаНаОснование	= Объект[ИмяРеквизитаОснования];
	КонецЕсли;
	
	АвтоматическиСвязыватьСИнтересом = Истина;
	Если ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		АвтоматическиСвязыватьСИнтересом =
			РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.СвязыватьСИнтересом(Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И ЭтоНовый Тогда
		
		ЕстьИнтересы = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
			
			Если ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование);
				ЕстьИнтересы = Истина;
				
			ИначеЕсли ТипЗнч(СсылкаНаОснование) = Тип("ДокументСсылка.CRM_Взаимодействие")
			И ЗначениеЗаполнено(СсылкаНаОснование.ДокументОснование) Тогда
			
				ЗаполнитьГруппуИнтересаПоОснованию(Форма, СсылкаНаОснование.ДокументОснование);
				ЕстьИнтересы = Истина;
			
			Иначе
				
				ДанныеИнтересов = ДанныеСвязанныхИнтересов(СсылкаНаОснование);
				Для Каждого Строка Из ДанныеИнтересов Цикл
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
					НоваяСтрока.ВведенНаОсновании = Строка.ВведенНаОсновании;
					НоваяСтрока.ОсновнойИнтерес	 = Строка.ОсновнойИнтерес;
				КонецЦикла;
				
				ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
				
				Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
					Форма.ЕстьИнтересыДляВыбора	= Истина;
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
					Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.CRM_Интерес_Клиент) Тогда
			
			ПарамПартнер = Форма.CRM_Интерес_Клиент;
			ПарамКонтакт = Форма.CRM_Интерес_Контакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				, ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо"		, ПарамКонтакт);
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И НЕ CRM_Интерес.Завершен";
			Если ЗначениеЗаполнено(ПарамКонтакт) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_Интерес.ПометкаУдаления";
			
			Запрос.Текст = ТекстЗапроса;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Форма.ЕстьИнтересыДляВыбора = Истина;
				Если Выборка.Количество() = 1 
					И НЕ Константы.CRM_НеСвязыватьСАктивнымИнтересомДокументыПриКопировании.Получить() Тогда
					Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
					НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Вставить(0);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриСозданииФормыНаСервере И НЕ ЭтоНовый Тогда
		
		ДанныеИнтересов = ДанныеСвязанныхИнтересов(Объект.Ссылка);
		Для Каждого Строка Из ДанныеИнтересов Цикл
			НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Ссылка);
			НоваяСтрока.ВведенНаОсновании	= Строка.ВведенНаОсновании;
			НоваяСтрока.ОсновнойИнтерес		= Строка.ОсновнойИнтерес;
		КонецЦикла;
		
		ЕстьИнтересы = (ДанныеИнтересов.Количество() > 0);
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
			Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Форма.CRM_ТаблицаИнтересов[0].ВведенНаОсновании;
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если АвтоматическиСвязыватьСИнтересом И ИзмененКлиентКонтакт Тогда
		
		ЕстьИнтересы = Ложь;
		
		// В начале проверим, не связан ли документ с интересами
		// данные берем из таблицы значений CRM_ТаблицаИнтересов, т.к. документ может быть еще не записан
		// если связан, то не важно уже есть ли вообще клиенты.
		
		Если Форма.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			Форма.ЕстьИнтересыДляВыбора	= Истина;
			ЕстьИнтересы				= Истина;
			Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Форма.CRM_ТаблицаИнтересов[0].Ссылка);
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы И ЗначениеЗаполнено(Форма.CRM_Интерес_Клиент) Тогда
			
			ПарамПартнер = Форма.CRM_Интерес_Клиент;
			ПарамКонтакт = Форма.CRM_Интерес_Контакт;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Партнер"				, ПарамПартнер);
			Запрос.УстановитьПараметр("КонтактноеЛицо"		, ПарамКонтакт);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_Интерес.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Интерес КАК CRM_Интерес
			|ГДЕ
			|	CRM_Интерес.Партнер = &Партнер
			|	И НЕ CRM_Интерес.Завершен";
			Если ЗначениеЗаполнено(Форма.CRM_Интерес_Контакт) Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
			|	И НЕ CRM_Интерес.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_Интерес.Дата УБЫВ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Форма.ЕстьИнтересыДляВыбора = Истина;
				ЕстьИнтересы				= Истина;
				
				Форма.CRM_ИнтересСтрокой	= СформироватьПредставлениеИнтересаСтрокой(Выборка.Ссылка);
				НоваяСтрока					= Форма.CRM_ТаблицаИнтересов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьИнтересы Тогда
			// Включаем видимость группы интерес.
			Форма.ЕстьИнтересыДляВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляОтбораИнтересов(Объект, Форма, ТипОбъекта)
	
	Если ТипОбъекта = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		
		// Взаимодействие
		Форма.CRM_Интерес_КлиентСписок.Очистить();
		
		Для Каждого СтрокаТЧ Из Объект.СторонниеЛица Цикл
			Форма.CRM_Интерес_КлиентСписок.Добавить(СтрокаТЧ.Партнер);
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СообщениеSMS") Тогда
		
		// Документ СМС
		Форма.CRM_Интерес_КлиентСписок.Очистить();
		
		Для Каждого СтрокаТЧ Из Объект.Адресаты Цикл
			Если ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Форма.CRM_Интерес_КлиентСписок.Добавить(СтрокаТЧ.Контакт);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Форма.CRM_Интерес_КлиентСписок.Добавить(СтрокаТЧ.Контакт);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.CRM_Интерес_КлиентСписок.Добавить(СтрокаТЧ.Контакт.Владелец);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		// Входящее письмо
		Форма.CRM_Интерес_Клиент  = Справочники.Партнеры.ПустаяСсылка();
		Форма.CRM_Интерес_Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
			Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")
				 ИЛИ ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Форма.CRM_Интерес_Клиент = Объект.ОтправительКонтакт;
			ИначеЕсли ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.CRM_Интерес_Клиент  = Объект.ОтправительКонтакт.Владелец;
				Форма.CRM_Интерес_Контакт = Объект.ОтправительКонтакт;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		// Исходящее письмо
		Форма.CRM_Интерес_Клиент  = Справочники.Партнеры.ПустаяСсылка();
		Форма.CRM_Интерес_Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Форма.CRM_Партнер) Тогда
			Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
				Форма.CRM_Интерес_Клиент = Форма.CRM_Партнер;
			КонецЕсли;
			
			Если ТипЗнч(Форма.CRM_Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.CRM_Интерес_Клиент  = Форма.CRM_Партнер.Владелец;
				Форма.CRM_Интерес_Контакт = Форма.CRM_Партнер;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		// Телефонный звонок
		Форма.CRM_Интерес_Клиент  = Справочники.Партнеры.ПустаяСсылка();
		Форма.CRM_Интерес_Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Форма.CRM_Интерес_Клиент	= Объект.АбонентКонтакт;
			ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Форма.CRM_Интерес_Клиент	= Объект.АбонентКонтакт.Владелец;
				Форма.CRM_Интерес_Контакт	= Объект.АбонентКонтакт;
			ИначеЕсли Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
				 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.АбонентКонтакт, "Партнер") Тогда
				Форма.CRM_Интерес_Клиент	= Объект.АбонентКонтакт.Партнер;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю")
		И ТипОбъекта = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
		
		// Счет на оплату
		Форма.CRM_Интерес_Клиент  = Объект.Партнер;
		Форма.CRM_Интерес_Контакт = Объект.КонтактноеЛицо;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.CRM_Заявка") Тогда
		
		// Заявка
		Если Форма.CRM_Интерес_Клиент  <> Объект.Контакт Тогда
			Форма.CRM_Интерес_Клиент  = Объект.Контакт;
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Партнер") Тогда
			РеквизитПартнер = Объект["Партнер"];
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Клиент") Тогда
			РеквизитПартнер = Объект["Клиент"];
		Иначе
			РеквизитПартнер = Неопределено;
		КонецЕсли;
		
		Если Не РеквизитПартнер = Неопределено Тогда
			Если Форма.CRM_Интерес_Клиент  <> РеквизитПартнер Тогда
				Форма.CRM_Интерес_Клиент  = РеквизитПартнер;
				Форма.CRM_Интерес_Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "КонтактноеЛицо") Тогда
			Форма.CRM_Интерес_Контакт = Объект.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГруппуИнтересаПоОснованию(Форма, ОснованиеСсылка)
	
	Форма.ЕстьИнтересыДляВыбора = Истина;
	Форма.CRM_ИнтересСтрокой = СформироватьПредставлениеИнтересаСтрокой(ОснованиеСсылка);
	
	Форма.Элементы.CRM_ИнтересСтрокой.ТолькоПросмотр = Истина;
	
	НоваяСтрока = Форма.CRM_ТаблицаИнтересов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОснованиеСсылка);
	НоваяСтрока.ВведенНаОсновании = Истина;
	НоваяСтрока.ОсновнойИнтерес = Истина;
	
	Форма.Элементы.CRM_ИнтересСтрокой.КнопкаВыбора	= Истина;
	Форма.Элементы.CRM_ИнтересСтрокой.КнопкаОчистки	= Ложь;
	
КонецПроцедуры

// Функция возвращает массив интересов клиента по определенному контактному лицу.
//
// Параметры:	
//	Клиент		- СправочникСсылка	- Клиент
//	Контакт		- СправочникСсылка	- КонтактныеЛицаПартнеров
//
// Возвращаемое значение:
//  КоличествоИнтересов	- Число - Количество найденных интересов.
//
Функция ПолучитьКоличествоИнтересовПоКлиентуКонтакту(Клиент, СсылкаНаОбъект)
	
	// В случае нового объекта или незаполненности реквизита сразу возвращаем нулевое значение
	Если Клиент = Справочники.Партнеры.ПустаяСсылка() Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТиповОбращения = Неопределено;
	Если НЕ ОбъектПоддерживаетПривязкуОбращенийПоддержки(СсылкаНаОбъект) Тогда
		МассивТиповОбращения = Новый Массив;
		МассивТиповОбращения.Добавить(Справочники.CRM_ТипыОбращений.Интерес);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Интерес.Ссылка) КАК КоличествоИнтересов
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Партнер = &Партнер
	               |	И CRM_Интерес.Завершен = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА &ОтборПоТипамОбращенияНеЗадан
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ CRM_Интерес.ТипОбращения В (&ТипыОбращений)
	               |		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Партнер", Клиент);
	Запрос.УстановитьПараметр("ОтборПоТипамОбращенияНеЗадан", МассивТиповОбращения = Неопределено);
	Запрос.УстановитьПараметр("ТипыОбращений", МассивТиповОбращения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоИнтересов = 0;
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоИнтересов) Тогда
		КоличествоИнтересов = Выборка.КоличествоИнтересов;	
	КонецЕсли; 
	
	Возврат КоличествоИнтересов;
	
КонецФункции 

// Функция возвращает массив интересов клиента по спсику клиентов.
//
// Параметры:	
//	СписокКлиентов	- СписокЗначений - Список клиентов мероприятия.
//
// Возвращаемое значение:
//	КоличествоИнтересов	- Число - Количество найденных интересов по списку клиентов.
//
Функция ПолучитьКоличествоИнтересовПоСпискуКлиентов(СписокКлиентов)
	
	Если СписокКлиентов.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;		
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивКлиентов = Новый Массив;
	Для Каждого ЭлементСписка Из СписокКлиентов Цикл
		МассивКлиентов.Добавить(ЭлементСписка.Значение.Ссылка);
	КонецЦикла;		
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Интерес.Ссылка) КАК КоличествоИнтересов
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Партнер В(&СписокКлиентов)
	|	И CRM_Интерес.Завершен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("СписокКлиентов", МассивКлиентов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоИнтересов = 0;
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоИнтересов) Тогда
		КоличествоИнтересов = Выборка.КоличествоИнтересов;	
	КонецЕсли; 
	
	Возврат КоличествоИнтересов;
	
КонецФункции 

Функция Поддержка_СтруктураЗаголовковЭлементов(СсылкаНаОбъект)
	
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой");
	СтруктураЗаголовков.Вставить("ЕстьИнтересыДляВыбора");
	СтруктураЗаголовков.Вставить("СкрытьПоказатьИнтересы");
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой_Подсказка");
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой_ПодсказкаЭтоЗадача");
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой_ПодсказкаНетИнтересов");
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой_ПодсказкаОдинИнтерес");
	СтруктураЗаголовков.Вставить("CRM_ИнтересСтрокой_ПодсказкаНесколькоИнтересов");
	
	ВозможноСоздаватьОбращения = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
	ВозможноСвязатьСОбращением = ОбъектПоддерживаетПривязкуОбращенийПоддержки(СсылкаНаОбъект);
	Если ВозможноСоздаватьОбращения И ВозможноСвязатьСОбращением Тогда
		СтруктураЗаголовков.CRM_ИнтересСтрокой = НСтр("ru='Интерес, Обращение'");
		СтруктураЗаголовков.ЕстьИнтересыДляВыбора = НСтр("ru='Есть интересы или обращения'");
		СтруктураЗаголовков.СкрытьПоказатьИнтересы = НСтр("ru='Скрыть/показать интересы, обращения'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_Подсказка = НСтр("ru='По клиенту есть несколько актуальных интересов или обращений. Выберите один из них.'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаЭтоЗадача = НСтр("ru='Доступны несколько актуальных интересов или обращений. Выберите один из них...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаНетИнтересов = НСтр("ru='По клиенту нет активных интересов или обращений. Создайте новый интерес или обращение...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаОдинИнтерес = НСтр("ru='По клиенту есть активный интерес или обращение. Выберите его из списка или создайте новый интерес или обращение...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаНесколькоИнтересов = НСтр("ru='По клиенту есть несколько активных интересов или обращений. Выберите один из них.'");
	Иначе
		СтруктураЗаголовков.CRM_ИнтересСтрокой = НСтр("ru='Интерес'");
		СтруктураЗаголовков.ЕстьИнтересыДляВыбора = НСтр("ru='Есть интересы'");
		СтруктураЗаголовков.СкрытьПоказатьИнтересы = НСтр("ru='Скрыть/показать интересы'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_Подсказка =
			НСтр("ru='По клиенту есть несколько актуальных интересов. Выберите один из них.'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаЭтоЗадача =
			НСтр("ru='Доступны несколько актуальных интересов. Выберите один из них...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаНетИнтересов =
			НСтр("ru='По клиенту нет активных интересов. Создайте новый интерес...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаОдинИнтерес = НСтр("ru='По клиенту есть активный интерес. Выберите его из списка или создайте новый интерес...'");
		СтруктураЗаголовков.CRM_ИнтересСтрокой_ПодсказкаНесколькоИнтересов =
			НСтр("ru='По клиенту есть несколько активных интересов. Выберите один из них.'");
	КонецЕсли;

	Возврат СтруктураЗаголовков;
	
КонецФункции

Функция ОбъектПоддерживаетПривязкуОбращенийПоддержки(СсылкаНаОбъект)
	
	ИмяТипаСчетНаОплату = "";
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИмяТипаСчетНаОплату = "ДокументСсылка.CRM_СчетНаОплатуПокупателю";
	Иначе
		ИмяТипаСчетНаОплату = "ДокументСсылка.ЗаказКлиента";
	КонецЕсли;
	
	Возврат НЕ (ТипЗнч(СсылкаНаОбъект) = Тип(ИмяТипаСчетНаОплату)
						ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"));
						
КонецФункции

#КонецОбласти
