///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

//@strict-types
#Если Не ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеНастройкиОформления

// Задает общие свойства для формы (СворачиваниеЭлементовПоВажности, ВертикальныйИнтервал,
// 	ВыравниваениеЭлементовИЗаголовков).
//
// Параметры:
//  Форма - Неопределено, ФормаКлиентскогоПриложения - Форма для которой нужно установить свойства;
//
Процедура УстановитьОбщиеСвойстваФормы(Форма) Экспорт

	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма.СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	Форма.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;

	Форма.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормами

// Добавляет обычную группу формы.
//
// Параметры:
//  Форма - Неопределено,ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой группы.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемой группы.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьОбычнуюГруппу(Форма, Имя, Родитель) Экспорт

	СозданныйЭлемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	СозданныйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	СозданныйЭлемент.РастягиватьПоВертикали = Ложь;
	СозданныйЭлемент.ОтображатьЗаголовок = Ложь;
	СозданныйЭлемент.РастягиватьПоГоризонтали = Истина;

	Возврат СозданныйЭлемент;

КонецФункции

// Добавляет Страницы на форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой группы.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемой группы.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьСтраницы(Форма, Имя, Родитель) Экспорт

	СозданныйЭлемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.Страницы;
	СозданныйЭлемент.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	Возврат СозданныйЭлемент;

КонецФункции

// Добавляет Страницы на форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой группы.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемой группы.
// 
// Возвращаемое значение:
//  ГруппаФормы - Добавленная группа формы.
//
Функция ДобавитьСтраницу(Форма, Имя, Родитель) Экспорт

	СозданныйЭлемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.Страница;
	СозданныйЭлемент.ВертикальнаяПрокруткаПриСжатии = Истина;

	Возврат СозданныйЭлемент;

КонецФункции


// Добавляет группу колонок в список.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой группы.
//  Родитель - ТаблицаФормы - Родитель для добавляемой группы колонок.
// 
// Возвращаемое значение:
//  ГруппировкаКолонок - Добавленная группа формы.
//
Функция ДобавитьГруппуКолонок(Форма, Имя, Родитель) Экспорт

	СозданныйЭлемент = Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	СозданныйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
	Возврат СозданныйЭлемент;

КонецФункции

// Добавляет кнопку формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма, в которую добавляется кнопка.
//  ИмяКоманды - Строка - Имя команды.
//  Имя - Строка - Уникальное имя добавляемой кнопки.
//  Родитель - ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения - Родитель для добавляемого элемента.
//  Имя - Строка - Имя кнопки.
//  Заголовок - Строка - Заголовок кнопки.
//  Картинка - Картинка - Картинка кнопки.
//  ОтображатьКартинкуИТекст - Булево - признак отображения картинки и текста
// Возвращаемое значение:
//  КнопкаФормы - Кнопка формы.
//
Функция ДобавитьКнопку(Форма, ИмяКоманды, Имя, Родитель, Заголовок = "", Картинка = Неопределено,
	ОтображатьКартинкуИТекст = Ложь) Экспорт

	СозданныйЭлемент = Форма.Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
	СозданныйЭлемент.ИмяКоманды = ИмяКоманды;
	СозданныйЭлемент.Фигура = ФигураКнопки.Овал;

	Если ЗначениеЗаполнено(Заголовок) Тогда
		СозданныйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Если Картинка <> Неопределено Тогда
		СозданныйЭлемент.Картинка = Картинка;
		Если ОтображатьКартинкуИТекст Тогда
			СозданныйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
	КонецЕсли;

	Возврат СозданныйЭлемент;

КонецФункции

// Добавляет команду формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  Имя - Строка - Уникальное имя добавляемой команды.
//  Заголовок - Строка - Заголовок добавляемой команды.
//  Картинка - Картинка, Неопределено - Картинка добавляемой команды.
//  Подсказка - Строка - Подсказка добавляемой команды.
// 
// Возвращаемое значение:
//  КомандыФормы - Команда формы.
//
Функция ДобавитьКоманду(Форма, Имя, Заголовок, Картинка = Неопределено, Подсказка = "") Экспорт

	СозданнаяКоманда = Форма.Команды.Добавить(Имя);
	СозданнаяКоманда.Действие = Имя;
	СозданнаяКоманда.Подсказка = Подсказка;
	СозданнаяКоманда.Заголовок = Заголовок;

	Если Картинка <> Неопределено Тогда
		СозданнаяКоманда.Картинка = Картинка;
		СозданнаяКоманда.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

	Возврат СозданнаяКоманда;

КонецФункции

#КонецОбласти

#Область АдаптацияФорм

#Область ТекущиеДелаПоЭДОЛегкийИнтерфейс

//Производит первоначальные настройки элементов формы ТекущиеДелаПоЭДОЛегкийИнтерфейс
//Параметры:
// Форма - ФормаКлиентскогоПриложения, Неопределено - Адаптируемая форма 
//
Процедура НастроитьЭлементыФормыТекущиеДелаЭДОЛегкийИнтерфейс(Форма) Экспорт

	ИмяРеквизитаСведенияОбЭлементахФормы = "МК_СведенияОбЭлементахФормы";
	
	ЕстьРеквизитФормы = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,
		ИмяРеквизитаСведенияОбЭлементахФормы);
	
	Если Не ЕстьРеквизитФормы Тогда
		ИнтерфейсМобильногоЭДОКлиентСервер.СообщитьФункциональностьПокаНеДоступна();
		Возврат;
	КонецЕсли;
	
	СведенияОбЭлементахФормы =
		ИнтерфейсМобильногоЭДОПовтИсп.СведенияОбЭлементахФормыТекущиеДелаПоЭДОЛегкийИнтерфейс();

	Форма[ИмяРеквизитаСведенияОбЭлементахФормы] = СведенияОбЭлементахФормы;

	УстановитьОбщиеСвойстваФормы(Форма);

	Элементы = Форма.Элементы;
	//@skip-check property-return-type
	Элементы.ГруппаОсновное.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	//@skip-check property-return-type
	Элементы.ГруппаОсновное.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;

	// Командная панель.
	КоманднаяПанель = ДобавитьОбычнуюГруппу(Форма,
		СведенияОбЭлементахФормы.ИмяКоманднойПанели,
		Элементы.ГруппаОсновное);

	//@skip-check dynamic-access-method-not-found
	Форма.СоставКоманднойПанелиНаМобильномУстройстве.Добавить(КоманднаяПанель);

	КомандыВДопМеню = СтрРазделить(СведенияОбЭлементахФормы.КомандыПодменюКоманднойПанели, ",");

	Для Каждого КомандаВДопМеню Из КомандыВДопМеню Цикл
		Элементы.Переместить(Элементы[СокрЛП(КомандаВДопМеню)], КоманднаяПанель);
		
		Элементы[СокрЛП(КомандаВДопМеню)].ПоложениеВКоманднойПанели =
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЦикла;

	Элементы.ГруппаПанельНавигации.РастягиватьПоГоризонтали = Истина;
	ПанельНавигации = ДобавитьОбычнуюГруппу(Форма, СведенияОбЭлементахФормы.ИмяПанелиНавигации,
		Элементы.ГруппаПанельНавигации);

	ПанельНавигации.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	ПанельНавигации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ПанельНавигации.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Авто;
	ПанельНавигации.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Форма.Элементы.СтраницыВходящиеИсходящие.ОтображениеСтраниц =
		ОтображениеСтраницФормы.Пролистывание;
	
	Для Каждого СведенияОРазделе Из СведенияОбЭлементахФормы.СведенияОРазделах Цикл

		КомандаПереключения = ДобавитьКоманду(Форма,
			СведенияОРазделе.Значение["ИмяКоманды"],
			СведенияОРазделе.Значение["ЗаголовокКоманды"]);

		КнопкаПереключениеСтраниц = ДобавитьКнопку(Форма,
			КомандаПереключения.Имя,
			КомандаПереключения.Имя,
			ПанельНавигации);
		
		КнопкаПереключениеСтраниц.РастягиватьПоГоризонтали = Истина;
		
		ИмяСписка = СведенияОРазделе.Значение["ИмяСписка"];
		ЭлементСписок = Элементы[ИмяСписка];
		ЭлементСписок.Шапка = Ложь;

		КорневаяГруппаКолонокСписка = ДобавитьГруппуКолонок(Форма, СтрШаблон("МК_ГруппаКолонок%1",
			ИмяСписка), ЭлементСписок);

		КорневаяГруппаКолонокСписка.Группировка = ГруппировкаКолонок.Вертикальная;

		Если СведенияОРазделе.Значение["АдаптируемыеПоляСписка"].Количество() > 0 Тогда

			Для Каждого СведенияОПолеСписка Из СведенияОРазделе.Значение["АдаптируемыеПоляСписка"] Цикл

				ЭлементКПеремещению = Элементы[СведенияОПолеСписка.Имя];

				ЭлементКПеремещению.ГоризонтальноеПоложениеВГруппе =
					ГоризонтальноеПоложениеЭлемента[СведенияОПолеСписка.ГоризонтальноеПоложение];

				ЭлементКПеремещению.ВертикальноеПоложениеВГруппе =
					ВертикальноеПоложениеЭлемента[СведенияОПолеСписка.ВертикальноеПоложение];

				ИмяГруппыКолонок = СтрШаблон("МК_ГруппаКолонок%1_%2",
					ИмяСписка,
					СведенияОПолеСписка.ИндексГруппыКолонок);

				ГруппаДляПеремещения = Элементы.Найти(ИмяГруппыКолонок);

				Если ГруппаДляПеремещения = Неопределено Тогда
					ГруппаДляПеремещения = ДобавитьГруппуКолонок(Форма, ИмяГруппыКолонок,
						КорневаяГруппаКолонокСписка);
					ГруппаДляПеремещения.Группировка = ГруппировкаКолонок.Горизонтальная;
				КонецЕсли;

				Элементы.Переместить(ЭлементКПеремещению, ГруппаДляПеремещения);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	ОбновитьЗаголовкиПереключателейСтраницФормыТекущиеДелаЭДОЛегкийИнтерфейс(Форма,
		СведенияОбЭлементахФормы);

	ИнтерфейсМобильногоЭДОКлиентСервер.АктивироватьСтраницуФормыТекущиеДелаПоЭДОЛегкийИнтерфейс(
		Форма, СведенияОбЭлементахФормы.СведенияОРазделах.СтраницаВходящиеЭлектронныеДокументы);
	
	//Подвал.
	ГруппаПодвал = ДобавитьОбычнуюГруппу(Форма,
		СведенияОбЭлементахФормы.ИмяГруппыПодвал,
		Элементы.ГруппаОсновное);

	ГруппаПодвал.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	//Фильтры
	ИмяГруппыФильтры = СведенияОбЭлементахФормы.ИмяГруппыФильтры;

	ГруппаФильтрыКонтейнер = ДобавитьОбычнуюГруппу(Форма, ИмяГруппыФильтры, ГруппаПодвал);
	ГруппаФильтрыКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ГруппаШапкаФильтры = ДобавитьОбычнуюГруппу(Форма,
		СтрШаблон("%1_Шапка", ИмяГруппыФильтры),
		ГруппаФильтрыКонтейнер);

	ГруппаШапкаФильтры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;

	КомандаПоказатьСкрытьФильтры = ДобавитьКоманду(Форма,
		СведенияОбЭлементахФормы.ИмяКомандыПоказатьСкрытьФильтры,
		НСтр("ru= 'Показать/скрыть фильтры'"),
		БиблиотекаКартинок.Отборы);

	КнопкаПоказатьСкрытьФильтрыВШапке = ДобавитьКнопку(Форма,
		КомандаПоказатьСкрытьФильтры.Имя,
		СтрШаблон("%1_Шапка", КомандаПоказатьСкрытьФильтры.Имя),
		ГруппаШапкаФильтры, НСтр("ru = 'Фильтры'"),
		БиблиотекаКартинок.СтрелкаВниз,
		Истина);

	КнопкаПоказатьСкрытьФильтрыВШапке.ГоризонтальноеПоложениеВГруппе =
		ГоризонтальноеПоложениеЭлемента.Лево;

	СтраницыФильтры = ДобавитьСтраницы(Форма,
		СтрШаблон("%1_Страницы", ИмяГруппыФильтры),
		ГруппаФильтрыКонтейнер);

	СтраницыФильтры.Высота = 7;

	СтраницаФильтры = ДобавитьСтраницу(Форма,
		СтрШаблон("%1_Страница", ИмяГруппыФильтры),
		СтраницыФильтры);

	СтраницаФильтры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Для Каждого СведенияОбЭлементеФильтра Из СведенияОбЭлементахФормы.СведенияОбЭлементахФильтра Цикл
		ЭлементКПеремещению = Элементы[СведенияОбЭлементеФильтра.Имя];
		ЭлементКПеремещению.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента[СведенияОбЭлементеФильтра.ГоризонтальноеПоложение];
		ПеренестиВШапку = (СведенияОбЭлементеФильтра.ИндексГруппыКолонок = 0);

		Элементы.Переместить(ЭлементКПеремещению, ?(ПеренестиВШапку, ГруппаШапкаФильтры,
			СтраницаФильтры));
	КонецЦикла;

	ГруппаФильтрыКонтейнер.Видимость = Ложь;

	КнопкаПоказатьСкрытьФильтры = ДобавитьКнопку(Форма,
		КомандаПоказатьСкрытьФильтры.Имя,
		КомандаПоказатьСкрытьФильтры.Имя,
		КоманднаяПанель);

	ИнтерфейсМобильногоЭДОКлиентСервер.НастроитьКнопкуФильтры(Форма,
		КнопкаПоказатьСкрытьФильтры,
		ИмяГруппыФильтры);

	ЭлементыКСкрытию = СтрРазделить(СведенияОбЭлементахФормы.ЭлементыКСкрытию, ",");

	Для Каждого ЭлементКСкрытию Из ЭлементыКСкрытию Цикл
		Элементы[СокрЛП(ЭлементКСкрытию)].Видимость = Ложь;
	КонецЦикла;

КонецПроцедуры

//Обновляет заголовки кнопок переключения страниц формы
//Параметры:
// Форма - ФормаКлиентскогоПриложения - АдаптируемаяФорма 
// СведенияОбЭлементахФормы - Структура - Сведения об элементах формы, адаптируемых в моб. клиенте:
//  * ЭлементыСтиля - Структура - Структура элементов стиля для моб.клиента
//  * ИмяКоманднойПанели - Строка - Имя командной панели
//	* КомандыПодменюКоманднойПанели - Строка - Перечисление команд для добавления в подменю в моб. клиенте
//	* ИмяАкцентнойКнопки - Строка - Имя акцентной кнопки
//	* ИмяПанелиНавигации - Строка - Имя панели навигации на форме (добавляется программно)
//	* ЭлементыКСкрытию - Строка - Список элементов формы к скрытию на форме в моб. клиенте
//  * СведенияОРазделах - Структура - с ключами:
//   ** ВходящиеЭлектронныеДокументы - Структура - с ключами:
//    *** ЗаголовокФормы - Строка - Заголовок формы, при актвации страницы
//    *** ИмяСтраницы - Строка - Имя элемента страницы для переключения
//    *** ИмяКоманды - Строка - Имя команды переключения страницы
//    *** ЗаголовокКоманды - Строка - Заголовок команды переключения
//    *** ИмяСписка - Строка - Имя динамического списка
//    *** ЭтоВходящиеИлиИсходящие - Булево - Признак входяище или исходящие документы
//	  *** ИмяРеквизитаФормыКоличествоЭлементов - Строка - Имя реквизита формы с количеством элементов
//   ** ИсходящиеЭлектронныеДокументы - Структура - с ключами (см.СведенияОРазделах)
//	* ИмяГруппыФильтры - Строка - Имя группы с фильтрами
//	* СведенияОбЭлементахФильтра - Массив - Элементы из структуры "СведенияОбЭлементахФильтра"
//	* ИмяГруппыПодвал - Строка- Имя группы Подвал
//
Процедура ОбновитьЗаголовкиПереключателейСтраницФормыТекущиеДелаЭДОЛегкийИнтерфейс(Форма,
	СведенияОбЭлементахФормы) Экспорт

	Если СведенияОбЭлементахФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;

	Для Каждого СведенияОРазделе Из СведенияОбЭлементахФормы.СведенияОРазделах Цикл

		КоличествоЭлементов = 0;

		ИмяРеквизитаФормыКоличествоЭлементов =
			СведенияОРазделе.Значение["ИмяРеквизитаФормыКоличествоЭлементов"];
	
		ЕстьРеквизитФормы = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,
			ИмяРеквизитаФормыКоличествоЭлементов);
		
		Если ЕстьРеквизитФормы Тогда
			КоличествоЭлементов = Форма[ИмяРеквизитаФормыКоличествоЭлементов];
		КонецЕсли;
		
		ИмяКоманды = СведенияОРазделе.Значение["ИмяКоманды"];
		ЗаголовокКоманды = СведенияОРазделе.Значение["ЗаголовокКоманды"];

		Элементы[ИмяКоманды].Заголовок = СтрШаблон("%1%2",
			ЗаголовокКоманды,
			?(КоличествоЭлементов = 0, "", СтрШаблон(" (%1)", КоличествоЭлементов)));

	КонецЦикла;

КонецПроцедуры

#КонецОбласти //ТекущиеДелаПоЭДОЛегкийИнтерфейс

#КонецОбласти //АдаптацияФорм

#КонецОбласти //СлужебныйПрограммныйИнтерфейс

#КонецЕсли