
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия" (CRM)
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из обработчиков заполнения документов - взаимодействий и предметов заполнения.
// Выполняет необходимые действия по заполнению реквизитов по умолчанию.
//
// Параметры:
//  Объект - ДокументОбъект - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения  - Произвольный - значение,которое используется как основание для заполнения.
//
Процедура CRM_ЗаполнитьРеквизитыПоУмолчанию(Объект, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = Неопределено;
	ТипДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если CRM_ВзаимодействияСервер.ЯвляетсяПредметом(ДанныеЗаполнения) Тогда
		// На основании предмета
		Если ТипДанныеЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Контакты = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.CRM_КонтактноеЛицо) Тогда
				ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ДанныеЗаполнения.CRM_КонтактноеЛицо,
					 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Если ТаблицаАдресов.Количество() > 0 Тогда 
					Контакты.Добавить(ДанныеЗаполнения.CRM_КонтактноеЛицо);
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.CRM_Партнер) Тогда
				ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ДанныеЗаполнения.CRM_Партнер, ,
					 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Если ТаблицаАдресов.Количество() > 0 Тогда 
					Контакты.Добавить(ДанныеЗаполнения.CRM_Партнер);
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ТипДанныеЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			Контакты = Новый Массив;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "Партнер") Тогда
				ИмяРеквизитаПартнер = "Партнер";
			Иначе
				ИмяРеквизитаПартнер = "Клиент";
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.КонтактноеЛицо) Тогда
				Контакты.Добавить(ДанныеЗаполнения.КонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения[ИмяРеквизитаПартнер]) Тогда
				Контакты.Добавить(ДанныеЗаполнения[ИмяРеквизитаПартнер]);
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ТипДанныеЗаполнения = Тип("Структура") Тогда
		// +CRM
		Если ДанныеЗаполнения.Свойство("ВзаимодействиеОснование") Тогда
			Объект.ВзаимодействиеОснование = ДанныеЗаполнения.ВзаимодействиеОснование;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СписокТелефонов") Тогда
			Контакты = Новый Массив;
			Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокТелефонов Цикл
				СтруктураКонтакта	= Новый Структура;	
				СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.Контакт);
				СтруктураКонтакта.Вставить("Адрес",		ЭлементСписка.Представление);
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.Контакт) Тогда
					СтруктураКонтакта.Вставить("Представление",	ЭлементСписка.Значение.Контакт.Наименование);
				Иначе
					СтруктураКонтакта.Вставить("Представление",	"");
				КонецЕсли;
				Контакты.Добавить(СтруктураКонтакта);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СписокПартнеров") Тогда
			Контакты = Новый Массив;
			Для Каждого ЭлементСписка Из ДанныеЗаполнения.СписокПартнеров Цикл
				СтруктураКонтакта	= Новый Структура;	
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.КонтактноеЛицо) Тогда
					СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.КонтактноеЛицо);
				Иначе
					СтруктураКонтакта.Вставить("Контакт",	ЭлементСписка.Значение.Партнер);
				КонецЕсли;	
				СтруктураКонтакта.Вставить("Адрес",		ЭлементСписка.Представление);
				Если ЗначениеЗаполнено(ЭлементСписка.Значение.Партнер) Тогда
					СтруктураКонтакта.Вставить("Представление",	ЭлементСписка.Значение.Партнер.Наименование);
				Иначе
					СтруктураКонтакта.Вставить("Представление",	"");
				КонецЕсли;
				Контакты.Добавить(СтруктураКонтакта);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Ссылка") И ДанныеЗаполнения.Свойство("Телефон") Тогда
			Контакты = Новый Массив;
			СтруктураКонтакта	= Новый Структура;
			СтруктураКонтакта.Вставить("Контакт",	ДанныеЗаполнения.Ссылка);
			СтруктураКонтакта.Вставить("Адрес",		ДанныеЗаполнения.Телефон);
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Ссылка) Тогда
				СтруктураКонтакта.Вставить("Представление",	ДанныеЗаполнения.Ссылка.Наименование);
			Иначе
				СтруктураКонтакта.Вставить("Представление",	"");
			КонецЕсли;	
			Контакты.Добавить(СтруктураКонтакта);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
		// -CRM
	КонецЕсли;
	
	// Заполним участников
	Если ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0) Тогда		
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ТелефонныйЗвонок")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				Для Каждого СтрокаКонтакт Из Контакты Цикл
					
					Если ТипЗнч(СтрокаКонтакт) = Тип("Структура") Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаКонтакт.Контакт) Тогда
							СтрокаКонтакт.Адрес = "";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
			 И Объект.ПолучателиПисьма.Количество() > 0 Тогда
			
			// проверим, есть ли такие контакты в списке получателей
			
			Возврат;
		//	КонтактыИндекс = 0;
		//	
		//	Пока КонтактыИндекс < Контакты.Количество() Цикл
		//		
		//		ТекущийКонтакт = Контакты[КонтактыИндекс];
		//		
		//		СтрокаКонтакта = Объект.ПолучателиПисьма.Найти(ТекущийКонтакт, "Контакт");
		//		
		//		Если СтрокаКонтакта = Неопределено Тогда
		//			
		//			КонтактыИндекс = КонтактыИндекс + 1;
		//			
		//		Иначе
		//			
		//			Контакты.Удалить(КонтактыИндекс);					
		//		
		//		КонецЕсли;				
		//
		//	КонецЦикла;
		
		КонецЕсли;		
		
		Если Контакты.Количество() > 0 Тогда
			
			Объект.ЗаполнитьКонтакты(Контакты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет в тексте HTML ИД картинок вложений на путь к файлам и создает объект документ HTML.
//
// Параметры:
//  ТекстHTML			 - Строка	 - обрабатываемый текст HTML.
//  ТаблицаФайлов		 - ТаблицаЗначений	 - Таблица файлов
//  Кодировка			 - Строка	 - кодировка текста HTML.
//  ОбработатьКартинки	 - Булево	 - признак необходимости обработать картинки.
//  ИдентификаторФормы	 - УникальныйИдентификатор - уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  ДокументHTML - созданный документ HTML.
//
Функция CRM_ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов,
	 Кодировка = Неопределено, ОбработатьКартинки = Ложь,
	 ИдентификаторФормы = Неопределено) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка);
	
	Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			Если АтрибутИсточникКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
				
				НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
				Если ОбработатьКартинки Тогда
					Если ЭтоАдресВременногоХранилища(ПрисоединенныйФайл.Ссылка) Тогда
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПрисоединенныйФайл.Ссылка);
						Расширение     =  ПрисоединенныйФайл.Расширение;
					Иначе
						ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка);
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
						Расширение     = ДанныеФайла.Расширение;
					КонецЕсли;
					ТекстовоеСодержимое = Base64Строка(ДвоичныеДанные);
					ТекстовоеСодержимое = "data:image/" + Сред(Расширение, 2) + ";base64," + Символы.ПС + ТекстовоеСодержимое;
				Иначе
					// Если данные картинки получить не удалось, то картинку не выводим. Пользователю при этом ничего не сообщаем.
					
					Если ЭтоАдресВременногоХранилища(ПрисоединенныйФайл.Ссылка) Тогда
						ТекстовоеСодержимое = ПрисоединенныйФайл.Ссылка;
					Иначе
						Попытка
						Если НЕ ИдентификаторФормы = Неопределено Тогда
							ТекстовоеСодержимое = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка,
								 ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
						Иначе
							ТекстовоеСодержимое = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
						КонецЕсли;
						Исключение
							ТекстовоеСодержимое = "";
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
				
				НовыйАтрибутКартинки.ТекстовоеСодержимое = ТекстовоеСодержимое;
				Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				
				// Если в файле две одинаковые картинки, то заменялась только первая.
				// Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Новые

Процедура ДобавитьТекстИсходногоПисьма(ТекстHTML, ИсходноеПисьмо, ИсходноеПисьмоИсточникТекста = Неопределено) Экспорт
	
	HTMLПредставлениеШапкиИсходногоПисьма = СформироватьШапкуПисьма(ИсходноеПисьмо);
	
	Если ИсходноеПисьмоИсточникТекста.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
		Или ИсходноеПисьмоИсточникТекста.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		ТекстИсходногоПисьмаHTML = ИсходноеПисьмоИсточникТекста.ТекстHTML;
	Иначе
		ТекстИсходногоПисьмаHTML = СтрЗаменить(ИсходноеПисьмоИсточникТекста.Текст, Символы.ПС, "<br>");
	КонецЕсли;
	
	HTMLПредставлениеИсходногоПисьма = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстИсходногоПисьмаHTML).Тело;
	HTMLПредставлениеИсходногоПисьма = СтрЗаменить(HTMLПредставлениеИсходногоПисьма, "</body>", "");
	HTMLПредставлениеИсходногоПисьма = СтрЗаменить(HTMLПредставлениеИсходногоПисьма, "<body>", "");
	HTMLПредставлениеИсходногоПисьма = СтрЗаменить(HTMLПредставлениеИсходногоПисьма, "</html>", "");
	HTMLПредставлениеИсходногоПисьма = СтрЗаменить(HTMLПредставлениеИсходногоПисьма, "<html>", "");
	
	ТекстСтиляBlockquote = CRM_РаботаСHTML.ПолучитьСтильЦитированияПриОтвете();
	
	ТекстИсходногоПисьма =
		"<div>&nbsp;</div>
		|<blockquote class=""source-text""" + ТекстСтиляBlockquote + ">
		|" + HTMLПредставлениеШапкиИсходногоПисьма + "
		|<div>&nbsp;</div>
		|" + HTMLПредставлениеИсходногоПисьма + "
		|</blockquote>";
	
	CRM_РаботаСHTML.ДобавитьТекстHTML(ТекстHTML, ТекстИсходногоПисьма);
	
КонецПроцедуры

Функция УдалитьТекстИсходногоПисьма(Знач ТекстHTML) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Фильтр = "{
	|	""type"": ""hasattribute"",
	|	""value"": {
	|		""value"": ""source-text"",
	|		""operation"": ""valueequals""
	|	}
	|}";
	
	ДокументHTML.УдалитьПоФильтру(Фильтр);
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

Функция ВставитьТекстВТекстПисьмаHTML(Знач ТекстHTML, Знач ПомещаемыйТекстHTML, ВладелецКартинок, ЗаменитьПолностью,
	УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма) Экспорт
	
	ПомещаемыйТекстHTML = ВставитьКартинкиВТекстHTML(
		ПомещаемыйТекстHTML, ВладелецКартинок, УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма, "Копирование");
	
	Если ЗаменитьПолностью Тогда
		
		ТекстHTML = ПомещаемыйТекстHTML;
		
	Иначе
		
		СтруктураТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстHTML);
		СтруктураПомещаемогоТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ПомещаемыйТекстHTML);
		
		ТекстHTML = СтруктураТекстаHTML.Заголовок
			+ СтруктураПомещаемогоТекстаHTML.Тело
			+ "<br>"
			+ СтруктураТекстаHTML.Тело
			+ СтруктураТекстаHTML.Окончание;
		
	КонецЕсли;
	
	CRM_РаботаСHTML.ПеренестиСтили(ТекстHTML, ПомещаемыйТекстHTML);
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ДобавитьТекстВТекстПисьмаHTML(Знач ТекстHTML, Знач ПомещаемыйТекстHTML, ВладелецКартинок, ЗаменитьПолностью,
	УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма) Экспорт
	
	ПомещаемыйТекстHTML = ВставитьКартинкиВТекстHTML(
		ПомещаемыйТекстHTML, ВладелецКартинок, УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма, "Копирование");
	
	Если ЗаменитьПолностью Тогда
		
		ТекстHTML = ПомещаемыйТекстHTML;
		
	Иначе
		
		СтруктураТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстHTML);
		СтруктураПомещаемогоТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ПомещаемыйТекстHTML);
		
		ТекстHTML = СтруктураТекстаHTML.Заголовок
			+ СтруктураТекстаHTML.Тело
			+ СтруктураТекстаHTML.Окончание
			+ "<br>"
			+ СтруктураПомещаемогоТекстаHTML.Тело;
		
	КонецЕсли;
	
	CRM_РаботаСHTML.ПеренестиСтили(ТекстHTML, ПомещаемыйТекстHTML);
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ДобавитьПодписьКТекстуПисьма(Знач ТекстHTML, УчетнаяЗапись, Пользователь,
	УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма, ДляНового = Истина) Экспорт
	
	ПодписьСсылка = ПолучитьПодписьПисьма(УчетнаяЗапись, Пользователь, ДляНового);
	
	Если Не ЗначениеЗаполнено(ПодписьСсылка) Тогда
		Возврат ТекстHTML;
	КонецЕсли;
	
	ТекстПодписиHTML = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписьСсылка, "Текст");
	ТекстПодписиHTML = ПолучитьТекстПодписиПоШаблону(ПодписьСсылка);
	ТекстПодписиHTML = ВставитьКартинкиВТекстHTML(
		ТекстПодписиHTML, ПодписьСсылка, УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма, "Копирование");
	
	СтруктураТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстHTML);
	СтруктураПодписиHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстПодписиHTML);
	
	Если УчетнаяЗапись.CRM_ПодписьВнизуПисьма ИЛИ СтрНайти(ТекстHTML, "<blockquote class=""source-text") = 0 Тогда
		ТекстHTML = СтруктураТекстаHTML.Заголовок
		+ СтруктураТекстаHTML.Тело
		+ "<div class=""1crm-signup"">"
		+ СтруктураПодписиHTML.Тело
		+ "</div>"
		+ СтруктураТекстаHTML.Окончание;
	Иначе
		СтруктураТелаHTML = CRM_РаботаСHTML.РазложитьТелоHTML(СтруктураТекстаHTML.Тело);
		ТекстHTML = СтруктураТекстаHTML.Заголовок
		+ СтруктураТелаHTML.ВведенныйТекст
		+ "<div class=""1crm-signup"">"
		+ СтруктураПодписиHTML.Тело
		+ "</div><br>"
		+ СтруктураТелаHTML.Цитирование
		+ СтруктураТекстаHTML.Окончание;
	КонецЕсли;
	
	CRM_РаботаСHTML.ПеренестиСтили(ТекстHTML, ТекстПодписиHTML);
	
	Возврат ТекстHTML;
	
КонецФункции

Функция УдалитьПодписьИзТекстаHTML(Знач ТекстHTML) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Фильтр = "{
	|	""type"": ""hasattribute"",
	|	""value"": {
	|		""value"": ""1crm-signup"",
	|		""operation"": ""valueequals""
	|	}
	|}";
	
	//НайденныеЭлементы = ДокументHTML.НайтиПоФильтру(Фильтр);
	// Если НайденныеЭлементы.Количество() > 0 Тогда
	//	ДокументHTML.УдалитьДочерний(НайденныеЭлементы[0]);
	//КонецЕсли;
	
	ДокументHTML.УдалитьПоФильтру(Фильтр);
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

Функция ВставитьКартинкиВТекстHTML(Знач ТекстHTML, ВладелецФайлов,
	УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма, Режим = "Вставка") Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	УзлыИзображения = ДокументHTML.ПолучитьЭлементыПоИмени("img");
	
	ФайлыПисьма = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(ВладелецФайлов);
	Для Каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		НайденныйУзел = Неопределено;
		Для Каждого Узел Из УзлыИзображения Цикл
			Если Узел.Источник = "http:cid:" + ИсточникФайла // коррекция ошибочного html
				Или Узел.Источник = "cid:" + ИсточникФайла
				Или Узел.Источник = "CID:" + ИсточникФайла Тогда
				НайденныйУзел = Узел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденныйУзел = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПисьма.Ссылка, Ложь);
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НавигационнаяСсылка = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
			ДвоичныеДанныеФайла, УникальныйИдентификаторФормы);
		
		НайденныйУзел.Источник = НавигационнаяСсылка;
		
		Если Режим = "Копирование" Тогда
			ИсточникФайла = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		НайденныйУзел.УстановитьАтрибут("cid-1crm", ИсточникФайла);
		
		ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка, Ссылка, Владелец, Режим",
			ИсточникФайла, НавигационнаяСсылка, ФайлПисьма.Ссылка, ВладелецФайлов, Режим);
		УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, ИсточникФайла);
		ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ВставитьКартинкиВТекстHTMLBase64(Знач ТекстHTML, ВладелецФайлов, Режим = "Вставка") Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	УзлыИзображения = ДокументHTML.ПолучитьЭлементыПоИмени("img");
	
	ФайлыПисьма = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(ВладелецФайлов);
	Для Каждого ФайлПисьма Из ФайлыПисьма Цикл
		
		ИсточникФайла = ФайлПисьма.ИДФайлаЭлектронногоПисьма;
		
		НайденныйУзел = Неопределено;
		Для Каждого Узел Из УзлыИзображения Цикл
			Если Узел.Источник = "http:cid:" + ИсточникФайла // коррекция ошибочного html
				Или Узел.Источник = "cid:" + ИсточникФайла
				Или Узел.Источник = "CID:" + ИсточникФайла Тогда
				НайденныйУзел = Узел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденныйУзел = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлПисьма.Ссылка, Ложь);
		Если ДвоичныеДанныеФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Строка64 = "data:image/png;base64," + Base64Строка(ДвоичныеДанныеФайла);
		
		НайденныйУзел.Источник = Строка64;
		
		Если Режим = "Копирование" Тогда
			ИсточникФайла = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		НайденныйУзел.УстановитьАтрибут("cid-1crm", ИсточникФайла);
		
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЦикла;
	
	Возврат ТекстHTML;
	
КонецФункции

Процедура ОбработатьКартинкиHTMLПередЗаписью(ТекстHTML,
	ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые) Экспорт
	
	Если ИдентификаторыКартинокПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеИдентификаторы = Новый Массив;
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	УзлыИзображения = ДокументHTML.ПолучитьЭлементыПоИмени("img");
	
	Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
		
		ОписаниеИсточника = Строка.Значение;
		
		НайденныйУзел = Неопределено;
		Для Каждого Узел Из УзлыИзображения Цикл
			Если Узел.Источник = ОписаниеИсточника.НавигационнаяСсылка Тогда
				НайденныйУзел = Узел;
			КонецЕсли;	
			Если Узел.ПолучитьАтрибут("cid-1crm") = ОписаниеИсточника.ИсточникФайла Тогда
				Узел.УдалитьАтрибут("cid-1crm");
				НайденныйУзел = Узел;
			КонецЕсли;
			Если НайденныйУзел <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденныйУзел = Неопределено Тогда
			
			УдаляемыеИдентификаторы.Добавить(Строка);
			
			Если ОписаниеИсточника.Режим = "Вставка" Тогда 
				// Картинку из HTML удалили - удалим и из ИдентификаторыПочтовыхВложений, и пометим файл на удаление 
				КартинкиУдаляемые.Добавить(ОписаниеИсточника.Ссылка);
			КонецЕсли;
			
		Иначе
			
			НайденныйУзел.Источник = "cid:" + ОписаниеИсточника.ИсточникФайла;
			
			Если ОписаниеИсточника.Режим = "Копирование" Тогда
				
				ПараметрыДанных = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				ПараметрыДанных.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(ОписаниеИсточника.Ссылка, ПараметрыДанных);
				
				ПараметрыВложения = Новый Структура;
				ПараметрыВложения.Вставить("ИмяФайла", ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение);
				ПараметрыВложения.Вставить("Размер", ДанныеФайла.Размер);
				ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", ОписаниеИсточника.ИсточникФайла);
				ПараметрыВложения.Вставить("АдресВоВременномХранилище", ОписаниеИсточника.НавигационнаяСсылка);
				
				КартинкиДобавленные.Добавить(ПараметрыВложения);
				
			ИначеЕсли ОписаниеИсточника.Режим = "Создание" Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеИсточника.НавигационнаяСсылка);
				Картинка = Новый Картинка(ДвоичныеДанные);
				Расширение = "." + НРег(Строка(Картинка.Формат()));
				
				ПараметрыВложения = Новый Структура;
				ПараметрыВложения.Вставить("ИмяФайла", "_" + СтрЗаменить(ОписаниеИсточника.ИсточникФайла, "-", "_") + Расширение);
				ПараметрыВложения.Вставить("Размер", ДвоичныеДанные.Размер());
				ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма", ОписаниеИсточника.ИсточникФайла);
				ПараметрыВложения.Вставить("АдресВоВременномХранилище", ОписаниеИсточника.НавигационнаяСсылка);
				
				КартинкиДобавленные.Добавить(ПараметрыВложения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из УдаляемыеИдентификаторы Цикл
		ИдентификаторыКартинокПисьма.Удалить(Элемент);
	КонецЦикла;
	
	ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

Функция ПолучитьПодписьПисьма(УчетнаяЗапись, Пользователь, ДляНового = Истина) Экспорт
	
	ПодписьСсылка = ПодписьПользователя(УчетнаяЗапись, Пользователь, ДляНового);
	Если Не ЗначениеЗаполнено(ПодписьСсылка) Тогда
		ИмяРеквизита = ?(ДляНового, "CRM_ПодписьНового", "CRM_ПодписьПриОтвете");
		ПодписьСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, ИмяРеквизита);
	КонецЕсли;
	Возврат ПодписьСсылка;
КонецФункции

Функция ПодписьПользователя(УчетнаяЗапись, Пользователь, ДляНового) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДляНового Тогда
		Возврат МенеджерЗаписи.ПодписьИсходящегоПисьма;
	Иначе
		Возврат МенеджерЗаписи.ПодписьПересылаемогоПисьма;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, ИсточникФайла)
	
	Для Каждого Строка Из ИдентификаторыКартинокПисьма Цикл
		
		ОписаниеИсточника = Строка.Значение;
		Если ОписаниеИсточника.ИсточникФайла = ИсточникФайла Тогда
			ИдентификаторыКартинокПисьма.Удалить(Строка);
			Возврат;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьАвтотекстПоПисьму(ТекстСТегами, Письмо) Экспорт
	
	Если Письмо.ПолучателиПисьма.Количество() > 0 Тогда
		
		// заполним автотекст
		СтруктураЗаполненияАвтотекста = Новый Структура;
		Для каждого Реквизит Из Метаданные.Документы.ЭлектронноеПисьмоИсходящее.Реквизиты Цикл
			СтруктураЗаполненияАвтотекста.Вставить(Реквизит.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураЗаполненияАвтотекста, Письмо);
		СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		
		Получатель = Письмо.ПолучателиПисьма[0];
		Клиент = Получатель.Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если ЗначениеЗаполнено(Клиент.ФизическоеЛицо) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Клиент.ФизическоеЛицо;
				Иначе					
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
				
				Если ЗначениеЗаполнено(СокрЛП(Получатель.Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Получатель.Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент, "Наименование") Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				КонецЕсли;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СокрЛП(Получатель.Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Получатель.Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Получатель.Адрес));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")));
	
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если СтрНайти(ТекстСТегами, СтрокаАвтотекста.Тэг) > 0 Тогда
			
			ЗначениеТэга			= CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
			ТекстСТегами	= СтрЗаменить(ТекстСТегами, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьШапкуПисьма(Письмо)
	
	ПредставлениеОтправителя = Письмо.ОтправительПредставление;
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ДатаОтправки = Письмо.ДатаОтправления;
	Иначе
		ДатаОтправки = Письмо.Дата;
	КонецЕсли;
	
	ПредставлениеДатыОтправления = Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm'");
	Если ПустаяСтрока(ПредставлениеДатыОтправления) Тогда
		ПредставлениеДатыОтправления = НСтр("ru = 'Не отправлено'");
	КонецЕсли;
	
	ПредставлениеТема = Письмо.Тема;
	ПредставлениеКому = Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(Письмо.ПолучателиПисьма);
	ПредставлениеКопии = Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(Письмо.ПолучателиКопий);
	
	Для Каждого Получатель Из Письмо.ПолучателиПисьма Цикл
		АдресСоСкобками = "<" + Получатель.Адрес + ">";
		Если СтрЧислоВхождений(ПредставлениеКому, АдресСоСкобками) > 1 Тогда
			ПозицияВторогоВхожденияАдреса = СтрНайти(ПредставлениеКому, АдресСоСкобками, , , 2);
			ДлинаАдреса = СтрДлина(АдресСоСкобками);
			ПредставлениеКому = Лев(ПредставлениеКому, ПозицияВторогоВхожденияАдреса) 
				+ Сред(ПредставлениеКому, ПозицияВторогоВхожденияАдреса 
				+ ДлинаАдреса);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Получатель Из Письмо.ПолучателиКопий Цикл
		АдресСоСкобками = "<" + Получатель.Адрес + ">";
		Если СтрЧислоВхождений(ПредставлениеКому, АдресСоСкобками) > 1 Тогда
			ПозицияВторогоВхожденияАдреса = СтрНайти(ПредставлениеКому, АдресСоСкобками, , , 2);
			ДлинаАдреса = СтрДлина(АдресСоСкобками);
			ПредставлениеКому = Лев(ПредставлениеКому, ПозицияВторогоВхожденияАдреса) 
				+ Сред(ПредставлениеКому, ПозицияВторогоВхожденияАдреса 
				+ ДлинаАдреса);
		КонецЕсли;
	КонецЦикла;
	
	CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(ПредставлениеОтправителя);
	CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(ПредставлениеДатыОтправления);
	CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(ПредставлениеКому);
	CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(ПредставлениеКопии);
	CRM_РаботаСHTML.ЗаменитьСпецСимволыHTML(ПредставлениеТема);
	
	Шапка =
		"<div><b>[НадписьОт]:</b> %1<br>
		|<b>[НадписьОтправлено]:</b> %2<br>
		|<b>[НадписьКому]:</b> %3<br>
		|<b>[НадписьКопии]:</b> %4<br>
		|<b>[НадписьТема]:</b> %5</div>";
		
	Если ПустаяСтрока(ПредставлениеКому) Тогда
		Шапка = СтрЗаменить(Шапка, Символы.ПС + "<b>[НадписьКому]:</b> %3<br>", "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеКопии) Тогда
		Шапка = СтрЗаменить(Шапка, Символы.ПС + "<b>[НадписьКопии]:</b> %4<br>", "");
	КонецЕсли;
	
	Шапка = СтрЗаменить(Шапка, "[НадписьОт]", НСтр("ru = 'От'"));
	Шапка = СтрЗаменить(Шапка, "[НадписьОтправлено]", НСтр("ru = 'Отправлено'"));
	Шапка = СтрЗаменить(Шапка, "[НадписьКому]", НСтр("ru = 'Кому'"));
	Шапка = СтрЗаменить(Шапка, "[НадписьКопии]", НСтр("ru = 'Копии'"));
	Шапка = СтрЗаменить(Шапка, "[НадписьТема]", НСтр("ru = 'Тема'"));
	
	Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шапка,
		ПредставлениеОтправителя,
		ПредставлениеДатыОтправления,
		ПредставлениеКому,
		ПредставлениеКопии,
		ПредставлениеТема);
	
	Возврат Шапка;
	
КонецФункции

// Возвращает настройку текущего пользователя.
// Если настройка не задана и передав параметр ЗначениеЕслиНеЗадана,
// то возвращает его.
//
Функция ПолучитьНастройкуТекущегоПользователя(КлючОбъекта,
	КлючНастроек = Неопределено,
	ЗначениеЕслиНеЗадана = Неопределено)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеЕслиНеЗадана);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройку текущего пользователя.
Процедура СохранитьНастройкуТекущегоПользователя(КлючОбъекта, Значение, КлючНастроек = Неопределено)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Значение);
		
КонецПроцедуры

// Получает настройку пользователя работы с почтой.
//
Функция ПолучитьНастройкуРаботаСМессенджерами() Экспорт
	
	Настройка = ПолучитьНастройкуТекущегоПользователя("РаботаСМессенджерами", "НастройкиПользователя", Новый Структура);
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		Настройка = Новый Структура;
	КонецЕсли;
	Возврат Настройка;
	
КонецФункции

// Сохраняет настройку пользователя работы с почтой.
//
Процедура СохранитьНастройкуРаботаСМессенджерами(Значение) Экспорт
	
	СохранитьНастройкуТекущегоПользователя("РаботаСМессенджерами", Значение, "НастройкиПользователя");
	
КонецПроцедуры

Функция ПолучитьТекстПодписиПоШаблону(Шаблон)
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.CRM_Подписи")));
		 
	ТекстПодписи = Шаблон.Текст;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если СтрНайти(ТекстПодписи, СтрокаАвтотекста.Тэг) > 0 Тогда
			СтруктураАвтотекста = Новый Структура;
			СтруктураАвтотекста.Вставить("Тэг",			СтрокаАвтотекста.Тэг);
			СтруктураАвтотекста.Вставить("Действие",	СтрокаАвтотекста.Действие);
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, Шаблон);
			ТекстПодписи = СтрЗаменить(ТекстПодписи, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстПодписи;
	
КонецФункции

// +CRM_Модуль
Процедура ДобавитьТекстФрорматированногоДокументаКТекстуПисьма(Знач ФорматированныйДокумнет, ТекстHTML, Картинки,
	УникальныйИдентификаторФормы, ИдентификаторыКартинокПисьма) Экспорт
	
	Если Картинки = Неопределено Тогда
		Картинки = Новый Структура;
	КонецЕсли;
	ФорматированныйДокумнет.ПолучитьHTML(ТекстHTML, Картинки);
	
	Для Каждого КлючИЗначение Из Картинки Цикл
		
		УникальныйИдентификаторФайла = Строка(Новый УникальныйИдентификатор);
		
		ДвоичныеДанныеФайла = КлючИЗначение.Значение.ПолучитьДвоичныеДанные();
		НавигационнаяСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификаторФормы);
		
		ТекстHTML = СтрЗаменить(ТекстHTML, КлючИЗначение.Ключ, НавигационнаяСсылка);
		
		ОписаниеИсточника = Новый Структура("ИсточникФайла, НавигационнаяСсылка, Ссылка, Режим",
		УникальныйИдентификаторФайла, НавигационнаяСсылка, Неопределено, "Создание");
		УдалитьДублиВИдентификаторахКартинокПисьма(ИдентификаторыКартинокПисьма, УникальныйИдентификаторФайла);
		ИдентификаторыКартинокПисьма.Добавить(ОписаниеИсточника);
		
	КонецЦикла;
	
КонецПроцедуры
// -CRM_Модуль

#КонецОбласти

#Область Измененные

///////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции работы с взаимодействиями.

Функция ПараметрыПисьмаДляОтправки(Объект, ПересылаемоеПисьмо = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		РасширениеДляФайловПодписи = МодульЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма, "Кому", "ПолучателиПисьма");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма, "Копии", "ПолучателиКопий");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма, "СкрытыеКопии", "ПолучателиСкрытыхКопий");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма, "АдресОтвета",  "ПолучателиОтвета");
	ПараметрыПисьма.Вставить("Тема", Объект.Тема);
	ПараметрыПисьма.Вставить("Тело", ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
	                                   Объект.Текст, Объект.ТекстHTML));
	ПараметрыПисьма.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыПисьма.Вставить("Важность",  УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("ТипТекста", Объект.ТипТекста);
	
	Если Не ПустаяСтрока(Объект.ИдентификаторОснования) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторОснования", Объект.ИдентификаторОснования);
	КонецЕсли;
	
	// +CRM
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Объект.Ссылка);
	ЭтоПисьмоРассылки = (ЗначениеЗаполнено(Предмет)
		 И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	СодержимоеИзРассылки = ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена;
	
	Если СодержимоеИзРассылки Тогда
		Тело = ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст, Предмет.Текст, Предмет.ТекстHTML);
		ЗаполнитьАвтотекстПоПисьму(Тело, Объект);
		ПараметрыПисьма.Вставить("Тело", Тело);
	КонецЕсли;
	ПараметрыПисьма.Вставить("GUID", Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
	ПараметрыПисьма.Вставить("ИмяОтправителя",
		CRM_УправлениеЭлектроннойПочтой.ИмяОтправителяПользователя(Объект.УчетнаяЗапись, Объект.Ответственный));
	// -CRM
	
	Если Не ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		// +CRM
		//ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
		ИдентификаторыОснований = СтрЗаменить(Объект.ИдентификаторыОснований, Символы.ВК, "");
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
		// -CRM
	КонецЕсли;
	
	МассивВложений = Новый Массив;
	
	ДанныеПрисоединенныхФайловПисьма = ДанныеПрисоединенныхФайловПисьмаОбъект(Объект);
	ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныхФайлов;
	ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.ВладелецФайлов;
	
	// +CRM
	Если СодержимоеИзРассылки Тогда
		ИмяОбъектаМетаданных = "CRM_РассылкаЭлектронныхПисемПрисоединенныеФайлы";
		ВладелецФайлов = Предмет;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПересылаемоеПисьмо) Тогда
		ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";
		ВладелецФайлов = ПересылаемоеПисьмо;
	КонецЕсли;
	// -CRM
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование               КАК ПолноеНаименование,
	|	Файлы.Расширение                 КАК Расширение,
	|	Файлы.Ссылка                     КАК Ссылка,
	|	&Зашифрован,
	|	Файлы.ИДФайлаЭлектронногоПисьма  КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	&ИмяТаблицыСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Письмо                     КАК Письмо,
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.ПорядковыйНомерВоВложениях КАК ПорядковыйНомерВоВложениях
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПисьмаВложения КАК ЭлектронноеПисьмоИсходящееПисьмаВложения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Ссылка = &ВладелецФайла
	|
	|УПОРЯДОЧИТЬ ПО ПорядковыйНомерВоВложениях ВОЗР";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицыСправочника", "Справочник." + ИмяОбъектаМетаданных);
	
	Если Метаданные.Справочники[ИмяОбъектаМетаданных].Реквизиты.Найти("Зашифрован") <> Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Зашифрован", "Файлы.Зашифрован                 КАК Зашифрован");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Зашифрован", "ЛОЖЬ                 КАК Зашифрован");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаВложения = РезультатЗапроса[0].Выбрать();
	ТаблицаПисьмаВложения = РезультатЗапроса[1].Выгрузить();
	
	КоличествоВложений = ТаблицаПисьмаВложения.Количество() + ВыборкаВложения.Количество();
	
	НомерОтображаемогоВложения = 1;
	Пока ВыборкаВложения.Следующий() Цикл
		
		// +CRM добавлено условие
		Если Не СодержимоеИзРассылки Тогда
			ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения);
		КонецЕсли;
		// -CRM добавлено условие
		
		ИмяФайла = ВыборкаВложения.ПолноеНаименование + ?(ВыборкаВложения.Расширение = "", "", "." + ВыборкаВложения.Расширение)
			+ ?(ВыборкаВложения.Зашифрован, "." + РасширениеДляЗашифрованныхФайлов(), "");
		
		Если ПустаяСтрока(ВыборкаВложения.ИДФайлаЭлектронногоПисьма) Тогда
			ДобавитьВложение(МассивВложений, ИмяФайла, РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка));
			НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		Иначе
			ДобавитьВложение(МассивВложений,
			                 ИмяФайла, 
			                 РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка), 
			                 ВыборкаВложения.ИДФайлаЭлектронногоПисьма);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭлектронныеПодписиВладельца = МодульЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаВложения.Ссылка);
			НомерСтроки = 1;
			Для каждого ЭП Из ЭлектронныеПодписиВладельца Цикл
				ИмяФайла = ВыборкаВложения.ПолноеНаименование + "-DS(" + НомерСтроки + ")." + РасширениеДляФайловПодписи;
				ДобавитьВложение(МассивВложений, ИмяФайла, ЭП.Подпись);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// +CRM добавлено условие
	Если Не СодержимоеИзРассылки Тогда
	
	Пока НомерОтображаемогоВложения <= КоличествоВложений Цикл
		
		ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения);
		НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		
	КонецЦикла;
	
	КонецЕсли;
	// -CRM добавлено условие
	
	ПараметрыПисьма.Вставить("Вложения", МассивВложений);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Если Объект.УведомитьОДоставке Тогда
		ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	КонецЕсли;
	
	Если Объект.УведомитьОПрочтении Тогда
		ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ФоновоеЗаданиеПолучениеОтправкаПочтыВыполняется(УчетныеЗаписи) Экспорт
	
	// CRM - метод переписан полностью.
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьПотоки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты");
	Если ИспользоватьПотоки Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПотокиДоставкиПочты.НомерПотока КАК НомерПотока
		|ИЗ
		|	РегистрСведений.CRM_ПотокиДоставкиПочты КАК ПотокиДоставкиПочты
		|ГДЕ
		|	ПотокиДоставкиПочты.УчетнаяЗапись В(&УчетныеЗаписи)
		|	И ПотокиДоставкиПочты.НомерПотока > 0");
		
		Запрос.Параметры.Вставить("УчетныеЗаписи", УчетныеЗаписи);
		НомераПотоков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерПотока");
		
		Выполняется = Истина;
		Для Каждого НомерПотока Из НомераПотоков Цикл
			
			РегламентноеЗадание = Метаданные.РегламентныеЗадания["CRM_ПолучениеИОтправкаЭлектронныхПисемПоток" + НомерПотока];
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
			Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Выполняется = Выполняется И (ТекущиеФоновыеЗадания.Количество() > 0);
			Если Не Выполняется Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Выполняется;
		
	Иначе
		
		РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Возврат ТекущиеФоновыеЗадания.Количество() > 0;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////
// Работа с папками электронных писем.

Функция ПользовательЯвляетсяОтветственнымЗаВедениеПапок(УчетнаяЗапись) Экспорт
	
	// CRM - метод переписан полностью.
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗаписьЭлектроннойПочты
	|	И НастройкиУчетныхЗаписейЭлектроннойПочты.Пользователь В(&ОтветственныйЗаВедениеПапок)
	|	И НастройкиУчетныхЗаписейЭлектроннойПочты.Администрирование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗаписьЭлектроннойПочты
	|	И УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("ОтветственныйЗаВедениеПапок", РолиПользователя);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции 

Процедура УстановитьРодителяУПапки(Папка, НовыйРодитель, НеЗаписыватьПапку = Ложь) Экспорт
	
	// CRM - метод переписан полностью.
	
	МетаданныеСправочника = Метаданные.Справочники.ПапкиЭлектронныхПисем;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ(&ПеремещаемаяПапка)
	|	И ПапкиЭлектронныхПисем.Ссылка = &НовыйРодитель";
	
	Запрос.УстановитьПараметр("ПеремещаемаяПапка", Папка);
	Запрос.УстановитьПараметр("НовыйРодитель", НовыйРодитель);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(МетаданныеСправочника.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Папка);
		Блокировка.Заблокировать();
		
		ПапкаОбъект          = Папка.ПолучитьОбъект();
		ПапкаОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеРодителя", Истина);
		
		Если Не НеЗаписыватьПапку Тогда
			ПапкаОбъект.Родитель = НовыйРодитель;
			ПапкаОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьПапкуДляПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Папка = ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо , Истина);
	// +CRM
	// Если ЗначениеЗаполнено(Папка) И (НЕ Папка.ПредопределеннаяПапка) Тогда
	Если ЗначениеЗаполнено(Папка) И (Не CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(Папка)) Тогда
		Возврат Папка;
	КонецЕсли;
	
	// Если письмо помечено на удаление, его необходимо перенести в "корзину".
	Если Письмо.ПометкаУдаления Тогда
		Возврат Папка;
	КонецЕсли;
	// -CRM
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.Ссылка              КАК Ссылка,
	|	ПравилаОбработкиЭлектроннойПочты.Владелец            КАК УчетнаяЗапись,
	|	ПравилаОбработкиЭлектроннойПочты.Наименование        КАК НаименованиеПравила,
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек КАК КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку КАК ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка = &Письмо)
	|	И НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Папка;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
			
		Попытка
			СхемаПравилаОбработки = 
				Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
			КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				КомпоновщикНастроек.Настройки.Отбор, "Ссылка", Письмо, ВидСравненияКомпоновкиДанных.Равно);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
				СхемаПравилаОбработки, КомпоновщикНастроек.ПолучитьНастройки(),,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			Если МакетКомпоновкиДанных.ЗначенияПараметров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
			ЗапросПравило = Новый Запрос(ТекстЗапроса);
			Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
			// @skip-check query-in-loop - Последовательное выполнение правил обработки писем до первого подходящего.
			Результат = ЗапросПравило.Выполнить();
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось применить правило обработки писем ""%1"" для почты ""%2"" по причине: 
			                                |%3
			                                |Требуется исправить правило.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОбОшибке, 
				Выборка.НаименованиеПравила,
				Выборка.УчетнаяЗапись,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка, ТекстСообщенияОбОшибке);
			Продолжить;
			
		КонецПопытки;
		
			Если Не Результат.Пустой() Тогда
				Возврат Выборка.ПомещатьВПапку;
			КонецЕсли;
			
	КонецЦикла;
	
	Возврат Папка;
	
КонецФункции

Функция ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо, ВключаяПроверкиПисьмаОснования = Ложь) Экспорт
	
	// CRM - метод переписан полностью.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ВключаяПроверкиПисьмаОснования Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	Взаимодействия.Ссылка КАК Письмо
		|ПОМЕСТИТЬ ПапкиПоОснованию
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|				И (НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка)
		|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.ВзаимодействиеОснование)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
		|			ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
		|		ПО Взаимодействия.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|	И ТИПЗНАЧЕНИЯ(Взаимодействия.ВзаимодействиеОснование) В (ТИП(Документ.ЭлектронноеПисьмоИсходящее), ТИП(Документ.ЭлектронноеПисьмоВходящее))
		|	И ПапкиЭлектронныхПисем.Владелец = Взаимодействия.УчетнаяЗапись
		|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиУчетныхЗаписей.Папка КАК Папка,
		|	ПапкиУчетныхЗаписей.ВидПапки КАК ВидПапки
		|ПОМЕСТИТЬ ПапкиУчетнойЗаписи
		|ИЗ
		|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|ГДЕ
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВходящееПисьмо.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие) 
		|	КОНЕЦ КАК ВидПапки
		|ПОМЕСТИТЬ ВидПапкиНазначения
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.Ссылка = &Письмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка,
		|	ВЫБОР
		|		КОГДА ИсходящееПисьмо.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидПапкиНазначения.Ссылка КАК Письмо,
		|	ВЫБОР
		|		КОГДА ПапкиПоОснованию.Папка ЕСТЬ NULL
		|			ТОГДА ПапкиУчетнойЗаписи.Папка
		|		ИНАЧЕ ПапкиПоОснованию.Папка
		|	КОНЕЦ КАК Папка
		|ИЗ
		|	ВидПапкиНазначения КАК ВидПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиУчетнойЗаписи КАК ПапкиУчетнойЗаписи
		|		ПО ВидПапкиНазначения.ВидПапки = ПапкиУчетнойЗаписи.ВидПапки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиПоОснованию КАК ПапкиПоОснованию
		|		ПО ВидПапкиНазначения.Ссылка = ПапкиПоОснованию.Письмо";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиУчетныхЗаписей.Папка КАК Папка,
		|	ПапкиУчетныхЗаписей.ВидПапки КАК ВидПапки
		|ПОМЕСТИТЬ ПапкиУчетнойЗаписи
		|ИЗ
		|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|ГДЕ
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВходящееПисьмо.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВходящееПисьмо.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие) 
		|	КОНЕЦ КАК ВидПапки
		|ПОМЕСТИТЬ ВидПапкиНазначения
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.Ссылка = &Письмо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка,
		|	ВЫБОР
		|		КОГДА ИсходящееПисьмо.ПометкаУдаления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные)
		|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие)
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидПапкиНазначения.Ссылка КАК Письмо,
		|	ПапкиУчетнойЗаписи.Папка КАК Папка
		|ИЗ
		|	ВидПапкиНазначения КАК ВидПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиУчетнойЗаписи КАК ПапкиУчетнойЗаписи
		|		ПО ВидПапкиНазначения.ВидПапки = ПапкиУчетнойЗаписи.ВидПапки";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	Запрос.УстановитьПараметр("УчетнаяЗапись", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "УчетнаяЗапись"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Папка;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПапкиДляМассиваПисем(МассивПисем, УстановленныеПапкиIMAP = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
	|ИЗ
	// +CRM
	//|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	// -CRM
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие В(&МассивПисем)";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	ПапкиДляРасчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Папка");
	// +CRM
	//ТаблицаПапок = ОпределитьПапкиДляМассиваПисем(МассивПисем);
	ТаблицаПапок = ОпределитьПапкиДляМассиваПисем(МассивПисем, УстановленныеПапкиIMAP);
	// -CRM
	
	Если ТаблицаПапок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаблокироватьПредметыПапок(Блокировка, ТаблицаПапок, "Письмо");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТаблицы Из ТаблицаПапок Цикл
			// +CRM
			//УстановитьПапкуЭлектронногоПисьма(СтрокаТаблицы.Письмо, СтрокаТаблицы.Папка, Ложь);
			ЭтоПапкаПоУмолчанию = ?(ТаблицаПапок.Колонки.Найти("ПоУмолчанию") = Неопределено, Ложь, СтрокаТаблицы.ПоУмолчанию);
			УстановитьПапкуЭлектронногоПисьма(СтрокаТаблицы.Письмо, СтрокаТаблицы.Папка, Ложь, Ложь,, ЭтоПапкаПоУмолчанию);
			// -CRM
			Если ЗначениеЗаполнено(СтрокаТаблицы.Папка) И ПапкиДляРасчета.Найти(СтрокаТаблицы.Папка) = Неопределено Тогда
				ПапкиДляРасчета.Добавить(СтрокаТаблицы.Папка);
			КонецЕсли;
		КонецЦикла;
			
		РассчитатьРассмотреноПоПапкам(ТаблицаДанныхДляРасчетаРассмотрено(ПапкиДляРасчета, "Папка"));
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьПапкиДляМассиваПисем(МассивПисем, УстановленныеПапкиIMAP = Неопределено)
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("Папка");
	ТаблицаСоответствий.Колонки.Добавить("Письмо");
	
	Если МассивПисем.Количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец            КАК УчетнаяЗапись,
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек КАК КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку      КАК ПомещатьВПапку,
	|	ПравилаОбработкиЭлектроннойПочты.Ссылка              КАК Ссылка,
	|	ПравилаОбработкиЭлектроннойПочты.Наименование        КАК НаименованиеПравила
	// +CRM
	|	,ЕСТЬNULL(ПапкиЭлектронныхПисем.CRM_ИмяНаСервере, """") КАК ПапкаIMAP
	// -CRM
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	// +CRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку = ПапкиЭлектронныхПисем.Ссылка
	// -CRM
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись КАК УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|	И (НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаУчетнаяЗапись = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУчетнаяЗапись.Следующий() Цикл
			Выборка = ВыборкаУчетнаяЗапись.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Попытка
					
					СхемаПравилаОбработки = 
						Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
					
					КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
					КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						КомпоновщикНастроек.Настройки.Отбор, "Ссылка", МассивПисем, ВидСравненияКомпоновкиДанных.ВСписке);
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						КомпоновщикНастроек.Настройки.Отбор,
						"Ссылка.УчетнаяЗапись",
						ВыборкаУчетнаяЗапись.УчетнаяЗапись,
						ВидСравненияКомпоновкиДанных.Равно);
					
					МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
						СхемаПравилаОбработки,
						КомпоновщикНастроек.ПолучитьНастройки(),
						, ,
						Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
					
					// BSLLS:CreateQueryInCycle-off
					// Выполнение различных запросов
					ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
					ЗапросПравило = Новый Запрос(ТекстЗапроса);
					Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
						ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
					КонецЦикла;
					
					РезультатПисьма = ЗапросПравило.Выполнить();
					// BSLLS:CreateQueryInCycle-on	
					Если Не РезультатПисьма.Пустой() Тогда
						ВыборкаПисьма = РезультатПисьма.Выбрать();
						Пока ВыборкаПисьма.Следующий() Цикл
							
							НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
							НоваяСтрокаТаблицы.Папка = Выборка.ПомещатьВПапку;
							НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
							
							// +CRM
							Если УстановленныеПапкиIMAP <> Неопределено Тогда
								НоваяСтрокаТаблицы = УстановленныеПапкиIMAP.Добавить();
								НоваяСтрокаТаблицы.Папка = Выборка.ПапкаIMAP;
								НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
							КонецЕсли;
							// -CRM
							
							ИндексЭлементаМассиваКУдалению = МассивПисем.Найти(ВыборкаПисьма.Ссылка);
							Если ИндексЭлементаМассиваКУдалению <> Неопределено Тогда
								МассивПисем.Удалить(ИндексЭлементаМассиваКУдалению);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
					Если МассивПисем.Количество() = 0 Тогда
						Возврат ТаблицаСоответствий;
					КонецЕсли;
					
				Исключение
					
					ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось применить правило обработки писем ""%1"" для учетной записи ""%2"" по причине: 
					                                |%3
					                                |Требуется исправить правило.'", ОбщегоНазначения.КодОсновногоЯзыка());
				
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияОбОшибке, 
						Выборка.НаименованиеПравила,
						Выборка.УчетнаяЗапись,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
						 УровеньЖурналаРегистрации.Ошибка, , ,
						 ТекстСообщенияОбОшибке);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если МассивПисем.Количество() > 0 Тогда
		ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем, ТаблицаСоответствий);
	КонецЕсли;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

Процедура ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем, ТаблицаПисем)
	
	// CRM - метод переписан полностью.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиУчетныхЗаписей.Папка КАК Папка,
	|	ПапкиУчетныхЗаписей.ВидПапки КАК ВидПапки,
	|	ПапкиУчетныхЗаписей.УчетнаяЗапись КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПапкиУчетнойЗаписи
	|ИЗ
	|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|ГДЕ
	|	ПапкиУчетныхЗаписей.УчетнаяЗапись В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Взаимодействия.УчетнаяЗапись КАК УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящееПисьмо.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВходящееПисьмо.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие) 
	|	КОНЕЦ КАК ВидПапки,
	|	ВходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ВидПапкиНазначения
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ВходящееПисьмо
	|ГДЕ
	|	ВходящееПисьмо.Ссылка В(&МассивПисем)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящееПисьмо.Ссылка,
	|	ВЫБОР
	|		КОГДА ИсходящееПисьмо.ПометкаУдаления
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные)
	|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
	|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные)
	|		КОГДА ИсходящееПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие)
	|	КОНЕЦ,
	|	ИсходящееПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ИсходящееПисьмо
	|ГДЕ
	|	ИсходящееПисьмо.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидПапкиНазначения.Ссылка КАК Письмо,
	|	ПапкиУчетнойЗаписи.Папка КАК Папка,
	|	ИСТИНА КАК ПоУмолчанию
	|ИЗ
	|	ВидПапкиНазначения КАК ВидПапкиНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиУчетнойЗаписи КАК ПапкиУчетнойЗаписи
	|		ПО ВидПапкиНазначения.ВидПапки = ПапкиУчетнойЗаписи.ВидПапки
	|			И ВидПапкиНазначения.УчетнаяЗапись = ПапкиУчетнойЗаписи.УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТаблицаПисем.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаПисем);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтработатьПризнакИзмененияПометкиУдаленияПриЗаписиПисьма(ПисьмоОбъект) Экспорт
	
	// CRM - метод переписан полностью.
	
	Если ПисьмоОбъект.ПометкаУдаления = ПисьмоОбъект.ДополнительныеСвойства.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПисьмоОбъект.ДополнительныеСвойства.Свойство("ОбработаноИзменениеПометкиУдаления") Тогда
		Возврат;
	КонецЕсли;
	
	CRM_УправлениеЭлектроннойПочтой.ЗарегистрироватьУдалениеПисьмаIMAP(ПисьмоОбъект.Ссылка, ПисьмоОбъект.ПометкаУдаления);
	
КонецПроцедуры

Процедура УстановитьПапкуЭлектронногоПисьма(Ссылка, Папка, РассчитыватьРассмотрено = Истина,
	Регистрировать = Истина, Замещать = Истина, ЭтоПапкаПоУмолчанию = Ложь) Экспорт
	
	Реквизиты = РегистрыСведений.ПредметыПапкиВзаимодействий.РеквизитыВзаимодействия();
	Реквизиты.Папка                   = Папка;
	Реквизиты.РассчитыватьРассмотрено = РассчитыватьРассмотрено;
	РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаписатьПредметыПапкиВзаимодействий(Ссылка, Реквизиты);
	
	// +CRM
	Если Регистрировать Тогда
		CRM_УправлениеЭлектроннойПочтой.ЗарегистрироватьПеремещениеПисьмаIMAP(Ссылка, Папка);
	КонецЕсли;
	
	Если Замещать Тогда
		НаборЗаписей = РегистрыСведений.CRM_ПапкиВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Ссылка);
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Взаимодействие = Ссылка;
		НоваяСтрока.ПапкаЭлектронногоПисьма = Папка;
		
		Если ЭтоПапкаПоУмолчанию Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоПапкаПоУмолчанию");
		КонецЕсли;
		
		НаборЗаписей.Записать();
	Иначе
		МенеджерЗаписи = РегистрыСведений.CRM_ПапкиВзаимодействий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Взаимодействие = Ссылка;
		МенеджерЗаписи.ПапкаЭлектронногоПисьма = Папка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

Функция СформироватьЭлементДанныхШапкиПисьма(ЭлементРодитель, ШапкаПисьма,
	 ТолькоПоПредставлениюОтправителя = Ложь) Экспорт
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ЭлементТаблица = ДокументВладелец.СоздатьЭлемент("table");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица, "border", "0");
	
	ОтправительПредставление = ШапкаПисьма.ОтправительПредставление 
		+ ?(ТолькоПоПредставлениюОтправителя Или ПустаяСтрока(ШапкаПисьма.ОтправительАдрес),
	    	"",
	    	"[" + ШапкаПисьма.ОтправительАдрес + "]");
	
	ДобавитьСтрокуВТаблицу(ЭлементТаблица, НСтр("ru = 'От: '; en = 'From: '"), ОтправительПредставление);
	ДобавитьСтрокуВТаблицу(ЭлементТаблица, НСтр("ru = 'Отправлено: '; en = 'Sent: '"), Формат(ШапкаПисьма.Дата, "ДЛФ=D'"));
	
	ТаблицаПолучателейПисьма = ?(ТипЗнч(ШапкаПисьма.ПолучателиПисьма) = Тип("ТаблицаЗначений"),
		ШапкаПисьма.ПолучателиПисьма, ШапкаПисьма.ПолучателиПисьма.Выгрузить());
	ДобавитьСтрокуВТаблицу(ЭлементТаблица, НСтр("ru = 'Кому: '; en = 'To: '"),
		 ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейПисьма));
	
	ТаблицаПолучателейКопий = ?(ТипЗнч(ШапкаПисьма.ПолучателиКопий) = Тип("ТаблицаЗначений"),
		ШапкаПисьма.ПолучателиКопий, ШапкаПисьма.ПолучателиКопий.Выгрузить());
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		ДобавитьСтрокуВТаблицу(ЭлементТаблица, НСтр("ru = 'Копия:'; en = 'cc: '"),
			 ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий));
	КонецЕсли;
	
	Тема = ?(ПустаяСтрока(ШапкаПисьма.Тема), НСтр("ru = '<Без Темы>'"), ШапкаПисьма.Тема);
	ДобавитьСтрокуВТаблицу(ЭлементТаблица, НСтр("ru = 'Тема: '; en = 'Subject: '"), Тема);
	
	Возврат ЭлементТаблица;
	
КонецФункции

Процедура ОбработатьЛидПоПапкеПисьма(Письмо, Папка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Папка.Владелец;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	// Лид не должен быть создан
	Если НЕ УчетнаяЗапись.CRM_ИсточникЛидов Тогда
		Возврат;
	КонецЕсли;
	
	ПапкаОбработанные = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗапись, "Обработанные");
	// Папка Обработанные имеет свою логику отклонения.
	// Также она недоступна для выбора в качестве источника обращений.
	Если Папка = ПапкаОбработанные Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ УчетнаяЗапись.CRM_СинхронизироватьПапкиСПочтовымСервером Тогда
	//	// Поведение по умолчанию - создается лид без проверки на папку письма.
	//	Возврат;
	//КонецЕсли;
	
	МассивУчетныхЗаписей = Новый Массив;
	МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
	МассивПапок = МассивПапокИсточниковОбращений(МассивУчетныхЗаписей);
	
	// Папки не заданы - поведение по умолчанию - создается лид без проверки на папку письма.
	Если МассивПапок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивПапок.Найти(Папка) = Неопределено Тогда
		// Лид не был создан (проверка в РС CRM_СостоянияЛидов.УчетнаяЗаписьЭлПочтыЯвляетсяИсточникомЛидов
		// вернула Ложь при обращении из CRM_КлиентыСервер.ЗарегистрироватьОбъектВОбщемЖурнале.
		// И не должен быть создан здесь.
		РегистрыСведений.CRM_ОбъектыАРМ_Обращения.ОчиститьПапкуПисьма(Письмо);
	Иначе		
		// Проверка на папку-источник пройдена. Если лид еще не создан - он создается здесь
		// по алгоритму из CRM_КлиентыСервер.ЗарегистрироватьОбъектВОбщемЖурнале.
		ДанныеПовторногоОбращения = CRM_КлиентыСервер.ПолучитьДанныеПовторногоОбращения(Письмо, Новый Структура);
		
		// Данные по письму уже должны быть в журнале, т.к. ранее при записи была вызвана
		// процедура CRM_КлиентыСервер.ЗарегистрироватьОбъектВОбщемЖурнале.
		НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Письмо);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			СвязанСКлиентом = ЗначениеЗаполнено(НаборЗаписей[0].Клиент);
		Иначе
			СвязанСКлиентом = Ложь;
		КонецЕсли;
		Если (РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Письмо) = Неопределено)
			 ИЛИ НЕ (ДанныеПовторногоОбращения = Неопределено) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Письмо, , , , ,
				 СвязанСКлиентом,
				 ДанныеПовторногоОбращения);
			Отказ = Ложь;
			CRM_РаботаАРМСервер.CRM_ЗаполнениеАРММоиПродажи(Письмо, Отказ);
		Иначе // в случае, если источник является лидом, но не выполняются условия выше для всеобъемлющей записи, отдельно пишем описание,
				// а также обновляем флаг СвязанСКлиентом:
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьВспомогательныеДанныеОбращения(Письмо, СвязанСКлиентом);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УчетныеЗаписиИПапкиИсточникиОбращений(СписокСценариев) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСценариев) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка КАК УчетнаяЗапись,
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Папка КАК Папка
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиЭлектроннойПочты.CRM_Сценарии КАК УчетныеЗаписиЭлектроннойПочтыСценарии
	                      |ГДЕ
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Сценарий В(&СписокСценариев)
	                      |	И НЕ УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.ПометкаУдаления
	                      |	И УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка.CRM_ИсточникЛидов
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Ссылка,
	                      |	УчетныеЗаписиЭлектроннойПочтыСценарии.Папка");

	Запрос.УстановитьПараметр("СписокСценариев", СписокСценариев);
	РезультатЗапроса = Запрос.Выполнить();
	
	УчетныеЗаписи = Новый Массив;
	Папки = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Папка) Тогда
			
			Папки.Добавить(Выборка.Папка);
			
			Если УчетныеЗаписи.Найти(Выборка.УчетнаяЗапись) = Неопределено Тогда
				УчетныеЗаписи.Добавить(Выборка.УчетнаяЗапись);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("УчетныеЗаписи, Папки", УчетныеЗаписи, Папки);
	
КонецФункции

Функция МассивПапокИсточниковОбращений(МассивУчетныхЗаписей) Экспорт
	
	// Здесь не учитываются сценарии
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды.Папка КАК Папка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.CRM_ПапкиЛиды КАК УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды.Ссылка В(&МассивУчетныхЗаписей)
		|	И НЕ УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды.Папка В (&ПапкиОбработанные)
		|	И НЕ УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды.Папка = ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетныеЗаписиЭлектроннойПочтыCRM_ПапкиЛиды.Папка";
	
	Запрос.УстановитьПараметр("МассивУчетныхЗаписей", МассивУчетныхЗаписей);
	
	ПапкиОбработанные = Новый Массив;
	Для Каждого УчетнаяЗапись Из МассивУчетныхЗаписей Цикл
		ПапкиОбработанные.Добавить(
					CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗапись, "Обработанные"));
	КонецЦикла;
	Запрос.УстановитьПараметр("ПапкиОбработанные", ПапкиОбработанные);
	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Папка");
	
КонецФункции

Функция ПапкаПисьма(Письмо) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
	|ИЗ
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиВзаимодействий
	|ГДЕ
	|	ПапкиВзаимодействий.Взаимодействие = &Письмо");
	
	Запрос.Параметры.Вставить("Письмо", Письмо);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Папка;
	
КонецФункции

#КонецОбласти

#Область Типовые

// Выполняет отправку электронного письма.
//
// Параметры:
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо.
//
// Возвращаемое значение:
//   см. РаботаСПочтовымиСообщениями.ОтправитьПисьмо
//
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено, ПараметрыПисьма = Неопределено,
	 ПротоколПочты = "") Экспорт
	
	ПараметрыПисьма = ПараметрыПисьмаДляОтправки(Объект);
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(Объект.УчетнаяЗапись, ПараметрыПисьма);
	РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(Объект.УчетнаяЗапись, Письмо);
	// +CRM Обработка ошибки отправки письма (Пример: отправка письма c вложением exe файла, через gmail) 
	Если РезультатОтправки.Свойство("ТекстОшибки") И ЗначениеЗаполнено(РезультатОтправки.ТекстОшибки) Тогда
		ВызватьИсключение РезультатОтправки.ТекстОшибки;
	КонецЕсли;
	// -CRM
	Объект.ИдентификаторСообщения = РезультатОтправки.ИдентификаторПисьмаSMTP;
	Объект.ИдентификаторСообщенияОтправкаIMAP = РезультатОтправки.ИдентификаторПисьмаIMAP;
	ПараметрыПисьма.Вставить("ИдентификаторСообщения", РезультатОтправки.ИдентификаторПисьмаSMTP);
	ПараметрыПисьма.Вставить("ОшибочныеПолучатели", РезультатОтправки.ОшибочныеПолучатели);
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ТаблицаДанныхДляРасчетаРассмотрено(ДанныеДляРасчета, ИмяРеквизита) Экспорт

	СформированнаяТаблица = Новый ТаблицаЗначений;
	Если ИмяРеквизита = "Папка" Тогда
		ОписаниеТиповКолонки = Новый ОписаниеТипов("СправочникСсылка.ПапкиЭлектронныхПисем");
	ИначеЕсли ИмяРеквизита = "Предмет" Тогда
		ОписаниеТиповКолонки =
			Новый ОписаниеТипов(Новый ОписаниеТипов(Метаданные.РегистрыСведений.СостоянияПредметовВзаимодействий.Измерения.Предмет.Тип.Типы()));
	ИначеЕсли ИмяРеквизита = "Контакт" Тогда
		ОписаниеТиповКолонки =
			Новый ОписаниеТипов(Новый ОписаниеТипов(Метаданные.РегистрыСведений.КонтактыВзаимодействий.Измерения.Контакт.Тип.Типы()));
	КонецЕсли;
	
	СформированнаяТаблица.Колонки.Добавить("ПоЧемуРассчитывать", ОписаниеТиповКолонки);
	
	Если ТипЗнч(ДанныеДляРасчета) = Тип("Структура") Тогда
		
		НоваяЗапись  = ДанныеДляРасчета.НоваяЗапись;
		СтараяЗапись = ДанныеДляРасчета.СтараяЗапись;
		
		Если ЗначениеЗаполнено(НоваяЗапись[ИмяРеквизита]) Тогда
			НоваяСтрока = СформированнаяТаблица.Добавить();
			НоваяСтрока.ПоЧемуРассчитывать = НоваяЗапись[ИмяРеквизита];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтараяЗапись[ИмяРеквизита]) И НоваяЗапись[ИмяРеквизита] <> СтараяЗапись[ИмяРеквизита] Тогда
			
			НоваяСтрока = СформированнаяТаблица.Добавить();
			НоваяСтрока.ПоЧемуРассчитывать = СтараяЗапись[ИмяРеквизита];
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Пока ДанныеДляРасчета.Следующий() Цикл
			Если ЗначениеЗаполнено(ДанныеДляРасчета[ИмяРеквизита])
				 И СформированнаяТаблица.Найти(ДанныеДляРасчета[ИмяРеквизита], "ПоЧемуРассчитывать") = Неопределено Тогда
				НоваяСтрока = СформированнаяТаблица.Добавить();
				НоваяСтрока.ПоЧемуРассчитывать = ДанныеДляРасчета[ИмяРеквизита];
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеДляРасчета) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ДанныеДляРасчета Цикл
			Если ЗначениеЗаполнено(ЭлементМассива) И СформированнаяТаблица.Найти(ЭлементМассива,
				 "ПоЧемуРассчитывать") = Неопределено Тогда
				НоваяСтрока = СформированнаяТаблица.Добавить();
				НоваяСтрока.ПоЧемуРассчитывать = ЭлементМассива;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СформированнаяТаблица.Индексы.Добавить("ПоЧемуРассчитывать");
	
	Возврат СформированнаяТаблица;

КонецФункции

Процедура РассчитатьРассмотреноПоПапкам(ТаблицаПапок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Если ТаблицаПапок = Неопределено Тогда
		
		РегистрыСведений.СостоянияПапокПисем.УдалитьЗаписьИзРегистра(Неопределено);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК ПапкаЭлектронногоПисьма,
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено
		|ПОМЕСТИТЬ ИспользуемыеПапки
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> ЗНАЧЕНИЕ(Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПапкаЭлектронногоПисьма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	ЕСТЬNULL(ИспользуемыеПапки.КоличествоНеРассмотрено, 0) КАК НеРассмотрено
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеПапки КАК ИспользуемыеПапки
		|		ПО (ИспользуемыеПапки.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка)";
		
	Иначе
		
		Если ТаблицаПапок.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиДляРасчета.ПоЧемуРассчитывать КАК Папка
		|ПОМЕСТИТЬ ПапкиДляРасчета
		|ИЗ
		|	&ПапкиДляРасчета КАК ПапкиДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК Папка
		|ПОМЕСТИТЬ РассчитанныеПапки
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В
		|			(ВЫБРАТЬ
		|				ПапкиДляРасчета.Папка
		|			ИЗ
		|				ПапкиДляРасчета КАК ПапкиДляРасчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиДляРасчета.Папка,
		|	ЕСТЬNULL(РассчитанныеПапки.КоличествоНеРассмотрено, 0) КАК НеРассмотрено
		|ИЗ
		|	ПапкиДляРасчета КАК ПапкиДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РассчитанныеПапки КАК РассчитанныеПапки
		|		ПО ПапкиДляРасчета.Папка = РассчитанныеПапки.Папка";
		
		Запрос.УстановитьПараметр("ПапкиДляРасчета", ТаблицаПапок);
		
	КонецЕсли;
	
	ПапкиПисем = Запрос.Выполнить().Выгрузить();
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		РегистрыСведений.СостоянияПапокПисем.ЗаблокироватьСостоянияПапокПисем(Блокировка, ПапкиПисем, "Папка");
		Блокировка.Заблокировать();
		
		Для каждого ПапкаПисем Из ПапкиПисем Цикл
			РегистрыСведений.СостоянияПапокПисем.ВыполнитьЗаписьВРегистр(ПапкаПисем.Папка, ПапкаПисем.НеРассмотрено);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Находит в HTML содержимое находящееся в теге.
//
// Параметры:
//  Текст                             - Строка - текст XML, в котором выполняется поиск.
//  ИмяТега                           - Строка - тег, содержимое которого необходимо найти.
//  ВключатьОткрывающийЗакрывающийТег - Булево - признак того, что найденное включает открывающий и закрывающий тег, по
//                                               умолчанию Ложь.
//  НомерПоПорядку                    - Число  - позиция, с которой начинается поиск, по умолчанию 1.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция СодержимоеТегаHTML(Текст, ИмяТега, ВключатьОткрывающийЗакрывающийТег = Ложь, НомерПоПорядку = 1) Экспорт
	
	Результат = Неопределено;
	
	Начало    = "<"  + ИмяТега;
	Окончание = "</" + ИмяТега + ">";
	
	НайденнаяПозицияНачало = СтрНайти(НРег(Текст), НРег(Начало), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	НайденнаяПозицияОкончание = СтрНайти(НРег(Текст), НРег(Окончание), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	Если НайденнаяПозицияНачало = 0
		Или НайденнаяПозицияОкончание = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Содержимое = Сред(Текст,
	                  НайденнаяПозицияНачало,
	                  НайденнаяПозицияОкончание - НайденнаяПозицияНачало + СтрДлина(Окончание));
	
	Если ВключатьОткрывающийЗакрывающийТег Тогда
		
		Результат = СокрЛП(Содержимое);
		
	Иначе
		
		ОткрывающийТег = Лев(Содержимое, СтрНайти(Содержимое, ">"));
		Содержимое = СтрЗаменить(Содержимое, ОткрывающийТег, "");
		
		ЗакрывающийТег = Прав(Содержимое, СтрДлина(Содержимое) - СтрНайти(Содержимое, "<", НаправлениеПоиска.СКонца) + 1);
		Содержимое = СтрЗаменить(Содержимое, ЗакрывающийТег, "");
		
		Результат = СокрЛП(Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПрисоединенныхФайловПисьмаОбъект(ПисьмоОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФайлов", ПисьмоОбъект.Ссылка);
	Результат.Вставить("ИмяСправочникаПрисоединенныхФайлов", 
		УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоОбъект.Ссылка));
		
	ВзаимодействияПереопределяемый.ПриПолученииПрисоединенныхФайлов(ПисьмоОбъект.Ссылка, Результат);
	
	// АПК:223-выкл Для обратной совместимости.
	ДанныеПрисоединенныхФайловПисьма =
		ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоОбъект);
	// АПК:223-вкл
	Если ДанныеПрисоединенныхФайловПисьма <> Неопределено Тогда
		Результат.ИмяСправочникаПрисоединенныхФайлов = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		Результат.ВладелецФайлов = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВПараметрАдресатов(Источник, ПараметрыПисьма, ИмяПараметра, ИмяТаблицы) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура")
		 ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений") Тогда
		Таблица = Источник[ИмяТаблицы];
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Таблица = Источник[ИмяТаблицы].Выгрузить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры

Функция ДанныеПрисоединенныхФайловПисьма(ПисьмоСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФайлов", ПисьмоСсылка);
	Результат.Вставить("ИмяСправочникаПрисоединенныхФайлов", 
		УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоСсылка));
		
	ВзаимодействияПереопределяемый.ПриПолученииПрисоединенныхФайлов(ПисьмоСсылка, Результат);
	
	// АПК:223-выкл Для обратной совместимости.
	ДанныеПрисоединенныхФайловПисьма =
		ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоСсылка);
	// АПК:223-вкл
	Если ДанныеПрисоединенныхФайловПисьма <> Неопределено Тогда
		Результат.ИмяСправочникаПрисоединенныхФайлов = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		Результат.ВладелецФайлов = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция РасширениеДляФайловПодписи()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Возврат МодульЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		Возврат "p7s";
	КонецЕсли;
	
КонецФункции

Функция РасширениеДляЗашифрованныхФайлов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Возврат МодульЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляЗашифрованныхФайлов;
	Иначе
		Возврат "p7m";
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВложениеПисьмоЕслиНеобходимо(ТаблицаПисьмаВложения, МассивВложений, НомерОтображаемогоВложения)
	
	НайденнаяСтрока = ТаблицаПисьмаВложения.Найти(НомерОтображаемогоВложения, "ПорядковыйНомерВоВложениях");
	Пока НайденнаяСтрока <> Неопределено Цикл
		ДобавитьВложениеПисьмоИсходящееПисьмо(МассивВложений, НайденнаяСтрока.Письмо);
		НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		НайденнаяСтрока = ТаблицаПисьмаВложения.Найти(НомерОтображаемогоВложения, "ПорядковыйНомерВоВложениях");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВложениеПисьмоИсходящееПисьмо(МассивВложений, Письмо) 

	СтруктураВложение = Новый Структура;
	
	ДанныеИнтернетПочтовогоСообщения = ИнтернетПочтовоеСообщениеИзПисьма(Письмо);
	
	Если ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Представление = ПредставлениеПисьма(ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение.Тема,
	                                    ДанныеИнтернетПочтовогоСообщения.ДатаПисьма);
	ИмяФайла = Представление + ".eml";
	
	СтруктураВложение.Вставить("Кодировка", Письмо.Кодировка);
	СтруктураВложение.Вставить("АдресВоВременномХранилище",
	                           ПоместитьВоВременноеХранилище(ДанныеИнтернетПочтовогоСообщения.ИнтернетПочтовоеСообщение, 
	                                                         Новый УникальныйИдентификатор()));
	СтруктураВложение.Вставить("ТипСодержимого", "message/rfc822");
	СтруктураВложение.Вставить("Представление", ИмяФайла);
	
	МассивВложений.Добавить(СтруктураВложение);
	
КонецПроцедуры 

Функция ИнтернетПочтовоеСообщениеИзПисьма(Письмо) Экспорт
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Возврат ИнтернетПочтовоеСообщениеИзВходящегоПисьма(Письмо);
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		Возврат ИнтернетПочтовоеСообщениеИзИсходящегоПисьма(Письмо);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПредставлениеПисьма(ТемаПисьма, ДатаПисьма) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"), 
		ВзаимодействияКлиентСервер.ТемаВзаимодействия(ТемаПисьма), Формат(ДатаПисьма, "ДЛФ=D"));
	
КонецФункции

Процедура ДобавитьВложение(МассивВложений, ИмяФайла, ДанныеФайла, Идентификатор = Неопределено,
	 Кодировка = Неопределено)
	
	ДанныеВложения = Новый Структура;
	ДанныеВложения.Вставить("Представление", ИмяФайла);
	ДанныеВложения.Вставить("АдресВоВременномХранилище", ДанныеФайла);
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ДанныеВложения.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ДанныеВложения.Вставить("Кодировка", Кодировка);
	КонецЕсли;
	
	МассивВложений.Добавить(ДанныеВложения);
	
КонецПроцедуры

Функция ИнтернетПочтовоеСообщениеИзВходящегоПисьма(Письмо)
	
	СтруктураВозврата = Новый Структура("ИнтернетПочтовоеСообщение, ДатаПисьма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Важность                 КАК Важность,
	|	ЭлектронноеПисьмоВходящее.ИдентификаторНаСервере   КАК Идентификатор,
	|	ЭлектронноеПисьмоВходящее.ДатаПолучения            КАК ДатаПолучения,
	|	ЭлектронноеПисьмоВходящее.Текст                    КАК Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML                КАК ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.Кодировка                КАК Кодировка,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес         КАК ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.Тема                     КАК Тема,
	|	ЭлектронноеПисьмоВходящее.УведомитьОДоставке       КАК УведомитьОДоставке,
	|	ЭлектронноеПисьмоВходящее.УведомитьОПрочтении      КАК УведомитьОПрочтении
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоВходящееПолучателиОтвета
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееПолучателиОтвета.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Адрес,
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Представление,
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.АдресаУведомленияОПрочтении КАК ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоВходящееАдресаУведомленияОПрочтении.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаШапка = РезультатЗапроса[0]; // РезультатЗапроса
	ВыборкаШапка = РезультатЗапросаШапка.Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
		
		ОбъектИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		ОбъектИнтернетПочтовоеСообщение.Важность               =
			УправлениеЭлектроннойПочтой.ПолучитьВажность(ВыборкаШапка.Важность);
		ОбъектИнтернетПочтовоеСообщение.Идентификатор.Добавить(ВыборкаШапка.Идентификатор);
		ОбъектИнтернетПочтовоеСообщение.Кодировка              = ВыборкаШапка.Кодировка;
		ОбъектИнтернетПочтовоеСообщение.Тема                   = ВыборкаШапка.Тема;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОДоставке     = ВыборкаШапка.УведомитьОДоставке;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОПрочтении    = ВыборкаШапка.УведомитьОПрочтении;
		ОбъектИнтернетПочтовоеСообщение.Отправитель            = ВыборкаШапка.ОтправительАдрес;
		
		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ВыборкаШапка.ОтправительПредставление,
			 Ложь);
		Если ТипЗнч(ДанныеОтправителя) = Тип("Массив") И ДанныеОтправителя.Количество() > 0 Тогда
			ОбъектИнтернетПочтовоеСообщение.ИмяОтправителя = ДанныеОтправителя[0].Представление;
			ОбъектИнтернетПочтовоеСообщение.Отправитель    = ДанныеОтправителя[0].Адрес;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаШапка.ТекстHTML) Тогда
		
			ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
			                                               ВыборкаШапка.Текст, 
			                                               ТипТекстаПочтовогоСообщения.ПростойТекст,
			                                               ВыборкаШапка.Кодировка);
		
		КонецЕсли;
		
		ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
		                                               ВыборкаШапка.ТекстHTML, 
		                                               ТипТекстаПочтовогоСообщения.HTML,
		                                               ВыборкаШапка.Кодировка);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	РезультатЗапросаПолучатели                  = РезультатЗапроса[1]; // РезультатЗапроса
	РезультатЗапросаКопии                       = РезультатЗапроса[2]; // РезультатЗапроса
	РезультатЗапросаОбратныйАдрес               = РезультатЗапроса[3]; // РезультатЗапроса
	РезультатЗапросаАдресаУведомленияОПрочтении = РезультатЗапроса[4]; // РезультатЗапроса
	РезультатЗапросаВложения                    = РезультатЗапроса[5]; // РезультатЗапроса
	
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.Получатели,
		 РезультатЗапросаПолучатели.Выбрать());
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.Копии, РезультатЗапросаКопии.Выбрать());
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.ОбратныйАдрес,
		 РезультатЗапросаОбратныйАдрес.Выбрать());
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.АдресаУведомленияОПрочтении,
		 РезультатЗапросаАдресаУведомленияОПрочтении.Выбрать());
	ДобавитьВложенияПисьмаВПочтовоеСообщение(ОбъектИнтернетПочтовоеСообщение, РезультатЗапросаВложения.Выбрать());
	
	СтруктураВозврата.ИнтернетПочтовоеСообщение = ОбъектИнтернетПочтовоеСообщение;
	СтруктураВозврата.ДатаПисьма                = ВыборкаШапка.ДатаПолучения;

	Возврат СтруктураВозврата;

КонецФункции

Функция ИнтернетПочтовоеСообщениеИзИсходящегоПисьма(Письмо)
	
	СтруктураВозврата = Новый Структура("ИнтернетПочтовоеСообщение, ДатаПисьма");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.ДатаОтправления           КАК ДатаОтправления,
	|	ЭлектронноеПисьмоИсходящее.Важность                  КАК Важность,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторНаСервере    КАК Идентификатор,
	|	ЭлектронноеПисьмоИсходящее.ОтправительПредставление  КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоИсходящее.Кодировка                 КАК Кодировка,
	|	ЭлектронноеПисьмоИсходящее.Текст                     КАК Текст,
	|	ЭлектронноеПисьмоИсходящее.ТекстHTML                 КАК ТекстHTML,
	|	ЭлектронноеПисьмоИсходящее.ТипТекста                 КАК ТипТекста,
	|	ЭлектронноеПисьмоИсходящее.Тема                      КАК Тема,
	|	ЭлектронноеПисьмоИсходящее.УведомитьОДоставке        КАК УведомитьОДоставке,
	|	ЭлектронноеПисьмоИсходящее.УведомитьОПрочтении       КАК УведомитьОПрочтении
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление КАК Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Представление КАК Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиОтвета КАК ЭлектронноеПисьмоИсходящееПолучателиОтвета
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиОтвета.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление КАК Представление
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПолучателиКопий.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Письмо КАК Письмо
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПисьмаВложения КАК ЭлектронноеПисьмоИсходящееПисьмаВложения
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.Ссылка = &Письмо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящееПисьмаВложения.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаШапка = РезультатЗапроса[0]; // РезультатЗапроса
	ВыборкаШапка = РезультатЗапросаШапка.Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		
		ОбъектИнтернетПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
		ОбъектИнтернетПочтовоеСообщение.Важность               =
			УправлениеЭлектроннойПочтой.ПолучитьВажность(ВыборкаШапка.Важность);
		ОбъектИнтернетПочтовоеСообщение.Идентификатор.Добавить(ВыборкаШапка.Идентификатор);
		ОбъектИнтернетПочтовоеСообщение.Кодировка              = ВыборкаШапка.Кодировка;
		ОбъектИнтернетПочтовоеСообщение.Тема                   = ВыборкаШапка.Тема;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОДоставке     = ВыборкаШапка.УведомитьОДоставке;
		ОбъектИнтернетПочтовоеСообщение.УведомитьОПрочтении    = ВыборкаШапка.УведомитьОПрочтении;
		
		ДанныеОтправителя = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ВыборкаШапка.ОтправительПредставление,
			 Ложь);
		
		Если ТипЗнч(ДанныеОтправителя) = Тип("Массив") И ДанныеОтправителя.Количество() > 0 Тогда
			ОбъектИнтернетПочтовоеСообщение.ИмяОтправителя = ДанныеОтправителя[0].Представление;
			ОбъектИнтернетПочтовоеСообщение.Отправитель    = ДанныеОтправителя[0].Адрес;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаШапка.ТекстHTML) Тогда
		
			ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
			                                               ВыборкаШапка.Текст, 
			                                               ТипТекстаПочтовогоСообщения.ПростойТекст,
			                                               ВыборкаШапка.Кодировка);
		
		КонецЕсли;
		
		ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ОбъектИнтернетПочтовоеСообщение.Тексты,
		                                               ВыборкаШапка.ТекстHTML, 
		                                               ТипТекстаПочтовогоСообщения.HTML,
		                                               ВыборкаШапка.Кодировка);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	РезультатЗапросаПолучатели                  = РезультатЗапроса[1]; // РезультатЗапроса
	РезультатЗапросаОбратныйАдрес               = РезультатЗапроса[2]; // РезультатЗапроса
	РезультатЗапросаКопии                       = РезультатЗапроса[3]; // РезультатЗапроса
	РезультатЗапросаВложения                    = РезультатЗапроса[5]; // РезультатЗапроса

	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.Получатели,
		 РезультатЗапросаПолучатели.Выбрать());
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.ОбратныйАдрес,
		 РезультатЗапросаОбратныйАдрес.Выбрать());
	ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ОбъектИнтернетПочтовоеСообщение.Копии, РезультатЗапросаКопии.Выбрать());
	ДобавитьВложенияПисьмаВПочтовоеСообщение(ОбъектИнтернетПочтовоеСообщение,       РезультатЗапросаВложения.Выбрать());
	
	СтруктураВозврата.ИнтернетПочтовоеСообщение = ОбъектИнтернетПочтовоеСообщение;
	СтруктураВозврата.ДатаПисьма                = ВыборкаШапка.ДатаОтправления;

	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДобавитьТекстВТекстыИнтернетПочтовогоСообщения(ТекстыСообщения, ТекстСообщения, ТипТекста, Кодировка)
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		
		НовыйТекст = ТекстыСообщения.Добавить(ТекстСообщения, ТипТекста);
		НовыйТекст.Кодировка = Кодировка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолучателейВПочтовоеСообщениеПоВыборке(ТаблицаАдресатов, Выборка)
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьПолучателяВПочтовоеСообщение(ТаблицаАдресатов, Выборка.Адрес, Выборка.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолучателяВПочтовоеСообщение(ТаблицаАдресатов, Адрес, Представление)
	
	ПолучательПисьма                 = ТаблицаАдресатов.Добавить(Адрес);
	ПолучательПисьма.ОтображаемоеИмя = Представление;
	
КонецПроцедуры

Процедура ДобавитьВложенияПисьмаВПочтовоеСообщение(Сообщение, ВыборкаВложения)
	
	Пока ВыборкаВложения.Следующий() Цикл
		
		Имя   = ВыборкаВложения.ПолноеНаименование 
		        + ?(ВыборкаВложения.Расширение = "", "", "." + ВыборкаВложения.Расширение);
		Данные = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка);
		
		ВложениеПисьма = Сообщение.Вложения.Добавить(Данные, Имя);

		Если НЕ ПустаяСтрока(ВыборкаВложения.ИДФайлаЭлектронногоПисьма) Тогда
			ВложениеПисьма.Идентификатор = ВыборкаВложения.ИДФайлаЭлектронногоПисьма;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ПодписиВложения = МодульЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаВложения.Ссылка);
			НомерСтроки = 1;
			Для Каждого ЭП Из ПодписиВложения Цикл
				Имя = ВыборкаВложения.ПолноеНаименование + "-DS(" + НомерСтроки + ")." + РасширениеДляФайловПодписи();
				Данные = ЭП.Подпись;
				
				ВложениеПисьма = Сообщение.Вложения.Добавить(Данные, Имя);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML, Имя, ТекстовоеСодержимое)
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицу(ЭлементРодитель, ЗначениеКолонки1 = Неопределено,
	 ЗначениеКолонки2 = Неопределено,
	 ЗначениеКолонки3 = Неопределено)

	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	ЭлементСтрокаТаблицы = ДокументВладелец.СоздатьЭлемент("tr");
	Если ЗначениеКолонки1 <> Неопределено Тогда
		ДобавитьЯчейкуВТаблицу(ЭлементСтрокаТаблицы, ЗначениеКолонки1, Истина);
	КонецЕсли;
	Если ЗначениеКолонки2 <> Неопределено Тогда
		ДобавитьЯчейкуВТаблицу(ЭлементСтрокаТаблицы, ЗначениеКолонки2);
	КонецЕсли;
	Если ЗначениеКолонки3 <> Неопределено Тогда
		ДобавитьЯчейкуВТаблицу(ЭлементСтрокаТаблицы, ЗначениеКолонки3);
	КонецЕсли;
	
	ЭлементРодитель.ДобавитьДочерний(ЭлементСтрокаТаблицы);

КонецПроцедуры

Процедура ДобавитьЯчейкуВТаблицу(ЭлементСтрока, ЗначениеЯчейки, ВыделятьЖирным = Ложь)
	
	ЭлементЯчейка = ЭлементСтрока.ДокументВладелец.СоздатьЭлемент("td");
	ЭлементШрифт = ЭлементШрифт(ЭлементСтрока.ДокументВладелец, "2", "Tahoma"); 
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ЭлементШрифт.ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ТекстовоеСодержимое = ЗначениеЯчейки;
		ЭлементШрифт.ДобавитьДочерний(ЭлементЖирный);
	Иначе 
		ЭлементШрифт.ТекстовоеСодержимое = ЗначениеЯчейки;
	КонецЕсли;
	
	ЭлементЯчейка.ДобавитьДочерний(ЭлементШрифт);
	ЭлементСтрока.ДобавитьДочерний(ЭлементЯчейка);
	
КонецПроцедуры

Функция ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателей) Экспорт

	СтрокаКВозврату = "";
	
	Для Каждого Получатель Из ТаблицаПолучателей Цикл
		
		СтрокаКВозврату = СтрокаКВозврату + "'" 
		         + ?(ПустаяСтрока(Получатель.Представление), Получатель.Адрес, Получатель.Представление + "<" + Получатель.Адрес + ">") 
		         	+ "'" 
		         	+ ", ";
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаКВозврату) Тогда
		
		СтрокаКВозврату = Лев(СтрокаКВозврату, СтрДлина(СтрокаКВозврату) - 2);
		
	КонецЕсли;
	
	Возврат СтрокаКВозврату;

КонецФункции

Функция ЭлементШрифт(ДокументHTML, Размер, ИмяШрифта)
	
	ЭлементШрифт = ДокументHTML.СоздатьЭлемент("Font");
	УстановитьАтрибутЭлементаHTML(ЭлементШрифт, "size", Размер);
	УстановитьАтрибутЭлементаHTML(ЭлементШрифт, "face", ИмяШрифта);
	
	Возврат ЭлементШрифт;
	
КонецФункции

#КонецОбласти

#КонецОбласти
