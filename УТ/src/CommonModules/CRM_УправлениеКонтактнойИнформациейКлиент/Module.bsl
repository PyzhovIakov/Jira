////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - ФормаКлиентскогоПриложения - форма владельца контактной информации.
//     Элемент              - ПолеФормы        - элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - устанавливаемый флаг стандартной обработки события формы.
//     ПараметрыОткрытия    - Структура        - параметры открытия формы ввода контактной информации.
//
Процедура НачатьВыбор(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь, ПараметрыОткрытия = Неопределено) Экспорт
	ПриНачалеВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия, Истина);
КонецПроцедуры

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - ФормаКлиентскогоПриложения - форма владельца контактной информации.
//     Элемент           - ПолеФормы        - элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - флаг того, что элемент является частью таблицы формы.
//
Процедура НачатьИзменение(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт
	
	ПриИзмененииКонтактнойИнформации(Форма, Элемент, ЭтоТабличнаяЧасть, Истина, Истина);
	
КонецПроцедуры

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - ФормаКлиентскогоПриложения - форма владельца контактной информации.
//     Элемент           - ПолеФормы        - элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - флаг того, что элемент является частью таблицы формы.
//
Процедура ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт
	
	ПриИзмененииКонтактнойИнформации(Форма, Элемент, ЭтоТабличнаяЧасть, Истина, Ложь);
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля формы контактной информации.
//  Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	 - Форма владельца контактной информации.
//  Элемент				 - ПолеФормы					 - Элемент формы, содержащий представление контактной информации.
//  Модифицированность	 - Булево						 - Устанавливаемый флаг модифицированности формы.
//  СтандартнаяОбработка - Булево						 - Устанавливаемый флаг стандартной обработки события формы.
//  ПараметрыОткрытия	 - Структура, Неопределено		 - Параметры открытия.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь, ПараметрыОткрытия = Неопределено) Экспорт
	ПриНачалеВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия, Ложь);
КонецПроцедуры

// Обработчик команды, связанной с контактной информацией (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - ФормаКлиентскогоПриложения - форма владельца контактной информации.
//     ИмяКоманды - Строка           - имя автоматически сгенерированной команды действия.
//     Ссылка  - СправочикСсылка, ДокументСсылка - Ссылка на объект, из которого вызвана команда.
//
Процедура НачатьВыполнениеКоманды(Знач Форма, Знач ИмяКоманды, Знач Ссылка = Неопределено) Экспорт
	ПриВыполненииКоманды(Форма, ИмяКоманды, Ссылка, Истина);
КонецПроцедуры

// Обработчик команды, связанной с контактной информацией (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - ФормаКлиентскогоПриложения - форма владельца контактной информации.
//     ИмяКоманды - Строка           - имя автоматически сгенерированной команды действия.
//     Ссылка  - СправочикСсылка, ДокументСсылка - Ссылка на объект, из которого вызвана команда.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ИмяКоманды, Знач Ссылка = Неопределено) Экспорт
	ПриВыполненииКоманды(Форма, ИмяКоманды, Ссылка, Ложь);
КонецПроцедуры

// Обработчик выбранной команды, связанной с контактной информации.
//
// Параметры:
//	ВыбранныйЭлемент	- ЭлементСпискаЗначений - Выбранная команда.
//	Параметры			- Структура				- Дополнительные параметры.
//
Процедура ПослеВыбораИзМенюДействий(ВыбранныйЭлемент, Параметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОтправитьSMS" Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.Форма.Объект.Ссылка) Тогда
			ТекстСообщения = НСтр("ru='Необходимо записать элемент';en='It is necessary to write down an element'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли ПустаяСтрока(Параметры.ТекстРедактирования) Тогда
			ТекстСообщения = НСтр("ru='Не указан номер телефона'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B(Параметры.Ссылка) Тогда
			Структура = Новый Структура();
			Структура.Вставить("Ссылка", Параметры.Форма.Объект.Ссылка);
			Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Параметры.ТекстРедактирования));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;	
	ИначеЕсли ВыбранныйЭлемент.Значение = "Позвонить" Тогда
		Если ПустаяСтрока(Параметры.ТекстРедактирования) Тогда
			ТекстСообщения = НСтр("ru='Не указан номер телефона'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе	
			ПозвонитьПоТелефону(Параметры.Форма);
		КонецЕсли;
	// +CRM
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПрозвонитьМессенджеры" Тогда
		CRM_ПрозвонитьМессенджеры(Параметры);
	ИначеЕсли ВыбранныйЭлемент.Значение = "НаписатьВЧат" Тогда
		CRM_НаписатьВЧат(Параметры);
	// -CRM
	ИначеЕсли ВыбранныйЭлемент.Значение = "Комментарий" Тогда
		Результат = Новый Структура;
		Результат.Вставить("ИмяРеквизита", Параметры.ИмяРеквизита);
		Результат.Вставить("Перечитать", Истина);
		Результат.Вставить("ИмяЭлементаДляРазмещения", Параметры.ИмяЭлементаДляРазмещения);
		Результат.Вставить("ТипКонтактнойИнформации", Параметры.ТипКонтактнойИнформации);
		ВвестиКомментарий(Параметры.Форма, Параметры.ИмяРеквизита, Параметры.НайденнаяСтрока, Результат, Параметры.АсинхронныйВызов);
	ИначеЕсли ВыбранныйЭлемент.Значение = "История" Тогда
		Параметры.Вставить("Вид", Параметры.ВидКонтактнойИнформации);
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуИсторииИзменений(Параметры.Форма, Параметры);
	ИначеЕсли ВыбранныйЭлемент.Значение = "КартаЯндекс" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Параметры.ТекстРедактирования, "Яндекс.Карты");
	ИначеЕсли ВыбранныйЭлемент.Значение = "КартаGoogle" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Параметры.ТекстРедактирования, "GoogleMaps");
	ИначеЕсли СтрНачинаетсяС(ВыбранныйЭлемент.Значение, "МенюПодменюАдрес") Тогда
		СкопироватьАдрес(Параметры.Форма, ВыбранныйЭлемент.Значение);
		
	ИначеЕсли ВыбранныйЭлемент.Значение = "НаписатьПисьмо" Тогда
		АдресЭлектроннойПочты = Параметры.ТекстРедактирования;
		Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
			Возврат;
		КонецЕсли;
		СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
		Если НЕ (СтрРезультат.КодОшибки = 0) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение, , Параметры.ИмяРеквизита);
			Возврат;
		КонецЕсли;
		Если Параметры.Ссылка = Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры.Форма, "Объект")
				И Параметры.Форма.Объект.Свойство("Ссылка") Тогда
				Параметры.Ссылка = Параметры.Форма.Объект.Ссылка;	
			КонецЕсли;	
		КонецЕсли;	
		Если Параметры.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СписокАдресов = Новый СписокЗначений;
		СписокАдресов.Добавить(Параметры.Ссылка, СтрРезультат.АдресЭП);
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли ВыбранныйЭлемент.Значение = "АдресСайта" Тогда
		АдресСайтаКомпании = Параметры.ТекстРедактирования;
		Если АдресСайтаКомпании = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление() Тогда
			АдресСайтаКомпании = "";
		КонецЕсли;	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, НСтр("ru='Введите адрес сайта'"));
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПозвонитьSkype" Тогда
		#Если НЕ ВебКлиент Тогда
			Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
				ПоказатьПредупреждение(Неопределено,
					 НСтр("ru='Для совершения звонка по Skype требуется установить программу.';
					|en='To make a Skype call,
					| install the application.'"));
				Возврат;
			КонецЕсли;
		#КонецЕсли
		СтрокаЗапуска = "skype:" + Параметры.ТекстРедактирования + "?call";
		Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
		ТекстСообщения = НСтр("ru='Для запуска Skype необходимо установить расширение работы с файлами.';
			|en='Run Skype,
			| install the file operation extension.'");
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
	ИначеЕсли ВыбранныйЭлемент.Значение = "НачатьЧатSkype" Тогда
		#Если НЕ ВебКлиент Тогда
			Если ПустаяСтрока(ПрограммаТелефонииУстановлена("skype")) Тогда
				ПоказатьПредупреждение(Неопределено,
					 НСтр("ru='Для совершения звонка по Skype требуется установить программу.';
					|en='To make a Skype call,
					| install the application.'"));
				Возврат;
			КонецЕсли;
		#КонецЕсли
		СтрокаЗапуска = "skype:" + Параметры.ТекстРедактирования + "?chat";
		Оповещение = Новый ОписаниеОповещения("ЗапускSkype", ЭтотОбъект, СтрокаЗапуска);
		ТекстСообщения = НСтр("ru='Для запуска Skype необходимо установить расширение работы с файлами.';
			|en='Run Skype,
			| install the file operation extension.'");
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
	ИначеЕсли ВыбранныйЭлемент.Значение = "ОсновнойДляСвязи" Тогда
		СтрокиКИ = Параметры.Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип",
			 Параметры.ТипКонтактнойИнформации));
		Для Каждого СтрокаТабличнойЧасти Из СтрокиКИ Цикл
			Если СтрокаТабличнойЧасти.ИмяРеквизита = Параметры.ИмяРеквизита Тогда
				Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт	= Новый Шрифт(Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт,
					 , ,
					 Истина);
				Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].ШрифтЗаголовка	= Новый Шрифт(Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].ШрифтЗаголовка,
					 , ,
					 Истина);
				СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи = Истина;
			Иначе
				Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт	= Новый Шрифт(Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт,
					 , ,
					 Ложь);
				Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].ШрифтЗаголовка	= Новый Шрифт(Параметры.Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].ШрифтЗаголовка,
					 , ,
					 Ложь);
				СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи = Ложь;
			КонецЕсли;
		КонецЦикла;
		Параметры.Форма.Модифицированность	= Истина;
	ИначеЕсли ВыбранныйЭлемент.Значение = "Основной" Тогда
		CRM_ОбщегоНазначенияСервер.ИзменитьПризнакВидаКИОсновной(Параметры.ВидКонтактнойИнформации, Истина);
	ИначеЕсли ВыбранныйЭлемент.Значение = "НеОсновной" Тогда
		CRM_ОбщегоНазначенияСервер.ИзменитьПризнакВидаКИОсновной(Параметры.ВидКонтактнойИнформации, Ложь);
	КонецЕсли;
КонецПроцедуры

// Обработчик ввода адреса сайта.
//
// Параметры:
//	АдресСайтаКомпании	- Строка 	- Адрес сайта.
//	Параметры			- Структура	- Дополнительные параметры.
//
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, Параметры) Экспорт
	Если АдресСайтаКомпании = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(АдресСайтаКомпании) Тогда
		Параметры.Форма[Параметры.ИмяРеквизита] = CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление();
	Иначе	
		Параметры.Форма[Параметры.ИмяРеквизита] = АдресСайтаКомпании;
	КонецЕсли;
	ТекущийЭлементКонтактнойИнформации = Параметры.Форма.Элементы[Параметры.ИмяРеквизита];
	ПриИзменении(Параметры.Форма, ТекущийЭлементКонтактнойИнформации);
	Параметры.Форма.Модифицированность	= Истина;
КонецПроцедуры 

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗапускаПриложения(ПриложениеЗапущено, Параметры) Экспорт
	
	Если Не ПриложениеЗапущено Тогда 
		СтрокаСПредупреждением = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для совершения звонка установите приложение телефонии, например'"),
			 " ", Новый ФорматированнаяСтрока("Skype",,,, "http://www.skype.com"), ".");
		ПоказатьПредупреждение(Неопределено, СтрокаСПредупреждением);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыполнитьКомандуКонтактнойИнформации(ВыбранныйЭлемент.Значение, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//   ИмяОбработчика - Строка - полный путь к функции, которую необходимо выполнить.
//                             Например, "_ДемоСтандартныеПодсистемыКлиент.ОткрытьФормуДокументаВстреча".
//   Параметры - Структура:
//     * КонтактнаяИнформация    - см. ПараметрКонтактнаяИнформацияДляВыполненияКоманд
//     * ДополнительныеПараметры - см. ДополнительныеПараметрыДляВыполненияКоманд
//
Процедура ВыполнитьКомандуКонтактнойИнформации(ИмяОбработчика, Параметры)
	
	НачалоИмениПроцедуры = СтрНайти(ИмяОбработчика, ".", НаправлениеПоиска.СКонца);
	
	Если НачалоИмениПроцедуры = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПроцедуры = СокрЛП(Сред(ИмяОбработчика, НачалоИмениПроцедуры + 1));
	ИмяМодуля = СокрЛП(Лев(ИмяОбработчика, НачалоИмениПроцедуры - 1));
	
	ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(ИмяПроцедуры, ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля),
		Параметры.ДополнительныеПараметры), Параметры.КонтактнаяИнформация);	
	
КонецПроцедуры

Процедура ЗапускSkype(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбновитьКонтекстноеМеню")
			И ДополнительныеПараметры.ОбновитьКонтекстноеМеню Тогда
				Результат = Новый Структура();
				Результат.Вставить("ОбновитьКонтекстноеМеню",  Истина);
				Результат.Вставить("ИмяЭлементаДляРазмещения", ДополнительныеПараметры.ИмяЭлементаРазмещения);
				ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат,
					ДополнительныеПараметры.АсинхронныйВызов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	ДанныеНаФорме    = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	Комментарий        = РезультатЗакрытия.Комментарий;
	
	Если ДанныеНаФорме.Свойство("ХранитьИсториюИзменений") И ДанныеНаФорме.ХранитьИсториюИзменений Тогда
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов =
			ДанныеЗаполнения.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Отбор = Новый Структура("Вид", ДанныеНаФорме.Вид);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Отбор = Новый Структура("Вид", ДанныеНаФорме.Вид);
		НайденныеСтроки = РезультатЗакрытия.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			СтрокаСДействующимАдресом = Неопределено;
			МинимальнаяДата = Неопределено;
			
			Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
				
				НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
				НоваяКонтактнаяИнформация.ИмяЭлементаДляРазмещения = ДополнительныеПараметры.ИмяЭлементаРазмещения;
				
				Если СтрокаСДействующимАдресом = Неопределено
					ИЛИ СтрокаКонтактнойИнформации.ДействуетС > СтрокаСДействующимАдресом.ДействуетС Тогда
						СтрокаСДействующимАдресом = СтрокаКонтактнойИнформации;
				КонецЕсли;
				Если МинимальнаяДата = Неопределено
					ИЛИ СтрокаКонтактнойИнформации.ДействуетС < МинимальнаяДата Тогда
						МинимальнаяДата = СтрокаКонтактнойИнформации.ДействуетС;
				КонецЕсли;
				
			КонецЦикла;
			
			// Исправление некорректных адресов, без первоначальной даты заполнения
			Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
				Отбор = Новый Структура("ДействуетС", МинимальнаяДата);
				СтрокиСМинимальнойДатой = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
				Если СтрокиСМинимальнойДатой.Количество() > 0 Тогда
					СтрокиСМинимальнойДатой[0].ДействуетС = Дата(1, 1, 1);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСДействующимАдресом <> Неопределено Тогда
				ТекстПредставления = СтрокаСДействующимАдресом.Представление;
				Комментарий        = СтрокаСДействующимАдресом.Комментарий;
			КонецЕсли;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, НайденныеСтроки[0], , "ДействуетС");
			НоваяКонтактнаяИнформация.ИмяЭлементаДляРазмещения = ДополнительныеПараметры.ИмяЭлементаРазмещения;
			ДанныеНаФорме.ДействуетС = Дата(1, 1, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "Значение"]      = РезультатЗакрытия.Значение;
	Иначе
		ИмяРеквизитаКомментарий = "Комментарий" + Элемент.Имя;
		Если Форма.Элементы.Найти(ИмяРеквизитаКомментарий) <> Неопределено Тогда
			Форма[ИмяРеквизитаКомментарий] = Комментарий;
		Иначе
			ЭлементФормыПредставление = Форма.Элементы.Найти(Элемент.Имя); // ДекорацияФормы
			Если РезультатЗакрытия.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")
				И РезультатЗакрытия.ВВидеГиперссылки Тогда
				ПараметрыКИ = Форма.ПараметрыКонтактнойИнформации[ДополнительныеПараметры.ИмяЭлементаРазмещения];
				ХранитьИсториюИзменений = ?(ДанныеНаФорме.Свойство("ХранитьИсториюИзменений"), ДанныеНаФорме.ХранитьИсториюИзменений, Ложь);
				КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(ПараметрыКИ,
					РезультатЗакрытия.Тип, РезультатЗакрытия.Вид, ХранитьИсториюИзменений);
				ЭлементФормыПредставление.РасширеннаяПодсказка.Заголовок = УправлениеКонтактнойИнформациейКлиентСервер.РасширеннаяПодсказкаАдреса(
					КомандыДляВывода, ДанныеНаФорме.Представление, Комментарий);
			Иначе
				ЭлементФормыПредставление.РасширеннаяПодсказка.Заголовок = Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатЗакрытия.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			ТекстПредставления = УправлениеКонтактнойИнформациейКлиентСервер.АдресСайта(ТекстПредставления, РезультатЗакрытия.Адрес, Форма.ТолькоПросмотр);
		КонецЕсли;
		
		ДанныеНаФорме.Представление = ТекстПредставления;
		ДанныеНаФорме.Значение      = РезультатЗакрытия.Значение;
		ДанныеНаФорме.Комментарий   = Комментарий;
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("ВВидеГиперссылки")
		И РезультатЗакрытия.ВВидеГиперссылки
		И НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
			ДанныеЗаполнения[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Иначе
		ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	КонецЕсли;
	
	Если РезультатЗакрытия.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат.Вставить("ОбновитьКонтекстноеМеню", Истина);
	КонецЕсли;
	
	// +СофтФон
	Если РезультатЗакрытия.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") И
		 ДанныеНаФорме.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") Тогда
		ДанныеНаФорме.сфпВремяЗадержкиНабораДобавочногоНомера = РезультатЗакрытия.сфпВремяЗадержкиНабораДобавочногоНомера;
	КонецЕсли;
	Если РезультатЗакрытия.Свойство("сфпПрефиксНабора") И
		 ДанныеНаФорме.Свойство("сфпПрефиксНабора") Тогда
		ДанныеНаФорме.сфпПрефиксНабора = РезультатЗакрытия.сфпПрефиксНабора;
	КонецЕсли;
	// -СофтФон
	
	Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
	
	// +CRM
	Если РезультатЗакрытия.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		Параметры = Новый Структура;
		
		Параметры.Вставить("Форма", Форма);
		Параметры.Вставить("ТекстРедактирования", ТекстПредставления);
		Параметры.Вставить("ИмяРеквизита", ДанныеНаФорме.ИмяРеквизита);
		Параметры.Вставить("ИмяЭлементаДляРазмещения", ДанныеНаФорме.ИмяЭлементаДляРазмещения);
		Параметры.Вставить("НайденнаяСтрока", Новый Структура("Значение, Представление, Родитель, Колонка",
											РезультатЗакрытия.Значение, РезультатЗакрытия.Представление, ДанныеНаФорме.Родитель, ДанныеНаФорме.Колонка));
		Параметры.Вставить("Ссылка", Форма.Объект.Ссылка);
		
		CRM_ПрозвонитьМессенджеры(Параметры);
		
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

Процедура КонтактнаяИнформацияДобавитьПолеВводаЗавершение(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		// Отказ от выбора
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент.Значение.Ссылка) Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяЭлементаДляРазмещения = ДополнительныеПараметры.ИмяЭлементаДляРазмещения;
		ПараметрыКИ = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения];
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ВладелецКонтактнойИнформации", ПараметрыКИ.Владелец);
		ПараметрыЗакрытияФормы = Новый Структура;
		ПараметрыЗакрытияФормы.Вставить("Форма",  ДополнительныеПараметры.Форма);
		ПараметрыЗакрытияФормы.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		ПараметрыЗакрытияФормы.Вставить("АсинхронныйВызов", ДополнительныеПараметры.АсинхронныйВызов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыСпискаВидыКонтактнойИнформации", 
			УправлениеКонтактнойИнформациейКлиент, ПараметрыЗакрытияФормы);
		ОткрытьФорму("Справочник.ВидыКонтактнойИнформации.Форма.ФормаСписка",ПараметрыОткрытияФормы,
			ДополнительныеПараметры.Форма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
	Результат.Вставить("ИмяЭлементаДляРазмещения", ДополнительныеПараметры.ИмяЭлементаДляРазмещения);
	Результат.Вставить("ИмяКоманды", ДополнительныеПараметры.ИмяКоманды);
	Если ВыбранныйЭлемент.Значение.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Результат.Вставить("ОбновитьКонтекстноеМеню", Истина);
	КонецЕсли;
	
	// +CRM Удаление выбранного элемента из списка происходит в процедуре "ПриВыполненииКоманды()"
	//Если Не ВыбранныйЭлемент.Значение.РазрешитьВводНесколькихЗначений Тогда
	//	ДополнительныеПараметры.Форма.ПараметрыКонтактнойИнформации[Результат.ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов.Удалить(ВыбранныйЭлемент);
	//КонецЕсли;
	// -CRM
	
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
	
	// +CRM
	Если ДополнительныеПараметры.ЭтоПоследнийЭлемент Тогда
		ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяКоманды].Видимость = Ложь;
	КонецЕсли;
	// -CRM
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Обработчики событий

Процедура ПриВыполненииКоманды(Знач Форма, Знач ИмяКоманды, Знач Ссылка = Неопределено, АсинхронныйВызов)
	
	Если СтрНачинаетсяС(ИмяКоманды, "КонтактнаяИнформацияДобавитьПолеВвода") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ИмяЭлементаДляРазмещения = Сред(ИмяКоманды, СтрДлина("КонтактнаяИнформацияДобавитьПолеВвода") + 1);
		ДополнительныеПараметры.Вставить("АсинхронныйВызов", АсинхронныйВызов);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
		
		// +CRM
		СписокДобавляемыхЭлементовКонтактнойИнформации = Новый СписокЗначений;
		Для Каждого ЭлементСписка Из Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов Цикл
			СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(ЭлементСписка.Значение,
				 ЭлементСписка.Представление, ЭлементСписка.Пометка,
				 ЭлементСписка.Картинка);
		КонецЦикла;
		Если СтрНайти(Форма.ИмяФормы, ".Партнеры") > 0 Тогда
			// Удаляем лишние виды КИ
			МассивВладельцевКИ = Новый Массив;
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры"));
			Если Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания"));
			ИначеЕсли Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо"));
			КонецЕсли;
			// Удаляем 
			МассивУдаляемыхЭлементов = Новый Массив;
			Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
				Если ЭлементСписка.Значение.Свойство("РодительКИ")
					И МассивВладельцевКИ.Найти(ЭлементСписка.Значение.РодительКИ) = Неопределено Тогда
					МассивУдаляемыхЭлементов.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхЭлементов Цикл
				СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(УдаляемыйЭлемент);
			КонецЦикла;
		КонецЕсли;
		Попытка
			РедактироватьДР = Форма.РедактироватьДР;
		Исключение
			РедактироватьДР = Истина;
		КонецПопытки;	
		
		Если СтрНайти(Форма.ИмяФормы, ".Пользователи") > 0 Тогда
			МассивВладельцевКИ = Новый Массив;
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПользователи"));
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
					Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
						Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид Тогда
							СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
					Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
						 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
						СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрНайти(Форма.ИмяФормы, ".CRM_ПотенциальныеКлиенты") > 0 Тогда
			МассивВладельцевКИ = Новый Массив;
			МассивВладельцевКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты"));
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если МассивВладельцевКИ.Найти(ЭлементОписания.Родитель) = Неопределено Тогда
					Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
						Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид Тогда
							СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если ЭлементОписания.Выводить Тогда
					Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
						Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
							 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
							СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ РедактироватьДР Тогда
			// Удаляем из списка выбора скрытые элементы КИ.
			Для Каждого ЭлементОписания Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если ЭлементОписания.Выводить Тогда
					Для каждого ЭлементСписка Из СписокДобавляемыхЭлементовКонтактнойИнформации Цикл
						Если ЭлементСписка.Значение.Ссылка = ЭлементОписания.Вид
							 И Не ЭлементСписка.Значение.РазрешитьВводНесколькихЗначений Тогда
							СписокДобавляемыхЭлементовКонтактнойИнформации.Удалить(ЭлементСписка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		ДополнительныеПараметры.Вставить("ЭтоПоследнийЭлемент",
			СписокДобавляемыхЭлементовКонтактнойИнформации.Количество() = 1);
		// -CRM
		Оповещение = Новый ОписаниеОповещения("КонтактнаяИнформацияДобавитьПолеВводаЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		Форма.ПоказатьВыборИзМеню(Оповещение,
			// +CRM
			//Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов,
			СписокДобавляемыхЭлементовКонтактнойИнформации,
			// -CRM
			Форма.Элементы[ИмяКоманды]);
			
		Возврат;
	КонецЕсли;	
	
	Если СтрНачинаетсяС(ИмяКоманды, "КонтекстноеМенюВверхКонтактнаяИнформация") Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМенюВверх", "");
		ПереместитьЭлементКИ(Форма, ИмяРеквизита, Истина);
	ИначеЕсли СтрНачинаетсяС(ИмяКоманды, "КонтекстноеМенюВнизКонтактнаяИнформация") Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМенюВниз", "");
		ПереместитьЭлементКИ(Форма, ИмяРеквизита, Ложь);
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяКоманды, "КонтекстноеМенюКонтактнаяИнформация") Тогда
		ИмяРеквизита = СтрЗаменить(ИмяКоманды, "КонтекстноеМеню", "");
		Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(
			Форма).НайтиСтроки(Результат);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		Результат = Новый Структура;
		Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
		Результат.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
		Результат.Вставить("ТипКонтактнойИнформации", НайденнаяСтрока.Тип);
		ВвестиКомментарий(Форма, ИмяРеквизита, НайденнаяСтрока, Результат, Ложь);
	КонецЕсли;
	
	Если НЕ СтрНачинаетсяС(ИмяКоманды, "КомандаКонтактнаяИнформацияПоле") Тогда
		Возврат;
	КонецЕсли;
	ИмяРеквизита = УдалитьПрефиксСтроки(ИмяКоманды, "Команда");
	СтруктураРеквизита = Новый Структура("ИмяРеквизита", ИмяРеквизита);

	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураРеквизита);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НайденнаяСтрока				= НайденныеСтроки[0];
	ТипКонтактнойИнформации		= НайденнаяСтрока.Тип;
	ВидКонтактнойИнформации		= НайденнаяСтрока.Вид;
	ИмяЭлементаДляРазмещения	= НайденнаяСтрока.ИмяЭлементаДляРазмещения;
	CRM_ОсновнойДляСвязи		= НайденнаяСтрока.CRM_ОсновнойДляСвязи;
	ЗначенияРеквизитовВида		= CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(ВидКонтактнойИнформации,
		 "ОтображатьВсегда, ПометкаУдаления,
		| ХранитьИсториюИзменений");
	ОтображатьВсегда				= ЗначенияРеквизитовВида.ОтображатьВсегда;
	ПометкаУдаления				= ЗначенияРеквизитовВида.ПометкаУдаления;
	ХранитьИсториюИзменений		= ЗначенияРеквизитовВида.ХранитьИсториюИзменений;
	СписокКоманд 				= Новый СписокЗначений;

	Если ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		СписокКоманд.Добавить("КартаЯндекс", НСтр("ru='Адрес на Яндекс.Картах'"), , БиблиотекаКартинок.ЯндексКарты);
		СписокКоманд.Добавить("КартаGoogle", НСтр("ru='Адрес на Google Maps'"), , БиблиотекаКартинок.GoogleMaps);
		Если ХранитьИсториюИзменений И НЕ ПометкаУдаления Тогда
			СписокКоманд.Добавить("История", НСтр("ru='История изменения'"), , БиблиотекаКартинок.ИсторияИзменений);
		КонецЕсли;
		
		Если Не ПометкаУдаления Тогда
			// Добавить команды для заполнения адреса
			АдресаНайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки( 
			Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"), Ложь));
			
			КоличествоКомандВПодменю = 0;
			СписокАдресовВПодменю = Новый Массив();
			СписокАдресовВПодменю.Добавить(ВРег(НайденнаяСтрока.Представление));
			Для Каждого Адрес Из АдресаНайденныеСтроки Цикл
				
				Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
					Прервать;
				КонецЕсли;
				
				Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = НайденнаяСтрока.ИмяРеквизита 
					Или НЕ ЗначениеЗаполнено(Адрес.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеАдреса = ?(НайденнаяСтрока.МеждународныйФорматАдреса,
				СтроковыеФункцииКлиент.СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);
				
				ИмяКомандыСписка = "МенюПодменюАдрес" + НайденнаяСтрока.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
				Команда = СписокАдресовВПодменю.Найти(ВРег(ПредставлениеАдреса)); // Поиск по текущему представлению.
				
				Если Команда <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СписокАдресовВПодменю.Добавить(ВРег(ПредставлениеАдреса));
				
				КоличествоКомандВПодменю = КоличествоКомандВПодменю + 1;
				СписокКоманд.Добавить(ИмяКомандыСписка, НСтр("ru = 'Заполнить: '; en = 'Fill in: '") + ПредставлениеАдреса);
				
			КонецЦикла;
			
			КомандыДляВывода = УправлениеКонтактнойИнформациейКлиентСервер.КомандыДляВыводаНаФорму(
				Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения],
				ТипКонтактнойИнформации, НайденнаяСтрока.Вид, НайденнаяСтрока.ХранитьИсториюИзменений);
			Если КомандыДляВывода.Свойство("ВвестиКомментарийКАдресу") Тогда
				СписокКоманд.Добавить("Комментарий", НСтр("ru='Ввести комментарий'"), , БиблиотекаКартинок.Комментарий);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		СписокКоманд.Добавить("НаписатьПисьмо", НСтр("ru='Написать письмо'"), ,
			 БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		СписокКоманд.Добавить("Позвонить", НСтр("ru='Позвонить по телефону'"), , БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
		Если Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения].МожноОтправлятьSMS Тогда
			СписокКоманд.Добавить("ОтправитьSMS", НСтр("ru='Отправить SMS'"), , БиблиотекаКартинок.SMS4B_ИсходящееСообщение);
		КонецЕсли;
		// +CRM
		Если CRM_ОбщегоНазначенияСервер.ФункциональнаяОпция("CRM_ИспользоватьИнтеграциюСМессенджерами")
			И CRM_ДляОбъектаДоступенПрозвонМессенджеров(Форма.Объект.Ссылка) Тогда
			СписокКоманд.Добавить("ПрозвонитьМессенджеры", НСтр("ru = 'Найти в мессенджерах'"), ,
				 БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
			СписокКоманд.Добавить("НаписатьВЧат", НСтр("ru = 'Написать в чат'"), , БиблиотекаКартинок.CRM_СообщениеМессенджера);
		КонецЕсли;
		// -CRM
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		СписокКоманд.Добавить("Позвонить", НСтр("ru='Позвонить по телефону'"), , БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Skype") Тогда
		СписокКоманд.Добавить("ПозвонитьSkype", НСтр("ru='Позвонить по skype'"), , БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
		СписокКоманд.Добавить("НачатьЧатSkype", НСтр("ru='Начать чат по skype'"), , БиблиотекаКартинок.Skype);
	ИначеЕсли ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		СписокКоманд.Добавить("АдресСайта", НСтр("ru='Изменить адрес'"), , БиблиотекаКартинок.CRM_Изменить);
	КонецЕсли;
	
	Если НЕ CRM_ОсновнойДляСвязи Тогда
		СписокКоманд.Добавить("ОсновнойДляСвязи", НСтр("ru='Сделать основным'"), ,
			 БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная);
	КонецЕсли;
	Если CRM_ОбщегоНазначенияСервер.ЭтоПолноправныйПользователь() Тогда
		Если ОтображатьВсегда Тогда
			СписокКоманд.Добавить("НеОсновной", НСтр("ru='Не выводить'"));
		Иначе	
			СписокКоманд.Добавить("Основной", НСтр("ru='Выводить всегда'"));
		КонецЕсли;
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("Форма",                    Форма);
	Параметры.Вставить("Ссылка",                   Ссылка);
	Параметры.Вставить("ИмяРеквизита",             ИмяРеквизита);
	Параметры.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
	Параметры.Вставить("ТипКонтактнойИнформации",  ТипКонтактнойИнформации);
	Параметры.Вставить("ВидКонтактнойИнформации",  ВидКонтактнойИнформации);
	Параметры.Вставить("НайденнаяСтрока",          НайденнаяСтрока);
	Параметры.Вставить("АсинхронныйВызов",         Ложь);
	Если Форма.Элементы[ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
		Параметры.Вставить("ТекстРедактирования",  Форма.Элементы[ИмяРеквизита].ТекстРедактирования);
	Иначе
		Параметры.Вставить("ТекстРедактирования",  Форма[ИмяРеквизита]);
	КонецЕсли;
	
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюДействий", ЭтотОбъект, Параметры);
	Форма.ПоказатьВыборИзМеню(ОповещениеМеню, СписокКоманд, Форма.Элементы[ИмяКоманды]);
	
КонецПроцедуры

Процедура ПриНачалеВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия, АсинхронныйВызов)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	ОбновитьКонтекстноеМеню = Ложь;
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
			ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
			ПриИзмененииКонтактнойИнформации(Форма, Элемент, ЭтоТабличнаяЧасть, Ложь, АсинхронныйВызов);
			ОбновитьКонтекстноеМеню  = Истина;
			Форма.Модифицированность = Истина;
		КонецЕсли;
		ТекстРедактирования = Элемент.ТекстРедактирования;
	Иначе
		Если ДанныеСтроки <> Неопределено И ЗначениеЗаполнено(ДанныеСтроки.Значение) Тогда
			ТекстРедактирования = Форма[Элемент.Имя];
		Иначе
			ТекстРедактирования = "";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ДанныеСтроки.ИмяЭлементаДляРазмещения];
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытияФормы.Вставить("Значение",                ДанныеСтроки.Значение);
	ПараметрыОткрытияФормы.Вставить("Представление",           ТекстРедактирования);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",          Форма.ТолькоПросмотр Или Элемент.ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("ТипПомещения",            ПараметрыКонтактнойИнформации.ПараметрыАдреса.ТипПомещения);
	ПараметрыОткрытияФормы.Вставить("Страна",                  ПараметрыКонтактнойИнформации.ПараметрыАдреса.Страна);
	ПараметрыОткрытияФормы.Вставить("Индекс",                  ПараметрыКонтактнойИнформации.ПараметрыАдреса.Индекс);
	ПараметрыОткрытияФормы.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", 
		УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма));
	// +CRM
	ПараметрыОткрытияФормы.Вставить("БылиВнесеныИзменения",    Ложь);
	Если CRM_ОбщегоНазначенияСервер.ПоТипуКонтактнойИнформацииПолучитьНомер(ДанныеСтроки.Тип) = 2 
		И ДанныеСтроки.Маска = "" Тогда
		// +СофтФон
		врКодСтраны		= Неопределено;
		врКодГорода		= Неопределено;
		врНомерТелефона	= Неопределено;
		врПредставление	= Неопределено;
		// -СофтФон
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ДанныеСтроки.Значение) Тогда
			// +СофтФон
			ЗначенияПолей = CRM_ОбщегоНазначенияСервер.JSONВКонтактнуюИнформациюПоПолям(ДанныеСтроки.Значение, ДанныеСтроки.Тип);
			Если ЗначениеЗаполнено(ЗначенияПолей.value) И НЕ (ПараметрыОткрытияФормы.Представление = ЗначенияПолей.value) Тогда
				ПараметрыОткрытияФормы.Представление			= ЗначенияПолей.value;
				ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
			КонецЕсли;	
			врПредставление	= "";
			// -СофтФон
		Иначе
			ЗначенияПолей = Новый Структура;
		КонецЕсли;
		// +СофтФон
		Для Каждого СтрокаЗначения Из ЗначенияПолей Цикл
			Если СтрокаЗначения.Ключ = "value" Тогда
				Если ЗначениеЗаполнено(СтрокаЗначения.Значение)
					 И НЕ (ПараметрыОткрытияФормы.Представление = СтрокаЗначения.Значение) Тогда
					ПараметрыОткрытияФормы.Представление			= СтрокаЗначения.Значение;
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				врПредставление	= "";
			ИначеЕсли СтрокаЗначения.Ключ = "countryCode" Тогда
				врКодСтраны = СокрЛП(СтрокаЗначения.Значение);
			ИначеЕсли СтрокаЗначения.Ключ = "areaCode" Тогда
				врКодГорода = СокрЛП(СтрокаЗначения.Значение);
			ИначеЕсли СтрокаЗначения.Ключ = "number" Тогда
				врНомерТелефона = СокрЛП(СтрокаЗначения.Значение);
			КонецЕсли;
		КонецЦикла;
		// +СофтФон
		Если врКодСтраны = Неопределено Тогда
			ЗначенияПолей.Вставить("countryCode", "");
		КонецЕсли;
		Если врКодГорода = Неопределено Тогда
			ЗначенияПолей.Вставить("areaCode", "");
		КонецЕсли;
		Если врНомерТелефона = Неопределено Тогда
			ЗначенияПолей.Вставить("number", "");
		КонецЕсли;
		Если врПредставление = Неопределено Тогда
			ЗначенияПолей.Вставить("value", "");
		КонецЕсли;
		врПредставление = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ПараметрыОткрытияФормы.Представление, Ложь);
		Если ЗначениеЗаполнено(врПредставление) Тогда
			Если СтрДлина(врПредставление) > 5 Тогда
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();
				// В представлении есть номер телефона.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				// Получаем структуру полей по представлению.
				СтруктураНомера =
					сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ПараметрыОткрытияФормы.Представление);
				// Если не заполнены код страны или код города, то заполняем их по умолчанию.
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодСтраны) Тогда
					СтруктураНомера.КодСтраны = ПараметрыСервера.КодСтраны;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
					СтруктураНомера.КодГорода = ПараметрыСервера.КодГорода;
				КонецЕсли;
				// Заполняем значения из структуры.
				Если НЕ (ЗначенияПолей.countryCode = СтруктураНомера.КодСтраны) Тогда
					ЗначенияПолей.Вставить("countryCode", СтруктураНомера.КодСтраны);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.areaCode = СтруктураНомера.КодГорода) Тогда
					ЗначенияПолей.Вставить("areaCode", СтруктураНомера.КодГорода);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.number = СтруктураНомера.НомерТелефона) Тогда
					ЗначенияПолей.Вставить("number", СтруктураНомера.НомерТелефона);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.value = ПараметрыОткрытияФормы.Представление) Тогда
					ЗначенияПолей.Вставить("value", ПараметрыОткрытияФормы.Представление);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.extNumber = СтруктураНомера.Добавочный) Тогда
					ЗначенияПолей.Вставить("extNumber", СтруктураНомера.Добавочный);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
			Иначе
				сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();
				// Заполним код страны и код города по умолчанию.
				ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
				Если НЕ ЗначениеЗаполнено(ЗначенияПолей.countryCode) Тогда
					ЗначенияПолей.Вставить("countryCode", ПараметрыСервера.КодСтраны);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЗначенияПолей.areaCode) 
					И ((СтрДлина(ПараметрыСервера.КодГорода) + СтрДлина(врПредставление)) = 10) Тогда
					ЗначенияПолей.Вставить("areaCode", ПараметрыСервера.КодГорода);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения 	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.number = врПредставление) Тогда
					ЗначенияПолей.Вставить("number", врПредставление);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
				Если НЕ (ЗначенияПолей.value = ПараметрыОткрытияФормы.Представление) Тогда
					ЗначенияПолей.Вставить("value", ПараметрыОткрытияФормы.Представление);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения 	= Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе	
			сфпСофтФонПроКлиент.сфпЗаполнитьПрефиксыИНастройки();
			// Если это новый номер, то заполним код страны и код города по умолчанию.
			ПараметрыСервера = сфпСофтФонПроСервер.сфпПараметрыСервера();
			Если ПустаяСтрока(ЗначенияПолей.countryCode) Тогда
				ЗначенияПолей.Вставить("countryCode", ПараметрыСервера.КодСтраны);
				ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
			КонецЕсли;	
			Если СтрНайти(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.Вид,
				 "ИмяПредопределенныхДанных"),
				 "Мобильный") = 0 Тогда
				Если ПустаяСтрока(ЗначенияПолей.areaCode) Тогда
					ЗначенияПолей.Вставить("areaCode", ПараметрыСервера.КодГорода);
					ПараметрыОткрытияФормы.БылиВнесеныИзменения	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыОткрытияФормы.БылиВнесеныИзменения Тогда
			ПараметрыОткрытияФормы.Вставить("ЗначенияПолей", CRM_ОбщегоНазначенияСервер.СтруктураВСтрокуJSON(ЗначенияПолей));
		КонецЕсли;	
		Форма[Элемент.Имя] = ПараметрыОткрытияФормы.Представление;
		Если ДанныеСтроки.Свойство("сфпВремяЗадержкиНабораДобавочногоНомера") Тогда
			ПараметрыОткрытияФормы.Вставить("сфпВремяЗадержкиНабораДобавочногоНомера",
				 ДанныеСтроки.сфпВремяЗадержкиНабораДобавочногоНомера);
		КонецЕсли;
		Если ДанныеСтроки.Свойство("сфпПрефиксНабора") Тогда
			ПараметрыОткрытияФормы.Вставить("сфпПрефиксНабора", ДанныеСтроки.сфпПрефиксНабора);
		КонецЕсли;
		// -СофтФон
	КонецЕсли;
	
	Если НЕ ПараметрыОткрытияФормы.Свойство("ЗначенияПолей") Тогда
		ПараметрыОткрытияФормы.Вставить("Значение", ДанныеСтроки.Значение);
	КонецЕсли;
	// -CRM
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытияФормы.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОткрытия) И ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		Для каждого ЗначениеИКлюч Из ПараметрыОткрытия Цикл
			ПараметрыОткрытияФормы.Вставить(ЗначениеИКлюч.Ключ, ЗначениеИКлюч.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры = ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры();
	ДополнительныеПараметры.ДанныеЗаполнения = ДанныеЗаполнения;
	ДополнительныеПараметры.ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть;
	ДополнительныеПараметры.ИмяЭлементаРазмещения = ДанныеСтроки.ИмяЭлементаДляРазмещения;
	ДополнительныеПараметры.ДанныеСтроки = ДанныеСтроки;
	ДополнительныеПараметры.Элемент = Элемент;
	ДополнительныеПараметры.Результат = Результат;
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.ОбновитьКонтекстноеМеню = ОбновитьКонтекстноеМеню;
	ДополнительныеПараметры.АсинхронныйВызов = АсинхронныйВызов;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// +CRM
	//ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытияФормы,, Оповещение);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытияФормы, , Оповещение);
	// -CRM
	
КонецПроцедуры

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - ФормаКлиентскогоПриложения - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.Значение      = ПутьКСтроке[Элемент.Имя + "Значение"];
		
	КонецЕсли;
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("ФормаКлиентскогоПриложения") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Ввод комментария из контекстного меню.
Процедура ВвестиКомментарий(Знач Форма, Знач ИмяРеквизита, Знач НайденнаяСтрока, Знач Результат, АсинхронныйВызов)
	Комментарий = НайденнаяСтрока.Комментарий;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКомментария", "Комментарий" + ИмяРеквизита);
	ДополнительныеПараметры.Вставить("НайденнаяСтрока", НайденнаяСтрока);
	ДополнительныеПараметры.Вставить("ПредыдущийКомментарий", Комментарий);
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
	ДополнительныеПараметры.Вставить("АсинхронныйВызов", АсинхронныйВызов);
	
	Оповещение = Новый ОписаниеОповещения("ВвестиКомментарийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Комментарий, 
		НСтр("ru = 'Комментарий'"));
КонецПроцедуры

// Завершение немодального диалога.
Процедура ВвестиКомментарийЗавершение(Знач Комментарий, Знач ДополнительныеПараметры) Экспорт
	Если Комментарий = Неопределено Или Комментарий = ДополнительныеПараметры.ПредыдущийКомментарий Тогда
		// Отказ от ввода или нет изменений.
		Возврат;
	КонецЕсли;
	
	КомментарийБылПустой  = ПустаяСтрока(ДополнительныеПараметры.ПредыдущийКомментарий);
	КомментарийСталПустой = ПустаяСтрока(Комментарий);
	
	ДополнительныеПараметры.НайденнаяСтрока.Комментарий = Комментарий;
	
	Если КомментарийБылПустой И Не КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
	ИначеЕсли Не КомментарийБылПустой И КомментарийСталПустой Тогда
		ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
	Иначе
		Если ДополнительныеПараметры.Форма.Элементы.Найти(ДополнительныеПараметры.ИмяРеквизитаКомментария) <> Неопределено Тогда
			Элемент = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяРеквизитаКомментария]; // ДополнениеЭлементаФормы
			Элемент.Заголовок = Комментарий;
		Иначе
			ДополнительныеПараметры.Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Результат, ДополнительныеПараметры.АсинхронныйВызов);
	
КонецПроцедуры

Процедура ПозвонитьПоТелефону(Знач Форма)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(Форма, Форма.Объект);	
	// -СофтФон
	
КонецПроцедуры

Процедура СовершитьЗвонок(РасширениеПодключено, СтрокаЗапуска) Экспорт
	
	Если РасширениеПодключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, СтрокаЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКонтактнойИнформации(Форма, Элемент, ЭтоТабличнаяЧасть, ОбновитьФорму, АсинхронныйВызов)
	
	Префикс = "Комментарий";
	Если СтрНачинаетсяС(Элемент.Имя, Префикс) Тогда
		ИмяРеквизита = УдалитьПрефиксСтроки(Элемент.Имя, Префикс);
		Результат = Новый Структура;
		Результат.Вставить("ИмяРеквизита", ИмяРеквизита);
		НайденныеСтроки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма).НайтиСтроки(Результат);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		НайденнаяСтрока             = НайденныеСтроки[0];
		ИмяЭлементаДляРазмещения    = НайденнаяСтрока.ИмяЭлементаДляРазмещения;
		НайденнаяСтрока.Комментарий = Элемент.ТекстРедактирования;
		Результат.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
		Результат.Вставить("ТипКонтактнойИнформации", НайденнаяСтрока.Тип);
		Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
		ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, АсинхронныйВызов);
		Возврат;
	КонецЕсли;
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если Элемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда
		Текст = СокрЛП(Элемент.ТекстРедактирования);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "Маска")
			И ДанныеСтроки.Маска = "" Тогда
			Форма[ДанныеСтроки.ИмяРеквизита] = Текст;
		КонецЕсли;
	Иначе
		Текст = Форма[ДанныеСтроки.ИмяРеквизита];
	КонецЕсли;
	//Текст = Элемент.ТекстРедактирования;
	// -CRM
	Если ПустаяСтрока(Текст) Тогда
		
		ДанныеЗаполнения[Элемент.Имя] = "";
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "Значение"] = "";
		КонецЕсли;
		ДанныеСтроки.Представление = "";
		ДанныеСтроки.Значение      = "";
		Результат = Новый Структура("ОбновитьКонтекстноеМеню, ИмяЭлементаДляРазмещения", Истина, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		Если ОбновитьФорму Тогда
			ОбновитьКонтекстноеМеню(Форма, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеСтроки.Маска) И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Элемент.Маска = ДанныеСтроки.Маска;  
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// +CRM
	// Разложить строку телефона по полям
	Если (ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
		ИЛИ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс")) И ДанныеСтроки.Маска = "" Тогда
		
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Текст);
		ДанныеСтроки.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") И Не ЗначениеЗаполнено(Форма.Объект.БизнесРегион) 
			И ЗначениеЗаполнено(СтруктураТелефона.КодСтраны) И ЗначениеЗаполнено(СтруктураТелефона.КодГорода) Тогда
			НомерТелефона = СтруктураТелефона.КодГорода + СтруктураТелефона.НомерТелефона;
			БизнесРегион = CRM_УправлениеКонтактнойИнформациейВызовСервера.ОпределитьБизнесРегион(НомерТелефона,
				 СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода);
			Форма.Объект.БизнесРегион = БизнесРегион;
		КонецЕсли;
		
		ЗначенияПолей = Новый Структура;
		ЗначенияПолей.Вставить("countryCode", СтруктураТелефона.КодСтраны);
		ЗначенияПолей.Вставить("areaCode", СтруктураТелефона.КодГорода);
		ЗначенияПолей.Вставить("number", СтруктураТелефона.НомерТелефона);
		ЗначенияПолей.Вставить("extNumber", СтруктураТелефона.Добавочный);
		ЗначенияПолей.Вставить("value", ДанныеСтроки.Представление);
		ЗначенияПолей.Вставить("comment", ДанныеСтроки.Комментарий);
		ДанныеСтроки.Значение = CRM_ОбщегоНазначенияСервер.СтруктураВСтрокуJSON(ЗначенияПолей);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ДанныеСтроки.ИмяРеквизита) Тогда
			Форма[ДанныеСтроки.ИмяРеквизита] = ДанныеСтроки.Представление;
		КонецЕсли;
		
	Иначе
	// -CRM
		Если ДанныеСтроки.Свойство("ХранитьИсториюИзменений")
			И ДанныеСтроки.ХранитьИсториюИзменений
			И НачалоДня(ДанныеСтроки.ДействуетС) <> НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
			ИсторическаяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ИсторическаяКонтактнаяИнформация, ДанныеСтроки);
			ИсторическаяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
			ИсторическаяКонтактнаяИнформация.ИмяРеквизита = "";
			ДанныеСтроки.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		
		ДанныеСтроки.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Текст,
			ДанныеСтроки.Вид, ДанныеСтроки.Комментарий);
		ДанныеСтроки.Представление = Текст;
		
		Если ЭтоТабличнаяЧасть Тогда
			ДанныеЗаполнения[Элемент.Имя + "Значение"]      = ДанныеСтроки.Значение;
		КонецЕсли;
	// +CRM
	КонецЕсли;
	// -CRM
	
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") И ОбновитьФорму Тогда
		Результат = Новый Структура("ОбновитьКонтекстноеМеню, ИмяЭлементаДляРазмещения", Истина, ДанныеСтроки.ИмяЭлементаДляРазмещения);
		ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, АсинхронныйВызов)
	КонецЕсли;
	
	// +CRM
	
	Если ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		
		Параметры = Новый Структура;
		
		Параметры.Вставить("Форма", Форма);
		Параметры.Вставить("ТекстРедактирования", Текст);
		Параметры.Вставить("ИмяРеквизита", ДанныеСтроки.ИмяРеквизита);
		Параметры.Вставить("ИмяЭлементаДляРазмещения", ДанныеСтроки.ИмяЭлементаДляРазмещения);
		Параметры.Вставить("НайденнаяСтрока", Новый Структура("Значение, Представление, Родитель, Колонка",
												ДанныеСтроки.Значение, ДанныеСтроки.Представление, ДанныеСтроки.Родитель, ДанныеСтроки.Колонка));
		Параметры.Вставить("Ссылка", Форма.Объект.Ссылка);
		
		CRM_ПрозвонитьМессенджеры(Параметры);
		
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, АсинхронныйВызов)
	
	Если АсинхронныйВызов Тогда
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации", Форма);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	Иначе
		Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, установлена ли программа телефонии на компьютер.
//  Проверка возможна только в тонком клиенте для Windows.
//
// Параметры:
//  ИмяПротокола - Строка - Имя проверяемого URI протокола, возможные варианты "skype", "tel", "sip".
//                          Если параметр не указан, то проверяются все протоколы. 
// 
// Возвращаемое значение:
//  Строка - имя доступного URI протокола зарегистрирована в реестре. Пустая строка - если протокол недоступен.
//  Неопределенно если проверка не возможна.
//
Функция ПрограммаТелефонииУстановлена(ИмяПротокола = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Если ЗначениеЗаполнено(ИмяПротокола) Тогда
			Возврат ?(ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола), ИмяПротокола, "");
		Иначе
			СписокПротоколов = Новый Массив;
			СписокПротоколов.Добавить("tel");
			СписокПротоколов.Добавить("sip");
			СписокПротоколов.Добавить("skype");
			Для каждого ИмяПротокола Из СписокПротоколов Цикл
				Если ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола) Тогда
					Возврат ИмяПротокола;
				КонецЕсли;
			КонецЦикла;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Считаем что для Linux и MacOS всегда есть программа.
	// если будет ошибка - она будет обработана в момент запуска.
	Возврат ИмяПротокола;
КонецФункции

Функция ИмяПротоколаЗарегистрированоВРеестре(ИмяПротокола)

	#Если МобильныйКлиент Тогда
		Возврат Ложь;
	#Иначе	
	
	// +CRM	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;
	Если НЕ (ТипСистемы = ТипПлатформы.Windows_x86 ИЛИ ТипСистемы = ТипПлатформы.Windows_x86_64) Тогда
		Возврат Ложь;
	КонецЕсли;
	// -CRM
		
	Попытка
		// BSLLS:UnusedLocalVariable-off
		Оболочка = Новый COMОбъект("Wscript.Shell");
		Результат = Оболочка.RegRead("HKEY_CLASSES_ROOT\" + ИмяПротокола + "\");
		// BSLLS:UnusedLocalVariable-on
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	#КонецЕсли
	
КонецФункции

Процедура ОбновитьКонтекстноеМеню(Форма, ИмяЭлементаДляРазмещения)
	
	ПараметрыКонтактнойИнформации = Форма.ПараметрыКонтактнойИнформации[ИмяЭлементаДляРазмещения]; // ДанныеФормаКоллекция
	ВсеСтроки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(Форма);
	НайденныеСтроки = ВсеСтроки.НайтиСтроки( 
		Новый Структура("Тип, ЭтоРеквизитТабличнойЧасти", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"), Ложь));
		
	ОбщееКоличествоКоманд = 0;
	Для Каждого СтрокаКИ Из ВсеСтроки Цикл
		
		Если ОбщееКоличествоКоманд > 50 Тогда // Ограничение для большого количества адресов на форме
			Прервать;
		КонецЕсли;
		
		Если СтрокаКИ.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстноеПодменюКопироватьАдреса = Форма.Элементы.Найти("КонтекстноеПодменюКопироватьАдреса" 
			+ СтрокаКИ.ИмяРеквизита);
		Если КонтекстноеПодменюКопироватьАдреса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		КоличествоКомандВПодменю = 0;
		СписокАдресовВПодменю = Новый Соответствие();
		ДанныеАдреса = Новый Структура("Представление, Адрес", СтрокаКИ.Представление, СтрокаКИ.Значение);
		СписокАдресовВПодменю.Вставить(ВРег(СтрокаКИ.Представление), ДанныеАдреса);
		
		Для Каждого Адрес Из НайденныеСтроки Цикл
			
			Если КоличествоКомандВПодменю > 7 Тогда // Ограничение для большого количества адресов на форме
				Прервать;
			КонецЕсли;
			
			Если Адрес.ЭтоИсторическаяКонтактнаяИнформация Или Адрес.ИмяРеквизита = СтрокаКИ.ИмяРеквизита Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "МенюПодменюАдрес" + СтрокаКИ.ИмяРеквизита + "_" + Адрес.ИмяРеквизита;
			Команда = Форма.Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(СтрокаКИ.МеждународныйФорматАдреса,
				СтроковыеФункцииКлиент.СтрокаЛатиницей(Адрес.Представление), Адрес.Представление);
			
			Если СписокАдресовВПодменю[ВРег(Адрес.Представление)] <> Неопределено Тогда
				ПредставлениеАдреса = "";
			Иначе
			ДанныеАдреса = Новый Структура("Представление, Адрес", ПредставлениеАдреса, Адрес.Значение);
				Если СтрокаКИ.МеждународныйФорматАдреса Тогда
					ДанныеАдреса.Адрес = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(
						ПредставлениеАдреса, Адрес.Тип, Адрес.Комментарий);
				КонецЕсли;
				СписокАдресовВПодменю.Вставить(ВРег(Адрес.Представление), ДанныеАдреса);
			КонецЕсли;
				
			ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ПредставлениеАдреса, ПараметрыКонтактнойИнформации, 
				КонтекстноеПодменюКопироватьАдреса);
			
		КонецЦикла;
		
		Поле = Форма.Элементы[СтрокаКИ.ИмяРеквизита];
		Если Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
			Поле.СписокВыбора.Очистить();
			ПредставлениеДляПоиска = ВРег(СтрокаКИ.Представление);
			Для Каждого ДанныеАдреса Из СписокАдресовВПодменю Цикл
				Если ДанныеАдреса.Ключ <> ПредставлениеДляПоиска Тогда
					Поле.СписокВыбора.Добавить(ДанныеАдреса.Значение, ДанныеАдреса.Значение.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбщееКоличествоКоманд = ОбщееКоличествоКоманд + КоличествоКомандВПодменю;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуСкопироватьАдрес(Форма, ИмяКоманды, ЗаголовокЭлемента, ПараметрыКонтактнойИнформации, Подменю)
	
	ИмяЭлемента = Подменю.Имя + "_" + ИмяКоманды;
	Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
	Если Кнопка = Неопределено Тогда
		Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавленныеЭлементы = ПараметрыКонтактнойИнформации.ДобавленныеЭлементы; // СписокЗначений
		ДобавленныеЭлементы.Добавить(ИмяЭлемента, 1);
	КонецЕсли;
	Кнопка.Заголовок = ЗаголовокЭлемента;
	Кнопка.Видимость = ЗначениеЗаполнено(ЗаголовокЭлемента);

КонецПроцедуры

// Удаляет префикс строки. 
//
// Параметры:
//  ИсходнаяСтрока - Строка
//  Префикс        - Строка
//
// Возвращаемое значение:
//   Строка
//
Функция УдалитьПрефиксСтроки(ИсходнаяСтрока, Префикс)
	
	Если Не СтрНачинаетсяС(ВРег(ИсходнаяСтрока), ВРег(Префикс)) Тогда
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	СтрокаБезПрефикса = Сред(ИсходнаяСтрока, ДлинаПрефикса + 1);
	
	Возврат СтрокаБезПрефикса;
	
КонецФункции

Функция ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры()

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",        "");
	ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть",       Ложь);
	ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения",   "");
	ДополнительныеПараметры.Вставить("ДанныеСтроки",            Неопределено);
	ДополнительныеПараметры.Вставить("Элемент",                 Неопределено);
	ДополнительныеПараметры.Вставить("Результат",               Неопределено);
	ДополнительныеПараметры.Вставить("Форма",                   Неопределено);
	ДополнительныеПараметры.Вставить("ОбновитьКонтекстноеМеню", Ложь);
	ДополнительныеПараметры.Вставить("АсинхронныйВызов",        Ложь);
	
	Возврат ДополнительныеПараметры;
		
КонецФункции

#Область МетодыCRM

// Событие ПриИзменении в колонке Представление таблицы контактной информации.
Функция CRM_ПолучитьТипПроверитьЗаполнение(Форма, Элемент) Экспорт
	
	// Если это очистка, то сбрасываем представление.
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, Ложь);
	Если ДанныеСтроки = Неопределено
		
		 	 ИЛИ НЕ ДанныеСтроки.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(Текст);
	
КонецФункции

// Событие Нажатие в поле "Основной для связи" таблицы контактной информации.
//
Процедура ОсновнойДляСвязиНажатие(Форма, Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ОсновнойДляСвязи", "");
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита",
		 ИмяРеквизита));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].CRM_ОсновнойДляСвязи = (НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи);
	Элемент.Картинка = ?(НайденныеСтроки[0].CRM_ОсновнойДляСвязи,
		 БиблиотекаКартинок.CRM_ЗвездочкаГолубая,
		 БиблиотекаКартинок.CRM_ЗвездочкаСерая);
	Форма.Элементы[ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[ИмяРеквизита].Шрифт, , , Истина, );
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если НЕ НайденныеСтроки[0].CRM_ОсновнойДляСвязи Тогда
		Возврат;
	КонецЕсли;
	
	// Производим корректировку остальных полей текущего типа КИ.
	Для Каждого СтрокаТабличнойЧасти Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип",
		 НайденныеСтроки[0].Тип)) Цикл
		
		Если СтрокаТабличнойЧасти.ИмяРеквизита = ИмяРеквизита Тогда
			Продолжить;
		КонецЕсли;
		Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт	= Новый Шрифт(Форма.Элементы[СтрокаТабличнойЧасти.ИмяРеквизита].Шрифт,
			 , , Ложь, );
		СтрокаТабличнойЧасти.CRM_ОсновнойДляСвязи = Ложь;
		Форма.Элементы["ОсновнойДляСвязи" 
			+ СтрокаТабличнойЧасти.ИмяРеквизита].Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
	КонецЦикла;
	
КонецПроцедуры // ОсновнойДляСвязиНажатие()

// Используется при проверке дублей на основании значения контактной информации.
// Получает значение КИ и передает его дальше.
//
// Параметры:
//     Форма             - ФормаКлиентскогоПриложения   - Форма владельца контактной информации.
//     Элемент           - ПолеФормы          - Элемент формы, содержащий представление контактной информации.
//     Оповещение 		 - ОписаниеОповещения - Оповещения для вызова
//
Процедура ВыполнитьПоискДублейПоЗначению(Форма, Элемент, Оповещение) Экспорт
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, Ложь);
	
	ВыполнитьОбработкуОповещения(Оповещение, ДанныеСтроки);
	
КонецПроцедуры

Процедура CRM_ПрозвонитьМессенджеры(Параметры) Экспорт
	
	Если НЕ CRM_ОбщегоНазначенияСервер.ФункциональнаяОпция("CRM_ИспользоватьИнтеграциюСМессенджерами") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ДляОбъектаДоступенПрозвонМессенджеров(Параметры.Форма.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ТекстРедактирования) Тогда
		ТекстСообщения = НСтр("ru='Не указан номер телефона'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		МассивТелефонныхНомеров = Новый Массив;
		
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Параметры.ТекстРедактирования);
		Телефон = сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
		
		ДлинаНомера = СтрДлина(СтруктураНомера.КодГорода + СтруктураНомера.НомерТелефона);
		ЭтоМобильныйТелефон = (ДлинаНомера = 10 И Лев(СтруктураНомера.КодГорода, 1) = "9");
		
		Если Не ЭтоМобильныйТелефон Тогда // если номер не мобильный, то прозвон мессенджеров не требуется
			Возврат;	
		КонецЕсли;
		
		МассивТелефонныхНомеров.Добавить(Телефон);
		
		МассивИсключаемыхМессенджеров = Новый Массив;
		ОтборМессенджеров = Новый Структура("Значение", Параметры.НайденнаяСтрока.Значение);
		
		Если Параметры.Свойство("ИмяТаблицыКИ") Тогда
			ОтборМессенджеров.Вставить("Объект", Параметры.ОбъектИнтереса);
			НайденныеСтрокиМессенджеры = Параметры.Форма[Параметры.ИмяТаблицыКИ].НайтиСтроки(ОтборМессенджеров);
		Иначе
			НайденныеСтрокиМессенджеры =
				Параметры.Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборМессенджеров);
		КонецЕсли;
		Для Каждого СтрокаОтбора Из НайденныеСтрокиМессенджеры Цикл
			Если МассивИсключаемыхМессенджеров.Найти(СтрокаОтбора.Вид) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивИсключаемыхМессенджеров.Добавить(СтрокаОтбора.Вид);
		КонецЦикла;
		
		// Включить картинку Длительной операции:
		Параметры.Форма.Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Вид = ВидДекорацииФормы.Картинка;
		Параметры.Форма.Элементы["ДекорацияПрозвон" + Параметры.ИмяРеквизита].Ширина = 2;
		Параметры.Форма.Элементы["ДекорацияПрозвон" 
			+ Параметры.ИмяРеквизита].Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		
		Параметры.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
		Параметры.Вставить("МассивИсключаемыхМессенджеров", МассивИсключаемыхМессенджеров);
		
		CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(Параметры) Экспорт
	
	ИмяРеквизитаКИ = Неопределено;
	Параметры.Свойство("ИмяРеквизитаКИ", ИмяРеквизитаКИ);
	
	ДлительнаяОперация = CRM_РаботаСМессенджерамиСервер.НачатьПрозвонМессенджеров(Параметры.Ссылка,
		 Параметры.МассивТелефонныхНомеров, Параметры.МассивИсключаемыхМессенджеров,
		 ИмяРеквизитаКИ);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Параметры.Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПрозвонМессенджеровЗавершение",
		 Параметры.Форма,
		 Параметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Если Параметры.Свойство("БезЗаполненияПолей") Тогда
		
	Иначе
		
		СписокДобавляемыхЭлементов =
		Форма.ПараметрыКонтактнойИнформации[Параметры.ИмяЭлементаДляРазмещения].СписокДобавляемыхЭлементов;
		
		Для Каждого ЭлементРезультата Из РезультатПрозвона Цикл
			
			СтрокаИсточник = Неопределено;
			Если Параметры.Свойство("ПрозвонВсехНомеров") Тогда
				СтрокаИсточник = Параметры.ДополнительныеДанныеНомеровСоответствие[ЭлементРезультата.НомерТелефона];
			Иначе
				СтрокаИсточник = Параметры.НайденнаяСтрока;
			КонецЕсли;
			Если ЭлементРезультата.Свойство("КонтактнаяИнформация") Тогда
				ПредставлениеКИ = ЭлементРезультата.КонтактнаяИнформация.Представление;
			Иначе
				ПредставлениеКИ = ЭлементРезультата.НомерТелефона;
			КонецЕсли;
			
			
			СуществующиеСтроки = CRM_НайтиДополнительныхЗначенийПоВидуКИ(
			Форма, ЭлементРезультата.ВидКИ, ПредставлениеКИ);
			
			// Если нашли строку КИ с существующем значением, то никаких действий не требуется.
			Если СуществующиеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующиеСтроки = CRM_НайтиДополнительныхЗначенийПоВидуКИ(
				Форма, ЭлементРезультата.ВидКИ, "");
			Если СуществующиеСтроки.Количество() = 0 И ЭлементРезультата.ТипКИ = 
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
				СуществующиеСтроки = CRM_НайтиДополнительныхЗначенийПоВидуКИ(
					Форма, ЭлементРезультата.ВидКИ, CRM_ОбщегоНазначенияПовтИсп.АдресСайтаНеУказанПредставление());
			КонецЕсли;
			Если СуществующиеСтроки.Количество() = 0 Тогда
				Для Каждого ДобавляемыйЭлемент Из СписокДобавляемыхЭлементов Цикл
					
					Если ДобавляемыйЭлемент.Значение.Ссылка = ЭлементРезультата.ВидКИ Тогда
						ДополнительныеПараметры = Новый Структура;
						ДополнительныеПараметры.Вставить("Форма", Форма);
						ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Параметры.ИмяЭлементаДляРазмещения);
						ДополнительныеПараметры.Вставить("ИмяКоманды", "");
						ДополнительныеПараметры.Вставить("ЭтоПоследнийЭлемент", СписокДобавляемыхЭлементов.Количество() = 1);
						ДополнительныеПараметры.Вставить("АсинхронныйВызов", Истина);
						
						КонтактнаяИнформацияДобавитьПолеВводаЗавершение(ДобавляемыйЭлемент, ДополнительныеПараметры);
						
					КонецЕсли;
					
				КонецЦикла;
				СуществующиеСтроки = CRM_НайтиДополнительныхЗначенийПоВидуКИ(
					Форма, ЭлементРезультата.ВидКИ, "");
			КонецЕсли;
			
			Если СуществующиеСтроки.Количество() > 0 Тогда
				
				Если Не ЭлементРезультата.Свойство("КонтактнаяИнформация") Тогда
					ЗаполнитьЗначенияСвойств(СуществующиеСтроки[0], СтрокаИсточник, 
					"Значение,Представление,Родитель,Колонка");
				Иначе
					СуществующиеСтроки[0].Представление = ЭлементРезультата.КонтактнаяИнформация.Представление;
					СуществующиеСтроки[0].Значение = ЭлементРезультата.КонтактнаяИнформация.Значение;
				КонецЕсли;
				Форма[СуществующиеСтроки[0].ИмяРеквизита] = СуществующиеСтроки[0].Представление;
				
			КонецЕсли;
			
			Форма.Модифицированность = Истина;
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция CRM_ДляОбъектаДоступенПрозвонМессенджеров(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура CRM_НаписатьВЧат(Параметры)
	
	Если НЕ CRM_ОбщегоНазначенияСервер.ФункциональнаяОпция("CRM_ИспользоватьИнтеграциюСМессенджерами") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ТекстРедактирования) Тогда
		ТекстСообщения = НСтр("ru='Не указан номер телефона'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Параметры.ТекстРедактирования);
		Телефон = сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Телефон);
		
		ОповещениеНаписатьВЧат = Новый ОписаниеОповещения("Подключаемый_НаписатьВЧатЗавершение", Параметры.Форма);
		ВыполнитьОбработкуОповещения(ОповещениеНаписатьВЧат, Телефон);
		
	КонецЕсли;
	
КонецПроцедуры

Функция CRM_НайтиДополнительныхЗначенийПоВидуКИ(Форма, ВидКИ, ЗначениеСтроки)
	
	Отбор = Новый Структура("Вид, Представление", ВидКИ, ЗначениеСтроки);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Возврат Строки;
	
КонецФункции // CRM_НайтиДополнительныхЗначенийПоВидуКИ()

#КонецОбласти // МетодыCRM

#Область НовыеМетодыCRM

Процедура КонтактнаяИнформацияНажатие(Форма, Команда) Экспорт
	
	Если СтрНайти(Команда.Имя, "КнопкаПодменю") > 0 Тогда
		Форма.Элементы[СтрЗаменить(Команда.Имя, "Кнопка", "")].Показать();
		Возврат;
	ИначеЕсли СтрНайти(Команда.Имя, "ЭлементСпискаКИКонтактнаяИнформация") > 0 Тогда	
		ТекущиеСтрокаКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита",
			 СтрЗаменить(Команда.Имя, "ЭлементСпискаКИ",
			 "")));
	Иначе	
		ТекущиеСтрокаКИ = Форма.КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита",
			 Команда.Имя));
	КонецЕсли;
	Если ТекущиеСтрокаКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаКИ = ТекущиеСтрокаКИ[0];
	Контакт = ?(ТекущаяСтрокаКИ.Свойство("Объект"), ТекущаяСтрокаКИ.Объект, Форма.Объект.Ссылка); 
	Если ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина, Форма.Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
		ДанныеЗаполнения	= Новый Структура;
		ДанныеЗаполнения.Вставить("Основание",	Форма.Объект.Ссылка);	
		ДополнительныеПараметры	= Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпПозвонить(ТекущаяСтрокаКИ.Представление, Контакт, ДополнительныеПараметры);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
	   	ПараметрыФормы = Новый Структура("Основание", Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Форма.Объект.Ссылка);
		СписокАдресов = Новый СписокЗначений;
		СписокАдресов.Добавить(Контакт, ТекущаяСтрокаКИ.Представление);
		ПараметрыФормы.Вставить("Кому", СписокАдресов);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		АдресСайтаКомпании = ТекущаяСтрокаКИ.Представление;
		Если СтрНайти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСайтаКомпании);
	ИначеЕсли ТекущаяСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить("ПоказатьАдресНаЯндексКартах",
			 НСтр("ru='Адрес на Яндекс.Картах';en='Address on Yandex.Maps'"), ,
			 БиблиотекаКартинок.ЯндексКарты);
		СписокКоманд.Добавить("ПоказатьАдресНаGoogleMaps",
			 НСтр("ru='Адрес на Google Maps';en='Address on Google Maps'"), ,
			 БиблиотекаКартинок.GoogleMaps);
		Элемент = Форма.Элементы.Найти(Команда.Имя);
		ОписаниеОпопвещения = Новый ОписаниеОповещения("КонтактнаяИнформацияНажатиеПродолжение", ЭтотОбъект, ТекущаяСтрокаКИ);
		Форма.ПоказатьВыборИзМеню(ОписаниеОпопвещения, СписокКоманд, Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактнаяИнформацияНажатиеПродолжение(Результат, СтрокаКИ) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Значение = "ПоказатьАдресНаЯндексКартах" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(СтрокаКИ.Представление, "Яндекс.Карты");
	ИначеЕсли Результат.Значение = "ПоказатьАдресНаGoogleMaps" Тогда
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(СтрокаКИ.Представление, "GoogleMaps");
	КонецЕсли;
КонецПроцедуры

Процедура ПереместитьЭлементКИ(Форма, ИмяРеквизита, Направление)
	СтруктураРеквизита	= Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураРеквизита);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	
	ОтборПоВиду = Новый Структура("Вид, ЭтоИсторическаяКонтактнаяИнформация", НайденнаяСтрока.Вид, Ложь);
	НайденныеСтрокиПоВиду = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборПоВиду);
	ТекущаяСтрока = НайденныеСтрокиПоВиду.Найти(НайденнаяСтрока);
	Если Направление Тогда
		ПредыдущаяСтрока = НайденныеСтрокиПоВиду.Получить(ТекущаяСтрока - 1);
	Иначе
		ПредыдущаяСтрока = НайденныеСтрокиПоВиду.Получить(ТекущаяСтрока + 1);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПоменятьМестамиЭлементы", Истина);
	Результат.Вставить("ПервыйЭлемент", ИмяРеквизита);
	Результат.Вставить("ВторойЭлемент", ПредыдущаяСтрока.ИмяРеквизита);
	
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, Ложь);
КонецПроцедуры

Процедура СкопироватьАдрес(Форма, ИмяКоманды)
	
	ИмяРеквизита         = УдалитьПрефиксСтроки(ИмяКоманды, "МенюПодменюАдрес");
	Позиция              = СтрНайти(ИмяРеквизита, "_КонтактнаяИнформацияПоле");
	ИмяРеквизитаИсточник = Лев(ИмяРеквизита, Позиция - 1);
	ИмяРеквизита         = Сред(ИмяРеквизита, Позиция + 1);
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	ТипКонтактнойИнформации = НайденнаяСтрока.Тип;
	ИмяЭлементаДляРазмещения = НайденнаяСтрока.ИмяЭлементаДляРазмещения;
	Результат.Вставить("ИмяЭлементаДляРазмещения", ИмяЭлементаДляРазмещения);
	Результат.Вставить("ТипКонтактнойИнформации", НайденнаяСтрока.Тип);
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизитаИсточник);
	СтрокаПотребитель = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	
	Если СтрокаПотребитель.Свойство("МеждународныйФорматАдреса") И СтрокаПотребитель.МеждународныйФорматАдреса Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаПотребитель, НайденнаяСтрока, "Комментарий");
		ПредставлениеАдреса = СтроковыеФункцииКлиент.СтрокаЛатиницей(НайденнаяСтрока.Представление);
		СтрокаПотребитель.Представление        = ПредставлениеАдреса;
		Форма[СтрокаПотребитель.ИмяРеквизита]  = ПредставлениеАдреса;
		СтрокаПотребитель.Значение             = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса,
			 ТипКонтактнойИнформации, "");
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтрокаПотребитель, НайденнаяСтрока, "Значение, Представление,Комментарий");
		Форма[СтрокаПотребитель.ИмяРеквизита] = НайденнаяСтрока.Представление;
		
	КонецЕсли;
	Форма.Модифицированность = Истина;
	Результат = Новый Структура();
	Результат.Вставить("ОбновитьКонтекстноеМеню", Истина);
	Результат.Вставить("ИмяРеквизита", СтрокаПотребитель.ИмяРеквизита);
	Результат.Вставить("Комментарий", СтрокаПотребитель.Комментарий);
	Результат.Вставить("ИмяЭлементаДляРазмещения", НайденнаяСтрока.ИмяЭлементаДляРазмещения);
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, Ложь);
	
КонецПроцедуры

#КонецОбласти // НовыеМетодыCRM

#КонецОбласти // СлужебныеПроцедурыИФункции
