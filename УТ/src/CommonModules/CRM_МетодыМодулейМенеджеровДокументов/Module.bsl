////////////////////////////////////////////////////////////////////////////////
// CRM методы модулей менеджеров документов
// 
// В данный модуль вынесены методы подсистемы CRM, вызываемые из модулей типовых объектов. 
// Выносить можно только те методы, которые не вызывают стандартные методы типового модуля или обработчики форм. 
// Т.е. вызывают только те методы, что тоже вынесены из типового или не содержат таких вызовов. 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Для каждого объекта необходимо задать свою #Область с именем объекта и модуля, как он называется в метаданных.
#Область ОбщегоНазначения

// возвращает вид взаимодействия "Прочее"
//
// Параметры:
//  ВидСобытия - ПеречислениеСсылка.CRM_ВидыСобытий - вид события.
// 
// Возвращаемое значение:
//  Справочники.CRM_ВидыВзаимодействий - вид взаимодействия.
//
Функция ПолучитьВидВзаимодействия(ВидСобытия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_ВидыВзаимодействий.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
	               |ГДЕ
	               |	CRM_ВидыВзаимодействий.ВидСобытия = &ВидСобытия
	               |	И CRM_ВидыВзаимодействий.ВидДела = &ВидДела
	               |	И CRM_ВидыВзаимодействий.Направление = &Направление
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ВидыВзаимодействий.Предопределенный УБЫВ";
	
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.УстановитьПараметр("ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы);
	Запрос.УстановитьПараметр("Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидВзаимодействия = Выборка.Ссылка;
	Иначе
		НовыйВидВзаимодействий = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
		НовыйВидВзаимодействий.ВидСобытия = ВидСобытия;
		НовыйВидВзаимодействий.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы;
		НовыйВидВзаимодействий.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
		
		Если ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее Тогда
			НовыйВидВзаимодействий.Наименование = "Запланированное взаимодействие";
		ИначеЕсли ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок Тогда
			НовыйВидВзаимодействий.Наименование = "Исходящий телефонный звонок";
		Иначе
			НовыйВидВзаимодействий.Наименование = "Новый вид взаимодействий";
		КонецЕсли;
		
		НовыйВидВзаимодействий.Описание = НовыйВидВзаимодействий.Наименование;
		
		НовыйВидВзаимодействий.Записать();
		
		ВидВзаимодействия = НовыйВидВзаимодействий.Ссылка;
		
	КонецЕсли;
	
	Возврат ВидВзаимодействия;	
	
КонецФункции

// подменяет параметры партнера
//
// Параметры:
//  ПараметрыФормы - Структура - параметры формы. 
//
Процедура ПодменитьПараметрыПартнера(ПараметрыФормы) Экспорт
	
	Если ПараметрыФормы.Свойство("Основание")
		И ЗначениеЗаполнено(ПараметрыФормы.Основание) Тогда
		
		Если ТипЗнч(ПараметрыФормы.Основание) = Тип("СправочникСсылка.Партнеры") Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Партнер", ПараметрыФормы.Основание));
			ПараметрыФормы.Удалить("Основание");
		ИначеЕсли ТипЗнч(ПараметрыФормы.Основание) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ДокументОснование", ПараметрыФормы.Основание.ДокументОснование);
			ПараметрыФормы.Вставить("ОткрыватьФорму");
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыФормы.Основание, "Партнер")
				И ТипЗнч(ПараметрыФормы.Основание.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
				
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Партнер", ПараметрыФормы.Основание.Партнер));
				ПараметрыФормы.Удалить("Основание");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыФормы.Свойство("ЗначенияЗаполнения")
		И ТипЗнч(ПараметрыФормы.ЗначенияЗаполнения) = Тип("Структура")
		И ПараметрыФормы.ЗначенияЗаполнения.Свойство("Контакт")
		И ЗначениеЗаполнено(ПараметрыФормы.ЗначенияЗаполнения.Контакт)
		И ТипЗнч(ПараметрыФормы.ЗначенияЗаполнения.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда	
		
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Партнер", ПараметрыФормы.ЗначенияЗаполнения.Контакт);
		
	КонецЕсли;
	
КонецПроцедуры// ПодменитьПараметрыПартнера(ПараметрыФормы)

#КонецОбласти // ОбщегоНазначения

#Область ОпределениеФормОбъектов

// Процедура - Обработка получения форм объектов CRM
//
// Параметры:
//  Источник				 - ДокументСсылка - Источник. 
//  ВидФормы				 - Строка - Имя стандартной формы. 
//  Параметры				 - Струтура	 - Параметры формы. 
//  ВыбраннаяФорма			 - Строка, ФормаКлиентскогоПриложения	 - Содержит имя открываемой формы
	// или объект метаданных Форма.
//  ДополнительнаяИнформация - Струтура	 - Дополнительная информация открытия формы.
//  СтандартнаяОбработка	 - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияФормОбъектовCRM(Источник, ВидФормы, Параметры, ВыбраннаяФорма,
	 ДополнительнаяИнформация,
	 СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("Ключ") Тогда
		ВыбраннаяФорма = Неопределено;
	КонецЕсли;
	
	#Область ПолученияФормАнкета
	
	Если ТипЗнч(Источник) = Тип("ДокументМенеджер.Анкета") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.Анкета.Форма.CRM_ФормаДокумента";
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.Анкета.Форма.CRM_ФормаСписка";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормНазначениеОпросов
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.НазначениеОпросов") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.НазначениеОпросов.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормСообщениеSMS
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.СообщениеSMS") Тогда
	
		Если SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
			Если ВидФормы = "ФормаОбъекта" Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.SMS4B_ФормаДокумента";
			ИначеЕсли ВидФормы = "ФормаСписка" Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "Документ.СообщениеSMS.Форма.SMS4B_ФормаСписка";
			КонецЕсли;
		КонецЕсли;
	
	#КонецОбласти

	#Область ПолученияФормЭлектронноеПисьмоИсходящее
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ЭлектронноеПисьмоИсходящее") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
		
	#Область ПолученияФормЭлектронноеПисьмоВходящее
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ЭлектронноеПисьмоВходящее") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента";
		КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолученияФормТелефонныйЗвонок
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.ТелефонныйЗвонок") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			СтандартнаяОбработка = Ложь;
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента";
			Иначе
				ИспользуетсяСофтФон = сфпСофтФонПроСервер.сфпИспользоватьСофтФон()
					 И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон");
				Если ИспользуетсяСофтФон Или Параметры.Свойство("Ключ") Тогда
					ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента";
				Иначе
					ВыбраннаяФорма = "Документ.CRM_Взаимодействие.Форма.ФормаДокумента";
					ВидВзаимодействияЗвонок = ПолучитьВидВзаимодействия(Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
					Параметры.Вставить("ВидВзаимодействия", ВидВзаимодействияЗвонок);
					ПодменитьПараметрыПартнера(Параметры);
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаСписка";
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Документ.ТелефонныйЗвонок.Форма.сфпФормаСписка";
		КонецЕсли;
	
	#КонецОбласти	
	
	#Область ПолученияФормКоммерческоеПредложениеКлиенту
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументМенеджер.КоммерческоеПредложениеКлиенту") Тогда
	
		Если ВидФормы = "ФормаОбъекта" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_Модуль_ФормаДокумента") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаДокумента";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_ФормаДокумента") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаДокумента";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_Модуль_ФормаСписка") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_ФормаСписка") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаСписка";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_Модуль_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_Модуль_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы.КоммерческоеПредложениеКлиенту.Формы",
				 "CRM_ФормаВыбора") Тогда
				ВыбраннаяФорма = "Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаВыбора";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	
	#КонецОбласти

	КонецЕсли;
	Если ВыбраннаяФорма = Неопределено И Параметры.Свойство("Ключ") Тогда
		ВыбраннаяФорма = "Документ." + Параметры.Ключ.Метаданные().Имя + "." + ВидФормы;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти // ОпределениеФормОбъектов

#Область Документ_ЭлектронноеПисьмоИсходящее_МодульМенеджера

// Функция получает параметры письма для отправки.
//
// Параметры:
//	Объект	- ДокументСсылка	- Письмо
//
// Возвращаемое значение:
//	Структура	- Параметры письма.
//
Функция ПолучитьПараметрыПисьмаДляОтправки(Объект)  Экспорт
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	ПараметрыПисьма = Новый Структура;
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма,	"Кому",			"ПолучателиПисьма");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма,	"Копии", 		"ПолучателиКопий");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма,	"СкрытыеКопии",	"ПолучателиСкрытыхКопий");
	ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма,	"СлепыеКопии",	"ПолучателиСкрытыхКопий");
	ПараметрыПисьма.Вставить("Тема",		Объект.Тема);
	ПараметрыПисьма.Вставить("Тело",		Объект.ТекстHTML);
	ПараметрыПисьма.Вставить("Кодировка",	Объект.Кодировка);
	ПараметрыПисьма.Вставить("ТипТекста",	Объект.ТипТекста);
	ПараметрыПисьма.Вставить("Важность",	УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("УведомитьОДоставке",	Объект.УведомитьОДоставке);
	ПараметрыПисьма.Вставить("УведомитьОПрочтении",	Объект.УведомитьОПрочтении);
	Если НЕ ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
	КонецЕсли;
	
	СоотвВложения = Новый Соответствие;
	ДанныеПрисоединенныхФайловПисьма =
		ВзаимодействияПереопределяемый.ДанныеОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект);
	Если ДанныеПрисоединенныхФайловПисьма = Неопределено Тогда
		ИмяОбъектаМетаданных = CRM_УправлениеЭлектроннойПочтой.ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Объект.Ссылка);
		ВладелецФайлов       = Объект.Ссылка;
	Иначе
		ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныеФайлы;
		ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.Владелец;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИдентификаторПочтовогоВложения,
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайлов);
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
		
		ДанныеВложения = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Ссылка);
		Если ДанныеВложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДанныеВложения = Новый Структура;
		СтруктураДанныеВложения.Вставить("ДвоичныеДанные", ДанныеВложения);
		СтруктураДанныеВложения.Вставить("Идентификатор", СокрЛП(Выборка.ИдентификаторПочтовогоВложения));
		СоотвВложения.Вставить(ИмяФайла, ?(Выборка.ИдентификаторПочтовогоВложения = "", ДанныеВложения,
			 СтруктураДанныеВложения));
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭлектронныеПодписиВладельца = МодульЭлектроннаяПодпись.УстановленныеПодписи(Выборка.Ссылка);
		КонецЕсли;
		НомерСтроки = 1;
		Для каждого ЭП Из ЭлектронныеПодписиВладельца Цикл
		
			СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS(" + НомерСтроки + ")." 
			                       + РасширениеДляФайловПодписи, ЭП.Подпись);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	//ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Возврат ПараметрыПисьма;
	
КонецФункции // ПолучитьПараметрыПисьмаДляОтправки()

#КонецОбласти

#Область Документ_CRM_Интерес_МодульМенеджера

// Возвращает контактное лицо партнера.
//
// Параметры:
//  Партнер	 - СправочникСсылка - Партнер ссылка. 
// 
// Возвращаемое значение:
//  СправочникСсылка - Ссылка контактного лица партнера.
//
Функция ВернутьКЛПартнера(Партнер) Экспорт
	Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать(, Партнер);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;		
КонецФункции	

#КонецОбласти

#Область Документ_Анкеты_МодульОбъекта

// Процедура - обработчик подписки на событие "ОбработкаПроверкиЗаполнения" документа "Анкета".
//
// Параметры:
//  Источник			 - ДокументСсылка - Источник. 
//  Отказ				 - Булево - Отказ от продолжения работы
//  ПроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполненияКоммерческогоПредложенияКлиенту(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если ЗначениеЗаполнено(Источник.CRM_ШаблонАнкеты) Тогда
		// Не надо проверять Опрос.
		ИндексОпроса = ПроверяемыеРеквизиты.Найти("Опрос");
		Если НЕ (ИндексОпроса = Неопределено) Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексОпроса);			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Документ_КоммерческоеПредложениеКлиенту

// Функция - КППолучить варианты
//
// Параметры:
//  КоммерческоеПредложение	 - ДокументСсылка - Коммерческое предложение.
// 
// Возвращаемое значение:
//  СписокЗначений - Список вариантов.
//
Функция КППолучитьВарианты(КоммерческоеПредложение) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	// Запрос = Новый Запрос;
	// Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	ДокументТовары.CRM_ИДВарианта КАК ИДВарианта,
	//               |	ДокументТовары.CRM_Утвержден КАК Утвержден,
	//               |	МАКСИМУМ(ДокументТовары.CRM_ИмяВарианта) КАК ИмяВарианта
	//               |ИЗ
	//               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
	//               |ГДЕ
	//               |	ДокументТовары.Ссылка = &Ссылка
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ДокументТовары.CRM_ИДВарианта,
	//               |	ДокументТовары.CRM_Утвержден";
	//			   
	//Запрос.УстановитьПараметр("Ссылка", КоммерческоеПредложение);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	// Пока Выборка.Следующий() Цикл
	//	
	//	СписокВариантов.Добавить(Выборка.ИДВарианта, ?(ЗначениеЗаполнено(Выборка.ИмяВарианта),
		// Выборка.ИмяВарианта, НСтр("ru='Вариант ';en='Option'")+Строка(Выборка.ИДВарианта))
		//+?(Выборка.Утвержден,НСтр("ru=' (Утв.)'"),""),
		//Выборка.Утвержден);
	//	
	//КонецЦикла;
	
	ТаблицаВариантов = КоммерческоеПредложение.Товары.Выгрузить();
	ТаблицаВариантов.Свернуть("CRM_ИДВарианта, CRM_Утвержден, CRM_ИмяВарианта");
	ТаблицаВариантов.Колонки["CRM_ИДВарианта"].Имя = "ИДВарианта";
	ТаблицаВариантов.Колонки["CRM_Утвержден"].Имя = "Утвержден";
	ТаблицаВариантов.Колонки["CRM_ИмяВарианта"].Имя = "ИмяВарианта";
	Для Каждого Выборка Из ТаблицаВариантов Цикл
		
		СписокВариантов.Добавить(Выборка.ИДВарианта, ?(ЗначениеЗаполнено(Выборка.ИмяВарианта),
			 Выборка.ИмяВарианта, НСтр("ru='Вариант ';en='Option'") + Строка(Выборка.ИДВарианта)) 
			+ ?(Выборка.Утвержден, НСтр("ru=' (Утв.)'"), ""),
			 Выборка.Утвержден);
		
	КонецЦикла;
	
	СписокВариантов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Интерес_ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыПечатныхФорм.Ссылка КАК Ссылка,
		|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловияВидимости,
		|	МакетыПечатныхФорм.Используется КАК Используется,
		|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета,
		|	МакетыПечатныхФорм.Представление КАК Представление
		|ИЗ
		|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм";
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура("CRM_ИмяМакета", "");
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		// Коммерческое предложение (Microsoft Word)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_DOC_КоммерческоеПредложение";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложениеMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеMicrosoftWord";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Коммерческое предложение (Microsoft Word)';en='Quote (Microsoft Word)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Коммерческое предложение (Microsoft Word)';en='Quote (Microsoft Word)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Коммерческое предложение (OpenOffice.org Writer)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_ODT_КоммерческоеПредложение";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеOpenOfficeOrgWriter";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Коммерческое предложение (OpenOffice.org Writer)';en='Quote (OpenOffice.org Writer)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление =
				НСтр("ru='Коммерческое предложение (OpenOffice.org Writer)';en='Quote (OpenOffice.org Writer)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Договор (Microsoft Word)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_DOC_Договор";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьДоговорMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДоговорMicrosoftWord";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Договор (Microsoft Word)';en='Contract (Microsoft Word)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Договор (Microsoft Word)';en='Contract (Microsoft Word)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Договор (OpenOffice.org Writer)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_ODT_Договор";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьДоговорOpenOfficeOrgWriter";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДоговорOpenOfficeOrgWriter";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Договор (OpenOffice.org Writer)';en='Contract (OpenOffice.org Writer)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Договор (OpenOffice.org Writer)';en='Contract (OpenOffice.org Writer)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Коммерческое предложение (HTML)
	СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_HTML_КоммерческоеПредложение";
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложениеHTML";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КоммерческоеПредложениеHTML";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматHTML;
	Если НайденныеКоманды.Количество() > 0 Тогда
		КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
			 НайденныеКоманды[0].Представление,
			 НСтр("ru='Коммерческое предложение (HTML)';en='Quote (HTML)'"));
		КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
		
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					 Условие.Значение,
					 Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КомандаПечати.Представление = НСтр("ru='Коммерческое предложение (HTML)';en='Quote (HTML)'");
		КомандаПечати.Отключена = Истина;
	КонецЕсли;
	// Договор (HTML)
	СтруктураПоиска.CRM_ИмяМакета = "Документ.CRM_Интерес.CRM_ПФ_HTML_Договор";
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьДоговорHTML";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ДоговорHTML";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматHTML;
	Если НайденныеКоманды.Количество() > 0 Тогда
		КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
			 НайденныеКоманды[0].Представление,
			 НСтр("ru='Договор (HTML)';en='Contract (HTML)'"));
		КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
		
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					 Условие.Значение,
					 Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КомандаПечати.Представление = НСтр("ru='Договор (HTML)';en='Contract (HTML)'");
		КомандаПечати.Отключена = Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("CRM_ИмяМакета", "Документ.CRM_Интерес.CRM_ПФ_MXL_КоммерческоеПредложение");
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	УсловияВидимости = Новый Массив;
	Если НайденныеКоманды.Количество() > 0 Тогда
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
	КонецЕсли;
	
	Если ЭтоCRM Тогда
		// Коммерческое предложение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложение";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеКлиенту";
		КомандаПечати.Представление = НСтр("ru='Коммерческое предложение';en='Quote'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					Условие.Значение,
					Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		МодульКоммерческиеПредложенияДокументы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияДокументы");
		НастройкиУчета = МодульКоммерческиеПредложенияДокументы.НастройкиУчета();
		
		Если НастройкиУчета.НеВыводитьСкидкиВДокументахПродажи Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли НастройкиУчета.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту (со скидками)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту (без скидок)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			
			// Коммерческое предложение
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_Интерес_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "КоммерческоеПредложение";
			КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение клиенту'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// +CRM_Модуль
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_МетодыМодулейМенеджеровДокументов") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейМенеджеровДокументов");
		CRM_Модуль.Интерес_ДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

Функция Интерес_СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати,
	 КомплектыПечати,
	 ПараметрыПечати = Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_МетодыМодулейМенеджеровДокументов") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейМенеджеровДокументов");
		Возврат CRM_Модуль.Интерес_СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов,
			 ОбъектыПечати, КомплектыПечати,
			 ПараметрыПечати);
	КонецЕсли;
	
	// +CRM
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Ссылка КАК Ссылка,
	|	ДокументТовары.Ссылка.Организация КАК Организация,
	|	ДокументТовары.Ссылка.Организация.Префикс КАК Префикс,
	|	ДокументТовары.Ссылка.Дата КАК ДатаДокумента,
	|	ДокументТовары.Ссылка.Номер КАК Номер,
	|	ДокументТовары.Ссылка.Партнер КАК Партнер,
	|	ДокументТовары.Ссылка.Валюта КАК Валюта,
	|	ДокументТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.Количество КАК Количество,
	|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДокументТовары.Цена КАК Цена,
	|	ДокументТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ДокументТовары.Сумма КАК Сумма,
	|	ДокументТовары.СтавкаНДС КАК СтавкаНДС,
	|	ДокументТовары.СуммаНДС КАК СуммаНДС,
	|	ДокументТовары.Всего КАК Всего,
	|	ДокументТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ДокументТовары.ПроцентРучнойСкидки <> 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьСкидка
	|ИЗ
	|	Документ.CRM_Интерес.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ЕстьСкидка)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов"	, МассивОбъектов);
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("ПФ_MXL_КоммерческоеПредложение");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.CRM_Интерес.CRM_ПФ_MXL_КоммерческоеПредложение");
		
		CRM_УправлениеПечатью.ЗаполнитьТекстыПоШаблонуВМакете(Макет, ВыборкаДокументов.Ссылка);
		
		СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Организация,
			ВыборкаДокументов.ДатаДокумента);
		
		СведенияОбКонтрагенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Партнер,
			ВыборкаДокументов.ДатаДокумента);
		
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "CRM_ПечататьНомераДокументовБезПрефиксов") Тогда
			ФлагУдалитьПрефикс = Константы["CRM_ПечататьНомераДокументовБезПрефиксов"].Получить();
		Иначе
			ФлагУдалитьПрефикс = Ложь;
		КонецЕсли;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер,
			 ФлагУдалитьПрефикс,
			 ФлагУдалитьПрефикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Коммерческое предложение № ';en='Quote No. '")
												+ НомерДокумента
												+ НСтр("ru=' от ';en=' from '")
												+ Формат(ТекущаяДатаСеанса(), "ДФ=""dd MMMM yyyy""");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// поставщик и покупатель
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СведенияОбОрганизации.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СведенияОбКонтрагенте.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОтображатьСкидки = (ВыборкаДокументов.ЕстьСкидка > 0
			 И ПараметрыПечати.Свойство("ОтображатьСкидки")
			 И ПараметрыПечати.ОтображатьСкидки);
		Интерес_ВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаДокументов, ОтображатьСкидки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало,
			 ОбъектыПечати,
			 ВыборкаДокументов.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	// -CRM
	
КонецФункции

Процедура Интерес_ВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаВариантИд, ЕстьСкидки) Экспорт
	
	// шапка таблицы
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ИтогоПоРазделу 	= 0;
	ИтогоСумма 		= 0;
	ИтогоСуммаНДС 	= 0;
	ИтогоБезСкидок 	= 0;	
	
	Ном = 0;
	МассивИтогов = Новый Массив;
	МассивИтоговСкидок = Новый Массив;
	МассивРазделителей = Новый Массив;
	
	СтруктураДопИнф = Новый Структура("Характеристика, Серия"); 
	
	ОписаниеВарианта = "";
	
	// СтрокиТаблицы
	ВыборкаТовары = ВыборкаВариантИд.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОписаниеВарианта = "";
		
		Если ТипЗнч(ВыборкаТовары.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Ном = Ном + 1;
			// строки номенклатуры
			ОбластьНомера.Параметры.Ном = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(ВыборкаТовары);
			
			Если Не ЗначениеЗаполнено(ВыборкаТовары.ЕдиницаИзмерения) Тогда
				ОбластьДанных.Параметры.ЕдиницаИзмерения = ВыборкаТовары.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;			
			// +CRM
			ТипНоменклатуры = ВыборкаТовары.Номенклатура.ТипНоменклатуры;
			Если Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				СтруктураДопИнф.Характеристика = ВыборкаТовары.Характеристика;			
				ХарактеристикаНоменклатуры = КППредставлениеСерий(СтруктураДопИнф);
				ОбластьДанных.Параметры.Содержание = ?(ПустаяСтрока(ВыборкаТовары.Содержание),
					 ВыборкаТовары.Номенклатура.НаименованиеПолное,
					 ВыборкаТовары.Содержание) 
													 + ХарактеристикаНоменклатуры;
			Иначе	
				ОбластьДанных.Параметры.Содержание = ?(ПустаяСтрока(ВыборкаТовары.Содержание),
					 ВыборкаТовары.Номенклатура.НаименованиеПолное,
					 ВыборкаТовары.Содержание);
			КонецЕсли;	
			// -CRM
			
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка = ВыборкаТовары.Количество * ВыборкаТовары.Цена - ВыборкаТовары.Сумма;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаТовары.Количество * ВыборкаТовары.Цена;
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Ложь);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
				ИтогоБезСкидок = ИтогоБезСкидок + ОбластьСкидок.Параметры.СуммаБезСкидки;
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ВыборкаТовары.Сумма;
			ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			ИтогоСумма = ИтогоСумма + ВыборкаТовары.Сумма;
			ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаТовары.СуммаНДС;
			
			Если МассивИтогов.Количество() > 0 Тогда
				МассивИтогов[МассивИтогов.Количество() - 1] = МассивИтогов[МассивИтогов.Количество() - 1] + ВыборкаТовары.Сумма;
			КонецЕсли;
			Если МассивИтоговСкидок.Количество() > 0 Тогда
				МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] 
					+ (ВыборкаТовары.Количество * ВыборкаТовары.Цена - ВыборкаТовары.Сумма);
			КонецЕсли;
		Иначе
			Если МассивРазделителей.Количество() > 0 Тогда
				ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
				ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
				Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
				МассивИтогов.Удалить(МассивИтогов.Количество() - 1);
				МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
				МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
				Если Разделитель.Итог Тогда
					// Строки итогов по иерархии (итоги).
					ОбластьНомера.Параметры.Ном = "";
					ТабличныйДокумент.Вывести(ОбластьНомера);
					ОбластьДанных.Параметры.Содержание  = НСтр("ru='Итого по: ';en='Total by:'") + Строка(Разделитель);
					ОбластьДанных.Параметры.Номенклатура = Разделитель;
					ОбластьДанных.Параметры.Количество = "";
					ОбластьДанных.Параметры.Цена = "";
					ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
					ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					Если ЕстьСкидки Тогда
						ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина);
						ТабличныйДокумент.Присоединить(ОбластьСкидок);
					КонецЕсли;
					ОбластьСуммы.Параметры.Сумма = СокрЛП(CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоПоРазделу));
					ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
					ТабличныйДокумент.Присоединить(ОбластьСуммы);
					
				КонецЕсли;
			КонецЕсли;
			// Строки разделителей иерархии (заголовки).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = ВыборкаТовары.Номенклатура;
			ОбластьДанных.Параметры.Номенклатура = ВыборкаТовары.Номенклатура;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = "";
				ОбластьСкидок.Параметры.Скидка = "";
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = "";
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			МассивИтогов.Добавить(0);
			МассивИтоговСкидок.Добавить(0);
			Если НЕ ТипЗнч(ВыборкаТовары.Номенклатура) = Тип("Неопределено") Тогда 
				МассивРазделителей.Добавить(ВыборкаТовары.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИтогов.Количество() > 0 Тогда
		ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
		ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
		Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
		МассивИтогов.Удалить(МассивИтогов.Количество() - 1);
		МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
		МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
		Если Разделитель.Итог Тогда
			// Последняя строка итогов по иерархии (итоги).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = НСтр("ru='Итого по: ';en='Total by:'") + Строка(Разделитель);
			ОбластьДанных.Параметры.Номенклатура = Разделитель;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = СокрЛП(Формат(ИтогоПоРазделу, "ЧЦ=15; ЧДЦ=2"));
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;
	КонецЕсли;
	
	// итоги
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ИтогоБезСкидок;
		ОбластьСкидок.Параметры.ВсегоСкидок = ИтогоБезСкидок - ИтогоСумма;
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСумма);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	// итоги НДС
	// Если УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.НДС = ?(ВыборкаВариантИд.ЦенаВключаетНДС,
			 НСтр("ru='В том числе НДС:';en='Including VAT:'"),
			 НСтр("ru='Сумма НДС:'"));
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСуммаНДС);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
	//КонецЕсли;
	
	// сумма прописью
	
	СуммаКПрописи = ИтогоСумма + ?(ВыборкаВариантИд.ЦенаВключаетНДС, 0, ИтогоСуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';en='All items '") + Ном 
		+ НСтр("ru=', на сумму '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаКПрописи,
		 ВыборкаВариантИд.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи,
		 ВыборкаВариантИд.Валюта);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// заголовок таблицы
	Если ЗначениеЗаполнено(ОписаниеВарианта) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеВарианта");
		ОбластьМакета.Параметры.ПредставлениеОписания = ОписаниеВарианта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
КонецПроцедуры

Функция Интерес_ПолучитьДанныеПечати(Знач СтруктураДокументыИВариант, Знач МассивИменМакетов) Экспорт
	
	МассивДокументов = СтруктураДокументыИВариант.СоставДокументов;
	
	НомерВарианта = Неопределено;
	
	СтруктураДокументыИВариант.Свойство("НомерВарианта", НомерВарианта);
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета,
				 CRM_ОбщегоНазначенияСервер.CRM_ПолучитьДанныеОбъекта(ОбъектСсылка,
				 НомерВарианта));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета,
				 УправлениеПечатью.МакетПечатнойФормы("Документ.CRM_Интерес.CRM_ПФ_DOC_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		ИначеЕсли ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета,
				 УправлениеПечатью.МакетПечатнойФормы("Документ.CRM_Интерес.CRM_ПФ_ODT_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, КППолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
//  Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
// Параметры:
//  ДокументСсылка					 - ДокументСсылка - Источник получения данных.
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура КПИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц =
			СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Ссылка КАК Документ,
		|	ДокументТовары.Ссылка.Дата КАК Период,
		|	ДокументТовары.Ссылка.Партнер КАК Партнер,
		|	ДокументТовары.Ссылка.CRM_Проект КАК Проект,
		|	ДокументТовары.Ссылка.CRM_Подразделение КАК Подразделение,
		|	&Организация КАК Организация,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристики
		|			ТОГДА ДокументТовары.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДокументТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА ДокументТовары.Количество
		|		ИНАЧЕ ДокументТовары.Количество * ДокументТовары.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Количество,
		|	ДокументТовары.СтавкаНДС КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|	ВЫРАЗИТЬ(ДокументТовары.Всего * ДокументТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * ДокументТовары.Ссылка.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВЫРАЗИТЬ((ДокументТовары.Цена * ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ДокументТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|				ТОГДА ДокументТовары.Количество
		|			ИНАЧЕ ДокументТовары.Количество * ДокументТовары.ЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ДокументТовары.Ссылка.ЦенаВключаетНДС
		|				ТОГДА 0
		|			ИНАЧЕ ДокументТовары.СуммаНДС
		|		КОНЕЦ) * ДокументТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * ДокументТовары.Ссылка.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаБезСкидок,
		|	0 КАК СуммаНДСВал,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ДокументТовары.Ссылка.Валюта = &ВалютаРегламентированногоУчета
		|				ТОГДА ДокументТовары.Всего * КурсыРегВалюты.Курс * ДокументТовары.Ссылка.Кратность / (ДокументТовары.Ссылка.Курс * КурсыРегВалюты.Кратность)
		|			ИНАЧЕ ДокументТовары.Всего
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
		|	ДокументТовары.Всего КАК Всего,
		|	ДокументТовары.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&МоментВремени,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						Константы.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
		|					ИЗ
		|						Константы КАК Константы)) КАК КурсыУпрВалюты
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаРегламентированногоУчета) КАК КурсыРегВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДокументТовары.Ссылка = &Ссылка И ДокументТовары.Номенклатура ССЫЛКА Справочник.Номенклатура И ДокументТовары.CRM_Утвержден;";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
		Запрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
		Запрос.УстановитьПараметр("ИспользоватьХарактеристики",
			 СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		
	Иначе
		
		МодульРаботаСКурсамивалютУТ = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамиВалютУТ");
		
		Коэффициенты = МодульРаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ДокументСсылка.Валюта,
			 ДокументСсылка.Валюта, ДокументСсылка.Дата,
			 ДокументСсылка.Организация);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц =
			СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КоммерческоеПредложениеТовары.НомерСтроки КАК НомерСтроки,
		|	КоммерческоеПредложениеТовары.Ссылка КАК Документ,
		|	КоммерческоеПредложениеТовары.Ссылка.Дата КАК Период,
		|	КоммерческоеПредложениеТовары.Ссылка.Клиент КАК Партнер,
		|	КоммерческоеПредложениеТовары.Ссылка.CRM_Проект КАК Проект,
		|	КоммерческоеПредложениеТовары.Ссылка.CRM_Подразделение КАК Подразделение,
		|	&Организация КАК Организация,
		|	КоммерческоеПредложениеТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристики
		|			ТОГДА КоммерческоеПредложениеТовары.Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
		|	КоммерческоеПредложениеТовары.Количество КАК Количество,
		|	КоммерческоеПредложениеТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВЫРАЗИТЬ(КоммерческоеПредложениеТовары.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
		|	КоммерческоеПредложениеТовары.СуммаНДС КАК СуммаНДСВал,
		|	ВЫРАЗИТЬ(КоммерческоеПредложениеТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК Всего,
		|	ВЫРАЗИТЬ(КоммерческоеПредложениеТовары.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	КоммерческоеПредложениеТовары.СуммаСНДС КАК СуммаВал,
		|	ВЫРАЗИТЬ((КоммерческоеПредложениеТовары.Цена * КоммерческоеПредложениеТовары.Количество) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаБезСкидок,
		|	ВЫРАЗИТЬ(КоммерческоеПредложениеТовары.Цена * КоммерческоеПредложениеТовары.Количество КАК ЧИСЛО(15, 2)) КАК СуммаБезСкидокВал,
		|	КоммерческоеПредложениеТовары.Ссылка.Валюта КАК ВалютаРасчетов
		|ПОМЕСТИТЬ ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеТовары
		|ГДЕ
		|	КоммерческоеПредложениеТовары.Ссылка = &Ссылка
		|	И КоммерческоеПредложениеТовары.Номенклатура ССЫЛКА Справочник.Номенклатура
		|	И КоммерческоеПредложениеТовары.CRM_Утвержден = ИСТИНА";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
		Запрос.УстановитьПараметр("ИспользоватьХарактеристики",
			 СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
		Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",           Коэффициенты.КоэффициентПересчетаВВалютуУПР);
		Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
		
	КонецЕсли;
	
	Запрос.ВыполнитьПакет();
	
	СформироватьТаблицаПредложения(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура КППолучитьКонтактныеДанные(ОбъектСсылка, СтруктураДанных) Экспорт
	
	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		Попытка
			ВидКИ = Справочники.ВидыКонтактнойИнформации[КлючИЗначение.Ключ];
			НайденаяСтрока = ОбъектСсылка.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
		Исключение
			НайденаяСтрока = ОбъектСсылка.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации["Телефон"], "Тип");
		КонецПопытки;
		Если НЕ НайденаяСтрока = Неопределено Тогда
			СтруктураДанных[КлючИЗначение.Ключ] = НайденаяСтрока.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция - КППолучить данные объекта
//
// Параметры:
//  СсылкаНаОбъект	 - 	 - 
//  НомерВарианта	 - 	 - 
// 
// Возвращаемое значение:
//  Структура -  Данные объекта
//
Функция КППолучитьДанныеОбъекта(СсылкаНаОбъект, Знач НомерВарианта = Неопределено) Экспорт
		
	Объект = СсылкаНаОбъект.ПолучитьОбъект();	
	
	Если НомерВарианта = Неопределено Тогда
		
		// Печатаем утвержденный вариант.
		
		СтрокаУтвержденного = Объект.Товары.Найти(Истина, "CRM_Утвержден");
		
		Если Не СтрокаУтвержденного = Неопределено Тогда
			
			НомерВарианта = СтрокаУтвержденного.CRM_ИДВарианта;
			
		Иначе
			
			НомерВарианта = 0;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ДанныеОбъекта = Новый Структура;
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "CRM_ПечататьНомераДокументовБезПрефиксов") Тогда
		ФлагУдалитьПрефикс = Константы["CRM_ПечататьНомераДокументовБезПрефиксов"].Получить();
	Иначе
		ФлагУдалитьПрефикс = Ложь;
	КонецЕсли;
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, ФлагУдалитьПрефикс, ФлагУдалитьПрефикс);
	
	ДанныеОбъекта.Вставить("Дата",	Формат(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), "ДЛФ=D"));
	ДанныеОбъекта.Вставить("Номер",	НомерДокумента);
	
	СведенияОбОрганизации	= CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Объект.Организация,
		 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	НаименованиеОрганизации	= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	АдресОрганизации		= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес");
	ТелефоныОрганизации		= CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "Телефоны");
	
	СведенияОКонтрагенте	= CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Объект.Партнер,
		 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	НаименованиеКонтрагента = CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
	
	ДанныеОбъекта.Вставить("Организация",	НаименованиеОрганизации);
	
	ДанныеОбъекта.Вставить("АдресОрганизации",	АдресОрганизации);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",	ТелефоныОрганизации);
	ДанныеОбъекта.Вставить("ТелефонОрганизации_1",	ТелефоныОрганизации);
	
	ДанныеОбъекта.Вставить("Клиент",		НаименованиеКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		
		КЛ_Контрагента = Объект.КонтактноеЛицо;
		
	Иначе
		
		КЛ_Контрагента = КПВернутьКЛКонтрагента(Объект.Партнер);
		
	КонецЕсли;	
	
	ДанныеОбъекта.Вставить("КонтактноеЛицо",	КЛ_Контрагента);
	ДанныеОбъекта.Вставить("КонтактноеЛицо_1",	КЛ_Контрагента);
	
	НадписьУважаемый = "Уважаемый(ая)";
	
	Если ЗначениеЗаполнено(КЛ_Контрагента) И ЗначениеЗаполнено(КЛ_Контрагента.Пол) Тогда
		
		Если КЛ_Контрагента.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
	
			НадписьУважаемый = "Уважаемый";
	
		Иначе
	
			НадписьУважаемый = "Уважаемая";
	
		КонецЕсли;	
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Уважаемый",	НадписьУважаемый);
	
	ДанныеОбъекта.Вставить("Ответственный",	Объект.Менеджер);
	ДанныеОбъекта.Вставить("Ответственный_1",	Объект.Менеджер);
	
	СтруктураДанных = Новый Структура("Телефон, EmailПользователя", "", "");
	
	Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
		КППолучитьКонтактныеДанные(Объект.Менеджер, СтруктураДанных);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ТелефонОтветственного",	СтруктураДанных.Телефон);
	ДанныеОбъекта.Вставить("EmailОтветственного",	СтруктураДанных.EmailПользователя);
	
	ДанныеОбъекта.Вставить("ИсходныеУсловия",	Объект.CRM_ИсходныеУсловия);
	
	ДанныеОбъекта.Вставить("ПорядокВыполненияРабот", Объект.CRM_ПорядокВыполненияРабот);
	
	ДанныеОбъекта.Вставить("Варианты", Новый Массив);
	
	//ДанныеОбъекта.Вставить("Товары", Новый Массив);
		
	СписокВариантов = КППолучитьВарианты(СсылкаНаОбъект);
	
	Для Каждого ЭлементСписка Из СписокВариантов Цикл
		Если (Не НомерВарианта = 0) И НЕ ЭлементСписка.Значение = НомерВарианта Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогоБезСкидки = 0;
		
		ИтоговаяСумма	 = 0;
		ИтоговаяСуммаНДС = 0;
		
		НомерСтрокиПоПорядку = 0;
		
		ЕстьРазделители = Ложь;
		
		ТекущийРазделитель = Неопределено;
		
		ИтогПоРазделу = 0;	
		
		СтруктураВарианта = Новый Структура;
		СтруктураВарианта.Вставить("идВарианта", ЭлементСписка.Значение);
		СтруктураВарианта.Вставить("Утвержден", ЭлементСписка.Пометка);
		СтруктураВарианта.Вставить("СтрокаВарианта", "Вариант " + Строка(ЭлементСписка.Значение) 
			+ ?(ЭлементСписка.Пометка, " (Утвержден)",
			 ""));
		СтруктураВарианта.Вставить("Товары", Новый Массив);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
			Если СтрокаТабличнойЧасти.CRM_ИДВарианта = ЭлементСписка.Значение Тогда
				
				СтрокаТаблицыТовары = Новый Структура;
				
				Если СтрокаТабличнойЧасти.CRM_ЭтоРазделитель Тогда
					
					Если Не ТекущийРазделитель = Неопределено И ТекущийРазделитель.Итог Тогда
						
						// Если предусмотрен вывод итогов, добавим строку с итогами в массив.
						СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
						СтрокаТаблицыТовары.Вставить("Номенклатура",	"Итого по " + ТекущийРазделитель + ":");
						СтрокаТаблицыТовары.Вставить("Количество",		" ");
						СтрокаТаблицыТовары.Вставить("Цена",			" ");
						СтрокаТаблицыТовары.Вставить("Единица",			" ");
						СтрокаТаблицыТовары.Вставить("Скидка",			" ");
						СтрокаТаблицыТовары.Вставить("Сумма",			Формат(ИтогПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "ИтогПоРазделу");
						
						СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
								
						СтрокаТаблицыТовары = Новый Структура;
							
					КонецЕсли;	
					
					СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
					СтрокаТаблицыТовары.Вставить("Номенклатура",	СтрокаТабличнойЧасти.Номенклатура);
					СтрокаТаблицыТовары.Вставить("Количество",		" ");
					СтрокаТаблицыТовары.Вставить("Цена",			" ");
					СтрокаТаблицыТовары.Вставить("Единица",			" ");
					СтрокаТаблицыТовары.Вставить("Скидка",			" ");
					СтрокаТаблицыТовары.Вставить("Сумма",			" ");
					СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "Разделитель");
					
					ЕстьРазделители = Истина;
							
					ТекущийРазделитель = СтрокаТабличнойЧасти.Номенклатура;
						
					ИтогПоРазделу = 0;
						
				Иначе
					
					НомерСтрокиПоПорядку = НомерСтрокиПоПорядку + 1;
					
					СтрокаТаблицыТовары.Вставить("НомерСтроки",		НомерСтрокиПоПорядку);
					СтрокаТаблицыТовары.Вставить("Номенклатура",
							?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание), СтрокаТабличнойЧасти.Содержание,
						 СтрокаТабличнойЧасти.Номенклатура));
					СтрокаТаблицыТовары.Вставить("Количество",		Формат(СтрокаТабличнойЧасти.Количество, "ЧЦ=15; ЧДЦ=3"));
					СтрокаТаблицыТовары.Вставить("Цена",			Формат(СтрокаТабличнойЧасти.Цена, "ЧЦ=15; ЧДЦ=2"));
					СтрокаТаблицыТовары.Вставить("Единица",			СтрокаТабличнойЧасти.ЕдиницаИзмерения);				
					
					СуммаБезСкидки	= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					СкидкаНаценка	= ?(СуммаБезСкидки >= СтрокаТабличнойЧасти.Сумма,
						 СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма,
						 СтрокаТабличнойЧасти.Сумма - СуммаБезСкидки);
					
					ИтогоБезСкидки = ИтогоБезСкидки + СуммаБезСкидки;
					
					СтрокаТаблицыТовары.Вставить("Скидка",			Формат(СкидкаНаценка, "ЧЦ=15; ЧДЦ=2"));
					СтрокаТаблицыТовары.Вставить("Сумма",			Формат(СтрокаТабличнойЧасти.Сумма, "ЧЦ=15; ЧДЦ=2"));
					
					ИтоговаяСумма    = ИтоговаяСумма    + СтрокаТабличнойЧасти.Сумма;
					ИтоговаяСуммаНДС = ИтоговаяСуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
					
					ИтогПоРазделу = ИтогПоРазделу + СтрокаТабличнойЧасти.Сумма;
					
					СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "Номенклатура");				
				КонецЕсли;
				
				СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);
				
			КонецЕсли;
			
		КонецЦикла;

		// Итоги по последнему разделителю не выведены в цикле
		// если предусмотрен вывод итогов, добавим строку с итогами в массив.
		Если Не ТекущийРазделитель = Неопределено И ТекущийРазделитель.Итог Тогда
			
			СтрокаТаблицыТовары = Новый Структура;		
			
			СтрокаТаблицыТовары.Вставить("НомерСтроки",		" ");
			СтрокаТаблицыТовары.Вставить("Номенклатура",	"Итого по " + ТекущийРазделитель + ":");
			СтрокаТаблицыТовары.Вставить("Количество",		" ");
			СтрокаТаблицыТовары.Вставить("Цена",			" ");
			СтрокаТаблицыТовары.Вставить("Единица",			" ");
			СтрокаТаблицыТовары.Вставить("Скидка",			" ");
			СтрокаТаблицыТовары.Вставить("Сумма",			Формат(ИтогПоРазделу, "ЧЦ=15; ЧДЦ=2"));
			СтрокаТаблицыТовары.Вставить("ТипСтроки",	    "ИтогПоРазделу");
			
			СтруктураВарианта.Товары.Добавить(СтрокаТаблицыТовары);		
				
		КонецЕсли;	

		СтруктураВарианта.Вставить("ЕстьРазделители", ЕстьРазделители);
		
		// выводим итоги
		
		СтруктураВарианта.Вставить("Всего",	Формат(ИтоговаяСумма, "ЧЦ=15; ЧДЦ=2"));
		
		Если ИтоговаяСуммаНДС = 0 Тогда
			СтруктураВарианта.Вставить("СтрокаНДС", НСтр("ru='без налога (НДС)';en='Without tax (VAT)'"));
			СтруктураВарианта.Вставить("ВсегоНДС", "");
		Иначе
			СтруктураВарианта.Вставить("СтрокаНДС", ?(Объект.ЦенаВключаетНДС,
				 НСтр("ru='в том числе НДС:';en='Including VAT:'"),
				 НСтр("ru='Сумма НДС:'")));
			СтруктураВарианта.Вставить("ВсегоНДС",  Формат(ИтоговаяСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли; 
		
		СтруктураВарианта.Вставить("ВсегоКОплате",	Формат(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС, 0,
			 ИтоговаяСуммаНДС),
			 "ЧЦ=15; ЧДЦ=2"));
		
		СтруктураВарианта.Вставить("ТелефонОтвественного",	СтруктураДанных.Телефон);
		СтруктураВарианта.Вставить("EmailОтвественного",	СтруктураДанных.EmailПользователя);

		СтруктураВарианта.Вставить("СтоимостьПропись",	НРег(РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговаяСумма + ?(Объект.ЦенаВключаетНДС,
			 0,
			 ИтоговаяСуммаНДС), Объект.Валюта)));
		ДанныеОбъекта.Варианты.Добавить(СтруктураВарианта);
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Валюта",		Объект.Валюта);
	ДанныеОбъекта.Вставить("Валюта_1",		Объект.Валюта);
	ДанныеОбъекта.Вставить("Курс",			Формат(Объект.Курс, "ЧЦ=10; ЧДЦ=4"));
	ДанныеОбъекта.Вставить("Кратность",		Формат(Объект.Кратность, "ЧЦ=10"));
	ДанныеОбъекта.Вставить("Комментарий",	Объект.Комментарий);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция КППолучитьОписаниеОбластейМакетаОфисногоДокумента() Экспорт
	
	ОписаниеОбластей = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижнийКолонтитул",		"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "НижняяЧасть",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаРазделительТаблицаТовары",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаИтогиПоРазделуТаблицаТовары", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ИтогиТаблицаТовары",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТоварыТекст",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыНоменклатура",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыНоменклатура",		"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТоварыВсего",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТоварыВсего",			"Список");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОписаниеВарианта",			"Общая");
		
	Возврат ОписаниеОбластей;
	
КонецФункции

// Формирует описание серий и характеристик ТМЦ для печати.
//
// Параметры:
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ.
//
Функция КППредставлениеСерий(Выборка) 

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

Процедура КПВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаВариантИд, ЕстьСкидки) Экспорт
	
	// шапка таблицы
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ИтогоПоРазделу 	= 0;
	ИтогоСумма 		= 0;
	ИтогоСуммаНДС 	= 0;
	ИтогоБезСкидок 	= 0;	
	
	Ном = 0;
	МассивИтогов = Новый Массив;
	МассивИтоговСкидок = Новый Массив;
	МассивРазделителей = Новый Массив;
	
	СтруктураДопИнф = Новый Структура("Характеристика, Серия"); 
	
	ОписаниеВарианта = "";
	
	// СтрокиТаблицы
	ВыборкаТовары = ВыборкаВариантИд.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		
		ОписаниеВарианта = ВыборкаТовары.КомментарийВарианта;
		
		Если ТипЗнч(ВыборкаТовары.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Ном = Ном + 1;
			// строки номенклатуры
			ОбластьНомера.Параметры.Ном = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(ВыборкаТовары);
			
			Если Не ЗначениеЗаполнено(ВыборкаТовары.ЕдиницаИзмерения) Тогда
				ОбластьДанных.Параметры.ЕдиницаИзмерения = ВыборкаТовары.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;			
			// +CRM
			ТипНоменклатуры = ВыборкаТовары.Номенклатура.ТипНоменклатуры;
			Если Не ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				СтруктураДопИнф.Характеристика = ВыборкаТовары.Характеристика;			
				ХарактеристикаНоменклатуры = КППредставлениеСерий(СтруктураДопИнф);
				ОбластьДанных.Параметры.Содержание = ?(ПустаяСтрока(ВыборкаТовары.Содержание),
					 ВыборкаТовары.Номенклатура.НаименованиеПолное,
					 ВыборкаТовары.Содержание) 
													 + ХарактеристикаНоменклатуры;
			Иначе	
				ОбластьДанных.Параметры.Содержание = ?(ПустаяСтрока(ВыборкаТовары.Содержание),
					 ВыборкаТовары.Номенклатура.НаименованиеПолное,
					 ВыборкаТовары.Содержание);
			КонецЕсли;	
			// -CRM
			
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.Скидка = ВыборкаТовары.Количество * ВыборкаТовары.Цена - ВыборкаТовары.Сумма;
				ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаТовары.Количество * ВыборкаТовары.Цена;
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Ложь);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
				ИтогоБезСкидок = ИтогоБезСкидок + ОбластьСкидок.Параметры.СуммаБезСкидки;
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ВыборкаТовары.Сумма;
			ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Ложь);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			ИтогоСумма = ИтогоСумма + ВыборкаТовары.Сумма;
			ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаТовары.СуммаНДС;
			
			Если МассивИтогов.Количество() > 0 Тогда
				МассивИтогов[МассивИтогов.Количество() - 1] = МассивИтогов[МассивИтогов.Количество() - 1] + ВыборкаТовары.Сумма;
			КонецЕсли;
			Если МассивИтоговСкидок.Количество() > 0 Тогда
				МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1] 
					+ (ВыборкаТовары.Количество * ВыборкаТовары.Цена - ВыборкаТовары.Сумма);
			КонецЕсли;
		Иначе
			Если МассивРазделителей.Количество() > 0 Тогда
				ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
				ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
				Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
				МассивИтогов.Удалить(МассивИтогов.Количество() - 1);
				МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
				МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
				Если Разделитель.Итог Тогда
					// Строки итогов по иерархии (итоги).
					ОбластьНомера.Параметры.Ном = "";
					ТабличныйДокумент.Вывести(ОбластьНомера);
					ОбластьДанных.Параметры.Содержание  = НСтр("ru='Итого по: ';en='Total by:'") + Строка(Разделитель);
					ОбластьДанных.Параметры.Номенклатура = Разделитель;
					ОбластьДанных.Параметры.Количество = "";
					ОбластьДанных.Параметры.Цена = "";
					ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
					ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					Если ЕстьСкидки Тогда
						ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
						ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
						ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина);
						ТабличныйДокумент.Присоединить(ОбластьСкидок);
					КонецЕсли;
					ОбластьСуммы.Параметры.Сумма = СокрЛП(CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоПоРазделу));
					ОбластьСуммы.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
					ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
					ТабличныйДокумент.Присоединить(ОбластьСуммы);
					
				КонецЕсли;
			КонецЕсли;
			// Строки разделителей иерархии (заголовки).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = ВыборкаТовары.Номенклатура;
			ОбластьДанных.Параметры.Номенклатура = ВыборкаТовары.Номенклатура;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = "";
				ОбластьСкидок.Параметры.Скидка = "";
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = "";
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
			МассивИтогов.Добавить(0);
			МассивИтоговСкидок.Добавить(0);
			Если НЕ ТипЗнч(ВыборкаТовары.Номенклатура) = Тип("Неопределено") Тогда 
				МассивРазделителей.Добавить(ВыборкаТовары.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИтогов.Количество() > 0 Тогда
		ИтогоПоРазделу = МассивИтогов[МассивИтогов.Количество() - 1];
		ИтогоСкидкаПоРазделу = МассивИтоговСкидок[МассивИтоговСкидок.Количество() - 1];
		Разделитель = МассивРазделителей[МассивРазделителей.Количество() - 1];
		МассивИтогов.Удалить(МассивИтогов.Количество() - 1);
		МассивИтоговСкидок.Удалить(МассивИтоговСкидок.Количество() - 1);
		МассивРазделителей.Удалить(МассивРазделителей.Количество() - 1);
		Если Разделитель.Итог Тогда
			// Последняя строка итогов по иерархии (итоги).
			ОбластьНомера.Параметры.Ном = "";
			ТабличныйДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Содержание  = НСтр("ru='Итого по: ';en='Total by:'") + Строка(Разделитель);
			ОбластьДанных.Параметры.Номенклатура = Разделитель;
			ОбластьДанных.Параметры.Количество = "";
			ОбластьДанных.Параметры.Цена = "";
			ОбластьДанных.Параметры.ЕдиницаИзмерения = "";
			ОбластьДанных.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.СуммаБезСкидки = СокрЛП(Формат(ИтогоПоРазделу + ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Параметры.Скидка = СокрЛП(Формат(ИтогоСкидкаПоРазделу, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСкидок.Область(1, 1, 1, 2).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				ОбластьСкидок.Область(1, 1, 1, 2).Шрифт = Новый Шрифт(, , Истина);
				ТабличныйДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = СокрЛП(Формат(ИтогоПоРазделу, "ЧЦ=15; ЧДЦ=2"));
			ОбластьСуммы.Область(1, 1, 1, 1).Шрифт = Новый Шрифт(, , Истина);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			
		КонецЕсли;
	КонецЕсли;
	
	// итоги
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ИтогоБезСкидок;
		ОбластьСкидок.Параметры.ВсегоСкидок = ИтогоБезСкидок - ИтогоСумма;
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСумма);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	// итоги НДС
	// Если УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.НДС = ?(ВыборкаВариантИд.ЦенаВключаетНДС,
			 НСтр("ru='В том числе НДС:';en='Including VAT:'"),
			 НСтр("ru='Сумма НДС:'"));
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогоСуммаНДС);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
	//КонецЕсли;
	
	// сумма прописью
	
	СуммаКПрописи = ИтогоСумма + ?(ВыборкаВариантИд.ЦенаВключаетНДС, 0, ИтогоСуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';en='All items '") + Ном 
		+ НСтр("ru=', на сумму '") + CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаКПрописи,
		 ВыборкаВариантИд.Валюта);
	ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи,
		 ВыборкаВариантИд.Валюта);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// заголовок таблицы
	Если ЗначениеЗаполнено(ОписаниеВарианта) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеВарианта");
		ОбластьМакета.Параметры.ПредставлениеОписания = ОписаниеВарианта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_ДобавитьКомандыПечати(КомандыПечати) Экспорт

	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыПечатныхФорм.Ссылка КАК Ссылка,
		|	МакетыПечатныхФорм.УсловиеВидимости КАК УсловияВидимости,
		|	МакетыПечатныхФорм.Используется КАК Используется,
		|	МакетыПечатныхФорм.CRM_ИмяМакета КАК CRM_ИмяМакета,
		|	МакетыПечатныхФорм.Представление КАК Представление
		|ИЗ
		|	Справочник.МакетыПечатныхФорм КАК МакетыПечатныхФорм";
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	СтруктураПоиска = Новый Структура("CRM_ИмяМакета", "");
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		// Коммерческое предложение (Microsoft Word)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_DOC_КоммерческоеПредложение";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложениеMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеMicrosoftWord";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Коммерческое предложение (Microsoft Word)';en='Quote (Microsoft Word)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Коммерческое предложение (Microsoft Word)';en='Quote (Microsoft Word)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Коммерческое предложение (OpenOffice.org Writer)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_ODT_КоммерческоеПредложение";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеOpenOfficeOrgWriter";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Коммерческое предложение (OpenOffice.org Writer)';en='Quote (OpenOffice.org Writer)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление =
				НСтр("ru='Коммерческое предложение (OpenOffice.org Writer)';en='Quote (OpenOffice.org Writer)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Договор (Microsoft Word)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_DOC_Договор";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьДоговорMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДоговорMicrosoftWord";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Договор (Microsoft Word)';en='Contract (Microsoft Word)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Договор (Microsoft Word)';en='Contract (Microsoft Word)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
		// Договор (OpenOffice.org Writer)
		СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_ODT_Договор";
		НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьДоговорOpenOfficeOrgWriter";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДоговорOpenOfficeOrgWriter";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматOpenOfficeWriter;
		Если НайденныеКоманды.Количество() > 0 Тогда
			КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
				 НайденныеКоманды[0].Представление,
				 НСтр("ru='Договор (OpenOffice.org Writer)';en='Contract (OpenOffice.org Writer)'"));
			КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
			
			УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						 Условие.Значение,
						 Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомандаПечати.Представление = НСтр("ru='Договор (OpenOffice.org Writer)';en='Contract (OpenOffice.org Writer)'");
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Коммерческое предложение (HTML)
	СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_HTML_КоммерческоеПредложение";
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложениеHTML";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КоммерческоеПредложениеHTML";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматHTML;
	Если НайденныеКоманды.Количество() > 0 Тогда
		КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
			 НайденныеКоманды[0].Представление,
			 НСтр("ru='Коммерческое предложение (HTML)';en='Quote (HTML)'"));
		КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
		
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					 Условие.Значение,
					 Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КомандаПечати.Представление = НСтр("ru='Коммерческое предложение (HTML)';en='Quote (HTML)'");
		КомандаПечати.Отключена = Истина;
	КонецЕсли;
	
	// Договор (HTML)
	СтруктураПоиска.CRM_ИмяМакета = "Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_HTML_Договор";
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьДоговорHTML";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "ДоговорHTML";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматHTML;
	Если НайденныеКоманды.Количество() > 0 Тогда
		КомандаПечати.Представление = ?(НайденныеКоманды[0].Используется,
			 НайденныеКоманды[0].Представление,
			 НСтр("ru='Договор (HTML)';en='Contract (HTML)'"));
		КомандаПечати.Отключена = Не НайденныеКоманды[0].Используется;
		
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					 Условие.Значение,
					 Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КомандаПечати.Представление = НСтр("ru='Договор (HTML)';en='Contract (HTML)'");
		КомандаПечати.Отключена = Истина;
	КонецЕсли;
	
	// Коммерческое предложение
	СтруктураПоиска = Новый Структура("CRM_ИмяМакета", "Документ.CRM_Интерес.CRM_ПФ_MXL_КоммерческоеПредложение");
	НайденныеКоманды = ТаблицаКоманд.НайтиСтроки(СтруктураПоиска);
	УсловияВидимости = Новый Массив;
	Если НайденныеКоманды.Количество() > 0 Тогда
		УсловияВидимости = НайденныеКоманды[0].УсловияВидимости.Получить();
	КонецЕсли;
	
	Если ЭтоCRM Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КоммерческоеПредложениеКлиенту";
		КомандаПечати.Представление = НСтр("ru='Коммерческое предложение';en='Quote'");
		КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если ЗначениеЗаполнено(УсловияВидимости) Тогда
			Для Каждого Условие Из УсловияВидимости Цикл
				ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
					Условие.Значение,
					Условие.ВидСравнения);
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		МодульКоммерческиеПредложенияДокументы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияДокументы");
		НастройкиУчета = МодульКоммерческиеПредложенияДокументы.НастройкиУчета();
		
		Если НастройкиУчета.НеВыводитьСкидкиВДокументахПродажи Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли НастройкиУчета.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту (со скидками)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор                  = "КоммерческоеПредложение";
			КомандаПечати.Представление                  = НСтр("ru = 'Коммерческое предложение клиенту (без скидок)'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
		Иначе
			
			// Коммерческое предложение
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьКоммерческоеПредложение";
			КомандаПечати.МенеджерПечати = "";
			КомандаПечати.Идентификатор = "КоммерческоеПредложение";
			КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение клиенту'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
			
			Если ЗначениеЗаполнено(УсловияВидимости) Тогда
				Для Каждого Условие Из УсловияВидимости Цикл
					ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Условие.Реквизит,
						Условие.Значение,
						Условие.ВидСравнения);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция КП_ПолучитьДанныеПечати(Знач СтруктураДокументыИВариант, Знач МассивИменМакетов) Экспорт
	
	МассивДокументов = СтруктураДокументыИВариант.СоставДокументов;
	
	НомерВарианта = Неопределено;
	
	СтруктураДокументыИВариант.Свойство("НомерВарианта", НомерВарианта);
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета,
				 CRM_ОбщегоНазначенияСервер.CRM_ПолучитьДанныеОбъекта(ОбъектСсылка,
				 НомерВарианта));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "CRM_ПФ_DOC_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета,
				 УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_DOC_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		ИначеЕсли ИмяМакета = "CRM_ПФ_ODT_КоммерческоеПредложение" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета,
				 УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_ODT_КоммерческоеПредложение"));
			ТипыМакетов.Вставить(ИмяМакета, "ODT");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, КППолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

Функция КП_СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати,
	КомплектыПечати,
	ПараметрыПечати = Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_МетодыМодулейМенеджеровДокументов") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейМенеджеровДокументов");
		Возврат CRM_Модуль.КП_СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов,
			 ОбъектыПечати, КомплектыПечати,
			 ПараметрыПечати);
	КонецЕсли;
	
	// +CRM
	УстановитьПривилегированныйРежим(Истина);
	Если Не (ПараметрыПечати = Неопределено) И ПараметрыПечати.Свойство("НомерВарианта") Тогда
		НомерВарианта = ПараметрыПечати.НомерВарианта;
	Иначе
		НомерВарианта = Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	
	Если НомерВарианта = Неопределено Тогда // Печать нескольких документов.
		
		ТекстВременныхТаблиц = "";
		ТекстТаблиц = "";
		
		Для Индекс = 0 По МассивОбъектов.ВГраница() Цикл
			
			ТекстВременныхТаблиц = ТекстВременныхТаблиц + "
			|ВЫБРАТЬ
			|	ДокументТовары.Ссылка КАК Ссылка,
			|	ДокументТовары.CRM_ИДВарианта КАК ИДВарианта,
			|	ДокументТовары.CRM_Утвержден КАК Утвержден
			|ПОМЕСТИТЬ Временная" + Строка(Индекс) + "
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
			|ГДЕ
			|	ДокументТовары.Ссылка = &Ссылка" + Строка(Индекс) + "
			|	И ДокументТовары.CRM_Утвержден
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументТовары.Ссылка,
			|	ДокументТовары.CRM_ИДВарианта,
			|	ДокументТовары.CRM_Утвержден КАК Утвержден
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
			|ГДЕ
			|	ДокументТовары.Ссылка = &Ссылка" + Строка(Индекс) + "
			|	И ДокументТовары.CRM_ИДВарианта = 1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////";
			
			Если ТекстТаблиц = "" Тогда
				ТекстТаблиц = ТекстТаблиц + "
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Ссылка,
				|	ВложенныйЗапрос.ИДВарианта,
				|	ВложенныйЗапрос.Утвержден
				|ПОМЕСТИТЬ ВариантыИтог";
			Иначе
				ТекстТаблиц = ТекстТаблиц + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Ссылка,
				|	ВложенныйЗапрос.ИДВарианта,
				|	ВложенныйЗапрос.Утвержден";
			КонецЕсли;
			ТекстТаблиц = ТекстТаблиц + "
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		Временная" + Строка(Индекс) + ".Ссылка КАК Ссылка,
			|		Временная" + Строка(Индекс) + ".ИДВарианта КАК ИДВарианта,
			|		Временная" + Строка(Индекс) + ".Утвержден КАК Утвержден
			|	ИЗ
			|		Временная" + Строка(Индекс) + " КАК Временная" + Строка(Индекс) + ") КАК ВложенныйЗапрос";
			
			Запрос.УстановитьПараметр("Ссылка" + Строка(Индекс), МассивОбъектов[Индекс]);
		КонецЦикла;
		
		ТекстЗапроса = ТекстВременныхТаблиц + ТекстТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументТовары.Ссылка КАК Ссылка,
		|	ДокументТовары.Ссылка.Организация КАК Организация,
		|	ДокументТовары.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументТовары.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументТовары.Ссылка.Номер КАК Номер,
		|	ДокументТовары.Ссылка.Партнер КАК Партнер,
		|	ДокументТовары.Ссылка.Валюта КАК Валюта,
		|	ДокументТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ДокументТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДокументТовары.Цена КАК Цена,
		|	ДокументТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДокументТовары.Сумма КАК Сумма,
		|	ДокументТовары.СтавкаНДС КАК СтавкаНДС,
		|	ДокументТовары.СуммаНДС КАК СуммаНДС,
		|	ДокументТовары.Всего КАК Всего,
		|	ДокументТовары.Содержание КАК Содержание,
		|	ДокументТовары.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументТовары.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументТовары.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументТовары.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументТовары.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта КАК КомментарийВарианта
		|ИЗ
		|	ВариантыИтог КАК ВариантыИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|			ПО ДокументТовары.Ссылка = ДокументКомментарииВариантов.Ссылка
		|				И ДокументТовары.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|		ПО ВариантыИтог.Ссылка = ДокументТовары.Ссылка
		|			И ВариантыИтог.ИДВарианта = ДокументТовары.CRM_ИДВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(ЕстьСкидка),
		|	МАКСИМУМ(ИмяВарианта)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
	ИначеЕсли НомерВарианта = -1 Тогда // Печать всех вариантов документа.
		ТекстЗапроса = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ДокументТовары.Ссылка КАК Ссылка,
		|	ДокументТовары.Ссылка.Организация,
		|	ДокументТовары.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументТовары.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументТовары.Ссылка.Номер КАК Номер,
		|	ДокументТовары.Ссылка.Партнер,
		|	ДокументТовары.Ссылка.Валюта,
		|	ДокументТовары.Ссылка.ЦенаВключаетНДС,
		|	ДокументТовары.Ссылка.СуммаДокумента,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Количество,
		|	ДокументТовары.ЕдиницаИзмерения,
		|	ДокументТовары.Цена,
		|	ДокументТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДокументТовары.Сумма,
		|	ДокументТовары.СтавкаНДС,
		|	ДокументТовары.СуммаНДС,
		|	ДокументТовары.Всего,
		|	ДокументТовары.Содержание,
		|	ДокументТовары.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументТовары.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументТовары.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументТовары.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументТовары.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|		ПО ДокументТовары.Ссылка = ДокументКомментарииВариантов.Ссылка
		|			И ДокументТовары.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|ГДЕ
		|	ДокументТовары.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Утвержден УБЫВ,
		|	ИДВарианта
		|ИТОГИ
		|	СУММА(ЕстьСкидка),
		|	МАКСИМУМ(ИмяВарианта)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
	Иначе // Печать конткретного варианта документа.
		ТекстЗапроса = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ДокументТовары.Ссылка КАК Ссылка,
		|	ДокументТовары.Ссылка.Организация КАК Организация,
		|	ДокументТовары.Ссылка.Организация.Префикс КАК Префикс,
		|	ДокументТовары.Ссылка.Дата КАК ДатаДокумента,
		|	ДокументТовары.Ссылка.Номер КАК Номер,
		|	ДокументТовары.Ссылка.Партнер КАК Партнер,
		|	ДокументТовары.Ссылка.Валюта КАК Валюта,
		|	ДокументТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ДокументТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	ДокументТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДокументТовары.Цена КАК Цена,
		|	ДокументТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДокументТовары.Сумма КАК Сумма,
		|	ДокументТовары.СтавкаНДС КАК СтавкаНДС,
		|	ДокументТовары.СуммаНДС КАК СуммаНДС,
		|	ДокументТовары.Всего КАК Всего,
		|	ДокументТовары.Содержание КАК Содержание,
		|	ДокументТовары.CRM_ИДВарианта КАК ИДВарианта,
		|	ДокументТовары.CRM_ИмяВарианта КАК ИмяВарианта,
		|	ДокументТовары.CRM_Утвержден КАК Утвержден,
		|	ВЫБОР
		|		КОГДА ДокументТовары.ПроцентРучнойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ДокументТовары.CRM_ЭтоРазделитель КАК ЭтоРазделитель,
		|	ДокументКомментарииВариантов.КомментарийВарианта КАК КомментарийВарианта
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту.CRM_КомментарииВариантов КАК ДокументКомментарииВариантов
		|		ПО ДокументТовары.Ссылка = ДокументКомментарииВариантов.Ссылка
		|			И ДокументТовары.CRM_ИДВарианта = ДокументКомментарииВариантов.ИДВарианта
		|ГДЕ
		|	ДокументТовары.Ссылка В(&МассивОбъектов)
		|	И ДокументТовары.CRM_ИДВарианта = &ИДВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(ЕстьСкидка)
		|ПО
		|	Ссылка,
		|	Утвержден,
		|	ИДВарианта";
		
		Запрос.УстановитьПараметр("МассивОбъектов"	, МассивОбъектов);
		Запрос.УстановитьПараметр("ИДВарианта"		, НомерВарианта);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет =
			УправлениеПечатью.МакетПечатнойФормы("Документ.КоммерческоеПредложениеКлиенту.CRM_ПФ_MXL_КоммерческоеПредложение");
		
		CRM_УправлениеПечатью.ЗаполнитьТекстыПоШаблонуВМакете(Макет, ВыборкаДокументов.Ссылка);
		
		СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Организация,
			ВыборкаДокументов.ДатаДокумента);
		
		СведенияОбКонтрагенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументов.Партнер,
			ВыборкаДокументов.ДатаДокумента);
		
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "CRM_ПечататьНомераДокументовБезПрефиксов") Тогда
			ФлагУдалитьПрефикс = Константы["CRM_ПечататьНомераДокументовБезПрефиксов"].Получить();
		Иначе
			ФлагУдалитьПрефикс = Ложь;
		КонецЕсли;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер,
			 ФлагУдалитьПрефикс,
			 ФлагУдалитьПрефикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru='Коммерческое предложение № ';en='Quote No. '")
												+ НомерДокумента
												+ НСтр("ru=' от ';en=' from '")
												+ Формат(ВыборкаДокументов.ДатаДокумента, "ДФ=""dd MMMM yyyy""");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// поставщик и покупатель
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СведенияОбОрганизации.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СведенияОбКонтрагенте.ПолноеНаименование;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаВариантУтвержен = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВариантУтвержен.Следующий() Цикл
			ВыборкаВариантИд = ВыборкаВариантУтвержен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВариантИд.Следующий() Цикл
				Если НомерВарианта = -1 Тогда // Все варианты
					Если ВыборкаВариантИд.Утвержден Тогда    
						ДобавитьКОбластиВариант = НСтр("ru=' (утв.)';en=' (Approved)'");
					Иначе
						ДобавитьКОбластиВариант = ""; 
					КонецЕсли; 
					
					// область варианта
					ОбластьВарианта = Макет.ПолучитьОбласть("Вариант");
					ИмяВариантаПоУмолчанию = НСтр("ru='Вариант ';en='Option'") + ВыборкаВариантИд.ИДВарианта;
					//ОбластьВарианта.Параметры.Вариант = ИмяВариантаПоУмолчанию 
						//+ ?(ИмяВариантаПоУмолчанию = ВыборкаВариантИд.ИмяВарианта, "", " """ + ВыборкаВариантИд.ИмяВарианта + """") 
						//+ ДобавитьКОбластиВариант;
					ОбластьВарианта.Параметры.Вариант = ИмяВариантаПоУмолчанию + ДобавитьКОбластиВариант;
					ТабличныйДокумент.Вывести(ОбластьВарианта);
				КонецЕсли;
					
				ОтображатьСкидки = (ВыборкаВариантИд.ЕстьСкидка > 0
					 И ПараметрыПечати.Свойство("ОтображатьСкидки")
					 И ПараметрыПечати.ОтображатьСкидки);
				КПВывестиСтрокиВарианта(ТабличныйДокумент, Макет, ВыборкаВариантИд, ОтображатьСкидки);
					
			КонецЦикла;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало,
			 ОбъектыПечати,
			 ВыборкаДокументов.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	// -CRM
	
КонецФункции

// Процедура добавляет в параметры письма адресатов.
//
// Параметры:
//	Объект			- ДокументСсылка	- Письмо
//	ПараметрыПисьма	- Структура			- Параметры письма.
//	ИмяПараметра	- Строка			- Имя параметра.
//	ИмяТаблицы		- Строка			- Имя таблицы.
//
Процедура ДобавитьВПараметрАдресатов(Объект, ПараметрыПисьма, ИмяПараметра, ИмяТаблицы)
	
	ТабЗн = Объект[ИмяТаблицы];
	Если ТабЗн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого Стр Из ТабЗн Цикл
		Представление = СокрЛП(СтрЗаменить(Стр.Представление, "<" + Стр.Адрес + ">", ""));
		Адресаты.Добавить(Новый Структура("Адрес,Представление", Стр.Адрес, Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры // ДобавитьВПараметрАдресатов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПредложения(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =
		СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредложения.Период КАК Период,
	|	ТаблицаПредложения.Организация КАК Организация,
	|	ТаблицаПредложения.Подразделение КАК Подразделение,
	|	ТаблицаПредложения.Партнер КАК Партнер,
	|	ТаблицаПредложения.Номенклатура КАК Номенклатура,
	|	ТаблицаПредложения.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаПредложения.Документ КАК ДокументПредложения,
	|	ТаблицаПредложения.Проект КАК Проект,
	|	СУММА(ТаблицаПредложения.Количество) КАК Количество,
	|	СУММА(ТаблицаПредложения.Всего) КАК Стоимость,
	|	СУММА(ТаблицаПредложения.СуммаБезСкидок) КАК СтоимостьБезСкидок
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаПредложения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПредложения.Период,
	|	ТаблицаПредложения.Организация,
	|	ТаблицаПредложения.Подразделение,
	|	ТаблицаПредложения.Партнер,
	|	ТаблицаПредложения.Номенклатура,
	|	ТаблицаПредложения.ХарактеристикаНоменклатуры,
	|	ТаблицаПредложения.Документ,
	|	ТаблицаПредложения.Проект";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредложения", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПредложения()

Функция КПВернутьКЛКонтрагента(КонтрагентСсылка) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	               |	ВЫБОР
	               |		КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)
	               |			ТОГДА 2
	               |		КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.ВременноНеРаботает)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК CRM_Состояние
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	               |ГДЕ
	               |	НЕ КонтактныеЛица.ПометкаУдаления
	               |	И КонтактныеЛица.Владелец = &Владелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Состояние";
	Запрос.УстановитьПараметр("Владелец", КонтрагентСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КонтактноеЛицо;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// +CRM_Модуль

Функция ПредставлениеУсловийПоставкиДляПечати(УсловияОплаты, УсловияДоставки, ПрочиеУсловия, ИсходныеУсловия, ПорядокВыполненияРабот) Экспорт 

	ПредставлениеУсловийПоставки = "";
	
	Если Не ПустаяСтрока(ИсходныеУсловия) Тогда
		
		ИсходныеУсловияСтр = СтрШаблон(НСтр("ru = 'Исходные условия: %1'"), ИсходныеУсловия);
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		+ ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		+ ИсходныеУсловияСтр;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(УсловияОплаты) Тогда
		
		УсловияОплатыСтр = СтрШаблон(НСтр("ru = 'Оплата: %1'"), УсловияОплаты);
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		+ ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		+ УсловияОплатыСтр;
		
	КонецЕсли;
	
	
	Если Не ПустаяСтрока(УсловияДоставки) Тогда
		
		УсловияДоставкиСтр = СтрШаблон(НСтр("ru = 'Доставка: %1'"), УсловияДоставки);
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		+ ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		+ УсловияДоставкиСтр;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПорядокВыполненияРабот) Тогда
		
		ПорядокВыполненияРаботСтр = СтрШаблон(НСтр("ru = 'Порядок выполнения работ: %1'"), ПорядокВыполненияРабот);
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		+ ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		+ ПорядокВыполненияРаботСтр;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПрочиеУсловия) Тогда
		
		ПрочиеУсловияСтр = СтрШаблон(НСтр("ru = 'Прочее: %1'"), ПрочиеУсловия);
		
		ПредставлениеУсловийПоставки = ПредставлениеУсловийПоставки 
		+ ?(ПустаяСтрока(ПредставлениеУсловийПоставки), "", Символы.ПС)
		+ ПрочиеУсловияСтр;
	КонецЕсли;
	
	Возврат ПредставлениеУсловийПоставки;
	
КонецФункции

// -CRM_Модуль

#КонецОбласти
