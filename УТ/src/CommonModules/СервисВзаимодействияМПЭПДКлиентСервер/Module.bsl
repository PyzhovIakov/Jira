
#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяФормыСостоянияПодключенныхМП() Экспорт
	
	Возврат "Обработка.ВзаимодействиеМПЭПД.Форма.СостояниеПодключенияМП";
	
КонецФункции

Функция ИмяФормыВыборДействияПоДокументу() Экспорт
	
	Возврат "Обработка.ВзаимодействиеМПЭПД.Форма.ВыборДействияПоДокументу";
	
КонецФункции

Функция ИмяФормыПодписанныеДанныеМП() Экспорт
	
	Возврат "ОбщаяФорма.ПодписанныеДанныеМПЭПД";
	
КонецФункции

Функция ВидВзаимодействияСМП(ИмяВида) Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ТипыВзаимодействияМПЭПД." + ИмяВида);
	
КонецФункции

Функция ТекстЗапросаДанныхДокументаПоВерсииМП() Экспорт
	
	Возврат "ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации,
			|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокументооборота
			|ПОМЕСТИТЬ ВТ_ДОКУМЕНТЫ
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = &Документ
			|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|		И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации,
			|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокументооборота
			|ИЗ
			|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
			|		ПО ОбъектыУчетаДокументовЭДО.ОбъектУчета = &Документ
			|		И ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
			|		И ОбъектыУчетаДокументовЭДО.Актуальный = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КэшВзаимодействияМПЭПД.ДанныеСообщения,
			|	КэшВзаимодействияМПЭПД.ДатаПолучения,
			|	КэшВзаимодействияМПЭПД.Дата,
			|	КэшВзаимодействияМПЭПД.Содержимое,
			|	ПодключенныеМПЭПД.Наименование КАК МобильноеПриложение,
			|	ПодключенныеМПЭПД.Телефоны,
			|	КэшВзаимодействияМПЭПД.ВидСообщения,
			|	ПодключенныеМПЭПД.Идентификатор,
			|	ПодключенныеМПЭПД.Фото,
			|	ПодключенныеМПЭПД.Роль,
			|	ПодключенныеМПЭПД.ВидыДокументов,
			|	ПодключенныеМПЭПД.Удален,
			|	КэшВзаимодействияМПЭПД.ИдентификаторМП,
			|	КэшВзаимодействияМПЭПД.Прочитано
			|ИЗ
			|	РегистрСведений.КэшВзаимодействияМПЭПД КАК КэшВзаимодействияМПЭПД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДОКУМЕНТЫ
			|		ПО КэшВзаимодействияМПЭПД.ИдентификаторЭДО = ВТ_ДОКУМЕНТЫ.ИдентификаторОрганизации
			|		И КэшВзаимодействияМПЭПД.ИдентификаторДокумента = ВТ_ДОКУМЕНТЫ.ИдентификаторДокументооборота
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенныеМПЭПД КАК ПодключенныеМПЭПД
			|		ПО КэшВзаимодействияМПЭПД.ИдентификаторЭДО = ПодключенныеМПЭПД.ИдентификаторЭДО
			|		И КэшВзаимодействияМПЭПД.ИдентификаторМП = ПодключенныеМПЭПД.ИдентификаторМП
			|ГДЕ
			|	КэшВзаимодействияМПЭПД.ДокументЭПД = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
	
КонецФункции

Функция ПредставлениеПустогоЗначенияДанныхМП() Экспорт
	
	Возврат "<не заполнено>";
	
КонецФункции

Функция ТипДокументаМП(ДокументЭПД) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(ДокументЭПД) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		Или ДокументЭПД = "ЭлектроннаяТранспортнаяНакладная"
		Или ДокументЭПД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭТрН") Тогда
		Результат = "ETRN";
	ИначеЕсли ТипЗнч(ДокументЭПД) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист")
		Или ДокументЭПД = "ЭлектронныйПутевойЛист"
		Или ДокументЭПД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ") Тогда
		Результат = "EPL"; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТитулПоддерживаетсяМобильнымПриложением(ПрефиксТитула) Экспорт
	
	Возврат ПрефиксТитула = "ТитулПеревозчикаПриемка"
		Или ПрефиксТитула = "ТитулПеревозчикаВыдача"
		Или ПрефиксТитула = "ТитулВыпуск"
		Или ПрефиксТитула = "ТитулВыезд"
		Или ПрефиксТитула = "ТитулЗаезд"
		Или ПрефиксТитула = "ТитулМедосмотрПосле";
	
КонецФункции

Функция СоответствиеТитуловТипамМП(ПоТитулам = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	
	// ЭТрН
	Результат.Вставить("acceptance", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2"));
	Результат.Вставить("unloading", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4"));
	
	// ЭПЛ
	Результат.Вставить("ShippingList_medic_before", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2"));
	Результат.Вставить("ShippingList_inspection", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3"));
	Результат.Вставить("ShippingList_odometr_before", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4"));
	Результат.Вставить("ShippingList_odometr_after", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5"));
	Результат.Вставить("ShippingList_medic_after", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6"));
	
	Если ПоТитулам = Истина Тогда
		РезультатПеревернуто = Новый Соответствие;
	
		Для Каждого СтрокаКлюча Из Результат Цикл
			РезультатПеревернуто.Вставить(СтрокаКлюча.Ключ, СтрокаКлюча.Значение);
			РезультатПеревернуто.Вставить(СтрокаКлюча.Значение, СтрокаКлюча.Ключ);
		КонецЦикла;
		
		Возврат РезультатПеревернуто;
	Иначе	
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеТитуловРоляМП() Экспорт
	
	Результат = Новый Массив;
	
	АтомарныеРолиМП = АтомарныеРолиМП();
	РольВодитель = Pow(2, АтомарныеРолиМП.Найти(НСтр("ru='Водитель'")));
	РольМедработник = Pow(2, АтомарныеРолиМП.Найти(НСтр("ru='Медработник'")));
	РольМеханик = Pow(2, АтомарныеРолиМП.Найти(НСтр("ru='Механик'")));
	РольОдометр = Pow(2, АтомарныеРолиМП.Найти(НСтр("ru='Ответственный за показания одометра'")));
	
	// ЭТрН
	Результат.Добавить(Новый Структура("Роль, Титул", РольВодитель, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольВодитель, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4")));
	
	// ЭПЛ
	Результат.Добавить(Новый Структура("Роль, Титул", РольВодитель, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольМедработник, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольМеханик, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольОдометр, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольОдометр, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5")));
	Результат.Добавить(Новый Структура("Роль, Титул", РольМедработник, ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6")));
	
	Возврат Результат;
	
КонецФункции

Функция АтомарныеРолиМП() Экспорт
	
	Результат = Новый Массив;
	
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Оформитель'"));
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Медработник'"));
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Механик'"));
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Ответственный за показания одометра'"));
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Водитель'"));
	
	Возврат Результат;
	
КонецФункции

Функция АтомарныеВидыДокументовМП() Экспорт
	
	Результат = Новый Массив;
	
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Транспортная накладная'"));
	//@skip-check typed-value-adding-to-untyped-collection
	Результат.Добавить(НСтр("ru='Путевой лист'"));
	
	Возврат Результат;
	
КонецФункции

Функция ОбязательныеРолиМП() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(0);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставленияРолейМП(Все = Истина, Отбор = Неопределено, ВидыДокументов = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	АтомарныеРоли = АтомарныеРолиМП();	
	ВсегоРолей = АтомарныеРоли.Количество();
	
	РолиПоддерживаемыеМП = РолиПоддерживаемыеМП(, , ВидыДокументов);
	Если РолиПоддерживаемыеМП.Количество() = 1 Тогда
		ИндексРоли = РолиПоддерживаемыеМП[0];
		Результат.Вставить(Pow(2, ИндексРоли), АтомарныеРоли[ИндексРоли]);	
		Возврат Результат;
	КонецЕсли;
	
	Если Все = Истина Тогда
		Для СчетчикОбщий = 1 По Pow(2, ВсегоРолей) - 1 Цикл
			СчетчикАтомарный = 0;	
			ПредставлениеМассив = Новый Массив;
			СоответствуетОтбору = Ложь;
			Для Каждого Роль Из АтомарныеРоли Цикл
				Если РолиПоддерживаемыеМП.Найти(СчетчикАтомарный) <> Неопределено Тогда				
					РольЧисловая = Pow(2, СчетчикАтомарный);
					Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(СчетчикОбщий, РольЧисловая, ВсегоРолей) Тогда
						//@skip-check typed-value-adding-to-untyped-collection
						ПредставлениеМассив.Добавить(Роль);
						Если Отбор = Неопределено Или СчетчикАтомарный = Отбор Тогда
							СоответствуетОтбору = Истина;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				СчетчикАтомарный = СчетчикАтомарный + 1;
			КонецЦикла;	
			Если СоответствуетОтбору = Истина И ПредставлениеМассив.Количество() > 0 Тогда
				Результат.Вставить(СчетчикОбщий, СтрСоединить(ПредставлениеМассив, ", "));
			КонецЕсли;
		КонецЦикла;
	Иначе
		СчетчикАтомарный = 0;
		Для Каждого Роль Из АтомарныеРоли Цикл		
			Если РолиПоддерживаемыеМП.Найти(СчетчикАтомарный) <> Неопределено
				И (Отбор = Неопределено Или СчетчикАтомарный = Отбор) Тогда
				РольЧисловая = Pow(2, СчетчикАтомарный);
				Результат.Вставить(РольЧисловая, Роль); 
			КонецЕсли;
			СчетчикАтомарный = СчетчикАтомарный + 1;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставленияВидовДокументовМП(Все = Истина, Отбор = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	АтомарныеВидыДокументов = АтомарныеВидыДокументовМП();
	ВсегоДокументов = АтомарныеВидыДокументов.Количество();
	
	ВидыДокументовПоддерживаемыеМП = ВидыДокументовПоддерживаемыеМП();
	
	Если ВидыДокументовПоддерживаемыеМП.Количество() = 1 Тогда
		ИндексДокумента = ВидыДокументовПоддерживаемыеМП[0];
		Результат.Вставить(Pow(2, ИндексДокумента), АтомарныеВидыДокументов[ИндексДокумента]);	
		Возврат Результат;
	КонецЕсли;
	
	Если Все = Истина Тогда
		Для СчетчикОбщий = 1 По Pow(2, ВсегоДокументов) - 1 Цикл
			СчетчикАтомарный = 0;	
			ПредставлениеМассив = Новый Массив;
			СоответствуетОтбору = Истина;
			Для Каждого ВидДокумента Из АтомарныеВидыДокументов Цикл
				Если ВидыДокументовПоддерживаемыеМП.Найти(СчетчикАтомарный) <> Неопределено Тогда				
					ВидЧисловой = Pow(2, СчетчикАтомарный);
					Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(СчетчикОбщий, ВидЧисловой, ВсегоДокументов) Тогда
						//@skip-check typed-value-adding-to-untyped-collection
						ПредставлениеМассив.Добавить(ВидДокумента);
						Если Отбор <> Неопределено И СчетчикАтомарный <> Отбор Тогда
							СоответствуетОтбору = Ложь;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				СчетчикАтомарный = СчетчикАтомарный + 1;
			КонецЦикла;	
			Если СоответствуетОтбору = Истина И ПредставлениеМассив.Количество() > 0 Тогда
				Результат.Вставить(СчетчикОбщий, СтрСоединить(ПредставлениеМассив, ", ")); 
			КонецЕсли;
		КонецЦикла;
	Иначе
		СчетчикАтомарный = 0;
		Для Каждого ВидДокумента Из АтомарныеВидыДокументов Цикл		
			Если ВидыДокументовПоддерживаемыеМП.Найти(СчетчикАтомарный) <> Неопределено
				И (Отбор = Неопределено Или СчетчикАтомарный = Отбор) Тогда
				ВидЧисловой = Pow(2, СчетчикАтомарный);
				Результат.Вставить(ВидЧисловой, ВидДокумента);
			КонецЕсли;
			СчетчикАтомарный = СчетчикАтомарный + 1;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияПоТитулуМП(ДокументСсылка, РольУчастника, ТекущийТитул = Неопределено) Экспорт
	
	Результат = Новый Структура("ДоступноВМП, ТитулДоступенВМП, ЗаголовокПолей", Ложь, Ложь, "");
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		И РольУчастника = 1 Тогда
			
		Результат.Вставить("ДоступноВМП", Истина);
		Если ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")
			Или ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4") Тогда
			Результат.Вставить("ЗаголовокПолей", "По данным водителя");	
			Результат.Вставить("ТитулДоступенВМП", Истина);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист")
		// Пока МП только для водителей, назначать может оформитель ЭПЛ 
		И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(РольУчастника, 1) Тогда
				
		Результат.Вставить("ДоступноВМП", Истина);
		Если ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2")
			Или ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6") Тогда
			Результат.Вставить("ЗаголовокПолей", "По данным медработника");
			Результат.Вставить("ТитулДоступенВМП", Истина);
		ИначеЕсли ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3") Тогда
			Результат.Вставить("ЗаголовокПолей", "По данным контролера");
			Результат.Вставить("ТитулДоступенВМП", Истина);
		ИначеЕсли ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4")
			Или ТекущийТитул = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5") Тогда
			Результат.Вставить("ЗаголовокПолей", "По данным одометриста");
			Результат.Вставить("ТитулДоступенВМП", Истина);
		Иначе
			Результат.Вставить("ЗаголовокПолей", "По данным водителя");
			Результат.Вставить("ТитулДоступенВМП", Истина);
		КонецЕсли;
	
	КонецЕсли;
	
	СобытияПривязки = Новый Массив;
	СобытияПривязки.Добавить(ПредопределенноеЗначение("Перечисление.ТипыВзаимодействияМПЭПД.ПривязкаВодителя")); 
	
	Результат.Вставить("СобытияПривязки", СобытияПривязки);
	
	Возврат Результат;	
	
КонецФункции

Функция КартинкаПустаяФотография() Экспорт
	
	Возврат БиблиотекаКартинок.ПустаяФотографияЭПД;
	
КонецФункции

Функция КартинкаМобильноеУстройствоЭПД() Экспорт
	
	Возврат БиблиотекаКартинок.МобильноеУстройствоЭПД;
	
КонецФункции

Функция КартинкаОткрытьВОкнеЭПД() Экспорт
	
	Возврат БиблиотекаКартинок.ОткрытьВОкнеЭПД;
	
КонецФункции

Функция КартинкаТелефоннаяТрубкаЭПД() Экспорт
	
	Возврат БиблиотекаКартинок.ТелефоннаяТрубкаЭПД;
	
КонецФункции

Функция КартинкаКоллекцияСобытияМобильногоПриложенияЭПД() Экспорт
	
	Возврат БиблиотекаКартинок.КоллекцияСобытияМобильногоПриложенияЭПД;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает индексы поддерщиваемых МП ролей пользователя по массиву, возвращаемого методом АтомарныеРолиМП
// 
// Параметры:
//  Все - Булево - Если Ложь, тогда будут возвращены только атомарные роли
//  Отбор - Число - Атомарная роль
//  ВидыДокументов - Число, Неопределено - Виды документов
// 
// Возвращаемое значение:
//  Массив из Число - - Роли (числовые) поддерживаемые мобильным приложением
Функция РолиПоддерживаемыеМП(Все = Ложь, Отбор = Неопределено, ВидыДокументов = Неопределено) Экспорт
	
	ИндексыАтомарныхРолей = Новый Массив;
	
	АтомарныеРолиМП = АтомарныеРолиМП();
	ИндексРолиВодитель = АтомарныеРолиМП.Найти(НСтр("ru='Водитель'"));
	ИндексРолиМедработник = АтомарныеРолиМП.Найти(НСтр("ru='Медработник'"));
	ИндексРолиМеханик = АтомарныеРолиМП.Найти(НСтр("ru='Механик'"));
	ИндексРолиОдометр = АтомарныеРолиМП.Найти(НСтр("ru='Ответственный за показания одометра'"));
	
	АтомарныеВидыДокументов = АтомарныеВидыДокументовМП();
	ВидПутевойЛист = Pow(2, АтомарныеВидыДокументов.Найти(НСтр("ru='Путевой лист'")));
	
	Если ДокументПоддерживаетсяМП(ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ")) = Истина
	И (ВидыДокументов = Неопределено 
		Или ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ВидыДокументов, ВидПутевойЛист, АтомарныеВидыДокументов.Количество())) Тогда
		//@skip-check typed-value-adding-to-untyped-collection
		ИндексыАтомарныхРолей.Добавить(ИндексРолиМедработник);
		//@skip-check typed-value-adding-to-untyped-collection
		ИндексыАтомарныхРолей.Добавить(ИндексРолиМеханик);
		//@skip-check typed-value-adding-to-untyped-collection
		ИндексыАтомарныхРолей.Добавить(ИндексРолиОдометр);
	КонецЕсли;
	//@skip-check typed-value-adding-to-untyped-collection
	ИндексыАтомарныхРолей.Добавить(ИндексРолиВодитель); 
	
	Если Все = Ложь Тогда
		Возврат ИндексыАтомарныхРолей;
	Иначе
		Результат = Новый Массив;
		АтомарныеРоли = АтомарныеРолиМП();	
		ВсегоРолей = АтомарныеРоли.Количество();
		Для СчетчикОбщий = 1 По Pow(2, ВсегоРолей) - 1 Цикл
			Для СчетчикАтомарный = 0 По ВсегоРолей Цикл
				Если ИндексыАтомарныхРолей.Найти(СчетчикАтомарный) <> Неопределено Тогда				
					РольЧисловая = Pow(2, СчетчикАтомарный);
					Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(СчетчикОбщий, РольЧисловая, ВсегоРолей) Тогда
						Если Отбор = Неопределено Или СчетчикАтомарный = Отбор Тогда
							Результат.Добавить(СчетчикОбщий);	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает индексы поддерщиваемых МП ролей пользователя по массиву, возвращаемого методом АтомарныеРолиМП
// 
// Параметры:
//  Все - Булево - если Ложь, тогда будут возвращены только атомарные виды документов
//  Отбор - Неопределено - атомарный вид документа
// 
// Возвращаемое значение:
//  Массив из Число - Виды документов поддерживаемые мобильным приложением
Функция ВидыДокументовПоддерживаемыеМП(Все = Ложь, Отбор = Неопределено) Экспорт
	
	ИндексыАтомарныхВидов = Новый Массив;
	
	АтомарныеВидыДокументов = АтомарныеВидыДокументовМП();
	ИндексТранспортнаяНакладная = АтомарныеВидыДокументов.Найти(НСтр("ru='Транспортная накладная'"));
	ИндексПутевойЛист = АтомарныеВидыДокументов.Найти(НСтр("ru='Путевой лист'"));
	
	//@skip-check typed-value-adding-to-untyped-collection
	ИндексыАтомарныхВидов.Добавить(ИндексТранспортнаяНакладная);
	Если ДокументПоддерживаетсяМП(ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ")) = Истина Тогда
		//@skip-check typed-value-adding-to-untyped-collection
		ИндексыАтомарныхВидов.Добавить(ИндексПутевойЛист);
	КонецЕсли;
	
	Если Все = Ложь Тогда
		Возврат ИндексыАтомарныхВидов;
	Иначе
		Результат = Новый Массив;	
		ВсегоВидов = АтомарныеВидыДокументов.Количество();
		Для СчетчикОбщий = 1 По Pow(2, ВсегоВидов) - 1 Цикл
			Для СчетчикАтомарный = 0 По ВсегоВидов Цикл
				Если ИндексыАтомарныхВидов.Найти(СчетчикАтомарный) <> Неопределено Тогда				
					ВидЧисловой = Pow(2, СчетчикАтомарный);
					Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(СчетчикОбщий, ВидЧисловой, ВсегоВидов) Тогда
						Если Отбор = Неопределено Или СчетчикАтомарный = Отбор Тогда
							Результат.Добавить(СчетчикОбщий);	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция РольДелимаяПоДокументам()
	
	АтомарныеРолиМП = АтомарныеРолиМП();
	РольВодитель = АтомарныеРолиМП.Найти(НСтр("ru='Водитель'"));
	Возврат Pow(2, РольВодитель);
	
КонецФункции

Функция РольСУчетомВидовДокументов(Роль, ВидыДокументов) Экспорт
	
	АтомарныеВидыДокументовМП = АтомарныеВидыДокументовМП();
	ВсегоДокументов = АтомарныеВидыДокументовМП.Количество();
	ВсегоРолей = АтомарныеРолиМП().Количество();
	РольДелимаяПоДокументам = РольДелимаяПоДокументам();
			
	ЕстьРольДелимаяПоДокументам = ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(Роль, РольДелимаяПоДокументам, ВсегоРолей);
	
	Если ЕстьРольДелимаяПоДокументам Тогда
		Результат = Роль - РольДелимаяПоДокументам;
		Для СчетчикАтомарный = 0 По АтомарныеВидыДокументовМП.Количество() - 1 Цикл
			ВидЧисловой = Pow(2, СчетчикАтомарный);
			Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ВидыДокументов, ВидЧисловой, ВсегоДокументов) Тогда
				Результат = Результат + РольДелимаяПоДокументам * Pow(2, СчетчикАтомарный);	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = Роль;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РазделитьРольИВидыДокументов(Роль) Экспорт
	
	Результат = Новый Структура("Роль, ВидыДокументов", Роль, 0);
	
	АтомарныеРоли = АтомарныеРолиМП();	
	ВсегоРолей = АтомарныеРоли.Количество();
	
	АтомарныеВидыДокументовМП = АтомарныеВидыДокументовМП();
	ВсегоДокументов = АтомарныеВидыДокументовМП.Количество();
	РольДелимаяПоДокументам = РольДелимаяПоДокументам();
	
	ЕстьДелимаяРоль = Ложь;
	Для СчетчикАтомарный = 0 По АтомарныеВидыДокументовМП.Количество() - 1 Цикл
		ВидЧисловой = Pow(2, СчетчикАтомарный);
		Если ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(Роль, РольДелимаяПоДокументам * ВидЧисловой, ВсегоРолей + ВсегоДокументов - 1) Тогда
			Результат.Роль = Результат.Роль - РольДелимаяПоДокументам * ВидЧисловой;	
			Результат.ВидыДокументов = Результат.ВидыДокументов + ВидЧисловой;
			ЕстьДелимаяРоль = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДелимаяРоль Тогда
		Результат.Роль = Результат.Роль + РольДелимаяПоДокументам;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументПоддерживаетсяМП(ДокументЭПД)
	
	Результат = Ложь;
	
	Если ТипЗнч(ДокументЭПД) = Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")
		Или ДокументЭПД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭТрН") Тогда
		Результат = Истина;
	ИначеЕсли ТипЗнч(ДокументЭПД) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист")
		Или ДокументЭПД = ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ") Тогда
		Результат = Истина; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
