////////////////////////////////////////////////////////////////////////////////
// Серверные (для вызова из клиента) процедуры и функции для работы с виджетами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Используется для получения настроек варианта виджета.
//
// Параметры:
//  ВариантВиджета	 - СправочникСсылка.CRM_ВариантыВиджетов - Вариант виджета, по которому
//  необходимо получить настройки.
// 
// Возвращаемое значение:
//  Структура, Неопределено  - Настройки варианта виджета.
//
Функция ПолучитьНастройкиВариантаВиджета(ВариантВиджета) Экспорт
	
	Возврат CRM_РаботаСВиджетамиСервер.ПолучитьНастройкиВариантаВиджета(ВариантВиджета);
	
КонецФункции // ПолучитьНастройкиВариантаВиджета()

// +CRM_Модуль
Функция ПолучитьНастройкиКомпоновщикаДанныхДляВариантаВиджета(ДанныеВиджета, РежимРасшифровки = Ложь) Экспорт
	
	НастройкиВиджета = ДанныеВиджета.Настройки;
	
	Если ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДебиторскаяЗадолженность Тогда
		
		СКД = Отчеты.ЗадолженностьКлиентовПоСрокам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.ВариантыНастроек.ЗадолженностьКлиентовПоСрокам.Настройки);
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		///////////////////////////////////////////////
		// Структура.
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ДолгКлиента");
		
		ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "НаименованиеИнтервала");
		
		Если РежимРасшифровки Тогда
			
			ГруппировкаПартнер = ДобавитьГруппировкуКомпоновкиВСтруктуру(ГруппировкаПериод, "Партнер");
			ГруппировкаЗаказКлиента = ДобавитьГруппировкуКомпоновкиВСтруктуру(ГруппировкаПартнер, "ЗаказКлиента");
			
		КонецЕсли;
		
		///////////////////////////////////////////////
		// Отборы.
		
		Если НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению Тогда
			
			ДобавитьОтборКомпоновки(
				КомпоновщикНастроек.Настройки.Отбор,
				"Партнер.ОсновнойМенеджер",
				ВидСравненияКомпоновкиДанных.Равно,
				НастройкиВиджета.ЗначениеАналитики);
			
		ИначеЕсли НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру Тогда
			
			ДобавитьОтборКомпоновки(
				КомпоновщикНастроек.Настройки.Отбор,
				"Партнер.ОсновнойМенеджер.Подразделение",
				ВидСравненияКомпоновкиДанных.Равно,
				НастройкиВиджета.ЗначениеАналитики);
			
		КонецЕсли;
		
		///////////////////////////////////////////////
		// Параметры.
		
		ВариантКлассификации = ОбщегоНазначенияУТВызовСервера.ВариантКлассификацииЗадолженностиПоУмолчанию();
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ДатаОтчета", НастройкиВиджета.Период.Дата);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ДатаОтчетаГраница", Новый Граница(КонецДня(НастройкиВиджета.Период.Дата), ВидГраницы.Включая));
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ДанныеОтчета", 2);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"СтрокаСостояниеВзаиморасчетов", НСтр("ru='Состояние взаиморасчетов'"));
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"СтрокаДолгНеПросрочен", НСтр("ru='Не просрочено'"));
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ВариантКлассификацииЗадолженности", ОбщегоНазначенияУТВызовСервера.ВариантКлассификацииЗадолженностиПоУмолчанию());
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"Календарь", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантКлассификации, "Календарь"));
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ВключатьЗадолженность", 1); // Только фактическую.
		
	ИначеЕсли ДанныеВиджета.ТипВиджета = Перечисления.CRM_ТипыИсточниковДанныхВиджетов.ДинамикаПродаж Тогда
		
		СКД = Отчеты.ВыручкаИСебестоимостьПродаж.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.ВариантыНастроек.ДинамикаПродаж.Настройки);
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		///////////////////////////////////////////////
		// Структура.
		
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Выручка");
		
		Если НастройкиВиджета.Периодичность = Перечисления.Периодичность.Год Тогда
			ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "ПериодГод");
		ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Квартал Тогда
			ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "ПериодКвартал");
		ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Месяц Тогда
			ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "ПериодМесяц");
		ИначеЕсли НастройкиВиджета.Периодичность = Перечисления.Периодичность.Неделя Тогда
			ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "ПериодНеделя");
		Иначе
			ГруппировкаПериод = ДобавитьГруппировкуКомпоновкиВСтруктуру(КомпоновщикНастроек.Настройки, "ПериодДень");
		КонецЕсли;
		
		Если РежимРасшифровки Тогда
			
			ГруппировкаПодразделение = ДобавитьГруппировкуКомпоновкиВСтруктуру(ГруппировкаПериод, "Подразделение");
			ГруппировкаМенеджер = ДобавитьГруппировкуКомпоновкиВСтруктуру(ГруппировкаПодразделение, "Менеджер");
			ГруппировкаЗаказКлиента = ДобавитьГруппировкуКомпоновкиВСтруктуру(ГруппировкаМенеджер, "ЗаказКлиента");
			
			ЗначениеПараметраНастроекПериодичность = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Периодичность");
			Если ЗначениеПараметраНастроекПериодичность <> Неопределено Тогда
				ЗначениеПараметраНастроекПериодичность.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЕсли;
		
		///////////////////////////////////////////////
		// Отборы.
		
		Если НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоПодразделению Тогда
			
			ДобавитьОтборКомпоновки(
				КомпоновщикНастроек.Настройки.Отбор,
				"Подразделение",
				ВидСравненияКомпоновкиДанных.Равно,
				НастройкиВиджета.ЗначениеАналитики);
			
		ИначеЕсли НастройкиВиджета.ТипАналитики = Перечисления.CRM_ВидыРазверткиПоказателей.ПоМенеджеру Тогда
			
			ДобавитьОтборКомпоновки(
				КомпоновщикНастроек.Настройки.Отбор,
				"Менеджер",
				ВидСравненияКомпоновкиДанных.Равно,
				НастройкиВиджета.ЗначениеАналитики);
			
		КонецЕсли;
		
		///////////////////////////////////////////////
		// Параметры.
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"Период", НастройкиВиджета.СтандартныйПериод);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ТекущаяДата", ТекущаяДата());
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"Периодичность", НастройкиВиджета.Периодичность);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"НачалоПериода", НастройкиВиджета.СтандартныйПериод.ДатаНачала);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"КонецПериода", НастройкиВиджета.СтандартныйПериод.ДатаОкончания);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат КомпоновщикНастроек.Настройки;
	
КонецФункции // ПолучитьНастройкиКомпоновщикаДанныхДляВариантаВиджета()
// -CRM_Модуль

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

// +CRM_Модуль
#Область СлужебныеПроцедурыИФункции

// Служебная функция для добавления группировки компоновки в компоновщик настроек.
//
// Параметры:
//  ИсточникСтруктуры  - НастройкиКомпоновкиДанных | ГруппировкаКомпоновкиДанных - Источник поля "Структура" для
//                                                                                 добавления группировки.
//  ИмяДанных          - Строка - Имя поля компоновки данных.
//
// Возвращаемое значение:
//   ГруппировкаКомпоновкиДанных  - Группировка компоновки.
//
Функция ДобавитьГруппировкуКомпоновкиВСтруктуру(ИсточникСтруктуры, ИмяДанных)
	
	ГруппировкаКомпоновки = ИсточникСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяДанных);
	
	Возврат ГруппировкаКомпоновки;
	
КонецФункции // ДобавитьГруппировкуКомпоновкиВСтруктуру()

// Служебная функция для добавления группировки компоновки в компоновщик настроек.
//
// Параметры:
//  Источник       - ОтборКомпоновкиДанных         - Коллекция элементов отбора.
//  ЛевоеЗначение  - Строка                        - Имя поля компоновки данных.
//  ВидСравнения   - ВидСравненияКомпоновкиДанных  - Вид сравнения компоновки данных.
//  Значение       - Произвольное                  - Правое значение для сравнения.
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных  - Группировка компоновки.
//
Функция ДобавитьОтборКомпоновки(Источник, ЛевоеЗначение, ВидСравнения, Значение = Неопределено)
	
	НовыйЭлементОтбора = Источник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	НовыйЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	НовыйЭлементОтбора.Использование	= Истина;
	НовыйЭлементОтбора.ВидСравнения		= ВидСравнения;
	НовыйЭлементОтбора.ПравоеЗначение	= Значение;
	
	Возврат НовыйЭлементОтбора
	
КонецФункции // ДобавитьОтборКомпоновки()

#КонецОбласти
// -CRM_Модуль

////////////////////////////////////////////////////////////////////////////////