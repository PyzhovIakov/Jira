// @strict-types

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОблачныйЭДО_ИнтеграцияОблачногоЭДО

// Возвращает путь к форме просмотра электронного документа в легком интерфейсе по признаку. 
// 
// Параметры:
//  ЭтоВходящийЭДО - Булево
// 
// Возвращаемое значение:
//  Строка
Функция ПутьКФормеПросмотраЭлектронногоДокумента(ЭтоВходящийЭДО) Экспорт
	
	Возврат ?(ЭтоВходящийЭДО,
		"Документ.ЭлектронныйДокументВходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс",
		"Документ.ЭлектронныйДокументИсходящийЭДО.Форма.ФормаПросмотраЛегкийИнтерфейс");
		
КонецФункции

#Область ЗаполнениеДанныхКомпонентовИнтерфейса

#Область ПанельКарточки

// Заполнить данные компонента панель карточки.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКарточки
//  СвойстваДокумента - См. ЛегкийИнтерфейсДокументовЭДО.НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельКарточки(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельКарточки(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель карточки.
// 
// Возвращаемое значение:
//  Структура:
// * ТекстЗаголовка - Строка
Функция НовыеДанныеКомпонентаПанельКарточки() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельКарточки();
КонецФункции

#КонецОбласти // ПанельКарточки

#Область ПанельПометкиНаУдаление

// Заполнить данные компонента панель пометки на удаление.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПометкиНаУдаление
//  СвойстваДокумента - Структура:
//  * ПометкаУдаления - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПометкиНаУдаление(ДанныеКомпонента,
		СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель пометки на удаление.
// 
// Возвращаемое значение:
//  Структура:
//  * ДокументПомеченНаУдаление - Булево
Функция НовыеДанныеКомпонентаПанельПометкиНаУдаление() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельПометкиНаУдаление();
КонецФункции

#КонецОбласти // ПанельПометкиНаУдаление

#Область ПанельКомандВходящегоДокумента

// Заполнить данные компонента панель команд входящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельКомандВходящегоДокумента(ДанныеКомпонента,
		СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель команд входящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * ДоступныеДействияПоЭДОДляДокумента - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступныеДействияПоЭДОДляДокументаПакета - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ЭтоПакетДокументов - Булево
//  * ЭтоИнтеркампани - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭтоПрикладнойВидДокумента - Булево
Функция НовыеДанныеКомпонентаПанельКомандВходящегоДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельКомандВходящегоДокумента();
КонецФункции

#КонецОбласти // ПанельКомандВходящегоДокумента

#Область ПанельКомандИсходящегоДокумента

// Заполнить данные компонента панель команд исходящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
//  НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
//  ОбъектыУчета - Неопределено
//               - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ИмяДобавляемогоФайла - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(ДанныеКомпонента, СвойстваДокумента,
	НастройкиФормы, ОбъектыУчета = Неопределено, ИмяДобавляемогоФайла = "") Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельКомандИсходящегоДокумента(ДанныеКомпонента, 
		СвойстваДокумента, НастройкиФормы, ОбъектыУчета, ИмяДобавляемогоФайла);
		
КонецПроцедуры

// Новые данные компонента панель команд исходящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * ДоступныеДействияПоЭДОДляДокумента - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступныеДействияПоЭДОДляДокументаПакета - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступноИзменениеПакета - Булево
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ОтключитьТранслитерацию - Булево
//  * ТранслитерацияДоступна - Булево
//  * ДоступноФормированиеФормализованныхЭДИзФайлов - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ЭтоВнутреннийВидДокумента - Булево
//  * ПереформированиеДоступно - Булево
//  * ЭтоПакетДокументов - Булево
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ЭтоНовыйДокумент - Булево
//  * ЭтоИнтеркампани - Булево
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ЭтоПрикладнойВидДокумента - Булево
//  * ДоступноИзменениеНастроекФормированияИОтправки - Булево
Функция НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента();
КонецФункции

#КонецОбласти // ПанельКомандИсходящегоДокумента

#Область ПанельПакета

// Заполнить данные компонента панель пакета.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПакета
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ЭтоНовыйДокумент - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПакета(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Данные документов пакета для заполнения компонента панель пакета.
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ИменаФайловОтправителей - См. ЭлектронныеДокументыЭДО.ИменаФайловОтправителейДокументов
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ИдентификаторПакета - Неопределено,УникальныйИдентификатор
//  * ВыборкаСвойствДокументов - ВыборкаИзРезультатаЗапроса:
//    ** Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//    ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//    ** НомерДокумента - Строка
//    ** ДатаДокумента - Дата
//    ** ФорматОсновногоТитула - Строка
//    ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * ВыборкаСостоянийДокументов - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Состояние - ПеречислениеСсылка.СостоянияДокументовЭДО
//    ** Комментарий - Строка
//  * ВыборкаОбъектовУчета - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//    ** СпособОбработки - Строка
//    ** Актуальный - Булево
//  * ВыборкаСостоянийОтраженияВУчете - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** СопоставитьНоменклатуру - Булево
//    ** СоздатьУчетныйДокумент - Булево
//    ** ПровестиУчетныйДокумент - Булево
//  * ВыборкаСостоянийПроверкиПодписи - ВыборкаИзРезультатаЗапроса:
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** ДатаПроверкиПодписиПоМЧД - Дата
//    ** ЕстьНевалидныеПодписиПоМЧД - Булево
//  * ИменаФайловОтправителей - Неопределено
//                            - Соответствие Из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Значение - Строка
Функция ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета(СвойстваДокумента,
	ИменаФайловОтправителей = Неопределено) Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета(
		СвойстваДокумента, ИменаФайловОтправителей);
	
КонецФункции

// Заполнить данные компонента панель пакета по параметрам.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПакета
//  ДанныеДокументовПакета - См. ДанныеДокументовПакетаДляЗаполненияКомпонентаПанельПакета
Процедура ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам(ДанныеКомпонента, ДанныеДокументовПакета) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПакетаПоПараметрам(ДанныеКомпонента,
		ДанныеДокументовПакета);
КонецПроцедуры

// Новые данные компонента панель пакета.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ДанныеДокументовПакета - См. НовыйНаборДанныхДокументовПакета
//  * ИдентификаторПакета - Неопределено
//                        - УникальныйИдентификатор
//  * СостояниеПакета - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостоянияПакетаОднородно - Булево
Функция НовыеДанныеКомпонентаПанельПакета() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельПакета();
КонецФункции

// Новый набор данных документов пакета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * ИмяФайла - Строка
//  * ФорматОсновногоТитула - Строка
//  * ТипРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ПолноеСостояние - См. НовыеДанныеКомпонентаПанельСостояния
Функция НовыйНаборДанныхДокументовПакета() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыйНаборДанныхДокументовПакета();
КонецФункции

#КонецОбласти // ПанельПакета

#Область ПанельСостояния

// Заполнить данные компонента панель состояния.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
//  СвойстваДокумента - Структура:
//  * ЭтоНовыйДокумент - Булево
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельСостояния(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельСостояния(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель состояния.
// 
// Возвращаемое значение:
//  Структура:
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО 
//  * КомментарийКСостояниюЭДО - Строка
//  * КонтрольОтраженияВУчете - См. НовыеДанныеКонтроляОтраженияВУчете
//  * ОшибкиВПодписях - Булево 
Функция НовыеДанныеКомпонентаПанельСостояния() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельСостояния();
КонецФункции

// Новые данные контроля отражения в учете.
// 
// Возвращаемое значение:
//  Структура:
// * ТребуетсяОтражениеВУчете - Булево
// * СозданУчетныйДокумент - Булево
// * ПроведенУчетныйДокумент - Булево
Функция НовыеДанныеКонтроляОтраженияВУчете() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКонтроляОтраженияВУчете();
КонецФункции

#КонецОбласти // ПанельСостояния

#Область ПанельИтогов

// Заполнить данные компонента панель итогов.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  * ФорматОсновногоТитула - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельИтогов(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Заполнить данные компонента панель итогов по данным из содержания.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельИтогов
//  СвойстваДокумента - Структура:
//  * СуммаДокумента - Число
//  ДанныеИзСодержания - Неопределено,Структура:
//  * Сумма - Число
//  * СуммаНДС - Число
//  * ПредставлениеВалюты - Строка
//  * ПредставлениеСтавкиНДС - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(ДанныеКомпонента, СвойстваДокумента, 
	ДанныеИзСодержания) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельИтоговПоДаннымИзСодержания(ДанныеКомпонента,
		СвойстваДокумента, ДанныеИзСодержания);
	
КонецПроцедуры

// Новые данные компонента панель итогов.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СуммаДокумента - Число
//  * ВалютаДокумента - Строка
//  * СтавкаНДСДокумента - Строка
//  * СуммаНДСДокумента - Число
Функция НовыеДанныеКомпонентаПанельИтогов() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельИтогов();
КонецФункции

#КонецОбласти // ПанельИтогов

#Область ПанельОтветственного

// Заполнить данные компонента панель ответственного.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельОтветственного
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельОтветственного(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельОтветственного(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель ответственного.
// 
// Возвращаемое значение:
//  Структура:
//  * ОтветственныйПоДокументу - СправочникСсылка.Пользователи
//  * ИспользуетсяРазделениеДокументовПоОтветственным - Булево
Функция НовыеДанныеКомпонентаПанельОтветственного() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельОтветственного();
КонецФункции

#КонецОбласти // ПанельОтветственного

#Область ПанельОтраженияВУчете

// Заполнить данные компонента панель отражения в учете.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельОтраженияВУчете
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
//  ОбъектыУчета - Неопределено
//               - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(ДанныеКомпонента, СвойстваДокумента,
	ОбъектыУчета = Неопределено) Экспорт

	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельОтраженияВУчете(ДанныеКомпонента, СвойстваДокумента,
		ОбъектыУчета);
	
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельОтраженияВУчете
//
Функция НовыеДанныеКомпонентаПанельОтраженияВУчете() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельОтраженияВУчете();
КонецФункции

// См. ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеОбъектаУчетаДокумента
//
Функция НовыеДанныеОбъектаУчетаДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеОбъектаУчетаДокумента();
КонецФункции

#КонецОбласти // ПанельОтраженияВУчете

#Область ПанельЗакладокВходящегоДокумента

// Заполнить данные компонента панель закладок входящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
//  СопроводительныеЗаписи - ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента(ДанныеКомпонента, ОписанияПодписей,
	СопроводительныеЗаписи) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельЗакладокВходящегоДокумента(ДанныеКомпонента,
		ОписанияПодписей, СопроводительныеЗаписи);
	
КонецПроцедуры

// Новые данные компонента панель закладок входящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * КоличествоПодписей - Число
//  * КоличествоСопроводительныхЗаписок - Число
Функция НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента();
КонецФункции

#КонецОбласти // ПанельЗакладокВходящегоДокумента

#Область ПанельЗакладокИсходящегоДокумента

// Заполнить данные компонента панель закладок исходящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
//  СопроводительныеЗаписи - ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
//  СвойстваДокумента - Структура:
//   * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(ДанныеКомпонента, ОписанияПодписей,
	СопроводительныеЗаписи, СвойстваДокумента) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельЗакладокИсходящегоДокумента(ДанныеКомпонента,
		ОписанияПодписей, СопроводительныеЗаписи, СвойстваДокумента);
	
КонецПроцедуры

// Новые данные компонента панель закладок исходящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * КоличествоПодписей - Число
//  * КоличествоСопроводительныхЗаписок - Число
//  * ПредставлениеПрогрессаПодписания - Строка
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
Функция НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента();
КонецФункции

#КонецОбласти // ПанельЗакладокИсходящегоДокумента

#Область ПанельВизуализации

// Заполнить данные компонента панель визуализации.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализации
//  ВизуализацияДокумента - Структура:
//  * ПредставлениеДокумента - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * ИмяФайла - Строка
//  * РазмерФайла - Число
//  НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонента, ВизуализацияДокумента, НастройкиФормы) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельВизуализации(ДанныеКомпонента, ВизуализацияДокумента, НастройкиФормы);
КонецПроцедуры

// Новые данные компонента панель визуализации.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * Данные - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * НаименованиеФайла - Строка
//  * РасширениеФайла - Строка
//  * РазмерФайла - Число
//  * ЕстьОшибка - Булево
//  * ОтключитьТранслитерацию - Булево
Функция НовыеДанныеКомпонентаПанельВизуализации() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельВизуализации();
КонецФункции

#КонецОбласти // ПанельВизуализации

#Область ПанельКомандНастроекВизуализации

// Заполнить данные компонента панель команд настроек визуализации.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандНастроекВизуализации
//  ВизуализацияДокумента - См. ЭлектронныеДокументыЭДО.ВизуализацияДокумента
//  НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра 
Процедура ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(ДанныеКомпонента, ВизуализацияДокумента,
	НастройкиФормы) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельКомандНастроекВизуализации(ДанныеКомпонента,
		ВизуализацияДокумента, НастройкиФормы);

КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельКомандНастроекВизуализации
//
Функция НовыеДанныеКомпонентаПанельКомандНастроекВизуализации() Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельКомандНастроекВизуализации();
	
КонецФункции

#КонецОбласти // ПанельКомандНастроекВизуализации

#Область ПанельВизуализацииТекущихДел

// Заполнить данные компонента панель визуализации текущих дел по свойствам документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента(ДанныеКомпонента, 
	СвойстваДокумента) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДелПоСвойствамДокумента(
		ДанныеКомпонента, СвойстваДокумента);
	
КонецПроцедуры

// Заполнить данные компонента панель визуализации текущих дел.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
//  ВизуализацияДокумента - См. ЭлектронныеДокументыЭДО.ВизуализацияДокумента
Процедура ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел(ДанныеКомпонента, ВизуализацияДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельВизуализацииТекущихДел(ДанныеКомпонента,
		ВизуализацияДокумента);
КонецПроцедуры

// Новые данные компонента панель визуализации текущих дел.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * Данные - ТабличныйДокумент,Строка,ДвоичныеДанные,Неопределено
//  * НаименованиеФайла - Строка
//  * РасширениеФайла - Строка
//  * ЕстьОшибка - Булево
//  * ФайлПомеченНаУдаление - Булево
//  * ФайлМожноПроштамповать - Булево
Функция НовыеДанныеКомпонентаПанельВизуализацииТекущихДел() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельВизуализацииТекущихДел();
КонецФункции

#КонецОбласти // ПанельВизуализацииТекущихДел

#Область ПанельПредставленияФайла

// Заполнить данные компонента панель представления файла по свойствам документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПредставленияФайла
//  СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Процедура ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента(ДанныеКомпонента,
	СвойстваДокумента) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПредставленияФайлаПоСвойствамДокумента(
		ДанныеКомпонента, СвойстваДокумента);
	
КонецПроцедуры

// Заполнить данные компонента панель представления файла.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПредставленияФайла
//  РезультатШтампирования - Неопределено
//                         - Структура:
//                           * ПредставлениеДокумента - Неопределено,ДвоичныеДанные
//                           * ТекстОшибки - Строка
Процедура ЗаполнитьДанныеКомпонентаПанельПредставленияФайла(ДанныеКомпонента, РезультатШтампирования) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПредставленияФайла(ДанныеКомпонента,
		РезультатШтампирования);
КонецПроцедуры

// См. ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельПредставленияФайла
// 
Функция НовыеДанныеКомпонентаПанельПредставленияФайла() Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельПредставленияФайла();
	
КонецФункции

#КонецОбласти // ПанельПредставленияФайла

#Область ПанельПодписей

// Заполнить данные компонента панель подписей.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПодписей
//  ОписанияПодписей - См. НовыеОписанияУстановленныхПодписей
Процедура ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонента, ОписанияПодписей) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельПодписей(ДанныеКомпонента, ОписанияПодписей);
КонецПроцедуры

// Новые данные компонента панель подписей.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * ПодписиДокумента - См. НовыеОписанияУстановленныхПодписей
//  * ЕстьПравоИзмененияМЧД - Булево
//
Функция НовыеДанныеКомпонентаПанельПодписей() Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельПодписей();
	
КонецФункции

// Новые описания установленных подписей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы,Строка
//  * ПорядковыйНомер - Число
//  * Владелец - Строка
//  * ДатаПодписи - Дата
//  * ДатаПроверкиПодписи - Дата 
//  * ДоверенностьПредставление - Строка
//  * ПодписьВерна - Булево
//  * ПодписьВернаПредставление - Строка
//  * ЭтоВходящаяПодпись - Булево
//  * ЭтоПодписьПоДоверенности - Булево
//  * ПодписьПоДоверенностиВерна - Булево
//  * ДоверенностьПроверенаУспешно - Булево
//  * ПроверкаДоверенностиВыполненаВручную - Булево
//  * ПроверкаПолномочийВыполненаБезОшибок - Булево
Функция НовыеОписанияУстановленныхПодписей() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеОписанияУстановленныхПодписей();
КонецФункции

#КонецОбласти // ПанельПодписей

#Область ПанельСопроводительнойЗапискиВходящегоДокумента

// Заполнить данные компонента панель сопроводительной записки входящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - См. НовыеСопроводительныеЗаписи
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(ДанныеКомпонента, СвойстваДокумента, 
	СопроводительныеЗаписи) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента(
		ДанныеКомпонента, СвойстваДокумента, СопроводительныеЗаписи);
		
КонецПроцедуры

// Новые данные компонента панель сопроводительной записки входящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
//
Функция НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента() Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента();
	
КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиВходящегоДокумента

#Область ПанельСопроводительнойЗапискиИсходящегоДокумента

// Заполнить данные компонента панель сопроводительной записки исходящего документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - См. НовыеСопроводительныеЗаписи
Процедура ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(ДанныеКомпонента, СвойстваДокумента,
	СопроводительныеЗаписи) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента(
		ДанныеКомпонента, СвойстваДокумента, СопроводительныеЗаписи);
		
КонецПроцедуры

// Новые данные компонента панель сопроводительной записки исходящего документа.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
//
Функция НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента() Экспорт
	
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента();
	
КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиИсходящегоДокумента

#Область ПанельСопроводительнойЗапискиОбщее

// Новый набор сопроводительных записок документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Автор - ОпределяемыйТип.УчастникЭДО
//  * Дата - Дата
//  * Текст - Строка
Функция НовыйНаборСопроводительныхЗаписокДокумента() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыйНаборСопроводительныхЗаписокДокумента();
КонецФункции

// Заполнить сопроводительные записи компонента.
//
// Параметры:
//  СопроводительныеЗаписиКомпонента - См. НовыйНаборСопроводительныхЗаписокДокумента
//  СвойстваДокумента - Структура:
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  СопроводительныеЗаписи - ТаблицаЗначений:
//  * Направление - ПеречислениеСсылка.НаправленияЭДО
//  * Дата - Дата
//  * ДополнительнаяИнформация - Строка
Процедура ЗаполнитьСопроводительныеЗаписиКомпонента(СопроводительныеЗаписиКомпонента, СвойстваДокумента, 
	СопроводительныеЗаписи) Экспорт

	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьСопроводительныеЗаписиКомпонента(СопроводительныеЗаписиКомпонента,
		СвойстваДокумента, СопроводительныеЗаписи);
	
КонецПроцедуры

// Возвращает новые сопроводительные записи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Направление - ПеречислениеСсылка.НаправленияЭДО
// * Дата - Дата
// * ДополнительнаяИнформация - Строка 
Функция НовыеСопроводительныеЗаписи() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеСопроводительныеЗаписи();
КонецФункции

#КонецОбласти // ПанельСопроводительнойЗапискиОбщее

#Область ПанельРеквизитов

// Заполнить данные компонента панель реквизитов по свойствам документа.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельРеквизитов
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
Процедура ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента(ДанныеКомпонента, СвойстваДокумента) Экспорт
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельРеквизитовПоСвойствамДокумента(ДанныеКомпонента, СвойстваДокумента);
КонецПроцедуры

// Новые данные компонента панель реквизитов.
// 
// Возвращаемое значение:
//  Структура:
// * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
// * ЭтоВнутреннийВидДокумента - Булево
Функция НовыеДанныеКомпонентаПанельРеквизитов() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельРеквизитов();
КонецФункции

#КонецОбласти // ПанельРеквизитов

#Область ПанельМаршрута

// Заполнить данные компонента панель маршрута.
// 
// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельМаршрута
//  СвойстваДокумента - Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * МаршрутУказанВНастройках - Булево
//  ОписанияПодписей - Неопределено
//                   - См. НовыеОписанияУстановленныхПодписей
//  ИзмененМаршрутПодписания - Булево
Процедура ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонента, СвойстваДокумента, ОписанияПодписей,
	ИзмененМаршрутПодписания = Ложь) Экспорт
	
	ЛегкийИнтерфейсДокументовЭДОСлужебный.ЗаполнитьДанныеКомпонентаПанельМаршрута(ДанныеКомпонента, СвойстваДокумента, ОписанияПодписей,
		ИзмененМаршрутПодписания);
	
КонецПроцедуры

// Новые данные компонента панель маршрута.
// 
// Возвращаемое значение:
//  Структура:
//  * АсинхронноеПолучение - Булево
//  * СхемаМаршрутаПодписания - См. МаршрутыПодписанияБЭД.ПустаяТаблицаТребованийКПодписанию
//  * ПредставлениеМаршрута - Строка
//  * ЭтоИнтеркампани - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * ИзмененМаршрутПодписания - Булево
//  * МаршрутУказанВНастройках - Булево
//  * КоличествоПодписей - Число
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
Функция НовыеДанныеКомпонентаПанельМаршрута() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельМаршрута();
КонецФункции

#КонецОбласти // ПанельМаршрута

#КонецОбласти // ЗаполнениеДанныхКомпонентовИнтерфейса

#Область ПросмотрФайлаЭлектронногоДокумента

// Данные файла информации отправителя документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО 
//  ИдентификаторФормы - УникальныйИдентификатор - для помещения двоичных данных во временное хранилище
// 
// Возвращаемое значение:
//  См. НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокумента(ЭлектронныйДокумент, ИдентификаторФормы) Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.ДанныеФайлаИнформацииОтправителяДокумента(
		ЭлектронныйДокумент, ИдентификаторФормы);
КонецФункции

#КонецОбласти // ПросмотрФайлаЭлектронногоДокумента

#Область Подписи

// Возвращает описания установленных подписей по основным титулам электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДОСлужебный.ОписанияУстановленныхПодписейДокумента
Функция ОписанияУстановленныхПодписейДокумента(ЭлектронныйДокумент) Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.ОписанияУстановленныхПодписейДокумента(ЭлектронныйДокумент);
КонецФункции

#КонецОбласти // Подписи

#Область СопроводительнаяЗаписка

// Возвращает сопроводительные записки сообщений электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДОСлужебный.СопроводительныеЗаписиДокумента
Функция СопроводительныеЗаписиДокумента(ЭлектронныйДокумент) Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.СопроводительныеЗаписиДокумента(ЭлектронныйДокумент);
КонецФункции

#КонецОбласти // СопроводительнаяЗаписка

#Область МаршрутПодписания

// Представление маршрута подписания документа.
// 
// Параметры:
//  СвойстваДокумента - Структура:
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеМаршрутаПодписанияДокумента(СвойстваДокумента) Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.ПредставлениеМаршрутаПодписанияДокумента(СвойстваДокумента);
КонецФункции

// Возвращает новые свойства документа для получения представления маршрута.
// 
// Возвращаемое значение:
//  Структура:
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * СписокПодписантов - См. НовыйСписокПодписантовДляПолученияПредставленияМаршрута
//
Функция НовыеСвойстваДокументаДляПолученияПредставленияМаршрута() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеСвойстваДокументаДляПолученияПредставленияМаршрута();
КонецФункции

// Возвращает новый список подписантов для получения представления маршрута.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Подписант - ОпределяемыйТип.Пользователь
//  * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
Функция НовыйСписокПодписантовДляПолученияПредставленияМаршрута() Экспорт
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыйСписокПодписантовДляПолученияПредставленияМаршрута();
КонецФункции

#КонецОбласти // МаршрутПодписания

#КонецОбласти // ОблачныйЭДО_ИнтеграцияОблачногоЭДО

#КонецОбласти // ДляВызоваИзДругихПодсистем

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеДанныхКомпонентовИнтерфейса

// Параметры:
//  ДанныеКомпонентов - См. НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - См. ПараметрыЗаполненияДанныхКомпонентовПросмотраДокумента
//  
// Возвращаемое значение:
//  - Неопределено
//  - См. ДлительныеОперации.ВыполнитьФункцию
Функция ЗаполнитьДанныеКомпонентовПросмотраДокумента(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт

	МенеджерДанных = МенеджерДанныхИнтеграцииЭДО(ПараметрыЗаполнения.СвойстваДокумента.ЭтоОблачныйЭДО);
	
	МенеджерДанных.ЗаполнитьДанныеКомпонентовПросмотраДокумента(ДанныеКомпонентов, ПараметрыЗаполнения);
	
	АсинхронныеДанныеКомпонентов = ДанныеКомпонентовДляАсинхронногоПолучения(ДанныеКомпонентов);
	
	Если АсинхронныеДанныеКомпонентов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронноВФоне(
		АсинхронныеДанныеКомпонентов, ПараметрыЗаполнения);
	
	ДанныеКомпонентовАсинхронно = РезультатЗаполненияДанныхКомпонентовПросмотраДокументаАсинхронноВФоне(
		ДлительнаяОперация);
	
	Если ДанныеКомпонентовАсинхронно = Неопределено Тогда
		Возврат ДлительнаяОперация;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДанныеКомпонентовАсинхронно Цикл
		ИмяКомпонента = КлючИЗначение.Ключ;
		ДанныеКомпонента = КлючИЗначение.Значение;
		Если ДанныеКомпонента <> Неопределено Тогда
			ДанныеКомпонентов.Вставить(ИмяКомпонента, ДанныеКомпонента);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  КомпонентыДляИнициализации - Строка - имена компонентов, перечисленные через запятую, в формате требований 
//                                        к свойствам структуры. Например, "ПанельСостояния, ПанельВизуализации"
// 
// Возвращаемое значение:
//  Структура:
//  * ПанельКарточки - Неопределено 
//                    - См. НовыеДанныеКомпонентаПанельКарточки
//  * ПанельПометкиНаУдаление - Неопределено 
//                            - См. НовыеДанныеКомпонентаПанельПометкиНаУдаление
//  * ПанельКомандВходящегоДокумента - Неопределено 
//                                   - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
//  * ПанельКомандИсходящегоДокумента - Неопределено 
//                                    - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
//  * ПанельПакета - Неопределено
//                 - См. НовыеДанныеКомпонентаПанельПакета
//  * ПанельСостояния - Неопределено
//                    - См. НовыеДанныеКомпонентаПанельСостояния
//  * ПанельИтогов - Неопределено
//                 - См. НовыеДанныеКомпонентаПанельИтогов
//  * ПанельОтветственного - Неопределено
//                         - См. НовыеДанныеКомпонентаПанельОтветственного
//  * ПанельОтраженияВУчете - Неопределено
//                          - См. НовыеДанныеКомпонентаПанельОтраженияВУчете
//  * ПанельЗакладокВходящегоДокумента - Неопределено
//                                     - См. НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
//  * ПанельЗакладокИсходящегоДокумента - Неопределено
//                                     - См. НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
//  * ПанельВизуализации - Неопределено
//                       - См. НовыеДанныеКомпонентаПанельВизуализации
//  * ПанельКомандНастроекВизуализации - Неопределено
//                                     - См. НовыеДанныеКомпонентаПанельКомандНастроекВизуализации
//  * ПанельПодписей - Неопределено
//                   - См. НовыеДанныеКомпонентаПанельПодписей
//  * ПанельСопроводительнойЗапискиВходящегоДокумента - Неопределено
//                                                    - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
//  * ПанельСопроводительнойЗапискиИсходящегоДокумента - Неопределено
//                                                     - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
//  * ПанельВизуализацииТекущихДел - Неопределено
//                                 - См. НовыеДанныеКомпонентаПанельВизуализацииТекущихДел
//  * ПанельПредставленияФайла - Неопределено
//                             - См. НовыеДанныеКомпонентаПанельПредставленияФайла
//  * ПанельРеквизитов - Неопределено
//                     - См. НовыеДанныеКомпонентаПанельРеквизитов
//  * ПанельМаршрута - Неопределено
//                   - См. НовыеДанныеКомпонентаПанельМаршрута
Функция НовыеДанныеКомпонентовПросмотраДокумента(КомпонентыДляИнициализации = "") Экспорт

	ДанныеКомпонентовПросмотра = Новый Структура;
	ДанныеКомпонентовПросмотра.Вставить("ПанельКарточки", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельПометкиНаУдаление", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельКомандВходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельКомандИсходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельПакета", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельСостояния", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельИтогов", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельОтветственного", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельОтраженияВУчете", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельЗакладокВходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельЗакладокИсходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельВизуализации", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельКомандНастроекВизуализации", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельПодписей", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельСопроводительнойЗапискиВходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельСопроводительнойЗапискиИсходящегоДокумента", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельВизуализацииТекущихДел", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельПредставленияФайла", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельРеквизитов", Неопределено);
	ДанныеКомпонентовПросмотра.Вставить("ПанельМаршрута", Неопределено);
	
	Если Не ЗначениеЗаполнено(КомпонентыДляИнициализации) Тогда
		Возврат ДанныеКомпонентовПросмотра;
	КонецЕсли;
	
	ИменаКомпонентовДляИнициализации = СтрРазделить(КомпонентыДляИнициализации, ",", Ложь);
	Для Индекс = 0 По ИменаКомпонентовДляИнициализации.ВГраница() Цикл
		ИменаКомпонентовДляИнициализации[Индекс] = СокрЛП(ИменаКомпонентовДляИнициализации[Индекс]);
	КонецЦикла;
	
	Для Каждого ИмяКомпонента Из ИменаКомпонентовДляИнициализации Цикл
		Если      ИмяКомпонента = "ПанельКарточки" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельКарточки();
		ИначеЕсли ИмяКомпонента = "ПанельПометкиНаУдаление" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельПометкиНаУдаление();
		ИначеЕсли ИмяКомпонента = "ПанельКомандВходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельКомандВходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельКомандИсходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельПакета" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельПакета();
		ИначеЕсли ИмяКомпонента = "ПанельСостояния" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельСостояния();
		ИначеЕсли ИмяКомпонента = "ПанельИтогов" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельИтогов();
		ИначеЕсли ИмяКомпонента = "ПанельОтветственного" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельОтветственного();
		ИначеЕсли ИмяКомпонента = "ПанельОтраженияВУчете" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельОтраженияВУчете();
		ИначеЕсли ИмяКомпонента = "ПанельЗакладокВходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельЗакладокИсходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельВизуализации" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельВизуализации();
		ИначеЕсли ИмяКомпонента = "ПанельКомандНастроекВизуализации" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельКомандНастроекВизуализации();
		ИначеЕсли ИмяКомпонента = "ПанельПодписей" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельПодписей();
		ИначеЕсли ИмяКомпонента = "ПанельСопроводительнойЗапискиВходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельСопроводительнойЗапискиИсходящегоДокумента" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента();
		ИначеЕсли ИмяКомпонента = "ПанельВизуализацииТекущихДел" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельВизуализацииТекущихДел();
		ИначеЕсли ИмяКомпонента = "ПанельПредставленияФайла" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельПредставленияФайла();
		ИначеЕсли ИмяКомпонента = "ПанельРеквизитов" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельРеквизитов();
		ИначеЕсли ИмяКомпонента = "ПанельМаршрута" Тогда
			ДанныеКомпонентовПросмотра[ИмяКомпонента] = НовыеДанныеКомпонентаПанельМаршрута();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеКомпонентовПросмотра;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * СвойстваДокумента - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
// * ОбъектыУчетаДокумента - Неопределено
//                         - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * НастройкиФормы - См. НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра
// * ИдентификаторФормы - УникальныйИдентификатор
// * ПредварительныйПросмотр - Неопределено
//                           - См. НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов
// * ИзмененМаршрутПодписания - Булево
Функция НовыеПараметрыПолученияДанныхКомпонентов() Экспорт

	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("СвойстваДокумента", НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра());
	ПараметрыПолучения.Вставить("ОбъектыУчетаДокумента", Неопределено);
	ПараметрыПолучения.Вставить("НастройкиФормы", НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра());
	ПараметрыПолучения.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыПолучения.Вставить("ПредварительныйПросмотр", Неопределено);
	ПараметрыПолучения.Вставить("ИзмененМаршрутПодписания", Ложь);
	Возврат ПараметрыПолучения;

КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Ссылка - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * НаОзнакомлении - Булево
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//  * ФорматОсновногоТитула - Строка
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * СуммаДокумента - Число
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * Контрагент - Неопределено,ОпределяемыйТип.УчастникЭДО
//  * Ответственный - СправочникСсылка.Пользователи
//  * ПометкаУдаления - Булево
//  * ИдентификаторДокумента - Строка
//  * ЭтоОблачныйЭДО - Булево
//  * ЭтоВходящийЭДО - Булево
//  * ЭтоНовыйДокумент - Булево
//  * ИдентификаторКонтрагента - Строка
//  * ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//  * МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//  * МаршрутУказанВНастройках - Булево
//  * СписокПодписантов - Неопределено,ТаблицаЗначений:
//    ** Подписант - ОпределяемыйТип.Пользователь
//    ** Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//  * ИдентификаторОрганизации - Строка
Функция НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра() Экспорт

	СвойстваДокумента = Новый Структура;
	СвойстваДокумента.Вставить("Ссылка",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка"));
	СвойстваДокумента.Вставить("НаОзнакомлении", Ложь);
	СвойстваДокумента.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка"));
	СвойстваДокумента.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ПустаяСсылка"));
	СвойстваДокумента.Вставить("СпособОбмена", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ПустаяСсылка"));
	СвойстваДокумента.Вставить("ФорматОсновногоТитула", "");
	СвойстваДокумента.Вставить("НомерДокумента", "");
	СвойстваДокумента.Вставить("ДатаДокумента", Дата(1, 1, 1));
	СвойстваДокумента.Вставить("СуммаДокумента", 0);
	СвойстваДокумента.Вставить("Организация", Неопределено);
	СвойстваДокумента.Вставить("Контрагент", Неопределено);
	СвойстваДокумента.Вставить("Ответственный", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	СвойстваДокумента.Вставить("ПометкаУдаления", Ложь);
	СвойстваДокумента.Вставить("ИдентификаторДокумента", "");
	СвойстваДокумента.Вставить("ЭтоОблачныйЭДО", Ложь);
	СвойстваДокумента.Вставить("ЭтоВходящийЭДО", Ложь);
	СвойстваДокумента.Вставить("ЭтоНовыйДокумент", Ложь);
	СвойстваДокумента.Вставить("ИдентификаторКонтрагента", "");
	СвойстваДокумента.Вставить("ТипРегламента",
		ПредопределенноеЗначение("Перечисление.ТипыРегламентовЭДО.ПустаяСсылка"));
	СвойстваДокумента.Вставить("МаршрутПодписания",
		ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ПустаяСсылка"));
	СвойстваДокумента.Вставить("МаршрутУказанВНастройках", Ложь);
	СвойстваДокумента.Вставить("СписокПодписантов", Неопределено);
	СвойстваДокумента.Вставить("ВидПодписи",
		ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.ПустаяСсылка"));
	СвойстваДокумента.Вставить("ИдентификаторОрганизации", "");
	Возврат СвойстваДокумента;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * ВыводитьБанковскиеРеквизиты - Булево 
// * ОтключитьВыводДопДанных - Булево
// * ОтключитьВыводКопияВерна - Булево
// * ОтключитьТранслитерацию - Булево
// * ПеречитатьКэшВизуализации - Булево
Функция НовыеНастройкиФормыДляПолученияДанныхКомпонентовПросмотра() Экспорт

	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ВыводитьБанковскиеРеквизиты", Ложь);
	НастройкиФормы.Вставить("ОтключитьВыводДопДанных", Ложь);
	НастройкиФормы.Вставить("ОтключитьВыводКопияВерна", Ложь);
	НастройкиФормы.Вставить("ОтключитьТранслитерацию", Ложь);
	НастройкиФормы.Вставить("ПеречитатьКэшВизуализации", Ложь);
	Возврат НастройкиФормы;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * ДвоичныеДанныеДобавляемогоФайла - Неопределено
//                                   - ДвоичныеДанные
// * ИмяДобавляемогоФайла - Строка
// * РасширениеДобавляемогоФайла - Строка
// * ИтогиДокумента - Неопределено
//                  - См. ЭлектронныеДокументыЭДО.НовыеИтогиДокументаПоСодержаниюФайла
// * ДвоичныеДанныеФайлаОтвета - Неопределено
//                             - ДвоичныеДанные
// * ПредварительнаяВизуализация - Неопределено
//                               - См. РегистрыСведений.ВизуализацииДокументовОблачногоЭДО.НовыеСвойстваВизуализации
Функция НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов() Экспорт

	ПараметрыПредварительногоПросмотра = Новый Структура;
	ПараметрыПредварительногоПросмотра.Вставить("ДвоичныеДанныеДобавляемогоФайла", Неопределено);
	ПараметрыПредварительногоПросмотра.Вставить("ИмяДобавляемогоФайла", "");
	ПараметрыПредварительногоПросмотра.Вставить("РасширениеДобавляемогоФайла", "");
	ПараметрыПредварительногоПросмотра.Вставить("ИтогиДокумента", Неопределено);
	ПараметрыПредварительногоПросмотра.Вставить("ДвоичныеДанныеФайлаОтвета", Неопределено);
	ПараметрыПредварительногоПросмотра.Вставить("ПредварительнаяВизуализация", Неопределено);
	Возврат ПараметрыПредварительногоПросмотра;

КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
// 
// Возвращаемое значение:
// - Неопределено
// - См. НовыеДанныеКомпонентовПросмотраДокумента
Функция РезультатЗаполненияДанныхКомпонентовПросмотраДокументаАсинхронноВФоне(ДлительнаяОперация) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		Или ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // См. НовыеДанныеКомпонентовПросмотраДокумента
	УдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);

	//@skip-check constructor-function-return-section
	Возврат Результат;

КонецФункции

// Параметры:
//  ДлительнаяОперация - См. ДлительныеОперации.ВыполнитьФункцию
Процедура ПрекратитьОжиданиеПолученияДанныхКомпонентовПросмотраДокумента(ДлительнаяОперация) Экспорт

	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	
	//@skip-check statement-type-change
	ДлительнаяОперация = Неопределено;
	
КонецПроцедуры

#Если НЕ ВнешнееСоединение Тогда
	
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИмяФормы - Строка
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * ИзмененМаршрутПодписания - Булево
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПолученияДанныхКомпонентов
Функция ПараметрыЗаполненияДанныхКомпонентовПросмотраДокумента(Форма) Экспорт
	
	ПараметрыЗаполнения = НовыеПараметрыПолученияДанныхКомпонентов();
	ПараметрыЗаполнения.ИдентификаторФормы = Форма.УникальныйИдентификатор;
	ПараметрыЗаполнения.СвойстваДокумента = 
		СвойстваДокументаДляПолученияДанныхКомпонентовПросмотраКарточкиДокумента(Форма);
	ПараметрыЗаполнения.ОбъектыУчетаДокумента = 
		ИнтеграцияЭДО.АктуальныеОбъектыУчетаСДаннымиПроведения(Форма.Объект.Ссылка).ВыгрузитьКолонку("ОбъектУчета");
	
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;
	
	ВыводитьБанковскиеРеквизиты = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ВыводитьБанковскиеРеквизиты", Ложь); // Булево
	НастройкиФормы.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьВыводДопДанных", Истина); // Булево
	НастройкиФормы.ОтключитьВыводДопДанных = ОтключитьВыводДопДанных;
		
	ОтключитьВыводКопияВерна = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьВыводКопияВерна", Истина); // Булево
	НастройкиФормы.ОтключитьВыводКопияВерна = ОтключитьВыводКопияВерна;
		
	ОтключитьТранслитерацию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьТранслитерацию", Ложь); // Булево
	НастройкиФормы.ОтключитьТранслитерацию = ОтключитьТранслитерацию;
	
	Если Не ЭтоВходящийЭДО(Форма.Объект.Ссылка) Тогда
		ПараметрыЗаполнения.ИзмененМаршрутПодписания = Форма.ИзмененМаршрутПодписания;
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// @skip-check property-return-type, statement-type-change
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** СуммаДокумента - Число
//  * ИмяФормы - Строка
//  * УникальныйИдентификатор - УникальныйИдентификатор
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//   ** СпособОбработки - Строка
//  * ИмяДобавляемогоФайла - Строка
//  * РасширениеДобавляемогоФайла - Строка
//  * ВалютаДокументаИзДобавляемогоФайла - Строка
//  * СуммаНДСДокументаИзДобавляемогоФайла - Число
//  * СтавкаНДСДокументаИзДобавляемогоФайла - Строка
//  * АдресФайловНовогоДокумента - Строка
//  * АдресОписанийСообщений - Строка
//  * АдресПредварительнойВизуализацииНовогоДокумента - Строка
// 
// Возвращаемое значение:
//  См. НовыеПараметрыПолученияДанныхКомпонентов
Функция ПараметрыЗаполненияДанныхКомпонентовПредварительногоПросмотраДокумента(Форма) Экспорт
	
	ПараметрыЗаполнения = НовыеПараметрыПолученияДанныхКомпонентов();
	ПараметрыЗаполнения.ИдентификаторФормы = Форма.УникальныйИдентификатор;
	ПараметрыЗаполнения.СвойстваДокумента = 
		СвойстваДокументаДляПолученияДанныхКомпонентовПросмотраКарточкиДокумента(Форма);
	ПараметрыЗаполнения.ОбъектыУчетаДокумента = Форма.ОбъектыУчетаДокумента.Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	НастройкиФормы = ПараметрыЗаполнения.НастройкиФормы;

	ВыводитьБанковскиеРеквизиты = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ВыводитьБанковскиеРеквизиты", Ложь); // Булево
	НастройкиФормы.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьВыводДопДанных", Истина); // Булево
	НастройкиФормы.ОтключитьВыводДопДанных = ОтключитьВыводДопДанных;
		
	ОтключитьВыводКопияВерна = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьВыводКопияВерна", Истина); // Булево
	НастройкиФормы.ОтключитьВыводКопияВерна = ОтключитьВыводКопияВерна;
		
	ОтключитьТранслитерацию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы,
		"ОтключитьТранслитерацию", Ложь); // Булево
	НастройкиФормы.ОтключитьТранслитерацию = ОтключитьТранслитерацию;
	
	ПараметрыПредварительногоПросмотра = НовыеПараметрыПредварительногоПросмотраДанныхКомпонентов();
	
	ФайлДокумента = Неопределено;
	ФайлОтветаДокумента = Неопределено;
	КоличествоФайловПриСозданииДвухТитуловОдновременно = 2;
	Если ЭтоАдресВременногоХранилища(Форма.АдресФайловНовогоДокумента) Тогда
		ФайлыДокумента = ПолучитьИзВременногоХранилища(Форма.АдресФайловНовогоДокумента);
		ФайлДокумента = ФайлыДокумента.Основной;
	ИначеЕсли ЭтоАдресВременногоХранилища(Форма.АдресОписанийСообщений) Тогда
		ОписанияСообщений = ПолучитьИзВременногоХранилища(Форма.АдресОписанийСообщений); // Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
		Если ОписанияСообщений.Количество() = КоличествоФайловПриСозданииДвухТитуловОдновременно Тогда
			ФайлДокумента = ОписанияСообщений[0].Данные.Документ; 
			ФайлОтветаДокумента = ОписанияСообщений[1].Данные.Документ; 
		ИначеЕсли ЗначениеЗаполнено(ОписанияСообщений) Тогда
			ФайлДокумента = ОписанияСообщений[0].Данные.Документ; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФайлДокумента) Тогда
		ПараметрыПредварительногоПросмотра.ДвоичныеДанныеДобавляемогоФайла = ФайлДокумента.ДвоичныеДанные;
		ПараметрыПредварительногоПросмотра.ИмяДобавляемогоФайла = 
			РаботаСФайламиБЭД.ПреобразоватьИмяФайлаСУчетомТранслитерации(ФайлДокумента.ИмяФайла,
				ОтключитьТранслитерацию);
		ПараметрыПредварительногоПросмотра.РасширениеДобавляемогоФайла = 
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлДокумента.ИмяФайла);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФайлОтветаДокумента) Тогда
		ПараметрыПредварительногоПросмотра.ДвоичныеДанныеФайлаОтвета = ФайлОтветаДокумента.ДвоичныеДанные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.СуммаДокумента) Тогда
		ИтогиДокумента = ЭлектронныеДокументыЭДО.НовыеИтогиДокументаПоСодержаниюФайла();
		ИтогиДокумента.Сумма = Форма.Объект.СуммаДокумента;
		ИтогиДокумента.ПредставлениеВалюты = Форма.ВалютаДокументаИзДобавляемогоФайла;
		ИтогиДокумента.СуммаНДС = Форма.СуммаНДСДокументаИзДобавляемогоФайла;
		ИтогиДокумента.ПредставлениеСтавкиНДС = Форма.СтавкаНДСДокументаИзДобавляемогоФайла;
		
		ПараметрыПредварительногоПросмотра.ИтогиДокумента = ИтогиДокумента;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Форма.АдресПредварительнойВизуализацииНовогоДокумента) Тогда
		ПараметрыПредварительногоПросмотра.ПредварительнаяВизуализация = ПолучитьИзВременногоХранилища(
			Форма.АдресПредварительнойВизуализацииНовогоДокумента);
		УдалитьИзВременногоХранилища(Форма.АдресПредварительнойВизуализацииНовогоДокумента);
		Форма.АдресПредварительнойВизуализацииНовогоДокумента = "";
	КонецЕсли;
	
	ПараметрыЗаполнения.ПредварительныйПросмотр = ПараметрыПредварительногоПросмотра;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецЕсли // ВнешнееСоединение

#КонецОбласти // ЗаполнениеДанныхКомпонентовИнтерфейса

#Область ПолучениеФайла

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ИдентификаторФормы - УникальныйИдентификатор
//  ЭтоИнтеграцияОблачногоЭДО - Булево
// 
// Возвращаемое значение:
//  См. НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя
Функция ДанныеФайлаИнформацииОтправителяДокументаПоИнтеграциям(ЭлектронныйДокумент, ИдентификаторФормы,
	ЭтоИнтеграцияОблачногоЭДО = Ложь) Экспорт

	МенеджерДанных = МенеджерДанныхИнтеграцииЭДО(ЭтоИнтеграцияОблачногоЭДО);
	
	Возврат МенеджерДанных.ДанныеФайлаИнформацииОтправителяДокумента(ЭлектронныйДокумент, ИдентификаторФормы);

КонецФункции

// Возвращаемое значение:
// Структура:
// * ДанныеФайла - Неопределено
//               - См. НовыеДанныеФайлаИнформацииОтправителя
// * КонтекстДиагностики - См. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатПолученияДанныхФайлаИнформацииОтправителя() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики()); 
	Возврат Результат;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * ДвоичныеДанные - Неопределено
//                  - ДвоичныеДанные
// * ПолныеДанныеФайла - Неопределено
//                     - См. РаботаСФайлами.ДанныеФайла
// * ИмяФайла - Строка
// * ПомеченНаУдаление - Булево
Функция НовыеДанныеФайлаИнформацииОтправителя() Экспорт

	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ДвоичныеДанные", Неопределено);
	ДанныеФайла.Вставить("ПолныеДанныеФайла", Неопределено);
	ДанныеФайла.Вставить("ИмяФайла", "");
	ДанныеФайла.Вставить("ПомеченНаУдаление", Ложь);
	Возврат ДанныеФайла;

КонецФункции

#КонецОбласти // ПолучениеФайла

#Область ПредставлениеДанных

#Если НЕ ВнешнееСоединение Тогда
	
//@skip-check invocation-parameter-type-intersect, property-return-type
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  ДанныеКомпонентов - См. НовыеДанныеКомпонентовПросмотраДокумента
Процедура НастроитьПанелиПросмотраКарточкиДокумента(Форма, ДанныеКомпонентов) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКарточки) Тогда
		НастроитьПанельКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельКарточки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПометкиНаУдаление) Тогда
		НастроитьПанельПометкиНаУдалениеКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельПометкиНаУдаление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандВходящегоДокумента) Тогда
		НастроитьПанельКомандКарточкиВходящегоДокумента(Форма, ДанныеКомпонентов.ПанельКомандВходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандИсходящегоДокумента) Тогда
		НастроитьПанельКомандКарточкиИсходящегоДокумента(Форма, ДанныеКомпонентов.ПанельКомандИсходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПакета) Тогда
		НастроитьПанельПакетаКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельПакета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСостояния) Тогда
		НастроитьПанельСостоянияКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельСостояния);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельИтогов) Тогда
		НастроитьПанельИтоговКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельИтогов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтветственного) Тогда
		НастроитьПанельОтветственногоКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельОтветственного);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельОтраженияВУчете) Тогда
		НастроитьПанельОтраженияВУчетеКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельОтраженияВУчете);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельВизуализации) Тогда
		НастроитьПанельВизуализацииКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельВизуализации);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельКомандНастроекВизуализации) Тогда
		НастроитьПанельКомандНастроекВизуализацииКарточкиДокумента(Форма,
			ДанныеКомпонентов.ПанельКомандНастроекВизуализации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПредставленияФайла) Тогда
		НастроитьПанельПредставленияФайлаКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельПредставленияФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельПодписей) Тогда
		НастроитьПанельПодписейКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельПодписей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента) Тогда
		НастроитьПанельСопроводительнойЗапискиКарточкиВходящегоДокумента(Форма, 
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиВходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента) Тогда
		НастроитьПанельСопроводительнойЗапискиКарточкиИсходящегоДокумента(Форма, 
			ДанныеКомпонентов.ПанельСопроводительнойЗапискиИсходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельРеквизитов) Тогда
		НастроитьПанельРеквизитовКарточкиДокумента(Форма, ДанныеКомпонентов.ПанельРеквизитов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельМаршрута) Тогда
		НастроитьПанельМаршрутаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонентов.ПанельМаршрута);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента) Тогда
		НастроитьПанельЗакладокВходящегоДокумента(Форма, ДанныеКомпонентов.ПанельЗакладокВходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента) Тогда
		НастроитьПанельЗакладокИсходящегоДокумента(Форма, ДанныеКомпонентов.ПанельЗакладокИсходящегоДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли // ВнешнееСоединение

#КонецОбласти // ПредставлениеДанных

#Область ОбработкаДействий

#Если НЕ ВнешнееСоединение Тогда
	
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура
//  * ОповеститьОПрочтении - Булево
//  ДокументПакета - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ПоказатьДокументПакетаКарточкиДокумента(Форма, ДокументПакета) Экспорт

	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(ДокументПакета, Истина) Тогда
		Форма.ОповеститьОПрочтении = Истина;
	КонецЕсли;
	
	ОбъектаДокумента = ДокументПакета.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ОбъектаДокумента, Форма.Объект);
	//@skip-check dynamic-access-method-not-found
	Форма.Прочитать();

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * ИмяФормы - Строка
//  * ОтключитьВыводДопДанных - Булево
//  * ОтключитьВыводКопияВерна - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
Процедура СохранитьНастройкиОтображенияВизуализацииКарточкиДокумента(Форма) Экспорт

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		Форма.ИмяФормы, "ОтключитьВыводДопДанных", Форма.ОтключитьВыводДопДанных);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		Форма.ИмяФормы, "ОтключитьВыводКопияВерна", Форма.ОтключитьВыводКопияВерна);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		Форма.ИмяФормы, "ВыводитьБанковскиеРеквизиты", Форма.ВыводитьБанковскиеРеквизиты);

КонецПроцедуры

#КонецЕсли // ВнешнееСоединение

#КонецОбласти // ОбработкаДействий

#Область ОткрытиеДокумента

//@skip-check invocation-parameter-type-intersect, property-return-type, statement-type-change, dynamic-access-method-not-found, bsl-legacy-check-string-literal
// При использовании легкого варианта интерфейса или интеграции облачного ЭДО расширяет структуру параметров
// для открытия формы, См. НовыеПараметрыОткрытияФормыПросмотраИсходящегоДокумента
// если используется расширенный интерфейс и встроенный ЭДО - структура параметров остается прежней
// 
// Параметры:
//  ПредварительныеПараметры - Структура - структура, имеющая произвольный состав параметров
Процедура ПодготовитьПараметрыОткрытияФормыПросмотраИсходящегоДокумента(ПредварительныеПараметры) Экспорт

	ПараметрыОткрытияФормы = НовыеПараметрыОткрытияФормыПросмотраИсходящегоДокумента();
		
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ПредварительныеПараметры);

	ПараметрыПросмотраПоФайлу = Неопределено;

	ТабличныйДокумент = Неопределено;
	Если ПредварительныеПараметры.Свойство("ТабличныйДокумент", ТабличныйДокумент) Тогда
		
		ПараметрыПросмотраПоФайлу = НовыеПараметрыПросмотраДокументаПоФайлу();
		
		НаименованиеФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПредварительныеПараметры, "НаименованиеФайла", Неопределено);
			
		ОбъектУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПредварительныеПараметры, "Основание", Неопределено);
		
		ЗаполнитьПараметрыНаОснованииТабличногоДокумента(ПараметрыПросмотраПоФайлу, ТабличныйДокумент, 
			НаименованиеФайла, ОбъектУчета);
		
	КонецЕсли;

	ДвоичныеДанныеФайла = Неопределено;
	ИмяФайлаБезРасширения = Неопределено;
	РасширениеФайла = Неопределено;
	Если ПредварительныеПараметры.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла)
		И ПредварительныеПараметры.Свойство("НаименованиеФайла", ИмяФайлаБезРасширения)
		И ПредварительныеПараметры.Свойство("Расширение", РасширениеФайла) Тогда
		
		ПараметрыПросмотраПоФайлу = НовыеПараметрыПросмотраДокументаПоФайлу();
		
		ОбъектУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПредварительныеПараметры, "Основание", Неопределено);
		
		ЗаполнитьПараметрыНаОснованииДвоичныхДанных(ПараметрыПросмотраПоФайлу, ДвоичныеДанныеФайла, 
			ИмяФайлаБезРасширения, РасширениеФайла, ОбъектУчета);
			
	КонецЕсли;

	АдресОписанияФайла = Неопределено;
	ОбъектУчета = Неопределено;
	Если ПредварительныеПараметры.Свойство("АдресОписанияФайла", АдресОписанияФайла)
		И ПредварительныеПараметры.Свойство("Основание", ОбъектУчета) Тогда
		
		ПараметрыПросмотраПоФайлу = НовыеПараметрыПросмотраДокументаПоФайлу();
			
		ВидДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПредварительныеПараметры, "ВидДокумента", Неопределено);
		
		ЗаполнитьПараметрыНаОснованииОписанияФайла(ПараметрыПросмотраПоФайлу, АдресОписанияФайла, ОбъектУчета, 
			ВидДокумента);
		
	КонецЕсли;
	
	АдресДвоичныхДанныхФайла = Неопределено;
	НаименованиеФайла = Неопределено;
	Если ПредварительныеПараметры.Свойство("АдресВХранилище", АдресДвоичныхДанныхФайла)
		И ПредварительныеПараметры.Свойство("ВыбранныйФайл", НаименованиеФайла) Тогда
		
		ПараметрыПросмотраПоФайлу = НовыеПараметрыПросмотраДокументаПоФайлу();
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхФайла);
		
		УдалитьИзВременногоХранилища(АдресДвоичныхДанныхФайла);
		
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(НаименованиеФайла);
		
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
		
		ОбъектУчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПредварительныеПараметры, "ОбъектУчета", Неопределено);
		
		ЗаполнитьПараметрыНаОснованииДвоичныхДанных(ПараметрыПросмотраПоФайлу, ДвоичныеДанныеФайла,
			СтруктураИмениФайла.ИмяБезРасширения, РасширениеФайла, ОбъектУчета);
		
	КонецЕсли;
	
	Если ПараметрыПросмотраПоФайлу <> Неопределено Тогда
		ПараметрыОткрытияФормы.ПросмотрФайла = ПараметрыПросмотраПоФайлу;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПредварительныеПараметры, ПараметрыОткрытияФормы, Истина);

КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * АдресОписанияФайла - Строка - адрес во временном хранилище с описанием файла
//                                  См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * ОбъектУчета - Неопределено
//                - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ВидДокумента - Неопределено
//                 - СправочникСсылка.ВидыДокументовЭДО
//  * РеквизитыДокументаИзСодержанияФайла - Неопределено
//                                        - См. НовыеРеквизитыДокументаИзСодержанияФайла
Функция НовыеПараметрыПросмотраДокументаПоФайлу() Экспорт

	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("АдресОписанияФайла", "");
	ПараметрыСоздания.Вставить("ОбъектУчета", Неопределено);
	ПараметрыСоздания.Вставить("ВидДокумента", Неопределено);
	ПараметрыСоздания.Вставить("РеквизитыДокументаИзСодержанияФайла", Неопределено);
	Возврат ПараметрыСоздания;

КонецФункции

#КонецОбласти // ОткрытиеДокумента

#Область ПараметрыПросмотра

// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ПараметрыОткрытия - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыОткрытияЭлектронногоДокумента
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраЭлектронногоДокумента
Функция ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета(ОбъектУчета, ПараметрыОткрытия) Экспорт
	
	ОписанияДокументовОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ОбъектУчета);
	ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
	РеквизитыАктуальныхДокументов = РеквизитыАктуальныхДокументовДляПросмотраСтатусов(ОбъектыУчета);
	
	ПараметрыПросмотра = ИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраЭлектронногоДокумента();
	ПараметрыПросмотра.ОбъектУчета = ОбъектУчета;
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектУчета.Метаданные()) И ОбъектУчета.ЭтоГруппа Тогда
		ПараметрыПросмотра.ОбъектУчетаЯвляетсяГруппой = Истина;
	КонецЕсли;
	
	РежимПросмотра = РежимПросмотраЭлектронногоДокументаПоОбъектуУчета(ОписанияДокументовОбъектаУчета,
		РеквизитыАктуальныхДокументов);
	
	Если РежимПросмотра = РежимПросмотраДокумента() Тогда
		
		ПараметрыПросмотра.ЭлектронныйДокумент = РеквизитыАктуальныхДокументов[0].ЭлектронныйДокумент;
		
	ИначеЕсли РежимПросмотра = РежимМножественногоПросмотра() Тогда
		
		ПараметрыПросмотраСтатусов = ИнтерфейсДокументовЭДО.НовыеПараметрыПросмотраСтатусовЭлектронныхДокументов();
		СтатусыЭлектронныхДокументов = ИнтерфейсДокументовЭДО.СтатусыЭлектронныхДокументовОбъектаУчета(
			ОписанияДокументовОбъектаУчета, Истина);
		ПараметрыПросмотраСтатусов.АдресДанных = ПоместитьВоВременноеХранилище(СтатусыЭлектронныхДокументов,
			Новый УникальныйИдентификатор);
		
		ПараметрыПросмотра.ПросмотрСтатусовЭлектронныхДокументов = ПараметрыПросмотраСтатусов;
		
	ИначеЕсли РежимПросмотра = РежимПредварительногоПросмотра() Тогда
		
		ПараметрыПросмотра.ПредварительныйПросмотр = 
			ИнтерфейсДокументовЭДО.ПараметрыПредварительногоПросмотраЭлектронногоДокумента(
				ОписанияДокументовОбъектаУчета, ПараметрыОткрытия);
		
	КонецЕсли;
	
	Возврат ПараметрыПросмотра;
	
КонецФункции

#КонецОбласти // ПараметрыПросмотра

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ЭтоВходящийЭДО
Функция ЭтоВходящийЭДО(ЭлектронныйДокумент)
	Возврат ИнтерфейсДокументовЭДО.ЭтоВходящийЭДО(ЭлектронныйДокумент);
КонецФункции

// Параметры:
//  ДоступныеДействия - Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * Значение - Булево
//  ДействиеПоЭДО - ПеречислениеСсылка.ДействияПоЭДО
// 
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

#Область ЗаполнениеДанныхКомпонентовИнтерфейса

// Параметры:
//  ЭтоОблачныйЭДО - Булево
// 
// Возвращаемое значение:
//  ОбщийМодуль
Функция МенеджерДанныхИнтеграцииЭДО(ЭтоОблачныйЭДО = Ложь)
	
	Если ЭтоОблачныйЭДО Тогда
		ОбщийМодульИнтерфейсДокументовЭДОИнтеграцияОблака = ОбщегоНазначения.ОбщийМодуль(
			"ИнтерфейсДокументовЭДОИнтеграцияОблака");
		Возврат ОбщийМодульИнтерфейсДокументовЭДОИнтеграцияОблака.МенеджерДанныхИнтеграцииОблачногоЭДО();
	Иначе
		Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ДанныеКомпонентов - См. НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - См. ПараметрыЗаполненияДанныхКомпонентовПросмотраДокумента
// 
// Возвращаемое значение:
//  См. ДлительныеОперации.ВыполнитьФункцию
Функция ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронноВФоне(ДанныеКомпонентов, ПараметрыЗаполнения)
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(ПараметрыЗаполнения.ИдентификаторФормы);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	// См. ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ЛегкийИнтерфейсДокументовЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно",
		ДанныеКомпонентов, ПараметрыЗаполнения);
	
КонецФункции

// Параметры:
//  ДанныеКомпонентов - см. НовыеДанныеКомпонентовПросмотраДокумента
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеДанныеКомпонентовПросмотраДокумента
Функция ДанныеКомпонентовДляАсинхронногоПолучения(ДанныеКомпонентов)
	
	ЕстьАсинхронноеПолучение = Ложь;
	ДанныеКомпонентовАсинхронно = НовыеДанныеКомпонентовПросмотраДокумента();
	
	Для Каждого ЭлементКоллекции Из ДанныеКомпонентов Цикл
		
		ДанныеКомпонента = ЭлементКоллекции.Значение;
		
		//@skip-check property-return-type
		Если ТипЗнч(ДанныеКомпонента) = Тип("Структура")
			И ДанныеКомпонента.Свойство("АсинхронноеПолучение")
			И ДанныеКомпонента.АсинхронноеПолучение Тогда
			ЕстьАсинхронноеПолучение = Истина;
			ДанныеКомпонентовАсинхронно[ЭлементКоллекции.Ключ] = ДанныеКомпонента;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьАсинхронноеПолучение Тогда
		Возврат ДанныеКомпонентовАсинхронно;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ДанныеКомпонентов - см. НовыеДанныеКомпонентовПросмотраДокумента
//  ПараметрыЗаполнения - см. НовыеПараметрыПолученияДанныхКомпонентов
// 
// Возвращаемое значение:
//  См. НовыеДанныеКомпонентовПросмотраДокумента
Функция ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно(ДанныеКомпонентов, ПараметрыЗаполнения) Экспорт
	
	СвойстваДокумента = ПараметрыЗаполнения.СвойстваДокумента;
	МенеджерДанныхИнтеграцииЭДО = МенеджерДанныхИнтеграцииЭДО(СвойстваДокумента.ЭтоОблачныйЭДО);
	МенеджерДанныхИнтеграцииЭДО.ЗаполнитьДанныеКомпонентовПросмотраДокументаАсинхронно(
		ДанныеКомпонентов, ПараметрыЗаполнения);
	
	Возврат ДанныеКомпонентов;
	
КонецФункции

#Если НЕ ВнешнееСоединение Тогда
	
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** НаОзнакомлении - Булево
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   ** СпособОбмена - ПеречислениеСсылка.СпособыОбменаЭД
//   ** ФорматОсновногоТитула - Строка
//   ** НомерДокумента - Строка
//   ** ДатаДокумента - Дата
//   ** СуммаДокумента - Число
//   ** Организация - ОпределяемыйТип.Организация
//   ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//   ** Ответственный - СправочникСсылка.Пользователи
//   ** ПометкаУдаления - Булево
//   ** ИдентификаторДокумента - Строка
//   ** ЭтоОблачныйЭДО - Булево
//   ** ИдентификаторКонтрагента - Строка
//   ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//   ** МаршрутПодписания - СправочникСсылка.МаршрутыПодписания
//   ** СписокПодписантов - ДанныеФормыКоллекция
//   ** ВидПодписи - ПеречислениеСсылка.ВидыЭлектронныхПодписей
//   ** ИдентификаторОрганизации - Строка
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * МаршрутУказанВНастройках - Булево
//
// Возвращаемое значение:
//  Структура - См. НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра
Функция СвойстваДокументаДляПолученияДанныхКомпонентовПросмотраКарточкиДокумента(Форма)
	
	Объект = Форма.Объект;
	
	СвойстваДокумента = НовыеСвойстваДокументаДляПолученияДанныхКомпонентовПросмотра();
	СвойстваДокумента.Ссылка = Объект.Ссылка;
	СвойстваДокумента.НаОзнакомлении = Объект.НаОзнакомлении;
	СвойстваДокумента.ВидДокумента = Объект.ВидДокумента;
	СвойстваДокумента.ТипДокумента = Форма.ТипДокумента;
	СвойстваДокумента.СпособОбмена = Объект.СпособОбмена;
	СвойстваДокумента.ФорматОсновногоТитула = Объект.ФорматОсновногоТитула;
	СвойстваДокумента.НомерДокумента = Объект.НомерДокумента;
	СвойстваДокумента.ДатаДокумента = Объект.ДатаДокумента;
	СвойстваДокумента.СуммаДокумента = Объект.СуммаДокумента;
	СвойстваДокумента.Организация = Объект.Организация;
	СвойстваДокумента.Контрагент = Объект.Контрагент;
	СвойстваДокумента.Ответственный = Объект.Ответственный;
	СвойстваДокумента.ПометкаУдаления = Объект.ПометкаУдаления;
	СвойстваДокумента.ИдентификаторДокумента = Объект.ИдентификаторДокумента;
	СвойстваДокумента.ЭтоОблачныйЭДО = Объект.ЭтоОблачныйЭДО;
	СвойстваДокумента.ЭтоВходящийЭДО = ЭтоВходящийЭДО(Объект.Ссылка);
	СвойстваДокумента.ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	СвойстваДокумента.ИдентификаторКонтрагента = Объект.ИдентификаторКонтрагента;
	СвойстваДокумента.ТипРегламента = Объект.ТипРегламента;
	СвойстваДокумента.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации;
	Если Не СвойстваДокумента.ЭтоВходящийЭДО Тогда
		СвойстваДокумента.МаршрутПодписания = Объект.МаршрутПодписания;
		СвойстваДокумента.СписокПодписантов = Объект.СписокПодписантов.Выгрузить();
		СвойстваДокумента.ВидПодписи = Объект.ВидПодписи;
		СвойстваДокумента.МаршрутУказанВНастройках = Форма.МаршрутУказанВНастройках;
	КонецЕсли;
	Возврат СвойстваДокумента;
	
КонецФункции

#КонецЕсли // ВнешнееСоединение

#КонецОбласти // ЗаполнениеДанныхКомпонентовИнтерфейса

#Область ПредставлениеДанных

#Если НЕ ВнешнееСоединение Тогда
	
#Область ПанельКарточки

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКарточки
Процедура НастроитьПанельКарточкиДокумента(Форма, ДанныеКомпонента)

	Форма.Заголовок = ДанныеКомпонента.ТекстЗаголовка;

КонецПроцедуры

#КонецОбласти // ПанельКарточки

#Область ПанельПометкиНаУдаление

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПометкиНаУдаление
Процедура НастроитьПанельПометкиНаУдалениеКарточкиДокумента(Форма, ДанныеКомпонента)

	Форма.Элементы.ГруппаПанельПометкиНаУдаление.Видимость = ДанныеКомпонента.ДокументПомеченНаУдаление;

КонецПроцедуры

#КонецОбласти // ПанельПометкиНаУдаление

#Область ПанельКомандВходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса:
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
Процедура НастроитьПанельКомандКарточкиВходящегоДокумента(Форма, ДанныеКомпонента)
	
	Форма.Элементы.ГруппаПанельКоманд.Доступность = Истина;
	
	Форма.ИспользуетсяОтложеннаяОтправка = ДанныеКомпонента.ИспользуетсяОтложеннаяОтправка;
	Форма.ЕстьПравоВыполненияОбмена = ДанныеКомпонента.ЕстьПравоВыполненияОбмена;
	Форма.ЕстьПравоОбработкиДокументов = ДанныеКомпонента.ЕстьПравоОбработкиДокументов;
	
	НастроитьПанельКомандВыполнениеДействийПоЭДОКарточкиДокумента(Форма, ДанныеКомпонента);
		
	НастроитьПанельКомандПакетаКарточкиВходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандПоПравамКарточкиВходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандДляПрикладногоДокументаКарточкиДокумента(Форма, ДанныеКомпонента);
	
КонецПроцедуры

#КонецОбласти // ПанельКомандВходящегоДокумента

#Область ПанельКомандИсходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЕстьПравоВыполненияОбмена - Булево
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ОтключитьТранслитерацию - Булево
//  * ДоступноИзменениеПакета - Булево
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)
	
	Форма.Элементы.ГруппаПанельКоманд.Доступность = Истина;
	
	Форма.ИспользуетсяОтложеннаяОтправка = ДанныеКомпонента.ИспользуетсяОтложеннаяОтправка;
	Форма.ЕстьПравоВыполненияОбмена = ДанныеКомпонента.ЕстьПравоВыполненияОбмена;
	Форма.ЕстьПравоОбработкиДокументов = ДанныеКомпонента.ЕстьПравоОбработкиДокументов;
	Форма.ОтключитьТранслитерацию = ДанныеКомпонента.ОтключитьТранслитерацию;
	Форма.ДоступноИзменениеПакета = ДанныеКомпонента.ДоступноИзменениеПакета;
	
	НастроитьПанельКомандВыполнениеДействийПоЭДОКарточкиДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандОформлениеНастроекКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандПакетаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандКомандаПереформированиеКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандКомандаЗагрузитьСДискаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандКомандаЗаписатьКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);

	НастроитьПанельКомандПоПравамКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандДляВнутреннегоДокументаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента);
	
	НастроитьПанельКомандДляПрикладногоДокументаКарточкиДокумента(Форма, ДанныеКомпонента);
	
КонецПроцедуры

#КонецОбласти // ПанельКомандИсходящегоДокумента

#Область ПанельПакета

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ИдентификаторПакета - УникальныйИдентификатор
//  * СостояниеПакета - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * СостоянияПакетаОднородно - Булево
//  * ЭтоПакетДокументов - Булево
//  * СоставПакета - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ** ИдентификаторСостоянияДокумента - Число
//   ** ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   ** ПредставлениеДокумента - Строка
//  * ТекущийДокументПакета - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПакета
Процедура НастроитьПанельПакетаКарточкиДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.СоставПакетаГруппаПредставление.Заголовок = НСтр("ru='Пожалуйста, подождите...'");
		Возврат;
	КонецЕсли;

	Форма.ИдентификаторПакета = ДанныеКомпонента.ИдентификаторПакета;
	Форма.СостояниеПакета = ДанныеКомпонента.СостояниеПакета;
	Форма.СостоянияПакетаОднородно = ДанныеКомпонента.СостоянияПакетаОднородно;
	Форма.ЭтоПакетДокументов = ЗначениеЗаполнено(ДанныеКомпонента.ИдентификаторПакета)
		И ДанныеКомпонента.ДанныеДокументовПакета.Количество() > 1;
	
	Если Форма.СоставПакета.Количество() Тогда
		Для Каждого ДанныеДокументаПакета Из Форма.СоставПакета Цикл
			
			ДокументСоставаПакета = ДанныеКомпонента.ДанныеДокументовПакета.Найти(
				ДанныеДокументаПакета.ЭлектронныйДокумент, "ЭлектронныйДокумент");
			
			Если Не ЗначениеЗаполнено(ДокументСоставаПакета) Тогда
				Продолжить;
			КонецЕсли;
			
			ЦветСостояния = ЦветПанелиСостоянияПоДаннымКомпонентаПанельСостояния(
				ДокументСоставаПакета.ПолноеСостояние);
			ДанныеДокументаПакета.ИдентификаторСостоянияДокумента = 
				ИдентификаторКартинкиСостоянияПоЦветуПанелиСостояния(ЦветСостояния);
			ДанныеДокументаПакета.ПредставлениеДокумента = ПредставлениеДокументаПакета(ДокументСоставаПакета);
				
		КонецЦикла;
	Иначе
		Для Каждого ДанныеДокументаПакета Из ДанныеКомпонента.ДанныеДокументовПакета Цикл
			
			НовыйДокументСоставаПакета = Форма.СоставПакета.Добавить();
			НовыйДокументСоставаПакета.ВидДокумента = ДанныеДокументаПакета.ВидДокумента;
			НовыйДокументСоставаПакета.ЭлектронныйДокумент = ДанныеДокументаПакета.ЭлектронныйДокумент;
			НовыйДокументСоставаПакета.ПредставлениеДокумента = ПредставлениеДокументаПакета(ДанныеДокументаПакета);
			
			ЦветСостояния = ЦветПанелиСостоянияПоДаннымКомпонентаПанельСостояния(
				ДанныеДокументаПакета.ПолноеСостояние);
			НовыйДокументСоставаПакета.ИдентификаторСостоянияДокумента = 
				ИдентификаторКартинкиСостоянияПоЦветуПанелиСостояния(ЦветСостояния);
				
		КонецЦикла;
	КонецЕсли;	
	
	Форма.Элементы.ГруппаПанельПакета.Видимость = Форма.ЭтоПакетДокументов;
	Если Не Форма.ЭтоПакетДокументов Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДокументовПакета = Форма.СоставПакета.Количество();
	Форма.Элементы.СоставПакетаГруппаПредставление.Заголовок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';%1 документ в пакете;;%1 документа в пакете;%1 документов в пакете;'"), КоличествоДокументовПакета);

	Если ЗначениеЗаполнено(Форма.ТекущийДокументПакета) Тогда
		ТекущийДокументПакета = Форма.ТекущийДокументПакета;
	Иначе
		ТекущийДокументПакета = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ОтборПоискаТекущегоДокументаПакета = Новый Структура("ЭлектронныйДокумент", ТекущийДокументПакета);
	НайденныеСтрокиСоставаПакета = Форма.СоставПакета.НайтиСтроки(ОтборПоискаТекущегоДокументаПакета);
	Если НайденныеСтрокиСоставаПакета.Количество() Тогда
		Форма.Элементы.СоставПакета.ТекущаяСтрока = НайденныеСтрокиСоставаПакета[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ДанныеДокументаПакета - СтрокаТаблицыЗначений: См. НовыйНаборДанныхДокументовПакета
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДокументаПакета(ДанныеДокументаПакета)
	
	Если ЗначениеЗаполнено(ДанныеДокументаПакета.ФорматОсновногоТитула)
		Или ДанныеДокументаПакета.ТипРегламента <> Перечисления.ТипыРегламентовЭДО.Неформализованный
		Или ЭлектронныеДокументыЭДО.ДляТипаДокументаЕстьФорматНоНетРегламента(ДанныеДокументаПакета.ТипДокумента) Тогда
		ПредставлениеДокумента = СтрШаблон(НСтр("ru='№%1 от %2'"), ДанныеДокументаПакета.НомерДокумента,
			Формат(ДанныеДокументаПакета.ДатаДокумента, "ДЛФ=Д"));
	Иначе
		ПредставлениеДокумента = ДанныеДокументаПакета.ИмяФайла;
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

#КонецОбласти // ПанельПакета

#Область ПанельСостояния

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * КомментарийСостояния - Строка
//  * ТекстПанелиСостояния - Строка
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
Процедура НастроитьПанельСостоянияКарточкиДокумента(Форма, ДанныеКомпонента)

	ЭтоВходящийЭДО = ЭтоВходящийЭДО(Форма.Объект.Ссылка);
	
	Форма.СостояниеЭДО = ДанныеКомпонента.СостояниеЭДО;
	Форма.КомментарийСостояния = ДанныеКомпонента.КомментарийКСостояниюЭДО;
	
	Если Не ЗначениеЗаполнено(ДанныеКомпонента.СостояниеЭДО)
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован Тогда
		Форма.Элементы.ГруппаПанельСостояния.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПредставлениеПоСостояниюЭДО = ПредставлениеСостоянияПоДаннымСостоянияЭДО(ДанныеКомпонента.СостояниеЭДО);
	ПредставлениеПоОтражениюВУчете = 
		ПредставлениеСостоянияПоДаннымКонтроляОтраженияВУчетеИПредставлениюСостоянияЭДО(
		ДанныеКомпонента.КонтрольОтраженияВУчете, ПредставлениеПоСостояниюЭДО);
	ПредставленияТребующиеОтраженияВУчете = ПредставленияСостоянияПоСостояниямЭДОТребующиеОтраженияВУчете();

	Если ДанныеКомпонента.ОшибкиВПодписях Тогда
		Форма.ТекстПанелиСостояния = НСтр("ru='Подпись не прошла проверку'");
	ИначеЕсли ЭтоВходящийЭДО
		И ЗначениеЗаполнено(ПредставлениеПоОтражениюВУчете)
		И ПредставленияТребующиеОтраженияВУчете.Найти(ПредставлениеПоСостояниюЭДО) <> Неопределено Тогда
		Форма.ТекстПанелиСостояния = 
			СтрШаблон("%1, %2", ПредставлениеПоСостояниюЭДО, НРег(ПредставлениеПоОтражениюВУчете));
	Иначе
		Форма.ТекстПанелиСостояния = ПредставлениеПоСостояниюЭДО;
	КонецЕсли;

	Форма.Элементы.ГруппаПанельСостояния.Видимость = ЗначениеЗаполнено(Форма.ТекстПанелиСостояния);
	Форма.Элементы.ГруппаСостояние.ЦветФона = ЦветПанелиСостоянияПоДаннымКомпонентаПанельСостояния(ДанныеКомпонента);
	Форма.Элементы.НадписьСостояние.Видимость = Истина;
	Форма.Элементы.НадписьСостояние.Заголовок = Форма.ТекстПанелиСостояния;

	Форма.Элементы.КнопкаПоказатьКомментарийКСостоянию.Видимость = ЗначениеЗаполнено(Форма.КомментарийСостояния);

КонецПроцедуры

// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - См. ПредставленияСостоянияПоДаннымСостоянияЭДО
Функция ПредставлениеСостоянияПоДаннымСостоянияЭДО(СостояниеЭДО)

	ПредставленияПоСостояниямЭДО = Новый Соответствие;
	ВариантыПредставлений = ПредставленияСостоянияПоДаннымСостоянияЭДО();

	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.Аннулирован, ВариантыПредставлений.Аннулирован);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно, ВариантыПредставлений.Отменен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением, ВариантыПредставлений.Отклонен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонениемПриглашения, ВариантыПредставлений.Отклонен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи, ВариантыПредставлений.ЗавершенОшибка);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.НеПолучен, "");
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.НеСформирован, "");
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОбменЗавершен, ВариантыПредставлений.Завершен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОбменЗавершенСИсправлением, ВариантыПредставлений.Завершен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении, ВариантыПредставлений.Отправлен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеПоОтклонению, ВариантыПредставлений.Отправлен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяИсправление, ВариантыПредставлений.ОтправленДляИсправления);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение, ВариантыПредставлений.ЖдатьОтветНаПриглашение);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяПередачаОператору, ВариантыПредставлений.Отправлен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение, ВариантыПредставлений.Отправлен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования,
		ВариантыПредставлений.ОтправленДляАннулирования);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора, ВариантыПредставлений.Отправлен);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеПоОтклонению, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяИсправлениеОшибкиПередачи,
		ВариантыПредставлений.ОтправитьПовторно);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаАннулирования, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещенияПоОтклонению, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаОтклонения, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаПриглашения, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПовторнаяОтправка, ВариантыПредставлений.ОтправитьПовторно);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеАннулирования, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению,
		ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеОтклонения, ВариантыПредставлений.Отправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание, ВариантыПредставлений.Подписать);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеАннулирования,
		ВариантыПредставлений.Аннулировать);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения, ВариантыПредставлений.Подписать);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещенияПоОтклонению, ВариантыПредставлений.Отклонить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеОтклонения, ВариантыПредставлений.Отклонить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяПодтверждениеАннулирования,
		ВариантыПредставлений.ПодтвердитьАннулирование);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение, ВариантыПредставлений.Утвердить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение, ВариантыПредставлений.Исправить);
	ПредставленияПоСостояниямЭДО.Вставить(
		Перечисления.СостоянияДокументовЭДО.НеСформирован, ВариантыПредставлений.Создать);
	
	Возврат ПредставленияПоСостояниямЭДО[СостояниеЭДО];

КонецФункции

// Параметры:
//  ДанныеПринятияКУчету - См. НовыеДанныеКонтроляОтраженияВУчете
//  ПредставлениеСостоянияЭДО - Строка - См. ПредставленияСостоянияПоДаннымСостоянияЭДО
// 
// Возвращаемое значение:
//  Строка - См. ПредставленияСостоянияПоДаннымКонтроляОтраженияВУчете
Функция ПредставлениеСостоянияПоДаннымКонтроляОтраженияВУчетеИПредставлениюСостоянияЭДО(ДанныеПринятияКУчету,
	ПредставлениеСостоянияЭДО)

	Представление = "";

	ВариантыПредставлений = ПредставленияСостоянияПоДаннымКонтроляОтраженияВУчете();
	ВариантыПредставленийПоСостояниямЭДО = ПредставленияСостоянияПоДаннымСостоянияЭДО();

	Аннулирован = ПредставлениеСостоянияЭДО = ВариантыПредставленийПоСостояниямЭДО.Аннулирован;

	Если ДанныеПринятияКУчету.СозданУчетныйДокумент
		И ДанныеПринятияКУчету.ПроведенУчетныйДокумент Тогда
		Представление = ВариантыПредставлений.ПринятКУчету;
	ИначеЕсли ДанныеПринятияКУчету.ТребуетсяОтражениеВУчете
		И Не ДанныеПринятияКУчету.СозданУчетныйДокумент
		И Аннулирован Тогда
		Представление = ВариантыПредставлений.НеПринятКУчету;
	ИначеЕсли ДанныеПринятияКУчету.ТребуетсяОтражениеВУчете
		И Не ДанныеПринятияКУчету.СозданУчетныйДокумент
		И Не Аннулирован Тогда
		Представление = ВариантыПредставлений.СоздатьУчетныйДокумент;
	ИначеЕсли ДанныеПринятияКУчету.ТребуетсяОтражениеВУчете
		И ДанныеПринятияКУчету.СозданУчетныйДокумент
		И Не ДанныеПринятияКУчету.ПроведенУчетныйДокумент
		И Не Аннулирован Тогда
		Представление = ВариантыПредставлений.ПровестиУчетныйДокумент;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Параметры:
//  ЦветПанелиСостояния - Цвет - См. ЦветаПанельСостояния
// 
// Возвращаемое значение:
//  Число,Неопределено
Функция ИдентификаторКартинкиСостоянияПоЦветуПанелиСостояния(ЦветПанелиСостояния)

	Цвета = ЦветаПанельСостояния();

	ИдентификаторыКартинокПоЦветамПанелиСостояния = Новый Соответствие;
	ИдентификаторыКартинокПоЦветамПанелиСостояния.Вставить(Цвета.Зеленый, 0);
	ИдентификаторыКартинокПоЦветамПанелиСостояния.Вставить(Цвета.Желтый, 1);
	ИдентификаторыКартинокПоЦветамПанелиСостояния.Вставить(Цвета.Красный, 2);

	Возврат ИдентификаторыКартинокПоЦветамПанелиСостояния[ЦветПанелиСостояния];

КонецФункции

// Параметры:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСостояния
// 
// Возвращаемое значение:
//  Цвет - См. ЦветаПанельСостояния
Функция ЦветПанелиСостоянияПоДаннымКомпонентаПанельСостояния(ДанныеКомпонента)

	Цвета = ЦветаПанельСостояния();
	ПредставлениеПоСостояниюЭДО = ПредставлениеСостоянияПоДаннымСостоянияЭДО(ДанныеКомпонента.СостояниеЭДО);
	ПредставлениеПоОтражениюВУчете = ПредставлениеСостоянияПоДаннымКонтроляОтраженияВУчетеИПредставлениюСостоянияЭДО(
		ДанныеКомпонента.КонтрольОтраженияВУчете, ПредставлениеПоСостояниюЭДО);

	Если ДанныеКомпонента.ОшибкиВПодписях Тогда
		ЦветСостояния = Цвета.Красный;
	Иначе
		ЦветСостояния = 
			ЦветПанелиСостоянияПоПредставлениям(ПредставлениеПоСостояниюЭДО, ПредставлениеПоОтражениюВУчете);
	КонецЕсли;

	Возврат ЦветСостояния;

КонецФункции

// Параметры:
//  ПредставлениеПоСостояниюЭДО - Строка - См. ПредставленияСостоянияПоДаннымСостоянияЭДО
//  ПредставлениеПоОтражениюВУчете - Строка - См. ПредставленияСостоянияПоДаннымКонтроляОтраженияВУчете
// 
// Возвращаемое значение:
//  Цвет - См. ЦветаПанельСостояния
Функция ЦветПанелиСостоянияПоПредставлениям(ПредставлениеПоСостояниюЭДО, ПредставлениеПоОтражениюВУчете)

	ВариантыЦвета = ЦветаПанельСостояния();

	ВариантыПредставленийПоСостояниямЭДО = ПредставленияСостоянияПоДаннымСостоянияЭДО();
	ЦветаПоСостояниямЭДО = Новый Соответствие;

	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Аннулирован,
		ВариантыЦвета.Красный);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Завершен,
		ВариантыЦвета.Зеленый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Отменен,
		ВариантыЦвета.Красный);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Отклонен,
		ВариантыЦвета.Красный);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ЗавершенОшибка,
		ВариантыЦвета.Красный);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ЖдатьОтветНаПриглашение,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Отправлен,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ОтправленДляИсправления,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ОтправленДляАннулирования,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Отправить,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ОтправитьПовторно,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Подписать,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Утвердить,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Отклонить,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Исправить,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Аннулировать,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ПодтвердитьАннулирование,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.Создать,
		ВариантыЦвета.Желтый);
	ЦветаПоСостояниямЭДО.Вставить(ВариантыПредставленийПоСостояниямЭДО.ЖдатьОбработкуОблачнымЭДО,
		ВариантыЦвета.Желтый);

	ВариантыПредставленийПоПринятиюКУчету = ПредставленияСостоянияПоДаннымКонтроляОтраженияВУчете();
	ЦветаПоПринятиюКУчету = Новый Соответствие;

	ЦветаПоПринятиюКУчету.Вставить(ВариантыПредставленийПоПринятиюКУчету.ПринятКУчету,
		ВариантыЦвета.Зеленый);
	ЦветаПоПринятиюКУчету.Вставить(ВариантыПредставленийПоПринятиюКУчету.НеПринятКУчету,
		ВариантыЦвета.Красный);
	ЦветаПоПринятиюКУчету.Вставить(ВариантыПредставленийПоПринятиюКУчету.СоздатьУчетныйДокумент,
		ВариантыЦвета.Желтый);
	ЦветаПоПринятиюКУчету.Вставить(ВариантыПредставленийПоПринятиюКУчету.ПровестиУчетныйДокумент,
		ВариантыЦвета.Желтый);

	ЦветПоСостояниюЭДО = ЦветаПоСостояниямЭДО[ПредставлениеПоСостояниюЭДО];
	ЦветПоПринятиюКУчету = ЦветаПоПринятиюКУчету[ПредставлениеПоОтражениюВУчете];

	Если ЦветПоПринятиюКУчету = Неопределено Тогда
		Возврат ЦветПоСостояниюЭДО;
	КонецЕсли;

	Если ПриоритетЦветаПанельСостояния(ЦветПоПринятиюКУчету)
		< ПриоритетЦветаПанельСостояния(ЦветПоСостояниюЭДО) Тогда
		Возврат ЦветПоПринятиюКУчету;
	Иначе
		Возврат ЦветПоСостояниюЭДО;
	КонецЕсли;

КонецФункции

// Возвращаемое значение:
//  Массив Из Строка - См. ПредставленияСостоянияПоДаннымСостоянияЭДО
Функция ПредставленияСостоянияПоСостояниямЭДОТребующиеОтраженияВУчете()

	НаборПредставлений = Новый Массив; // Массив Из Строка
	ВариантыПредставлений = ПредставленияСостоянияПоДаннымСостоянияЭДО();
	НаборПредставлений.Добавить(ВариантыПредставлений.Завершен);
	НаборПредставлений.Добавить(ВариантыПредставлений.Отправлен);
	НаборПредставлений.Добавить(ВариантыПредставлений.Отправить);
	НаборПредставлений.Добавить(ВариантыПредставлений.ОтправитьПовторно);
	НаборПредставлений.Добавить(ВариантыПредставлений.Подписать);
	НаборПредставлений.Добавить(ВариантыПредставлений.Утвердить);
	Возврат НаборПредставлений;

КонецФункции

// Параметры:
//  ЦветПанели - Цвет - См. ЦветаПанельСостояния
// 
// Возвращаемое значение:
//  Число
Функция ПриоритетЦветаПанельСостояния(ЦветПанели)

	Цвета = ЦветаПанельСостояния();
	Если ЦветПанели = Цвета.Красный Тогда
		ПриоритетЦвета = 1;
	ИначеЕсли ЦветПанели = Цвета.Желтый Тогда
		ПриоритетЦвета = 2;
	ИначеЕсли ЦветПанели = Цвета.Зеленый Тогда
		ПриоритетЦвета = 3;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Цвет визуализации ""%1"" состояния электронного документа не предусмотрен'"), ЦветПанели);
	КонецЕсли;

	Возврат ПриоритетЦвета;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * Зеленый - Цвет
// * Желтый - Цвет
// * Красный - Цвет
Функция ЦветаПанельСостояния()

	Цвета = Новый Структура;
	Цвета.Вставить("Зеленый", ЦветаСтиля.ЦветФонаЗеленыйСостояниеДокументаБЭД);
	Цвета.Вставить("Желтый",  ЦветаСтиля.ЦветФонаЖелтыйСостояниеДокументаБЭД);
	Цвета.Вставить("Красный", ЦветаСтиля.ЦветФонаКрасныйСостояниеДокументаБЭД);
	Возврат Цвета;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * ПринятКУчету - Строка
// * НеПринятКУчету - Строка
// * СоздатьУчетныйДокумент - Строка
// * ПровестиУчетныйДокумент - Строка
Функция ПредставленияСостоянияПоДаннымКонтроляОтраженияВУчете()

	Представления = Новый Структура;
	Представления.Вставить("ПринятКУчету", 				НСтр("ru = 'Документ принят к учету'"));
	Представления.Вставить("НеПринятКУчету", 			НСтр("ru = 'Документ не принят к учету'"));
	Представления.Вставить("СоздатьУчетныйДокумент", 	НСтр("ru = 'Принять к учету'"));
	Представления.Вставить("ПровестиУчетныйДокумент", 	НСтр("ru = 'Провести учетный документ'"));
	Возврат Представления;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * Аннулирован - Строка
// * Завершен - Строка
// * Отменен - Строка
// * Отклонен - Строка
// * ЗавершенОшибка - Строка
// * ЖдатьОтветНаПриглашение - Строка
// * Отправлен - Строка
// * ОтправленДляИсправления - Строка
// * ОтправленДляАннулирования - Строка
// * Отправить - Строка
// * ОтправитьПовторно - Строка
// * Подписать - Строка
// * Утвердить - Строка
// * Отклонить - Строка
// * Исправить - Строка
// * Аннулировать - Строка
// * ПодтвердитьАннулирование - Строка
// * Создать - Строка
Функция ПредставленияСостоянияПоДаннымСостоянияЭДО()

	Представления = Новый Структура;
	Представления.Вставить("Аннулирован", 				НСтр("ru = 'Аннулирован'"));
	Представления.Вставить("Завершен", 					НСтр("ru = 'Документооборот завершен'"));
	Представления.Вставить("Отменен", 					НСтр("ru = 'Закрыт принудительно'"));
	Представления.Вставить("Отклонен", 					НСтр("ru = 'Отклонен'"));
	Представления.Вставить("ЗавершенОшибка", 			НСтр("ru = 'Завершен (не удалось отправить)'"));
	Представления.Вставить("ЖдатьОтветНаПриглашение",	НСтр("ru = 'Ожидать ответ на приглашение от контрагента'"));
	Представления.Вставить("Отправлен", 				НСтр("ru = 'Отправлен контрагенту, ожидать ответ'"));
	Представления.Вставить("ОтправленДляИсправления",	
		НСтр("ru = 'Отправлен контрагенту для исправления, ожидать ответ'"));
	Представления.Вставить("ОтправленДляАннулирования",	
		НСтр("ru = 'Отправлен контрагенту для аннулирования, ожидать ответ'"));
	Представления.Вставить("Отправить", 				НСтр("ru = 'Отправить документ'"));
	Представления.Вставить("ОтправитьПовторно", 		НСтр("ru = 'Оправить документ повторно'"));
	Представления.Вставить("Подписать", 				НСтр("ru = 'Подписать'"));
	Представления.Вставить("Утвердить", 				НСтр("ru = 'Утвердить'"));
	Представления.Вставить("Отклонить", 				НСтр("ru = 'Отклонить'"));
	Представления.Вставить("Исправить", 				НСтр("ru = 'Исправить'"));
	Представления.Вставить("Аннулировать", 				НСтр("ru = 'Аннулировать'"));
	Представления.Вставить("ПодтвердитьАннулирование",	НСтр("ru = 'Подтвердить аннулирование'"));
	Представления.Вставить("Создать", 					НСтр("ru = 'Сохранить документ'"));
	Представления.Вставить("ЖдатьОбработкуОблачнымЭДО", НСтр("ru = 'Ожидать данных из облачного ЭДО'"));
	Возврат Представления;

КонецФункции

#КонецОбласти // ПанельСостояния

#Область ПанельИтогов

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыИтогов - ГруппаФормы:
//   *** ТекущаяСтраница - ГруппаФормы
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельИтогов
Процедура НастроитьПанельИтоговКарточкиДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Форма.Элементы.СтраницаОжиданиеИтогов;
		Форма.Элементы.СтраницаЗагруженныеИтоги.Видимость = Ложь;
		Форма.Элементы.СтраницаОжиданиеИтогов.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ПредставлениеДанныхКомпонента =
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДанныхПоДаннымКомпонентаПанельИтогов(ДанныеКомпонента);
	
	Форма.Элементы.ГруппаСтраницыИтогов.ТекущаяСтраница = Форма.Элементы.СтраницаЗагруженныеИтоги;
	Форма.Элементы.СтраницаЗагруженныеИтоги.Видимость = Истина;
	Форма.Элементы.СтраницаОжиданиеИтогов.Видимость = Ложь;
	
	Форма.Элементы.ГруппаРеквизитыСуммаНДС.Видимость = 
		ЗначениеЗаполнено(ПредставлениеДанныхКомпонента.СуммаДокументаСтрокой);
	Форма.Элементы.НадписьСуммаЗначение.Заголовок = ПредставлениеДанныхКомпонента.СуммаДокументаСтрокой;
	Форма.Элементы.КартинкаПанельИтоговРазделитель1.Видимость = Форма.Элементы.ГруппаРеквизитыСуммаНДС.Видимость;
	
	Форма.Элементы.НадписьНДСЗначение.Видимость = ЗначениеЗаполнено(ПредставлениеДанныхКомпонента.НДСДокументаСтрокой);
	Форма.Элементы.НадписьНДСЗначение.Заголовок = ПредставлениеДанныхКомпонента.НДСДокументаСтрокой;
	
КонецПроцедуры

#КонецОбласти // ПанельИтогов

#Область ПанельОтветственного

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельОтветственного
Процедура НастроитьПанельОтветственногоКарточкиДокумента(Форма, ДанныеКомпонента)
	
	Форма.Элементы.ГруппаПанельОтветственного.Видимость = 
		ДанныеКомпонента.ИспользуетсяРазделениеДокументовПоОтветственным;
	
	Форма.Элементы.КнопкаСменитьОтветственного.Заголовок = 
		?(ЗначениеЗаполнено(ДанныеКомпонента.ОтветственныйПоДокументу), 
			Строка(ДанныеКомпонента.ОтветственныйПоДокументу), НСтр("ru='Не указан'"));

КонецПроцедуры

#КонецОбласти // ПанельОтветственного

#Область ПанельОтраженияВУчете

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ЕстьПравоОбработкиДокументов - Булево
//  * ОбъектыУчетаДокумента - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * Основания - СписокЗначений Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ЕстьВозможностьОтраженияВУчете - Булево
//  * ЕстьНоменклатураНаКонтроле - Булево
//  * СпособыОбработкиОсновные - СписокЗначений Из Строка
//  * СпособыОбработкиДополнительные - СписокЗначений Из Строка
//  * СписокСоздания - СписокЗначений Из Строка
//  * СписокПодбора - СписокЗначений Из Строка
//  ДанныеКомпонента - См. ЛегкийИнтерфейсДокументовЭДОСлужебный.НовыеДанныеКомпонентаПанельОтраженияВУчете
Процедура НастроитьПанельОтраженияВУчетеКарточкиДокумента(Форма, ДанныеКомпонента)
	
	Форма.ОбъектыУчетаДокумента.Очистить();
	Для Каждого ОбъектУчета Из ДанныеКомпонента.ОбъектыУчетаДокумента Цикл
		НоваяСтрока = Форма.ОбъектыУчетаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектУчета);
	КонецЦикла;
	ОбъектыУчетаДокумента = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеКомпонента.ОбъектыУчетаДокумента, "ОбъектУчета");
	Форма.Основания.ЗагрузитьЗначения(ОбъектыУчетаДокумента);
	
	Форма.ЕстьВозможностьОтраженияВУчете = ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете;
	Форма.ЕстьНоменклатураНаКонтроле = ДанныеКомпонента.ЕстьНоменклатураНаКонтроле;
	Форма.ЕстьПравоОбработкиДокументов = ДанныеКомпонента.ЕстьПравоОбработкиДокументов;
	ЕстьПравоОбработкиДокументов = ДанныеКомпонента.ЕстьПравоОбработкиДокументов;
	
	ПредставлениеДанныхКомпонента = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеДанныхПоДаннымКомпонентаПанельОтраженияВУчете(
		ДанныеКомпонента);
	
	Форма.СпособыОбработкиОсновные = ПредставлениеДанныхКомпонента.СпособыОбработкиОсновные;
	Форма.СпособыОбработкиДополнительные = ПредставлениеДанныхКомпонента.СпособыОбработкиДополнительные;
	Форма.СписокСоздания = ПредставлениеДанныхКомпонента.СписокСоздания;
	Форма.СписокПодбора = ПредставлениеДанныхКомпонента.СписокПодбора;
	
	Форма.Элементы.ГруппаПанельОтраженияВУчете.Видимость = Истина;
	Форма.Элементы.КартинкаПанельОтветственногоРазделитель1.Видимость = Истина;
		
	ЕстьВозможностьОтраженияВУчете = ДанныеКомпонента.ЕстьВозможностьОтраженияВУчете;
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(Форма.Объект.Ссылка);
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Форма.Объект.Ссылка);
	
	КоличествоОбъектовУчета = ОбъектыУчетаДокумента.Количество();
	ИспользуетсяДополнительныйДокумент = ПредставлениеДанныхКомпонента.СпособыОбработкиДополнительные.Количество() > 0;

	НетОбъектовУчета = (КоличествоОбъектовУчета = 0);
	ОдинОбъектУчета = (КоличествоОбъектовУчета = 1);
	ДваОбъектаУчета = (КоличествоОбъектовУчета = 2);
	МногоОбъектовУчета = (КоличествоОбъектовУчета > 2);
	
	Форма.Элементы.ГруппаСоздатьДокументУчета.Видимость = ЭтоВходящийЭДО И НетОбъектовУчета
		И ЕстьВозможностьОтраженияВУчете И ЕстьПравоОбработкиДокументов;

	Форма.Элементы.ГруппаДокументУчета1.Видимость = ЕстьВозможностьОтраженияВУчете Или Не НетОбъектовУчета;
	Форма.Элементы.КнопкаПодобратьДокументУчета1.Видимость = ЭтоВходящийЭДО И НетОбъектовУчета
		И ЕстьВозможностьОтраженияВУчете И ЕстьПравоОбработкиДокументов;
	Форма.Элементы.КнопкаОткрытьДокументУчета1.Видимость = ОдинОбъектУчета Или ДваОбъектаУчета;
	Форма.Элементы.КнопкаРазорватьСвязьДокументаУчета1.Видимость = ЭтоВходящийЭДО 
		И (ОдинОбъектУчета Или ДваОбъектаУчета) И ЕстьПравоОбработкиДокументов;

	Форма.Элементы.ГруппаДокументУчета2.Видимость = Не НетОбъектовУчета И ЕстьВозможностьОтраженияВУчете 
		Или ДваОбъектаУчета;
	Форма.Элементы.КнопкаПодобратьДокументУчета2.Видимость = ЭтоВходящийЭДО И ОдинОбъектУчета 
		И ИспользуетсяДополнительныйДокумент И ЕстьПравоОбработкиДокументов;
	Форма.Элементы.КнопкаОткрытьДокументУчета2.Видимость = ДваОбъектаУчета;
	Форма.Элементы.КнопкаРазорватьСвязьДокументаУчета2.Видимость = ЭтоВходящийЭДО И ДваОбъектаУчета
		И ЕстьПравоОбработкиДокументов;

	Если Не ЕстьПравоОбработкиДокументов И НетОбъектовУчета Тогда
		Форма.Элементы.ГруппаПанельОтраженияВУчете.Видимость = Ложь;
		Форма.Элементы.КартинкаПанельОтветственногоРазделитель1.Видимость = Ложь;
	ИначеЕсли Не ЕстьПравоОбработкиДокументов И ОдинОбъектУчета Тогда
		Форма.Элементы.КнопкаОткрытьДокументУчета2.Видимость = Ложь;
	КонецЕсли;
	
	Если ОдинОбъектУчета Тогда
		Форма.Элементы.КнопкаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаДокумента[0]);
	КонецЕсли;

	Если ДваОбъектаУчета Тогда
		Форма.Элементы.КнопкаОткрытьДокументУчета1.Заголовок = Строка(ОбъектыУчетаДокумента[0]);
		Форма.Элементы.КнопкаОткрытьДокументУчета2.Заголовок = Строка(ОбъектыУчетаДокумента[1]);
	КонецЕсли;

	Если ИспользуетсяДополнительныйДокумент Тогда

		ЕстьОсновнойДокумент = ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ЕстьОтражениеВОбъектУчетаКарточкиДокумента(
			Форма.ОбъектыУчетаДокумента, Форма.СпособыОбработкиОсновные);

		ТекстВторогоДокумента =  НСтр("ru = 'Подобрать'");

		Если ОдинОбъектУчета Тогда

			Если ЕстьОсновнойДокумент И Форма.СпособыОбработкиДополнительные.Количество() = 1 Тогда
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'Подобрать ""%1""'"),
					Форма.СпособыОбработкиДополнительные[0].Представление);
			ИначеЕсли Не ЕстьОсновнойДокумент И Форма.СпособыОбработкиОсновные.Количество() = 1 Тогда
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'Подобрать ""%1""'"),
					Форма.СпособыОбработкиОсновные[0].Представление);
			КонецЕсли;

		КонецЕсли;

		Форма.Элементы.КнопкаПодобратьДокументУчета2.Заголовок = ТекстВторогоДокумента;

	КонецЕсли;

	Если Не ЕстьВозможностьОтраженияВУчете И Не МногоОбъектовУчета
		Или (ОдинОбъектУчета И Не ИспользуетсяДополнительныйДокумент) 
		Или ДваОбъектаУчета
		Или (ЕстьВозможностьОтраженияВУчете И НетОбъектовУчета И Не ЭтоВходящийЭДО) Тогда
		Форма.Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Подобрать'");
	ИначеЕсли МногоОбъектовУчета Тогда
		Форма.Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок =
			СтрШаблон(НСтр("ru = 'Список документов (%1)'"), КоличествоОбъектовУчета);
	Иначе
		Форма.Элементы.КнопкаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Все документы'");
	КонецЕсли;

	Форма.Элементы.НадписьДокументыУчета.Заголовок = ?(ДваОбъектаУчета Или МногоОбъектовУчета,
		НСтр("ru = 'Документы учета:'"),
		НСтр("ru = 'Документ учета:'"));

	ЭтоВнутреннийДокумент = ДанныеКомпонента.ЭтоВнутреннийВидДокумента;
	ЭтоПрикладнойВидДокумента = ДанныеКомпонента.ЭтоПрикладнойВидДокумента;
	ЭтоИсходящийЭДО = Не ЭтоВходящийЭДО;
	
	Форма.Элементы.ГруппаВсеДокументыУчета.Видимость = Не ЭтоВнутреннийДокумент И МногоОбъектовУчета
		Или ЭтоПрикладнойВидДокумента
		Или (ЭтоВходящийЭДО И Не ЕстьВозможностьОтраженияВУчете И ЕстьПравоОбработкиДокументов)
		Или (ЭтоИсходящийЭДО И НетОбъектовУчета И ЕстьПравоОбработкиДокументов)
		Или (ЭтоИсходящийЭДО И Не НетОбъектовУчета И Не ДанныеКомпонента.ДокументРаспознан И Не ЭтоНовыйДокумент
		И ЕстьПравоОбработкиДокументов);

	Форма.Элементы.ДекорацияОтступОтражениеВУчете.Видимость = Не НетОбъектовУчета И Не МногоОбъектовУчета;

КонецПроцедуры

#КонецОбласти // ПанельОтраженияВУчете

#Область ПанельЗакладокВходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокВходящегоДокумента
Процедура НастроитьПанельЗакладокВходящегоДокумента(Форма, ДанныеКомпонента)
	
	ЗаголовокСтраницыПодписи = НСтр("ru='Подписи'");
	
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.СтраницаПодписи.Заголовок = ЗаголовокСтраницыПодписи;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.КоличествоПодписей <> 0 Тогда
		ЗаголовокСтраницыПодписи = СтрШаблон(НСтр("ru='Подписи (%1)'"), ДанныеКомпонента.КоличествоПодписей);
	КонецЕсли;
	
	Форма.Элементы.СтраницаПодписи.Заголовок = ЗаголовокСтраницыПодписи;
	
	ЕстьСопроводительныеЗаписки = ДанныеКомпонента.КоличествоСопроводительныхЗаписок <> 0;
	Форма.Элементы.СтраницаСопроводительнаяЗаписка.Видимость = ЕстьСопроводительныеЗаписки;
	Форма.Элементы.СтраницаСопроводительнаяЗаписка.Заголовок = ?(ЕстьСопроводительныеЗаписки, 
		НСтр("ru='Сопроводительная записка (есть)'"), НСтр("ru='Сопроводительная записка (нет)'"));
	
КонецПроцедуры

#КонецОбласти // ПанельЗакладокВходящегоДокумента

#Область ПанельЗакладокИсходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельЗакладокИсходящегоДокумента
Процедура НастроитьПанельЗакладокИсходящегоДокумента(Форма, ДанныеКомпонента)
	
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.СтраницаПодписиИМаршрут.Заголовок = НСтр("ru='Подписи'");
		Форма.Элементы.СтраницаСопроводительнаяЗаписка.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		ШаблонЗаголовкаПодписиИМаршрут = НСтр("ru='Подписи и маршрут %1'");
		ЗначениеПараметра = ?(ЗначениеЗаполнено(ДанныеКомпонента.ПредставлениеПрогрессаПодписания),
			ДанныеКомпонента.ПредставлениеПрогрессаПодписания, "(0)");
		ЗаголовокСтраницыПодписиИМаршрут = СтрШаблон(ШаблонЗаголовкаПодписиИМаршрут, ЗначениеПараметра);
	ИначеЕсли ДанныеКомпонента.КоличествоПодписей <> 0 Тогда
		ШаблонЗаголовкаПодписи = НСтр("ru='Подписи %1'");
		ЗаголовокСтраницыПодписиИМаршрут = СтрШаблон(ШаблонЗаголовкаПодписи, 
			СтрШаблон("(%1)", ДанныеКомпонента.КоличествоПодписей));
	Иначе
		ЗаголовокСтраницыПодписиИМаршрут = НСтр("ru='Подписи (0)'");
	КонецЕсли;
	
	Форма.Элементы.СтраницаПодписиИМаршрут.Заголовок = СокрЛП(ЗаголовокСтраницыПодписиИМаршрут);
	
	ЕстьСопроводительныеЗаписки = ДанныеКомпонента.КоличествоСопроводительныхЗаписок <> 0;
	Если ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		Форма.Элементы.СтраницаСопроводительнаяЗаписка.Видимость = Истина;
	Иначе
		Форма.Элементы.СтраницаСопроводительнаяЗаписка.Видимость = ЕстьСопроводительныеЗаписки;
	КонецЕсли;
	Форма.Элементы.СтраницаСопроводительнаяЗаписка.Заголовок = ?(ЕстьСопроводительныеЗаписки, 
		НСтр("ru='Сопроводительная записка (есть)'"), НСтр("ru='Сопроводительная записка (нет)'"));
	
КонецПроцедуры

#КонецОбласти // ПанельЗакладокИсходящегоДокумента

#Область ПанельВизуализации

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * ТипВизуализации - Строка
//  * ВизуализацияТабличныйДокумент - ТабличныйДокумент
//  * ВизуализацияHTMLДокумент - Строка
//  * ИмяПроизвольногоФайла - Строка
//  * РасширениеПроизвольногоФайла - Строка
//  * КартинкаПроизвольногоФайла - Число
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельВизуализации - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//  * Команды - КомандыФормы:
//   ** ОткрытьФайл - КомандаФормы
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельВизуализации
Процедура НастроитьПанельВизуализацииКарточкиДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.ТипВизуализации = ТипВизуализацииОжиданиеКарточкиДокумента(Форма);
		Форма.Элементы.ГруппаСтраницыПанельВизуализации.ТекущаяСтраница =
			СтраницаСодержимогоПоТипуВизуализацииКарточкиДокумента(Форма);
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеКомпонента.ТипДанных) Тогда
		Форма.ТипВизуализации = ТипВизуализацииОшибкаКарточкиДокумента(Форма);
	КонецЕсли;
	
	ВыводитьПодсказкуПДФ_А3 = Ложь;
	ВыводитьКомандуВыгрузкиВФорматеPDF = Истина;
	ЭтоВходящийЭДО = ЭтоВходящийЭДО(Форма.Объект.Ссылка);

	Если ДанныеКомпонента.ТипДанных = ТипыДанныхВизуализации().ТабличныйДокумент Тогда

		Форма.ТипВизуализации = ТипВизуализацииТабличныйДокументКарточкиДокумента(Форма);
		Форма.ВизуализацияТабличныйДокумент = ДанныеКомпонента.Данные;

	ИначеЕсли ДанныеКомпонента.ТипДанных = ТипыДанныхВизуализации().PdfДокумент Тогда

		Форма.ТипВизуализации = ТипВизуализацииФайлКарточкиДокумента(Форма);
		Форма.ИмяПроизвольногоФайла = ДанныеКомпонента.НаименованиеФайла;
		Форма.РасширениеПроизвольногоФайла = ДанныеКомпонента.РасширениеФайла;
		Форма.КартинкаПроизвольногоФайла = 
			РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(ДанныеКомпонента.РасширениеФайла);

		Форма.Элементы.НадписьТранслитерация.Видимость = Не ЭтоВходящийЭДО И Не ДанныеКомпонента.ОтключитьТранслитерацию;
		
	ИначеЕсли ДанныеКомпонента.ТипДанных = ТипыДанныхВизуализации().HTMLДокумент Тогда
	
		Форма.ТипВизуализации = ТипВизуализацииHTMLДокументКарточкиДокумента(Форма);
		Форма.ВизуализацияHTMLДокумент = ДанныеКомпонента.Данные;

	КонецЕсли;
	
	Форма.Элементы.ГруппаСтраницыПанельВизуализации.ТекущаяСтраница =
		СтраницаСодержимогоПоТипуВизуализацииКарточкиДокумента(Форма);

	Если Не ЗначениеЗаполнено(ДанныеКомпонента.НаименованиеФайла) Тогда
		ПредставлениеФайла = ИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеОтсутствующегоФайла();
	ИначеЕсли ЭтоВходящийЭДО Тогда
		ПредставлениеФайла = ДанныеКомпонента.НаименованиеФайла;
	Иначе
		ПредставлениеФайла = РаботаСФайламиБЭДКлиентСервер.ПредставлениеФайлаСРазмеромВКилобайтах(
			ДанныеКомпонента.НаименованиеФайла, ДанныеКомпонента.РазмерФайла);
	КонецЕсли;
	Форма.Элементы.КнопкаОткрытьФайл.Заголовок = ПредставлениеФайла;

	Форма.Команды.ОткрытьФайл.Подсказка = ДанныеКомпонента.НаименованиеФайла;

	ВыводитьПодсказкуПДФ_А3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ДанныеКомпонента.НаименованиеФайла);
	ВыводитьКомандуВыгрузкиВФорматеPDF = Не Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(
		ДанныеКомпонента.НаименованиеФайла);
		
	Если ВыводитьПодсказкуПДФ_А3 Тогда
		Форма.Элементы.НадписьПодсказкаДоговорныйДокументПДФ_А3.Заголовок =
			Обработки.ФорматДоговорныйДокумент101.ТекстСправки();
	КонецЕсли;

	Форма.Элементы.ГруппаПодсказкаДоговорныйДокументПДФ_А3.Видимость = ВыводитьПодсказкуПДФ_А3;

	Форма.Элементы.КнопкаВыгрузитьЭлектронныеДокументыВФорматеPDF.Видимость = ВыводитьКомандуВыгрузкиВФорматеPDF;
	Форма.Элементы.КнопкаВыгрузитьЭлектронныеДокументыВФорматеPDFКомандыДокумента.Видимость = 
		ВыводитьКомандуВыгрузкиВФорматеPDF;
	Форма.Элементы.КнопкаОбновитьВизуализацию.Видимость = ЗначениеЗаполнено(Форма.Объект.Ссылка) 
		И Интеграция1СШтампКлиентСервер.РасширениеОсновногоФайлаПоддерживается(ДанныеКомпонента.РасширениеФайла);

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  ГруппаФормы
Функция СтраницаСодержимогоПоТипуВизуализацииКарточкиДокумента(Форма)
	Если ЗначениеЗаполнено(Форма.ТипВизуализации) Тогда
		Возврат Форма.Элементы[Форма.ТипВизуализации];
	Иначе
		Возврат Форма.Элементы.СтраницаОжидание;
	КонецЕсли;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  Строка
Функция ТипВизуализацииФайлКарточкиДокумента(Форма)
	Возврат Форма.Элементы.СтраницаФайл.Имя;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  Строка
Функция ТипВизуализацииТабличныйДокументКарточкиДокумента(Форма)
	Возврат Форма.Элементы.СтраницаТабличныйДокумент.Имя;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  Строка
Функция ТипВизуализацииHTMLДокументКарточкиДокумента(Форма)
	Возврат Форма.Элементы.СтраницаHTMLДокумент.Имя;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  Строка
Функция ТипВизуализацииОжиданиеКарточкиДокумента(Форма)
	Возврат Форма.Элементы.СтраницаОжидание.Имя;
КонецФункции

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса
// 
// Возвращаемое значение:
//  Строка
Функция ТипВизуализацииОшибкаКарточкиДокумента(Форма)
	Возврат Форма.Элементы.СтраницаОшибка.Имя;
КонецФункции

#КонецОбласти // ПанельВизуализации

#Область ПанельКомандНастроекВизуализации

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * ОтключитьВыводДопДанных - Булево
//  * ОтключитьВыводКопияВерна - Булево
//  * ВыводитьБанковскиеРеквизиты - Булево
//  * ВключитьПолеПредпросмотраPDFФайлов - Булево
//  * ЕстьПравоАдминистрирования - Булево
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандНастроекВизуализации
Процедура НастроитьПанельКомандНастроекВизуализацииКарточкиДокумента(Форма, ДанныеКомпонента)
	
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.КнопкаОтображатьБанковскиеРеквизиты.Видимость = Ложь;
		Форма.Элементы.КнопкаОтображатьДополнительнуюИнформацию.Видимость = Ложь;
		Форма.Элементы.КнопкаОтображатьОбластьКопияВерна.Видимость = Ложь;
		Форма.Элементы.ВключитьПолеПредпросмотраPDFФайлов.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.ОтключитьВыводДопДанных = Не ДанныеКомпонента.ВыводитьДополнительныеДанные;
	Форма.ОтключитьВыводКопияВерна = Не ДанныеКомпонента.ВыводитьКопияВерна;
	Форма.ВыводитьБанковскиеРеквизиты = ДанныеКомпонента.ВыводитьБанковскиеРеквизиты;
	
	Форма.Элементы.КнопкаОтображатьДополнительнуюИнформацию.Пометка = ДанныеКомпонента.ВыводитьДополнительныеДанные;
	Форма.Элементы.КнопкаОтображатьОбластьКопияВерна.Пометка = ДанныеКомпонента.ВыводитьКопияВерна;
	Форма.Элементы.КнопкаОтображатьБанковскиеРеквизиты.Пометка = ДанныеКомпонента.ВыводитьБанковскиеРеквизиты;
	
	Форма.Элементы.КнопкаОтображатьБанковскиеРеквизиты.Видимость =
		ДанныеКомпонента.ЕстьНастройкаВыводаБанковскихРеквизитов;
	Форма.Элементы.КнопкаОтображатьДополнительнуюИнформацию.Видимость =
		ДанныеКомпонента.ЕстьНастройкаВыводаДополнительныхДанных;
	Форма.Элементы.КнопкаОтображатьОбластьКопияВерна.Видимость =
		ДанныеКомпонента.ЕстьНастройкаВыводаКопияВерна;
	
	Если Не Форма.ЕстьПравоАдминистрирования Тогда
		Форма.Элементы.ВключитьПолеПредпросмотраPDFФайлов.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ИнтерфейсДокументовЭДО.ПолеПросмотраPDFДокументовРаботаетСтабильно() Тогда
		Форма.Элементы.ВключитьПолеПредпросмотраPDFФайлов.Видимость = Истина;
		Форма.Элементы.ВключитьПолеПредпросмотраPDFФайлов.Пометка = ДанныеКомпонента.ИспользуетсяПросмотрPDFДокументов;
	Иначе
		Форма.Элементы.ВключитьПолеПредпросмотраPDFФайлов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПанельКомандНастроекВизуализации

#Область ПанельПредставленияФайла

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** СтраницыПредставленияФайла - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** КнопкаОбновитьВизуализацию - КнопкаФормы
//  * ВизуализацияДокументPDF - ДокументPDF
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПредставленияФайла
Процедура НастроитьПанельПредставленияФайлаКарточкиДокумента(Форма, ДанныеКомпонента)

	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Форма.Элементы.ГруппаПанельПредставленияФайла.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомпонента.ЕстьОшибка Тогда
		Форма.Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Форма.Элементы.СтраницаПредставлениеФайлаОшибка;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКомпонента.Данные) Тогда
		Форма.Элементы.ГруппаПанельПредставленияФайла.Видимость = Ложь;
		Форма.Элементы.КнопкаОбновитьВизуализацию.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаПанельПредставленияФайла.Видимость = Истина;
		
	Форма.Элементы.СтраницыПредставленияФайла.ТекущаяСтраница = Форма.Элементы.СтраницаПредставлениеФайлаЗагружено;
	
	ИмяРеквизитаСведенияОPdfДокументе = "СведенияОPdfДокументе";
	СведенияОPdfДокументе = ИнтерфейсДокументовЭДО.СведенияОPDFДокументеНаФормеПоУмолчанию();
	
	Если Форма[ИмяРеквизитаСведенияОPdfДокументе] = Неопределено Тогда

		СведенияОPdfДокументе.ИмяРеквизита = "ВизуализацияДокументPDF"; // АПК:1297 - не локализуется
		СведенияОPdfДокументе.ИмяЭлемента = "ВизуализацияДокументPDF"; // АПК:1297 - не локализуется
		СведенияОPdfДокументе.ИмяРодителяЭлемента = "ГруппаСодержимоеPdfДокумента";
		Форма[ИмяРеквизитаСведенияОPdfДокументе] = СведенияОPdfДокументе;

	Иначе

		ЗаполнитьЗначенияСвойств(СведенияОPdfДокументе, Форма[ИмяРеквизитаСведенияОPdfДокументе]);

	КонецЕсли;

	ИнтерфейсДокументовЭДО.НастроитьПанельДляВыводаPDFДокумента(Форма, СведенияОPdfДокументе);

КонецПроцедуры

#КонецОбласти // ПанельПредставленияФайла

#Область ПанельПодписей

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * ЕстьПравоИзмененияМЧД - Булево
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельПодписей - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** ПодписиДоверенностьПредставление - ПолеФормы
//  * Подписи - ДанныеФормыКоллекция Из ДанныеФормыЭлементКоллекции:
//   ** НомерСтроки - Число
//   ** ВыводКартинки - Число
//   ** ПодписьВерна - Булево
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельПодписей
Процедура НастроитьПанельПодписейКарточкиДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.ГруппаСтраницыПанельПодписей.ТекущаяСтраница = Форма.Элементы.СтраницаОжиданиеПодписей;
		Возврат;
	КонецЕсли;
		
	Форма.ЕстьПравоИзмененияМЧД = ДанныеКомпонента.ЕстьПравоИзмененияМЧД;
	Форма.Подписи.Очистить();

	Для Каждого УстановленнаяПодпись Из ДанныеКомпонента.ПодписиДокумента Цикл
		НоваяПодпись = Форма.Подписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПодпись, УстановленнаяПодпись);
		НоваяПодпись.НомерСтроки = Форма.Подписи.Индекс(НоваяПодпись);
		НоваяПодпись.ВыводКартинки = ?(НоваяПодпись.ПодписьВерна, 0, 1);
	КонецЦикла;
	
	Форма.Подписи.Сортировать("ДатаПодписи Возр");
	
	Форма.Элементы.ГруппаСтраницыПанельПодписей.ТекущаяСтраница = Форма.Элементы.СтраницаЗагруженныеПодписи;

	ПодписиПоДоверенности = Форма.Подписи.НайтиСтроки(Новый Структура("ЭтоПодписьПоДоверенности", Истина));
	Форма.Элементы.ПодписиДоверенностьПредставление.Видимость = ЗначениеЗаполнено(ПодписиПоДоверенности);
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ПодписиПодписьВернаПредставление.Имя);
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементОформления.Отбор, 
		"ОшибкиПроверкиПодписей", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Подписи.ПодписьВерна", 
		ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ПодгруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбора, 
		"ОшибкиПроверкиПодписейПоДоверенности", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ПодгруппаОтбора, "Подписи.ЭтоПодписьПоДоверенности", 
		ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ПодгруппаОтбора, 
		"Подписи.ПодписьПоДоверенностиВерна", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();

КонецПроцедуры

#КонецОбласти // ПанельПодписей

#Область ПанельСопроводительнойЗапискиВходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельСопроводительнойЗаписки - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** СтраницаОжиданиеСопроводительнойЗаписки - ГруппаФормы
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиВходящегоДокумента
Процедура НастроитьПанельСопроводительнойЗапискиКарточкиВходящегоДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.ГруппаСтраницыПанельСопроводительнойЗаписки.ТекущаяСтраница = 
			Форма.Элементы.СтраницаОжиданиеСопроводительнойЗаписки;
		Возврат;
	КонецЕсли;

	НастроитьНедоступнуюПанельСопроводительнойЗапискиКарточкиДокумента(Форма,
		ДанныеКомпонента.СопроводительныеЗаписки);

КонецПроцедуры

#КонецОбласти // ПанельСопроводительнойЗапискиВходящегоДокумента

#Область ПанельСопроводительнойЗапискиИсходящегоДокумента

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса:
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельСопроводительнойЗаписки - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** СтраницаОжиданиеСопроводительнойЗаписки - ГруппаФормы
//   ** СтраницаЗагруженнаяСопроводительнаяЗапискаДоступнаДляРедактирования - ГруппаФормы
//   ** СтраницаЗагруженнаяСопроводительнаяЗаписка - ГруппаФормы
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельСопроводительнойЗапискиИсходящегоДокумента
Процедура НастроитьПанельСопроводительнойЗапискиКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)

	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.ГруппаСтраницыПанельСопроводительнойЗаписки.ТекущаяСтраница = 
			Форма.Элементы.СтраницаОжиданиеСопроводительнойЗаписки;
		Возврат;
	КонецЕсли;

	Если ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение Тогда
		
		Форма.Элементы.ГруппаСтраницыПанельСопроводительнойЗаписки.ТекущаяСтраница = 
			Форма.Элементы.СтраницаЗагруженнаяСопроводительнаяЗапискаДоступнаДляРедактирования;
		НастроитьДоступнуюПанельСопроводительнойЗапискиКарточкиИсходящегоДокумента(Форма, 
			ДанныеКомпонента.СопроводительныеЗаписки);
			
	Иначе
		
		Форма.Элементы.ГруппаСтраницыПанельСопроводительнойЗаписки.ТекущаяСтраница = 
			Форма.Элементы.СтраницаЗагруженнаяСопроводительнаяЗаписка;
		НастроитьНедоступнуюПанельСопроводительнойЗапискиКарточкиДокумента(Форма, 
			ДанныеКомпонента.СопроводительныеЗаписки);
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ПанельСопроводительнойЗапискиИсходящегоДокумента

#Область ПанельРеквизитов

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//   ** ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//   ** НомерДокумента - Строка
//   ** ДатаДокумента - Дата
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельРеквизитов - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** СтраницаДоступныеДляРедактированияРеквизиты - ГруппаФормы
//   ** СтраницаНеДоступныеДляРедактированияРеквизиты - ГруппаФормы
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельРеквизитов
Процедура НастроитьПанельРеквизитовКарточкиДокумента(Форма, ДанныеКомпонента)

	ДоступноРедактированиеРеквизитов = 
		Не ЭтоВходящийЭДО(Форма.Объект.Ссылка)
		И (ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или (ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание
		И Не ДанныеКомпонента.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной
		И Не ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		И Не ДанныеКомпонента.ЭтоВнутреннийВидДокумента));

	Если ДоступноРедактированиеРеквизитов Тогда
		Форма.Элементы.ГруппаСтраницыПанельРеквизитов.ТекущаяСтраница = 
			Форма.Элементы.СтраницаДоступныеДляРедактированияРеквизиты;
		Форма.Элементы.Контрагент.ОграничениеТипа = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	Иначе
		Форма.Элементы.ГруппаСтраницыПанельРеквизитов.ТекущаяСтраница = 
			Форма.Элементы.СтраницаНеДоступныеДляРедактированияРеквизиты;
		Форма.Элементы.СтраницаНеДоступныеДляРедактированияРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.СтраницаНеДоступныеДляРедактированияРеквизиты.Видимость = Не ДоступноРедактированиеРеквизитов;
	Форма.Элементы.СтраницаДоступныеДляРедактированияРеквизиты.Видимость = ДоступноРедактированиеРеквизитов;
	
	Форма.Элементы.ДоговорКонтрагентаНеДоступные.Видимость = ЗначениеЗаполнено(Форма.Объект.ДоговорКонтрагента);
	Форма.Элементы.НадписьИсходящийНомерДата.Заголовок = СтрШаблон(НСтр("ru='Исходящий №: %1 от %2'"),
		?(ЗначениеЗаполнено(Форма.Объект.НомерДокумента), 
		Форма.Объект.НомерДокумента, "-"),
		Формат(Форма.Объект.ДатаДокумента, "ДЛФ=Д"));
	
	ИнтерфейсДокументовЭДО.УстановитьСвязиПараметровВыбораДоговорКонтрагента(Форма.Элементы.ДоговорКонтрагента,
		Форма.Элементы.Организация.ПутьКДанным, Форма.Элементы.Контрагент.ПутьКДанным);
	
КонецПроцедуры

#КонецОбласти // ПанельРеквизитов

#Область ПанельМаршрута

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  * Элементы - ВсеЭлементыФормы:
//   ** ГруппаСтраницыПанельМаршрута - ГруппаФормы:
//    *** ТекущаяСтраница - ГруппаФормы
//   ** СтраницаОжиданиеМаршрута - ГруппаФормы
//   ** СтраницаЗагруженныйМаршрут - ГруппаФормы
//   ** СхемаМаршрутаПодписания - ПолеФормы
//   ** МаршрутПодписанияДокумента - ПолеФормы
//   ** СхемаМаршрутаПодписанияСертификат - ПолеФормы
//  * ПредставлениеМаршрута - Строка
//  * МаршрутУказанВНастройках - Булево
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельМаршрута
Процедура НастроитьПанельМаршрутаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)
	
	Если ДанныеКомпонента.АсинхронноеПолучение Тогда
		Форма.Элементы.ГруппаСтраницыПанельМаршрута.ТекущаяСтраница = Форма.Элементы.СтраницаОжиданиеМаршрута;
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаСтраницыПанельМаршрута.ТекущаяСтраница = Форма.Элементы.СтраницаЗагруженныйМаршрут;
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Форма.Объект.Ссылка);
	
	Форма.ПредставлениеМаршрута = ДанныеКомпонента.ПредставлениеМаршрута;
	
	Форма.Элементы.СхемаМаршрутаПодписанияСертификат.Видимость =
		ДанныеКомпонента.ВидПодписи <> Перечисления.ВидыЭлектронныхПодписей.Простая;	
	
	ОсновнойРеквизит = ?(ДанныеКомпонента.ЭтоИнтеркампани, "Организация", "Подписант");
	МаршрутыПодписанияБЭД.ЗаполнитьДеревоМаршрутаНаФорме(Форма, ДанныеКомпонента.СхемаМаршрутаПодписания,
		"СхемаМаршрутаПодписания", ОсновнойРеквизит);
	
	ПанельВидна = ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	МаршрутДоступен = ДанныеКомпонента.КоличествоПодписей = 0
		И (Не ЗначениеЗаполнено(ДанныеКомпонента.МаршрутПодписания)
		Или ДанныеКомпонента.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании
		Или (ЭтоНовыйДокумент Или ДанныеКомпонента.ИзмененМаршрутПодписания) 
		И Не ДанныеКомпонента.МаршрутУказанВНастройках);
 	МаршрутВиден = МаршрутДоступен
		Или ДанныеКомпонента.МаршрутПодписания <> Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	Форма.Элементы.ГруппаСтраницыПанельМаршрута.Видимость = ПанельВидна;
	Форма.Элементы.МаршрутПодписанияДокумента.Доступность = МаршрутДоступен;
	Форма.Элементы.МаршрутПодписанияДокумента.Видимость = МаршрутВиден;
	
	МаршрутыПодписанияБЭД.УстановитьУсловноеОформлениеДереваМаршрута(Форма, "СхемаМаршрутаПодписания");

КонецПроцедуры

#КонецОбласти // ПанельМаршрута

#Область ПанелиКоманд

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса:
//  * СформироватьИзвещение - Булево
//  * Объект - ДанныеФормыСтруктура:
//   ** Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ДанныеКомпонента - Структура:
//  * ДоступныеДействияПоЭДОДляДокумента - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ДоступныеДействияПоЭДОДляДокументаПакета - Соответствие Из КлючИЗначение:
//   ** Ключ - ПеречислениеСсылка.ДействияПоЭДО
//   ** Значение - Булево
//  * ИспользуетсяОтложеннаяОтправка - Булево
//  * ЭтоИнтеркампани - Булево
//  * ЭтоПакетДокументов - Булево
Процедура НастроитьПанельКомандВыполнениеДействийПоЭДОКарточкиДокумента(Форма, ДанныеКомпонента)
	
	ДействияНаЭтапе = ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокумента;
	ДействияНаЭтапеДляДокументаПакета = ДанныеКомпонента.ДоступныеДействияПоЭДОДляДокументаПакета;
	ЭтоПакетДокументов = ДанныеКомпонента.ЭтоПакетДокументов;
	ЭтоИсходящийЭДО = Не ЭтоВходящийЭДО(Форма.Объект.Ссылка);
	
	Форма.Элементы.КнопкаПодписать.Видимость = Ложь;
	Форма.Элементы.КнопкаПодписатьДокументПакета.Видимость = Ложь;
	Форма.Элементы.КнопкаОтправить.Видимость = Ложь;
	Форма.Элементы.КнопкаОтправитьДокументПакета.Видимость = Ложь;
	Форма.Элементы.КнопкаПодписатьОтправить.Видимость = Ложь;
	Форма.Элементы.КнопкаПодписатьОтправитьДокументПакета.Видимость = Ложь;
	
	Форма.СформироватьИзвещение = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.СформироватьИзвещение);
	
	ЕстьДействиеПодписатьОтправить = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить);
	Если ЕстьДействиеПодписатьОтправить
		И (ЭтоИсходящийЭДО И Не ДанныеКомпонента.ИспользуетсяОтложеннаяОтправка И Не ДанныеКомпонента.ЭтоИнтеркампани
		Или Не ЭтоИсходящийЭДО) Тогда
		Форма.Элементы.КнопкаПодписатьОтправить.Видимость = Истина;
		Форма.ТекущийЭлемент = Форма.Элементы.КнопкаПодписатьОтправить;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Форма.Элементы.КнопкаПодписать.Видимость = Истина;
		Форма.ТекущийЭлемент = Форма.Элементы.КнопкаПодписать;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке)
		Тогда
		Форма.Элементы.КнопкаОтправить.Видимость = Истина;
		Форма.ТекущийЭлемент = Форма.Элементы.КнопкаОтправить;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы.КнопкаРаспечататьКомандыДокумента;
	КонецЕсли;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Форма.Элементы.КнопкаПодписатьОтправитьДокументПакета.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Форма.Элементы.КнопкаПодписатьДокументПакета.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.Отправить) 
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Форма.Элементы.КнопкаОтправитьДокументПакета.Видимость = Истина;
	КонецЕсли;
	
	Форма.Элементы.КнопкаСоставПакетаПодписатьОтправитьДокумент.Видимость = 
		Форма.Элементы.КнопкаПодписатьОтправитьДокументПакета.Видимость;
	Форма.Элементы.КнопкаСоставПакетаПодписатьДокумент.Видимость = 
		Форма.Элементы.КнопкаПодписатьДокументПакета.Видимость;
	Форма.Элементы.КнопкаСоставПакетаОтправитьДокумент.Видимость = 
		Форма.Элементы.КнопкаОтправитьДокументПакета.Видимость;

	Форма.Элементы.КнопкаУтвердить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Утвердить);
	Форма.Элементы.КнопкаУтвердитьДокументПакета.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
		Перечисления.ДействияПоЭДО.Утвердить);
	Форма.Элементы.КнопкаСоставПакетаУтвердитьДокумент.Видимость = 
		Форма.Элементы.КнопкаУтвердитьДокументПакета.Видимость;
	
	Форма.Элементы.КнопкаПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Форма.Элементы.КнопкаПринятьАннулированиеДокументаПакета.Видимость = ЕстьДействиеПоЭДО(
		ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Форма.Элементы.КнопкаСоставПакетаПринятьАннулированиеДокумент.Видимость = 
		Форма.Элементы.КнопкаПринятьАннулированиеДокументаПакета.Видимость;
				
	Форма.Элементы.КнопкаОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Форма.Элементы.КнопкаОтклонитьАннулированиеДокументаПакета.Видимость = ЕстьДействиеПоЭДО(
		ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Форма.Элементы.КнопкаСоставПакетаОтклонитьАннулированиеДокумент.Видимость = 
		Форма.Элементы.КнопкаОтклонитьАннулированиеДокументаПакета.Видимость;
			
	ОтклонениеДоступно = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отклонить);
	ОтклонениеДокументаПакетаДоступно = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
		Перечисления.ДействияПоЭДО.Отклонить); 
	Форма.Элементы.КнопкаОтклонить.Видимость = ОтклонениеДоступно;
	Форма.Элементы.КнопкаОтклонитьДокументПакета.Видимость = ОтклонениеДокументаПакетаДоступно;
	Форма.Элементы.КнопкаСоставПакетаОтклонитьДокумент.Видимость = 
		Форма.Элементы.КнопкаОтклонитьДокументПакета.Видимость;
		
	Если ЭтоИсходящийЭДО Тогда
		ОтклонениеПодписанияДоступно = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
			Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
		ОтклонениеПодписанияДокументаПакетаДоступно = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
			Перечисления.ДействияПоЭДО.ОтклонитьПодписание);
		
		Форма.Элементы.КнопкаОтклонитьПодписание.Видимость = ОтклонениеПодписанияДоступно;
		Форма.Элементы.КнопкаОтклонитьПодписаниеПакет.Видимость = ОтклонениеПодписанияДоступно;
		Форма.Элементы.КнопкаОтклонитьПодписаниеДокументПакета.Видимость = ОтклонениеПодписанияДокументаПакетаДоступно;
		Форма.Элементы.КнопкаСоставПакетаОтклонитьПодписаниеДокумент.Видимость = 
			ОтклонениеПодписанияДокументаПакетаДоступно;
		Форма.Элементы.КнопкаОтклонитьПодписание.Заголовок = 
			ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтклонить(ЭтоПакетДокументов);
	КонецЕсли;
		
	Форма.Элементы.КнопкаАннулироватьПакет.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.Аннулировать);
	Форма.Элементы.КнопкаАннулироватьДокументПакета.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
		Перечисления.ДействияПоЭДО.Аннулировать);
	Форма.Элементы.КнопкаСоставПакетаАннулироватьДокумент.Видимость = 
		Форма.Элементы.КнопкаАннулироватьДокументПакета.Видимость;
		
	Форма.Элементы.КнопкаЗавершитьПакет.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, 
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Форма.Элементы.КнопкаЗавершитьДокументПакета.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Форма.Элементы.КнопкаСоставПакетаЗавершитьДокумент.Видимость = 
		Форма.Элементы.КнопкаЗавершитьДокументПакета.Видимость;
		
	Форма.Элементы.КнопкаВернутьВРаботуПакет.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, 
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Форма.Элементы.КнопкаВернутьВРаботуДокументПакета.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокументаПакета,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Форма.Элементы.КнопкаСоставПакетаВернутьВРаботуДокумент.Видимость = 
		Форма.Элементы.КнопкаВернутьВРаботуДокументПакета.Видимость;
		
	Форма.Элементы.КнопкаОтправитьПовторно.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	Форма.Элементы.КнопкаОтправитьПовторноДокументПакета.Видимость = ЕстьДействиеПоЭДО(
		ДействияНаЭтапеДляДокументаПакета, Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
	Форма.Элементы.КнопкаПодписатьОтправитьПакет.Видимость = Форма.Элементы.КнопкаПодписатьОтправить.Видимость;
	Форма.Элементы.КнопкаУтвердитьПакет.Видимость = Форма.Элементы.КнопкаУтвердить.Видимость;
	Форма.Элементы.КнопкаПодписатьПакет.Видимость = Форма.Элементы.КнопкаПодписать.Видимость;
	Форма.Элементы.КнопкаОтправитьПакет.Видимость = Форма.Элементы.КнопкаОтправить.Видимость;
	Форма.Элементы.КнопкаОтклонитьПакет.Видимость = Форма.Элементы.КнопкаОтклонить.Видимость;
	Форма.Элементы.КнопкаОтправитьПовторноПакет.Видимость = Форма.Элементы.КнопкаОтправитьПовторно.Видимость;
	Форма.Элементы.КнопкаПринятьАннулированиеПакет.Видимость = Форма.Элементы.КнопкаПринятьАннулирование.Видимость;
	Форма.Элементы.КнопкаОтклонитьАннулированиеПакет.Видимость = Форма.Элементы.КнопкаОтклонитьАннулирование.Видимость;
	
	Форма.Элементы.КнопкаУтвердить.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыУтвердить(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаПодписать.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыПодписать(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаОтклонить.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтклонить(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаОтправить.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтправить(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаПодписатьОтправить.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыПодписать(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаПринятьАннулирование.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыПринятьАннулирование(ЭтоПакетДокументов);
	Форма.Элементы.КнопкаОтклонитьАннулирование.Заголовок = 
		ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыОтклонитьАннулирование(ЭтоПакетДокументов);
		
	Если ЭтоИсходящийЭДО Тогда
		Форма.Элементы.КнопкаАннулироватьДокументПакета.Заголовок = 
			ЛегкийИнтерфейсДокументовЭДОКлиентСервер.ПредставлениеКомандыАннулировать(Ложь,
				ДанныеКомпонента.ЭтоВнутреннийВидДокумента);
	КонецЕсли;
			
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
Процедура НастроитьПанельКомандПоПравамКарточкиВходящегоДокумента(Форма, ДанныеКомпонента)
	
	Если Не ДанныеКомпонента.ЕстьПравоОбработкиДокументов Тогда
		Форма.Элементы.КнопкаСменитьОтветственногоПакет.Видимость = Ложь;
		Форма.Элементы.КнопкаСменитьОтветственногоДокумент.Видимость = Ложь;
		Форма.Элементы.КнопкаСоздатьПроизвольныйДокумент.Видимость = Ложь;
		Форма.Элементы.КнопкаНастройкиОтраженияВУчете.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандПоПравамКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)
	
	Если Не ДанныеКомпонента.ЕстьПравоОбработкиДокументов Тогда
		Форма.Элементы.КнопкаСменитьОтветственного.Доступность = Ложь;
		Форма.Элементы.КнопкаСменитьОтветственногоПакет.Видимость = Ложь;
		Форма.Элементы.КнопкаСменитьОтветственногоДокумент.Видимость = Ложь;
		Форма.Элементы.КнопкаСоздатьПроизвольныйДокумент.Видимость = Ложь;
		Форма.Элементы.КнопкаПереформировать.Видимость = Ложь;
		Форма.Элементы.КнопкаЗаписатьДокумент.Видимость = Ложь;
		Форма.Элементы.КнопкаВыполнитьОтправкуПолучение.Видимость = Ложь;
		Форма.Элементы.СоставПакетаГруппаДействияСПакетом.Видимость = Ложь;
		Форма.Элементы.СоставПакетаГруппаДействияСДокументом.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандОформлениеНастроекКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)

	Форма.Элементы.КнопкаОткрытьНастройкиФормирования.Видимость = 
		ДанныеКомпонента.ДоступноИзменениеНастроекФормированияИОтправки;
		
	Форма.Элементы.КнопкаОткрытьНастройкиОтправки.Видимость = 
		ДанныеКомпонента.ДоступноИзменениеНастроекФормированияИОтправки;

	Форма.Элементы.КнопкаТранслитерироватьИмяФайла.Видимость = ДанныеКомпонента.ТранслитерацияДоступна;
	
	Форма.Элементы.КнопкаТранслитерироватьИмяФайла.Пометка = Не ДанныеКомпонента.ОтключитьТранслитерацию;

КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандВходящегоДокумента
Процедура НастроитьПанельКомандПакетаКарточкиВходящегоДокумента(Форма, ДанныеКомпонента)
	
	Форма.Элементы.ПодменюПакет.Видимость = ДанныеКомпонента.ЭтоПакетДокументов;
	Форма.Элементы.СоставПакетаГруппаДействияСДокументом.Видимость = ДанныеКомпонента.ЭтоПакетДокументов;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандПакетаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)
	
	Форма.Элементы.ПодменюПакет.Видимость = ДанныеКомпонента.ЭтоПакетДокументов;
	Форма.Элементы.СоставПакетаГруппаДействияСДокументом.Видимость = ДанныеКомпонента.ЭтоПакетДокументов;
	
	ДоступноИзменениеПакета = ДанныеКомпонента.ДоступноИзменениеПакета;
	Форма.Элементы.ГруппаДобавитьВПакет.Видимость = ДоступноИзменениеПакета;
	Форма.Элементы.ГруппаДобавитьДокументыВПакет.Видимость = ДоступноИзменениеПакета;
	Форма.Элементы.ГруппаСоставПакетаДобавитьВПакет.Видимость = ДоступноИзменениеПакета;
	Форма.Элементы.КнопкаСоставПакетаУдалитьДокументИзПакета.Видимость = ДоступноИзменениеПакета;
	Форма.Элементы.КнопкаУдалитьДокументИзПакета.Видимость = ДоступноИзменениеПакета;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандКомандаПереформированиеКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)

	Форма.Элементы.КнопкаПереформировать.Видимость = ДанныеКомпонента.ПереформированиеДоступно;
	Форма.Элементы.КнопкаСоставПакетаПереформировать.Видимость = ДанныеКомпонента.ПереформированиеДоступно;
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандКомандаЗагрузитьСДискаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)

	Форма.Элементы.КнопкаЗагрузитьФормализованныйДокументСДиска.Видимость = 
		ДанныеКомпонента.ДоступноФормированиеФормализованныхЭДИзФайлов
		И (ДанныеКомпонента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный
		Или ДанныеКомпонента.ТипРегламента = Перечисления.ТипыРегламентовЭДО.УПД)
		И (ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.НеСформирован
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение
		Или ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание);
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандКомандаЗаписатьКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)

	Форма.Элементы.КнопкаЗаписатьДокумент.Видимость = 
		ДанныеКомпонента.ЭтоНовыйДокумент Или Не ДанныеКомпонента.ЭтоВнутреннийВидДокумента
		И ДанныеКомпонента.СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание;
	Форма.Элементы.КнопкаЗаписатьДокументПодменюЕще.Видимость = Форма.Элементы.КнопкаЗаписатьДокумент.Видимость;
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - См. НовыеДанныеКомпонентаПанельКомандИсходящегоДокумента
Процедура НастроитьПанельКомандДляВнутреннегоДокументаКарточкиИсходящегоДокумента(Форма, ДанныеКомпонента)
		
	Если Не ДанныеКомпонента.ЭтоВнутреннийВидДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.КнопкаСоздатьПроизвольныйДокумент.Видимость = Ложь;
	Форма.Элементы.КнопкаОткрытьКонтейнерДокумента.Видимость = Ложь;
	Форма.Элементы.КнопкаОткрытьЖурналСобытийЭДО.Видимость = Ложь;
	
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса
//  ДанныеКомпонента - Структура:
//  * ЭтоПрикладнойВидДокумента - Булево
Процедура НастроитьПанельКомандДляПрикладногоДокументаКарточкиДокумента(Форма, ДанныеКомпонента)
		
	Если Не ДанныеКомпонента.ЭтоПрикладнойВидДокумента Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.КнопкаОткрытьКонтейнерДокумента.Видимость = Ложь;
	Форма.Элементы.КнопкаОткрытьЖурналСобытийЭДО.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти // ПанелиКоманд

#Область ПанелиСопроводительнойЗаписки

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра входящего/исходящего электронного документа легкого интерфейса:
//  * СопроводительнаяЗаписка - ФорматированныйДокумент
//  СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
Процедура НастроитьНедоступнуюПанельСопроводительнойЗапискиКарточкиДокумента(Форма, СопроводительныеЗаписки)

	ТекстыЗаписки = Новый Массив; // Массив Из Строка
	ШаблонЗаголовка = НСтр("ru='<span spellcheck=""false"" style=""font:ОбычныйШрифтТекстаБЭД""><a href =""%1"">%2</a></span>
		|<span style=""color:ЦветТекстаНеважнаяНадписьБЭД; font:ОбычныйШрифтТекстаБЭД""> (%3)</span>'");
	ШаблонСтроки = НСтр("ru='<span spellcheck=""false"" style=""font:ОбычныйШрифтТекстаБЭД"">%1</span>'");
	ФорматДаты = "ДФ='dd.MM.yyyy HH:mm'";
		
	Для Каждого ДанныеЗаписки Из СопроводительныеЗаписки Цикл
		
		ТекстыЗаписки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(ШаблонЗаголовка, 
			ПолучитьНавигационнуюСсылку(ДанныеЗаписки.Автор), Строка(ДанныеЗаписки.Автор), 
			Формат(ДанныеЗаписки.Дата, ФорматДаты)));
		ТекстыЗаписки.Добавить(Символы.ПС);
		
		ТекстыЗаписки.Добавить(СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки, 
			ДанныеЗаписки.Текст));
		
		ТекстыЗаписки.Добавить(Символы.ПС);
		ТекстыЗаписки.Добавить(Символы.ПС);
		
	КонецЦикла;

	Форма.СопроводительнаяЗаписка.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТекстыЗаписки));
	
	Форма.Элементы.ГруппаСтраницыПанельСопроводительнойЗаписки.ТекущаяСтраница = 
		Форма.Элементы.СтраницаЗагруженнаяСопроводительнаяЗаписка;
		
КонецПроцедуры

// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма просмотра исходящего электронного документа легкого интерфейса:
//  * СопроводительнаяЗапискаТекст - Строка
//  СопроводительныеЗаписки - См. НовыйНаборСопроводительныхЗаписокДокумента
Процедура НастроитьДоступнуюПанельСопроводительнойЗапискиКарточкиИсходящегоДокумента(Форма, СопроводительныеЗаписки)

	ТекстыЗаписки = Новый Массив; // Массив Из Строка
	
	Для Каждого ДанныеЗаписки Из СопроводительныеЗаписки Цикл
		ТекстыЗаписки.Добавить(ДанныеЗаписки.Текст);
		ТекстыЗаписки.Добавить(Символы.ПС);
	КонецЦикла;
	
	Форма.СопроводительнаяЗапискаТекст = СтрСоединить(ТекстыЗаписки, Символы.ПС);

КонецПроцедуры

#КонецОбласти // ПанелиСопроводительнойЗаписки

#КонецЕсли // ВнешнееСоединение

// Возвращаемое значение:
//  См. ЛегкийИнтерфейсДокументовЭДОСлужебный.ТипыДанныхВизуализации
Функция ТипыДанныхВизуализации()
	Возврат ЛегкийИнтерфейсДокументовЭДОСлужебный.ТипыДанныхВизуализации();
КонецФункции

#КонецОбласти // ПредставлениеДанных

#Область ОткрытиеДокумента

// Возвращаемое значение:
//  Структура:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - используется при открытии уже созданного документа
//  * ТолькоПросмотр - Булево - используется при открытии уже созданного документа
//  * Уникальность - Неопределено,Произвольный - используется для исключения дублирования открытия форм нового документа
//  * ПросмотрФайла - Неопределено
//                  - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  * ПросмотрПодготовленныхДанных - Неопределено
//                                 - Структура:
//                                   ** ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                                   ** НастройкиФормирования - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//                                   ** АдресДанных - Строка
Функция НовыеПараметрыОткрытияФормыПросмотраИсходящегоДокумента()

	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ключ", 
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", Ложь);
	ПараметрыОткрытияФормы.Вставить("Уникальность", Неопределено);
	ПараметрыОткрытияФормы.Вставить("ПросмотрФайла", Неопределено);
	ПараметрыОткрытияФормы.Вставить("ПросмотрПодготовленныхДанных", Неопределено);
	Возврат ПараметрыОткрытияФормы;

КонецФункции

// Параметры:
//  ПараметрыОткрытияФормы - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  ТабличныйДокумент - ТабличныйДокумент
//  НаименованиеФайла - Неопределено,Строка
//  ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьПараметрыНаОснованииТабличногоДокумента(ПараметрыОткрытияФормы, ТабличныйДокумент,
	НаименованиеФайла = Неопределено, ОбъектУчета = Неопределено)
	
	Поток = Новый ПотокВПамяти;
	ТабличныйДокумент.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	ШаблонИменияФайла = "%1.pdf";
	Если ЗначениеЗаполнено(НаименованиеФайла) Тогда
		ИмяФайла = НаименованиеФайла;
	ИначеЕсли ЗначениеЗаполнено(ОбъектУчета) Тогда
		ИмяФайла = СтрЗаменить(Строка(ОбъектУчета), " ", "_");
	Иначе
		ИмяФайла = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ОбработанноеИмяФайла = СтрШаблон(ШаблонИменияФайла, ИмяФайла);
	ОбработанноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ОбработанноеИмяФайла, Истина);
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ОбработанноеИмяФайла;
	
	ПараметрыОткрытияФормы.АдресОписанияФайла = 
		ПоместитьВоВременноеХранилище(ОписаниеФайла, Новый УникальныйИдентификатор);
	ПараметрыОткрытияФормы.ОбъектУчета = ОбъектУчета;
	
КонецПроцедуры

// Параметры:
//  ПараметрыОткрытияФормы - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  ДвоичныеДанные - ДвоичныеДанные
//  ИмяФайлаБезРасширения - Строка
//  РасширениеФайла - Строка
//  ОбъектУчета - Неопределено,ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
Процедура ЗаполнитьПараметрыНаОснованииДвоичныхДанных(ПараметрыОткрытияФормы, ДвоичныеДанные, ИмяФайлаБезРасширения,
	РасширениеФайла, ОбъектУчета = Неопределено)
	
	ОбработанноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяФайлаБезРасширения, РасширениеФайла);
	ОбработанноеИмяФайла = РаботаСФайламиБЭДКлиентСервер.ДопустимоеИмяФайла(ОбработанноеИмяФайла, Истина);
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ОбработанноеИмяФайла;
	
	ПараметрыОткрытияФормы.АдресОписанияФайла = 
		ПоместитьВоВременноеХранилище(ОписаниеФайла, Новый УникальныйИдентификатор);
	ПараметрыОткрытияФормы.ОбъектУчета = ОбъектУчета;
	
	ПараметрыОткрытияФормы.РеквизитыДокументаИзСодержанияФайла = 
		РеквизитыДокументаПоДаннымИзСодержанияФайла(ОписаниеФайла);
	
КонецПроцедуры

// Параметры:
//  ПараметрыОткрытияФормы - См. НовыеПараметрыПросмотраДокументаПоФайлу
//  АдресОписанияФайла - Строка - адрес данных файла во временном хранилище См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  ВидДокумента - Неопределено
//               - СправочникСсылка.ВидыДокументовЭДО - уточнение вида документа, когда по объекту учета доступно несколько вариантов.
Процедура ЗаполнитьПараметрыНаОснованииОписанияФайла(ПараметрыОткрытияФормы, АдресОписанияФайла, ОбъектУчета,
	ВидДокумента = Неопределено)
	
	ПараметрыОткрытияФормы.АдресОписанияФайла = АдресОписанияФайла;
	
	ПараметрыОткрытияФормы.ОбъектУчета = ОбъектУчета;
	
	ПараметрыОткрытияФормы.ВидДокумента = ВидДокумента;
	
	ОписаниеФайла = ПолучитьИзВременногоХранилища(АдресОписанияФайла); // См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
	ПараметрыОткрытияФормы.РеквизитыДокументаИзСодержанияФайла = 
		РеквизитыДокументаПоДаннымИзСодержанияФайла(ОписаниеФайла);
	
КонецПроцедуры

// Параметры:
//  ОписаниеФайла - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. НовыеРеквизитыДокументаИзСодержанияФайла
Функция РеквизитыДокументаПоДаннымИзСодержанияФайла(ОписаниеФайла)

	Содержание = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(Содержание) Тогда
		Возврат Неопределено;
	КонецЕсли;

	РеквизитыДокументаИзСодержанияФайла = НовыеРеквизитыДокументаИзСодержанияФайла();
	РеквизитыДокументаИзСодержанияФайла.НомерДокумента = Содержание.НомерДокумента;
	РеквизитыДокументаИзСодержанияФайла.ДатаДокумента = Содержание.ДатаДокумента;
	РеквизитыДокументаИзСодержанияФайла.СуммаДокумента = Содержание.СуммаДокумента;
	РеквизитыДокументаИзСодержанияФайла.ВалютаДокумента = Содержание.ВалютаДокумента;
	РеквизитыДокументаИзСодержанияФайла.СтавкаНДСДокумента = Содержание.СтавкаНДСДокумента;
	РеквизитыДокументаИзСодержанияФайла.СуммаНДСДокумента = Содержание.СуммаНДСДокумента;
	РеквизитыДокументаИзСодержанияФайла.ТипДокумента = Содержание.ТипДокумента;
	
	Возврат РеквизитыДокументаИзСодержанияФайла;

КонецФункции

// Возвращаемое значение:
//  Структура:
// * НомерДокумента - Строка
// * ДатаДокумента - Дата
// * СуммаДокумента - Число
// * ВалютаДокумента - Строка
// * СуммаНДСДокумента - Число
// * СтавкаНДСДокумента - Строка
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
Функция НовыеРеквизитыДокументаИзСодержанияФайла()

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("НомерДокумента", "");
	Реквизиты.Вставить("ДатаДокумента", Дата(1, 1, 1));
	Реквизиты.Вставить("СуммаДокумента", 0);
	Реквизиты.Вставить("ВалютаДокумента", "");
	Реквизиты.Вставить("СуммаНДСДокумента", 0);
	Реквизиты.Вставить("СтавкаНДСДокумента", "");
	Реквизиты.Вставить("ТипДокумента", Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	Возврат Реквизиты;

КонецФункции

#КонецОбласти // ОткрытиеДокумента

#Область ПараметрыПросмотра

// Параметры:
//  ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭтоВходящийЭДО - Булево
//  * ЭтоОблачныйЭДО - Булево
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ИдентификаторДокумента - Строка
//  * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//  * ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//  * Организация - ОпределяемыйТип.Организация
//  * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//  * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//  * НомерДокумента - Строка
//  * ДатаДокумента - Дата
//  * НаОзнакомлении - Булево
//  * СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
//  * ЭтапПодписанияОтсутствует - Булево
//
Функция РеквизитыАктуальныхДокументовДляПросмотраСтатусов(ОбъектыУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ПОМЕСТИТЬ ОбъектыУчетаДокументовЭДО
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета В (&ОбъектыУчета)
		|	И ОбъектыУчетаДокументовЭДО.Актуальный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ИСТИНА КАК ЭтоВходящийЭДО,
		|	ЭлектронныйДокументВходящийЭДО.ЭтоОблачныйЭДО КАК ЭтоОблачныйЭДО,
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ВидДокумента КАК ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.НомерДокумента КАК НомерДокумента,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК ДатаДокумента,
		|	ЭлектронныйДокументВходящийЭДО.НаОзнакомлении КАК НаОзнакомлении
		|ИЗ
		|	ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ЭлектронныйДокументВходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета,
		|	ЛОЖЬ,
		|	ЭлектронныйДокументИсходящийЭДО.ЭтоОблачныйЭДО,
		|	ЭлектронныйДокументИсходящийЭДО.Ссылка,
		|	ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ВидДокумента,
		|	ВидыДокументовЭДО.ТипДокумента КАК ТипДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.Организация,
		|	ЭлектронныйДокументИсходящийЭДО.Контрагент,
		|	ЭлектронныйДокументИсходящийЭДО.ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящийЭДО.НомерДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.ДатаДокумента,
		|	ЭлектронныйДокументИсходящийЭДО.НаОзнакомлении
		|ИЗ
		|	ОбъектыУчетаДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|		ПО ЭлектронныйДокументИсходящийЭДО.ВидДокумента = ВидыДокументовЭДО.Ссылка";
	
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбъектыУчета);
	
	РеквизитыАктуальныхДокументов = Запрос.Выполнить().Выгрузить();
	РеквизитыАктуальныхДокументов.Колонки.Добавить("СостояниеЭДО",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияДокументовЭДО"));
	РеквизитыАктуальныхДокументов.Колонки.Добавить("ЭтапПодписанияОтсутствует", Новый ОписаниеТипов("Булево"));
	
	Возврат РеквизитыАктуальныхДокументов;
	
КонецФункции

// Параметры:
//  ОписанияДокументовОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  РеквизитыАктуальныхДокументов - см. РеквизитыАктуальныхДокументовДляПросмотраСтатусов
// 
// Возвращаемое значение:
//  Строка - идентификатор режима просмотра.
//
Функция РежимПросмотраЭлектронногоДокументаПоОбъектуУчета(ОписанияДокументовОбъектаУчета, РеквизитыАктуальныхДокументов)
	
	КоличествоОписанийДокументов = ОписанияДокументовОбъектаУчета.Количество();
	КоличествоАктуальныхДокументов = РеквизитыАктуальныхДокументов.Количество();
	
	Если КоличествоОписанийДокументов = 0
		И КоличествоАктуальныхДокументов = 0 Тогда
		
		Возврат "";
		
	ИначеЕсли КоличествоОписанийДокументов > 1
		ИЛИ КоличествоАктуальныхДокументов > 1 Тогда
		
		Возврат РежимМножественногоПросмотра();
		
	ИначеЕсли КоличествоОписанийДокументов = 0
		И КоличествоАктуальныхДокументов = 1 Тогда
		
		Возврат РежимПросмотраДокумента();
		
	ИначеЕсли КоличествоОписанийДокументов = 1
		И КоличествоАктуальныхДокументов = 0 Тогда
		
		Возврат РежимПредварительногоПросмотра();
		
	КонецЕсли;
	
	ОписаниеДокументаПоОбъектуУчета = ОписанияДокументовОбъектаУчета[0];
	РеквизитыАктуальногоДокумента = РеквизитыАктуальныхДокументов[0];
	
	УказанДоговор = ЗначениеЗаполнено(ОписаниеДокументаПоОбъектуУчета.Договор)
		И ЗначениеЗаполнено(РеквизитыАктуальногоДокумента.ДоговорКонтрагента);
	
	Если ОписаниеДокументаПоОбъектуУчета.Организация = РеквизитыАктуальногоДокумента.Организация
		И ОписаниеДокументаПоОбъектуУчета.Контрагент = РеквизитыАктуальногоДокумента.Контрагент
		И (Не УказанДоговор 
			Или ОписаниеДокументаПоОбъектуУчета.Договор = РеквизитыАктуальногоДокумента.ДоговорКонтрагента)
		И ОписаниеДокументаПоОбъектуУчета.ТипДокумента = РеквизитыАктуальногоДокумента.ТипДокумента Тогда
		
		Возврат РежимПросмотраДокумента();
		
	Иначе
		
		Возврат РежимМножественногоПросмотра();
		
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция РежимМножественногоПросмотра()
	Возврат "РежимМножественногоПросмотра";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция РежимПредварительногоПросмотра()
	Возврат "РежимПредварительногоПросмотра";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция РежимПросмотраДокумента()
	Возврат "РежимПросмотраДокумента";
КонецФункции

#КонецОбласти // ПараметрыПросмотра

#КонецОбласти // СлужебныеПроцедурыИФункции
