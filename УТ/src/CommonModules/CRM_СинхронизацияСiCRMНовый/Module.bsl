#Область ПрограммныйИнтерфейс

// Создает или изменяет служебного пользователя iCRM.
//
// Возвращаемое значение:
//	Булево - признак успешного выполнения операции.
//
Функция СоздатьИзменитьСлужебногоПользователяiCRM() Экспорт
	
	Логин = "iCRMExchange";
	Пароль = "I23cR34_m45";
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = сфпОбщегоНазначения.НайтиПользователяПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "МобильноеПриложение.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = сфпОбщегоНазначения.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Служебный пользователь для обмена с мобильным приложением';
				|en='Service user for exchange with mobile app'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.CRM_СлужебныеПраваМобильноеПриложение.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		Иначе
			
			ИмяСобытия = "МобильноеПриложение.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьРолиСлужебногоПользователя(ПользовательИзСправочника);
	
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,
			 Метаданные.Справочники.Пользователи,
			 ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			 ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Формирует текст письма приглашения.
//
// Параметры:
//  ИмяПользователя	 - Строка - Имя пользователя.
//  ТекстПриглашения - Строка - Текст приглашения.
// 
// Возвращаемое значение:
//  Строка - Текст письма приглашения.
// 
Функция ПолучитьТекстПисьмаПриглашения(ИмяПользователя, ТекстПриглашения) Экспорт 
	
	Макет = Обработки.CRM_НастройкаСинхронизацииПользователейiCRM.ПолучитьМакет("ШаблонПисьмаПриглашения");
	
	Текст = Макет.ПолучитьТекст();
	
	Текст = СтрЗаменить(Текст, "%", "%%");
	
	Текст = СтрЗаменить(Текст, "{ТекстПриглашения}", "%1");
	
	Возврат СтрШаблон(Текст, ТекстПриглашения);
	
КонецФункции // ПолучитьТекстПисьмаПриглашения(

// Устанавливает режим автоматической синхронизации.
//
// Параметры:
//  Включена - Булево - Включена.
//
Процедура УстановитьРежимАвтоматическойСинхронизации(Включена) Экспорт 

	РегламентноеЗадание = ПолучитьРегламентноеЗаданиеСинхонизации();
	
	РегламентноеЗадание.Использование = Включена;
	
	РегламентноеЗадание.Записать();

КонецПроцедуры // УстановитьРежимАвтоматическойСинхронизации()

// Получает значение из строки JSON.
//
// Параметры:
//  СтрокаJSON              - Строка - строка в формате JSON.
//  ПрочитатьВСоответствие		 - Булево - Прочитать в соответствие.
//  ПоляДаты					 - Массив - Имена свойств со значением типа Дата.
//  ИмяФункцииВосстановления	 - Строка - Имя функции восстановления.
//  МодульФункцииВосстановления	 - Строка - Модуль функции восстановления.
// 
// Возвращаемое значение:
//  ЛюбойТип - Значение.
//
Функция ЗначениеИзСтрокиJSON(СтрокаJSON,
							ПрочитатьВСоответствие = Ложь,
							ПоляДаты = Неопределено,
							ИмяФункцииВосстановления = Неопределено,
							МодульФункцииВосстановления = Неопределено) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(ЧтениеJSON,
							ПрочитатьВСоответствие,
							ПоляДаты,
							,
							ИмяФункцииВосстановления,
							МодульФункцииВосстановления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;

КонецФункции // ЗначениеИзСтрокиXML()

// Помещает значение в строку JSON.
//
// Параметры:
//  Значение - ЛюбойТип - Значение.
// 
// Возвращаемое значение:
//  Строка - Строка JSON.
//
Функция ЗначениеВСтрокуJSON(Значение) Экспорт 

	ЗаписьJSON = Новый ЗаписьJSON;
	
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции // ЗначениеВСтрокуJSON()

// Добавляет запись в журнал.
//
// Параметры:
//  ОписаниеОшибки - ОписаниеОшибки - Описание ошибки.
// 
Процедура ДобавитьЗаписьВЖурнал(ОписаниеОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации("Синхронизация с iCRM",
							УровеньЖурналаРегистрации.Ошибка,
							,
							,
							ОписаниеОшибки);
	
КонецПроцедуры

// Если есть хотя бы один элемент к выгрузки, тогда возвращается Истина.
//
// Параметры:
//	Узел - ПланОбменаСсылка - узел информационной базы.
//
// Возвращаемое значение:
//	Структура - структура, содержащая признак изменения и сами изменения.
//
Функция ЕстьДанныеДляВыгрузки(Узел) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1);  
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Вставить("ЕстьИзменения", Истина);
	Иначе	
		СтруктураВозврата.Вставить("ЕстьИзменения", Ложь);
	КонецЕсли;
	Выборка.Сбросить();
	СтруктураВозврата.Вставить("Изменения", Выборка);
	Возврат СтруктураВозврата;
	
КонецФункции

// Создает данные для выгрузки.
//
// Параметры:
//	Узел - ПланОбменаСсылка - узел информационной базы.
//
Процедура СоздатьДанныеДляВыгрузки(Узел) Экспорт
	// Проверяем есть ли новые данные к выгрузке
	СтруктураИзменений = ЕстьДанныеДляВыгрузки(Узел);
	Если СтруктураИзменений.ЕстьИзменения Тогда
		КоличествоНайденныхДляЗаписиОбъектов = 0;
		МассивОбъектовДляВыгрузки = Новый Массив;
		ВыборкаИзменений = СтруктураИзменений.Изменения;
		Пока ВыборкаИзменений.Следующий() Цикл
			Данные = ВыборкаИзменений.Получить(); 
			МассивОбъектовДляВыгрузки.Добавить(Данные);
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			Если КоличествоНайденныхДляЗаписиОбъектов = 5000 Тогда
				ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки);
				
				КоличествоНайденныхДляЗаписиОбъектов = 0;
				МассивОбъектовДляВыгрузки = Новый Массив;
			КонецЕсли;	
		КонецЦикла;
		Если МассивОбъектовДляВыгрузки.Количество() > 0 Тогда
			ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

#Область Регистрация

// Регистрирует новый узел обмена.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка - узел информационной базы.
//
Процедура ЗарегистрироватьНовыйУзелОбмена(УзелОбмена) Экспорт
	ОбработкаОбъект = Обработки.РегистрацияИзмененийДляОбменаДанными.Создать();
	ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрации(УзелОбмена);
	ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
	
	Если Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить() Тогда
		СтруктураРегистрации = ПолучитьКурсыВалютКРегистрации();
		ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
			 СтруктураРегистрации,
			 "РегистрСведений.КурсыВалют");
		ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
		
		МассивСсылокПартнеры = Новый Массив;
		МассивСсылокНоменклатура = Новый Массив;
		МассивСсылокИнтересы = Новый Массив;
		Если Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить() > 0 Тогда
			СтруктураРегистрации = ПолучитьСписокВзаимодействийКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы); 
			МассивСсылокПартнеры = СтруктураРегистрации.МассивСсылокПартнеры;
			МассивСсылокИнтересы = СтруктураРегистрации.МассивСсылокИнтересы;
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 СтруктураРегистрации.Массивссылок,
				 "Документ.CRM_Взаимодействие");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрацииЗадач = ПолучитьCRM_ЗадачиПользователейКРегистрации(СтруктураРегистрации.Массивссылок);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
				 СтруктураРегистрацииЗадач,
				 "РегистрСведений.CRM_ЗадачиПользователей");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрацииКалендаря = ПолучитьCRM_СобытияКалендаряКРегистрации(СтруктураРегистрации.Массивссылок);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
				 СтруктураРегистрацииКалендаря,
				 "РегистрСведений.CRM_СобытияКалендаря");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);

			СтруктураРегистрации = ПолучитьСписокСчетовКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы); 
			МассивСсылокПартнеры = СтруктураРегистрации.МассивСсылокПартнеры;
			МассивСсылокИнтересы = СтруктураРегистрации.МассивСсылокИнтересы;
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
					 СтруктураРегистрации.Массивссылок,
					 "Документ.CRM_СчетНаОплатуПокупателю");
			Иначе
				ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
					 СтруктураРегистрации.Массивссылок,
					 "Документ.ЗаказКлиента");
			КонецЕсли;	
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьСписокКПКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы); 
			МассивСсылокПартнеры = СтруктураРегистрации.МассивСсылокПартнеры;
			МассивСсылокИнтересы = СтруктураРегистрации.МассивСсылокИнтересы;
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 СтруктураРегистрации.Массивссылок,
				 "Документ.КоммерческоеПредложениеКлиенту");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьСписокЗадачКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы); 
			МассивСсылокПартнеры = СтруктураРегистрации.МассивСсылокПартнеры;
			МассивСсылокИнтересы = СтруктураРегистрации.МассивСсылокИнтересы;
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 СтруктураРегистрации.Массивссылок,
				 "Задача.ЗадачаИсполнителя");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьCRM_ЗадачиПользователейКРегистрации(СтруктураРегистрации.Массивссылок);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
				 СтруктураРегистрации,
				 "РегистрСведений.CRM_ЗадачиПользователей");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьСписокИнтересовКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы); 
			МассивСсылокПартнеры = СтруктураРегистрации.МассивСсылокПартнеры;
			МассивСсылокИнтересы = СтруктураРегистрации.МассивСсылокИнтересы;
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылокИнтересы,
				 "Документ.CRM_Интерес");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьCRM_ЗапланированныеАктивностиКРегистрации(МассивСсылокИнтересы);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
				 СтруктураРегистрации,
				 "РегистрСведений.CRM_ЗапланированныеАктивности");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			СтруктураРегистрации = ПолучитьCRM_СостоянияИнтересовКРегистрации(МассивСсылокИнтересы);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
				 СтруктураРегистрации,
				 "РегистрСведений.CRM_СостоянияИнтересов");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
		КонецЕсли;	
		Если Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить() > 0
			 ИЛИ Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить() > 0 Тогда
			СтруктураСсылок = ПолучитьМассивПотенциальныхКлиентовКРегистрации(МассивСсылокПартнеры);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 СтруктураСсылок.МассивСсылок,
				 "Справочник.CRM_ПотенциальныеКлиенты");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			МассивСсылокПартнеры = СтруктураСсылок.МассивСсылокПартнеры;
			
			МассивСсылокПартнеры = ПолучитьМассивПартнеровКРегистрации(МассивСсылокПартнеры);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылокПартнеры,
				 "Справочник.Партнеры");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			МассивСсылок = ПолучитьСписокАдресовКРегистрации(МассивСсылокПартнеры);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылок,
				 "Справочник.CRM_АдресаОфисовКомпании");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			МассивСсылок = ПолучитьСписокДоговоровКРегистрации(МассивСсылокПартнеры);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылок,
				 "Справочник.ДоговорыКонтрагентов");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			МассивСсылок = ПолучитьСписокКЛКРегистрации(МассивСсылокПартнеры);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылок,
				 "Справочник.КонтактныеЛицаПартнеров");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				МассивСсылок = ПолучитьСписокРСчетовКРегистрации(МассивСсылокПартнеры);
				ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
					 МассивСсылок,
					 "Справочник.БанковскиеСчета");
				ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			КонецЕсли;
		КонецЕсли;
		Если Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить() > 0
			 ИЛИ Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить() > 0 Тогда
			МассивСсылокНоменклатура = ПолучитьСписокНоменклатурыКРегистрации(МассивСсылокНоменклатура);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылокНоменклатура,
				 "Справочник.Номенклатура");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			
			МассивСсылок = ПолучитьСписокХарактеристикКРегистрации(МассивСсылокНоменклатура);
			ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена,
				 МассивСсылок,
				 "Справочник.ХарактеристикиНоменклатуры");
			ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				СтруктураРегистрации = ПолучитьЦеныНоменклатурыКРегистрации(МассивСсылокНоменклатура);
				ПараметрыРегистрации = ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена,
					 СтруктураРегистрации,
					 "РегистрСведений.ЦеныНоменклатуры");
				ОбработкаОбъект.ВыполнитьИзменениеРегистрации(ПараметрыРегистрации);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Возвращает список доступных пользователей для обмена.
//
// Параметры:
//	ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь.
//
// Возвращаемое значение:
//	Массив - список доступных пользователей для обмена.
//
Функция ПолучитьСписокДоступныхПользователейДляОбмена(ТекущийПользователь) Экспорт
	Запрос = Новый Запрос;
	ЭтоРазделенныйСеанс = РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() И НЕ ЭтоРазделенныйСеанс Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_РасширенныйДоступПоПодразделениям.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ тмпРасширенныйДоступ
	               |ИЗ
	               |	РегистрСведений.CRM_РасширенныйДоступПоПодразделениям КАК CRM_РасширенныйДоступПоПодразделениям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.CRM_ИспользоватьДолжностныеПозиции КАК CRM_ИспользоватьДолжностныеПозиции
	               |		ПО (CRM_ИспользоватьДолжностныеПозиции.Значение = ИСТИНА)
	               |ГДЕ
	               |	CRM_РасширенныйДоступПоПодразделениям.ДолжностнаяПозиция В ИЕРАРХИИ(&ДолжностнаяПозиция)
	               |	И &ДолжностнаяПозиция <> ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
	               |	И &КОРПВерсия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение
	               |ПОМЕСТИТЬ тмпТекущееПодразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.ТекущийРуководитель = &ПользовательФЛ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ тмпТекущееПодразделениеПользователя
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	               |		ПО (Пользователи.Подразделение = СтруктураПредприятия.Ссылка)
	               |			И (Пользователи.Ссылка = &Пользователь)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ тмпДанныеСправочника
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				тмпТекущееПодразделениеПользователя.Ссылка КАК Ссылка
	               |			ИЗ
	               |				тмпТекущееПодразделениеПользователя КАК тмпТекущееПодразделениеПользователя)
	               |	И НЕ СтруктураПредприятия.Ссылка В
	               |				(ВЫБРАТЬ
	               |					тмпТекущееПодразделениеПользователя.Ссылка КАК Ссылка
	               |				ИЗ
	               |					тмпТекущееПодразделениеПользователя КАК тмпТекущееПодразделениеПользователя)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ тмпДоступныеПодразделения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		тмпРасширенныйДоступ.Подразделение КАК Подразделение
	               |	ИЗ
	               |		тмпРасширенныйДоступ КАК тмпРасширенныйДоступ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		тмпДанныеСправочника.Ссылка
	               |	ИЗ
	               |		тмпДанныеСправочника КАК тмпДанныеСправочника) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Пользователь
	               |ПОМЕСТИТЬ тмпДляСвертывания
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тмпДоступныеПодразделения КАК тмпДоступныеПодразделения
	               |		ПО Пользователи.Подразделение = тмпДоступныеПодразделения.Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ тмпТекущееПодразделение КАК тмпТекущееПодразделение
	               |		ПО Пользователи.Подразделение = тмпТекущееПодразделение.Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.Пустаяссылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	&Пользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	тмпДляСвертывания.Пользователь КАК Пользователь
	               |ИЗ
	               |	тмпДляСвертывания КАК тмпДляСвертывания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	тмпДляСвертывания.Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Если Метаданные.Имя = "CRM" Тогда
		Запрос.УстановитьПараметр("ПользовательФЛ", ТекущийПользователь);
	Иначе	
		Запрос.УстановитьПараметр("ПользовательФЛ", ТекущийПользователь.ФизическоеЛицо);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДолжностнаяПозиция", ТекущийПользователь.CRM_ДолжностнаяПозиция);
	Запрос.УстановитьПараметр("КОРПВерсия", CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП());
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей.Свернуть("Пользователь");
	МассивПользователей = ТаблицаПользователей.ВыгрузитьКолонку("Пользователь");
	МассивПользователей.Добавить(ТекущийПользователь);
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(МассивПользователей);
	
	Возврат МассивПользователей;
КонецФункции

// BSLLS:QueryToMissingMetadata-off
// Функция используется в спарках

// Возвращает список доступных групп доступа партнеров для обмена.
//
// Параметры:
//	ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь.
//
// Возвращаемое значение:
//	Массив - список доступных групп доступа партнеров для обмена.
//
Функция ПолучитьСписокДоступныхГруппДоступаПартнеров(ТекущийПользователь) Экспорт
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ЭтоРазделенныйСеанс = РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	
	Если Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() И НЕ ЭтоРазделенныйСеанс Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ТекущийПользователь) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыДоступаПартнеров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров";
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ГруппыДоступаПользователя
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Пользователи.Пользователь = &Ссылка
	               |	И ГруппыДоступа.ВидыДоступа.ВидДоступа = &ТипЗначенийДоступа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ЗначенияГруппДоступаПоУмолчанию.ВсеРазрешены) КАК ВсеРазрешены,
	               |	МАКСИМУМ(ЗначенияГруппДоступаПоУмолчанию.ВсеРазрешеныБезИсключений) КАК ВсеРазрешеныБезИсключений
	               |ИЗ
	               |	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияГруппДоступаПоУмолчанию
	               |		ПО ГруппыДоступаПользователя.Ссылка = ЗначенияГруппДоступаПоУмолчанию.ГруппаДоступа
	               |			И (ЗначенияГруппДоступаПоУмолчанию.ТипЗначенийДоступа = &ТипЗначенийДоступа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПартнеров.Ссылка КАК ГруппаДоступаПартнера,
	               |	МАКСИМУМ(ЗначенияГруппДоступа.ЗначениеРазрешено) КАК ЗначениеРазрешено,
	               |	КОЛИЧЕСТВО(ГруппыДоступаПартнеров.Ссылка) КАК КоличествоЗаписейСГруппойДоступаПартнера
	               |ИЗ
	               |	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	               |		ПО ЗначенияГруппДоступа.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
	               |		ПО ЗначенияГруппДоступа.ЗначениеДоступа = ГруппыДоступаПартнеров.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ГруппыДоступаПартнеров.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияГруппДоступаПоУмолчанию.ВсеРазрешены КАК ВсеРазрешены
	               |ИЗ
	               |	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияГруппДоступаПоУмолчанию
	               |		ПО ГруппыДоступаПользователя.Ссылка = ЗначенияГруппДоступаПоУмолчанию.ГруппаДоступа
	               |			И (ЗначенияГруппДоступаПоУмолчанию.ТипЗначенийДоступа = &ТипЗначенийДоступа)
	               |ГДЕ
	               |	ЗначенияГруппДоступаПоУмолчанию.ВсеРазрешены";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийПользователь);
	Запрос.УстановитьПараметр("ТипЗначенийДоступа", Справочники.Партнеры.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВыборкаДанныхКоличество = РезультатЗапроса[0].Выбрать();
	ВыборкаДанныхКоличество.Следующий();
	КоличествоГруппДоступа = ВыборкаДанныхКоличество.Количество;
	
	Если КоличествоГруппДоступа = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса[1].Выбрать();
	
	Если НЕ ВыборкаДанных.Следующий() Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	Если ВыборкаДанных.ВсеРазрешеныБезИсключений Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыДоступаПартнеров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров";
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		 
		Если ВыборкаДанных.ВсеРазрешены Тогда
			 
			КоличествоГруппВсеРазрешены = РезультатЗапроса[3].Выбрать().Количество();
			
			ГруппыИсключения = Новый Массив;
			ВыборкаДанныхЗначения = РезультатЗапроса[2].Выбрать();
			Пока ВыборкаДанныхЗначения.Следующий() Цикл
				Если НЕ ВыборкаДанныхЗначения.ЗначениеРазрешено
					И (ВыборкаДанныхЗначения.КоличествоЗаписейСГруппойДоступаПартнера = КоличествоГруппДоступа
					Или КоличествоГруппВсеРазрешены = 1) Тогда
					
					// Группа доступа партнера исключается только в случае, если она запрещена во всех Группах доступа,
					// в которые входит Пользователь
					ГруппыИсключения.Добавить(ВыборкаДанныхЗначения.ГруппаДоступаПартнера);
					
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыДоступаПартнеров.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступаПартнеров КАК ГруппыДоступаПартнеров
			|ГДЕ
			|	НЕ ГруппыДоступаПартнеров.Ссылка В (&ГруппыИсключения)";
			Запрос.УстановитьПараметр("ГруппыИсключения", ГруппыИсключения);
		
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		Иначе
			ГруппыИсключения = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("ГруппаДоступаПартнера");
		 	Возврат ГруппыИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

// BSLLS:QueryToMissingMetadata-on

// Возвращает вышестоящих пользователей.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - пользователь, для которого получают вышестоящих.
//
// Возвращаемое значение:
//	СписокЗначений - список доступных пользователей для обмена.
//
Функция ПолучитьВышестоящихПользователей(Пользователь) Экспорт
	Подразделение =  Пользователь.Подразделение;
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.Добавить(Пользователь);
	Если Подразделение.Пустая() Тогда
		Возврат СписокПользователей;
	КонецЕсли;
	
	ВыполнятьРекурсивно = Истина;
	Пока ВыполнятьРекурсивно Цикл
		Если НЕ Подразделение.ТекущийРуководитель.Пустая() Тогда
			СписокПользователей.Добавить(Подразделение.ТекущийРуководитель);
		КонецЕсли;
		Если Подразделение.Родитель.Пустая() Тогда
			Возврат СписокПользователей;
		Иначе
			Подразделение = Подразделение.Родитель;	
		КонецЕсли;
	КонецЦикла;	
КонецФункции	

// Обновляет список пользователей.
//
Процедура ОбновитьСпискиПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Ссылка КАК Ссылка,
				   |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Ссылка.Пользователь КАК ПользовательУзла,
	               |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Пользователь КАК Пользователь
	               |ИЗ
	               |	ПланОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ДоступныеПользователи КАК CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи
	               |ГДЕ
	               |	НЕ CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Ссылка.ЭтотУзел
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Ссылка,
				   |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Ссылка.Пользователь,
	               |	CRM_СинхронизацияСМобильнымПриложениемНовыйДоступныеПользователи.Пользователь
	               |ИТОГИ ПО
	               |	Ссылка";
	
	ВыборкаУзлы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУзлы.Следующий() Цикл
		
		УзелСсылка = ВыборкаУзлы.Ссылка;
		ПользовательУзла = ВыборкаУзлы.ПользовательУзла;
		МассивДоступныеПользователи =
			CRM_СинхронизацияСiCRMНовый.ПолучитьСписокДоступныхПользователейДляОбмена(ПользовательУзла);
		ОбновитьПользователей = Ложь;
		
		ВыборкаПользователи = ВыборкаУзлы.Выбрать();
		Пока ВыборкаПользователи.Следующий() Цикл
			ПользовательСсылка = ВыборкаПользователи.Пользователь;
			
			Индекс = МассивДоступныеПользователи.Найти(ПользовательСсылка);
			Если Индекс = Неопределено Тогда
				ОбновитьПользователей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбновитьПользователей Тогда
			УзелОбъект = УзелСсылка.ПолучитьОбъект();
			УзелОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновляет список узлов обмена.
//
Процедура ОбновитьУзлыПланаОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СинхронизацияСМобильнымПриложениемНовый.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый КАК CRM_СинхронизацияСМобильнымПриложениемНовый
	|ГДЕ
	|	НЕ CRM_СинхронизацияСМобильнымПриложениемНовый.ЭтотУзел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УзелОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УзелОбъект.Записать();
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи".
//
// Параметры:
//	Источник - Ссылка - Источник события.
//	Отказ	 - Булево - Признак отказа.
//
Процедура CRM_СинхронизацияiCRMСправочникиПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ПараметрыСеанса.ВыполняетсяОбновлениеИБ Тогда
		Если НЕ Отказ И Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
			МассивПараметров = Новый Массив;
			ИмяПроцедурыОбновления = "";
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи")
				Или ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
				
				ИмяПроцедурыОбновления = "CRM_СинхронизацияСiCRMНовый.ОбновитьСпискиПользователей";
				
			Иначе
				
				ИмяПроцедурыОбновления = "CRM_СинхронизацияСiCRMНовый.ОбновитьУзлыПланаОбмена";
				
			КонецЕсли;
			
			ФоновыеЗадания.Выполнить(ИмяПроцедурыОбновления, МассивПараметров,
				 Строка(Новый УникальныйИдентификатор),
				 "iCRM: обновление узлов Плана обмена");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Удаляет план обмена из списка
//
// Параметры:
//  СписокПлановОбмена - Массив из Строка - содержит имена планов обмена конфигурации
//
Процедура УдалитьИзСпискаПлановОбмена(СписокПлановОбмена) Экспорт
		
	ИндексiCRM = СписокПлановОбмена.Найти("CRM_СинхронизацияСМобильнымПриложениемНовый");
	Если ИндексiCRM <> Неопределено Тогда
		СписокПлановОбмена.Удалить(ИндексiCRM);
	КонецЕсли;

КонецПроцедуры

// Выполняет синхронизацию.
//
Процедура ВыполнитьСинхронизацию() Экспорт // Используется в новом обмене.
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.CRM_СинхронизацияС_iCRM);

	Если ОбщегоНазначения.РазделениеВключено() И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не АвтоматическаяСинхронизацияВключена() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Пользователь.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.ЭтотУзел Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.CRM_ДатыОбращенийiCRM.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УзелОбмена = Выборка.Ссылка;
		МенеджерЗаписи.Прочитать();
		ДатаПоследнегоОбращения = МенеджерЗаписи.ДатаПоследнегоОбращения;
		МинутБезСинхронизации = (ТекущаяДатаСеанса() - ДатаПоследнегоОбращения) / 60;
		ПериодОтключенияСинхронизацииiCRM = Константы.CRM_ПериодОтключенияСинхронизацииiCRM.Получить();
		Если ПериодОтключенияСинхронизацииiCRM > 0 И ЗначениеЗаполнено(ДатаПоследнегоОбращения) Тогда
			Если МинутБезСинхронизации < ПериодОтключенияСинхронизацииiCRM Тогда
				СоздатьДанныеДляВыгрузки(Выборка.Ссылка);
			КонецЕсли;
		Иначе	
			СоздатьДанныеДляВыгрузки(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Проверяет автоматическую синхронизацию.
// 
// Возвращаемое значение:
//  Булево - Истина, если автоматическая синхронизация включена.
//
Функция АвтоматическаяСинхронизацияВключена() Экспорт // Используется в новом обмене.

	Возврат Константы.CRM_ИспользуетсяОбменСiCRM.Получить();

КонецФункции // СинхорнизацияАктивна()

// Обработчик подписки на событие ПередЗаписью.
//
// Параметры:
//  Источник - ДокументОбъект - Источник события.
//  Отказ - Булево - Признак отказа.
//  РежимЗаписи - РежимЗаписиДокумента - Режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа.
//
Процедура СинхронизацияiCRMРегистрацияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗНЧ(Источник) = Тип("ДокументОбъект.CRM_Интерес")
		 И Источник.Ответственный <> Источник.Ссылка.Ответственный Тогда
		УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоРеквизиту("Пользователь",
			 Источник.Ответственный);
		Если НЕ УзелОбмена.Пустая() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_Взаимодействие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
			|ГДЕ
			|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
			|	И CRM_Взаимодействие.СтатусВзаимодействия В (&Статусы)
			|	И НЕ CRM_Взаимодействие.ПометкаУдаления";
			Статусы = Новый Массив;
			Статусы.Добавить(Справочники.CRM_СостоянияСобытий.ВРаботе);
			Статусы.Добавить(Справочники.CRM_СостоянияСобытий.Запланировано);
			Запрос.УстановитьПараметр("Статусы", Статусы);
			Запрос.УстановитьПараметр("ДокументОснование", Источник.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("CRM_СинхронизацияСМобильнымПриложениемНовый",
		 Источник, Отказ, РежимЗаписи,
		 РежимПроведения);
	
	Если Источник.ДополнительныеСвойства.Свойство("ИдентификаторУзла") Тогда
		УзелОбмена =
			ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(Источник.ДополнительныеСвойства.ИдентификаторУзла);
		Источник.ОбменДанными.Получатели.Удалить(УзелОбмена);
	КонецЕсли;
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью.
//
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей - Источник события.
//  Отказ - Булево - Признак отказа.
//  Замещение - Булево - Режим замещения.
//
Процедура CRM_СинхронизацияiCRMРегистрацияРегистрыПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
    
	УстановитьПривилегированныйРежим(Истина);
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
		Возврат;
	КонецЕсли;
	//Если Источник.ОбменДанными.Загрузка Тогда Возврат КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("CRM_СинхронизацияСМобильнымПриложениемНовый",
		 Источник, Отказ,
		 Замещение);
	Если Источник.ДополнительныеСвойства.Свойство("ИдентификаторУзла") Тогда
		УзелОбмена =
			ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(Источник.ДополнительныеСвойства.ИдентификаторУзла);
		Источник.ОбменДанными.Получатели.Удалить(УзелОбмена);
	КонецЕсли;
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью.
//
// Параметры:
//  Источник - КонстантаМенеджерЗначения - Источник события.
//  Отказ - Булево - Признак отказа.
//
Процедура CRM_СинхронизацияiCRMРегистрацияКонстантыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюКонстанты("CRM_СинхронизацияСМобильнымПриложениемНовый",
		 Источник,
		 Отказ);
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью.
//
// Параметры:
//  Источник - СправочникОбъект, ЗадачОбъект.ЗадачаИсполнителя - Источник события.
//  Отказ - Булево - Признак отказа.
//
Процедура CRM_СинхронизацияiCRMРегистрацияПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗНЧ(Источник) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		Если ТипЗнч(Источник.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			 Или НЕ ЗначениеЗаполнено(Источник.Исполнитель) Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав.Содержит(Источник.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("CRM_СинхронизацияСМобильнымПриложениемНовый",
		 Источник,
		 Отказ);
	Если Источник.ДополнительныеСвойства.Свойство("ИдентификаторУзла") Тогда
		УзелОбмена =
			ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(Источник.ДополнительныеСвойства.ИдентификаторУзла);
		Источник.ОбменДанными.Получатели.Удалить(УзелОбмена);
	КонецЕсли;
КонецПроцедуры

// Функция выполняет преобразование в JSON.
//
// Параметры:
//  Свойство				 - Произвольный	 - Свойство.
//  Значение				 - Произвольный	 - Значение, которое преобразуется.
//  ДополнительныеПараметры	 - Структура	 - Структура параметров.
//  Отказ					 - Булево		 - Флаг отказа.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.CRM_ТипыСобытийЛогаiCRM") Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСписокСчетовКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
		|	CRM_СчетНаОплатуПокупателю.ДокументОснование КАК ДокументОснование,
		|	CRM_СчетНаОплатуПокупателю.Партнер КАК Партнер
		|ИЗ
		|	Документ.CRM_СчетНаОплатуПокупателю КАК CRM_СчетНаОплатуПокупателю
		|ГДЕ
		|	CRM_СчетНаОплатуПокупателю.Дата >= &Дата
		|	И НЕ CRM_СчетНаОплатуПокупателю.ПометкаУдаления";
	Иначе
		// BSLLS:QueryToMissingMetadata-off
		// Используется в спарках
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ЗаказКлиента.ДокументОснование КАК ДокументОснование,
		|	ЗаказКлиента.Партнер КАК Партнер
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Дата >= &Дата
		|	И НЕ ЗаказКлиента.ПометкаУдаления";
		
		// BSLLS:QueryToMissingMetadata-on
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Выборка.Партнер) Тогда
				Если МассивСсылокПартнеры.Найти(Выборка.Партнер) = Неопределено Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Партнер);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
				 И ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
				Если МассивСсылокИнтересы.Найти(Выборка.ДокументОснование) = Неопределено Тогда
					МассивСсылокИнтересы.Добавить(Выборка.ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылок", МассивСсылок);
	СтруктураВозврата.Вставить("МассивСсылокПартнеры", МассивСсылокПартнеры);
	СтруктураВозврата.Вставить("МассивСсылокИнтересы", МассивСсылокИнтересы);
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьСписокКПКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка,
		|	КоммерческоеПредложениеКлиенту.ДокументОснование КАК ДокументОснование,
		|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Дата >= &Дата
		|	И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка,
		|	КоммерческоеПредложениеКлиенту.ДокументОснование КАК ДокументОснование,
		|	КоммерческоеПредложениеКлиенту.Клиент КАК Партнер
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Дата >= &Дата
		|	И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления";
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Выборка.Партнер) Тогда
				Если МассивСсылокПартнеры.Найти(Выборка.Партнер) = Неопределено Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Партнер);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
				 И ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
				Если МассивСсылокИнтересы.Найти(Выборка.ДокументОснование) = Неопределено Тогда
					МассивСсылокИнтересы.Добавить(Выборка.ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылок", МассивСсылок);
	СтруктураВозврата.Вставить("МассивСсылокПартнеры", МассивСсылокПартнеры);
	СтруктураВозврата.Вставить("МассивСсылокИнтересы", МассивСсылокИнтересы);
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьСписокЗадачКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.CRM_Партнер КАК Партнер,
	|	ЗадачаИсполнителя.Предмет КАК ДокументОснование
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Дата >= &Дата
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Выборка.Партнер) Тогда
				Если МассивСсылокПартнеры.Найти(Выборка.Партнер) = Неопределено Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Партнер);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
				 И ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
				Если МассивСсылокИнтересы.Найти(Выборка.ДокументОснование) = Неопределено Тогда
					МассивСсылокИнтересы.Добавить(Выборка.ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылок", МассивСсылок);
	СтруктураВозврата.Вставить("МассивСсылокПартнеры", МассивСсылокПартнеры);
	СтруктураВозврата.Вставить("МассивСсылокИнтересы", МассивСсылокИнтересы);
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьСписокИнтересовКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_Интерес.Ссылка КАК Ссылка,
	|	CRM_Интерес.Партнер КАК Партнер
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.Дата >= &Дата
	|	И НЕ CRM_Интерес.ПометкаУдаления";
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылокИнтересы.Добавить(Выборка.Ссылка);
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Выборка.Партнер) Тогда
				Если МассивСсылокПартнеры.Найти(Выборка.Партнер) = Неопределено Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Партнер);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылокПартнеры", МассивСсылокПартнеры);
	СтруктураВозврата.Вставить("МассивСсылокИнтересы", МассивСсылокИнтересы);
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьСписокНоменклатурыКРегистрации(МассивСсылок)
	Если Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Номенклатура КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			|		CRM_ИнтересТовары.Номенклатура КАК Номенклатура
			|	ИЗ
			|		Документ.CRM_Интерес.Товары КАК CRM_ИнтересТовары
			|	ГДЕ
			|		CRM_ИнтересТовары.Ссылка.Дата >= &Дата
			|		И НЕ CRM_ИнтересТовары.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		CRM_СчетНаОплатуПокупателюТовары.Номенклатура
			|	ИЗ
			|		Документ.CRM_СчетНаОплатуПокупателю.Товары КАК CRM_СчетНаОплатуПокупателюТовары
			|	ГДЕ
			|		CRM_СчетНаОплатуПокупателюТовары.Ссылка.Дата >= &Дата
			|		И НЕ CRM_СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КоммерческоеПредложениеКлиентуТовары.Номенклатура
			|	ИЗ
			|		Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
			|	ГДЕ
			|		КоммерческоеПредложениеКлиентуТовары.Ссылка.Дата >= &Дата
			|		И НЕ КоммерческоеПредложениеКлиентуТовары.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос";
		Иначе
			// BSLLS:QueryToMissingMetadata-off
			// Используется в спарках
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Номенклатура КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			|		CRM_ИнтересТовары.Номенклатура КАК Номенклатура
			|	ИЗ
			|		Документ.CRM_Интерес.Товары КАК CRM_ИнтересТовары
			|	ГДЕ
			|		CRM_ИнтересТовары.Ссылка.Дата >= &Дата
			|		И НЕ CRM_ИнтересТовары.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗаказКлиента.Номенклатура
			|	ИЗ
			|		Документ.ЗаказКлиента.Товары КАК ЗаказКлиента
			|	ГДЕ
			|		ЗаказКлиента.Ссылка.Дата >= &Дата
			|		И НЕ ЗаказКлиента.Ссылка.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КоммерческоеПредложениеКлиентуТовары.Номенклатура
			|	ИЗ
			|		Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
			|	ГДЕ
			|		КоммерческоеПредложениеКлиентуТовары.Ссылка.Дата >= &Дата
			|		И НЕ КоммерческоеПредложениеКлиентуТовары.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос"; 
			
			// BSLLS:QueryToMissingMetadata-on
		КонецЕсли;
		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить()));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) И ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатуры.Номенклатура КАК Ссылка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	ЦеныНоменклатуры.Период >= &Дата
		|	И НЕ ЦеныНоменклатуры.Номенклатура В (&МассивСсылок)";
		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить()));
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьСписокХарактеристикКРегистрации(МассивНоменклатуры)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&МассивПартнеров)";
	Запрос.УстановитьПараметр("МассивПартнеров", МассивНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьМассивПартнеровКРегистрации(МассивСсылок)
	Если Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.ДатаРегистрации >= &ДатаРегистрации";
		Запрос.УстановитьПараметр("ДатаРегистрации", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить()));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Партнер КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			|		CRM_Интерес.Партнер КАК Партнер
			|	ИЗ
			|		Документ.CRM_Интерес КАК CRM_Интерес
			|	ГДЕ
			|		CRM_Интерес.Дата >= &Дата
			|		И НЕ CRM_Интерес.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		CRM_Взаимодействие.Партнер
			|	ИЗ
			|		Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
			|	ГДЕ
			|		CRM_Взаимодействие.Дата >= &Дата
			|		И НЕ CRM_Взаимодействие.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		CRM_СчетНаОплатуПокупателю.Партнер
			|	ИЗ
			|		Документ.CRM_СчетНаОплатуПокупателю КАК CRM_СчетНаОплатуПокупателю
			|	ГДЕ
			|		CRM_СчетНаОплатуПокупателю.Дата >= &Дата
			|		И НЕ CRM_СчетНаОплатуПокупателю.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КоммерческоеПредложениеКлиенту.Партнер
			|	ИЗ
			|		Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
			|	ГДЕ
			|		КоммерческоеПредложениеКлиенту.Дата >= &Дата
			|		И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗадачаИсполнителя.CRM_Партнер
			|	ИЗ
			|		Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|	ГДЕ
			|		ЗадачаИсполнителя.Дата >= &Дата
			|		И НЕ ЗадачаИсполнителя.ПометкаУдаления) КАК ВложенныйЗапрос
			|ГДЕ
			|	НЕ ВложенныйЗапрос.Партнер В (&МассивСсылок)";
		Иначе 
			// BSLLS:QueryToMissingMetadata-off
			// Используется в спарках  
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Партнер КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			|		CRM_Интерес.Партнер КАК Партнер
			|	ИЗ
			|		Документ.CRM_Интерес КАК CRM_Интерес
			|	ГДЕ
			|		CRM_Интерес.Дата >= &Дата
			|		И НЕ CRM_Интерес.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		CRM_Взаимодействие.Партнер
			|	ИЗ
			|		Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
			|	ГДЕ
			|		CRM_Взаимодействие.Дата >= &Дата
			|		И НЕ CRM_Взаимодействие.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗаказКлиента.Партнер
			|	ИЗ
			|		Документ.ЗаказКлиента КАК ЗаказКлиента
			|	ГДЕ
			|		ЗаказКлиента.Дата >= &Дата
			|		И НЕ ЗаказКлиента.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КоммерческоеПредложениеКлиенту.Клиент
			|	ИЗ
			|		Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
			|	ГДЕ
			|		КоммерческоеПредложениеКлиенту.Дата >= &Дата
			|		И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗадачаИсполнителя.CRM_Партнер
			|	ИЗ
			|		Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|	ГДЕ
			|		ЗадачаИсполнителя.Дата >= &Дата
			|		И НЕ ЗадачаИсполнителя.ПометкаУдаления) КАК ВложенныйЗапрос
			|ГДЕ
			|	НЕ ВложенныйЗапрос.Партнер В (&МассивСсылок)"; 
			
			// BSLLS:QueryToMissingMetadata-on
		КонецЕсли;

		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить()));
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивСсылок;
КонецФункции	

Функция ПолучитьМассивПотенциальныхКлиентовКРегистрации(МассивСсылокПартнеры)
	МассивСсылок = Новый Массив;
	Если Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ПотенциальныеКлиенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ПотенциальныеКлиенты КАК CRM_ПотенциальныеКлиенты
		|ГДЕ
		|	CRM_ПотенциальныеКлиенты.ДатаРегистрации >= &ДатаРегистрации";
		Запрос.УстановитьПараметр("ДатаРегистрации", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить()));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
				Если ЗначениеЗаполнено(Выборка.Ссылка.Партнер) Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Ссылка.Партнер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Партнер КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		CRM_Интерес.ПотенциальныйКлиент КАК Партнер
		|	ИЗ
		|		Документ.CRM_Интерес КАК CRM_Интерес
		|	ГДЕ
		|		CRM_Интерес.Дата >= &Дата
		|		И НЕ CRM_Интерес.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		CRM_Взаимодействие.ПотенциальныйКлиент
		|	ИЗ
		|		Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|	ГДЕ
		|		CRM_Взаимодействие.Дата >= &Дата
		|		И НЕ CRM_Взаимодействие.ПометкаУдаления) КАК ВложенныйЗапрос
		|ГДЕ
		|	НЕ ВложенныйЗапрос.Партнер В (&МассивСсылок)";
		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
			 -Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить()));
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
				Если ЗначениеЗаполнено(Выборка.Ссылка.Партнер) Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Ссылка.Партнер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураВозврата = Новый Структура("МассивСсылок, МассивСсылокПартнеры", МассивСсылок, МассивСсылокПартнеры);
	Возврат СтруктураВозврата;
КонецФункции	

Функция ПолучитьСписокДоговоровКРегистрации(МассивПартнеров)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец В(&МассивПартнеров)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент.Партнер В(&МассивПартнеров)";
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции	

Функция ПолучитьСписокАдресовКРегистрации(МассивПартнеров)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_АдресаОфисовКомпании.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_АдресаОфисовКомпании КАК CRM_АдресаОфисовКомпании
		|ГДЕ
		|	CRM_АдресаОфисовКомпании.Владелец В(&МассивПартнеров)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_АдресаОфисовКомпании.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_АдресаОфисовКомпании КАК CRM_АдресаОфисовКомпании
		|ГДЕ
		|	CRM_АдресаОфисовКомпании.Владелец В(&МассивПартнеров)";

	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьСписокКЛКРегистрации(МассивПартнеров)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец В(&МассивПартнеров)";
	Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьСписокРСчетовКРегистрации(МассивПартнеров)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец В(&МассивПартнеров)";
	Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции

Функция ПодготовитьПараметрыИзмененияРегистрацииПоСсылкам(УзелОбмена, МассивСсылок, Таблица)
	
	Данные = Новый Массив;
	
	Для Каждого ДанныеСсылка Из МассивСсылок Цикл
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Ссылка", ДанныеСсылка);
		Данные.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Команда", Истина);
	Результат.Вставить("БезУчетаАвторегистрации", Истина);
	Результат.Вставить("Узел", УзелОбмена);
	Результат.Вставить("Данные", Данные);
	Результат.Вставить("ИмяТаблицы", Таблица);
	Результат.Вставить("СтруктураИменМетаданных", Неопределено);
	
	Результат.Вставить("КонфигурацияПоддерживаетБСП",       Истина);
	Результат.Вставить("ДоступнаРегистрацияСредствамиБСП",  Истина);
	Результат.Вставить("ДоступнаРаботаРИБ",                 Истина);
	Результат.Вставить("НастройкаКонтрольВыгрузкиОбъектов", Истина);
	
	Результат.Вставить("ДоступнаПакетнаяРегистрация", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыИзмененияРегистрацииДляРегистра(УзелОбмена, Данные, Таблица)
	
	Результат = Новый Структура;
	Результат.Вставить("Команда", Истина);
	Результат.Вставить("БезУчетаАвторегистрации", Истина);
	Результат.Вставить("Узел", УзелОбмена);
	Результат.Вставить("Данные", Данные);
	Результат.Вставить("ИмяТаблицы", Таблица);
	Результат.Вставить("СтруктураИменМетаданных", Неопределено);
	
	Результат.Вставить("КонфигурацияПоддерживаетБСП",       Истина);
	Результат.Вставить("ДоступнаРегистрацияСредствамиБСП",  Истина);
	Результат.Вставить("ДоступнаРаботаРИБ",                 Истина);
	Результат.Вставить("НастройкаКонтрольВыгрузкиОбъектов", Истина);
	
	Результат.Вставить("ДоступнаПакетнаяРегистрация", Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка, УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьРолиСлужебногоПользователя(ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура();
	ОбновляемыеСвойства.Вставить("Роли", Новый Массив());
	ОбновляемыеСвойства.Роли.Добавить(Метаданные.Роли.CRM_СлужебныеПраваМобильноеПриложение.Имя);
	
	ОписаниеОшибки = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пользователи.УстановитьСвойстваПользователяИБ(
	ПользовательЗаписан = сфпОбщегоНазначения.ЗаписатьПользователяИБ(
	    сфпОбщегоНазначения.сфпЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		ОписаниеОшибки,
		ПользовательИзСправочника
	);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПользовательЗаписан Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРегламентноеЗаданиеСинхонизации()

	УстановитьПривилегированныйРежим(Истина);
	Возврат РегламентныеЗадания.НайтиПредопределенное("CRM_СинхронизацияС_iCRM");

КонецФункции // ПолучитьРегламентноеЗаданиеСинхонизации()

Процедура ВыгрузитьПорциюДанных(Узел, МассивОбъектовДляВыгрузки)
	
	ОбработкаОбмена = Обработки.CRM_УниверсальныйОбменДаннымиXML.Создать();
	
	ИмяФайлаПравил = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_ПравилаОбмена");
	Иначе 
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_Модуль_ПравилаОбмена");
	КонецЕсли;
	МакетПравил.Записать(ИмяФайлаПравил);
	
	//ДДПравил = Узел.ПравилаОбмена.Получить();
	//ДДПравил.Записать(ИмяФайлаПравил);	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
	ОбработкаОбмена.ЗагрузитьПравилаОбмена();
	ОбработкаОбмена.ИнициализироватьПервоначальныеЗначенияПараметров();
	ОбработкаОбмена.Параметры.Очистить();
	ОбработкаОбмена.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	ОбработкаОбмена.УзелОбменаiCRM = Узел;
	УстановитьУзелОбменаУСтрокДерева(ОбработкаОбмена.ТаблицаПравилВыгрузки, Узел);
	
	РезультатВыгрузки = Ложь;
	ОбработкаОбмена.ВыполнитьВыгрузкуCRM(МассивОбъектовДляВыгрузки, РезультатВыгрузки);
	Если РезультатВыгрузки Тогда  
		
		ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяФайлаОбмена);
		Сжатие = Новый СжатиеДанных(6);
		ДанныеФайла = Новый ХранилищеЗначения(ДанныеВыгрузки, Сжатие);
		ИмяФайлаХранилища = ПолучитьИмяВременногоФайла("xml");
		ЗначениеВФайл(ИмяФайлаХранилища, ДанныеФайла);
	
		ДанныеВыгрузкиДляРазмера = Новый ДвоичныеДанные(ИмяФайлаХранилища);
		
		Менеджер = РегистрыСведений.CRM_ДанныеДляВыгрузкиВiCRM.СоздатьМенеджерЗаписи();
		Менеджер.Размер = ДанныеВыгрузкиДляРазмера.Размер();
		Менеджер.Пользователь = Узел.Пользователь;
		Менеджер.ИдентификаторФайла = Строка(Новый УникальныйИдентификатор);
		Менеджер.ДанныеФайла = Новый ХранилищеЗначения(ДанныеВыгрузки, Сжатие);
		Менеджер.ВремяФайла = ТекущаяДатаСеанса();
		Менеджер.УзелОбмена =  Узел;
		Менеджер.Записать();	
		
		Для Каждого ЭлементМассива Из МассивОбъектовДляВыгрузки Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементМассива);
		КонецЦикла;	
		УдалитьФайлы(ИмяФайлаХранилища);
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаОбмена);
	
	УдалитьФайлы(ИмяФайлаПравил);
КонецПроцедуры	

Функция ПодготовитьПараметрыИзмененияРегистрации(УзелОбменаСсылка)
	Данные = Новый Массив;
	//Данные.Добавить(Неопределено);
	СоставПлана = Метаданные.ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.Состав;
	Для Каждого ОбъектПлана Из СоставПлана Цикл
		
		СтрокаДанных = "";
		Если Метаданные.Константы.Содержит(ОбъектПлана.Метаданные) Тогда
			СтрокаДанных = "Константа." + ОбъектПлана.Метаданные.Имя;
		КонецЕсли;	
		Если Метаданные.Справочники.Содержит(ОбъектПлана.Метаданные) Тогда
			Если Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить() Тогда
				Если Константы.CRM_iCRMРегистрироватьКлиентовСозданныхВТечение.Получить() > 0
					 ИЛИ Константы.CRM_iCRMРегистрироватьКлиентовИспользованныхВТечение.Получить() > 0 Тогда
					Если ОбъектПлана.Метаданные.Имя = "Партнеры" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "CRM_АдресаОфисовКомпании" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "ДоговорыКонтрагентов" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "КонтактныеЛицаПартнеров" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "БанковскиеСчета" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "CRM_ПотенциальныеКлиенты" Тогда
						Продолжить;
					КонецЕсли;

				КонецЕсли;
				Если Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить() > 0
					 ИЛИ Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить() > 0 Тогда
					Если ОбъектПлана.Метаданные.Имя = "Номенклатура" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "ХарактеристикиНоменклатуры" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			СтрокаДанных = "Справочник." + ОбъектПлана.Метаданные.Имя;
		КонецЕсли;
		Если Метаданные.Документы.Содержит(ОбъектПлана.Метаданные) Тогда
			Если Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить() Тогда
				Если Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить() > 0 Тогда
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
			СтрокаДанных = "Документ." + ОбъектПлана.Метаданные.Имя;
		КонецЕсли;
		Если Метаданные.Задачи.Содержит(ОбъектПлана.Метаданные) Тогда
			Если Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить() Тогда
				Если Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаДанных = "Задача." + ОбъектПлана.Метаданные.Имя;
			
		КонецЕсли;

		Если Метаданные.РегистрыСведений.Содержит(ОбъектПлана.Метаданные) Тогда
			Если Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить() Тогда
				Если Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить() > 0 Тогда
					Если ОбъектПлана.Метаданные.Имя = "CRM_ЗадачиПользователей" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "CRM_ЗапланированныеАктивности" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "CRM_СобытияКалендаря" Тогда
						Продолжить;
					КонецЕсли;
					Если ОбъектПлана.Метаданные.Имя = "CRM_СостоянияИнтересов" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить() > 0
					 ИЛИ Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить() > 0 Тогда
					Если ОбъектПлана.Метаданные.Имя = "ЦеныНоменклатуры" Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если ОбъектПлана.Метаданные.Имя = "ПредметыПапкиВзаимодействий" Тогда
					Продолжить;
				КонецЕсли;
				Если ОбъектПлана.Метаданные.Имя = "КурсыВалют" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДанных = "РегистрСведений." + ОбъектПлана.Метаданные.Имя;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаДанных) Тогда
			Данные.Добавить(СтрокаДанных);
		КонецЕсли;	
	КонецЦикла;	
	Результат = Новый Структура;
	Результат.Вставить("Команда", Истина);
	Результат.Вставить("БезУчетаАвторегистрации", Истина);
	Результат.Вставить("Узел", УзелОбменаСсылка);
	Результат.Вставить("Данные", Данные);
	Результат.Вставить("ИмяТаблицы", Неопределено);
	Результат.Вставить("СтруктураИменМетаданных", Неопределено);
	
	Результат.Вставить("КонфигурацияПоддерживаетБСП",       Истина);
	Результат.Вставить("ДоступнаРегистрацияСредствамиБСП",  Истина);
	Результат.Вставить("ДоступнаРаботаРИБ",                 Истина);
	Результат.Вставить("НастройкаКонтрольВыгрузкиОбъектов", Истина);
	
	Результат.Вставить("ДоступнаПакетнаяРегистрация", Истина);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКурсыВалютКРегистрации()
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период КАК Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта
	|ПОМЕСТИТЬ СрезИспользовать
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаИспользовать, ) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта
	|ПОМЕСТИТЬ ТаблицаКурсов
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период >= &ДатаИспользовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Валюта КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезИспользовать.Период КАК Период,
	|		СрезИспользовать.Валюта КАК Валюта
	|	ИЗ
	|		СрезИспользовать КАК СрезИспользовать
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаКурсов.Период,
	|		ТаблицаКурсов.Валюта
	|	ИЗ
	|		ТаблицаКурсов КАК ТаблицаКурсов) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Валюта,
	|	ВложенныйЗапрос.Период";
	Запрос.УстановитьПараметр("ДатаИспользовать", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("Период", Выборка.Период);
		СтруктураРегистра.Вставить("Валюта", Выборка.Валюта);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьCRM_ЗадачиПользователейКРегистрации(МассивОбъектов)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ЗадачиПользователей.Пользователь КАК Пользователь,
	|	CRM_ЗадачиПользователей.Объект КАК Объект,
	|	CRM_ЗадачиПользователей.Клиент КАК Клиент
	|ИЗ
	|	РегистрСведений.CRM_ЗадачиПользователей КАК CRM_ЗадачиПользователей
	|ГДЕ
	|	CRM_ЗадачиПользователей.Объект В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураРегистра.Вставить("Объект", Выборка.Объект);
		СтруктураРегистра.Вставить("Клиент", Выборка.Клиент);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьЦеныНоменклатурыКРегистрации(МассивОбъектов)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СрезИспользовать
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаИспользовать, Номенклатура В (&МассивОбъектов)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СрезИзменять
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаИзменять, Номенклатура В (&МассивОбъектов)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаИспользовать
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура В(&МассивОбъектов)
	|	И ЦеныНоменклатуры.Период >= &ДатаИспользовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Период КАК Период,
	|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаИзменять
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура В(&МассивОбъектов)
	|	И ЦеныНоменклатуры.Период >= &ДатаИзменять
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.ВидЦен КАК ВидЦен,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезИспользовать.Период КАК Период,
	|		СрезИспользовать.ВидЦен КАК ВидЦен,
	|		СрезИспользовать.Номенклатура КАК Номенклатура,
	|		СрезИспользовать.Характеристика КАК Характеристика
	|	ИЗ
	|		СрезИспользовать КАК СрезИспользовать
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СрезИзменять.Период,
	|		СрезИзменять.ВидЦен,
	|		СрезИзменять.Номенклатура,
	|		СрезИзменять.Характеристика
	|	ИЗ
	|		СрезИзменять КАК СрезИзменять
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИспользовать.Период,
	|		ТаблицаИспользовать.ВидЦен,
	|		ТаблицаИспользовать.Номенклатура,
	|		ТаблицаИспользовать.Характеристика
	|	ИЗ
	|		ТаблицаИспользовать КАК ТаблицаИспользовать
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИзменять.Период,
	|		ТаблицаИзменять.ВидЦен,
	|		ТаблицаИзменять.Номенклатура,
	|		ТаблицаИзменять.Характеристика
	|	ИЗ
	|		ТаблицаИзменять КАК ТаблицаИзменять) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Период";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаИспользовать", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьНоменклатуруИспользованнуюВТечение.Получить()));
	Запрос.УстановитьПараметр("ДатаИзменять", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьНоменклатуруСИзмененнымиЦенамиВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("Период", Выборка.Период);
		СтруктураРегистра.Вставить("ВидЦен", Выборка.ВидЦен);
		СтруктураРегистра.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураРегистра.Вставить("Характеристика", Выборка.Характеристика);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьCRM_СостоянияИнтересовКРегистрации(МассивОбъектов)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_СостоянияИнтересов.Интерес КАК Интерес,
	|	CRM_СостоянияИнтересов.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Интерес В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("Интерес", Выборка.Интерес);
		СтруктураРегистра.Вставить("Взаимодействие", Выборка.Взаимодействие);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьCRM_ЗапланированныеАктивностиКРегистрации(МассивОбъектов)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ЗапланированныеАктивности.Объект КАК Объект,
	|	CRM_ЗапланированныеАктивности.ПланируемаяАктивность КАК ПланируемаяАктивность
	|ИЗ
	|	РегистрСведений.CRM_ЗапланированныеАктивности КАК CRM_ЗапланированныеАктивности
	|ГДЕ
	|	CRM_ЗапланированныеАктивности.Объект В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("Объект", Выборка.Объект);
		СтруктураРегистра.Вставить("ПланируемаяАктивность", Выборка.ПланируемаяАктивность);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьCRM_СобытияКалендаряКРегистрации(МассивОбъектов)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_СобытияКалендаря.ПериодНачало КАК ПериодНачало,
	|	CRM_СобытияКалендаря.ПериодОкончание КАК ПериодОкончание,
	|	CRM_СобытияКалендаря.Пользователь КАК Пользователь,
	|	CRM_СобытияКалендаря.Объект КАК Объект,
	|	CRM_СобытияКалендаря.Партнер КАК Партнер
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
	|ГДЕ
	|	CRM_СобытияКалендаря.Объект В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("ПериодНачало", Выборка.ПериодНачало);
		СтруктураРегистра.Вставить("ПериодОкончание", Выборка.ПериодОкончание);
		СтруктураРегистра.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураРегистра.Вставить("Объект", Выборка.Объект);
		СтруктураРегистра.Вставить("Партнер", Выборка.Партнер);
		МассивСсылок.Добавить(СтруктураРегистра);
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьСписокВзаимодействийКРегистрации(МассивСсылокПартнеры, МассивСсылокИнтересы)
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_Взаимодействие.Ссылка КАК Ссылка,
	|	CRM_Взаимодействие.ДокументОснование КАК ДокументОснование,
	|	CRM_Взаимодействие.Партнер КАК Партнер
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.Дата >= &Дата
	|	И НЕ CRM_Взаимодействие.ПометкаУдаления";
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()),
		 -Константы.CRM_iCRMРегистрироватьДокументыСозданныеВТечение.Получить()));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(Выборка.Партнер) Тогда
				Если МассивСсылокПартнеры.Найти(Выборка.Партнер) = Неопределено Тогда
					МассивСсылокПартнеры.Добавить(Выборка.Партнер);
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
				 И ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
				Если МассивСсылокИнтересы.Найти(Выборка.ДокументОснование) = Неопределено Тогда
					МассивСсылокИнтересы.Добавить(Выборка.ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивСсылок", МассивСсылок);
	СтруктураВозврата.Вставить("МассивСсылокПартнеры", МассивСсылокПартнеры);
	СтруктураВозврата.Вставить("МассивСсылокИнтересы", МассивСсылокИнтересы);
	Возврат СтруктураВозврата;
КонецФункции	

#КонецОбласти
