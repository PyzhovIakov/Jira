
////////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ "УПРАВЛЕНИЕ ПРОЕКТАМИ"

#Область ПрограммныйИнтерфейс

#Область РаботаСФайлами

// Проверяет наличие хотя бы одного присоединеного файла с нужным контекстом из списка 
// контекстов Этапа.
//
// Параметры:
//  Этап   - ДокументСсылка.CRM_ЭтапКалендарногоПлана - этап для проверки.
//  СписокНедостающихКонтекстов - СписокЗначений - список контекстов, с которыми нет хотя бы 
//  одного присоединенного файла.
//
Процедура ПроверитьНаличиеФайловСНужнымКонтекстом(Этап, СписокНедостающихКонтекстов) Экспорт
	
	МассивКонтекстовЭтапа = Этап.ВариантыКонтекстаФайлов.ВыгрузитьКолонку("ВариантКонтекстаФайлов");
	ФайлыЭтапа = РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Этап);
	Если ФайлыЭтапа.Количество() > 0 Тогда
		ЗарегистрированныеВариантыКонтекста = Новый СписокЗначений;
		ВариантыКонтекста = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ФайлыЭтапа, "CRM_ВариантКонтекстаФайла");
		Для каждого ВариантКонтекста Из ВариантыКонтекста Цикл
			Если ЗначениеЗаполнено(ВариантКонтекста.Значение.CRM_ВариантКонтекстаФайла)
				
				 	 И ЗарегистрированныеВариантыКонтекста.НайтиПоЗначению(ВариантКонтекста.Значение.CRM_ВариантКонтекстаФайла) = Неопределено Тогда
				ЗарегистрированныеВариантыКонтекста.Добавить(ВариантКонтекста.Значение.CRM_ВариантКонтекстаФайла);
			КонецЕсли;
		КонецЦикла;
		// Проверим наличие нужных контекстов
		Для Каждого КонтекстЭтапа Из МассивКонтекстовЭтапа Цикл
			Если ЗарегистрированныеВариантыКонтекста.НайтиПоЗначению(КонтекстЭтапа) = Неопределено Тогда
				СписокНедостающихКонтекстов.Добавить(КонтекстЭтапа);
			КонецЕсли;
		КонецЦикла;
	Иначе	
		СписокНедостающихКонтекстов.ЗагрузитьЗначения(МассивКонтекстовЭтапа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РаботаСФайлами

#Область РаботаСШаблонамиПроектов

// Функция возвращает созданный шаблон проекта на основании проекта.
//
// Параметры:
//	Проект	- СправочникСсылка	- Проект, на основании которого создаем шаблон проекта.
//  Параметры - Структура
//
// Возвращаемое значение:
//	СправочникСсылка - созданный шаблон проекта.
//
Функция СоздатьШаблонНаОснованииПроекта(Проект, Параметры) Экспорт
	
	Возврат CRM_УправлениеПроектамиСервер.СоздатьШаблонНаОснованииПроекта(Проект, Параметры);
	
КонецФункции

#КонецОбласти // РаботаСШаблонамиПроектов

#Область ФормированиеПроекта

// Возвращает новый код проекта.
//
// Возвращаемое значение:
//	Строка - новый код проекта.
//
Функция ПолучитьНовыйКодПроекта() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Проекты.Код) КАК Код
	|ИЗ
	|	Справочник.Проекты КАК Проекты";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Код) Тогда
			Возврат Число(Прав(ВыборкаДетальныеЗаписи.Код, 8)) + 1;
		Иначе
			Возврат "00-00000001";
		КонецЕсли;
	КонецЦикла;
	
	Возврат "00-00000001";
	
КонецФункции // ПолучитьНовыйКодПроекта()

// Создает проект по шаблону.
//
// Параметры:
//	ШаблонПроекта 	- СправочникСсылка.CRM_ШаблоныПроектов - шаблон проекта.
//	СозданныйПроект - СправочникСсылка.Проекты - созданный проект.
//
Процедура СоздатьПроектПоШаблону(ШаблонПроекта, СозданныйПроект) Экспорт
	
	CRM_УправлениеПроектамиСервер.СоздатьПроектПоШаблону(ШаблонПроекта, СозданныйПроект);
	
КонецПроцедуры // СоздатьПроектПоШаблону()

// Возвращает действующий шаблон.
//
// Параметры:
//	Программа - СправочникСсылка.CRM_ТипУслуги - программа.
//
// Возвращаемое значение:
//	СправочникСсылка.CRM_ШаблоныПроектов - действующий шаблон.
//
Функция ПолучитьДействующийШаблон(Программа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_ШаблоныПроектов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ШаблоныПроектов КАК CRM_ШаблоныПроектов
	               |ГДЕ
	               |	CRM_ШаблоныПроектов.CRM_ТипУслуги = &Программа
	               |	И CRM_ШаблоныПроектов.Действует
	               |	И НЕ CRM_ШаблоныПроектов.ПометкаУдаления
	               |";
	Запрос.УстановитьПараметр("Программа", Программа);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьДействующийШаблон()

// Создает проект по шаблону.
//
// Параметры:
//	КолонкиКалендарногоГрафика - СписокЗначений - колонки календарного графика.
//
Процедура ПеречитатьСписокКолонокКалендарногоГрафикаИзМакетаНаСервере(КолонкиКалендарногоГрафика) Экспорт
	
	КолонкиКалендарногоГрафика.Очистить();
	
	Макет = Справочники.Проекты.ПолучитьМакет("CRM_МакетМоделиЭтапов");
	
	ОбластиМакета = Макет.Области;
	СписокОбластей = Новый СписокЗначений;
	
	Для каждого ОбластьМакета Из ОбластиМакета Цикл
		
		Если ТипЗнч(ОбластьМакета) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		ИначеЕсли ОбластьМакета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			Продолжить;
		ИначеЕсли СтрНайти(Врег(ОбластьМакета.Имя), "СЛУЖЕБНАЯ_") > 0 Тогда
			Продолжить;
		Иначе
			СписокОбластей.Добавить(ОбластьМакета,  Формат(ОбластьМакета.Лево, "ЧЦ=2; ЧВН="));
		КонецЕсли;
	КонецЦикла;
	
	СписокОбластей.СортироватьПоПредставлению();
	
	Для каждого ЭлементСписка Из СписокОбластей Цикл
		ЗаголовокОбласти = Макет.Область("R2C" + Число(ЭлементСписка.Представление)).Текст;
		КолонкиКалендарногоГрафика.Добавить(ЭлементСписка.Значение.Имя, ЗаголовокОбласти);
	КонецЦикла;
	
	// Отметим колонки по умолчанию
	ЭлементСписка = КолонкиКалендарногоГрафика.НайтиПоЗначению("ПлановаяДатаНачала");
	ЭлементСписка.Пометка = Истина;
	ЭлементСписка = КолонкиКалендарногоГрафика.НайтиПоЗначению("ПлановаяДатаОкончания");
	ЭлементСписка.Пометка = Истина;
	ЭлементСписка = КолонкиКалендарногоГрафика.НайтиПоЗначению("ПлановаяДлительность");
	ЭлементСписка.Пометка = Истина;
	ЭлементСписка = КолонкиКалендарногоГрафика.НайтиПоЗначению("Статус");
	ЭлементСписка.Пометка = Истина;
	ЭлементСписка = КолонкиКалендарногоГрафика.НайтиПоЗначению("Сделано");
	ЭлементСписка.Пометка = Истина;
	
КонецПроцедуры

#КонецОбласти // ФормированиеПроекта

#Область ПересчетСроков

// Пересчитывает даты окончания этапов проекта.
//
// Параметры:
// 	Проект		 - СправочникСсылка.Проекты - Проект.
//	СтрокаОшибки - Строка - Строка ошибки.
//	УчитыватьПроизводственныйКалендарь	 - Булево - Флаг учета производственного календаря.
//
Процедура ПересчитатьДатыОкончанияПроекта(Проект, СтрокаОшибки, УчитыватьПроизводственныйКалендарь = Ложь) Экспорт
	
	СтрокаОшибки = "";
	День = 86400;
	ДатаОкончания = '00010101';
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка,
	               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаЗадачи.Следующий() Цикл
			
			ЗадачаОбъект = ВыборкаЗадачи.Ссылка.ПолучитьОбъект();
			Длительность = ЗадачаОбъект.ПлановаяДлительность;
			
			Если Длительность = 0 Тогда
				ДатаОкончания = ЗадачаОбъект.ПлановаяДатаНачала;
			ИначеЕсли УчитыватьПроизводственныйКалендарь Тогда
				Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
				ДлительностьПериода = Макс(0, Длительность - 1);
				ДатаОкончания = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(
					Календарь, ЗадачаОбъект.ПлановаяДатаНачала, ДлительностьПериода, Ложь);
			Иначе
				ДатаОкончания = (НачалоДня(ЗадачаОбъект.ПлановаяДатаНачала)) + ((Длительность - 1) * День);
			КонецЕсли;
			
			ЗадачаОбъект.ПлановаяДатаОкончания = ДатаОкончания;
			
			Если ЗначениеЗаполнено(ЗадачаОбъект.ФактическаяДатаОкончания) Тогда
				ЗадачаОбъект.ФактическаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
					ЗадачаОбъект.ФактическаяДатаНачала, ЗадачаОбъект.ФактическаяДатаОкончания, УчитыватьПроизводственныйКалендарь);
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СтрокаОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Пересчитывает даты этапов проекта.
//
// Параметры:
// 	Проект		 - СправочникСсылка.Проекты - проект.
//	ТекущаяДата	 - Дата - текущая дата.
//	НоваяДата	 - Дата - новая дата.
//	СтрокаОшибки - Строка - строка ошибки.
//
Процедура ПересчитатьДатыЭтаповПроекта(Проект, ТекущаяДата, НоваяДата, СтрокаОшибки) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МИНИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала) КАК ФактическаяДатаНачала
	                      |ИЗ
	                      |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	                      |ГДЕ
	                      |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	                      |	И CRM_ЭтапКалендарногоПлана.Статус В(&Статусы)");
	СтатусыСФактДатой = Новый  Массив;
	СтатусыСФактДатой.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена);
	СтатусыСФактДатой.Добавить(Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Статусы", СтатусыСФактДатой);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ФактическаяДатаНачала)
		 И НоваяДата > Выборка.ФактическаяДатаНачала Тогда
		СтрокаОшибки =
			НСтр("ru='По проекту есть задачи с фактической датой начала меньшей чем введенная дата. Минимальная фактическая дата начала';
			|en='Project has tasks with actual start date less than entered date. Minimum actual start date'") 
			+ ": " 
			+ Выборка.ФактическаяДатаНачала;
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = "";
	РазностьДатВСекундах = CRM_УправлениеПроектамиКлиентСервер.РазностьДатВСекундах(НоваяДата, ТекущаяДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ЭтапКалендарногоПлана.Ссылка КАК Ссылка,
	               |	CRM_ЭтапКалендарногоПлана.ТипЭтапа КАК ТипЭтапа
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЭтапОбъект.ПлановаяДатаНачала = ЭтапОбъект.ПлановаяДатаНачала + РазностьДатВСекундах;
			ЭтапОбъект.ПлановаяДатаОкончания = ЭтапОбъект.ПлановаяДатаОкончания + РазностьДатВСекундах;
			ЭтапОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СтрокаОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
		
КонецПроцедуры

// Получить плановую дату окончания проекта.
//
// Параметры:
// 	Проект - СправочникСсылка.Проекты - проект.
//
// Возвращаемое значение:
//	Дата - плановая дата окончания проекта.
//
Функция ПолучитьПлановуюДатуОкончанияПроекта(Проект) Экспорт
	
	Возврат CRM_УправлениеПроектамиСервер.ПолучитьПлановуюДатуОкончанияПроекта(Проект);
	
КонецФункции // ПолучитьПлановуюДатуОкончанияПроекта()

// Обновляет даты пакета задач и всех родителей.
//
// Параметры:
//	Этап - СправочникСсылка.CRM_ЭтапыПроектов - этап для обработки.
//
Процедура ОбновитьДатыПакетаЗадачИВсехРодителей(Этап) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	CRM_ЭтапыПроектов.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.CRM_ЭтапыПроектов КАК CRM_ЭтапыПроектов
	                |ГДЕ
	                |	CRM_ЭтапыПроектов.Ссылка = &Этап
	                |ИТОГИ ПО
	                |	Ссылка ТОЛЬКО ИЕРАРХИЯ
	                |";
	Запрос.УстановитьПараметр("Этап", Этап);
	МассивРодителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Колво = МассивРодителей.Количество();
	Для Индекс = 1 По Колво  Цикл
		Ин = Колво - Индекс;
		Если ЗначениеЗаполнено(МассивРодителей[Ин]) Тогда
			ПакетОбъект = МассивРодителей[Ин].ПолучитьОбъект();
			ПакетОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить дату начала проекта.
//
// Параметры:
// 	Проект - СправочникСсылка.Проекты - проект.
//
// Возвращаемое значение:
//	Дата - дата начала проекта.
//
Функция ПолучитьДатуНачалаПроекта(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала) КАК ДатаНачала
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления
	               |	И НЕ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена)
	               |	И CRM_ЭтапКалендарногоПлана.ФактическаяДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.ДатаНачала =  NULL, Неопределено, Выборка.ДатаНачала);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьДатуНачалаПроекта()

// Получить прогноз.
//
// Параметры:
// 	Проект - СправочникСсылка.Проекты - проект.
//
// Возвращаемое значение:
//	Дата - прогноз.
//
Функция ПолучитьПрогноз(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ФактическаяДатаОкончания) КАК ФактическаяДатаОкончания,
	               |	МАКСИМУМ(CRM_ЭтапКалендарногоПлана.ПлановаяДатаОкончания) КАК ПлановаяДатаОкончания
	               |ИЗ
	               |	Документ.CRM_ЭтапКалендарногоПлана КАК CRM_ЭтапКалендарногоПлана
	               |ГДЕ
	               |	CRM_ЭтапКалендарногоПлана.Проект = &Проект
	               |	И НЕ CRM_ЭтапКалендарногоПлана.ПометкаУдаления
	               |	И НЕ CRM_ЭтапКалендарногоПлана.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ФактическаяДатаОкончания) Тогда 
			Если Выборка.ФактическаяДатаОкончания >= Выборка.ПлановаяДатаОкончания Тогда
				Возврат Выборка.ФактическаяДатаОкончания;
			Иначе
				Возврат Выборка.ПлановаяДатаОкончания;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ПлановаяДатаОкончания) Тогда
			Возврат Выборка.ПлановаяДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции // ПолучитьПрогноз()

#КонецОбласти // ПересчетСроков

#Область ПересчетСмещений

// Обновляет смещения шаблона этапа и всех родителей.
//
// Параметры:
//	ШаблонЭтапа - СправочникСсылка.CRM_ШаблоныЭтаповПроектов - этап для обработки.
//
Процедура ОбновитьСмещенияШаблонаЭтапаИВсехРодителей(ШаблонЭтапа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ШаблонЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	CRM_ШаблоныЭтаповПроектов.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.CRM_ШаблоныЭтаповПроектов КАК CRM_ШаблоныЭтаповПроектов
	                |ГДЕ
	                |	CRM_ШаблоныЭтаповПроектов.Ссылка = &ШаблонЭтапа
	                |ИТОГИ ПО
	                |	Ссылка ТОЛЬКО ИЕРАРХИЯ
	                |";
	Запрос.УстановитьПараметр("ШаблонЭтапа", ШаблонЭтапа);
	МассивРодителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Колво = МассивРодителей.Количество();
	Для Индекс = 1 По Колво  Цикл
		Ин = Колво - Индекс;
		Если ЗначениеЗаполнено(МассивРодителей[Ин]) Тогда
			ПакетОбъект = МассивРодителей[Ин].ПолучитьОбъект();
			ПакетОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПересчетСмещений

#Область ИсторияИзменений

// Вызывается после определения реквизитов объекта из формы 
// РегистрСведений.ВерсииОбъектов.ВыборРеквизитовОбъекта.
// 
// Параметры:
//  Ссылка           - ЛюбаяСсылка       - версионируемый объект конфигурации.
//  ДеревоРеквизитов - ДанныеФормыДерево - дерево реквизитов объектов.
//
Процедура ПриВыбореРеквизитовОбъекта(Ссылка, ДеревоРеквизитов) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		
		КоллекцияРеквизитовОбъекта = ДеревоРеквизитов.ПолучитьЭлементы();
		
		КУдалению = Новый Массив;
		Для Каждого ЭлементКоллекции Из КоллекцияРеквизитовОбъекта Цикл
			Если ЭлементКоллекции.Имя = "CRM_КолонкиКалендарногоГрафика"
				 ИЛИ ЭлементКоллекции.Имя = "CRM_ТекущийЭтап"
				 ИЛИ ЭлементКоллекции.Имя = "CRM_Планируемый"
				 ИЛИ ЭлементКоллекции.Имя = "CRM_Подразделение"
				 ИЛИ ЭлементКоллекции.Имя = "CRM_КомментарийHTML"
				 ИЛИ ЭлементКоллекции.Имя = "ПартнерыИКонтактныеЛица" Тогда
				
				КУдалению.Добавить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из КУдалению Цикл
			КоллекцияРеквизитовОбъекта.Удалить(ЭлементКоллекции);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда 
		
		КоллекцияРеквизитовОбъекта = ДеревоРеквизитов.ПолучитьЭлементы();
		
		КУдалению = Новый Массив;
		Для Каждого ЭлементКоллекции Из КоллекцияРеквизитовОбъекта Цикл
			Если ЭлементКоллекции.Имя = "Смещения"
				 ИЛИ ЭлементКоллекции.Имя = "Важность"
				 ИЛИ ЭлементКоллекции.Имя = "КартаМаршрута"
				 ИЛИ ЭлементКоллекции.Имя = "Подразделение"
				 ИЛИ ЭлементКоллекции.Имя = "ВведенВручную"
				 ИЛИ ЭлементКоллекции.Имя = "ЧекЛист"
				 ИЛИ ЭлементКоллекции.Имя = "ВариантыКонтекстаФайлов"
				 ИЛИ ЭлементКоллекции.Имя = "Проведен"
				 ИЛИ ЭлементКоллекции.Имя = "ПользователиЭтапа" Тогда
				
				КУдалению.Добавить(ЭлементКоллекции);
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементКоллекции Из КУдалению Цикл
			КоллекцияРеквизитовОбъекта.Удалить(ЭлементКоллекции);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИсторияИзменений

#КонецОбласти
