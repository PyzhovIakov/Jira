///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.БазоваяФункциональностьСБП".
// ОбщийМодуль.СистемаБыстрыхПлатежейСобытия.
//
// Серверные процедуры обработки событий подсистемы Система быстрых платежей:
//  - обработка событий Интернет-поддержки;
//  - обработка событий Стандартных подсистем;
//  - обработка событий технологии сервиса;
//  - обработка событий создания и настройки шаблонов сообщений;
//  - обработка событий вызова операций СБП;
//  - обработка событий настройки подключения;
//  - обработка событий формы отправки платежной ссылки;
//  - обработка событий подсистемы ОнлайнЗаказы.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаСобытийИнтернетПоддержки

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//   ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	// СистемаБыстрыхПлатежей.ПереводыСБПc2b
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	// Конец СистемаБыстрыхПлатежей.ПереводыСБПc2b
	
КонецПроцедуры

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
// Параметры:
//  Логин - Строка - логин пользователя Интернет-поддержки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриИзмененииДанныхАутентификации(
		Логин);
	
КонецПроцедуры

// Определяет доступные шаблоны назначений платежей для варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ИмяПоля - Строка - имя поля для хранения типа аутентификации.
//
Процедура ПриОпределенииИмениПоляТипаАутентификации(
		ВариантНастройки,
		ИмяПоля) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		ИмяПоля = "ТипАутентификацииc2b";
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		ИмяПоля = "ТипАутентификацииb2b";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийСтандартныхПодсистем

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(
		ЗапросыРазрешений);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииНастроекПечати(Настройки);
	
КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииКомандПодключенныхКОбъекту(
		НастройкиФормы,
		Источники,
		ПодключенныеОтчетыИОбработки,
		Команды);
	
КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(
		НастройкиПрограммногоИнтерфейса);
	
КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииВидовПодключаемыхКоманд(
		ВидыПодключаемыхКоманд);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийТехнологииСервиса

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииПсевдонимовОбработчиков(
		СоответствиеИменПсевдонимам);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.СверкаВзаиморасчетовСБПc2b") Тогда
		МодульСверкаВзаиморасчетовСБПc2b = ОбщегоНазначения.ОбщийМодуль("СверкаВзаиморасчетовСБПc2b");
		МодульСверкаВзаиморасчетовСБПc2b.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
КонецПроцедуры

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(
		Обработчики)
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСобытийВызоваОпераций

// Вызывается при проверке параметров авторизации.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки Системы быстрых платежей.
//  ПараметрыНастройкиПодключения - Структура - параметры авторизации СБП;
//  ДанныеАутентификации - Структура - параметры авторизации Интернет-поддержки пользователей;
//  РезультатПроверки - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации.
//
Процедура ПриПроверкеПараметровАутентификации(
		ВариантНастройки,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		РезультатПроверки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b")
		И ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		МодульПереводыСБПc2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСервис");
		РезультатПроверки = МодульПереводыСБПc2bСервис.ОперацияПроверитьПараметрыПодключения(
			ПараметрыНастройкиПодключения,
			ДанныеАутентификации);
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b")
		И ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		МодульПереводыСБПb2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСервис");
		РезультатПроверки = МодульПереводыСБПb2bСервис.ОперацияПроверитьПараметрыПодключения(
			ПараметрыНастройкиПодключения,
			ДанныеАутентификации);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить проверку авторизации,
			|проверьте внедрение подсистем ПереводыСБПc2b или ПереводыСБПb2b.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийНастройкиПодключения

// Формирует настройки программы установленные в переопределении.
//
// Параметры:
//  Настройки - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы.
//
Процедура ПриОпределенииНастроекПодключенияПрограммы(Настройки) Экспорт
	
	НастройкиСБПc2b = Новый Структура;
	НастройкиСБПc2b.Вставить("ОбъектМетаданных", Неопределено);
	НастройкиСБПc2b.Вставить("ИсключаемыеПоля", Новый Массив);
	НастройкиСБПc2b.Вставить("ШаблоныНазначений", СистемаБыстрыхПлатежейСлужебный.НовыйШаблоныНазначений());
	НастройкиСБПc2b.Вставить("ИспользоватьЧастичныеОплаты", Ложь);
	НастройкиСБПc2b.Вставить("ИспользоватьНастройкуКассовыхСсылок", Ложь);
	
	НастройкиСБПb2b = Новый Структура;
	НастройкиСБПb2b.Вставить("ОбъектМетаданных", Неопределено);
	НастройкиСБПb2b.Вставить("ИсключаемыеПоля", Новый Массив);
	НастройкиСБПb2b.Вставить("ШаблоныНазначений", СистемаБыстрыхПлатежейСлужебный.НовыйШаблоныНазначений());
	НастройкиСБПb2b.Вставить("ИспользоватьЧастичныеОплаты", Ложь);
	
	Настройки = Новый Структура;
	Настройки.Вставить("c2b", НастройкиСБПc2b);
	Настройки.Вставить("b2b", НастройкиСБПb2b);
	
КонецПроцедуры

// Проверяет настройки программы установленные в переопределении.
//
// Параметры:
//  Настройки - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы.
//
Процедура ПриПроверкеНастройкиПодключенияПрограммы(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b")
			И Настройки.c2b.ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект метаданных отвечающий за настройку параметров оплаты (c2b).'");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b")
			И Настройки.b2b.ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указан объект метаданных отвечающий за настройку параметров оплаты (b2b).'");
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьЗаполнениеШаблоновНазначений(
		Настройки.c2b.ШаблоныНазначений);
	СистемаБыстрыхПлатежейСлужебный.ПроверитьЗаполнениеШаблоновНазначений(
		Настройки.b2b.ШаблоныНазначений);
	
КонецПроцедуры

// Заполняет настройки отображения кассовых ссылок.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису.
//
Процедура ПриЗаполненииЗаполнитьДекорацияКассовыеСсылки(
		Форма,
		НастройкаПодключения) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКассовыхСсылок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ДанныеКассовыхСсылок = МодульПереводыСБПc2bСлужебный.ДанныеКассовыхСсылок(
			НастройкаПодключения);
	КонецЕсли;
	
	Если ДанныеКассовыхСсылок = Неопределено Тогда
		Форма.Элементы.ДекорацияКассовыеСсылки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеКассовыхСсылок.Количество <> 0 Тогда
		ПредставлениеСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настроить (%1)'"),
			ДанныеКассовыхСсылок.Количество);
	Иначе
		ПредставлениеСсылки = НСтр("ru = 'Настроить'")
	КонецЕсли;
	
	Форма.Элементы.ДекорацияКассовыеСсылки.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Кассовые QR-коды: <a href = ""open:cashQrc"">%1</a>'"),
			ПредставлениеСсылки));
	
КонецПроцедуры

// Формирует настройки авторизации участника СБП.
//
// Параметры:
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  Настройки - Структура, Неопределено - данные настроек участника СБП:
//    * Наименование - Строка - наименование участника СБП;
//    * ТипАутентификации - ПеречислениеСсылка.ТипыАутентификацииСБП - способ авторизации в сервисе участника СБП;
//
Процедура ПриОпределенииНастроекАвторизации(
		ИдентификаторУчастника,
		ВариантНастройки,
		Настройки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиУчастниковСБП.Наименование КАК Наименование,
		|	&ИмяПоляТипАутентификации КАК ТипАутентификации
		|ИЗ
		|	РегистрСведений.НастройкиУчастниковСБП КАК НастройкиУчастниковСБП
		|ГДЕ
		|	НастройкиУчастниковСБП.Идентификатор = &ИдентификаторУчастника";
	
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	
	ИмяПоля = "";
	ПриОпределенииИмениПоляТипаАутентификации(
		ВариантНастройки,
		ИмяПоля);
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ИмяПоляТипАутентификации",
		"НастройкиУчастниковСБП." + ИмяПоля);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Настройки = Новый Структура;
	Настройки.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	Настройки.Вставить("ТипАутентификации", ВыборкаДетальныеЗаписи.ТипАутентификации);
	
КонецПроцедуры

// Определяет настройки выбора варианта подключения СБП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настройки подключения;
//  ВыборВариантаДоступен - Булево - признак доступности выбора варианта;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки по умолчанию.
//
Процедура ПриОпределенииДоступныхВариантовНастройки(
		Форма,
		ВыборВариантаДоступен,
		ВариантНастройки) Экспорт
	
	ДоступныеВарианты = Новый Массив;
	ВыборВариантаДоступен = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		ДоступныеВарианты.Добавить(Перечисления.ВариантыНастройкиСБП.c2b);
		ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
	Иначе
		Форма.Элементы.ВариантНастройкиc2b.Видимость = Ложь;
	КонецЕсли;
	
	ВыборВариантаДоступен = (ДоступныеВарианты.Количество() > 1);
	
КонецПроцедуры

// Определяет настройки СБП по настройке подключения.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки по умолчанию;
//  НастройкиУчастникаСБП - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиУчастникаСБП;
//  ОбщиеНастройки - Структура - настройки подключения.
//
Процедура ПриОпределенииНастроекПоНастройкиПодключения(
		ВариантНастройки,
		НастройкиУчастникаСБП,
		ОбщиеНастройки) Экспорт
	
	НастройкиСБПc2b = Новый Структура;
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И НастройкиУчастникаСБП <> Неопределено Тогда
		ОбщиеНастройки.Вставить("ИНН", НастройкиУчастникаСБП.ИНН);
		НастройкиСБПc2b.Вставить("Переводыc2b", Истина);
		НастройкиСБПc2b.Вставить("КассовыеСсылки", НастройкиУчастникаСБП.КассовыеСсылкиc2b);
		НастройкиСБПc2b.Вставить("ПлатежныйАгрегатор", НастройкиУчастникаСБП.ПлатежныйАгрегатор);
		НастройкиСБПc2b.Вставить("ПодключениеКассовойСсылки", НастройкиУчастникаСБП.ПодключениеКассовойСсылкиc2b);
		НастройкиСБПc2b.Вставить("УчастникСБПВозврата",
			(Не НастройкиУчастникаСБП.ЗапрещенВыборУчастникаc2b
			И (ОбщиеНастройки.Идентификатор <> "PayMaster"
				И ОбщиеНастройки.Идентификатор <> "1C-SBP"
				И ОбщиеНастройки.Идентификатор <> "SDEKFinance"
				И ОбщиеНастройки.Идентификатор <> "Raiffeisen"
				И ОбщиеНастройки.Идентификатор <> "Tinkoff")));
	Иначе
		ОбщиеНастройки.Вставить("ИНН", "");
		НастройкиСБПc2b.Вставить("Переводыc2b", Ложь);
		НастройкиСБПc2b.Вставить("КассовыеСсылки", Ложь);
		НастройкиСБПc2b.Вставить("ПлатежныйАгрегатор", Ложь);
		НастройкиСБПc2b.Вставить("УчастникСБПВозврата", Ложь);
		НастройкиСБПc2b.Вставить("ПодключениеКассовойСсылки", Ложь);
	КонецЕсли;
	
	НастройкиСБПb2b = Новый Структура;
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И НастройкиУчастникаСБП <> Неопределено Тогда
		НастройкиСБПb2b.Вставить("Переводыb2b", Истина);
		НастройкиСБПb2b.Вставить("ВидПоступления", НастройкиУчастникаСБП.ВидПоступленияb2b);
	Иначе
		НастройкиСБПc2b.Вставить("Переводыb2b", Ложь);
	КонецЕсли;
	
	ОбщиеНастройки.Вставить("НастройкиСБПc2b", НастройкиСБПc2b);
	ОбщиеНастройки.Вставить("НастройкиСБПb2b", НастройкиСБПb2b);
	
КонецПроцедуры

// Определяет настройки настойки подключения по варианту настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которую необходимо добавить настройки;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки подключения;
//  НастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы.
//
Процедура ПриОпределенииНастроекОплаты(
		Форма,
		ВариантНастройки,
		НастройкиПодключения) Экспорт
	
	ИспользоватьНастройкуКассовыхСсылок = Ложь;
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		НастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы().c2b;
		ИспользоватьНастройкуКассовыхСсылок = НастройкиПодключения.ИспользоватьНастройкуКассовыхСсылок;
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		НастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы().b2b;
	Иначе
		СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
			ВариантНастройки);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма,
			"ИспользоватьНастройкуКассовыхСсылок") Тогда
		Форма.ИспользоватьНастройкуКассовыхСсылок = ИспользоватьНастройкуКассовыхСсылок;
	КонецЕсли;
	
КонецПроцедуры

// Формирует настройки оплаты перед записью данных в прикладной регистр.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки подключения;
//  ПараметрыОплаты - Структура - настройки приема оплат для записи в прикладной объект;
//  ПараметрыОплатыНастройки - Структура - см. СистемаБыстрыхПлатежейСлужебный.ЗначенияНастроекОплаты;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к сервису;
//
Процедура ПриФормированииПараметровОплатыПередЗаписью(
		ВариантНастройки,
		ПараметрыОплаты,
		ПараметрыОплатыНастройки,
		НастройкаПодключения) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	НастройкиПодключенияПрограммы = СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы();
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		ОбъектМетаданных = НастройкиПодключенияПрограммы.b2b.ОбъектМетаданных;
		ПараметрыОплаты.Вставить("c2b", Неопределено);
		ПараметрыОплаты.Вставить("b2b", ПараметрыОплатыНастройки);
	Иначе
		ОбъектМетаданных = НастройкиПодключенияПрограммы.c2b.ОбъектМетаданных;
		ПараметрыОплаты.Вставить("c2b", ПараметрыОплатыНастройки);
		ПараметрыОплаты.Вставить("b2b", Неопределено);
	КонецЕсли;
	
	ИмяАтрибутаНастройкаПодключения = СистемаБыстрыхПлатежейСлужебный.АтрибутНастройкаПодключения(
		ОбъектМетаданных);
	ПараметрыОплатыНастройки.Вставить(
		ИмяАтрибутаНастройкаПодключения,
		НастройкаПодключения);
	
КонецПроцедуры

// Определяет настройки приема оплат на формах подключения
// к Системе быстрых платежей для переопределения.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  НастройкиЭлементов - Структура -данные элементов формы;
//  НастройкиФормы - Структура - содержит элементы формы и текущие значения реквизитов.
//
Процедура ПриФормированииНастроекЭлементовФормы(
		ВариантНастройки,
		НастройкиЭлементов,
		НастройкиФормы) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		НастройкиФормы.Вставить("c2b", НастройкиЭлементов);
		НастройкиФормы.Вставить("b2b", Неопределено);
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		НастройкиФормы.Вставить("c2b", Неопределено);
		НастройкиФормы.Вставить("b2b", НастройкиЭлементов);
	КонецЕсли;
	
КонецПроцедуры

// Определяет данные заполнения  приема оплат на формах подключения
// к Системе быстрых платежей для переопределения.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  НастройкиОплаты - Структура -данные настроек оплаты формы;
//  ПараметрыОплаты - Структура - данные заполнения;
//  ИмяСвойства - Строка - имя свойства для обработки заполнения.
//
Процедура ПриФормированииПараметровПодключения(
		ВариантНастройки,
		НастройкиОплаты,
		ПараметрыОплаты,
		ИмяСвойства) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		НастройкиОплаты.Вставить("c2b", ПараметрыОплаты);
		НастройкиОплаты.Вставить("b2b", Неопределено);
		ИмяСвойства = "c2b";
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		НастройкиОплаты.Вставить("c2b", Неопределено);
		НастройкиОплаты.Вставить("b2b", ПараметрыОплаты);
		ИмяСвойства = "b2b";
	КонецЕсли;

КонецПроцедуры

// Определяет возможность использования кассовой ссылки для варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  Сценарии - Структура - сценарии работы подсистемы:
//    * КассовыеСсылки - Булево - признак доступности настройки кассовой ссылки;
//    * СверкаВзаиморасчетов - Булево - признак доступности настройки кассовой ссылки;
//
Процедура ПриОпределенииДоступныхСценариев(
		ВариантНастройки,
		Сценарии) Экспорт
	
	Сценарии.КассовыеСсылки = (ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b);
	Сценарии.СверкаВзаиморасчетов = (ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b);
	
КонецПроцедуры

// Определяет доступные шаблоны назначений платежей для варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  НастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы;
//  ШаблоныНазначений - ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйШаблоныНазначений.
//
Процедура ПриОпределенииШаблоновНазначений(
		ВариантНастройки,
		НастройкиПодключения,
		ШаблоныНазначений) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
		ШаблоныНазначений = НастройкиПодключения.c2b.ШаблоныНазначений;
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b Тогда
		ШаблоныНазначений = НастройкиПодключения.b2b.ШаблоныНазначений;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки подключения по переданному документу операции.
//
// Параметры:
//  НастройкиПодключения - Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройки
//   подключения документа.
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить список настроек.
//
Процедура ПриОпределенииНастроекПодключенияПоДокументуОперации(
		НастройкиПодключения,
		ДокументОперации) Экспорт
	
	// СистемаБыстрыхПлатежей.ПереводыСБПc2b
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НастройкиПодключения,
			МодульПереводыСБПc2bСлужебный.НастройкиПодключенияПоДокументуОперации(
				ДокументОперации));
	КонецЕсли;
	// Конец СистемаБыстрыхПлатежей.ПереводыСБПc2b
	
	// СистемаБыстрыхПлатежей.ПереводыСБПb2b
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСлужебный");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НастройкиПодключения,
			МодульПереводыСБПb2bСлужебный.НастройкиПодключенияПоДокументуОперации(
				ДокументОперации));
	КонецЕсли;
	// Конец СистемаБыстрыхПлатежей.ПереводыСБПb2b
	
КонецПроцедуры

// Определяет настройки подключения по переданному документу операции.
//
// Параметры:
//  Использовать - Булево - признак использования настроек;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  НастройкиПрограммы - Структура - см. СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы.
//
Процедура ПриОпределенииИспользованияЧастичныхОплат(
		Использовать,
		ВариантНастройки,
		НастройкиПрограммы) Экспорт
	
	Использовать = ?(ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b,
		НастройкиПрограммы.c2b.ИспользоватьЧастичныеОплаты,
		НастройкиПрограммы.b2b.ИспользоватьЧастичныеОплаты);
	
КонецПроцедуры

// Определяет настройку и вариант настройки по документу операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, по данным которого
//    необходимо получить список настроек;
//  ПараметрыНастройки - Структура - настройка по документы:
//    * ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//       настройка выполнения операции;
//
Процедура ПриОпределенииНастройкиПоДокументуОперации(
		ДокументОперации,
		ПараметрыНастройки) Экспорт
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ПриОпределенииПараметровПодключенияДокументаОперации(
			ДокументОперации);
	Если Не ЗначениеЗаполнено(ПараметрыПодключения)
		Или (ПараметрыПодключения.НастройкиПодключения.c2b.Количество() = 0
			И ПараметрыПодключения.НастройкиПодключения.b2b.Количество() = 0) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить настройку подключения к Системе быстрых платежей.'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПодключения.НастройкиПодключения.c2b.Количество() <> 0 Тогда
		ПараметрыНастройки.НастройкаПодключения = ПараметрыПодключения.НастройкиПодключения.c2b[0];
		ПараметрыНастройки.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b;
	ИначеЕсли ПараметрыПодключения.НастройкиПодключения.b2b.Количество() <> 0 Тогда
		ПараметрыНастройки.НастройкаПодключения = ПараметрыПодключения.НастройкиПодключения.b2b[0];
		ПараметрыНастройки.ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b;
	КонецЕсли;
	
КонецПроцедуры

// Определяет поведение системы при смене признака использования настройки подключения.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка подключения к СБП;
//  Используется - Булево - признак использования настройки;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  РезультатОперации - Структура- результат операции:
//   * Ошибка - Булево - признак ошибки выполнения операции;
//   * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//   * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Процедура ПриИзмененииИспользованияНастройки(
	НастройкаПодключения,
	Используется,
	ВариантНастройки,
	ОбновлятьНастройки,
	РезультатОперации) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОнлайнЗаказы") Тогда
		МодульОнлайнЗаказыСобытия = ОбщегоНазначения.ОбщийМодуль("ОнлайнЗаказыСобытия");
		Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b Тогда
			МодульОнлайнЗаказыСобытия.ПриИзмененииИспользованияНастройкиОплаты(
				НастройкаПодключения,
				Используется,
				"СБПc2b",
				ОбновлятьНастройки,
				РезультатОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийШаблоновСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения.
//
Процедура ПриПодготовкеШаблонаСообщения(
		Реквизиты,
		Вложения,
		НазначениеШаблона,
		ДополнительныеПараметры) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриПодготовкеШаблонаСообщения(
		Реквизиты,
		Вложения,
		НазначениеШаблона,
		ДополнительныеПараметры);
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения.
//
Процедура ПриФормированииСообщения(
		Сообщение,
		НазначениеШаблона,
		ПредметСообщения,
		ПараметрыШаблона) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПриФормированииСообщения(
		Сообщение,
		НазначениеШаблона,
		ПредметСообщения,
		ПараметрыШаблона);
	
КонецПроцедуры

// Проверяет создание шаблонов сообщений.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки
//   подключения к Системе быстрых платежей.
//  РезультатПроверки - Структура - результат обработки шаблонов сообщений:
//   * ШаблоныСозданы - Булево - Истина, если все описанные шаблоны созданы;
//   * Шаблоны - Массив из СправочникСсылка.ШаблоныСообщений - созданные шаблоны.
//
Процедура ПриОпределенииСозданныхШаблоновСообщений(РезультатПроверки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		Результат = СистемаБыстрыхПлатежейСлужебный.ШаблоныСозданы(
			Перечисления.ВариантыНастройкиСБП.c2b);
		РезультатПроверки.ШаблоныСозданы = Результат.ВсеШаблоны;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатПроверки.Шаблоны,
			Результат.Шаблоны)
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		Результат = СистемаБыстрыхПлатежейСлужебный.ШаблоныСозданы(
			Перечисления.ВариантыНастройкиСБП.b2b);
		РезультатПроверки.ШаблоныСозданы = Результат.ВсеШаблоны;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатПроверки.Шаблоны,
			Результат.Шаблоны)
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании предопределенных шаблоны сообщений.
//
// Параметры:
//  Результат - Массив из Структура - Массив созданных предопределенных шаблонов,
//   элементами массива являются ссылки на справочник ШаблоныСообщений.
//  НастройкиШаблонов - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйНастройкаСозданияШаблонов.
//
Процедура ПриСозданииПредопределенныхШаблоновСообщений(
		Результат,
		НастройкиШаблонов) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		Шаблоны = СистемаБыстрыхПлатежейСлужебный.СоздатьПредопределенныеШаблоныСообщений(
			Перечисления.ВариантыНастройкиСБП.c2b,
			НастройкиШаблонов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		Шаблоны = СистемаБыстрыхПлатежейСлужебный.СоздатьПредопределенныеШаблоныСообщений(
			Перечисления.ВариантыНастройкиСБП.b2b,
			НастройкиШаблонов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат,
			Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании шаблонов сообщений после проверки существования соответствующих подсистем.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//  СозданныеШаблоны - Массив из Структура - Массив созданных предопределенных шаблонов,
//    элементами массива являются ссылки на справочник ШаблоныСообщений.
//  НастройкиШаблонов - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйНастройкаСозданияШаблонов.
//
Процедура ПриСозданииШаблоновСообщений(
		ВариантНастройки,
		СозданныеШаблоны,
		НастройкиШаблонов) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	ПодсистемаОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует(
		"СтандартныеПодсистемы.ОтправкаSMS");
	ПодсистемаОтправкаПочты = ОбщегоНазначения.ПодсистемаСуществует(
		"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	
	СозданныеШаблоны = Новый Массив;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеШаблоны = СистемаБыстрыхПлатежейСлужебный.НовыйНастройкиШаблоновСообщений();
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииПредопределенныхШаблоновСообщений(
		ПредопределенныеШаблоны);
	
	Если Не ПредопределенныеШаблоны.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	ШаблоныДокументов = СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийДокументовОперации();
	
	Свойство = СистемаБыстрыхПлатежейСлужебный.ИдентификаторВариантаНастройки(
		ВариантНастройки);
	
	Для Каждого Шаблон Из ПредопределенныеШаблоны[Свойство] Цикл
		
		Если Не Шаблон.Свойство("ТипШаблона") Тогда // АПК:1416 Поддержка обратной совместимости.
			Продолжить;
		ИначеЕсли Врег(Шаблон.ТипШаблона) <> Врег("SMS") И Врег(Шаблон.ТипШаблона) <> Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли (Не ПодсистемаОтправкаПочты Или Не НастройкиШаблонов.СоздатьШаблоныПисем)
				И Врег(Шаблон.ТипШаблона) = Врег("Письмо") Тогда
			Продолжить;
		ИначеЕсли (Не ПодсистемаОтправкаSMS Или Не НастройкиШаблонов.СоздатьШаблоныSMS)
				И Врег(Шаблон.ТипШаблона) = Врег("SMS") Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСсылка = СистемаБыстрыхПлатежейСлужебный.НайтиПредопределенныйШаблонСообщений(
			Шаблон,
			ШаблоныДокументов[Свойство]);
		
		Если ШаблонСсылка.Пустая() Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Шаблон.ПолноеИмяТипаНазначения);
			Если ОбъектМетаданных = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШаблона = МодульШаблоныСообщений.ОписаниеПараметровШаблона();
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыШаблона,
				Шаблон,
				Истина);
			
			ШаблонСсылка = МодульШаблоныСообщений.СоздатьШаблон(
				Шаблон.Наименование,
				ПараметрыШаблона);
			
			СозданныеШаблоны.Добавить(ШаблонСсылка);
			
		КонецЕсли;
		
		ШаблоныДокументов[Свойство][Шаблон.ТипШаблона].Вставить(
			Шаблон.ПолноеИмяТипаНазначения,
			ШаблонСсылка.УникальныйИдентификатор());
		
	КонецЦикла;
	
	СистемаБыстрыхПлатежейСлужебный.УстановитьСоответствиеШаблоновДокументамОперации(
		ШаблоныДокументов);
	
КонецПроцедуры

// Определяет предопределенные шаблоны и шаблоны документов в зависимости от варианта настройки.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ПредопределенныеШаблоны - Структура - сохраненные предопределенные шаблоны;
//  ШаблоныДокументов - Соответствие - настройки шаблонов документов.
//
Процедура ПриОпределенииШаблоновСообщений(
		ВариантНастройки,
		ПредопределенныеШаблоны,
		ШаблоныДокументов) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	НастройкиДокументов = СистемаБыстрыхПлатежейСлужебный.ШаблоныСообщенийДокументовОперации();
	НастройкиШаблонов = СистемаБыстрыхПлатежейСлужебный.НовыйНастройкиШаблоновСообщений();
	СистемаБыстрыхПлатежейСлужебный.ПриОпределенииПредопределенныхШаблоновСообщений(
		НастройкиШаблонов);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		ПредопределенныеШаблоны = НастройкиШаблонов.c2b;
		ШаблоныДокументов = НастройкиДокументов.c2b;
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		ПредопределенныеШаблоны = НастройкиШаблонов.b2b;
		ШаблоныДокументов = НастройкиДокументов.b2b;
	КонецЕсли;
	
КонецПроцедуры

// Формирует пустую структуру с настройками шаблонов сообщений.
//
// Параметры:
//  НастройкиШаблонов - Структура - настройки шаблонов для различных сценариев оплаты СБП.
//
Процедура ПриФормированииНастроекШаблоновСообщений(НастройкиШаблонов) Экспорт
	
	НастройкиШаблонов = Новый Структура;
	НастройкиШаблонов.Вставить("c2b", Новый Массив);
	НастройкиШаблонов.Вставить("b2b", Новый Массив);
	
КонецПроцедуры

// Формирует описание структуры хранения шаблонов.
//
// Параметры:
//  Шаблоны - Структура - описание хранения шаблонов.
//
Процедура ПриФормированииОписанияШаблонов(Шаблоны) Экспорт
	
	Шаблоныc2b = Новый Соответствие; 
	Шаблоныc2b.Вставить("Письмо", Новый Соответствие);
	Шаблоныc2b.Вставить("SMS", Новый Соответствие);
	
	Шаблоныb2b = Новый Соответствие;
	Шаблоныb2b.Вставить("Письмо", Новый Соответствие);
	Шаблоныb2b.Вставить("SMS", Новый Соответствие);
	
	Шаблоны = Новый Структура;
	Шаблоны.Вставить("c2b", Шаблоныc2b);
	Шаблоны.Вставить("b2b", Шаблоныb2b);
	
КонецПроцедуры

// Сохраняет шаблоны по умолчанию в пользовательских настройках.
//
// Параметры:
//  ПредставлениеОснования - Строка - представление документа.
//  ШаблонСообщенияЭлектроннаяПочта - СправочникСсылка.ШаблоныСообщений - шаблон письма;
//  ШаблонСообщенияТелефон - СправочникСсылка.ШаблоныСообщений - шаблон sms;
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей.
//
// Пример:
//
Процедура ПриСохраненииШаблоновПоУмолчанию(
		ПредставлениеОснования,
		ШаблонСообщенияЭлектроннаяПочта,
		ШаблонСообщенияТелефон,
		ВариантНастройки) Экспорт
	
	Идентификатор = СистемаБыстрыхПлатежейСлужебный.ИдентификаторВариантаНастройки(
		ВариантНастройки);
	
	// Шаблоны электронной почты
	КлючНастроек = "ШаблоныСообщенийЭлектроннойПочты";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Структура;
		ШаблоныПоУмолчанию.Вставить("c2b", Новый Соответствие);
		ШаблоныПоУмолчанию.Вставить("b2b", Новый Соответствие);
	ИначеЕсли ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ШаблоныПоУмолчанию = Новый Структура;
		ШаблоныПоУмолчанию.Вставить("c2b", Настройки);// Миграция старых настроек.
		ШаблоныПоУмолчанию.Вставить("b2b", Новый Соответствие);
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	Если ШаблоныПоУмолчанию.Свойство(Идентификатор) Тогда // АПК:1414 Проверка заполненности.
		ШаблоныПоУмолчанию.Вставить(Идентификатор, Новый Соответствие);
	КонецЕсли;
	
	ШаблоныПоУмолчанию[Идентификатор].Вставить(
		ПредставлениеОснования,
		ШаблонСообщенияЭлектроннаяПочта);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		КлючНастроек,
		ШаблоныПоУмолчанию);
	
	// Шаблоны SMS сообщений
	КлючНастроек = "ШаблоныСообщенийSMS";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Структура;
		ШаблоныПоУмолчанию.Вставить("c2b", Новый Соответствие);
		ШаблоныПоУмолчанию.Вставить("b2b", Новый Соответствие);
	ИначеЕсли ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ШаблоныПоУмолчанию = Новый Структура;
		ШаблоныПоУмолчанию.Вставить("c2b", Настройки);// Миграция старых настроек.
		ШаблоныПоУмолчанию.Вставить("b2b", Новый Соответствие);
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	Если ШаблоныПоУмолчанию.Свойство(Идентификатор) Тогда // АПК:1414 Проверка заполненности.
		ШаблоныПоУмолчанию.Вставить(Идентификатор, Новый Соответствие);
	КонецЕсли;
	
	ШаблоныПоУмолчанию[Идентификатор].Вставить(
		ПредставлениеОснования,
		ШаблонСообщенияТелефон);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		КлючНастроек,
		ШаблоныПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийПрикладныхОпераций

// Определяет доступность переводов в зависимости от прав пользователя.
//
// Параметры:
//  Доступны - Булево - если Истина, функции переводов доступны.
//
Процедура ПриОпределенииДоступностиПереводов(Доступны) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
		Доступны = МодульПереводыСБПc2b.ПереводыСБПДоступны();
	КонецЕсли;
	
	Если Доступны Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2b");
		Доступны = МодульПереводыСБПb2b.ПереводыСБПДоступны();
	КонецЕсли;
	
КонецПроцедуры

// Создает новый заказ на оплату и получает идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату;
//  УдалитьОперацию - Булево - признак удаления операции в случае ошибки создания ссылки;
//  ДанныеЧастичнойОплаты - Структура - описание данных частичной оплаты;
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка.
//
Процедура ПриФормированииДинамическойСсылки(
		ДокументОперации,
		НастройкаПодключения,
		ДополнительныеПараметры,
		УдалитьОперацию,
		ДанныеЧастичнойОплаты,
		РезультатОперации) Экспорт
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		РезультатОперации = МодульПереводыСБПc2bСлужебный.СлужебныйДинамическаяСсылка(
			ДокументОперации,
			НастройкаПодключения,
			ДополнительныеПараметры,
			ДанныеЧастичнойОплаты);
		Если УдалитьОперацию И ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
			МодульПереводыСБПc2b.УдалитьИдентификаторыОперации(
				ДокументОперации);
		КонецЕсли;
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСлужебный");
		РезультатОперации = МодульПереводыСБПb2bСлужебный.СлужебныйДинамическаяСсылка(
			ДокументОперации,
			НастройкаПодключения,
			ДополнительныеПараметры,
			ДанныеЧастичнойОплаты);
		Если УдалитьОперацию И ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			МодульПереводыСБПb2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2b");
			МодульПереводыСБПb2b.УдалитьИдентификаторыОперации(
				ДокументОперации);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий формирования ссылки.'");
	КонецЕсли;
	
КонецПроцедуры

// Создает новый заказ на оплату и получает идентификатор оплаты для формирования QR-кода.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения оплаты;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы операции по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//  ДанныеЧастичнойОплаты - Структура - параметры частичной оплаты.
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка.
//
Процедура ПриАктуализацииСтатусаОплаты(
		ДокументОплаты,
		НастройкаПодключения,
		ПараметрыОперации,
		ДанныеЧастичнойОплаты,
		РезультатОперации) Экспорт
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		РезультатОперации = МодульПереводыСБПc2bСлужебный.АктуализироватьСтатусОплаты(
			ДокументОплаты,
			НастройкаПодключения,
			ПараметрыОперации,
			ДанныеЧастичнойОплаты);
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСлужебный");
		РезультатОперации = МодульПереводыСБПb2bСлужебный.АктуализироватьСтатусОплаты(
			ДокументОплаты,
			НастройкаПодключения,
			ПараметрыОперации,
			ДанныеЧастичнойОплаты);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий формирования ссылки.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку статусов операций СБП, по которым было
// отложено получение результата.
//
// Параметры:
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
Процедура ПриЗагрузкеСтатусовОпераций(ОбработанныеОперации) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
		Если МодульПереводыСБПc2b.ПереводыСБПДоступны() Тогда
			МодульПереводыСБПc2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСервис");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ОбработанныеОперации,
				МодульПереводыСБПc2bСервис.СтатусыОпераций());
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2b");
		Если МодульПереводыСБПb2b.ПереводыСБПДоступны() Тогда
			МодульПереводыСБПb2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСервис");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ОбработанныеОперации,
				МодульПереводыСБПb2bСервис.СтатусыОпераций());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет запрос данных частичных оплат по документу основанию платежа.
//
// Параметры:
//  ЧастиЗапроса - Массив из Строка - части запроса по подсистемам;
//  ШаблонЗапроса - Строка - шаблон для заполнения.
//
Процедура ПриОпределенииЗапросаДанныхЧастичныхОплат(
		ЧастиЗапроса,
		ШаблонЗапроса) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		ЧастиЗапроса.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапроса,
				"ИдентификаторыОперацийСБПc2b"));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		ЧастиЗапроса.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапроса,
				"ИдентификаторыОперацийСБПb2b"));
	КонецЕсли;
	
КонецПроцедуры

// Определяет механизм получения статуса операции оплаты в Системе быстрых платежей.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки
//   подключения к Системе быстрых платежей;
//  ПараметрыСтатуса - Структура - идентификаторы оплаты в Системе быстрых платежей;
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйПараметрыНастройкиПодключения;
//  РезультатПроверки - Структура - результат проверки статуса операции.
//
Процедура ПриПолученииСтатусаОплаты(
		ВариантНастройки,
		ПараметрыСтатуса,
		ПараметрыНастройкиПодключения,
		РезультатПроверки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСервис");
		РезультатПроверки = МодульПереводыСБПc2bСервис.ОпределитьСтатусОплаты(
			ПараметрыСтатуса,
			ПараметрыНастройкиПодключения,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииПроверкиОплаты());
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСервис");
		РезультатПроверки = МодульПереводыСБПb2bСервис.ОпределитьСтатусОплаты(
			ПараметрыСтатуса,
			ПараметрыНастройкиПодключения,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииПроверкиОплаты());
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет механизм поиска и информации об оплате в регистре и устанавливает новое значение
// идентификатора операции, статуса операции, даты операции и даты определения статуса.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройки
//   подключения к Системе быстрых платежей.
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ПараметрыСтатуса - Структура - идентификаторы оплаты в Системе быстрых платежей;
//  РезультатПроверки - Структура - результат проверки статуса операции.
//
Процедура ПриЗаписиСтатусаСтатуса(
		ВариантНастройки,
		ДокументОплаты,
		ПараметрыСтатуса,
		РезультатПроверки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСервис");
		МодульПереводыСБПc2bСервис.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ПараметрыОперации.ИдентификаторОперации,
			РезультатПроверки.ПараметрыОперации.ДатаОперации,
			РезультатПроверки.СтатусОперации,
			РезультатПроверки.ПараметрыОперации.СуммаОперации,
			,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСервис = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСервис");
		МодульПереводыСБПb2bСервис.ЗаписатьСтатусОперации(
			ДокументОплаты,
			РезультатПроверки.ПараметрыОперации.ИдентификаторОперации,
			РезультатПроверки.ПараметрыОперации.ДатаОперации,
			РезультатПроверки.СтатусОперации,
			РезультатПроверки.ПараметрыОперации.СуммаОперации,
			ПараметрыСтатуса.ДатаЗапросаСтатуса);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий записи статуса операции.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки подключения по переданному документу операции.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  ДанныеСсылки - Структура - данные платежной ссылки.
//
Процедура ПриОпределенииДанныхПлатежнойСсылки(
		ВариантНастройки,
		ДокументОплаты,
		ДанныеСсылки) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ДанныеСсылки = МодульПереводыСБПc2bСлужебный.ДанныеПлатежнойСсылки(
			ДокументОплаты);
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСлужебный");
		ДанныеСсылки = МодульПереводыСБПb2bСлужебный.ДанныеПлатежнойСсылки(
			ДокументОплаты);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки подключения по переданному документу операции.
//
// Параметры:
//  ВариантНастройки - ПеречислениеСсылка.ВариантыНастройкиСБП - вариант настройкиСистемы быстрых платежей;
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  ДанныеОперации - Структура - данные операции по документу.
//
Процедура ПриОпределенииДанныхОперации(
		ВариантНастройки,
		ДокументОперации,
		ДанныеОперации) Экспорт
	
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ДанныеОперации = МодульПереводыСБПc2bСлужебный.ДанныеОперации(
			ДокументОперации);
	ИначеЕсли ВариантНастройки = Перечисления.ВариантыНастройкиСБП.b2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2bСлужебный");
		ДанныеОперации = МодульПереводыСБПb2bСлужебный.ДанныеОперации(
			ДокументОперации);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось определить сценарий определения статуса операции.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку удаления идентификаторов операции документа.
//
// Параметры:
//  ДокументОперации - ДокументСсылка.ПлатежнаяСсылкаСБП - удаляемый документ.
//
Процедура ПередУдалениемДокументаПлатежнаяСсылка(ДокументОперации) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
		МодульПереводыСБПc2b.УдалитьИдентификаторыОперации(
			ДокументОперации);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		МодульПереводыСБПb2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2b");
		МодульПереводыСБПb2b.УдалитьИдентификаторыОперации(
			ДокументОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийОтправкиСсылки

// Заполняет настройки формы отправки платежной ссылки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма отправки платежной ссылки.
//  Отказ - Булево - признак отказа от открытия.
//
Процедура ПриСозданииНаСервереФормыОтправкиСсылки(Форма, Отказ) Экспорт
	
	Если (Форма.Параметры.НастройкиПодключения.c2b.Количество() + Форма.Параметры.НастройкиПодключения.b2b.Количество()) = 1 Тогда
		Форма.НастройкаПодключения = ?(Форма.Параметры.НастройкиПодключения.c2b.Количество() = 1,
			Форма.Параметры.НастройкиПодключения.c2b[0],
			Форма.Параметры.НастройкиПодключения.b2b[0]);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список доступных для выбора настроек.
//
// Параметры:
//  НастройкиПодключения - Структура - найденные настройки подключения;
//  НастройкиПодключенияФорма - ДанныеФормыКоллекция - список настроек на форме;
//  НастройкиПодключенияДокумента - Массив из СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - 
//   настройки для которых ранее была сгенерирована ссылка.
//
Процедура ПриЗаполненииСпискаДоступныхНастроекФормы(
		НастройкиПодключения,
		НастройкиПодключенияФорма,
		НастройкиПодключенияДокумента) Экспорт
	
	Для Каждого НастройкаПодключения Из НастройкиПодключения.c2b Цикл
		НоваяНастройкаПодключения = НастройкиПодключенияФорма.Добавить();
		НоваяНастройкаПодключения.НастройкаПодключения = НастройкаПодключения;
		НоваяНастройкаПодключения.Картинка = 2;
		Если НастройкиПодключенияДокумента.Найти(НастройкаПодключения) <> Неопределено Тогда
			НоваяНастройкаПодключения.СсылкаСоздана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НастройкаПодключения Из НастройкиПодключения.b2b Цикл
		НоваяНастройкаПодключения = НастройкиПодключенияФорма.Добавить();
		НоваяНастройкаПодключения.НастройкаПодключения = НастройкаПодключения;
		НоваяНастройкаПодключения.Картинка = 3;
		Если НастройкиПодключенияДокумента.Найти(НастройкаПодключения) <> Неопределено Тогда
			НоваяНастройкаПодключения.СсылкаСоздана = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийТехническойПоддержки

// Вызывается при формировании информации для тех. поддержки, которую можно
// использовать для оперативного расследования ошибок.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    продажу в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций.
//  ТекстСообщения - Строка - информация для технической поддержки.
//
Процедура ПриФормированииИнформацииДляТехническойПоддержки(
		ДокументОплаты,
		НастройкаПодключения,
		ТекстСообщения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		МодульПереводыСБПc2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2b");
		Если Не МодульПереводыСБПc2b.ПереводыСБПДоступны() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		МодульИдентификаторыОперацийСБПc2b = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ИдентификаторыОперацийСБПc2b");
		ТекстСообщения = ТекстСообщения + МодульИдентификаторыОперацийСБПc2b.ИнформацияДляТехническойПоддержки(
			ДокументОплаты);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b") Тогда
		
		МодульПереводыСБПb2b = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПb2b");
		Если Не МодульПереводыСБПb2b.ПереводыСБПДоступны() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа. Пользователю запрещено выполнение операций в Системе быстрых платежей.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		МодульИдентификаторыОперацийСБПb2b = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.ИдентификаторыОперацийСБПb2b");
		ТекстСообщения = ТекстСообщения + МодульИдентификаторыОперацийСБПb2b.ИнформацияДляТехническойПоддержки(
			ДокументОплаты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийОнлайнЗаказов

// Выполняет заполнение параметров оплат СБП документа операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, для которого
//    формируются параметры оплат.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - настройка подключения к СБП.
//  ПараметрыОплат - Структура - Содержит описание параметров оплат по способам:
//    *c2b - Структура, Неопределенно - Параметры оплат c2b,
//    Неопределено если подсистема ПереводыСБПc2b не используется.
//
Процедура ПриФормированииПараметровОплат(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыОплат) Экспорт
	
	ПараметрыОплат = Новый Структура;
	ПараметрыОплат.Вставить("c2b", Неопределено);
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
			И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
			
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ПараметрыОплат.c2b = МодульПереводыСБПc2bСлужебный.ПараметрыОплаты(
			НастройкаПодключения,
			ДокументОперации);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подготовку параметров оплаты заказа для записи в соответствующие подсистемы.
//
// Параметры:
//  ДанныеЗаказа - Структура - Содержит данные заказа
//    * ИдентификаторЗаказа - Строка - Идентификатор онлайн-заказа;
//    * Статус - Строка - Статус онлайн-заказа;
//    * СуммаЗаказа - Число - Сумма онлайн-заказа;
//    * СпособОплаты - Перечисление.СпособыОплатыОнлайнЗаказов - Способ оплаты онлайн-заказа;
//    * ДатаОплаты - дата получения данных об оплате сервисом;
//    * КонтрольнаяСумма - Строка - Значение контрольной суммы заказа;
//    * ВерсияКонтрольнойСуммы - Число - Версия расчета контрольной суммы заказа;
//    * ОплатаСБП - Структура, Неопределено - Содержит данные операции СБП, в том случае когда
//      значение Свойства СпособОплаты = Перечисления.СпособыОплатыОнлайнЗаказов.СБПc2b:
//      ***ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//      ***ИдентификаторПлатежнойСистемы - Строка - идентификатор оплаты в Системе быстрых платежей;
//      ***ДатаОперации - Дата - фактическая дата оплаты в UTC;
//      ***ИдентификаторМерчанта - Строка - идентификатор мерчанта в Системе быстрых платежей;
//      ***НазначениеПлатежа - Строка - назначение платежа;
//  ПараметрыНастройкиОплаты - Структура - Содержит параметры настройки вида оплаты;
//  ПараметрыОплаты - Соответствие - Содержит параметры оплат в разрезе ее способов;
//  ВариантНастройки - Перечисления.ВариантыНастройкиСБП - Вариант настройки СБП.
//
Процедура ПриЗаполненииПараметровОплаты(
		ДанныеЗаказа,
		ПараметрыНастройкиОплаты,
		ПараметрыОплаты,
		ВариантНастройки) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ПараметрыОплаты.Вставить(
			"СБПc2b",
			МодульПереводыСБПc2bСлужебный.ЗаполнитьПараметрыОплаты(
				ДанныеЗаказа,
				ПараметрыНастройкиОплаты));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись параметров оплаты заказа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ по которому была выполнена оплата;
//  ПараметрыОплаты - Структура - Содержит параметры оплаты;
//  ПараметрыНастройкиОплаты - Структура - параметры настройки оплаты;
//    * ИдентификаторУчастника - Строка - идентификатор участника системы быстрых платежей;
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей
//      - настройка подключения к СБП.
//  ВариантНастройки - Перечисления.ВариантыНастройкиСБП - Вариант настройки СБП.
//
Процедура ПриЗаписиДанныхОплаты(
		ДокументОперации,
		ПараметрыОплаты,
		ПараметрыНастройкиОплаты,
		ВариантНастройки) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ЗаписатьДанныеОплаты(
			ДокументОперации,
			ПараметрыОплаты,
			ПараметрыНастройкиОплаты);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение данных оплат по переданным документам операций.
//
// Параметры:
// ДанныеОпераций  - Структура 
//  ДокументыОпераций - Массив Из ОпределяемыйТип.ДокументОперацииСБП - перечень документов,
//  по которым необходимо получить данные оплат.
//  ДанныеОпераций - Соответствие - см.ПереводыСБПc2bСлужебный.ДанныеОпераций
//  ВариантНастройки - Перечисления.ВариантыНастройкиСБП - Вариант настройки СБП.
//
Процедура ПриПолученииДанныхОплат(
		ДокументыОпераций,
		ДанныеОпераций,
		ВариантНастройки) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		ДанныеОпераций = МодульПереводыСБПc2bСлужебный.ДанныеОпераций(
			ДокументыОпераций);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку назначения платежа.
//
// Параметры:
//  НазначениеПлатежа - Строка - Назначение платежа для способа оплаты;
//  ВариантНастройки - Перечисления.ВариантыНастройкиСБП - Вариант настройки СБП.
//
Процедура ПриПодготовкеНазначенияПлатежа(
		НазначениеПлатежа,
		ВариантНастройки) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПодготовитьНазначениеПлатежа(НазначениеПлатежа);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку параметров оплат.
//
// Параметры:
//  ПараметрыОплаты - Структура - Содержит параметры оплат онлайн-заказа;
//  РезультатОперации - Структура - результат выполнения операции;
//  ВариантНастройки - Перечисления.ВариантыНастройкиСБП - Вариант настройки СБП.
//
Процедура ПриПроверкеПараметровОплат(
		ПараметрыОплаты,
		РезультатОперации,
		ВариантНастройки) Экспорт
	
	Если ВариантНастройки = Перечисления.ВариантыНастройкиСБП.c2b
		И ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПc2b") Тогда
		
		МодульПереводыСБПc2bСлужебный = ОбщегоНазначения.ОбщийМодуль("ПереводыСБПc2bСлужебный");
		МодульПереводыСБПc2bСлужебный.ПроверитьПараметрыОплат(ПараметрыОплаты, РезультатОперации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
