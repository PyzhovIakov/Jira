////////////////////////////////////////////////////////////////////////////////
// Работа с HTML.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаТекстаHTML

// Добавляет к тексту в формате HTML другой текст в формате HTML
// Из добавляемого текста берется только внутренность тега <body>, если он там присутствует
// иначе добавляется весь ДобавляемыйТекстHTML.
//
// Параметры:
//  ТекстHTML			 - Строка	 - Текст в формате HTML.
//  ДобавляемыйТекстHTML - Строка	 - Добавляемый текст в формате HTML.
//
Процедура ДобавитьТекстHTML(ТекстHTML, ДобавляемыйТекстHTML) Экспорт
	
	РазложенныйТекстHTML = РазложитьТекстHTML(ТекстHTML);
	РазложенныйДобавляемыйТекстHTML = РазложитьТекстHTML(ДобавляемыйТекстHTML);
	
	ТекстHTML = РазложенныйТекстHTML.Заголовок
		+ РазложенныйТекстHTML.Тело
		+ РазложенныйДобавляемыйТекстHTML.Тело
		+ РазложенныйТекстHTML.Окончание;
	
КонецПроцедуры

// Возвращает структуру "Заголовок, Тело, Окончание",
//  где ТекстHTML = Заголовок + Тело + Окончание
//  и Тело - содержимое тега body
//
// Параметры:
//  ТекстHTML	 - Строка	 - Текст в формате HTML.
//
// Возвращаемое значение:
//   - Структура
//
Функция РазложитьТекстHTML(ТекстHTML) Экспорт
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияНачалаТела = 1;
	ПозицияОкончанияТела = СтрДлина(ТекстHTML);
	
	ПозицияНачалаТегаHTML = СтрНайти(НРегТекстHTML, "<html");
	Если ПозицияНачалаТегаHTML > 0 Тогда
		ПозицияОкончанияТегаHTML = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаHTML);
		Если ПозицияОкончанияТегаHTML > 0 Тогда
			ПозицияНачалаТела = ПозицияОкончанияТегаHTML + 1;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияНачалаТегаBODY = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, "<body", ПозицияНачалаТела - 1);
	Если ПозицияНачалаТегаBODY > 0 Тогда
		ПозицияОкончанияТегаBODY = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаBODY);
		Если ПозицияОкончанияТегаBODY > 0 Тогда
			ПозицияНачалаТела = ПозицияОкончанияТегаBODY + 1;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияНачалаЗакрывающегоТегаBODY = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, "</body>", ПозицияНачалаТела - 1, Истина);
	Если ПозицияНачалаЗакрывающегоТегаBODY > 0 Тогда
		ПозицияОкончанияТела = ПозицияНачалаЗакрывающегоТегаBODY - 1;
	Иначе
		ПозицияНачалаЗакрывающегоТегаHTML = CRM_РаботаСHTML.НайтиПосле(НРегТекстHTML, "</html>", ПозицияНачалаТела - 1, Истина);
		Если ПозицияНачалаЗакрывающегоТегаHTML > 0 Тогда
			ПозицияОкончанияТела = ПозицияНачалаЗакрывающегоТегаHTML - 1;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = Лев(ТекстHTML, ПозицияНачалаТела - 1);
	Тело = Сред(ТекстHTML, ПозицияНачалаТела, ПозицияОкончанияТела - ПозицияНачалаТела + 1);
	Окончание = Сред(ТекстHTML, ПозицияОкончанияТела + 1);
	
	Результат = Новый Структура("Заголовок, Тело, Окончание", Заголовок, Тело, Окончание);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру "ВведенныйТекст, Цитирование",
//  где ТелоHTML = ВведенныйТекст + Цитирование,
//  для вставки подписи между введенным текстом и цитируемым текстом связанного письма
//
// Параметры:
//  ТелоHTML - Строка	 - Текст в формате HTML.
// 
// Возвращаемое значение:
//   - Структура
//
Функция РазложитьТелоHTML(ТелоHTML) Экспорт
	
	НРегТелоHTML = НРег(ТелоHTML);
	ПозицияНачалаЦитирования = СтрНайти(НРегТелоHTML, "<blockquote class=""source-text""");
	
	Если ПозицияНачалаЦитирования > 0 Тогда
		ВведенныйТекст = Лев(ТелоHTML, ПозицияНачалаЦитирования - 1);
		Цитирование = Сред(ТелоHTML, ПозицияНачалаЦитирования);
	Иначе
		ВведенныйТекст = ТелоHTML;
		Цитирование = "";
	КонецЕсли;
	
	Результат = Новый Структура("ВведенныйТекст, Цитирование", ВведенныйТекст, Цитирование);
	
	Возврат Результат;
	
КонецФункции

// Ищет подстроку в строке, после указанной позиции
//
// Параметры:
//  Строка			 - Строка	 - Строка, в которой выполняется поиск.
//  Подстрока		 - Строка	 - Подстрока, которую нужно найти.
//  НачальнаяПозиция - Число	 - Начальная позиция поиска.
//  ИскатьСКонца	 - Булево	 - Признак поиска с конца.
// 
// Возвращаемое значение:
//   - Число
//
Функция НайтиПосле(Строка, Подстрока, НачальнаяПозиция = 0, ИскатьСКонца = Ложь) Экспорт
	
	Если СтрДлина(Строка) <= НачальнаяПозиция Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ИскатьСКонца Тогда
		Строрка = Сред(Строка, НачальнаяПозиция + 1);
		Позиция = СтрНайти(Строка, Подстрока, НаправлениеПоиска.СКонца);
	Иначе
		Позиция = СтрНайти(Строка, Подстрока, , НачальнаяПозиция + 1);
	КонецЕсли;
	
	Возврат Позиция;
	
КонецФункции

// Заменяет в строке все спецсимволы на соответствующие им имена,
// возвращает измененную строку.
//
// Параметры:
//  Строка		 - Строка - Строка.
//  СпецСимволыСоотв - Соответствие - Соответствие специальных символов.
//
// Возвращаемое значение:
//	Строка - строка с замененными символами.
//
Функция ЗаменитьСпецСимволыHTML(Строка, СпецСимволыСоотв = Неопределено) Экспорт
	
	СоответствиеСпецСимволов = CRM_РаботаСHTMLПовтИсп.ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	НоваяСтрока = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, Поз);
		ИмяСимвола = СоответствиеСпецСимволов.Получить(Код);
		
		Если ИмяСимвола = Неопределено Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код);
		Иначе
			НоваяСтрока = НоваяСтрока + "&" + ИмяСимвола + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Строка = НоваяСтрока;
	
	Возврат Строка;
	
КонецФункции

// Удаляет вредоносный код html из текста.
//
// Параметры:
//   Текст - Строка - текст
//
Процедура УдалитьВредоносныйКодИзТекста(Текст) Экспорт
	
	НРегТекст = НРег(Текст);
	
	МассивСтрокБезВредоносногоТекста = Новый Массив;
	
	// Удаление скриптов
	НомерСкрипта = 1;
	ПозицияНачалаОбработки = 1;
	
	Пока Истина Цикл
		
		ПозицияНачалаОткрывающегоТегаScript = СтрНайти(НРегТекст, "<script", , , НомерСкрипта);
		ПозицияНачалаЗакрывающегоТегаScript = СтрНайти(НРегТекст, "</script", , , НомерСкрипта);
		
		Если ПозицияНачалаОткрывающегоТегаScript = 0 Или ПозицияНачалаЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияОкончанияОткрывающегоТегаScript = СтрНайти(НРегТекст, ">", , ПозицияНачалаОткрывающегоТегаScript + 1);
		ПозицияОкончанияЗакрывающегоТегаScript = СтрНайти(НРегТекст, ">", , ПозицияНачалаЗакрывающегоТегаScript + 1);
		
		Если ПозицияОкончанияОткрывающегоТегаScript = 0 Или ПозицияОкончанияЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Добавим текст до скрипта
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки, ПозицияНачалаОткрывающегоТегаScript - ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		ПозицияНачалаОбработки = ПозицияОкончанияЗакрывающегоТегаScript + 1;
		НомерСкрипта = НомерСкрипта + 1;
		
	КонецЦикла;
	
	Если МассивСтрокБезВредоносногоТекста.Количество() > 0 Тогда
		
		// Добавим текст после последнего скрипта.
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		// Сформируем итоговую строку без скрипта.
		Текст = СтрСоединить(МассивСтрокБезВредоносногоТекста);
	КонецЕсли;
	
КонецПроцедуры

// Формирует описание стиля цитирования
// 
// Возвращаемое значение:
//  Строка - Описание стиля цитирования.
//
Функция ПолучитьСтильЦитированияПриОтвете() Экспорт
	
	ТекстСтиля = "style = 'border:none;border-left:solid #7eaae3 1.5pt;padding:0cm 0cm 0cm 4pt;margin:0cm;'";
	
	Возврат ТекстСтиля;
	
КонецФункции

// Переносит содержимое <style> в теге <head> из исходного текста.
//
// Параметры:
//  ТекстHTML - Строка - Текст, в который следует перенести теги.
//  ИсходныйТекстHTML - Строка - Текст, из которого следует взять теги.
//
Процедура ПеренестиСтили(ТекстHTML, ИсходныйТекстHTML) Экспорт
	
	// Формируем текст head для переноса
	ТегHead = ПолучитьТегВТекстеHTML(ИсходныйТекстHTML, "head");
	Если Не ЗаполненаСтруктураТега(ТегHead) Тогда
		// Нет тега head - невозможно перенести style и base
		Возврат;
	КонецЕсли;
	ОбрабатываемыйТекстHTML = ТегHead.Содержание;
	
	// Стили нового текста для проверки.
	СтилиНовогоТекста = Новый Массив;
	НайденныйТег = ПолучитьТегВТекстеHTML(ТекстHTML, "style");
	Пока ЗаполненаСтруктураТега(НайденныйТег) Цикл
		
		СодержаниеСтиля = СокрЛП(СтрЗаменить(НайденныйТег.Содержание, Символы.ПС, ""));
		СтилиНовогоТекста.Добавить(СодержаниеСтиля);
		
		НайденныйТег = ПолучитьТегВТекстеHTML(ОбрабатываемыйТекстHTML, "style",
			НайденныйТег.ПозицияОкончанияТега + 1);
		
	КонецЦикла;
	
	// Включаем текст style для переноса.
	ПереносимоеСодержимое = "";
	НайденныйТег = ПолучитьТегВТекстеHTML(ОбрабатываемыйТекстHTML, "style");
	Пока ЗаполненаСтруктураТега(НайденныйТег) Цикл
		
		СодержаниеСтиля = СокрЛП(СтрЗаменить(НайденныйТег.Содержание, Символы.ПС, ""));
		ТекстСтиля = Сред(ОбрабатываемыйТекстHTML, НайденныйТег.ПозицияНачалаТега,
			НайденныйТег.ПозицияОкончанияТега - НайденныйТег.ПозицияНачалаТега + 1);
		
		Если СтилиНовогоТекста.Найти(СодержаниеСтиля) = Неопределено Тогда
			ПереносимоеСодержимое = ПереносимоеСодержимое + ТекстСтиля;
		КонецЕсли;
		
		НайденныйТег = ПолучитьТегВТекстеHTML(ОбрабатываемыйТекстHTML, "style",
			НайденныйТег.ПозицияОкончанияТега + 1);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПереносимоеСодержимое) Тогда
		Возврат;
	КонецЕсли;
	
	// Дописываем сформированное содержимое head в head целевого текста.
	ДобавитьВТегHead(ТекстHTML, ПереносимоеСодержимое);
	
КонецПроцедуры

// Возвращает структуру первого тега данного элемента в тексте HTML.
//  Если не указано название элемента то возвращает первый встреченный тег.
//  Поиск тега ведется с переданной начальной позиции
//  Структура тега:
//  НазваниеЭлемента - название элемента найденного тега
//  ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега
//  Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом
//  ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега
//  ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега
//  ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега
//  ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега
//  ПозицияНачалаТега - позиция символа "<" открывающего тега
//  ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега
//  если нет закрывающего тега, то позиция символа ">" открывающего тега
//
// Параметры:
//  ТекстHTML		 - Строка	 - Текст в формате HTML.
//  НазваниеЭлемента - Стпрка	 - Название искомого тега элемента.
//  НачальнаяПозиция - Число	 - Начальная позиция.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1) Экспорт
	
	// Определение первого тега
	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда
		
		НачалоОткрывающегоТега = "<";
		НазваниеТега = "";
		
		ОбрабатываемыйТекстHTML = ТекстHTML;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
			
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
			
			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;
				
				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл
					
					НазваниеТега = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
					
				КонецЦикла;
				
				ПозицияНачалаОткрывающегоТега = 0;
				
			Иначе
				
				ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НазваниеТега) Тогда
			
			НазваниеЭлемента = НазваниеТега;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазваниеЭлемента = "blockquote" Тогда
		РазрешитьВложенныеТеги = Истина;
	Иначе
		РазрешитьВложенныеТеги = Ложь;
	КонецЕсли;
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега = ">";
	ЗакрывающийТег = "</" + НРег(НазваниеЭлемента) + ">";
	ОбрабатываемыйТекстHTML = НРег(Сред(ТекстHTML, НачальнаяПозиция));
	Смещение = НачальнаяПозиция - 1;
	
	СтруктураТега = СформироватьСтруктуруТега();
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	ПозицияНачалаОткрывающегоТега = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	Если ПозицияНачалаОткрывающегоТега = 0 Тогда
		// Если нет начала открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
	Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;
	
	ПозицияОкончанияОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
	Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
		// Если нет окончания открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
	Смещение = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
	
	Если РазрешитьВложенныеТеги Тогда
		
		ПозицияНачалаЗакрывающегоТега = 0;
		КоличествоОткрытыхТегов = 1;
		Пока КоличествоОткрытыхТегов > 0 Цикл
			
			БлижайшийЗакрывающийТег = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
			Если БлижайшийЗакрывающийТег = 0 Тогда
				// Нет больше тегов.
				Прервать;
			КонецЕсли;
			
			БлижайшийОткрывающийТег = ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
			Если БлижайшийОткрывающийТег = 0 Или БлижайшийЗакрывающийТег < БлижайшийОткрывающийТег Тогда
				
				// Найден закрывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов - 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег) - 1;
				
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег));
				
			Иначе
				
				// Найден открывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов + 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега));
				
				БлижайшееОкончаниеОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					// Если нет окончания открывающего тега, то тега нет
					Прервать;
				КонецЕсли;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОткрытыхТегов <> 0 Тогда
			ПозицияНачалаЗакрывающегоТега = 0;
		Иначе
			ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега - СтрДлина(ЗакрывающийТег) + 1;
		КонецЕсли;
		
	Иначе
		
		ПозицияНачалаЗакрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		
	КонецЕсли;
	
	// Заполнение позиций в тексте HTML и содержания.
	ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
	ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	Иначе
		Содержание = "";
		ПозицияОкончанияЗакрывающегоТега = 0;
	КонецЕсли;
	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	Иначе
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;
	
	// Заполнение структуры тега
	СтруктураТега.ПараметрыОткрывающегоТега = ПараметрыОткрывающегоТега;
	СтруктураТега.Содержание = Содержание;
	СтруктураТега.ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега;
	СтруктураТега.ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега;
	СтруктураТега.ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега;
	СтруктураТега.ПозицияОкончанияЗакрывающегоТега = ПозицияОкончанияЗакрывающегоТега;
	СтруктураТега.ПозицияНачалаТега = ПозицияНачалаТега;
	СтруктураТега.ПозицияОкончанияТега = ПозицияОкончанияТега;
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	Возврат СтруктураТега;
	
КонецФункции

// Проверяет заполненность структуры тега:
//  - наличие всех необходимых тегу свойств в структуре;
//  - заполненность позиции начала и окончания тега.
//
// Параметры:
//  СтруктураТега	 - Структура	 - Структура тега.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЗаполненаСтруктураТега(СтруктураТега) Экспорт
	
	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		ИЛИ (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("Содержание"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Добавляет скрипт обработки вставки гиперссылки в HTML
//
// Параметры:
//  ТекстHTML - Строка - Текст, в который следует добавить скрипт.
//  Стереть - Булева - Флаг необходимости убрать вставленный скрипт.
//
Процедура УстановитьУбратьСкриптВставки(ТекстHTML, Стереть = Ложь) Экспорт
	
	СкриптВставкиГиперссылок = 
	"<script>
	|  function referencePasteOnInit() {
	|    if (typeof String.prototype.replaceAll == ""undefined"") {
	|      String.prototype.replaceAll = function (match, replace) {
	|        return this.split(match).join(replace);
	|      }
	|    }
	|
	|    document.body.onpaste = function (event) {
	|      var upperElement = event.target;
	|      if (upperElement.nodeName === ""BR"") {
	|        upperElement = document.body;
	|      } else {
	|        while (upperElement && upperElement.parentNode !== document.body) {
	|          upperElement = upperElement.parentNode;
	|        }
	|      }
	|      
	|      setTimeout(
	|        function replaceAllRefs(targetElement) {
	|          if (!targetElement || targetElement.nodeName === ""A"") {
	|            return;
	|          } else if (targetElement.nodeName === ""#text"") {
	|            var textContent = """";
	|            if (targetElement.textContent) {
	|              textContent = targetElement.textContent;
	|            } else {
	|              textContent = targetElement.innerText
	|                ? targetElement.innerText
	|                : """";
	|            }
	|
	|            var refs = textContent.match(/http\S*/g);
	|
	|            if (refs !== null) {
	|              (new Set(refs)).forEach((refText) => {
	|                 textContent = textContent.replaceAll(
	|                   refText,
	|                   '<a href=""' +
	|                    refText +
	|                    '"" target=""_blank"">' +
	|                    refText +
	|                    ""</a>""
	|                );
	|              });
	|
	|              var elementsToPush = stringToHTMLFragment(textContent);
	|              var parentFragmentElement = document.createElement('span');
	|              
	|              parentFragmentElement.appendChild(elementsToPush);
	|
	|              targetElement.parentNode.insertBefore(parentFragmentElement, targetElement);
	|              targetElement.parentNode.removeChild(targetElement);
	|            }
	|          } else if (targetElement.childNodes) {
	|            var childs = targetElement.childNodes;
	|            for (var i = 0; i < childs.length; i++) {
	|              replaceAllRefs(childs[i]);
	|            }
	|          }
	|        },
	|        150,
	|        upperElement
	|      );
	|    };
	|  }
	|
	|  function stringToHTMLFragment(string) {
	|    var contextRange = document.createRange();
	|    contextRange.setStart(document.body, 0);
	|
	|    return contextRange.createContextualFragment(string);
	|  }
	|</script>";
	
	Если Стереть Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, СкриптВставкиГиперссылок, "");
	Иначе
		Если СтрНайти(ТекстHTML, "<head>") = 0 Тогда
			ТекстHTML = СтрЗаменить(ТекстHTML, "<html>", "<html><head>" + СкриптВставкиГиперссылок + "</head>");
		Иначе
			ТекстHTML = СтрЗаменить(ТекстHTML, "<head>", "<head>" + СкриптВставкиГиперссылок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьУбратьСкриптВставки()

#КонецОбласти

#Область РаботаСКартинками

// Функция возвращает ссылку на картинку во временном хранилище.
//
// Параметры:
//  Картинка				 - Произвольный	 - Картинка.
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - Уникальный идентификатор.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьСсылкуНаКартинкуВоВременномХранилище(Картинка, УникальныйИдентификатор) Экспорт
	
	НавигационнаяСсылкаНаКартинку = ПоместитьВоВременноеХранилище(
		Картинка, УникальныйИдентификатор);
	
	Возврат ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(НавигационнаяСсылкаНаКартинку);
	
КонецФункции // ПолучитьСсылкуНаКартинкуВоВременномХранилище()

// Функция возвращает нормализованную ссылку временного хранилища для HTML.
//
// Параметры:
//  НавигационнаяСсылкаНаКартинку	 - Строка	 - Навигационная ссылка на картинку.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(НавигационнаяСсылкаНаКартинку) Экспорт
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	
	ВырезатьПараметры(НавигационнаяСсылкаИнформационнойБазы);
	
	НавигационнаяСсылкаИнформационнойБазы = ?(
		СтрЗаканчиваетсяНа(НавигационнаяСсылкаИнформационнойБазы, "/"),
		НавигационнаяСсылкаИнформационнойБазы,
		НавигационнаяСсылкаИнформационнойБазы + "/");
	
	Возврат НавигационнаяСсылкаИнформационнойБазы + НавигационнаяСсылкаНаКартинку;
	
КонецФункции // ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML()

// Процедура вырезает параметры из переданной навигационной ссылки ИБ.
//
// Параметры:
//  НавигационнаяСсылкаИнформационнойБазы	 - Строка	 - Навигационная ссылка ИБ.
//
Процедура ВырезатьПараметры(НавигационнаяСсылкаИнформационнойБазы) Экспорт
	
	ПозПарам = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");
	Если ПозПарам > 0 Тогда
		НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозПарам - 1);
	КонецЕсли;
	
КонецПроцедуры // ВырезатьПараметры()

// Процедура вырезает порт из переданной навигационной ссылки ИБ.
//
// Параметры:
//  НавигационнаяСсылкаИнформационнойБазы	 - Строка	 - Навигационная ссылка ИБ.
//
Процедура ВырезатьПорт(НавигационнаяСсылкаИнформационнойБазы) Экспорт
	
	Если СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "https://") <> 0 
		Или СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "http://") <> 0 Тогда
		
		ПозицияДвоеточия = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, ":", НаправлениеПоиска.СНачала, СтрДлина("https://")+1);
		Если ПозицияДвоеточия <> 0 Тогда 
			
			ПозицияСлеша = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "/", НаправлениеПоиска.СНачала, СтрДлина("https://")+1);
			Если ПозицияСлеша <> 0 И ПозицияДвоеточия < ПозицияСлеша Тогда
				
				НавигационнаяСсылкаИнформационнойБазы = 
					Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияДвоеточия - 1)
					+ Сред(НавигационнаяСсылкаИнформационнойБазы, ПозицияСлеша);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВырезатьПорт()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаТекстаHTML

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

#КонецОбласти

// Дописывает текст в начало тега head. Если тега head нет - то создает его в начале тега html.
// Если тега html нет - то создает его, помещая текст HTML в содержимое тега body.
//
// Параметры::
//  ТекстHTML - Обрабатываемый текст HTML, в который могут быть добавлены теги.
//  ДобавляемыйТекст - Текст, который будет добавлен в тег head.
//
Процедура ДобавитьВТегHead(ТекстHTML, ДобавляемыйТекст)
	
	// Если тега head нет, то его следует создать
	ТегHead = ПолучитьТегВТекстеHTML(ТекстHTML, "head");
	Если Не ЗаполненаСтруктураТега(ТегHead) Тогда
		
		// Если тега html нет, то его следует создать
		ТегHTML = ПолучитьТегВТекстеHTML(ТекстHTML, "html");
		Если Не ЗаполненаСтруктураТега(ТегHTML) Тогда
			
			// Если тега body нет, то его следует создать
			ТегBody = ПолучитьТегВТекстеHTML(ТекстHTML, "body");
			Если Не ЗаполненаСтруктураТега(ТегBody) Тогда
				ТекстHTML = "<body>" + ТекстHTML + "</body>";
			КонецЕсли;
			
			ТекстHTML = "<html>" + ТекстHTML + "</html>";
			ТегHTML = ПолучитьТегВТекстеHTML(ТекстHTML, "html");
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, ТегHTML.ПозицияОкончанияОткрывающегоТега)
			+ "<head></head>"
			+ Сред(ТекстHTML, ТегHTML.ПозицияОкончанияОткрывающегоТега + 1);
		ТегHead = ПолучитьТегВТекстеHTML(ТекстHTML, "head");
		
	КонецЕсли;
	
	ТекстHTML = Лев(ТекстHTML, ТегHead.ПозицияОкончанияОткрывающегоТега)
		+ ДобавляемыйТекст
		+ Сред(ТекстHTML, ТегHead.ПозицияОкончанияОткрывающегоТега + 1);
	
КонецПроцедуры

// Формирует пустую структуру тега
//
// Возвращаемое значение:
//  Структура - НазваниеЭлемента - Строка - Имя тега
//            - ПараметрыОткрывающегоТега - Строка - Параметры тега
//            - Содержание - Строка - Текстовое содержимое тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа ">" открывающего тега
//            - ПозицияНачалаЗакрывающегоТега - Число - Позиция символа "<" закрывающего тега.
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияОкончанияЗакрывающегоТега - Число - Позиция символа ">" открывающего тега
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияНачалаТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияОкончанияТега - Число - Позиция символа ">" закрывающего тега. Если нет 
//                                             закрывающего тега, то содержит позицию символа ">"
//                                             открывающего тега.
//
Функция СформироватьСтруктуруТега()
	
	Тег = Новый Структура;
	Тег.Вставить("НазваниеЭлемента", "");
	Тег.Вставить("ПараметрыОткрывающегоТега", "");
	Тег.Вставить("Содержание", "");
	Тег.Вставить("ПозицияНачалаОткрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияОткрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаТега", 0);
	Тег.Вставить("ПозицияОкончанияТега", 0);
	
	Возврат Тег;
	
КонецФункции

// Определяет позицию открывающего тега в переданном тексте
Функция ПолучитьПозициюНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега)
	
	ПозицияНачалаОткрывающегоТега = 0;
	
	ВозможнаяПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	СледующийСимвол = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 1);
	
	Если СледующийСимвол = " " Или СледующийСимвол = Символы.ПС Или СледующийСимвол = ">" Тогда
		ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
	ИначеЕсли СледующийСимвол = "/" Тогда
		СледующиеДваСимвола = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 2);
		Если СледующиеДваСимвола = "/>" Тогда
			ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПозицияНачалаОткрывающегоТега;
	
КонецФункции

#КонецОбласти
