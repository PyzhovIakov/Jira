///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Маг1С"
// ОбщийМодуль.Маг1ССервер
//
// Все серверные процедуры и функции для работы с mag1c
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПередЗапускомПрограммы
//
Процедура ПередЗапускомПрограммы() Экспорт
	
	 ПроверитьУстановкуРасширенияИВзвестиКонстанту();
	
КонецПроцедуры

// Добавляет комады в параметр Команды, а так же озвращает массив добавленный подключенных команд
//
// Параметры:
// 	См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
// Возвращаемое значение:
//  - Массив из СтрокаТаблицыЗначений - добавленные в параметр Команды строки
//
Функция ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Результат = Новый Массив;
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Результат;
	КонецЕсли;
	
#Область ПолучениеВременнойСсылки

	ПустаяСсылкаЗаказа = Маг1СКлиентСерверПереопределяемый.ЗаказПокупателяПустаяСсылка();
	
	Если ПустаяСсылкаЗаказа = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РасширениеУстановлено() Тогда
		ИмяМетода = "Маг1СИнтеграцияСлужебныйКлиент.ОткрытьФормуВременнойСсылкиОбработкаКоманды";
	Иначе
		ИмяМетода = "Маг1СКлиент.УстановитьРасширениеПоПодключаемойКоманде";
	КонецЕсли;
	
	ТипыОбъектов = Новый Массив();
	ТипыОбъектов.Добавить(ТипЗнч(ПустаяСсылкаЗаказа));
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	МетаданныеЗаказа = ПустаяСсылкаЗаказа.Метаданные();
	
	НазваниеДокумента = "";
	
	Если СтрНайти(НРег(МетаданныеЗаказа.Синоним), НСтр("ru = 'заказ'")) > 0 Тогда
		НазваниеДокумента = НСтр("ru = 'заказа'"); 	
	ИначеЕсли СтрНайти(НРег(МетаданныеЗаказа.Синоним), НСтр("ru = 'счет'")) > 0 Тогда
		НазваниеДокумента = НСтр("ru = 'счета'"); 	
	Иначе
		НазваниеДокумента = НСтр("ru = 'документа'"); 	
	КонецЕсли;
	
	ВидыКоманд = ПодключаемыеКомандыПовтИсп.ВидыКоманд();
	
	Если ВидыКоманд.Найти("Отправить", "Имя") <> Неопределено Тогда
		ВидКоманды = "Отправить";
		ЗаголовокКоманды = НСтр("ru = 'Ссылку на веб-страницу %НазваниеДокумента'");
	Иначе
		ВидКоманды = "Печать";
		ЗаголовокКоманды = НСтр("ru = 'Веб-страница %НазваниеДокумента'");
	КонецЕсли;
	
	ЗаголовокКоманды = СтрЗаменить(ЗаголовокКоманды, "%НазваниеДокумента", НазваниеДокумента); 
	
	Команда = Команды.Добавить();
	Команда.Вид = ВидКоманды;
	Команда.Идентификатор = "СтраницаMag1c";
	Команда.Представление = ЗаголовокКоманды;
	Команда.Важность = "Важное";
	Команда.Порядок = 1;
	Команда.ОтображениеКнопки = ОтображениеКнопки.Картинка;
	Команда.Картинка = БиблиотекаКартинок.Маг1СБиблиотекаЛоготипПрозрачныйФон;
	Команда.ТипПараметра = ТипПараметра;
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.ТолькоВоВсехДействиях = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = ИмяМетода;
	
	Результат.Добавить(Команда);
#КонецОбласти

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняется только при старте сеанса
//
Процедура ВыполнитьДействияПриУстановкеПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУстановкуРасширенияИВзвестиКонстанту();
	
КонецПроцедуры

// Проверяет, что расширение для работы с mag1c уже установлено и включает (выключает), если
// это нужно константу ПоказыватьКомандуУстановитьРасширениеМаг1с. В разделенном режиме всегда 
// возвращает Истину.
//
// Возвращаемое значение:
// 	Булево - расширение уже установлено
//
Функция ПроверитьУстановкуРасширенияИВзвестиКонстанту() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийРежимЗапуска() = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УжеУстановлено = РасширениеУстановлено();
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если Не УжеУстановлено
		И Не РазделениеВключено Тогда
		
		Попытка
			Расширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Маг1СКлиентСерверПереопределяемый.ИдентификаторРасширения()));
			БылоРаширение = Ложь;
			Для Каждого Расширение Из Расширения Цикл
				Расширение.Удалить();
				БылоРаширение = Истина;
			КонецЦикла;
			
			Если БылоРаширение Тогда
				ПараметрыБазы = Маг1СВызовСервера.ПараметрыБазы();
				Если ПараметрыБазы.АутентификацияИППВыполнена Тогда
					Результат = УстановитьРасширение(ПараметрыБазы);
					Если Результат.КодВозврата = 200
						Или Результат.КодВозврата = 204 Тогда
						УжеУстановлено = Истина;
					Иначе
						ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
							УровеньЖурналаРегистрации.Ошибка,,,Результат.СообщениеОбОшибке);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки;
	
	КонецЕсли;

	Если (РазделениеВключено 
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных())
		Или Не РазделениеВключено Тогда  

		Если УжеУстановлено = Константы.ПоказыватьКомандуУстановитьРасширениеМаг1с.Получить() Тогда
			Константы.ПоказыватьКомандуУстановитьРасширениеМаг1с.Установить(Не УжеУстановлено)	
		КонецЕсли;
		
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УжеУстановлено;
	
КонецФункции

// Скачивает и устанавливает расширение для работы с сервисом mag1c
// 
// Возвращаемое значение:
//   Структура:
//     * КодВозврата - Число - код возврата http-сервиса получения двоичных данных расширения
//     * СообщениеОбОшибке - Строка
// 
Функция УстановитьРасширение(ПараметрыБазы) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("КодВозврата", 200);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ТокенАвторизацииМенеджераВитрин = ПолучитьТокенАвторизацииМенеджераВитрин(ПараметрыБазы);
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		ИнформацияОбОшибке          = ИнформацияОбОшибке();

		Результат.КодВозврата       = 401;
		Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Если ТокенАвторизацииМенеджераВитрин.КодВозврата <> 200 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
			УровеньЖурналаРегистрации.Ошибка,,, ТокенАвторизацииМенеджераВитрин.СообщениеОбОшибке);
		
		ЗаполнитьЗначенияСвойств(Результат, ТокенАвторизацииМенеджераВитрин);
		Возврат Результат; 
	КонецЕсли;
	
	Попытка
		ДанныеРасширения = ПолучитьОбновлениеРасширения(ТокенАвторизацииМенеджераВитрин, ПараметрыБазы);
	Исключение
		ИнформацияОбОшибке          = ИнформацияОбОшибке();

		Результат.КодВозврата       = 500;
		Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыБазы.РазделениеВключено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ДанныеРасширения);
		Возврат Результат; 
	КонецЕсли;	
	
	Если ДанныеРасширения.ДвоичныеДанные = Неопределено Тогда
		
		Если ДанныеРасширения.КодВозврата <> 204 Тогда
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
				УровеньЖурналаРегистрации.Ошибка,,, ДанныеРасширения.СообщениеОбОшибке);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеРасширения);
		Возврат Результат; 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущееРасширение = Неопределено;
	
	Расширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Маг1СКлиентСерверПереопределяемый.ИдентификаторРасширения()));
	Если Расширения.Количество() > 0 Тогда
		ТекущееРасширение = Расширения[0];	
	Иначе
		// АПК:554-выкл расширение получено безопасным способом.
		ТекущееРасширение = РасширенияКонфигурации.Создать();
		// АПК:554-вкл
	КонецЕсли;
	
	ТекущееРасширение.БезопасныйРежим         = Ложь;
	ТекущееРасширение.Активно                 = Истина;
	ТекущееРасширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	Попытка
		ТекущееРасширение.Записать(ДанныеРасширения.ДвоичныеДанные);
		Константы.ПоказыватьКомандуУстановитьРасширениеМаг1с.Установить(Ложь);
		Возврат Результат; 
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииОбновлениеРасширения(), 
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		Результат.КодВозврата       = 418;
		Результат.СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат Результат; 
	КонецПопытки;
	
КонецФункции

// Проверяет, что доступны модули расширения в текущем сеансе
// 
// Возвращаемое значение:
//   Булево - возвращает Истина, когда расширение установлено
//
Функция РасширениеУстановлено() Экспорт
	
	Возврат Метаданные.ОбщиеМодули.Найти("Маг1СИнтеграцияСлужебныйКлиент") <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытияЖурналаРегистрацииОбновлениеРасширения()
	
	Возврат НСтр("ru = 'Маг1С: Установка расширения'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьОбновлениеРасширения(ТокенАвторизации, ПараметрыБазы)
	Результат = Новый Структура;
	Результат.Вставить("КодВозврата", 200);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервисаМенеджераВитрин());
	
	Соединение = НовоеHTTPСоединение(СтруктураURI);
	
	АдресРесурса = "/api/v2/update";
	
	Запрос = НовыйHTTPЗапрос(СтруктураURI, АдресРесурса, ПараметрыБазы, ТокенАвторизации);
	
	Если ПараметрыБазы.РазделениеВключено  Тогда
		Запрос.Заголовки.Вставить("Only-Check", Истина);
	КонецЕсли;

	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Если Не ПараметрыБазы.РазделениеВключено Тогда
			Результат.ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
	ИначеЕсли Ответ.КодСостояния = 204 Тогда
		Результат.КодВозврата      = Ответ.КодСостояния;
	Иначе
		Результат.КодВозврата      = Ответ.КодСостояния;
		Результат.СообщениеОбОшибке = ОписаниеОшибкиСервиса(
			СтруктураURI.ИмяСервера,
			"GET",
			АдресРесурса,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТокенАвторизацииМенеджераВитрин(ПараметрыБазы)
	
	Результат = Неопределено;
	
	АдресРесурса = АдресСервисаМенеджераВитрин();
	
	СведенияАутентификации = СведенияАутентификацииКлиентаВСервисеМенеджераВитрин(ПараметрыБазы);
			
	Если СведенияАутентификации.КодВозврата = 200 Тогда
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
		
		Возврат ПолучитьТокенАвторизацииВСервисе(
			СтрШаблон("%1://%2", СтруктураАдреса.Схема, СтруктураАдреса.ИмяСервера),
			СведенияАутентификации);
		
	КонецЕсли;
	
	Возврат СведенияАутентификации;
	
КонецФункции

Функция ПолучитьТокенАвторизацииВСервисе(URIСервиса, СведенияАутентификации)
	
	Результат = Новый Структура;
	Результат.Вставить("ТипТокена",           "");
	Результат.Вставить("ИдентификаторТокена", "");
	Результат.Вставить("КодВозврата",  200);
	Результат.Вставить("СообщениеОбОшибке",  "");
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URIСервиса);
	
	Соединение = НовоеHTTPСоединение(
		СтруктураURI,
		,
		СведенияАутентификации.Идентификатор,
		СведенияАутентификации.СекретныйКлюч);
	
	АдресРесурса = "/auth/oidc/token";
	
	Запрос = НовыйHTTPЗапрос(СтруктураURI, АдресРесурса, Неопределено, Неопределено);
	
	Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураОтвета = СтрокаJSONВСоответствие(Ответ.ПолучитьТелоКакСтроку());
		
		Результат.ТипТокена           = СтруктураОтвета["token_type"];
		Результат.ИдентификаторТокена = СтруктураОтвета["id_token"];
	Иначе
		Результат.КодВозврата       = Ответ.КодСостояния;
		Результат.СообщениеОбОшибке = ОписаниеОшибкиСервиса(
			СтруктураURI.ИмяСервера,
			"POST",
			АдресРесурса,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресСервисаМенеджераВитрин()
	
	УстановитьПривилегированныйРежим(Истина);
	СистемныеНастройки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Маг1С_.СистемныеНастройки");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СистемныеНастройки = Неопределено
		Или Не ТипЗнч(СистемныеНастройки) = Тип("Структура")
		Или Не СистемныеНастройки.Свойство("АдресСервисаМенеджераВитрин")
		Или Не ЗначениеЗаполнено(СистемныеНастройки.АдресСервисаМенеджераВитрин) Тогда
		Возврат "https://service.mag1c.ru/applications/manager";
	Иначе
		Возврат СистемныеНастройки.АдресСервисаМенеджераВитрин;
	КонецЕсли;
	
КонецФункции

Функция СведенияАутентификацииКлиентаВСервисеМенеджераВитрин(ПараметрыБазы)
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("СекретныйКлюч", "");
	Результат.Вставить("СрокДействия",  Неопределено);
	Результат.Вставить("КодВозврата",  200);
	Результат.Вставить("СообщениеОбОшибке",  "");
	
	ТелоЗапроса = Новый Структура("token,login,password", "", "", "");
	
	ТикетАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
			ИдентификаторСервисаМенеджераВитрин());
			
	Если ПустаяСтрока(ТикетАутентификации.КодОшибки) Тогда
		ТелоЗапроса.token = ТикетАутентификации.Тикет;
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение ТикетАутентификации.ИнформацияОбОшибке;
	Иначе
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		
		ТелоЗапроса.login    = ДанныеАутентификации.Логин;
		ТелоЗапроса.password = ДанныеАутентификации.Пароль;
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервисаМенеджераВитрин());
	
	Соединение = НовоеHTTPСоединение(СтруктураURI);
	
	АдресРесурса = "/api/v1/auth";
	
	Запрос = НовыйHTTPЗапрос(СтруктураURI, АдресРесурса, ПараметрыБазы, Неопределено);
	
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос.УстановитьТелоИзСтроки(СтруктураВСтрокуJSON(ТелоЗапроса));
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		СтруктураОтвета = СтрокаJSONВСоответствие(Ответ.ПолучитьТелоКакСтроку());
		
		Результат.Идентификатор = СтруктураОтвета.Получить("client_id");
		Результат.СекретныйКлюч = СтруктураОтвета.Получить("client_secret");
		Результат.СрокДействия  = ТекущаяУниверсальнаяДата() + 24 * 60 * 60;
	Иначе
		Результат.КодВозврата      = Ответ.КодСостояния;
		Результат.СообщениеОбОшибке = ОписаниеОшибкиСервиса(
			СтруктураURI.ИмяСервера,
			"POST",
			АдресРесурса,
			Ответ.КодСостояния,
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовоеHTTPСоединение(СтруктураURI, Таймаут = 20, ИмяПользователя = "", Пароль = "")
	
	Сервер   = СтруктураURI.Хост;
	Порт     = СтруктураURI.Порт;
	Протокол = СтруктураURI.Схема;
	
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(Протокол) = "HTTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(
		Сервер,
		Порт,
		ИмяПользователя,
		Пароль,
		НовыйИнтернетПрокси(Протокол),
		Таймаут,
		ЗащищенноеСоединение);
	
КонецФункции

Функция НовыйHTTPЗапрос(СтруктураURI, АдресРесурса, ПараметрыБазы, ТокенАвторизации)
	
	Если Не ПустаяСтрока(СтруктураURI.ПутьНаСервере) Тогда
		АдресРесурса = "/" + СтруктураURI.ПутьНаСервере + АдресРесурса;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если ТокенАвторизации <> Неопределено Тогда
		Запрос.Заголовки.Вставить("Authorization", ТокенАвторизации.ТипТокена + " " + ТокенАвторизации.ИдентификаторТокена);
	КонецЕсли;
	
	Если ПараметрыБазы <> Неопределено Тогда
		ИмяКонфигурации = СтрЗаменить(СтрЗаменить(Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(ПараметрыБазы.ИмяКонфигурации)), Символы.ПС,""), Символы.ВК, "");
		
		Запрос.Заголовки.Вставить("X-User-Agent-Configuration-Name",    ИмяКонфигурации);
		Запрос.Заголовки.Вставить("X-User-Agent-Configuration-Version", ПараметрыБазы.ВерсияКонфигурации);
		Запрос.Заголовки.Вставить("X-User-Agent-Wizard-Version",        ПараметрыБазы.ВерсияРасширения);
		Запрос.Заголовки.Вставить("X-User-Agent-Infobase-Id",           ПараметрыБазы.ИдентификаторИБ);
		Запрос.Заголовки.Вставить("X-User-Agent-Timezone",              ПараметрыБазы.ЧасовойПоясСеанса);
		Запрос.Заголовки.Вставить("X-User-Agent-Data-Separation-Value", ПараметрыБазы.ЗначениеРазделителяСеанса);
		Запрос.Заголовки.Вставить("X-User-Agent-Platform-Version",      ПараметрыБазы.ВерсияПлатформы);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ОписаниеОшибкиСервиса(ИмяСервера, Метод, Ресурс, КодОтвета, Знач СообщениеОбОшибке = "")
	
	Если ПустаяСтрока(СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка сервиса.'");
	КонецЕсли;
	
	Возврат СтрШаблон(
		"Сервер: %1
		|%2 %3 HTTP/1.1
		|HTTP/1.1 %4
		|
		|%5",
		ИмяСервера, Метод, Ресурс, XMLСтрока(КодОтвета), СообщениеОбОшибке);
	
КонецФункции

Функция НовыйИнтернетПрокси(Протокол)
	
	Возврат ПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	
КонецФункции

Функция СтруктураВСтрокуJSON(Источник, ИмяФайла = "")
	
	Запись = Новый ЗаписьJSON;
	Если ПустаяСтрока(ИмяФайла) Тогда
		Запись.УстановитьСтроку();
	Иначе
		Запись.ОткрытьФайл(ИмяФайла, "UTF-8");
	КонецЕсли;
	
	ЗаписатьJSON(Запись, Источник);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция СтрокаJSONВСоответствие(Источник)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Источник);
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторСервисаМенеджераВитрин()
	
	Возврат "1C-YOS";
	
КонецФункции

#КонецОбласти
