#Область СлужебныйПрограммныйИнтерфейс

#Область ПросмотрЭлектронногоДокумента

// Формирует данные электронного документа.
// 
// Параметры:
//  ОписанияДокументовОбъектаУчета - см. ИнтеграцияЭДО.ОписаниеОбъектаУчета
//  НастройкиФормирования
//      - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета
//  ПараметрыОткрытия
//      - см. ИнтерфейсДокументовЭДО.ПараметрыПросмотраЭлектронногоДокументаПоОбъектуУчета.ПараметрыОткрытия
//  
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра
Функция ПодготовитьДанныеПредварительногоПросмотра(ОписанияДокументовОбъектаУчета, НастройкиФормирования,
	ПараметрыОткрытия) Экспорт
	
	ОписаниеОбъектаУчета = ОписанияДокументовОбъектаУчета[0];
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотра();
	
	ДанныеПредварительногоПросмотра = НовыеДанныеПредварительногоПросмотра();
	
	ОбъектУчета = ОписаниеОбъектаУчета.ОбъектУчета;
	ОписанияДополнительныхСообщений = Неопределено;
	
	ОписанияОшибок = Новый Массив;
	
	Если ОписаниеОбъектаУчета.Направление = Перечисления.НаправленияЭДО.Внутренний Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияВнутреннегоЭДО(ОбъектУчета,
			НастройкиФормирования.НастройкиВнутреннегоЭДО);
		ДанныеПредварительногоПросмотра.Основания.Добавить(ОбъектУчета);
	ИначеЕсли ОписаниеОбъектаУчета.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителяПрикладногоДокумента(ОбъектУчета,
			НастройкиФормирования.НастройкиОтправки, ОписаниеОбъектаУчета.ПрикладнойТипДокумента);
		ДанныеПредварительногоПросмотра.Основания.Добавить(ОбъектУчета);
	Иначе
		ПараметрыФормирования = ИнтеграцияЭДО.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиФормирования.НастройкиОтправки);
		ПараметрыФормирования.ТипДокумента = ОписаниеОбъектаУчета.ТипДокумента;
		ПараметрыФормирования.ДанныеКаталога = ПараметрыОткрытия.ДанныеКаталога;
		Если ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора) Тогда
			ПараметрыФормирования.ДанныеФайлаДоговора = ПараметрыОткрытия.ФайлДоговора.ДвоичныеДанные;
		КонецЕсли;
		ОписаниеДанных = ИнтеграцияЭДО.ОписаниеДанныхОбъектаУчета(ОбъектУчета, ПараметрыФормирования);
		
		Формат = НастройкиФормирования.НастройкиОтправки.Формат;
		Если ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат)
			И ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора)
			И ОписаниеДанных.Данные.ОбъектXDTO = Неопределено Тогда
			
			Возврат РезультатПодготовкиДанных;
			
		КонецЕсли;
		
		ОписаниеСообщения = ЭлектронныеДокументыЭДО.ОписаниеСообщенияОтправителя(
			ОбъектУчета, ОписаниеДанных.Данные, НастройкиФормирования.НастройкиОтправки,
			ПараметрыОткрытия.ЗначенияДополнительныхПолей);
		ОписанияДополнительныхСообщений = ЭлектронныеДокументыЭДО.ОписанияДополнительныхСообщений(
			ОбъектУчета, ОписаниеДанных.Данные, НастройкиФормирования.НастройкиОтправки, ПараметрыФормирования);
		
		ДанныеПредварительногоПросмотра.Основания = ОписаниеДанных.Основания;
		ДанныеПредварительногоПросмотра.СвязующийОбъектУчета = ОписаниеДанных.СвязующийОбъектУчета;
		ДанныеПредварительногоПросмотра.СвязанныеОбъектыУчета = ОписаниеДанных.СвязанныеОбъектыУчета;
		
		Если (ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаПДФ_А3(Формат)
			Или ИнтерфейсДокументовЭДОКлиентСервер.ЭтоФорматДоговорногоДокументаXML(Формат))
			И Не ЗначениеЗаполнено(ПараметрыОткрытия.ФайлДоговора) Тогда
			
			РезультатПодготовкиДанных.Ошибка = Истина;
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
			
			ПараметрыВыбораФайла = ЭлектронныеДокументыЭДОСлужебный.НовыеПараметрыПолученияФайлаДоговорногоДокумента();
			ПараметрыВыбораФайла.Формат = Формат;
			
			Если ОписаниеСообщения.Данные <> Неопределено
				И ОписаниеСообщения.Данные.Содержание <> Неопределено Тогда
				ПараметрыВыбораФайла.ИдентификаторОсновногоФайла = 
					ОписаниеСообщения.Данные.Содержание.ИдентификаторДокумента;
			КонецЕсли;
			
			ОписаниеОшибки.ОтсутствуетФайлДоговорногоДокумента = ПараметрыВыбораФайла;
			ОписанияОшибок.Добавить(ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписанияСообщений = ДанныеПредварительногоПросмотра.ОписанияСообщений;
	ОписанияСообщений.Добавить(ОписаниеСообщения);
	Если ЗначениеЗаполнено(ОписанияДополнительныхСообщений) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписанияСообщений, ОписанияДополнительныхСообщений);
	КонецЕсли;
	
	Для Каждого ОписаниеСообщения Из ОписанияСообщений Цикл
		
		Если ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных)
			Или ЗначениеЗаполнено(ОписаниеСообщения.Данные.Ошибки.ЗначенияДополнительныхПолей) Тогда
			
			РезультатПодготовкиДанных.Ошибка = Истина;
			
			ОписаниеОшибки = ЭлектронныеДокументыЭДО.НовоеОписаниеОшибкиФормирования();
			ЗаполнитьЗначенияСвойств(ОписаниеОшибки.ОписаниеОбъектаУчета, ОписаниеОбъектаУчета);
			ОписаниеОшибки.ОшибкиДанных = ОписаниеСообщения.Данные.Ошибки;
			ОписанияОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПодготовкиДанных.Ошибка Тогда
		АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок, Новый УникальныйИдентификатор);
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = АдресСведенийОбОшибках;
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	РезультатПодготовкиДанных.АдресДанныхПредварительногоПросмотра = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра, Новый УникальныйИдентификатор);
	
	Возврат РезультатПодготовкиДанных;
	
КонецФункции

#КонецОбласти // ПросмотрЭлектронногоДокумента

#Область ЗагрузкаФормализованногоДокументаXML

// Формирует данные электронного документа.
// 
// Параметры:
//  ВыбранныйФайл - Структура - данные выбранного файла:
//  * Хранение - Строка - расположение данных во временном хранилище
//  * Имя - Строка - путь к файлу / имя файла
//
// Возвращаемое значение:
//  См. ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
Функция ПодготовитьДанныеПредварительногоПросмотраПоФайлуXML(ВыбранныйФайл) Экспорт
	
	РезультатПодготовкиДанных = ИнтерфейсДокументовЭДО.НовыйРезультатПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
	
	ОписаниеФайла = РаботаСФайламиБЭД.ОписаниеФайлаПоДаннымПомещенногоФайла(ВыбранныйФайл);
	СодержаниеФайла = ЭлектронныеДокументыЭДО.СодержаниеСообщения(ОписаниеФайла);
	Если Не ЗначениеЗаполнено(СодержаниеФайла) Тогда
		Возврат РезультатПодготовкиДанных;
	КонецЕсли;
	
	ОписанияОшибок = Новый Массив; // Массив Из См. НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML
	ОписаниеУведомлений = Новый Массив; // Массив Из Строка
	СуществующийДокумент = ЭлектронныеДокументыЭДО.ИсходящийДокументПоИдентификаторуФайла(ВыбранныйФайл);
	Если ЗначениеЗаполнено(СуществующийДокумент) Тогда
		
		ОписаниеОшибки = НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		ОписаниеОшибки.Текст = НСтр("ru = 'Такой документ уже был загружен ранее.'");
		ОписаниеОшибки.Данные = СуществующийДокумент;
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		РезультатПодготовкиДанных.Ошибка = Истина;
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор);
		
		Возврат РезультатПодготовкиДанных;
		
	КонецЕсли;
	
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла, СодержаниеФайла);
	Если Не ДанныеДокумента.Успех И ЗначениеЗаполнено(ДанныеДокумента.Ошибка) Тогда
		
		ОписаниеОшибки = НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML();
		ОписаниеОшибки.Текст = ДанныеДокумента.Ошибка;
		ОписанияОшибок.Добавить(ОписаниеОшибки);
		
		РезультатПодготовкиДанных.Ошибка = Истина;
		РезультатПодготовкиДанных.АдресСведенийОбОшибках = ПоместитьВоВременноеХранилище(ОписанияОшибок,
			Новый УникальныйИдентификатор);
		
		Возврат РезультатПодготовкиДанных;
	
	ИначеЕсли Не ДанныеДокумента.Успех Тогда
		
		Возврат РезультатПодготовкиДанных;
		
	КонецЕсли;
	
	РезультатУдаленияПодписанта = ЭлектронныеДокументыЭДО.УдалитьИзФайлаЭлектронногоДокументаСведенияОПодписанте(
		ОписаниеФайла, ДанныеДокумента.НастройкиОтправки.Отправитель);
	Если Не РезультатУдаленияПодписанта.Успех Тогда
		
		ОписаниеУведомлений.Добавить(РезультатУдаленияПодписанта.Уведомление);
		
		РезультатПодготовкиДанных.АдресСведенийОУведомлениях = ПоместитьВоВременноеХранилище(ОписаниеУведомлений,
			Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	ДанныеПредварительногоПросмотра = НовыеДанныеПредварительногоПросмотра();
	
	ОписанияСообщений = ДанныеПредварительногоПросмотра.ОписанияСообщений;
	
	ОписаниеСообщения = ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения();
	ОписаниеСообщения.ВидСообщения = ДанныеДокумента.НастройкиОтправки.ВидДокумента;
	ОписаниеСообщения.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	ОписаниеСообщения.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
	ДанныеДокументаСообщения = ОписаниеСообщения.Данные;
	ДанныеДокументаСообщения.Документ = ОписаниеФайла;
	ДанныеДокументаСообщения.Содержание = СодержаниеФайла;
	
	ОписанияСообщений.Добавить(ОписаниеСообщения);
	
	РезультатПодготовкиДанных.АдресДанных = ПоместитьВоВременноеХранилище(
		ДанныеПредварительногоПросмотра, Новый УникальныйИдентификатор);
		
	НастройкиФормирования = 
		ИнтерфейсДокументовЭДОКлиентСервер.НовыеНастройкиФормированияЭлектронногоДокументаОбъектаУчета();
	НастройкиФормирования.Направление = Перечисления.НаправленияЭДО.Исходящий;
	НастройкиФормирования.НастройкиОтправки = ДанныеДокумента.НастройкиОтправки;
	НастройкиФормирования.ЭтоОблачныйЭДО = Ложь;
		
	РезультатПодготовкиДанных.НастройкиФормирования = НастройкиФормирования;
	
	РезультатПодготовкиДанных.ДокументРаспознан = Истина;
	
	Возврат РезультатПодготовкиДанных;
		
КонецФункции

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла 
//  Результат - См. ИнтерфейсДокументовЭДО.НовыйРезультатЗагрузкиФормализованногоДокументаПоДаннымФайлаXML
//  ПринудительнаяЗагрузка - Булево
Процедура ЗагрузитьФормализованныйДокументПоДаннымФайлаXMLПослеПроверок(ДанныеДокумента, ОписаниеФайла, Результат,
	ПринудительнаяЗагрузка = Ложь) Экспорт

	РезультатЗагрузки = ВыполнитьЗагрузкуФормализованногоДокументаПоДаннымФайлаXML(ДанныеДокумента, ОписаниеФайла,
		ПринудительнаяЗагрузка);
		
	Результат.Данные = РезультатЗагрузки.Данные;
	Если Не РезультатЗагрузки.Успех Тогда
		Результат.Успех = Ложь;
		Результат.Ошибки.Вставить(РезультатЗагрузки.Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗагрузкаФормализованногоДокументаXML

#Область ПечатьЭлектронныхДокументов
// Возвращает печатные формы электронных документов.
//
// Параметры:
//  ЭлектронныеДокументы - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,
//                                   ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронные документы,
//                                                           печатные формы которых необходимо сформировать.
//  ПараметрыСоставаПечати - см. ИнтерфейсДокументовЭДО.ПараметрыСоставаПечатиЭлектронныхДокументов
//  ПараметрыВизуализации - см. ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента
//
// Возвращаемое значение:
//  Массив Из Структура - Сформированные печатные формы. Элементы - структуры со свойствами:
//   * ИмяМакета - Строка - Уникальное имя макета.
//   * СинонимМакета - Строка - Наименование макета.
//   * ТабличныйДокумент - ТабличныйДокумент - Сформированная печатная форма.
//   * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Ссылка
//     на документ, по которому сформирована печатная форма.
//
Функция СформироватьПечатныеФормыЭлектронныхДокументов(ЭлектронныеДокументы, ПараметрыСоставаПечати,
	ПараметрыВизуализации) Экспорт
	
	ПечатныеФормы = Новый Массив;
	ШаблонСинонима = "%1 (%2)";
	ПротоколыОбмена = Новый Соответствие;
	Если ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу Тогда
		ПротоколыОбмена = Обработки.ПротоколОбменаПоДокументуЭДО.ПротоколыОбменаПоДокументам(ЭлектронныеДокументы);
	КонецЕсли;
	
	Для каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		Сообщение = Неопределено;
		СообщениеОтвета = Неопределено;
		ТехническиеСообщения = Новый Массив;
		
		ДанныеСхемыРегламента = ЭлектронныеДокументыЭДО.ДанныеЭлементовСхемыРегламента(ЭлектронныйДокумент);
		Для каждого ЭлементСхемыРегламента Из ДанныеСхемыРегламента Цикл
			ТипЭлементаРегламента = ЭлементСхемыРегламента.ТипЭлементаРегламента;
			
			Если ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.НеСформирован Тогда
				Продолжить;
			ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя Тогда
				СообщениеОтвета = ЭлементСхемыРегламента.Сообщение;
				Продолжить;
			ИначеЕсли ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
				Сообщение = ЭлементСхемыРегламента.Сообщение; 
				Продолжить;
			Иначе
				ТехническиеСообщения.Добавить(ЭлементСхемыРегламента.Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"ВидДокумента, ВидДокумента.ТипДокумента, ПометкаУдаления");
		
		ПредставлениеДокумента = ЭлектронныеДокументыЭДО.ПредставлениеДокумента(ЭлектронныйДокумент);
		
		ЭлектронныйДокументНапечатан = Ложь;
		
		Если ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент Тогда
			ДанныеДокумента = ВизуализацияЭДОСлужебный.НовыеСвойстваДокументаДляФормированияВизуализации();
			ДанныеДокумента.ВидДокумента = СвойстваДокумента.ВидДокумента;
			ДанныеДокумента.ТипДокумента = СвойстваДокумента.ВидДокументаТипДокумента;
			ДанныеДокумента.Ссылка = ЭлектронныйДокумент;
			ДанныеРаспознавания = ВизуализацияЭДОСлужебный.НовыеДанныеДокументаДляПроверкиРаспознавания();
			ЗаполнитьЗначенияСвойств(ДанныеРаспознавания.ПроверкаЗаписанногоДокумента, ДанныеДокумента);
			ДокументРаспознан = ВизуализацияЭДОСлужебный.ДокументРаспознан(ДанныеРаспознавания);
			
			Если ДокументРаспознан И 
					ДанныеДокумента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
				Если Сообщение = Неопределено И ЗначениеЗаполнено(ТехническиеСообщения) Тогда
					ТабличныйДокумент = ВизуализацияЭДОСлужебный.ПредставлениеСообщения(ТехническиеСообщения[0],,
						ПараметрыВизуализации);
				Иначе
					РезультатФормирования = ВизуализацияЭДО.ВизуализацияДокумента(ДанныеДокумента, ПараметрыВизуализации);
					ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента;
				КонецЕсли;
	
				ИмяМакета = "ЭлектронныйДокумент" + ЭлектронныйДокумент.УникальныйИдентификатор();
				СинонимМакета = ПредставлениеДокумента;
				Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
					СинонимМакета = СтрШаблон(ШаблонСинонима, СинонимМакета, НСтр("ru = 'Электронный документ'")); 
				КонецЕсли;
			
				Если ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент,
					ЭлектронныйДокумент) Тогда
					ЭлектронныйДокументНапечатан = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НужноПечататьКарточкуЭлектронногоДокумента = ПараметрыСоставаПечати.ПечататьКарточкуЭлектронногоДокумента;
		
		Если Не НужноПечататьКарточкуЭлектронногоДокумента Тогда
			НужноПечататьКарточкуЭлектронногоДокумента =
				ПараметрыСоставаПечати.ПечататьКарточкуЕслиНеУдалосьНапечататьЭлектронныйДокумент
				И ПараметрыСоставаПечати.ПечататьЭлектронныйДокумент И Не ЭлектронныйДокументНапечатан;
		КонецЕсли;
		
		Если НужноПечататьКарточкуЭлектронногоДокумента Тогда
		
			ТабличныйДокумент = ЭлектронныеДокументыЭДО.ПредставлениеКарточкиСообщения(Сообщение, СообщениеОтвета);
			ИмяМакета = "КарточкаДокумента" + ЭлектронныйДокумент.УникальныйИдентификатор();
			СинонимМакета = ПредставлениеДокумента;
			Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
				СинонимМакета = СтрШаблон(ШаблонСинонима, СинонимМакета, НСтр("ru = 'Карточка электронного документа'"));
			КонецЕсли;
			
			ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент);
			
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьТехнологическиеКвитанции Тогда
			
			ВидыСообщений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТехническиеСообщения, "ВидСообщения");
			
			Для каждого ТехническоеСообщение Из ТехническиеСообщения Цикл
				
				ТабличныйДокумент = ВизуализацияЭДОСлужебный.ПредставлениеСообщения(
					ТехническоеСообщение, СообщениеОтвета, ПараметрыВизуализации);
				ИмяМакета = "Сообщение" + ТехническоеСообщение.УникальныйИдентификатор();
				СинонимМакета = ПредставлениеДокумента;
				ВидСообщения = ВидыСообщений[ТехническиеСообщения];
				ЭлементРегламента = ДанныеСхемыРегламента.Найти(ТехническоеСообщение, "Сообщение");
				Если ЭлементРегламента.ТипЭлементаРегламента
						= Перечисления.ТипыЭлементовРегламентаЭДО.ДопСведенияПоРезультатамПриемки Тогда
					ВидСообщения = НСтр("ru = 'Дополнительные сведения по итогам приемки';");
				ИначеЕсли ТехническоеСообщение = СообщениеОтвета Тогда
					ВидСообщения = НСтр("ru = 'Информация получателя'");
				Иначе
					ВидСообщения = ВидыСообщений[ТехническоеСообщение];
				КонецЕсли;
				Если ПараметрыСоставаПечати.ДополнятьСинонимМакетаВидомПечатнойФормы Тогда
					СинонимМакета = СтрШаблон(ШаблонСинонима, СинонимМакета, Строка(ВидСообщения)); 
				КонецЕсли;
				
				ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокумент, ЭлектронныйДокумент);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыСоставаПечати.ПечататьПротоколОбменаПоДокументу Тогда
			ТабличныйДокументПротокола = ПротоколыОбмена.Получить(ЭлектронныйДокумент);
			Если ТабличныйДокументПротокола <> Неопределено Тогда
				ИмяМакета = "ПротоколОбменаПоДокументу" + ЭлектронныйДокумент.УникальныйИдентификатор();
				СинонимМакета = СтрШаблон("%1 - %2",
					НСтр("ru = 'Протокол обмена по документу'"), ПредставлениеДокумента);
				ДобавитьПечатнуюФорму(ПечатныеФормы, ИмяМакета, СинонимМакета, ТабличныйДокументПротокола,
					ЭлектронныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПечатныеФормы;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура - Новая ошибка подготовки данных предварительного просмотра по файлу XML:
//  * Текст - Строка
//  * Данные - Неопределено 
//           - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НоваяОшибкаПодготовкиДанныхПредварительногоПросмотраПоФайлуXML()
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("Данные", Неопределено);
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Основания - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * СвязующийОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//                         - Неопределено
//  * СвязанныеОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
//  * ОписанияСообщений - Массив из см. ЭлектронныеДокументыЭДО.НовоеОписаниеСообщения
//
Функция НовыеДанныеПредварительногоПросмотра()
	Данные = Новый Структура;
	Данные.Вставить("Основания", Новый Массив);
	Данные.Вставить("СвязующийОбъектУчета", Неопределено);
	Данные.Вставить("СвязанныеОбъектыУчета", Новый Массив);
	Данные.Вставить("ОписанияСообщений", Новый Массив);
	Возврат Данные;
КонецФункции

// Параметры:
//  ДанныеДокумента - Структура:
//                    * Ссылка - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//                    * Организация - ОпределяемыйТип.Организация
//  ОписаниеФайла - См. РаботаСФайламиБЭД.НовоеОписаниеФайла 
//  ПринудительнаяЗагрузка - Булево
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * Ошибка - Строка
//  * Данные - Неопределено
//           - Структура:
//             ** СодержаниеФайла - См. ЭлектронныеДокументыЭДО.СодержаниеСообщения
//             ** НастройкиОтправки - Неопределено
//                                  - См. НастройкиОтправкиЭДО.НастройкиОтправки
Функция ВыполнитьЗагрузкуФормализованногоДокументаПоДаннымФайлаXML(ДанныеДокумента, ОписаниеФайла,
	ПринудительнаяЗагрузка)
		
	РезультатЗагрузки = Новый Структура("Успех, Ошибка, Данные", Истина, "", Неопределено);
		
	ЭлектронныеДокументыЭДО.УдалитьИзФайлаЭлектронногоДокументаСведенияОПодписанте(
		ОписаниеФайла, ДанныеДокумента.Организация);
		
	ЭлектронныеДокументыЭДО.ЗаменитьДанныеОсновногоФайлаДокумента(ДанныеДокумента.Ссылка, ОписаниеФайла);
		
	ДанныеДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПоДаннымФайлаXML(ОписаниеФайла, Неопределено,
		ПринудительнаяЗагрузка);
	Если Не ДанныеДокумента.Успех Тогда
		РезультатЗагрузки.Успех = Ложь;
		РезультатЗагрузки.Ошибка = ДанныеДокумента.Ошибка;
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	РезультатЗагрузки.Данные = Новый Структура("СодержаниеФайла, НастройкиОтправки",
		ДанныеДокумента.СодержаниеФайла, ДанныеДокумента.НастройкиОтправки);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

// Добавить печатную форму.
// 
// Параметры:
//  ПечатныеФормы - Массив из Структура - Печатные формы
//  ИмяМакета - Строка - Имя макета
//  СинонимМакета - Строка - Синоним макета
//  ТабличныйДокумент - Неопределено, ТабличныйДокумент, Строка, ДвоичныеДанные, Произвольный - Табличный документ
//  Ссылка - Неопределено
//         - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//         - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
// Возвращаемое значение:
//  Булево - Добавить печатную форму
Функция ДобавитьПечатнуюФорму(ПечатныеФормы, Знач ИмяМакета, Знач СинонимМакета, Знач ТабличныйДокумент,
	Знач Ссылка = Неопределено) Экспорт
	
	Если ТипЗнч(ТабличныйДокумент) <> Тип("ТабличныйДокумент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяМакета", ИмяМакета);
	ПечатнаяФорма.Вставить("СинонимМакета", СинонимМакета);
	ПечатнаяФорма.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	ПечатнаяФорма.Вставить("Ссылка", Ссылка);
	
	ПечатныеФормы.Добавить(ПечатнаяФорма);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
