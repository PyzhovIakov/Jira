////////////////////////////////////////////////////////////////////////////////
// CRM трудозатраты сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ГруппаТрудозатрат
// Выполняет действие над таблицей записей трудозатраты.
// 
// Параметры:
//	Форма	   - ФормаКлиентскогоПриложения - Форма.
//	ИмяКоманды - Строка - Имя команды.
//
Процедура ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Форма, ИмяКоманды) Экспорт
	
	Если СтрНайти(ИмяКоманды, "ДобавитьЗапись") > 0 Тогда
		
		ДобавитьЗаписьНаборЗаписейФормаТрудозатраты(Форма);
		CRM_ТрудозатратыКлиентСервер.ОбновитьНумерациюСтрокТаблицыЗаписей(Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()]);
		
	ИначеЕсли СтрНайти(ИмяКоманды, "УдалитьЗапись") > 0 Тогда
		
		ИдентификаторТекущейСтроки = Форма.Элементы[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].ТекущаяСтрока;
		Если ИдентификаторТекущейСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Запись = Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		Если Запись = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].Удалить(Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].Индекс(Запись));
		
		ЗаписатьНаборЗаписейФормаТрудозатраты(Форма);
		CRM_ТрудозатратыКлиентСервер.ОбновитьНумерациюСтрокТаблицыЗаписей(Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()]);
		
	ИначеЕсли СтрНайти(ИмяКоманды, "ОтборВсе") > 0 Тогда
		
		Форма.Элементы.Команда_CRM_ОтборВсе.Пометка = Истина;
		Форма.Элементы.Команда_CRM_ОтборМои.Пометка = Ложь;
		Форма.УРВ_ОтборМои = Ложь;
		
		ПерезаполнитьТаблицуЗаписейТрудозатраты(CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ(),
			 Форма,
			 Форма.Объект.Ссылка);
		
	ИначеЕсли СтрНайти(ИмяКоманды, "ОтборМои") > 0 Тогда
		
		Форма.Элементы.Команда_CRM_ОтборВсе.Пометка = Ложь;
		Форма.Элементы.Команда_CRM_ОтборМои.Пометка = Истина;
		Форма.УРВ_ОтборМои = Истина;
		
		ПерезаполнитьТаблицуЗаписейТрудозатраты(CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ(),
			 Форма,
			 Форма.Объект.Ссылка);
		
	КонецЕсли;
	
	CRM_ТрудозатратыКлиентСервер.ОбновитьВремяУчетаИтого(Форма);
	
КонецПроцедуры
// Указывает трудозатраты на сервере.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура УказатьТрудозатратыНаСервере(Форма) Экспорт
	
	ПерезаполнитьТаблицуЗаписейТрудозатраты(CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ(), Форма,
		 Форма.Объект.Ссылка);
	
КонецПроцедуры

// Выполняет действие над таблицей записей при изменении на сервере.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура ТаблицаЗаписейПриИзмененииНаСервере(Форма) Экспорт
	
	ЗаписатьНаборЗаписейФормаТрудозатраты(Форма);
	
КонецПроцедуры

// Выполняет действие над таблицей записей перед началом добавления.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура ТаблицаЗаписейПередНачаломДобавленияНаСервере(Форма) Экспорт
	
	ДобавитьЗаписьНаборЗаписейФормаТрудозатраты(Форма);
	CRM_ТрудозатратыКлиентСервер.ОбновитьНумерациюСтрокТаблицыЗаписей(Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()]);
	CRM_ТрудозатратыКлиентСервер.ОбновитьВремяУчетаИтого(Форма);
	
КонецПроцедуры
// Выполняет действие нажатие таймера.
// 
// Параметры:
//	Объект	 - ОпределяемыйТип.CRM_ИсточникТрудозатрат - Объект источник трудозатрат.
//	ВидРабот - СправочникСсылка.CRM_ВидыРабот - Вид работ.
//
Процедура ТаймерУРВНажатиеНаСервере(Объект, ВидРабот) Экспорт
	
	ЗапуститьТаймер = Не ПоОбъектуЗапущенТаймерУРВ(Объект)
		И Не ТипЗнч(ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени) = Тип("Строка");
	
	ОстановитьУчетРабочегоВремени();
	
	Если ЗапуститьТаймер Тогда
		НачатьУчетРабочегоВремениПоОбъекту(Объект, ВидРабот);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы
// Обработчик события ПриСозданииНаСервере.
//
// Параметры:
//	Форма				 - ФормаКлиентскогоПриложения - Форма.
//	Отказ				 - Булево - Признак отказа.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИспользоватьУчетРабочегоВремени = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьУчетРабочегоВремени");
	
	Если НЕ ИспользоватьУчетРабочегоВремени Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДопустимыхТипов = Метаданные.ОпределяемыеТипы.CRM_ИсточникТрудозатрат.Тип;
	Если НЕ ОписаниеДопустимыхТипов.СодержитТип( ТипЗнч(Форма.Объект.Ссылка) ) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКонтейнер = Форма.Элементы.Найти("CRM_ГруппаУчетРабочегоВремениПользователей");
	Если ГруппаКонтейнер <> Неопределено Тогда
		ПодготовитьКомандуУказатьТрудозатраты(Форма, ГруппаКонтейнер);
		ПодготовитьГруппуТрудозатраты(Форма, ГруппаКонтейнер);
	Иначе
		//ГруппаКонтейнер = Форма.Элементы.Добавить("ГруппаРазмещения",Тип("ГруппаФормы"));
	КонецЕсли;
	
	ЗапуститьТаймер = Ложь;
	
	АвтозапускТаймера =
		CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("АвтоматическиЗапускатьТаймерУчетаРабочегоВремени");
	
	ЭтоЗавершенныйИнтерес = Ложь;
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес")
		И Форма.Объект.Ссылка.Завершен Тогда
		ЭтоЗавершенныйИнтерес = Истина;
	КонецЕсли;
	
	ЗапуститьТаймер = АвтозапускТаймера И Не ЭтоЗавершенныйИнтерес;
	
	Если ЗапуститьТаймер Тогда
		ТаймерУРВНажатиеНаСервере(Форма.Объект.Ссылка, Форма["УРВ_ВидРабот"]);
	КонецЕсли;
	
	ВключенаЦветоваяИндикация = Не ЭтоЗавершенныйИнтерес;
	CRM_ТрудозатратыКлиентСервер.ОбновитьЭлементТаймерУРВ(Форма, ВключенаЦветоваяИндикация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры сеанса по умолчанию.
//
Процедура УстановитьПараметрыСеансаПоУмолчанию() Экспорт
	
	ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени = Неопределено;
	ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени = '00010101';
	ПараметрыСеанса.CRM_ВидРаботОбъектаСчетчикаРабочегоВремени = Справочники.CRM_ВидыРабот.ПустаяСсылка();
	
КонецПроцедуры // УстановкаПараметровСеанса()

// Возвращает признак запуска таймера по объекту.
//
// Параметры:
//	Объект - ОпределяемыйТип.CRM_ИсточникТрудозатрат - Объект источник трудозатрат.
//
// Возвращаемое значение:
//	Булево - признак запуска таймера по объекту.
//
Функция ПоОбъектуЗапущенТаймерУРВ(Объект) Экспорт
	
	Возврат ЗначениеЗаполнено(ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени)
			И Объект = ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени;
	
КонецФункции

// Возвращает признак содержания данных по объекту.
//
// Параметры:
//	Объект - ОпределяемыйТип.CRM_ИсточникТрудозатрат - Объект источник трудозатрат.
//
// Возвращаемое значение:
//	Булево - признак содержания данных по объекту.
//
Функция ТаймерУРВСодержитДанныеПоОбъекту(Объект) Экспорт
	
	ДанныеУРВ = ПолучитьПоследнююЗаписьСОтбором(Объект, Пользователи.АвторизованныйПользователь());
	
	Возврат ЗначениеЗаполнено(ДанныеУРВ);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает время из секунд.
//
// Параметры:
//	ВремяСек - Число - Время в секундах.
//
// Возвращаемое значение:
//	Дата - время.
//
Функция ПолучитьВремяИзСекунд(ВремяСек) Экспорт
	ДатаНачала = Дата('00010101');
	Возврат ДатаНачала + ВремяСек;
КонецФункции

Функция ПолучитьПоследнююЗаписьСОтбором(Источник, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_РабочееВремяПользователей.Трудозатраты КАК Трудозатраты,
		|	CRM_РабочееВремяПользователей.ВидРабот КАК ВидРабот,
		|	CRM_РабочееВремяПользователей.ДатаРабот КАК ДатаРабот
		|ИЗ
		|	РегистрСведений.CRM_РабочееВремяПользователей КАК CRM_РабочееВремяПользователей
		|ГДЕ
		|	CRM_РабочееВремяПользователей.Пользователь = &Пользователь
		|	И CRM_РабочееВремяПользователей.Источник = &Источник
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_РабочееВремяПользователей.ДатаРабот УБЫВ";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура НачатьУчетРабочегоВремениПоОбъекту(Объект, ВидРабот) Экспорт
	
	ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени = Объект;
	ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени = ТекущаяДатаСеанса();
	ПараметрыСеанса.CRM_ВидРаботОбъектаСчетчикаРабочегоВремени = ВидРабот;
	
КонецПроцедуры

// Останавливает учет рабочего времени.
//
Процедура ОстановитьУчетРабочегоВремени() Экспорт
	
	ЗаписатьРабочееВремя(ПараметрыСеанса.CRM_ОбъектСчетчикаРабочегоВремени,
						ПараметрыСеанса.CRM_НачалоСчетчикаРабочегоВремени,
						ПараметрыСеанса.CRM_ВидРаботОбъектаСчетчикаРабочегоВремени);
	
	УстановитьПараметрыСеансаПоУмолчанию();
	
КонецПроцедуры

Функция ЗаписатьРабочееВремя(ОбъектСчетчикаРабочегоВремени, НачалоСчетчикаРабочегоВремени,
	 ВидРаботОбъектаСчетчикаРабочегоВремени)
	
	Если Не ЗначениеЗаполнено(ОбъектСчетчикаРабочегоВремени)
		Или ТипЗнч(ОбъектСчетчикаРабочегоВремени) = Тип("Строка")
		Или Не ЗначениеЗаполнено(НачалоСчетчикаРабочегоВремени) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запись = РегистрыСведений.CRM_РабочееВремяПользователей.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗаписьТрудозатратПоИсточнику(Запись, ОбъектСчетчикаРабочегоВремени,
		 НачалоСчетчикаРабочегоВремени,
		 ВидРаботОбъектаСчетчикаРабочегоВремени);
	
	Попытка
		Запись.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьЗаписьТрудозатратПоИсточнику(Запись, ОбъектСчетчикаРабочегоВремени,
	 НачалоСчетчикаРабочегоВремени = Неопределено,
	 ВидРаботОбъектаСчетчикаРабочегоВремени)
	
	Если НачалоСчетчикаРабочегоВремени = Неопределено Тогда
		Трудозатраты = 0;
	Иначе
		Трудозатраты = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() - НачалоСчетчикаРабочегоВремени;
	КонецЕсли;
	
	Запись.ДатаРегистрации = ?(НачалоСчетчикаРабочегоВремени = Неопределено,
		 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),
		 НачалоСчетчикаРабочегоВремени);
	Запись.ДатаРабот = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Запись.Пользователь = Пользователи.АвторизованныйПользователь();
	Запись.Подразделение = Запись.Пользователь.Подразделение;
	Запись.Источник = ОбъектСчетчикаРабочегоВремени;
	Запись.ВидРабот =  ВидРаботОбъектаСчетчикаРабочегоВремени;
	Запись.Трудозатраты = ?(Трудозатраты / 3600 > 8, 8 * 3600, Трудозатраты);
	Запись.ТрудозатратыВремя = Дата('00010101') + Запись.Трудозатраты;
	Если ТипЗнч(Запись.Источник) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Запись.Интерес = Запись.Источник;
	Иначе
		Запись.Интерес = ИнтересОбъекта(Запись.Источник);
	КонецЕсли;
	
	Если ТипЗнч(Запись.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если ЗначениеЗаполнено(Запись.Источник.БизнесПроцесс) Тогда
			Запись.КартаМаршрута = Запись.Источник.БизнесПроцесс.КартаМаршрута;
			Запись.ТочкаМаршрута = Запись.Источник.CRM_ТочкаМаршрута;
		КонецЕсли;	
		Запись.Клиент = Запись.Источник.CRM_Партнер;
		Запись.Проект = Запись.Источник.CRM_Проект;
		Запись.Этап = Запись.Источник.CRM_Этап;
	ИначеЕсли ТипЗнч(Запись.Источник) = Тип("ДокументСсылка.CRM_Интерес") Тогда	
		Запись.Клиент = Запись.Источник.Партнер;
	ИначеЕсли ТипЗнч(Запись.Источник) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Если ТипЗнч(Запись.Источник.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Запись.Клиент = Запись.Источник.АбонентКонтакт;	
		ИначеЕсли ТипЗнч(Запись.Источник.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
			Запись.Клиент = Запись.Источник.АбонентКонтакт.Владелец;	
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Запись.Источник) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Если ТипЗнч(Запись.Источник.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Запись.Клиент = Запись.Источник.ОтправительКонтакт;	
		ИначеЕсли ТипЗнч(Запись.Источник.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда	
			Запись.Клиент = Запись.Источник.ОтправительКонтакт.Владелец;	
		КонецЕсли;	
		Запись.Проект = Запись.Источник.CRM_Проект;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Запись.Клиент)
		 И CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", Запись.Источник.Метаданные()) Тогда
		Запись.Клиент = Запись.Источник["Партнер"];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Запись.Проект)
		 И CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Проект", Запись.Источник.Метаданные()) Тогда
		Запись.Проект = Запись.Источник["Проект"];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Запись.Проект)
		 И CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("CRM_Проект", Запись.Источник.Метаданные()) Тогда
		Запись.Проект = Запись.Источник["CRM_Проект"];
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет таблицу записей трудозатраты.
//
// Параметры:
//	ТаблицаЗаписейНаименование - Строка - Наименование таблицы записей.
//	Форма - ФормаКлиентскогоПриложения - Форма.
//	Источник - ОпределяемыйТип.CRM_ИсточникТрудозатрат - Объект источник трудозатрат.
//	Пользователь - СправочникСсылка.Пользователи - Пользователь.
//
Процедура ПерезаполнитьТаблицуЗаписейТрудозатраты(ТаблицаЗаписейНаименование, Форма, Источник)
	
	НаборЗаписей = РегистрыСведений.CRM_РабочееВремяПользователей.СоздатьНаборЗаписей();
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		НаборЗаписей.Отбор.Интерес.Установить(Источник);
	Иначе
		НаборЗаписей.Отбор.Источник.Установить(Источник);
	КонецЕсли;
	ОтборПользовательВключен =  Форма.УРВ_ОтборМои;
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь(), ОтборПользовательВключен);
	НаборЗаписей.Прочитать();
	
	Форма.ЗначениеВРеквизитФормы(НаборЗаписей, ТаблицаЗаписейНаименование);
	
	// Заполнение дополнительных колонок
	ТаблицаЗаписей = Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()];
	Для Каждого Запись Из ТаблицаЗаписей Цикл
		Запись.ДатаУчета = Запись.ДатаРегистрации;
		Запись.НачалоУчета = Запись.ДатаРегистрации;
		Запись.ОкончаниеУчета = Запись.ДатаРегистрации + Запись.Трудозатраты;
		Запись.ВремяУчета = CRM_ТрудозатратыКлиентСервер.ПолучитьПредставлениеВремени(Запись.Трудозатраты);
	КонецЦикла;
	
	CRM_ТрудозатратыКлиентСервер.ОбновитьНумерациюСтрокТаблицыЗаписей(ТаблицаЗаписей);
	CRM_ТрудозатратыКлиентСервер.ОбновитьВремяУчетаИтого(Форма);
	
КонецПроцедуры

Процедура ДобавитьЗаписьНаборЗаписейФормаТрудозатраты(Форма)
	
	Запись = Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].Добавить();
	
	ЗаполнитьЗаписьТрудозатратПоИсточнику(Запись, Форма.Объект.Ссылка, Неопределено, Форма.УРВ_ВидРабот);
	
	ЗаписатьНаборЗаписейФормаТрудозатраты(Форма);
	
	// Дозаполнение реквизитов формы
	Запись.ДатаУчета = Запись.ДатаРабот;
	
	Форма.Элементы[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()].ТекущаяСтрока = Запись.ПолучитьИдентификатор();
	
КонецПроцедуры

Функция ЗаписатьНаборЗаписейФормаТрудозатраты(Форма)
	
	НаборЗаписей = Форма.РеквизитФормыВЗначение(CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ());
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ИнтересОбъекта(Объект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЖурналДокументов.CRM_Интерес КАК Ссылка,
	|	ЖурналДокументов.ОсновнойИнтерес КАК ОсновнойИнтерес
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|	И ЖурналДокументов.ГлавнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойИнтерес УБЫВ");
	
	Запрос.Параметры.Вставить("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.CRM_Интерес.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура ПодготовитьКомандуУказатьТрудозатраты(Форма, ГруппаКонтейнер)
	
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_УказатьТрудозатраты");
	КомандаФормы.Заголовок = НСтр("ru = 'Указать трудозатраты'");
	КомандаФормы.Подсказка = НСтр("ru = 'Указать трудозатраты'");
	КомандаФормы.Действие = "Подключаемый_Команда_CRM_УказатьТрудозатраты";
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	ЭлементКомандаФормы = Форма.Элементы.Добавить("Команда_CRM_УказатьТрудозатраты", Тип("КнопкаФормы"), ГруппаКонтейнер);
	ЭлементКомандаФормы.ИмяКоманды = "Команда_CRM_УказатьТрудозатраты";
	ЭлементКомандаФормы.Отображение = ОтображениеКнопки.Картинка;
	ЭлементКомандаФормы.Картинка = БиблиотекаКартинок.CRMВыпадающийСписокУзкая;
	ЭлементКомандаФормы.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКомандаФормы.Вид = ВидКнопкиФормы.Гиперссылка;
	ЭлементКомандаФормы.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	
КонецПроцедуры

Процедура ПодготовитьГруппуТрудозатраты(Форма, ГруппаКонтейнер)
	
	ТаблицаЗаписейНаименование = CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ();
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ОписаниеТипаСтрока150 = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	
	КД_Дата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	КД_Время = Новый КвалификаторыДаты(ЧастиДаты.Время);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УРВ_ВидРабот",
		 Новый ОписаниеТипов("СправочникСсылка.CRM_ВидыРабот")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УРВ_ВремяУчетаИтого", ОписаниеТипаСтрока150));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УРВ_ОтборМои", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаЗаписейНаименование,
		 Новый ОписаниеТипов("РегистрСведенийНаборЗаписей.CRM_РабочееВремяПользователей")
		 ));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерСтроки", Новый ОписаниеТипов("Число"),
		 ТаблицаЗаписейНаименование));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаУчета", Новый ОписаниеТипов("Дата", , , , ,
		 КД_Дата),
		 ТаблицаЗаписейНаименование));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НачалоУчета", Новый ОписаниеТипов("Дата", , , ,
		 , КД_Время),
		 ТаблицаЗаписейНаименование));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОкончаниеУчета", Новый ОписаниеТипов("Дата", , ,
		 , , КД_Время),
		 ТаблицаЗаписейНаименование));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВремяУчета", ОписаниеТипаСтрока150, ТаблицаЗаписейНаименование));
	
	// Всомогательные флаги, которые использует клиентская часть форм
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ИспользуетсяУчетРабочегоВремени",
		 Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CRM_ТаймерУРВЗапущен", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ВидРаботКЗаполнению = Справочники.CRM_ВидыРабот.ПустаяСсылка();
	ДанныеУРВ = ПолучитьПоследнююЗаписьСОтбором(Форма.Объект.Ссылка, Пользователи.АвторизованныйПользователь());
	Если ЗначениеЗаполнено(ДанныеУРВ) И ЗначениеЗаполнено(ДанныеУРВ.ВидРабот) Тогда
		ВидРаботКЗаполнению = ДанныеУРВ.ВидРабот;
	Иначе
		ВидРаботКЗаполнению = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВидРаботПоУмолчанию");
	КонецЕсли;
	Форма.УРВ_ВидРабот = ВидРаботКЗаполнению;
	Форма.CRM_ИспользуетсяУчетРабочегоВремени = Истина;
	
	ПерезаполнитьТаблицуЗаписейТрудозатраты(ТаблицаЗаписейНаименование, Форма, Форма.Объект.Ссылка);
	
	ГруппаРазмещения = СоздатьЭлементГруппаТаблицыЗаписейТрудозатраты(Форма, ГруппаКонтейнер);
	СоздатьЭлементТаблицаЗаписейТрудозатраты(ТаблицаЗаписейНаименование, ГруппаРазмещения, Форма);
	
	// Позиционирование курсора на строку таблицы с максимальной датой (последнюю).
	Форма.Элементы[ТаблицаЗаписейНаименование].ТекущаяСтрока = Форма[ТаблицаЗаписейНаименование].Количество() - 1;
	
КонецПроцедуры

Функция СоздатьЭлементГруппаТаблицыЗаписейТрудозатраты(Форма, ГруппаКонтейнер)
	
	ГруппаРазмещенияВнешняя = Форма.Элементы.Добавить(CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ(),
		 Тип("ГруппаФормы"),
		 ГруппаКонтейнер);
	ГруппаРазмещенияВнешняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазмещенияВнешняя.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаРазмещенияВнешняя.Заголовок = ".";
	ГруппаРазмещенияВнешняя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРазмещенияВнешняя.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаРазмещенияВнешняя.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
	ГруппаРазмещенияВнешняя.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	ГруппаРазмещенияВнешняя.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
	ГруппаРазмещенияВнешняя.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ГруппаРазмещенияВнешняя.РастягиватьПоГоризонтали = Ложь;
	ГруппаРазмещенияВнешняя.РастягиватьПоВертикали = Ложь;
	ГруппаРазмещенияВнешняя.Видимость = Ложь;
	
	ГруппаРазмещения = Форма.Элементы.Добавить(CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ() 
		+ "_Внутренняя", Тип("ГруппаФормы"), ГруппаРазмещенияВнешняя);
	ГруппаРазмещения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазмещения.Поведение = ПоведениеОбычнойГруппы.Обычное;
	ГруппаРазмещения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРазмещения.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаРазмещения.ОтображатьЗаголовок = Ложь;
	ГруппаРазмещения.Ширина = 85;
	ГруппаРазмещения.РастягиватьПоГоризонтали = Ложь;
	ГруппаРазмещения.РастягиватьПоВертикали = Ложь;
	
	// Элементы
	ГруппаШапкаТаблицыУРВ = Форма.Элементы.Добавить("ГруппаШапкаТаблицыУРВ", Тип("ГруппаФормы"), ГруппаРазмещения);
	ГруппаШапкаТаблицыУРВ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапкаТаблицыУРВ.Поведение = ПоведениеОбычнойГруппы.Обычное;
	ГруппаШапкаТаблицыУРВ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	ГруппаШапкаТаблицыУРВ.ОтображатьЗаголовок = Ложь;
	
	ПолеВидРабот = Форма.Элементы.Добавить("ПолеВидРабот", Тип("ПолеФормы"), ГруппаШапкаТаблицыУРВ);
	ПолеВидРабот.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВидРабот.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеВидРабот.ПутьКДанным = "УРВ_ВидРабот";
	
	ПолеВремяУчетаИтого = Форма.Элементы.Добавить("ПолеВремяУчетаИтого", Тип("ПолеФормы"), ГруппаШапкаТаблицыУРВ);
	ПолеВремяУчетаИтого.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВремяУчетаИтого.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ПолеВремяУчетаИтого.ПутьКДанным = "УРВ_ВремяУчетаИтого";
	ПолеВремяУчетаИтого.Заголовок = НСтр("ru = 'Итого'");
	ПолеВремяУчетаИтого.ТолькоПросмотр = Истина;
	ПолеВремяУчетаИтого.АвтоМаксимальнаяШирина = Ложь;
	ПолеВремяУчетаИтого.МаксимальнаяШирина = 24;
	ПолеВремяУчетаИтого.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	ПолеВремяУчетаИтого.ЦветРамки = ЦветаСтиля.CRM_СерыйДляПодложек;
	
	// Панель таблицы
	ПанельГруппыРазмещения = Форма.Элементы.Добавить("CRM_ПанельГруппыРазмещения", Тип("ГруппаФормы"), ГруппаРазмещения);
	ПанельГруппыРазмещения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПанельГруппыРазмещения.ОтображатьЗаголовок = Ложь;
	ПанельГруппыРазмещения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_ДобавитьЗаписьТрудозатраты");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Действие = "Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты";
	
	ЭлементКоманда = Форма.Элементы.Добавить("CRM_ДобавитьЗаписьТрудозатраты", Тип("КнопкаФормы"), ПанельГруппыРазмещения);
	ЭлементКоманда.Заголовок = НСтр("ru='Добавить';en='Add'");
	ЭлементКоманда.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЭлементКоманда.ЦветРамки = ЭлементКоманда.ЦветФона;
	ЭлементКоманда.ЦветТекста = ЦветаСтиля.ЦветФонаПоля;
	ЭлементКоманда.Шрифт = Новый Шрифт(, , Истина);
	ЭлементКоманда.ИмяКоманды = "Команда_CRM_ДобавитьЗаписьТрудозатраты";
	ЭлементКоманда.Доступность = Не Форма.ТолькоПросмотр;
	//
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_УдалитьЗаписьТрудозатраты");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Действие = "Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты";
	
	ЭлементКоманда = Форма.Элементы.Добавить("CRM_УдалитьЗаписьТрудозатраты", Тип("КнопкаФормы"), ПанельГруппыРазмещения);
	ЭлементКоманда.Заголовок = НСтр("ru='Удалить';en='Delete'");
	//ЭлементКоманда.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
	//ЭлементКоманда.ЦветРамки = ЭлементКоманда.ЦветФона;
	ЭлементКоманда.ЦветТекста = Новый Цвет(255, 0, 0);
	ЭлементКоманда.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКоманда.Шрифт = Новый Шрифт(, , Истина);
	ЭлементКоманда.ИмяКоманды = "Команда_CRM_УдалитьЗаписьТрудозатраты";
	ЭлементКоманда.Доступность = Не Форма.ТолькоПросмотр;
	
	// Отборы
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_ОтборВсе");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Действие = "Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты";
	
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_ОтборМои");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Действие = "Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты";
	
	ПанельОтбора = Форма.Элементы.Добавить("УРВ_ПанельОтбора", Тип("ГруппаФормы"), ПанельГруппыРазмещения);
	ПанельОтбора.Вид = ВидГруппыФормы.КоманднаяПанель;
	ПанельОтбора.РастягиватьПоГоризонтали = Ложь;
	
	КнопкиОтбора = Форма.Элементы.Добавить("УРВ_КнопкиОтбора", Тип("ГруппаФормы"), ПанельОтбора);
	КнопкиОтбора.Вид = ВидГруппыФормы.ГруппаКнопок;
	КнопкиОтбора.Отображение = ОтображениеГруппыКнопок.Компактное;
	
	ЭлементКоманда = Форма.Элементы.Добавить("Команда_CRM_ОтборВсе", Тип("КнопкаФормы"), КнопкиОтбора);
	ЭлементКоманда.Заголовок = НСтр("ru = 'Все'");
	ЭлементКоманда.ИмяКоманды = "Команда_CRM_ОтборВсе";
	ЭлементКоманда.Доступность = Не Форма.ТолькоПросмотр;
	ЭлементКоманда.Пометка = Истина;
	
	ЭлементКоманда = Форма.Элементы.Добавить("Команда_CRM_ОтборМои", Тип("КнопкаФормы"), КнопкиОтбора);
	ЭлементКоманда.Заголовок = НСтр("ru = 'Мои'");
	ЭлементКоманда.ИмяКоманды = "Команда_CRM_ОтборМои";
	ЭлементКоманда.Доступность = Не Форма.ТолькоПросмотр;
	
	ЭлементДекорация = Форма.Элементы.Добавить("Декорация_CRM_РазделительКнопкиРазвернутьСвернуть",
		 Тип("ДекорацияФормы"),
		 ГруппаШапкаТаблицыУРВ);
	ЭлементДекорация.Вид = ВидДекорацииФормы.Надпись;
	ЭлементДекорация.Заголовок = "";
	ЭлементДекорация.АвтоМаксимальнаяШирина = Ложь;
	ЭлементДекорация.РастягиватьПоГоризонтали = Истина;
	
	КомандаФормы = Форма.Команды.Добавить("Команда_CRM_СвернутьРазвернутьГруппу");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Действие = "Подключаемый_CRM_СвернутьРазвернутьГруппу";
	
	ЭлементКоманда = Форма.Элементы.Добавить("Команда_CRM_СвернутьРазвернутьГруппу",
		 Тип("КнопкаФормы"),
		 ГруппаШапкаТаблицыУРВ);
	ЭлементКоманда.ИмяКоманды = "Команда_CRM_СвернутьРазвернутьГруппу";
	ЭлементКоманда.Картинка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
	ЭлементКоманда.Отображение = ОтображениеКнопки.Картинка;
	ЭлементКоманда.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ЭлементКоманда.Ширина = 2;
	ЭлементКоманда.Высота = 1;
	
	Возврат ГруппаРазмещения;
	
КонецФункции

Процедура СоздатьЭлементТаблицаЗаписейТрудозатраты(ТаблицаЗаписейНаименование, ГруппаРазмещения, Форма)
	
	ТаблицаРабочееВремя = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование, Тип("ТаблицаФормы"), ГруппаРазмещения);
	ТаблицаРабочееВремя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ТаблицаРабочееВремя.ПутьКДанным = ТаблицаЗаписейНаименование;
	ТаблицаРабочееВремя.РастягиватьПоГоризонтали = Истина;
	ТаблицаРабочееВремя.РастягиватьПоВертикали = Истина;
	ТаблицаРабочееВремя.КоманднаяПанель.Видимость = Ложь;
	//ТаблицаРабочееВремя.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	ТаблицаРабочееВремя.ИзменятьСоставСтрок = Ложь;
	//ТаблицаРабочееВремя.Ширина = 102;
	ТаблицаРабочееВремя.ИзменятьПорядокСтрок = Ложь;
	ТаблицаРабочееВремя.УстановитьДействие("ПриИзменении", "Подключаемый_CRM_РабочееВремяПользователейПриИзменении");
	ТаблицаРабочееВремя.УстановитьДействие("ПередНачаломДобавления",
		 "Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления");
	
	Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + "НомерСтроки", Тип("ПолеФормы"), ТаблицаРабочееВремя);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + "НомерСтроки";
	Колонка.Заголовок = НСтр("ru = 'N'");
	Колонка.ТолькоПросмотр = Истина;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.Ширина = 3;
	
	Для Каждого ИзмерениеРС Из Метаданные.РегистрыСведений.CRM_РабочееВремяПользователей.Измерения Цикл
		Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + ИзмерениеРС.Имя, Тип("ПолеФормы"),
			 ТаблицаРабочееВремя);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + ИзмерениеРС.Имя;
		Колонка.Заголовок = ИзмерениеРС.Синоним;
		Если ИзмерениеРС.Имя = "ВидРабот"
			Или ИзмерениеРС.Имя = "Пользователь"
			Или ИзмерениеРС.Имя = "Источник" Тогда
			Колонка.Видимость = Истина;
			Колонка.РастягиватьПоГоризонтали = Ложь;
			Колонка.Ширина = 20;
		Иначе
			Колонка.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + "ДатаУчета", Тип("ПолеФормы"), ТаблицаРабочееВремя);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + "ДатаУчета";
	Колонка.Заголовок = НСтр("ru = 'Дата'");
	Колонка.ФорматРедактирования = "ДЛФ=D";
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.Ширина = 10;
	
	Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + "НачалоУчета", Тип("ПолеФормы"), ТаблицаРабочееВремя);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + "НачалоУчета";
	Колонка.Заголовок = НСтр("ru = 'Начало'");
	Колонка.ФорматРедактирования = "ДЛФ=T";
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.Ширина = 5;
	
	Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + "ОкончаниеУчета", Тип("ПолеФормы"),
		 ТаблицаРабочееВремя);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + "ОкончаниеУчета";
	Колонка.Заголовок = НСтр("ru = 'Окончание'");
	Колонка.ФорматРедактирования = "ДЛФ=T";
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.Ширина = 5;
	
	Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + "ВремяУчета", Тип("ПолеФормы"), ТаблицаРабочееВремя);
	Колонка.Вид = ВидПоляФормы.ПолеВвода;
	Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + "ВремяУчета";
	Колонка.Заголовок = НСтр("ru = 'Время'");
	Колонка.ТолькоПросмотр = Истина;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.Ширина = 5;
	
	Для Каждого РесурсРС Из Метаданные.РегистрыСведений.CRM_РабочееВремяПользователей.Ресурсы Цикл
		Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + РесурсРС.Имя, Тип("ПолеФормы"), ТаблицаРабочееВремя);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + РесурсРС.Имя;
		Колонка.Заголовок = РесурсРС.Синоним;
		Колонка.Видимость = Ложь;
	КонецЦикла;
	
	Для Каждого РеквизитРС Из Метаданные.РегистрыСведений.CRM_РабочееВремяПользователей.Реквизиты Цикл
		Колонка = Форма.Элементы.Добавить(ТаблицаЗаписейНаименование + РеквизитРС.Имя, Тип("ПолеФормы"), ТаблицаРабочееВремя);
		Колонка.Вид = ВидПоляФормы.ПолеВвода;
		Колонка.ПутьКДанным = ТаблицаЗаписейНаименование + "." + РеквизитРС.Имя;
		Если РеквизитРС.Имя = "ОписаниеРаботы" Тогда
			Колонка.Заголовок = НСтр("ru = 'Описание'; en = 'Description'");
			Колонка.АвтоВысотаЯчейки = Истина;
			Колонка.МногострочныйРежим = Истина;
			Колонка.КнопкаВыбора = Истина;
			Колонка.УстановитьДействие("НачалоВыбора", "Подключаемый_CRM_РабочееВремяПользователейОписаниеРаботыНачалоВыбора");
		Иначе
			Колонка.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
