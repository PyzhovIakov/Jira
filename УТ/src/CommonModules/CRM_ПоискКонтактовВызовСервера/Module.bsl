
#Область ПрограммныйИнтерфейс

#Область ПоискДублейПоЗначению

// Возвращает имя твблицы для поиска дублей по значению.
//
// Параметры:
//	ИмяПоля - Строка - Имя поля.
//
// Возвращаемое значение:
//	Строка - имя твблицы для поиска дублей по значению.
//
Функция ИмяТаблицыПоискДублейПоЗначению(ИмяПоля) Экспорт
	Возврат "РезультатыПоискаДублейПоЗначению_" + ИмяПоля;
КонецФункции

// Готовит поиск дублей по значению.
//
// Параметры:
//	Форма			 - ФормаКлиентскогоПриложения - Форма.
//	ЗначениеПоиска	 - Строка - Значение поиска.
//	ИмяПоля			 - Строка - Имя поля.
//	ТипКИ			 - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//
Процедура ПодготовитьПоискДублейПоЗначению(Форма, ЗначениеПоиска, ИмяПоля, ТипКИ) Экспорт
	
	Если НЕ CRM_ПоискКонтактовВызовСервера.РеквизитИспользуетсяПриПоискеДублейПоЗначению(Форма, ИмяПоля, ТипКИ) Тогда
		УдалитьРеквизитТаблицыПоискаДублейПоЗначению(Форма,
			 CRM_ПоискКонтактовВызовСервера.ИмяТаблицыПоискДублейПоЗначению(ИмяПоля) );
		НастроитьФормуПослеПоискаДублей(Форма, ИмяПоля);
		Возврат;
	КонецЕсли;
	
	лСтрокаПоиска = СокрЛП(ЗначениеПоиска);
	
	Отказ = Ложь;
	
	Если СтрДлина(лСтрокаПоиска) < 3  И СтрДлина(лСтрокаПоиска) > 0 Тогда // Минимальная длина строки поиска 3 символа
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначениюНаСервере(Форма, лСтрокаПоиска, ИмяПоля, ЗначениеПоиска);
	
КонецПроцедуры

// Выполняет поиск дублей по значению.
//
// Параметры:
//	Форма			 - ФормаКлиентскогоПриложения - Форма.
//	лСтрокаПоиска	 - Строка - Строка поиска.
//	ИмяПоля - Строка - Имя поля.
//	ЗначениеПоиска	 - Строка - Значение поиска.
//
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(Форма, лСтрокаПоиска, ИмяПоля, ЗначениеПоиска) Экспорт

	лСпособПоиска = 2; // 0 - По началу строки; 1 - По части строки; 2 - По точному совпадению
		
	ИмяТаблицаРезультатов = ИмяТаблицыПоискДублейПоЗначению(ИмяПоля);
	
	СоздатьРеквизитТаблицыПоискаДублейПоЗначению(Форма, ИмяТаблицаРезультатов);
		
	// Анализ строк поиска, формализация условий и заполнение кэша
	лКэшПоиска = CRM_ПоискКонтактов.СтруктураДанныхКэша();
	лКэшЗаполнения = CRM_ПоискКонтактов.СтруктураДанныхКэша();
	лУсловияПоиска = Новый Массив;
	
	Если Не ПустаяСтрока(лСтрокаПоиска) Тогда
		
		лСтрокаПоискаНормализованная = CRM_ПоискКонтактов.НормализоватьСтрокуПоискаИДополнитьКэш(лСтрокаПоиска,
			 лКэшПоиска,
			 лКэшЗаполнения);
		
		лСтруктураУсловия = CRM_ПоискКонтактов.СтруктураУсловияПоиска(лСтрокаПоискаНормализованная);
		
		лПоляПоискаУсловия = Новый Массив;
		
		Если СтрЧислоВхождений(ВРег(ИмяПоля), ВРег("Наименование")) > 0
			ИЛИ СтрЧислоВхождений(ВРег(ИмяПоля), "ФИО") > 0 Тогда
			
			лПоляПоискаУсловия.Добавить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование);
			лПоляПоискаУсловия.Добавить(Перечисления.CRM_ПоляПоискаКонтактов.НаименованиеПолное);
			
		КонецЕсли;
		
		Если СтрЧислоВхождений(ВРег(ИмяПоля), "ФАМИЛИЯ") > 0 Тогда
			лПоляПоискаУсловия.Добавить(Перечисления.CRM_ПоляПоискаКонтактов.Наименование);
			лСпособПоиска = 1;
		КонецЕсли;

		Если СтрЧислоВхождений(ВРег(ИмяПоля), ВРег("ИНН")) > 0 Тогда
			лПоляПоискаУсловия.Добавить(Перечисления.CRM_ПоляПоискаКонтактов.ИНН);
		КонецЕсли;
		
		лСтруктураУсловия.Вставить("ПоляПоиска", ?(лПоляПоискаУсловия.Количество() > 0, лПоляПоискаУсловия, Неопределено));
		
		лУсловияПоиска.Добавить(лСтруктураУсловия);
		
	КонецЕсли;
	
	// Поиск
	УстановитьПривилегированныйРежим(Истина);

	лРезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(лУсловияПоиска, лСпособПоиска, Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(лРезультатПоиска.КодОшибки) Тогда
		НастроитьФормуПослеПоискаДублей(Форма, ИмяПоля);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	лНайденныеСсылки = Новый ТаблицаЗначений;
	лНайденныеСсылки.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.CRM_КонтактДляПоиска.Тип);
	
	Для Каждого НайденнаяСсылка Из лРезультатПоиска.Элементы Цикл
		лНайденныеСсылки.Добавить().Ссылка = НайденнаяСсылка;
	КонецЦикла;
	
	Запрос.Параметры.Вставить("НайденныеСсылки", лНайденныеСсылки);
	Запрос.Параметры.Вставить("СтрокаКлиент", НСтр("ru = 'Клиент'; en = 'Customer'"));
	Запрос.Параметры.Вставить("СтрокаКонтакт", НСтр("ru = 'Контакт'; en = 'Contact'"));
	Запрос.Параметры.Вставить("СтрокаПотенциальныйКлиент", НСтр("ru = 'П-й клиент'; en = 'P-l Customer'"));
	Запрос.Параметры.Вставить("КомандаВыбрать", НСтр("ru = 'Выбрать'; en = 'Select'"));
	Запрос.Параметры.Вставить("ЗначениеПоиска", ЗначениеПоиска);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И Форма.Объект <> Неопределено И Форма.Объект.Свойство("Ссылка") Тогда
		Запрос.Параметры.Вставить("ТекущийОбъектНеЗадан", Форма.Объект.Ссылка.Пустая());
		Запрос.Параметры.Вставить("ТекущийОбъект", Форма.Объект.Ссылка);
	Иначе
		Запрос.Параметры.Вставить("ТекущийОбъектНеЗадан", Истина);
		Запрос.Параметры.Вставить("ТекущийОбъект", Неопределено);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, CRM_ПоискКонтактов.ПараметрыЗапросов());
	
	Запрос.Текст = CRM_ПоискКонтактов.ТекстЗапросаПоискаДублей();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Не РезультатЗапроса.Пустой() Тогда
		РезультатыПоискаТЗ = РезультатЗапроса.Выгрузить();
		Для каждого Строка Из РезультатыПоискаТЗ Цикл
			Строка.Доступен = УправлениеДоступом.ЧтениеРазрешено(Строка.КлиентКонтакт);
		КонецЦикла;
		Форма.ЗначениеВРеквизитФормы(РезультатыПоискаТЗ, ИмяТаблицаРезультатов);
		Форма["ПоискДублей_НайденыДубли"] = Ложь;
		Форма["ПоискДублей_НайденыДублиКлиенты"] = Ложь;
		Форма["ПоискДублей_НайденыДублиКонтакты"] = Ложь;
		Для каждого Строка Из РезультатыПоискаТЗ Цикл
			Если ТипЗнч(Строка.КлиентКонтакт) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Если ТипЗнч(Строка.КлиентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
					Форма["ПоискДублей_НайденыДублиКлиенты"] = Истина;
				ИначеЕсли ТипЗнч(Строка.КлиентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Форма["ПоискДублей_НайденыДублиКонтакты"] = Истина;
				КонецЕсли;
				Форма["ПоискДублей_НайденыДубли"] = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Форма["ПоискДублей_НайденыДубли"] = Ложь;
		Форма["ПоискДублей_НайденыДублиКлиенты"] = Ложь;
		Форма["ПоискДублей_НайденыДублиКонтакты"] = Ложь;
	КонецЕсли;
	
	НастроитьФормуПослеПоискаДублей(Форма, ИмяПоля);
	
КонецПроцедуры

// Возвращает признак использования реквизита при поиске дублей.
//
// Параметры:
//	Форма			 - ФормаКлиентскогоПриложения - Форма.
//	ИмяПоляРеквизита - Строка - Имя поля.
//	ТипКИ			 - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//
// Возвращаемое значение:
//	Булево - признак использования реквизита при поиске дублей.
//
Функция РеквизитИспользуетсяПриПоискеДублейПоЗначению(Форма, ИмяПоляРеквизита, ТипКИ = Неопределено) Экспорт
	
	СтруктураПоиска = CRM_ПоискКонтактов.СоздатьСтруктуруПоиска();
	
	ПолеРеквизита = Форма.Элементы.Найти(ИмяПоляРеквизита);
	
	Если ПолеРеквизита <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТипКИ) Тогда
			
			ИмяСвойства = "";
			Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ИмяСвойства = "Контакт_Адрес";
			ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				ИмяСвойства = "Контакт_Телефон";
			ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				ИмяСвойства = "Контакт_АдресЭлектроннойПочты";
			КонецЕсли;
			
			Возврат ЗначениеЗаполнено(ИмяСвойства) И СтруктураПоиска.Свойство(ИмяСвойства);
			
		Иначе
			
			Если СтрЧислоВхождений(ВРег(ПолеРеквизита.ПутьКДанным), "ФИО") > 0
				ИЛИ СтрЧислоВхождений(ВРег(ПолеРеквизита.ПутьКДанным), "ФАМИЛИЯ") > 0 Тогда
				Возврат СтруктураПоиска.Свойство("Наименование");
			Иначе
				ОчищенноеИмя = СтрЗаменить(ПолеРеквизита.ПутьКДанным, "Клиент_Объект.", "");
				ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "Контакт_Объект.", "");
				ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "Объект.", "");
				Возврат СтруктураПоиска.Свойство(ОчищенноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Создает реквизит таблицы поиска дублей по значению.
//
// Параметры:
//	Форма				  - ФормаКлиентскогоПриложения - Форма.
//	ИмяТаблицаРезультатов - Строка - Имя таблицы результатов.
//
Процедура СоздатьРеквизитТаблицыПоискаДублейПоЗначению(Форма, ИмяТаблицаРезультатов) Экспорт
	
	Если CRM_КлассификаторыЭкспортныеМетоды.РеквизитФормыСуществует(Форма, ИмяТаблицаРезультатов) Тогда
		
		// Очистка существующих результатов
		Форма[ИмяТаблицаРезультатов].Очистить();
		
	Иначе // Создание недостающих реквизитов формы
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоискДублей_НайденыДубли") Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоискДублей_НайденыДубли", Новый ОписаниеТипов("Булево")) );		
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоискДублей_НайденыДублиКлиенты") Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоискДублей_НайденыДублиКлиенты",
				 Новый ОписаниеТипов("Булево")) );		
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоискДублей_НайденыДублиКонтакты") Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоискДублей_НайденыДублиКонтакты",
				 Новый ОписаниеТипов("Булево")) );		
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы(ИмяТаблицаРезультатов, Новый ОписаниеТипов("ТаблицаЗначений")) );		
		
		МассивТиповКлиентКонтакт = Новый Массив;
		МассивТиповКлиентКонтакт.Добавить(Метаданные.ОпределяемыеТипы.CRM_КонтактДляПоиска.Тип);
		
		МассивТиповЗначениеПоиска = Новый Массив;
		МассивТиповЗначениеПоиска.Добавить(Метаданные.ОпределяемыеТипы.CRM_КонтактДляПоиска.Тип);
		МассивТиповЗначениеПоиска.Добавить(Тип("Строка"));
		МассивТиповЗначениеПоиска.Добавить(Тип("Число"));
		
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("ПредставлениеКлиентаКонтакта",
			 Новый ОписаниеТипов("Строка"),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("КлиентКонтакт",
			 Новый ОписаниеТипов(МассивТиповКлиентКонтакт),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("ОсновнойМенеджер",
			 Новый ОписаниеТипов("СправочникСсылка.Пользователи"),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("КомандаВыбрать",
			 Новый ОписаниеТипов("Строка"),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("ЗначениеПоиска",
			 Новый ОписаниеТипов(МассивТиповЗначениеПоиска),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("Доступен", Новый ОписаниеТипов("Булево"),
			 ИмяТаблицаРезультатов) );
		ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("ПометкаУдаления",
			 Новый ОписаниеТипов("Булево"),
			 ИмяТаблицаРезультатов) );
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет реквизит таблицы поиска дублей по значению.
//
// Параметры:
//	Форма				  - ФормаКлиентскогоПриложения - Форма.
//	ИмяТаблицаРезультатов - Строка - Имя таблицы результатов.
//
Процедура УдалитьРеквизитТаблицыПоискаДублейПоЗначению(Форма, ИмяТаблицаРезультатов) Экспорт
	
	Если CRM_КлассификаторыЭкспортныеМетоды.РеквизитФормыСуществует(Форма, ИмяТаблицаРезультатов) Тогда
		
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить(ИмяТаблицаРезультатов);
		
		Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает форму после поиска дублей.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - Форма.
//	ИмяПоля - Строка - Имя поля.
//
Процедура НастроитьФормуПослеПоискаДублей(Форма, ИмяПоля) Экспорт
	
	ИмяТаблицаРезультатов = ИмяТаблицыПоискДублейПоЗначению(ИмяПоля);
	
	Если CRM_КлассификаторыВызовСервера.РеквизитФормыСуществует(Форма, ИмяТаблицаРезультатов) Тогда
		лКоличествоНайденных = Форма[ИмяТаблицаРезультатов].Количество();
		Для Каждого Строка Из Форма[ИмяТаблицаРезультатов] Цикл
			Если ТипЗнч(Строка.КлиентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				УстановитьПривилегированныйРежим(Истина);
				Если НЕ Строка.КлиентКонтакт.Владелец.Пустая() Тогда
					Строка.Представление = Строка.Представление + " (" + Строка.КлиентКонтакт.Владелец.Наименование + ")";
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		лКоличествоНайденных = 0;
	КонецЕсли;
	
	лЕстьНайденные = (лКоличествоНайденных > 0);
	
	ИмяГруппыДублей = "ДублиПоЗначению" + ИмяПоля;
	
	ГруппаДублейСуществует = Форма.Элементы.Найти(ИмяГруппыДублей) <> Неопределено;
	
	Если ГруппаДублейСуществует И НЕ лЕстьНайденные Тогда // удалить группу
		Форма.Элементы.Удалить(Форма.Элементы[ИмяГруппыДублей]);
	КонецЕсли;
	
	Если НЕ ГруппаДублейСуществует И лЕстьНайденные Тогда // создание всплывающей группы с результатами поиска 
	 
		РодительГруппыДублей = Форма.Элементы.Найти(ИмяПоля).Родитель;
		
		ГруппаДублей = Форма.Элементы.Добавить(
				ИмяГруппыДублей,
				Тип("ГруппаФормы"),
				РодительГруппыДублей);
				
		ГруппаДублей.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДублей.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		ГруппаДублей.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_ОсновнойГолубой;
		ГруппаДублей.ШрифтЗаголовка = ШрифтыСтиля.ОбычныйШрифтТекста;
		
		ТаблицаРезультатов = Форма.Элементы.Добавить(ИмяТаблицаРезультатов, Тип("ТаблицаФормы"), ГруппаДублей);
		ТаблицаРезультатов.ПутьКДанным = ИмяТаблицаРезультатов;
		
		ТаблицаРезультатов.Отображение = ОтображениеТаблицы.Список;
		ТаблицаРезультатов.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
		ТаблицаРезультатов.ИзменятьСоставСтрок = Ложь;
		ТаблицаРезультатов.ИзменятьПорядокСтрок = Ложь;
		ТаблицаРезультатов.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаРезультатов.Шапка = Ложь;
		ТаблицаРезультатов.РазрешитьНачалоПеретаскивания = Ложь;
		ТаблицаРезультатов.РазрешитьПеретаскивание = Ложь;
		
		ТаблицаРезультатов.ВысотаВСтрокахТаблицы = Мин(8, лКоличествоНайденных);
		ТаблицаРезультатов.Ширина = 70;
		ТаблицаРезультатов.РастягиватьПоГоризонтали = Ложь;
		ТаблицаРезультатов.РастягиватьПоВертикали = Ложь;
		
		ТаблицаРезультатов.ЦветРамки = Новый Цвет(ТаблицаРезультатов.ЦветФона.Красный,
													ТаблицаРезультатов.ЦветФона.Зеленый,
													ТаблицаРезультатов.ЦветФона.Синий);
		ТаблицаРезультатов.ГоризонтальныеЛинии = Ложь;
		ТаблицаРезультатов.ВертикальныеЛинии = Ложь;
		
		РезультатыПоискаДублейПоЗначениюОбъект = Форма.РеквизитФормыВЗначение(ИмяТаблицаРезультатов);
		Для Каждого Колонка Из РезультатыПоискаДублейПоЗначениюОбъект.Колонки Цикл

			НовыйЭлемент = Форма.Элементы.Добавить(Колонка.Имя + ИмяПоля, Тип("ПолеФормы"), ТаблицаРезультатов);       
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
			НовыйЭлемент.ПутьКДанным = ИмяТаблицаРезультатов + "." + Колонка.Имя;		
			НовыйЭлемент.Заголовок = Колонка.Имя;
			Если Колонка.Имя = "ПредставлениеКлиентаКонтакта" Тогда
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлемент.Ширина = 8;
			ИначеЕсли Колонка.Имя = "Представление" Тогда	
				НовыйЭлемент.Ширина = 30;
				НовыйЭлемент.РастягиватьПоГоризонтали = Истина;	
			ИначеЕсли Колонка.Имя = "КомандаВыбрать" Тогда
				НовыйЭлемент.ГиперссылкаЯчейки = Истина;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлемент.Ширина = 8;
				Если СтрЧислоВхождений(Форма.ИмяФормы, "CRM_МастерРегистрацииОбращения") = 0 Тогда
					НовыйЭлемент.Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли Колонка.Имя = "ЗначениеПоиска" ИЛИ Колонка.Имя = "Доступен"
				 ИЛИ Колонка.Имя = "КлиентКонтакт"
				 ИЛИ Колонка.Имя = "ПометкаУдаления" Тогда
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРезультатов.УстановитьДействие("Выбор", "Подключаемый_ТаблицаРезультатовВыбор");
		
		УО = Форма.УсловноеОформление.Элементы;
		
		ЭлементУО = УО.Добавить();
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
		ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
		ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицаРезультатов);
		ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицаРезультатов + ".Доступен");
		ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение = Ложь;

		ЭлементУО = УО.Добавить();
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
			 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Ложь, Ложь, Ложь,
			 Истина));
		ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
		ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Представление" + ИмяПоля);
		ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицаРезультатов + ".ПометкаУдаления");
		ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.ПравоеЗначение = Истина;

	КонецЕсли;
	
	Если Форма.Элементы.Найти(ИмяГруппыДублей) <> Неопределено Тогда
		
		ШаблонЗаголовка = НСтр("ru = 'Найдено совпадений: %1'");
		Форма.Элементы[ИмяГруппыДублей].Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
			 лКоличествоНайденных);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
