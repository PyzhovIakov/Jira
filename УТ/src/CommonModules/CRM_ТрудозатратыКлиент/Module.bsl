
#Область ПрограммныйИнтерфейс

// Процедура - При открытии
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - Форма вызова обработчика.
//  Отказ	 - Булево						 - Признак отказа.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ИспользуетсяУчетРабочегоВремени") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = ИмяСобытияИзмененияСостоянияТаймера();
	Оповестить(ИмяСобытия, "Открытие", Форма);
	
КонецПроцедуры

// Обработчик события форма "ОбработкаОповещения".
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - Форма вызова обработчика.
//	ИмяСобытия				- Строка - Имя события.
//	Параметр				- Произвольный - Параметр.
//	Источник				- Произвольный - Источник.
//	ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ИспользуетсяУчетРабочегоВремени") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = ИмяСобытияИзмененияСостоянияТаймера() Тогда
		
		ЭтоСвоеСобытие = Ложь;
		Если Форма.УникальныйИдентификатор = Источник.УникальныйИдентификатор Тогда
			ЭтоСвоеСобытие = Истина;
		КонецЕсли;
		
		ЭтоЗавершенныйИнтерес = Ложь;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Интерес")
			И Форма.Объект.Завершен Тогда
			ЭтоЗавершенныйИнтерес = Истина;
		КонецЕсли;
		
		Если ЭтоЗавершенныйИнтерес Тогда
			ВключенаЦветоваяИндикация = Ложь;
		Иначе
			ВключенаЦветоваяИндикация = Не (Параметр = "Нажатие" И ЭтоСвоеСобытие);
		КонецЕсли;
		CRM_ТрудозатратыКлиентСервер.ОбновитьЭлементТаймерУРВ(Форма, ВключенаЦветоваяИндикация);
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события форма "ПередЗакрытием".
//
// Параметры:
//	Форма				 - ФормаКлиентскогоПриложения - Форма вызова обработчика.
//	Отказ				 - Булево - Признак отказа.
//	ЗавершениеРаботы	 - Булево - Признак завершения работы.
//	ТекстПредупреждения	 - Строка - Текст предупреждения.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ИспользуетсяУчетРабочегоВремени") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.CRM_ТаймерУРВЗапущен И ЗавершениеРаботы Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'На форме запущен счетчик учета рабочего времени'");
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + ТекстСообщения;
		Иначе
			ТекстПредупреждения = ТекстСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события форма "ПриЗакрытии".
//
// Параметры:
//	Форма			 - ФормаКлиентскогоПриложения - Форма вызова обработчика.
//	ЗавершениеРаботы - Булево - Признак завершения работы.
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "CRM_ИспользуетсяУчетРабочегоВремени") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.CRM_ТаймерУРВЗапущен И НЕ ЗавершениеРаботы Тогда
		CRM_ТрудозатратыСервер.ОстановитьУчетРабочегоВремени();
		ИмяСобытия = ИмяСобытияИзмененияСостоянияТаймера();
		Оповестить(ИмяСобытия, "Закрытие", Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя события изменения состояния таймера.
//
// Возвращаемое значение:
//	Строка - имя события изменения состояния таймера.
//
Функция ИмяСобытияИзмененияСостоянияТаймера() Экспорт
	
	Возврат "CRM_УРВ_ИзмененоСостояниеТаймера";
	
КонецФункции

// Обработчик изменения рабочего времени пользователей.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - Форма вызова обработчика.
//  Элемент - ПолеФормы - Поле для редактирования рабочего времени.
//	Отказ	- Булево - Признак отказа.
//
Процедура РабочееВремяПользователейПриИзменении(Форма, Элемент, Отказ) Экспорт
	
	CRM_ТрудозатратыКлиентСервер.ОбновитьНумерациюСтрокТаблицыЗаписей(Форма[CRM_ТрудозатратыКлиентСервер.ИмяТаблицыЗаписейУРВ()]);
	
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "CRM_РабочееВремяПользователейНачалоУчета"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "CRM_РабочееВремяПользователейОкончаниеУчета" Тогда
		
		ТрудозатратыВСекундах = ТекущиеДанные["ОкончаниеУчета"] - ТекущиеДанные["НачалоУчета"];
		Если ТрудозатратыВСекундах < 0 Тогда
			ТрудозатратыВСекундах = 0;
		КонецЕсли;
		
		ТекущиеДанные["Трудозатраты"] = ТрудозатратыВСекундах;
		ТекущиеДанные["ТрудозатратыВремя"] = Дата('00010101') + ТрудозатратыВСекундах;
		ТекущиеДанные["ВремяУчета"] = CRM_ТрудозатратыКлиентСервер.ПолучитьПредставлениеВремени(ТрудозатратыВСекундах);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "CRM_РабочееВремяПользователейДатаУчета" Тогда
		ТекущиеДанные["ДатаРабот"] = ТекущиеДанные["ДатаУчета"];
	КонецЕсли;
	
	ТекущиеДанные["ДатаРегистрации"] = ТекущиеДанные["ДатаРабот"] 
		+ (ТекущиеДанные["НачалоУчета"] - НачалоДня(ТекущиеДанные["НачалоУчета"]));
	
	CRM_ТрудозатратыКлиентСервер.ОбновитьВремяУчетаИтого(Форма);
	
КонецПроцедуры

// Указывает трудозатраты.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - Форма вызова обработчика.
//
Процедура УказатьТрудозатраты(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
												"Действие возможно только после записи данных. Записать?';en='Data is not yet recorded."
												"Action is possible only after recording the data. Record?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПроверкаВопросЗаписатьДанныеЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Завершение проверки вопроса записать данные.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога - Ответ.
//	ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Форма.Записать();
		Если НЕ Форма.Объект.Ссылка.Пустая() Тогда
			Форма.Подключаемый_Команда_CRM_УказатьТрудозатраты(Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Видимость = Истина;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ВывестиПанельТрудозатрат", 0.1, Истина);
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьПанельТрудозатрат", 1);
	
КонецПроцедуры

// Выводит панель трудозатрат.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - Форма вызова обработчика.
//
Процедура ВывестиПанельТрудозатрат(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Показать();
	
КонецПроцедуры

// Закрывает панель трудозатрат.
//
// Параметры:
//	Форма	- ФормаКлиентскогоПриложения - Форма вызова обработчика.
//
Процедура ЗакрытьПанельТрудозатрат(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Скрыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Видимость Тогда
		Элементы[CRM_ТрудозатратыКлиентСервер.ИмяГруппыТаблицыЗаписейУРВ()].Видимость = Ложь;
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ЗакрытьПанельТрудозатрат");
		Форма.ТекущийЭлемент = Элементы["Команда_CRM_УказатьТрудозатраты"];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
