
////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета (серверные методы, вызов сервера)
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область РасшифровкаОтчетовСофтфон

Процедура сфпЕженедельныйОтчетОбработкаРасшифровки(КомпоновщикНастроек, ОтчетДанныеРасшифровки,
	 Расшифровка, СтандартнаяОбработка,
	 СтруктураДляОткрытияОтчета) Экспорт
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		СтруктураВозврата = Новый Структура("Сотрудник");
		сфпЕженедельныйОтчетПолучитьСтруктуруВозврата(ДанныеРасшифровки.Элементы[Расшифровка], СтруктураВозврата);		
	КонецЕсли;		
	Если ДанныеРасшифровки.Элементы[Расшифровка].ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Если ТипЗнч(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка = Истина;
		КонецЕсли;	
	Иначе
		// Необходимо открыть отчёт "По совершённым звонкам" 
		// с переданными параметрами: Сотрудник и Дата
		СтруктураДляОткрытияОтчета.Вставить("СформироватьПриОткрытии", Истина);
		СтруктураДляОткрытияОтчета.Вставить("Сотрудник", СтруктураВозврата.Сотрудник);
		КоллекцияПолей = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		Если КоллекцияПолей.Количество() > 0 Тогда
			СтруктураДляОткрытияОтчета.Вставить("ДатаОтчета", КоллекцияПолей[0].Значение);
			Если КоллекцияПолей.Количество() = 2 Тогда
				Если КоллекцияПолей[1].Поле = "ВсегоОрганизацийДень" Тогда
					СтруктураДляОткрытияОтчета.Вставить("ТолькоСКлиентами", Истина);
				ИначеЕсли КоллекцияПолей[1].Поле = "ВсегоНеИзБазыДень" Тогда					
					СтруктураДляОткрытияОтчета.Вставить("БезКлиентов", Истина);
				КонецЕсли;					
			КонецЕсли;				
			Если ТипЗнч(СтруктураДляОткрытияОтчета.ДатаОтчета) = Тип("Строка") Тогда
				  СтруктураДляОткрытияОтчета.ДатаОтчета =
				  	СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураДляОткрытияОтчета.ДатаОтчета);
			КонецЕсли;				
		КонецЕсли;		
		
		Для Каждого ЭлементНастроек Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементНастроек.Использование
					 И ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДлительностьЗвонка") Тогда
					СтруктураДляОткрытияОтчета.Вставить("ДлительностьЗвонка", ЭлементНастроек.ПравоеЗначение);
					СтруктураДляОткрытияОтчета.Вставить("ВидСравненияДлительностьЗвонка", ЭлементНастроек.ВидСравнения);
					Прервать;
				КонецЕсли;					
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;	
КонецПроцедуры

Процедура сфпЕженедельныйОтчетПолучитьСтруктуруВозврата(ПолеИлиГруппировка, СтруктураПолей)
	МассивРодителей = ПолеИлиГруппировка.ПолучитьРодителей();
	Для Каждого Стр Из МассивРодителей Цикл
		Если ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда 
			сфпЕженедельныйОтчетПолучитьСтруктуруВозврата(Стр, СтруктураПолей);
		ИначеЕсли ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			ПоляГруппировки = Стр.ПолучитьПоля();
			Для Каждого гСтр Из ПоляГруппировки Цикл
				Если СтруктураПолей.Свойство(гСтр.Поле) Тогда
					Если Не ЗначениеЗаполнено(СтруктураПолей[гСтр.Поле]) Тогда
						СтруктураПолей[гСтр.Поле] = гСтр.Значение;
					КонецЕсли;
				КонецЕсли;
				сфпЕженедельныйОтчетПолучитьСтруктуруВозврата(Стр, СтруктураПолей);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура сфпОтчетПоВсемЗвонкамОбработкаРасшифровки(КомпоновщикНастроек, ОтчетДанныеРасшифровки,
	 Расшифровка, СтандартнаяОбработка,
	 СтруктураДляОткрытияОтчета) Экспорт
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастроек Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементНастроек.Использование И ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник") Тогда
					СтруктураДляОткрытияОтчета.Вставить("Сотрудник", ЭлементНастроек.ПравоеЗначение);
				ИначеЕсли  ЭлементНастроек.Использование
					 И ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДлительностьЗвонка") Тогда
					СтруктураДляОткрытияОтчета.Вставить("ДлительностьЗвонка", ЭлементНастроек.ПравоеЗначение);
					СтруктураДляОткрытияОтчета.Вставить("ВидСравненияДлительностьЗвонка", ЭлементНастроек.ВидСравнения);
				КонецЕсли;					
			КонецЕсли;				
		КонецЦикла;			
	КонецЕсли;		
	Если ДанныеРасшифровки.Элементы[Расшифровка].ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Если ТипЗнч(ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка = Истина;
		КонецЕсли;	
	Иначе
		// Необходимо открыть отчёт "По совершённым звонкам",
		// или "по пропущенным звонкам" с переданными параметрами: Сотрудник и Дата
		СтруктураДляОткрытияОтчета.Вставить("СформироватьПриОткрытии", Истина);
		Если ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля().Количество() > 0 Тогда
			СтруктураДляОткрытияОтчета.Вставить("ДатаОтчета",
				 ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
			Если ТипЗнч(СтруктураДляОткрытияОтчета.ДатаОтчета) = Тип("Строка") Тогда
				СтруктураДляОткрытияОтчета.ДатаОтчета =
					СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураДляОткрытияОтчета.ДатаОтчета);
				СтруктураДляОткрытияОтчета.Вставить("ОтчетПоПропущеннымЗвонкам", Истина);
			КонецЕсли;				
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область СозранениеЗагрузкаРезультатовОтчетов

Процедура ПриСозданииФормыОтчета(Форма) Экспорт
	
	КП = Форма.Элементы.Найти("ОсновнаяКоманднаяПанель");
	Если КП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить("CRM_СохранитьРезультат");
	Команда.Действие = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'Сохранить результат...'");

	Команда = Форма.Команды.Добавить("CRM_ЗагрузитьРезультатВОтбор");
	Команда.Действие = "Подключаемый_Команда";
	Команда.Заголовок = НСтр("ru = 'Загрузить результат в отбор...'");
	
	Подменю = Форма.Элементы.Добавить("CRM_ГруппаСохранитьЗагрузитьРезультат", Тип("ГруппаФормы"), КП);
	Подменю.Вид = ВидГруппыФормы.Подменю;
	Подменю.Заголовок = НСтр("ru = 'Результат'");
	
	Элемент = Форма.Элементы.Добавить("CRM_СохранитьРезультат", Тип("КнопкаФормы"), Подменю);
	Элемент.ИмяКоманды = "CRM_СохранитьРезультат";
			
	Элемент = Форма.Элементы.Добавить("CRM_ЗагрузитьРезультатВОтбор", Тип("КнопкаФормы"), Подменю);
	Элемент.ИмяКоманды = "CRM_ЗагрузитьРезультатВОтбор";
	
	// +CRM_Модуль
	// Не загружать пользователские настройки и не сохранять служ. данные.
	Если Форма.Параметры.Свойство("ДанныеВиджета") Тогда
		
		// Загрузка.
		Форма.УстановитьДействие("ПриЗагрузкеПользовательскихНастроекНаСервере", "");
		Форма.УстановитьДействие("ПередЗагрузкойПользовательскихНастроекНаСервере", "");
		
		// Сохранение.
		Форма.УстановитьДействие("ПриСохраненииПользовательскихНастроекНаСервере", "");
		Форма.УстановитьДействие("ПриСохраненииВариантаНаСервере", "");
		Форма.УстановитьДействие("ПриСохраненииДанныхВНастройкахНаСервере", "");
		
	КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры

// +CRM_Модуль
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("ДанныеВиджета") Тогда
		
		// Подмена компоновщика настроек компоновки данных с необходимой структурой варианта отчета.
		
		НастройкиКомпоновщикаПодмена = CRM_РаботаСВиджетамиВызовСервера.ПолучитьНастройкиКомпоновщикаДанныхДляВариантаВиджета(
			Форма.Параметры.ДанныеВиджета, Истина);
		
		Если НастройкиКомпоновщикаПодмена <> Неопределено Тогда
			
			НовыеНастройкиКД = НастройкиКомпоновщикаПодмена;
			
		КонецЕсли;
		
		// Снимает флаги для запрета редактирования варианта отчета и изменения структуры.
		// Чтобы подмененные настройки компоновщика настроек не попали в вариант отчета.
		
		Форма.НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
		Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		Форма.НастройкиОтчета.РазрешеноИзменятьСтруктуру = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗагрузкойВариантаНаСервере()
// -CRM_Модуль

#КонецОбласти

Процедура  ИсторияРеквизитовОбработкаРасшифровки(ОтчетДанныеРасшифровки, Расшифровка,
	 СтандартнаяОбработка,
	 СтруктураДляОткрытияРасшифровки) Экспорт
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;
	
	Поле = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле;
	Если Поле = "СтароеЗначение" Или Поле = "НовоеЗначение" Тогда
		
		ПоляСтроки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей()[0].ПолучитьПоля();
		
		РеквизитТип = ПоляСтроки.Найти("РеквизитТип");
		СтароеЗначениеИдентификатор = ПоляСтроки.Найти("СтароеЗначениеИдентификатор");
		ЗначениеИдентификатор = ПоляСтроки.Найти("ЗначениеИдентификатор");
		
		Если Поле = "СтароеЗначение" Тогда
			Идентификатор = СтароеЗначениеИдентификатор;
		ИначеЕсли  Поле = "НовоеЗначение" Тогда
			Идентификатор = ЗначениеИдентификатор;
		КонецЕсли;
		
		Если Идентификатор <> Неопределено И ЗначениеЗаполнено(Идентификатор.Значение) Тогда
			
			Если РеквизитТип <> Неопределено И ЗначениеЗаполнено(РеквизитТип.Значение) Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РеквизитТип.Значение.ПолноеИмя);
				Ссылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор.Значение));
			Иначе 
				Ссылка = НайтиСсылкуПоУИД(Идентификатор.Значение);
			КонецЕсли;
			СтруктураДляОткрытияРасшифровки.Вставить("Ссылка", Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли Поле = "Автор" Тогда
		
		Ссылка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
		Если Не Ссылка.Пустая() Тогда
			СтруктураДляОткрытияРасшифровки.Вставить("Ссылка", Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСсылкуПоУИД(Знач УИД) Экспорт
	
	Результат = Неопределено;
	
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить(Справочники);
	МассивМетаданных.Добавить(Документы);
	
	Для Каждого Менеджеры Из МассивМетаданных Цикл
		Для Каждого Менеджер Из Менеджеры Цикл
			ТемпСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
			Если ЗначениеЗаполнено(ТемпСсылка.ВерсияДанных) Тогда
				Возврат ТемпСсылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
