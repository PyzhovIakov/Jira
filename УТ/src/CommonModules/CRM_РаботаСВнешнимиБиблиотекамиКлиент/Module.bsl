////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции для работы с внешними библиотеками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается при открытии формы. Заполняет пути используемых библиотек.
//
// Параметры:
//  Форма                         - ФормаКлиентскогоПриложения  - Форма, в которой срабатывает событие ПриОткрытии.
//  ПриПолученииВнешнихБиблиотек  - ОписаниеОповещения          - Пользовательское событие при получении внешних библиотек.
//
Процедура ПриОткрытииФормы(Форма, ПриПолученииВнешнихБиблиотек = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, "ИсточникиВнешнихБиблиотек") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВнешниеБиблиотекиИнициализированы Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ИнициализироватьИсточникиВнешнихБиблиотекЧерезХранилище(Форма, ПриПолученииВнешнихБиблиотек);
	#Иначе
		// Для не Windows систем подтягивание библиотек из файловой системы не работает.
		// Работа с внешними библиотеками осуществляется через помещение во временное хранилище.
		Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
			ИнициализироватьИсточникиВнешнихБиблиотекЧерезХранилище(Форма, ПриПолученииВнешнихБиблиотек);
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИсточникиВнешнихБиблиотек",			Форма.ИсточникиВнешнихБиблиотек);
		ДополнительныеПараметры.Вставить("ФлагСовместимостиВнешнихБиблиотек",	Форма.ФлагСовместимостиВнешнихБиблиотек);
		ДополнительныеПараметры.Вставить("ПриПолученииВнешнихБиблиотек",		ПриПолученииВнешнихБиблиотек);
		
		ОписаниеОповещенияОПолученииРабочегоКаталогаДанныхПользователя = Новый ОписаниеОповещения(
			"ПриОткрытииФормыПродолжение",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент,
			ДополнительныеПараметры);
		
		НачатьПолучениеРабочегоКаталогаДанныхПользователя(
			ОписаниеОповещенияОПолученииРабочегоКаталогаДанныхПользователя);
	#КонецЕсли
	
	Форма.ВнешниеБиблиотекиИнициализированы = Истина;
	
КонецПроцедуры // ПриОткрытииФормы()

// Процедура описания оповещения. Для получения каталога данных пользователя.
//
// Параметры:
//  КаталогДанныхПользователя	 - Строка		 - Каталог данных пользователя.
//  ДополнительныеПараметры		 - Структура - Содержит следующие поля:
//  *  ИсточникиВнешнихБиблиотек          - ДанныеФормыКоллекция - Коллекция для хранения
//  информации по библиотекам.
//  *  ФлагСовместимостиВнешнихБиблиотек  - Булево               - Признак использования старых библиотек
//  для совместимости с ОС Linux.
//  *  ПриПолученииВнешнихБиблиотек       - ОписаниеОповещения   - Пользовательское событие при получении
//  внешних библиотек.
//
Процедура ПриОткрытииФормыПродолжение(КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	
	ИспользуемыеВнешниеБиблиотеки = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьПредопределенныеВнешниеБиблиотеки(
		ДополнительныеПараметры.ФлагСовместимостиВнешнихБиблиотек);
	
	КаталогРазмещенияВнешнихБиблиотек = ПолучитьКаталогХраненияВнешнихБиблиотек(КаталогДанныхПользователя);
	
	ИсточникиВнешнихБиблиотек = ДополнительныеПараметры.ИсточникиВнешнихБиблиотек;
	
	Для Каждого ВнешняяБиблиотеки Из ИспользуемыеВнешниеБиблиотеки Цикл
		НаименованиеФайлаВнешнейБиблиотеки = Строка(ВнешняяБиблиотеки.Ссылка.УникальныйИдентификатор()) + ".lib";
		ПутьРазмещенияВнешнейБиблиотеки = КаталогРазмещенияВнешнихБиблиотек + НаименованиеФайлаВнешнейБиблиотеки;
		
		НоваяСтрока = ИсточникиВнешнихБиблиотек.Добавить();
		НоваяСтрока.ВнешняяБиблиотекаСсылка	= ВнешняяБиблиотеки.Ссылка;
		НоваяСтрока.ИдентификаторЗамены		= ВнешняяБиблиотеки.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.ПутьХранения			= ПутьРазмещенияВнешнейБиблиотеки;
	КонецЦикла;
	
	Если ДополнительныеПараметры.ПриПолученииВнешнихБиблиотек <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПриПолученииВнешнихБиблиотек, ИсточникиВнешнихБиблиотек);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытииФормыПродолжение()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура вызывается после начала работы системы. Используется для установки библиотек после старта системы.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	#Если Не ВебКлиент Тогда
		// Для не Windows систем подтягивание библиотек из файловой системы не работает.
		// Работа с внешними библиотеками осуществляется через помещение во временное хранилище.
		Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
			Возврат;
		КонецЕсли;
		
		Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеОповещенияПолученияРабочегоКаталога = Новый ОписаниеОповещения(
			"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_СозданиеКаталогаБиблиотек",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент);
		
		НачатьПолучениеРабочегоКаталогаДанныхПользователя(
			ОписаниеОповещенияПолученияРабочегоКаталога);
	#КонецЕсли
	
КонецПроцедуры // ПослеНачалаРаботыСистемы()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаУстановкиВнешнихБиблиотек

// Описание оповещения. Используется при получении каталога данных пользователя. Создает каталог хранения библиотек.
//
// Параметры:
//  КаталогДанныхПользователя  - Строка       - Полученных каталог данных пользователя.
//  ДополнительныеПараметры    - Неопределено - Дополнительные параметры.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_СозданиеКаталогаБиблиотек(
		КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияОСозданииКаталога = Новый ОписаниеОповещения(
		"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаКаталогаБиблиотек",
		CRM_РаботаСВнешнимиБиблиотекамиКлиент);
	
	НачатьСозданиеКаталога(
		ОписаниеОповещенияОСозданииКаталога,
		ПолучитьКаталогХраненияВнешнихБиблиотек(КаталогДанныхПользователя));
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_СозданиеКаталогаБиблиотек()

// Описание оповещения. Используется при создании каталога хранения библиотек. Проверяет существование каталога.
//
// Параметры:
//  КаталогДанныхПользователя  - Строка       - Каталог данных пользователя.
//  ДополнительныеПараметры    - Неопределено - Дополнительные параметры.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаКаталогаБиблиотек(
		КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещенияОПроверкиКаталога = Новый ОписаниеОповещения(
		"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ОбходВнешнихБиблиотек",
		CRM_РаботаСВнешнимиБиблиотекамиКлиент,
		КаталогДанныхПользователя);
	
	КаталогБиблиотек = Новый Файл(КаталогДанныхПользователя);
	КаталогБиблиотек.НачатьПроверкуСуществования(ОписаниеОповещенияОПроверкиКаталога);
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаКаталогаБиблиотек()

// Описание оповещения. Используется при проверки существования каталога библиотек. Выполяет проверку необходимости
// установки библиотек.
//
// Параметры:
//  Существует                 - Булево - Признак существования каталога хранения библиотек.
//  КаталогДанныхПользователя  - Строка - Каталог данных пользователя.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ОбходВнешнихБиблиотек(
		Существует, КаталогДанныхПользователя) Экспорт
	
	Если Не Существует Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьРежимСовместимости = ОбщегоНазначенияКлиент.ЭтоLinuxКлиент();
	
	ИспользуемыеВнешниеБиблиотеки =
		CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьПредопределенныеВнешниеБиблиотеки(ИспользоватьРежимСовместимости);
	
	Для Каждого ПараметрыБиблиотеки Из ИспользуемыеВнешниеБиблиотеки Цикл
		//////////////////////////////////////////////////////////
		// 1. Формирование путей хранения файлов библиотеки.
		
		НаименованиеФайлаБиблиотеки = ПараметрыБиблиотеки.Ссылка.УникальныйИдентификатор();
		
		ПутьФайлаБиблиотеки = КаталогДанныхПользователя + НаименованиеФайлаБиблиотеки + ".lib";
		ПутьФайлаИнформации = КаталогДанныхПользователя + НаименованиеФайлаБиблиотеки + ".ver";
		
		//////////////////////////////////////////////////////////
		// 2. Выполнение проверки существования файла.
		
		ДанныеОбрабатываемогоФайла = Новый Структура;
		ДанныеОбрабатываемогоФайла.Вставить("КонтрольнаяСумма",		"");
		ДанныеОбрабатываемогоФайла.Вставить("ПутьФайлаБиблиотеки",	ПутьФайлаБиблиотеки);
		ДанныеОбрабатываемогоФайла.Вставить("ПутьФайлаИнформации",	ПутьФайлаИнформации);
		ДанныеОбрабатываемогоФайла.Вставить("ПараметрыБиблиотеки",	ПараметрыБиблиотеки);
		
		ОписаниеОповещенияПровекиСуществованияФайлаБиблиотеки = Новый ОписаниеОповещения(
			"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаСуществованияФайлаБиблиотеки",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент, ДанныеОбрабатываемогоФайла);
		
		ФайлБиблиотеки = Новый Файл(ДанныеОбрабатываемогоФайла.ПутьФайлаБиблиотеки);
		ФайлБиблиотеки.НачатьПроверкуСуществования(ОписаниеОповещенияПровекиСуществованияФайлаБиблиотеки);
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_УстановкаБиблиотек()

// Описание оповещения. Используется при проверки существования файла библиотеки. Выполняет установку библиотеки,
// если она отсутсвует в файловой системе пользователя.
//
// Параметры:
//  Существует                  - Булево    - Признак существования файла библиотеки в файловой системе.
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаСуществованияФайлаБиблиотеки(
		Существует, ДанныеОбрабатываемогоФайла) Экспорт
	
	Если Не Существует Тогда
		УстановитьВнешнююБиблиотеку(ДанныеОбрабатываемогоФайла);
	Иначе
		ОписаниеОповещенияПроверкиТипаФайла = Новый ОписаниеОповещения(
			"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаТипаФайла",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент,
			ДанныеОбрабатываемогоФайла);
		
		ФайлБиблиотеки = Новый Файл(ДанныеОбрабатываемогоФайла.ПутьФайлаБиблиотеки);
		ФайлБиблиотеки.НачатьПроверкуЭтоФайл(ОписаниеОповещенияПроверкиТипаФайла);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаСуществованияФайлаБиблиотеки()

// Описание оповещения. Используетя при проверки типа файла библиотеки. Если это файл, выполняются дальнейшие проверки.
//
// Параметры:
//  ЭтоФайл                     - Булево    - Признак того, что рассматриваемый файл - это файл, а не каталог.
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаТипаФайла(
		ЭтоФайл, ДанныеОбрабатываемогоФайла) Экспорт
	
	ПараметрыБиблиотеки = ДанныеОбрабатываемогоФайла.ПараметрыБиблиотеки;
	
	Если ЭтоФайл Тогда
		ОписаниеОповещенияПроверкиРазмераБиблиотеки = Новый ОписаниеОповещения(
			"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаРазмераБиблиотеки",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент,
			ДанныеОбрабатываемогоФайла);
		
		ФайлБиблиотеки = Новый Файл(ДанныеОбрабатываемогоФайла.ПутьФайлаБиблиотеки);
		ФайлБиблиотеки.НачатьПолучениеРазмера(ОписаниеОповещенияПроверкиРазмераБиблиотеки);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаТипаФайла()

// Описание оповещения. Используетя при проверки размера файла библиотеки. Если размеры не совпадают - происходит
// переустановка библиотеки.
//
// Параметры:
//  Размер                      - Число     - Размер рассматриваемого файла библиотеки.
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаРазмераБиблиотеки(
		Размер, ДанныеОбрабатываемогоФайла) Экспорт
	
	ПараметрыБиблиотеки = ДанныеОбрабатываемогоФайла.ПараметрыБиблиотеки;
	
	Если Размер <> ПараметрыБиблиотеки.РазмерБиблиотеки Тогда
		УстановитьВнешнююБиблиотеку(ДанныеОбрабатываемогоФайла);
	Иначе
		ОписаниеОповещенияОПрочтенииФайлаИнформации = Новый ОписаниеОповещения(
			"ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ЧтениеФайлаИнформации",
			CRM_РаботаСВнешнимиБиблиотекамиКлиент,
			ДанныеОбрабатываемогоФайла);
		
		ПолучитьИнформациюОВнешнейБиблиотеке(ОписаниеОповещенияОПрочтенииФайлаИнформации);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ПроверкаРазмераБиблиотеки()

// Описание оповещения. Используетя при чтении информации о библиотеки с служебного файла. Происходит проверка
// контрольной суммы рассматриваемой библиотеки. Если нет совпадения - переустановка библиотеки.
//
// Параметры:
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ЧтениеФайлаИнформации(
		ДанныеОбрабатываемогоФайла) Экспорт
	
	ПараметрыБиблиотеки = ДанныеОбрабатываемогоФайла.ПараметрыБиблиотеки;
	
	ТекстовыйДокументИнформации	= ДанныеОбрабатываемогоФайла.ТекстовыйДокументИнфомации;
	КонтрольнаяСуммаБиблиотеки	= ТекстовыйДокументИнформации.ПолучитьТекст();
	
	Если КонтрольнаяСуммаБиблиотеки <> ПараметрыБиблиотеки.КонтрольнаяСумма Тогда
		УстановитьВнешнююБиблиотеку(ДанныеОбрабатываемогоФайла);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПроверкуУстановкиВнешнихБиблиотек_ЧтениеФайлаИнформации()

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область УстановкаВнешнейБиблиотеки

// Используется для установки внешней библиотеки.
//
// Параметры:
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура УстановитьВнешнююБиблиотеку(ДанныеОбрабатываемогоФайла)
	
	ОписаниеОповещенияПолученияКаталогоВременныхФайлов = Новый ОписаниеОповещения(
		"УстановитьВнешнююБиблиотеку_ПолучениеКаталогаВременныхФайлов",
		CRM_РаботаСВнешнимиБиблиотекамиКлиент,
		ДанныеОбрабатываемогоФайла);
	
	НачатьПолучениеКаталогаВременныхФайлов(
		ОписаниеОповещенияПолученияКаталогоВременныхФайлов);
	
КонецПроцедуры // УстановитьВнешнююБиблиотеку()

// Описание оповещения. Используется для установки внешней библиотеки. Продолжение алгоритма после получения
// каталога временных файлов.
//
// Параметры:
//  ИмяКаталогаВременныхФайлов  - Строка    - Путь каталога временных файлов.
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаБиблиотеки  - Строка    - Путь к файлу библиотеки.
//            *  ПутьФайлаИнформации  - Строка    - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка    - Контрольная сумма файла.
//            *  ПараметрыБиблиотеки  - Структура - Параметры используемой библиотеки.
//
Процедура УстановитьВнешнююБиблиотеку_ПолучениеКаталогаВременныхФайлов(
		ИмяКаталогаВременныхФайлов, ДанныеОбрабатываемогоФайла) Экспорт
	
	ПараметрыБиблиотеки = ДанныеОбрабатываемогоФайла.ПараметрыБиблиотеки;
	
	ДвоичныеДанныеБиблиотеки = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПолучитьДвоичныеДанныеВнешнейБиблиотеки(
		ПараметрыБиблиотеки.Ссылка, Истина);
	
	Если ДвоичныеДанныеБиблиотеки <> Неопределено
			И ТипЗнч(ДвоичныеДанныеБиблиотеки) = Тип("ДвоичныеДанные") Тогда
		ZipФайл = Новый ЧтениеZipФайла(ДвоичныеДанныеБиблиотеки.ОткрытьПотокДляЧтения());
		
		Если ZipФайл.Элементы.Количество() > 0 Тогда
			
			ZipФайл.Извлечь(ZipФайл.Элементы[0], ИмяКаталогаВременныхФайлов);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеОбрабатываемогоФайла", ДанныеОбрабатываемогоФайла);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПослеПеремещенияФайла", CRM_РаботаСВнешнимиБиблиотекамиКлиент, ДополнительныеПараметры);
			
			НачатьПеремещениеФайла(
				Оповещение, ИмяКаталогаВременныхФайлов + ZipФайл.Элементы[0].Имя, ДанныеОбрабатываемогоФайла.ПутьФайлаБиблиотеки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВнешнююБиблиотеку_ПолучениеКаталогаВременныхФайлов()

// Вызывается после завершения НачатьПеремещениеФайла
//
// Параметры:
//  ПеремещаемыйФайл - Строка - содержит путь к файлу
//	ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПослеПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	ЗаписатьИнформациюОВнешнейБиблиотеке(ДополнительныеПараметры.ДанныеОбрабатываемогоФайла);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область РаботаСИнформациейОВнешнейБиблиотеке

// Используется для записи информации о внешней библиотеке в текстовый файл. Сейчас это только контрольная сумма.
//
// Параметры:
//  ДанныеОбрабатываемогоФайла  - Структура - Информация об обрабатываемом файле.
//            *  ПутьФайлаИнформации  - Строка - Путь к файлу информации.
//            *  КонтрольнаяСумма     - Строка - Контрольная сумма файла.
//
Процедура ЗаписатьИнформациюОВнешнейБиблиотеке(ДанныеОбрабатываемогоФайла)
	
	ПараметрыБиблиотеки = ДанныеОбрабатываемогоФайла.ПараметрыБиблиотеки;
	
	ОписаниеОповещенияОЗаписиИнформацииВТекстовыйДокумент = Новый ОписаниеОповещения(
		"ЗаписатьИнформациюОВнешнейБиблиотеке_ЗаписьИнформацииВТекстовыйДокумент",
		CRM_РаботаСВнешнимиБиблиотекамиКлиент);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ПараметрыБиблиотеки.КонтрольнаяСумма);
	ТекстовыйДокумент.НачатьЗапись(ОписаниеОповещенияОЗаписиИнформацииВТекстовыйДокумент,
		ДанныеОбрабатываемогоФайла.ПутьФайлаИнформации);
	
КонецПроцедуры // ЗаписатьИнформациюОВнешнейБиблиотеке()

// Используется для проверки результата записи информации о внешней библиотеке.
//
// Параметры:
//  Результат                - Булово       - Результат записи.
//  ДополнительныеПараметры  - Неопределено - Нет данных.
//
Процедура ЗаписатьИнформациюОВнешнейБиблиотеке_ЗаписьИнформацииВТекстовыйДокумент(
		Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИнформациюОВнешнейБиблиотеке_ЗаписьИнформацииВТекстовыйДокумент()

// Используется для получения информации о внешней библиотеке. Сейчас это только контрольная сумма.
//
// Параметры:
//  ОписаниеОповещенияОПрочтении  - ОписаниеОповещения - Описание оповещения о прочтении текстового документа.
//
Процедура ПолучитьИнформациюОВнешнейБиблиотеке(ОписаниеОповещенияОПрочтении)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ОписаниеОповещенияОПрочтении.ДополнительныеПараметры.Вставить(
		"ТекстовыйДокументИнфомации", ТекстовыйДокумент);
	
	ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещенияОПрочтении,
		ОписаниеОповещенияОПрочтении.ДополнительныеПараметры.ПутьФайлаИнформации);
	
КонецПроцедуры // ПолучитьИнформациюОВнешнейБиблиотеке()

#КонецОбласти

/////////////////////////////////////////////////////////////////

#Область Прочее

// Используется для получения каталога хранения внешних библиотек.
//
// Параметры:
//  ИсходныйКаталог  - Строка - Исходный каталог из которого будут получать каталог хранения внешних библиотек.
//
// Возвращаемое значение:
//   Строка   - Полученный каталог хранения внешних библиотек.
//
Функция ПолучитьКаталогХраненияВнешнихБиблиотек(ИсходныйКаталог)
	
	ИсходныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИсходныйКаталог);
	ИсходныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ИсходныйКаталог + "CRMLibraries");
	
	Возврат ИсходныйКаталог;
	
КонецФункции // ПолучитьКаталогХраненияВнешнихБиблиотек()

// Используется для инициализации таблицы внешних библиотек через временное хранилище.
//
// Параметры:
//  Форма                         - ФормаКлиентскогоПриложения  - Форма.
//  ПриПолученииВнешнихБиблиотек  - ОписаниеОповещения          - Пользовательское событие при получении внешних библиотек.
//
Процедура ИнициализироватьИсточникиВнешнихБиблиотекЧерезХранилище(Форма, ПриПолученииВнешнихБиблиотек)
	
	МассивИнициализированныхВнешнихБиблиотек =
		CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ИнициализироватьИсточникиВнешнихБиблиотекЧерезХранилище(
			Форма.УникальныйИдентификатор, Форма.ФлагСовместимостиВнешнихБиблиотек);
	
	Для Каждого ИнициализированнаяБиблиотека Из МассивИнициализированныхВнешнихБиблиотек Цикл
		ЗаполнитьЗначенияСвойств(Форма.ИсточникиВнешнихБиблиотек.Добавить(), ИнициализированнаяБиблиотека);
	КонецЦикла;
	
	Если ПриПолученииВнешнихБиблиотек <> Неопределено Тогда
		#Если ВебКлиент Тогда
			Форма.Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета(Форма.ИсточникиВнешнихБиблиотек, Неопределено);
		#Иначе
			ВыполнитьОбработкуОповещения(ПриПолученииВнешнихБиблиотек, Форма.ИсточникиВнешнихБиблиотек);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьИсточникиВнешнихБиблиотекЧерезХранилище()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////