///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Маг1С"
// ОбщийМодуль.Маг1ССервер
//
// Все серверные процедуры и функции для работы с mag1c
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру с параметрами текущей базы
//
// Возвращаемое значение:
//  Cтруктура:
//        * РазделениеВключено – Булево
//        * ЛогинИПП - Строка  
//        * ЭтоБазоваяВерсияКонфигурации - Булево
//        * ИмяКонфигурации - Строка - имя конфигурации, как оно задано в метаданных
//        * ВерсияКонфигурации - Строка
//        * ВерсияПлатформы - Строка
//        
Функция ПараметрыБазы() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("РазделениеВключено", ОбщегоНазначения.РазделениеВключено());
	
	Результат.Вставить("ЛогинИПП", "");
	
	Если Результат.РазделениеВключено Тогда
		АутентификацияИППВыполнена = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		АутентификацияИППВыполнена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
		
		Если АутентификацияИППВыполнена Тогда 
	     	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			Результат.ЛогинИПП   = ДанныеАутентификации.Логин;
        КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УжеУстановлено = Маг1ССервер.РасширениеУстановлено();
	
	Результат.Вставить("АутентификацияИППВыполнена" , АутентификацияИППВыполнена);
	Результат.Вставить("УжеУстановлено", УжеУстановлено);
	Результат.Вставить("ЭтоБазоваяВерсияКонфигурации", СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации());

	Результат.Вставить("ИмяКонфигурации", Метаданные.Имя);
	Результат.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	Результат.Вставить("ИдентификаторИБ", СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	Результат.Вставить("ЧасовойПоясСеанса",  ЧасовойПоясСеанса());
	Результат.Вставить("ЗначениеРазделителяСеанса",  0);
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Результат.ЗначениеРазделителяСеанса = Формат(МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(),"ЧГ=0");
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения); 
	Результат.Вставить("ВерсияРасширения", "");
	
	ПустаяСсылкаЗаказа = Маг1СКлиентСерверПереопределяемый.ЗаказПокупателяПустаяСсылка();
	
	Если ПустаяСсылкаЗаказа = Неопределено Тогда
		СинонимЗаказа = НСтр("ru = 'Заказ покупателя'");
	Иначе
		СинонимЗаказа = ПустаяСсылкаЗаказа.Метаданные().Синоним;
	КонецЕсли;
	
	Результат.Вставить("СинонимЗаказа", СинонимЗаказа);
			
	Возврат Результат;
	
КонецФункции

Функция УстановитьРасширение(ПараметрыБазы) Экспорт
	
	Возврат Маг1ССервер.УстановитьРасширение(ПараметрыБазы);
	
КонецФункции

Функция ЗаказПокупателяСсылка(Ид) Экспорт
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Маг1СКлиентСерверПереопределяемый.ЗаказПокупателяПустаяСсылка());
	Возврат МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(Ид));
КонецФункции

#КонецОбласти