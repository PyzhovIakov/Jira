///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.СистемаБыстрыхПлатежей.ПереводыСБПb2b".
// ОбщийМодуль.ПереводыСБПb2bСервис.
//
// Серверные процедуры переводов Системы быстрых платежей:
//  - выполнение оплаты и получение статус операций;
//  - обработка отложенных статусов операций;
//  - регистрация статических ссылок СБП;
//  - регистрация динамических ссылок СБП;
//  - получение данных ссылки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональностьСБП

// Производит проверку данных аутентификации в сервисе участника СБП.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ПараметрыАутентификации - Структура - данные аутентификации.
//
// Возвращаемое значение:
//  Структура - результат проверки параметров авторизации:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//     может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации) Экспорт
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/merchants/%2/get-merchant-info",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ПараметрыНастройкиПодключения.ИдентификаторМерчанта),
		ИдентификаторURL());
	
	Возврат СистемаБыстрыхПлатежейСервис.ОперацияПроверитьПараметрыПодключения(
		ПараметрыНастройкиПодключения,
		ПараметрыАутентификации,
		URLОперации);
	
КонецФункции

// Выполняет поиск и информации об оплате в регистре и устанавливает новое значение
// идентификатора операции, статуса операции, даты операции и даты определения статуса.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ отражающий оплату
//    в информационной базе;
//  ИдентификаторОперации - Строка - идентификатор оплаты в Системе быстрых платежей;
//  ДатаОперации - Дата - дата операции в Системе быстрых платежей;
//  СтатусОперации - Строка - статус операции в Системе быстрых платежей;
//  СуммаОперации - Число - сумма оплаты;
//  ДатаЗапросаСтатуса - Дата - дата последней операции получения статуса.
//
Процедура ЗаписатьСтатусОперации(
		ДокументОперации,
		ИдентификаторОперации,
		ДатаОперации,
		СтатусОперации,
		СуммаОперации = Неопределено,
		ДатаЗапросаСтатуса = Неопределено) Экспорт
	
	РегистрыСведений.ИдентификаторыОперацийСБПb2b.ЗаписатьСтатусОперации(
		ДокументОперации,
		ИдентификаторОперации,
		ДатаОперации,
		СтатусОперации,
		СуммаОперации,
		ДатаЗапросаСтатуса);
	
КонецПроцедуры

// Определяет статус заказа на оплату Системе быстрых платежей.
//
// Параметры:
//  ПараметрыСтатуса - Структура - см. РегистрыСведений.ИдентификаторыОперацийСБПb2b.ПараметрыОпределенияСтатусаОперации
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОперацииПроверки - Строка - идентификатор операции проверки наличия статуса;
//  СвойствоИдентификаторОплаты - Строка - свойство в ПараметрыСтатуса, в котором хранится идентификатор;
//  ЗапросНаличияСтатуса - Булево - признак безусловного запроса статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ИдентификаторОперации - Строка - идентификатор оплаты;
//    * ДатаОперации - Дата - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу;
//    * РасчетныйСчет - Строка - расчетный счет получения денежных средств.
//
Функция ОпределитьСтатусОплаты(
		ПараметрыСтатуса,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина) Экспорт
	
	ИдентификаторыОплат = СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса();
	
	ДанныеОплаты = ИдентификаторыОплат.Добавить();
	ДанныеОплаты.Идентификатор = ПараметрыСтатуса.ИдентификаторОплаты;
	ДанныеОплаты.ДатаЗапросаСтатуса = ПараметрыСтатуса.ДатаЗапросаСтатуса;
	
	РезультатЗапроса = ОперацияСтатусыОплатыДинамическихСсылок(
		ИдентификаторыОплат,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса);
	
	РезультатОперации = НовыйРезультатОперацииСтатусОплаты();
	ДанныеОперации = РезультатЗапроса.Получить(ПараметрыСтатуса.ИдентификаторОплаты);
	Если Не ЗначениеЗаполнено(ДанныеОперации.КодОшибки) Тогда
		РезультатОперации.СтатусОперации = ДанныеОперации.СтатусОплаты;
		ЗаполнитьЗначенияСвойств(
			РезультатОперации.ПараметрыОперации,
			ДанныеОперации,
			"ИдентификаторОперации,
			|ИдентификаторОплаты,
			|ДатаОперации,
			|РасчетныйСчет,
			|СуммаОперации");
		Если РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
			РезультатОперации.ПараметрыОперации.СуммаОперации = ПараметрыСтатуса.СуммаОперации;
		КонецЕсли;
		РезультатОперации.ПараметрыОперации.ИдентификаторПлатежа = ПараметрыСтатуса.ИдентификаторПлатежа;
		РезультатОперации.ПараметрыОперации.Удалить("ДокументОснование");
	Иначе
		ЗаполнитьЗначенияСвойств(
			РезультатОперации,
			ДанныеОперации,
			"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. СистемаБыстрыхПлатежей.СтатусыОпераций
//
Функция СтатусыОпераций() Экспорт
	
	ОбработанныеОперации = Новый Массив;
	Операции = РегистрыСведений.ИдентификаторыОперацийСБПb2b.ОтложенныеОперации();
	
	ОбработатьОтложенныеОперации(
		Операции.ОтложенныеОперации,
		ОбработанныеОперации);
	ОбработатьОперацииСменыУчастника(
		Операции.СменаУчастника,
		ОбработанныеОперации);
	
	Возврат ОбработанныеОперации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрикладныеФункции

// См. ПереводыСБПb2b.СтатическаяСсылка.
//
Функция СтатическаяСсылка(
		ДокументОперации,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка();
	ЗаказНаОплату = ЗаказаНаОплату(
		ДокументОперации,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ДополнительныеПараметры,
		РезультатОперации);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	// Создание нового QR-кода Системы быстрых платежей.
	Возврат ОперацияРегистрацияСтатическойСсылки(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения);
	
КонецФункции

// См. ПереводыСБПb2b.ДинамическаяСсылка.
//
Функция ДинамическаяСсылка(
		ДокументОплаты,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты = Неопределено) Экспорт
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка();
	
	ДанныеЗаказа = ДанныеЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат РезультатОперации;
	КонецЕсли;
	
	РезультатОперации.СуммаОплаты = ДанныеЗаказа.ЗаказНаОплату.СуммаОплаты;
	РезультатОперации.ПлатежнаяСсылка = СистемаБыстрыхПлатежейСлужебный.ПлатежнаяСсылкаОперации(
		ДокументОплаты,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
	
	Если Не ЗначениеЗаполнено(РезультатОперации.ПлатежнаяСсылка) Тогда
		
		// Создание нового QR-кода Системы быстрых платежей.
		ДанныеСсылки = ОперацияДинамическаяСсылка(
			ДанныеЗаказа.ЗаказНаОплату,
			ДанныеЗаказа.Идентификатор,
			ПараметрыНастройкиПодключения);
		
		Если ЗначениеЗаполнено(ДанныеСсылки.КодОшибки) Тогда
			ЗаполнитьЗначенияСвойств(
				РезультатОперации,
				ДанныеСсылки,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатОперации;
		КонецЕсли;
		
		// Сохранить информацию об идентификаторе СБП.
		РегистрыСведений.ИдентификаторыОперацийСБПb2b.ЗаписатьДанныеОплатыСБП(
			ДокументОплаты,
			ДанныеСсылки.ИдентификаторОплаты,
			ДанныеСсылки.ПериодИспользования,
			ДанныеСсылки.ПлатежнаяСсылка,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе(),
			ДанныеЗаказа.ЗаказНаОплату);
		
		РезультатОперации.ПлатежнаяСсылка = ДанныеСсылки.ПлатежнаяСсылка;
		
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

// См. ПереводыСБПb2b.СтатусОплаты.
//
Функция СтатусОплаты(
		ДокументОплаты,
		ПараметрыНастройкиПодключения,
		ДлительныйВызов) Экспорт
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПb2b.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	Возврат СистемаБыстрыхПлатежейСлужебный.СтатусОплаты(
		ДокументОплаты,
		Перечисления.ВариантыНастройкиСБП.b2b,
		ПараметрыНастройкиПодключения,
		ПараметрыСтатуса,
		ДлительныйВызов,
		ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации());
	
КонецФункции

// См. ПереводыСБПb2b.ДанныеФункциональнойСсылки.
//
Функция ДанныеФункциональнойСсылки(
		ФункциональнаяСсылка,
		ПараметрыНастройкиПодключения) Экспорт
	
	РезультатПроверки = СистемаБыстрыхПлатежейКлиентСервер.СтруктураURLФункциональнойСсылки(
		ФункциональнаяСсылка,
		Истина);
	
	Если Не РезультатПроверки.URLВалиден Тогда
		РезультатОперации = ПереводыСБПb2bСлужебный.НовыйРезультатОперацииДанныеСсылки();
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Неверный формат кассовой ссылки.'");
		РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Возврат ОперацияДанныеФункциональнойСсылки(
		Лев(РезультатПроверки.СтруктураURI.ПутьНаСервере, 32),
		ПараметрыНастройкиПодключения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеОперацииОплат

// Формирует и заполняет новое описание заказа на оплату, определяет внешний идентификатор заказа
// и сохраняет параметры заказа для проверки идемпотентности.
//
// Параметры:
//  РезультатОперации - Структура - результат подготовки см.
//    СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату;
//  ДанныеЧастичнойОплаты - Структура -параметры частичной оплаты;
//
// Возвращаемое значение:
//  Структура - содержит результат подготовки заказа на оплату:
//    * ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату;
//    * Идентификатор - Строка - внешний идентификатор заказа на оплату.
//
Функция ДанныеЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ПараметрыНастройкиПодключения,
		ДополнительныеПараметры,
		ДанныеЧастичнойОплаты)
	
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("ЗаказНаОплату", Неопределено);
	ДанныеЗаказа.Вставить("Идентификатор", Неопределено);
	
	ЗаказНаОплату = ЗаказаНаОплату(
		ДокументОплаты,
		ПараметрыНастройкиПодключения.НастройкаПодключения,
		ДополнительныеПараметры,
		РезультатОперации,
		ДанныеЧастичнойОплаты,
		Ложь);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ДанныеЗаказа;
	КонецЕсли;
	
	// Формирование идентификаторов оплаты.
	Идентификатор = ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения);
	
	// Прекратить вызов операции, в случае ошибок.
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ДанныеЗаказа;
	КонецЕсли;
	
	ДанныеЗаказа.ЗаказНаОплату = ЗаказНаОплату;
	ДанныеЗаказа.Идентификатор = Идентификатор;
	
	Возврат ДанныеЗаказа;
	
КонецФункции

// Формирует и заполняет новое описание заказа на оплату в Системе быстрых платежей. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операции.
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные настройки формирования
//    заказа на оплату;
//  РезультатОперации - Структура - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка;
//  ДанныеЧастичнойОплаты - Структура -параметры частичной оплаты;
//  СтатическаяСсылка - Булево - признак формирования статической ссылки.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    * СуммаОплаты - Число - сумма оплаты в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    * ДатаОплаты - Дата - дата операции продажи;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием.
//
Функция ЗаказаНаОплату(
		ДокументОплаты,
		НастройкаПодключения,
		ДополнительныеПараметры,
		РезультатОперации,
		ДанныеЧастичнойОплаты = Неопределено,
		СтатическаяСсылка = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЧастичнойОплаты) Тогда
		
		ЗаказНаОплату = ОписаниеЗаказаНаОплату();
		ЗаказНаОплату.ШаблоныНазначений = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийДокументаОперации(
			НастройкаПодключения,
			ДокументОплаты,
			Перечисления.ВариантыНастройкиСБП.b2b);
			
		ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаОплатуСБПb2b(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры,
			СтатическаяСсылка);
		ПереводыСБПb2bПереопределяемый.ПриФормированииЗаказаНаОплатуСБП(
			ДокументОплаты,
			ЗаказНаОплату,
			НастройкаПодключения,
			ДополнительныеПараметры,
			СтатическаяСсылка);
			
	Иначе
		
		ЗаказНаОплату = ОписаниеЧастичнойОплаты();
		ЗаказНаОплату.ШаблоныНазначений = РегистрыСведений.ШаблоныНазначенийПлатежейСБП.ШаблоныНазначенийДокументаОперации(
			НастройкаПодключения,
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			Перечисления.ВариантыНастройкиСБП.b2b);
		
		ИнтеграцияПодсистемБИП.ПриФормированииЗаказаНаЧастичнуюОплатуСБПb2b(
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			ЗаказНаОплату,
			НастройкаПодключения);
		ПереводыСБПb2bПереопределяемый.ПриФормированииЗаказаНаЧастичнуюОплатуСБП(
			ДанныеЧастичнойОплаты.ОснованиеПлатежа,
			ЗаказНаОплату,
			НастройкаПодключения);
		
		ЗаказНаОплату.Вставить("СуммаОплаты", ДанныеЧастичнойОплаты.СуммаОплаты);
		ЗаказНаОплату.Вставить("ДатаОплаты", ДанныеЧастичнойОплаты.ДатаОплаты);
		ЗаказНаОплату.Вставить("ОблагаетсяНДС", ДанныеЧастичнойОплаты.ОблагаетсяНДС);
		ЗаказНаОплату.Вставить("СуммаНДС", ДанныеЧастичнойОплаты.СуммаНДС);
		ЗаказНаОплату.Вставить("ОтложенноеПолучениеСтатуса", Истина);
		
	КонецЕсли;
	
	// Валидация данных заказа на оплату и настроек.
	ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации,
		СтатическаяСсылка);
		
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		Возврат ЗаказНаОплату;
	КонецЕсли;
	
	ЗаказНаОплату.СуммаНДС = Окр(ЗаказНаОплату.СуммаНДС, 2);
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.НазначениеПлатежа) Тогда
		ЗаказНаОплату.НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата СБП %1 %2'"),
			СистемаБыстрыхПлатежейСлужебный.ПреобразоватьЧислоВФорматJSON(
				ЗаказНаОплату.СуммаОплаты),
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	ИначеЕсли СтрДлина(ЗаказНаОплату.НазначениеПлатежа) > 210 Тогда
		ЗаказНаОплату.НазначениеПлатежа = Лев(ЗаказНаОплату.НазначениеПлатежа, 210);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказНаОплату.ИдентификаторПлатежа) Тогда
		ЗаказНаОплату.ИдентификаторПлатежа = Лев(ЗаказНаОплату.ИдентификаторПлатежа, 35);
	КонецЕсли;
	
	ЗаказНаОплату.РасчетныйСчет = Лев(ЗаказНаОплату.РасчетныйСчет, 20);
	
	Возврат ЗаказНаОплату;
	
КонецФункции

// Формирует новое описание заказа на оплату в Системе быстрых платежей. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    * РасчетныйСчет - Строка - расчетный счет получателя платежа;
//    * СуммаОплаты - Число - сумма оплаты в Системе быстрых платежей. Сумма, которую необходимо
//      списать со счета или карты покупателя;
//    * ОблагаетсяНДС - Булево - информация о взимании НДС. Если Истина - облагается НДС,
//       если Ложь не облагается НДС;
//    * СуммаНДС - Число - сумма НДС. Если поле ОблагаетсяНДС равно Ложь, поле не заполняется;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ОтложенноеПолучениеСтатуса - Булево - признак загрузки статуса оплаты регламентным заданием;
//    * ШаблоныНазначений - Неопределено - шаблоны назначений платежей доступные для настройки;
//    * ИдентификаторПлатежа - Строка - уникальный идентификатор платежа.
//
Функция ОписаниеЗаказаНаОплату()
	
	ЗаказаНаОплату = ОписаниеЧастичнойОплаты();
	ЗаказаНаОплату.Вставить("ДатаОплаты", Дата(1, 1, 1));
	ЗаказаНаОплату.Вставить("СуммаОплаты", 0);
	ЗаказаНаОплату.Вставить("ОтложенноеПолучениеСтатуса", Ложь);
	ЗаказаНаОплату.Вставить("ОблагаетсяНДС", Ложь);
	ЗаказаНаОплату.Вставить("СуммаНДС", 0);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Формирует новое описание заказа на частичную оплату в Системе быстрых платежей. При проведении оплаты
// проверяется заполнение всех свойств заказа.
//
// Возвращаемое значение:
//  Структура - содержит описание заказа на оплату в Системе быстрых платежей:
//    * РасчетныйСчет - Строка - расчетный счет получателя платежа;
//    * СрокЖизниQRКода - Число - содержит значение срока действия QR-кода в целых минутах.
//      Минимальное значение - 5 минут, максимальное значение - 129 600 минут
//      (90 дней в минутах). В случае передачи значения не входящего в выше
//      описанный диапазон возвращать ошибку "НеверныйФорматЗапроса".
//      Если значение не предано используется стандартный срок использования СБП.
//    * НазначениеПлатежа - Строка - информация о платеже, которая будет отображена пользователю
//      в момент сканирования QR-кода в мобильном приложении. Рекомендуется
//      делать строку не длинной и включать информацию об организации, которая
//      является получателем денежных средств, например:
//      Оплата СБП 524,00 RUB ООО Ромашка
//      Если строка не заполнена, будет передано стандартное представление
//      назначения: Оплата СБП 524,00 RUB;
//    * ШаблоныНазначений - Неопределено - шаблоны назначений платежей доступные для настройки;
//    * ИдентификаторПлатежа - Строка - уникальный идентификатор платежа.
//
Функция ОписаниеЧастичнойОплаты()
	
	ЗаказаНаОплату = Новый Структура;
	ЗаказаНаОплату.Вставить("РасчетныйСчет", "");
	ЗаказаНаОплату.Вставить("СрокЖизниQRКода", 0);
	ЗаказаНаОплату.Вставить("НазначениеПлатежа", "");
	ЗаказаНаОплату.Вставить("ШаблоныНазначений", Неопределено);
	ЗаказаНаОплату.Вставить("ИдентификаторПлатежа", Неопределено);
	
	Возврат ЗаказаНаОплату;
	
КонецФункции

// Производит валидацию параметров заказа на оплату в Системе быстрых платежей.
//
// Параметры:
//  ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату.
//  РезультатОперации  - Структура - результат проверки заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом:
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//  СтатическаяСсылка - Булево - признак создания статической ссылки.
//
Процедура ПроверитьЗаказНаОплату(
		ЗаказНаОплату,
		РезультатОперации,
		СтатическаяСсылка)
	
	Если Не ЗначениеЗаполнено(ЗаказНаОплату.РасчетныйСчет) Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на оплату. Не заполнено поле ""Расчетный счет"".'");
		РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
	Если Не СтатическаяСсылка И Не ЗначениеЗаполнено(ЗаказНаОплату.СуммаОплаты) Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке  = НСтр("ru = 'Некорректно сформирован заказ на оплату. Не заполнено поле ""Сумма оплаты"".'");
		РезультатОперации.ИнформацияОбОшибке = РезультатОперации.СообщениеОбОшибке;
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
	КонецЕсли;
	
	ЗапрещенныеСимволы = СистемаБыстрыхПлатежейКлиентСервер.ЗапрещенныеСимволыНазначенияПлатежа(
		ЗаказНаОплату.НазначениеПлатежа);
	Если ЗапрещенныеСимволы.Количество() <> 0 Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Обратитесь к администратору.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В назначение присутствуют запрещенные символы: %1. Необходимо обновить назначения платежей в настройках подключения.'"),
			СтрСоединить(ЗапрещенныеСимволы, ","));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует новый идентификатор заказа на оплату или получает существующий.
//
// Параметры:
//  РезультатОперации - Структура  - см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка;
//  ДокументОплаты - ДокументСсылка - документ, который отражает
//   оплату в информационной базе;
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Строка - внешний идентификатор документа оплаты;
//
Функция ОпределитьИдентификаторЗаказаНаОплату(
		РезультатОперации,
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения)
	
	Идентификатор = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперации(
		ДокументОплаты,
		Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
	
	// Первая итерация, дополнительных проверок не требуется.
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПb2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Истина,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	ПараметрыСтатуса = РегистрыСведений.ИдентификаторыОперацийСБПb2b.ПараметрыОпределенияСтатусаОперации(
		ДокументОплаты);
	
	// Предыдущая операция генерации завершилась ошибкой,
	// необходимо запросить новый QR-код.
	Если Не ЗначениеЗаполнено(ПараметрыСтатуса.ИдентификаторОплаты) Тогда
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПb2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
	КонецЕсли;
	
	АнализИсторическихДанных = АнализИсторическихДанныхОплаты(
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения);
	
	// Если параметры заказа на оплату не изменились
	// можно выполнить повторный запрос, т.к. операция
	// создания заказа на оплату поддерживает идемпотентность.
	Если АнализИсторическихДанных.ДанныеИдентичны Тогда
		Возврат Идентификатор;
	Иначе
		
		ИсторическиеПараметрыН = ПереводыСБПb2bСлужебный.ПараметрыНастройкиПодключенияПоДокументу(
			ДокументОплаты);
		
		// Т.к. у СБП на текущий момент отсутствует операция
		// аннулирования QR-кода перед генерацией нового
		// следует проверить оплату предыдущего.
		ПараметрыСтатуса.ДатаЗапросаСтатуса = Дата(1, 1, 1);
		РезультатПроверки = ОпределитьСтатусОплаты(
			ПараметрыСтатуса,
			ИсторическиеПараметрыН,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииПроверкиОплаты());
		
		Если РезультатПроверки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиУжеОплачен();
			РезультатОперации.СообщениеОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			РезультатОперации.ИнформацияОбОшибке = НСтр("ru = 'Оплата по ранее сформированному QR-коду уже выполнена, создание нового запрещено.'");
			Возврат Неопределено;
		КонецЕсли;
	
		Возврат РегистрыСведений.ИдентификаторыОперацийСБПb2b.НовыйИдентификаторОперации(
			ДокументОплаты,
			ПараметрыНастройкиПодключения,
			,
			Ложь,
			ЗаказНаОплату.ОтложенноеПолучениеСтатуса);
		
	КонецЕсли;
	
КонецФункции

// Определяет изменение заказа на оплату перед формированием платежной ссылки.
//
// Параметры:
//  ДокументОплаты - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    оплату в информационной базе;
//  ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//
// Возвращаемое значение:
//  Структура - содержит результат подготовки заказа на оплату:
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей - сохраненная настройка;
//    * ДанныеИдентичны - Булево - признак идентичности заказов;
//
Функция АнализИсторическихДанныхОплаты(
		ДокументОплаты,
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения) Экспорт
	
	ИсторическиеДанные = РегистрыСведений.ИдентификаторыОперацийСБПb2b.ДанныеОперации(
		ДокументОплаты);
	
	ДанныеАнализа = Новый Структура;
	ДанныеАнализа.Вставить("НастройкаПодключения", ИсторическиеДанные.НастройкаПодключения);
	
	ИдентификаторПлатежаСовпадает = ((ИсторическиеДанные.ИдентификаторПлатежа = ""
		И ЗаказНаОплату.ИдентификаторПлатежа = Неопределено)
		Или ИсторическиеДанные.ИдентификаторПлатежа = ЗаказНаОплату.ИдентификаторПлатежа);
	
	Если ИсторическиеДанные <> Неопределено
		И ИсторическиеДанные.СуммаОперации = ЗаказНаОплату.СуммаОплаты
		И ИсторическиеДанные.НазначениеПлатежа = ЗаказНаОплату.НазначениеПлатежа
		И ИсторическиеДанные.ИдентификаторМерчанта = ПараметрыНастройкиПодключения.ИдентификаторМерчанта
		И ИсторическиеДанные.ИдентификаторУчастника = ПараметрыНастройкиПодключения.ИдентификаторУчастника
		И ИсторическиеДанные.РасчетныйСчет = ЗаказНаОплату.РасчетныйСчет
		И ИсторическиеДанные.ДокументОперации = ДокументОплаты
		И ИдентификаторПлатежаСовпадает
		И ИсторическиеДанные.СуммаНДС = ЗаказНаОплату.СуммаНДС
		И ИсторическиеДанные.ОблагаетсяНДС = ЗаказНаОплату.ОблагаетсяНДС Тогда
		ДанныеАнализа.Вставить("ДанныеИдентичны", Истина);
	Иначе
		ДанныеАнализа.Вставить("ДанныеИдентичны", Ложь);
	КонецЕсли;
	
	Возврат ДанныеАнализа;
	
КонецФункции

// Определяет алгоритм обработки операций, статус которых был получен регламентным заданием.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииСБП - документ, который отражает
//    операцию в информационной базе;
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей -
//    настройка выполнения операций;
//  ПараметрыОперации - Структура - дополнительные данные по оплате:
//    * ДатаОперации - Дата - фактическая дата оплаты в UTC;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу;
//    * ИдентификаторОперации - Строка - ключ контроля загрузки;
//    * ИдентификаторОплаты- Строка - идентификатор оплаты;
//    * ДокументОснование - ОпределяемыйТип.ДокументОперацииСБП - документ основание платежа;
//  СтатусОперацииСервис - Строка - текущее состояние операции операции. Для проверки статуса
//      операции, необходимо функции программного интерфейса общего модуля
//      СистемаБыстрыхПлатежейКлиентСервер. Возможные значения:
//        - "Отменена" - по ранее сформированная операция отменена НСПК;
//        - "Выполнена" - участник СБП подтвердил выполнение операции;
//        - "Ошибка" - не удалось выполнить проверку статуса операции из-за ошибки
//           или участник СБП вернул ошибку;
//  СообщениеОбОшибке - Строка - сообщение пользователю. Заполняется в случае ошибки;
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - данные обработанных документов.
//
Процедура ПриЗагрузкеСтатусаОперации(
		ДокументОперации,
		НастройкаПодключения,
		ПараметрыОперации,
		СтатусОперацииСервис,
		СообщениеОбОшибке,
		ОбработанныеОперации) Экспорт
	
	СтатусОперации = "";
	
	Если СтатусОперацииСервис = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена();
	ИначеЕсли СтатусОперацииСервис = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
	Иначе
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Передан не валидный статус операции %1 в отложенную обработку.'"),
				СтатусОперацииСервис),
			Истина);
		СистемаБыстрыхПлатежейСлужебный.УстановитьОтложенноеПолучениеСтатуса(
			ДокументОперации,
			Ложь,
			Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
	КонецЕсли;
	
	Попытка
		
		Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБП") Тогда
			ДокументОснование       = ПараметрыОперации.ДокументОснование;
			ДокументЧастичнойОплаты = ДокументОперации;
		Иначе
			ДокументОснование       = ДокументОперации;
			ДокументЧастичнойОплаты = Документы.ПлатежнаяСсылкаСБП.ПустаяСсылка();
		КонецЕсли;
		
		ПараметрыОперации.Вставить("ДокументЧастичнойОплаты", ДокументЧастичнойОплаты);
		
		СообщениеОбОшибке = "";
		РезультатОбработки = Новый Структура;
		РезультатОбработки.Вставить("СтатусОперации", СтатусОперации);
		РезультатОбработки.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		РезультатОбработки.Вставить("ПараметрыОперации", ПараметрыОперации);
		
		Обработан = Ложь;
		
		ИнтеграцияПодсистемБИП.ПриЗагрузкеСтатусаОперацииb2b(
			ДокументОснование,
			НастройкаПодключения,
			РезультатОбработки,
			Обработан);
		ПереводыСБПb2bПереопределяемый.ПриЗагрузкеСтатусаОперации(
			ДокументОснование,
			НастройкаПодключения,
			РезультатОбработки,
			Обработан);
		
		Если Обработан = Истина Тогда
			СистемаБыстрыхПлатежейСлужебный.УстановитьОтложенноеПолучениеСтатуса(
				ДокументОперации,
				Ложь,
				Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
			ОбработанныеОперации.Добавить(ДокументОперации);
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			
			ОтменаТранзакции = Ложь;
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию(); // АПК:325 Отмена незакрытых транзакций.
				ОтменаТранзакции = Истина;
			КонецЦикла;
			
			Если ОтменаТранзакции Тогда
				СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
					НСтр("ru = 'По завершении выполнения обработчика ПереводыСБПb2bПереопределяемый.ПриЗагрузкеСтатусаОперации
						|не была закрыта транзакция.'"),
					Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина);
		
	КонецПопытки;
	
КонецПроцедуры

// Создает описание результат операции данные ссылки.
//
// Возвращаемое значение:
//  Структура - результат операции:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ПараметрыОперации - Структура - см. ПереводыСБПc2bСлужебный.НовыйОписаниеПараметровОперации.
//
Функция НовыйРезультатОперацииСтатусОплаты()
	
	РезультатОперации = ПереводыСБПb2bСлужебный.НовыйРезультатДлительнойОперации();
	РезультатОперации.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку статусов отложенных операций.
//
// Параметры:
//  ОтложенныеОперации - Соответствие - отложенные операции для обработки.
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - обработанные
//  документы.
//
Процедура ОбработатьОтложенныеОперации(
		ОтложенныеОперации,
		ОбработанныеОперации)
	
	Для Каждого КлючЗначение Из ОтложенныеОперации Цикл
		
		ИдентификаторыЗапроса = СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса();
		ДанныеОпераций = Новый Соответствие;
		ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла, необходимо выполнить обработку в прикладной
			// логике и перейти к следующей.
			Если Операция.СтатусОперации <> СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
				ПриЗагрузкеСтатусаОперации(
					Операция.ДокументОперации,
					Операция.НастройкаПодключения,
					Операция.ПараметрыОперации,
					Операция.СтатусОперации,
					"",
					ОбработанныеОперации);
				Продолжить;
			КонецЕсли;
			
			ДанныеОплаты = ИдентификаторыЗапроса.Добавить();
			ДанныеОплаты.Идентификатор = Операция.ИдентификаторОплаты;
			ДанныеОплаты.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
				ДатаЗапросаСтатуса,
				Операция.ДатаЗапросаСтатуса);
			
			ОтложеннаяОперация = Новый Структура;
			ОтложеннаяОперация.Вставить("ПериодИспользования", Операция.ПериодИспользования);
			ОтложеннаяОперация.Вставить("ДокументОперации", Операция.ДокументОперации);
			ОтложеннаяОперация.Вставить("ДатаЗапросаСтатуса", ДатаЗапросаСтатуса);
			ОтложеннаяОперация.Вставить("ДокументОснование", Операция.ДокументОснование);
			ОтложеннаяОперация.Вставить("ИдентификаторПлатежа", Операция.ИдентификаторПлатежа);
			ОтложеннаяОперация.Вставить("КоличествоПопыток", Операция.КоличествоПопыток);
			
			ДанныеОпераций.Вставить(
				Операция.ИдентификаторОплаты,
				ОтложеннаяОперация);
			
		КонецЦикла;
		
		ПараметрыНастройкиПодключения = СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения(
			КлючЗначение.Ключ);
		РезультатПроверки = ОперацияСтатусыОплатыДинамическихСсылок(
			ИдентификаторыЗапроса,
			ПараметрыНастройкиПодключения,
			СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииПроверкиДлительнойОплаты(),
			Истина);
		
		Для Каждого РезультатОперация Из РезультатПроверки Цикл
			
			ОтложеннаяОперация = ДанныеОпераций.Получить(
				РезультатОперация.Ключ);
			ДанныеОперации = РезультатОперация.Значение;
			
			Если ЗначениеЗаполнено(ДанныеОперации.КодОшибки) Тогда
				СистемаБыстрыхПлатежейСлужебный.УвеличитьКоличествоПопытокЗапросаСтатуса(
					ОтложеннаяОперация.ДокументОперации,
					Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
				Если ОтложеннаяОперация.КоличествоПопыток >= СистемаБыстрыхПлатежейСлужебный.МаксимальноеКоличествоПопытокЗапросаСтатуса(Истина) Тогда
					ПриЗагрузкеСтатусаОперации(
						ОтложеннаяОперация.ДокументОперации,
						КлючЗначение.Ключ,
						ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации(),
						СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОшибка(),
						ДанныеОперации.СообщениеОбОшибке,
						ОбработанныеОперации);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе()
				И (ОтложеннаяОперация.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
				ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена();
			КонецЕсли;
			
			ЗаписатьСтатусОперации(
				ОтложеннаяОперация.ДокументОперации,
				ДанныеОперации.ИдентификаторОперации,
				ДанныеОперации.ДатаОперации,
				ДанныеОперации.СтатусОплаты,
				ДанныеОперации.СуммаОперации,
				ОтложеннаяОперация.ДатаЗапросаСтатуса);
		
			Если ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена()
				Или ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
				
					ПараметрыОперации = ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации();
					ЗаполнитьЗначенияСвойств(
						ПараметрыОперации,
						ДанныеОперации);
					
					ПараметрыОперации.ИдентификаторПлатежа = ОтложеннаяОперация.ИдентификаторПлатежа;
					ПараметрыОперации.ДокументОснование = ОтложеннаяОперация.ДокументОснование;
					
					ПриЗагрузкеСтатусаОперации(
						ОтложеннаяОперация.ДокументОперации,
						КлючЗначение.Ключ,
						ПараметрыОперации,
						ДанныеОперации.СтатусОплаты,
						"",
						ОбработанныеОперации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет загрузку статусов отложенных операций для документов после смены участника СБП.
//
// Параметры:
//  ОтложенныеОперации - Соответствие - отложенные операции для обработки.
//  ОбработанныеОперации - Массив из ОпределяемыйТип.ДокументОперацииСБП - обработанные
//  документы.
//
Процедура ОбработатьОперацииСменыУчастника(
		ОтложенныеОперации,
		ОбработанныеОперации)
	
	Для Каждого КлючЗначение Из ОтложенныеОперации Цикл
		
		ДанныеОпераций = Новый Соответствие;
		ДатаЗапросаСтатуса = ТекущаяДатаСеанса();
		
		Для Каждого Операция Из КлючЗначение.Значение Цикл
			
			// Если операция уже в терминальном статусе, выполнять запрос
			// не имеет смысла, необходимо выполнить обработку в прикладной
			// логике и перейти к следующей.
			Если Операция.СтатусОперации <> СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
				ПриЗагрузкеСтатусаОперации(
					Операция.ДокументОперации,
					Операция.НастройкаПодключения,
					Операция.ПараметрыОперации,
					Операция.СтатусОперации,
					"",
					ОбработанныеОперации);
				Продолжить;
			КонецЕсли;
			
			ИдентификаторыЗапроса = СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса();
			ДанныеОплаты = ИдентификаторыЗапроса.Добавить();
			ДанныеОплаты.Идентификатор = Операция.ИдентификаторОплаты;
			ДанныеОплаты.ДатаЗапросаСтатуса = ?(Не ЗначениеЗаполнено(Операция.ДатаЗапросаСтатуса),
				ДатаЗапросаСтатуса,
				Операция.ДатаЗапросаСтатуса);
			
			ПараметрыНастройкиПодключения = ПереводыСБПb2bСлужебный.ПараметрыНастройкиПодключенияПоДокументу(
				Операция.ДокументОперации);
			РезультатПроверки = ОперацияСтатусыОплатыДинамическихСсылок(
				ИдентификаторыЗапроса,
				ПараметрыНастройкиПодключения,
				СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииПроверкиДлительнойОплаты(),
				Истина);
			
			Для Каждого РезультатОперация Из РезультатПроверки Цикл
				
				ДанныеОперации = РезультатОперация.Значение;
				Если ЗначениеЗаполнено(ДанныеОперации.КодОшибки) Тогда
					СистемаБыстрыхПлатежейСлужебный.УвеличитьКоличествоПопытокЗапросаСтатуса(
						Операция.ДокументОперации,
						Метаданные.РегистрыСведений.ИдентификаторыОперацийСБПb2b.Имя);
					Если Операция.КоличествоПопыток >= СистемаБыстрыхПлатежейСлужебный.МаксимальноеКоличествоПопытокЗапросаСтатуса(Истина) Тогда
						ПриЗагрузкеСтатусаОперации(
							Операция.ДокументОперации,
							КлючЗначение.Ключ,
							ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации(),
							СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОшибка(),
							ДанныеОперации.СообщениеОбОшибке,
							ОбработанныеОперации);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе()
					И (Операция.ПериодИспользования + 600) < ТекущаяДатаСеанса() Тогда
					ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена();
				КонецЕсли;
				
				ЗаписатьСтатусОперации(
					Операция.ДокументОперации,
					ДанныеОперации.ИдентификаторОперации,
					ДанныеОперации.ДатаОперации,
					ДанныеОперации.СтатусОплаты,
					ДанныеОперации.СуммаОперации,
					Операция.ДатаЗапросаСтатуса);
			
				Если ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена()
					Или ДанныеОперации.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
						
						ПараметрыОперации = ПереводыСБПb2bСлужебный.НовыйОписаниеПараметровОперации();
						ЗаполнитьЗначенияСвойств(
							ПараметрыОперации,
							ДанныеОперации);
						
						ПараметрыОперации.ИдентификаторПлатежа = Операция.ИдентификаторПлатежа;
						ПараметрыОперации.ДокументОснование = Операция.ДокументОснование;
						
						ПриЗагрузкеСтатусаОперации(
							Операция.ДокументОперации,
							КлючЗначение.Ключ,
							ПараметрыОперации,
							ДанныеОперации.СтатусОплаты,
							"",
							ОбработанныеОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Аутентификация

// Возвращает логин и пароль Интернет-поддержки или тикет аутентификации.
//
// Параметры:
//  URLОперации -Строка - URL операции, для которой получаются данные аутентификации.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации пользователя Интернет-поддержки:
//    * ДанныеАутентификации - Структура - параметры аутентификации пользователя Интернет-поддержки;
//    * ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    * Ошибка - Булево - признак наличия ошибки.
//
Функция ДанныеАутентификации(URLОперации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеАутентификации", Новый Структура);
	Результат.Вставить("ИнформацияОбОшибке",   "");
	Результат.Вставить("Ошибка",               Ложь);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLОперации);
		
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.ДанныеАутентификации.Вставить("Тикет", РезультатПолученияТикета.Тикет);
		Иначе
			Результат.Ошибка = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			ПодробнаяИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось вызвать операцию %1.
						|Не удалось выполнить аутентификацию.
						|%2'"),
					URLОперации,
					РезультатПолученияТикета.ИнформацияОбОшибке);
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				ПодробнаяИнформацияОбОшибке,
				Истина);
		КонецЕсли;
	Иначе
		Результат.ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если Результат.ДанныеАутентификации = Неопределено Тогда
			Результат.Ошибка             = Истина;
			Результат.ИнформацияОбОшибке =
				НСтр("ru = 'Для работы с сервисом необходимо подключить Интернет-поддержку пользователей.'");
			СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные аутентификации участника СБП.
//
// Параметры:
//  ПараметрыНастройкиПодключения - Структура - см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//  ДанныеДляПодписи - Массив из Строка  - данные шифрования;
//  ТребуетсяОбновление - Булево - признак необходимости обновления устаревших данных.
//
// Возвращаемое значение:
//  Структура - структура, содержащая результаты определения параметров
//    аутентификации мерчанта в Системе быстрых платежей:
//    * Аутентификация - Структура, Неопределено - параметры аутентификации;
//       Если Неопределено, значение настроек не обнаружено;
//    * ИнформацияОбОшибке   - Строка    - информация об ошибке для пользователя.
//    * Ошибка - Булево - признак наличия ошибки.
//
Функция ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи,
		ТребуетсяОбновление = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Аутентификация",     Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Ошибка",             Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ПараметрыНастройкиПодключения.НастройкаПодключения);
	
	// Проверим необходимость обновления сохраненных данных аутентификации
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		СистемаБыстрыхПлатежейСлужебный.ОбновитьВерсиюДанныхАутентификации(
			ПараметрыНастройкиПодключения.НастройкаПодключения,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника);
		
		ДанныеХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ПараметрыНастройкиПодключения.НастройкаПодключения);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеАутентификации = ДанныеХранилища.Получить(
		ПараметрыНастройкиПодключения.ИдентификаторУчастника);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Результат.Ошибка = Истина;
		Результат.ИнформацияОбОшибке =
			НСтр("ru = 'Для работы с сервисом необходимо ввести данные аутентификации.'");
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ЗаголовокАвторизацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ДанныеДляПодписи,
		ТребуетсяОбновление);
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияСтатическойСсылки

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/b2b/v1/members/{memberId}/payment-link/reusable

// Выполняет создание новой статической ссылки.
//
// Параметры:
//  ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату.
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат создания заказа 
//   см. СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка.
//
Функция ОперацияРегистрацияСтатическойСсылки(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Регистрация новой статической ссылки (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payment-link/reusable",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника),
		ИдентификаторURL());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.РасчетныйСчет);
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.СуммаОплаты);
		ДанныеДляПодписи.Добавить(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.ОблагаетсяНДС);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.СуммаНДС);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.НазначениеПлатежа);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииРегистрацияСтатическойСсылки(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииРегистрацияСтатическойСсылки(
			ЗаказНаОплату,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать зарегистрировать статическую ссылку.
				|
				|%1
				|
				|%2'"),
			РезультатОперации.СообщениеОбОшибке,
			СистемаБыстрыхПлатежейСлужебный.ТехническаяИнформацияОбОшибке(
				URLОперации,
				РезультатОтправки.КодОшибки,
				Заголовки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_payment_link_reusable(
		РезультатОтправки.Содержимое);
	
	РезультатОперации.ПлатежнаяСсылка = ДанныеОплаты.sbpMemberResponse.payload;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершена регистрация статической ссылки (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания новой статической ссылки.
//
// Параметры:
//  ЗаказНаОплату - Структура - см. ОписаниеЗаказаНаОплату.
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  ИдентификаторОплаты - Строка - идентификатор ссылки;
//  Заголовки - Соответствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   * КодСостояния - Число - http код результата операции;
//   * КодОшибки - Строка - идентификатор ошибки вызова операции;
//   * Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииРегистрацияСтатическойСсылки(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = payment_link_reusable(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.
//
Функция payment_link_reusable(
		ЗаказНаОплату,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры кассовой ссылки.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("account");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.РасчетныйСчет);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.СуммаОплаты);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("takeTax");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.ОблагаетсяНДС);
	
	Если ЗаказНаОплату.ОблагаетсяНДС Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalTaxAmount");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.СуммаНДС);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.НазначениеПлатежа);
	
	Если Не ПустаяСтрока(ПараметрыНастройкиПодключения.СсылкаПеренаправления) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redirectUrl");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.СсылкаПеренаправления);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /program1c/sbp/b2b/v1/members/{memberId}/payment-link/reusable.
//
Функция ПрочитатьДанные_payment_link_reusable(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийПолученияДинамическойСсылки

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/b2b/v1/members/{memberId}/payment-link/one-time-use.

// Создает новый заказ на оплату.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//    * ПлатежнаяСсылка - Строка - идентификатор, по которому выполняется оплата;
//    * ИдентификаторОплаты - Строка - идентификатор оплаты в СБП;
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//       может быть обработан вызывающим методом;
//    * СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//
Функция ОперацияДинамическаяСсылка(ЗаказНаОплату, Идентификатор, ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Создание динамической ссылки СБП (b2b).'"),
		Ложь);
	
	РезультатОперации = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатПлатежнаяСсылка();
	РезультатОперации.Вставить("ИдентификаторОплаты", "");
	РезультатОперации.Вставить("ПериодИспользования", Неопределено);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payment-link/one-time-use",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника),
		ИдентификаторURL());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.РасчетныйСчет);
		ДанныеДляПодписи.Добавить(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.СуммаОплаты);
		ДанныеДляПодписи.Добавить(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
		ДанныеДляПодписи.Добавить(Идентификатор);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.ОблагаетсяНДС);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.СуммаНДС);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.НазначениеПлатежа);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.СрокЖизниQRКода);
		ДанныеДляПодписи.Добавить(ЗаказНаОплату.ИдентификаторПлатежа);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииРегистрацииДинамическойСсылки(
		ЗаказНаОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииРегистрацииДинамическойСсылки(
			ЗаказНаОплату,
			Идентификатор,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать заказ на оплату в Системе быстрых платежей.
				|
				|%1
				|
				|%2'"),
			РезультатОперации.СообщениеОбОшибке,
			СистемаБыстрыхПлатежейСлужебный.ТехническаяИнформацияОбОшибке(
				URLОперации,
				РезультатОтправки.КодОшибки,
				Заголовки,
				РезультатОтправки.ИнформацияОбОшибке));
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОплаты = ПрочитатьДанные_one_time_use(РезультатОтправки.Содержимое);
	
	РезультатОперации.ИдентификаторОплаты = ДанныеОплаты.sbpMemberResponse.qrId;
	РезультатОперации.ПлатежнаяСсылка = ДанныеОплаты.sbpMemberResponse.payload;
	Если ЗначениеЗаполнено(ЗаказНаОплату.СрокЖизниQRКода) Тогда
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ЗаказНаОплату.СрокЖизниQRКода * 60;
	Иначе
		РезультатОперации.ПериодИспользования = ТекущаяДатаСеанса() + ДанныеОплаты.qrSettings.defaultQrTtl * 60;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено создание заказа на оплату (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания нового заказа на оплату.
//
// Параметры:
//  ЗаказНаОплату - Структура - описание заказа на оплату см. функцию ОписаниеЗаказаНаОплату;
//  Идентификатор - Строка - внешний идентификатор документа оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в участнике СБП;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соответствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   * КодСостояния - Число - http код результата операции;
//   * КодОшибки - Строка - идентификатор ошибки вызова операции;
//   * Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииРегистрацииДинамическойСсылки(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = one_time_use(
		ЗаказОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// POST /program1c/sbp/b2b/v1/members/{memberId}/payment-link/one-time-use.
//
Функция one_time_use(
		ЗаказНаОплату,
		Идентификатор,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	// Параметры оплаты.
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("merchantId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("orderId");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(Идентификатор));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("account");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.РасчетныйСчет);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("amount");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.СуммаОплаты);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("currency");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(СистемаБыстрыхПлатежейСлужебный.ИдентификаторВалютыРоссийскийРубль());
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("takeTax");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.ОблагаетсяНДС);
	
	Если ЗаказНаОплату.ОблагаетсяНДС Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("totalTaxAmount");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.СуммаНДС);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("uip");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.ИдентификаторПлатежа);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("paymentPurpose");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ЗаказНаОплату.НазначениеПлатежа);
	
	Если Не ПустаяСтрока(ПараметрыНастройкиПодключения.СсылкаПеренаправления) Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("redirectUrl");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ПараметрыНастройкиПодключения.СсылкаПеренаправления);
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции POST /program1c/sbp/b2b/v1/members/{memberId}/payment-link/one-time-use.
//
Функция ПрочитатьДанные_one_time_use(ТелоJSON)
	
	// Ответ сервиса:
	//  payload - идентификатор оплаты для покупателя;
	//  qrId - идентификатор оплаты в СБП;
	// 
	//  {
	//  "payload": "string",
	//  "qrId": "string"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацийОплат

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/b2b/v1/members/{memberId}/payments/search

// Определяет статус заказа на оплату Системе быстрых платежей.
//
// Параметры:
//  ИдентификаторыОплаты - ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса();
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ИдентификаторОперацииПроверки - ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса;
//  ЗапросНаличияСтатуса - Булево - если Истина, будет выполнен запрос наличия статуса.
//
// Возвращаемое значение:
//  Соответствие - результат получения статуса оплаты:
//   * Ключ - Строка - идентификатор оплаты;
//   * Значение - Структура - см. НовыйРезультатПолученияСтатуса.
//
Функция ОперацияСтатусыОплатыДинамическихСсылок(
		ИдентификаторыОплаты,
		ПараметрыНастройкиПодключения,
		ИдентификаторОперацииПроверки,
		ЗапросНаличияСтатуса = Истина)
	
	РезультатОперации = Новый Соответствие;
	ИдентификаторыЗапроса = Новый Массив;
	
	Если ЗапросНаличияСтатуса Тогда
		
		РезультатПроверки = ОперацииСТерминальнымСтатусом(
			ИдентификаторыОплаты,
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если ЗначениеЗаполнено(РезультатПроверки.КодОшибки) Тогда
			ЗаполнитьРезультатОперации(
				ИдентификаторыОплаты.ВыгрузитьКолонку("Идентификатор"),
				РезультатПроверки.КодОшибки,
				РезультатПроверки.СообщениеОбОшибке,
				РезультатПроверки.ИнформацияОбОшибке,
				РезультатОперации);
			Возврат РезультатОперации;
		КонецЕсли;
		
		Для Каждого ИдентификаторОплаты Из ИдентификаторыОплаты Цикл
			Если РезультатПроверки.Идентификаторы.Найти(ИдентификаторОплаты.Идентификатор) = Неопределено Тогда
				ОписаниеСтатуса = НовыйРезультатПолученияСтатуса();
				ОписаниеСтатуса.ИдентификаторОплаты = ИдентификаторОплаты.Идентификатор;
				ОписаниеСтатуса.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
				РезультатОперации.Вставить(
					ИдентификаторОплаты.Идентификатор,
					ОписаниеСтатуса);
			Иначе
				ИдентификаторыЗапроса.Добавить(ИдентификаторОплаты.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторыЗапроса.Количество() = 0 Тогда
			Возврат РезультатОперации;
		КонецЕсли;
	Иначе
		ИдентификаторыЗапроса = ИдентификаторыОплаты.ВыгрузитьКолонку("Идентификатор");
	КонецЕсли;
	
	ПолучитьСтатусыОплатыДинамическойСсылки(
		ИдентификаторыЗапроса,
		ПараметрыНастройкиПодключения,
		РезультатОперации);
	
	Для Каждого ИдентификаторОплаты Из ИдентификаторыОплаты Цикл
		Если РезультатОперации.Получить(ИдентификаторОплаты.Идентификатор) = Неопределено Тогда
			ОписаниеСтатуса = НовыйРезультатПолученияСтатуса();
			ОписаниеСтатуса.ИдентификаторОплаты = ИдентификаторОплаты.Идентификатор;
			ОписаниеСтатуса.СтатусОплаты = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе();
			РезультатОперации.Вставить(
				ИдентификаторОплаты.Идентификатор,
				ОписаниеСтатуса);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет проверку наличия терминального статуса у динамических ссылок.
//
// Параметры:
//  ИдентификаторыОплаты - ТаблицаЗначений - см. СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса;
//  ИдентификаторУчастника - Строка - идентификатор участника СБП;
//  ИдентификаторОперацииПроверки - Строка - режим проверки.
//
// Возвращаемое значение:
//  Структура - результат проверки наличия терминального статуса.
//
Функция ОперацииСТерминальнымСтатусом(
		ИдентификаторыОплаты,
		ИдентификаторУчастника,
		ИдентификаторОперацииПроверки)
	
	РезультатПроверки = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	РезультатПроверки.Вставить("Идентификаторы", Новый Массив);
	
	Если ИдентификаторыОплаты.Количество() = 0 Тогда
		РезультатПроверки.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйФорматЗапроса();
		РезультатПроверки.СообщениеОбОшибке = НСтр("ru = 'Не заполнены идентификаторы операций.'");
		РезультатПроверки.ИнформацияОбОшибке = РезультатПроверки.СообщениеОбОшибке;
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатПроверки.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ИдентификаторыПорция = СистемаБыстрыхПлатежейСлужебный.НовыйИдентификаторыПроверкиНаличияСтатуса();
	Для Каждого ИдентификаторОплаты Из ИдентификаторыОплаты Цикл
		
		ЗаполнитьЗначенияСвойств(
			ИдентификаторыПорция.Добавить(),
			ИдентификаторОплаты);
		
		Если ИдентификаторыПорция.Количество() < СистемаБыстрыхПлатежейСлужебный.ДопустимоеКоличествоИдентификаторов() Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПорция = СистемаБыстрыхПлатежейСервис.ОперацияПроверкаНаличияСтатусаОперацийОплат(
			ИдентификаторыОплаты,
			ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если Не ЗначениеЗаполнено(РезультатПорция.КодОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				РезультатПроверки.Идентификаторы,
				РезультатПорция.Идентификаторы);
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатПроверки,
				РезультатПорция,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
			Возврат РезультатПроверки;
		КонецЕсли;
		
		ИдентификаторыПорция.Очистить();
		
	КонецЦикла;
	
	Если ИдентификаторыПорция.Количество() <> 0 Тогда
		
		РезультатПорция = СистемаБыстрыхПлатежейСервис.ОперацияПроверкаНаличияСтатусаОперацийОплат(
			ИдентификаторыОплаты,
			ИдентификаторУчастника,
			ИдентификаторОперацииПроверки);
		
		Если Не ЗначениеЗаполнено(РезультатПорция.КодОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				РезультатПроверки.Идентификаторы,
				РезультатПорция.Идентификаторы);
		Иначе
			ЗаполнитьЗначенияСвойств(
				РезультатПроверки,
				РезультатПорция,
				"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Определяет статусы оплаты динамических ссылок Системы быстрых платежей.
//
// Параметры:
//  ИдентификаторыЗапроса - Массив из Строка - идентификаторы для проверки статуса.
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  РезультатОперации - Структура - см. НовыйРезультатПолученияСтатуса.
//
Процедура ПолучитьСтатусыОплатыДинамическойСсылки(
		ИдентификаторыЗапроса,
		ПараметрыНастройкиПодключения,
		РезультатОперации)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payments/search",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника),
		ИдентификаторURL());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	Если РезультатИПП.Ошибка Тогда
		ЗаполнитьРезультатОперации(
			ИдентификаторыЗапроса,
			СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль(),
			РезультатИПП.СообщениеОбОшибке,
			РезультатИПП.ИнформацияОбОшибке,
			РезультатОперации);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи = ИдентификаторыЗапроса;
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		ЗаполнитьРезультатОперации(
			ИдентификаторыЗапроса,
			СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль(),
			РезультатСБП.СообщениеОбОшибке,
			РезультатСБП.ИнформацияОбОшибке,
			РезультатОперации);
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПорция = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыЗапроса Цикл
		
		ИдентификаторыПорция.Добавить(Идентификатор);
		Если ИдентификаторыПорция.Количество() < МаксимальноеКоличествоИдентификаторов() Тогда
			Продолжить;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовСтатусОплатыДинамическойСсылки(
			ИдентификаторыПорция,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			ДанныеДляПодписи,
			URLОперации,
			Заголовки);
		
		Если ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			ОбработатьПолучениеСтатуса(
				РезультатОперации,
				РезультатОтправки);
		Иначе
			ОбработатьОшибкуПолученияСтатуса(
				ИдентификаторыПорция,
				РезультатОперации,
				РезультатОтправки,
				URLОперации,
				Заголовки);
			Возврат;
		КонецЕсли;
		
		ИдентификаторыПорция.Очистить();
		
	КонецЦикла;
	
	Если ИдентификаторыПорция.Количество() <> 0 Тогда
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовСтатусОплатыДинамическойСсылки(
			ИдентификаторыПорция,
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			ДанныеДляПодписи,
			URLОперации,
			Заголовки);
		
		Если ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
			ОбработатьПолучениеСтатуса(
				РезультатОперации,
				РезультатОтправки);
		Иначе
			ОбработатьОшибкуПолученияСтатуса(
				ИдентификаторыПорция,
				РезультатОперации,
				РезультатОтправки,
				URLОперации,
				Заголовки);
		КонецЕсли;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Проверка статуса заказа на оплату (b2b) в Системе быстрых платежей завершена.'"),
		Ложь);
	
КонецПроцедуры

// Заполняет результат операции на основании ответа сервиса.
//
// Параметры:
//  РезультатОперации - Структура - см. НовыйРезультатПолученияСтатуса;
//  РезультатОтправки - Структура - результат получения статуса.
//
Процедура ОбработатьПолучениеСтатуса(
		РезультатОперации,
		РезультатОтправки)
	
	ДанныеСтатусов = ПрочитатьДанные_search(
		РезультатОтправки.Содержимое);
	
	Для каждого ДанныеСтатуса Из ДанныеСтатусов.sbpMemberResponse Цикл
		
		ОписаниеСтатуса = НовыйРезультатПолученияСтатуса();
		ОписаниеСтатуса.СтатусОплаты = ДанныеСтатуса.paymentStatus;
		ОписаниеСтатуса.ИдентификаторОплаты = ДанныеСтатуса.qrId;
		ОписаниеСтатуса.ДатаОперации = ДанныеСтатуса.operationDate;
		ОписаниеСтатуса.СуммаОперации = ДанныеСтатуса.amount;
		ОписаниеСтатуса.РасчетныйСчет = ДанныеСтатуса.account;
		ОписаниеСтатуса.ОбновитьДатуЗапросаСтатуса = Истина;
		ОписаниеСтатуса.ИдентификаторОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторОперацииБезСлужебныхСимволов(
			ДанныеСтатуса.paymentId);
		
		РезультатОперации.Вставить(
			ОписаниеСтатуса.ИдентификаторОплаты,
			ОписаниеСтатуса);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет описание ошибки операции на основании ответа сервиса.
//
// Параметры:
//  Идентификаторы - Массив из Строка - идентификаторы по которым был выполнен запрос;
//  РезультатОперации - Структура - см. НовыйРезультатПолученияСтатуса;
//  РезультатОтправки - Структура - результат получения статуса;
//  URLОперации - Строка - URL метода сервиса;
//  Заголовки - Соответствие - заголовки запроса.
//
Процедура ОбработатьОшибкуПолученияСтатуса(
		Идентификаторы,
		РезультатОперации,
		РезультатОтправки,
		URLОперации,
		Заголовки)
	
	КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
		РезультатОтправки.КодСостояния);
	СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
		КодОшибки,
		РезультатОтправки.Содержимое);
	
	ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось получить статус оплаты в Системе быстрых платежей.
			|
			|%1
			|
			|%2'"),
		СообщениеОбОшибке,
		СистемаБыстрыхПлатежейСлужебный.ТехническаяИнформацияОбОшибке(
			URLОперации,
			РезультатОтправки.КодОшибки,
			Заголовки,
			РезультатОтправки.ИнформацияОбОшибке));
	
	ЗаполнитьРезультатОперации(
		Идентификаторы,
		КодОшибки,
		СообщениеОбОшибке,
		ИнформацияОбОшибке,
		РезультатОперации);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		Строка(ИнформацияОбОшибке),
		Истина);
	
КонецПроцедуры

// Заполняет результат получения статуса оплаты.
//
// Параметры:
//  Идентификаторы - Массив из Строка - идентификаторы по которым был выполнен запрос;
//  КодОшибки - Строка - строковый код возникшей ошибки, который
//   может быть обработан вызывающим методом:
//  СообщениеОбОшибке  - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//  ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора.
//  РезультатОперации - Структура - результат получения статуса.
//
Процедура ЗаполнитьРезультатОперации(
		Идентификаторы,
		КодОшибки,
		СообщениеОбОшибке,
		ИнформацияОбОшибке,
		РезультатОперации)
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ОписаниеСтатуса = НовыйРезультатПолученияСтатуса();
		ОписаниеСтатуса.КодОшибки = КодОшибки;
		ОписаниеСтатуса.СообщениеОбОшибке = СообщениеОбОшибке;
		ОписаниеСтатуса.ИнформацияОбОшибке = ИнформацияОбОшибке;
		РезультатОперации.Вставить(
			Идентификатор,
			ОписаниеСтатуса);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет вызов операции проверки статуса заказа на оплату.
//
// Параметры:
//  ИдентификаторыЗапроса - Массив из Строка - идентификаторы оплаты, по которым необходимо
//   получить статус оплаты;
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//    см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  ДанныеДляПодписи - Массив из Строка - параметры формирования HMAC;
//  URLОперации - Строка - url для вызова операции;
//  Заголовки - Соответствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат получения статуса заказа на оплату в Системе быстрых платежей:
//   * КодСостояния - Число - http код результата операции;
//   * КодОшибки - Строка - идентификатор ошибки вызова операции;
//   * Содержимое - Строка - ответа сервиса;
//
Функция ВызовСтатусОплатыДинамическойСсылки(
		ИдентификаторыЗапроса,
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ДанныеДляПодписи,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	ПараметрыЗапросаJSON = search(
		ИдентификаторыЗапроса,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			Возврат РезультатОтправки;
		КонецЕсли;
		
		РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			URLОперации,
			,
			,
			ПараметрыОтправки);
		
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Формирует параметры запроса для операции
// /program1c/sbp/b2b/v1/members/{memberId}/payments/search.
//
Функция search(
		ИдентификаторыЗапроса,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("sbpMemberRequest");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("qrIds");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для Каждого Идентификатор Из ИдентификаторыЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции:
// /program1c/sbp/b2b/v1/members/{memberId}/payments/search
//
Функция ПрочитатьДанные_search(ТелоJSON)
	
	// Ответ сервиса:
	// 
	//{
	//  "sbpMemberResponse": [
	//    {
	//      "paymentStatus": "SUCCESS",
	//      "paymentId": "string",
	//      "operationDate": "2024-07-08T14:29:37.392Z",
	//      "qrId": "string",
	//      "amount": 9311.01,
	//      "currency": "string",
	//      "account": "string"
	//    }
	//  ]
	//}
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("operationDate");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(
		ЧтениеОтвета,
		,
		ИменаСвойствСоЗначениямиДата,
		,
		"ВосстановитьДатуJSON",
		СистемаБыстрыхПлатежейСлужебный,
		,
		ИменаСвойствСоЗначениямиДата);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВызовОперацииПолученияДанныхСсылки

////////////////////////////////////////////////////////////////////////////////
// Вызов операции POST /program1c/sbp/b2b/v1/members/{memberId}/payment-link/qrs/{qrId}/get-link-data

// Выполняет запрос данных функциональной ссылки.
//
// Параметры:
//  ИдентификаторОплаты - Строка - идентификатор ссылки.
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения.
//
// Возвращаемое значение:
//  Структура - результат получения данных ссылки заказа
//   см. ПереводыСБПb2bСлужебный.НовыйРезультатОперацииДанныеСсылки.
//
Функция ОперацияДанныеФункциональнойСсылки(
		ИдентификаторОплаты,
		ПараметрыНастройкиПодключения)
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Получение данных функциональной ссылки (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	РезультатОперации = ПереводыСБПb2bСлужебный.НовыйРезультатОперацииДанныеСсылки();
	
	URLОперации = СистемаБыстрыхПлатежейСлужебный.URLОперацииСервиса(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"/members/%1/payment-link/qrs/%2/get-link-data",
			ПараметрыНастройкиПодключения.ИдентификаторУчастника,
			ИдентификаторОплаты),
		ИдентификаторURL());
	
	РезультатИПП = ДанныеАутентификации(URLОперации);
	
	Если РезультатИПП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатИПП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	ДанныеДляПодписи = Новый Массив;
	Если СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетHMAC(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		ДанныеДляПодписи.Добавить(ИдентификаторОплаты);
	КонецЕсли;
	
	РезультатСБП = ДанныеАутентификацииУчастникаСБП(
		ПараметрыНастройкиПодключения,
		ДанныеДляПодписи);
	
	Если РезультатСБП.Ошибка Тогда
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
		РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
		Возврат РезультатОперации;
	КонецЕсли;
	
	Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
	РезультатОтправки = ВызовОперацииДанныеФункциональнойСсылки(
		ПараметрыНастройкиПодключения,
		РезультатИПП.ДанныеАутентификации,
		РезультатСБП.Аутентификация,
		URLОперации,
		Заголовки);
	
	// Обработка случаев устаревания токена аутентификации для способа
	// Resource Owner Password Credentials Grant.
	Если РезультатОтправки.КодСостояния = 401
		И СистемаБыстрыхПлатежейСлужебный.УчастникСБПИспользуетPasswordCredentialsGrant(ПараметрыНастройкиПодключения.ТипАутентификации) Тогда
		
		РезультатСБП = ДанныеАутентификацииУчастникаСБП(
			ПараметрыНастройкиПодключения,
			ДанныеДляПодписи,
			Истина);
		
		Если РезультатСБП.Ошибка Тогда
			РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиНеверныйЛогинИлиПароль();
			РезультатОперации.СообщениеОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			РезультатОперации.ИнформацияОбОшибке = РезультатСБП.ИнформацияОбОшибке;
			Возврат РезультатОперации;
		КонецЕсли;
		
		Заголовки = СистемаБыстрыхПлатежейСлужебный.НовыйЗаголовкиВызоваОперации();
		РезультатОтправки = ВызовОперацииДанныеФункциональнойСсылки(
			ПараметрыНастройкиПодключения,
			РезультатИПП.ДанныеАутентификации,
			РезультатСБП.Аутентификация,
			URLОперации,
			Заголовки);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.КодОшибки = СистемаБыстрыхПлатежейСлужебный.ПереопределитьКодОшибкиСервиса(
			РезультатОтправки.КодСостояния);
		РезультатОперации.СообщениеОбОшибке = СистемаБыстрыхПлатежейСлужебный.ПереопределитьСообщениеПользователю(
			РезультатОперации.КодОшибки,
			РезультатОтправки.Содержимое);
		
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить данные функциональной ссылки.
				|
				|%1
				|
				|%2'"),
			РезультатОперации.СообщениеОбОшибке,
			СистемаБыстрыхПлатежейСлужебный.ТехническаяИнформацияОбОшибке(
				URLОперации,
				РезультатОтправки.КодОшибки,
				Заголовки,
				РезультатОтправки.ИнформацияОбОшибке));
		
		СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
			Строка(РезультатОперации.ИнформацияОбОшибке),
			Истина);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	ДанныеОтвета = ПрочитатьДанные_get_link_data(
		РезультатОтправки.Содержимое);
	
	ДанныеСсылки = Новый Структура;
	ДанныеСсылки.Вставить("ТипСсылки", ДанныеОтвета.sbpMemberResponse.qrType);
	ДанныеСсылки.Вставить("СуммаОплаты", ДанныеОтвета.sbpMemberResponse.amount);
	ДанныеСсылки.Вставить("Наименование", ДанныеОтвета.sbpMemberResponse.legalName);
	ДанныеСсылки.Вставить("ИНН", ДанныеОтвета.sbpMemberResponse.inn);
	ДанныеСсылки.Вставить("СчетПолучателя", ДанныеОтвета.sbpMemberResponse.receiverAccount);
	ДанныеСсылки.Вставить("БИК", ДанныеОтвета.sbpMemberResponse.bik);
	ДанныеСсылки.Вставить("НаименованиеМагазина", ДанныеОтвета.sbpMemberResponse.brandName);
	ДанныеСсылки.Вставить("АдресМагазина", ДанныеОтвета.sbpMemberResponse.address);
	ДанныеСсылки.Вставить("ОблагаетсяНДС", ДанныеОтвета.sbpMemberResponse.takeTax);
	ДанныеСсылки.Вставить("СуммаНДС", ДанныеОтвета.sbpMemberResponse.totalTaxAmount);
	ДанныеСсылки.Вставить("НазначениеПлатежа", ДанныеОтвета.sbpMemberResponse.paymentPurpose);
	ДанныеСсылки.Вставить("ИдентификаторОплаты", ДанныеОтвета.sbpMemberResponse.uip);
	
	РезультатОперации.ДанныеСсылки = ДанныеСсылки;
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено получение данных функциональной ссылки (b2b) в Системе быстрых платежей.'"),
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет вызов операции создания новой кассовой ссылки.
//
// Параметры:
//  ЗаказНаОплату - Структура - см. НовыйЗаказНаОплату
//  ПараметрыНастройкиПодключения - Структура - параметры выполнения операции
//   см. СистемаБыстрыхПлатежейСлужебный.ПараметрыНастройкиПодключения;
//  ДанныеАутентификации - Структура - данные аутентификации на Портале 1С:ИТС;
//  ЗаголовокАутентификации - Строка - данные аутентификации в сервисе участника СБП;
//  URLОперации - Строка - url для вызова операции;
//  ИдентификаторОплаты - Строка - идентификатор ссылки;
//  Заголовки - Соответствие - заголовки операции.
//
// Возвращаемое значение:
//  Структура - результат создания заказа на оплату в Системе быстрых платежей:
//   * КодСостояния - Число - http код результата операции;
//   * КодОшибки - Строка - идентификатор ошибки вызова операции;
//   * Содержимое - Строка - ответа сервиса;
//
Функция ВызовОперацииДанныеФункциональнойСсылки(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации,
		URLОперации,
		Заголовки)
	
	ПараметрыПодключения = СистемаБыстрыхПлатежейСлужебный.ИнициализироватьПараметрыПодключения();
	
	ПараметрыЗапросаJSON = get_link_data(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации);
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	// Вызов операции сервиса.
	Возврат ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
КонецФункции

// Формирует параметры запроса для операции
// /sbp/v1/members/{memberId}/cash-register-qrs/register-qr.
//
Функция get_link_data(
		ПараметрыНастройкиПодключения,
		ДанныеАутентификации,
		ЗаголовокАутентификации)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	// Данные аутентификации.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификации(
		ЗаписьДанныхСообщения,
		ДанныеАутентификации);
	
	// Данные аутентификации участника СБП.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьДанныеАутентификацииУчастникаСБП(
		ЗаписьДанныхСообщения,
		ЗаголовокАутентификации,
		ПараметрыНастройкиПодключения.ИдентификаторМерчанта);
	
	// Параметры клиента.
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьПараметрыКлиента(
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции /program1c/sbp/b2b/v1/members/{memberId}/payment-link/qrs/{qrId}/get-link-data.
//
Функция ПрочитатьДанные_get_link_data(ТелоJSON)
	
	// Ответ сервиса:
	// {
	//  "sbpMemberResponse": {
	//    "qrId": "string",
	//    "qrType": "01",
	//    "amount": 9311.01,
	//    "currency": "string",
	//    "legalName": "string",
	//    "inn": "string",
	//    "receiverAccount": "string",
	//    "bik": "string",
	//    "brandName": "string",
	//    "address": "string",
	//    "takeTax": true,
	//    "totalTaxAmount": 9311.01,
	//    "paymentPurpose": "string",
	//    "uip": "string",
	//    "merchantId": "string"
	//  }
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ СБП:
			|%1'"),
		ТелоJSON);
	
	СистемаБыстрыхПлатежейСлужебный.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Результат = ПрочитатьJSON(ЧтениеОтвета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

// Формирует результат получения статуса.
//
// Возвращаемое значение:
//  Структура - результат проверки статуса заказа на оплату в Системе быстрых платежей:
//    * КодОшибки - Строка - строковый код возникшей ошибки, который
//      может быть обработан вызывающим методом;
//    * СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя;
//    * ИнформацияОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для администратора;
//    * СтатусОплаты - Строка - состояние оплаты в Системе быстрых платежей;
//    * ИдентификаторОперации - Строка - идентификатор операции;
//    * ИдентификаторОплаты - Строка - идентификатор оплаты;
//    * ДатаОперации - Дата, Неопределено - дата регистрации операции в Системе быстрых платежей;
//    * СуммаОперации - Число - фактическая суммы оплаты по документу;
//    * РасчетныйСчет - Строка - расчетный счет получения денежных средств.
//
Функция НовыйРезультатПолученияСтатуса()
	
	Результат = СистемаБыстрыхПлатежейСлужебный.НовыйРезультатОперации();
	Результат.Вставить("СтатусОплаты", "");
	Результат.Вставить("ИдентификаторОперации", "");
	Результат.Вставить("ИдентификаторОплаты", "");
	Результат.Вставить("ДатаОперации", Неопределено);
	Результат.Вставить("СуммаОперации", 0);
	Результат.Вставить("ОбновитьДатуЗапросаСтатуса", Ложь);
	Результат.Вставить("РасчетныйСчет", "");
	
	Возврат Результат;
	
КонецФункции

// Определяет максимальное количество идентификатор ссылок для проверки статусов оплаты.
//
// Возвращаемое значение:
//  Число - максимальное количество идентификаторов.
//
Функция МаксимальноеКоличествоИдентификаторов()
	
	Возврат 50;
	
КонецФункции

// Определяет идентификатор сценария в URL.
//
// Возвращаемое значение:
//  Строка - идентификатор сценария в URL.
//
Функция ИдентификаторURL()
	
	Возврат "/b2b"
	
КонецФункции

#КонецОбласти

#КонецОбласти
