
#Область СлужебныеПроцедурыИФункции

#Область ПриЗаписи

Процедура ПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область Пользователи

	Если НЕ Отказ Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	НастройкиПользователей.Пользователь КАК Пользователь
		                      |ИЗ
		                      |	РегистрСведений.CRM_НастройкиПользователей КАК НастройкиПользователей
		                      |ГДЕ
		                      |	НастройкиПользователей.Пользователь = &Пользователь");
		Запрос.УстановитьПараметр("Пользователь", Источник.Ссылка);
		Если Запрос.Выполнить().Пустой() Тогда
			// Создание настроек пользователя по умолчанию при первой записи.
			CRM_ПользователиПереопределяемый.CRM_ЗаполнитьНастройкиПользователяПоУмолчанию(Источник.Ссылка);
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон", Источник.Ссылка) = Истина Тогда
			Если Источник.Недействителен = Истина Тогда
				сфпСофтФонПроСервер.сфпОтключитьИспользованиеСофтФона(Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	#КонецОбласти // Пользователи

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияСправочников(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если ТипЗнч(Источник) = Тип("СправочникОбъект.Партнеры") И НЕ Источник.ЭтоГруппа Тогда
			Если Не Источник.Клиент И Не Источник.Конкурент И Не Источник.Поставщик
				 И Не Источник.ПрочиеОтношения
				 И Не Источник.Предопределенный Тогда
				Текст = НСтр("ru='Необходимо определить хотя бы один тип бизнес-отношений';
					|en='It is necessary to define at least one type of business relations'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Источник,
				"Клиент",
				,
				Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПравилаОбработкиЭлектроннойПочты") Тогда
		Если ЗначениеЗаполнено(Источник.ПомещатьВПапку) Тогда
			ИндексЭлемента = ПроверяемыеРеквизиты.Найти("CRM_ПересылатьНаАдрес");
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.CRM_ПересылатьНаАдрес) Тогда
			ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ПомещатьВПапку");
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Партнеры

// Осуществляет расширенный поиск партнеров.
//
// Параметры:
//  СписокПартнеров - таблица значений, заполняемая результатами поиска,
//
// Возвращаемое значение:
//   Неопределено если поиск произведен успешно.
//   Текст сообщения пользователю, если поиск неудачен.
//
Функция НайтиПартнеров(СтрокаПоиска, СписокПартнеров) Экспорт

	// настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	мОбластьПоиска.Добавить(Метаданные.Справочники.Партнеры);
	мОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	мОбластьПоиска.Добавить(Метаданные.РегистрыСведений.сфпНомераТелефоновДляПоиска);
	РазмерПорции = 200;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		ИО = ИнформацияОбОшибке();
		Если Прав(СтрокаПоиска, 1) = "*" Тогда
			СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("""" + Лев(СтрокаПоиска,
				 СтрДлина(СтрокаПоиска) - 1) + """",
				 РазмерПорции);
			СписокПоиска.ОбластьПоиска = мОбластьПоиска;
			СписокПоиска.ПерваяЧасть();
		Иначе
			ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
		КонецЕсли;
	КонецПопытки;
	
	// Возврат, если поиск не результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru='Слишком много результатов, уточните запрос.';en='It is too much results, specify query.'");
	ИначеЕсли СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru='Ничего не найдено';en='No results found'");
	КонецЕсли;
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	// Сформировать список найденных партнеров.
	СписокПартнеров.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;
	
	КИПредставлениеСиноним		=
		Метаданные.Справочники.Партнеры.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Представление.Синоним;
	КИЗначенияПолейСиноним		=
		Метаданные.Справочники.Партнеры.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.ЗначенияПолей.Синоним;
	СтрокаПоискаВРег			= ВРег(СтрокаПоиска);
	
	// Обработать по порциям результаты ППД.
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			// Сформировать элемент результата.
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			Если ТипЗнч(Элемент.Значение) = Тип("РегистрСведенийКлючЗаписи.сфпНомераТелефоновДляПоиска") Тогда
				Если ТипЗнч(Элемент.Значение.Объект) = Тип("СправочникСсылка.Партнеры")
					 Или ТипЗнч(Элемент.Значение.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ЭлементСсылка = Элемент.Значение.Объект;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ЭлементСсылка = Элемент.Значение.Ссылка;
			КонецЕсли;
			
			Если КоличествоЭлементов < 20 Тогда // Ограничение - если количество найденных много не будем усложнять описание.
				Если	Лев(Элемент.Описание, СтрДлина(КИПредставлениеСиноним)) = КИПредставлениеСиноним
					Или	Лев(Элемент.Описание, СтрДлина(КИЗначенияПолейСиноним)) = КИЗначенияПолейСиноним Тогда
					// Считаем, что нашли в контактной информации.
					бНайдено = Ложь;
					
					// Обход контактной информации вручную - попытка определить, где нашли.
					Для Каждого СтрокаТаблицы Из ЭлементСсылка.КонтактнаяИнформация Цикл
						Если	СтрНайти(ВРег(СтрокаТаблицы.Представление),		СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.ЗначенияПолей),		СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.Страна),				СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.Регион),				СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.Город),				СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.АдресЭП),				СтрокаПоискаВРег) > 0
							Или	СтрНайти(ВРег(СтрокаТаблицы.ДоменноеИмяСервера),	СтрокаПоискаВРег) > 0 Тогда
							//
							бНайдено = Истина;
							ЭлементОписание = СокрЛП(СтрокаТаблицы.Вид) + ": " + СтрокаТаблицы.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не бНайдено Тогда
						ЭлементОписание = Элемент.Описание;
					КонецЕсли;
				Иначе
					ЭлементОписание = Элемент.Описание;
				КонецЕсли;
			Иначе
				ЭлементОписание = Элемент.Описание;
			КонецЕсли;
			
			Попытка
				СтрПредставлениеОбъекта = Элемент.Метаданные.ПредставлениеОбъекта + " """;
				Основание = СтрПредставлениеОбъекта + Элемент.Представление + """ - " + ЭлементОписание;
			Исключение
				Если ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
					СтрПредставлениеОбъекта = НСтр("ru='Клиент';en='Client'") + " """ + Строка(ЭлементСсылка) + """";
				ИначеЕсли ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					СтрПредставлениеОбъекта = НСтр("ru='Контактное лицо';en='Contact Person'") + " """ + Строка(ЭлементСсылка) + """";
				Иначе
					СтрПредставлениеОбъекта = "";
				КонецЕсли;
				Если ТипЗнч(Элемент.Значение) = Тип("РегистрСведенийКлючЗаписи.сфпНомераТелефоновДляПоиска") Тогда
					НомерТелефона = ПолучитьНомерТелефонаПоЭлементуПоиска(Элемент.Значение.Объект,
						 Элемент.Значение.Вид,
						 Элемент.Значение.ПорядковыйНомер);
					Основание = "" + СтрПредставлениеОбъекта + "- " + "Номер Телефона: " + НомерТелефона ;
				Иначе
					Основание = ?(Не ЗначениеЗаполнено(СтрПредставлениеОбъекта), """" + Элемент.Представление 
						+ """",
						 СтрПредставлениеОбъекта)
					+ " - " + ЭлементОписание;					
				КонецЕсли;					
				//
			КонецПопытки;
			
			Если ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
				Партнер = ЭлементСсылка;
			ИначеЕсли ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Партнер = ЭлементСсылка.Владелец;
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер,
				 Основание,
				 ЭлементСсылка) Тогда
				Возврат НСтр("ru='Слишком много результатов, уточните запрос.';en='It is too much results, specify query.'");					
			КонецЕсли;
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	Если СписокПартнеров.Количество() = 0 Тогда
	     Возврат НСтр("ru='Ничего не найдено.';en='None found.'");		
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

Функция ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер, Основание, ЭлементСсылка)
	
	// Добавить элемент, если партнера еще нет в списке найденных.
	Если СписокПартнеров.Найти(Партнер, "Партнер") = Неопределено Тогда
		// Ограничить количество возвращаемых партнеров.
		Если СписокПартнеров.Количество() > 100 Тогда
			Возврат Ложь; 
		Иначе 
			Запись = СписокПартнеров.Добавить();
			Запись.Партнер = Партнер;
			Запись.Основание = Основание;
			Запись.Ссылка = ЭлементСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском()

// Функция возвращает представление телефона для найденного элемента полнотекстового поиска.
//
//  Параметры:
//   Объект - СправочникСсылка - Ссылка на найденный элемент.
//   Вид	- Вид контактной информации - Ссылка на вид КИ.
//   Порядковый номер - Число - Порядковый номер КИ (нужен для однозначного сопоставления).
//
//  Возвращаемое значение:
//   СтрокаПредставления - Строка - Представление найденного номера телефона.
//
Функция ПолучитьНомерТелефонаПоЭлементуПоиска(Объект, Вид, ПорядковыйНомер)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	сфпНомераТелефоновДляПоиска.НомерТелефона КАК НомерТелефона,
	|	сфпНомераТелефоновДляПоиска.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска
	|ГДЕ
	|	сфпНомераТелефоновДляПоиска.Объект = &Объект
	|	И сфпНомераТелефоновДляПоиска.Вид = &Вид
	|	И сфпНомераТелефоновДляПоиска.ПорядковыйНомер = &ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Вид", Вид);
	запрос.УстановитьПараметр("ПорядковыйНомер", ПорядковыйНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;		
	
КонецФункции	

Процедура CRM_ПередЗаписьюЛида(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ответственный) И ЗначениеЗаполнено(Источник.CRM_РольОтветственного) Тогда
		Источник.CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Заявки.Ссылка КАК Заявка
				|ИЗ
				|	Документ.CRM_Заявка КАК Заявки
				|ГДЕ
				|	Заявки.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ЧАС, 0 - Заявки.ИсточникПолучения.CRM_ДлительностьОжиданияСвязыванияЗаявки) И ДОБАВИТЬКДАТЕ(&Дата, ЧАС, Заявки.ИсточникПолучения.CRM_ДлительностьОжиданияСвязыванияЗаявки)
				|	И Заявки.Телефон = &КлиентТелефон
				|	И Заявки.ИсточникПолучения.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
				|	И НЕ Заявки.ПометкаУдаления
				|	И Заявки.ТипЗаявки = 1
				|
				|УПОРЯДОЧИТЬ ПО
				|	Заявки.Ссылка УБЫВ
				|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("Дата", Источник.Дата);
			Запрос.УстановитьПараметр("КлиентТелефон", Источник.АбонентКакСвязаться);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ЗаявкаОбъект = Выборка.Заявка.ПолучитьОбъект();
				ЗаявкаОбъект.CRM_СкрытьВАРМ = Истина;
				ЗаявкаОбъект.Записать();
				
				Источник.ВзаимодействиеОснование = ЗаявкаОбъект.Ссылка;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура CRM_ПриЗаписиЛида(Источник, Отказ) Экспорт
	
	// АПК:75-выкл Отсутствует обязательная конструкция "Если ОбменДанными.Загрузка Тогда ..."
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьПроверкуЗагрузки") Тогда 
	Иначе
	// АПК:75-вкл
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Удалим признак лида при пометке удаления
	Если Источник.ПометкаУдаления Тогда
		РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(Источник.Ссылка);
	КонецЕсли;
	
	// Если мы указали причину отказа - установим ее и для основания-Заявки.
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		
		Если ЗначениеЗаполнено(Источник.ВзаимодействиеОснование)
			 И ТипЗнч(Источник.ВзаимодействиеОснование) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			
			Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Источник.Ссылка) Тогда
				
				СтруктураСостоянияЗвонка = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Источник.Ссылка);
				Если СтруктураСостоянияЗвонка <> Неопределено Тогда
					СостояниеЗвонка = СтруктураСостоянияЗвонка.Состояние;
					
					Если СостояниеЗвонка = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
						
						ПричинаОтклоненияЗвонка = СтруктураСостоянияЗвонка.ПричинаОтклонения;
						КомментарийСостоянияЗвонка = СтруктураСостоянияЗвонка.Комментарий;
						
						Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Источник.ВзаимодействиеОснование) Тогда
							СтруктураСостоянияЗаявки =
								РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Источник.ВзаимодействиеОснование);
							
							Если СтруктураСостоянияЗаявки <> Неопределено Тогда
								СостояниеЗаявки = СтруктураСостоянияЗаявки.Состояние;
								
								Если СостояниеЗаявки = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
									ПричинаОтклоненияЗаявки = СтруктураСостоянияЗаявки.ПричинаОтклонения;
									Если НЕ ЗначениеЗаполнено(ПричинаОтклоненияЗаявки) Тогда
										// запишем состояние заявки по данным звонка
										РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.ВзаимодействиеОснование,
											 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтклоненияЗвонка,
											 КомментарийСостоянияЗвонка); 
									КонецЕсли;
									
								Иначе
									// запишем состояние заявки по данным звонка
									РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.ВзаимодействиеОснование,
										 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтклоненияЗвонка,
										 КомментарийСостоянияЗвонка); 
									
								КонецЕсли;
								
							Иначе
								// запишем состояние заявки по данным звонка
								РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.ВзаимодействиеОснование,
									 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтклоненияЗвонка,
									 КомментарийСостоянияЗвонка); 
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		Если Не ЗначениеЗаполнено(Источник.ВзаимодействиеОснование) Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Заявки.Ссылка КАК Заявка
				|ИЗ
				|	Документ.CRM_Заявка КАК Заявки
				|ГДЕ
				|	Заявки.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&Дата, ЧАС, 0 - Заявки.ИсточникПолучения.CRM_ДлительностьОжиданияСвязыванияЗаявки) И ДОБАВИТЬКДАТЕ(&Дата, ЧАС, Заявки.ИсточникПолучения.CRM_ДлительностьОжиданияСвязыванияЗаявки)
				|	И Заявки.ЭлектроннаяПочта = &КлиентЭлектроннаяПочта
				|	И Заявки.ИсточникПолучения.Сценарий = ЗНАЧЕНИЕ(Перечисление.CRM_CallTrakingСценарии.Roistat)
				|	И Заявки.ДокументОснование = НЕОПРЕДЕЛЕНО
				|	И НЕ Заявки.ПометкаУдаления
				|	И Заявки.ТипЗаявки <> 1
				|
				|УПОРЯДОЧИТЬ ПО
				|	Заявки.Ссылка УБЫВ
				|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("Дата", Источник.ДатаПолучения);
			Запрос.УстановитьПараметр("КлиентЭлектроннаяПочта", Источник.ОтправительАдрес);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ЗаявкаОбъект = Выборка.Заявка.ПолучитьОбъект();
				ЗаявкаОбъект.ДокументОснование = Источник.Ссылка;
				ЗаявкаОбъект.Записать();
				
				// Установка статуса "Повторный"
				Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Источник.Ссылка) Тогда
					РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Источник.Ссылка,
						 Справочники.CRM_СостоянияЛидов.Повторный);
				КонецЕсли;
				
				// Снятие признака "Непрочитано"
				НепрочитанныеПисьмаНаборЗаписей = РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьма.СоздатьНаборЗаписей();
				НепрочитанныеПисьмаНаборЗаписей.Отбор.Письмо.Установить(Источник.Ссылка);
				НепрочитанныеПисьмаНаборЗаписей.Записать();
				
				// Перенос в папку "Обработанные"
				ПапкаОбработанные = Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка();
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	CRM_ПапкиУчетныхЗаписей.Папка КАК Папка
				|ИЗ
				|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
				|ГДЕ
				|	CRM_ПапкиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
				|	И CRM_ПапкиУчетныхЗаписей.ВидПапки = &ВидПапки";
				
				Запрос.УстановитьПараметр("ВидПапки", Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные);
				Запрос.УстановитьПараметр("УчетнаяЗапись", Источник.УчетнаяЗапись);
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				
				Если Выборка.Следующий() Тогда
					ПапкаОбработанные = Выборка.Папка;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПапкаОбработанные) Тогда
					Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Источник.Ссылка, ПапкаОбработанные);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура CRM_ПриЗаписиПользователяДляiCRMПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;		
	КонецЕсли;
	
	Если Источник.Недействителен И НЕ РаботаВМоделиСервиса.РазделениеВключено() Тогда
		НаборЗаписей = РегистрыСведений.CRM_СостояниеПользователейСинхронизации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Источник.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.Состояние = Перечисления.CRM_СостоянияСинхронизацииПользователя.Блокирован;
			КонецЦикла;	
			НаборЗаписей.Записать(Истина);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // Справочник_Партнеры

#КонецОбласти
