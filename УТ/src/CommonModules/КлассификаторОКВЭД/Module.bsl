///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ОКВЭД".
// ОбщийМодуль.КлассификаторОКВЭД.
//
// Серверные процедуры получения информации из ОКВЭД:
//  - поиск значений по указанному коду/кодам;
//  - подбор возможных значений по определенным параметрам;
//  - получение списка кодов с разделами;
//  - начальное заполнение классификатора;
//  - взаимодействие с подсистемой РаботаСКлассификаторами
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет поиск в классификаторе значения по указанному коду и всех его родительских значений. Результат будет
// упорядочен по уровню иерархии от самого нижнего к самому верхнему. Поиск выполняется по точному соответствию.
// Если не найдено значений с указанным кодом:
//   * Иерархия = Ложь - будет возвращен пустой массив.
//   * Иерархия = Истина - будут возвращены вышестоящие элементы, если такие найдены. Определение вышестоящих элементов
//     выполняется разбором переданного кода.
//
// Параметры:
//  Код - Строка - код, который необходимо найти.
//  Иерархия - Булево - Истина, если нужно дополнить результат вышестоящими элементами.
//
// Возвращаемое значение:
//  Массив из Структура - найденные элементы, либо пустой массив:
//   * Раздел - Строка - раздел классификатора, к которому относится найденное значение.
//   * Код - Строка - код по классификатору.
//   * Наименование - Строка - текстовое описание выбранного значения.
//   * Представление - Строка - включает код и наименование.
//
Функция ЗначениеПоКоду(Знач Код, Иерархия) Экспорт
	
	Код = СокрЛП(Код);
	
	КодыДляПоиска = Новый Массив;
	
	Если Иерархия Тогда
		КодыДляПоиска = КодВИерархии(Код);
	Иначе
		КодыДляПоиска.Добавить(Код);
	КонецЕсли;
	
	Возврат ЗначенияПоКодам(КодыДляПоиска, Истина);
	
КонецФункции

// Получает информацию о соответствии кода (первых 2 цифр - класса) и буквенного кода раздела ОКВЭД.
//
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение - разделы классификатора:
//     * Ключ - Строка - Первые 2 цифры числового кода из классификатора ОКВЭД (класс).
//     * Значение - Строка - Буквенное обозначение раздела, в который входит указанный класс.
//
Функция РазделыКодов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОКВЭД.Раздел КАК Раздел,
	|	ПОДСТРОКА(ДанныеОКВЭД.Код, 0, 2) КАК Код
	|ИЗ
	|	РегистрСведений.ДанныеОКВЭД КАК ДанныеОКВЭД";
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Код, Выборка.Раздел);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет подбор данных из классификатора по указанному отбору.
// Все значения отборов складываются логическим оператором "И".
// Для формирования структуры отбора по умолчанию рекомендуется использовать КлассификаторОКВЭД.НовыйОтбор.
//
// Параметры:
//  Отбор - Структура - ограничения, накладываемые на выбираемые данные. См. КлассификаторОКВЭД.НовыйОтбор.
//
// Возвращаемое значение:
//  Массив из Структура - результат подбора:
//   * Раздел - Строка - раздел классификатора, к которому относится найденное значение.
//   * Код - Строка - код по классификатору.
//   * Наименование - Строка - текстовое описание выбранного значения.
//   * Представление - Строка - включает код и наименование.
//
Функция Подбор(Отбор) Экспорт
	
	Запрос = Новый Запрос;
	
	ПравильныйОтбор = НовыйОтбор();
	ЗаполнитьЗначенияСвойств(ПравильныйОтбор, Отбор);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОКВЭД.Код КАК Код,
	|	ДанныеОКВЭД.Наименование КАК Наименование,
	|	ДанныеОКВЭД.Раздел КАК Раздел,
	|	ДанныеОКВЭД.КодБезТочек КАК КодБезТочек
	|ИЗ
	|	РегистрСведений.ДанныеОКВЭД КАК ДанныеОКВЭД
	|ГДЕ
	|	&УсловиеОтбора";
	
	// Формируем дополнительные условия
	ДопУсловие = Новый Массив;
	
	Если ЗначениеЗаполнено(ПравильныйОтбор.Раздел) Тогда
		ДопУсловие.Добавить("Раздел = &Раздел");
		Запрос.УстановитьПараметр("Раздел", ПравильныйОтбор.Раздел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравильныйОтбор.Код) Тогда
		ДопУсловие.Добавить("Код ПОДОБНО &Код");
		Запрос.УстановитьПараметр("Код", ПравильныйОтбор.Код + "%");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравильныйОтбор.Наименование) Тогда
		ДопУсловие.Добавить("Наименование ПОДОБНО &Наименование");
		Запрос.УстановитьПараметр("Наименование", "%" + ПравильныйОтбор.Наименование + "%");
	КонецЕсли;
	
	Если ДопУсловие.Количество() > 0 Тогда
		ДопУсловие = СтрСоединить(ДопУсловие, " И ");
	Иначе
		ДопУсловие = "Истина";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравильныйОтбор.СтрокаПоиска) Тогда
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&УсловиеОтбора", ДопУсловие);
		
	Иначе
		// Если строка поиска указана, то определяем где искать
		Запрос.УстановитьПараметр("СтрокаПоиска", "%" + ПравильныйОтбор.СтрокаПоиска + "%");
		
		ЗапросыДляОбъединения = Новый Массив;
		
		РежимУказан = ЗначениеЗаполнено(ПравильныйОтбор.Режим);
		
		ДопУсловие = ?(ДопУсловие = "Истина", "", " И " + ДопУсловие);
		
		Если Не РежимУказан Или ПравильныйОтбор.Режим = "Раздел" Тогда
			ЗапросыДляОбъединения.Добавить(
				СтрЗаменить(
					ШаблонЗапроса,
					"&УсловиеОтбора",
					"Раздел = &СтрокаПоискаТочно
					|	" + ДопУсловие));
			Запрос.УстановитьПараметр("СтрокаПоискаТочно", ПравильныйОтбор.СтрокаПоиска);
		КонецЕсли;
		
		Если Не РежимУказан
			Или ПравильныйОтбор.Режим = "Код"
			Или ПравильныйОтбор.Режим = "КодИНаименование" Тогда
			ЗапросыДляОбъединения.Добавить(
				СтрЗаменить(
					ШаблонЗапроса,
					"&УсловиеОтбора",
					"Код ПОДОБНО &СтрокаПоиска
					|	" + ДопУсловие));
			ЗапросыДляОбъединения.Добавить(
				СтрЗаменить(
					ШаблонЗапроса,
					"&УсловиеОтбора",
					"КодБезТочек ПОДОБНО &СтрокаПоиска
					|	" + ДопУсловие));
		КонецЕсли;
		
		Если Не РежимУказан
			Или ПравильныйОтбор.Режим = "Наименование"
			Или ПравильныйОтбор.Режим = "КодИНаименование" Тогда
			ЗапросыДляОбъединения.Добавить(
				СтрЗаменить(
					ШаблонЗапроса,
					"&УсловиеОтбора",
					"Наименование ПОДОБНО &СтрокаПоиска
					|	" + ДопУсловие));
		КонецЕсли;

		ТекстЗапроса = СтрСоединить(ЗапросыДляОбъединения, Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС);
		
	КонецЕсли;
	
	ТекстЗапроса =
		ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Раздел,
		|	Код";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	
	Если ПравильныйОтбор.Разрешенные Тогда
		Пока Выборка.Следующий() Цикл
			Если Не КлассификаторОКВЭДСлужебныйКлиентСервер.КодРазрешенДляВыбора(Выборка.КодБезТочек) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьВыборкуВРезультатПодбора(Результат, Выборка);
		КонецЦикла;
		
	Иначе
		Пока Выборка.Следующий() Цикл
			ДобавитьВыборкуВРезультатПодбора(Результат, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру, содержащую элементы, необходимые для функции КлассификаторОКВЭД.Подбор
//
// Возвращаемое значение:
//  Структура - параметры отбора, которые необходимо использовать в процедуре КлассификаторОКВЭД.Подбор:
//    * СтрокаПоиска - Строка - текст, который необходимо найти. Если не заполнена, то выводятся все данные с учетом
//      дополнительных отборов. Поиск выполняется по любому вхождению искомой строки в данные классификатора.
//    * Режим - Строка, Неопределено - Вариант поиска информации:
//        - "Код" - поиск строки поиска выполняется только по измерению Код и реквизиту КодБезТочек;
//        - "Наименование" - поиск строки поиска выполняется только по ресурсу Наименование;
//        - "КодИНаименование" - поиск строки поиска выполняется по измерению Код, ресурсу Наименование и реквизиту
//          КодБезТочек;
//        - "Раздел" - поиск строки поиска выполняется только по ресурсу Раздел;
//        - "" или Неопределено - поиск выполняется по всем измерениям и ресурсам.
//    * Разрешенные - Булево - Выбирать только значения, длина кода которых больше или равна 4, без учета точек.
//    * Раздел - Строка - дополнительный отбор по разделу. Поиск выполняется только в данных, относящихся к указанному
//      в этом параметре разделу.
//    * Код - Строка - дополнительный отбор по коду. Поиск выполняется только в данных, код которых начинающихся с
//      указанного в этом параметре.
//    * Наименование - Строка - дополнительный отбор по наименованию. Поиск выполняется только в данных, наименование
//      которых содержит указанную в этом параметре строку.
//
Функция НовыйОтбор() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СтрокаПоиска", "");
	Результат.Вставить("Режим",        Неопределено);
	Результат.Вставить("Разрешенные",  Ложь);
	Результат.Вставить("Раздел",       "");
	Результат.Вставить("Код",          "");
	Результат.Вставить("Наименование", "");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "КлассификаторОКВЭД.НачальноеЗаполнениеКлассификатора";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='ОКВЭД. Начальное заполнение.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.8.1.12";
	Обработчик.Процедура           = "КлассификаторОКВЭД.НачальноеЗаполнениеКлассификатора";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='ОКВЭД. Начальное заполнение.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемИнтернетПоддержкиПользователей

// См. РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.
//
Процедура ПриДобавленииКлассификаторов(Классификаторы) Экспорт
	
	Описатель = РаботаСКлассификаторами.ОписаниеКлассификатора();
	Описатель.Наименование           = НСтр("ru = 'Общероссийский классификатор видов экономической деятельности (ОКВЭД)'");
	Описатель.Идентификатор          = ИдентификаторВСервисеКлассификаторов();
	Описатель.ОбновлятьАвтоматически = Истина;
	Описатель.ОбщиеДанные            = Истина;
	
	Классификаторы.Добавить(Описатель);
	
КонецПроцедуры

// См. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора.
//
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан) Экспорт
	
	Если Идентификатор <> ИдентификаторВСервисеКлассификаторов() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ДвоичныеДанныеXML = ПолучитьИзВременногоХранилища(Адрес);
		ДанныеXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML);
		РезультатЧтенияXML = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ДанныеXML);
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ДанныеОКВЭД.СоздатьНаборЗаписей(); // АПК:1444 Полная загрузка данных.
		НаборЗаписей.Загрузить(РезультатЧтенияXML.Данные);
		НаборЗаписей.Записать();
		
		Обработан = Истина;
		
	Исключение
		
		Обработан = Ложь;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Истина,
			РегистрыСведений.ДанныеОКВЭД);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет начальное заполнение пустого регистра или его обновление при переходе на новую версию.
//
Процедура НачальноеЗаполнениеКлассификатора() Экспорт
	
	РегистрыСведений.ДанныеОКВЭД.НачальноеЗаполнение();
	
КонецПроцедуры

// Возвращает идентификатор классификатора ОКВЭД в сервисе классификаторов.
//
// Возвращаемое значение:
//   Строка - идентификатор в сервисе классификаторов.
//
Функция ИдентификаторВСервисеКлассификаторов() Экспорт
	
	Возврат "OKVED2";
	
КонецФункции

// Возвращает версию классификатора, распространяемую с текущей версией библиотеки.
//
// Возвращаемое значение:
//   Число - Версия классификатора в макете.
//
Функция ВерсияКлассификатораВМакете() Экспорт
	
	Возврат 5;
	
КонецФункции

// Возвращает данные регистра по переданному списку кодов. Результат сортируется по Разделу, затем по Коду.
//
// Параметры:
//  Коды - Массив из Строка - список кодов, данные по которым необходимо получить.
//  ПоУбыванию - Булево - Истина, если нужно сортировать элементы по коду в порядке возрастания.
//
// Возвращаемое значение:
//  Массив из Структура - найденные элементы, либо пустой массив:
//   * Раздел - Строка - раздел классификатора, к которому относится найденное значение.
//   * Код - Строка - код по классификатору.
//   * Наименование - Строка - текстовое описание выбранного значения.
//   * Представление - Строка - включает код и наименование.
//
Функция ЗначенияПоКодам(Коды, ПоУбыванию = Ложь) Экспорт
	
	РезультатЗапроса = РегистрыСведений.ДанныеОКВЭД.ПоискПоКодам(Коды, ПоУбыванию);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ДобавитьВыборкуВРезультатПодбора(Результат, Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует иерархию кодов элементов ОКВЭД от исходного к наиболее общему.
//
// Параметры:
//  Код - Строка - код ОКВЭД.
//
// Возвращаемое значение:
//  Массив Из Строка - возможные коды ОКВЭД с учетом иерархии, от исходного к общему.
//
// Пример:
//  КодВИерархии("01.11.15") вернет массив ["01.11.15", "01.11.1", "01.11", "01.1", "01"]
//
Функция КодВИерархии(Знач Код) Экспорт
	
	Код = СокрЛП(Код);
	Результат = Новый Массив;
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Код, ".", "")) Тогда
		Возврат Результат; // Корректный код может содержать только цифры и точки
	КонецЕсли;
	
	ДлинаКода = СтрДлина(Код);
	Для Позиция = 0 По ДлинаКода Цикл
		
		ЧастьКода = Лев(Код, ДлинаКода - Позиция);
		Если СтрЗаканчиваетсяНа(ЧастьКода, ".") Тогда
			Продолжить; // На точку код оканчиваться не может
		КонецЕсли;
		
		Результат.Добавить(ЧастьКода);
		Если ДлинаКода - Позиция <= 2 Тогда
			Прервать; // Кодов из 1 символа не бывает
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Дополняет результат методов КлассификаторОКВЭД.ЗначенияПоКодам И КлассификаторОКВЭД.Подбор переданным значением.
//
// Параметры:
//  Результат - Массив Из Структура - результат метода, который нужно дополнить.
//  Выборка - Структура, ВыборкаИзРезультатаЗапроса - данные, которые необходимо добавить в результат:
//    * Раздел - Строка - раздел классификатора, к которому относится найденное значение.
//    * Код - Строка - код по классификатору.
//    * Наименование - Строка - текстовое описание выбранного значения.
//
Процедура ДобавитьВыборкуВРезультатПодбора(Результат, Выборка)
	
	ДанныеРегистра = Новый Структура;
	ДанныеРегистра.Вставить("Раздел",        Выборка.Раздел);
	ДанныеРегистра.Вставить("Код",           Выборка.Код);
	ДанныеРегистра.Вставить("Наименование",  Выборка.Наименование);
	ДанныеРегистра.Вставить("Представление", Выборка.Код + " " + Выборка.Наименование);
	
	Результат.Добавить(ДанныеРегистра);
	
КонецПроцедуры

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации.
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных для которого регистрируется ошибка.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(
		СообщениеОбОшибке,
		Ошибка = Истина,
		ОбъектМетаданных = Неопределено) Экспорт
	
	УровеньЖР = ?(Ошибка,
		УровеньЖурналаРегистрации.Ошибка,
		УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		ОбъектМетаданных,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ОКВЭД'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти