
#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список поставляемые драйверы в составе конфигурации.
// 
// Параметры:
//  ДрайвераОборудования - см. МенеджерОборудования.НоваяТаблицаПоставляемыхДрайверовОборудования
//
Процедура ОбновитьПоставляемыеДрайвера(ДрайвераОборудования) Экспорт
	
	// ++ Локализация
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "Драйвер1СЭквайринговыеТерминалыСбербанк";
	Драйвер.Наименование = НСтр("ru = '1С:Эквайринговые терминалы Сбербанк'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "SberAcquiringTerminal"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "Драйвер1СЭквайринговыеТерминалыСбербанк2х";
	Драйвер.Наименование = НСтр("ru = '1С:Эквайринговые терминалы Сбербанк 2.Х'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "SberAcquiringTerminal2"; 
	Драйвер.РекомендуемоеИспользование = Истина;
	                                            
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверАЗУРПлатежнаяСистема";
	Драйвер.Наименование = НСтр("ru = 'АЗУР:Платежная система'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "com_azurpos_payment_AzurPosPayment"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверАТОЛДрайверПлатежногоЯдраПэй";
	Драйвер.Наименование = НСтр("ru = 'АТОЛ:Драйвер платежного ядра АТОЛ Пэй'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "AtolPayAndroidDriver"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверUCSEFTPOSЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'UCS-AT:Эквайринговые терминалы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "UcsAT"; 
	Драйвер.РекомендуемоеИспользование = Истина;

	// ++ НеМобильноеПриложение
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверИНПАСЭквайринговыеТерминалыUNIPOS";
	Драйвер.Наименование = НСтр("ru = 'ИНПАС:Эквайринговые терминалы UNIPOS'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "a_inpasDC1c83"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверTRPOSЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'TRPOS:Эквайринговые терминалы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "a_trpos1c82"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверГАЗПРОМБАНКЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'ГАЗПРОМБАНК:Эквайринговые терминалы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "GPBEMVGateNativeAPI1C"; 
	Драйвер.РекомендуемоеИспользование = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверARCUS2ЭквайринговыеТерминалыIngenico";
	Драйвер.Наименование = НСтр("ru = 'ARCUS2:Эквайринговые терминалы Ingenico'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "IngenicoDriver1C";   
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверIngenicoЭквайринговыеТерминалыARCUS";
	Драйвер.Наименование = НСтр("ru = 'Ingenico:Драйвер эквайринговой системы ARCUS 2.1'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "IngenicoDriver1C21";          
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверIboxProПоддержкаMPosЭквайринга";
	Драйвер.Наименование = НСтр("ru = 'iboxPro:Поддержка mPos эквайринга'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "iboxPro"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверШтрихМПлатежныйТерминалYarus";
	Драйвер.Наименование = НСтр("ru = 'ШТРИХ-М:Платежный терминал Yarus'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "ShtrihPayMan1C";  
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверMPos2canЭквайринг";
	Драйвер.Наименование = НСтр("ru = 'mPos2can:Поддержка 2can эквайринга'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "mPos2can"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверSKAM1CЭквайринговыеСистемы";
	Драйвер.Наименование = НСтр("ru = 'SKAM-1C:Эквайринговые системы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "skam"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверSKAMUNIPOSЭквайринговыеСистемы";
	Драйвер.Наименование = НСтр("ru = 'SKAM-UNIPOS:Эквайринговое решение Софт-Кейс'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "skam2"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверИНПАСЭквайринговыеТерминалыНСПК";
	Драйвер.Наименование = НСтр("ru = 'ИНПАС:Эквайринговые терминалы UNIPOS(ФЗ-491)'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "a_inpasdc1c83n";   
	Драйвер.РекомендуемоеИспользование = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверПБФЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'ПБФ:Драйвер терминала Aisino'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "TerminalAisino";    
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверSkyPOSЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'Sky-POS:Эквайринговые терминалы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "CSkyposDriver";    
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверINVERSUMЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'INVERSUM:Эквайринговые терминалы (ФЗ-491)'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "InversumDriver1C21";               
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Драйвер.ИмяДрайвера  = "ДрайверTACTILIONЭквайринговыеТерминалы";
	Драйвер.Наименование = НСтр("ru = 'TACTILION:Эквайринговые терминалы'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "ASAPEcr";               
	// -- НеМобильноеПриложение    
	// -- Локализация                  
	
КонецПроцедуры

// Подготовить данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура -Параметры подключения
//  Команда - Строка - Команда
//  ПараметрыОперации - Структура -Параметры операции
// 
// Возвращаемое значение:
//  Неопределено.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	ПараметрыОперации.Вставить("Результат", Истина); 
	ПараметрыОперации.Вставить("ТекстОшибки");     
	
	Если Команда = "PayElectronicCertificate" Или Команда = "ReturnElectronicCertificate" Тогда
		Если ПустаяСтрока(ПараметрыОперации.ИдентификаторКорзины) Или ПараметрыОперации.СуммаЭлектронногоСертификата = 0 Тогда  
			ПараметрыОперации.ТекстОшибки = НСтр("ru='Неверные параметры в операции.'");
			ПараметрыОперации.Результат = Ложь; 
			Возврат ПараметрыОперации;
		КонецЕсли;
	Иначе
		Если НЕ (ПараметрыОперации.СуммаОперации > 0) Тогда   
			ПараметрыОперации.ТекстОшибки =  НСтр("ru='Не корректная сумма операции.'");
			ПараметрыОперации.Результат = Ложь; 
			Возврат ПараметрыОперации;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыОперации.РеквизитыКартыQR) И НЕ ПараметрыПодключения.ConsumerPresentedQR Тогда
		ПараметрыОперации.ТекстОшибки = НСтр("ru='Consumer-Presented QR не поддерживается драйвером.'");
		ПараметрыОперации.Результат = Ложь; 
		Возврат ПараметрыОперации;
	КонецЕсли;
	
	Если Команда = "AuthorizeSales" Или Команда = "AuthorizeRefund" Или Команда = "AuthorizeVoid" 
		Или Команда = "PayByPaymentCardWithCashWithdrawal" Или Команда = "PurchaseWithEnrollment"       
		Или Команда = "PayElectronicCertificate" Или Команда = "ReturnElectronicCertificate"
		Или Команда = "AuthorizePreSales" Или Команда = "AuthorizeCompletion" Или Команда = "AuthorizeVoidPreSales"  Тогда      
		ПараметрыОперации.Вставить("ВходяшиеПараметрыXML", ПолучитьXMLПакетДляОперации(ПараметрыОперации)); 
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
	Если Команда = "GetOperationByCards" Тогда
		Если РезультатВыполнения.Свойство("РезультатОперацииXML") Тогда
			Операции = ОперацииПоКартам(РезультатВыполнения.РезультатОперацииXML);     
			РезультатВыполнения.Вставить("Операции", Операции);
		КонецЕсли;
	Иначе                        
		
		Если РезультатВыполнения.Свойство("ИсходящиеПараметрыXML") И НЕ ПустаяСтрока(РезультатВыполнения.ИсходящиеПараметрыXML) Тогда
			ПараметрыОперации = ОбщегоНазначенияБПО.ПрочитатьКорневойЭлементXML(РезультатВыполнения.ИсходящиеПараметрыXML);   
			Если ПараметрыОперации.Свойство("AuthorizationCode") Тогда
				РезультатВыполнения.КодАвторизации = ПараметрыОперации.AuthorizationCode;
			КонецЕсли;
			Если ПараметрыОперации.Свойство("CardNumber") Тогда
				РезультатВыполнения.НомерКарты = ПараметрыОперации.CardNumber;
			КонецЕсли;                              
			Если ПараметрыОперации.Свойство("CardNumberHash") Тогда
				РезультатВыполнения.ХешНомерКарты = ПараметрыОперации.CardNumberHash;
			КонецЕсли;                              
			Если ПараметрыОперации.Свойство("RRNCode") Тогда
				РезультатВыполнения.СсылочныйНомер = ПараметрыОперации.RRNCode;
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("ReceiptNumber") Тогда
				РезультатВыполнения.НомерЧекаЭТ = ПараметрыОперации.ReceiptNumber;
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("AuthorizationType") Тогда
				РезультатВыполнения.ВидОплатыНаТерминалеКод = ПараметрыОперации.AuthorizationType;  
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("OperationStatus") Тогда
				СтатусОперации = ПараметрыОперации.OperationStatus;
				РезультатВыполнения.СтатусОперации = ?(ЗначениеЗаполнено(СтатусОперации), Число(СтатусОперации), 0);
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("ResultCode") Тогда
				КодЗавершения = ПараметрыОперации.ResultCode;
				РезультатВыполнения.КодЗавершения = ?(ЗначениеЗаполнено(КодЗавершения), Число(КодЗавершения), 0);       
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("PaymentSystemIdentifier") Тогда
				РезультатВыполнения.ИдентификаторПлатежнойСистемы = ПараметрыОперации.PaymentSystemIdentifier;
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("UUID") Тогда
				РезультатВыполнения.ИдентификаторБанковскойТранзакции = ПараметрыОперации.UUID;
			КонецЕсли;  
			Если ПараметрыОперации.Свойство("Date") Тогда
				РезультатВыполнения.ДатаВремя = ПараметрыОперации.Date;       
			КонецЕсли;  
			
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ТекстСлипЧека")
			И Не ПустаяСтрока(РезультатВыполнения.ТекстСлипЧека) Тогда 
			
			Если ОбщегоНазначенияБПО.ИспользуетсяЧекопечатающиеУстройства() Тогда
				МодульОборудованиеЧекопечатающиеУстройства = ОбщегоНазначенияБПО.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройства");
				Если ДанныеОперации.Свойство("ПолныйСлипЧек") И НЕ ДанныеОперации.ПолныйСлипЧек Тогда
					ТекстСлипЧека = ОборудованиеПлатежныеСистемыКлиентСервер.ТекстСлипЧекаПоУмолчанию(РезультатВыполнения);         
				Иначе
					ТекстСлипЧека = РезультатВыполнения.ТекстСлипЧека;
				КонецЕсли;
				ТестовыеЧеки = МодульОборудованиеЧекопечатающиеУстройства.ПолучитьXMLПакетДляТекста(ТекстСлипЧека, ПараметрыПодключения.РевизияИнтерфейса);
				РезультатВыполнения.Вставить("ТестовыеЧеки", ТестовыеЧеки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ВидОплатыНаТерминалеКод") Тогда
			РезультатВыполнения.ВидОплатыНаТерминале = ВидОплатыНаТерминалеПоКоду(Число(РезультатВыполнения.ВидОплатыНаТерминалеКод));
		КонецЕсли;  
		
	КонецЕсли;         
	
	ТипОперации = ТипПлатежнойОперацииПоКоманде(Команда);
	ЗаписатьПлатежнуюОперацию(ТипОперации, ДанныеОперации, РезультатВыполнения);
	
КонецПроцедуры

// Записать платежную операцию.
//
Процедура ЗаписатьПлатежнуюОперацию(ТипОперации, ДанныеОперации, РезультатВыполнения) Экспорт
	
	Если ТипОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗапроса = ?(ДанныеОперации.Свойство("ИдентификаторЗапроса"), ДанныеОперации.ИдентификаторЗапроса, Неопределено);
	Если ПустаяСтрока(ИдентификаторЗапроса) Или ИдентификаторЗапроса = "0" Тогда
		ИдентификаторЗапроса = Новый УникальныйИдентификатор();    
		ДанныеОперации.ИдентификаторЗапроса = Строка(ИдентификаторЗапроса);;
	КонецЕсли;
	
	ДокументОснование    = ?(ДанныеОперации.Свойство("ДокументОснование"), ДанныеОперации.ДокументОснование, Неопределено);
	СуммаОперации        = ?(ДанныеОперации.Свойство("СуммаОперации"), ДанныеОперации.СуммаОперации, Неопределено);
	ИдентификаторФискальнойОперации = ?(ДанныеОперации.Свойство("ИдентификаторФискальнойОперации"), ДанныеОперации.ИдентификаторФискальнойОперации, Неопределено);
	ДатаЗаписи = ОбщегоНазначенияБПО.ДатаСеанса();
	
	НаборЗаписей = РегистрыСведений.ПлатежныеОперации.СоздатьНаборЗаписей();
	
	Запись = НаборЗаписей.Добавить();
	Запись.ИдентификаторЗапроса            = Строка(ИдентификаторЗапроса);
	Запись.ДокументОснование               = ДокументОснование;
	Запись.ДатаЗапроса                     = ДатаЗаписи;
	Запись.ГодМесяц                        = Год(ДатаЗаписи)*100+Месяц(ДатаЗаписи);
	Запись.ТипОперации                     = ТипОперации;
	Запись.ИдентификаторФискальнойОперации = ИдентификаторФискальнойОперации;
	Запись.СуммаОперации                   = СуммаОперации;
	Запись.ОперацияВыполнена               = РезультатВыполнения.Результат;    
	Если ПустаяСтрока(ДанныеОперации.ИдентификаторКорзины) Тогда  
		Если РезультатВыполнения.Свойство("ИдентификаторОперации") Тогда
			Запись.ИдентификаторОперации = РезультатВыполнения.ИдентификаторОперации; 
		КонецЕсли;                 
	Иначе
		Запись.ИдентификаторОперации = ДанныеОперации.ИдентификаторКорзины;
	КонецЕсли;                 
	
	Если РезультатВыполнения.Результат Тогда         
		Если РезультатВыполнения.Свойство("ВидОплатыНаТерминале") Тогда
			Запись.ВидОплатыНаТерминале = РезультатВыполнения.ВидОплатыНаТерминале; 
		КонецЕсли;                 
		Запись.СсылочныйНомер = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, Неопределено);
		Запись.КодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, Неопределено); 
		Запись.ИдентификаторТерминала = ?(РезультатВыполнения.Свойство("ИдентификаторТерминала"), РезультатВыполнения.ИдентификаторТерминала, Неопределено);
		Запись.ИдентификаторБанкаЭквайера = ?(РезультатВыполнения.Свойство("ИдентификаторБанкаЭквайера"), РезультатВыполнения.ИдентификаторБанкаЭквайера, Неопределено);
		Запись.ИдентификаторПлатежнойСистемы = ?(РезультатВыполнения.Свойство("ИдентификаторПлатежнойСистемы"),РезультатВыполнения.ИдентификаторПлатежнойСистемы, Неопределено);   
		Запись.ИдентификаторБанковскойТранзакции = ?(РезультатВыполнения.Свойство("ИдентификаторБанковскойТранзакции"), РезультатВыполнения.ИдентификаторБанковскойТранзакции, Неопределено); 
		Запись.ДатаВремяТранзакции = ?(РезультатВыполнения.Свойство("ДатаВремя"), РезультатВыполнения.ДатаВремя, Неопределено);
	КонецЕсли;                 
	
	Сжатие = Новый СжатиеДанных(6);    
	
	Если ДанныеОперации.Свойство("ТекстЗапроса") Тогда
		ТекстЗапроса = ДанныеОперации.ТекстЗапроса;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеОперации, , "ЗаписатьОперацию_ПреобразованиеВJSON", ОборудованиеПлатежныеСистемы);
		ТекстЗапроса = ЗаписьJSON.Закрыть();
	КонецЕсли;
	Запись.ДанныеЗапроса = Новый ХранилищеЗначения(ТекстЗапроса, Сжатие);
	
	Если ДанныеОперации.Свойство("ТекстОтвета") Тогда   
		ТекстОтвета = ДанныеОперации.ТекстОтвета;
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, РезультатВыполнения, , "ЗаписатьОперацию_ПреобразованиеВJSON", ОборудованиеПлатежныеСистемы);
		ТекстОтвета = ЗаписьJSON.Закрыть();
	КонецЕсли;
	Запись.ДанныеОтвета  = Новый ХранилищеЗначения(ТекстОтвета,  Сжатие);
	
	НаборЗаписей.Записать(Ложь); 
	
КонецПроцедуры

// Получает данные платежных операций.
//
// Параметры:             
//  ИдентификаторЗапроса - Строка - Идентификатор запроса
//  ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО - документ основание
// 
// Возвращаемое значение:
//  Булево
//
Функция ДанныеПлатежныхОпераций(ИдентификаторЗапроса = Неопределено, ДокументОснование = Неопределено, ДанныеЗапроса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);   
	
	ПлатежныеОперации = Новый Массив();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеОперации.ДокументОснование КАК ДокументОснование,
		|	ПлатежныеОперации.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ПлатежныеОперации.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
		|	ПлатежныеОперации.ИдентификаторФискальнойОперации КАК ИдентификаторФискальнойОперации,
		|	ПлатежныеОперации.ДатаЗапроса КАК ДатаЗапроса,
		|	ПлатежныеОперации.ТипОперации КАК ТипОперации,
		|	ПлатежныеОперации.СуммаОперации КАК СуммаОперации,
		|	ПлатежныеОперации.ОперацияВыполнена КАК ОперацияВыполнена,    
		|	ПлатежныеОперации.СсылочныйНомер КАК СсылочныйНомер,  
		|	ПлатежныеОперации.КодАвторизации КАК КодАвторизации,    
		|	ПлатежныеОперации.ВидОплатыНаТерминале КАК ВидОплатыНаТерминале,    
		|	ПлатежныеОперации.ИдентификаторТерминала КАК ИдентификаторТерминала, 
		|	ПлатежныеОперации.ИдентификаторБанкаЭквайера КАК ИдентификаторБанкаЭквайера, 
		|	ПлатежныеОперации.ИдентификаторПлатежнойСистемы КАК ИдентификаторПлатежнойСистемы,  
		|	ПлатежныеОперации.ИдентификаторБанковскойТранзакции КАК ИдентификаторБанковскойТранзакции,     
		|	ПлатежныеОперации.ДатаВремяТранзакции КАК ДатаВремяТранзакции,
		|	ПлатежныеОперации.ДанныеЗапроса КАК ДанныеЗапроса,
		|	ПлатежныеОперации.ДанныеОтвета КАК ДанныеОтвета      
		|ИЗ
		|	РегистрСведений.ПлатежныеОперации КАК ПлатежныеОперации
		|ГДЕ
		|	&Условие";
	
	Если ИдентификаторЗапроса <> Неопределено Тогда
		ТекстУсловия = "ПлатежныеОперации.ИдентификаторЗапроса = &ИдентификаторЗапроса";
		Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);  
	ИначеЕсли ДокументОснование <> Неопределено Тогда
		ТекстУсловия = "ПлатежныеОперации.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);  
	Иначе
		ТекстУсловия = "";         
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условие", ТекстУсловия);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл   
		
		ПлатежнаяОперация = Новый Структура();
		ПлатежнаяОперация.Вставить("ДокументОснование");
		ПлатежнаяОперация.Вставить("ИдентификаторОперации");
		ПлатежнаяОперация.Вставить("ИдентификаторЗапроса");
		ПлатежнаяОперация.Вставить("ИдентификаторФискальнойОперации");
		ПлатежнаяОперация.Вставить("ДатаЗапроса");
		ПлатежнаяОперация.Вставить("ТипОперации");
		ПлатежнаяОперация.Вставить("СуммаОперации");
		ПлатежнаяОперация.Вставить("ОперацияВыполнена");  
		ПлатежнаяОперация.Вставить("СсылочныйНомер");  
		ПлатежнаяОперация.Вставить("КодАвторизации");    
		ПлатежнаяОперация.Вставить("ВидОплатыНаТерминале");    
		ПлатежнаяОперация.Вставить("ИдентификаторТерминала"); 
		ПлатежнаяОперация.Вставить("ИдентификаторБанкаЭквайера"); 
		ПлатежнаяОперация.Вставить("ИдентификаторПлатежнойСистемы");  
		ПлатежнаяОперация.Вставить("ИдентификаторБанковскойТранзакции");     
		ПлатежнаяОперация.Вставить("ДатаВремяТранзакции");
		ПлатежнаяОперация.Вставить("ДанныеЗапроса");
		ПлатежнаяОперация.Вставить("ДанныеОтвета");
		ЗаполнитьЗначенияСвойств(ПлатежнаяОперация, Выборка);
		
		Если ДанныеЗапроса Тогда
			ДанныеЗапросаХранилище = Выборка.ДанныеЗапроса; // ХранилищеЗначения
			Если ТипЗнч(ДанныеЗапросаХранилище) = Тип("ХранилищеЗначения") Тогда
				ПлатежнаяОперация.Вставить("ДанныеЗапроса", ДанныеЗапросаХранилище.Получить());
			КонецЕсли;
			ДанныеОтветаХранилище = Выборка.ДанныеОтвета; // ХранилищеЗначения
			Если ТипЗнч(ДанныеОтветаХранилище) = Тип("ХранилищеЗначения") Тогда
				ПлатежнаяОперация.Вставить("ДанныеОтвета", ДанныеОтветаХранилище.Получить());
			КонецЕсли;
		КонецЕсли;
		
		ПлатежныеОперации.Добавить(ПлатежнаяОперация);
	КонецЦикла;
	
	Возврат ПлатежныеОперации;
	
КонецФункции

Функция ЗаписатьОперацию_ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт  
	
	Возврат Строка(Значение);   
	
КонецФункции

// Проверяет возможность отмены оплаты по документу основания.
//
// Параметры:
//  ДокументОснование - ОпределяемыйТип.ОснованиеФискальнойОперацииБПО - документ основание
// 
// Возвращаемое значение:
//  Булево
//
Функция ВозможнаОтменаОплатыПоЧеку(ДокументОснование) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Ложь
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежныеОперации.ИдентификаторОперации КАК ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПлатежныеОперации КАК ПлатежныеОперации
	|ГДЕ
	|	ПлатежныеОперации.ДокументОснование = &ДокументОснование
	|	И ПлатежныеОперации.ТипОперации = &ТипОперации
	|	И ПлатежныеОперации.ОперацияВыполнена = &ОперацияВыполнена"; 
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТипОперации", Перечисления.ТипыПлатежныхОпераций.ОтменаПлатежаПоПлатежнойКарте);
	Запрос.УстановитьПараметр("ОперацияВыполнена", Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоРезультатуЗапроса = РезультатЗапроса.Выбрать();
	Если Не ВыборкаПоРезультатуЗапроса.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипПлатежнойОперацииПоКоманде(Команда)
	
	ТипыОпераций = Новый Соответствие();
	
	ТипыОпераций.Вставить("AuthorizeSales", Перечисления.ТипыПлатежныхОпераций.ОплатаПлатежнойКартой);
	ТипыОпераций.Вставить("AuthorizeRefund", Перечисления.ТипыПлатежныхОпераций.ВозвратПоПлатежнойКарте);
	ТипыОпераций.Вставить("AuthorizeVoid", Перечисления.ТипыПлатежныхОпераций.ОтменаПлатежаПоПлатежнойКарте);
	ТипыОпераций.Вставить("PayByPaymentCardWithCashWithdrawal", Перечисления.ТипыПлатежныхОпераций.ОплатаПлатежнойКартойСВыдачейНаличных);
	ТипыОпераций.Вставить("PurchaseWithEnrollment", Перечисления.ТипыПлатежныхОпераций.ПокупкаСЗачислением);
	ТипыОпераций.Вставить("PayElectronicCertificate", Перечисления.ТипыПлатежныхОпераций.ОплатаЭС);
	ТипыОпераций.Вставить("ReturnElectronicCertificate", Перечисления.ТипыПлатежныхОпераций.ВозвратЭС);
	ТипыОпераций.Вставить("EmergencyVoid", Перечисления.ТипыПлатежныхОпераций.АварийнаяОтмена);
	
	Возврат ТипыОпераций.Получить(Команда);
	
КонецФункции

// ++ НеМобильноеПриложение

// Возвращает период хранения платежных операций в регистре сведений
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций
//
Функция ПериодХраненияИсторииПлатежныхОпераций() Экспорт
	
	ПериодХранения = Константы.СрокХраненияПлатежныхОпераций.Получить();
	Возврат ПериодХранения;
	
КонецФункции

// Установить значение констант сроков хранения операций в регистрах сведений
//
Процедура УстановитьСрокХраненияОпераций() Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Константы.СрокХраненияПлатежныхОпераций.Получить()) Тогда
		Константы.СрокХраненияПлатежныхОпераций.Установить(Перечисления.ПериодХраненияИсторииОпераций.ВсеВремя);
	КонецЕсли;
	
КонецПроцедуры

#Область РегламентныеЗадания

// Вызывается из процедуры РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
// для установки доступности регламентного задания, определяет зависимость от функциональных опций.
// 
// Параметры:
//  Настройки - ТаблицаЗначений
//  ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки, ФункциональнаяОпция = Неопределено) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчисткаИсторииПлатежныхОпераций;
	Настройка.ФункциональнаяОпция = ФункциональнаяОпция;
	
КонецПроцедуры

#КонецОбласти

// -- НеМобильноеПриложение

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить операции по картам.
//
// Параметры:
//  ДанныеXML - Строка
//
// Возвращаемое значение:
//  Массив из см. ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыПроведеннойЭквайринговойОперации
// 
Функция ОперацииПоКартам(ДанныеXML) 
	
	Результат = Новый Массив();
	
	Если Не ПустаяСтрока(ДанныеXML) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому(); 
		
		Если ЧтениеXML.Имя = "Table" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Record" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					Операция = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыПроведеннойЭквайринговойОперации();    
					Операция.ТипТранзакции = ЧтениеXML.ЗначениеАтрибута("TypeOperation");
					Операция.НомерМерчанта = ЧтениеXML.ЗначениеАтрибута("MerchantNumber");
					Операция.НомерКарты = ЧтениеXML.ЗначениеАтрибута("CardNumber");
					Если ЧтениеXML.ЗначениеАтрибута("CardNumberHash") <> Неопределено Тогда
						Операция.ХешНомерКарты = ЧтениеXML.ЗначениеАтрибута("CardNumberHash");      
					КонецЕсли;                            
					Если ЧтениеXML.ЗначениеАтрибута("Amount") <> Неопределено Тогда
						Операция.СуммаОперации = Число(ЧтениеXML.ЗначениеАтрибута("Amount"));        
					КонецЕсли; 
					Если ЧтениеXML.ЗначениеАтрибута("AmountCash") <> Неопределено Тогда
						Операция.СуммаНаличных = Число(ЧтениеXML.ЗначениеАтрибута("AmountCash"));
					КонецЕсли; 
					Если ЧтениеXML.ЗначениеАтрибута("ElectronicCertificateAmount") <> Неопределено Тогда
						Операция.СуммаЭлектронногоСертификата = Число(ЧтениеXML.ЗначениеАтрибута("ElectronicCertificateAmount"));
					КонецЕсли; 
					Если ЧтениеXML.ЗначениеАтрибута("ReturnElectronicCertificate") <> Неопределено Тогда
						Операция.СуммаСобственныхСредств = Число(ЧтениеXML.ЗначениеАтрибута("ReturnElectronicCertificate"));
					КонецЕсли;
					Операция.СсылочныйНомер = ЧтениеXML.ЗначениеАтрибута("RRNCode");
					Операция.КодАвторизации= ЧтениеXML.ЗначениеАтрибута("AuthorizationCode");
					Результат.Добавить(Операция);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вид оплаты на терминале по коду.
// 
// Параметры:    
//   ВидОплатыКод - Число - Код вида оплаты.
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидОплатыНаТерминале - Вид оплаты на терминале
//
Функция ВидОплатыНаТерминалеПоКоду(ВидОплатыКод) Экспорт
	
	Если ВидОплатыКод = 1 Тогда
		Результат = Перечисления.ВидОплатыНаТерминале.СБПQR
	ИначеЕсли ВидОплатыКод = 2 Тогда
		Результат = Перечисления.ВидОплатыНаТерминале.ПлатиQR
	Иначе
		Результат = Перечисления.ВидОплатыНаТерминале.Карта;
	КонецЕсли;    
	
	Возврат Результат;
	
КонецФункции      

// Код вида оплаты на терминале.
// 
// Параметры:    
//   ВидОплаты -  ПеречислениеСсылка.ВидОплатыНаТерминале - Вид оплаты на терминале
// Возвращаемое значение:
//   Число - Код вида оплаты   
//
Функция КодВидаОплатыНаТерминале(ВидОплаты) Экспорт
	
	Если ВидОплаты = Перечисления.ВидОплатыНаТерминале.СБПQR Тогда
		Результат = 1
	ИначеЕсли ВидОплаты = Перечисления.ВидОплатыНаТерминале.ПлатиQR тогда     
		Результат = 2
	Иначе                                                 
		Результат = 0
	КонецЕсли;    
	
	Возврат Результат;
	
КонецФункции

// Получить XMLПакет для операции.
// 
// Параметры:
//  ПараметрыОперации - Структура - Параметры
// 
// Возвращаемое значение:
//  Строка - Получить XMLПакет для операции
Функция ПолучитьXMLПакетДляОперации(ПараметрыОперации) Экспорт

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("OperationParameters");     
	
	НомерМерчанта  = ?(ПараметрыОперации.НомерМерчанта <> Неопределено, ПараметрыОперации.НомерМерчанта, 0);

	ЗаписьXML.ЗаписатьАтрибут("MerchantNumber", XMLСтрока(НомерМерчанта)); 
	Если Не ПустаяСтрока(ПараметрыОперации.РеквизитыКартыQR) Тогда
		ЗаписьXML.ЗаписатьАтрибут("ConsumerPresentedQR",  XMLСтрока(ПараметрыОперации.РеквизитыКартыQR)); 
	КонецЕсли;
	
	ИспользоватьБиометрию = ?(ПараметрыОперации.ИспользоватьБиометрию <> Неопределено, ПараметрыОперации.ИспользоватьБиометрию, Ложь);
	ЗаписьXML.ЗаписатьАтрибут("UseBiometrics", ?(ИспользоватьБиометрию, "1", "0")); 
	
	Если Не ЗначениеЗаполнено(ПараметрыОперации.ВидОплатыНаТерминале) Тогда
		ВидОплатыНаТерминалКод = ПараметрыОперации.ВидОплатыНаТерминалеКод;
	Иначе
		ВидОплатыНаТерминалКод = КодВидаОплатыНаТерминале(ПараметрыОперации.ВидОплатыНаТерминале);
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("AuthorizationType", XMLСтрока(ВидОплатыНаТерминалКод)); 
	
	СуммаОперации  = ?(ПараметрыОперации.СуммаОперации <> Неопределено, ПараметрыОперации.СуммаОперации, 0);
	ЗаписьXML.ЗаписатьАтрибут("Amount", XMLСтрока(СуммаОперации));
	
	СуммаНаличных  = ?(ПараметрыОперации.СуммаНаличных <> Неопределено, ПараметрыОперации.СуммаНаличных, 0);
	ЗаписьXML.ЗаписатьАтрибут("AmountCash", XMLСтрока(СуммаНаличных));
	
	СуммаОригинальнойОперации = ?(ПараметрыОперации.СуммаОригинальнойОперации <> Неопределено, ПараметрыОперации.СуммаОригинальнойОперации, 0);
	ЗаписьXML.ЗаписатьАтрибут("AmountOriginalTransaction", XMLСтрока(СуммаОригинальнойОперации));
	
	НомерКарты = ?(ПараметрыОперации.НомерКарты <> Неопределено, ПараметрыОперации.НомерКарты, "");
	Если Не ПустаяСтрока(НомерКарты) Тогда
		ЗаписьXML.ЗаписатьАтрибут("CardNumber", XMLСтрока(НомерКарты));
	КонецЕсли;         
	
	ХешНомерКарты = ?(ПараметрыОперации.ХешНомерКарты <> Неопределено, ПараметрыОперации.ХешНомерКарты, "");
	Если Не ПустаяСтрока(ХешНомерКарты) Тогда
		ЗаписьXML.ЗаписатьАтрибут("CardNumberHash", XMLСтрока(ХешНомерКарты));
	КонецЕсли;         
	
	ИдентификаторКорзины = ?(ПараметрыОперации.ИдентификаторКорзины <> Неопределено, ПараметрыОперации.ИдентификаторКорзины, "");   
	Если Не ПустаяСтрока(ИдентификаторКорзины) Тогда
		ЗаписьXML.ЗаписатьАтрибут("BasketID", XMLСтрока(ИдентификаторКорзины));
	КонецЕсли;         
	
	СуммаЭлектронногоСертификата = ?(ПараметрыОперации.СуммаЭлектронногоСертификата <> Неопределено, ПараметрыОперации.СуммаЭлектронногоСертификата, 0);
	ЗаписьXML.ЗаписатьАтрибут("ElectronicCertificateAmount", XMLСтрока(СуммаЭлектронногоСертификата));

	СуммаСобственныхСредств = ?(ПараметрыОперации.СуммаСобственныхСредств <> Неопределено, ПараметрыОперации.СуммаСобственныхСредств, 0);
	ЗаписьXML.ЗаписатьАтрибут("OwnFundsAmount", XMLСтрока(СуммаСобственныхСредств));
	
	НомерЧека = ?(ПараметрыОперации.НомерЧека <> Неопределено, ПараметрыОперации.НомерЧека, "");
	Если Не ПустаяСтрока(НомерЧека) Тогда
		ЗаписьXML.ЗаписатьАтрибут("ReceiptNumber", XMLСтрока(НомерЧека));
	КонецЕсли;
	
	СсылочныйНомер = ?(ПараметрыОперации.СсылочныйНомер <> Неопределено, ПараметрыОперации.СсылочныйНомер, "");    
	Если Не ПустаяСтрока(СсылочныйНомер) Тогда
		ЗаписьXML.ЗаписатьАтрибут("RRNCode", XMLСтрока(СсылочныйНомер));
	КонецЕсли;   
	
	КодАвторизации = ?(ПараметрыОперации.КодАвторизации <> Неопределено, ПараметрыОперации.КодАвторизации, "");
	Если Не ПустаяСтрока(КодАвторизации) Тогда
		ЗаписьXML.ЗаписатьАтрибут("AuthorizationCode", XMLСтрока(КодАвторизации));
	КонецЕсли;                            
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

 #КонецОбласти