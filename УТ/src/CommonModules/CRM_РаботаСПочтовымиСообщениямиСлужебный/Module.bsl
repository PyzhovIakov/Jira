
#Область СлужебныеПроцедурыИФункции

Функция ОбработатьПисьмо(Письмо, ПараметрыПисьма) Экспорт
	
	Если ПараметрыПисьма.Свойство("ИмяОтправителя") Тогда
		Письмо.ИмяОтправителя = ПараметрыПисьма.ИмяОтправителя;
	КонецЕсли;
	
	Письмо.Отправитель.ОтображаемоеИмя = Письмо.ИмяОтправителя;
	Письмо.Отправитель.Адрес = CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(Письмо.Отправитель.Адрес);
	
	Для Каждого Получатель Из Письмо.Получатели Цикл
		Получатель.Адрес = CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(Получатель.Адрес);
	КонецЦикла;
	
	Для Каждого Получатель Из Письмо.Копии Цикл
		Получатель.Адрес = CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(Получатель.Адрес);
	КонецЦикла;
	
	Для Каждого Получатель Из Письмо.СлепыеКопии Цикл
		Получатель.Адрес = CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(Получатель.Адрес);
	КонецЦикла;
	
	Для Каждого Получатель Из Письмо.ОбратныйАдрес Цикл
		Получатель.Адрес = CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(Получатель.Адрес);
	КонецЦикла;
	
	Возврат Письмо;
	
КонецФункции

// См. РаботаСПочтовымиСообщениями.ОтправитьПисьмо.
Функция ОтправитьПисьмо(УчетнаяЗапись, Письмо) Экспорт
	
	Письма = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Письмо);
	Возврат ОтправитьПисьма(УчетнаяЗапись, Письма)[Письмо];
	
КонецФункции

// См. РаботаСПочтовымиСообщениями.ОтправитьПисьма.
Функция ОтправитьПисьма(УчетнаяЗапись, Письма, ТекстИсключения = Неопределено) Экспорт
	
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,
		|АдресЭлектроннойПочты,ОтправлятьСкрытыеКопииПисемНаЭтотАдрес,
		|ИспользоватьДляПолучения, ИспользоватьДляОтправки");
	
	Если РеквизитыОтправителя.ИспользоватьДляОтправки = Ложь Тогда
		ТекстОшибки = НСтр("ru = 'Учетная запись почты не используется для отправки писем'");
		РезультатыОтправкиПисем = Новый Соответствие;
		Для Каждого Письмо Из Письма Цикл
			РезультатОтправкиПисьма = Новый Структура;
			РезультатОтправкиПисьма.Вставить("ТекстОшибки", ТекстОшибки);
			РезультатыОтправкиПисем.Вставить(Письмо, РезультатОтправкиПисьма);
		КонецЦикла;
		Возврат РезультатыОтправкиПисем;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	// +CRM
	//Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	// -CRM
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	
	ПротоколПолученияПочты = ПротоколИнтернетПочты.POP3;
	Если ИспользоватьIMAPПриОтправкеПисем(Профиль) Тогда
		ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль, ПротоколПолученияПочты);
		Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP Тогда
			// +CRM
			//ОпределитьПапкуОтправленные(Соединение);
			CRM_УправлениеЭлектроннойПочтой.ОпределитьПапкуОтправленные(УчетнаяЗапись, Соединение);
			// +CRM
		КонецЕсли;
	Исключение
		Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP И Не РеквизитыОтправителя.ИспользоватьДляПолучения Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу IMAP. Проверьте настройки учетной записи.'",
				 ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка,
				 Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты,
				УчетнаяЗапись, ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПротоколПолученияПочты = ПротоколИнтернетПочты.POP3;
			Соединение.Подключиться(Профиль, ПротоколПолученияПочты);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	РезультатыОтправкиПисем = Новый Соответствие;
	
	ОбрабатыватьТексты = ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	
	// +CRM
	РеквизитыОтправителя.АдресЭлектроннойПочты =
		CRM_УправлениеЭлектроннойПочтой.КодироватьАдресВPunycode(РеквизитыОтправителя.АдресЭлектроннойПочты);
	// -CRM
	
	Попытка
		Для Каждого Письмо Из Письма Цикл
			// +CRM
			Если НЕ ЗначениеЗаполнено(Письмо.ИмяОтправителя) Тогда
				Письмо.ИмяОтправителя = РеквизитыОтправителя.ИмяПользователя;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Письмо.Отправитель.ОтображаемоеИмя) Тогда
				Письмо.Отправитель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
			КонецЕсли;
			// -CRM
			Письмо.Отправитель.Адрес = РеквизитыОтправителя.АдресЭлектроннойПочты;
			
			Если РеквизитыОтправителя.ОтправлятьСкрытыеКопииПисемНаЭтотАдрес Тогда
				Получатель = Письмо.СлепыеКопии.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
				Получатель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
			КонецЕсли;
			
			РезультатОтправкиПисьма = Новый Структура;
			РезультатОтправкиПисьма.Вставить("ОшибочныеПолучатели", Новый Соответствие);
			РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаSMTP", "");
			РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаIMAP", "");
			
			Если ПротоколПолученияПочты = ПротоколИнтернетПочты.IMAP Тогда
				Соединение.Послать(Письмо, ОбрабатыватьТексты, ПротоколИнтернетПочты.IMAP);
				РезультатОтправкиПисьма.Вставить("ИдентификаторПисьмаIMAP", Письмо.ИдентификаторСообщения);
				
				ФлагиПисьма = Новый ФлагиИнтернетПочтовогоСообщения;
				ФлагиПисьма.Прочитанное = Истина;
				ФлагиПисем = Новый Соответствие;
				ФлагиПисем.Вставить(Письмо.ИдентификаторСообщения, ФлагиПисьма);
				Соединение.УстановитьФлагиСообщений(ФлагиПисем);
			КонецЕсли;
			
			ОшибочныеПолучатели = Новый Соответствие;
			Попытка
				ОшибочныеПолучатели = Соединение.Послать(Письмо, ОбрабатыватьТексты, ПротоколИнтернетПочты.SMTP);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
				Если ПолучательПисьмаОтклоненСервером(ТекстОшибки) Тогда
					Для Каждого Получатель Из Письмо.Получатели Цикл
						ОшибочныеПолучатели.Вставить(Получатель.Адрес, ТекстОшибки);
					КонецЦикла;
				Иначе
					// +CRM Обработка ошибки отправки письма (Пример: отправка письма c вложением exe файла, через gmail) 
					// ВызватьИсключение;
					Если ЗначениеЗаполнено(Письмо.ИдентификаторСообщения) 
						И (Не РезультатОтправкиПисьма.Свойство("ИдентификаторПисьмаIMAP")
							Или РезультатОтправкиПисьма.ИдентификаторПисьмаIMAP <> Письмо.ИдентификаторСообщения) Тогда
						РезультатОтправкиПисьма.Вставить("ТекстОшибки", ТекстОшибки);
					Иначе
						ВызватьИсключение;
					КонецЕсли;
					// -CRM
				КонецЕсли;
			КонецПопытки;
			
			РезультатОтправкиПисьма.ОшибочныеПолучатели = ОшибочныеПолучатели;
			РезультатОтправкиПисьма.ИдентификаторПисьмаSMTP = Письмо.ИдентификаторСообщения;
			
			Если ОшибочныеПолучатели.Количество() > 0 Тогда
				ТекстыОшибок = Новый Массив;
				Для Каждого ОшибочныйПолучатель Из ОшибочныеПолучатели Цикл
					Получатель = ОшибочныйПолучатель.Ключ;
					ТекстОшибки = ОшибочныйПолучатель.Значение;
					ТекстыОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1: %2'"), Получатель, ТекстОшибки));
				КонецЦикла;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка письма следующим получателям не выполнена:
					|%1'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрСоединить(ТекстыОшибок, Символы.ПС));
				ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка, , УчетнаяЗапись, ТекстОшибки);
			КонецЕсли;
			
			РезультатыОтправкиПисем.Вставить(Письмо, РезультатОтправкиПисьма);
		КонецЦикла;
	Исключение
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			Соединение.Отключиться();
		Исключение // АПК:280
			// Обработка и журналирование исключения не требуется, т.к. 
			// в вызывающий код передается исходное исключение, которое будет там обработано.
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
		
		ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаПочты(), УровеньЖурналаРегистрации.Ошибка, ,
				УчетнаяЗапись, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстИсключения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если РезультатыОтправкиПисем.Количество() = 0 Тогда
			ВызватьИсключение;
		Иначе
			Возврат РезультатыОтправкиПисем;
		КонецЕсли;
	КонецПопытки;
	
	Соединение.Отключиться();
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат РезультатыОтправкиПисем;
	
КонецФункции

#Область Типовые

Функция ПолучитьHTMLФорматированногоДокументаДляПисьма(ФорматированныйДокумент) Экспорт
	
	// Выгрузка форматированного документа в HTML текст и картинки.
	ТекстHTML = "";
	Картинки = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
	
	// Конвертация HTML текста в ДокументHTML.
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	// Замена имен картинок в документе HTML на идентификаторы.
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если СтрНачинаетсяС(АтрибутИсточникКартинки.ТекстовоеСодержимое, "data:") Тогда
			Продолжить;
		КонецЕсли;
		Картинка.УстановитьАтрибут("alt", АтрибутИсточникКартинки.ТекстовоеСодержимое);
		АтрибутИсточникКартинки.ТекстовоеСодержимое = "cid:" + АтрибутИсточникКартинки.ТекстовоеСодержимое;
	КонецЦикла;
	
	// Конвертация ДокументHTML обратно в текст HTML.
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	ТекстHTML = ЗаписьHTML.Закрыть();
	
	// Подготовка результата.
	Результат = Новый Структура;
	Результат.Вставить("ТекстHTML", ТекстHTML);
	Результат.Вставить("Картинки", Картинки);
	
	Возврат Результат;
	
КонецФункции

Функция ИспользоватьIMAPПриОтправкеПисем(Профиль)
	
	Возврат Не ПочтовыйСерверХранитПисьмаОтправленныеПоSMTP(Профиль)
		И ЗначениеЗаполнено(Профиль.АдресСервераIMAP)
		И ЗначениеЗаполнено(Профиль.ПортIMAP)
		И ЗначениеЗаполнено(Профиль.ПользовательIMAP)
		И Профиль.ПарольIMAP <> "";
	
КонецФункции

Функция ПочтовыйСерверХранитПисьмаОтправленныеПоSMTP(ИнтернетПочтовыйПрофиль)
	
	Возврат НРег(ИнтернетПочтовыйПрофиль.АдресСервераSMTP) = "smtp.gmail.com"
		Или СтрЗаканчиваетсяНа(НРег(ИнтернетПочтовыйПрофиль.АдресСервераSMTP), ".outlook.com") > 0;
	
КонецФункции

Функция ИмяСобытияОтправкаПочты()
	
	Возврат НСтр("ru = 'Работа с почтовыми сообщениями.Отправка почты'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция ПолучательПисьмаОтклоненСервером(Знач ТекстОшибки)
	
	ТекстОшибки = НРег(ТекстОшибки);
	Возврат СтрНайти(ТекстОшибки, "invalid mailbox") > 0
		Или СтрНайти(ТекстОшибки, "user not found") > 0;
	
КонецФункции

#КонецОбласти

#КонецОбласти
