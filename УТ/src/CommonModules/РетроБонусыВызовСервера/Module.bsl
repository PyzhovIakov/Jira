//@strict-types

#Область ПрограммныйИнтерфейс

// Заголовок документа.
// 
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.УсловияРетроБонусовПоставщика, ДокументСсылка.НачислениеРетроБонусовКлиента, ДокументСсылка.НачислениеРетроБонусовПоставщика, ДокументСсылка.СписаниеРетроБонусовКлиента, ДокументСсылка.СписаниеРетроБонусовПоставщика - Обрабатываемый документ
//  НомерДокумента - Строка - Номер документа
//  ДатаДокумента - Дата - Дата документа
//  Исправление - Булево, Неопределено - Признак исправительного документа
// 
// Возвращаемое значение:
//  Строка - представление документа
//
Функция ЗаголовокДокумента(Знач Документ, Знач НомерДокумента, Знач ДатаДокумента, Знач Исправление = Неопределено) Экспорт
	
	Возврат РетроБонусыСервер.ЗаголовокДокумента(Документ, НомерДокумента, ДатаДокумента, Исправление);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.УсловияРетроБонусовПоставщика -
// 
// Возвращаемое значение:
//	- Неопределено -
//	- см. ДлительныеОперации.ВыполнитьПроцедуру
//
Функция ДлительнаяОперацияФиксацииСегментов(Документ) Экспорт
	
	ШаблонКлюча = "ФиксацияСоставаСегментов_%1";
	ИдентификаторДокумента = Строка(Документ.УникальныйИдентификатор());
	Ключ = СтрШаблон(ШаблонКлюча, ИдентификаторДокумента);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	ФоновыеЗаданияПоДокументу = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	ДлительнаяОперация = Неопределено;
	
	Если ФоновыеЗаданияПоДокументу.Количество() = 0 Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполнения.КлючФоновогоЗадания = Ключ;
		ПараметрыВыполнения.УточнениеОшибки = НСтр("ru = 'Не удалось зафиксировать состав сегментов:'");
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
			
			ИмяПроцедуры = "РетроБонусыСервер.ЗафиксироватьСоставСегментовУРБКлиентов";
			
		Иначе
			
			ИмяПроцедуры = "РетроБонусыСервер.ЗафиксироватьСоставСегментовУРБПоставщиков";
			
		КонецЕсли;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Документ);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументСсылка.УсловияРетроБонусовПоставщика -
// 
// Возвращаемое значение:
//	- Неопределено -
//	- см. ДлительныеОперации.ВыполнитьПроцедуру 
//
Функция ДлительнаяОперацияОтменыФиксацииСегментов(Документ) Экспорт
	
	ШаблонКлюча = "ФиксацияСоставаСегментов_%1";
	ИдентификаторДокумента = Строка(Документ.УникальныйИдентификатор());
	Ключ = СтрШаблон(ШаблонКлюча, ИдентификаторДокумента);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	ФоновыеЗаданияПоДокументу = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	ДлительнаяОперация = Неопределено;
	
	Если ФоновыеЗаданияПоДокументу.Количество() = 0 Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполнения.КлючФоновогоЗадания = Ключ;
		ПараметрыВыполнения.УточнениеОшибки = НСтр("ru = 'Не удалось отменить фиксацию состава сегментов:'");
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
			
			ИмяПроцедуры = "РетроБонусыСервер.ОтменитьФиксациюСоставаСегментовУРБКлиентов";
			
		Иначе
			
			ИмяПроцедуры = "РетроБонусыСервер.ОтменитьФиксациюСоставаСегментовУРБПоставщиков";
			
		КонецЕсли;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Документ);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Параметры:
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ИдентификаторФормы - см. ДлительныеОперации.ПараметрыВыполненияФункции.ИдентификаторФормы
// 
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию 
//
Функция ДлительнаяОперацияПолученияРетроБонусовПоДокументамПродажи(ПараметрыРасчета, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.УточнениеОшибки = НСтр("ru = 'Не удалось получить данные ретро-бонусов по документам продажи:'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Отчеты.РасчетРетроБонусовКлиентов.РетроБонусыЗаПериодПоДокументамПродажи",
		ПараметрыРасчета);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Параметры:
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовПоставщиков.ПараметрыРасчетаРетроБонусов
//  ИдентификаторФормы - см. ДлительныеОперации.ПараметрыВыполненияФункции.ИдентификаторФормы
// 
// Возвращаемое значение:
//	см. ДлительныеОперации.ВыполнитьФункцию 
//
Функция ДлительнаяОперацияПолученияРетроБонусовПоДокументамПриобретения(ПараметрыРасчета, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.УточнениеОшибки = НСтр("ru = 'Не удалось получить данные ретро-бонусов по документам поступления:'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Отчеты.РасчетРетроБонусовПоставщиков.РасчетРетроБонусовЗаПериод",
		ПараметрыРасчета);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Параметры:
//  АдресДанныхДляФормирования - Строка
//  ПараметрыРасчета - см. Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов
//  ПараметрыФормирования - см. Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ПараметрыФормированияДокументов
//  ИдентификаторФормы - см. ДлительныеОперации.ПараметрыВыполненияФункции.ИдентификаторФормы
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьФункцию
//
Функция ДлительнаяОперацияФормированияДокументовНачисления(АдресДанныхДляФормирования, ПараметрыРасчета, ПараметрыФормирования, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.УточнениеОшибки = НСтр("ru = 'Не удалось сформировать документы начисления:'");
	ДанныеДляФормирования = ПолучитьИзВременногоХранилища(АдресДанныхДляФормирования); // см. НовыеДанныеДляФормированияДокументовНачисления
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.СформироватьДокументыНачисления",
		ДанныеДляФормирования,
		ПараметрыРасчета,
		ПараметрыФормирования);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

// Параметры:
//  ОбластиСРасшифровками - Структура:
//   * МассивИдентификаторовРасшифровок - Массив Из ИдентификаторРасшифровкиКомпоновкиДанных
//   * РасшифровкаОбласть - Соответствие Из КлючИЗначение:
//     ** Ключ - ИдентификаторРасшифровкиКомпоновкиДанных
//     ** Значение - Строка - Имя области
//  АдресДанныхРасшифровки - Строка
//  ПоляРасшифровки - Массив Из Строка
//  ЗакрытьРасчеты - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * РезультатАнализаОбластей - Структура:
//	   ** МассивДокументовУсловий - Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
//	   ** МассивИменОбластей - Массив Из Строка
//	   ** ДокументыУсловийСАдресами - Соответствие Из КлючИЗначение:
//		 *** Ключ - Строка 
//		 *** Значение - ДокументСсылка.УсловияРетроБонусовПоставщика
//   * РезультатИзмененияСтатуса - Структура:
//	   ** ЕстьОшибки - Булево 
//	   ** ИнформацияОбОшибке - Строка 
//
Функция ЗакрытьВозобновитьРасчетыПоБонусамИзФормыОтчета(ОбластиСРасшифровками, АдресДанныхРасшифровки, ПоляРасшифровки, ЗакрытьРасчеты) Экспорт
	
	РезультатИзмененияСтатуса = Новый Структура;
	РезультатИзмененияСтатуса.Вставить("ЕстьОшибки", Ложь);
	РезультатИзмененияСтатуса.Вставить("ИнформацияОбОшибке", "");
	
	РезультатАнализаОбластей = Отчеты.ВедомостьПоРетроБонусамПоставщиков.ДокументыУсловийВыделенныхОбластей(
		ОбластиСРасшифровками,
		АдресДанныхРасшифровки,
		ПоляРасшифровки);
		
	ДокументыУсловий = РезультатАнализаОбластей.МассивДокументовУсловий;
	
	Если ДокументыУсловий.Количество() > 0 Тогда
		
		РезультатИзмененияСтатуса = РегистрыСведений.ЗавершенныеУсловияРетроБонусовПоставщиков.ИзменитьСтатусРасчетов(
			ДокументыУсловий,
			ЗакрытьРасчеты);
			
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатАнализаОбластей", РезультатАнализаОбластей);
	Результат.Вставить("РезультатИзмененияСтатуса", РезультатИзмененияСтатуса);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти