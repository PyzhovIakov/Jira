////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета (клиент, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма, в которой сформирован отчет.
//  Элемент				 - Строка			 - имя элемента формы.
//  Расшифровка			 - Произвольный		 - значение расшифровки.
//  СтандартнаяОбработка - Булево			 - признак стандартной обработки.
// 
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
	// +Софтфон
	Если ПолноеИмяОтчета = "Отчет.сфпЕженедельныйОтчет" Тогда
		
		сфпОбработатьРасшифровкуЕженедельныйОтчет(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.сфпОтчетПоВсемЗвонкам" Тогда
		
		сфпОбработатьРасшифровкуОтчетПоВсемЗвонкам(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	// -Софтфон
	
	ИначеЕсли ПолноеИмяОтчета = "Отчет.CRM_ИсторияРеквизитов" Тогда
		
		ОбработатьРасшифровкуИсторияРеквизитов(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.CRM_СправкаОбИсполнительскойДисциплине" Тогда
		
		ОбработатьРасшифровкуПоИсполнительскойДисциплине(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма, в которой сформирован отчет.
//  Элемент				 - Строка			 - имя элемента формы.
//  Расшифровка			 - Произвольный		 - значение расшифровки.
//  СтандартнаяОбработка - Булево			 - признак стандартной обработки.
// 
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма  - ФормаКлиентскогоПриложения - Форма отчета.
//   Команда   - КомандаФормы     - Команда, которая была вызвана.
//   Результат - Булево           - Истина, если вызов команды обработан.
// 
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	Если Команда.Имя = "CRM_СохранитьРезультат" Тогда
		CRM_СохранитьРезультат(ЭтаФорма);
	ИначеЕсли Команда.Имя = "CRM_ЗагрузитьРезультатВОтбор" Тогда
		CRM_ЗагрузитьРезультатВОтбор(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
// См. "ФормаКлиентскогоПриложения.ОбработкаВыбора" в синтакс-помощнике.
//
// Параметры:
//   ЭтаФорма          - ФормаКлиентскогоПриложения - Форма отчета.
//   ВыбранноеЗначение - Произвольный     - Результат выбора в подчиненной форме.
//   ИсточникВыбора    - ФормаКлиентскогоПриложения - Форма, где осуществлен выбор.
//   Результат         - Булево           - Истина, если результат выбора обработан.
//
Процедура ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик широковещательного оповещения формы отчета.
//
// Параметры:
//  ЭтаФорма			 - ФормаКлиентскогоПриложения	 - форма.
//  ИмяСобытия			 - Строка			 - описание события.
//  Параметр			 - Произвольный		 - какие-то параметры.
//  Источник 			 - Произвольный		 - источник оповещения.
// 
Процедура ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывается для отчёта "сфпЕженедельныйОтчет"
//
Процедура сфпОбработатьРасшифровкуЕженедельныйОтчет(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураДляОткрытияОтчета = Новый Структура();
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	CRM_ФормаОтчетаВызовСервера.сфпЕженедельныйОтчетОбработкаРасшифровки(КомпоновщикНастроек,
		 ЭтаФорма.ОтчетДанныеРасшифровки, Расшифровка, СтандартнаяОбработка,
		 СтруктураДляОткрытияОтчета);
	Если СтруктураДляОткрытияОтчета.Количество() > 0 Тогда	
		Отбор = Новый Структура("Сотрудник", СтруктураДляОткрытияОтчета.Сотрудник);
		Если СтруктураДляОткрытияОтчета.Свойство("ДлительностьЗвонка") Тогда
			Отбор.Вставить("ДлительностьЗвонка", СтруктураДляОткрытияОтчета.ДлительностьЗвонка);
		КонецЕсли;
		Отбор.Вставить("ПериодОтчета",
			 Новый СтандартныйПериод(НачалоДня(СтруктураДляОткрытияОтчета.ДатаОтчета),
			 КонецДня(СтруктураДляОткрытияОтчета.ДатаОтчета)));
		СтруктураДляОткрытияОтчета.Вставить("Отбор", Отбор);
		ФормаРасшифровки = ПолучитьФорму("Отчет.сфпОтчетПоСовершеннымЗвонкам.ФормаОбъекта",
			 СтруктураДляОткрытияОтчета, ЭтотОбъект,
			 Новый УникальныйИдентификатор());
		Если СтруктураДляОткрытияОтчета.Свойство("ДлительностьЗвонка") Тогда
			ЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			Для Каждого ЭлементНастроек Из ЭлементыОтбора Цикл
				Если ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДлительностьЗвонка") Тогда
					ЭлементНастроек.ВидСравнения = СтруктураДляОткрытияОтчета.ВидСравненияДлительностьЗвонка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтруктураДляОткрытияОтчета.Свойство("ТолькоСКлиентами") Тогда
			ЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			ДоступныеЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
			НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение =
				ДоступныеЭлементыОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СсылкаНаЗвонок")).Элементы.Найти("СсылкаНаЗвонок.АбонентКонтакт").Поле;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		КонецЕсли;
		Если СтруктураДляОткрытияОтчета.Свойство("БезКлиентов") Тогда
			ЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
			ДоступныеЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
			НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение =
				ДоступныеЭлементыОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СсылкаНаЗвонок")).Элементы.Найти("СсылкаНаЗвонок.АбонентКонтакт").Поле;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли;	
		ФормаРасшифровки.Открыть();
	КонецЕсли;
КонецПроцедуры

// Вызывается для отчёта "сфпОтчетПоВсемЗвонкам"
//
Процедура сфпОбработатьРасшифровкуОтчетПоВсемЗвонкам(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураДляОткрытияОтчета = Новый Структура();
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;	
	CRM_ФормаОтчетаВызовСервера.сфпОтчетПоВсемЗвонкамОбработкаРасшифровки(КомпоновщикНастроек,
		 ЭтаФорма.ОтчетДанныеРасшифровки, Расшифровка, СтандартнаяОбработка,
		 СтруктураДляОткрытияОтчета);
	Если СтруктураДляОткрытияОтчета.Количество() > 0 Тогда	
		Отбор = Новый Структура();
		Если СтруктураДляОткрытияОтчета.Свойство("Сотрудник") Тогда
			Отбор.Вставить("Сотрудник", СтруктураДляОткрытияОтчета.Сотрудник);
		КонецЕсли;
		Если СтруктураДляОткрытияОтчета.Свойство("ДлительностьЗвонка") Тогда
			Отбор.Вставить("ДлительностьЗвонка", СтруктураДляОткрытияОтчета.ДлительностьЗвонка);
		КонецЕсли;
		СтруктураДляОткрытияОтчета.Вставить("Отбор", Отбор);
		Если СтруктураДляОткрытияОтчета.Свойство("ОтчетПоПропущеннымЗвонкам") Тогда
			Отбор.Вставить("Период",
				 Новый СтандартныйПериод(НачалоДня(СтруктураДляОткрытияОтчета.ДатаОтчета),
				 КонецДня(СтруктураДляОткрытияОтчета.ДатаОтчета)));
			ФормаРасшифровки = ПолучитьФорму("Отчет.сфпОтчетПоПропущеннымЗвонкам.ФормаОбъекта",
				 СтруктураДляОткрытияОтчета, ЭтотОбъект,
				 Новый УникальныйИдентификатор());
			Если СтруктураДляОткрытияОтчета.Свойство("ДлительностьЗвонка") Тогда
				ЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
				Для Каждого ЭлементНастроек Из ЭлементыОтбора Цикл
					Если ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДлительностьЗвонка") Тогда
						ЭлементНастроек.ВидСравнения = СтруктураДляОткрытияОтчета.ВидСравненияДлительностьЗвонка;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ФормаРасшифровки.Открыть();
		Иначе
			Отбор.Вставить("ПериодОтчета",
				 Новый СтандартныйПериод(НачалоДня(СтруктураДляОткрытияОтчета.ДатаОтчета),
				 КонецДня(СтруктураДляОткрытияОтчета.ДатаОтчета)));
			ФормаРасшифровки = ПолучитьФорму("Отчет.сфпОтчетПоСовершеннымЗвонкам.ФормаОбъекта",
				 СтруктураДляОткрытияОтчета, ЭтотОбъект,
				 Новый УникальныйИдентификатор());
			Если СтруктураДляОткрытияОтчета.Свойство("ДлительностьЗвонка") Тогда
				ЭлементыОтбора = ФормаРасшифровки.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
				Для Каждого ЭлементНастроек Из ЭлементыОтбора Цикл
					Если ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДлительностьЗвонка") Тогда
						ЭлементНастроек.ВидСравнения = СтруктураДляОткрытияОтчета.ВидСравненияДлительностьЗвонка;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ФормаРасшифровки.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Вызывается для отчёта "CRM_ИсторияРеквизитов"
//
Процедура ОбработатьРасшифровкуИсторияРеквизитов(ЭтаФорма, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураДляОткрытияРасшифровки = Новый Структура();
	CRM_ФормаОтчетаВызовСервера.ИсторияРеквизитовОбработкаРасшифровки(ЭтаФорма.ОтчетДанныеРасшифровки,
		 Расшифровка, СтандартнаяОбработка,
		 СтруктураДляОткрытияРасшифровки);
	
	Если СтруктураДляОткрытияРасшифровки.Свойство("Ссылка") Тогда
		ПоказатьЗначение(, СтруктураДляОткрытияРасшифровки.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для отчёта "CRM_СправкаОбИсполнительскойДисциплине"
//
Процедура ОбработатьРасшифровкуПоИсполнительскойДисциплине(Форма, Расшифровка, СтандартнаяОбработка)
	
	ЗначениеРасшифровки = Неопределено;
	Если БизнесПроцессыИЗадачиВызовСервера.ЭтоЗадачаИсполнителю(Расшифровка, Форма.ОтчетДанныеРасшифровки, ЗначениеРасшифровки) Тогда
		СтандартнаяОбработка = НЕ CRM_БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗначениеРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

#Область СозранениеЗагрузкаРезультатовОтчетов

Процедура CRM_СохранитьРезультат(ФормаОтчета)
	КонтекстФормы = Новый Структура;
	КонтекстФормы.Вставить("Отчет", ФормаОтчета.Отчет);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ОтчетДанныеРасшифровки") Тогда
		КонтекстФормы.Вставить("ОтчетДанныеРасшифровки", ФормаОтчета.ОтчетДанныеРасшифровки);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ПредставлениеТекущегоВарианта") Тогда
		КонтекстФормы.Вставить("ПредставлениеТекущегоВарианта", ФормаОтчета.ПредставлениеТекущегоВарианта);
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.CRM_СохранениеЗагрузкаРезультатовОтчетов", КонтекстФормы, ФормаОтчета, , ,
		 , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура CRM_ЗагрузитьРезультатВОтбор(ФормаОтчета)
	
	СтруктураПараметры = Новый Структура("Режим", "");
	Если Не ЗначениеЗаполнено(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки) Тогда
		СтруктураПараметры.Вставить("ИспользоватьПользовательскиеПоляОтбора");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ЗагрузитьРезультатВОтборЗавершение", ЭтотОбъект, ФормаОтчета);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ЗагрузкаРезультатовОтчетовВОтбор", СтруктураПараметры, ФормаОтчета);
	Форма.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	Форма.Открыть();
	
КонецПроцедуры

Процедура CRM_ЗагрузитьРезультатВОтборЗавершение(РезультатЗакрытия, ФормаОтчета) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		CRM_ОбщегоНазначенияКлиент.УстановитьОтборПоСпискуРезультатаОтчета(
		РезультатЗакрытия.Наименование,
		РезультатЗакрытия.Поле,
		ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки,
		ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
