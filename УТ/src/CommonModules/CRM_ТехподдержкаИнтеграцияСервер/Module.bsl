
#Область ПрограммныйИнтерфейс

// Функция возвращает Истина, если выполнено подключение абонента.
// 
// Возвращаемое значение:
//   - Строка, Булево
//
Функция ПроверитьПодключениеАбонента() Экспорт
	
	ПараметрыОбмена = ПараметрыОбмена();

	Если ПараметрыОбмена = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Соединение = ЗащищенноеСоединение(ПараметрыОбмена);
	Если Соединение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Токен = ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена);
	Если ПустаяСтрока(Токен) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяМетода = "api/crmintegration/ping";
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , , Токен);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	//Возврат ТекстОтвета;
	
	
	//
	//Если Ответ.КодСостояния = "200" Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Возврат Ложь; 
	
КонецФункции 

// Функция выполняет регистрацию пользователя-абонента.
//
// Параметры:
//  ПараметрыПользователя	 - Структура	 - Параметры пользователя.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ЗарегистрироватьПользователяАбонента(ПараметрыПользователя) Экспорт
	
	ПараметрыОбмена = ПараметрыОбмена();
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Соединение = ЗащищенноеСоединение(ПараметрыОбмена);
	Если Соединение = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Токен = ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена);
	Если ПустаяСтрока(Токен) Тогда
		Возврат "";
	КонецЕсли;
	
	ТелоЗапроса = ПолучитьТелоЗапросаРегистрацииПользователя(ПараметрыПользователя);
	ИмяМетода = "api/crmintegration/userregistration";
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода, , ТелоЗапроса, Токен);
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ТекстОтвета;
	
КонецФункции

// Функция возвращает параметры обмена.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПараметрыОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Узел = ПланыОбмена.CRM_ОбменB2BПортал.НайтиПоКоду("01");
	//Если Не ЗначениеЗаполнено(Узел) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("URL",			АдресСервисаТехподдержки());
	Параметры.Вставить("Схема",			"https");
	Параметры.Вставить("Хост",			"");
	Параметры.Вставить("Порт",			Неопределено);
	Параметры.Вставить("ПутьНаСервере",	"");
	Параметры.Вставить("Логин",			Константы.CRM_ТехподдержкаЛогин.Получить());
	Параметры.Вставить("Пароль",		Константы.CRM_ТехподдержкаПароль.Получить());
	Параметры.Вставить("Таймаут",		0);
	
	//ЗаполнитьЗначенияСвойств(Параметры, Узел);
	
	ДанныеURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(Параметры.URL);
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеURL, , "Логин,Пароль");
	
	Возврат Параметры;
	
КонецФункции

// Функция возвращает защищенное соединение.
//
// Параметры:
//  ПараметрыОбмена	 - Структура	 - Параметры обмена.
// 
// Возвращаемое значение:
//   - HTTPСоединение, Неопределено
//
Функция ЗащищенноеСоединение(ПараметрыОбмена) Экспорт
	
	Соединение = Неопределено;
	
	Попытка
		
		ЗащищенноеСоединение = Неопределено;
		Если ПараметрыОбмена.Схема = "https" Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОбмена.Хост,
			ПараметрыОбмена.Порт,
			ПараметрыОбмена.Логин,
			ПараметрыОбмена.Пароль,
			ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыОбмена.Схема),
			ПараметрыОбмена.Таймаут,
			ЗащищенноеСоединение);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// Функция возвращает HTTP-запрос.
//
// Параметры:
//  АдресРесурса	 - Строка	 - Адрес ресурса.
//  ЗаголовкиЗапроса - Соответствие, Неопределено	 - Заголовки запроса.
//  ТелоЗапроса		 - Строка, Неопределено	 - Тело запроса.
//  ТокенАвторизации - Строка, Неопределено	 - Токен авторизации.
// 
// Возвращаемое значение:
//   - HTTPЗапрос
//
Функция ПодготовитьHTTPЗапрос(АдресРесурса,
	ЗаголовкиЗапроса = Неопределено, ТелоЗапроса = Неопределено, ТокенАвторизации = Неопределено) Экспорт
	
	Если ЗаголовкиЗапроса <> Неопределено Тогда
		Заголовки = ЗаголовкиЗапроса;
	Иначе
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	
	Если ТокенАвторизации <> Неопределено Тогда
		Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает токен авторизации.
//
// Параметры:
//  Соединение		 - HTTPСоединение	 - Соединение.
//  ПараметрыОбмена	 - Структура	 - Параметры обмена.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьТокенАвторизации(Соединение, ПараметрыОбмена) Экспорт
	
	ИмяМетода = "sys/token";
	ДанныеБазовойАвторизации = ЗакодироватьСтрокуВBase64(ПараметрыОбмена.Логин + ":" + ПараметрыОбмена.Пароль);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "Basic " + ДанныеБазовойАвторизации);
	
	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыОбмена.ПутьНаСервере + "/" + ИмяМетода,
		Заголовки, "grant_type=CLIENT_CREDENTIALS");
	
	Попытка
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ИмяМетода, HTTPОтвет.КодСостояния) + Символы.ПС + ТекстОтвета;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат "";
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("id_token") Тогда
		Возврат ДанныеОтвета.id_token;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции   

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТелоЗапросаРегистрацииПользователя(ПараметрыПользователя)
	
	ТранспортныйОбъект = Новый Структура("Наименование, Имя, Фамилия, Отчество, Почта");
	ЗаполнитьЗначенияСвойств(ТранспортныйОбъект, ПараметрыПользователя);
	
	ТелоЗапроса = Сериализовать(ТранспортныйОбъект); 
	
	Возврат ТелоЗапроса;
	
КонецФункции

// Сериализует переданное значение в строку в формате JSON.
// Преобразование выполняется на базе метода ЗаписатьJSON.
// В случае ошибки сериализации генерирует исключение.
//
// Параметры:
//  Значение - Произвольный - Любое значение поддерживающее сериализацию в JSON.
// 
// Возвращаемое значение:
//  Строка - Строка в формате JSON.
//
Функция Сериализовать(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	
	ЗаписьJSON.УстановитьСтроку(
	
		Новый ПараметрыЗаписиJSON(
			ПереносСтрокJSON.Авто,
			"    ",
			Истина,
			ЭкранированиеСимволовJSON.Нет,
			Ложь, // ЭкранироватьУгловыеСкобки
			Ложь, // ЭкранироватьРазделителиСтрок
			Истина // ЭкранироватьАмперсанд
		)
		
	);
	
	ЗаписатьJSON(ЗаписьJSON, Значение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции  

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интеграция с порталом Техподдержки'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ЗакодироватьСтрокуВBase64(Строка)
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Строка);
	ЗакодированнаяСтрока = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	Возврат СтрЗаменить(ЗакодированнаяСтрока, Символы.ВК + Символы.ПС, "");
	
КонецФункции

Функция АдресСервисаТехподдержки() Экспорт
	//Возврат "https://app-219684.1cmycloud.com/applications/portal-copy-dev";
	Возврат "https://rarus.1cmycloud.com/applications/b2bportal-test";
КонецФункции

#КонецОбласти
