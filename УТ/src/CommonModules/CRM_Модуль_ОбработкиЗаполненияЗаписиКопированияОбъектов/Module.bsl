
#Область СлужебныйПрограммныйИнтерфейс

#Область ТиповыеОбработчики

#Область ОбработкиЗаполнения

Процедура СправочникОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	#Область Справочник
	#КонецОбласти
	
КонецПроцедуры

Процедура ДокументОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	#Область ЗаказКлиента
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
			ЗаполнитьЗаказПоИнтересу(Источник, ДанныеЗаполнения);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Источник.КонтактноеЛицо) И ЗначениеЗаполнено(Источник.Партнер) Тогда
			Источник.КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Источник.Партнер);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			
			ЗаполнитьЗаказПоКоммерческомуПредложению(Источник, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТипДанныхЗаполнения = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
		ИЛИ  ТипДанныхЗаполнения = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Попытка
			Если ТипДанныхЗаполнения = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
				CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения);
				CRM_Модуль_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения);
			Иначе
				CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения.БизнесПроцесс, ДанныеЗаполнения);
				CRM_Модуль_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(Источник, ДанныеЗаполнения.БизнесПроцесс, ДанныеЗаполнения);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередЗаписью

Процедура ДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

Процедура СправочникПередЗаписью(Источник, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПриЗаписи

Процедура СправочникПриЗаписи(Источник, Отказ) Экспорт
	
	
КонецПроцедуры

Процедура ДокументПриЗаписи(Источник, Отказ) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПриКопировании

Процедура СправочникПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

Процедура ДокументПриКопировании(Источник, ОбъектКопирования) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти //ТиповыеОбработчики

#Область ПрочиеМетодыОбъектов

#Область ЗаказКлиента

Процедура ЗаполнитьЗаказПоИнтересу(Источник, ДанныеЗаполнения)
	
	Источник.ДокументОснование = ДанныеЗаполнения.Ссылка;
	Источник.КонтактноеЛицо    = ДанныеЗаполнения.КонтактноеЛицо;
	Источник.Подразделение     = ДанныеЗаполнения.Подразделение;
	
	Если ЗначениеЗаполнено(Источник.Организация) И Не ЗначениеЗаполнено(Источник.БанковскийСчет) Тогда
		Источник.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Источник.Организация);
	КонецЕсли;
	Источник.Менеджер = ДанныеЗаполнения.Ответственный;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Партнер) Тогда
		Источник.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		Источник.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Источник.Партнер, Источник.Контрагент);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Соглашение) Тогда
		
		//Если Не ЗначениеЗаполнено(Источник.Соглашение) Тогда
			
			Источник.Соглашение = ДанныеЗаполнения.Соглашение;
			Источник.ЗаполнитьУсловияПродажПоСоглашению();

		//КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		И Не ЗначениеЗаполнено(Источник.Соглашение) Тогда
		Источник.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		Источник.Организация = ДанныеЗаполнения.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
		Источник.Договор = ДанныеЗаполнения.Договор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
		Источник.Валюта = ДанныеЗаполнения.Валюта;
	КонецЕсли;
	
	Источник.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоУмолчанию(Источник);

	Если ЗначениеЗаполнено(ДанныеЗаполнения.СделкаСКлиентом) Тогда
		
		//Если Не ЗначениеЗаполнено(Источник.Сделка) Тогда
			
			Источник.Сделка = ДанныеЗаполнения.СделкаСКлиентом;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Склад) Тогда
		Источник.Склад = ДанныеЗаполнения.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.НалогообложениеНДС) Тогда
		
		//Если Не ЗначениеЗаполнено(Источник.НалогообложениеНДС) Тогда
			
			Источник.НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
			
			Источник.ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;
			
		//КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Договор) Тогда
		Источник.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Источник, Источник.ХозяйственнаяОперация, Источник.Валюта);
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Источник.Договор, Источник.БанковскийСчет, Источник.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(Источник.Договор) Тогда
		Источник.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
	
	ДобавленыСтрокиТовары = Ложь;
	МассивКлючейСвязи = Новый Массив;
	
	
	
	Если ДанныеЗаполнения.Товары.Количество() > 0 Тогда
		
		Для каждого ДанныеЗаполненияСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			
			Если ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Номенклатура)
			   И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Количество) Тогда
			   //И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Цена) 
			   //И ЗначениеЗаполнено(ДанныеЗаполненияСтрокаТовары.Сумма) Тогда
				
				ДобавленыСтрокиТовары = Истина;
				ИсточникТоварыСтрока = Источник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ИсточникТоварыСтрока, ДанныеЗаполненияСтрокаТовары);
				
				Если НЕ ЗначениеЗаполнено(ИсточникТоварыСтрока.Склад) Тогда
					ИсточникТоварыСтрока.Склад = Источник.Склад;
				КонецЕсли;
				
				Если ДанныеЗаполненияСтрокаТовары.КлючСвязи > 0 
				   И МассивКлючейСвязи.Найти(ДанныеЗаполненияСтрокаТовары.КлючСвязи) = Неопределено Тогда
					
					МассивКлючейСвязи.Добавить(ДанныеЗаполненияСтрокаТовары.КлючСвязи);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавленыСтрокиТовары Тогда
		
		ДобавленыСкидки = Ложь;
		
		Если ДанныеЗаполнения.СкидкиНаценки.Количество() > 0 Тогда
		
			Для каждого ДанныеЗаполненияСтрокаСкидкиНаценки Из ДанныеЗаполнения.СкидкиНаценки Цикл
				
				Если Не МассивКлючейСвязи.Найти(ДанныеЗаполненияСтрокаСкидкиНаценки.КлючСвязи) = Неопределено Тогда
					
					ДобавленыСкидки = Истина;
					ИсточникСкидкиНаценкиСтрока = Источник.СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(ИсточникСкидкиНаценкиСтрока, ДанныеЗаполненияСтрокаСкидкиНаценки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДобавленыСкидки Тогда
			Источник.СкидкиРассчитаны = ДанныеЗаполнения.СкидкиРассчитаны;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура();
		ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(Источник);
		ПоляСтрокой = "ВариантОбеспечения";
		ОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтруктураДействий, ПоляСтрокой, ПараметрыДокумента);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Источник.Товары, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказПоКоммерческомуПредложению(Источник, ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
	
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Соглашение) Тогда
				
				Источник.Соглашение = ДанныеЗаполнения.ДокументОснование.Соглашение;
				УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Источник.Соглашение, Истина);
				Источник.ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Договор) Тогда
			Источник.Договор = ДанныеЗаполнения.ДокументОснование.Договор;
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Источник.Договор, Источник.БанковскийСчет, Источник.БанковскийСчетКонтрагента);
			Источник.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Договор, "ГруппаФинансовогоУчета");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование.Склад) Тогда
			Источник.Склад 		= ДанныеЗаполнения.ДокументОснование.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьКонтактноеЛицоКлиента(Клиент)
	
	Если ЗначениеЗаполнено(Клиент.CRM_ОсновноеКонтактноеЛицо) Тогда
		Возврат Клиент.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛицаПартнеров.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Клиент);
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Возврат ВыборкаИзРезультатаЗапроса.Ссылка;
	КонецЕсли;
	
КонецФункции

#Область ОбменСВК

// Регистрация номенклатуры к обмену при изменении остатков
Процедура CRM_Модуль_ПередЗаписьюРегистраНакопленияПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграцииСИнтернетМагазинами") Тогда
		Возврат;
	КонецЕсли;
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	CRM_ИнтеграцииСИнтернетМагазинами.Ссылка КАК Ссылка,
	//                      |	CRM_ИнтеграцииСИнтернетМагазинами.ХранилищеНастроек КАК ХранилищеНастроек
	//                      |ИЗ
	//                      |	ПланОбмена.CRM_ИнтеграцииСИнтернетМагазинами КАК CRM_ИнтеграцииСИнтернетМагазинами
	//                      |ГДЕ
	//                      |	НЕ CRM_ИнтеграцииСИнтернетМагазинами.ПометкаУдаления
	//                      |	И CRM_ИнтеграцииСИнтернетМагазинами.Включена");
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТабНоменклатура = Источник.Выгрузить(, "Номенклатура");
	//ТабНоменклатура.Свернуть("Номенклатура");
	//МассивНоменклатуры = ТабНоменклатура.ВыгрузитьКолонку("Номенклатура");
	//ВыгружаемаяНоменклатура = Новый Соответствие;
	//Пока Выборка.Следующий() Цикл
	//	Настройки = CRM_ИнтеграцияСИнтернетМагазинами.НастройкиМагазина(Выборка.Ссылка);
	//	Если Настройки.Свойство("ВыгружатьДанные") И Настройки.ВыгружатьДанные Тогда
	//		ВыгружаемаяНоменклатураВМагазин = Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.ВыгружаемаяНоменклатура(Настройки, МассивНоменклатуры);
	//		Если ВыгружаемаяНоменклатураВМагазин.Количество()>0 Тогда
	//			ВыгружаемаяНоменклатура.Вставить(Выборка.Ссылка, ВыгружаемаяНоменклатураВМагазин);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Источник.ДополнительныеСвойства.Вставить("CRM_ВыгружаемаяНоменклатура", ВыгружаемаяНоменклатура);
	
КонецПроцедуры

Процедура CRM_Модуль_ПриЗаписиРегистраНакопленияПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("CRM_ВыгружаемаяНоменклатура") Тогда
		Для каждого Магазин из Источник.ДополнительныеСвойства.CRM_ВыгружаемаяНоменклатура Цикл
			Для каждого Номенклатура из Магазин.Значение Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Магазин.Ключ, Номенклатура);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти //ПрочиеМетодыОбъектов

#КонецОбласти // СлужебныйПрограммныйИнтерфейс
