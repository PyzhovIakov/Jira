// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область АвторизацияВСервисеЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ИдентификаторыУчетныхЗаписейЭДО - Массив из Строка
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * ВыбранныйСертификат - Неопределено - сертификат будет определяться по индентификатору учетной записи ЭДО.
//                        - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция НовыеПараметрыАвторизацииВСервисеЭДО() Экспорт
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ИдентификаторыУчетныхЗаписейЭДО", Новый Массив);
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	Контекст.Вставить("ВыбранныйСертификат", Неопределено);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("АвторизоватьсяВСервисеЭДОПослеПолученияОтпечатков", ЭтотОбъект,
		ПараметрыАвторизации);
	
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ОтпечаткиПоКонтекстам - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура АвторизоватьсяВСервисеЭДОПослеПолученияОтпечатков(ОтпечаткиПоКонтекстам, ПараметрыАвторизации) Экспорт
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.АвторизоватьсяВСервисеЭДОВФоне(
		ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО, ОтпечаткиПоКонтекстам,
		ПараметрыАвторизации.ВыбранныйСертификат);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатАвторизацииВСервисеЭДО", ЭтотОбъект, ПараметрыАвторизации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура ОбработатьРезультатАвторизацииВСервисеЭДО(ДлительнаяОперация, ПараметрыАвторизации) Экспорт
	
	РезультатАвторизации = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.РезультатАвторизацииВСервисеЭДОВФоне(ДлительнаяОперация);
	
	Если ЗначениеЗаполнено(РезультатАвторизации.ЗашифрованныеМаркеры) Тогда
		КриптографияБЭДКлиент.НачатьРасшифровкуНабораДанных(ПараметрыАвторизации.ОповещениеОЗавершении,
			РезультатАвторизации.ЗашифрованныеМаркеры, ПараметрыАвторизации.ПаролиСертификатов,
			РезультатАвторизации.КонтекстДиагностики);
	Иначе
		ИтогРасшифровки = КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных();
		ИтогРасшифровки.ПаролиСертификатов = ПараметрыАвторизации.ПаролиСертификатов;
		ВыполнитьОбработкуОповещения(ПараметрыАвторизации.ОповещениеОЗавершении, ИтогРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // АвторизацияВСервисеЭДО

// Возвращаемое значение:
//  Структура:
//  * УчетнаяЗаписьОблачногоЭДО - Неопределено,СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ИдентификаторОрганизации - Строка
//  * ОператорЭДО - Строка
//  * АдресОрганизации - Строка
//  * КодНалоговогоОргана - Строка
//  * ЭлектроннаяПочта - Строка
//  * СертификатыДляПодписания - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * СертификатыДляРегистрации - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Доверенности - Соответствие из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция НовыеПараметрыРегистрацииСертификатовВЭДО() Экспорт
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("УчетнаяЗаписьОблачногоЭДО", Неопределено);
	ПараметрыРегистрации.Вставить("Организация", Неопределено);
	ПараметрыРегистрации.Вставить("ИдентификаторОрганизации", "");
	ПараметрыРегистрации.Вставить("ОператорЭДО", "");
	ПараметрыРегистрации.Вставить("АдресОрганизации", "");
	ПараметрыРегистрации.Вставить("КодНалоговогоОргана", "");
	ПараметрыРегистрации.Вставить("ЭлектроннаяПочта", "");
	ПараметрыРегистрации.Вставить("СертификатыДляПодписания", Новый Массив);
	ПараметрыРегистрации.Вставить("СертификатыДляРегистрации", Новый Массив);
	ПараметрыРегистрации.Вставить("Доверенности", Новый Соответствие);
	Возврат ПараметрыРегистрации;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыРегистрации - см. НовыеПараметрыРегистрацииСертификатовВЭДО
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура НачатьОтправкуСертификатовДляРегистрацииВЭДО(ОповещениеОЗавершении, ПараметрыРегистрации, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДОВФоне(
		ПараметрыРегистрации, ФормаВладелец.УникальныйИдентификатор);

	КонтекстРегистрации = НовыйКонтекстРегистрацииСертификатовВЭДО();
	КонтекстРегистрации.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстРегистрации.ФормаВладелец = ФормаВладелец;
	КонтекстРегистрации.Доверенности = ПараметрыРегистрации.Доверенности;
	КонтекстРегистрации.УчетнаяЗаписьОблачногоЭДО = ПараметрыРегистрации.УчетнаяЗаписьОблачногоЭДО;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьДанныеНаРегистрациюВЭДОПослеПодготовки",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, КонтекстРегистрации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * СертификатыУжеЗарегистрированы - Булево
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
// * ИдентификаторЗаявки - Строка
Функция НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО() Экспорт
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Успех", Ложь);
	РезультатОтправки.Вставить("СертификатыУжеЗарегистрированы", Ложь);
	РезультатОтправки.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	РезультатОтправки.Вставить("ПаролиСертификатов", Новый Соответствие);
	РезультатОтправки.Вставить("ИдентификаторЗаявки", "");
	Возврат РезультатОтправки;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ИдентификаторыЗаявокПоУчетнымЗаписямОблачногоЭДО - Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * Значение - Массив из Строка
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура НачатьПолучениеРезультатаРегистрацииСертификатовЭДО(ОповещениеОЗавершении,
	ИдентификаторыЗаявокПоУчетнымЗаписямОблачногоЭДО, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ПроверитьОбработкуРегистрационныхПакетовЭДОВФоне(
		ИдентификаторыЗаявокПоУчетнымЗаписямОблачногоЭДО, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыРегистрацииСертификатовЭДО",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, ОповещениеОЗавершении);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторыЭДО - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор заявки.
//  ** Значение - Строка - идентификатор ЭДО.
//  * ЗаявкиВОбрабоке - Соответствие из КлючИЗначение:
//  ** Ключ - ОпределяемыйТип.Организация
//  ** Значение - Массив из Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатРегистрацииСертификатовВЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЭДО", Новый Соответствие);
	Результат.Вставить("ЗаявкиВОбрабоке", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * УчетнаяЗаписьОблачногоЭДО - Неопределено,СправочникСсылка.УчетныеЗаписиОблачногоЭДО
//  * ИдентификаторЭДО - Строка
//  * ПараметрыУведомлений - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
Функция НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Параметры.Вставить("УчетнаяЗаписьОблачногоЭДО", Неопределено);
	Параметры.Вставить("ИдентификаторЭДО", "");
	Параметры.Вставить("ПараметрыУведомлений", Новый Структура);
	Параметры.Вставить("ВыбранныйСертификат", Неопределено);
	Параметры.Вставить("ПаролиСертификатов", Новый Соответствие);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(ПараметрыОбновления) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, ПараметрыОбновления);
	
	ПараметрыАвторизации = НовыеПараметрыАвторизацииВСервисеЭДО();
	ПараметрыАвторизации.ОповещениеОЗавершении = Оповещение;
	ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО.Добавить(ПараметрыОбновления.ИдентификаторЭДО);
	ПараметрыАвторизации.ПаролиСертификатов = ПараметрыОбновления.ПаролиСертификатов;
	ПараметрыАвторизации.ВыбранныйСертификат = ПараметрыОбновления.ВыбранныйСертификат;
	
	АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
Функция НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Параметры.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	Параметры.Вставить("ВыбранныйСертификат", Неопределено);
	Параметры.Вставить("ПаролиСертификатов", Новый Соответствие);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДО(ПараметрыПолучения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО",
		ЭтотОбъект, ПараметрыПолучения);
	
	ПараметрыАвторизации = НовыеПараметрыАвторизацииВСервисеЭДО();
	ПараметрыАвторизации.ОповещениеОЗавершении = Оповещение;
	ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО.Добавить(ПараметрыПолучения.ИдентификаторУчетнойЗаписиЭДО);
	ПараметрыАвторизации.ПаролиСертификатов = ПараметрыПолучения.ПаролиСертификатов;
	ПараметрыАвторизации.ВыбранныйСертификат = ПараметрыПолучения.ВыбранныйСертификат;
	
	АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации);
	
КонецПроцедуры

// Параметры:
//  ИнформацияОбУчетнойЗаписи - см. УчетныеЗаписиЭДОИнтеграцияОблака.ИнформацияОбУчетнойЗаписи
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура ОбновитьИнформациюОбУчетнойЗаписиЭДО(ИнформацияОбУчетнойЗаписи, ОповещениеОЗавершении, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ОбновитьИнформациюОбУчетнойЗаписиЭДОВФоне(
		ИнформацияОбУчетнойЗаписи, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьИнформациюОбУчетнойЗаписиЭДОЗавершение",
		ЭтотОбъект, ОповещениеОЗавершении);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Регистрация

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * Доверенности - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * ИдентификаторЗаявки - Строка
//  * УчетнаяЗаписьОблачногоЭДО - Неопределено,СправочникСсылка.УчетныеЗаписиОблачногоЭДО
Функция НовыйКонтекстРегистрацииСертификатовВЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ФормаВладелец", Неопределено);
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	Контекст.Вставить("Доверенности", Новый Соответствие);
	Контекст.Вставить("ИдентификаторЗаявки", "");
	Контекст.Вставить("УчетнаяЗаписьОблачногоЭДО", Неопределено);
	Возврат Контекст;
КонецФункции

// Параметры:
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  см. НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО
Функция РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации)
	Результат = НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО();
	Результат.КонтекстДиагностики = КонтекстРегистрации.КонтекстДиагностики;
	Результат.ПаролиСертификатов = КонтекстРегистрации.ПаролиСертификатов;
	Результат.ИдентификаторЗаявки = КонтекстРегистрации.ИдентификаторЗаявки;
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ПодписатьДанныеНаРегистрациюВЭДОПослеПодготовки(ДлительнаяОперация, КонтекстРегистрации) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ВидОперации = УчетныеЗаписиЭДОКлиентСервер.ВидОперацииРегистрацияСертификатовВЭДО();
		ТекстОшибки = НСтр("ru = 'Не удалось подготовить данные регистрационного пакета.'")
			+ Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		ДобавитьНеизвестнуюОшибку(КонтекстРегистрации.КонтекстДиагностики, ВидОперации, ТекстОшибки);
	Иначе
		РезультатПодготовкиДанных = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // См. УчетныеЗаписиЭДОИнтеграцияОблака.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
		ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(КонтекстРегистрации.КонтекстДиагностики,
			РезультатПодготовкиДанных.КонтекстДиагностики);
	КонецЕсли;
	
	Если ОбработкаНеисправностейБЭДКлиентСервер.ЕстьОшибки(КонтекстРегистрации.КонтекстДиагностики) Тогда  
		РезультатОперации = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
		ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	Если РезультатПодготовкиДанных.СертификатыУжеЗарегистрированы Тогда
		РезультатОперации = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
		РезультатОперации.СертификатыУжеЗарегистрированы = Истина;
		ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПодготовкиДанных.ДанныеДляПодписания) Тогда
		ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПодписания = РезультатПодготовкиДанных.ДанныеДляПодписания;// См. УчетныеЗаписиЭДОИнтеграцияОблака.НовыеДанныеДляПодписанияНаРегистрациюВЭДО
	
	КонтекстРегистрации.ИдентификаторЗаявки = РезультатПодготовкиДанных.ИдентификаторЗаявки;
	
	ОписаниеДанныхДляИнтерактивногоПодписания = ОписаниеДанныхДляИнтерактивногоПодписанияНаРегистрациюВЭДО(
		ДанныеДляПодписания, КонтекстРегистрации);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьРегистрационныйПакетЭДОПослеПодписания",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, КонтекстРегистрации);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанныхДляИнтерактивногоПодписания,
		КонтекстРегистрации.КонтекстДиагностики, КонтекстРегистрации.ФормаВладелец, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ДанныеДляПодписания - см. УчетныеЗаписиЭДОИнтеграцияОблака.НовыеДанныеДляПодписанияНаРегистрациюВЭДО
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Операция - Строка
//  * ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПередВыполнением - Неопределено,ОписаниеОповещения
//  * НаборДанных - Массив из Структура
//  * ПредставлениеНабора - Строка
//  * СписокПредставлений - СписокЗначений из ОписаниеОповещения
//  * ЗаголовокДанных - Строка
//  * БезПодтверждения - Булево
//  * ПоказатьКомментарий - Булево
//  
Функция ОписаниеДанныхДляИнтерактивногоПодписанияНаРегистрациюВЭДО(ДанныеДляПодписания, КонтекстРегистрации)
	
	Операция = НСтр("ru = 'Подписание регистрационных данных на подключение к сервису 1С-ЭДО'");
	ПредставлениеНабора = НСтр("ru = 'Пользовательское соглашение, Данные для регистрации у оператора ЭДО'");
	
	ОтборСертификатов = ДанныеДляПодписания.СертификатыДляВыбора;
	ОбработчикЗаполненияПодписанта = Новый ОписаниеОповещения("ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, КонтекстРегистрации);
	
	НаборДанных = Новый Массив; // Массив из Структура
	ОписаниеДанныхСоглашения = Новый Структура("Идентификатор, Данные",
		ИдентификаторДанныхСоглашенияНаПодключениеЭДО(), ДанныеДляПодписания.ДанныеСоглашения);
	НаборДанных.Добавить(ОписаниеДанныхСоглашения);
	ОписаниеДанныхДляРегистрации = Новый Структура("Идентификатор, Данные",
		ИдентификаторДанныхДляРегистрацииЭДО(), ДанныеДляПодписания.ДанныеДляРегистрации);
	НаборДанных.Добавить(ОписаниеДанныхДляРегистрации);
	
	СписокПредставлений = Новый СписокЗначений; // СписокЗначений из ОписаниеОповещения
	
	ПредставлениеДанныхСоглашения = НСтр("ru = 'Пользовательское соглашение на подключение к сервису 1С-ЭДО'");
	ОбработчикВизуализацииСоглашения = Новый ОписаниеОповещения("ПоказатьСоглашениеНаРегистрациюВЭДО",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент);
	СписокПредставлений.Добавить(ОбработчикВизуализацииСоглашения, ПредставлениеДанныхСоглашения);
	
	ФайлДанныхДляРегистрации = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ФайлДанныхДляРегистрации.ДвоичныеДанные = ДанныеДляПодписания.ДанныеДляРегистрации;
	ФайлДанныхДляРегистрации.ИмяФайла = СтрШаблон(НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1.xml'"),
		КонтекстРегистрации.ИдентификаторЗаявки);
	
	ПараметрыВизуализацииДанных = Новый Структура("ФайлДанныхДляРегистрации, ИдентификаторФормы",
		ФайлДанныхДляРегистрации, КонтекстРегистрации.ФормаВладелец.УникальныйИдентификатор);
	
	ПредставлениеДанныхДляРегистрации = НСтр("ru = 'Данные для регистрации учетной записи у оператора ЭДО'");
	ОбработчикВизуализацииЗаявки = Новый ОписаниеОповещения("ПоказатьДанныеДляРегистрацииВЭДО",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, ПараметрыВизуализацииДанных);
	СписокПредставлений.Добавить(ОбработчикВизуализацииЗаявки, ПредставлениеДанныхДляРегистрации);
	
	Результат = Новый Структура;
	Результат.Вставить("Операция", Операция);
	Результат.Вставить("ОтборСертификатов", ОтборСертификатов);
	Результат.Вставить("ПередВыполнением", ОбработчикЗаполненияПодписанта);
	Результат.Вставить("НаборДанных", НаборДанных);
	Результат.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	Результат.Вставить("СписокПредставлений", СписокПредставлений);
	Результат.Вставить("ЗаголовокДанных", "");
	Результат.Вставить("БезПодтверждения", Истина);
	Результат.Вставить("ПоказатьКомментарий", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхСоглашенияНаПодключениеЭДО()
	Возврат "СоглашениеНаПодключениеЭДО";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхДляРегистрацииЭДО()
	Возврат "ДанныеДляРегистрацииЭДО";
КонецФункции

// Параметры:
//  РезультатВыбораСертификата - Структура:
//  * Оповещение - ОписаниеОповещения
//  * ОписаниеДанных - Структура:
//    ** ТекущийЭлементНабораДанных - Структура:
//    *** Данные - ДвоичныеДанные
//    ** ЗаголовокДанных - Строка
//    ** СообщитьОЗавершении - Булево
//    ** ПоказатьКомментарий - Булево
//    ** КонтекстОперации - Неопределено,Произвольный
//    ** ПрекратитьВыполнение - Булево
//    ** БезПодтверждения - Булево
//    ** ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** НаборДанных - Массив из см. ДанныеДляПодписанияРегистрационногоПакета
//    ** ВыбранныйСертификат - Структура:
//       *** Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//       *** Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО(РезультатВыбораСертификата, КонтекстРегистрации) Экспорт
	
	ВыбранныйСертификат = РезультатВыбораСертификата.ОписаниеДанных.ВыбранныйСертификат.Ссылка;
	
	РезультатЗаполнения = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ЗаполнитьДанныеДляПодписанияНаРегистрациюВЭДОПоСертификату(
		КонтекстРегистрации.УчетнаяЗаписьОблачногоЭДО, КонтекстРегистрации.ИдентификаторЗаявки, ВыбранныйСертификат);
	
	ОписаниеДанных = Новый Структура("Данные", РезультатЗаполнения.ДанныеДляПодписания);
	ВыполнитьОбработкуОповещения(РезультатВыбораСертификата.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания - см. УчетныеЗаписиЭДОКлиент.РезультатОперацииВСервисе1СЭДО
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ОтправитьРегистрационныйПакетЭДОПослеПодписания(РезультатПодписания, КонтекстРегистрации) Экспорт
	
	Подписи = ОбработатьРезультатПодписанияРегистрационногоПакетаЭДО(РезультатПодписания, КонтекстРегистрации);
	
	Если Подписи.ПодписьДанныхДляРегистрации = Неопределено
		ИЛИ Подписи.ПодписьСоглашения = Неопределено Тогда
		ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО(Неопределено, КонтекстРегистрации);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаявки = КонтекстРегистрации.ИдентификаторЗаявки;
	ФормаВладелец = КонтекстРегистрации.ФормаВладелец;
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ОтправитьРегистрационныйПакетЭДОВФоне(
		КонтекстРегистрации.УчетнаяЗаписьОблачногоЭДО, ИдентификаторЗаявки, Подписи, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО", 
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, КонтекстРегистрации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** Идентификатор      - Строка
//    ** Данные             - ДвоичныеДанные
//    ** СвойстваПодписи    - Строка
//                          - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстРегистрации - см. НовыйКонтекстОжиданияЗавершенияРегистрацииСертификатовВЭДО
//  
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ПодписьСоглашения - Неопределено,ДвоичныеДанные
//  * ПодписьДанныхДляРегистрации - Неопределено,ДвоичныеДанные
//  * Доверенность - Неопределено,СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция ОбработатьРезультатПодписанияРегистрационногоПакетаЭДО(РезультатПодписания, КонтекстРегистрации)
	
	Подписи = Новый Структура;
	Подписи.Вставить("ПодписьСоглашения", Неопределено);
	Подписи.Вставить("ПодписьДанныхДляРегистрации", Неопределено);
	Подписи.Вставить("Доверенность", Неопределено);
	
	Если РезультатПодписания = Неопределено
		ИЛИ РезультатПодписания.Отказ
		ИЛИ Не РезультатПодписания.Свойство("НаборДанных") Тогда
		Возврат Подписи;
	КонецЕсли;
	
	Если РезультатПодписания.Свойство("ПаролиСертификатов") Тогда
		КонтекстРегистрации.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	ВыбранныйСертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
	Подписи.Доверенность = КонтекстРегистрации.Доверенности[ВыбранныйСертификат];
	
	Для Каждого ПодписанныеДанные Из РезультатПодписания.НаборДанных Цикл
		
		Если Не ПодписанныеДанные.Свойство("СвойстваПодписи") Тогда
			Продолжить
		КонецЕсли;
		
		Если ТипЗнч(ПодписанныеДанные.СвойстваПодписи) = Тип("Строка") Тогда
			СтруктураПодписи = ПолучитьИзВременногоХранилища(ПодписанныеДанные.СвойстваПодписи); // См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
		Иначе
			СтруктураПодписи = ПодписанныеДанные.СвойстваПодписи;
		КонецЕсли;
		
		Если ПодписанныеДанные.Идентификатор = ИдентификаторДанныхСоглашенияНаПодключениеЭДО() Тогда
			Подписи.ПодписьСоглашения = СтруктураПодписи.Подпись;
		КонецЕсли;
		
		Если ПодписанныеДанные.Идентификатор = ИдентификаторДанныхДляРегистрацииЭДО() Тогда
			Подписи.ПодписьДанныхДляРегистрации = СтруктураПодписи.Подпись;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

// Параметры:
//  ДлительнаяОперация - Неопределено
//                     - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО(ДлительнаяОперация, КонтекстРегистрации) Экспорт
	
	РезультатОтправки = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
	
	Ошибка = Неопределено;
	Если ДлительнаяОперация = Неопределено Тогда
		Ошибка = НСтр("ru = 'Не удалось отправить регистрационный пакет.'");
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Ошибка = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		РезультатОпреации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. УчетныеЗаписиЭДОИнтеграцияОблака.ОтправитьРегистрационныйПакетЭДО
		РезультатОтправки.Успех = РезультатОпреации.Успех;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ДобавитьОшибкуРегистрацииСертификатаВЭДО(РезультатОтправки.КонтекстДиагностики, Ошибка);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОтправки);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОбработатьРезультатыРегистрацииСертификатовЭДО(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	РезультатРегистрацииСертификатов = НовыйРезультатРегистрацииСертификатовВЭДО();
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
			
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось отправить регистрационный пакет.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьОшибкуРегистрацииСертификатаВЭДО(РезультатРегистрацииСертификатов.КонтекстДиагностики, ТекстОшибки);
		
	Иначе
		РезультатОпреации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ЗаполнитьЗначенияСвойств(РезультатРегистрацииСертификатов, РезультатОпреации); 
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатРегистрацииСертификатов);
	
КонецПроцедуры

// Показать данные для регистрации ВЭДО.
// 
// Параметры:
//  Результат - Неопределено
//  ПараметрыВизуализации - Структура:
//  * ФайлДанныхДляРегистрации - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * ИдентификаторФормы - Неопределено,УникальныйИдентификатор
Процедура ПоказатьДанныеДляРегистрацииВЭДО(Результат, ПараметрыВизуализации) Экспорт
	
	Если ПараметрыВизуализации.ИдентификаторФормы = Неопределено Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ПараметрыВизуализации.ИдентификаторФормы;
	КонецЕсли;
	
	ФайлДанныхДляРегистрации = ПараметрыВизуализации.ФайлДанныхДляРегистрации;
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(
		ФайлДанныхДляРегистрации.ДвоичныеДанные, УникальныйИдентификатор);
	
	ФайловаяСистемаКлиент.ОткрытьФайл(СсылкаНаДвоичныеДанныеФайла,, ФайлДанныхДляРегистрации.ИмяФайла);
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено
//  Контекст - Неопределено
Процедура ПоказатьСоглашениеНаРегистрациюВЭДО(Результат = Неопределено, Контекст = Неопределено) Экспорт
	
	ОткрытьПользовательскоеСоглашение1СЭДО();
	
КонецПроцедуры

// Открывает пользовательское соглашение сервиса 1С-ЭДО.
// 
Процедура ОткрытьПользовательскоеСоглашение1СЭДО()
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыОбновления) Экспорт
	
	Если Не ЗначениеЗаполнено(ИтогРасшифровки.НаборРасшифрованныхДанных) Тогда
		Результат = НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО();
		ВыполнитьОбработкуОповещения(ПараметрыОбновления.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ФормаВладелец = ПараметрыОбновления.ФормаВладелец;
	
	ИдентификаторФормы = ?(ФормаВладелец = Неопределено, Неопределено, ФормаВладелец.УникальныйИдентификатор);
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОВФоне(
		ПараметрыОбновления.ИдентификаторЭДО, ПараметрыОбновления.ПараметрыУведомлений,
		ИтогРасшифровки.НаборРасшифрованныхДанных, ИдентификаторФормы);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, ПараметрыОбновления);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ПараметрыОбновления) Экспорт

	Результат = НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО();
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		ВидОперации = НСтр("ru = 'Обновление настройки уведомлений учетной записи ЭДО'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось обновить настройки уведомлений учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		
	Иначе
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. УчетныеЗаписиЭДОИнтеграцияОблака.ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыОбновления.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ПараметрыУведомлений - Неопределено
//                         - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыУведомлений", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыПолучения) Экспорт
	
	Если Не ЗначениеЗаполнено(ИтогРасшифровки.НаборРасшифрованныхДанных) Тогда
		Результат = НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО();
		ВыполнитьОбработкуОповещения(ПараметрыПолучения.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ФормаВладелец = ПараметрыПолучения.ФормаВладелец;
	
	ИдентификаторФормы = ?(ФормаВладелец = Неопределено, Неопределено, ФормаВладелец.УникальныйИдентификатор);
	
	ДлительнаяОперация = УчетныеЗаписиЭДОИнтеграцияОблакаВызовСервера.НастройкиУведомленийУчетнойЗаписиЭДОВФоне(
		ПараметрыПолучения.ИдентификаторУчетнойЗаписиЭДО,
		ИтогРасшифровки.НаборРасшифрованныхДанных,
		ИдентификаторФормы);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение",
		УчетныеЗаписиЭДОИнтеграцияОблакаКлиент, ПараметрыПолучения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ПараметрыПолучения) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		Результат = НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО();
		
		ВидОперации = НСтр("ru = 'Получение настройки уведомлений учетной записи ЭДО'");
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось получить настройки уведомлений учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьНеизвестнуюОшибку(Результат.КонтекстДиагностики, ВидОперации, ТекстОшибки);
		
	Иначе
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. УчетныеЗаписиЭДОИнтеграцияОблака.НастройкиУведомленийУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыПолучения.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОбновитьИнформациюОбУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("Успех", Ложь);
		РезультатОбновления.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
		
		ВидОперации = НСтр("ru = 'Обновление информации об учетной записи ЭДО'");
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось обновить информацию об учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьНеизвестнуюОшибку(РезультатОбновления.КонтекстДиагностики, ВидОперации, ТекстОшибки);
		
	Иначе
		РезультатОбновления = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. УчетныеЗаписиЭДОИнтеграцияОблака.ОбновитьИнформациюОбУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатОбновления);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуРегистрацииСертификатаВЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Регистрация сертификата в сервисе ЭДО.'");
	ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ТекстОшибки - Строка
Процедура ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки) Экспорт
	Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстОшибки, ТекстОшибки);
	ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
