
#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьВложенияПоНастройке() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.CRM_ОчисткаВложенийЭлектронныхПисем);
	
	Если Не ПолучитьФункциональнуюОпцию("CRM_ОчищатьВложенияЭлектронныхПисем") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодОчистки = Константы.CRM_ПериодОчисткиВложенийЭлектронныхПисем.Получить();
	Если ПериодОчистки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Начата регламентная очистка вложений электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ДатаОчистки = НачалоДня(ТекущаяДатаСеанса()) - ПериодОчистки * 86400;
	
	// Логика очистки: очистка вложений производится по дате письма, а не по дате создания файла.
	// Письмо может быть загружено в программу много позже отправки, и дата осздания вложения будет свежая.
	// Признак очистки при этом хранится в самом вложении.
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДатаОчистки", ДатаОчистки);
	
	Запрос.Текст = ТекстЗапросаДляОчисткиВложенийВходящихПисем();
	ОтработаныВсе = Ложь;
	Ссылка = "";
	
	Пока Не ОтработаныВсе Цикл
		
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		// BSLLS:CreateQueryInCycle-off
		// Порционная обработка по 1000 файлов
		РезультатЗапроса = Запрос.Выполнить();
		// BSLLS:CreateQueryInCycle-on
		МассивСсылок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"); 
		Для Каждого СсылкаКОбработке Из МассивСсылок Цикл
			ОчиститьВложение(СсылкаКОбработке);
		КонецЦикла;
		
		КоличествоСсылок = МассивСсылок.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОтработаныВсе = Истина;
		КонецЕсли;
		
		Если КоличествоСсылок > 0 Тогда
			Ссылка = МассивСсылок[КоличествоСсылок - 1];
		КонецЕсли;
		
	КонецЦикла;
	
	ОчищатьТолькоВложенияВходящих = Константы.CRM_ОчищатьТолькоВложенияВходящихПисем.Получить();
	
	Если Не ОчищатьТолькоВложенияВходящих Тогда
		
		Запрос.Текст = ТекстЗапросаДляОчисткиВложенийИсходящихПисем();
		ОтработаныВсе = Ложь;
		Ссылка = "";
		
		Пока Не ОтработаныВсе Цикл
			
			Запрос.Параметры.Вставить("Ссылка", Ссылка);
			// BSLLS:CreateQueryInCycle-off
			// Порционная обработка по 1000 файлов
			РезультатЗапроса = Запрос.Выполнить();
			// BSLLS:CreateQueryInCycle-on
			МассивСсылок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"); 
			Для Каждого СсылкаКОбработке Из МассивСсылок Цикл
				ОчиститьВложение(СсылкаКОбработке);
			КонецЦикла;
			
			КоличествоСсылок = МассивСсылок.Количество();
			Если КоличествоСсылок < 1000 Тогда
				ОтработаныВсе = Истина;
			КонецЕсли;
			
			Если КоличествоСсылок > 0 Тогда
				Ссылка = МассивСсылок[КоличествоСсылок - 1];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru='Закончена регламентная очистка вложений электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

Функция ТекстЗапросаДляОчисткиВложенийВходящихПисем()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмо
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронноеПисьмо.Ссылка
	|			И (ЭлектронноеПисьмо.Дата < &ДатаОчистки)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка > &Ссылка
	|	И НЕ ПрисоединенныеФайлы.CRM_ОчищенПоНастройке
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляОчисткиВложенийИсходящихПисем()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмо
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронноеПисьмо.Ссылка
	|			И (ЭлектронноеПисьмо.ДатаОтправления <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (ЭлектронноеПисьмо.ДатаОтправления < &ДатаОчистки)
	|ГДЕ
	|	ПрисоединенныеФайлы.Ссылка > &Ссылка
	|	И НЕ ПрисоединенныеФайлы.CRM_ОчищенПоНастройке
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОчиститьВложение(ВложениеСсылка) Экспорт
	
	ИмяФайлаСПутем = "";
	ИмяФайлаСПутемДляУдаления = "";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ВложениеСсылка)).ПолноеИмя());
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ВложениеСсылка);
		БлокировкаДанных.Заблокировать();
		
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ВложениеСсылка, Ложь);
		
		ФайлОбъект = ВложениеСсылка.ПолучитьОбъект();
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			ИмяФайлаСПутем = РаботаСФайламиВТомахСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			ИмяФайлаСПутемДляУдаления = ИмяФайлаСПутем + ".del";
			ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
			
			Если ФайлНаДиске.Существует() Тогда
				
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				
				// Переместим файл во временный.
				ПереместитьФайл(ИмяФайлаСПутем, ИмяФайлаСПутемДляУдаления);
				
				Если ДвоичныеДанные <> Неопределено Тогда
					ФайлОбъект.CRM_ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДвоичныеДанные);
				КонецЕсли;
				ФайлОбъект.CRM_ОчищенПоНастройке = Истина;
				ФайлОбъект.Записать();
				
				// Удалим временный файл, т.к. успешно обновили данные о файле.
				УдалитьФайлы(ИмяФайлаСПутемДляУдаления);
				
			КонецЕсли;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			РегистрыСведений.ХранилищеФайлов.УдалитьДвоичныеДанные(ВложениеСсылка);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ДвоичныеДанные <> Неопределено Тогда
				ФайлОбъект.CRM_ХешСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДвоичныеДанные);
			КонецЕсли;
			ФайлОбъект.CRM_ОчищенПоНастройке = Истина;
			
			ФайлОбъект.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Если Не ПустаяСтрока(ИмяФайлаСПутем) Тогда
			
			// Записать ошибку в журнал регистрации.
			ЗаписьЖурналаРегистрации(НСтр("ru='Очистка ненужных файлов'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ВложениеСсылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			// Вернем файл на прежнее место в случае ошибки.
			ПереместитьФайл(ИмяФайлаСПутемДляУдаления, ИмяФайлаСПутем);
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru='Очистка вложений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Проверяет - был ли очищен файл вложения.
//
// Параметры:
//  ПрисоединенныйФайл - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//
// Возвращаемое значение:
//  Булево - признак удаленности двоичных данных вложения
//
Функция ВложениеОчищено(ПрисоединенныйФайл) Экспорт
	
	Очищено = Ложь;
	
	Если ТипЗНч(ПрисоединенныйФайл) = Тип("СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы") 
		ИЛИ ТипЗНч(ПрисоединенныйФайл) = Тип("СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы") Тогда
		Если ПрисоединенныйФайл.CRM_ОчищенПоНастройке Тогда
			Очищено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Очищено;
	
КонецФункции

Процедура УстановитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ОчисткаВложенийЭлектронныхПисем);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_ОчисткаВложенийЭлектронныхПисем.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
