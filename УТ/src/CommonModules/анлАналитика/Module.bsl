#Область ПрограммныйИнтерфейс

// Доступность сервера системы 1С:Аналитика.
// 
// Возвращаемое значение:
//  Булево - Сервер системы 1С:Аналитика доступен.
//
Функция СерверСистемыАналитикиДоступен()	Экспорт

	Попытка 
		СистемаАналитики.ПолучитьСоединение().ПолучитьСхему("objects");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Используемый в ИБ адрес сервера системы 1С:Аналитика
// (Функции для технического специалиста - Управление системой аналитики).
// 
// Возвращаемое значение:
//  Строка - Адрес сервера системы 1С:Аналитика.
//
Функция АдресСервера()	Экспорт

	Возврат СистемаАналитики.ПолучитьАдресСервераСистемыАналитики();

КонецФункции

// Установить адрес подключения сервера системы 1С:Аналитика.
// 
// Параметры:
//  АдресСервера - Строка - Новый адрес сервера 1С:Аналитика.
// 
// Возвращаемое значение:
//  Булево - Новый адрес сервера 1С:Аналитика установлен успешно.
//
Функция УстановитьАдресСервера(АдресСервера)	Экспорт

	АдресСервераТекущий = АдресСервера();
	СистемаАналитики.УстановитьАдресСервераСистемыАналитики(АдресСервера);

	Если НЕ СерверСистемыАналитикиДоступен() Тогда
		СистемаАналитики.УстановитьАдресСервераСистемыАналитики(АдресСервераТекущий);
	КонецЕсли;

	Возврат (АдресСервера = АдресСервера());

КонецФункции

// Объекты текущего подключения сервера 1С:Аналитики.
// 
// Параметры:
//  ТипОбъектов - Строка - Тип объектов, извлекаемых с сервера 1С:Аналитика.
//  Владелец - Строка - Идентификатор пользователя, владельца данных 1С:Аналитика.
// 
// Возвращаемое значение:
//  Массив из Структура - Объекты 1С:Аналитика, загруженные с сервера.
//
Функция ОбъектыАналитики(ТипОбъектов = Неопределено, Владелец = Неопределено)	Экспорт

	Фильтр = Новый Структура;
	Если ЗначениеЗаполнено(ТипОбъектов) Тогда
		Фильтр.Вставить("type", ТипОбъектов);
	КонецЕсли;

	Если ЗначениеЗаполнено(Владелец) Тогда
		Фильтр.Вставить("owner", Владелец);
	КонецЕсли;	

	Соединение = СистемаАналитики.ПолучитьСоединение();
	Схема = Соединение.ПолучитьСхему("objects", Фильтр);

	МассивОбъектов = JSONВЗначение(Схема.ПолучитьКакСтроку());

	Возврат МассивОбъектов;

КонецФункции

// Двоичные данные текущего подключения сервера 1С:Аналитики.
// 
// Параметры:
//  ТипОбъектов - Строка - Тип объектов, извлекаемых с сервера 1С:Аналитика.
//  Владелец - Строка, Справочник.Пользователи - Идентификатор пользователя, владельца данных 1С:Аналитика.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные схемы 1С:Аналитика.
//
Функция ДвоичныеДанныеПодключенияАналитики(ТипОбъектов = Неопределено, Владелец = Неопределено)	Экспорт

	Фильтр = Новый Структура;
	Если ЗначениеЗаполнено(ТипОбъектов) Тогда
		Фильтр.Вставить("type", ТипОбъектов);
	КонецЕсли;

	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Пользователи") Тогда
			ИдентификаторВладельца = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ИдентификаторПользователяИБ"));
		Иначе
			ИдентификаторВладельца = Владелец;
		КонецЕсли;

		Фильтр.Вставить("owner", ИдентификаторВладельца);
	КонецЕсли;

	Соединение = СистемаАналитики.ПолучитьСоединение();
	Схема = Соединение.ПолучитьСхему("objects", Фильтр);

	ДвоичныеДанные = Схема.ПолучитьКакДвоичныеДанные();

	Возврат ДвоичныеДанные;

КонецФункции

// Двоичные данные поставляемой панели 1С:Аналитики.
// 
// Параметры:
//  Владелец - Строка, Справочник.Пользователи - Идентификатор пользователя, владельца данных 1С:Аналитика.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные структуры поставляемой панели 1С:Аналитика.
//
Функция ДвоичныеДанныеПанелиПоставки(Владелец) Экспорт

	Схема = СхемаОбъектовПанелиАналитикиВладельца(Владелец);
	ОписаниеСхемы = Схема.ПолучитьКакСтроку();
	ДанныеПанели = JSONВЗначение(ОписаниеСхемы);

	ОписаниеПанели = ОписаниеПанелиИзСхемы(Схема);
	МассивВсехПапок = МассивПапокИзСхемы(Схема);

	ИдентификаторКорневогоКаталога = ОписаниеПанели.РабочиеСтолы[0].Data_RootFolderId;
	ДанныеКорневогоКаталога = ОписаниеПанели.Папки.Найти(ИдентификаторКорневогоКаталога, "id");
	Если НЕ ДанныеКорневогоКаталога = Неопределено Тогда
		МассивИдентификаторовКорневогоКаталога = Новый Массив;
		//Скопируем данные идентификаторов объектов, входящих в корневой каталог
		Для каждого ДанныеОбъекта Из ДанныеКорневогоКаталога["Data_FileIds"] Цикл
			МассивИдентификаторовКорневогоКаталога.Добавить(ДанныеОбъекта.Значение);
		КонецЦикла;
		//Соберем данные идентификаторов, входящих в каталоги панели
		Для каждого ДанныеКаталога Из ДанныеКорневогоКаталога["Data_FolderIds"] Цикл
			НайтиИДобавитьИдентификаторы(МассивВсехПапок, ДанныеКаталога.Значение, МассивИдентификаторовКорневогоКаталога)
		КонецЦикла;

	КонецЕсли;

	//Сбор используемых дополнительных источников
	МассивИменИспользуемыхИсточников = Новый Массив;
	МассивДатОтчетов = Новый Массив;

	//Найдем в отчетах все используемые источники данных (типовые и дополнительные), а так же
	//для идентификации всей панели будем хранить список всех идентификаторов элементов,
	//входящих в данную панель - отчетов, дашбордов и каталогов, кроме рабочего стола, 
	// корневой папки, пользователей, доп. источников
	ДанныеПанелиСФильтром = Новый Массив;
	МассивИдентификаторовПанели = Новый Массив;
	МассивМакросов = Новый Массив;
	Для каждого ЭлементПанели Из ДанныеПанели Цикл

		Если МассивИдентификаторовКорневогоКаталога.Найти(ЭлементПанели["id"]) = Неопределено Тогда
			Если НЕ (ЭлементПанели.type = "user" 
				Или ЭлементПанели.type = "desktop" 
				Или (ЭлементПанели.type = "folder" И ЭлементПанели.Свойство("name") 
					И ЭлементПанели.name = "ROOT_FOLDER_NAME")) Тогда
				//Текущий элемент панели не входит в массив идентификаторов, входящих в каталоги панели
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ДанныеПанелиСФильтром.Добавить(ЭлементПанели);

		Если ЭлементПанели["type"] = "chart" Тогда
			Если МассивИдентификаторовПанели.Найти(ЭлементПанели["id"]) = Неопределено Тогда
				МассивИдентификаторовПанели.Добавить(ЭлементПанели["id"]);
				
				НайденнаяСтрокаПредставления = ОписаниеПанели.ПредставленияДиаграммПанели.Найти(ЭлементПанели["id"], "originalId");
				Если Не НайденнаяСтрокаПредставления = Неопределено Тогда
					ОбъектСхемыПредставленияДиаграммы = НайденнаяСтрокаПредставления.ОбъектСхемы;
					Если ОбъектСхемыПредставленияДиаграммы["displayModeEnable"] = "true" Тогда
						
						Если Не ОбъектСхемыПредставленияДиаграммы.Получить("links") = Неопределено Тогда
							ОбъектСхемыПредставленияДиаграммы["links"] = Новый Массив;
						КонецЕсли;
						ОбъектСхемыПредставленияДиаграммы["updated"] = ЭлементПанели["updated"];
						
						ДанныеПанелиСФильтром.Добавить(ОбъектСхемыПредставленияДиаграммы);
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;

			Если ЭлементПанели.Свойство("data") Тогда
				ДанныеДиаграммы = JSONВЗначение(ЭлементПанели["data"], Истина)["state"];
				МассивИменИспользуемыхИсточников.Добавить(ДанныеДиаграммы["cube"]);

				Для каждого ИдентификаторМакроса Из ДанныеДиаграммы["globalMacrosIds"] Цикл
					Если МассивМакросов.Найти(ИдентификаторМакроса) = Неопределено Тогда
						МассивМакросов.Добавить(ИдентификаторМакроса);
					КонецЕсли;
				КонецЦикла;
				
				
			КонецЕсли;
		КонецЕсли;

		Если ЭлементПанели["type"] = "dashboard" Тогда
			МассивИдентификаторовПанели.Добавить(ЭлементПанели["id"]);
			
			НайденнаяСтрокаПредставления = ОписаниеПанели.ПредставленияДашбордовПанели.Найти(ЭлементПанели["id"], "originalId");
			Если Не НайденнаяСтрокаПредставления = Неопределено Тогда
				ОбъектСхемыПредставленияДашборда = НайденнаяСтрокаПредставления.ОбъектСхемы;
				Если ОбъектСхемыПредставленияДашборда["displayModeEnable"] = "true" Тогда
					Если Не ОбъектСхемыПредставленияДашборда.Получить("links") = Неопределено Тогда
						ОбъектСхемыПредставленияДашборда.Вставить("links", Новый Массив);
					КонецЕсли;
					
					ОбъектСхемыПредставленияДашборда["links"] = ЭлементПанели["links"];
					ОбъектСхемыПредставленияДашборда["updated"] = ЭлементПанели["updated"];
					
					ДанныеПанелиСФильтром.Добавить(ОбъектСхемыПредставленияДашборда);
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;

		Если ЭлементПанели["type"] = "folder" И НЕ ЭлементПанели["name"] = "ROOT_FOLDER_NAME" Тогда
			МассивИдентификаторовПанели.Добавить(ЭлементПанели["id"]);
		КонецЕсли;

		Если ЭлементПанели.Свойство("updated") 
			И НЕ (ЭлементПанели["type"] = "folder" И ЭлементПанели["name"] = "ROOT_FOLDER_NAME") Тогда		
			МассивДатОтчетов.Добавить(ЭлементПанели.updated);
		КонецЕсли;

	КонецЦикла;

	ДатаИзменения = Неопределено;
	ДатаПоставкиПанели(МассивДатОтчетов, ДатаИзменения);

	СхемаИсточников = СхемаОбъектовАналитики("additional-datasource");
	ИсточникиДанных = ИсточникиДанныхИзСхемы(СхемаИсточников);

	//Допишем, используемые, дополнительные источники в выгружаемые данные панели
	Для каждого ОписаниеИсточника Из ИсточникиДанных Цикл

		ИмяИсточника = JSONВЗначение(ОписаниеИсточника.Data, Истина)["name"];

		Если НЕ МассивИменИспользуемыхИсточников.Найти(ИмяИсточника) = Неопределено Тогда
			ДанныеПанелиСФильтром.Добавить(ОписаниеИсточника.ОбъектСхемы);
		КонецЕсли;

	КонецЦикла;

	//допишем используемые в диаграммах пользовательские поля "user-field"
	СхемаПользовательскихПолей = СхемаОбъектовАналитики("user-field",, МассивМакросов);
	ОписаниеСхемыПользовательскихПолей = СхемаПользовательскихПолей.ПолучитьКакСтроку();

	ДанныеПользовательскихПолей = JSONВЗначение(ОписаниеСхемыПользовательскихПолей);
	Для каждого ПользовательскоеПоле Из ДанныеПользовательскихПолей Цикл
		Если МассивИменИспользуемыхИсточников.Найти(ПользовательскоеПоле.cubeName) = Неопределено Тогда
			МассивИменИспользуемыхИсточников.Добавить(ПользовательскоеПоле.cubeName);
		КонецЕсли;

		ДанныеПанелиСФильтром.Добавить(ПользовательскоеПоле);
	КонецЦикла;

	//Допишем цветовые схемы
	ЦветовыеСхемы = СхемаОбъектовАналитики("colorScheme",,);
	ОписаниеЦветовыхСхем = ЦветовыеСхемы.ПолучитьКакСтроку();

	ДанныеЦветовыхСхем = JSONВЗначение(ОписаниеЦветовыхСхем);
	Для каждого ЦветоваяСхема Из ДанныеЦветовыхСхем Цикл
		ДанныеПанелиСФильтром.Добавить(ЦветоваяСхема);
	КонецЦикла;

	ПанельПоставки = анлПоставляемыеПанели.СтруктураПанели();
	ПанельПоставки.ДанныеПанели = ДанныеПанелиСФильтром;
	ПанельПоставки.Идентификаторы = МассивИдентификаторовПанели;
	ПанельПоставки.ДатаИзменения = ДатаИзменения;

	ОписаниеДополненнойСхемы = ЗначениеВJSON(ПанельПоставки);

	Возврат ПолучитьДвоичныеДанныеИзСтроки(ОписаниеДополненнойСхемы,,);

КонецФункции

// Загрузка поставляемой панели 1С:Аналитика в рабочий стол текущего пользователя.
// 
// Параметры:
//  АдресХранилища - Строка - с адресом хранилища данных поставляемой панели 1С:Аналитика.
//
Процедура ЗагрузитьНастройкиПанелиДляПользователя(АдресХранилища) Экспорт

	ТекущийПользователь = Пользователи.ТекущийПользователь();

	Попытка
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ИдентификаторПользователяИБ");
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);

		ИмяПользователя = ПользовательИБ.Имя;
		ИдентификаторПользователяИБ = Строка(ИдентификаторПользователяИБ);
	Исключение
		ВызватьИсключение НСтр("ru = 'Пользователь информационной базы не найден';|SYS = 'AnalyticsSystemManagment.UserIsNotFound'");
	КонецПопытки;

	ПараметрыЗагрузкиПоставляемойПанели = Новый Структура;
	ПараметрыЗагрузкиПоставляемойПанели.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыЗагрузкиПоставляемойПанели.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	ПараметрыЗагрузкиПоставляемойПанели.Вставить("ИмяПользователя", ИмяПользователя);

	ЗагрузитьНастройкиПанели(ПараметрыЗагрузкиПоставляемойПанели);

КонецПроцедуры

// Загрузка поставляемой панели 1С:Аналитика в рабочий стол пользователя.
// 
// Параметры:
//  ПараметрыПоставляемойПанели - Структура - Описание параметров загружаемой панели 1С:Аналитика
//
Процедура ЗагрузитьНастройкиПанели(ПараметрыПоставляемойПанели) Экспорт

	Если ТипЗнч(ПараметрыПоставляемойПанели) = Тип("Структура") 
		И ПараметрыПоставляемойПанели.Свойство("АдресХранилища") Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыПоставляемойПанели.АдресХранилища);
	Иначе
		Возврат;
	КонецЕсли;

	ПоставляемаяПанель = ОписаниеПанелиСистемыАналитикиИзДвоичныхДанных(ДвоичныеДанные);

	ПринимающаяПанель = ОписаниеПодключенияСистемыАналитики();

	ЗаменитьПользователяВПанели(ПоставляемаяПанель, ПараметрыПоставляемойПанели);

	ЗаписатьПоставляемуюПанель(ПоставляемаяПанель, ПринимающаяПанель, ПараметрыПоставляемойПанели, Ложь);

КонецПроцедуры

// Записать схему поставляемой панели на сервер 1С:Аналитика.
// 
// Параметры:
//  Контент - Строка - Содержимое поставляемой панели в формате JSON.
//
Процедура ЗаписатьСхемуПоставляемойПанели(Контент)	Экспорт

	Соединение = СистемаАналитики.ПолучитьСоединение();

	Попытка
		Соединение.ЗаписатьСхему("objects", Новый СхемаСистемыАналитики(Контент));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'Не удалось записать поставляемую панель из макета.'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке) 
			+ " (" + ИнформацияОбОшибке.Описание + ")";
	КонецПопытки;

КонецПроцедуры

// Записать схему дополнительного источника данных на сервер 1С:Аналитика.
// 
// Параметры:
//  Контент - Строка - Содержимое дополнительного источника данных 
//					поставляемой панели в формате JSON.
//
Процедура ЗаписатьСхемуДополнительногоИсточника(Контент)	Экспорт

	Соединение = СистемаАналитики.ПолучитьСоединение();

	Попытка
		Соединение.ЗаписатьСхему("objects", Новый СхемаСистемыАналитики(Контент));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение НСтр("ru = 'Не удалось записать дополнительный источник данных из макета.'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке) 
			+ " (" + ИнформацияОбОшибке.Описание + ")";
	КонецПопытки;

КонецПроцедуры

Функция ОписаниеПанелиСистемыАналитикиИзДвоичныхДанных(ДвоичныеДанныеПанели) Экспорт
	
	СхемаПанели = Новый СхемаСистемыАналитики(ДвоичныеДанныеПанели);
	ОписаниеПанели = ОписаниеПанелиИзСхемы(СхемаПанели);
	
	Возврат ОписаниеПанели;
	
КонецФункции

Функция ОписаниеПодключенияСистемыАналитики() Экспорт
	
	СхемаПодключения = СхемаОбъектовАналитики(ТипыОбъектовДляОбмена());
	ОписаниеПодключения = ОписаниеПанелиИзСхемы(СхемаПодключения);
	
	Возврат ОписаниеПодключения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Строку JSON в значение.
// 
// Параметры:
//  СтрокаJSON - Строка - Строка JSON.
//  ПрочитатьВСоответствие - Булево - Прочитать произвольное значение в соответствие
// 
// Возвращаемое значение:
//  Массив из Произвольный - Значение из строки JSON.
//
Функция JSONВЗначение(СтрокаJSON, ПрочитатьВСоответствие = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаJSON) ИЛИ СтрокаJSON = "[]" Тогда
		Возврат Новый Массив;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);

	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);

КонецФункции

// Произвольное значение в JSON
// 
// Параметры:
//  Значение - Произвольный - произвольное значение
// 
// Возвращаемое значение:
//  Строка - строка JSON.
Функция ЗначениеВJSON(Значение)	Экспорт

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJSON, Значение);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

// Привести метку времени в формате 1С:Аналитика к дате.
// 
// Параметры:
//  МеткаВремени - Строка - Метка времени в формате 1С:Аналитика.
// 
// Возвращаемое значение:
//  Неопределено, Дата - Дата по метке времени, если возможно или неопределено.
//
Функция ДатаПоМеткеВремени(МеткаВремени)	Экспорт

	Если ЗначениеЗаполнено(МеткаВремени) Тогда
		Возврат МестноеВремя('19700101' + Число(МеткаВремени) / 1000);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Схема объектов текущего подключения сервера 1С:Аналитики.
// 
// Параметры:
//  ТипОбъектов - Строка - Тип объектов, извлекаемых с сервера 1С:Аналитика.
//  Владелец - Строка - Идентификатор пользователя, владельца данных 1С:Аналитика.
//  МассивИдентификаторов - Массив из Строка - идентификаторы объектов 1С:Аналитика
// 
// Возвращаемое значение:
//  СхемаСистемыАналитики - Схема 1С:Аналитика, загруженные с сервера.
//
Функция СхемаОбъектовАналитики(ТипОбъектов = Неопределено, Владелец = Неопределено, МассивИдентификаторов = Неопределено)

	Фильтр = Новый Структура;
	Если ЗначениеЗаполнено(ТипОбъектов) Тогда
		Фильтр.Вставить("type", ТипОбъектов);
	КонецЕсли;

	Если ЗначениеЗаполнено(Владелец) Тогда
		Фильтр.Вставить("owner", Владелец);
	КонецЕсли;

	Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		Фильтр.Вставить("id", МассивИдентификаторов);
	КонецЕсли;

	Соединение = СистемаАналитики.ПолучитьСоединение();
	Схема = Соединение.ПолучитьСхему("objects", Фильтр);

	Возврат Схема;

КонецФункции

// Схема объектов панели текущего подключения сервера 1С:Аналитики.
// 
// Параметры:
//  Владелец - Строка, Справочник.Пользователи - Идентификатор пользователя, владельца данных 1С:Аналитика.
// 
// Возвращаемое значение:
//  СхемаСистемыАналитики - Схема 1С:Аналитика, загруженные с сервера, отобранные с учетом владельца.
//
Функция СхемаОбъектовПанелиАналитикиВладельца(Владелец)

	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить("folder");
	ТипыОбъектов.Добавить("chart");
	ТипыОбъектов.Добавить("dashboard");
	ТипыОбъектов.Добавить("user");
	ТипыОбъектов.Добавить("desktop");

	ИдентификаторВладельца = Владелец;

	Если ЗначениеЗаполнено(Владелец) Тогда
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Пользователи") Тогда
			ИдентификаторВладельца = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ИдентификаторПользователяИБ"));
		КонецЕсли;
	КонецЕсли;

	Возврат СхемаОбъектовАналитики(ТипыОбъектов, ИдентификаторВладельца);

КонецФункции

#Область ВспомогательныеМетоды

Функция ТипыОбъектовДляОбмена(ТипОбъекта = Неопределено) Экспорт

	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить("folder");
	ТипыОбъектов.Добавить("chart");
	ТипыОбъектов.Добавить("dashboard");
	ТипыОбъектов.Добавить("additional-datasource");
	ТипыОбъектов.Добавить("user-field");
	ТипыОбъектов.Добавить("colorScheme");

	ТипыОбъектов.Добавить("user");
	ТипыОбъектов.Добавить("desktop");

	Если ТипОбъекта <> Неопределено Тогда
		Если ТипыОбъектов.Найти(ТипОбъекта) <> Неопределено Тогда
			ТипыОбъектов.Очистить();
			ТипыОбъектов.Добавить(ТипОбъекта);
		Иначе
			ТипыОбъектов.Очистить();
		КонецЕсли;
	КонецЕсли;

	Возврат ТипыОбъектов;

КонецФункции

Функция ТипыКонтролируемыхОбъектовПанелиАналитики() Экспорт

	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить("folder");
	ТипыОбъектов.Добавить("chart");
	ТипыОбъектов.Добавить("dashboard");

	Возврат ТипыОбъектов;

КонецФункции

Процедура ДатаПоставкиПанели(МассивДатОтчетов, ДатаИзменения)

	Если МассивДатОтчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИндексМаксимальногоЭлемента = 0;
	ДлинаМассива = МассивДатОтчетов.Количество() - 1;

	Для Индекс = 0 По ДлинаМассива Цикл
		Если НЕ ЗначениеЗаполнено(МассивДатОтчетов[Индекс]) Тогда
			Продолжить;	// Дата отчета не заполнена
		КонецЕсли;
		Если Число(МассивДатОтчетов[Индекс]) > Число(МассивДатОтчетов[ИндексМаксимальногоЭлемента]) Тогда
			ИндексМаксимальногоЭлемента = Индекс;
		КонецЕсли;
	КонецЦикла;

	МаксимальноеЗначение = МассивДатОтчетов[ИндексМаксимальногоЭлемента];

	ДатаИзменения = МаксимальноеЗначение

КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеПанели

Функция ОписаниеПанелиИзСхемы(Схема)

	ПользователиПанели = ПользователиПанелиИзСхемы(Схема);
	РабочиеСтолыПанели = РабочиеСтолыПанелиИзСхемы(Схема);
	МассивПапок = МассивПапокИзСхемы(Схема);
	ИсточникиДанных = ИсточникиДанныхИзСхемы(Схема);
	ПользовательскиеПоля = ПользовательскиеПоляИзСхемы(Схема);
	ЦветовыеСхемы = ЦветовыеСхемыИзСхемы(Схема);

	СущностиРабочихСтолов = Новый Соответствие;
	Для Каждого РабочийСтол Из РабочиеСтолыПанели Цикл

		СущностиРабочегоСтола = Новый Соответствие;
		ЗаполнитьСущностиРабочегоСтола(МассивПапок, РабочийСтол["Data_RootFolderId"], СущностиРабочегоСтола);

		Для Каждого Сущность Из СущностиРабочегоСтола Цикл
			СущностиРабочихСтолов.Вставить(Сущность.Ключ, Истина);
			РабочийСтол.PresentedEntitiesIds.Добавить(Сущность.Ключ);
		КонецЦикла;

	КонецЦикла;

	ПапкиПанели = ПапкиПанелиИзМассиваПапок(МассивПапок, СущностиРабочихСтолов);
	ДиаграммыПанели = ДиаграммыПанелиИзСхемы(Схема, СущностиРабочихСтолов);
	ДашбордыПанели = ДашбордыПанелиИзСхемы(Схема, СущностиРабочихСтолов);
	ПредставленияДашбордовПанели = ПредставленияДашбордовИзСхемы(Схема, ДашбордыПанели);
	ПредставленияДиаграммПанели = ПредставленияДиаграмИзСхемы(Схема, ДиаграммыПанели);

	ПоставляемаяПанель = Новый Структура;
	ПоставляемаяПанель.Вставить("Пользователи", ПользователиПанели);
	ПоставляемаяПанель.Вставить("РабочиеСтолы", РабочиеСтолыПанели);
	ПоставляемаяПанель.Вставить("Папки", ПапкиПанели);
	ПоставляемаяПанель.Вставить("Диаграммы", ДиаграммыПанели);
	ПоставляемаяПанель.Вставить("Дашборды", ДашбордыПанели);
	ПоставляемаяПанель.Вставить("ИсточникиДанных", ИсточникиДанных);
	ПоставляемаяПанель.Вставить("ПользовательскиеПоля", ПользовательскиеПоля);
	ПоставляемаяПанель.Вставить("ЦветовыеСхемы", ЦветовыеСхемы);
	ПоставляемаяПанель.Вставить("ПредставленияДашбордовПанели", ПредставленияДашбордовПанели);
	ПоставляемаяПанель.Вставить("ПредставленияДиаграммПанели", ПредставленияДиаграммПанели);

	Возврат ПоставляемаяПанель;

КонецФункции

Процедура ЗаписатьПоставляемуюПанель(Источник, Приемник, ПараметрыЗаписи, ИскатьСуществующие = Истина)

	ДанныеПользователя = ДанныеПользователяПриемника(Приемник, ПараметрыЗаписи.ИдентификаторПользователяИБ);

	ПриемникРабочийСтол = ДанныеПользователя.РабочийСтол;
	ПриемникПользователь = ДанныеПользователя.Пользователь;

	Если ПриемникРабочийСтол = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует рабочий стол пользователя-получателя';|SYS = 'AnalyticsSystemManagment.MissingDesktop'");
	КонецЕсли;

	Если ПриемникПользователь = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует пользователь-получатель';|SYS = 'AnalyticsSystemManagment.MissingUser'");
	КонецЕсли;

	Если Источник["РабочиеСтолы"].Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Поставляемая панель не содержит настроенных отчетов';|SYS = 'AnalyticsSystemManagment.EmptyPanel'"); 
	КонецЕсли;

	МассивПапок = Приемник["Папки"].НайтиСтроки(Новый Структура("Id", ПриемникРабочийСтол.Data_RootFolderId));
	Если МассивПапок.Количество() Тогда
		ПриемникКорневаяПапка = МассивПапок[0];
	КонецЕсли;

	МассивСхем = Новый Массив;

	ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, "ИсточникиДанных",, ИскатьСуществующие);

	ИсточникРабочийСтол = Источник["РабочиеСтолы"][0];
	ИсточникКорневаяПапка = ИсточникРабочийСтол["Data_RootFolderId"];

	//заполнение данных пользователя
	ОбъектСхемыПользователя = ПриемникПользователь.ОбъектСхемы;
	ДанныеПользователяПриемника = JSONВЗначение(ОбъектСхемыПользователя["data"]);
	МассивСвязей = ОбъектСхемыПользователя["links"];
	Для Каждого ПользовательскоеПоле Из Источник.ПользовательскиеПоля Цикл

		Если ИскатьСуществующие Тогда
			ПолеПриемника = Приемник["ПользовательскиеПоля"].НайтиСтроки(Новый Структура("id", ПользовательскоеПоле.id));
			Если ПолеПриемника.Количество() = 0 Тогда
				МассивСхем.Добавить(ЗначениеВJSON(ПользовательскоеПоле.ОбъектСхемы));
			КонецЕсли;
		Иначе
			МассивСхем.Добавить(ЗначениеВJSON(ПользовательскоеПоле.ОбъектСхемы));			
		КонецЕсли;
		
		Попытка
			Если ДанныеПользователяПриемника["globalMacroIds"].Найти(ПользовательскоеПоле.id) = Неопределено Тогда
				ДанныеПользователяПриемника["globalMacroIds"].Добавить(ПользовательскоеПоле.id);
			КонецЕсли;
		Исключение
			;
		КонецПопытки;

		Если МассивСвязей.Найти(ПользовательскоеПоле.id) = Неопределено Тогда
			МассивСвязей.Добавить(ПользовательскоеПоле.id);
		КонецЕсли;

	КонецЦикла;

	Для Каждого ЦветоваяСхема Из Источник.ЦветовыеСхемы Цикл

		Если ИскатьСуществующие Тогда
			ЦветоваяСхемаПриемника = Приемник["ЦветовыеСхемы"].НайтиСтроки(Новый Структура("id", ЦветоваяСхема.id));
			Если ЦветоваяСхемаПриемника.Количество() = 0 Тогда
				МассивСхем.Добавить(ЗначениеВJSON(ЦветоваяСхема.ОбъектСхемы));
			КонецЕсли;
		Иначе
			МассивСхем.Добавить(ЗначениеВJSON(ЦветоваяСхема.ОбъектСхемы));			
		КонецЕсли;

		Попытка
			Если ДанныеПользователяПриемника["colorSchemeIds"].Найти(ЦветоваяСхема.id) = Неопределено Тогда
				ДанныеПользователяПриемника["colorSchemeIds"].Добавить(ЦветоваяСхема.id);
			КонецЕсли;
		Исключение
			;
		КонецПопытки;

		Если МассивСвязей.Найти(ЦветоваяСхема.id) = Неопределено Тогда
			МассивСвязей.Добавить(ЦветоваяСхема.id);
		КонецЕсли;

	КонецЦикла;

	ОбъектСхемыПользователя["data"] = ЗначениеВJSON(ДанныеПользователяПриемника);
	ОбъектСхемыПользователя["links"] = МассивСвязей;

	ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, "Диаграммы",, ИскатьСуществующие);
	ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, "ПредставленияДиаграммПанели",, ИскатьСуществующие);
	ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, "Дашборды",, ИскатьСуществующие);
	ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, "ПредставленияДашбордовПанели",, ИскатьСуществующие);

	СписокНачальныхКаталогов = Новый СписокЗначений;
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("ИдентификаторКаталога");
	ТаблицаКаталогов.Колонки.Добавить("ВложенныеКаталоги");
	ТаблицаКаталогов.Колонки.Добавить("Схема");

	Для Каждого Папка Из Источник.Папки Цикл

		ОбъектСхемы = Папка.ОбъектСхемы;
		Если ОбъектСхемы["id"] = ИсточникКорневаяПапка Тогда
			//Это корневая папка - перепишем ее содержимое в корневую папку приемника
			//саму эту папку не помещаем в приемник

			ИсточникДанныеКорневойПапки = JSONВЗначение(ОбъектСхемы["data"]);
			ПриемникДанныеКорневойПапки = JSONВЗначение(ПриемникКорневаяПапка.ОбъектСхемы["data"]);

			Для каждого ИдФайла Из ИсточникДанныеКорневойПапки["fileIds"] Цикл
				Если ПриемникДанныеКорневойПапки["fileIds"].Найти(ИдФайла) = Неопределено Тогда
					ПриемникДанныеКорневойПапки["fileIds"].Добавить(ИдФайла);
				КонецЕсли;
			КонецЦикла;

			Для каждого ИдПапки Из ИсточникДанныеКорневойПапки["folderIds"] Цикл
				Если ПриемникДанныеКорневойПапки["folderIds"].Найти(ИдПапки) = Неопределено Тогда
					ПриемникДанныеКорневойПапки["folderIds"].Добавить(ИдПапки);
				КонецЕсли;

				СписокНачальныхКаталогов.Добавить(ИдПапки);

			КонецЦикла;

			Если ПриемникКорневаяПапка.ОбъектСхемы["links"] = Неопределено Тогда
				ПриемникКорневаяПапка.ОбъектСхемы["links"] = Новый Массив;
			КонецЕсли;

			Для каждого ИдСсылки Из ОбъектСхемы["links"] Цикл
				Если ПриемникКорневаяПапка.ОбъектСхемы["links"].Найти(ИдСсылки) = Неопределено Тогда
					ПриемникКорневаяПапка.ОбъектСхемы["links"].Добавить(ИдСсылки);
				КонецЕсли;
			КонецЦикла;

			ПриемникКорневаяПапка.ОбъектСхемы["data"] = ЗначениеВJSON(ПриемникДанныеКорневойПапки);

			Продолжить;
		КонецЕсли;

		Если ИскатьСуществующие Тогда
			ПапкаПриемника = Приемник["Папки"].НайтиСтроки(Новый Структура("id", Папка.id));
			Если ПапкаПриемника.Количество() Тогда
				Продолжить;//папка уже присутствует в приемнике
			КонецЕсли;
		КонецЕсли;

		НоваяСтрока = ТаблицаКаталогов.Добавить();
		НоваяСтрока.ИдентификаторКаталога = Папка.Id;
		НоваяСтрока.Схема = ЗначениеВJSON(Папка.ОбъектСхемы);
		НоваяСтрока.ВложенныеКаталоги = Папка.Data_FolderIds;

	КонецЦикла;

	УпорядоченныйМассивСхем = Новый Массив;
	УпорядочитьМассивКаталоговСогласноИерархииРекурсивно(УпорядоченныйМассивСхем, ТаблицаКаталогов, СписокНачальныхКаталогов);

	Для каждого СхемаКаталога Из УпорядоченныйМассивСхем Цикл
		МассивСхем.Добавить(СхемаКаталога);
	КонецЦикла;

	//публикация в COMMON_FOLDER_ID
	ОбъектСхемыОбщегоКаталога = ОпубликоватьПанельДляВсехПользователей(Приемник.Папки, ПриемникКорневаяПапка, ПриемникДанныеКорневойПапки["folderIds"]);
	МассивСхем.Добавить(ЗначениеВJSON(ОбъектСхемыОбщегоКаталога));

	//добавляем последним корневой каталог, для последующей корректной записи в 1С:Аналитика
	МассивСхем.Добавить(ЗначениеВJSON(ПриемникКорневаяПапка.ОбъектСхемы));

	МассивСхем.Добавить(ЗначениеВJSON(ОбъектСхемыПользователя));

	Соединение = СистемаАналитики.ПолучитьСоединение();
	Для каждого СхемаJSON Из МассивСхем Цикл

		Попытка
			Соединение.ЗаписатьСхему("objects", Новый СхемаСистемыАналитики(СхемаJSON));
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка записи загружаемой схемы'; 
				|SYS = 'AnalyticsSystemManagment.CantLoadpanelSchema'", "ru");
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИсточникВМассивСхем(Источник, Приемник, МассивСхем, ИмяТипаДанных, ИмяИдентификатор = "id", ИскатьСуществующие = Истина)

	Для Каждого ДанныеИсточника Из Источник[ИмяТипаДанных] Цикл

		Если ИскатьСуществующие Тогда
			ДанныеПриемника = Приемник[ИмяТипаДанных].НайтиСтроки(Новый Структура(ИмяИдентификатор, ДанныеИсточника[ИмяИдентификатор]));
			Если ДанныеПриемника.Количество() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		МассивСхем.Добавить(ЗначениеВJSON(ДанныеИсточника.ОбъектСхемы));

	КонецЦикла;

КонецПроцедуры

Процедура УпорядочитьМассивКаталоговСогласноИерархииРекурсивно(УпорядоченныйМассивСхем, ТаблицаКаталогов, СписокНачальныхКаталогов)

	Для каждого НачальныйКаталог Из СписокНачальныхКаталогов Цикл

		НайденныйКаталог = ТаблицаКаталогов.Найти(НачальныйКаталог.Значение, "ИдентификаторКаталога");
		Если НЕ НайденныйКаталог = Неопределено Тогда

			Если НЕ (НайденныйКаталог.ВложенныеКаталоги = Неопределено 
				Или (ТипЗнч(НайденныйКаталог.ВложенныеКаталоги) = Тип("СписокЗначений") И НайденныйКаталог.ВложенныеКаталоги.Количество() = 0)) Тогда

				УпорядочитьМассивКаталоговСогласноИерархииРекурсивно(УпорядоченныйМассивСхем, ТаблицаКаталогов, НайденныйКаталог.ВложенныеКаталоги);
			КонецЕсли;
			//добавляем после добавления вложенных
			УпорядоченныйМассивСхем.Добавить(НайденныйКаталог.Схема);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ОпубликоватьПанельДляВсехПользователей(Каталоги, КорневойКаталог, МассивИдентификаторовДляОбщейПапки);

	ОбщаяПапка = Каталоги.Найти("COMMON_FOLDER_ID", "id");

	Если ОбщаяПапка = Неопределено Или ОбщаяПапка.ОбъектСхемы["ownerName"] = Неопределено Тогда
		//Необходимо сформировать общий каталог
		СоответствиеОбщегоКаталога = Новый Соответствие;
		СоответствиеОбщегоКаталога.Вставить("folderIds", МассивИдентификаторовДляОбщейПапки);
		СоответствиеОбщегоКаталога.Вставить("fileIds", Новый Массив);
		СоответствиеОбщегоКаталога.Вставить("color", "");

		ОбъектСхемыОбщегоКаталога = ОбщаяПапка.ОбъектСхемы;
		ОбъектСхемыОбщегоКаталога["owner"]		= КорневойКаталог.ОбъектСхемы["owner"];
		ОбъектСхемыОбщегоКаталога["ownerName"]	= КорневойКаталог.ОбъектСхемы["ownerName"];
		ОбъектСхемыОбщегоКаталога["updated"]	= КорневойКаталог.ОбъектСхемы["updated"];
		ОбъектСхемыОбщегоКаталога["id"]			= "COMMON_FOLDER_ID";
		ОбъектСхемыОбщегоКаталога["data"]		= ЗначениеВJSON(СоответствиеОбщегоКаталога);
		ОбъектСхемыОбщегоКаталога["links"]		= МассивИдентификаторовДляОбщейПапки;

	Иначе
		ОбъектСхемыОбщегоКаталога = ОбщаяПапка.ОбъектСхемы;
		Если ОбъектСхемыОбщегоКаталога["links"] = Неопределено Тогда
			ОбъектСхемыОбщегоКаталога["links"] = Новый Массив;
		КонецЕсли;

		СоответствиеОбщегоКаталога = JSONВЗначение(ОбъектСхемыОбщегоКаталога["data"]);
		Для каждого ИдентификаторКаталогаСсылки Из МассивИдентификаторовДляОбщейПапки Цикл

			Если ОбъектСхемыОбщегоКаталога["links"].Найти(ИдентификаторКаталогаСсылки) = Неопределено Тогда
				ОбъектСхемыОбщегоКаталога["links"].Добавить(ИдентификаторКаталогаСсылки);
			КонецЕсли;

			Если СоответствиеОбщегоКаталога["folderIds"].Найти(ИдентификаторКаталогаСсылки) = Неопределено Тогда
				СоответствиеОбщегоКаталога["folderIds"].Добавить(ИдентификаторКаталогаСсылки);
			КонецЕсли;

		КонецЦикла;

		ОбъектСхемыОбщегоКаталога["data"] = ЗначениеВJSON(СоответствиеОбщегоКаталога);

	КонецЕсли;

	Возврат ОбъектСхемыОбщегоКаталога;

КонецФункции

Функция ДанныеПользователяПриемника(Приемник, ИдентификаторПользователяИБ)

	РабочийСтолПолучателя = Неопределено;
	МассивРабочихСтолов = Приемник["РабочиеСтолы"].НайтиСтроки(Новый Структура("Owner", ИдентификаторПользователяИБ));

	Если МассивРабочихСтолов.Количество() Тогда
		РабочийСтолПолучателя = МассивРабочихСтолов[0];
	КонецЕсли;

	ПользовательПолучателя = Неопределено;
	МассивПользователей = Приемник["Пользователи"].НайтиСтроки(Новый Структура("id", ИдентификаторПользователяИБ));
	Если МассивПользователей.Количество() Тогда
		ПользовательПолучателя = МассивПользователей[0];
	КонецЕсли;	

	Возврат Новый Структура("РабочийСтол, Пользователь",
		РабочийСтолПолучателя,
		ПользовательПолучателя);

КонецФункции

Процедура ЗаменитьПользователяВПанели(ПоставляемаяПанель, ПараметрыПоставляемойПанели)

	Для каждого ОписаниеТаблицыДанных Из ПоставляемаяПанель Цикл

		Если ОписаниеТаблицыДанных.Ключ = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;

		Для каждого СтрокаТаблицы Из ОписаниеТаблицыДанных.Значение Цикл

			СтрокаТаблицы.OwnerName = ПараметрыПоставляемойПанели.ИмяПользователя;
			СтрокаТаблицы.Owner = ПараметрыПоставляемойПанели.ИдентификаторПользователяИБ;

			СтрокаТаблицы.ОбъектСхемы["owner"] = ПараметрыПоставляемойПанели.ИдентификаторПользователяИБ;
			СтрокаТаблицы.ОбъектСхемы["ownerName"] = ПараметрыПоставляемойПанели.ИмяПользователя;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ПользователиПанелиИзСхемы(Схема)

	ТаблицаПользователей = ТаблицаОбъектовАналитики("user");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("user"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Строка = ТаблицаПользователей.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаПользователей;

КонецФункции

Функция ИсточникиДанныхИзСхемы(Схема)

	ТаблицаИсточниковДанных = ТаблицаОбъектовАналитики();
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("additional-datasource"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Строка = ТаблицаИсточниковДанных.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаИсточниковДанных;

КонецФункции

Функция ПользовательскиеПоляИзСхемы(Схема)

	ТаблицаПолей = ТаблицаОбъектовАналитики();
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("user-field"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Строка = ТаблицаПолей.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаПолей;

КонецФункции

Функция ЦветовыеСхемыИзСхемы(Схема)

	ТаблицаПолей = ТаблицаОбъектовАналитики("colorScheme");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("colorScheme"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Строка = ТаблицаПолей.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаПолей;

КонецФункции

Функция РабочиеСтолыПанелиИзСхемы(Схема)

	ТаблицаРабочихСтолов = ТаблицаОбъектовАналитики("desktop");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("desktop"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Строка = ТаблицаРабочихСтолов.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

		ДанныеРабочегоСтола = JSONВЗначение(Строка["Data"]);

		ИдентификаторКорневойПапки = ДанныеРабочегоСтола["rootFolderId"]; 
		Если ИдентификаторКорневойПапки = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой';|SYS = 'AnalyticsSystemManagment.UnsupportedSchemaVersion'");
		КонецЕсли;

		Строка.Data_RootFolderId = ИдентификаторКорневойПапки;

	КонецЦикла;

	Возврат ТаблицаРабочихСтолов;

КонецФункции

Функция МассивПапокИзСхемы(Схема)

//	ТаблицаПапок = ТаблицаОбъектовАналитики("folder");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("folder"));

	Возврат ОбъектыСхемы;

КонецФункции

Процедура ЗаполнитьСущностиРабочегоСтола(МассивПапок, ТекущийИдентификаторПапки, СущностиРабочегоСтола)

	Для Каждого Папка Из МассивПапок Цикл

		Если Папка["id"] = ТекущийИдентификаторПапки Тогда

			СущностиРабочегоСтола.Вставить(ТекущийИдентификаторПапки, Истина);

			ДанныеПапки = JSONВЗначение(Папка["data"]);

			ИдентификаторыФайлов = ДанныеПапки["fileIds"];
			Для Каждого ИдентификаторФайла Из ИдентификаторыФайлов Цикл
				СущностиРабочегоСтола.Вставить(ИдентификаторФайла, Истина);
			КонецЦикла;

			ИдентификаторыПапок = ДанныеПапки["folderIds"];
			Для Каждого ИдентификаторПапки Из ИдентификаторыПапок Цикл
				Если СущностиРабочегоСтола.Получить(ИдентификаторПапки) = Неопределено Тогда
					ЗаполнитьСущностиРабочегоСтола(МассивПапок, ИдентификаторПапки, СущностиРабочегоСтола);
				КонецЕсли;
			КонецЦикла;

			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПапкиПанелиИзМассиваПапок(МассивПапок, СущностиРабочихСтолов)

	ТаблицаПапок = ТаблицаОбъектовАналитики("folder");
	Для Каждого Папка In МассивПапок Цикл

		Если Папка.Получить("version") <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Версия схемы данных не поддерживается обработкой';|SYS = 'AnalyticsSystemManagment.UnsupportedSchemaVersion'");
		КонецЕсли;

		ИдентификаторПапки = Папка["id"];
		Если СущностиРабочихСтолов <> Неопределено 
			И НЕ ИдентификаторПапки = "COMMON_FOLDER_ID" //общая папка нужна для корректной публикации в дальнейшем
			И СущностиРабочихСтолов.Получить(ИдентификаторПапки) = Неопределено Тогда
			// Исключение удаленных объектов
			Продолжить;
		КонецЕсли;

		Строка = ТаблицаПапок.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, Папка);

		ДанныеПапки = JSONВЗначение(Строка["Data"]);
		Строка["Data_FolderIds"].ЗагрузитьЗначения(ДанныеПапки["folderIds"]);
		Строка["Data_FileIds"].ЗагрузитьЗначения(ДанныеПапки["fileIds"]);

	КонецЦикла;

	Возврат ТаблицаПапок;

КонецФункции

Функция ДиаграммыПанелиИзСхемы(Схема, СущностиРабочихСтолов)

	ТаблицаДиаграмм = ТаблицаОбъектовАналитики("chart");

	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("chart"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Если ОбъектСхемы.Получить("originalId") <> Неопределено Тогда // это черновик
			Продолжить;
		КонецЕсли;

		Если СущностиРабочихСтолов <> Неопределено 
			И СущностиРабочихСтолов.Получить(ОбъектСхемы["id"]) = Неопределено Тогда
			// Исключение удаленных объектов
			Продолжить;
		КонецЕсли;

		Строка = ТаблицаДиаграмм.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаДиаграмм;

КонецФункции

Функция ДашбордыПанелиИзСхемы(Схема, СущностиРабочихСтолов)

	ТаблицаДашбордов = ТаблицаОбъектовАналитики("dashboard");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("dashboard"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Если ОбъектСхемы.Получить("originalId") <> Неопределено Тогда // это черновик
			Продолжить;
		КонецЕсли;

		Если СущностиРабочихСтолов <> Неопределено 
			И СущностиРабочихСтолов.Получить(ОбъектСхемы["id"]) = Неопределено Тогда
			// Исключение удаленных объектов
			Продолжить;
		КонецЕсли;

		Строка = ТаблицаДашбордов.Добавить();
		ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);

	КонецЦикла;

	Возврат ТаблицаДашбордов;

КонецФункции

Функция ПредставленияДашбордовИзСхемы(Схема, ДашбордыПанели)

	ТаблицаДашбордов = ТаблицаОбъектовАналитики("dashboard", "view");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("dashboard"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Если ОбъектСхемы.Получить("originalId") <> Неопределено Тогда
			
			НайденнаяСтрока = ДашбордыПанели.Найти(ОбъектСхемы["originalId"], "id");
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				ИдентификаторОбъекта = Строка(ОбъектСхемы.Получить("id"));
				Если Лев(ИдентификаторОбъекта, 4) = "view" Тогда
					Строка = ТаблицаДашбордов.Добавить();
					ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаДашбордов;

КонецФункции

Функция ПредставленияДиаграмИзСхемы(Схема, ДиаграммыПанели)

	ТаблицаДиаграмм = ТаблицаОбъектовАналитики("chart", "view");
	ОбъектыСхемы = ОбъектыСхемы(Схема, ТипыОбъектовДляОбмена("chart"));

	Для Каждого ОбъектСхемы Из ОбъектыСхемы Цикл

		Если ОбъектСхемы.Получить("originalId") <> Неопределено Тогда
			
			НайденнаяСтрока = ДиаграммыПанели.Найти(ОбъектСхемы["originalId"], "id");
			Если Не НайденнаяСтрока = Неопределено Тогда
				
				ИдентификаторОбъекта = Строка(ОбъектСхемы.Получить("id"));
				Если Лев(ИдентификаторОбъекта, 4) = "view" Тогда
					Строка = ТаблицаДиаграмм.Добавить();
					ЗаполнитьСтрокуОбъектаСхемы(Строка, ОбъектСхемы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаДиаграмм;

КонецФункции

Функция ТаблицаОбъектовАналитики(ТипОбъекта = Неопределено, УточнениеТипа = Неопределено)

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Id", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Owner", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Type", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("OwnerName", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Updated", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Data", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Links", Новый ОписаниеТипов("СписокЗначений"));

	Если ТипОбъекта = "folder" Тогда
		ТаблицаОбъектов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектов.Колонки.Добавить("Data_FolderIds", Новый ОписаниеТипов("СписокЗначений"));
		ТаблицаОбъектов.Колонки.Добавить("Data_FileIds", Новый ОписаниеТипов("СписокЗначений"));
	КонецЕсли;

	Если ТипОбъекта = "user-field" Тогда
		ТаблицаОбъектов.Колонки.Добавить("cubeName", Новый ОписаниеТипов("Строка"));
	КонецЕсли;

	Если ТипОбъекта = "colorScheme" Тогда
		ТаблицаОбъектов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	КонецЕсли;	

	Если ТипОбъекта = "desktop" Тогда
		ТаблицаОбъектов.Колонки.Добавить("Data_RootFolderId", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектов.Колонки.Добавить("PresentedEntitiesIds", Новый ОписаниеТипов("СписокЗначений"));
	КонецЕсли;

	Если ТипОбъекта = "chart" Тогда
		ТаблицаОбъектов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
		ТаблицаОбъектов.Колонки.Добавить("ChartType", Новый ОписаниеТипов("Строка"));
		
		Если УточнениеТипа = "view" Тогда
			ТаблицаОбъектов.Колонки.Добавить("originalId", Новый ОписаниеТипов("Строка"));
			ТаблицаОбъектов.Колонки.Добавить("displayModeEnable", Новый ОписаниеТипов("Булево"));
			ТаблицаОбъектов.Колонки.Добавить("active", Новый ОписаниеТипов("Булево"));
		КонецЕсли;		
	КонецЕсли;

	Если ТипОбъекта = "dashboard" Тогда
		ТаблицаОбъектов.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
		
		Если УточнениеТипа = "view" Тогда
			ТаблицаОбъектов.Колонки.Добавить("originalId", Новый ОписаниеТипов("Строка"));
			ТаблицаОбъектов.Колонки.Добавить("displayModeEnable", Новый ОписаниеТипов("Булево"));
			ТаблицаОбъектов.Колонки.Добавить("active", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;

	ТаблицаОбъектов.Колонки.Добавить("ОбъектСхемы", Новый ОписаниеТипов("Соответствие"));

	Возврат ТаблицаОбъектов;

КонецФункции

Функция ОбъектыСхемы(Схема, ТипыОбъектов = Неопределено)

	ОбъектыСхемы = Новый Массив;

	ВсеОбъектыСхемы = JSONВЗначение(Схема.ПолучитьКакСтроку(), Истина);
	Для Каждого ОбъектСхемы Из ВсеОбъектыСхемы Цикл

		Если ЗначениеЗаполнено(ТипыОбъектов)
			И ТипыОбъектов.Найти(ОбъектСхемы["type"]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ОбъектыСхемы.Добавить(ОбъектСхемы);

	КонецЦикла;

	Возврат ОбъектыСхемы;

КонецФункции

Процедура ЗаполнитьСтрокуОбъектаСхемы(Строка, Знач ОбъектСхемы)

	Ключи = Новый Массив;
	Ключи.Добавить("id");
	Ключи.Добавить("owner");
	Ключи.Добавить("type");
	Ключи.Добавить("data");
	Ключи.Добавить("ownerName");
	Ключи.Добавить("updated");
	Ключи.Добавить("links");
	Ключи.Добавить("name");
	Ключи.Добавить("chartType");
	Ключи.Добавить("originalId");

	ЗначениеКлюча = Неопределено;
	Для Каждого Ключ Из Ключи Цикл

		ЗначениеКлюча = ОбъектСхемы.Получить(Ключ);
		Если ЗначениеКлюча = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Строка[Ключ]) = Тип("СписокЗначений") Тогда
			Строка[Ключ].ЗагрузитьЗначения(ЗначениеКлюча); 
		Иначе
			Строка[Ключ] = ОбъектСхемы[Ключ];
		КонецЕсли;

	КонецЦикла;

	Строка["ОбъектСхемы"] = ОбъектСхемы;

КонецПроцедуры

#КонецОбласти

// Заполнение массива идентификаторов дерева поставляемых панелей 1С:Аналитика.
// 
// Параметры:
//  МассивВсехПапок - Массив из Строка- Массив папок дерева поставляемых панелей 1С:Аналитика.
//  ИдентификаторПанели - Строка - Идентификатор поставляемой панели 1С:Аналитика.
//  МассивИдентификаторовКаталогов - Массив из Строка - Массив идентификаторов папок дерева поставляемых панелей 1С:Аналитика.
//
Процедура НайтиИДобавитьИдентификаторы(МассивВсехПапок, ИдентификаторПанели, МассивИдентификаторовКаталогов)

	МассивИдентификаторовКаталогов.Добавить(ИдентификаторПанели);

	//Найдем стартовый каталог
	Для каждого ОписаниеПапки Из МассивВсехПапок Цикл

		Если ОписаниеПапки["id"] = ИдентификаторПанели Тогда
			Если ОписаниеПапки["links"] = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для каждого ВложенныйИдентификатор Из ОписаниеПапки["links"] Цикл
				НайтиИДобавитьИдентификаторы(МассивВсехПапок, ВложенныйИдентификатор, МассивИдентификаторовКаталогов);
			КонецЦикла;

			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти