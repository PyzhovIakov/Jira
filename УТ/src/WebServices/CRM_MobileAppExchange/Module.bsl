
#Область СлужебныеПроцедурыИФункции

Функция Registration(IMEI, SettingsID)
	
	Ответ = СтруктураОтвета();
	
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СостояниеПользователейСинхронизации.IMEI КАК IMEI,
	|	CRM_СостояниеПользователейСинхронизации.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.CRM_СостояниеПользователейСинхронизации КАК CRM_СостояниеПользователейСинхронизации
	|ГДЕ
	|	CRM_СостояниеПользователейСинхронизации.Идентификатор = &SettingsID";
	Запрос.УстановитьПараметр("SettingsID", SettingsID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Ответ.hasError = Истина;
		Ответ.errordesc = "(Registration)Пользователь с таким идентификатором не зарегистрирован";
		Возврат ОтветВJSON(Ответ);
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.CRM_СостояниеПользователейСинхронизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Идентификатор.Установить(SettingsID);
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.IMEI = IMEI;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	СтрокаНастроек = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПолучитьФайлНастроекПользователя(SettingsID);
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ.hasData = Истина;
	Ответ.data = XMLСтрока(СтрокаНастроек);
	Возврат ОтветВJSON(Ответ);
	
КонецФункции

Функция GetSettings(SettingsID)
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	СтрокаНастроек = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПолучитьФайлНастроекПользователя(SettingsID);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат XMLСтрока(СтрокаНастроек); 
КонецФункции

Функция PutData(SettingsID, Data)
	
	Ответ = СтруктураОтвета();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(SettingsID);
	
	ДанныеЗагрузки = Base64Значение(Data);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	ФайлЗагрузки = ПолучитьИмяВременногоФайла("xml");
	ДанныеЗагрузки.Записать(ФайлЗагрузки);
	ОбработкаЗагрузки = Обработки.CRM_УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаЗагрузки.ИмяФайлаОбмена = ФайлЗагрузки;
	ОбработкаЗагрузки.БезопаснаяЗагрузка = Ложь;
	ОбработкаЗагрузки.ЗагружатьДанныеВРежимеОбмена = Истина;
	ОбработкаЗагрузки.ОптимизированнаяЗаписьОбъектов = Истина;
	ОбработкаЗагрузки.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	ОбработкаЗагрузки.РежимОбмена = "Загрузка";
	ОбработкаЗагрузки.УзелОбменаiCRM = УзелОбмена;
	РезультатЗагрузки = ОбработкаЗагрузки.ВыгрузитьДанныеCRM();
	УдалитьФайлы(ФайлЗагрузки);
	УстановитьПривилегированныйРежим(Ложь);
	Если НЕ РезультатЗагрузки.ЕстьОшибки Тогда
		Возврат ОтветВJSON(Ответ);
	Иначе
		Ответ.hasError = Истина;
		Ответ.errordesc = "(PutData)" + РезультатЗагрузки.ОписаниеОшибки;
		Возврат ОтветВJSON(Ответ);
	КонецЕсли;
	
КонецФункции

Функция GetData(DataID)
	
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляВыгрузкиВiCRM.ИдентификаторФайла КАК ИдентификаторФайла,
	|	ДанныеДляВыгрузкиВiCRM.Размер КАК Размер,
	|	ДанныеДляВыгрузкиВiCRM.ДанныеФайла КАК ДанныеФайла,
	|	ДанныеДляВыгрузкиВiCRM.ВремяФайла КАК ВремяФайла
	|ИЗ
	|	РегистрСведений.CRM_ДанныеДляВыгрузкиВiCRM КАК ДанныеДляВыгрузкиВiCRM
	|ГДЕ
	|	ДанныеДляВыгрузкиВiCRM.ИдентификаторФайла = &DataID
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляВыгрузкиВiCRM.ВремяФайла";
	Запрос.УстановитьПараметр("DataID", DataID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Нет данных для выгрузки";
	КонецЕсли;	
	Выборка = Результат.Выгрузить();
	Если Выборка.Количество() > 0 Тогда
		Для Каждого Строка Из Выборка Цикл
			ДанныеВыгрузки = Строка.ДанныеФайла;
			
			ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
			Объект = ФабрикаXDTO.Создать(ТипХранилище, ДанныеВыгрузки);
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(Запись, Объект);
			Строка = Запись.Закрыть();
			
			Возврат Строка; 
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат "Нет данных для выгрузки";
КонецФункции

Функция GetDataID(SettingsID)
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(SettingsID);
	Если УзелОбмена.Пустая() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Нет данных для выгрузки";
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.CRM_ДатыОбращенийiCRM.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УзелОбмена = УзелОбмена;
	МенеджерЗаписи.ДатаПоследнегоОбращения = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СостояниеПользователейСинхронизации.IMEI КАК IMEI,
	|	CRM_СостояниеПользователейСинхронизации.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.CRM_СостояниеПользователейСинхронизации КАК CRM_СостояниеПользователейСинхронизации
	|ГДЕ
	|	CRM_СостояниеПользователейСинхронизации.Идентификатор = &SettingsID";
	Запрос.УстановитьПараметр("SettingsID", SettingsID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Нет данных для выгрузки";
	КонецЕсли;	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеДляВыгрузкиВiCRM.ИдентификаторФайла КАК ИдентификаторФайла,
		|	ДанныеДляВыгрузкиВiCRM.Размер КАК Размер,
		|	ДанныеДляВыгрузкиВiCRM.ДанныеФайла КАК ДанныеФайла,
		|	ДанныеДляВыгрузкиВiCRM.ВремяФайла КАК ВремяФайла
		|ИЗ
		|	РегистрСведений.CRM_ДанныеДляВыгрузкиВiCRM КАК ДанныеДляВыгрузкиВiCRM
		|ГДЕ
		|	ДанныеДляВыгрузкиВiCRM.УзелОбмена = &УзелОбмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляВыгрузкиВiCRM.ВремяФайла";
		Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			УстановитьПривилегированныйРежим(Ложь);
			Возврат "Нет данных для выгрузки";
		КонецЕсли;	
		Выборка = Результат.Выгрузить();
		Если Выборка.Количество() > 0 Тогда
			ДанныеВыгрузки = Новый ЗаписьXML;
			ДанныеВыгрузки.УстановитьСтроку();
			ДанныеВыгрузки.ЗаписатьНачалоЭлемента("IDStruc");
			Для Каждого Строка Из Выборка Цикл
				ДанныеВыгрузки.ЗаписатьНачалоЭлемента("ID");
				ДанныеВыгрузки.ЗаписатьАтрибут("Value", Строка.ИдентификаторФайла);
				ДанныеВыгрузки.ЗаписатьКонецЭлемента(); 
			КонецЦикла;
			ДанныеВыгрузки.ЗаписатьКонецЭлемента();
			УстановитьПривилегированныйРежим(Ложь);
			Возврат ДанныеВыгрузки.Закрыть();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Нет данных для выгрузки";
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат "Нет данных для выгрузки";

КонецФункции

Функция PutConfirmation(DataID)
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляВыгрузкиВiCRM.ИдентификаторФайла КАК ИдентификаторФайла,
	|	ДанныеДляВыгрузкиВiCRM.Размер КАК Размер,
	|	ДанныеДляВыгрузкиВiCRM.ДанныеФайла КАК ДанныеФайла,
	|	ДанныеДляВыгрузкиВiCRM.ВремяФайла КАК ВремяФайла
	|ИЗ
	|	РегистрСведений.CRM_ДанныеДляВыгрузкиВiCRM КАК ДанныеДляВыгрузкиВiCRM
	|ГДЕ
	|	ДанныеДляВыгрузкиВiCRM.ИдентификаторФайла = &DataID
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляВыгрузкиВiCRM.ВремяФайла";
	Запрос.УстановитьПараметр("DataID", DataID);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Нет данных для выгрузки";
	КонецЕсли;
	НаборРегистра = РегистрыСведений.CRM_ДанныеДляВыгрузкиВiCRM.СоздатьНаборЗаписей();
	НаборРегистра.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых", Истина);
	НаборРегистра.Отбор.ИдентификаторФайла.Установить(DataID);
	НаборРегистра.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат "Принято";
КонецФункции

Функция GetUpdate(DataID, Data, SettingsID)
	УстановитьПривилегированныйРежим(Истина);
	//ПараметрыСеанса.CRM_ИмяСервисаСеанса = "CRM_MobileAppExchange"; 
	//Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().РазрешенаРаботаСервиса() Тогда
	//	УстановитьПривилегированныйРежим(Ложь);
	//	Возврат "Работа приложения заблокирована";
	//КонецЕсли;
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(SettingsID);
	Если DataID = "СостоянияИнтереса" Тогда
		Состояние = Справочники.CRM_СостоянияИнтересов.НайтиПокоду(Data);
		Если Не Состояние.Пустая() Тогда
			УстановитьПривилегированныйРежим(Ложь);
			Возврат XMLСтрока(ЗначениеЗаполнено(Состояние.ОбязательноеПланированиеАктивности));
		КонецЕсли;	
	КонецЕсли;	
	Если DataID = "ПоискКлиентов" Тогда
		ТаблицаКлиентов = НайтиКонтрагентов(Data, УзелОбмена);
		ТаблицаКлиентов.Колонки.Удалить("Ссылка");
		Сжатие = Новый СжатиеДанных(6);
		ДанныеФайла = Новый ХранилищеЗначения(ТаблицаКлиентов, Сжатие);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		Объект = ФабрикаXDTO.Создать(ТипХранилище, ДанныеФайла);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Объект);
		СтрокаВозврата = Запись.Закрыть();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;	
	Если DataID = "ЗагрузкаКлиентов" Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Data);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипХранилище);
		Хранилище = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		
		ТаблицаКлиентов = Хранилище.Получить();
		МассивСсылок = ПолучитьМассивСсылокДляВыгрузкиКлиентов(ТаблицаКлиентов);
		СтрокаВозврата = ВыгрузитьПорциюДанных(МассивСсылок, УзелОбмена);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;	
	Если DataID = "ПоискНоменклатуры" Тогда
		ТаблицаКлиентов = НайтиНоменклатуру(Data);
		ТаблицаКлиентов.Колонки.Удалить("Ссылка");
		Сжатие = Новый СжатиеДанных(6);
		ДанныеФайла = Новый ХранилищеЗначения(ТаблицаКлиентов, Сжатие);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		Объект = ФабрикаXDTO.Создать(ТипХранилище, ДанныеФайла);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Объект);
		СтрокаВозврата = Запись.Закрыть();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;
	Если DataID = "ЗагрузкаНоменклатуры" Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Data);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипХранилище);
		Хранилище = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		
		ТаблицаНоменклатуры = Хранилище.Получить();
		МассивСсылок = ПолучитьМассивСсылокДляВыгрузкиНоменклатуры(ТаблицаНоменклатуры);
		СтрокаВозврата = ВыгрузитьПорциюДанных(МассивСсылок, УзелОбмена);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;
	Если DataID = "ЗагрузкаДокументов" Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Data);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипХранилище);
		Хранилище = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		
		СтруктураПараметров = Хранилище.Получить();
		МассивСсылок = ПолучитьМассивСсылокДляВыгрузкиДокументов(СтруктураПараметров);
		СтрокаВозврата = ВыгрузитьПорциюДанных(МассивСсылок, УзелОбмена);
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;
	Если DataID = "СсылкиДляПроверки" Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(Data);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипХранилище);
		Хранилище = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ТаблицаДляПроверки = Хранилище.Получить();
		ОбработатьТаблицуПомеченныхссылок(ТаблицаДляПроверки);
		Сжатие = Новый СжатиеДанных(6);
		ДанныеФайла = Новый ХранилищеЗначения(ТаблицаДляПроверки, Сжатие);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		ОбъектXDTO = ФабрикаXDTO.Создать(ТипХранилище, ДанныеФайла);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
		СтрокаВозврата = Запись.Закрыть();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат СтрокаВозврата;	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

Процедура ОбработатьТаблицуПомеченныхссылок(ТаблицаДляПроверки)
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТаблицаДляЗагрузки =
			ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("СоответствиеОбъектовCRM_iCRM");
	Иначе  
		ТаблицаДляЗагрузки =
			ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("СоответствиеОбъектовУТ_iCRM");
	КонецЕсли;
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДляЗагрузки.Область(1, 1,
		 ТаблицаДляЗагрузки.ВысотаТаблицы,
		 ТаблицаДляЗагрузки.ШиринаТаблицы));
	Построитель.Выполнить();
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаДляПроверки Цикл
		СтрокаТипа = ТаблицаЗначений.Найти(Строка.ВидОбъекта + "." + Строка.ТипОбъекта, "iCRM");
		ИмяОбъекта = СтрокаТипа.CRM;
		Поз = СтрНайти(ИмяОбъекта, ".");
		ВидОбъекта = Лев(ИмяОбъекта, Поз - 1);
		ТипОбъекта = СтрЗаменить(ИмяОбъекта, ВидОбъекта + ".", "");
		Если ВидОбъекта = "Справочник" Тогда
			НайденнаяСсылка = Справочники[ТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Идентификатор));
		ИначеЕсли ВидОбъекта = "Документ" Тогда
			НайденнаяСсылка = Документы[ТипОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Идентификатор));	
		КонецЕсли;	
		Строка.МожноУдалять = НайденнаяСсылка.Пустая() ИЛИ (НайденнаяСсылка.получитьОбъект() = Неопределено);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьМассивСсылокДляВыгрузкиДокументов(СтруктураПараметров)
	Контрагент = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураПараметров.ИдКлиента));
	ДатаНачала = СтруктураПараметров.ДатаНачала;
	ДатаОкончания = СтруктураПараметров.ДатаОкончания;
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// BSLLS:QueryToMissingMetadata-off
		// Используется в спарках
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	CRM_Интерес.Партнер = &Партнер
		|	И CRM_Интерес.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_СчетНаОплатуПокупателю.Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК CRM_СчетНаОплатуПокупателю
		|ГДЕ
		|	CRM_СчетНаОплатуПокупателю.Партнер = &Партнер
		|	И CRM_СчетНаОплатуПокупателю.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ CRM_СчетНаОплатуПокупателю.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоммерческоеПредложениеКлиенту.Ссылка
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Клиент = &Партнер
		|	И КоммерческоеПредложениеКлиенту.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления"; 
		// BSLLS:QueryToMissingMetadata-on
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	CRM_Интерес.Партнер = &Партнер
		|	И CRM_Интерес.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_СчетНаОплатуПокупателю.Ссылка
		|ИЗ
		|	Документ.CRM_СчетНаОплатуПокупателю КАК CRM_СчетНаОплатуПокупателю
		|ГДЕ
		|	CRM_СчетНаОплатуПокупателю.Партнер = &Партнер
		|	И CRM_СчетНаОплатуПокупателю.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ CRM_СчетНаОплатуПокупателю.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КоммерческоеПредложениеКлиенту.Ссылка
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Партнер = &Партнер
		|	И КоммерческоеПредложениеКлиенту.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления";   
	КонецЕсли;
	Запрос.УстановитьПараметр("Партнер", Контрагент);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСсылок.Добавить(Выборка.Ссылка);	
	КонецЦикла;	
	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьМассивСсылокДляВыгрузкиКлиентов(ТаблицаКлиентов)
	УстановитьПривилегированныйРежим(Истина);
	МассивСсылок = Новый Массив;
	Для Каждого Строка Из ТаблицаКлиентов Цикл
		Если Строка.Загружать Тогда
			МассивСсылок.Добавить(Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ИД_Ссылки)));
		КонецЕсли;	
	КонецЦикла;	
	Запрос = Новый Запрос;
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Партнер В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец В(&МассивСсылок)";  
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец В(&МассивСсылок)";   
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МассивСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат МассивСсылок;
КонецФункции

Функция ПолучитьМассивСсылокДляВыгрузкиНоменклатуры(ТаблицаНоменклатуры)
	УстановитьПривилегированныйРежим(Истина);

	МассивСсылок = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	Для Каждого Строка Из ТаблицаНоменклатуры Цикл
		Если Строка.Загружать Тогда
			МассивСсылок.Добавить(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ИД_Ссылки)));
			МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ИД_Ссылки)));
		КонецЕсли;	
	КонецЦикла;	
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.Период);
			Набор.Отбор.ВидЦен.Установить(Выборка.ВидЦен);
			Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Набор.Прочитать();	
			Если Набор.Количество() > 0 Тогда
				МассивСсылок.Добавить(Набор);	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец В(&МассивНоменклатуры)";
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат МассивСсылок;
КонецФункции

Функция СтруктураДанныхКэша()
	
	ДанныеКэша = Новый Структура;
	ДанныеКэша.Вставить("ИНН",			"");
	ДанныеКэша.Вставить("ФИО",			"");
	ДанныеКэша.Вставить("Организация",	"");
	ДанныеКэша.Вставить("Телефон",		"");
	ДанныеКэша.Вставить("Email",		"");
	ДанныеКэша.Вставить("URL",			"");
	
	Возврат ДанныеКэша;
	
КонецФункции

Функция НайтиКонтрагентов(СтрокаПоиска, УзелОбмена)
	КэшПоиска = СтруктураДанныхКэша();
	КэшЗаполнения = СтруктураДанныхКэша();
	УсловияПоиска = Новый Массив;
	Если Не ПустаяСтрока(СтрокаПоиска) Тогда
		СтрокаПоискаНормализованная = НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоиска, КэшПоиска, КэшЗаполнения);
		УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
	КонецЕсли;
	Массивссылок = Новый Массив;
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, 1, Истина);
	Если НЕ ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		Массивссылок = РезультатПоиска.Элементы;
	КонецЕсли;
	Запрос = Новый Запрос;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ тмпСсылки
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Ссылка В(&Массивссылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	тмпСсылки.Ссылка КАК Ссылка,
		|	тмпСсылки.Ссылка.Наименование КАК Наименование,
		|	тмпСсылки.Ссылка.CRM_ИНН КАК ИНН
		|ИЗ
		|	тмпСсылки КАК тмпСсылки";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Партнеры.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ тмпСсылки
		               |ИЗ
		               |	Справочник.Партнеры КАК Партнеры
		               |ГДЕ
		               |	Партнеры.Ссылка В(&Массивссылок)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КонтактныеЛицаПартнеров.Владелец
		               |ИЗ
		               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		               |ГДЕ
		               |	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	тмпСсылки.Ссылка КАК Ссылка,
		               |	тмпСсылки.Ссылка.Наименование КАК Наименование,
		               |	"""" КАК ИНН
		               |ИЗ
		               |	тмпСсылки КАК тмпСсылки";
		
		Если УзелОбмена.ИспользоватьГруппыДоступаПартнеров Тогда
			Запрос.УстановитьПараметр("РазрешенныеГруппыДоступаПартнера",
				 УзелОбмена.ДоступныеГруппыДоступаПартнеров.ВыгрузитьКолонку("ГруппаДоступа"));
			Запрос.Текст = Запрос.Текст + "
		               |ГДЕ
		               |	тмпСсылки.Ссылка.ГруппаДоступа В (&РазрешенныеГруппыДоступаПартнера)";
		КонецЕсли;

	КонецЕсли;
	Запрос.УстановитьПараметр("Массивссылок", Массивссылок);
	ТаблицаКлиентов = Запрос.Выполнить().Выгрузить();
	ТаблицаКлиентов.Колонки.Добавить("ИД_Ссылки");
	ТаблицаКлиентов.Колонки.Добавить("Загружать");
	Для Каждого Строка Из ТаблицаКлиентов Цикл
		Строка.ИД_Ссылки = Строка.Ссылка.УникальныйИдентификатор();
		Строка.Загружать = Истина;
	КонецЦикла;	
	Возврат ТаблицаКлиентов;
КонецФункции

Функция НайтиНоменклатуру(СтрокаПоиска)
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
    // Запрос с полным сканированием таблицы, разделять смсла нет
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ Номенклатура.Артикул ПОДОБНО &СтрокаПоиска)
	|	И НЕ Номенклатура.ЭтоГруппа";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СокрЛП(СтрокаПоиска) + "%");
	ТаблицаКлиентов = Запрос.Выполнить().Выгрузить();
	ТаблицаКлиентов.Колонки.Добавить("ИД_Ссылки");
	ТаблицаКлиентов.Колонки.Добавить("Загружать");
	Для Каждого Строка Из ТаблицаКлиентов Цикл
		Строка.ИД_Ссылки = Строка.Ссылка.УникальныйИдентификатор();
		Строка.Загружать = Истина;
	КонецЦикла;	
	Возврат ТаблицаКлиентов;
КонецФункции

Функция НормализоватьСтрокуПоискаИДополнитьКэш(Знач СтрокаПоиска, КэшПоиска, КэшЗаполнения)
	
	Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Истина, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СтрокаПоиска, Ложь, "") Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ИНН) Тогда
			КэшПоиска.ИНН = СтрокаПоиска;
			КэшЗаполнения.ИНН = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли Взаимодействия.КорректноВведенНомерТелефона(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Телефон) Тогда
			КэшПоиска.Телефон = CRM_ПоискКонтактов.ФорматироватьНомерДляПоиска(СтрокаПоиска);
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаПоиска);
			КэшЗаполнения.Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураКИ.КодСтраны,
				 СтруктураКИ.КодГорода, СтруктураКИ.НомерТелефона, "",
				 "");
		КонецЕсли;
		СтрокаПоиска = КэшПоиска.Телефон;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(СтрокаПоиска, Истина) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Email) Тогда
			КэшПоиска.Email = СтрокаПоиска;
			КэшЗаполнения.Email = СтрокаПоиска;
		КонецЕсли;
		
	ИначеЕсли ЭтоURL(СтрокаПоиска) Тогда
		
		Если Не ЗначениеЗаполнено(КэшПоиска.URL) Тогда
			КэшПоиска.URL = СтрокаПоиска;
			КэшЗаполнения.URL = СтрокаПоиска;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КэшПоиска.ФИО) Тогда
			КэшПоиска.ФИО = СтрокаПоиска;
			КэшЗаполнения.ФИО = CRM_КлиентыСервер.ПривестиФИОКСтандартномуВиду(СтрокаПоиска);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КэшПоиска.Организация) Тогда
			КэшПоиска.Организация = СтрокаПоиска;
			КэшЗаполнения.Организация = СтрокаПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ЭтоURL(Знач Строка)
	
	Если СтрНайти(Строка, "https:") > 0
		Или СтрНайти(Строка, "http:") > 0 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка, УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьПорциюДанных(МассивОбъектовДляВыгрузки, Узел)
	УстановитьПривилегированныйРежим(Истина);
	ОбработкаОбмена = Обработки.CRM_УниверсальныйОбменДаннымиXML.Создать();
	
	ИмяФайлаПравил = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_ПравилаОбмена");
	Иначе 
		МакетПравил = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.ПолучитьМакет("CRM_Модуль_ПравилаОбмена");
	КонецЕсли;
	МакетПравил.Записать(ИмяФайлаПравил);
	
	//ДДПравил = Узел.ПравилаОбмена.Получить();
	//ДДПравил.Записать(ИмяФайлаПравил);	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
	ОбработкаОбмена.ЗагрузитьПравилаОбмена();
	ОбработкаОбмена.ИнициализироватьПервоначальныеЗначенияПараметров();
	ОбработкаОбмена.Параметры.Очистить();
	ОбработкаОбмена.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0;
	УстановитьУзелОбменаУСтрокДерева(ОбработкаОбмена.ТаблицаПравилВыгрузки, Узел);
	
	РезультатВыгрузки = Ложь;
	ОбработкаОбмена.ВыполнитьВыгрузкуCRM(МассивОбъектовДляВыгрузки, РезультатВыгрузки);
	Строка = "";
	Если РезультатВыгрузки Тогда  
		
		ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяФайлаОбмена);
		Сжатие = Новый СжатиеДанных(6);
	
		ДанныеФайла = Новый ХранилищеЗначения(ДанныеВыгрузки, Сжатие);
		ТипХранилище = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueStorage");
		Объект = ФабрикаXDTO.Создать(ТипХранилище, ДанныеФайла);
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Объект);
		Строка = Запись.Закрыть();
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаОбмена);
	
	УдалитьФайлы(ИмяФайлаПравил);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Строка;
КонецФункции

Функция Ping()
	Возврат "OK";
КонецФункции

Функция GetLockInfo(SettingsID)
	
	СтруктураБлокировки = Новый Структура("Блокировано, Статус", Истина, 0);
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(SettingsID);
	Если УзелОбмена.Пустая() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		СтруктураБлокировки.Статус = -1;
		Возврат ОтветВJSON(СтруктураБлокировки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА CRM_СостояниеПользователейСинхронизации.Состояние = НЕОПРЕДЕЛЕНО
		|				ИЛИ CRM_СостояниеПользователейСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияСинхронизацииПользователя.Отключен)
		|			ТОГДА -1
		|		КОГДА CRM_СостояниеПользователейСинхронизации.Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияСинхронизацииПользователя.Блокирован)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Статус,
		|	ВЫБОР
		|		КОГДА CRM_СостояниеПользователейСинхронизации.Состояние = НЕОПРЕДЕЛЕНО
		|				ИЛИ CRM_СостояниеПользователейСинхронизации.Состояние <> ЗНАЧЕНИЕ(Перечисление.CRM_СостоянияСинхронизацииПользователя.Активен)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Блокировано
		|ИЗ
		|	РегистрСведений.CRM_СостояниеПользователейСинхронизации КАК CRM_СостояниеПользователейСинхронизации
		|ГДЕ
		|	CRM_СостояниеПользователейСинхронизации.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", SettingsID);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		СтруктураБлокировки.Статус = -1;
		Возврат ОтветВJSON(СтруктураБлокировки);
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураБлокировки.Блокировано = Выборка.Блокировано;
	СтруктураБлокировки.Статус = Выборка.Статус;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтветВJSON(СтруктураБлокировки);
	
КонецФункции

Функция ОтветВJSON(ОтветСтруктура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОтветСтруктура, , "ПреобразованиеВJSON", CRM_СинхронизацияСiCRMНовый);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция СтруктураОтвета()
	
	Ответ = Новый Структура();
	
	Ответ.Вставить("desc", "");
	Ответ.Вставить("hasData", Ложь);
	Ответ.Вставить("data", "");
	Ответ.Вставить("hasError", Ложь);
	Ответ.Вставить("errordesc", "");
	
	Возврат Ответ;
	
КонецФункции

Функция GetLogs(SettingsID)
	
	Ответ = СтруктураОтвета();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелОбмена = ПланыОбмена.CRM_СинхронизацияСМобильнымПриложениемНовый.НайтиПоКоду(SettingsID);
	Если УзелОбмена.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Ответ.hasError = Истина;
		Ответ.errordesc = "(GetLogs)Не найден узел обмена с мобильным приложением";
		
		Возврат ОтветВJSON(Ответ);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СостояниеПользователейСинхронизации.IMEI КАК IMEI,
	|	CRM_СостояниеПользователейСинхронизации.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.CRM_СостояниеПользователейСинхронизации КАК CRM_СостояниеПользователейСинхронизации
	|ГДЕ
	|	CRM_СостояниеПользователейСинхронизации.Идентификатор = &SettingsID";
	
	Запрос.УстановитьПараметр("SettingsID", SettingsID);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Ответ.hasError = Истина;
		Ответ.errordesc = "(GetLogs)Не найден пользователь синхронизации";
		
		Возврат ОтветВJSON(Ответ);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ЛогиСобытийiCRM.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	CRM_ЛогиСобытийiCRM.ОписаниеСобытия КАК ОписаниеСобытия,
	|	CRM_ЛогиСобытийiCRM.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	РегистрСведений.CRM_ЛогиСобытийiCRM КАК CRM_ЛогиСобытийiCRM
	|ГДЕ
	|	CRM_ЛогиСобытийiCRM.УзелОбмена = &УзелОбмена
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ЛогиСобытийiCRM.ДатаСобытия";
	
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	ЛогиТЗ = Запрос.Выполнить().Выгрузить();
	
	МассивЛогов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЛогиТЗ);
	
	Ответ.hasData = Истина;
	Ответ.data = МассивЛогов;
	
	JSONРезультат = ОтветВJSON(Ответ);
	
	// Очистка забранных логов
	НаборРегистра = РегистрыСведений.CRM_ЛогиСобытийiCRM.СоздатьНаборЗаписей();
	НаборРегистра.ДополнительныеСвойства.Вставить("НеВыполнятьКонтрольУдаляемых", Истина);
	НаборРегистра.Отбор.УзелОбмена.Установить(УзелОбмена);
	НаборРегистра.Записать(Истина);
	
	// test
	// РегистрыСведений.CRM_ЛогиСобытийiCRM.ЗаписатьСобытие("Привет из бэкофиса",
	//	 Перечисления.CRM_ТипыСобытийЛогаiCRM.Информация,
	//	 УзелОбмена);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат JSONРезультат;

КонецФункции

#КонецОбласти
