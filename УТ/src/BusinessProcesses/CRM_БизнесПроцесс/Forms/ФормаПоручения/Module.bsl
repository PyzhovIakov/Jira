
#Область ОписаниеПеременных

// ШаблоныЭлементовФорм
&НаКлиенте
Перем ШаблоныЭлементов_Формы;

&НаКлиенте
Перем ИсполнительДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОткрытьФормуВыбораИсполнителя = ХранилищеОбщихНастроек.Загрузить("БизнесПроцессы", "ОткрытьФормуВыбораИсполнителя");
	ТипИсполнителяПользователь = "Пользователь";
	ТипИсполнителяРоль = "Роль";
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И Параметры.ЗначенияЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	ТипКлиента = CRM_КлиентыСервер.ПолучитьТипКлиента("БизнесПроцессы",
		Объект.Партнер, Объект.ПотенциальныйКлиент, CRM_ИспользоватьПотенциальныхКлиентов);
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		ПолучитьТочкиСтарта();
		
		Если Объект.Ссылка.Пустая() Тогда
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
			НаборЭтапов.Прочитать();
			
			Если ЗначениеЗаполнено(Объект.Проект) Тогда		
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
					НаборИсполнителей.Прочитать();
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
			
			Этапы_Значение = НаборЭтапов.Выгрузить();
			Этапы_Значение.Колонки.Добавить("ДатаНачалаВходящая", Новый ОписаниеТипов("Дата"));
			Этапы_Значение.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
			Этапы_Значение.Колонки.Добавить("ДатаВыполнения", Новый ОписаниеТипов("Дата"));
			НачПериода	= ?(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,
				 ТекущаяДатаСеанса()) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,
				 ТекущаяДатаСеанса()),
				 Объект.ДатаСтарта);
			CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута,
				 Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение,
				 НачПериода);
			
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЭтапов.Прочитать();
			
			Этапы_Значение = НаборЭтапов.Выгрузить();
			
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
		
		Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
			Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
				Если СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
					Исполнитель		= Объект.Автор;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Исполнитель		= СтрокаНабора.Исполнитель;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Исполнитель		= СтрокаНабора.Исполнитель;
				КонецЕсли;
				СтрокаЭтапа = Этапы_Значение.Найти(СтрокаНабора.ТочкаМаршрута, "ТочкаМаршрута");
				Если НЕ СтрокаЭтапа = Неопределено Тогда
					Попытка
						СрокИсполнения = СтрокаЭтапа.ДатаВыполнения;
					Исключение
						СрокИсполнения = НачалоДня(ТекущаяДатаСеанса()) + ВернутьВремяКонцаРабочегоДня() * 60 * 60;
					КонецПопытки;
				КонецЕсли;
				ТочкаИсполнения	= НаборЭтапов[0].ТочкаМаршрута;
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
				КонтролироватьВыполнение	= НаборЭтапов[1].Используется;
				Если СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
					Контролер		= Объект.Автор;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Контролер		= СтрокаНабора.Исполнитель;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Контролер		= СтрокаНабора.Исполнитель;
				КонецЕсли;
				СтрокаЭтапа = Этапы_Значение.Найти(СтрокаНабора.ТочкаМаршрута, "ТочкаМаршрута");
				Если НЕ СтрокаЭтапа = Неопределено Тогда
					Попытка
						СрокКонтроля = СтрокаЭтапа.ДатаВыполнения;
					Исключение
						ИспользуемыйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
						Попытка
							СледующийДень = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(ИспользуемыйКалендарь, ТекущаяДатаСеанса(), 1);
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен календарный график!"
	"Расчет без учета календаря!';en='Schedule not filled!"
	"Calculation without calendar!'"));
							//
							СекундВДне = 24 * 60 * 60;
							СледующийДень = ТекущаяДатаСеанса() + СекундВДне;
							Пока ДеньНедели(СледующийДень) = 6 Или ДеньНедели(СледующийДень) = 7 Цикл
								СледующийДень = СледующийДень + СекундВДне;
							КонецЦикла;
						КонецПопытки;
						СрокКонтроля = НачалоДня(СледующийДень) + ВернутьВремяКонцаРабочегоДня() * 60 * 60;
						
					КонецПопытки;
				КонецЕсли;
				ТочкаКонтроля = НаборЭтапов[1].ТочкаМаршрута;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидимостьГруппаСвязатьСРеквизиты = ЗначениеЗаполнено(Объект.Проект) Или ЗначениеЗаполнено(Объект.Этап)
		Или ЗначениеЗаполнено(Объект.Партнер) Или ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	
	Если ВидимостьГруппаСвязатьСРеквизиты Тогда
		
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
		Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Ложь;
		Элементы.ДекорацияСвязатьС.Видимость = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьСвойстваЭлементовФормы();
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Объект.Предмет);
	Иначе
		Элементы.ПредметПредставление.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.Предмет) 
	И ((ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Объект.Предмет);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;

		// В случае поручения в описание не переносим текст писем, только тему и инфомрацию, что
		// поручение введено на основании такого-то письма.
		Объект.Описание = "Тема: " + Объект.Предмет.Тема + "
						   |Введено на основании: " + Объект.Предмет;
	КонецЕсли;
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.Предмет) 
	И ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.CRM_Решения") И Не Объект.Предмет.ЭтоГруппа Тогда
		Объект.Наименование = Объект.Предмет.Наименование;
		Объект.Описание = "Тема: " + Объект.Предмет.Наименование + "
						   |Создано на основании статьи Базы знаний, тема: " + Объект.Предмет;
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
	Элементы.ФормаСтарт.Видимость = Не Объект.Стартован;
	
	Элементы.ЗавершитьБизнесПроцессДосрочно.Видимость = (Не ЭтоНовый
		 И Объект.КартаМаршрута.РазрешеноДосрочноеЗавершение И (Пользователи.ЭтоПолноправныйПользователь()
		 ИЛИ Объект.Автор = Пользователи.ТекущийПользователь()));
	
	Если ЭтоНовый Тогда
		Если Параметры.Свойство("Основание") Тогда
			Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Исполнитель = Параметры.Основание.Ответственный;
				Объект.Наименование = "";
			ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда	
				Если Параметры.Основание.Свойство("Основание") Тогда
					Если ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
						Исполнитель = Параметры.Основание.Основание.Ответственный;
						Объект.Наименование = "";
					ИначеЕсли ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
						ПартнерОснования = Параметры.Основание.Основание.АбонентКонтакт;
						Если Не ПартнерОснования = Справочники.Партнеры.ПустаяСсылка() Тогда
							Если ТипЗнч(ПартнерОснования) = Тип("СправочникСсылка.Партнеры") Тогда
								Объект.Партнер = ПартнерОснования;
								Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
							ИначеЕсли ТипЗнч(ПартнерОснования) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
								Объект.КонтактноеЛицо = ПартнерОснования;
								Объект.Партнер = ПартнерОснования.Владелец;
							ИначеЕсли ТипЗнч(ПартнерОснования) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
								Объект.ПотенциальныйКлиент = ПартнерОснования;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЭтоНовый 
		И Параметры.Свойство("Исполнитель")
		И ЗначениеЗаполнено(Параметры.Исполнитель) Тогда
		Исполнитель = Параметры.Исполнитель;
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипИсполнителя = ТипИсполнителяПользователь;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ТипИсполнителя = ТипИсполнителяРоль;
		КонецЕсли;
		ОткрытьФормуВыбораИсполнителя = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Исполнитель) Тогда
		Если ОткрытьФормуВыбораИсполнителя Тогда
			Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			ТипИсполнителя = ТипИсполнителяПользователь;
		Иначе
			Исполнитель = Справочники.РолиИсполнителей.ПустаяСсылка();
			ТипИсполнителя = ТипИсполнителяРоль;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипИсполнителя = ТипИсполнителяПользователь;
		ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ТипИсполнителя = ТипИсполнителяРоль;
		КонецЕсли;
		ОткрытьФормуВыбораИсполнителя = Ложь;
	КонецЕсли;

	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент");

	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
	Если ТипКлиента = "Клиент" Тогда
		Объект.ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	Иначе
		Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СохраненоПоручение", Объект.Предмет);
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
			 Неопределено, Параметры.ОбновлятьКалендарь),
			 ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьАРМ");
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("БизнесПроцессы", "ОткрытьФормуВыбораИсполнителя", ТипИсполнителя = "Пользователь");
	ХранилищеОбщихНастроек.Сохранить("БизнесПроцессы", "ТипКлиента", ТипКлиента);
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Исполнители бизнес-процесса.
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборИсполнителей.Прочитать();	
	
	ТекущаяЗадача = ПолучитьТекущуюЗадачу(); 
	НоваяДатаЗадачи = Неопределено;
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Исполнитель), Исполнитель,
				 Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
			НаборЭтапов[0].ДатаВыполнения = СрокИсполнения;
			НаборЭтапов[0].ВариантВыполнения = ?(КонтролироватьВыполнение, 1, 0);
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута,
				 НаборЭтапов[0].ВариантВыполнения,
				 Объект.НомерВерсииКартыМаршрута);
			Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
				НоваяДатаЗадачи = СрокИсполнения;
			КонецЕсли;
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			НаборЭтапов[1].ДатаВыполнения = СрокКонтроля;
			НаборЭтапов[1].Используется	= КонтролироватьВыполнение;
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Контролер), Контролер,
				 Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
			Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
				НоваяДатаЗадачи = СрокКонтроля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		ДанныеИзменены = ТекущаяЗадача.СрокИсполнения <> НоваяДатаЗадачи
		             Или ТекущаяЗадача.CRM_Партнер <> Объект.Партнер
		             Или ТекущаяЗадача.CRM_КонтактноеЛицо <> Объект.КонтактноеЛицо
		             Или ТекущаяЗадача.CRM_ПотенциальныйКлиент <> Объект.ПотенциальныйКлиент;
		
		Если ДанныеИзменены Тогда
			ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.CRM_Партнер = Объект.Партнер;
			ЗадачаОбъект.CRM_КонтактноеЛицо = Объект.КонтактноеЛицо;
			ЗадачаОбъект.CRM_ПотенциальныйКлиент = Объект.ПотенциальныйКлиент;
			
			Если ЗначениеЗаполнено(НоваяДатаЗадачи) Тогда
				ЗадачаОбъект.СрокИсполнения = НоваяДатаЗадачи;
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
	CRM_БизнесПроцессыИЗадачиСервер.ЗаписатьГрупповыеПредметы(ЭтотОбъект, ТекущийОбъект.Ссылка);
	
	////
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		МодульCRM_БизнесПроцессыИЗадачиВызовСервера =
			CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_БизнесПроцессыИЗадачиВызовСервера");
		МодульCRM_БизнесПроцессыИЗадачиВызовСервера.ДобавитьУровниДоступаПартнеруПоПользователюИлиРоли(ТекущийОбъект.Партнер,
			 Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ КонтролироватьВыполнение Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Контролер"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СрокКонтроля"));
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	Если ОткрытьФормуВыбораИсполнителя Тогда
		ВыбранныйИсполнитель = Исполнитель;
		Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
		Оповещение = Новый ОписаниеОповещения("ВыборПользователяРолиЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("РежимВыбора, ТекущаяСтрока", Истина, ВыбранныйИсполнитель);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Не ЗначениеЗаполнено(Исполнитель) Тогда
		ВыбранныйИсполнитель = Исполнитель;
		Исполнитель = ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка");
		
		Оповещение = Новый ОписаниеОповещения("ВыборПользователяРолиЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("РежимВыбора, ТекущаяСтрока", Истина, ВыбранныйИсполнитель);
		ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если СписокФайловПисьма.Количество() > 0 Тогда
			НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
			ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы, ЭтотОбъект, , , , НовоеОповещение, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокФайловПисьма.Количество() = 0 Тогда
		CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;

	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяРолиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		Исполнитель = ВыбранноеЗначение;
	КонецЕсли;
	
	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы, ЭтотОбъект, , , ,
			 НовоеОповещение,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.БизнесПроцесс = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И (Источник.ВладелецФормы = ЭтотОбъект ИЛИ
			(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.ВладелецФормы, "ВладелецФормы") И Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект)) Тогда
			
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				Объект.КонтактноеЛицо	= Параметр;
			КонецЕсли;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = (ЗначениеЗаполнено(Объект.ПотенциальныйКлиент)
				 И Не ЗначениеЗаполнено(Объект.Партнер));
			Элементы.ГруппаКонтактноеЛицо.Видимость = Не Элементы.ГруппаПотенциальныйКлиент.Видимость;
			Модифицированность = Истина;
			Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	CRM_ТрудозатратыКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_Партнер) Тогда
		Объект.Партнер = Объект.Проект.CRM_Партнер;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВыполнениеПриИзменении(Элемент)
	
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.АвтоОтметкаНезаполненного = КонтролироватьВыполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	CRM_ОбщегоНазначенияКлиент.ОткрытьПредмет(Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяИсполнения, Элемент, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяКонтроляНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяКонтроля, Элемент, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСНажатие(Элемент)
	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ПриИзмененииПроектаНаСервере();
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы.Количество() > 0 Тогда 
														// Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		ЭлементСИдентификатором = Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы[0];
		CRM_ШаблоныЭлементовФормКлиент.ОбновитьЗначениеРеквизита(ШаблоныЭлементов_Формы[Прав(ЭлементСИдентификатором.Имя,
			 37)],
			"ПереданныйКлиент", Объект.Партнер);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Бизнес-процесс не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотрКромеИсключений);
	ПараметрыФормы.Вставить("CRM_ТекущаяЗадача", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	
	НастроитьОтображениеКлиентаКонтакта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьБизнесПроцессДосрочноЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения", , ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать_Клиента(Команда)
	// ШаблоныЭлементовФорм
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("Ответственный, ПотенциальныйКлиент", Объект.Ответственный, Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура Создать_Контакт(Команда)
	
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ГруппаКонтактноеЛицо.Видимость = Истина; // отобразить поле выбора партнера
	Элементы.CRM_КонтактноеЛицо.Видимость = Ложь;
	Элементы.CRM_Партнер.АвтоОтметкаНезаполненного = Истина;
	
	// ШаблоныЭлементовФорм
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("ПотенциальныйКлиент, ТолькоКонтакт", Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьТочкиСтарта()
		
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ТолькоПросмотрКромеИсключений = ?(Объект.Стартован, НЕ Объект.Автор = Пользователи.АвторизованныйПользователь(), Ложь);
	
	Элементы.Записать.Доступность = НЕ ТолькоПросмотрКромеИсключений;
	Элементы.ЗавершитьБизнесПроцессДосрочно.Доступность = НЕ ТолькоПросмотрКромеИсключений;
	Элементы.Перенаправить.Доступность = НЕ ТолькоПросмотрКромеИсключений;
	Элементы.ГруппаИЛИ.Доступность = НЕ ТолькоПросмотрКромеИсключений;
	Элементы.ФормаСтарт.Доступность = НЕ ТолькоПросмотрКромеИсключений;
	
	Элементы.ГруппаИсполнитель.ТолькоПросмотр = ТолькоПросмотрКромеИсключений;
	
	ЭтоИсполнитель = Ложь;
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		ЭтоИсполнитель = (Исполнитель = Пользователи.ТекущийПользователь());
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ЭтоИсполнитель = CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(Пользователи.ТекущийПользователь(), Исполнитель);
	КонецЕсли;
	
	РедактироватьСрокВыполненияЗадач = Объект.КартаМаршрута.РедактироватьСрокВыполненияЗадач И ЭтоИсполнитель;
	Элементы.ГруппаСрок.ТолькоПросмотр	= НЕ (ЭтоНовый
		 ИЛИ Объект.КартаМаршрута.РедактироватьСрокВыполненияЗадач
		 ИЛИ Пользователи.ЭтоПолноправныйПользователь()
		 ИЛИ Объект.Автор = Пользователи.ТекущийПользователь());
	Элементы.Записать.Доступность = НЕ Элементы.ГруппаСрок.ТолькоПросмотр;
	
	Элементы.Наименование.ТолькоПросмотр = ТолькоПросмотрКромеИсключений;
	Элементы.ГруппаЦентр.ТолькоПросмотр = ТолькоПросмотрКромеИсключений;
	Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = ТолькоПросмотрКромеИсключений;
	Элементы.ГруппаПодвал.ТолькоПросмотр = ТолькоПросмотрКромеИсключений;
	
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.АвтоОтметкаНезаполненного = КонтролироватьВыполнение;
	
	ТекущаяЗадача = ПолучитьТекущуюЗадачу();
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Элементы.ГруппаПроверка.Доступность = Не (ТекущаяЗадача.CRM_ТочкаМаршрута.Наименование = "Проверить");
	КонецЕсли;
	
	Элементы.ГруппаИсполнитель.Доступность = Не Объект.Стартован;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(СрокИсполнения);
	ДатаИсполнения	= ДатаВремя.Дата;
	ВремяИсполнения	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(СрокКонтроля);
	ДатаКонтроля	= ДатаВремя.Дата;
	ВремяКонтроля	= ДатаВремя.Время;
	
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	
	Элементы.ВремяИсполнения.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ВремяКонтроля.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	
	Если Элементы.CRM_Проект.Видимость Тогда
		Если ЗначениеЗаполнено(Объект.Проект) Тогда
			Элементы.CRM_Этап.Видимость = Истина;
		Иначе
			Элементы.CRM_Этап.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПотенциальныйКлиент.Видимость = (ЗначениеЗаполнено(Объект.ПотенциальныйКлиент)
		 И Не ЗначениеЗаполнено(Объект.Партнер));
	
	НастроитьОтображениеКлиентаКонтакта();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКлиентаКонтакта()
	
	ТипКлиентаПартнер = (ТипКлиента = "Клиент");
	ШиринаВклПотенциальные = 17;
	ШиринаОтклПотенциальные = 11;
	
	Элементы.CRM_Партнер.Видимость               = ТипКлиентаПартнер;
	Элементы.ГруппаКонтактноеЛицо.Видимость      = ТипКлиентаПартнер;
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Не ТипКлиентаПартнер;
	
	Элементы.ДекорацияКлиент.Видимость = Не CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ТипКлиента.Видимость      = CRM_ИспользоватьПотенциальныхКлиентов;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияСценарий.Ширина       = ШиринаВклПотенциальные;
		Элементы.ДекорацияПроект.Ширина  = ШиринаВклПотенциальные;
		Элементы.ДекорацияКонтактноеЛицо.Ширина = ШиринаВклПотенциальные;
		Элементы.ДекорацияЭтап.Ширина           = ШиринаВклПотенциальные;
	Иначе
		Элементы.ДекорацияСценарий.Ширина       = ШиринаОтклПотенциальные;
		Элементы.ДекорацияПроект.Ширина  = ШиринаОтклПотенциальные;
		Элементы.ДекорацияКонтактноеЛицо.Ширина = ШиринаОтклПотенциальные;
		Элементы.ДекорацияЭтап.Ширина           = ШиринаОтклПотенциальные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьВремяКонцаРабочегоДня()
	
	КонецРабочегоДняЧас = Час(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВремяОкончанияРабочегоДня"));
	Если КонецРабочегоДняЧас = 0 Тогда
		КонецРабочегоДняЧас = 18;
	КонецЕсли;
	
	Возврат КонецРабочегоДняЧас;
	
КонецФункции

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПоручениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.Предмет, ПоручениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
		ФайлыПредставление = "";
		Для Каждого ЭлементСписка Из Результат Цикл
			Вложение = ЭлементСписка;
			ФайлыПредставление = ФайлыПредставление + "; " + ЭлементСписка.Значение;
		КонецЦикла;
		ФайлыПредставление = Сред(ФайлыПредставление, 3);
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура СкорректироватьДатыЗадачи(ПриоритетДатыНачала)
	
	Если ДатаИсполнения > ДатаКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаКонтроля = ДатаИсполнения;
		Иначе
			ДатаИсполнения = ДатаКонтроля;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаИсполнения) = НачалоДня(ДатаКонтроля) И ВремяИсполнения > ВремяКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяКонтроля = ВремяИсполнения;
		Иначе
			ВремяИсполнения = ВремяКонтроля;
		КонецЕсли;
	КонецЕсли;
	
	СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюЗадачу()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	                      |ГДЕ
	                      |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	                      |	И НЕ ЗадачаИсполнителя.Выполнена");
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяИсполнения = ВыбранноеВремя.Значение;		
		СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
		СкорректироватьДатыЗадачи(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяКонтроля = ВыбранноеВремя.Значение;
		СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
		СкорректироватьДатыЗадачи(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ПараметрыДосрочногоЗавершения", Результат);
		Закрыть(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ГрупповыеПредметыБизнеспроцессов

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	CRM_БизнесПроцессыИЗадачиСервер.СформироватьИЗаполнитьГрупповыхПредметы(ЭтотОбъект, Объект,
		 Элементы.ГруппаПредметы,
		 Истина);
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредметыПроцессаПодбор(Команда)

	CRM_КлассификаторыКлиент.ОткрытьПодборПоКлассификации(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредметыПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Таблица = ЭтотОбъект[Элемент.Имя];
	Для каждого Предмет Из ВыбранноеЗначение Цикл
		Если Таблица.НайтиСтроки(Новый Структура("Предмет", Предмет)).Количество() = 0 Тогда
			НовыйПредмет = Таблица.Добавить();
			НовыйПредмет.Предмет = Предмет;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ТипИсполнителяПриИзмененииСервер()
	Если ТипИсполнителя = "Пользователь" Тогда
		Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ТипИсполнителя = "Роль" Тогда
		Исполнитель = Справочники.РолиИсполнителей.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипИсполнителяПриИзменении(Элемент)
	ТипИсполнителяПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если Исполнитель = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Исполнитель = ИсполнительДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсполнительДоИзменения = Исполнитель;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СозданиеКлиентаЗавершение(Результат, Шаблон) Экспорт
	// ШаблоныЭлементовФорм
	ШаблоныЭлементов_УдалитьЭлементы(Результат.ИдентификаторФормыСтрокой);
	Если Результат.Свойство("Данные") Тогда
		Если ЗначениеЗаполнено(Результат.Данные.Клиент) Тогда
			Объект.Партнер = Результат.Данные.Клиент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Данные.Контакт) Тогда
			Объект.КонтактноеЛицо = Результат.Данные.Контакт;
		КонецЕсли;
		Элементы.ГруппаКонтактноеЛицо.Видимость = ЗначениеЗаполнено(Объект.Партнер);
		Элементы.CRM_КонтактноеЛицо.Видимость = Элементы.ГруппаКонтактноеЛицо.Видимость;
		// Вызов ПартнерПриИзменении(Неопределено) и КонтактноеЛицоПриИзменении(Неопределено)
		// в данной форме не имеет смысла
		Записать();
	Иначе
		
		// очистить и скрыть поле Партнера
		Объект.Партнер = Неопределено;
		Элементы.CRM_КонтактноеЛицо.Видимость = Истина;
		Элементы.ГруппаКонтактноеЛицо.Видимость = Ложь;
		Элементы.CRM_Партнер.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ГруппаПотенциальныйКлиент.Видимость = (НЕ ЗначениеЗаполнено(Объект.Партнер)
			 И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Описание");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти

#Область ШаблоныЭлементовФорм

&НаКлиенте
Процедура ШаблоныЭлементов_СоздатьЭлементы(ИмяФормыШаблона, Параметры, ОписаниеОповещенияОЗакрытии ,
	 ИмяГруппыРазмещения)
	
	Если ШаблоныЭлементов_Формы = Неопределено Тогда
		ШаблоныЭлементов_Формы = Новый Структура;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы = CRM_ШаблоныЭлементовФормКлиент.ОписаниеФормы(ЭтотОбъект, ИмяФормыШаблона, Параметры);
	Если ШаблоныЭлементов_ОписаниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	
	ШаблоныЭлементов_Формы.Вставить(ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона);
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(ШаблоныЭлементов_ОписаниеФормы.АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, ИмяГруппыРазмещения,
	 ИдентификаторШаблона,
	 ИмяГруппыОбновления = Неопределено)
	
	ОбновлениеГруппы = Элементы.Найти(ИмяГруппыОбновления);
	CRM_ШаблоныЭлементовФорм.СоздатьЭлементыФормыПоШаблону(ЭтотОбъект, АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения, ИдентификаторШаблона,
		 ОбновлениеГруппы); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона,  // АПК:78 - исключить из проверки.
	 ИмяГруппыОбновления) Экспорт
	
	ФормаШаблона = ШаблоныЭлементов_Формы[ИдентификаторШаблона];
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы(СтрЗаменить(ИмяГруппыОбновления, ИдентификаторШаблона, ""));
	ЭтотОбъект["ШаблоныЭлементов_АдресОписанияФормы" + ИдентификаторШаблона] = АдресОписанияФормыШаблона;
	
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, "", ИдентификаторШаблона, ИмяГруппыОбновления);
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_УдалитьЭлементы(ИдентификаторФормыСтрокой)
	
	ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой);
	ШаблоныЭлементов_Формы.Удалить(ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой)
	
	CRM_ШаблоныЭлементовФорм.УдалитьЭлементыФормы(ЭтотОбъект, ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда) 
	CRM_ШаблоныЭлементовФормКлиент.ВыполнитьКоманду(Команда, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Команда.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент)
	CRM_ШаблоныЭлементовФормКлиент.ПриИзменении(Элемент, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

#КонецОбласти

#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры
