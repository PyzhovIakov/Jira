
#Область ОписаниеПеременных

// ШаблоныЭлементовФорм
&НаКлиенте
Перем ШаблоныЭлементов_Формы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиСтартИлиСтандарт() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Бизнес-процессы доступны только для ""ПРОФ"" и ""КОРП"" поставки конфигурации!';
				 |en='The function is only available for ""PROF"" and ""CORP"" configurations versions!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТипКлиента = CRM_КлиентыСервер.ПолучитьТипКлиента("БизнесПроцессы",
		Объект.Партнер, Объект.ПотенциальныйКлиент, CRM_ИспользоватьПотенциальныхКлиентов);
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		Шаблон = Объект.КартаМаршрута;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	ВалютаДокумента = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	Если ЗначениеЗаполнено(Объект.Партнер) Или ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
		Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Ложь;
		Элементы.ДекорацияСвязатьС.Видимость = Истина;
	КонецЕсли;
	ПриИзмененииШаблона(Истина);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Скроем сгенерированную команду
	Если Не Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов") = Неопределено Тогда
		Элементы.РедактироватьСоставДополнительныхРеквизитов.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.Предмет) 
	И ((ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Объект.Предмет);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;

		// В случае поручения в описание не переносим текст писем, только тему и инфомрацию, что
		// поручение введено на основании такого-то письма.
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);	
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы, , , , ,
			 НовоеОповещение,
			 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И (Источник.ВладелецФормы = ЭтотОбъект ИЛИ
			(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.ВладелецФормы, "ВладелецФормы") И Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект)) Тогда
			
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				Объект.КонтактноеЛицо	= Параметр;
			КонецЕсли;
			УстановитьВидимостьЭлементов();
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТипКлиента = "Клиент" Тогда
		Объект.ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	Иначе
		Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИзмененыИсполнители Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСохранитьИсполнителейЭтапов = Истина;
	КонецЕсли;
	Если ИзмененаДлительность Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("БизнесПроцессы", "ТипКлиента", ТипКлиента);
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
	СвязатьОбращениеСБизнесПроцессомНаСервере(Объект.Ссылка);

	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура СвязатьОбращениеСБизнесПроцессомНаСервере(ТекущийБП)
	
	Обращение = Объект.Предмет;
	
	ОбращениеЗаполнено = ЗначениеЗаполнено(Обращение)
		И (ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Заявка")
		ИЛИ ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
		ИЛИ ТипЗнч(Обращение) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипЗнч(Обращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	
	Если Не ОбращениеЗаполнено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВзаимодействие = ТипЗнч(Обращение) = Тип("ДокументСсылка.CRM_Взаимодействие");
	
	ОбращениеЯвляетсяЛидом = РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Обращение);
	
	Если ОбращениеЯвляетсяЛидом И НЕ ЭтоВзаимодействие Тогда
		ПараметрСостояниеЛида = Справочники.CRM_СостоянияЛидов.Сконвертирован;
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Обращение, ПараметрСостояниеЛида, ТекущийБП);
	КонецЕсли;
	
	ОбъектОбращение = Обращение.ПолучитьОбъект();
	Если ОбращениеЯвляетсяЛидом И ОбщегоНазначения.ЕстьРеквизитОбъекта("CRM_СкрытьВАРМ",
		 ОбъектОбращение.Метаданные()) Тогда
		ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
	КонецЕсли;
	//ОбъектОбращение.Ответственный = Объект.Ответственный;
	ОбъектОбращение.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	ПриИзмененииШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ШаблонНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТолькоВернутьЭлемент", Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыборИзДерева", ПараметрыФормы,
		 ЭтотОбъект, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно, ,
		 ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Шаблон = Результат;
		ПриИзмененииШаблона();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы.Количество() > 0 Тогда 
														// Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		ЭлементСИдентификатором = Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы[0];
		CRM_ШаблоныЭлементовФормКлиент.ОбновитьЗначениеРеквизита(ШаблоныЭлементов_Формы[Прав(ЭлементСИдентификатором.Имя,
			 37)],
			"ПереданныйКлиент", Объект.Партнер);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаСтартаПриИзменении(Элемент)
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		ПересчитатьСрокиИсполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		ПараметрыФормы = Новый Структура("СписокИсполнителей,КартаМаршрута,НомерВерсииКартыМаршрута",
										Элементы.Исполнители.ТекущиеДанные.Исполнитель, Объект.КартаМаршрута, Объект.НомерВерсииКартыМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершение",
			 ЭтотОбъект);								
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВводаИсполнителей", ПараметрыФормы,
			 ЭтотОбъект, , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		БылИсполнитель = Элементы.Исполнители.ТекущиеДанные.Исполнитель;
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				, Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ВыборГруппПользователей"	, Ложь);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					, "Справочник.Пользователи.Форма.ФормаСписка");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				, Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					, "Справочник.РолиИсполнителей.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Роли исполнителей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершение(Результат, СтандартнаяОбработка) Экспорт
	Если НЕ Результат = Неопределено Тогда
		
		Индекс = Результат.Количество() - 1; 
		Пока Индекс >= 0 Цикл 
			Если Не ЗначениеЗаполнено(Результат[Индекс].Значение) Тогда
				Результат.Удалить(Индекс);
			КонецЕсли;	
			Индекс = Индекс - 1; 
		КонецЦикла;
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= Результат;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(Элементы.Исполнители.ТекущиеДанные.Исполнитель);
		ИзмененыИсполнители = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НЕ ВыбранноеЗначение = Элементы.Исполнители.ТекущиеДанные.Исполнитель Тогда
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= ВыбранноеЗначение;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(ВыбранноеЗначение);
		
		ИзмененыИсполнители			= Истина;
		Модифицированность	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		НовыйСписок = Новый СписокЗначений;
		НовыйСписок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан"), "Не указан");
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = НовыйСписок;
	Иначе
		Элементы.Исполнители.ТекущиеДанные.Исполнитель =
			ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан");
	КонецЕсли;
	
	Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= "Не указан";
	ИзмененыИсполнители			= Истина;
	Модифицированность	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ДеньВключенВГрафик(ВыбранноеЗначение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ВыбранноеЗначение, "ДФ=dd.MM.yyyy") + 
					НСтр("ru=' не рабочий день.';en=' not a working day.'"));
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элемент.Имя = "ИсполнителиДатаВыполнения" И ВыбранноеЗначение < ТекДанные.ДатаНачала Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Срок этапа не может быть меньше Даты начала.';en='Period of a stage could not be less Date started.'"));
					
		СтандартнаяОбработка = Ложь;
	Иначе
		ТекДанные[СтрЗаменить(Элемент.Имя, "Исполнители", "")] = ВыбранноеЗначение;
		ИсполнителиДатаВыполненияПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Дата начала этапа не заполнена!.';en='The start date of the stage is not filled !.'"));
		Возврат;					
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Время_"	, ТекДанные.ДатаВыполнения);
	ПараметрыФормы.Вставить("Дата_"		, ТекДанные.ДатаВыполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборДатыВремени", ПараметрыФормы, Элемент, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ИсполнителиДатаВыполненияОбработкаВыбора(Элементы.ИсполнителиДатаВыполнения, Результат, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Дата начала этапа не заполнена!.';en='The start date of the stage is not filled !.'"));
		ТекДанные.ДатаВыполнения = Дата("00010101");
		Возврат;
	КонецЕсли;
	
	СтруктураПериода = РассчитатьДлительностьЭтапа(ТекДанные.ДатаНачала, ТекДанные.ДатаВыполнения, Объект.Организация);
	
	ТекДанные.ДлительностьДней	= СтруктураПериода.ДлительностьДней;
	ТекДанные.ДлительностьЧасов	= СтруктураПериода.ДлительностьЧасов;
	ТекДанные.ДлительностьМинут	= СтруктураПериода.ДлительностьМинут;
	
	Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияПриИзмененииЗавершение",
			 ЭтотОбъект,
			 ТекДанные);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru='Пересчитать сроки для следующих этапов?';
			|en='Recalculate periods for the following stages?'"), РежимДиалогаВопрос.ДаНет, ,
			 КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзмененииЗавершение(Ответ, ТекДанные) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСрокиЭтапов(ТекДанные.ТочкаМаршрута, ТекДанные.ДатаВыполнения, ТекДанные.ВариантВыполнения);
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЕслиЗаписан", ЭтотОбъект);
	ПроверитьЗаполнениеЗаписать(Команда.Имя, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Бизнес-процесс не записан. Добавление файлов невозможно!';
			|en='The business process is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСНажатие(Элемент)
	
	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Создать_Клиента(Команда)
	// ШаблоныЭлементовФорм
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("Ответственный, ПотенциальныйКлиент", Объект.Ответственный, Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура Создать_Контакт(Команда)
	
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ГруппаКонтактноеЛицо.Видимость = Истина; // отобразить поле выбора партнера
	Элементы.КонтактноеЛицо.Видимость = Ложь;
	Элементы.ГруппаСуммы.Видимость = Ложь;
	Элементы.Партнер.АвтоОтметкаНезаполненного = Истина;
	
	// ШаблоныЭлементовФорм
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("ПотенциальныйКлиент, ТолькоКонтакт", Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписать(ИмяКоманды, ОписаниеОповещенияОЗавершении)
	
	Попытка
		Если ПроверитьЗаполнение() Тогда
			
			Если ИмяКоманды = "Отправить" Тогда
				
				Записать();
				
			КонецЕсли;
			
			Если ИмяКоманды = "Отправить" Тогда
				
				СтруктураОбъекта = Новый Структура;
				СтруктураОбъекта.Вставить("БизнесПроцесс"			, Объект.Ссылка);
				СтруктураОбъекта.Вставить("CRM_ТочкаМаршрута"		, Объект.ТочкаСтарта);
				СтруктураОбъекта.Вставить("CRM_ВариантВыполнения"	, 0);
				СтруктураОбъекта.Вставить("Исполнитель"				, ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
				СтруктураОбъекта.Вставить("РольИсполнителя"			,
					 ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"));
				
				СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(СтруктураОбъекта);
				ДополнительныеПараметры = Новый Структура("ИмяКоманды, ОписаниеОповещенияОЗавершении",
					 ИмяКоманды,
					 ОписаниеОповещенияОЗавершении);
				Если СписокТочекМаршрута.Количество() > 0 Тогда
					ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.Ссылка, СписокТочекМаршрута);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеЗаписатьЗавершение",
						 ЭтотОбъект,
						 ДополнительныеПараметры);
					ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы,
						 ЭтотОбъект, , , , ОписаниеОповещения,
						 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
				ПроверитьЗаполнениеЗаписатьЗавершение(Истина, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если СтрНайти(Ошибка,
			 НСтр("ru='Данные были изменены или удалены другим пользователем';
			|en='Data was modified or deleted by another user'")) > 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно записать бизнес-процесс,
				| данные были изменены другим пользователем.';en='It is not possible to record a business process,
				| the data has been changed by another user.'"));
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "Отправить" Тогда
		ПараметрыЗаписи = Новый Структура("Старт", (ОбщегоНазначенияКлиент.ДатаСеанса() >= Объект.ДатаСтарта));
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	Оповестить("СтартованНовыйНезависимыйБП", Объект.Предмет);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЕслиЗаписан(Записан, ДополнительныеПараметры) Экспорт
	
	Если Записан Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТочкиСтарта(ПерезаполнятьТочкуСтартаОбъекта = Истина)
	
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	Элементы.ТочкаСтарта.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		Элементы.ТочкаСтарта.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если ПерезаполнятьТочкуСтартаОбъекта Или Не ЗначениеЗаполнено(Объект.ТочкаСтарта) Тогда
		Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	КонецЕсли;
	Элементы.ТочкаСтарта.Видимость = (СписокТочекСтарта.Количество() <> 1);
	
КонецПроцедуры

&НаСервере
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииШаблона(ПриСоздании = Ложь)
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Заголовок = Шаблон.Наименование;
		Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Объект.КартаМаршрута = Шаблон;
		КонецЕсли;
		
		Если ЭтоНовый Тогда
			Если ЗначениеЗаполнено(Объект.Предмет) И Не ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				Объект.Наименование = Объект.КартаМаршрута.Наименование;
			ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) Тогда
				Объект.Наименование = Объект.КартаМаршрута.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Объект.НомерВерсииКартыМаршрута	= Объект.КартаМаршрута.НомерВерсии;
		ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		
		ПолучитьТочкиСтарта();
		
		ЗаполнитьТаблицуИсполнителей();
		
		Элементы.ГруппаИсполнители.Видимость = (Объект.КартаМаршрута.РедактироватьИсполнителейЭтапов
			 ИЛИ Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов);
		Элементы.Исполнители_ИсполнительПредставление.ТолькоПросмотр =
			НЕ Объект.КартаМаршрута.РедактироватьИсполнителейЭтапов;
		Элементы.ИсполнителиГруппаСроки.Видимость = МожноУказыватьСрокВыполненияЭтапов;
		Элементы.ИсполнителиДатаНачала.ТолькоПросмотр = ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		Элементы.ТочкаСтарта.Видимость = Истина;
	Иначе
		Заголовок = "";
		Объект.Проект					= Справочники.Проекты.ПустаяСсылка();
		Объект.КартаМаршрута			= Справочники.CRM_КартыМаршрутов.ПустаяСсылка();
		Объект.НомерВерсииКартыМаршрута = 0;
		Элементы.ГруппаИсполнители.Видимость = Ложь;
		Элементы.ТочкаСтарта.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Указание исполнителей этапов
&НаСервере
Процедура ЗаполнитьТаблицуИсполнителей(Набор = Неопределено)
	
	Если Набор = Неопределено Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Объект.Проект) Тогда		
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
					НаборИсполнителей.Прочитать();	
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
		Иначе
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
	Иначе
		НаборИсполнителей = Набор;
	КонецЕсли;
	
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	Этапы_Значение.Очистить();
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
			НаборЭтапов.Прочитать();
			Для Каждого СтрокаНабора Из НаборЭтапов Цикл
				НоваяСтрокаЭтапов = Этапы_Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапов, СтрокаНабора);
			КонецЦикла;
			НачПериода	= ?(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,
				 ТекущаяДатаСеанса()) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,
				 ТекущаяДатаСеанса()),
				 Объект.ДатаСтарта);
			CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута,
				 Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение,
				 НачПериода);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЭтапов.Прочитать();
			Этапы_Значение = НаборЭтапов.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	//Исполнители.Очистить();
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	Исполнители.Очистить();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		
		МассивСтрок = Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута", СтрокаНабора.ТочкаМаршрута));
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб = Исполнители_Значение.Добавить();
			СтрокаТаб.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая		= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок		= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,
			 Объект.Автор,
			 СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель, , СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Роль ""%1""';
					|en='Role ""%1""'"),
					 Строка(СтрокаТаб.Исполнитель));
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Исполнитель этапа ""%1""';
				|en='Executor of stage ""%1""'"),
				 Строка(СтрокаТаб.Исполнитель));
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута, "ТочкаМаршрута");
			Если НЕ СтрокаЭтапа = Неопределено Тогда
				
				СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
				СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
				СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
				СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
				СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
				СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
				СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
				СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЭтапа, "ДатаНачала") Тогда
					СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЭтапа, "ДатаВыполнения") Тогда
					СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	
	Исполнители_Значение.Сортировать("Порядок ВОЗР");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиИсполнения()
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	
	Если ЗначениеЗаполнено(Объект.ДатаСтарта) И Объект.ДатаСтарта > ТекущаяДатаСеанса() Тогда
		НачПериода = Объект.ДатаСтарта;
	Иначе
		НачПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	//НачПериода	= ?(НачалоДня(Объект.Дата) = Объект.ДатаСтарта, Объект.Дата, Объект.ДатаСтарта);
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута,
		 Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение,
		 НачПериода);
	
	Исполнители_Значение.ЗаполнитьЗначения(Дата("00010101"), "ДатаНачала,ДатаВыполнения");
	Для Каждого СтрокаТаб Из Исполнители_Значение Цикл
		СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута, "ТочкаМаршрута");
		Если НЕ СтрокаЭтапа = Неопределено Тогда
			
			СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
			СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
			СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
			СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
			СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
			СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
			СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
			СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
			СтрокаТаб.ДатаНачала				= СтрокаЭтапа.ДатаНачала;
			СтрокаТаб.ДатаВыполнения			= СтрокаЭтапа.ДатаВыполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиЭтапов(ТочкаМаршрута, НачПериода, ВариантВыполнения)
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута,
		 Объект.НомерВерсииКартыМаршрута,
		 ВариантВыполнения);
	
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута,
		 Объект.Организация, СтруктураТочки.ИсходящаяТочка, Исполнители_Значение, НачПериода,
		 ВариантВыполнения);
	
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДлительностьЭтапа(НачПериода, КонПериода, Организация)
	
	СтруктураПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(НачПериода, КонПериода, , Организация);
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДлительностьДней"	,
		 ЦЕЛ(СтруктураПериода.ВЧасах / СтруктураПериода.ПродолжительностьРабочегоДняВЧасах));
	СтруктураВозврата.Вставить("ДлительностьЧасов"	,
		 ЦЕЛ(СтруктураПериода.ВЧасах - (СтруктураВозврата.ДлительностьДней * СтруктураПериода.ПродолжительностьРабочегоДняВЧасах)));
	СтруктураВозврата.Вставить("ДлительностьМинут"	,
		 СтруктураПериода.ВМинутах - ((СтруктураВозврата.ДлительностьДней * СтруктураПериода.ПродолжительностьРабочегоДняВМинутах) 
		+ (СтруктураВозврата.ДлительностьЧасов * 60)));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланируемуюДатуЗавершенияПроцесса(ОчищатьДату = Ложь)
	Если ОчищатьДату Тогда
		Объект.ПланируемаяДатаЗавершения = Дата("00010101");
		Возврат;
	КонецЕсли;				
	Если МожноУказыватьСрокВыполненияЭтапов И Исполнители.Количество() > 0 Тогда
		Объект.ПланируемаяДатаЗавершения = 
		CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(Исполнители);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция ДеньВключенВГрафик(ВыбранноеЗначение)
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	Запрос.УстановитьПараметр("Календарь"	, Календарь);
	Запрос.УстановитьПараметр("Год"			, Год(ВыбранноеЗначение));
	Запрос.УстановитьПараметр("ДатаГрафика"	, НачалоДня(ВыбранноеЗначение));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДеньВключенВГрафик;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПоручениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.Предмет, ПоручениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ТипКлиентаПартнер = (ТипКлиента = "Клиент");
	ШиринаВклПотенциальные = 17;
	ШиринаОтклПотенциальные = 12;
	
	Элементы.Партнер.Видимость              = ТипКлиентаПартнер;
	Элементы.ГруппаКонтактноеЛицо.Видимость = ТипКлиентаПартнер;
	Элементы.ГруппаСуммы.Видимость          = ТипКлиентаПартнер;
	Элементы.ПотенциальныйКлиент.Видимость  = Не ТипКлиентаПартнер;
	
	Элементы.ДекорацияКлиент.Видимость = Не CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ТипКлиента.Видимость      = CRM_ИспользоватьПотенциальныхКлиентов;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияКонтактноеЛицо.Ширина = ШиринаВклПотенциальные;
		Элементы.ДекорацияСуммаНадпись.Ширина   = ШиринаВклПотенциальные;
		Элементы.ДекорацияПредмет.Ширина        = ШиринаВклПотенциальные;
		Элементы.ДекорацияОтветственный.Ширина  = ШиринаВклПотенциальные;
	Иначе
		Элементы.ДекорацияКонтактноеЛицо.Ширина = ШиринаОтклПотенциальные;
		Элементы.ДекорацияСуммаНадпись.Ширина   = ШиринаОтклПотенциальные;
		Элементы.ДекорацияПредмет.Ширина        = ШиринаОтклПотенциальные;
		Элементы.ДекорацияОтветственный.Ширина  = ШиринаОтклПотенциальные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКлиентаЗавершение(Результат, Шаблон) Экспорт
	// ШаблоныЭлементовФорм
	ШаблоныЭлементов_УдалитьЭлементы(Результат.ИдентификаторФормыСтрокой);
	Если Результат.Свойство("Данные") Тогда
		Если ЗначениеЗаполнено(Результат.Данные.Клиент) Тогда
			Объект.Партнер = Результат.Данные.Клиент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Данные.Контакт) Тогда
			Объект.КонтактноеЛицо = Результат.Данные.Контакт;
		КонецЕсли;
		
		Элементы.КонтактноеЛицо.Видимость = Истина;
		Элементы.ГруппаСуммы.Видимость = Истина;
		Элементы.ГруппаКонтактноеЛицо.Видимость = ЗначениеЗаполнено(Объект.Партнер);
		// Вызов ПартнерПриИзменении(Неопределено) и КонтактноеЛицоПриИзменении(Неопределено)
		// в данной форме не имеет смысла
	Иначе
		
		// очистить и скрыть поле Партнера
		Объект.Партнер = Неопределено;
		Элементы.КонтактноеЛицо.Видимость = Истина;
		Элементы.ГруппаСуммы.Видимость = Истина;
		Элементы.ГруппаКонтактноеЛицо.Видимость = Ложь;
		Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ГруппаПотенциальныйКлиент.Видимость = (НЕ ЗначениеЗаполнено(Объект.Партнер)
			 И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ШаблоныЭлементовФорм

&НаКлиенте
Процедура ШаблоныЭлементов_СоздатьЭлементы(ИмяФормыШаблона, Параметры, ОписаниеОповещенияОЗакрытии ,
	 ИмяГруппыРазмещения)
	
	Если ШаблоныЭлементов_Формы = Неопределено Тогда
		ШаблоныЭлементов_Формы = Новый Структура;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы = CRM_ШаблоныЭлементовФормКлиент.ОписаниеФормы(ЭтотОбъект, ИмяФормыШаблона, Параметры);
	Если ШаблоныЭлементов_ОписаниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	
	ШаблоныЭлементов_Формы.Вставить(ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона);
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(ШаблоныЭлементов_ОписаниеФормы.АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, ИмяГруппыРазмещения,
	 ИдентификаторШаблона,
	 ИмяГруппыОбновления = Неопределено)
	
	ОбновлениеГруппы = Элементы.Найти(ИмяГруппыОбновления);
	CRM_ШаблоныЭлементовФорм.СоздатьЭлементыФормыПоШаблону(ЭтотОбъект, АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения, ИдентификаторШаблона,
		 ОбновлениеГруппы); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона, // АПК:78 - исключить из проверки.
	 ИмяГруппыОбновления) Экспорт
	
	ФормаШаблона = ШаблоныЭлементов_Формы[ИдентификаторШаблона];
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы(СтрЗаменить(ИмяГруппыОбновления, ИдентификаторШаблона, ""));
	ЭтотОбъект["ШаблоныЭлементов_АдресОписанияФормы" + ИдентификаторШаблона] = АдресОписанияФормыШаблона;
	
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, "", ИдентификаторШаблона, ИмяГруппыОбновления);
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_УдалитьЭлементы(ИдентификаторФормыСтрокой)
	
	ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой);
	ШаблоныЭлементов_Формы.Удалить(ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой)
	
	CRM_ШаблоныЭлементовФорм.УдалитьЭлементыФормы(ЭтотОбъект, ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда) 
	CRM_ШаблоныЭлементовФормКлиент.ВыполнитьКоманду(Команда, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Команда.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент)
	CRM_ШаблоныЭлементовФормКлиент.ПриИзменении(Элемент, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

#КонецОбласти
