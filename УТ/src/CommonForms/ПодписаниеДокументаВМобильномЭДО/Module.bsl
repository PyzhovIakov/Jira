// @strict-types
#Если Не ВебКлиент Тогда

#Область ОписаниеПеременных

//@skip-check variable-value-type
&НаКлиенте
Перем ВнешняяКомпонентаРутокен, ПоддерживаетсяПодписаниеЧерезФайл, ИмяКлючаНастроекБиометрии,
ОтпечатокВыбранногоСертификатаВКонтейнере, ЭтоПакет, КоличествоЭлементовВНаборе;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("ТекущаяОперация", ТекущаяОперация);
	Если ТекущаяОперация = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.ЧтениеСертификатов") Тогда

		Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаОбработкаОперации;
	КонецЕсли;

	СкрытьПароль = Истина;
	
	ЦветАктивности = ЦветаСтиля.ЦветАктивности;
	ЦветАкцента = ЦветаСтиля.ЦветАкцента;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияОС = СистемнаяИнформация.ВерсияОС;
	ИдентификаторКлиента = Строка(СистемнаяИнформация.ИдентификаторКлиента);

	ИмяКлючаНастроекБиометрии = СтрШаблон("%1_%2", "ПодключитьБиометрию_Рутокен",
		ИдентификаторКлиента);

	ПоддерживаетсяПодписаниеЧерезФайл = (СтрНайти(НРег(ВерсияОС), "android") > 0);

	Если ВнешняяКомпонентаРутокен = Неопределено Тогда
		ПодключитьКомпонентуРутокенАсинх();
	КонецЕсли;

#Если МобильныйКлиент Тогда
	
	ПоддерживаетсяЗащитаДоступа = БезопасноеХранилище.ПоддерживаетсяЗащитаДоступа(
			СпособЗащитыДоступаБезопасногоХранилища.ТребуетсяДополнительнаяПроверкаПользователя,
		СпособДополнительнойПроверкиПользователя.БиометрическаяИлиВводПароля);
	Элементы.ГруппаБиометрия.Видимость = Ложь;

	Элементы.НастроитьБиометрию.Видимость = ПоддерживаетсяЗащитаДоступа;
	Если ПоддерживаетсяЗащитаДоступа Тогда
		ПодключитьБиометрию = БезопасноеХранилище.СодержитКлюч(ИмяКлючаНастроекБиометрии);
		Элементы.ПодписыватьСразуПослеПроверкиБиометрии.Видимость = ПодключитьБиометрию;
	КонецЕсли;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Источник = "com.e1c.edms" И Событие = "EDMS_RUTOKEN_EVENT" Тогда
		ЗавершитьВзаимодействиеСКомпонентой(Данные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаОбработкаОперации Тогда
		
		Если ВыполняетсяПодписание Тогда
			Отказ = Истина;
		Иначе
			Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаВыборСертификатаИПодпись;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыполнитьПодписаниеДокументаВМобильномЭДО" Тогда

		ОписаниеДанных = Параметр.ОписаниеДанных;
		ОписаниеОповещенияОЗакрытии = Параметр.ОписаниеОповещенияОбработатьРезультатПодписания;

		Если ОписаниеДанных <> Неопределено Тогда
			
			КоличествоЭлементовВНаборе = ОписаниеДанных.НаборДанных.Количество();
			ЭтоПакет = КоличествоЭлементовВНаборе > 1;

			ОтборСертификатов = ОписаниеДанных.ОтборСертификатов;

			Если ОтборСертификатов.Количество() = 0 Тогда
				Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаСертификатыНеНайдены;
				Возврат;
			КонецЕсли;
			
			Элементы.Подписать.Заголовок = ?(ЭтоПакет,
				НСтр("ru='Подписать пакет'"),
				НСтр("ru='Подписать'"));
			
			ПодписываемыеДанные.Очистить();
			НомерСтрокиНабора = 1;
			Для Каждого СтрокаНабораДанных Из ОписаниеДанных.НаборДанных Цикл
				ПредставлениеДанных = СтрокаНабораДанных.Представление;
				
				СтрокаПодписываемыхДанных = ПодписываемыеДанные.Добавить();
				СтрокаПодписываемыхДанных.Значение = ПредставлениеДанных.Значение;
				СтрокаПодписываемыхДанных.Представление = ?(ЭтоПакет,
					СтрШаблон("%1.%2", НомерСтрокиНабора, ПредставлениеДанных.Представление),
					ПредставлениеДанных.Представление);

				НомерСтрокиНабора = НомерСтрокиНабора + 1;
			КонецЦикла;
			
			ТекущийЭлемент = Элементы.Пароль;
			ЗаполнитьСертификаты(ОтборСертификатов);

			ВыполнитьПодписаниеСБиометриейПриНеобходимости();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ПодключитьБиометрию = Настройки.Получить("ПодключитьБиометрию");

	Если ПодключитьБиометрию = Неопределено Или ПодключитьБиометрию = Ложь Тогда
		ПодписыватьСразуПослеПроверкиБиометрии = Ложь;
	Иначе
		ПодписыватьСразуПослеПроверкиБиометрии = Настройки.Получить(
			"ПодписыватьСразуПослеПроверкиБиометрии");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПарольНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	СкрытьПароль = Не СкрытьПароль;
	ВведенныйПароль = Элемент.ТекстРедактирования;
	Элементы.Пароль.РежимПароля = СкрытьПароль;
	Элементы.Пароль.КартинкаКнопкиВыбора = ?(СкрытьПароль, БиблиотекаКартинок.ВводимыеСимволыВидны,
		БиблиотекаКартинок.ВводимыеСимволыСкрыты);
	Пароль = ВведенныйПароль;

КонецПроцедуры

&НаКлиенте
Процедура СертификатОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = Сертификаты.НайтиПоИдентификатору(Идентификатор);
	ВыбраннаяСтрока.Активность = Истина;
	ТекущийСертификат = ВыбраннаяСтрока.Значение;

	Для Каждого СтрокаСертификаты Из Сертификаты Цикл
		Если СтрокаСертификаты <> ВыбраннаяСтрока Тогда
			СтрокаСертификаты.Активность = Ложь;
		КонецЕсли;
	КонецЦикла;

	Сертификаты.Сортировать("Активность Убыв");

	ВыполнитьПодписаниеСБиометриейПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПодключитьБиометриюПриИзменении(Элемент)

#Если МобильныйКлиент Тогда

	ПодписыватьСразуПослеПроверкиБиометрииВидимость = Ложь;

	Если ПодключитьБиометрию Тогда

		Если Не ПроверитьЗаполнение() Тогда
			ПодключитьБиометрию = Ложь;
			Возврат;
		КонецЕсли;

		ДанныеПомещены = Ждать БезопасноеХранилище.ПоместитьДанныеАсинх(ИмяКлючаНастроекБиометрии,
			Пароль,
			СпособЗащитыДоступаБезопасногоХранилища.ТребуетсяДополнительнаяПроверкаПользователя,
			СпособДополнительнойПроверкиПользователя.БиометрическаяИлиВводПароля);

		Если ДанныеПомещены Тогда
			ПодписыватьСразуПослеПроверкиБиометрииВидимость = Истина;
		КонецЕсли;

	Иначе

		ДанныеУдалены = Ждать БезопасноеХранилище.УдалитьДанныеАсинх(ИмяКлючаНастроекБиометрии);
		Если ДанныеУдалены Тогда
			ПодписыватьСразуПослеПроверкиБиометрии = Ложь;
		КонецЕсли;

	КонецЕсли;

	Элементы.ПодписыватьСразуПослеПроверкиБиометрии.Видимость = ПодписыватьСразуПослеПроверкиБиометрииВидимость;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)

	Элементы.ДекорацияВспомогательныйОтступПоВертикали.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодписываемыеДанныеОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока = ПодписываемыеДанные.НайтиПоИдентификатору(Идентификатор);

	ОткрытьЗначение(ВыбраннаяСтрока.Значение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписать(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьПодписание();

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьСледующий(Команда)

	ПодписатьДанныеНабораДанных();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьБиометрию(Команда)

	Элементы.ГруппаБиометрия.Видимость = Не Элементы.ГруппаБиометрия.Видимость;

	Элементы.НастроитьБиометрию.Картинка = ?(Элементы.ГруппаБиометрия.Видимость,
		БиблиотекаКартинок.СтрелкаВниз,
		БиблиотекаКартинок.СтрелкаВверх);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Асинх Процедура ПодключитьКомпонентуРутокенАсинх() Экспорт

	Если ВнешняяКомпонентаРутокен = Неопределено Тогда
		Ждать УстановитьВнешнююКомпонентуАсинх("ОбщийМакет.ВнешняяКомпонентаРутокенМобильногоЭДО");
	КонецЕсли;

	КомпонентаПодключена = Ждать ПодключитьВнешнююКомпонентуАсинх("ОбщийМакет.ВнешняяКомпонентаРутокенМобильногоЭДО",
			"BIT",
			ТипВнешнейКомпоненты.Native);

	Если КомпонентаПодключена Тогда
		ВнешняяКомпонентаРутокен = Новый ("AddIn.BIT.EDMSRutoken");
		НачатьОбработкуОперации();
	Иначе
		ТекстКомпонентаНеПодключена = НСтр(
			"ru = 'Не удалось подключить внешнюю компоненту ""Рутокен""'");

		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстКомпонентаНеПодключена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОбработкуОперации()

#Если МобильныйКлиент Тогда
	УстановитьЗапретЗасыпанияКомпьютера(Истина);
#КонецЕсли
	
	ОтветКомпоненты = "";

	Если ТекущаяОперация = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.ЧтениеСертификатов") Тогда
		//@skip-check dynamic-access-method-not-found
		//@skip-check statement-type-change
		ОтветКомпоненты = ВнешняяКомпонентаРутокен.ПолучитьСертификаты();
		НачатьВзаимодействиеСКомпонентой(ТекущаяОперация, ОтветКомпоненты);
	КонецЕсли;

	Если ТекущаяОперация = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.Подписание") Тогда

		ДанныеВыбранногоСертификата = ОписаниеДанных.ВыбранныйСертификат;

		НайденныеОтпечаткиСертификатов = ОтпечаткиСертификатовВКонтейнере.НайтиСтроки(
			Новый Структура("Base64", ДанныеВыбранногоСертификата.Отпечаток));

		Если НайденныеОтпечаткиСертификатов.Количество() = 0 Тогда
			Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаСертификатыНеНайдены;
			Возврат;
		КонецЕсли;

		ОтпечатокВыбранногоСертификатаВКонтейнере = НайденныеОтпечаткиСертификатов[0].Исходный;
		
		ПодписатьДанныеНабораДанных();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДанныеНабораДанных()
	
	ВыполняетсяПодписание = Истина;
	
	Элементы.ДекорацияТекстовоеСостояниеОперации.Заголовок = "";
	
	ЗаголовокОперации = НСтр("ru ='ПОДПИСЫВАЕТСЯ:'");
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаДанныхДляПодписания Из ОписаниеДанных.НаборДанных Цикл
	
		Если Не СтрокаДанныхДляПодписания.Свойство("ДанныеПодписи") Тогда
			
			//@skip-check property-return-type
			ПредставлениеДанных = СтрокаДанныхДляПодписания.Представление.Представление;
			
			Если ЭтоПакет Тогда
				ПредставлениеДанных = СтрШаблон("(%1/%2) %3",
					НомерСтроки,
					КоличествоЭлементовВНаборе,
					ПредставлениеДанных);
			КонецЕсли;

			Элементы.ДекорацияТекстовоеСостояниеОперации.Заголовок = СтрШаблон("%1%2%3",
				ЗаголовокОперации,
				Символы.ПС,
				ПредставлениеДанных);
			
			Элементы.ДекорацияТекстовоеСостояниеОперации.ЦветТекста = ЦветАктивности;
			
			СтрокаДанныхДляПодписания.Вставить("ИдентификаторОперацииПодписания", "");
			//@skip-check dynamic-access-method-not-found
			Если ПоддерживаетсяПодписаниеЧерезФайл Тогда
				ОтветКомпоненты = ВнешняяКомпонентаРутокен.Подписать(Пароль,
					ОтпечатокВыбранногоСертификатаВКонтейнере,
					ИмяВременногоФайлаСДанными(СтрокаДанныхДляПодписания.ИсходныеДвоичныеДанные)); // en: GetSign
			Иначе
				ОтветКомпоненты = ВнешняяКомпонентаРутокен.Подписать(Пароль,
					ОтпечатокВыбранногоСертификатаВКонтейнере,
					СтрокаДанныхДляПодписания.ИсходныеДвоичныеДанные); // en: GetSign
			КонецЕсли;
			
			НачатьВзаимодействиеСКомпонентой(ТекущаяОперация,
				ОтветКомпоненты,
				СтрокаДанныхДляПодписания);
			
			Прервать;
		
		Конецесли;
		
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

КонецПроцедуры

//Начинает новую операцию с внешней компонентой
//Параметры:
// Операция - ПеречислениеСсылка.ОперацииРутокенМобильногоЭДО - Операция
// ОтветКомпоненты - Строка - Ответ компоненты в формате JSON
// СтрокаДанныхДляПодписания - Неопределено, СтрокаТаблицыЗначений - Строка данных для подписания 
//
&НаКлиенте
Процедура НачатьВзаимодействиеСКомпонентой(Операция, ОтветКомпоненты,
	СтрокаДанныхДляПодписания = Неопределено)
	
	// Начало операция возвращает JSON - соответствие с полями:
	//  isError - Булево - наличие ошибка
	//  Content - Строка - идентификатор операции, при ошибке может отсутствовать
	//  Error   - Строка - описание ошибки, если нет ошибка, то поля нет
	//  ErrorCode - Строка - код ошибки, если нет ошибка, то поля нет
	ТекстСообщения = "";
	Идентификатор = "";
	КодОшибки = "";

	Попытка
		ЧтениеОбъекта = Новый ЧтениеJSON;
		ЧтениеОбъекта.УстановитьСтроку(ОтветКомпоненты);
		ЧтениеДанных = ПрочитатьJSON(ЧтениеОбъекта);
		
		//@skip-check property-return-type
		Если ЧтениеДанных.isError Тогда
			//@skip-check property-return-type
			КодОшибки = ЧтениеДанных.ErrorCode;
			ТекстСообщения = ЧтениеДанных.Error;
		Иначе
			Идентификатор = ЧтениеДанных.Content;
			Если СтрокаДанныхДляПодписания <> Неопределено Тогда
				СтрокаДанныхДляПодписания.ИдентификаторОперацииПодписания = Идентификатор;
			КонецЕсли;

			ОбрабатываемыеОперации.Добавить(Операция, Идентификатор);
		КонецЕсли;

	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru='%1 Данные:%2'"), ОписаниеОшибки(), ОтветКомпоненты);
	КонецПопытки;

	Если ЗначениеЗаполнено(КодОшибки) Или ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбработатьНеудачноеВзаимодействииСКомпонентой(Операция, КодОшибки, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

//Удаляет обработанную операцию из обрабатываемых
//Параметры:
// Идентификатор - Строка - ИдентификаторСтрокиОперации
//
&НаКлиенте
Процедура УдалитьОперациюИзОбрабатываемых(Идентификатор)

	Для Каждого ЭлементСписка Из ОбрабатываемыеОперации Цикл
		Если ЭлементСписка.Представление = Идентификатор Тогда
			ОбрабатываемыеОперации.Удалить(ЭлементСписка);
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Находит обрабатываемую операцию по идентификатору
// Параметры:
//  Идентификатор - Строка - ИдентификаторОперации
// Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.ОперацииРутокенМобильногоЭДО - Результат операции
//
&НаКлиенте
Функция НайтиОбрабатываемуюОперацию(Идентификатор)

	Результат = Неопределено;

	Для Каждого ЭлементСписка Из ОбрабатываемыеОперации Цикл
		Если ЭлементСписка.Представление = Идентификатор Тогда
			Результат = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

//Завершает начатую операцию
//Параметры:
// ОтветКомпоненты - Строка - Ответ компоненты в формате JSON
//
&НаКлиенте
Процедура ЗавершитьВзаимодействиеСКомпонентой(ОтветКомпоненты)

	Операция = Неопределено;
	ТекстСообщения = "";
	КодОшибки = "";
	
	// Все ассинхронные операции при штатной ситуации возвращают JSON - соответствие с полями
	//  ID      - Строка - идентификатор операции, возвращается при запуске операции
	//  isError - Булево - наличие ошибка
	//  Content - Строка, Соответствие (Структура) - результат операции, при ошибке может отсутствовать
	//  Error   - Строка - описание ошибки
	//  ErrorCode - Строка - код ошибки
	//
	Попытка
		ЧтениеОбъекта = Новый ЧтениеJSON;
		ЧтениеОбъекта.УстановитьСтроку(ОтветКомпоненты);
		ЧтениеДанных = ПрочитатьJSON(ЧтениеОбъекта, Истина);

		//@skip-check variable-value-type
		ИдентификаторОперации = ЧтениеДанных["ID"];

		Операция = НайтиОбрабатываемуюОперацию(ИдентификаторОперации);

		Если ЧтениеДанных["isError"] Тогда
			КодОшибки = ЧтениеДанных["ErrorCode"];
		Иначе
			ОбработатьРезультатОперации(Операция, ЧтениеДанных["Content"], ИдентификаторОперации);
		КонецЕсли;

		Если Операция <> Неопределено Тогда
			УдалитьОперациюИзОбрабатываемых(ИдентификаторОперации);
		КонецЕсли;

		Если ЗначениеЗаполнено(КодОшибки) Тогда
			ОбработатьНеудачноеВзаимодействииСКомпонентой(Операция, КодОшибки);
		КонецЕсли;

	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 Данные:%2'"), ОписаниеОшибки(), ОтветКомпоненты);
	КонецПопытки;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбработатьНеудачноеВзаимодействииСКомпонентой(Операция, КодОшибки, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

//Обрабатывает результат операции
// Параметры:
//  Операция - ПеречислениеСсылка.ОперацииРутокенМобильногоЭДО - Обрабатываемая операция
//  Содержимое - Строка, Соответствие - Содержимое ответа от компоненты
//  ИдентификаторОперации - Неопределено, Строка - Идентификатор операции
//
&НаКлиенте
Процедура ОбработатьРезультатОперации(Операция, Содержимое, ИдентификаторОперации = Неопределено)

	Если Операция = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.ЧтениеСертификатов") Тогда
		РезультатОперации = ОтпечаткиСертификатов(Содержимое);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, РезультатОперации);
	КонецЕсли;

	Если Операция = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.Подписание") Тогда

		Если ИдентификаторОперации <> Неопределено Тогда

			НомерСтрокиДанных = 1;
			Для Каждого СтрокаДанныхДляПодписания Из ОписаниеДанных.НаборДанных Цикл

				Если СтрокаДанныхДляПодписания.ИдентификаторОперацииПодписания
					= ИдентификаторОперации Тогда

					Если ПоддерживаетсяПодписаниеЧерезФайл Тогда
						//Содержимое - адрес временного файла для подписания
						Содержимое = Новый ДвоичныеДанные(Содержимое);
					Иначе
						Если ТипЗнч(Содержимое) = Тип("Строка") Тогда
							Содержимое = Base64Значение(Содержимое);
						КонецЕсли;
					КонецЕсли;

					СтрокаДанныхДляПодписания.Вставить("ДанныеПодписи", Содержимое);
					
					ПредставлениеДанных = СтрокаДанныхДляПодписания.Представление.Представление;
					Если ЭтоПакет Тогда
						ПредставлениеДанных = СтрШаблон("(%1/%2) %3",
							НомерСтрокиДанных,
							КоличествоЭлементовВНаборе,
							ПредставлениеДанных);
					КонецЕсли;
					
					Элементы.ДекорацияТекстовоеСостояниеОперации.Заголовок = СтрШаблон("%1%2%3%4",
						Символы.ПС,
						ПредставлениеДанных,
						Символы.ПС,
						НСтр("ru = 'ПОДПИСАН'"));
					
					Элементы.ДекорацияТекстовоеСостояниеОперации.ЦветТекста = ЦветАкцента;
					
					ВыполняетсяПодписание = Ложь;

					Прервать;
				КонецЕсли;
				
				НомерСтрокиДанных = НомерСтрокиДанных + 1;

			КонецЦикла;

		КонецЕсли;

		Если ПоддерживаетсяПодписаниеЧерезФайл Тогда

			ИмяКаталогаВременныхФайловУстройства = КаталогВременныхФайловУстройства();
			КаталогВременныхФайловУстройства = Новый Файл(ИмяКаталогаВременныхФайловУстройства);
			Если КаталогВременныхФайловУстройства.Существует() Тогда
				УдалитьФайлы(ИмяКаталогаВременныхФайловУстройства);
			КонецЕсли;

		КонецЕсли;

		ЕстьДанныеДляПодписания = Ложь;

		НомерСтрокиДанных = 1;

		Для Каждого СтрокаДанныхДляПодписания Из ОписаниеДанных.НаборДанных Цикл
	
			Если Не СтрокаДанныхДляПодписания.Свойство("ДанныеПодписи") Тогда
				ЕстьДанныеДляПодписания = Истина;
				Прервать;
			КонецЕсли;
			НомерСтрокиДанных = НомерСтрокиДанных + 1;
		КонецЦикла;
		
		Если ЕстьДанныеДляПодписания Тогда
			Элементы.ПодписатьСледующий.Видимость = Истина;
			Элементы.ПодписатьСледующий.Заголовок = СтрШаблон("%1 (%2/%3)",
				НСтр("ru='Подписать'"),
				НомерСтрокиДанных,
				КоличествоЭлементовВНаборе);
		Иначе

#Если МобильныйКлиент Тогда
			УстановитьЗапретЗасыпанияКомпьютера(Ложь);
#КонецЕсли
			Закрыть(ОписаниеДанных);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

//Обрабатывает результат операции
// Параметры:
//  Операция - ПеречислениеСсылка.ОперацииРутокенМобильногоЭДО - Обрабатываемая операция 
//  КодОшибки - Строка - Код ошибки в виде строки, полученный от компоненты
//  Описание - Строка - Описание ошибки
//
&НаКлиенте
Асинх Процедура ОбработатьНеудачноеВзаимодействииСКомпонентой(Операция, КодОшибки, Описание = "")

	ТекстВопроса = "";
	РежимДиалогаВопроса = РежимДиалогаВопрос.ПовторитьОтмена;

	Если КодОшибки = "105" Тогда

		Если ТекущаяОперация = ПредопределенноеЗначение(
			"Перечисление.ОперацииРутокенМобильногоЭДО.ЧтениеСертификатов") Тогда
			Закрыть();
		ИначеЕсли Операция = ПредопределенноеЗначение(
			"Перечисление.ОперацииРутокенМобильногоЭДО.Подписание") Тогда
			Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаВыборСертификатаИПодпись;
		КонецЕсли;

	ИначеЕсли КодОшибки = "99" Тогда
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Закончилось время ожидания взаимодействия с устройством'"));

	ИначеЕсли КодОшибки = "0xa0" Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Возможно, введен некорректный пароль'"));
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Неизвестная ошибка: %1'"), КодОшибки);
	КонецЕсли;

	Если Операция = Неопределено Тогда
		ТекстВопроса = НСтр("ru ='Неизвестная операция'");
	КонецЕсли;

	Если Не ПустаяСтрока(Описание) Тогда
		ТекстВопроса = СтрШаблон("%1:%2", ТекстВопроса, Описание);
	КонецЕсли;

	ЗаголовокВопроса = НСтр("ru = 'Неудачное взаимодействие с устройством'");
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		Ответ = Ждать ВопросАсинх(ТекстВопроса,
			РежимДиалогаВопроса,,,
			ЗаголовокВопроса);

		Если Ответ = КодВозвратаДиалога.Повторить Тогда
			Если Операция = Неопределено Тогда
				ОбрабатываемыеОперации.Очистить();
			КонецЕсли;

			НачатьОбработкуОперации();
		Иначе
			Если Операция = ПредопределенноеЗначение(
				"Перечисление.ОперацииРутокенМобильногоЭДО.Подписание") Тогда
				Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаВыборСертификатаИПодпись;
			Иначе
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Возвращает опечатки сертификатов в контейнере для дальнейшей обработки на сервере
// Параметры:
// Содержимое - Соответствие - Соответствие найденных отпечатков в компоненте
// Возвращаемое значение:
//  Соответствие - Соответствие найденных отпечатков в компоненте с ключами в формате base64
//
&НаКлиенте
Функция ОтпечаткиСертификатов(Содержимое)

	ОтпечаткиСертификатовВКонтейнере.Очистить();
	ОтпечаткиСертификатов = Новый Соответствие;
	Для Каждого КлючИЗначение Из Содержимое Цикл
		Сертификат = Новый СертификатКриптографии(Base64Значение(КлючИЗначение.Значение));
		ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
		ОтпечаткиСертификатов.Вставить(ОтпечатокBase64, Истина);

		НоваяСтрокаОтпечатков = ОтпечаткиСертификатовВКонтейнере.Добавить();
		НоваяСтрокаОтпечатков.Исходный = КлючИЗначение.Ключ;
		НоваяСтрокаОтпечатков.Base64 = ОтпечатокBase64;
	КонецЦикла;

	Возврат ОтпечаткиСертификатов;

КонецФункции

//Конвертирует данные для отправки на подпись в необходимый формат
// Параметры:
//  ДанныеОперации - ДвоичныеДанные - Двоичные данные для отправки на подпись
// Возвращаемое значение:
//  Строка - Имя временного файла с данными для подписания
//
&НаКлиенте
Функция ИмяВременногоФайлаСДанными(ДанныеОперации)

	КаталогВременныхФайлов = КаталогВременныхФайловУстройства();
	ИмяВременногоФайла = СтрШаблон("%1%2", КаталогВременныхФайлов, "temp.tmp");

	ДанныеОперации.Записать(ИмяВременногоФайла);

	Возврат ИмяВременногоФайла;

КонецФункции

&НаКлиенте
Функция КаталогВременныхФайловУстройства()

	ИмяКаталогаДокументов = КаталогДокументов();

	РазделительПути = ПолучитьРазделительПути();

	Если Не СтрЗаканчиваетсяНа(ИмяКаталогаДокументов, РазделительПути) Тогда
		ИмяКаталогаДокументов = ИмяКаталогаДокументов + РазделительПути;
	КонецЕсли;

	Возврат СтрШаблон("%1%2%3", ИмяКаталогаДокументов, "temp", РазделительПути);

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСертификаты(ОтборСертификатов)

	Если ОтборСертификатов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru ='Не найдено ни одного сертификата на сервере'"));
		Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаСертификатНеНайден;
		Возврат;
	КонецЕсли;

	Для Каждого Сертификат Из ОтборСертификатов Цикл
		НоваяСтрокаСертификатов = Сертификаты.Добавить();
		НоваяСтрокаСертификатов.Значение = Сертификат;
	КонецЦикла;

	Сертификаты[0].Активность = Истина;
	ТекущийСертификат = Сертификаты[0].Значение;
	Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаВыборСертификатаИПодпись;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСертификата(Сертификат)

	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);

	СвойстваСертификатов = КриптографияБЭД.СвойстваСертификатов(Сертификаты);

	СвойстваСертификата= СвойстваСертификатов.Получить(Сертификат);

	Если СвойстваСертификата <> Неопределено Тогда

		ДанныеСертификата = Новый Структура;
		ДанныеСертификата.Вставить("Ссылка", СвойстваСертификата.Ссылка);
		ДанныеСертификата.Вставить("Отпечаток", СвойстваСертификата.Отпечаток);
		ДанныеСертификата.Вставить("ДвоичныеДанные", СвойстваСертификата.ДанныеСертификата);

		ОписаниеСертификата = Новый Структура;
		ОписаниеСертификата.Вставить("КомуВыдан", СвойстваСертификата.КомуВыдан);
		ОписаниеСертификата.Вставить("КемВыдан", СвойстваСертификата.КемВыдан);
		ОписаниеСертификата.Вставить("ДатаОкончания", СвойстваСертификата.ДействителенДо);

		ДанныеСертификата.Вставить("Описание", ОписаниеСертификата);

	КонецЕсли;

	Возврат ДанныеСертификата;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПодписание()

	Элементы.СтраницыОсновное.ТекущаяСтраница = Элементы.СтраницаОбработкаОперации;
	ТекущаяОперация = ПредопределенноеЗначение(
		"Перечисление.ОперацииРутокенМобильногоЭДО.Подписание");

	ОписаниеДанных.Вставить("ВыбранныйСертификат", ДанныеСертификата(ТекущийСертификат));
	НачатьОбработкуОперации();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьПодписаниеСБиометриейПриНеобходимости()

#Если МобильныйКлиент Тогда

	Если ПодключитьБиометрию И БезопасноеХранилище.СодержитКлюч(ИмяКлючаНастроекБиометрии) Тогда

		ПарольВБезопасномХранилище = Ждать БезопасноеХранилище.ПолучитьДанныеАсинх(ИмяКлючаНастроекБиометрии);
		Если ПарольВБезопасномХранилище <> Неопределено Тогда
			Пароль = ПарольВБезопасномХранилище;
			
			Если ПодписыватьСразуПослеПроверкиБиометрии Тогда
				ВыполнитьПодписание();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

#КонецЕсли

КонецПроцедуры

#КонецОбласти

#КонецЕсли