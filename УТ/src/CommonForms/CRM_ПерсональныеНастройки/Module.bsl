
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// работа с пользователями
	Если Параметры.Свойство("Пользователь") Тогда
		ТекущийПользователь = Параметры.Пользователь;
		Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
			Элементы.НастройкаРабочегоКаталога.Видимость = Ложь;
			Элементы.НастройкаРабочегоКаталога.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	ИмяПользователяИБ = Неопределено;
	ПользовательИБ =
		ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
	КонецЕсли;
	
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() И ИмяПользователяИБ = Неопределено Тогда
		// Если пользователю не сопоставлен пользователь ИБ, то эти настройки только для текущего и отображать их нет смысла.
		Элементы.РаботаСФайлами.Доступность				= Ложь;
		Элементы.РаботаСФайлами.Видимость				= Ложь;
		Элементы.Прочие.Доступность						= Ложь;
		Элементы.Прочие.Видимость						= Ложь;
		Элементы.ОсновнаяУчетнаяЗапись.ТолькоПросмотр	= Истина;
		Элементы.ОсновнаяУчетнаяЗапись.Видимость		= Ложь;
		Элементы.ВыполнятьАвтосохранениеЧерновиков.ТолькоПросмотр	= Истина;
		Элементы.ВыполнятьАвтосохранениеЧерновиков.Видимость		= Ложь;
		Элементы.ПериодАвтосохраненияЧерновиков.ТолькоПросмотр	= Истина;
		Элементы.ПериодАвтосохраненияЧерновиков.Видимость		= Ложь;
		Элементы.ТаймаутОтметкиОПрочтении.ТолькоПросмотр	= Истина;
		Элементы.ТаймаутОтметкиОПрочтении.Видимость		= Ложь;
		Элементы.ПоказыватьВсеВложения.ТолькоПросмотр	= Истина;
		Элементы.ПоказыватьВсеВложения.Видимость		= Ложь;
		Элементы.НеОтображатьКартинки.ТолькоПросмотр	= Истина;
		Элементы.НеОтображатьКартинки.Видимость		= Ложь;
		Элементы.ТранслитерироватьИменаФайловПриДобавленииВложений.ТолькоПросмотр	= Истина;
		Элементы.ТранслитерироватьИменаФайловПриДобавленииВложений.Видимость		= Ложь;
		Элементы.ПоказыватьМоиДела.ТолькоПросмотр	= Истина;
		Элементы.ПоказыватьМоиДела.Видимость		= Ложь;
		Элементы.ПоказыватьМоиДелаТолькоПереданныеВручную.ТолькоПросмотр	= Истина;
		Элементы.ПоказыватьМоиДелаТолькоПереданныеВручную.Видимость		= Ложь;
	КонецЕсли;
	
	// БазоваяФункциональность
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы =
		СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	Если ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Неопределено Тогда
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Истина;
		ХранилищеОбщихНастроек.Сохранить("ОбщиеНастройкиПользователя",
			 "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы, ,
			 ИмяПользователяИБ);
	КонецЕсли;
	// Конец БазоваяФункциональность 
	
	// работа с файлами
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов",
			 "СпрашиватьРежимРедактированияПриОткрытииФайла", ,
			 ИмяПользователяИБ);
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов",
			 "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла, ,
			 ИмяПользователяИБ);
	КонецЕсли;
	
	ДействиеПоДвойномуЩелчкуМыши = ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов",
		 "ДействиеПоДвойномуЩелчкуМыши", ,
		 ИмяПользователяИБ);
	Если ДействиеПоДвойномуЩелчкуМыши = Неопределено Тогда
		ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши",
			 ДействиеПоДвойномуЩелчкуМыши, ,
			 ИмяПользователяИБ);
	КонецЕсли;
	
	СпособСравненияВерсийФайлов = ХранилищеОбщихНастроек.Загрузить("НастройкиСравненияФайлов",
		 "СпособСравненияВерсийФайлов", ,
		 ИмяПользователяИБ);
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы",
		 "ПоказыватьПодсказкиПриРедактированииФайлов", , ,
		 ИмяПользователяИБ);
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы",
		 "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", , ,
		 ИмяПользователяИБ);
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда 
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы",
			 "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы, ,
			 ИмяПользователяИБ);
	КонецЕсли;
	
	ПоказыватьКолонкуРазмер = ХранилищеОбщихНастроек.Загрузить("НастройкиПрограммы",
		 "ПоказыватьКолонкуРазмер", ,
		 ИмяПользователяИБ);
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер",
			 ПоказыватьКолонкуРазмер, ,
			 ИмяПользователяИБ);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Избранные получатели (Софтфон).
	СписокПолучателей.Параметры.Элементы[0].Значение = ТекущийПользователь;
	СписокПолучателей.Параметры.Элементы[0].Использование = Истина;
	
	// Цветовые категории личных задач.
	ЦветовыеКатегорииЗадач.Параметры.Элементы[0].Значение = ТекущийПользователь;
	ЦветовыеКатегорииЗадач.Параметры.Элементы[0].Использование = Истина;
	
	// Основная учетная запись
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользовательИБ <> Неопределено И ПравоДоступа("Чтение",
		 Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		ДоступныеУчетныеЗаписи = Новый СписокЗначений;
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи, ,
			 ТекущийПользователь);
		ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись",
			 "ОсновнаяУчетнаяЗапись", ,
			 ИмяПользователяИБ);
		
		Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			
			ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
			
		Иначе
			
			ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(ОсновнаяУчетнаяЗапись);
			Если ДанныеДоступнойУчетнойЗаписи = Неопределено Тогда
				ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи[0];
				ОсновнаяУчетнаяЗапись = ДанныеДоступнойУчетнойЗаписи.Значение;
			КонецЕсли;
			ОсновнаяУчетнаяЗаписьПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
			
		КонецЕсли;
		
		// Заполнение списка выбора для выбора учётной записи
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОсновнаяУчетнаяЗапись.СписокВыбора, ,
			 ТекущийПользователь);
		
		ПериодАвтосохраненияЧерновиков = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПериодАвтосохраненияЧерновиков",
			 "ПериодАвтосохраненияЧерновиков", 0, ,
			 ИмяПользователяИБ);
		ВыполнятьАвтосохранениеЧерновиков = (ПериодАвтосохраненияЧерновиков > 0);
			 
		// Количество секунд, после истечения которого письмо помечается как прочитанное
		ТаймаутОтметкиОПрочтении = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТаймаутОтметкиОПрочтении",
			 "ТаймаутОтметкиОПрочтении", 5, ,
			 ИмяПользователяИБ);
		
		ПоказыватьВсеВложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения",
			 "ПоказыватьВсеВложения", Ложь, ,
			 ИмяПользователяИБ);
		
		НеОтображатьКартинки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НеОтображатьКартинки",
			 "НеОтображатьКартинки", Ложь, ,
			 ИмяПользователяИБ);
		
		ТранслитерироватьИменаФайловПриДобавленииВложений = 
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТранслитерироватьИменаФайловПриДобавленииВложений", 
			"ТранслитерироватьИменаФайловПриДобавленииВложений", Ложь, , 
			ИмяПользователяИБ);
		
		ПоказыватьМоиДела = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПоказыватьМоиДела",
			 "ПоказыватьМоиДела", Ложь, ,
			 ИмяПользователяИБ);
		
		ПоказыватьМоиДелаТолькоПереданныеВручную = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			 "ПоказыватьМоиДелаТолькоПереданныеВручную",
			 "ПоказыватьМоиДелаТолькоПереданныеВручную", Ложь, ,
			 ИмяПользователяИБ);
		
		АвтофокусВСпискеПисем = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("АвтофокусВСпискеПисем",
			 "АвтофокусВСпискеПисем", 0, ,
			 ИмяПользователяИБ);
		
	Иначе
		Элементы.ЭлектроннаяПочта.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ПоказыватьМоиДелаТолькоПереданныеВручную.Доступность = ПоказыватьМоиДела;
	
	// +СофтФон
	сфпМассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ЭлементМассива Из сфпМассивАвтоматическихДействий Цикл
		сфпСписокАвтоматическихДействий.Добавить(ЭлементМассива.Наименование);
	КонецЦикла;
	сфпПривязкаНомера = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");
	// -СофтФон
	// Настройки пользователей
	ЗаполнитьДерево();
	
	// Оповещения
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	ИспользоватьОповещенияМессенджер		= Константы.CRM_ИспользоватьОповещенияМессенджер.Получить();
	
	ЗаполнитьДеревоНастроекОповещений();
	
	ЗаполнитьТаблицуУчетныхЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Персональные настройки пользователя %1';en='Personal settings of the user %1'"),
					Строка(ТекущийПользователь));
	
	УстановитьСвойстваЭлементовФормы();
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	ЗагрузитьДополнительныеНастройкиЭлектроннойПочты();
	
	СпрашиватьПроИзмененныеДанные = Истина;
	
	Если Параметры.Свойство("ТекущаяСтраница") Тогда
		Элементы.Группа.ТекущаяСтраница = Элементы[Параметры.ТекущаяСтраница];
		Элементы.ДекорацияПримечание.Видимость = (Параметры.ТекущаяСтраница = Элементы.Оповещения);
	КонецЕсли;	
	
	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		Элементы.КопированиеНастроек.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("АРМПочта") 
		Или Параметры.Свойство("АРММоиПродажи") Или Параметры.Свойство("АРМПоддержка") Тогда
		// Скрыть остальные закладки.
		Для Каждого СтраницаГруппы Из Элементы.Группа.ПодчиненныеЭлементы Цикл
			Если СтраницаГруппы <> Элементы.Группа.ТекущаяСтраница Тогда
				СтраницаГруппы.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Скрыть заголовок переключения страниц и команду копирования настроек.
		Элементы.Группа.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.КопированиеНастроек.Видимость = Ложь;
		
		Если Параметры.Свойство("ТекущаяСтраница") И Параметры.ТекущаяСтраница = "НастройкиКолонокАРМ" Тогда
			Элементы.ДеревоКолонокАРМ.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		КонецЕсли;
		
	КонецЕсли;
	
	ШрифтДиалоговИМеню = WindowsШрифты.ШрифтДиалоговИМеню;
	
	СписокГруппПолучателей.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	
	ПользователиСлужебный.НастроитьПолеНомерКартинкиДинамическогоСписка(СписокПолучателей);
	
	СкрытыеКолонкиАРМ = ХранилищеОбщихНастроек.Загрузить("НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ", , ИмяПользователяИБ);
	Если СкрытыеКолонкиАРМ = Неопределено Тогда
		СкрытыеКолонкиАРМ = Новый СписокЗначений;
		ХранилищеОбщихНастроек.Сохранить("НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ", , ИмяПользователяИБ);
	КонецЕсли;
	ЗаполнитьДеревоКолонокАРМ();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='При завершении работы в форме ""';en='Upon completion of work in the form of ""'") 
				+ Заголовок 
				+ НСтр("ru='"" все изменения будут утеряны.'");
			Возврат;
		КонецЕсли;
		Если СпрашиватьПроИзмененныеДанные Тогда
			Отказ = Истина;
			ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбратныйВызов,
				 НСтр("ru='Настройки были изменены. Сохранить изменения?';
				|en='Settings were changed. Save changes?'"),
				 РежимДиалогаВопрос.ДаНет);
		Иначе
			Отказ = ВыполнитьСохранениеНастроекПередЗакрытием();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
    Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = ВыполнитьСохранениеНастроекПередЗакрытием();
	КонецЕсли;
	Если НЕ Отказ Тогда
		Модифицированность	= Ложь;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// +СофтФон
	Если ИмяСобытия = "сфпВыбранТелефонныйНомерПользователя" Тогда
		ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ (ТД.Значение = Параметр) Тогда
			// Если изменился текущий внутренний номер пользователя.
			ТД.Значение	= Параметр;
			УстановитьУсловноеОформлениеПоля(ТД.Настройка);		
			// Запишем внутренний номер для текущего пользователя.
			МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(Параметр, ТекущийПользователь);
			Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() Тогда
				// Изменим маршрутизацию в АТС.
				СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				Для Каждого ПользовательМассива Из МассивПользователей Цикл
					НаборПользователя	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ПользовательМассива);
					Для Каждого СтрокаНабора Из НаборПользователя Цикл
						СтарыйНабор.Добавить(СтрокаНабора);
					КонецЦикла;	
				КонецЦикла;	
				НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				// Изменяем внутренний номер на новый.
				Для Каждого СтрокаНабора Из НовыйНабор Цикл
					СтрокаНабора.ВнутреннийНомер = Параметр;
				КонецЦикла;	
				СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
				сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
			КонецЕсли;
			Модифицированность = Истина;
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	КонецЕсли;
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Параметры.КлючНазначенияИспользования = "СписокПолучателей" Тогда
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		ИначеЕсли ИспользоватьГруппыПользователей Тогда
			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
					УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Истина) Тогда
					УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
		ПоказатьЗначение(, ОсновнаяУчетнаяЗапись);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,
			 Нстр("ru='В данной учётной записи отключена отправка писем!';en='In this account,
			| sending letters is disabled!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;
	
	ОсновнаяУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОсновнаяУчетнаяЗаписьПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	
	ОсновнаяУчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКанала(Элемент)
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Корень = ТекДанные.ПолучитьРодителя();
	
	Если НЕ Корень = Неопределено
		 И Корень.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия") Тогда
		Если Элемент.Имя = "SMS" Тогда
			Если ТекДанные[Элемент.Имя] Тогда
				ТекДанные.Email			= Ложь;
				ТекДанные.Напоминание	= Ложь;
				ТекДанные.Мессенджер	= Ложь;
			КонецЕсли;
		ИначеЕсли Элемент.Имя = "Email" Тогда
			Если ТекДанные[Элемент.Имя] Тогда
				ТекДанные.SMS			= Ложь;
				ТекДанные.Напоминание	= Ложь;
				ТекДанные.Мессенджер	= Ложь;
			КонецЕсли;
		ИначеЕсли Элемент.Имя = "Мессенджер" Тогда
			Если ТекДанные[Элемент.Имя] Тогда
				ТекДанные.SMS			= Ложь;
				ТекДанные.Email			= Ложь;
				ТекДанные.Напоминание	= Ложь;
			КонецЕсли;
		ИначеЕсли Элемент.Имя = "Напоминание" Тогда
			Если ТекДанные[Элемент.Имя] Тогда
				ТекДанные.SMS			= Ложь;
				ТекДанные.Email			= Ложь;
				ТекДанные.Мессенджер	= Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = 
			ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") 
		Или Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = 
			ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокДоступных = Новый СписокЗначений;
		СписокДоступных.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ПериодичностьОповещений.День"));
		СписокДоступных.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ПериодичностьОповещений.Неделя"));
		
		ДанныеВыбора = СписокДоступных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОповещенияПриИзменении(Элемент)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеНачалоВыбора(
		Элемент,
		ДанныеВыбора,
		ВыборДобавлением,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеНачалоВыбораЗавершение",
		ЭтотОбъект);
	
	ДиалогВыбораШрифта = Новый ДиалогВыбораШрифта;
	ДиалогВыбораШрифта.Шрифт = ШрифтПоУмолчаниюВЭлектронномПисьме;
	ДиалогВыбораШрифта.Показать(ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры // ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеНачалоВыбора()

&НаКлиенте
Процедура ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеНачалоВыбораЗавершение(Шрифт, ДополнительныеПараметры) Экспорт
	
	Если Шрифт <> Неопределено Тогда
		Модифицированность = Истина;
		
		Если Шрифт = ШрифтДиалоговИМеню Тогда
			ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеОчистка(
				Элементы.ШрифтПоУмолчаниюВЭлектронномПисьмеПредставление, Ложь);
		Иначе
			ШрифтПоУмолчаниюВЭлектронномПисьме				= Шрифт;
			ШрифтПоУмолчаниюВЭлектронномПисьмеПредставление	= Строка(Шрифт);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеНачалоВыбораЗавершение()

&НаКлиенте
Процедура ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ШрифтПоУмолчаниюВЭлектронномПисьме <> ШрифтДиалоговИМеню Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ШрифтПоУмолчаниюВЭлектронномПисьме				= ШрифтДиалоговИМеню;
	ШрифтПоУмолчаниюВЭлектронномПисьмеПредставление	= НСтр("ru = 'Шрифт по умолчанию'; en = 'Default font'");
	
КонецПроцедуры // ШрифтПоУмолчаниюВЭлектронномПисьмеПредставлениеОчистка()

&НаКлиенте
Процедура ВыполнятьАвтосохранениеЧерновиковПриИзменении(Элемент)
	Элементы.ПериодАвтосохраненияЧерновиков.ТолькоПросмотр = Не ВыполнятьАвтосохранениеЧерновиков;
	ПериодАвтосохраненияЧерновиков = ?(ВыполнятьАвтосохранениеЧерновиков, 10, 0);
	Оповестить("АвтосохранениеЧерновиковПисем", ВыполнятьАвтосохранениеЧерновиков);
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтосохраненияЧерновиковПриИзменении(Элемент)
	Если ВыполнятьАвтосохранениеЧерновиков И ПериодАвтосохраненияЧерновиков < 10 Тогда
		ПериодАвтосохраненияЧерновиков = 10;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.ДекорацияПримечание.Видимость = (ТекущаяСтраница = Элементы.Оповещения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроек

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Если (Элемент.ТекущиеДанные = Неопределено)
		 ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ОпределитьДоступностьНастройки(Элемент.ТекущиеДанные.Настройка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	// +СофтФон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьВнутреннююПанель") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией")
			 И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийНомер", Элемент.ТекущиеДанные.Значение);
			ОткрытьФорму("ОбщаяФорма.сфпСписокВнутреннихНомеров", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДополнительныеВнутренниеНомера") Тогда
		Отказ = Истина;	
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий,
				 Элементы.ДеревоНастроекЗначение,
				 ВыбранныйЭлемент);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий,
				 Элементы.ДеревоНастроекЗначение,
				 ВыбранныйЭлемент);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина; 
	КонецЕсли;
	// -СофтФон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяНачалаРабочегоДня")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяОкончанияРабочегоДня")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяНачалаОбеденногоПерерыва")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяОкончанияОбеденногоПерерыва") Тогда
		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "ДФ=HH:mm; ДП=00:00";
	Иначе
		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "";
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойСценарий") Тогда
		Элементы.ДеревоНастроекЗначение.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		Элементы.ДеревоНастроекЗначение.РежимВыбораИзСписка	= Истина;
		Элементы.ДеревоНастроекЗначение.КнопкаСоздания		= Ложь;
		Элементы.ДеревоНастроекЗначение.СписокВыбора.ЗагрузитьЗначения(ПолучитьДанныеВыбораСценария(ДеревоНастроек));
	Иначе
		Элементы.ДеревоНастроекЗначение.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
		Элементы.ДеревоНастроекЗначение.РежимВыбораИзСписка	= Ложь;
		Элементы.ДеревоНастроекЗначение.КнопкаСоздания		= Истина;
		Элементы.ДеревоНастроекЗначение.СписокВыбора.Очистить();
	КонецЕсли;
	
	// Настройки типа "Булево" меняем без входа в режим редактирования.
	Если ТипЗнч(Элемент.ТекущиеДанные.Значение) = Тип("Булево") Тогда
		Элемент.ТекущиеДанные.Значение = НЕ Элемент.ТекущиеДанные.Значение;
		УстановитьУсловноеОформлениеПоля(Элемент.ТекущиеДанные.Настройка);
		Модифицированность = Истина;
		Отказ = Истина;
		ДеревоНастроекПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриИзменении(Элемент)
	
	// Установка оформления небулевой настройки.
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные.ЭтоГруппа И НЕ (ТипЗнч(ТекДанные.Значение) = Тип("Булево")) Тогда
		УстановитьУсловноеОформлениеПоля(ТекДанные.Настройка);
		Если ТекДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон") Или
			ТекДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон") Тогда
			НеЗаполнен = ?(ТекДанные.Значение = "", Истина, Ложь);
			УстановитьУсловноеОформлениеНезаполненногоПоля(ТекДанные.Настройка, НеЗаполнен);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВариантОформленияМессенджера") Тогда
		ИзмененныйВариантОформленияМессенджера = ТекДанные.Значение;
	КонецЕсли;
	
	// +Софтфон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер") Тогда
		сфпПривязкаНомера = Элемент.ТекущиеДанные.Значение;
		сфпПереподключитьСофтФон = Истина;
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон") Тогда
				ЭлементыДереваСофтфон = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСофтфон Из ЭлементыДереваСофтфон Цикл
					Если ЭлементДереваСофтфон.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона") Тогда
						ЭлементДереваСофтфон.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						ЭлементыДереваАвторизация = ЭлементДереваСофтфон.ПолучитьЭлементы();
						Для Каждого ЭлементДереваАвторизация Из ЭлементыДереваАвторизация Цикл
							ЭлементДереваАвторизация.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// -Софтфон
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ДеревоНастроек.ТекущиеДанные;
	
	Если ТекущиеДанныеСтроки.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипУслуг")
			Или ТекущиеДанныеСтроки.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипОбращения") Тогда
		ИсправитьСценарийПоЗависимойНастройки();
	КонецЕсли;
	
КонецПроцедуры // ДеревоНастроекЗначениеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастроекОповещений

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
		
	Если НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
	И НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПроектам") Тогда
			ПараметрыСтруктура = Новый Структура();
			ПараметрыСтруктура.Вставить("ТекстЗапроса",
				 "ВЫБРАТЬ РАЗРЕШЕННЫЕ Проекты.Ссылка КАК Проект ИЗ Справочник.Проекты КАК Проекты");
			ПараметрыСтруктура.Вставить("Заголовок",
				 НСтр("ru='Настройка отбора по проектам';
				|en='Settings of filter by projects'"));
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных",
					 ПолучитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище));
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПартнерам") Тогда
			ПараметрыСтруктура = Новый Структура();
			ПараметрыСтруктура.Вставить("ТекстЗапроса",
				 "ВЫБРАТЬ Партнеры.Ссылка КАК Клиент ИЗ Справочник.Партнеры КАК Партнеры");
			ПараметрыСтруктура.Вставить("Заголовок",
				 НСтр("ru='Настройка отбора по клиентам';
				|en='Settings of filter by customers'"));
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных",
					 ПолучитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище));
			КонецЕсли;
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНастроекОповещенийОтборНачалоВыбораЗавершение",
			 ЭтотОбъект,
			 ТекДанные);
		ОткрытьФорму("ОбщаяФорма.CRM_ОтборКомпоновкиДанных", ПараметрыСтруктура, ЭтотОбъект, , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборНачалоВыбораЗавершение(НастроенныйОтбор, ТекДанные) Экспорт
	
	Если НастроенныйОтбор <> Неопределено Тогда
		Если ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПроектам") Тогда
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
			КонецЕсли;
			
			Если НастроенныйОтбор.Элементы.Количество() = 0 Тогда
				ТекДанные.АдресВоВременномХранилище = "";
				ТекДанные.Отбор = "";
			Иначе
				ТекДанные.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастроенныйОтбор, УникальныйИдентификатор);
				ТекДанные.Отбор = Строка(НастроенныйОтбор);
			КонецЕсли;
			Модифицированность = Истина;
		ИначеЕсли ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПартнерам") Тогда
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
			КонецЕсли;
			
			Если НастроенныйОтбор.Элементы.Количество() = 0 Тогда
				ТекДанные.АдресВоВременномХранилище = "";
				ТекДанные.Отбор = "";
			Иначе
				ТекДанные.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастроенныйОтбор, УникальныйИдентификатор);
				ТекДанные.Отбор = Строка(НастроенныйОтбор);
			КонецЕсли;
			Модифицированность = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Если НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
	И НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
		Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
		КонецЕсли;
		ТекДанные.АдресВоВременномХранилище = "";
		ТекДанные.Отбор = "";
	Иначе
		ТекДанные.Отбор = 0;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
		ИЛИ ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
			Элементы.ДеревоНастроекОповещенийОтбор.РедактированиеТекста = Истина;
		Иначе
			Элементы.ДеревоНастроекОповещенийОтбор.РедактированиеТекста = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокГруппПолучателей

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "СписокГруппПолучателей".
//
&НаКлиенте
Процедура СписокГруппПолучателейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокГруппПолучателей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СоставГруппыПолучателей,
			"ГруппаПолучателей", ТекущиеДанные.Ссылка);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СоставГруппыПолучателей,
			"ГруппаПолучателей", Неопределено);
	КонецЕсли;
	
	Элементы.СоставГруппыПолучателейПодбор.Доступность = (ТекущиеДанные <> Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПолучателей

&НаКлиенте
// Процедура - обработчик события "Выбор" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьТекущегоПолучателя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ВыбратьТипПолучателяИзСписка(Ложь);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущегоПолучателя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ИспользоватьГруппыПользователей Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Истина) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
			УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПолучателейПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ПользователиСлужебный.ДинамическийСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокГруппПолучателей

// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СоставГруппыПолучателей".
//
&НаКлиенте
Процедура СоставГруппыПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаПолучателей = Элементы.СписокГруппПолучателей.ТекущиеДанные.Ссылка;
	Если ДобавитьПолучателяВСоставГруппы(ГруппаПолучателей, ВыбранноеЗначение) Тогда
		УстановитьТекущуюЗаписьСоставаГруппыПолучателей(ГруппаПолучателей, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставГруппыПолучателей

// Процедура - обработчик события "Выбор" элемента формы "СоставГруппыПолучателей".
//
&НаКлиенте
Процедура СоставГруппыПолучателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Получатель = ПолучательПоКлючуЗаписи(ВыбраннаяСтрока);
	ПоказатьЗначение(, Получатель);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНастроекПочты

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегорииПользователей

&НаКлиенте
Процедура CRM_КатегорииПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", ТекущийПользователь));
	ФормаЗаписи = ПолучитьФорму("Справочник.CRM_КатегорииПользователей.ФормаОбъекта", ПараметрыФормы);
	ФормаЗаписи.Открыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКолонокАРМ

&НаКлиенте
Процедура ДеревоКолонокАРММоиПродажиПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Отображение Тогда
			НайденныйЭлемент = СкрытыеКолонкиАРМ.НайтиПоЗначению(ТекДанные.Колонка);
			Если НайденныйЭлемент <> Неопределено Тогда
				СкрытыеКолонкиАРМ.Удалить(НайденныйЭлемент);
			КонецЕсли;
		Иначе
			СкрытыеКолонкиАРМ.Добавить(ТекДанные.Колонка)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Команда.Имя = "ЗаписатьИЗакрыть" Тогда
		СпрашиватьПроИзмененныеДанные = Ложь;
		Закрыть();
	ИначеЕсли Команда.Имя = "Закрыть" Тогда
		СпрашиватьПроИзмененныеДанные = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполнитьСохранениеНастроекПередЗакрытием();
	
	СнятьВыделениеЦветомИШрифтомСЯчеек();
	
КонецПроцедуры // Записать()

&НаКлиенте
Процедура ОтменаИзменений(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	ПараметрыФормы = Новый Структура("Пользователь", ТекущийПользователь);
	ОткрытьФорму("ОбщаяФорма.НастройкаРабочегоКаталога", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаботыСПочтой(Команда)
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.НастройкиРаботыСПочтой", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	НачатьУстановкуРасширенияРаботыСФайлами();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПодборИзбранныхПолучателей".
Процедура ПодборИзбранныхПолучателей(Команда)
	ВыбратьТипПолучателяИзСписка(Истина);
КонецПроцедуры // ПодборИзбранныхПолучателей()

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(, ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеФайлы(Команда)
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.РедактируемыеФайлы");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКопированиеНастроек(Команда)
	
	ОткрытьФорму(
		"Обработка.CRM_НастройкиПользователей.Форма.КопированиеНастроекПользователей", ,
		ЭтотОбъект,
		КлючУникальности, , , ,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	);
	
КонецПроцедуры // ОткрытьКопированиеНастроек()

// Процедура - обработчик команды формы "ПодборСоставаГруппыПолучателей".
&НаКлиенте
Процедура ПодборСоставаГруппыПолучателей(Команда)
	ВыбратьТипПолучателяИзСпискаДляГруппы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СофтФон

&НаКлиенте
// Процедура - обработчик выбора активного действия.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранное действие.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура сфпОбработкаВыбораАктивногоДействия(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
	ТД.Значение = ВыбранныйЭлемент.Значение;
	УстановитьУсловноеОформлениеПоля(ТД.Настройка);
	Модифицированность = Истина;
КонецПроцедуры // СфпОбработкаВыбораАктивногоДействия().

#КонецОбласти

&НаСервере
// Процедура сохраняет массив пользовательских настроек МассивСтруктур. 
// Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//    НужноОбновитьПовторноИспользуемыеЗначения - Булево - требуется обновить повторно используемые значения.
//
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ПользовательИБ =
		ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
		Для Каждого Элемент Из МассивСтруктур Цикл
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Элемент.Объект, Элемент.Настройка,
				 Элемент.Значение, , ИмяПользователяИБ,
				 НужноОбновитьПовторноИспользуемыеЗначения);
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для выбранного пользователя не сопоставлен пользователь информационной базы. Настройки не были сохранены.';
			|en='The user of the information database is not mapped for the selected user. The settings were not saved.'"));
	КонецЕсли;
КонецПроцедуры // ХранилищеОбщихНастроекСохранитьМассив()

&НаСервере
Процедура ЗаполнитьДеревоНастроекОповещений()
	
	НастройкиЭлементы = ДеревоНастроекОповещений.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	СписокИсключаемыхВидов = Новый СписокЗначений;

	ОсновнойВариантПоставки = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьОсновнойВариантПоставки();
	
	Если ОсновнойВариантПоставки <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки);
	КонецЕсли;
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.ОшибкаСрабатыванияТриггера);
	КонецЕсли;
	
	СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.СрокДействияЛицензииИстекает); // Используется для iCRM.
	
	ИспользоватьМессенджеры = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	, ТекущийПользователь);
	Запрос.УстановитьПараметр("Исключения"		, СписокИсключаемыхВидов);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь КАК Пользователь,
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения КАК СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность КАК Периодичность,
	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
	|	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер,
	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
	|	CRM_ОповещенияПользовательскиеНастройки.Сумма КАК Сумма,
	|	CRM_ОповещенияПользовательскиеНастройки.Хранилище КАК Хранилище
	|ПОМЕСТИТЬ ПользовательскиеНастройки
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ВидыОповещений.Ссылка КАК ВидОповещения,
	|	CRM_ВидыОповещений.Код КАК Код,
	|	CRM_ВидыОповещений.Родитель КАК Родитель,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Пользователь, &Пользователь) КАК Пользователь,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СрокОповещения, 0) КАК СрокОповещения,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Периодичность, ЗНАЧЕНИЕ(Перечисление.CRM_ПериодичностьОповещений.ПустаяСсылка)) КАК Периодичность,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Напоминание, ЛОЖЬ) КАК Напоминание,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СМС, ЛОЖЬ) КАК SMS,
	|	ЕСТЬNULL(ПользовательскиеНастройки.ЭлектроннаяПочта, ЛОЖЬ) КАК Email,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Мессенджер, ЛОЖЬ) КАК Мессенджер,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Хранилище, НЕОПРЕДЕЛЕНО) КАК Хранилище
	|ИЗ
	|	Справочник.CRM_ВидыОповещений КАК CRM_ВидыОповещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеНастройки КАК ПользовательскиеНастройки
	|		ПО CRM_ВидыОповещений.Ссылка = ПользовательскиеНастройки.ВидОповещения
	|ГДЕ
	|	НЕ CRM_ВидыОповещений.ЭтоГруппа
	|	И НЕ CRM_ВидыОповещений.ПометкаУдаления
	|	И НЕ CRM_ВидыОповещений.Ссылка В (&Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидОповещения)
	|ПО
	|	Родитель";
	
	ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГрупп.Следующий() Цикл
		СтрокаГруппы = НастройкиЭлементы;
		СтрокаНастройкиРодитель = СтрокаГруппы.Добавить();
		СтрокаНастройкиРодитель.ВидОповещения = ВыборкаГрупп.Родитель;
		СтрокаНастройкиРодитель.ВидОповещенияЭтоГруппа = Истина;
		СтрокаГруппыЭлементы = СтрокаНастройкиРодитель.ПолучитьЭлементы();
		
		Выборка = ВыборкаГрупп.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Родитель = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
				//Если (Выборка.Напоминание И НЕ ИспользоватьНапоминания) ИЛИ (Выборка.SMS И НЕ ИспользоватьОповещенияСМС)
				//ИЛИ (Выборка.Email И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
				//	Продолжить;
				//КонецЕсли;
			КонецЕсли;
			Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
				 И Выборка.Родитель = Справочники.CRM_ВидыОповещений.ЗначимыеСобытия Тогда
				Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПоступлениеОплаты Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров
				И Не ИспользоватьМессенджеры Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка);
			СтрокаНастройки.НомерКартинки = Истина;
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
			ИЛИ Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
				СтрокаНастройки.Отбор = Выборка.Сумма;
			КонецЕсли;
			
			Если Выборка.Хранилище <> Неопределено Тогда
				ЗначениеИзХранилища = Выборка.Хранилище.Получить();
				Если ЗначениеИзХранилища <> Неопределено Тогда
					СтрокаНастройки.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ЗначениеИзХранилища,
						 УникальныйИдентификатор);
					Если	СтрокаНастройки.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам
						Или	СтрокаНастройки.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
						//
						СтрокаНастройки.Отбор = Строка(ЗначениеИзХранилища);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров 
				И Выборка.Хранилище = Неопределено Тогда
				СтрокаНастройки.Напоминание = Ложь;
				СтрокаНастройки.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута;
				СтрокаНастройки.СрокОповещения = 1;
			КонецЕсли;
			
			// Сохраним старые значения настроек оповещения о входящих  письмах.
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
				ОповещенияОВходящихПисьмахНапоминание    = Выборка.Напоминание;
				ОповещенияОВходящихПисьмахСрокОповещения = Выборка.СрокОповещения;
				ОповещенияОВходящихПисьмахПериодичность  = Выборка.Периодичность;
				
			ИначеЕсли Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров Тогда
				
				ОповещенияОСообщенияхМессенджеровНапоминание    = Выборка.Напоминание;
				ОповещенияОСообщенияхМессенджеровСрокОповещения = Выборка.СрокОповещения;
				ОповещенияОСообщенияхМессенджеровПериодичность  = Выборка.Периодичность;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура определяет доступность изменения значения настройки софтфона.
//
// Параметры:
//	Настройка - ПланВидовХарактеристикСсылка	- Настройка софтфона.
//
// Возвращаемое значение:
//	Булево	- Доступность изменения значения.
//
Функция ОпределитьДоступностьНастройки(Настройка)
	Попытка
		КодНастройки = Число(Настройка.Код);
	Исключение
		КодНастройки = 0;
	КонецПопытки;
	Если (КодНастройки > 90001) И (КодНастройки < 90013) Тогда
		НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
		ГруппаСофтФон = НайтиНастройкуВДереве(ДеревоНастроек.ПолучитьЭлементы(),
			 ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон);
		Если ГруппаСофтФон = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		ЭлементыГруппыСофтФон = ГруппаСофтФон.ПолучитьЭлементы();
		НастройкаИспользоватьСофтФон = Ложь;
		НайденныеСтрокиДерева = НайтиНастройкуВДереве(ЭлементыГруппыСофтФон,
			 ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон,
			 Ложь);
		Если НЕ (НайденныеСтрокиДерева = Неопределено) Тогда
			НастройкаИспользоватьСофтФон = НайденныеСтрокиДерева.Значение;
		КонецЕсли;
		Если НЕ НастройкаИспользоватьСофтФон Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ОпределитьДоступностьНастройки()

&НаСервереБезКонтекста
// Процедура выполняет рекурсивный поиск настройки в дереве настроек.
//
// Параметры:
//	СтрокиДерева	- КоллекцияСтрокДереваЗначений	- Строки дерева, в которых выполняется поиск.
//	Настройка		- ПланВидовХарактеристикСсылка	- Настройка для поиска.
//	ТолькоГруппы	- Булево						- Признак поиска только групп.
//
// Возвращаемое значение:
//	СтрокаДереваЗначений	- Строка настройки.
//
Функция НайтиНастройкуВДереве(СтрокиДерева, Настройка, ТолькоГруппы = Истина)
	НайденныйЭлемент = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ТолькоГруппы И НЕ СтрокаДерева.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Настройка = Настройка Тогда
			НайденныйЭлемент = СтрокаДерева;
		Иначе
			ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
			НайденныйЭлемент = НайтиНастройкуВДереве(ПодчиненныеСтрокиДерева, Настройка, ТолькоГруппы);
		КонецЕсли;			
		Если НЕ (НайденныйЭлемент = Неопределено) Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;	
	Возврат НайденныйЭлемент;
КонецФункции // НайтиНастройкуВДереве()	

&НаСервере
// Процедура обновляет информацию в таблице настроек.
//
Процедура ЗаполнитьДерево()
	
	НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	
	// +СофтФон
	сфпИспользоватьСофтФон = ПолучитьФункциональнуюОпцию("сфпИспользоватьСофтФон");
	// -СофтФон
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Настройки.Код КАК Код,
	|	Настройки.Родитель КАК Родитель,
	|	Настройки.Ссылка КАК Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ Настройки.ЭтоГруппа КАК НомерКартинки,
	|	Настройки.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям КАК ФункциональнаяОпцияУчетПоНесколькимОрганизациям,
	|	ЗначениеНастроек.Значение КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.CRM_НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнаяОрганизация)
	|					И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// +Календари
	// Скрытие устаревших настроек календарей Google.
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.IDКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниТокенаAPI)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ИдКалендаряКанала)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ЧасовойПоясКалендаряGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.НастройкиКалендаряGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.Google)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// Скрытие настроек синхронизации календарей - редактируются в отдельной закладке.
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизацияКалендарей)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьДляСинхронизации)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// -Календари
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.УдалитьПодставлятьОтветственногоЗаКлиентаВИнтерес)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	//ТекстИсключенияНастроекДляСпарки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ УБЫВ,
	|	Настройки.Код";
	
	Если НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы",
		 "ФункциональнаяОпцияУчетПоНесколькимОрганизациям") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям", "ИСТИНА");
		
	КонецЕсли;
	
	// Скрытие неактуальных настроек:
	ТекстИсключенияНастроекДляСпарки = "";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстИсключенияНастроекДляСпарки = "И ВЫБОР
		|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойВидЦенПродажи)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстИсключенияНастроекДляСпарки", ТекстИсключенияНастроекДляСпарки);
	
	// Скрытие неактуальных настроек:
	ТекстИсключенияНастроекДляСпарки = "";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстИсключенияНастроекДляСпарки = "И ВЫБОР
		|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойВидЦенПродажи)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстИсключенияНастроекДляСпарки", ТекстИсключенияНастроекДляСпарки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			КодНастройки = Число(Выборка.Код);
		Исключение	
			КодНастройки = 0;
		КонецПопытки;
		
		Если СтрНайти(Выборка.ИмяПредопределенныхДанных, "Удалить_") = 1 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если Выборка.ЭтоГруппа Тогда
			
			// +СофтФон
			Если НЕ сфпИспользоватьСофтФон Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействияПриЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -СофтФон
			
			// +Fresh
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПараметрыИспользованияCRM Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -Fresh
			
			СтрокаГруппы = НастройкиЭлементы;
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				НайденныйРодитель = НайтиНастройкуВДереве(СтрокаГруппы, Выборка.Родитель);
				Если НЕ (НайденныйРодитель = Неопределено) Тогда
					СтрокаГруппы = НайденныйРодитель.ПолучитьЭлементы();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаНастройки = СтрокаГруппы.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;
			// +СофтФон
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона Тогда
				СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;
			// -СофтФон
			СтрокаГруппыЭлементы = СтрокаНастройки.ПолучитьЭлементы();
			
		Иначе
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипУслуг
				 И  НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг") Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипОбращения
				 И НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
				Продолжить;
			КонецЕсли;
			// +СофтФон
			Если НЕ сфпИспользоватьСофтФон Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЗакрыватьПанельПриЗавершенииРаботы ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьВнутреннююПанель ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДополнительныеВнутренниеНомера
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -СофтФон
			
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АвтоматическиЗапускатьТаймерУчетаРабочегоВремени
				И Не ПолучитьФункциональнуюОпцию("CRM_ИспользоватьУчетРабочегоВремени") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ВариантОформленияМессенджера Тогда
				СтрокаНастройки.СкрыватьКолонку = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами");
			КонецЕсли;
			
			// +Fresh
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АдминистраторМобильногоПриложения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -Fresh
			Если НЕ РольДоступна("АдминистраторСистемы") Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.АдминистраторМобильногоПриложения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			// Особеннности объединенных решений
			ИмяКонфигурации = Метаданные.Имя;
			
			Если ИмяКонфигурации = "CRM" Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьCRM ИЛИ 
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьТиповуюФормуРегистрацииНовогоПартнера 
				Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе // Объединенные решения
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПодставлятьОсновнойПроектВПоручения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Ссылка.Родитель) Тогда
				СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
			Иначе
				СтрокаНастройки = ДеревоНастроек.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			// +СофтФон
			Если СтрокаНастройки.Настройка.Родитель = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона Тогда
				НеЗаполнен = ?(Выборка.Значение = "", Истина, Ложь);
				УстановитьУсловноеОформлениеНезаполненногоПоля(СтрокаНастройки.Настройка, НеЗаполнен);
			КонецЕсли;
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = сфпСписокАвтоматическихДействий[0];
				КонецЕсли;	
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;
			ИначеЕсли СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = сфпСписокАвтоматическихДействий[0];
				КонецЕсли;	
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;
			Иначе	
				СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			КонецЕсли;	
			// -СофтФон
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;
			
			// +СофтФон
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон 
			ИЛИ Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон Тогда
				СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;
			// -СофтФон
			
			// +Лицензирование
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьCRM Тогда
				ИспользоватьCRMПредыдущий = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Истина, СтрокаНастройки.Значение);
			КонецЕсли;
			// -Лицензирование
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДерево()

&НаСервере
// Процедура обновляет информацию в таблице учетных записей.
//
Процедура ЗаполнитьТаблицуУчетныхЗаписей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕОПРЕДЕЛЕНО КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись КАК ДоступнаДляВсех
	|ПОМЕСТИТЬ ПользователиУчетнойЗаписи
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь,
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель,
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = ИсполнителиЗадач.РольИсполнителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиУчетнойЗаписи.УчетнаяЗапись КАК УчетнаяЗапись,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьИсходящегоПисьма КАК ПодписьИсходящегоПисьма,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьПересылаемогоПисьма КАК ПодписьПересылаемогоПисьма,
	|	CRM_ПодписиУчетныхЗаписей.ИмяОтправителя КАК ИмяОтправителя
	|ИЗ
	|	ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПодписиУчетныхЗаписей КАК CRM_ПодписиУчетныхЗаписей
	|		ПО ПользователиУчетнойЗаписи.УчетнаяЗапись = CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись
	|			И (CRM_ПодписиУчетныхЗаписей.Пользователь = &Пользователь)
	|ГДЕ
	|	ПользователиУчетнойЗаписи.Пользователь = &Пользователь
	|	И НЕ ПользователиУчетнойЗаписи.УчетнаяЗапись.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПользователиУчетнойЗаписи.УчетнаяЗапись,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьИсходящегоПисьма,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьПересылаемогоПисьма,
	|	CRM_ПодписиУчетныхЗаписей.ИмяОтправителя
	|ИЗ
	|	ПользователиУчетнойЗаписи КАК ПользователиУчетнойЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПодписиУчетныхЗаписей КАК CRM_ПодписиУчетныхЗаписей
	|		ПО ПользователиУчетнойЗаписи.УчетнаяЗапись = CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись
	|			И (CRM_ПодписиУчетныхЗаписей.Пользователь = &Пользователь)
	|ГДЕ
	|	ПользователиУчетнойЗаписи.ДоступнаДляВсех
	|	И НЕ ПользователиУчетнойЗаписи.УчетнаяЗапись.ПометкаУдаления";
	
	ТабЗнач = Запрос.Выполнить().Выгрузить();
    ЗначениеВРеквизитФормы(ТабЗнач, "ТаблицаНастроекПочты");
	
КонецПроцедуры // ЗаполнитьТаблицуУчетныхЗаписей()

&НаСервере
Процедура ОбновитьПодписиУчетныхЗаписей()
	
	НаборЗаписей = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      = ТекущийПользователь;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаТаблицыНастроек Из ТаблицаНастроекПочты Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыНастроек.ПодписьИсходящегоПисьма)
			 Или ЗначениеЗаполнено(СтрокаТаблицыНастроек.ПодписьПересылаемогоПисьма)
			 Или ЗначениеЗаполнено(СтрокаТаблицыНастроек.ИмяОтправителя) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.УчетнаяЗапись				= СтрокаТаблицыНастроек.УчетнаяЗапись; 
			НоваяЗапись.Пользователь				= ТекущийПользователь; 
			НоваяЗапись.ПодписьИсходящегоПисьма		= СтрокаТаблицыНастроек.ПодписьИсходящегоПисьма; 
			НоваяЗапись.ПодписьПересылаемогоПисьма	= СтрокаТаблицыНастроек.ПодписьПересылаемогоПисьма;
			НоваяЗапись.ИмяОтправителя				= СтрокаТаблицыНастроек.ИмяОтправителя;
		КонецЕсли;	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 

&НаСервере
// Процедура добавляет записи в регистр настроек пользователей.
//
// Параметры:
//	НастройкиЭлементы	- КоллекцияСтрокДереваЗначений	- Строки настроек.
//
Процедура ДобавитьПодчиненныеНастройки(НастройкиЭлементы)
	Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
		Если СтрокаНастроек.ЭтоГруппа Тогда
			ДобавитьПодчиненныеНастройки(СтрокаНастроек.ПолучитьЭлементы());
		Иначе
			ЗаписьРегистра = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Пользователь	= ТекущийПользователь;
			ЗаписьРегистра.Настройка	= СтрокаНастроек.Настройка;
			ЗаписьРегистра.Значение	= СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
			ЗаписьРегистра.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
// Процедура выполняет запись значений настроек в регистр сведений.
//
Процедура ОбновитьНастройки()
	
	ДобавитьПодчиненныеНастройки(ДеревоНастроек.ПолучитьЭлементы());
	
КонецПроцедуры // ОбновитьНастройки()

&НаСервере
//
//
Функция ОбновитьНастройкиОповещений()
	
	РезультатОбновленияНастроекОповещений = Новый Структура;
	РезультатОбновленияНастроекОповещений.Вставить("ОшибкаЗаписиОповещений", Ложь);
	НаборЗаписей = РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НастройкиГруппы = ДеревоНастроекОповещений.ПолучитьЭлементы();
	
	Для Каждого ГруппаНастроек Из НастройкиГруппы Цикл
		
		НастройкиЭлементы = ГруппаНастроек.ПолучитьЭлементы();
		
		Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
			
			Если СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.Оповещение_1") 
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.Оповещение_2") 
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.Оповещение_3") 
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах")
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров")
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения")
				ИЛИ СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях") Тогда
				ЕстьОшибка = Ложь;
				ДопускаетсяНеУказыватьСрок = 
					(СтрокаНастроек.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения")
					Или СтрокаНастроек.ВидОповещения = 
					ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.CRM_ОповещенияОКлючевыхСобытиях"));
				Если НЕ ЗначениеЗаполнено(СтрокаНастроек.СрокОповещения) 
					И Не ДопускаетсяНеУказыватьСрок
					И (СтрокаНастроек.Напоминание
					 ИЛИ СтрокаНастроек.SMS
					 ИЛИ СтрокаНастроек.Мессенджер
					 ИЛИ СтрокаНастроек.Email) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Для оповещения ""'") + СтрокаНастроек.ВидОповещения.Наименование 
						+ НСтр("ru='"" не указан срок.'");
					Сообщение.Сообщить();
					РезультатОбновленияНастроекОповещений.Вставить("ОшибкаЗаписиОповещений", Истина);
					ЕстьОшибка = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаНастроек.Периодичность) И (СтрокаНастроек.Напоминание
					 ИЛИ СтрокаНастроек.SMS
					 ИЛИ СтрокаНастроек.Мессенджер
					 ИЛИ СтрокаНастроек.Email) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru='Для оповещения ""'") + СтрокаНастроек.ВидОповещения.Наименование 
						+ НСтр("ru='"" не указан период.'");
					Сообщение.Сообщить();
					РезультатОбновленияНастроекОповещений.Вставить("ОшибкаЗаписиОповещений", Истина);
					ЕстьОшибка = Истина;
				КонецЕсли;
				Если ЕстьОшибка Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			
			Запись.Пользователь		= ТекущийПользователь;
			Запись.ВидОповещения	= СтрокаНастроек.ВидОповещения;
			Запись.СрокОповещения	= СтрокаНастроек.СрокОповещения;
			Запись.Периодичность	= СтрокаНастроек.Периодичность;
			Запись.Напоминание		= СтрокаНастроек.Напоминание;
			Запись.СМС				= СтрокаНастроек.SMS;
			Запись.ЭлектроннаяПочта	= СтрокаНастроек.Email;
			Запись.Мессенджер		= СтрокаНастроек.Мессенджер;
			
			Если СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
				ИЛИ СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
				Запись.Сумма = СтрокаНастроек.Отбор;
				
			ИначеЕсли СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
				ПодключитьОбработчик = Ложь;
				
				Если (СтрокаНастроек.Напоминание <> ОповещенияОВходящихПисьмахНапоминание)  Тогда
					
					Если ОповещенияОВходящихПисьмахНапоминание Тогда
						
						РезультатОбновленияНастроекОповещений.Вставить("ОтключитьОбработчикОповещенияОВходящихПисьмах", Истина);
						
					Иначе	
					
						РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОВходящихПисьмах", Истина);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаНастроек.СрокОповещения <> ОповещенияОВходящихПисьмахСрокОповещения
					  ИЛИ СтрокаНастроек.Периодичность <> ОповещенияОВходящихПисьмахПериодичность Тогда
					
					РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОВходящихПисьмах", Истина);
				
				КонецЕсли;
							Запись.Сумма = СтрокаНастроек.Отбор;
				
			ИначеЕсли СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхСообщенияхМессенджеров Тогда
				
				ПодключитьОбработчик = Ложь;
				
				Если (СтрокаНастроек.Напоминание <> ОповещенияОСообщенияхМессенджеровНапоминание)  Тогда
					
					Если ОповещенияОСообщенияхМессенджеровНапоминание Тогда
						
						РезультатОбновленияНастроекОповещений.Вставить("ОтключитьОбработчикОповещенияОСообщенияхМессенджеров", Истина);
						
					Иначе	
					
						РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОСообщенияхМессенджеров", Истина);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаНастроек.СрокОповещения <> ОповещенияОСообщенияхМессенджеровСрокОповещения
					  Или СтрокаНастроек.Периодичность <> ОповещенияОСообщенияхМессенджеровПериодичность Тогда
					
					РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОСообщенияхМессенджеров", Истина);
				
				КонецЕсли;
				
			Иначе
				Если ЭтоАдресВременногоХранилища(СтрокаНастроек.АдресВоВременномХранилище) Тогда
					Запись.Хранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаНастроек.АдресВоВременномХранилище),
						 Новый СжатиеДанных(9));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Возврат РезультатОбновленияНастроекОповещений;
	
КонецФункции // ОбновитьНастройкиОповещений()

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.Оповещения.Видимость = (ИспользоватьНапоминания ИЛИ ИспользоватьОповещенияСМС
		 ИЛИ ИспользоватьОповещенияЭлектроннаяПочта);
	
	Элементы.Напоминание.Видимость	= ИспользоватьНапоминания;
	Элементы.SMS.Видимость			= ИспользоватьОповещенияСМС;
	Элементы.Email.Видимость		= ИспользоватьОповещенияЭлектроннаяПочта;
	Элементы.Мессенджер.Видимость	= ИспользоватьОповещенияМессенджер;
	
КонецПроцедуры

&НаСервере
Процедура ПереформироватьОповещенияОДР()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнойМенеджер", ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ОсновнойМенеджер = &ОсновнойМенеджер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

// Вынесенная процедура сохранения изменений формы настроек.
//
&НаКлиенте
Функция ВыполнитьСохранениеНастроекПередЗакрытием()
	
	МассивСтруктур = Новый Массив;
	
	// работа с файлами
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "ДействиеПоДвойномуЩелчкуМыши");
	Элемент.Вставить("Значение", ДействиеПоДвойномуЩелчкуМыши);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Элемент.Вставить("Значение", СпрашиватьРежимРедактированияПриОткрытииФайла);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Элемент.Вставить("Значение", ПоказыватьПодсказкиПриРедактированииФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Элемент.Вставить("Значение", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСравненияФайлов");
	Элемент.Вставить("Настройка", "СпособСравненияВерсийФайлов");
	Элемент.Вставить("Значение", СпособСравненияВерсийФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьКолонкуРазмер");
	Элемент.Вставить("Значение", ПоказыватьКолонкуРазмер);
	МассивСтруктур.Добавить(Элемент);
	
	// БазоваяФункциональность
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ОбщиеНастройкиПользователя");
	Элемент.Вставить("Настройка", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Элемент.Вставить("Значение", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	
	МассивСтруктур.Добавить(Элемент);
	// Конец БазоваяФункциональность
	
	// Основная учетная запись
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ОсновнаяУчетнаяЗапись");
	Элемент.Вставить("Настройка", "ОсновнаяУчетнаяЗапись");
	Элемент.Вставить("Значение", ОсновнаяУчетнаяЗапись);
	МассивСтруктур.Добавить(Элемент);
	
	// Период автосохранения черновиков
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ПериодАвтосохраненияЧерновиков");
	Элемент.Вставить("Настройка", "ПериодАвтосохраненияЧерновиков");
	Элемент.Вставить("Значение", ПериодАвтосохраненияЧерновиков);
	МассивСтруктур.Добавить(Элемент);
	
	// Таймаут отметки о прочтении
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТаймаутОтметкиОПрочтении");
	Элемент.Вставить("Настройка", "ТаймаутОтметкиОПрочтении");
	Элемент.Вставить("Значение", ТаймаутОтметкиОПрочтении);
	МассивСтруктур.Добавить(Элемент);
	
	// Показывать все вложения
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ПоказыватьВсеВложения");
	Элемент.Вставить("Настройка", "ПоказыватьВсеВложения");
	Элемент.Вставить("Значение", ПоказыватьВсеВложения);
	МассивСтруктур.Добавить(Элемент);
	
	// Не отображать картинки
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НеОтображатьКартинки");
	Элемент.Вставить("Настройка", "НеОтображатьКартинки");
	Элемент.Вставить("Значение", НеОтображатьКартинки);
	МассивСтруктур.Добавить(Элемент);
	
	// Транслитерировать имена файлов при добавлении вложений
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ТранслитерироватьИменаФайловПриДобавленииВложений");
	Элемент.Вставить("Настройка", "ТранслитерироватьИменаФайловПриДобавленииВложений");
	Элемент.Вставить("Значение", ТранслитерироватьИменаФайловПриДобавленииВложений);
	МассивСтруктур.Добавить(Элемент);
	
	// Показывать Мои дела
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ПоказыватьМоиДела");
	Элемент.Вставить("Настройка", "ПоказыватьМоиДела");
	Элемент.Вставить("Значение", ПоказыватьМоиДела);
	МассивСтруктур.Добавить(Элемент);
	
	// Только переданные вручную
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ПоказыватьМоиДелаТолькоПереданныеВручную");
	Элемент.Вставить("Настройка", "ПоказыватьМоиДелаТолькоПереданныеВручную");
	Элемент.Вставить("Значение", ПоказыватьМоиДелаТолькоПереданныеВручную);
	МассивСтруктур.Добавить(Элемент);
	
	// Автофокус в списке писем
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "АвтофокусВСпискеПисем");
	Элемент.Вставить("Настройка", "АвтофокусВСпискеПисем");
	Элемент.Вставить("Значение", АвтофокусВСпискеПисем);
	МассивСтруктур.Добавить(Элемент);
	
	// Отображение колонок АРМ
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиКолонокАРМ");
	Элемент.Вставить("Настройка", "СкрытыеКолонкиАРМ");
	Элемент.Вставить("Значение", СкрытыеКолонкиАРМ);
	МассивСтруктур.Добавить(Элемент);
	
	// +СофтФон
	Если сфпПривязкаНомера Тогда
		ИспользованиеСофтфона = Ложь;
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон") Тогда
				ЭлементыДереваСофтфон = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСофтфон Из ЭлементыДереваСофтфон Цикл
					Если ЭлементДереваСофтфон.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон") Тогда
						ИспользованиеСофтфона = ЭлементДереваСофтфон.Значение;
						ЗаписатьДанныеБизнесСтатистикиНаСервере(ЭлементДереваСофтфон.Настройка, ЭлементДереваСофтфон.Значение);
					КонецЕсли;
					Если ЭлементДереваСофтфон.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона") Тогда
						ЭлементыДереваАвторизация = ЭлементДереваСофтфон.ПолучитьЭлементы();
						Для Каждого ЭлементДереваАвторизация Из ЭлементыДереваАвторизация Цикл
							Если ЭлементДереваАвторизация.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон") Тогда
								ЛогинНаСерверСофтфон = ЭлементДереваАвторизация.Значение;
							ИначеЕсли ЭлементДереваАвторизация.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон") Тогда
								ПарольНаСерверСофтфон = ЭлементДереваАвторизация.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ЭлементДереваСофтфон.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДействияПриЗвонке") Тогда
							ЭлементыДереваДействияСофтфон = ЭлементДереваСофтфон.ПолучитьЭлементы();
							Для Каждого ЭлементДереваДействияСофтфон Из ЭлементыДереваДействияСофтфон Цикл
								ЗаписатьДанныеБизнесСтатистикиНаСервере(ЭлементДереваДействияСофтфон.Настройка,
									 ЭлементДереваДействияСофтфон.Значение);
							КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ИспользованиеСофтфона Тогда
			Если ПустаяСтрока(ЛогинНаСерверСофтфон) Или ПустаяСтрока(ПарольНаСерверСофтфон) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Заполните логин и пароль на сервер СофтФона!'"));
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -СофтФон
	
	ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	СохранитьДополнительныеНастройкиЭлектроннойПочты();
	
	ОбновитьНастройки();
	
	РезультатыОбновленияНастроекОповещений = ОбновитьНастройкиОповещений();
	Если РезультатыОбновленияНастроекОповещений.ОшибкаЗаписиОповещений Тогда
		Возврат Истина;
	КонецЕсли;	
	ОбновитьПодписиУчетныхЗаписей();
	
	Модифицированность = Ложь;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Если были изменены настройки оповещений о ДР, то надо переформировать.
	Если КорректироватьНапоминания Тогда
		
		ПереформироватьОповещенияОДР();
		
		КорректироватьНапоминания = Ложь;
	КонецЕсли;
	
	// +Лицензирование
	Если ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
		
		НастройкаИспользоватьCRM = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Истина,
			 CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьCRM"));
		
		Если ИспользоватьCRMПредыдущий <> НастройкаИспользоватьCRM Тогда
			CRM_ЛицензированиеЭкспортныеМетоды.УстановитьИспользованиеCRM(НастройкаИспользоватьCRM);
			Если НЕ НастройкаИспользоватьCRM Тогда
				CRM_ЛицензированиеЭкспортныеМетоды.ОсвободитьТекущуюЛицензию();
			КонецЕсли;
			ИспользоватьCRMПредыдущий = НастройкаИспользоватьCRM;
		КонецЕсли;
	КонецЕсли;
	// -Лицензирование
	
	Если РезультатыОбновленияНастроекОповещений.Свойство("ОтключитьОбработчикОповещенияОВходящихПисьмах") Тогда
		
		CRM_НапоминанияКлиент.ОтключитьОбработчикОповещенияВходящиеПисьма();
		
	ИначеЕсли РезультатыОбновленияНастроекОповещений.Свойство("ПодключитьОбработчикОповещенияОВходящихПисьмах") Тогда
		
		CRM_НапоминанияКлиент.ПодключитьОбработчикОповещенияВходящиеПисьма();
		
	КонецЕсли;
	
	Если РезультатыОбновленияНастроекОповещений.Свойство("ОтключитьОбработчикОповещенияОСообщенияхМессенджеров") Тогда
		
		CRM_НапоминанияКлиент.ОтключитьОбработчикОповещенияСообщенияМессенджеров();
		
	ИначеЕсли РезультатыОбновленияНастроекОповещений.Свойство("ПодключитьОбработчикОповещенияОСообщенияхМессенджеров") Тогда
		
		CRM_НапоминанияКлиент.ПодключитьОбработчикОповещенияСообщенияМессенджеров();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзмененныйВариантОформленияМессенджера) Тогда
		Оповестить("ИзменениеОформленияМессенджера", ИзмененныйВариантОформленияМессенджера);
		ИзмененныйВариантОформленияМессенджера = ПредопределенноеЗначение("Перечисление.CRM_ВариантыОформленийМессенджера.ПустаяСсылка");
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	
	Возврат Ложь;
КонецФункции

// Процедура снимает оформление изменённых ячеек на закладке "Настройки".
//
&НаСервере
Процедура СнятьВыделениеЦветомИШрифтомСЯчеек()
	КоличествоЭлементов = УсловноеОформление.Элементы.Количество();
	Сч = 0;
	Пока Сч <= КоличествоЭлементов - 1 Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Получить(Сч);
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "CRM" Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
			КоличествоЭлементов = КоличествоЭлементов - 1;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Установка условного оформления изменённой настройки (цвет и шрифт).
//
//  Параметры 
//   ИмяНастройки - ПланВидовХарактеристик.CRM_НастройкиПользователей - Ссылка на настройку.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеПоля(ИмяНастройки)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ДеревоНастроек.Настройка");
	ЭлементОтбораДанных.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.Использование	= Истина;
	ЭлементОтбораДанных.ПравоеЗначение	= ИмяНастройки;
	
	ПолеОформления					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование	= Истина;
	ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоНастроекЗначение");
	
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "CRM";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	Новый Цвет(0, 170, 0));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", 		Новый Шрифт(, , Истина));
	
КонецПроцедуры

// Установка условного оформления незаполненной настройки 
//
&НаСервере
Процедура УстановитьУсловноеОформлениеНезаполненногоПоля(ИмяНастройки, НеЗаполнен = Ложь)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ДеревоНастроек.Настройка");
	ЭлементОтбораДанных.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.Использование	= Истина;
	ЭлементОтбораДанных.ПравоеЗначение	= ИмяНастройки;
	
	ПолеОформления					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование	= Истина;
	ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоНастроекЗначение");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", НеЗаполнен);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция добавляет получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	Получатель				- СправочникСсылка	- Новый получатель.
//	ЭтоГруппа				- Булево			- Признак добавления группы.
//
Функция ДобавитьПолучателя(ПараметрПользователь, Получатель, ЭтоГруппа)
	Если ПараметрПользователь = Получатель Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	ПараметрПользователь);
		Если Получатель = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Пользователи.Ссылка КАК Получатель
			               |ИЗ
			               |	Справочник.Пользователи КАК Пользователи
			               |ГДЕ
			               |	НЕ Пользователи.Ссылка = &Пользователь
			               |	И НЕ Пользователи.ПометкаУдаления";
		Иначе	
			СписокГрупп = Новый СписокЗначений;
			СписокГрупп.Добавить(Получатель);
			Запрос.УстановитьПараметр("СписокГрупп",	СписокГрупп);
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ГруппыПользователейСостав.Пользователь КАК Получатель
			               |ИЗ
			               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&СписокГрупп)";
		КонецЕсли;	
		Выборка = Запрос.Выполнить().Выбрать();
		ЗаписьДобавлена = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ДобавитьПолучателя(ПараметрПользователь, Выборка.Получатель, Ложь) Тогда
				ЗаписьДобавлена = Истина;
			КонецЕсли;	
		КонецЦикла;
	Иначе	
		НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
		НоваяЗапись.Пользователь	= ПараметрПользователь;
		НоваяЗапись.Получатель		= Получатель;
		Попытка
			НоваяЗапись.Записать(Истина);
			ЗаписьДобавлена = Истина;
		Исключение
			ЗаписьДобавлена = Ложь;
		КонецПопытки;
	КонецЕсли;	
	Возврат ЗаписьДобавлена;
КонецФункции

&НаСервереБезКонтекста
// Процедура изменяет текущего получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	НовыйПолучатель			- СправочникСсылка	- Новый получатель.
//	СтарыйПолучатель		- СправочникСсылка	- Старый получатель.
//
Процедура ИзменитьПолучателя(ПараметрПользователь, НовыйПолучатель, СтарыйПолучатель)
	Если ПараметрПользователь = НовыйПолучатель Тогда
		Возврат;
	КонецЕсли;
	НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= НовыйПолучатель;
	НоваяЗапись.Прочитать();
	Если НоваяЗапись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= СтарыйПолучатель;
	НоваяЗапись.Прочитать();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= НовыйПолучатель;
	НоваяЗапись.Записать(Истина);
КонецПроцедуры

&НаСервере
// Процедура позиционируется в списке получателей на указанного получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	Получатель				- СправочникСсылка	- Текущий получатель.
//
Процедура УстановитьТекущуюЗапись(ПараметрПользователь, Получатель)
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПолучателей);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пользователь", ПараметрПользователь);
	СтруктураОтбора.Вставить("Получатель",  Получатель);
	КлючЗаписи = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьКлючЗаписи(СтруктураОтбора);
	Элементы.СписокПолучателей.ТекущаяСтрока = КлючЗаписи;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора пользователя.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Выбранный пользователь.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПользователя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	ИзменитьПолучателя(ТекущийПользователь, РезультатЗакрытия, ТД.Получатель);
	УстановитьТекущуюЗапись(ТекущийПользователь, РезультатЗакрытия);
КонецПроцедуры // ОбработкаВыбораПользователя()

&НаКлиенте
// Процедура - обработчик выбора типа пользователя.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный тип пользователя.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораТипаПользователя(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	НЕ ДополнительныеПараметры.РежимПодбора);
	Если НЕ ДополнительныеПараметры.ИспользоватьГруппыПользователей Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СписокПолучателей");
	КонецЕсли;
	Если ВыбранныйЭлемент.Значение Тогда
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбора", ПараметрыФормы,
			 Элементы.СписокПолучателей, ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы,
			 ?(ДополнительныеПараметры.ИспользоватьГруппыПользователей, Элементы.СписокПолучателей, ЭтотОбъект), ,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ОбработкаВыбораТипаПользователя()

&НаКлиенте
// Процеура выполняет выбор типа получателя из списка.
//
// Параметры:
//	РежимПодбора	- Булево	- Признак подбора получателя.
//
Процедура ВыбратьТипПолучателяИзСписка(РежимПодбора = Ложь)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимПодбора",					РежимПодбора);
	ДополнительныеПараметры.Вставить("ИспользоватьГруппыПользователей",	ИспользоватьГруппыПользователей);
	Если ИспользоватьГруппыПользователей Тогда
		СписокВыбораТипа = Новый СписокЗначений;
		СписокВыбораТипа.Добавить(Истина,	НСтр("ru='Группа пользователей';en='User group'"));
		СписокВыбораТипа.Добавить(Ложь,		НСтр("ru='Пользователь';en='User'"));
		ОписаниеВыбораТипа = Новый ОписаниеОповещения("ОбработкаВыбораТипаПользователя", ЭтотОбъект, ДополнительныеПараметры);
		Если РежимПодбора Тогда
			ПоказатьВыборИзМеню(ОписаниеВыбораТипа, СписокВыбораТипа, Элементы.СписокПолучателейПодборИзбранныхПолучателей);
		Иначе
			ПоказатьВыборИзМеню(ОписаниеВыбораТипа, СписокВыбораТипа, Элементы.СписокПолучателейКнопкаСоздать);
		КонецЕсли;
	Иначе
		ОбработкаВыбораТипаПользователя(Новый Структура("Значение", Ложь), ДополнительныеПараметры); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик именения текущего получателя.
//
// Параметры:
//	Нет.
//
Процедура ИзменитьТекущегоПолучателя()
	ТД = Элементы.СписокПолучателей.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Ложь);
	ПараметрыФормы.Вставить("ТекущаяСтрока",		ТД.Получатель);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТД);
	ОписаниеВыбораПользователя = Новый ОписаниеОповещения("ОбработкаВыбораПользователя", ЭтотОбъект,
		 ДополнительныеПараметры);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.СписокПолучателей, , , ,
		 ОписаниеВыбораПользователя);
КонецПроцедуры // ИзменитьТекущегоПолучателя()

&НаКлиенте
Процедура ПерсональнаяНастройкаПроксиСервера(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(,
		 НСтр("ru='В веб-клиенте параметры прокси-сервера необходимо задавать в настройках браузера.';
		|en='Set proxy server parameters of web client in browser settings.'"));
	Возврат;
#КонецЕсли
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", Новый Структура("НастройкаПроксиНаКлиенте", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьДействиеПриВыбореМакетаПечатнойФормы(Команда)
	
	УправлениеПечатьюКлиент.ЗадатьДействиеПриВыбореМакетаПечатнойФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДополнительныеНастройкиЭлектроннойПочты()
	
	// Загрузка Дополнительных настроек
	ОтправлятьПисьмаВФорматеHTML = ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML");
	НастройкиХранилище = Взаимодействия.НастройкиРаботыСПочтой();
	
	ВключатьПодписьДляНовыхСообщений             = ?(НастройкиХранилище.Свойство("ВключатьПодписьДляНовыхСообщений"),
		НастройкиХранилище.ВключатьПодписьДляНовыхСообщений, Истина);
	ФорматПодписиДляНовыхСообщений               = ?(НастройкиХранилище.Свойство("ФорматПодписиДляНовыхСообщений")
		 И ОтправлятьПисьмаВФорматеHTML,
		НастройкиХранилище.ФорматПодписиДляНовыхСообщений,
		ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст"));
	ВключатьПодписьПриОтветеПересылке            = ?(НастройкиХранилище.Свойство("ВключатьПодписьПриОтветеПересылке"),
		НастройкиХранилище.ВключатьПодписьПриОтветеПересылке, Истина);
	ФорматПодписиПриОтветеПересылке              = ?(НастройкиХранилище.Свойство("ФорматПодписиПриОтветеПересылке")
		 И ОтправлятьПисьмаВФорматеHTML,
		НастройкиХранилище.ФорматПодписиПриОтветеПересылке,
		ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст"));
	ПорядокОтветовНаЗапросыУведомленийОПрочтении = ?(НастройкиХранилище.Свойство("ПорядокОтветовНаЗапросыУведомленийОПрочтении"),
		НастройкиХранилище.ПорядокОтветовНаЗапросыУведомленийОПрочтении,
		ПредопределенноеЗначение("Перечисление.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление"));
	ВсегдаЗапрашиватьУведомлениеОПрочтении       = ?(НастройкиХранилище.Свойство("ВсегдаЗапрашиватьУведомлениеОПрочтении"),
		НастройкиХранилище.ВсегдаЗапрашиватьУведомлениеОПрочтении, Ложь);
	ВсегдаЗапрашиватьУведомленияОДоставке        = ?(НастройкиХранилище.Свойство("ВсегдаЗапрашиватьУведомленияОДоставке"),
		НастройкиХранилище.ВсегдаЗапрашиватьУведомленияОДоставке, Ложь);
	НовоеСообщениеФорматированныйДокумент        = ?(НастройкиХранилище.Свойство("НовоеСообщениеФорматированныйДокумент"),
		НастройкиХранилище.НовоеСообщениеФорматированныйДокумент, Неопределено);
	ПодписьДляНовыхСообщенийПростойТекст         = ?(НастройкиХранилище.Свойство("ПодписьДляНовыхСообщенийПростойТекст"),
		НастройкиХранилище.ПодписьДляНовыхСообщенийПростойТекст, Неопределено);
	ПодписьПриОтветеПересылкеПростойТекст        = ?(НастройкиХранилище.Свойство("ПодписьПриОтветеПересылкеПростойТекст"),
		НастройкиХранилище.ПодписьПриОтветеПересылкеПростойТекст, Неопределено);
	ПриОтветеПересылкеФорматированныйДокумент    = ?(НастройкиХранилище.Свойство("ПриОтветеПересылкеФорматированныйДокумент"),
		НастройкиХранилище.ПриОтветеПересылкеФорматированныйДокумент, Неопределено);
	ВключатьТелоИсходногоПисьма                  = ?(НастройкиХранилище.Свойство("ВключатьТелоИсходногоПисьма"),
		НастройкиХранилище.ВключатьТелоИсходногоПисьма, Ложь);
	ОтправлятьСообщенияСразу                     = ?(НастройкиХранилище.Свойство("ОтправлятьСообщенияСразу"),
		НастройкиХранилище.ОтправлятьСообщенияСразу, Ложь);
	ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета  = ?(
		НастройкиХранилище.Свойство("ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета"),
		НастройкиХранилище.ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета, Ложь);
	ШрифтПоУмолчаниюВЭлектронномПисьме           = ?(
		НастройкиХранилище.Свойство("ШрифтПоУмолчаниюВЭлектронномПисьме"),
		НастройкиХранилище.ШрифтПоУмолчаниюВЭлектронномПисьме,
		WindowsШрифты.ШрифтДиалоговИМеню);
	
	ШрифтПоУмолчаниюВЭлектронномПисьмеПредставление = ?(
		ШрифтПоУмолчаниюВЭлектронномПисьме = WindowsШрифты.ШрифтДиалоговИМеню,
		НСтр("ru = 'Шрифт по умолчанию'; en = 'Default font'"),
		Строка(ШрифтПоУмолчаниюВЭлектронномПисьме));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДополнительныеНастройкиЭлектроннойПочты()
	
	Если ФорматПодписиДляНовыхСообщений <> Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		ПодписьДляНовыхСообщенийФорматированныйДокумент = Неопределено;
		
	Иначе
		
		ПодписьДляНовыхСообщенийПростойТекст = НовоеСообщениеФорматированныйДокумент.ПолучитьТекст();
		
	КонецЕсли;
	
	Если ФорматПодписиПриОтветеПересылке <> Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		ПодписьПриОтветеПересылкеФорматированныйДокумент = Неопределено;
		
	Иначе
		
		ПодписьПриОтветеПересылкеПростойТекст = ПриОтветеПересылкеФорматированныйДокумент.ПолучитьТекст();
		
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("ВключатьПодписьДляНовыхСообщений", ВключатьПодписьДляНовыхСообщений);
	СтруктураНастройки.Вставить("ВключатьПодписьПриОтветеПересылке", ВключатьПодписьПриОтветеПересылке);
	СтруктураНастройки.Вставить("ВсегдаЗапрашиватьУведомлениеОПрочтении", ВсегдаЗапрашиватьУведомлениеОПрочтении);
	СтруктураНастройки.Вставить("ВсегдаЗапрашиватьУведомленияОДоставке", ВсегдаЗапрашиватьУведомленияОДоставке);
	СтруктураНастройки.Вставить("НовоеСообщениеФорматированныйДокумент", НовоеСообщениеФорматированныйДокумент);
	СтруктураНастройки.Вставить("ПодписьДляНовыхСообщенийПростойТекст", ПодписьДляНовыхСообщенийПростойТекст);
	СтруктураНастройки.Вставить("ПодписьПриОтветеПересылкеПростойТекст", ПодписьПриОтветеПересылкеПростойТекст);
	СтруктураНастройки.Вставить("ПорядокОтветовНаЗапросыУведомленийОПрочтении",
		 ПорядокОтветовНаЗапросыУведомленийОПрочтении);
	СтруктураНастройки.Вставить("ПриОтветеПересылкеФорматированныйДокумент", ПриОтветеПересылкеФорматированныйДокумент);
	СтруктураНастройки.Вставить("ФорматПодписиДляНовыхСообщений", ФорматПодписиДляНовыхСообщений);
	СтруктураНастройки.Вставить("ФорматПодписиПриОтветеПересылке", ФорматПодписиПриОтветеПересылке);
	СтруктураНастройки.Вставить("ОтображатьТелоИсходногоПисьма", Ложь);
	СтруктураНастройки.Вставить("ВключатьТелоИсходногоПисьма", ВключатьТелоИсходногоПисьма);
	СтруктураНастройки.Вставить("ОтправлятьСообщенияСразу", ОтправлятьСообщенияСразу);
	СтруктураНастройки.Вставить("ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета",
		ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета);
	СтруктураНастройки.Вставить("ШрифтПоУмолчаниюВЭлектронномПисьме",
		ШрифтПоУмолчаниюВЭлектронномПисьме);
	
	Взаимодействия.СохранитьНастройкиРаботыСПочтой(СтруктураНастройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеБизнесСтатистикиНаСервере(Настройка, Значение)
	
	ИсходноеЗначение = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя(Настройка.ИмяПредопределенныхДанных);
	
	Если Значение = ИсходноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке Тогда
		
		Если Значение = "Открыть ведомость взаиморасчетов" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.ВедомостьВзаиморасчетов");
		ИначеЕсли Значение = "Открыть дебиторскую задолженность" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.ДебиторскаяЗадолженность");
		ИначеЕсли Значение = "Открыть досье клиента" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.ДосьеКлиента");
		ИначеЕсли Значение = "Открыть карточку контакта" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.КарточкаКонтакта");
		ИначеЕсли Значение = "Краткая форма Телефонного звонка" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.КраткаяФормаТелефонногоЗвонка");
		ИначеЕсли Значение = "" Или Значение = "Нет действий" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.НетДействий");
		ИначеЕсли Значение = "Открыть Панель звонка" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.ПанельЗвонка");
		ИначеЕсли Значение = "Открыть продажи" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.Продажи");
		ИначеЕсли Значение = "Регистрация обращения" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.РегистрацияОбращения");
		ИначеЕсли Значение = "Открыть список анкет" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.СписокАнкет");
		ИначеЕсли Значение = "Открыть счет на оплату" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.СчетНаОплату");
		ИначеЕсли Значение = "Открыть Телефонный звонок" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриВходящем.ТелефонныйЗвонок");
		КонецЕсли;
		
	ИначеЕсли Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке Тогда
		
		Если Значение = "Открыть ведомость взаиморасчетов" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.ВедомостьВзаиморасчетов");
		ИначеЕсли Значение = "Открыть дебиторскую задолженность" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.ДебиторскаяЗадолженность");
		ИначеЕсли Значение = "Открыть досье клиента" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.ДосьеКлиента");
		ИначеЕсли Значение = "Открыть карточку контакта" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.КарточкаКонтакта");
		ИначеЕсли Значение = "Краткая форма Телефонного звонка" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.КраткаяФормаТелефонногоЗвонка");
		ИначеЕсли Значение = "" Или Значение = "Нет действий" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.НетДействий");
		ИначеЕсли Значение = "Открыть Панель звонка" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.ПанельЗвонка");
		ИначеЕсли Значение = "Открыть продажи" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.Продажи");
		ИначеЕсли Значение = "Регистрация обращения" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.РегистрацияОбращения");
		ИначеЕсли Значение = "Открыть список анкет" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.СписокАнкет");
		ИначеЕсли Значение = "Открыть счет на оплату" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.СчетНаОплату");
		ИначеЕсли Значение = "Открыть Телефонный звонок" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ПерсональныеНастройки.ДействиеПриИсходящем.ТелефонныйЗвонок");
		КонецЕсли;
		
	ИначеЕсли Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон Тогда
		
		ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
		Если Значение = Истина Тогда
			Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ИнтеграцияСТелефонией.ПерсональныеНастройки.ИспользоватьСофтФон");
			ИначеЕсли ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.ПерсональныеНастройки.ИспользоватьСофтФон");
			КонецЕсли;
		Иначе
			Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ИнтеграцияСТелефонией.ПерсональныеНастройки.ИспользоватьСофтФон",
					 -1);
			ИначеЕсли ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
				CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.ПерсональныеНастройки.ИспользоватьСофтФон",
					 -1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораСценария(Знач ДеревоНастроек)
	
	СтрокаНастройкаТипаУслуг = НайтиНастройкуВДереве(
		ДеревоНастроек.ПолучитьЭлементы(), ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипУслуг, Ложь);
	
	СтрокаНастройкаТипаОбращения = НайтиНастройкуВДереве(
		ДеревоНастроек.ПолучитьЭлементы(), ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойТипОбращения, Ложь);
	
	Если СтрокаНастройкаТипаУслуг = Неопределено
			Или СтрокаНастройкаТипаУслуг.Значение = Справочники.CRM_ТипУслуги.ПустаяСсылка() Тогда
		ОсновнойТипУслуги		= Справочники.CRM_ТипУслуги.ПустаяСсылка();
		ИспользоватьТипыУслуг	= Ложь;
	Иначе
		ОсновнойТипУслуги		= СтрокаНастройкаТипаУслуг.Значение;
		ИспользоватьТипыУслуг	= Истина;
	КонецЕсли;
	
	Если СтрокаНастройкаТипаОбращения = Неопределено
			Или СтрокаНастройкаТипаОбращения.Значение = Справочники.CRM_ТипыОбращений.ПустаяСсылка() Тогда
		ТипОбращения = Справочники.CRM_ТипыОбращений.ПустаяСсылка();
		ЭтоПоддержка = Ложь;
	Иначе
		ТипОбращения = СтрокаНастройкаТипаОбращения.Значение;
		ЭтоПоддержка = ЗначениеЗаполнено(ТипОбращения) И ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес;
	КонецЕсли;
	
	ПараметрыСценариев = Новый Структура;
	ПараметрыСценариев.Вставить("ТипУслуги",				ОсновнойТипУслуги);
	ПараметрыСценариев.Вставить("ТипОбращения",				ТипОбращения);
	ПараметрыСценариев.Вставить("ЭтоПоддержка",				ЭтоПоддержка);
	ПараметрыСценариев.Вставить("Ответственный",			Пользователи.АвторизованныйПользователь());
	ПараметрыСценариев.Вставить("ИспользоватьТипыУслуг",	ИспользоватьТипыУслуг);
	ПараметрыСценариев.Вставить("ДоступныКарты",			Ложь);
	
	ДоступныеСценарии = Обработки.CRM_МастерРегистрацииОбращения.ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
	
	Возврат ДоступныеСценарии.ВыгрузитьЗначения();
	
КонецФункции // ПолучитьДанныеВыбораСценария()

&НаСервере
Процедура ИсправитьСценарийПоЗависимойНастройки()
	
	ДоступныеСценарииСписок = Новый СписокЗначений;
	ДоступныеСценарииСписок.ЗагрузитьЗначения(ПолучитьДанныеВыбораСценария(ДеревоНастроек));
	
	СтрокаНастройкаСценарий = НайтиНастройкуВДереве(
		ДеревоНастроек.ПолучитьЭлементы(), ПланыВидовХарактеристик.CRM_НастройкиПользователей.ОсновнойСценарий, Ложь);
	
	Если ЗначениеЗаполнено(СтрокаНастройкаСценарий.Значение)
			И ДоступныеСценарииСписок.НайтиПоЗначению(СтрокаНастройкаСценарий.Значение) = Неопределено Тогда
		СтрокаНастройкаСценарий.Значение = Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("en = 'The ""Main sales scenario"" setting was cleared due to a change in the dependent setting: ""Main type of services"" or ""Main type of treatment""';
				| ru = 'Настройка ""Основной сценарий продажи"" была очищена по причине изменения зависимой настройки: ""Основной тип услуг"" или ""Основной тип обращения""'"));
	КонецЕсли;
	
КонецПроцедуры // ИсправитьСценарийПоЗависимойНастройки()

// Процедура выводит меню для выбора типа получателя.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный тип пользователя.
//
&НаКлиенте
Процедура ВыбратьТипПолучателяИзСпискаДляГруппы()
	
	СписокВыбораТипа = Новый СписокЗначений;
	СписокВыбораТипа.Добавить("Справочник.Партнеры.Форма.CRM_ФормаВыбора", НСтр("ru='Партнер';en='Partner'"));
	СписокВыбораТипа.Добавить("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаВыбора",
		НСтр("ru='Контактное лицо';en='Contact Person'"));
	СписокВыбораТипа.Добавить("Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаВыбора", 
		НСтр("ru='Потенциальный клиент';en='Potential Customer'"));
	СписокВыбораТипа.Добавить("Справочник.ФизическиеЛица.Форма.ФормаВыбора",
		НСтр("ru='Физическое лицо';en='Individual'"));
	СписокВыбораТипа.Добавить("Справочник.Пользователи.ФормаВыбора", НСтр("ru='Пользователь';en='User'"));
	ОписаниеВыбораТипа = Новый ОписаниеОповещения("ОбработкаВыбораТипаПользователяДляГруппы", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеВыбораТипа, СписокВыбораТипа, Элементы.СоставГруппыПолучателейПодбор);
	
КонецПроцедуры

// Процедура - обработчик выбора типа получателя.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный тип пользователя.
//
&НаКлиенте
Процедура ОбработкаВыбораТипаПользователяДляГруппы(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Ложь);
	ОткрытьФорму(ВыбранныйЭлемент.Значение, ПараметрыФормы, Элементы.СоставГруппыПолучателей, ,
		ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецПроцедуры

&НаСервереБезКонтекста
// Функция добавляет получателя в состав группы получателей.
//
// Параметры:
//	ГруппаПолучателей		- СправочникСсылка	- Группа получателей.
//	Получатель				- СправочникСсылка	- Новый получатель.
//
Функция ДобавитьПолучателяВСоставГруппы(ГруппаПолучателей, Получатель)
	
	НоваяЗапись = РегистрыСведений.CRM_СоставыГруппПолучателей.СоздатьМенеджерЗаписи();
	НоваяЗапись.ГруппаПолучателей 	= ГруппаПолучателей;
	НоваяЗапись.Получатель			= Получатель;
	НоваяЗапись.Записать();
	
	Возврат НоваяЗапись.Выбран();
	
КонецФункции

&НаСервере
// Процедура позиционирует в списке получателей из состава группы на указанного получателя.
//
// Параметры:
//	Получатель				- СправочникСсылка	- Текущий получатель.
//
Процедура УстановитьТекущуюЗаписьСоставаГруппыПолучателей(ГруппаПолучателей, Получатель)
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СоставГруппыПолучателей);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ГруппаПолучателей", ГруппаПолучателей);
	СтруктураОтбора.Вставить("Получатель",  Получатель);
	КлючЗаписи = РегистрыСведений.CRM_СоставыГруппПолучателей.СоздатьКлючЗаписи(СтруктураОтбора);
	Элементы.СоставГруппыПолучателей.ТекущаяСтрока = КлючЗаписи;
	
КонецПроцедуры

// Возвращает значение измерения Получатель регистра сведений
//
// Параметры:
//  Ключ  - РегистрСведенийКлючЗаписи - ключ записи регистра сведений
//
// Возвращаемое значение:
//   Результат   - определяемый тип КонтактВзаимодействия
//
&НаСервереБезКонтекста
Функция ПолучательПоКлючуЗаписи(Ключ)
	Возврат Ключ.Получатель;
КонецФункции

&НаКлиенте
Процедура ПоказыватьМоиДелаПриИзменении(Элемент)
	
	Элементы.ПоказыватьМоиДелаТолькоПереданныеВручную.Доступность = ПоказыватьМоиДела;
	
КонецПроцедуры

// Заполняет закладку настроек Отображение колонок АРМ
//
&НаСервере
Процедура ЗаполнитьДеревоКолонокАРМ()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоКолонокАРМ", Тип("ДеревоЗначений"));
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// Справочник из нескольких записей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ тмпПустыеПодразделения
		|ИЗ
		|	(ВЫБРАТЬ
		|		CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СостоянияИнтересовПодразделения.Ссылка) КАК Ссылка1
		|	ИЗ
		|		Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
		|			ПО CRM_СостоянияИнтересов.Ссылка = CRM_СостоянияИнтересовПодразделения.Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		CRM_СостоянияИнтересов.Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ЕСТЬNULL(ВложенныйЗапрос.Ссылка1, 0) = 0
		|	И ВложенныйЗапрос.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_СостоянияИнтересовПодразделения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ тмпДоступныеПоПодразделению
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
		|ГДЕ
		|	CRM_СостоянияИнтересовПодразделения.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И CRM_СостоянияИнтересовПодразделения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	тмпПустыеПодразделения.Ссылка
		|ИЗ
		|	тмпПустыеПодразделения КАК тмпПустыеПодразделения
		|
		|СГРУППИРОВАТЬ ПО
		|	тмпПустыеПодразделения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_СостоянияИнтересов.Ссылка.Родитель КАК Родитель,
		|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|ГДЕ
		|	НЕ CRM_СостоянияИнтересов.Ссылка.ПометкаУдаления
		|	И НЕ CRM_СостоянияИнтересов.Родитель.ЭтоПоддержка
		|	И (CRM_СостоянияИнтересов.Ссылка.Родитель В
		|				(ВЫБРАТЬ
		|					тмпДоступныеПоПодразделению.Ссылка КАК Ссылка
		|				ИЗ
		|					тмпДоступныеПоПодразделению КАК тмпДоступныеПоПодразделению)
		|			ИЛИ CRM_СостоянияИнтересов.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_СостоянияИнтересов.Ссылка.Родитель.Наименование,
		|	CRM_СостоянияИнтересов.Ссылка.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Родитель";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Запрос.УстановитьПараметр("Подразделение", ТекущийПользователь.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СтрокаУровень0 = ДеревоЗначений.Строки.Добавить();
		СтрокаУровень0.Колонка = НСтр("ru = 'Сценарии АРМ Мои продажи'");
		СтрокаУровень0.Уровень = 0;
		СтрокаУровень0.НомерКартинки = -1;
		
		ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			СтрокаУровень1 = СтрокаУровень0.Строки.Добавить();
			СтрокаУровень1.Колонка = ВыборкаРодитель.Родитель;
			СтрокаУровень1.Уровень = 1;
			СтрокаУровень1.НомерКартинки = 1;
			
			Выборка = ВыборкаРодитель.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаУровень2 = СтрокаУровень1.Строки.Добавить();
				СтрокаУровень2.Колонка = Выборка.Ссылка;
				СтрокаУровень2.Отображение = Истина;
				СтрокаУровень2.Уровень = 2;
				СтрокаУровень2.НомерКартинки = 0;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ тмпПустыеПодразделения
			|ИЗ
			|	(ВЫБРАТЬ
			|		CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
			|		CRM_СостоянияИнтересов.ЭтоПоддержка КАК ЭтоПоддержка,
			|		CRM_СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СостоянияИнтересовПодразделения.Ссылка) КАК Ссылка1,
			|		CRM_СостоянияИнтересов.Представление КАК Представление
			|	ИЗ
			|		Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
			|			ПО CRM_СостоянияИнтересов.Ссылка = CRM_СостоянияИнтересовПодразделения.Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		CRM_СостоянияИнтересов.Ссылка,
			|		CRM_СостоянияИнтересов.ЭтоПоддержка,
			|		CRM_СостоянияИнтересов.ПометкаУдаления,
			|		CRM_СостоянияИнтересов.Представление) КАК ВложенныйЗапрос
			|ГДЕ
			|	ВложенныйЗапрос.ЭтоПоддержка
			|	И ЕСТЬNULL(ВложенныйЗапрос.Ссылка1, 0) = 0
			|	И ВложенныйЗапрос.ПометкаУдаления = ЛОЖЬ
			|	И ВложенныйЗапрос.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	CRM_СостоянияИнтересовПодразделения.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ тмпСценарии
			|ИЗ
			|	Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
			|ГДЕ
			|	CRM_СостоянияИнтересовПодразделения.Подразделение В ИЕРАРХИИ(&Подразделение)
			|	И CRM_СостоянияИнтересовПодразделения.Ссылка.ЭтоПоддержка
			|	И CRM_СостоянияИнтересовПодразделения.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И CRM_СостоянияИнтересовПодразделения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	тмпПустыеПодразделения.Ссылка
			|ИЗ
			|	тмпПустыеПодразделения КАК тмпПустыеПодразделения
			|
			|СГРУППИРОВАТЬ ПО
			|	тмпПустыеПодразделения.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	тмпСценарии.Ссылка КАК Родитель,
			|	ЕСТЬNULL(CRM_СостоянияИнтересов.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
			|ИЗ
			|	тмпСценарии КАК тмпСценарии
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
			|		ПО тмпСценарии.Ссылка = CRM_СостоянияИнтересов.Ссылка.Родитель
			|ГДЕ
			|	НЕ CRM_СостоянияИнтересов.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	CRM_СостоянияИнтересов.Родитель.Наименование,
			|	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания
			|ИТОГИ ПО
			|	Родитель";
		
		Запрос.УстановитьПараметр("Подразделение", ТекущийПользователь.Подразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
	
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СтрокаУровень0 = ДеревоЗначений.Строки.Добавить();
			СтрокаУровень0.Колонка = НСтр("ru = 'Сценарии АРМ Поддержка'");
			СтрокаУровень0.Уровень = 0;
			СтрокаУровень0.НомерКартинки = -1;
			
			ВыборкаРодитель = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРодитель.Следующий() Цикл
				
				СтрокаУровень1 = СтрокаУровень0.Строки.Добавить();
				СтрокаУровень1.Колонка = ВыборкаРодитель.Родитель;
				СтрокаУровень1.Уровень = 1;
				СтрокаУровень1.НомерКартинки = 1;
			
				Выборка = ВыборкаРодитель.Выбрать();
			
				Пока Выборка.Следующий() Цикл
					СтрокаУровень2 = СтрокаУровень1.Строки.Добавить();
					СтрокаУровень2.Колонка = Выборка.Ссылка;
					СтрокаУровень2.Отображение = Истина;
					СтрокаУровень2.Уровень = 2;
					СтрокаУровень2.НомерКартинки = 0;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СкрытаяКолонка Из СкрытыеКолонкиАРМ Цикл
		НайденнаяСтрока = ДеревоЗначений.Строки.Найти(СкрытаяКолонка.Значение, "Колонка", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Отображение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоКолонокАРМ");
	
	Если ДеревоКолонокАРМ.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.НастройкиКолонокАРМ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
