///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.ДокументЗаказа)
		Или Не ЗначениеЗаполнено(Параметры.НастройкиПодключения) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОснованиеЗаказа = Параметры.ДокументЗаказа;
	НастройкиШаблонов = ОнлайнЗаказыСлужебный.НастройкиШаблоновСообщений();
	ОписаниеОснования = ОнлайнЗаказыСлужебный.ОписаниеОснования(ОснованиеЗаказа);
	
	РезультатСклонения = ОписаниеОснования.ПредставлениеОснования.РезультатСклонения;
	
	Если Параметры.НастройкиПодключения.Количество() = 1 Тогда
		НастройкаПодключения = Параметры.НастройкиПодключения[0];
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ВариантОтправки = "ЭлектроннаяПочта";
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ВариантОтправки = "Телефон";
	КонецЕсли;
	
	ЗаполнитьСписокПечатнымиФормами();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		ЗаполнитьПрисоединеннымиФайлами();
	КонецЕсли;
	
	ДанныеКэшаБИП = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ДанныеДляФормированияСсылки(
		ОснованиеЗаказа);
	
	Если ДанныеКэшаБИП <> Неопределено
		И ДанныеКэшаБИП.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		
		НастройкаПодключения = ДанныеКэшаБИП.НастройкаПодключения;
		
	КонецЕсли;
	
	ВосстановитьШаблоныПоУмолчанию();
	
	УправлениеЭлементамиФормыПоДанным();
	УправлениеЭлементамиФормыПоПодсистемам();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеЭлементамиФормыПоВариантуОтправки();
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		НачатьПолучениеСсылкиЗаказа();
	ИначеЕсли Не ЗначениеЗаполнено(НастройкаПодключения)
		И НастройкиПодключения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не обнаружена настройка страницы.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.УстановитьОтображениеКнопкиКопироватьВБуфер(
		Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусЗаказаИзменен Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОснованиеЗаказа", ОснованиеЗаказа);
		Оповестить("ИзмененСтатусОнлайнЗаказа", ПараметрыОповещения);
	КонецЕсли;
	
	Если НастройкиШаблонов.Используется
		И ЗначениеЗаполнено(ОснованиеЗаказа) Тогда
		
		СохранитьШаблоныПоУмолчанию(
			ОснованиеЗаказа,
			ШаблонСообщенияЭлектроннаяПочта,
			ШаблонСообщенияТелефон);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтправкаСсылки

&НаКлиенте
Процедура ВариантОтправкиЭлектроннаяПочтаПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиТелеграмПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиТелефонПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиWhatsAppПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПодключения

&НаКлиенте
Процедура НастройкиПодключенияВыбор(
		Элемент,
		ВыбраннаяСтрока,
		Поле,
		СтандартнаяОбработка)
	
	ВыбратьНастройкуПодключения(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьНастройкуПодключения(Команда)
	
	СтрокаНастройкиПодключения = НастройкиПодключения.НайтиПоИдентификатору(
		Элементы.НастройкиПодключения.ТекущаяСтрока);
	
	Если СтрокаНастройкиПодключения = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана настройка для формирования ссылки.'"),
			,
			,
			"НастройкиПодключения");
		Возврат;
	КонецЕсли;
	
	НастройкаПодключения = СтрокаНастройкиПодключения.НастройкаПодключения;
	
	Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	НачатьПолучениеСсылкиЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура Вложения(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВложения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВложения(Команда)
	
	НачатьОтправкуВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выберите печатные формы и вложения (будут доступны для загрузки на странице %1).'"),
		РезультатСклонения.РодительныйПадеж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСсылку(Команда)
	
	НачатьПолучениеСсылкиЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	// Копирование происходит с предварительной очисткой через обработчик, для обхода поведения платформы
	// при повторном копировании - при определенных условиях копирование не происходит.
	БуферОбмена = "";
	ПодключитьОбработчикОжидания("КопироватьСсылкуВБуфер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСсылку(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтменитьСсылку", ЭтотОбъект);
	ПредставлениеОснованияЗаказа = РезультатСклонения.ИменительныйПадеж;
	
	ПоказатьВопрос(
		Оповещение,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 станет недоступен покупателю. Продолжить?'"),
			ВРег(Лев(ПредставлениеОснованияЗаказа,1)) + Сред(ПредставлениеОснованияЗаказа, 2)),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылку(Команда)
	
	Закрыть();
	
	Если ЗначениеЗаполнено(СсылкаЗаказа) Тогда
		ОтправитьСсылкуЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВложения(Команда)
	
	УстановитьВыборДляВсехВложений(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсехВложений(Команда)
	
	УстановитьВыборДляВсехВложений(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОнлайнЗаказа

&НаСервере
Функция ПолучитьСсылкуЗаказаНаСервере(
		Знач УникальныйИдентификатор,
		Знач ВыбранныеВложения)
	
	Элементы.ОбновитьСсылку.Видимость = Ложь;
	
	Элементы.ДекорацияДлительнаяОперация.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияПечатныеФормыИВложения.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперацияВыгрузкиФайлов.Видимость = Истина;
	
	Если ДанныеКэшаБИП = Неопределено Тогда
		ДанныеДляФормированияСсылки =
			РегистрыСведений.ИдентификаторыОнлайнЗаказов.ДанныеДляФормированияСсылки(ОснованиеЗаказа);
	Иначе
		ДанныеДляФормированияСсылки = ДанныеКэшаБИП;
		ДанныеКэшаБИП = Неопределено;
	КонецЕсли;
	
	Если ДанныеДляФормированияСсылки <> Неопределено Тогда
		ТекущийСтатусЗаказа = ДанныеДляФормированияСсылки.СтатусЗаказа;
	КонецЕсли;
	
	Если ДанныеДляФормированияСсылки = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеДляФормированияСсылки.СтатусЗаказа) Тогда
		
		НовыйОнлайнЗаказ = Истина;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание онлайн-заказа.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется создание %1. Пожалуйста, подождите.'"),
				РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.НовыйЗаказ",
			ОснованиеЗаказа,
			НастройкаПодключения);
		
	ИначеЕсли ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация статуса онлайн-заказа.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок = НСтр(
			"ru = 'Выполняется получение данных от сервиса. Пожалуйста, подождите.'");
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.СтатусЗаказа",
			ОснованиеЗаказа);
		
	ИначеЕсли ТребуетсяАктивацияЗаказа Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Активация онлайн-заказа.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется активация %1. Пожалуйста, подождите.'"),
				РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.АктивироватьЗаказ",
			ОснованиеЗаказа,
			НастройкаПодключения);
		
	ИначеЕсли ТребуетсяОбновлениеЗаказаСВложениями
		Или ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка() Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление онлайн-заказа с вложениями.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется обновление %1 с вложениями. Пожалуйста, подождите.'"),
				РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		ПараметрыОбновления.Вставить("ДокументЗаказа",       ОснованиеЗаказа);
		ПараметрыОбновления.Вставить("НастройкаПодключения", НастройкаПодключения);
		ПараметрыОбновления.Вставить("ПечатныеФормы",        ВыбранныеВложения.ПечатныеФормы);
		ПараметрыОбновления.Вставить("ПрисоединенныеФайлы",  ВыбранныеВложения.ПрисоединенныеФайлы);
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.ОбновитьЗаказСВложениями",
			ПараметрыОбновления);
		
	ИначеЕсли ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка() Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Статус", "НеконсистентноеСостояниеЗаказа");
		
	ИначеЕсли ТребуетсяОбновлениеЗаказа Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление онлайн-заказа.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется обновление %1. Пожалуйста, подождите.'"),
				РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.ОбновитьЗаказ",
			ОснованиеЗаказа,
			НастройкаПодключения);
		
		
	ИначеЕсли ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется()
		Или ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен() Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация статуса онлайн-заказа.'");
		Элементы.ДекорацияПояснениеКФорме.Заголовок = НСтр(
			"ru = 'Выполняется получение данных от сервиса. Пожалуйста, подождите.'");
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"ОнлайнЗаказыСлужебный.СтатусЗаказа",
			ОснованиеЗаказа);
		
	ИначеЕсли ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен()
		Или ДанныеДляФормированияСсылки.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Статус", "СтатусПолучен");
		РезультатВыполнения.Вставить(
			"СтатусЗаказа",
			ДанныеДляФормированияСсылки.СтатусЗаказа);
		РезультатВыполнения.Вставить(
			"URLЗаказа",
			ДанныеДляФормированияСсылки.URLЗаказа);
		РезультатВыполнения.Вставить(
			"СуммаОплаты",
			ДанныеДляФормированияСсылки.СуммаОплаты);
		
	Иначе
		РезультатВыполнения = Неопределено;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось определить статус, обработка прервана.'"));
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСсылкуЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьРезультат(Результат, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ДеактивацияОнлайнЗаказа

&НаСервере
Функция ДеактивироватьЗаказНаСервере(Знач УникальныйИдентификатор)
	
	Элементы.ОбновитьСсылку.Видимость = Ложь;
	Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияПечатныеФормыИВложения.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперацияВыгрузкиФайлов.Видимость = Истина;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Деактивация онлайн-заказа.'");
	Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется деактивация %1. Пожалуйста, подождите.'"),
				РезультатСклонения.РодительныйПадеж);
	Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ДеактивироватьЗаказ",
		ОснованиеЗаказа);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ДеактивацияЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьРезультат(Результат, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаВложений

&НаСервере
Функция НачатьОтправкуВложенийНаСервере(
		Знач УникальныйИдентификатор,
		Знач ВыбранныеВложения)
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	Элементы.ДекорацияДлительнаяОперацияВыгрузкиФайлов.Видимость = Истина;
	
	Элементы.ДекорацияДлительнаяОперация.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияПечатныеФормыИВложения.ЦветТекста = Новый Цвет;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка вложений.'");
	Элементы.ДекорацияПояснениеКФорме.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется отправка вложений %1. Пожалуйста, подождите.'"),
			РезультатСклонения.РодительныйПадеж);
	Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыгрузки.Вставить("ДокументЗаказа",          ОснованиеЗаказа);
	ПараметрыВыгрузки.Вставить("ПечатныеФормы",           ВыбранныеВложения.ПечатныеФормы);
	ПараметрыВыгрузки.Вставить("ПрисоединенныеФайлы",     ВыбранныеВложения.ПрисоединенныеФайлы);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"ОнлайнЗаказыСлужебный.ОтправитьВложения",
		ПараметрыВыгрузки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура НачатьОтправкуВложенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьРезультат(Результат, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСсылки

&НаКлиенте
Процедура ОтправитьСсылкуЗаказа()
	
	ШаблоныИспользуются = НастройкиШаблонов.Используется;
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияЭлектроннаяПочта) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияЭлектроннаяПочта, "Письмо"));
		Иначе
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
				МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
				МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(КонструкторПараметровОтправкиБезШаблона());
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияТелефон) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияТелефон, "СообщениеSMS"));
		Иначе
			ПоказатьФормуСообщения(
				Новый Структура("Текст, Получатель, ДополнительныеПараметры", СсылкаЗаказа, СписокПолучателей())
				,
				"СообщениеSMS",
				ОснованиеЗаказа);
		КонецЕсли;
		
	ИначеЕсли ВариантОтправки = "Телеграм" Тогда
		
		ПараметрыОтправки = ИнтернетПоддержкаПользователейКлиент.НовыйПараметрыОтправкиВМессенджеры();
		ПараметрыОтправки.Мессенджер = "Телеграм";
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьURLОтправкиВМессенджеры(
			СообщениеДляМессенджеров(ВариантОтправки),
			СсылкаЗаказа,
			ПараметрыОтправки);
		
	ИначеЕсли ВариантОтправки = "WhatsApp" Тогда
		
		ПараметрыОтправки = ИнтернетПоддержкаПользователейКлиент.НовыйПараметрыОтправкиВМессенджеры();
		ПараметрыОтправки.Мессенджер = "WhatsApp";
		ПараметрыОтправки.СписокПолучателей = СписокПолучателей();
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьURLОтправкиВМессенджеры(
			СообщениеДляМессенджеров(ВариантОтправки),
			СсылкаЗаказа,
			ПараметрыОтправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КонструкторПараметровОтправки(Шаблон, ВидСообщения)
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Шаблон", Шаблон);
	ПараметрыОтправки.Вставить("Предмет", ОснованиеЗаказа);
	ПараметрыОтправки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтправки.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", ВидСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ОтправитьСразу", Ложь);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПредставлениеСсылкиОнлайнЗаказа", СсылкаЗаказа);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("СуммаОнлайнЗаказа", СуммаОплаты);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("СценарийЗаполнения", "ОнлайнЗаказы");
	
	Возврат ПараметрыОтправки;
	
КонецФункции

&НаКлиенте
Функция КонструкторПараметровОтправкиБезШаблона()
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Получатель", СписокПолучателей());
	ПараметрыСообщения.Вставить("Предмет", ОснованиеЗаказа);
	ПараметрыСообщения.Вставить(
		"Тема",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ссылка на %1.'"),
			РезультатСклонения.ВинительныйПадеж));
	
	ПараметрыЗаказа = Новый Структура;
	ПараметрыЗаказа.Вставить("ПредставлениеСсылки", СсылкаЗаказа);
	ПараметрыЗаказа.Вставить("Сумма", СуммаОплаты);
	
	Если ИнтернетПоддержкаПользователейВызовСервера.ОтправлятьПисьмаВФорматеHTML() Тогда
		ПараметрыСообщения.Вставить(
			"Текст",
			Новый Структура(
				"ТекстHTML, СтруктураВложений",
				ТекстПисьмаБезШаблонаHTML(СсылкаЗаказа),
				Новый Структура()));
	Иначе
		ПараметрыСообщения.Вставить(
			"Текст",
			ТекстПисьмаБезШаблонаТекст(СсылкаЗаказа));
	КонецЕсли;
	
	ИнтеграцияПодсистемБИПКлиент.ЗаполнитьПараметрыСообщенияБезШаблонаОнлайнЗаказы(
		ПараметрыСообщения,
		ПараметрыЗаказа);
	ОнлайнЗаказыКлиентПереопределяемый.ЗаполнитьПараметрыСообщенияБезШаблонаОнлайнЗаказы(
		ПараметрыСообщения,
		ПараметрыЗаказа);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

&НаКлиенте
Процедура СформироватьСообщениеДляОтправки(ПараметрыОтправки)
	
	Результат = СформироватьСообщениеНаСервере(ПараметрыОтправки);
	ПоказатьФормуСообщения(
		Результат,
		ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения,
		ПараметрыОтправки.Предмет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСообщениеНаСервере(Знач ПараметрыОтправки)
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	Результат = МодульШаблоныСообщений.СформироватьСообщение(
		ПараметрыОтправки.Шаблон,
		ПараметрыОтправки.Предмет,
		ПараметрыОтправки.УникальныйИдентификатор,
		ПараметрыОтправки.ДополнительныеПараметры);
	
	Вложения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Результат.Вложения Цикл
		
		ТекущееВложение = Новый Структура;
		
		ТекущееВложение.Вставить("Представление");
		ТекущееВложение.Вставить("АдресВоВременномХранилище");
		ТекущееВложение.Вставить("Кодировка");
		ТекущееВложение.Вставить("Идентификатор");
		
		ЗаполнитьЗначенияСвойств(ТекущееВложение, ЭлементКоллекции);
		
		Вложения.Добавить(ТекущееВложение);
		
	КонецЦикла;
	
	Результат.Вставить("Предмет", ПараметрыОтправки.Предмет);
	Результат.Вложения = Вложения;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСообщения(Сообщение, ВидСообщения, Предмет)
	
	Если ВидСообщения = "СообщениеSMS" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			
			ДополнительныеПараметры = Новый Структура("ИсточникКонтактнойИнформации, Предмет, ПеревестиВТранслит");
			
			Если Сообщение.ДополнительныеПараметры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(
					ДополнительныеПараметры,
					Сообщение.ДополнительныеПараметры);
			КонецЕсли;
			
			ДополнительныеПараметры.Предмет = Предмет;
			
			Получатели = ПолучателиСообщения(Сообщение);
			
			МодульОтправкаSMSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаSMSКлиент");
			МодульОтправкаSMSКлиент.ОтправитьSMS(Получатели, Сообщение.Текст, ДополнительныеПараметры);
			
		Иначе
			КопироватьСсылкуВБуфер();
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ТекстПисьмаБезШаблонаHTML(СсылкаЗаказа)
	
	HTMLСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|</head>
		|<body>
		|<p>Ссылка на %1: <a href=""%2"">%2</a></p>
		|
		|</body>
		|</html>",
		РезультатСклонения.ВинительныйПадеж,
		СсылкаЗаказа);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), HTMLСтрока);
	
КонецФункции

&НаКлиенте
Функция ТекстПисьмаБезШаблонаТекст(СсылкаЗаказа)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ссылка на %1: %2'"),
		РезультатСклонения.ВинительныйПадеж,
		СсылкаЗаказа);
	
КонецФункции

&НаСервере
Функция СписокПолучателей()
	
	СписокПолучателей = Новый СписокЗначений;
	
	Если ВариантОтправки = "Телеграм" Или ВариантОтправки = "WhatsApp" Тогда
		ВариантОтправкиДляСпискаПолучателей = "Телефон";
	Иначе
		ВариантОтправкиДляСпискаПолучателей = ВариантОтправки;
	КонецЕсли;
	
	ИнтеграцияПодсистемБИП.ПриФормированииСпискаПолучателейСообщенияОнлайнЗаказов(
		ОснованиеЗаказа,
		ВариантОтправкиДляСпискаПолучателей,
		СписокПолучателей);
	ОнлайнЗаказыПереопределяемый.ПриФормированииСпискаПолучателейСообщенияОнлайнЗаказов(
		ОснованиеЗаказа,
		ВариантОтправкиДляСпискаПолучателей,
		СписокПолучателей);
	
	Возврат СписокПолучателей;
	
КонецФункции

&НаКлиенте
Функция СообщениеДляМессенджеров(ВариантОтправки)
	
	ПредставлениеОснованияЗаказа = РезультатСклонения.ВинительныйПадеж;
	
	Если ЗначениеЗаполнено(ОписаниеОснования.ДанныеОснования.НомерЗаказа) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2 к оплате %3 руб.'"),
			ВРег(Лев(ПредставлениеОснованияЗаказа,1)) + Сред(ПредставлениеОснованияЗаказа, 2),
			ОписаниеОснования.ДанныеОснования.НомерЗаказа,
			СуммаОплаты);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 к оплате %2 руб.'"),
			ВРег(Лев(ПредставлениеОснованияЗаказа,1)) + Сред(ПредставлениеОснованияЗаказа, 2),
			СуммаОплаты);
	КонецЕсли;
	
	Если ВариантОтправки = "WhatsApp" Тогда
		ТекстСообщения = ТекстСообщения + " " + СсылкаЗаказа;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Функция ПолучателиСообщения(Сообщение)
	
	Получатели = Новый Массив;
	
	Если ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений") Тогда
		
		Для каждого ЭлементКоллекции Из Сообщение.Получатель Цикл
			
			КонтактныеДанные = Новый Структура;
			
			КонтактныеДанные.Вставить("Телефон", ЭлементКоллекции.Значение);
			КонтактныеДанные.Вставить("Представление", ЭлементКоллекции.Представление);
			КонтактныеДанные.Вставить("ИсточникКонтактнойИнформации", Неопределено);
			
			Получатели.Добавить(КонтактныеДанные);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Сообщение.Получатель) = Тип("Массив") Тогда
		
		Для каждого ЭлементКоллекции Из Сообщение.Получатель Цикл
			
			КонтактныеДанные = Новый Структура;
			
			КонтактныеДанные.Вставить("Телефон", ЭлементКоллекции.НомерТелефона);
			КонтактныеДанные.Вставить("Представление", ЭлементКоллекции.Представление);
			КонтактныеДанные.Вставить("ИсточникКонтактнойИнформации", ЭлементКоллекции.ИсточникКонтактнойИнформации);
			
			Получатели.Добавить(КонтактныеДанные);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисом

&НаКлиенте
Процедура НачатьПолучениеСсылкиЗаказа()
	
	ОчиститьСообщения();
	СсылкаЗаказа = "";
	
	ВыбранныеВложения = ВыбранныеВложения();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = ПолучитьСсылкуЗаказаНаСервере(
		УникальныйИдентификатор,
		ВыбранныеВложения);
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПолучитьСсылкуЗаказаЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения = Неопределено
		Или РезультатВыполнения.Статус <> "Выполняется" Тогда
		ПолучитьСсылкуЗаказаЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДеактивациюЗаказа(Знач ОписаниеОповещения = Неопределено)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = ДеактивироватьЗаказНаСервере(
		УникальныйИдентификатор);
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ДеактивацияЗаказаЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения = Неопределено
		Или РезультатВыполнения.Статус <> "Выполняется" Тогда
		ДеактивацияЗаказаЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуВложений()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = НачатьОтправкуВложенийНаСервере(
		УникальныйИдентификатор,
		ВыбранныеВложения());
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"НачатьОтправкуВложенийЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения = Неопределено
		Или РезультатВыполнения.Статус <> "Выполняется" Тогда
		НачатьОтправкуВложенийЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСсылкуВБуфер()
	
	БуферОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<!DOCTYPE html>
		|<html>
		|	<body onload='copy()'>
		|		<input id='input' type='text'/>
		|		<script>
		|			function copy() {
		|				var text = '%1';
		|				var ua = navigator.userAgent;
		|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
		|					window.clipboardData.setData('Text', text);
		|				} else {
		|					var copyText = document.getElementById('input');
		|					copyText.value = text;
		|					copyText.select();
		|					document.execCommand('copy');
		|				}
		|			}
		|		</script>
		|	</body>
		|</html>",
		СсылкаЗаказа);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Ссылка получена'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ссылка на %1 скопирована в буфер обмена.'"),
			РезультатСклонения.ВинительныйПадеж));
	
КонецПроцедуры

#КонецОбласти

#Область Вложения

&НаСервере
Процедура ЗаполнитьСписокПечатнымиФормами()
	
	ПечатныеФормы = ОнлайнЗаказыСлужебный.ПечатныеФормыЗаказа(ОснованиеЗаказа);
	
	ДанныеПечатныхФорм = РегистрыСведений.ПечатныеФормыОнлайнЗаказов.ИдентификаторыПечатныхФормЗаказа(
		ОснованиеЗаказа);
	
	Для Каждого ПечатнаяФорма Из ПечатныеФормы Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", ПечатнаяФорма.Идентификатор);
		
		Если Вложения.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока                    = Вложения.Добавить();
			НоваяСтрока.Идентификатор      = ПечатнаяФорма.Идентификатор;
			НоваяСтрока.Представление      = ПечатнаяФорма.Представление;
			НоваяСтрока.ТипФайла           = "MXL";
			НоваяСтрока.ИндексКартинки     = ПолучитьИндексПиктограммыФайла(НоваяСтрока.ТипФайла);
			НоваяСтрока.Статус             = "ПечатнаяФорма";
			НоваяСтрока.ФорматСохранения   = ПечатнаяФорма.ФорматСохранения;
			НоваяСтрока.ИмяФайлаВТранслите = ПечатнаяФорма.ИмяФайлаВТранслите;
			НоваяСтрока.ПодписьИПечать     = ПечатнаяФорма.ПодписьИПечать;
			
			Если ДанныеПечатныхФорм.Найти(ПечатнаяФорма.Идентификатор) <> Неопределено Тогда
				НоваяСтрока.Выбрано  = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрисоединеннымиФайлами()
	
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	
	СписокФайлов = Новый Массив;
	
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОснованиеЗаказа, СписокФайлов);
	
	Для Каждого СсылкаНаФайл Из СписокФайлов Цикл
		
		Если СсылкаНаФайл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла = МодульРаботаСФайлами.ДанныеФайла(СсылкаНаФайл);
		
		Отбор = Новый Структура("Идентификатор", СсылкаНаФайл.УникальныйИдентификатор());
		НайденныеСтроки = Вложения.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Идентификатор  = СсылкаНаФайл.УникальныйИдентификатор();
			НоваяСтрока.Представление  = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			НоваяСтрока.ТипФайла       = ДанныеФайла.Расширение;
			НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
			НоваяСтрока.Статус         = "ВнешнийПрисоединенный";
			НоваяСтрока.Ссылка         = СсылкаНаФайл;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбранныеФайлы = РегистрыСведений.ФайлыОнлайнЗаказов.ФайлыЗаказа(ОснованиеЗаказа);
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ВыбранныйФайл.Ключ);
		
		НайденныеСтроки = Вложения.НайтиСтроки(Отбор);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Выбрано = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыборДляВсехВложений(Выбор)
	
	Для Каждого Вложение Из Вложения Цикл
		Вложение.Выбрано = Выбор;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиенте
Процедура ОбработатьРезультат(Результат, ЭтоОтправкаВложений)
	
	ОписаниеОшибки = "";
	КодОшибки = "";
	ОшибкиВалидации = "";
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки)
			И РезультатОперации.КодОшибки <> ОнлайнЗаказыКлиентСервер.КодОшибкиНедопустимыйСтатус() Тогда
			СтатусЗаказа = ?(
				СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка(),
				ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка(),
				ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса());
			УправлениеЭлементамиФормыПоСтатусуОперации(
				РезультатОперации.СообщениеОбОшибке,
				РезультатОперации.КодОшибки,
				ЭтоОтправкаВложений);
			Возврат;
		КонецЕсли;
		
		Если НовыйОнлайнЗаказ Тогда
			СтатусЗаказаИзменен = Истина;
		КонецЕсли;
		
		ТребуетсяОбновлениеЗаказа = Ложь;
		ТребуетсяОбновлениеЗаказаСВложениями = Ложь;
		ТребуетсяАктивацияЗаказа = Ложь;
		
		Если РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
			СтатусЗаказа = РезультатОперации.СтатусЗаказа;
			ТребуетсяОбновлениеЗаказа = Истина;
		ИначеЕсли РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка() Тогда
			СтатусЗаказа = РезультатОперации.СтатусЗаказа;
			СсылкаЗаказа = "";
			ТребуетсяОбновлениеЗаказа = Ложь;
			ТребуетсяОбновлениеЗаказаСВложениями = Истина;
		ИначеЕсли РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен() Тогда
			СтатусЗаказа = РезультатОперации.СтатусЗаказа;
			ТребуетсяАктивацияЗаказа = Истина;
		Иначе
			СсылкаЗаказа = РезультатОперации.URLЗаказа;
			СтатусЗаказа = РезультатОперации.СтатусЗаказа;
			СуммаОплаты  = РезультатОперации.СуммаЗаказа;
			
			ДанныеАктуальности = Новый Структура;
			ДанныеАктуальности.Вставить("НеобходимоАктуализировать", Ложь);
			ДанныеАктуальности.Вставить("СменаНастройки", Ложь);
			ДанныеАктуальности.Вставить("ОшибкиВалидацииЗаказа", Новый Массив);
			ЗаполнитьЗначенияСвойств(ДанныеАктуальности, РезультатОперации);
			
			Если СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется() Тогда
				ДанныеАктуальности.СменаНастройки = НастройкаПодключенияИзменена();
			КонецЕсли;
			
			Если ДанныеАктуальности.НеобходимоАктуализировать
				Или ДанныеАктуальности.СменаНастройки Тогда
				ТребуетсяОбновлениеЗаказа = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеАктуальности.ОшибкиВалидацииЗаказа) Тогда
				ОшибкиВалидации = ДанныеАктуальности.ОшибкиВалидацииЗаказа[0];
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОперации.СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется() Тогда
			УправлениеЭлементамиФормыПоДанным();
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "СтатусПолучен" Тогда
		СтатусЗаказа = Результат.СтатусЗаказа;
		СуммаОплаты  = Результат.СуммаОплаты;
		СсылкаЗаказа = Результат.URLЗаказа;
		Если СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
			ТребуетсяОбновлениеЗаказа = Истина;
		Иначе
			ТребуетсяОбновлениеЗаказа = Ложь;
		КонецЕсли;
		ТребуетсяОбновлениеЗаказаСВложениями = Ложь;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка во время выполнения запроса.'");
		СтатусЗаказа   = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса();
	ИначеЕсли Результат.Статус = "НеобходимоАктуализировать" Тогда
		СсылкаЗаказа = "";
		ТребуетсяОбновлениеЗаказа = Истина;
		ТребуетсяОбновлениеЗаказаСВложениями = Ложь;
	ИначеЕсли Результат.Статус = "НеконсистентноеСостояниеЗаказа" Тогда
		СсылкаЗаказа = "";
		СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка();
		ТребуетсяОбновлениеЗаказа = Ложь;
		ТребуетсяОбновлениеЗаказаСВложениями = Истина;
	КонецЕсли;
	
	Если СтатусЗаказа <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибка()
		И ОнлайнЗаказыКлиентСервер <> ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса() Тогда
		
		Если СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
			ВремСтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется();
		Иначе
			ВремСтатусЗаказа = СтатусЗаказа;
		КонецЕсли;
		
		Если ТекущийСтатусЗаказа <> ВремСтатусЗаказа Тогда
			ТекущийСтатусЗаказа = ВремСтатусЗаказа;
			СтатусЗаказаИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормыПоСтатусуОперации(
		ОписаниеОшибки,
		КодОшибки,
		ЭтоОтправкаВложений);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоДанным()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыбора
		И (ЗначениеЗаполнено(НастройкаПодключения) Или Параметры.НастройкиПодключения.Количество() = 1) Тогда
		
		Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыбора Тогда
		
		НастройкаПодключенияДокумента = ОнлайнЗаказыСлужебный.НастройкаПодключенияПоДокументуЗаказа(
			ОснованиеЗаказа);
		
		Для Каждого НастройкаПодключенияДляВыбора Из Параметры.НастройкиПодключения Цикл
			НоваяНастройкаПодключения = НастройкиПодключения.Добавить();
			НоваяНастройкаПодключения.НастройкаПодключения = НастройкаПодключенияДляВыбора;
			Если ЗначениеЗаполнено(НастройкаПодключенияДокумента)
				И НастройкаПодключенияДляВыбора = НастройкаПодключенияДокумента Тогда
				НоваяНастройкаПодключения.ИдентификаторСформирован = Истина;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиПодключения.Сортировать("ИдентификаторСформирован Убыв",);
		
	КонецЕсли;
	
	Если Вложения.Количество() = 0 Тогда
		Элементы.ПерейтиКВложениям.Видимость = Ложь;
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Выбрано", Истина);
		ВыбранныеСтроки = Вложения.НайтиСтроки(Отбор);
		
		Если ВыбранныеСтроки.Количество() = 0 Тогда
			Элементы.ПерейтиКВложениям.Заголовок = НСтр("ru = 'Вложения'");
		Иначе
			Элементы.ПерейтиКВложениям.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вложения (%1)'"),
				ВыбранныеСтроки.Количество());
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияСсылкаНаЗаказ.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ссылка на %1:'"),
		РезультатСклонения.ВинительныйПадеж)
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоПодсистемам()
	
	ЕстьЭлектроннаяПочта = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	
	Элементы.ГруппаВариантОтправкиЭлектроннаяПочта.Видимость = ЕстьЭлектроннаяПочта;
	Элементы.ГруппаВариантОтправкиТелефон.Видимость = ЕстьОтправкаSMS;
	
	Если Не НастройкиШаблонов.Используется Тогда
		Элементы.ГруппаШаблоны.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоСтатусуОперации(
		Знач ОписаниеОшибки,
		Знач КодОшибки,
		Знач ЭтоОтправкаВложений)
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияВыгрузкиФайлов.Видимость = Ложь;
	
	Если СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаОшибкаСервиса() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = ОписаниеОшибки;
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
		Если КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиУжеОплачен() Тогда
			Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
			Элементы.ОбновитьСсылку.Видимость = Ложь;
		ИначеЕсли КодОшибки = ОнлайнЗаказыСлужебный.КодОшибкиОтсутствуетДоступКСервису() Тогда
			Элементы.ОбновитьСсылку.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			
			Элементы.ОбновитьСсылку.Видимость = Истина;
			ТекущийЭлемент = Элементы.ОбновитьСсылку;
		КонецЕсли;
		
		Элементы.ДекорацияПечатныеФормыИВложения.ЦветФона = Элементы.ДекорацияПояснениеКФорме.ЦветФона;
		
		Элементы.ОтменитьСсылку.Видимость             = Ложь;
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Истина;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Истина;
		Элементы.КопироватьВБуфер.Доступность         = Ложь;
		Элементы.ОтправитьСсылку.Доступность          = Ложь;
		Элементы.ПерейтиКВложениям.Доступность        = Ложь;
		Элементы.СсылкаЗаказа.Доступность             = Ложь;
		
	ИначеЕсли СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаИстекСрокЖизни() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Истек срок жизни %1, для обновления ссылки необходимо изменить срок жизни и воспользоваться командой.'"),
			РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
		Элементы.Страницы.ТолькоПросмотр       = Истина;
		Элементы.ОбновитьСсылку.Видимость      = Истина;
		Элементы.ОтменитьСсылку.Видимость      = Ложь;
		Элементы.КопироватьВБуфер.Доступность  = Ложь;
		Элементы.ОтправитьСсылку.Доступность   = Ложь;
		Элементы.ПерейтиКВложениям.Доступность = Ложь;
		Элементы.СсылкаЗаказа.Доступность      = Ложь;
		
	ИначеЕсли СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняетсяОплата() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начат процесс оплаты покупателем. Повторите попытку позднее.'"),
				СуммаОплаты);
		
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
		
		Элементы.ДекорацияПечатныеФормыИВложения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ДекорацияПечатныеФормыИВложения.ЦветТекста = Новый Цвет;
		
		Элементы.Страницы.ТолькоПросмотр              = Ложь;
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Ложь;
		Элементы.ОбновитьСсылку.Видимость             = Истина;
		Элементы.ОтменитьСсылку.Видимость             = Ложь;
		Элементы.КопироватьВБуфер.Доступность         = Ложь;
		Элементы.ОтправитьСсылку.Доступность          = Ложь;
		Элементы.ПерейтиКВложениям.Доступность        = Ложь;
		Элементы.СсылкаЗаказа.Доступность             = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ОшибкиВалидации) Тогда
		
		Если ТребуетсяОбновлениеЗаказа Тогда
			Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Внимание. Данные %1 изменены. Обновление ссылки невозможно, %2'"),
				РезультатСклонения.РодительныйПадеж,
				нРег(Лев(ОшибкиВалидации,1)) + Сред(ОшибкиВалидации, 2));
			Элементы.ОтменитьСсылку.Видимость = Истина;
		Иначе
			Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Внимание. %1'"),
				ОшибкиВалидации);
			Элементы.ОтменитьСсылку.Видимость = Ложь;
		КонецЕсли;
			
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
		Элементы.Страницы.ТолькоПросмотр       = Истина;
		Элементы.ОбновитьСсылку.Видимость      = Ложь;
		Элементы.КопироватьВБуфер.Доступность  = Ложь;
		Элементы.ОтправитьСсылку.Доступность   = Ложь;
		Элементы.ПерейтиКВложениям.Доступность = Ложь;
		Элементы.СсылкаЗаказа.Доступность      = Ложь;
		
	ИначеЕсли ТребуетсяОбновлениеЗаказа Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание. Данные %1 были изменены, требуется обновление ссылки.'"),
			РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
		Элементы.Страницы.ТолькоПросмотр       = Истина;
		Элементы.ОбновитьСсылку.Видимость      = Истина;
		Элементы.КопироватьВБуфер.Доступность  = Ложь;
		Элементы.ОтправитьСсылку.Доступность   = Ложь;
		Элементы.ПерейтиКВложениям.Доступность = Ложь;
		Элементы.ОтменитьСсылку.Видимость      = Истина;
		ТекущийЭлемент                         = Элементы.ОбновитьСсылку;
		Элементы.СсылкаЗаказа.Доступность      = Ложь;
		
	ИначеЕсли ТребуетсяОбновлениеЗаказаСВложениями Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка обработки %1. Необходимо повторить отправку данных в сервис.'"),
			РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
		Элементы.Страницы.ТолькоПросмотр       = Истина;
		Элементы.ОбновитьСсылку.Видимость      = Истина;
		Элементы.ОтменитьСсылку.Видимость      = Ложь;
		Элементы.КопироватьВБуфер.Доступность  = Ложь;
		Элементы.ОтправитьСсылку.Доступность   = Ложь;
		Элементы.ПерейтиКВложениям.Доступность = Ложь;
		Элементы.СсылкаЗаказа.Доступность      = Ложь;
		
	ИначеЕсли СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаВыполняется() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ссылка на %1 сформирована и готова к отправке покупателю. Сумма %2 %3 руб.'"),
				РезультатСклонения.ВинительныйПадеж,
				РезультатСклонения.РодительныйПадеж,
				СуммаОплаты);
		
		Если ЭтоОтправкаВложений Тогда
			Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = НСтр(
				"ru = 'Вложения успешно отправлены.'");
		Иначе
			Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выберите печатные формы и вложения (будут доступны для загрузки на странице %1).'"),
				РезультатСклонения.РодительныйПадеж);
		КонецЕсли;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
		
		Элементы.Страницы.ТолькоПросмотр              = Ложь;
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Ложь;
		Элементы.ОбновитьСсылку.Видимость             = Ложь;
		Элементы.ОтменитьСсылку.Видимость             = Истина;
		Элементы.КопироватьВБуфер.Доступность         = Истина;
		Элементы.ОтправитьСсылку.Доступность          = Истина;
		Элементы.ПерейтиКВложениям.Доступность        = Истина;
		Элементы.СсылкаЗаказа.Доступность             = Истина;
		
	ИначеЕсли СтатусЗаказа = ОнлайнЗаказыКлиентСервер.СтатусЗаказаНеАктивен() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ неактивен. При необходимости можно выполнить активацию %1.'"),
				РезультатСклонения.РодительныйПадеж);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
		
		Элементы.Страницы.ТолькоПросмотр              = Ложь;
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Ложь;
		Элементы.ОбновитьСсылку.Видимость             = Истина;
		Элементы.ОтменитьСсылку.Видимость             = Ложь;
		Элементы.КопироватьВБуфер.Доступность         = Ложь;
		Элементы.ОтправитьСсылку.Доступность          = Ложь;
		Элементы.ПерейтиКВложениям.Доступность        = Ложь;
		Элементы.СсылкаЗаказа.Доступность             = Ложь;
		
	ИначеЕсли СтатусЗаказа = ОнлайнЗаказыСлужебный.СтатусЗаказаОплачен() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ссылка на заказ была сформирована и оплачена покупателем. Сумма %1 %2 руб.'"),
				РезультатСклонения.РодительныйПадеж,
				СуммаОплаты);
		Элементы.ДекорацияПечатныеФормыИВложения.Заголовок = Элементы.ДекорацияПояснениеКФорме.Заголовок;
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
		
		Элементы.Страницы.ТолькоПросмотр            = Истина;
		Элементы.ОбновитьСсылку.Видимость           = Ложь;
		Элементы.ОтменитьСсылку.Видимость           = Ложь;
		Элементы.КопироватьВБуфер.Доступность       = Ложь;
		Элементы.ОтправитьСсылку.Доступность        = Ложь;
		Элементы.ПерейтиКВложениям.Доступность      = Ложь;
		Элементы.СсылкаЗаказа.Доступность           = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияПечатныеФормыИВложения.ЦветФона   = Элементы.ДекорацияПояснениеКФорме.ЦветФона;
	Элементы.ДекорацияПечатныеФормыИВложения.ЦветТекста = Элементы.ДекорацияПояснениеКФорме.ЦветТекста;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПодключения.Имя);
	
	// Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НастройкиПодключения.ИдентификаторСформирован");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение);
	
	Элемент.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоВариантуОтправки()
	
	Если НастройкиШаблонов.Используется Тогда
		Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаШаблонСообщенияЭлектроннаяПочта;
		ИначеЕсли ВариантОтправки = "Телефон" Тогда
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаШаблонСообщенияТелефон;
		Иначе
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаДекорацияОтступ;
		КонецЕсли;
	Иначе
		Элементы.ГруппаШаблоны.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервереБезКонтекста
Процедура СохранитьШаблоныПоУмолчанию(
		Знач ОснованиеЗаказа,
		Знач ШаблонСообщенияЭлектроннаяПочта,
		Знач ШаблонСообщенияТелефон)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеЗаказа)) Тогда
		ПредставлениеОснованияЗаказа = ОснованиеЗаказа.Метаданные().ПолноеИмя();
	Иначе
		ПредставлениеОснованияЗаказа = ОснованиеЗаказа;
	КонецЕсли;
	
	// Шаблоны электронной почты
	КлючНастроек = "ШаблоныСообщенийЭлектроннойПочты";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ОтправкаURLОнлайнЗаказов",
		КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Соответствие();
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	ШаблоныПоУмолчанию.Вставить(ПредставлениеОснованияЗаказа, ШаблонСообщенияЭлектроннаяПочта);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ОтправкаURLОнлайнЗаказов",
		КлючНастроек,
		ШаблоныПоУмолчанию);
	
	// Шаблоны SMS сообщений
	КлючНастроек = "ШаблоныСообщенийSMS";
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ОтправкаURLОнлайнЗаказов",
		КлючНастроек);
	
	Если Настройки = Неопределено Тогда
		ШаблоныПоУмолчанию = Новый Соответствие();
	Иначе
		ШаблоныПоУмолчанию = Настройки;
	КонецЕсли;
	
	ШаблоныПоУмолчанию.Вставить(ПредставлениеОснованияЗаказа, ШаблонСообщенияТелефон);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		"ОтправкаURLОнлайнЗаказов",
		КлючНастроек,
		ШаблоныПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьШаблоныПоУмолчанию()
	
	Если НастройкиШаблонов.Используется
		И ЗначениеЗаполнено(ОснованиеЗаказа) Тогда
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеЗаказа)) Тогда
			ПредставлениеОснованияЗаказа = ОснованиеЗаказа.Метаданные().ПолноеИмя();
		Иначе
			ПредставлениеОснованияЗаказа = ОснованиеЗаказа;
		КонецЕсли;
		
		// Шаблоны электронной почты
		Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"ОтправкаURLОнлайнЗаказов",
			"ШаблоныСообщенийЭлектроннойПочты");
		
		Если Настройки <> Неопределено
			И ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснованияЗаказа] <> Неопределено Тогда
			
			ШаблонСообщенияЭлектроннаяПочта = Настройки[ПредставлениеОснованияЗаказа];
			
		КонецЕсли;
		
		// Шаблоны SMS сообщений
		Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"ОтправкаURLОнлайнЗаказов",
			"ШаблоныСообщенийSMS");
		
		Если Настройки <> Неопределено
			И ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснованияЗаказа] <> Неопределено Тогда
			
			ШаблонСообщенияТелефон = Настройки[ПредставлениеОснованияЗаказа];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция НастройкаПодключенияИзменена()
	
	ДанныеКэшаБИП = РегистрыСведений.ИдентификаторыОнлайнЗаказов.ДанныеДляФормированияСсылки(ОснованиеЗаказа);
	
	Если ДанныеКэшаБИП = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ДанныеКэшаБИП.НастройкаПодключения <> НастройкаПодключения Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписанияПодсистем = ОбщегоНазначения.ОписанияПодсистем();
	ВерсияБСП = Неопределено;
	
	Для Каждого ОписаниеПодсистемы Из ОписанияПодсистем Цикл
		Если ОписаниеПодсистемы.Имя = "СтандартныеПодсистемы" Тогда
			ВерсияБСП = ОписаниеПодсистемы.Версия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияБСП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебныйКлиентСервер");
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБСП, "3.1.10.0") < 0 Тогда
		Возврат МодульРаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
			РасширениеФайла);
	Иначе
		Возврат МодульРаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(
			РасширениеФайла);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтменитьСсылку(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачатьДеактивациюЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеВложения()
	
	ПечатныеФормы = Новый Массив;
	ПрисоединенныеФайлы = Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Выбрано", Истина);
	
	ВыбранныеВложения = Вложения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ВыбранноеВложение Из ВыбранныеВложения Цикл
		Если ВыбранноеВложение.Статус = "ПечатнаяФорма" Тогда
			
			ПечатнаяФорма = Новый Структура;
			ПечатнаяФорма.Вставить("Идентификатор",      ВыбранноеВложение.Идентификатор);
			ПечатнаяФорма.Вставить("Представление",      ВыбранноеВложение.Представление);
			ПечатнаяФорма.Вставить("ФорматСохранения",   ВыбранноеВложение.ФорматСохранения);
			ПечатнаяФорма.Вставить("ИмяФайлаВТранслите", ВыбранноеВложение.ИмяФайлаВТранслите);
			ПечатнаяФорма.Вставить("ПодписьИПечать",     ВыбранноеВложение.ПодписьИПечать);
			
			ПечатныеФормы.Добавить(ПечатнаяФорма);
			
		ИначеЕсли ВыбранноеВложение.Статус = "ВнешнийПрисоединенный" Тогда
			ПрисоединенныеФайлы.Добавить(ВыбранноеВложение.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ПечатныеФормы", ПечатныеФормы);
	Результат.Вставить("ПрисоединенныеФайлы", ПрисоединенныеФайлы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

