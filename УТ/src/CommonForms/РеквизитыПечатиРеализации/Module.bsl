
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,КлючНазначенияИспользования, ТаблицаОснованийДляПечати");
	
	ПерезаполнятьАдресДоставки = ДоставкаТоваров.ПерезаполнятьАдресДоставкиВДокументеПродажи(Ссылка);
	
	Если ТолькоПросмотр Тогда
		
		СтруктураПараметров = ИзменяемыеРеквизиты(Параметры);
		МассивЭлементов = Новый Массив();
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			МассивЭлементов.Добавить(ЭлементСтруктуры.Ключ);
		КонецЦикла;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если Параметры.НеПоказыватьРеквизиты <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, Параметры.НеПоказыватьРеквизиты, "Видимость", Ложь);
	КонецЕсли;
	
	Если Параметры.ТипОбъекта = "ВозвратТоваровМеждуОрганизациями"
		Или Параметры.ТипОбъекта = "ПередачаТоваровМеждуОрганизациями" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетОрганизацииПолучателя", "Видимость", Параметры.РасчетыЧерезОрганизацию);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетКонтрагента", "Видимость", Не Параметры.РасчетыЧерезОрганизацию);
	Иначе
		Если ЗначениеЗаполнено(Параметры.ТаблицаОснованийДляПечати) Тогда 
			ТаблицаОснованийДляПечати.Загрузить(Параметры.ТаблицаОснованийДляПечати.Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		И Не ПерезаполнятьАдресДоставки
		И Не РеализацияПоЗаказам
		И (Параметры.ТипОбъекта = "РеализацияТоваровУслуг"
			Или Параметры.ТипОбъекта = "ПередачаТоваровХранителю"
			Или (Параметры.ТипОбъекта = "ПомощникПродаж"
				И Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи))
		Или Параметры.ТипОбъекта = "ВозвратТоваровПоставщику"
		Или Параметры.ТипОбъекта = "ВыкупТоваровХранителем"
		Или Параметры.ТипОбъекта = "ВыкупВозвратнойТарыКлиентом" Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресДоставки", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступПечатьЛево", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если Параметры.ТипОбъекта = "АктВыполненныхРабот" Тогда
		Заголовок = НСтр("ru = 'Реквизиты печати'");
		
		Элементы.Грузополучатель.Видимость = Ложь;
		Элементы.БанковскийСчетГрузополучателя.Видимость = Ложь;
		Элементы.АдресДоставки.Видимость = Ложь;
		Элементы.ДоверенностьНомер.Видимость = Ложь;
		Элементы.ДоверенностьДата.Видимость = Ложь;
		Элементы.ДоверенностьВыдана.Видимость = Ложь;
		Элементы.ДоверенностьЛицо.Видимость = Ложь;
		Элементы.Грузоотправитель.Видимость = Ложь;
		Элементы.БанковскийСчетГрузоотправителя.Видимость = Ложь;
		Элементы.Отпустил.Видимость = Ложь;
		Элементы.ОтпустилДолжность.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипОбъекта = "РеализацияТоваровУслуг" Тогда
		ЗаполнитьСписокВыбораСведенияОТранспортировкеИГрузе();
		ЗаполнитьСписокВыбораСопроводительныеДокументы();
	Иначе
		Элементы.СведенияОТранспортировкеИГрузе.Видимость = Ложь;
		Элементы.СопроводительныеДокументы.Видимость = Ложь;
	КонецЕсли;
	Элементы.ГруппаДоставка.Видимость = Элементы.АдресДоставки.Видимость Или ТипОбъекта = "РеализацияТоваровУслуг";
	
	ЗаполнитьСписокВыбораОснование();

	Если ПерезаполнятьАдресДоставки Тогда
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(
			Элементы,
			ДанныеРаспоряженияНаДоставку,
			РеализацияПоЗаказам Или РеализацияЧерезКомиссионера,,,
			Истина);
	Иначе
		ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Партнер);
	КонецЕсли;
	
	ПродажиСерверЛокализация.ПриСозданииНаСервереРеквизитыПечатиРеализации(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗакрытьФормуПринудительно Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не СохранитьПараметры И Не ЗавершениеРаботы Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Реквизиты печати реализации товаров и услуг были изменены. Закрыть без сохранения реквизитов?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "НеЗакрывать" Тогда
		СохранитьПараметры = Ложь;
	ИначеЕсли ОтветНаВопрос = "Закрыть" Тогда
		ЗакрытьФормуПринудительно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если СохранитьПараметры Тогда
		
		СтруктураПараметров = ИзменяемыеРеквизиты(ЭтаФорма);
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		ОснованиеИзменено = (СокрЛП(Основание) <> СокрЛП(ОбъектОснование));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснование = Основание;
	
	ВыбранныеОснования = ТаблицаОснованийДляПечати.НайтиСтроки(Новый Структура("Основание", СокрЛП(Основание)));
	Если ВыбранныеОснования.Количество() > 0 Тогда
		ВыбранноеОснование = ВыбранныеОснования.Получить(0);
		ОснованиеНомер = ВыбранноеОснование.ОснованиеНомер;
		ОснованиеДата  = ВыбранноеОснование.ОснованиеДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНомерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеНомер)Тогда
		ОснованиеИзменено = (СокрЛП(ОснованиеНомер) <> СокрЛП(ОбъектОснованиеНомер));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеНомер = ОснованиеНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеДата) Тогда
		ОснованиеИзменено = (СокрЛП(ОснованиеДата) <> СокрЛП(ОбъектОснованиеДата));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеДата = ОснованиеДата;
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		БанковскийСчетГрузоотправителя = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Грузоотправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Грузополучатель) Или ПерезаполнятьАдресДоставки Тогда
		ГрузополучательПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	Если ПерезаполнятьАдресДоставки Тогда
		
		ИменаРеквизитовАдресовДоставки = ДоставкаТоваровКлиентСервер.ИменаРеквизитовАдресовДоставки("АдресДоставки");
		
		ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
			Элемент,
			ЭтотОбъект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставки],
			ЭтотОбъект[ИменаРеквизитовАдресовДоставки.ИмяРеквизитаАдресаДоставкиЗначенияПолей]);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПерезаполнятьАдресДоставки Тогда
		СтандартнаяОбработка = Ложь;
		АдресДоставкиПриИзменении(Элемент);
		ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, ЭтотОбъект, Элемент.Имя, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКодаСпециальныхОбстоятельствНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Код", КодСпециальныхОбстоятельств);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборКодаСпециальныхОбстоятельствЗавершение",
		ЭтотОбъект);
	
	ОбменСКонтрагентамиКлиент.ОткрытьФормуВыбораСпециальныхОбстоятельствФНС(
		ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКодаСпециальныхОбстоятельствОчистка(Элемент, СтандартнаяОбработка)
	//++ Локализация
	КодСпециальныхОбстоятельств = Неопределено;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКодаСпециальныхОбстоятельствОткрытие(Элемент, СтандартнаяОбработка)
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьФормуПросмотраСпециальногоОбстоятельстваФНС(КодСпециальныхОбстоятельств,
		ЭтотОбъект);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ТолькоПросмотр Тогда
		СохранитьПараметры = Истина;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ИзменяемыеРеквизиты(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Источник.АдресДоставки);
	СтруктураПараметров.Вставить("АдресДоставкиЗначенияПолей",     Источник.АдресДоставкиЗначенияПолей);
	СтруктураПараметров.Вставить("ЗонаДоставки",                   Источник.ЗонаДоставки);
	СтруктураПараметров.Вставить("ВремяДоставкиС",                 Источник.ВремяДоставкиС);
	СтруктураПараметров.Вставить("ВремяДоставкиПо",                Источник.ВремяДоставкиПо);
	СтруктураПараметров.Вставить("ДополнительнаяИнформацияПоДоставке", Источник.ДополнительнаяИнформацияПоДоставке);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Источник.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Источник.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Источник.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", Источник.БанковскийСчетОрганизацииПолучателя);
	СтруктураПараметров.Вставить("Грузоотправитель",               Источник.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Источник.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Источник.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Источник.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Источник.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Источник.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Основание",                      Источник.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",                  Источник.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",                 Источник.ОснованиеНомер);
	СтруктураПараметров.Вставить("Отпустил",                       Источник.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Источник.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Руководитель",                   Источник.Руководитель);
	СтруктураПараметров.Вставить("СведенияОТранспортировкеИГрузе", Источник.СведенияОТранспортировкеИГрузе);
	СтруктураПараметров.Вставить("СопроводительныеДокументы",      Источник.СопроводительныеДокументы);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Источник.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Источник.БанковскийСчетОрганизации);
	//++ Локализация
	СтруктураПараметров.Вставить("КодСпециальныхОбстоятельств",    Источник.КодСпециальныхОбстоятельств);
	//-- Локализация
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ГрузополучательПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		БанковскийСчетГрузополучателя = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Грузополучатель);
	КонецЕсли;
	
	Если ПерезаполнятьАдресДоставки Тогда
		ПараметрыЗаполнения = ДоставкаТоваров.ПараметрыЗаполненияРеквизитов();
		ПараметрыЗаполнения.ОчиститьРеквизитыДоставки = Ложь;
		ПараметрыЗаполнения.УстановитьСпособДоставки = Ложь;
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, "Грузополучатель", ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОснование()
	
	Для Каждого СтрокаТаблицы Из ТаблицаОснованийДляПечати Цикл 
		Элементы.Основание.СписокВыбора.Добавить(СтрокаТаблицы.Основание);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеНомер) Тогда
			Элементы.ОснованиеНомер.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеДата) Тогда
			Элементы.ОснованиеДата.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеДата,Формат(СтрокаТаблицы.ОснованиеДата,"ДЛФ=D"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСведенияОТранспортировкеИГрузе()
	
	Элементы.СведенияОТранспортировкеИГрузе.СписокВыбора.Очистить();
	СписокСведенийОТранспортировке = Новый Массив;
	
	//++ Локализация
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН")
		И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортнаяНакладная.Дата,
		|	ТранспортнаяНакладная.Номер
		|ИЗ
		|	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
		|		ПО ТранспортнаяНакладная.Ссылка = ТранспортнаяНакладнаяДокументыОснования.Ссылка
		|ГДЕ
		|	ТранспортнаяНакладная.Проведен = ИСТИНА
		|	И ТранспортнаяНакладнаяДокументыОснования.ДокументОснование = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ТранспортнаяНакладная.Дата,
		|	ТранспортнаяНакладная.Номер";
		
		Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СокращенноеНазваниеНакладной  = НСтр("ru = 'ТТН'");
		Пока Выборка.Следующий() Цикл
			ШапкаНакладной = Новый Структура("Дата, Номер");
			ЗаполнитьЗначенияСвойств(ШапкаНакладной, Выборка);
			ПредставлениеТТН = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ШапкаНакладной, СокращенноеНазваниеНакладной);
			СписокСведенийОТранспортировке.Добавить(ПредставлениеТТН);
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		И ПравоДоступа("Чтение", Метаданные.Документы.ПоручениеЭкспедитору) Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоручениеЭкспедитору.Дата,
		|	ПоручениеЭкспедитору.Номер
		|ИЗ
		|	Документ.ПоручениеЭкспедитору КАК ПоручениеЭкспедитору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоручениеЭкспедитору.Основания КАК ПоручениеЭкспедиторуОснования
		|		ПО ПоручениеЭкспедитору.Ссылка = ПоручениеЭкспедиторуОснования.Ссылка
		|ГДЕ
		|	ПоручениеЭкспедитору.Проведен = ИСТИНА
		|	И ПоручениеЭкспедиторуОснования.Основание = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ПоручениеЭкспедитору.Дата,
		|	ПоручениеЭкспедитору.Номер";
		
		Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПоручениеЭкспедитору  = НСтр("ru = 'Поручение экспедитору'");
		Пока Выборка.Следующий() Цикл
			ШапкаНакладной = Новый Структура("Дата, Номер");
			ЗаполнитьЗначенияСвойств(ШапкаНакладной, Выборка);
			ПредставлениеПоручениеЭкспедитору =
				ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ШапкаНакладной, ПоручениеЭкспедитору);
			СписокСведенийОТранспортировке.Добавить(ПредставлениеПоручениеЭкспедитору);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокСведенийОТранспортировке) Тогда
		Элементы.СведенияОТранспортировкеИГрузе.СписокВыбора.Добавить(СтрСоединить(СписокСведенийОТранспортировке, ", "));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСопроводительныеДокументы()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры")
		И ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыНоменклатуры) Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Ссылка);
		
		СертификатыНоменклатуры = Справочники.СертификатыНоменклатуры.СертификатыНоменклатурыДокумента(МассивОбъектов);
		
		Если ЗначениеЗаполнено(СертификатыНоменклатуры) Тогда
			Элементы.СопроводительныеДокументы.СписокВыбора.Добавить(СтрСоединить(СертификатыНоменклатуры, ", "));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//++ Локализация

// Выбор кода специальных обстоятельств завершение
// 
// Параметры:
//  ВыбранноеЗначение - см. ОбменСКонтрагентамиКлиент.ОткрытьФормуВыбораСпециальныхОбстоятельствФНС
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ВыборКодаСпециальныхОбстоятельствЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	КодСпециальныхОбстоятельств = ВыбранноеЗначение.Код;
	ПредставлениеКодаСпециальныхОбстоятельств = ПредставлениеКодаСпециальныхОбстоятельств(КодСпециальныхОбстоятельств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеКодаСпециальныхОбстоятельств(КодСпециальныхОбстоятельств)
	
	Возврат ОбменСКонтрагентамиУТ.ПредставлениеКодаСпециальныхОбстоятельств(КодСпециальныхОбстоятельств);
	
КонецФункции
//-- Локализация

#КонецОбласти

#КонецОбласти
