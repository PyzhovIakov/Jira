///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.ОснованиеПлатежа)
		Или Не ЗначениеЗаполнено(Параметры.НастройкиПодключения) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СистемаБыстрыхПлатежейСобытия.ПриСозданииНаСервереФормыОтправкиСсылки(
		ЭтотОбъект,
		Отказ);
	
	НастройкиШаблонов = СистемаБыстрыхПлатежейСлужебный.НастройкиШаблоновСообщений();
	ОснованиеПлатежа = Параметры.ОснованиеПлатежа;
	МаксимальнаяСуммаОплатыСБП = Параметры.МаксимальнаяСуммаОплаты;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ВариантОтправки = "ЭлектроннаяПочта";
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
		ВариантОтправки = "Телефон";
	КонецЕсли;
	
	ОписаниеЧастичнойОплаты = Новый Структура;
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ЗаполнитьДанныеФормы();
	Иначе
		ЗаполнитьНастройкиПодключения();
	КонецЕсли;
	
	УправлениеЭлементамиФормыПоПодсистемам();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеЭлементамиФормыПоВариантуОтправки();
	
	Если Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаВыбора
			И Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не обнаружена настройка подключения к Системе быстрых платежей.'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		НачатьПолучениеПлатежнойСсылки();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.УстановитьОтображениеКнопкиКопироватьВБуфер(
		Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусОперацииИзменен Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОснованиеПлатежа", ОснованиеПлатежа);
		ПараметрыОповещения.Вставить("НастройкаПодключения", НастройкаПодключения);
		Оповестить("ИзмененСтатусСБП", ПараметрыОповещения);
	КонецЕсли;
	
	Если НастройкиШаблонов.Используется
		И ЗначениеЗаполнено(ОснованиеПлатежа)
		И ЗначениеЗаполнено(НастройкаПодключения) Тогда
		
		СохранитьШаблоныПоУмолчанию(
			ОснованиеПлатежа,
			ШаблонСообщенияЭлектроннаяПочта,
			ШаблонСообщенияТелефон,
			НастройкаПодключения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтправкиЭлектроннаяПочтаПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиТелеграмПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиТелефонПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиWhatsAppПриИзменении(Элемент)
	УправлениеЭлементамиФормыПоВариантуОтправки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПодключения

&НаКлиенте
Процедура НастройкиПодключенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьНастройкуПодключения(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЧастичныеОплаты

&НаКлиенте
Процедура ЧастичныеОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЧастичнаяОплата = ЧастичныеОплаты.НайтиПоИдентификатору(Элементы.ЧастичныеОплаты.ТекущаяСтрока);
	
	Если ЧастичнаяОплата = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана частичная оплата.'"),
			,
			,
			"ЧастичныеОплаты");
		Возврат;
		
	КонецЕсли;
	
	Если ЧастичнаяОплата.ЭтоПлатежнаяСсылкаСБП Тогда
		ПлатежнаяСсылкаСБП = ЧастичнаяОплата.Ссылка;
		ОписаниеЧастичнойОплаты = ЗаполнитьОписаниеЧастичнойОплаты(ПлатежнаяСсылкаСБП);
	КонецЕсли;
	
	Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	НачатьПолучениеПлатежнойСсылки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьНастройкуПодключения(Команда)
	
	СтрокаНастройкиПодключения = НастройкиПодключения.НайтиПоИдентификатору(
		Элементы.НастройкиПодключенияВыбор.ТекущаяСтрока);
	Если СтрокаНастройкиПодключения = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана настройка подключения для формирования платежной ссылки в Системе быстрых платежей.'"),
			,
			,
			"НастройкиПодключения");
		Возврат;
	КонецЕсли;
	
	НастройкаПодключения = СтрокаНастройкиПодключения.НастройкаПодключения;
	ЗаполнитьДанныеФормы();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная Тогда
		НачатьПолучениеПлатежнойСсылки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылку(Команда)
	
	Закрыть();
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		ОтправитьПлатежнуюСсылку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьQR(Команда)
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПоказатьQRПослеЗакрытияФормы",
			ЭтотОбъект);
		
		ОткрытьФорму(
			"ОбщаяФорма.ОтображениеQRКодаСБП",
			Новый Структура(
				"ПлатежнаяСсылка, ОснованиеПлатежа",
				ПлатежнаяСсылка,
				ОснованиеПлатежа),
			ЭтотОбъект,
			,
			,
			,
			ОписаниеОповещения);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Платежная ссылка не сформирована.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСсылку(Команда)
	
	НачатьПолучениеПлатежнойСсылки(
		ТребуетсяОбновлениеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	// Копирование происходит с предварительной очисткой через обработчик, для обхода поведения платформы
	// при повторном копировании - при определенных условиях копирование не происходит.
	БуферОбмена = "";
	ПодключитьОбработчикОжидания(
		"КопироватьСсылкуВБуфер",
		0.1,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплату(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(СуммаКОплате) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Сумма оплаты"".'"),
			,
			"СуммаКОплате",
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтавкаНДС)
		И ВариантНастройки <> ПредопределенноеЗначение("Перечисление.ВариантыНастройкиСБП.c2b") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Ставка НДС"".'"),
			,
			"СтавкаНДС",
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаКОплате > (МаксимальнаяСуммаОплатыСБП - СуммаВыполненныхОплатСБП) Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросОПревышенииСуммы",
			ЭтотОбъект);
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Превышена сумма оплаты по документу. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		НачатьСозданиеЧастичнойОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусы(Команда)
	
	ОперацииДляЗагрузкиСтатуса = Новый Массив;
	
	Для Каждого ЧастичнаяОплата Из ЧастичныеОплаты Цикл
		Если ЧастичнаяОплата.КодСтатусаОперации = 2 Тогда
			ОперацииДляЗагрузкиСтатуса.Добавить(ЧастичнаяОплата.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ОперацииДляЗагрузкиСтатуса.Количество() > 0 Тогда
		НачатьЗагрузкуСтатусовЧастичныхОплат(
			ОперацииДляЗагрузкиСтатуса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЧастичныеОплаты(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопросОбОтключенииЧастичныхОплат",
		ЭтотОбъект);
		
	ЕстьВыполненныеЧастичныеОплаты = ПроверитьВыполнениеЧастичныхОплат();
		
	Если ЕстьВыполненныеЧастичныеОплаты Тогда
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Найдены выполненные частичные оплаты, для данного документа необходимо закончить оплату в текущем режиме.
			|Новые документы будут использовать режим полных оплат. Продолжить?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Включить режим использования полных оплат?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВключитьЧастичныеОплаты(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопросОВключенииЧастичныхОплат",
		ЭтотОбъект);
		
	ПоказатьВопрос(
		Оповещение,
		НСтр("ru = 'Будет включена возможность формирования частичных оплат (разбиения одного счета на несколько платежей)
			|для текущего пользователя. Включить режим использования частичных оплат?'"),
		РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуЧастичныхОплат(Команда)
	
	ПерейтиКЧастичнымОплатам();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПлатежнойСсылки

&НаСервере
Функция ПолучитьПлатежнуюСсылкуНаСервере(
		Знач ОснованиеПлатежа,
		Знач УникальныйИдентификатор,
		Знач СоздатьНовую)
	
	Элементы.ОбновитьСсылку.Видимость = Ложь;
	Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Ложь;
	НовыйИдентификаторОплаты = СоздатьНовую;
	ТекущийСтатусОперации = Неопределено;
	ТребуетсяОбновлениеСтатуса = Ложь;
	
	ДанныеСсылки = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииДанныхПлатежнойСсылки(
		ВариантНастройки,
		ОснованиеПлатежа,
		ДанныеСсылки);
	
	ИдентификаторМерчанта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ИдентификаторМерчанта");
	
	Если ДанныеСсылки <> Неопределено
		И ДанныеСсылки.НастройкаПодключения <> НастройкаПодключения
		И Не СоздатьНовую Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Статус", "НеобходимоАктуализировать");
		
	ИначеЕсли ДанныеСсылки = Неопределено
		Или СоздатьНовую
		Или Не ЗначениеЗаполнено(ДанныеСсылки.СтатусОперации)Тогда
		
		НовыйИдентификаторОплаты = Истина;
		
		РезультатВыполнения = ЗапросПлатежнойСсылки(
			ОписаниеЧастичнойОплаты,
			ОснованиеПлатежа,
			НастройкаПодключения,
			УникальныйИдентификатор);
		
	ИначеЕсли ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
		
		ТекущийСтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется();
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация статуса идентификатора оплаты.'");
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"СистемаБыстрыхПлатежейСлужебный.АктуализироватьСтатусОплаты",
			ОснованиеПлатежа,
			НастройкаПодключения,
			ДанныеСсылки,
			ОписаниеЧастичнойОплаты);
		
	ИначеЕсли ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Статус", "СтатусПолучен");
		РезультатВыполнения.Вставить(
			"СтатусОперации",
			СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена());
		РезультатВыполнения.Вставить(
			"ПлатежнаяСсылка",
			ДанныеСсылки.ПлатежнаяСсылка);
		РезультатВыполнения.Вставить(
			"СуммаОплаты",
			ДанныеСсылки.СуммаОперации);
		
	ИначеЕсли ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена()
		Или ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
		
		Если ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
			ТекущийСтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена();
		ИначеЕсли ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена() Тогда
			ТекущийСтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена();
		КонецЕсли;
		
		ТребуетсяОбновлениеСтатуса = Истина;
		РезультатВыполнения = ЗапросПлатежнойСсылки(
			ОписаниеЧастичнойОплаты,
			ОснованиеПлатежа,
			НастройкаПодключения,
			УникальныйИдентификатор);
		
	Иначе
		РезультатВыполнения = Неопределено;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось определить статус операции, обработка прервана.'"));
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапросПлатежнойСсылки(
		Знач ОписаниеЧастичнойОплаты,
		Знач ОснованиеПлатежа,
		Знач НастройкаПодключения,
		Знач УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(ОписаниеЧастичнойОплаты) Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование идентификатора оплаты.'");
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"СистемаБыстрыхПлатежейСлужебный.ДинамическаяСсылкаЧастичнойОплаты",
			НастройкаПодключения,
			ОписаниеЧастичнойОплаты);
		
	Иначе
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование идентификатора оплаты.'");
		
		РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполнения,
			"СистемаБыстрыхПлатежейСлужебный.ДинамическаяСсылка",
			ОснованиеПлатежа,
			НастройкаПодключения);
			
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПлатежнуюСсылкуЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	ТребуетсяОбновлениеСсылки = Ложь;
	ОписаниеОшибки = "";
	КодОшибки = "";
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если НовыйИдентификаторОплаты Тогда
			СтатусОперацииИзменен = Истина;
			РезультатОперации.Вставить(
				"СтатусОперации",
				СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется());
			Если ЗначениеЗаполнено(РезультатОперации.ПлатежнаяСсылкаСБП) Тогда
				ПлатежнаяСсылкаСБП = РезультатОперации.ПлатежнаяСсылкаСБП;
				ОписаниеЧастичнойОплаты = ЗаполнитьОписаниеЧастичнойОплаты(
					ПлатежнаяСсылкаСБП);
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			СтатусОперации = "Ошибка";
			ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке;
			КодОшибки = РезультатОперации.КодОшибки;
			УправлениеЭлементамиФормыПоСтатусуОперации(СтатусОперации, ОписаниеОшибки, КодОшибки);
			Возврат;
		КонецЕсли;
		
		Если ТребуетсяОбновлениеСтатуса Тогда
			ДанныеСтатусаПоОснованиюПлатежа = ПолучитьДанныеСтатусаПоОснованиюПлатежа(
				ВариантНастройки,
				?(ЗначениеЗаполнено(ПлатежнаяСсылкаСБП),
					ПлатежнаяСсылкаСБП,
					ОснованиеПлатежа));
			ЗаполнитьЗначенияСвойств(РезультатОперации, ДанныеСтатусаПоОснованиюПлатежа, "КодОшибки, СообщениеОбОшибке");
			СтатусОперации = ДанныеСтатусаПоОснованиюПлатежа.СтатусОперации;
			РезультатОперации.Вставить("СтатусОперации", СтатусОперации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
			СтатусОперации = "Ошибка";
			ОписаниеОшибки = РезультатОперации.СообщениеОбОшибке;
			КодОшибки = РезультатОперации.КодОшибки;
		ИначеЕсли РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена()
			Или РезультатОперации.СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена() Тогда
			СтатусОперации = РезультатОперации.СтатусОперации;
		Иначе
			ПлатежнаяСсылка = РезультатОперации.ПлатежнаяСсылка;
			СтатусОперации  = РезультатОперации.СтатусОперации;
			СуммаОплаты     = РезультатОперации.СуммаОплаты;
			
			ДанныеАктуальности = Новый Структура;
			ДанныеАктуальности.Вставить("НеобходимоАктуализировать", Ложь);
			ЗаполнитьЗначенияСвойств(ДанныеАктуальности, РезультатОперации);
			Если ДанныеАктуальности.НеобходимоАктуализировать Тогда
				ТребуетсяОбновлениеСсылки = РезультатОперации.НеобходимоАктуализировать;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Результат.Статус = "СтатусПолучен" Тогда
		СтатусОперации = Результат.СтатусОперации;
		СуммаОплаты    = Результат.СуммаОплаты;
		Если СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
			ПлатежнаяСсылка = Результат.ПлатежнаяСсылка;
		КонецЕсли;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОписаниеОшибки = НСтр("ru = 'Ошибка во время выполнения запроса.'");
		СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка();
	ИначеЕсли Результат.Статус = "НеобходимоАктуализировать" Тогда
		ПлатежнаяСсылка = "";
		ТребуетсяОбновлениеСсылки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийСтатусОперации)
		И ТекущийСтатусОперации <> СтатусОперации Тогда
		СтатусОперацииИзменен = Истина;
	КонецЕсли;
	
	УправлениеЭлементамиФормыПоСтатусуОперации(
		СтатусОперации,
		ОписаниеОшибки, КодОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеПлатежнойСсылки(СоздатьНовую = Ложь)
	
	ПлатежнаяСсылка = "";
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = ПолучитьПлатежнуюСсылкуНаСервере(
		?(ЗначениеЗаполнено(ПлатежнаяСсылкаСБП),
			ПлатежнаяСсылкаСБП,
			ОснованиеПлатежа),
		УникальныйИдентификатор,
		СоздатьНовую);
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПолучитьПлатежнуюСсылкуЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения.Статус <> "Выполняется" Тогда
		ПолучитьПлатежнуюСсылкуЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияПояснениеКФорме.Заголовок = НСтр("ru = 'Ожидание ответа сервиса о текущем состоянии оплаты.'");
	Элементы.ДекорацияДлительнаяОперация.Видимость = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеЧастичнойОплаты()
	
	Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	
	ОписаниеЧастичнойОплаты = НовыйДанныеЧастичнойОплаты();
	ОписаниеЧастичнойОплаты.СуммаОплаты = СуммаКОплате;
	ОписаниеЧастичнойОплаты.ОснованиеПлатежа = ОснованиеПлатежа;
	
	ДанныеНДС = Новый Структура;
	ДанныеНДС.Вставить("СуммаНДС", 0);
	ДанныеНДС.Вставить("ОблагаетсяНДС", Ложь);
	
	ПараметрыОплаты = Новый Структура;
	ПараметрыОплаты.Вставить("Сумма", СуммаКОплате);
	ПараметрыОплаты.Вставить("СтавкаНДС", СтавкаНДС);
	
	ИнтеграцияПодсистемБИПКлиент.ПриОпределенииСуммыНДС(
		ПараметрыОплаты,
		ДанныеНДС);
	СистемаБыстрыхПлатежейКлиентПереопределяемый.ПриОпределенииСуммыНДС(
		ПараметрыОплаты,
		ДанныеНДС);
	
	ЗаполнитьЗначенияСвойств(
		ОписаниеЧастичнойОплаты,
		ДанныеНДС,
		"СуммаНДС, ОблагаетсяНДС");
	
	НачатьПолучениеПлатежнойСсылки(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПлатежнойСсылки

&НаКлиенте
Процедура ОтправитьПлатежнуюСсылку()
	
	ШаблоныИспользуются = НастройкиШаблонов.Используется;
	
	Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияЭлектроннаяПочта) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияЭлектроннаяПочта, "Письмо"));
		Иначе
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
				МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
				МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(КонструкторПараметровОтправкиБезШаблона());
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ВариантОтправки = "Телефон" Тогда
		
		Если ШаблоныИспользуются И ЗначениеЗаполнено(ШаблонСообщенияТелефон) Тогда
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонСообщенияТелефон, "СообщениеSMS"));
		Иначе
			ПоказатьФормуСообщения(
				Новый Структура("Текст, Получатель, ДополнительныеПараметры", ПлатежнаяСсылка, СписокПолучателей())
				,
				"СообщениеSMS",
				ОснованиеПлатежа);
		КонецЕсли;
		
	ИначеЕсли ВариантОтправки = "Телеграм" Тогда
		
		ПараметрыОтправки = ИнтернетПоддержкаПользователейКлиент.НовыйПараметрыОтправкиВМессенджеры();
		ПараметрыОтправки.Мессенджер = "Телеграм";
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьURLОтправкиВМессенджеры(
			СообщениеДляМессенджеров(ВариантОтправки),
			ПлатежнаяСсылка,
			ПараметрыОтправки);
		
	ИначеЕсли ВариантОтправки = "WhatsApp" Тогда
	
		ПараметрыОтправки = ИнтернетПоддержкаПользователейКлиент.НовыйПараметрыОтправкиВМессенджеры();
		ПараметрыОтправки.Мессенджер = "WhatsApp";
		ПараметрыОтправки.СписокПолучателей = СписокПолучателей();
		
		ИнтернетПоддержкаПользователейКлиент.ОткрытьURLОтправкиВМессенджеры(
			СообщениеДляМессенджеров(ВариантОтправки),
			ПлатежнаяСсылка,
			ПараметрыОтправки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСообщения(Сообщение, ВидСообщения, Предмет)
	
	Если ВидСообщения = "СообщениеSMS" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
			
			ДополнительныеПараметры = Новый Структура("ИсточникКонтактнойИнформации, Предмет, ПеревестиВТранслит");
			
			Если Сообщение.ДополнительныеПараметры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Сообщение.ДополнительныеПараметры);
			КонецЕсли;
			
			ДополнительныеПараметры.Предмет = Предмет;
			
			Получатели = ПолучателиСообщения(Сообщение);
			
			МодульОтправкаSMSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаSMSКлиент");
			МодульОтправкаSMSКлиент.ОтправитьSMS(Получатели, Сообщение.Текст, ДополнительныеПараметры);
			
		Иначе
			КопироватьСсылкуВБуфер();
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСообщениеДляОтправки(ПараметрыОтправки)
	
	Результат = СформироватьСообщениеНаСервере(ПараметрыОтправки);
	
	ПоказатьФормуСообщения(
		Результат,
		ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения,
		ПараметрыОтправки.Предмет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСообщениеНаСервере(Знач ПараметрыОтправки)
	
	МодульШаблоныСообщений = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщений");
	
	Результат = МодульШаблоныСообщений.СформироватьСообщение(
		ПараметрыОтправки.Шаблон,
		ПараметрыОтправки.Предмет,
		ПараметрыОтправки.УникальныйИдентификатор,
		ПараметрыОтправки.ДополнительныеПараметры);
	
	Вложения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Результат.Вложения Цикл
		
		ТекущееВложение = Новый Структура;
		
		ТекущееВложение.Вставить("Представление");
		ТекущееВложение.Вставить("АдресВоВременномХранилище");
		ТекущееВложение.Вставить("Кодировка");
		ТекущееВложение.Вставить("Идентификатор");
		
		ЗаполнитьЗначенияСвойств(ТекущееВложение, ЭлементКоллекции);
		
		Вложения.Добавить(ТекущееВложение);
		
	КонецЦикла;
	
	Результат.Вставить("Предмет", ПараметрыОтправки.Предмет);
	Результат.Вложения = Вложения;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КонструкторПараметровОтправки(Шаблон, ВидСообщения)
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Шаблон", Шаблон);
	ПараметрыОтправки.Вставить("Предмет", ОснованиеПлатежа);
	ПараметрыОтправки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтправки.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", ВидСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ОтправитьСразу", Ложь);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПлатежнаяСсылка", ПлатежнаяСсылка);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("СуммаПлатежнойСсылки", СуммаОплаты);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КонтактныеДанныеЧека", "");
	
	Возврат ПараметрыОтправки;
	
КонецФункции

&НаКлиенте
Функция КонструкторПараметровОтправкиБезШаблона()
	
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Получатель", СписокПолучателей());
	ПараметрыСообщения.Вставить("Предмет", ОснованиеПлатежа);
	ПараметрыСообщения.Вставить("Тема", НСтр("ru = 'Ссылка для оплаты'"));
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("НастройкаПодключения", НастройкаПодключения);
	ПараметрыОперации.Вставить("ПлатежнаяСсылка", ПлатежнаяСсылка);
	ПараметрыОперации.Вставить("СуммаСсылкиСБП", СуммаОплаты);
	
	Если ИнтернетПоддержкаПользователейВызовСервера.ОтправлятьПисьмаВФорматеHTML() Тогда
		ПараметрыСообщения.Вставить(
			"Текст",
			Новый Структура(
				"ТекстHTML, СтруктураВложений",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПисьмаБезШаблонаHTML(),
					ПлатежнаяСсылка,
					СуммаОплаты),
				Новый Структура()));
	Иначе
		ПараметрыСообщения.Вставить(
			"Текст",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПисьмаБезШаблонаТекст(),
				ПлатежнаяСсылка,
				СуммаОплаты));
	КонецЕсли;
	
	ИнтеграцияПодсистемБИПКлиент.ПриЗаполненииПараметровСообщенияБезШаблонаСБП(
		ПараметрыСообщения,
		ПараметрыОперации);
	СистемаБыстрыхПлатежейКлиентПереопределяемый.ПриЗаполненииПараметровСообщенияБезШаблонаСБП(
		ПараметрыСообщения,
		ПараметрыОперации);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

&НаКлиенте
Функция ТекстПисьмаБезШаблонаHTML()
	
	HTMLСтрока =
	"<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
	|<meta name=""format-detection"" content=""telephone=no"" />
	|</head>
	|<body>
	|<p>Ссылка для оплаты: <a href=""%1"">%1</a>, сумма %2 руб.</p>
	|
	|</body>
	|</html>";
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), HTMLСтрока);
	
КонецФункции

&НаКлиенте
Функция ТекстПисьмаБезШаблонаТекст()
	
	Возврат НСтр("ru = 'Ссылка для оплаты: %1, сумма %2 руб.'");
	
КонецФункции

&НаКлиенте
Функция ПолучателиСообщения(Сообщение)
	
	Получатели = Новый Массив;
	
	Если ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений") Тогда
		
		Для каждого ЭлементКоллекции Из Сообщение.Получатель Цикл
			
			КонтактныеДанные = Новый Структура;
			
			КонтактныеДанные.Вставить("Телефон", ЭлементКоллекции.Значение);
			КонтактныеДанные.Вставить("Представление", ЭлементКоллекции.Представление);
			КонтактныеДанные.Вставить("ИсточникКонтактнойИнформации", Неопределено);
			
			Получатели.Добавить(КонтактныеДанные);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Сообщение.Получатель) = Тип("Массив") Тогда
		
		Для каждого ЭлементКоллекции Из Сообщение.Получатель Цикл
			
			КонтактныеДанные = Новый Структура;
			
			КонтактныеДанные.Вставить("Телефон", ЭлементКоллекции.НомерТелефона);
			КонтактныеДанные.Вставить("Представление", ЭлементКоллекции.Представление);
			КонтактныеДанные.Вставить("ИсточникКонтактнойИнформации", ЭлементКоллекции.ИсточникКонтактнойИнформации);
			
			Получатели.Добавить(КонтактныеДанные);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

&НаСервере
Функция СписокПолучателей()
	
	СписокПолучателей = Новый СписокЗначений;
	
	Если ВариантОтправки = "Телеграм" Или ВариантОтправки = "WhatsApp" Тогда
		ВариантОтправкиДляСпискаПолучателей = "Телефон";
	Иначе
		ВариантОтправкиДляСпискаПолучателей = ВариантОтправки;
	КонецЕсли;
	
	ИнтеграцияПодсистемБИП.ПриФормированииСпискаПолучателейСообщенияСБП(
		ОснованиеПлатежа,
		ВариантОтправкиДляСпискаПолучателей,
		СписокПолучателей);
	СистемаБыстрыхПлатежейПереопределяемый.ПриФормированииСпискаПолучателейСообщенияСБП(
		ОснованиеПлатежа,
		ВариантОтправкиДляСпискаПолучателей,
		СписокПолучателей);
	
	Возврат СписокПолучателей;
	
КонецФункции

&НаКлиенте
Функция СообщениеДляМессенджеров(ВариантОтправки)
	
	Если ВариантОтправки = "WhatsApp" Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ссылка для оплаты: %1'"),
			ПлатежнаяСсылка);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ссылка для оплаты.'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ШаблоныПоУмолчанию

&НаСервереБезКонтекста
Процедура СохранитьШаблоныПоУмолчанию(
	Знач ОснованиеПлатежа,
	Знач ШаблонСообщенияЭлектроннаяПочта,
	Знач ШаблонСообщенияТелефон,
	Знач НастройкаПодключения)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеПлатежа)) Тогда
		ПредставлениеОснования = ОснованиеПлатежа.Метаданные().ПолноеИмя();
	Иначе
		ПредставлениеОснования = ОснованиеПлатежа;
	КонецЕсли;
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	СистемаБыстрыхПлатежейСобытия.ПриСохраненииШаблоновПоУмолчанию(
		ПредставлениеОснования,
		ШаблонСообщенияЭлектроннаяПочта,
		ШаблонСообщенияТелефон,
		ВариантНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьШаблоныПоУмолчанию()
	
	Если Не НастройкиШаблонов.Используется
		Или Не ЗначениеЗаполнено(ОснованиеПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОснованиеПлатежа)) Тогда
		ПредставлениеОснования = ОснованиеПлатежа.Метаданные().ПолноеИмя();
	Иначе
		ПредставлениеОснования = ОснованиеПлатежа;
	КонецЕсли;
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	СистемаБыстрыхПлатежейСлужебный.ПроверитьВариантНастройки(
		ВариантНастройки);
	Идентификатор = СистемаБыстрыхПлатежейСлужебный.ИдентификаторВариантаНастройки(
		ВариантНастройки);
	
	// Шаблоны электронной почты
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		"ШаблоныСообщенийЭлектроннойПочты");
	
	// АПК:1416-выкл Универсальная обработка шаблонов.
	// АПК:1415-выкл Универсальная обработка шаблонов.
	
	Если Настройки <> Неопределено Тогда
		Если ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснования] <> Неопределено Тогда
			ШаблонСообщенияЭлектроннаяПочта = Настройки[ПредставлениеОснования]; // Обработка устаревшего формата хранения.
		ИначеЕсли ТипЗнч(Настройки) = Тип("Структура")
			И Настройки.Свойство(Идентификатор)
			И Настройки[Идентификатор][ПредставлениеОснования] <> Неопределено Тогда
			ШаблонСообщенияЭлектроннаяПочта = Настройки[Идентификатор][ПредставлениеОснования];
		КонецЕсли;
	КонецЕсли;
	
	// Шаблоны SMS сообщений
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"ФормаПодготовкиПлатежнойСсылкиСБП",
		"ШаблоныСообщенийSMS");
	
	Если Настройки <> Неопределено Тогда
		Если ТипЗнч(Настройки) = Тип("Соответствие")
			И Настройки[ПредставлениеОснования] <> Неопределено Тогда
			ШаблонСообщенияТелефон = Настройки[ПредставлениеОснования]; // Обработка устаревшего формата хранения.
		ИначеЕсли ТипЗнч(Настройки) = Тип("Структура")
			И Настройки.Свойство(Идентификатор)
			И Настройки[Идентификатор][ПредставлениеОснования] <> Неопределено Тогда
			ШаблонСообщенияТелефон = Настройки[Идентификатор][ПредставлениеОснования];
		КонецЕсли;
	КонецЕсли;
	
	// АПК:1416-вкл
	// АПК:1415-вкл
	
КонецПроцедуры

#КонецОбласти

#Область ЧастичныеОплаты

&НаСервере
Процедура НастроитьЧастичныеОплаты()
	
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииИспользованияЧастичныхОплат(
		ИспользоватьЧастичныеОплаты,
		ВариантНастройки,
		СистемаБыстрыхПлатежейСлужебный.НастройкиПодключенияПрограммы());
	
	Если ИспользоватьЧастичныеОплаты Тогда
		НастройкаИспользованияЧастичныхОплат = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
			"ФормаОтправкиПлатежнойСсылки",
			"ИспользоватьЧастичныеОплаты",
			Ложь);
		ЗаполнитьДаннымиЧастичныхОплат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКЧастичнымОплатам()
	
	ЗаполнитьДаннымиЧастичныхОплат();
	УстановитьВидимостьДоступностьЧастичныхОплат();
	
КонецПроцедуры

&НаСервере
Функция НовыйДанныеЧастичнойОплаты()
	
	ДанныеЧастичнойОплаты = Новый Структура;
	ДанныеЧастичнойОплаты.Вставить("СуммаОплаты", 0);
	ДанныеЧастичнойОплаты.Вставить("ДатаОплаты", Дата(1,1,1));
	ДанныеЧастичнойОплаты.Вставить("ОснованиеПлатежа", Неопределено);
	ДанныеЧастичнойОплаты.Вставить("ОблагаетсяНДС", Ложь);
	ДанныеЧастичнойОплаты.Вставить("СуммаНДС", 0);
	ДанныеЧастичнойОплаты.Вставить("ПлатежнаяСсылкаСБП", Документы.ПлатежнаяСсылкаСБП.ПустаяСсылка());
	
	Возврат ДанныеЧастичнойОплаты;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеЧастичнойОплаты(Знач ПлатежнаяСсылкаСБП)

	ДанныеПлатежнойСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПлатежнаяСсылкаСБП,
		"Дата, Сумма, ОснованиеПлатежа, СуммаНДС, ОблагаетсяНДС");
	
	ДанныеЧастичнойОплаты = НовыйДанныеЧастичнойОплаты();
	ДанныеЧастичнойОплаты.СуммаОплаты = ДанныеПлатежнойСсылки.Сумма;
	ДанныеЧастичнойОплаты.ОснованиеПлатежа = ДанныеПлатежнойСсылки.ОснованиеПлатежа;
	ДанныеЧастичнойОплаты.ДатаОплаты = ДанныеПлатежнойСсылки.Дата;
	ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБП = ПлатежнаяСсылкаСБП;
	ДанныеЧастичнойОплаты.СуммаНДС = ДанныеПлатежнойСсылки.СуммаНДС;
	ДанныеЧастичнойОплаты.ОблагаетсяНДС = ДанныеПлатежнойСсылки.ОблагаетсяНДС;
	
	Возврат ДанныеЧастичнойОплаты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиЧастичныхОплат()
	
	ЧастичныеОплаты.Очистить();
	СуммаВыполненныхОплатСБП = 0;
	
	ДанныеЧастичныхОплат = Документы.ПлатежнаяСсылкаСБП.ПолучитьДанныеЧастичныхОплат(
		ОснованиеПлатежа);
	
	Для Каждого ДанныеЧастичнойОплаты Из ДанныеЧастичныхОплат Цикл
		
		Если ДанныеЧастичнойОплаты.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
			СуммаВыполненныхОплатСБП = СуммаВыполненныхОплатСБП + ДанныеЧастичнойОплаты.СуммаОплаты;
		КонецЕсли;
		
		Если ДанныеЧастичнойОплаты.НастройкаПодключения <> НастройкаПодключения Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастичнаяОплата = ЧастичныеОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(ЧастичнаяОплата, ДанныеЧастичнойОплаты);
		ЧастичнаяОплата.Ссылка = ДанныеЧастичнойОплаты.ПлатежнаяСсылкаСБП;
		ЧастичнаяОплата.КодСтатусаОперации = ПолучитьКодПоСтатусуОперации(
			ДанныеЧастичнойОплаты.СтатусОперации);
		
		Если ЧастичнаяОплата.КодСтатусаОперации = 3 Тогда
			ЕстьВыполненныеЧастичныеОплаты = Истина;
		КонецЕсли;
		
		ЧастичнаяОплата.ЭтоПлатежнаяСсылкаСБП = Истина;
		
	КонецЦикла;
	
	Если ДанныеЧастичныхОплат.Количество() > 0 Тогда
		ДокументыЧастичныхОплатСозданы = Истина;
	КонецЕсли;
	
	ДанныеСсылки = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииДанныхПлатежнойСсылки(
		ВариантНастройки,
		ОснованиеПлатежа,
		ДанныеСсылки);
		
	Если ДанныеСсылки <> Неопределено И НастройкаПодключения = ДанныеСсылки.НастройкаПодключения Тогда
		
		Если ДанныеСсылки.СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
			СуммаВыполненныхОплатСБП = СуммаВыполненныхОплатСБП + ДанныеСсылки.СуммаОперации;
		КонецЕсли;
		
		Если ДанныеСсылки.НастройкаПодключения = НастройкаПодключения Тогда
			ЧастичнаяОплата = ЧастичныеОплаты.Добавить();
			ЧастичнаяОплата.Ссылка = ОснованиеПлатежа;
			ЧастичнаяОплата.КодСтатусаОперации = ПолучитьКодПоСтатусуОперации(
			ДанныеСсылки.СтатусОперации);
			ЧастичнаяОплата.ПредставлениеОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оплата от %1 на сумму %2 руб.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "Дата"),
				ДанныеСсылки.СуммаОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаКОплате = Макс(МаксимальнаяСуммаОплатыСБП - СуммаВыполненныхОплатСБП, 0);
	
	Если СуммаКОплате = 0 Тогда
		Элементы.ГруппаКомандыЧастичныхОплат.Видимость = Ложь;
		Элементы.ГруппаСуммаОплаты.Видимость = Ложь;
		Элементы.ДекорацияПояснениеЧастичныеОплаты.ЦветТекста = Новый Цвет;
		Элементы.ДекорацияПояснениеЧастичныеОплаты.Заголовок  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платежные ссылки были сформированы и отправлены покупателю. Оплачена сумма %1 руб.'"),
			СуммаВыполненныхОплатСБП);
		Элементы.ДекорацияПояснениеЧастичныеОплаты.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	Иначе
		Элементы.ДобавитьОплату.Доступность = Истина;
		Элементы.СуммаКОплате.Доступность = Истина;
		Элементы.ДекорацияПояснениеЧастичныеОплаты.ЦветТекста = Новый Цвет;
		Элементы.ДекорацияПояснениеЧастичныеОплаты.Заголовок  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Введите сумму и сформируйте платежную ссылку. Осталось оплатить %1 руб.'"),
			СуммаКОплате);
	КонецЕсли;
	
	Элементы.ДекорацияДлительнаяОперацияЧастичныеОплаты.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКодПоСтатусуОперации(СтатусОперации)
	
	Если ПустаяСтрока(СтатусОперации)
		Или СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВПроцессе() Тогда
		Возврат 2;
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаВыполнена() Тогда
		Возврат 3;
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтклонена()
		Или СтатусОперации = СистемаБыстрыхПлатежейСлужебный.ИдентификаторСтатусаОтменена() Тогда
		Возврат 0;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимИспользованияЧастичныхОплат(Знач Использование)
	
	НастройкаИспользованияЧастичныхОплат = Использование;
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"ФормаОтправкиПлатежнойСсылки",
		"ИспользоватьЧастичныеОплаты",
		НастройкаИспользованияЧастичныхОплат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЧастичныхОплат()
	
	Элементы.СтавкаНДС.Видимость = (ВариантНастройки <> Перечисления.ВариантыНастройкиСБП.c2b);
	
	Если Не ИспользоватьЧастичныеОплаты Тогда
		Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		ПлатежнаяСсылкаСБП = Неопределено;
		Элементы.ГруппаВключитьЧастичныеОплаты.Видимость = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Видимость  = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДокументыЧастичныхОплатСозданы
		Или НастройкаИспользованияЧастичныхОплат Тогда
		Элементы.ДобавитьОплату.КнопкаПоУмолчанию = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЧастичныеОплаты;
	Иначе
		Элементы.ОтправитьСсылку.КнопкаПоУмолчанию = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		ПлатежнаяСсылкаСБП = Неопределено;
		ТекущийЭлемент = Элементы.СтраницаОсновная;
	КонецЕсли;
	
	Если ИспользоватьЧастичныеОплаты И Не НастройкаИспользованияЧастичныхОплат Тогда
		Элементы.ГруппаВключитьЧастичныеОплаты.Видимость = Истина;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Видимость = Ложь;
	Иначе
		Элементы.ГруппаВключитьЧастичныеОплаты.Видимость = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Видимость = Истина;
	КонецЕсли;
	
	Если ИспользоватьЧастичныеОплаты И НастройкаИспользованияЧастичныхОплат Тогда
		Элементы.ГруппаОтключитьЧастичныеОплаты.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтключитьЧастичныеОплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыполнениеЧастичныхОплат()
	
	Для Каждого ЧастичнаяОплата Из ЧастичныеОплаты Цикл
		Если ЧастичнаяОплата.КодСтатусаОперации = 3 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросОВключенииЧастичныхОплат(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьРежимИспользованияЧастичныхОплат(Истина);
		ПерейтиКЧастичнымОплатам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОтключенииЧастичныхОплат(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьРежимИспользованияЧастичныхОплат(Ложь);
		УстановитьВидимостьДоступностьЧастичныхОплат();
		Если Не ДокументыЧастичныхОплатСозданы Тогда
			НачатьПолучениеПлатежнойСсылки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОПревышенииСуммы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьСозданиеЧастичнойОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСтатусовЧастичныхОплат(ОперацииДляЗагрузкиСтатуса)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	
	РезультатВыполнения = ЗагрузитьСтатусыЧастичныхОплатНаСервере(
		ОперацииДляЗагрузкиСтатуса);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗагрузкаСтатусовЧастичныхОплатЗавершение",
		ЭтотОбъект);
	
	Если РезультатВыполнения.Статус <> "Выполняется" Тогда
		ЗагрузкаСтатусовЧастичныхОплатЗавершение(
			РезультатВыполнения,
			Неопределено);
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
	Элементы.ДекорацияПояснениеЧастичныеОплаты.Заголовок
		= НСтр("ru = 'Получение статусов частичных оплат, ожидание ответа сервиса.'");
	Элементы.ДекорацияДлительнаяОперацияЧастичныеОплаты.Видимость = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСтатусовЧастичныхОплатЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДаннымиЧастичныхОплат();
	Элементы.ДекорацияДлительнаяОперацияЧастичныеОплаты.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСтатусыЧастичныхОплатНаСервере(Знач ДокументыОпераций)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка статусов частичных оплат.'");
	ОписаниеОпераций = Новый Массив;
	
	Для Каждого ДокументОперации Из ДокументыОпераций Цикл
		
		ПараметрыОперации = Неопределено;
		СистемаБыстрыхПлатежейСобытия.ПриОпределенииДанныхПлатежнойСсылки(
			ВариантНастройки,
			ДокументОперации,
			ПараметрыОперации);
		
		ОписаниеОперации = Новый Структура;
		ОписаниеОперации.Вставить("ОснованиеПлатежа", ДокументОперации);
		ОписаниеОперации.Вставить("ПараметрыОперации",ПараметрыОперации);
		
		Если ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ПлатежнаяСсылкаСБП") Тогда
			ОписаниеОперации.Вставить(
				"ДанныеЧастичнойОплаты",
				ЗаполнитьОписаниеЧастичнойОплаты(
					ДокументОперации));
		Иначе
			ОписаниеОперации.Вставить(
				"ДанныеЧастичнойОплаты",
				Неопределено);
		КонецЕсли;
		
		ОписаниеОпераций.Добавить(ОписаниеОперации);
		
	КонецЦикла;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"СистемаБыстрыхПлатежейСлужебный.АктуализироватьСтатусыОплат",
		НастройкаПодключения,
		ОписаниеОпераций);
		
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаПодключения,
		"ВариантНастройки");
	НастроитьЧастичныеОплаты();
	УстановитьВидимостьДоступностьЧастичныхОплат();
	ВосстановитьШаблоныПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПодключения()
	
	НастройкиПодключенияДокумента = Новый Массив;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииНастроекПодключенияПоДокументуОперации(
		НастройкиПодключенияДокумента,
		ОснованиеПлатежа);
	СистемаБыстрыхПлатежейСобытия.ПриЗаполненииСпискаДоступныхНастроекФормы(
		Параметры.НастройкиПодключения,
		НастройкиПодключения,
		НастройкиПодключенияДокумента);
	
	НастройкиПодключения.Сортировать(
		"СсылкаСоздана Убыв, НастройкаПодключения Возр",);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоПодсистемам()
	
	ЕстьЭлектроннаяПочта = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	ЕстьОтправкаSMS = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS");
	
	Элементы.ГруппаВариантОтправкиЭлектроннаяПочта.Видимость = ЕстьЭлектроннаяПочта;
	Элементы.ГруппаВариантОтправкиТелефон.Видимость = ЕстьОтправкаSMS;
	
	Если Не НастройкиШаблонов.Используется Тогда
		Элементы.ГруппаШаблоны.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоСтатусуОперации(
	Знач СтатусОперации,
	Знач ОписаниеОшибки,
	Знач КодОшибки)
	
	Элементы.ДекорацияДлительнаяОперация.Видимость = Ложь;
	
	Если ТребуетсяОбновлениеСсылки Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			НСтр("ru = 'Внимание. Данные оплаты были изменены, требуется обновление ссылки.'");
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.ОбновитьСсылку.Видимость = Истина;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Доступность = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Истина;
		Элементы.ПоказатьQR.Доступность = Ложь;
		ТекущийЭлемент = Элементы.ОбновитьСсылку;
		
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполняется() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ссылка для оплаты сформирована и готова к отправке покупателю. Сумма к оплате %1 руб.'"),
				СуммаОплаты);
			
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = Новый Цвет;
		
		Элементы.Страницы.ТолькоПросмотр = Ложь;
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Ложь;
		Элементы.ОбновитьСсылку.Видимость = Ложь;
		Элементы.КопироватьВБуфер.Доступность = Истина;
		Элементы.ОтправитьСсылку.Доступность = Истина;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Истина;
		Элементы.ПоказатьQR.Доступность = Истина;
		
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииВыполнена() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Платежная ссылка была сформирована и отправлена покупателю. Оплачена сумма %1 руб.'"),
				СуммаОплаты);
		
		Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.ОбновитьСсылку.Видимость = Ложь;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Видимость = Ложь;
		Элементы.ПоказатьQR.Доступность = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Истина;
		
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОшибка() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = ОписаниеОшибки;
		
		Если КодОшибки = СистемаБыстрыхПлатежейСлужебный.КодОшибкиУжеОплачен() Тогда
			Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
			Элементы.ОбновитьСсылку.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияПояснениеКФорме.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Элементы.ОбновитьСсылку.Видимость = Истина;
			ТекущийЭлемент = Элементы.ОбновитьСсылку;
		КонецЕсли;
			
		Элементы.ГруппаВариантОтправки.ТолькоПросмотр = Истина;
		Элементы.ГруппаПолеВводаСсылки.ТолькоПросмотр = Истина;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Доступность = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Истина;
		Элементы.ПоказатьQR.Доступность = Ложь;
		
	ИначеЕсли СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтклонена()
		ИЛИ СтатусОперации = СистемаБыстрыхПлатежейКлиентСервер.СтатусОперацииОтменена() Тогда
		
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			НСтр("ru = 'Операция отменена или истек срок жизни платежной ссылки, для обновления необходимо изменить данные оплаты.'");
			
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста; 
	
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.ОбновитьСсылку.Видимость = Ложь;
		Элементы.КопироватьВБуфер.Доступность = Ложь;
		Элементы.ОтправитьСсылку.Доступность = Ложь;
		Элементы.ПерейтиКСпискуЧастичныхОплат.Доступность = Истина;
		Элементы.ПоказатьQR.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформляемые поля
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиПодключенияВыбор.Имя);
	
	// Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПодключения.СсылкаСоздана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение);
	
	Элемент.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПоВариантуОтправки()
	
	Если НастройкиШаблонов.Используется Тогда
		Если ВариантОтправки = "ЭлектроннаяПочта" Тогда
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаШаблонСообщенияЭлектроннаяПочта;
		ИначеЕсли ВариантОтправки = "Телефон" Тогда
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаШаблонСообщенияТелефон;
		Иначе
			Элементы.ГруппаШаблоны.ТекущаяСтраница = Элементы.ГруппаДекорацияОтступ;
		КонецЕсли;
	Иначе
		Элементы.ГруппаШаблоны.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыФункции

&НаКлиенте
Процедура КопироватьСсылкуВБуфер()
	
	БуферОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<!DOCTYPE html>
		|<html>
		|	<body onload='copy()'>
		|		<input id='input' type='text'/>
		|		<script>
		|			function copy() {
		|				var text = '%1';
		|				var ua = navigator.userAgent;
		|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
		|					window.clipboardData.setData('Text', text);
		|				} else {
		|					var copyText = document.getElementById('input');
		|					copyText.value = text;
		|					copyText.select();
		|					document.execCommand('copy');
		|				}
		|			}
		|		</script>
		|	</body>
		|</html>",
		ПлатежнаяСсылка);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Ссылка получена'"),
		,
		НСтр("ru = 'Ссылка для оплаты через СБП скопирована в буфер обмена'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтатусаПоОснованиюПлатежа(
		Знач ВариантНастройки,
		Знач ОснованиеПлатежа)
	
	ДанныеСсылки = Неопределено;
	СистемаБыстрыхПлатежейСобытия.ПриОпределенииДанныхПлатежнойСсылки(
		ВариантНастройки,
		ОснованиеПлатежа,
		ДанныеСсылки);
	
	Возврат СистемаБыстрыхПлатежейСлужебный.ПолучитьСтатусОперацииПоИдентификатору(
		ДанныеСсылки.СтатусОперации);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьQRПослеЗакрытияФормы(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьПолучениеПлатежнойСсылки();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
