
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним переданную таблицу получателей.
	ЗаполнитьТаблицуПолучателей();
	
	ТекущийКонтакт = Неопределено;
	Если Параметры.Свойство("СписокВыбранных") И ТипЗнч(Параметры.СписокВыбранных) = Тип("СписокЗначений") Тогда
		Для Каждого ЗначениеСписка Из Параметры.СписокВыбранных Цикл
			Если ЗначениеСписка.Представление = "Кому" Или ЗначениеСписка.Представление = "Копии" Тогда
				Если ТипЗнч(ЗначениеСписка.Значение) = Тип("Массив") Тогда
					Для Каждого СтруктураАдрес Из ЗначениеСписка.Значение Цикл
						Если СтруктураАдрес <> Неопределено
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураАдрес, "Контакт")
							И ЗначениеЗаполнено(СтруктураАдрес.Контакт) Тогда
							ТекущийКонтакт = СтруктураАдрес.Контакт;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ТекущийКонтакт <> Неопределено Тогда
		Если ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.СписокКлиентов.ТекущаяСтрока = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Элементы.СписокКлиентов.ТекущаяСтрока = ТекущийКонтакт.Владелец;
			УстановитьТекущуюСтрокуВКонтактныхЛицах = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Элементы.СписокПользователей.ТекущаяСтрока = ТекущийКонтакт;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователей;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Элементы.СписокФизЛиц.ТекущаяСтрока = ТекущийКонтакт;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФизЛица;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Элементы.СписокПотенциальныхКлиентов.ТекущаяСтрока = ТекущийКонтакт;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПотенциальныеКлиенты;
		КонецЕсли;
	КонецЕсли;
	
	КонтактныеЛицаОтборПоКлиенту = СписокКонтактныхЛиц.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	КонтактныеЛицаОтборПоКлиенту.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	КонтактныеЛицаОтборПоКлиенту.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	КонтактныеЛицаОтборПоКлиенту.Использование  = Истина;
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
	
	// Настроить видимость элементов.
	
	ЗначениеРежимаПолнотекстовогоПоиска = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск")
		И ЗначениеРежимаПолнотекстовогоПоиска = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		ИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
	Иначе
		Элементы.СтрокаПоиска.Видимость = Ложь;
		Элементы.Найти.Видимость        = Ложь;
	КонецЕсли;
	
	ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	Элементы.СтраницаПотенциальныеКлиенты.Видимость = ИспользоватьПотенциальныхКлиентов;
	
	ВыделитьЦветомУволенныхКонтактов();
	ВыделитьЦветомНеДействующихПользователей();
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Элементы.СтраницаКлиенты.Заголовок = НСтр("ru='Партнеры';en='Partners'");
		Элементы.СписокКлиентовСсылка.Заголовок = НСтр("ru='Партнер';en='Partner'");
	КонецЕсли;
	
	СписокГруппПолучателей.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", 
		Пользователи.ТекущийПользователь());
		
	УстановитьОтборПоЗаполненномуАдресу();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборПользователейПоПодразделению();
КонецПроцедуры

&НаСервере
Процедура ВыделитьЦветомУволенныхКонтактов()
	ЭлементОформления = СписокКонтактныхЛиц.УсловноеОформление.Элементы.Добавить();
	
    СписокВидовУволеных = Новый СписокЗначений();
	СписокВидовУволеных.Добавить(Перечисления.CRM_Состояние.Уволен, "Уволен");
	СписокВидовУволеных.Добавить(Перечисления.CRM_Состояние.ВременноНеРаботает, "Временно не работает");
	
    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_Состояние");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.ПравоеЗначение = СписокВидовУволеных;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 200, 200));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",
		 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , ,
		 Истина));
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьЦветомНеДействующихПользователей()
	ЭлементОформления = СписокПользователей.УсловноеОформление.Элементы.Добавить();
	
    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Недействителен");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 200, 200));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт",
		 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , ,
		 Истина));
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РежимОтображенияДерево = (Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево);
	РежимОтображенияПКДерево = (Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Дерево);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры // ПередЗакрытием()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимОтображенияДерево = Настройки.Получить("РежимОтображенияДерево");
	РежимОтображенияПКДерево = Настройки.Получить("РежимОтображенияПКДерево");
	
	Если РежимОтображенияДерево Тогда
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево;
	КонецЕсли;
	
	Если РежимОтображенияПКДерево Тогда
		Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Дерево;
	КонецЕсли;
	
	Элементы.ОтображатьКлиентовВВидеДерева.Пометка = РежимОтображенияДерево;
	Элементы.ОтображатьПКВВидеДерева.Пометка = РежимОтображенияПКДерево;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	Если СтрокаПоиска <> "" Тогда
		
		Если ИндексППДАктуален Тогда
			
			ОбновитьИндексПоиска = Ложь;
			
		Иначе
			
			ТекстВопроса = НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?';
				|en='Full-text search index is invalid. Update the index?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаПоискаПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ТекстОшибки = НайтиКлиентов(ОбновитьИндексПоиска);
		
		Если ТекстОшибки <> Неопределено Тогда
			
			ПоказатьОповещениеПользователя(ТекстОшибки);
			
		КонецЕсли;
		
	Иначе
		
		Если РежимОтображенияДерево И Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список Тогда
			Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево;
			Элементы.ОтображатьКлиентовВВидеДерева.Пометка = Истина;
		КонецЕсли;
		
		Если РежимОтображенияПКДерево И Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Список Тогда
			Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Дерево;
			Элементы.ОтображатьПКВВидеДерева.Пометка = Истина;
		КонецЕсли;
		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокКлиентов, "Ссылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьИндексПоиска = Результат = КодВозвратаДиалога.Да;
	Если ОбновитьИндексПоиска Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Обновление индекса полнотекстового поиска.';
			|en='Update the full-text search index.'"));
	КонецЕсли;
	ТекстОшибки = НайтиКлиентов(ОбновитьИндексПоиска);
		
	Если ТекстОшибки <> Неопределено Тогда
		
		ПоказатьОповещениеПользователя(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУволенныхПриИзменении(Элемент)
	
	УстановитьОтборПоУволенным();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПользователейПоПодразделению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоКонтактыСАдресамиПриИзменении(Элемент)
	
	УстановитьОтборПоЗаполненномуАдресу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКлиентов

&НаКлиенте
Процедура СписокКлиентовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокКлиентовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик выбора из динамических списков различных типов справочников - контактов.
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если (Элемент.Имя = "СписокКлиентов" Или Элемент.Имя = "СписокКонтактныхЛиц"
		 Или Элемент.Имя = "СписокПользователей"
		 Или Элемент.Имя = "СписокФизЛиц"
		 Или Элемент.Имя = "СписокПотенциальныхКлиентов")
	И Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураТекущейГруппы = Новый Структура("Адрес, Контакт");
	
	Если Не Элементы.ПолучателиПисьма.ТекущиеДанные = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураТекущейГруппы, Элементы.ПолучателиПисьма.ТекущиеДанные);
		
	КонецЕсли;
	
	ДобавитьПолучателей(Элемент.Имя, СтруктураТекущейГруппы);
	
	ЭлементыВерхнегоУровня = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
		
		Элементы.ПолучателиПисьма.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.Имя = "ПолучателиПисьма" Тогда
		Для Каждого ЭлементМассива Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
			ЗначениеПеретаскивания = ПолучателиПисьма.НайтиПоИдентификатору(ЭлементМассива);
			Если ЗначениеПеретаскивания.ПолучитьРодителя() = Неопределено Тогда
				Выполнение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Выполнение Тогда
		ИсточникПеретаскивания = Элемент.Имя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКонтактныхЛиц

&НаКлиенте
Процедура СписокКонтактныхЛицПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокКонтактныхЛицПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПользователей

&НаКлиенте
Процедура СписокПользователейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПользователейПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФизЛиц

&НаКлиенте
Процедура СписокФизЛицПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокФизЛицПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПотенциальныхКлиентов

&НаКлиенте
Процедура СписокПотенциальныхКлиентовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПотенциальныхКлиентовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучателиПисьма

&НаКлиенте
Процедура ПолучателиПисьмаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		 И СтрНайти(",Кому,Копии,Скрытые," , "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПередУдалением(Элемент, Отказ)
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		 И СтрНайти(",Кому,Копии,Скрытые,", "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПолучателей = ПолучателиПисьма.ПолучитьЭлементы();
	
	КоличествоПолучателей = СтрокиПолучателей.Количество();
	Если КоличествоПолучателей = Строка Тогда
		Возврат;
	КонецЕсли;
	СтруктураТекущейГруппы = Новый Структура;
	ДанныеСтроки = ЭтотОбъект[Элемент.Имя].НайтиПоИдентификатору(Строка);

	СтруктураТекущейГруппы.Вставить("Адрес",	ДанныеСтроки.Адрес);
	СтруктураТекущейГруппы.Вставить("Контакт",	ДанныеСтроки.Контакт);
	
	Если ИсточникПеретаскивания = "ПолучателиПисьма" Тогда
		ЗначениеПеретаскивания =
			ЭтотОбъект[ИсточникПеретаскивания].НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	Иначе
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникПеретаскивания) Тогда
		ИмяСписка = ИсточникПеретаскивания;
		ИсточникПеретаскивания = "";
	Иначе
		Возврат;
	КонецЕсли;
	ДобавитьПолучателей(ИмяСписка, СтруктураТекущейГруппы);
	ЭлементыВерхнегоУровня = ПолучателиПисьма.ПолучитьЭлементы();
	Для Каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
		Элементы.ПолучателиПисьма.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокГруппПолучателей

&НаКлиенте
Процедура СписокГруппПолучателейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокГруппПолучателейПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставГруппыПолучателей

&НаКлиенте
Процедура СоставГруппыПолучателейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СоставГруппыПолучателейПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьКлиентовВВидеДерева(Команда)
	
	РежимОтображенияДерево = Не РежимОтображенияДерево;
	Если РежимОтображенияДерево Тогда
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	Элементы.ОтображатьКлиентовВВидеДерева.Пометка = РежимОтображенияДерево;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПКВВидеДерева(Команда)
	
	РежимОтображенияПКДерево = Не РежимОтображенияПКДерево;
	Если РежимОтображенияПКДерево Тогда
		Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.СписокПотенциальныхКлиентов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	Элементы.ОтображатьКлиентовВВидеДерева.Пометка = РежимОтображенияПКДерево;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуКому(Команда)
	
	ПереместитьВГруппу("Кому");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуКопии(Команда)
	
	ПереместитьВГруппу("Копии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуСкрытые(Команда)
	
	ПереместитьВГруппу("Скрытые");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОчистить(Команда)
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		ЭлементыДереваВторойУровень.Очистить();
		
	КонецЦикла;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ПолучателиПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделение(Команда)
	
	СтруктураТекущейГруппы = Новый Структура("Адрес, Контакт");
	
	Если Не Элементы.ПолучателиПисьма.ТекущиеДанные = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураТекущейГруппы, Элементы.ПолучателиПисьма.ТекущиеДанные);
	КонецЕсли;
	
	ДобавитьПодразделениеНаСервере(СтруктураТекущейГруппы);
	
	ЭлементыВерхнегоУровня = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
		Элементы.ПолучателиПисьма.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Найти клиентов по заданным условиям.
//
Функция НайтиКлиентов(ОбновитьИндекс = Ложь)

	// обновить индекс ППД
	Если ОбновитьИндекс Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ПолнотекстовыйПоиск.ОбновитьИндекс();
			ИндексППДАктуален = Истина;
		Исключение
			ИндексППДАктуален = Ложь;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

	ТаблицаОснований = РеквизитФормыВЗначение("Основания");

	// получить результаты поиска
	СтрокаПоискаКлиентов = СтрокаПоиска;

	ТекстОшибки = CRM_МетодыМодулейОбъектовСправочников.НайтиПартнеров(СтрокаПоискаКлиентов, ТаблицаОснований);
	
	Если ТекстОшибки = Неопределено Тогда

		// вернуть таблицу оснований
		ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список;
		Элементы.ОтображатьКлиентовВВидеДерева.Пометка = Ложь;
		
		// Установить отбор по списку найденных партнеров.
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокКлиентов, "Ссылка", ТаблицаОснований.ВыгрузитьКолонку("Партнер"), Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

&НаКлиенте
Процедура Подключаемый_СписокКлиентовПриАктивизацииСтроки() Экспорт // АПК:78 - исключить из проверки.
	
	ТекДанные = Элементы.СписокКлиентов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		УстановитьОтборКонтактныхЛицПоКлиенту(Неопределено);
		ПолучитьАдресаКлиента(Неопределено);
		Возврат;
	КонецЕсли;
	
	УстановитьОтборКонтактныхЛицПоКлиенту(ТекДанные.Ссылка);
	ПолучитьАдресаКлиента(ТекДанные.Ссылка);
	
	Если ЗначениеЗаполнено(УстановитьТекущуюСтрокуВКонтактныхЛицах) Тогда
		Элементы.СписокКонтактныхЛиц.ТекущаяСтрока = УстановитьТекущуюСтрокуВКонтактныхЛицах;
		УстановитьТекущуюСтрокуВКонтактныхЛицах = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКонтактныхЛицПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокКонтактныхЛиц.ТекущаяСтрока;
	ПолучитьАдресаКонтактногоЛица(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПользователейПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокПользователей.ТекущаяСтрока;
	ПолучитьАдресаПользователей(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокФизЛицПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокФизЛиц.ТекущаяСтрока;
	ПолучитьАдресаФизЛиц(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПотенциальныхКлиентовПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокПотенциальныхКлиентов.ТекущаяСтрока;
	ПолучитьАдресаПотенциальныхКлиентов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокГруппПолучателейПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокГруппПолучателей.ТекущаяСтрока;
	ПолучитьСоставГруппыПолучателей(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставГруппыПолучателейПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СоставГруппыПолучателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ПолучитьАдресаГруппыПолучателей(ТекДанные.Получатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаКлиента(Ссылка)
	
	АдресаКлиентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ПартнерыКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаКонтактногоЛица(Ссылка)
	
	АдресаКонтактныхЛиц.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК ВидКИ,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаПользователей(Ссылка)
	
	АдресаПользвателей.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ПользователиКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаПользвателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаФизЛиц(Ссылка)
	
	АдресаФизЛиц.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ФизЛицаКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ФизЛицаКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ФизЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизЛицаКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ФизЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаПотенциальныхКлиентов(Ссылка)
	
	АдресаПотенциальныхКлиентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактнаяИнформацияПК.Представление, """") КАК CRM_Email,
	|	КонтактнаяИнформацияПК.Вид КАК ВидКИ,
	|	КонтактнаяИнформацияПК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КонтактнаяИнформацияПК
	|ГДЕ
	|	КонтактнаяИнформацияПК.Ссылка = &Ссылка
	|	И КонтактнаяИнформацияПК.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаПотенциальныхКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСоставГруппыПолучателей(Группа)
	
	СоставГруппыПолучателей.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Получатель,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПартнерыКонтактнаяИнформация.АдресЭП ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК АдресЗаполнен
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|		ПО (ПартнерыКонтактнаяИнформация.Ссылка = Партнеры.Ссылка)
		|			И (ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		|		ПО Партнеры.Ссылка = CRM_СоставыГруппПолучателей.Получатель
		|			И (CRM_СоставыГруппПолучателей.ГруппаПолучателей = &Группа)
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнеры.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ПО (КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка)
		|			И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		|		ПО КонтактныеЛицаПартнеров.Ссылка = CRM_СоставыГруппПолучателей.Получатель
		|			И (CRM_СоставыГруппПолучателей.ГруппаПолучателей = &Группа)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактныеЛицаПартнеров.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ПотенциальныеКлиенты.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА CRM_ПотенциальныеКлиентыКонтактнаяИнформация.АдресЭП ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|ИЗ
		|	Справочник.CRM_ПотенциальныеКлиенты КАК CRM_ПотенциальныеКлиенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК CRM_ПотенциальныеКлиентыКонтактнаяИнформация
		|		ПО (CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка = CRM_ПотенциальныеКлиенты.Ссылка)
		|			И (CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		|		ПО CRM_ПотенциальныеКлиенты.Ссылка = CRM_СоставыГруппПолучателей.Получатель
		|			И (CRM_СоставыГруппПолучателей.ГруппаПолучателей = &Группа)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ПотенциальныеКлиенты.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПользователиКонтактнаяИнформация.АдресЭП ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО (ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка)
		|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		|		ПО Пользователи.Ссылка = CRM_СоставыГруппПолучателей.Получатель
		|			И (CRM_СоставыГруппПолучателей.ГруппаПолучателей = &Группа)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ФизическиеЛицаКонтактнаяИнформация.АдресЭП ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ПО (ФизическиеЛицаКонтактнаяИнформация.Ссылка = ФизическиеЛица.Ссылка)
		|			И (ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		|		ПО ФизическиеЛица.Ссылка = CRM_СоставыГруппПолучателей.Получатель
		|			И (CRM_СоставыГруппПолучателей.ГруппаПолучателей = &Группа)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СоставГруппыПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаГруппыПолучателей(Ссылка)
	
	АдресаГруппПолучателей.Очистить();
	
	Если Не ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтроковыеКонтактыВзаимодействий") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """""""") КАК CRM_Email,
			|	КонтактнаяИнформация.Вид КАК ВидКИ,
			|	КонтактнаяИнформация.Ссылка КАК Ссылка
			|ИЗ
			|	%ТАБЛИЦА_ИСТОЧНИК%.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТаблицаИсточник = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТАБЛИЦА_ИСТОЧНИК%", ТаблицаИсточник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = АдресаГруппПолучателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКонтактныхЛицПоКлиенту(Ссылка)
	
	КонтактныеЛицаОтборПоКлиенту = СписокКонтактныхЛиц.Отбор.Элементы[0];
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоУволенным()
	
	СписокВидовУволеных = Новый СписокЗначений();
	СписокВидовУволеных.Добавить(Перечисления.CRM_Состояние.Уволен, "Уволен");
	СписокВидовУволеных.Добавить(Перечисления.CRM_Состояние.ВременноНеРаботает, "Временно не работает");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКонтактныхЛиц,
																			"CRM_Состояние",
																			СписокВидовУволеных,
																			ВидСравненияКомпоновкиДанных.НеВСписке,
																			НСтр("ru = 'Уволен'"),
																			ОтображатьУволенных,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПользователей,
																			"Недействителен",
																			Ложь,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'Уволен'"),
																			ОтображатьУволенных,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиенте
// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
Процедура КомандаОКВыполнить()
	
	Результат = Новый Массив;
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		Группа = ЭлементДереваПервыйУровень.Адрес;
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого ЭлементДереваВторойУровень Из ЭлементыДереваВторойУровень Цикл
			
			ТекАдрес         = ЭлементДереваВторойУровень.Адрес;
			ТекКонтакт       = ЭлементДереваВторойУровень.Контакт;
			ТекПредставление = ЭлементДереваВторойУровень.Представление;
			СостояниеCRM     = "";
			
			Контакт = Новый Структура("Адрес, Представление, Контакт, Группа",
										ТекАдрес, ТекПредставление, ТекКонтакт, Группа);
			
			Результат.Добавить(Контакт);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателей(ИмяСписка, СтруктураТекущейГруппы)
	
	РеквизитКонтакта = "Ссылка";
	РеквизитАдреса   = "CRM_Email";
	
	Если ИмяСписка = "СписокПользователей" ИЛИ ТипЗнч(ИмяСписка) = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
		               |	ПользователиКонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		               |ГДЕ
		               |	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
		               |	И ПользователиКонтактнаяИнформация.Тип = &Тип";
		
		Если ИмяСписка = "СписокПользователей" Тогда
			Запрос.УстановитьПараметр("МассивПользователей", Элементы[ИмяСписка].ВыделенныеСтроки);
		Иначе
			Запрос.УстановитьПараметр("МассивПользователей", ИмяСписка);
		КонецЕсли;
			
		Запрос.УстановитьПараметр("Тип" 			   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокКлиентов" Или ИмяСписка = "СписокКонтактныхЛиц" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КонтактнаяИнформация.Ссылка КАК Ссылка,
		               |	КонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	Справочник." + ?(ИмяСписка = "СписокКлиентов", "Партнеры",
		               	 "КонтактныеЛицаПартнеров") 
		               	+ ".КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Ссылка В(&МассивПользователей)
		               |	И КонтактнаяИнформация.Тип = &Тип";
					   
		Запрос.УстановитьПараметр("МассивПользователей", Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокФизЛиц" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ФизЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
		               |	ФизЛицаКонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформация
		               |ГДЕ
		               |	ФизЛицаКонтактнаяИнформация.Ссылка В(&МассивПользователей)
		               |	И ФизЛицаКонтактнаяИнформация.Тип = &Тип";
					   
		Запрос.УстановитьПараметр("МассивПользователей", Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокПотенциальныхКлиентов" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КонтактнаяИнформация.Ссылка,
		               |	КонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Ссылка В(&МассивПользователей)
		               |	И КонтактнаяИнформация.Тип = &Тип";
		
		Запрос.УстановитьПараметр("МассивПользователей", Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокГруппПолучателей" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка КАК Ссылка,
		               |	CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК CRM_ПотенциальныеКлиентыКонтактнаяИнформация
		               |		ПО CRM_СоставыГруппПолучателей.Получатель = CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Ссылка
		               |ГДЕ
		               |	CRM_СоставыГруппПолучателей.ГруппаПолучателей В(&МассивГруппПолучателей)
		               |	И CRM_ПотенциальныеКлиентыКонтактнаяИнформация.Тип = &Тип
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
		               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		               |		ПО CRM_СоставыГруппПолучателей.Получатель = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		               |ГДЕ
		               |	CRM_СоставыГруппПолучателей.ГруппаПолучателей В(&МассивГруппПолучателей)
		               |	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПартнерыКонтактнаяИнформация.Ссылка,
		               |	ПартнерыКонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |		ПО CRM_СоставыГруппПолучателей.Получатель = ПартнерыКонтактнаяИнформация.Ссылка
		               |ГДЕ
		               |	CRM_СоставыГруппПолучателей.ГруппаПолучателей В(&МассивГруппПолучателей)
		               |	И ПартнерыКонтактнаяИнформация.Тип = &Тип
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПользователиКонтактнаяИнформация.Ссылка,
		               |	ПользователиКонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		               |		ПО CRM_СоставыГруппПолучателей.Получатель = ПользователиКонтактнаяИнформация.Ссылка
		               |ГДЕ
		               |	CRM_СоставыГруппПолучателей.ГруппаПолучателей В(&МассивГруппПолучателей)
		               |	И ПользователиКонтактнаяИнформация.Тип = &Тип
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
		               |	ФизическиеЛицаКонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.CRM_СоставыГруппПолучателей КАК CRM_СоставыГруппПолучателей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		               |		ПО CRM_СоставыГруппПолучателей.Получатель = ФизическиеЛицаКонтактнаяИнформация.Ссылка
		               |ГДЕ
		               |	CRM_СоставыГруппПолучателей.ГруппаПолучателей В(&МассивГруппПолучателей)
		               |	И ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип";
		
		Запрос.УстановитьПараметр("МассивГруппПолучателей", Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СоставГруппыПолучателей" Тогда
		
		СтрокиАдресов =  РеквизитФормыВЗначение("АдресаГруппПолучателей");
		
	ИначеЕсли ИмяСписка = "АдресаКлиентов" Или ИмяСписка = "АдресаКонтактныхЛиц" Или ИмяСписка = "АдресаПользвателей" 
		Или ИмяСписка = "АдресаФизЛиц" Или ИмяСписка = "АдресаПотенциальныхКлиентов" 
		Или ИмяСписка = "АдресаГруппПолучателей" Тогда
		МассивСсылок	= Новый Массив;
		МассивАдресов	= Новый Массив;
		
		Для Каждого ЭлементМассива Из Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			ДанныеСтроки = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(ЭлементМассива);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
			МассивАдресов.Добавить(ДанныеСтроки.CRM_Email);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок" , МассивСсылок);
		Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление КАК CRM_Email
		|ИЗ";
		Если ИмяСписка = "АдресаКлиентов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаКонтактныхЛиц" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаПользвателей" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаФизЛиц" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаПотенциальныхКлиентов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаГруппПолучателей" Тогда
			
			ТаблицаИсточник = ОбщегоНазначения.ИмяТаблицыПоСсылке(АдресаГруппПолучателей[0].Ссылка);
			ТекстЗапроса = ТекстЗапроса + "
			|	" + ТаблицаИсточник + ".КонтактнаяИнформация  КАК КонтактнаяИнформация";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&МассивСсылок)
		|	И КонтактнаяИнформация.Представление В(&МассивАдресов)";
		
		Запрос.Текст = ТекстЗапроса;
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "ПолучателиПисьма" Тогда
		
		СтрокиАдресов = Новый ТаблицаЗначений;
		СтрокиАдресов.Колонки.Добавить("Ссылка");
		СтрокиАдресов.Колонки.Добавить("CRM_Email");
		Для Каждого ЭлементМассива Из Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			ДанныеСтроки = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(ЭлементМассива);
			
			НоваяСтрокаАдреса = СтрокиАдресов.Добавить();
			НоваяСтрокаАдреса.Ссылка	= ДанныеСтроки.Контакт;
			НоваяСтрокаАдреса.CRM_Email	= ДанныеСтроки.Адрес;
			
			Родитель = ДанныеСтроки.ПолучитьРодителя();
			СтрокиПолучателей = Родитель.ПолучитьЭлементы();
			СтрокиПолучателей.Удалить(СтрокиПолучателей.Индекс(ДанныеСтроки));
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Найдем строку, куда надо добавить адреса.
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	СтрокаГруппыАдресов = ЭлементыДереваПервыйУровень[0].ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		Если ЭлементДереваПервыйУровень.Адрес = СтруктураТекущейГруппы.Адрес
			 И ЭлементДереваПервыйУровень.Контакт = СтруктураТекущейГруппы.Контакт Тогда
	
			СтрокаГруппыАдресов = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
			
			Прервать;
		
		КонецЕсли;
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		СтрокаГруппыНайдена = Ложь;
		
		Для Каждого ЭлементДереваВторойУровень Из ЭлементыДереваВторойУровень Цикл
			
			Если ЭлементДереваВторойУровень.Адрес 	= СтруктураТекущейГруппы.Адрес
				 И ЭлементДереваВторойУровень.Контакт = СтруктураТекущейГруппы.Контакт Тогда
			
				СтрокаГруппыАдресов = ЭлементыДереваВторойУровень;
				
				СтрокаГруппыНайдена = Истина;
				
				Прервать;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаГруппыНайдена Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого СтрокаАдресов Из СтрокиАдресов Цикл
		
		Если ПустаяСтрока(СтрокаАдресов.CRM_Email) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураНовогоАдреса = Новый Структура("Адрес, Контакт");
		
		СтруктураНовогоАдреса.Адрес   = СтрокаАдресов.CRM_Email;
		СтруктураНовогоАдреса.Контакт = СтрокаАдресов.Ссылка;
		
		СтрокиСуществующихАдресов = ДеревоПолучатели.Строки.НайтиСтроки(СтруктураНовогоАдреса, Истина);
		
		Если СтрокиСуществующихАдресов.Количество() = 0 Тогда
		
			НовыйАдрес = СтрокаГруппыАдресов.Добавить();
			
			НовыйАдрес.Адрес         = СтруктураНовогоАдреса.Адрес;
			НовыйАдрес.Представление = СтруктураНовогоАдреса.Контакт.Наименование;
			НовыйАдрес.Контакт       = СтруктураНовогоАдреса.Контакт;
			
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ПолучателиПисьма);
	
КонецПроцедуры// ДобавитьПолучателей(Элемент)	

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	ДеревоПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	// Заполним первый уровен дерева (папки).
	
	СтрокаКому = ДеревоПолучатели.Строки.Добавить();
	СтрокаКому.Адрес = "Кому";
	
	СтрокаКопии = ДеревоПолучатели.Строки.Добавить();
	СтрокаКопии.Адрес = "Копии";
	
	СтрокаСкрытые = ДеревоПолучатели.Строки.Добавить();
	СтрокаСкрытые.Адрес = "Скрытые";
	
	НомерПоследнейСтроки = 2;
	
	КоличествоКому = 0;
	
	КоличествоКопии = 0;
	
	Если Параметры.Свойство("СписокВыбранных") Тогда
		Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
			
			Если ГруппаВыбранных.Значение <> Неопределено Тогда
				
				ТекущаяСтрокаДерева = ДеревоПолучатели.Строки.Найти(ГруппаВыбранных.Представление, "Адрес");
				
				Если Не ТекущаяСтрокаДерева = Неопределено Тогда
					
					Если ГруппаВыбранных.Представление = "Кому" Тогда
						
						КоличествоКому = ГруппаВыбранных.Значение.Количество();
						
					ИначеЕсли ГруппаВыбранных.Представление = "Копии" Тогда
						
						КоличествоКопии = ГруппаВыбранных.Значение.Количество();
						
					КонецЕсли;
					
					Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
						
						НоваяСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Элемент);
						
						НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПолучатели, "ПолучателиПисьма");
	
	Если Параметры.Свойство("ГруппаАдресов") Тогда
		Если Параметры.ГруппаАдресов = "Копии" Тогда
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = КоличествоКому + 1;
			
		ИначеЕсли Параметры.ГруппаАдресов = "Скрытые" Тогда
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = КоличествоКому + 1 + КоличествоКопии + 1;
			
		Иначе
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = 0;
			
		КонецЕсли;
	Иначе
		Элементы.ПолучателиПисьма.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппу(ИмяГруппы)
	
	// определим текущую группу
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		И СтрНайти(",Кому,Копии,Скрытые,", "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Переносить = Истина;
	
	ЭлементНайден = Ложь;
	
	СтруктураПереносимогоЭлемента = Новый Структура("Адрес, Представление, Контакт");
	
	ЗаполнитьЗначенияСвойств(СтруктураПереносимогоЭлемента, ТекущийПолучатель);
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		Если Не ЭлементНайден Тогда
			
			ИндексТекущегоЭлемента = 0;
			
			КоличествоЭлементовУровня = ЭлементыДереваВторойУровень.Количество();
			
			Пока ИндексТекущегоЭлемента < КоличествоЭлементовУровня Цикл
				
				ЭлементДереваВторойУровень = ЭлементыДереваВторойУровень[ИндексТекущегоЭлемента];
				
				Если ЭлементДереваВторойУровень.Адрес   = СтруктураПереносимогоЭлемента.Адрес 
					И ЭлементДереваВторойУровень.Контакт = СтруктураПереносимогоЭлемента.Контакт Тогда
					
					// Проверим, в какой папке находится получатель.
					
					Если ЭлементДереваПервыйУровень.Адрес = ИмяГруппы Тогда
						
						Переносить = Ложь;
						
					Иначе
						
						ЭлементНайден = Истина;
						
						ЭлементыДереваВторойУровень.Удалить(ИндексТекущегоЭлемента);
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
				ИндексТекущегоЭлемента = ИндексТекущегоЭлемента + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Переносить Тогда
			
			Прервать;
			
		ИначеЕсли ЭлементДереваПервыйУровень.Адрес = ИмяГруппы Тогда
			
			// Добавим элемент в новую группу.
			
			НовыйЭлемент = ЭлементыДереваВторойУровень.Добавить();
			
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураПереносимогоЭлемента);
			
		КонецЕсли;
		
		Элементы.ПолучателиПисьма.Развернуть(ЭлементДереваПервыйУровень.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Если Переносить Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ПолучателиПисьма);
		
		Элементы.ПолучателиПисьма.ТекущаяСтрока = НомерПоследнейСтроки;
		
	КонецЕсли;
	
КонецПроцедуры// ПереместитьВГруппу(ИмяГруппы)	

&НаКлиенте
Процедура УстановитьОтборПользователейПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПользователей,
																			"Подразделение",
																			Подразделение,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(Подразделение),
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодразделениеНаСервере(СтруктураТекущейГруппы)
	
	Схема = Элементы.СписокПользователей.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокПользователей.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	СписокПользователейПодразделения = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДобавитьПолучателей(СписокПользователейПодразделения.ВыгрузитьКолонку("Ссылка"), СтруктураТекущейГруппы);
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		ЭтотОбъект,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	// +Уникальные действия формы
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	// -Уникальные действия формы
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

&НаСервере
Процедура УстановитьОтборПоЗаполненномуАдресу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКлиентов,
																			"АдресЗаполнен",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'АдресЗаполнен'"),
																			ПоказыватьТолькоКонтактыСАдресами,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКонтактныхЛиц,
																			"АдресЗаполнен",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'АдресЗаполнен'"),
																			ПоказыватьТолькоКонтактыСАдресами,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПотенциальныхКлиентов,
																			"АдресЗаполнен",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'АдресЗаполнен'"),
																			ПоказыватьТолькоКонтактыСАдресами,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПользователей,
																			"АдресЗаполнен",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'АдресЗаполнен'"),
																			ПоказыватьТолькоКонтактыСАдресами,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокФизЛиц,
																			"АдресЗаполнен",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			НСтр("ru = 'АдресЗаполнен'"),
																			ПоказыватьТолькоКонтактыСАдресами,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	Если ПоказыватьТолькоКонтактыСАдресами Тогда
		Элементы.СоставГруппыПолучателей.ОтборСтрок = Новый ФиксированнаяСтруктура("АдресЗаполнен", Истина);
	Иначе
		Элементы.СоставГруппыПолучателей.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
