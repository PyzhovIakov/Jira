#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь.
//
// Параметры:
//   Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "11.5.21.78";
	Обработчик.Процедура = "Константы.ПорядокЗачетаОплатНакладных.УстановитьНачальноеЗначениеКонстанты";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Константы.ПорядокЗачетаОплатНакладных.ЗарегистрироватьДанныеКОбновлениюКонстанты";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.ЧитаемыеОбъекты = "";
	Обработчик.ИзменяемыеОбъекты = "Константа.ПорядокЗачетаОплатНакладных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd5-7943-a55c-3d06d445074a");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Критичный;
	Обработчик.Комментарий = НСтр("ru = 'Установка начального значения константы ""Порядок зачета оплат и накладных.""'");
	
КонецПроцедуры

// Обработчик регистрации
// 
// Параметры:
// 	ПараметрыОбновления - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ЗарегистрироватьДанныеКОбновлениюКонстанты(ПараметрыОбновления) Экспорт
	//Регистрация пустая
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	ПараметрыОбновления - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура УстановитьНачальноеЗначениеКонстанты(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПорядокЗачетаОплатНакладных.Получить()) Тогда
		Константы.ПорядокЗачетаОплатНакладных.Установить(
			?(Константы.УдалитьЗачетОплатПоДатеПлатежа.Получить(), 
				Перечисления.ПорядкиЗачетаОплатНакладных.ПоДатеПлановогоПогашения, 
				Перечисления.ПорядкиЗачетаОплатНакладных.ПоДатеВидуДокумента));
	КонецЕсли;
	
	ПараметрыОбновления.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли