
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрыватьПослеЗаписи;

&НаКлиенте
Перем НеПроверятьОповещения;

// ШаблоныЭлементовФорм
&НаКлиенте
Перем ШаблоныЭлементов_Формы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(Объект.РольИсполнителя) Тогда
		ТекущиеПользователи = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Объект.РольИсполнителя);
	Иначе
		ТекущиеПользователи.ЗагрузитьЗначения(РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь));
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = ТекущаяДатаСеанса();
		Объект.Автор = ТекущийПользователь;
		Объект.Исполнитель = ТекущийПользователь;
		Объект.CRM_Личная = Истина;
	КонецЕсли;
	
	ТипКлиента = CRM_КлиентыСервер.ПолучитьТипКлиента("ЗадачаИсполнителя",
		Объект.CRM_Партнер, Объект.CRM_ПотенциальныйКлиент, CRM_ИспользоватьПотенциальныхКлиентов);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Заголовок = Объект.Наименование + " от " + Формат(Объект.Дата, "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " 
		+ Формат(Объект.Дата, "ДФ=HH:mm; ДЛФ=T");
	
	ПризнакЕстьПодчиненныеЗадачи = CRM_БизнесПроцессыИЗадачиВызовСервера.ЕстьПодчиненныеЗадачи(Объект.Ссылка);
	
	Если Параметры.Свойство("Начало") Тогда
		Объект.ДатаНачала = Параметры.Начало;
	КонецЕсли;
	Если Параметры.Свойство("Окончание") Тогда
		Объект.СрокИсполнения = Параметры.Окончание;
	КонецЕсли;
	Если Параметры.Свойство("Наименование") Тогда
		Объект.Наименование = Параметры.Наименование;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.CRM_ВариантСрока) Или Объект.CRM_ВариантСрока = "Нет" Тогда
		Объект.CRM_ВариантСрока = "КСроку";
	КонецЕсли;
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.ДатаНачалаПериода);
	
	ЗаполнитьДанныеФормыСервер();
	НачальныйПризнакВыполнения = Объект.Выполнена;
	
	Если Не ТолькоПросмотр Тогда
		Если ЗначениеЗаполнено(Объект.РольИсполнителя) Тогда
			ТолькоПросмотр = (ТекущиеПользователи.НайтиПоЗначению(Объект.Автор) = Неопределено 
			И ТекущиеПользователи.НайтиПоЗначению(ТекущийПользователь) = Неопределено);
		Иначе
			ТолькоПросмотр = (ТекущиеПользователи.НайтиПоЗначению(Объект.Автор) = Неопределено 
			И ТекущиеПользователи.НайтиПоЗначению(Объект.Исполнитель) = Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Предмет <> Неопределено И НЕ Объект.Предмет.Пустая() Тогда
		Элементы.ПредметСтрокой.Гиперссылка = Истина;
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если Параметры.Свойство("РежимОткрытияОкна") Тогда
				РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
			КонецЕсли;
			Элементы.ДатаОкончание.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
	Иначе
		Элементы.ПредметСтрокой.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач	= ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	ОтрисоватьКатегорииНаФорме();
	
	CRM_ОповещенияСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаОповещений);
	
	УстановитьСвойстваЭлементов();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Взаимодействия.Загрузить(CRM_ВзаимодействияСервер.ПолучитьВзаимодействия(Объект.Ссылка));
		ЗаполнитьДатуИВремяСервер();
		Элементы.Исполнитель.ТолькоПросмотр = Истина;
		Элементы.РольИсполнителя.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ГруппаПанельГиперссылок.Видимость			= Ложь;
	Элементы.Перенаправить.Доступность = НЕ Объект.Ссылка.Пустая();
	УстановитьВидимостьЭлементов();
	ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Вручную;
	
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие")
		 И ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Отбор = Новый Структура("Ссылка", Параметры.ПозиционироватьНаВзаимодействие);
		НайденныеСтроки = Взаимодействия.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.Взаимодействия.ТекущаяСтрока = Взаимодействия.Индекс(НайденныеСтроки[0]);
			Если Параметры.Свойство("ВвестиРезультат") Тогда
				Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияРезультат;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Элементы.ГруппаВзаимодействия.Видимость	= Ложь;
		Элементы.ВзаимодействияКнопкаДобавить.Видимость = Ложь;
		Элементы.ВзаимодействияКнопкаУдалить.Видимость = Ложь;
		Элементы._СкрытьОбъекты.Видимость	= Ложь;
		Элементы._ПоказатьОбъекты.Видимость	= Истина;
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	Элементы.ФормаСоздатьПоручение.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	
	Элементы.РольИсполнителя.Видимость = ЗначениеЗаполнено(Объект.РольИсполнителя)
		 И НЕ ЗначениеЗаполнено(Объект.Исполнитель);
	Элементы.Исполнитель.Видимость     = ЗначениеЗаполнено(Объект.Исполнитель);
	
	Если ТолькоПросмотр Тогда
		Элементы.ДекорацияВыбратьГруппу.Доступность = Ложь;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Отбор = Новый Структура("Задача", Объект.Ссылка);
		Выборка = РегистрыСведений.CRM_ВажностьСрочностьЗадач.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			Важная = Выборка.Важная;
			ВажнаяИсходноеЗначение = Важная;
			Срочная = Выборка.Срочная;
			СрочнаяИсходноеЗначение = Срочная;
		КонецЕсли;
	КонецЕсли;
	
	РазрешенаРучнаяНастройкаВажностиИСрочности = 
		РольДоступна("ПолныеПрава") Или РольДоступна("CRM_РазрешитьРучнуюНастройкуВажностиИСрочностиЗадач");
	Элементы.Важная.Доступность = РазрешенаРучнаяНастройкаВажностиИСрочности;
	Элементы.Срочная.Доступность = РазрешенаРучнаяНастройкаВажностиИСрочности;
	
	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент");

	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);

	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.БизнесПроцессыИЗадачи.ЛичнаяЗадача.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// CRM_УправлениеДоступом
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец CRM_УправлениеДоступом
	
	ОбновитьСоставКомандГруппыСоздать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТипКлиента = "Клиент" Тогда
		Объект.CRM_ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	Иначе
		Объект.CRM_Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Объект.CRM_КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ПроверитьНаКорректность() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ НеПроверятьОповещения И НЕ ?(ПараметрыЗаписи.Свойство("ВыполнитьЗадачу"),
		 ПараметрыЗаписи.ВыполнитьЗадачу, Ложь)  Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
		ПроверитьДатыОповещений(ОписаниеОповещения);
		Отказ = Истина;
	КонецЕсли;
	
	Объект.CRM_НаВесьДень = (Объект.CRM_ВариантСрока = "КСроку");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПризнакНовойЗадачи = ТекущийОбъект.Ссылка.Пустая();
	
	Если НЕ ПризнакНовойЗадачи Тогда
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если НЕ ТекущийОбъект.ДатаНачала = ТекущийОбъект.Ссылка.ДатаНачала 
			Или Не ТекущийОбъект.CRM_ПлановаяДатаПринятияКИсполнению = 
				ТекущийОбъект.Ссылка.CRM_ПлановаяДатаПринятияКИсполнению Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьОповещенияПоУмолчанию");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(ЭтотОбъект._ТаблицаОповещений, Тип("ТаблицаЗначений"));
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений"				, ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ЭтоНоваяЗадача"							, ПризнакНовойЗадачи);
	СтруктураДанных.Вставить("Пользователь"								, ТекущийОбъект.Исполнитель);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	ЗаписатьВзаимодействияСервер(ТекущийОбъект);
	
	Если ПризнакИзмененыОповещения ИЛИ ПризнакИзмененаДата Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоЗадаче(ТекущийОбъект.Ссылка, АдресНастроек);
		
		ПризнакИзмененаДата		= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Важная <> ВажнаяИсходноеЗначение
			Или Срочная <> СрочнаяИсходноеЗначение Тогда
			CRM_БизнесПроцессыИЗадачиСервер.ЗаписатьВажностьСрочность(ТекущийОбъект.Ссылка, Важная, Срочная);
		Иначе
			CRM_БизнесПроцессыИЗадачиСервер.ЗаписатьПризнакНеобходимостиПересчетаВажностиСрочностиЗадачи(ТекущийОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Убираем личную задачу, если есть взаимодействия.
	Если Объект.CRM_Личная Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
		|	И CRM_Взаимодействие.СтатусВзаимодействия = &СтатусВзаимодействия";
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Запрос.УстановитьПараметр("СтатусВзаимодействия", Справочники.CRM_СостоянияСобытий.Запланировано);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
			НаборРегистра.Очистить();
			НаборРегистра.Записать();
			
		КонецЕсли;
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") И НЕ Объект.Предмет.CRM_СкрытьВАРМ Тогда
			Если ЗначениеЗаполнено(Объект.Предмет)
				 И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Предмет) Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект.Предмет,
					 Справочники.CRM_СостоянияЛидов.Сконвертирован,
					 Объект.Ссылка);
			КонецЕсли;
			ПредметОбъект = Объект.Предмет.ПолучитьОбъект();
			ПредметОбъект.CRM_СкрытьВАРМ = Истина;
			ПредметОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("ЗадачаИсполнителя", "ТипКлиента", ТипКлиента);
	
	Элементы.Перенаправить.Доступность = НЕ Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьСвойстваЭлементов();
	
	Если (ЗначениеЗаполнено(Объект.Предмет)
		 И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
		 И Объект.Выполнена Тогда
		
		УчетнаяЗапись = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Предмет, "УчетнаяЗапись");
		ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ",
			 Объект.Предмет)); 
		
		Если НЕ (ФормаПисьма = Неопределено) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиПереносВПапку", ЭтотОбъект, ФормаПисьма);
			CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись,
				 ФормаПисьма.Папка,
				 ОписаниеОповещения);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ЗначениеЗаполнено(Объект.Предмет)
		 И ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия"))
		 И Объект.Выполнена Тогда
		
		ФормаСправочника = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаОбъекта",
			 Новый Структура("Ключ",
			 Объект.Предмет)); 
		Если ФормаСправочника.Открыта() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, ФормаСправочника);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Завершить связанное мероприятие?';en='Complete the bound action?'"),
				 РежимДиалогаВопрос.ДаНет);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Завершить связанное мероприятие?';en='Complete the bound action?'"),
				 РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Оповестить("СохраненаЛичнаяЗадача", Объект.Предмет);
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
			 Неопределено, Параметры.ОбновлятьКалендарь),
			 ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьПланировщик");
	
	Оповестить("ОбновитьАРМ");
	
	Оповестить("ЛентаСобытий_Обновить");
	
	Если ЗакрыватьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И (Источник.ВладелецФормы = ЭтотОбъект ИЛИ
			(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.ВладелецФормы, "ВладелецФормы") И Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект)) Тогда
			
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.CRM_Партнер = Параметр;
				CRM_ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.CRM_Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				CRM_ПартнерПриИзменении(Неопределено);
				Объект.CRM_КонтактноеЛицо	= Параметр;
				CRM_КонтактноеЛицоПриИзменении(Неопределено);
			КонецЕсли;
			УстановитьВидимостьЭлементов();
			Модифицированность = Истина;
			Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрыватьПослеЗаписи = Истина;
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.БизнесПроцессыИЗадачи.ЛичнаяЗадача.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатусВзаимодействия",
		 ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
	НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			ТекВзаимодействие.Изменено = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	Дополнительно.Вставить("Обработчик", "ДатаВремяНачалаПриИзменении");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	Дополнительно.Вставить("Обработчик", "ДатаВремяОкончанияПриИзменении");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,
			 ВремяНачало, Истина,
			 ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, , , ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьПредмет(Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		Если ДатаНачало > ДатаОкончание Тогда
			ДатаОкончание = ДатаНачало;
			ВремяОкончание = ВремяНачало;
		ИначеЕсли (ДатаОкончание = ДатаНачало) И (ВремяОкончание < ВремяНачало) Тогда
			ВремяОкончание = ВремяНачало;
		КонецЕсли;
	КонецЕсли;
	
	СкорректироватьДатыЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		Если ДатаОкончание < ДатаНачало Тогда
			ДатаНачало = ДатаОкончание;
			ВремяНачало = ВремяОкончание;
		ИначеЕсли (ДатаОкончание = ДатаНачало) И (ВремяОкончание < ВремяНачало) Тогда
			ВремяОкончание = ВремяНачало;
		КонецЕсли;
	КонецЕсли;
	
	СкорректироватьДатыЗадачи();
	ПересчитатьДатыОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.CRM_Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория,Владелец",
		 МассивКатегорий, Объект.CRM_ОсновнаяКатегория,
		 Объект.Автор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыборКатегорий",
		 Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПартнерПриИзменении(Элемент)
	Если Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы.Количество() > 0 Тогда 
														// Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		ЭлементСИдентификатором = Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы[0];
		CRM_ШаблоныЭлементовФормКлиент.ОбновитьЗначениеРеквизита(ШаблоныЭлементов_Формы[Прав(ЭлементСИдентификатором.Имя,
			 37)],
			"ПереданныйКлиент", Объект.CRM_Партнер);
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
		Объект.CRM_КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.CRM_Партнер);
	КонецЕсли;	
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроцентВыполненияЗадачиПриИзменении(Элемент)
	Если Объект.CRM_ПроцентВыполненияЗадачи < 0 Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 0;
	ИначеЕсли Объект.CRM_ПроцентВыполненияЗадачи > 100 Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	
	ПриИзмененииПроектаНаСервере();
	УстановитьСвойстваЭлементов();
	УстановитьВидимостьЭлементов();	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" ТЧ Взаимодействия.
//
Процедура ВзаимодействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияВзаимодействия();
	МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие", Истина));
	
	НоваяСтрока = Взаимодействия.Вставить(0);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
	НоваяСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
	Модифицированность = Истина;
	Элементы.Взаимодействия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Взаимодействия.ИзменитьСтроку();
	// Сразу открываем форму выбора взаимодействия.
	СтруктураДанных = Новый Структура("НоваяСтрока, ЗаполнятьСодержаниеИДату", НоваяСтрока, Ложь);		
	ОповещениеОВыбореВзаимодействия = Новый ОписаниеОповещения("ВыборВидаВзаимодействия", ЭтотОбъект, СтруктураДанных);
	ВидВзаимодействия = ПолучитьВидВзаимодействия();
	НоваяСтрока.ВидВзаимодействия = ВидВзаимодействия;
	СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия);
	
	НоваяСтрока.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
	НоваяСтрока.Изменено = Истина;
	
	ЗаписатьДатуНачалаВзаимодействия(НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ОповещениеВопросаОбОтменеВзаимодействия = Новый ОписаниеОповещения("ОбработкаОтменыВзаимодействия",
		 ЭтотОбъект,
		 ТекДанные);
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		// Можно отменять и полностью удалять строку.
		ТекстВопроса = "Отменить запланированное взаимодействие?";
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		ПоказатьПредупреждение(, "Нельзя отменять завершенное взаимодействие");
	Иначе
		Если НЕ ТекДанные.ПервоначальнаяОтмена
			 И ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекстВопроса = "Отменить запланированное взаимодействие?";
		Иначе
			ТекстВопроса = "Запланировать взаимодействие?";
		КонецЕсли;
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - Обработчик события "ПриОкончанииРедактирования" ТЧ Взаимодействия
//
Процедура ВзаимодействияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
		ТекДанные.Изменено = Истина;
		ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		Взаимодействия.Сортировать("ПлановаяДата УБЫВ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВидВзаимодействияПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(ТекДанные.ВидВзаимодействия);
	
	ТекДанные.Баллы = СтруктураНеобходимыхДанных.Баллы;
	ТекДанные.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
	ТекДанные.Содержание = СтруктураНеобходимыхДанных.Описание;
	ТекДанные.Изменено = Истина;
	ВзаимодействияВремяСПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала,
		 ТекДанные.ВремяС);
	Взаимодействия.Сортировать("ПлановаяДата Убыв");

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Взаимодействия.ТекущаяСтрока;
	СтруктураПараметров = Новый Структура();
	
	// Так как с таблицей значений есть проблемы при передаче с клиента на сервер и обратно,
	// создадим массив структур, который и передадим вместо таблицы.
	МассивСтрок = Новый Массив();
	РеквизитыТаблицы = ПолучитьРеквизитыТаблицыВзаимодействий();
	Для Каждого СтрокаТаблицы Из Взаимодействия Цикл
		// Текущую строку не передаем
		Если Взаимодействия.НайтиПоИдентификатору(ТекСтрока) = СтрокаТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		
		Для Каждого ТекКолонка Из РеквизитыТаблицы Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Ключ, СтрокаТаблицы[ТекКолонка.Ключ]);
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивСтрок", МассивСтрок);
	
	СтруктураПараметров.Вставить("Интерес", Объект.Ссылка);
	
	ДатаВСтроке = Взаимодействия.НайтиПоИдентификатору(ТекСтрока).ПлановаяДата;
	Если ЗначениеЗаполнено(ДатаВСтроке) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", ДатаВСтроке);
	КонецЕсли;
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		 СтандартнаяОбработка,
		 СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			Если Элементы.Взаимодействия.ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Элементы.Взаимодействия.ТекущиеДанные.ДатаНачала = ВыбранноеЗначение.Начало;
			Элементы.Взаимодействия.ТекущиеДанные.ВремяС = ВыбранноеЗначение.Начало;
			Элементы.Взаимодействия.ТекущиеДанные.ВремяПо = ВыбранноеЗначение.Конец;
			
			ВзаимодействияДатаНачалаПриИзменении(Неопределено);
			ВзаимодействияВремяСПриИзменении(Неопределено);
			ВзаимодействияВремяПоПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяСПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьДатуНачалаВзаимодействия(ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяПоПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Элемент.Имя = "ВзаимодействияВремяС" Тогда
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяС);
	Иначе
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяПо);
	КонецЕсли;	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	Дополнительно.Вставить("Имя", Элемент.Имя);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремениВзаимодействия", ЭтотОбъект, Дополнительно);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияРезультатПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Не ПустаяСтрока(ТекДанные.Результат) Тогда
		ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
		ТекДанные.ДатаЗавершенияВзаимодействия = ОбщегоНазначенияКлиент.ДатаСеанса();
		ТекДанные.ЗавершившийПользователь = ТекущийПользователь();
		ТекДанные.Изменено = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено")
		 И НЕ ТекДанные.Изменено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораПериодаПриИзменении(Элемент)
	
	Если ВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("ВариантВыбораПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПолнаяДатаОкончания = ДатаОкончание + (ВремяОкончание - Дата(1, 1, 1));
		
		ПолнаяДатаРезультат = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
			CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(ПолнаяДатаОкончания, ВариантСрока),
			ВариантСрока);
			
		ДатаОкончание = ПолнаяДатаРезультат;
		ВремяОкончание = ПолнаяДатаРезультат;
		
		СкорректироватьДатыЗадачи();
		ПересчитатьДатыОповещений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораПериодаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДатаОкончание	= Результат;
		ВремяОкончание	= Результат;
		
		СкорректироватьДатыЗадачи();
		ПересчитатьДатыОповещений();
	КонецЕсли;
	
КонецПроцедуры // ВариантВыбораПериодаПриИзмененииЗавершение()

&НаКлиенте
Процедура CRM_КонтактноеЛицоПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЭтапПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Задача не записана. Добавление файлов невозможно!';
			|en='The task is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	
	НастроитьОтображениеКлиентаКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВариантСрокаПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
	СкорректироватьДатыЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.CRM_ПлановаяДатаПринятияКИсполнению) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", Объект.CRM_ПлановаяДатаПринятияКИсполнению);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора_ОбъектАдресат",			Объект.Ссылка);
	ПараметрыОткрытия.Вставить("РежимВыбора_ДатаИВремяНачала",		Объект.CRM_ПлановаяДатаПринятияКИсполнению);
	ПараметрыОткрытия.Вставить("РежимВыбора_ДатаИВремяЗавершения",	Объект.СрокИсполнения);
	ПараметрыОткрытия.Вставить("РежимВыбора_ВесьДень",				Объект.CRM_НаВесьДень);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе",				Ложь);
	
	ОткрытьФорму(
		"Обработка.CRM_КалендарьМенеджера.Форма",
		ПараметрыОткрытия,
		Элемент,
		Объект.Ссылка, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка	= Ложь;
			
			ДатаИВремяПлановаяДатаПринятияКИсполнению = 
				CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВыбранноеЗначение.Начало);
			ДатаИВремяСрокИсполнения = 
				CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВыбранноеЗначение.Конец);
			
			ДатаНачало		= ДатаИВремяПлановаяДатаПринятияКИсполнению.Дата;
			ВремяНачало		= ДатаИВремяПлановаяДатаПринятияКИсполнению.Время;
			
			ДатаОкончание	= ДатаИВремяСрокИсполнения.Дата;
			ВремяОкончание	= ДатаИВремяСрокИсполнения.Время;
			
			Объект.CRM_ПлановаяДатаПринятияКИсполнению = ВыбранноеЗначение.Начало;
			Объект.СрокИсполнения = ВыбранноеЗначение.Конец;
			
			ДатаНачалаПериодаПриИзменении(Элементы.ДатаНачалаПериода);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		// Осуществляется перенос обеих дат на указанный интервал
		СтандартнаяОбработка	= Ложь;
		
		ДлительностьИнтервала	= Объект.СрокИсполнения - Объект.CRM_ПлановаяДатаПринятияКИсполнению;
		Если ДлительностьИнтервала < 0 Тогда
			ДлительностьИнтервала = 0;
		КонецЕсли;
	
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"ДатаНачалаПериодаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БазоваяПлановаяДата = 
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(Объект.CRM_ПлановаяДатаПринятияКИсполнению, 
				ВыбранноеЗначение);
			Объект.CRM_ПлановаяДатаПринятияКИсполнению = 
				CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(БазоваяПлановаяДата, ВыбранноеЗначение);
			Если ДлительностьИнтервала <> Неопределено Тогда
				Объект.СрокИсполнения	= Объект.CRM_ПлановаяДатаПринятияКИсполнению + ДлительностьИнтервала;
			КонецЕсли;
			
			СкорректироватьДатыЗадачиНаПериод();
			
			Модифицированность = Истина;
		КонецЕсли;
		
		CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.CRM_ПлановаяДатаПринятияКИсполнению = Результат;
		Объект.СрокИсполнения = Объект.CRM_ПлановаяДатаПринятияКИсполнению + ДополнительныеПараметры;
		
		СкорректироватьДатыЗадачиНаПериод();
		
		Модифицированность = Истина;
		
		CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	ДлительностьИнтервала = Объект.СрокИсполнения - Объект.CRM_ПлановаяДатаПринятияКИсполнению;
	ПересчитатьДатыЗадачиПоДлительности(ДлительностьИнтервала);
	CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПериодаПриИзменении(Элемент)
	
	ДлительностьИнтервала = Объект.СрокИсполнения - Объект.CRM_ПлановаяДатаПринятияКИсполнению;
	ПересчитатьДатыЗадачиПоДлительности(ДлительностьИнтервала);
	CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПериодаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяНачалаПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент, , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПериодаНачалоВыбораЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяНачало = ВыбранноеВремя.Значение;
		ВремяНачалаПериодаПриИзменении(Элементы.ВремяНачалаПериода);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПериодаПриИзменении(Элемент)
	
	СтароеВремяОкончания 	= Дата('00010101') + (Объект.СрокИсполнения - НачалоДня(Объект.СрокИсполнения));
	Объект.СрокИсполнения 	= 
		CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Если (ДатаНачало = ДатаОкончание) И (ВремяНачало > ВремяОкончание) Тогда
		ИнтервалВремени	= (СтароеВремяОкончания - ВремяНачало);
		ВремяНачало		= ВремяОкончание - ИнтервалВремени;
		Если ВремяНачало > ВремяОкончание Тогда
			ВремяНачало	= НачалоДня(ВремяОкончание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПериодаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяОкончанияПериодаЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПериодаЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяОкончание = ВыбранноеВремя.Значение;
		ВремяОкончанияПериодаПриИзменении(Элементы.ВремяОкончанияПериода);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	СтараяДатаЗавершение	= Объект.СрокИсполнения; 
	ДлительностьИнтервала	= Объект.СрокИсполнения - Объект.CRM_ПлановаяДатаПринятияКИсполнению;
	Объект.СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, 
		ВремяОкончание);
	
	Если НачалоДня(ДатаНачало) > НачалоДня(ДатаОкончание) Тогда
		Если НачалоДня(СтараяДатаЗавершение) = ДатаНачало Тогда
			ДатаНачало = ДатаОкончание;
		Иначе
			ДатаНачало = НачалоДня(ДатаОкончание - (СтараяДатаЗавершение - Объект.CRM_ПлановаяДатаПринятияКИсполнению));
		КонецЕсли;
		Объект.CRM_ПлановаяДатаПринятияКИсполнению = 
			CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	КонецЕсли;
	
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) И ВремяНачало > ВремяОкончание Тогда
		ПересчитатьДатыЗадачиПоДлительности(ДлительностьИнтервала);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ЗакрыватьПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИЗакрыть(Команда)
	
	ПредыдРежимКнопкиВыполнить = РежимКнопкиВыполнить;
	
	Если Модифицированность Тогда
		Если Не Объект.Выполнена Тогда
			ВыполнитьЗадачу = Истина;
		КонецЕсли;
		Если НЕ Записать() Тогда
			Если НЕ ПредыдРежимКнопкиВыполнить = 0 ИЛИ Модифицированность Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.Выполнена Тогда
		ВыполнитьЗадачу = Истина;
		МассивВзаимодействий = Новый Массив;
		Для Каждого СтрокаВзаимодействия Из Взаимодействия Цикл
			Если СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")
				ИЛИ СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе") Тогда
				МассивВзаимодействий.Добавить(СтрокаВзаимодействия.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВзаимодействий.Количество() > 0 Тогда
			ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(КодВозвратаДиалога.Да, МассивВзаимодействий);
		Иначе
			ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Объект.Выполнена = Ложь;
		ЗакрыватьПослеЗаписи = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Результат, ДополнительныеПараметры)
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыИЗадачиСервер.ЗавершитьВзавимодействияПоЗадаче(ДополнительныеПараметры);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект, Истина);
	
	ВыполнитьЗадачу = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуНачало", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуНачало(Продолжать, ДополнительныеПараметры) Экспорт
	
	Если Продолжать Тогда
		Если Не Объект.Выполнена Тогда
			
			СобытияЗадачи = ПолучитьСобытияЗадачи();
			
			ВариантЗавершенияСобытий = Неопределено;
			ДатаПереноса = Неопределено;
			ДополнительныеПараметы = Новый Структура("СобытияЗадачи, ВариантЗавершенияСобытий",
				 СобытияЗадачи,
				 ВариантЗавершенияСобытий);
			Если СобытияЗадачи.Количество() > 0 Тогда
				Список = Новый СписокЗначений();
				Список.Добавить("ЗавершатьСобытия",		НСтр("ru='Завершать события';en='Complete events'"));
				Список.Добавить("ПеренестиНаСегодня",	НСтр("ru='Перенести на сегодня';en='Transfer for today'"));
				Список.Добавить("ПеренестиНаЗавтра",	НСтр("ru='Перенести на завтра';en='Transfer for tomorrow'"));
				Список.Добавить("ПеренестиНа3Дня",		НСтр("ru='Перенести на 3 дня';en='Transfer on 3rd day'"));
				Список.Добавить("ПеренестиНаНеделю",	НСтр("ru='Перенести на неделю';en='Transfer for a week'"));
				Список.Добавить("ПеренестиНаДату",		НСтр("ru='Перенести на дату...';en='Transfer for date...'"));
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуПродолжение", ЭтотОбъект, ДополнительныеПараметы);
				ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элементы.ФормаВыполнить);
			Иначе	
				ЗавершитьЗадачуЗавершение(Дата(1, 1, 1), ДополнительныеПараметы);
			КонецЕсли;
			
		Иначе
			Объект.Выполнена = Ложь;
			Если Записать() Тогда
				УстановитьСвойстваЭлементов();
				Оповестить("СохраненаЛичнаяЗадача", Объект.Предмет);
				Закрыть();
			КонецЕсли;
			Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
			Оповестить("ОбновитьАРМ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуПродолжение(ВыбранноеЗначение, ДополнительныеПараметы) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВариантЗавершенияСобытий = ВыбранноеЗначение.Значение;
	ДополнительныеПараметы.ВариантЗавершенияСобытий = ВариантЗавершенияСобытий;
	Если ВариантЗавершенияСобытий = "ПеренестиНаДату" Тогда
		ДатаПереноса = ОбщегоНазначенияКлиент.ДатаСеанса();
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуЗавершение", ЭтотОбъект, ДополнительныеПараметы);
		ПоказатьВводДаты(ОписаниеОповещения, ДатаПереноса,
			 НСтр("ru='Перенести на дату';en='Transfer for date'"),
			 ЧастиДаты.Дата);
	Иначе
		ЗавершитьЗадачуЗавершение(Дата(1, 1, 1), ДополнительныеПараметы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавершение(ДатаПереноса, ДополнительныеПараметы) Экспорт
	Если ДатаПереноса = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершитьЗадачуССобытиями(ДополнительныеПараметы.СобытияЗадачи,
		 ДополнительныеПараметы.ВариантЗавершенияСобытий,
		 ДатаПереноса) Тогда
		Если ДополнительныеПараметы.СобытияЗадачи.Количество() > 0 Тогда
			// Нужно чтобы обновился календарь.
			Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
				 Неопределено, Параметры.ОбновлятьКалендарь),
				 ЭтотОбъект);
		КонецЕсли;
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("СохраненаЛичнаяЗадача", Объект.Предмет);
		
		Если (ЗначениеЗаполнено(Объект.Предмет)
			 И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
			 И Объект.Выполнена Тогда
			
			УчетнаяЗапись = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Предмет, "УчетнаяЗапись");
			ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
				 Новый Структура("Ключ",
				 Объект.Предмет)); 
			
			Если НЕ (ФормаПисьма = Неопределено) Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуЗавершениеПереносВПапку", ЭтотОбъект, ФормаПисьма);
				CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись,
					 ФормаПисьма.Папка,
					 ОписаниеОповещения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавершениеПереносВПапку(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если НЕ (ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка")) Тогда
		CRM_ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Предмет, ПапкаОтработанные);
		Оповестить("CRM_УстановленФлагОбработано", , ФормаПисьма);
	КонецЕсли;
	
	Закрыть();
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаСегодня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаСегодня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа(Продолжать, ПеренестиНа) Экспорт
	Если Продолжать Тогда
		ПеренестиЗадачуНаКлиенте(ПеренестиНа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаЗавтра(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаЗавтра");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа3Дня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНа3Дня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаНеделю(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаНеделю");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДату(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуПродолжение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуПродолжение(Продолжать, ДополнительныеПараметры) Экспорт
	Если Продолжать Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОписаниеОповещения, ОбщегоНазначенияКлиент.ДатаСеанса(),
			 НСтр("ru='Перенести на дату';en='Transfer for date'"),
			 ЧастиДаты.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуЗавершение(ДатаПереноса, ДополнительныеПараметры) Экспорт
	Если ДатаПереноса <> Неопределено Тогда
		ПеренестиЗадачуНаКлиенте("ПеренестиНаДату", ДатаПереноса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВводПорученияИзЗадачи");
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект,
		 УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	
	#Если ВебКлиент Тогда
		ИспользоватьОблачнуюТелефонию =
			сфпОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("сфпИспользоватьОблачнуюТелефонию");
		Если Не ИспользоватьОблачнуюТелефонию Тогда
			Состояние(Нстр("ru='Работа СофтФона невозможна в web-клиенте!';
				|en='Operation of SoftPhone is impossible in a web client!'"));
			Возврат;
		КонецЕсли;
	#КонецЕсли
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина, Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	СписокОбъектов = ПолучитьСписокУчастников();
	Если СписокОбъектов.Количество() > 0 Тогда
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
КонецПроцедуры // Позвонить()

&НаКлиенте
Процедура _СкрытьОбъекты(Команда)
	
	Элементы.ГруппаВзаимодействия.Видимость			= Ложь;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Ложь;
	Элементы._СкрытьОбъекты.Видимость					= Ложь;
	Элементы._ПоказатьОбъекты.Видимость					= Истина;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Ложь;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьОбъекты(Команда)
	
	Элементы.ГруппаВзаимодействия.Видимость			= Истина;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Истина;
	Элементы._СкрытьОбъекты.Видимость					= Истина;
	Элементы._ПоказатьОбъекты.Видимость					= Ложь;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Истина;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРеквизитов(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", Объект.CRM_Партнер);
	СтруктураПараметров.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	СтруктураПараметров.Вставить("ПотенциальныйКлиент", Объект.CRM_ПотенциальныйКлиент);
	СтруктураПараметров.Вставить("Проект", Объект.CRM_Проект);
	СтруктураПараметров.Вставить("Этап", Объект.CRM_Этап);
	СтруктураПараметров.Вставить("ПоказатьАвтора", Объект.CRM_ПоказатьАвтора);
	СтруктураПараметров.Вставить("ВариантСрока", Объект.CRM_ВариантСрока);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияРеквизиты", ЭтотОбъект);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаРеквизитовЗадачи", СтруктураПараметров,
		 ЭтотОбъект, , , , ОП,
		 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы = Новый Структура("Основание", Объект.Предмет);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Предмет);
		ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	Иначе
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	КонецЕсли;

	СписокEmail	= Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо)  Тогда
		Контакт = Объект.CRM_КонтактноеЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.CRM_Партнер)  Тогда	
		Контакт = Объект.CRM_Партнер;
	ИначеЕсли ЗначениеЗаполнено(Объект.CRM_ПотенциальныйКлиент)  Тогда	
		Контакт = Объект.CRM_ПотенциальныйКлиент;
	Иначе
		Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли;
	
	МассивEmail = ПолучитьМассивEmail(Контакт);
	
	Для Каждого ЭлементМассива Из МассивEmail Цикл
		СписокEmail.Добавить(ЭлементМассива.Контакт, ЭлементМассива.Значение);
	КонецЦикла;
	ДополнительныеПараметры	= Новый Структура;
	Если СписокEmail.Количество() = 0 Тогда
	ИначеЕсли СписокEmail.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("Кому", СписокEmail);
	КонецЕсли;
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМС".
//
Процедура ОтправитьСМС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указано контактное лицо';en='No contact person specified'"));
		Возврат;
	КонецЕсли;
	
	КИ = ПолучитьТелефон(Объект.CRM_КонтактноеЛицо);
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.ВыводОкнаСМСНеНастроены.Задача");
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Объект.CRM_КонтактноеЛицо);
	Структура.Вставить("Телефон",	SMS4B_ОтправкаSMS.ФорматироватьНомер(КИ));
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Предмет);	
		ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	Иначе
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	КонецЕсли;
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМС()

&НаКлиенте
Процедура Создать_Клиента(Команда)
	// ШаблоныЭлементовФорм
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("Ответственный, ПотенциальныйКлиент", Объект.Исполнитель, Объект.CRM_ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура Создать_Контакт(Команда)
		
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.CRM_Партнер.Видимость = Истина; // отобразить поле выбора партнера
	Элементы.CRM_Партнер.АвтоОтметкаНезаполненного = Истина;
	
	// ШаблоныЭлементовФорм
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("ПотенциальныйКлиент, ТолькоКонтакт", Объект.CRM_ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	
	Если Объект.CRM_ВариантСрока = "КСроку" Тогда
		ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	Иначе
		ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.CRM_ПлановаяДатаПринятияКИсполнению);
	КонецЕсли;
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время; 
	
	Если Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		СтруктураДлительности = Новый Структура();
		СтруктураДлительности.Вставить("Дней"	, 1);
		СтруктураДлительности.Вставить("Часов"	, 0);
		СтруктураДлительности.Вставить("Минут"	, 0);
		СтруктураДлительности.Вставить("ВпередПоКалендарю"	, Истина);
		СтруктураДлительности.Вставить("УчитыватьПроизводственныйКалендарьПриВыводеОповещений" , Истина);
		Объект.СрокИсполнения = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(ТекущаяДатаСеанса(),
			 СтруктураДлительности, ,
			 Неопределено);
		ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
		ДатаОкончание	= ДатаВремя.Дата;
		ВремяОкончанияРабочегоДня = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(),
			 "ВремяОкончанияРабочегоДня");
		Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
			ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
		КонецЕсли;
		Если ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
			ВремяОкончание = ВремяОкончанияРабочегоДня;
		Иначе
			ВремяОкончание = ДатаВремя.Время;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.CRM_ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.CRM_Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория)
			 И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_КатегорииПользователей");
	Для нИндекс = 1 По МассивКатегорий.Количество() Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Элемент = Элементы.Найти(УдаляемыйЭлемент);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЦветФона = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый,
			 ДобавляемаяКатегория.ЦветСиний);
		ЭлементыЗаголовка = Новый Массив;
		Если нИндекс = 1 Тогда
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " + ДобавляемаяКатегория.Наименование 
				+ " ", Новый Шрифт(, , Истина), CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		Иначе	
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " + ДобавляемаяКатегория.Наименование 
				+ " ", , CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		КонецЕсли;
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид = ВидДекорацииФормы.Надпись;
		ЭлементКатегория.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементКатегория.Подсказка = ДобавляемаяКатегория.Наименование;
		ЭлементКатегория.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементКатегория.АвтоМаксимальнаяШирина = Ложь;
		ЭлементКатегория.РастягиватьПоГоризонтали = Ложь;
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаКорректность()
	Если Объект.CRM_ВариантСрока = "КСроку" И Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата начала должна быть заполнена!';
			|en='The date started should be fill!'"), ,
			 "ДатаНачало");
		Возврат Ложь;
	КонецЕсли;
	Если Объект.CRM_ВариантСрока = "НаПериод" И Не ЗначениеЗаполнено(Объект.CRM_ПлановаяДатаПринятияКИсполнению) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите плановую дату принятия к исполнению.'"),,,
			"Объект.CRM_ПлановаяДатаПринятияКИсполнению");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.CRM_Интерес") И Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен срок!';
			|en='The deadline is not filled!'"), ,
			 "ДатаОкончание");
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (Объект.СрокИсполнения < Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Срок должен быть больше даты начала!';
			|en='Period should be more date started!'"), ,
			 "ДатаОкончание");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СкорректироватьДатыЗадачи()
	
	Если Объект.CRM_ВариантСрока = "КСроку" Тогда
		Объект.CRM_ПлановаяДатаПринятияКИсполнению = Дата('00010101');
	Иначе
		Объект.CRM_ПлановаяДатаПринятияКИсполнению = 
			CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	КонецЕсли;
	Объект.СрокИсполнения = 
		CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементов()
	Если Объект.Выполнена Тогда
		РежимКнопкиВыполнить = 0;
		Элементы.Выполнить.Заголовок = НСтр("ru='Отменить выполнение';en='Cancelled execution'");
	Иначе
		РежимКнопкиВыполнить = 1;
		Элементы.Выполнить.Заголовок = НСтр("ru='Выполнить';en='Perform'");
	КонецЕсли;
	
	Если Элементы.CRM_Проект.Видимость Тогда
		Если ЗначениеЗаполнено(Объект.CRM_Проект) Тогда
			Элементы.CRM_Этап.Видимость = Истина;
		Иначе
			Элементы.CRM_Этап.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПериодДаты.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.ГруппаПериодВремя.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.CRM_ПроцентВыполненияЗадачи.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.ФормаВыполнить.Доступность = Не ПризнакЕстьПодчиненныеЗадачи;
КонецПроцедуры

&НаСервере
Процедура ИзменитьМаркетинговоеМероприятие()
	
	МероприятиеОбъект = Объект.Предмет.ПолучитьОбъект();
	МероприятиеОбъект.Завершено = Истина;	
	
	Попытка
		МероприятиеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить маркетинговое мероприятие,
			| вероятно оно заблокировано';en='It were not possible to change marketing action,
			| it is probable are disabl'"));	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСобытияЗадачи()
	Возврат CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьСобытияЗадачи(Объект.Ссылка);
КонецФункции

&НаСервере
Функция ЗавершитьЗадачуССобытиями(СобытияЗадачи, ВариантЗавершенияСобытий, ДатаПереноса)
	СтруктураЗаписи = Новый Структура("ВыполнитьЗадачу", Истина);
	Записать(СтруктураЗаписи);
	
	РезультатВыполнения = Объект.Выполнена;
	
	Если РезультатВыполнения И СобытияЗадачи.Количество() > 0 И ВариантЗавершенияСобытий <> Неопределено Тогда
		РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиСобытияЗадачи(СобытияЗадачи,
			 Объект.ДатаНачала, ВариантЗавершенияСобытий,
			 ДатаПереноса);
	КонецЕсли;
	
	УстановитьСвойстваЭлементов();
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Функция ПеренестиЗадачу(ВариантПереноса, Знач ДатаПереноса = Неопределено, БылиПеренесеныСобытия = Ложь)
	РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиЗадачу(ЭтотОбъект,
		 ВариантПереноса, ДатаПереноса, Истина, Истина, БылиПеренесеныСобытия,
		 Ложь);
	
	ЗаполнитьДанныеФормыСервер();
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ПеренестиЗадачуНаКлиенте(ВариантПереноса, Знач ДатаПереноса = Неопределено)
	БылиПеренесеныСобытия = Ложь;
	Если ПеренестиЗадачу(ВариантПереноса, ДатаПереноса, БылиПеренесеныСобытия) Тогда
		Записать();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		Если БылиПеренесеныСобытия Тогда
			// Нужно чтобы обновился календарь.
			Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
				 Неопределено, Параметры.ОбновлятьКалендарь),
				 ЭтотОбъект);
		КонецЕсли;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Добавление события возможно только после записи данных."
"Данные будут записаны.';en='Data has not been written yet."
"Adding events is possible only after writing data."
"Data will be written.'"), РежимДиалогаВопрос.ОКОтмена);
		//
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	 КонтактныеЛица = Новый СписокЗначений;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                |ГДЕ
	                |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	                |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	 
	 Запрос.УстановитьПараметр("Владелец", Партнер);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	 КонтактныеЛица.Добавить(Выборка.Ссылка);
			 
	 КонецЦикла;
	 
	 Возврат КонтактныеЛица;
	
 КонецФункции
 
&НаСервереБезКонтекста
Функция ВернутьКонтактноеЛицо(Партнер)
	
	КонтактноеЛицо = Партнер.CRM_ОсновноеКонтактноеЛицо;
	
	Если КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтактноеЛицо;
	КонецЕсли;		
	
КонецФункции

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	КонтактноеЛицо = Неопределено;
	Если ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
		СписокУчастников.Добавить(Объект.CRM_Партнер);
		КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.CRM_Партнер);
	ИначеЕсли ЗначениеЗаполнено(Объект.CRM_ПотенциальныйКлиент) Тогда
		СписокУчастников.Добавить(Объект.CRM_ПотенциальныйКлиент);
	КонецЕсли;		
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(КонтактноеЛицо);
	Иначе
		Если ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
			Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Объект.CRM_Партнер) Цикл
				СписокУчастников.Добавить(КонтактноеЛицо.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

// Оповещения

&НаКлиенте
Процедура ПересчитатьДатыОповещений()
	
	CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	
	CRM_ОповещенияКлиент.ДобавитьОповещение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьОповещение(Команда)
	CRM_ОповещенияКлиент.УдалитьОповещение(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	CRM_ОповещенияКлиент.ИзменитьОповещение(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатыОповещений(ОписаниеОповещенияОЗавершении)
	
	ТекстВопроса = "";
	
	ИД = 1;
	Всего = 0;
	Для Каждого СтрокаОповещения Из _ТаблицаОповещений Цикл
		Если СтрокаОповещения.ДатаОповещения < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			Если НЕ ТекстВопроса = "" Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС;
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + НСтр("ru='Срок оповещения №'") + Строка(ИД) + НСтр("ru=' меньше текущей даты.'");
			Всего = Всего + 1;
		КонецЕсли;
		ИД = ИД + 1;
	КонецЦикла;
	
	Если НЕ ТекстВопроса = "" Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + ?(Всего = 1,
			 НСтр("ru='Это оповещение не будет создано.'"), НСтр("ru='Эти оповещения не будут созданы.'")) + " " 
			+ НСтр("ru='Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДатыОповещенийЗавершение", ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатыОповещенийЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	Если ЗначениеЗаполнено(Объект.CRM_Проект) Тогда 
		Если ЗначениеЗаполнено(Объект.CRM_Проект.CRM_Партнер) Тогда
			Объект.CRM_Партнер = Объект.CRM_Проект.CRM_Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КонтактноеЛицоПартнера) Тогда
			Объект.CRM_КонтактноеЛицо = Объект.CRM_Проект.CRM_КонтактноеЛицоПартнера;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.CRM_Партнер.Видимость = ЗначениеЗаполнено(Объект.CRM_Партнер);
	Элементы.CRM_Проект.Видимость = ЗначениеЗаполнено(Объект.CRM_Проект);
	Элементы.CRM_Этап.Видимость = ЗначениеЗаполнено(Объект.CRM_Этап);
	Элементы.ДатаИсполнения.Видимость = ЗначениеЗаполнено(Объект.ДатаИсполнения);
	Элементы.ПредметСтрокой.Видимость = ЗначениеЗаполнено(Объект.ПредметСтрокой) И Объект.ПредметСтрокой <> "не задан";
	Элементы.ГруппаПотенциальныйКлиент.Видимость = ЗначениеЗаполнено(Объект.CRM_ПотенциальныйКлиент) 
		И Не ЗначениеЗаполнено(Объект.CRM_Партнер);
	
	НастроитьОтображениеКлиентаКонтакта();
	
	ВариантКСроку = (Объект.CRM_ВариантСрока = "КСроку");
	Элементы.ГруппаКСроку.Видимость 	= ВариантКСроку;
	Элементы.ГруппаНаПериод.Видимость 	= (Не ВариантКСроку);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКлиентаКонтакта()
	
	ТипКлиентаПартнер = (ТипКлиента = "Клиент");
	ШиринаВклПотенциальные = 17;
	ШиринаВыклПотенциальные = 10;
	
	Элементы.CRM_Партнер.Видимость               = ТипКлиентаПартнер;
	Элементы.ГруппаКонтактноеЛицо.Видимость      = ТипКлиентаПартнер И ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо);
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Не ТипКлиентаПартнер;
	
	Элементы.ДекорацияКлиент.Видимость = Не CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ТипКлиента.Видимость      = CRM_ИспользоватьПотенциальныхКлиентов;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияПредметСтрокой.Ширина     = ШиринаВклПотенциальные;
		Элементы.ДекорацияФайлыПредставление.Ширина = ШиринаВклПотенциальные;
		Элементы.ДекорацияКонтактноеЛицо.Ширина     = ШиринаВклПотенциальные;
	Иначе
		Элементы.ДекорацияПредметСтрокой.Ширина     = ШиринаВыклПотенциальные;
		Элементы.ДекорацияФайлыПредставление.Ширина = ШиринаВыклПотенциальные;
		Элементы.ДекорацияКонтактноеЛицо.Ширина     = ШиринаВыклПотенциальные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дату и время взаимодействия, а так же вспомогательный реквизит СостояниеИнтересаПреддущее.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДатуИВремяСервер()
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДата);
		ТекВзаимодействие.ДатаНачала = ДатаИВремя.Дата;
		ТекВзаимодействие.ВремяС = ДатаИВремя.Время;
		
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДатаЗавершение);
		ТекВзаимодействие.ВремяПо = ДатаИВремя.Время;
		
		ТекВзаимодействие.СостояниеИнтересаПредыдущее = ТекВзаимодействие.СостояниеИнтереса;
		ТекВзаимодействие.ЭтапПредыдущий = ТекВзаимодействие.Этап;
		Если ТекВзаимодействие.СтатусВзаимодействия <> ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекВзаимодействие.ЗапрещеноМенятьСостояние = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ошибки, ДополнительныеПараметры) Экспорт
	Если НЕ Ошибки Тогда
		НеПроверятьОповещения = Истина;
		Если ВыполнитьЗадачу Тогда
			Записать(Новый Структура("ВыполнитьЗадачу", Истина));
			Закрыть();
		Иначе
			Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПереносВПапку(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если НЕ (ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка")) Тогда
		CRM_ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Предмет, ПапкаОтработанные);
		Оповестить("CRM_УстановленФлагОбработано", , ФормаПисьма);
	КонецЕсли;
	Оповестить("СохраненаЛичнаяЗадача", Объект.Предмет);
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
			 Неопределено, Параметры.ОбновлятьКалендарь),
			 ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьПланировщик");
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Ответ, ФормаСправочника) Экспорт
	
	Если ФормаСправочника = Неопределено Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ИзменитьМаркетинговоеМероприятие();	
		КонецЕсли;
	Иначе
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаСправочника.Объект.Завершено = Истина;
			Попытка
				ФормаСправочника.Записать();
				ФормаСправочника.Закрыть();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось изменить маркетинговое мероприятие,
					| вероятно оно заблокировано'"));	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Оповестить("СохраненаЛичнаяЗадача", Объект.Предмет);
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
			 Неопределено, Параметры.ОбновлятьКалендарь),
			 ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьПланировщик");
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремениВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Дополнительно.Имя = "ВзаимодействияВремяС" Тогда
			Дополнительно.ТекДанные.ВремяС = Параметры.Значение;
			ВзаимодействияВремяСПриИзменении(Дополнительно.Элемент);
			Если НЕ ЗначениеЗаполнено(Дополнительно.ТекДанные.ВремяПо) Тогда
				Дополнительно.ТекДанные.ВремяПо = Параметры.Значение + 15 * 60;	
			КонецЕсли;	
		Иначе
			Дополнительно.ТекДанные.ВремяПо = Параметры.Значение;
			ВзаимодействияВремяПоПриИзменении(Дополнительно.Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры       

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		Если Дополнительно.Обработчик = "ДатаВремяОкончанияПриИзменении" Тогда
			ДатаВремяОкончанияПриИзменении(Дополнительно.Элемент);
		КонецЕсли;	
		Если Дополнительно.Обработчик = "ДатаВремяНачалаПриИзменении" Тогда
			ДатаВремяНачалаПриИзменении(Дополнительно.Элемент);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.CRM_Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.CRM_Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.CRM_ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
// Процедура - обработка выбора Вида взаимодействия при добавлении строки.
//
Процедура ВыборВидаВзаимодействия(Парамеры, ДополнительныеПараметры) Экспорт
	Если Парамеры <> Неопределено Тогда
		Дополнительно = ДополнительныеПараметры.НоваяСтрока;
		Дополнительно.ВидВзаимодействия = Парамеры;
		СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(Парамеры);
		
		Дополнительно.Баллы = СтруктураНеобходимыхДанных.Баллы;
		Дополнительно.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
		Если ДополнительныеПараметры.ЗаполнятьСодержаниеИДату Тогда
			Дополнительно.Содержание = "";
			Дополнительно.ДатаНачала = ОбщегоНазначенияКлиент.ДатаСеанса();
			Дополнительно.ВремяС	 = ОбщегоНазначенияКлиент.ДатаСеанса();
			Дополнительно.ВремяПо	 = ОбщегоНазначенияКлиент.ДатаСеанса() + 60 * 15;
		Иначе			
			Дополнительно.Содержание = СтруктураНеобходимыхДанных.Описание;
		КонецЕсли;			
		Дополнительно.Изменено = Истина;
		
		ЗаписатьДатуНачалаВзаимодействия(Дополнительно);
		//Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияСодержание;
		//Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияКонтактноеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидВзаимодействия()
	Возврат Справочники.CRM_ВидыВзаимодействий.ЛичнаяЗадача;
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруЗаполненияВзаимодействия()
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Автор", Объект.Исполнитель);
	СтруктураЗаполнения.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	СтруктураЗаполнения.Вставить("Партнер", Объект.CRM_Партнер);
	СтруктураЗаполнения.Вставить("ПотенциальныйКлиент", Объект.CRM_ПотенциальныйКлиент);
	СтруктураЗаполнения.Вставить("Подразделение", Объект.Исполнитель.Подразделение);
	СтруктураЗаполнения.Вставить("Содержание", "");
	СтруктураЗаполнения.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяС", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяПо", ТекущаяДатаСеанса() + 60 * 15);
	БаллыМакс = Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
	Баллы = Цел(БаллыМакс / 28800 * (60 * 15));
	СтруктураЗаполнения.Вставить("Баллы", Баллы);
	Возврат СтруктураЗаполнения;
КонецФункции	

&НаКлиенте
// Процедура обработки ответа на вопрос пользователя Отменить / Запланировать взаимодействие по нажатию del.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - строка ТЧ, для которой обрабатываем нажатие.
Процедура ОбработкаОтменыВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Дополнительно.Ссылка) Тогда
			Взаимодействия.Удалить(Дополнительно);		
			Возврат;
		КонецЕсли; 
		Если НЕ Дополнительно.ПервоначальнаяОтмена
			
			 	 И Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
			Дополнительно.ПервоначальнаяОтмена = Истина;

		Иначе
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
			Дополнительно.ПервоначальнаяОтмена = Ложь;
		КонецЕсли;
		Дополнительно.Изменено = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьДатуНачалаВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала,
		 ТекДанные.ВремяС);
	Если ТекДанные.ВремяС > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяПо = ТекДанные.ВремяС;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала,
		 ТекДанные.ВремяПо);
	Если ТекДанные.ВремяС > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяС = ТекДанные.ВремяПо;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры

&НаСервере
// Процедура создания / изменения документов Взаимодействия, связанных с текущим документом Интерес.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьВзаимодействияСервер(ТекущийОбъект)
	
	СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	
	// В начале обработаем уже существующие Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено ИЛИ Модифицированность Тогда
			Если НЕ ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
				
				ИзмененноеВзаимодействие = ТекВзаимодействие.Ссылка.ПолучитьОбъект();
				Если ТекВзаимодействие.Изменено ИЛИ Модифицированность Тогда
					ЗаполнитьЗначенияСвойств(ИзмененноеВзаимодействие, ТекВзаимодействие, , "Содержание");
					ИзмененноеВзаимодействие.Тема = ТекВзаимодействие.Содержание;
					ИзмененноеВзаимодействие.ОсновнаяКатегория = ТекущийОбъект.CRM_ОсновнаяКатегория;
					ИзмененноеВзаимодействие.ИндексЦвета = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущийОбъект.CRM_ОсновнаяКатегория,
						 "ЦветИндекс");
				КонецЕсли;
				ИзмененноеВзаимодействие.Записать();
				ТекВзаимодействие.Изменено = Ложь;
				
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Обрабатываем новые Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено Тогда
			Если ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка()
				ИЛИ ТекВзаимодействие.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
				Если ЗначениеЗаполнено(ТекВзаимодействие.Ссылка) Тогда
					НовоеВзаимодействие.УстановитьСсылкуНового(Документы.CRM_Взаимодействие.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекВзаимодействие.Ссылка.УникальныйИдентификатор())));
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовоеВзаимодействие, ТекВзаимодействие);
				НовоеВзаимодействие.Тема = ТекВзаимодействие.Содержание;
				НовоеВзаимодействие.ДокументОснование		= ТекущийОбъект.Ссылка;
				Если Не ЗначениеЗаполнено(НовоеВзаимодействие.СтатусВзаимодействия) Тогда
					НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
				КонецЕсли;
				НовоеВзаимодействие.Партнер					= ТекущийОбъект.CRM_Партнер;
				НовоеВзаимодействие.КонтактноеЛицо			= ТекущийОбъект.CRM_КонтактноеЛицо;
				НовоеВзаимодействие.ПотенциальныйКлиент		= ТекущийОбъект.CRM_ПотенциальныйКлиент;
				НовоеВзаимодействие.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				НовоеВзаимодействие.Ответственный			= ТекущийОбъект.Исполнитель;
				НовоеВзаимодействие.ОсновнаяКатегория		= ТекущийОбъект.CRM_ОсновнаяКатегория;
				НовоеВзаимодействие.ИндексЦвета				= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущийОбъект.CRM_ОсновнаяКатегория,
					 "ЦветИндекс");
				НовоеВзаимодействие.Записать();
				ТекВзаимодействие.Ссылка					= НовоеВзаимодействие.Ссылка;
				ТекВзаимодействие.Изменено					= Ложь;
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьВзаимодействияСервер()

&НаСервере
// Функция возвращает индекс картинки из коллекции CRM_КоллекцияВидыСобытий.
//
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Число - индекс коллекции картинок CRM_КоллекцияВидыСобытий.
Функция УстановитьИконкуВидаСобытияСервер(ВидВзаимодествия)

	Если ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 1;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 2;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 3;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 4;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 5;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 6;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 7;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 8;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 9;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 10;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьБаллыДляВидаРабот(ВидВзаимодействия)
	ТзБаллы			= CRM_ОбщегоНазначенияСервер.ПолучитьТаблицуБаллов(Объект.Исполнитель.Подразделение);	
	Поиск			= Новый Структура;
	Поиск.Вставить("ВидВзаимодействия", ВидВзаимодействия);
	НайденныеСтроки	= Неопределено;
	НайденныеСтроки	= ТзБаллы.НайтиСтроки(Поиск);
	Если НайденныеСтроки.Количество() > 0 Тогда		
		Баллы = НайденныеСтроки[0].Балл;
	Иначе
		Баллы = ВидВзаимодействия.Баллы;
	КонецЕсли;	
	Возврат Баллы;
КонецФункции

&НаСервере
// Функция возвращает на клиент значения реквизитов из вида взаимодействия.
// 
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Структура - значения реквизитов.
Функция ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия)
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Баллы", ПолучитьБаллыДляВидаРабот(ВидВзаимодействия));
	СтруктураРезультата.Вставить("Описание", ВидВзаимодействия.Описание);
	СтруктураРезультата.Вставить("ВидСобытияКартинка", УстановитьИконкуВидаСобытияСервер(ВидВзаимодействия));
	Возврат СтруктураРезультата;
КонецФункции

&НаСервере
// Функция возвращает перечень реквизитов таблицы Взаимодействия.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура - Перечень имен реквизитов.
//
Функция ПолучитьРеквизитыТаблицыВзаимодействий()
	РеквизитыТаблицы = ПолучитьРеквизиты("Взаимодействия");
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

&НаСервере
// Функция формирует список рабочих часов с учетом настроек пользователя от начала рабочего дня 
// до окончания с интервалом в полчаса.
//
// Параметры:
// 	Время - Дата
//
// Возвращаемое значение:
//	СписокЧасов - СписокЗначений
Функция ВыбратьВремяИзСписка(Знач СтароеЗначениеВСписке)
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСписокРабочегоВремениПользователя(Объект.Исполнитель);
	
КонецФункции

&НаСервере
Функция ПолучитьБаллыПодразделения()
	Возврат Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
КонецФункции	

&НаКлиенте
Процедура ПересчитатьБаллы(ТекДанные)
	БаллыМакс = ПолучитьБаллыПодразделения();
	ТекДанные.Баллы = Мин(БаллыМакс, Цел(БаллыМакс / 28800 * (ТекДанные.ВремяПо - ТекДанные.ВремяС)));
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещенияРеквизиты(ПараметрыВозврата, Дополнительно) Экспорт
	Если ТипЗнч(ПараметрыВозврата) = Тип("Структура") Тогда
		Объект.CRM_КонтактноеЛицо = ПараметрыВозврата.КонтактноеЛицо;
		Объект.CRM_Партнер = ПараметрыВозврата.Партнер;
		Объект.CRM_ПотенциальныйКлиент = ПараметрыВозврата.ПотенциальныйКлиент;
		Объект.CRM_Проект = ПараметрыВозврата.Проект;
		Объект.CRM_Этап = ПараметрыВозврата.Этап;
		Объект.CRM_ПоказатьАвтора = ПараметрыВозврата.ПоказатьАвтора;
		Объект.CRM_ВариантСрока = ПараметрыВозврата.ВариантСрока;
		
		УстановитьВидимостьЭлементов();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьМассивEmail(Контакт)
	МассивEmail = Новый Массив;
	Для Каждого ЭлементКИ Из Контакт.КонтактнаяИнформация Цикл
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
			СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление);
			СтруктураКИ.Вставить("Контакт", Контакт);
			Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
				МассивEmail.Очистить();
				МассивEmail.Вставить(0, СтруктураКИ);
				Прервать;
			Иначе
				МассивEmail.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивEmail;
КонецФункции // ПолучитьМассивEmail().

&НаКлиенте
Процедура ОбработкаОповещенияОткрытияФормыНастроек(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелефон(КонтактноеЛицо)
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекВид Из КонтактноеЛицо.КонтактнаяИнформация Цикл
		Если ТекВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Возврат ТекВид.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// +CRM
#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
// -CRM

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаИнтереса", ИмяКомандыМассив[1], ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПоТипуОбращения(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;

	УИд = СтрЗаменить( СтрЗаменить(Команда.Имя, "КомандаСоздатьПоТипуОбращения_", "") , "_", "-");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипОбращения", ПолучитьТипОбращенияПоУИд(УИд));
	Если ПараметрыОткрытия.ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес") Тогда 
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	Иначе
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
	КонецЕсли;
	ПараметрыОткрытия.Вставить("НеОбновлятьТипОбращения", Истина);
	ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьТипОбращенияПоУИд(УИд)
	Возврат Справочники.CRM_ТипыОбращений.ПолучитьСсылку(Новый УникальныйИдентификатор(УИд));
КонецФункции

&НаСервере
Процедура ОбновитьСоставКомандГруппыСоздать()
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Создать_Интерес.Видимость = Ложь;
	
	СписокТиповОбращений = СписокТиповОбращений();
	
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПреобразованныйУИд = СтрЗаменить(ЭлементСписка.Значение.УникальныйИдентификатор(), "-", "_");
		
		// команда
		ИмяКоманды = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаКомандыФормы = Команды.Найти(ИмяКоманды);
		
		Если РезультатПоискаКомандыФормы = Неопределено Тогда
			КомандаСоздатьПоТипуОбращения = Команды.Добавить(ИмяКоманды);
			КомандаСоздатьПоТипуОбращения.Заголовок  = НСтр("ru = 'Создать по типу обращения'");
			КомандаСоздатьПоТипуОбращения.Действие   = "КомандаСоздатьПоТипуОбращения";
		КонецЕсли;
		
		// элемент формы
		ИмяЭлементаФормы = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаЭлементаФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если РезультатПоискаЭлементаФормы = Неопределено Тогда
			ЭлементФормы = Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), Элементы.Группа5);
			ЭлементФормы.Вид    = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементФормы.Заголовок  = ЭлементСписка.Значение;
			ЭлементФормы.Картинка = ЭлементСписка.Картинка;
			ЭлементФормы.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповОбращений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ТипыОбращений.Ссылка КАК Ссылка,
		|	CRM_ТипыОбращений.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.CRM_ТипыОбращений КАК CRM_ТипыОбращений
		|ГДЕ
		|	НЕ CRM_ТипыОбращений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ТипыОбращений.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповОбращений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповОбращений.Добавить(Выборка.Ссылка, , , БиблиотекаКартинок["CRM_ТипОбращения" + Выборка.ИндексКартинки]);
	КонецЦикла;
	
	Возврат СписокТиповОбращений;

КонецФункции

&НаКлиенте
Процедура СозданиеКлиентаЗавершение(Результат, Шаблон) Экспорт
	// ШаблоныЭлементовФорм
	ШаблоныЭлементов_УдалитьЭлементы(Результат.ИдентификаторФормыСтрокой);
	Если Результат.Свойство("Данные") Тогда
		Если ЗначениеЗаполнено(Результат.Данные.Клиент) Тогда
			Объект.CRM_Партнер = Результат.Данные.Клиент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Данные.Контакт) Тогда
			Объект.CRM_КонтактноеЛицо = Результат.Данные.Контакт;
		КонецЕсли;
		Элементы.CRM_Партнер.Видимость = ЗначениеЗаполнено(Объект.CRM_Партнер);
		Элементы.ГруппаКонтактноеЛицо.Видимость = ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо);
		CRM_ПартнерПриИзменении(Неопределено);
		CRM_КонтактноеЛицоПриИзменении(Неопределено);
		Записать();
	Иначе
		// очистить и скрыть поле Партнера
		Объект.CRM_Партнер = Неопределено;
		Элементы.CRM_Партнер.Видимость = Ложь;
		Элементы.CRM_Партнер.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ГруппаПотенциальныйКлиент.Видимость = (НЕ ЗначениеЗаполнено(Объект.CRM_Партнер)
			 И ЗначениеЗаполнено(Объект.CRM_ПотенциальныйКлиент));
	КонецЕсли;
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "РезультатВыполнения1");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти

#Область ШаблоныЭлементовФорм

&НаКлиенте
Процедура ШаблоныЭлементов_СоздатьЭлементы(ИмяФормыШаблона, Параметры, ОписаниеОповещенияОЗакрытии ,
	 ИмяГруппыРазмещения)
	
	Если ШаблоныЭлементов_Формы = Неопределено Тогда
		ШаблоныЭлементов_Формы = Новый Структура;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы = CRM_ШаблоныЭлементовФормКлиент.ОписаниеФормы(ЭтотОбъект, ИмяФормыШаблона, Параметры);
	Если ШаблоныЭлементов_ОписаниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	
	ШаблоныЭлементов_Формы.Вставить(ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона);
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(ШаблоныЭлементов_ОписаниеФормы.АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, ИмяГруппыРазмещения,
	 ИдентификаторШаблона,
	 ИмяГруппыОбновления = Неопределено)
	
	ОбновлениеГруппы = Элементы.Найти(ИмяГруппыОбновления);
	CRM_ШаблоныЭлементовФорм.СоздатьЭлементыФормыПоШаблону(ЭтотОбъект, АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения, ИдентификаторШаблона,
		 ОбновлениеГруппы); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона, // АПК:78 - исключить из проверки.
	 ИмяГруппыОбновления) Экспорт
	
	ФормаШаблона = ШаблоныЭлементов_Формы[ИдентификаторШаблона];
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы(СтрЗаменить(ИмяГруппыОбновления, ИдентификаторШаблона, ""));
	ЭтотОбъект["ШаблоныЭлементов_АдресОписанияФормы" + ИдентификаторШаблона] = АдресОписанияФормыШаблона;
	
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, "", ИдентификаторШаблона, ИмяГруппыОбновления);
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_УдалитьЭлементы(ИдентификаторФормыСтрокой)
	
	ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой);
	ШаблоныЭлементов_Формы.Удалить(ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой)
	
	CRM_ШаблоныЭлементовФорм.УдалитьЭлементыФормы(ЭтотОбъект, ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда) 
	CRM_ШаблоныЭлементовФормКлиент.ВыполнитьКоманду(Команда, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Команда.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент)
	CRM_ШаблоныЭлементовФормКлиент.ПриИзменении(Элемент, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатыЗадачиПоДлительности(ДлительностьИнтервала)
	
	НоваяПлановаяДатаПринятия	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	НовыйПлановыйСрокИсполнения = НачалоМинуты(НоваяПлановаяДатаПринятия + ДлительностьИнтервала);
	
	СрокИсполненияДатаИВремя =
		CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(НовыйПлановыйСрокИсполнения);
	
	ВремяОкончание	= СрокИсполненияДатаИВремя.Время;
	ДатаОкончание	= СрокИсполненияДатаИВремя.Дата;
	
	Объект.CRM_ПлановаяДатаПринятияКИсполнению	= НоваяПлановаяДатаПринятия;
	Объект.СрокИсполнения						= НовыйПлановыйСрокИсполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатыЗадачиНаПериод()
	
	ДатаИВремя			= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.CRM_ПлановаяДатаПринятияКИсполнению);
	ДатаНачало			= ДатаИВремя.Дата;
	ВремяНачало			= ДатаИВремя.Время;
	
	ДатаИВремя			= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаИВремя.Дата;
	ВремяОкончание	= ДатаИВремя.Время;
	
КонецПроцедуры

#КонецОбласти


#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели


#Область Инициализация

НеПроверятьОповещения = Ложь;
ЗакрыватьПослеЗаписи = Ложь;

#КонецОбласти
