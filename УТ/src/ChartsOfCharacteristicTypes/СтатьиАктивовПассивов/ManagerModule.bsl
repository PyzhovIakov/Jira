#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("АктивПассив; АктивПассив");
	Результат.Добавить("ТипЗначения; ТипЗначения");
	Результат.Добавить("Аналитика; Аналитика");
	Результат.Добавить("СчетаУчетаВНастройкахПроводок; СчетаУчетаВНастройкахПроводок");
	Результат.Добавить("Вид; Вид");
	Результат.Добавить("ВыделениеДолгосрочныхАктивовОбязательств; ВыделениеДолгосрочныхАктивовОбязательств");
	Результат.Добавить("НесобственныеПодконтрольныеЦенности; НесобственныеПодконтрольныеЦенности");
	Результат.Добавить("ВалютныйУчет; ВалютныйУчет");
	Результат.Добавить("КоличественныйУчет; КоличественныйУчет");
	Результат.Добавить("ИсточникДанных; ПредставлениеИсточникаДанных");
	Результат.Добавить("ОтборДанных; НастройкиИсточникаДанныхОтбор");
	Результат.Добавить("ИсточникОбъектовНастройки; ПредставлениеОбъектовНастройки");
	Результат.Добавить("ОтборОбъектовНастройки; НастройкиОбъектовНастройкиОтбор");
	Результат.Добавить("ИсточникДетальныхНастроек; ПредставлениеДетальныхНастроек");
	Результат.Добавить("СвязиФункциональныхОпций; НастройкиИспользованияОтбор");
	Результат.Добавить("РесурсыРегл; РесурсыРегл");
	Результат.Добавить("РесурсыУпр; РесурсыУпр");
	Результат.Добавить("РесурсыВал; РесурсыВал");
	Результат.Добавить("РесурсыКоличество; РесурсыКоличество");
	Результат.Добавить("ПутиКДаннымСубконто; ПутиКДаннымСубконто");
	
	Возврат Результат;
	
КонецФункции

// Функция определяет аналитику активов и пассивов для подстановки в документ по статье активов и пассивов.
//
// Параметры:
//  СтатьяАктивовПассивов - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Ссылка на статью активов и пассивов
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//
// Возвращаемое значение:
//	СправочникСсылка - значение аналитики по умолчанию для активов и пассивов.
//
Функция ПолучитьАналитикуАктивовПассивовПоУмолчанию(СтатьяАктивовПассивов, Объект) Экспорт
	
	СтатьяТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяАктивовПассивов, "ТипЗначения");
	
	ОписаниеТипов = Новый ОписаниеТипов(СтатьяТипЗначения);
	АналитикаАктивовПассивов = ОписаниеТипов.ПривестиЗначение();
	
	Если СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады")
		И Объект.Свойство("Склад") Тогда
	
		АналитикаАктивовПассивов = Объект.Склад;
	
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры")
		И Объект.Свойство("Партнер") Тогда
		
		АналитикаАктивовПассивов = Объект.Партнер;
		
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
		И Объект.Свойство("Контрагент") Тогда
		
		АналитикаАктивовПассивов = Объект.Контрагент;
		
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")
		И Объект.Свойство("Подразделение") Тогда
		
		АналитикаАктивовПассивов = Объект.Подразделение;
		
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")
		И Объект.Свойство("ПодразделениеПредприятия") Тогда
		
		АналитикаАктивовПассивов = Объект.ПодразделениеПредприятия;
		
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации")
		И Объект.Свойство("Организация") Тогда
	
		АналитикаАктивовПассивов = Объект.Организация;
		
	ИначеЕсли СтатьяТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")
		И Объект.Свойство("ФизическоеЛицо") Тогда
	
		АналитикаАктивовПассивов = Объект.ФизическоеЛицо;
		
	КонецЕсли;
	
	Возврат АналитикаАктивовПассивов;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.ОборотноСальдоваяВедомостьАктивовПассивов.ДобавитьКомандуКарточкаАктиваПассива(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаЭлемента,ФормаСписка";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает статьи активов/пассивов, использование которых запрещено
//
// Возвращаемое значение:
// 	СписокЗначений - Список заблокированных статей активов/пассивов.
//
Функция ЗаблокированныеСтатьиАктивовПассивов() Экспорт
	
	ЗаблокированныеСтатьи = Новый СписокЗначений;
	
	Возврат ЗаблокированныеСтатьи;
	
КонецФункции

// Вызывается при начальном заполнении предопределенных элементов
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов справочника.
//  ТабличныеЧасти - Структура из КлючИЗначение - данные заполнения табличных частей.
//                                                Состав колонок соответствует набору реквизитов табличных частей.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	МетаСправочники = Метаданные.Справочники;
	МетаПеречисления = Метаданные.Перечисления;
	МетаРегистрыНакопления = Метаданные.РегистрыНакопления;
	МетаФункциональныеОпции = Метаданные.ФункциональныеОпции;
	

	#Область ОписаниеСтатейУправленческогоБаланса

	#Область СтатьиУправленческогоБаланса
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "СтатьиУправленческогоБаланса";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Статьи управленческого баланса'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000067";
	Элемент.РеквизитДопУпорядочивания = -1;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти


	#Область УпрБалансГруппаПрочиеАктивы
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансГруппаПрочиеАктивы";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие активы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000047";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 45;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансГруппаПрочиеПассивы
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансГруппаПрочиеПассивы";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие пассивы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000048";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 47;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансДебиторскаяЗадолженность
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДебиторскаяЗадолженность";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Дебиторская задолженность'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000023";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 21;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансДенежныеСредства
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредства";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 13;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансДоходыТекущегоПериода
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДоходыТекущегоПериода";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доходы текущего периода'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000042";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДоходыТекущегоПериода";
	Элемент.РеквизитДопУпорядочивания = 37;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансИсточникиФинансирования
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансИсточникиФинансирования";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Источники финансирования'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000038";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 1;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансКредиторскаяЗадолженность
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансКредиторскаяЗадолженность";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Кредиторская задолженность'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000024";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 8;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансНезавершенноеПроизводство
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансНезавершенноеПроизводство";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Незавершенное производство'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000029";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "НезавершенноеПроизводство";
	Элемент.РеквизитДопУпорядочивания = 34;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область ПрибылиИУбытки
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрибылиИУбытки";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прибыли и убытки'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000016";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ПрибылиИУбытки";
	Элемент.РеквизитДопУпорядочивания = 38;
	Элемент.ВыводитьОборот = Истина;
	Элемент.ПредставлениеДебетаСтатьи = НСтр("ru = 'Себестоимость и прочие расходы'", КодыЯзыков); // @НСтр-2
	Элемент.ПредставлениеКредитаСтатьи = НСтр("ru = 'Выручка и прочие доходы'", КодыЯзыков); // @НСтр-2
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансРасходыБудущихПериодов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансРасходыБудущихПериодов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы будущих периодов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000015";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "РасходыБудущихПериодов";
	Элемент.РеквизитДопУпорядочивания = 35;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансРасходыТекущегоПериода
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансРасходыТекущегоПериода";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы текущего периода'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000014";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "РасходыТекущегоПериода";
	Элемент.РеквизитДопУпорядочивания = 36;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТовары
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТовары";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000027";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.РеквизитДопУпорядочивания = 26;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область УпрБалансТоварыКОформлениюОтчетовКомитенту
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыКОформлениюОтчетовКомитенту";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары к оформлению отчетов комитенту (продажи)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000043";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыКОформлениюОтчетовКомитенту";
	Элемент.РеквизитДопУпорядочивания = 32;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансУслугиКОформлениюОтчетовПринципалу
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансУслугиКОформлениюОтчетовПринципалу";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Услуги к оформлению отчетов принципалу (продажи)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000055";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "УслугиКОформлениюОтчетовПринципалу";
	Элемент.РеквизитДопУпорядочивания = 33;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	
	#Область УпрБалансТоварыРаботыКОформлениюОтчетовКомитенту
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыРаботыКОформлениюОтчетовКомитенту";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и работы к оформлению отчетов комитенту (закупки)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000057";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СтатьиУправленческогоБаланса;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыРаботыКОформлениюОтчетовКомитенту";
	Элемент.РеквизитДопУпорядочивания = 53;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	

	#Область УпрБалансВыданныеАвансы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансВыданныеАвансы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выданные авансы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000001";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДебиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ВыданныеАвансы";
	Элемент.РеквизитДопУпорядочивания = 23;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансЗадолженностьКлиентов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансЗадолженностьКлиентов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Задолженность клиентов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000002";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДебиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЗадолженностьКлиентов";
	Элемент.РеквизитДопУпорядочивания = 22;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансЗадолженностьСобственныхОрганизаций
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансЗадолженностьСобственныхОрганизаций";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Задолженность собственных организаций'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000006";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДебиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЗадолженностьСобственныхОрганизаций";
	Элемент.РеквизитДопУпорядочивания = 25;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область ЗаймыВыданные
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗаймыВыданные";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Займы выданные'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000019";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДебиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЗаймыВыданные";
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 24;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаймыВыданные);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	#КонецОбласти


	#Область УпрБалансДенежныеДокументы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеДокументы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные документы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000049";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеДокументы";
	Элемент.РеквизитДопУпорядочивания = 18;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДенежныеСредстваБезналичные
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредстваБезналичные";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства (безналичные)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000003";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеСредстваБезналичные";
	Элемент.РеквизитДопУпорядочивания = 14;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДенежныеСредстваВПути
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредстваВПути";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства в пути'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000028";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеСредстваВПути";
	Элемент.РеквизитДопУпорядочивания = 20;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДенежныеСредстваНаличные
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредстваНаличные";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства (наличные)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000004";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеСредстваНаличные";
	Элемент.РеквизитДопУпорядочивания = 15;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДенежныеСредстваНаправления
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредстваНаправления";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства (в направлениях)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000044";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеСредстваНаправления";
	Элемент.РеквизитДопУпорядочивания = 16;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДенежныеСредстваУПодотчетныхЛиц
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДенежныеСредстваУПодотчетныхЛиц";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства (у подотчетных лиц)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000005";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДенежныеСредстваУПодотчетныхЛиц";
	Элемент.РеквизитДопУпорядочивания = 17;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансДепозитыВБанках
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДепозитыВБанках";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Депозиты в банках'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000018";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансДенежныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДепозитыВБанках";
	Элемент.РеквизитДопУпорядочивания = 19;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансЗадолженностьПоКредитам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансЗадолженностьПоКредитам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Финансирование за счет кредитов и займов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000017";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансИсточникиФинансирования;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЗадолженностьПоКредитам";
	Элемент.РеквизитДопУпорядочивания = 3;
	Элемент.ВыводитьОборот = Истина;
	Элемент.ПредставлениеДебетаСтатьи = НСтр("ru = 'Возврат кредита и процентов'", КодыЯзыков); // @НСтр-2
	Элемент.ПредставлениеКредитаСтатьи = НСтр("ru = 'Кредит и начисления процентов'", КодыЯзыков); // @НСтр-2
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	

	#Область УпрБалансСобственныеСредства
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "УпрБалансСобственныеСредства";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Собственные средства'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000037";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансИсточникиФинансирования;
	Элемент.РеквизитДопУпорядочивания = 5;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансЦелевоеФинансирование
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансЦелевоеФинансирование";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Целевое финансирование'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000036";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансИсточникиФинансирования;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЦелевоеФинансирование";
	Элемент.РеквизитДопУпорядочивания = 2;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансЗадолженностьПередПоставщиками
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансЗадолженностьПередПоставщиками";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Задолженность перед поставщиками'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000009";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансКредиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ЗадолженностьПередПоставщиками";
	Элемент.РеквизитДопУпорядочивания = 10;
	Элемент.ВыводитьОборот = Истина;
	Элемент.ПредставлениеДебетаСтатьи = НСтр("ru = 'Оплата и прочие взаиморасчеты'", КодыЯзыков); // @НСтр-2
	Элемент.ПредставлениеКредитаСтатьи = НСтр("ru = 'Кредит'", КодыЯзыков); // @НСтр-2
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансНеотфактурованныеПоставки
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансНеотфактурованныеПоставки";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Неотфактурованные поставки'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000053";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансКредиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "НеотфактурованныеПоставки";
	Элемент.РеквизитДопУпорядочивания = 12;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансОбязательстваПередСобственнымиОрганизациями
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансОбязательстваПередСобственнымиОрганизациями";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства перед собственными организациями'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000011";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансКредиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ОбязательстваПередСобственнымиОрганизациями";
	Элемент.РеквизитДопУпорядочивания = 11;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансПолученныеАвансы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансПолученныеАвансы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Полученные авансы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансКредиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ПолученныеАвансы";
	Элемент.РеквизитДопУпорядочивания = 9;
	Элемент.ВыводитьОборот = Истина;
	Элемент.ПредставлениеДебетаСтатьи = НСтр("ru = 'Зачет авансов'", КодыЯзыков); // @НСтр-2
	Элемент.ПредставлениеКредитаСтатьи = НСтр("ru = 'Авансы'", КодыЯзыков); // @НСтр-2
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансРасходыДисконтирования
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансРасходыДисконтирования";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы дисконтирования'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000063";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансКредиторскаяЗадолженность;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "РасходыДисконтирования";
	Элемент.РеквизитДопУпорядочивания = 59;
	Элемент.ВыводитьОборот = Истина;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансПрочиеАктивы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансПрочиеАктивы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ПрочиеАктивыПассивы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие активы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000012";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансГруппаПрочиеАктивы;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ПрочиеАктивы";
	Элемент.РеквизитДопУпорядочивания = 46;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область УпрБалансДепонированнаяЗарплата
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансДепонированнаяЗарплата";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Депонированная зарплата'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000032";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансГруппаПрочиеПассивы;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ДепонированнаяЗарплата";
	Элемент.РеквизитДопУпорядочивания = 50;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти

	#Область Налоги
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "Налоги";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыНалоговВзносов"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Налоги'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000035";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансГруппаПрочиеПассивы;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.АктивПассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "Налоги";
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ВидыНалоговВзносов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 49;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.Налоги);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	#КонецОбласти

	#Область ОплатаТруда
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОплатаТруда";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата труда'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000030";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансГруппаПрочиеПассивы;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ОплатаТруда";
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 51;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	#КонецОбласти

	#Область УпрБалансПрочиеПассивы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансПрочиеПассивы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ПрочиеАктивыПассивы"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие пассивы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000013";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансГруппаПрочиеПассивы;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ПрочиеПассивы";
	Элемент.РеквизитДопУпорядочивания = 48;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	

	#Область УпрБалансВложенияСобственныхСредств
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансВложенияСобственныхСредств";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Вложения собственных средств'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000040";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансСобственныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ВложенияСобственныхСредств";
	Элемент.РеквизитДопУпорядочивания = 6;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансВыводСобственныхСредств
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансВыводСобственныхСредств";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Вывод собственных средств'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000041";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансСобственныеСредства;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ВыводСобственныхСредств";
	Элемент.РеквизитДопУпорядочивания = 7;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТоварыВПути
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыВПути";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары в пути'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000054";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансТовары;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыВПути";
	Элемент.РеквизитДопУпорядочивания = 28;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТоварыВРознице
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыВРознице";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары в рознице'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000025";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансТовары;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыВРознице";
	Элемент.РеквизитДопУпорядочивания = 29;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТоварыНаОптовыхСкладах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыНаОптовыхСкладах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары на оптовых складах'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000007";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансТовары;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыНаОптовыхСкладах";
	Элемент.РеквизитДопУпорядочивания = 27;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТоварыПереданныеВПереработку
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыПереданныеВПереработку";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары, переданные в переработку'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000026";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансТовары;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыПереданныеВПереработку";
	Элемент.РеквизитДопУпорядочивания = 31;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#Область УпрБалансТоварыПереданныеНаКомиссию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УпрБалансТоварыПереданныеНаКомиссию";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары, переданные на комиссию'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000000008";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.УпрБалансТовары;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.ИмяИсточникаДанныхБюджетов = "ТоварыПереданныеНаКомиссию";
	Элемент.РеквизитДопУпорядочивания = 30;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти

	#КонецОбласти // #Область ОписаниеСтатейУправленческогоБаланса

	#Область ОписаниеСтатейФинансовогоУчета
	
	
	#Область ЗапасыСобственные
	#Область ГруппаЗапасыСобственные
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ЗапасыСобственные";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Запасы собственные'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002500";
	Элемент.РеквизитДопУпорядочивания = 2500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	
	#Область ТоварыМатериалыНаСкладах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыМатериалыНаСкладах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и материалы на складах'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002520";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = МетаСправочники.Склады.ПолноеИмя();
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2520;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	#КонецОбласти
	
	
	#Область ТоварыМатериалыВПутиОтПоставщиков
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыМатериалыВПутиОтПоставщиков";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и материалы в пути от поставщиков'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002540";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2540;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	#КонецОбласти
	
	#Область НДСПоПриобретеннымЦенностям
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДСПоПриобретеннымЦенностям";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС по приобретенным ценностям'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002550";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.НДСПредъявленный.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаПеречисления.ТипыНалогообложенияНДС.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = МетаПеречисления.ВидыЦенностей.ПолноеИмя();
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2550;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Ссылка", УчетНДСУП.ВидыДеятельностиНДС());
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ТоварыОтгруженные
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыОтгруженные";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары отгруженные'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002560";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2560;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	РазделыУчета = КоллекцияЛогическогоСложения();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВПути);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссиюВПути);
	ОписаниеОтбора.Вставить("РазделУчета", РазделыУчета);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	
	
	#КонецОбласти
	
	#Область ТоварыМатериалыПереданныеНаХранение
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыМатериалыПереданныеНаХранение";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и материалы переданные на хранение'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002570";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2570;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыПереданныеПартнерам);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	#КонецОбласти
	
	#Область ТоварыПереданныеНаКомиссию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыПереданныеНаКомиссию";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары переданные на комиссию'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002580";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2580;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	
	
	#КонецОбласти
	
	
	#Область ОтклоненияВСтоимостиЗапасов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОтклоненияВСтоимостиЗапасов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отклонения в стоимости запасов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002600";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
//	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
//	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
//	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
//	Элемент.ИсточникДанных = МетаРегистрыНакопления.ОтклоненияВСтоимостиТоваров.Имя;
//	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
//	Элемент.ИсточникДетальныхНастроек = МетаСправочники.Склады.ПолноеИмя();
//	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
//	Элемент.РеквизитДопУпорядочивания = 2600;
//	Элемент.ВыводитьОборот = Ложь;
//	Элемент.БезАналитики = Истина;
//	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
//	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ПартионныйУчетВерсии22.Имя);
//	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ПереданнаяВозвратнаяТара
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПереданнаяВозвратнаяТара";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переданная возвратная тара'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000002610";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыСобственные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПереданнаяВозвратнаяТара.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 2610;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	#КонецОбласти
	
	#Область ДенежныеСредства
	#Область ГруппаДенежныеСредства
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредства";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003000";
	Элемент.РеквизитДопУпорядочивания = 3000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	ОписаниеОтбораОбъектовНастройки = КоллекцияЛогическогоУмножения();
	РеквизитОтбораОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДенежныхСредств.Реквизиты.ТипДенежныхСредств.Имя;
	
	#Область ДенежныеСредстваВКассах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредстваВКассах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства в кассах'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредства;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДенежныеСредстваНаличные.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДенежныхСредств.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3010;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбораОбъектовНастройки.Вставить(РеквизитОтбораОбъектовНастройки, Перечисления.ТипыДенежныхСредств.Наличные);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	#КонецОбласти
	
	#Область ДенежныеСредстваВКассахККМ
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредстваВКассахККМ";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства в кассах ККМ'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредства;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДенежныеСредстваВКассахККМ.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДенежныхСредств.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбораОбъектовНастройки.Вставить(РеквизитОтбораОбъектовНастройки, Перечисления.ТипыДенежныхСредств.ВКассахККМ);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьРозничныеПродажи.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	
	#Область ДенежныеСредстваНаСчетах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредстваНаСчетах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства на счетах'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003040";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредства;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДенежныеСредстваБезналичные.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДенежныхСредств.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3040;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбораОбъектовНастройки.Вставить(РеквизитОтбораОбъектовНастройки, Перечисления.ТипыДенежныхСредств.Безналичные);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	#КонецОбласти
	
	#Область ДенежныеСредстваВПути
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДенежныеСредстваВПути";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства в пути'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003050";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДенежныеСредства;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДенежныеСредстваВПути.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаПеречисления.ВидыПереводовДенежныхСредств.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3050;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	#КонецОбласти
	
	#Область ДепозитыКредитыЗаймыВыданные
	#Область ГруппаДепозитыКредитыЗаймыВыданные
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ДепозитыКредитыЗаймыВыданные";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Депозиты, кредиты и займы выданные'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003500";
	Элемент.РеквизитДопУпорядочивания = 3500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	ХарактерыДоговоров = КоллекцияЛогическогоСложения();
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный);
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит);
	
	ОписаниеОтбораОбъектовНастройки = КоллекцияЛогическогоУмножения();
	РеквизитОтбораОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты.РасчетыСДебиторами.Имя;
	ОписаниеОтбораОбъектовНастройки.Вставить(РеквизитОтбораОбъектовНастройки, Истина);
	
	#Область ДепозитыКредитыЗаймыВыданныеДолг
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДепозитыКредитыЗаймыВыданныеДолг";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Основной долг по депозитам, кредитам и займам выданным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003510";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДепозитыКредитыЗаймыВыданные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3510;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ДепозитыКредитыЗаймыВыданныеПроценты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДепозитыКредитыЗаймыВыданныеПроценты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Проценты по депозитам, кредитам и займам выданным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003520";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДепозитыКредитыЗаймыВыданные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3520;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ДепозитыКредитыЗаймыВыданныеКомиссия
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ДепозитыКредитыЗаймыВыданныеКомиссия";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Комиссия по депозитам, кредитам и займам выданным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000003530";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДепозитыКредитыЗаймыВыданные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 3530;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", ХарактерыДоговоров);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	#КонецОбласти
	
	
	#Область РасчетыСПоставщиками
	#Область ГруппаРасчетыСПоставщиками
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "РасчетыСПоставщиками";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты с поставщиками'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004500";
	Элемент.РеквизитДопУпорядочивания = 4500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	РеквизитыГФУРасчетов = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты;
	РеквизитыОтбораОбъектовНастройки = Новый Массив();
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСПоставщиками.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКомитентами.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКомиссионерами.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСПереработчиками.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСДавальцами.Имя);
	ОписаниеОтбораОбъектовНастройки = КоллекцияЛогическогоСложения();
	Для Каждого РеквизитОтбораОбъектовНастройки Из РеквизитыОтбораОбъектовНастройки Цикл
		ОписаниеОтбораОбъектовНастройки.Вставить(0, КоллекцияЛогическогоУмножения());
		ОписаниеОтбораОбъектовНастройки[0].Вставить(РеквизитОтбораОбъектовНастройки, Истина);
	КонецЦикла;
	
	#Область ЗадолженностьПередПоставщиками
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗадолженностьПередПоставщиками";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Задолженность перед поставщиками'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004510";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4510;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыВал = ТабличныеЧасти.РесурсыВал.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "ДолгУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "ДолгРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыВал, "Долг");
	#КонецОбласти
	
	#Область АвансыВыданныеПоставщикам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "АвансыВыданныеПоставщикам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Авансы, выданные поставщикам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004520";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4520;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыВал = ТабличныеЧасти.РесурсыВал.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "ПредоплатаУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "ПредоплатаРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыВал, "Предоплата");
	#КонецОбласти
	
	#Область ОбязательстваПоНеотфактурованнымПоставкам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбязательстваПоНеотфактурованнымПоставкам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства по неотфактурованным поставкам (стоимость)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004530";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4530;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьНеотфактурованныеПоставки.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаСобственныхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаСобственныхЗапасовРегл());
	#КонецОбласти
	
	#Область ОбязательстваПоНеотфактурованномуНДС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбязательстваПоНеотфактурованномуНДС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства по неотфактурованным поставкам (НДС)'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004540";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.НДСПредъявленный.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаПеречисления.ТипыНалогообложенияНДС.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4540;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
//	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
//	ОписаниеОтбора.Вставить("ВидЦенности", Перечисления.ВидыЦенностей.НеотфактурованныйНДС);
//	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Ссылка", УчетНДСУП.ВидыДеятельностиНДС());
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьНеотфактурованныеПоставки.Имя);
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыКоличество = ТабличныеЧасти.РесурсыКоличество.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыКоличество, "0", 0);
	#КонецОбласти
	
	#Область БилетыБронирование
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "БилетыБронирование";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Билеты и бронирование'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004550";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4550;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("ОбъектРасчетов.ГруппаФинансовогоУчета.РасчетыПоБронированию", Истина);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(РеквизитыГФУРасчетов.РасчетыПоБронированию.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	#КонецОбласти
	
	#Область НДССАвансовВыданных
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДССАвансовВыданных";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС с авансов выданных'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004560";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.НДСАвансыВыданные.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4560;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ПроцентыДисконтированияРасчетов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПроцентыДисконтированияРасчетов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Проценты дисконтирования расчетов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004570";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПроцентныеРасходыДисконтирования.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4570;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	#КонецОбласти
	
	#Область ОбязательстваПередКомитентомПоРеализованнымТоварам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбязательстваПередКомитентомПоРеализованнымТоварам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства перед комитентом по реализованным товарам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004580";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4580;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьКомиссиюПриЗакупках.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	
	
	#КонецОбласти
	
	#Область ОбязательстваПередПринципаломПоРеализованнымУслугам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбязательстваПередПринципаломПоРеализованнымУслугам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства перед принципалом по реализованным услугам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000004590";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСПоставщиками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.УслугиКОформлениюОтчетовПринципалу.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 4590;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьПродажуАгентскихУслуг.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	#КонецОбласти
	
	#Область РасчетыСКлиентами
	#Область ГруппаРасчетыСКлиентами
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "РасчетыСКлиентами";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты с клиентами'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005000";
	Элемент.РеквизитДопУпорядочивания = 5000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	РеквизитыГФУРасчетов = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты;
	РеквизитыОтбораОбъектовНастройки = Новый Массив();
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКлиентами.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКомиссионерами.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКомитентамиПоЗакупке.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСКомитентами.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСПереработчиками.Имя);
	РеквизитыОтбораОбъектовНастройки.Добавить(РеквизитыГФУРасчетов.РасчетыСДавальцами.Имя);
	ОписаниеОтбораОбъектовНастройки = КоллекцияЛогическогоСложения();
	Для Каждого РеквизитОтбораОбъектовНастройки Из РеквизитыОтбораОбъектовНастройки Цикл
		ОписаниеОтбораОбъектовНастройки.Вставить(0, КоллекцияЛогическогоУмножения());
		ОписаниеОтбораОбъектовНастройки[0].Вставить(РеквизитОтбораОбъектовНастройки, Истина);
	КонецЦикла;
	
	#Область ЗадолженностьКлиентов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗадолженностьКлиентов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Задолженность клиентов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСКлиентами;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 5010;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыВал = ТабличныеЧасти.РесурсыВал.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "ДолгУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "ДолгРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыВал, "Долг");
	#КонецОбласти
	
	#Область АвансыПолученныеОтКлиентов
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "АвансыПолученныеОтКлиентов";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Авансы, полученные от клиентов'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСКлиентами;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 5020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыВал = ТабличныеЧасти.РесурсыВал.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "ПредоплатаУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "ПредоплатаРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыВал, "Предоплата");
	#КонецОбласти
	
	#Область ПодарочныеСертификаты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПодарочныеСертификаты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Подарочные сертификаты'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005030";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСКлиентами;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПодарочныеСертификаты.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 5030;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	
	#Область НДССАвансовПолученных
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДССАвансовПолученных";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС с авансов полученных'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005040";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСКлиентами;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.НДСАвансыПолученные.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 5040;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область ОбязательстваПередКомитентомПоЗакупкам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОбязательстваПередКомитентомПоЗакупкам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обязательства перед комитентом по закупкам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000005050";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСКлиентами;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 5050;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьОказаниеАгентскихУслугПриЗакупке.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	#КонецОбласти
	
	
	#Область КредитыЗаймыПолученные
	#Область ГруппаКредитыЗаймыПолученные
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "КредитыЗаймыПолученные";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Кредиты и займы полученные'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006000";
	Элемент.РеквизитДопУпорядочивания = 6000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	ОписаниеОтбораОбъектовНастройки = КоллекцияЛогическогоУмножения();
	РеквизитОтбораОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.Реквизиты.РасчетыСКредиторами.Имя;
	ОписаниеОтбораОбъектовНастройки.Вставить(РеквизитОтбораОбъектовНастройки, Истина);
	
	#Область КредитыИЗаймыПолученныеДолг
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КредитыИЗаймыПолученныеДолг";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Основной долг по кредитам и займам полученным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.КредитыЗаймыПолученные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 6010;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область КредитыИЗаймыПолученныеПроценты
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КредитыИЗаймыПолученныеПроценты";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Проценты по кредитам и займам полученным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.КредитыЗаймыПолученные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 6020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	
	#Область КредитыИЗаймыПолученныеКомиссия
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "КредитыИЗаймыПолученныеКомиссия";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Комиссия по процентам и займам полученным'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006030";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.КредитыЗаймыПолученные;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Истина;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаРасчетов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 6030;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Договор.ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ОписаниеОтбора.Вставить("ТипСуммы", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбораОбъектовНастройки);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьДоговорыКредитовИДепозитов.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	#КонецОбласти
	
	#Область РасчетыПоНалогам
	#Область ГруппаРасчетыПоНалогам
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "РасчетыПоНалогам";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты по налогам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006500";
	Элемент.РеквизитДопУпорядочивания = 6500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область РасчетыПоНДС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасчетыПоНДС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты по НДС'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000006510";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыПоНалогам;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоНДС.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 6510;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	#КонецОбласти
	#КонецОбласти
	
	#Область РасчетыССотрудниками
	#Область ГруппаРасчетыССотрудниками
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "РасчетыССотрудниками";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты с сотрудниками'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000007000";
	Элемент.РеквизитДопУпорядочивания = 7000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область РасчетыСПодотчетнымиЛицами
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасчетыСПодотчетнымиЛицами";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты с подотчетными лицами'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000007020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыССотрудниками;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 7020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	#КонецОбласти
	
	
	#Область ВнутрихозяйственныеРасчеты
	#Область ГруппаВнутрихозяйственныеРасчеты
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ВнутрихозяйственныеРасчеты";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутрихозяйственные расчеты'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008000";
	Элемент.РеквизитДопУпорядочивания = 8000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	
	#Область РасчетыСФилиалами
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасчетыСФилиалами";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутрихозяйственные расчеты по текущим операциям'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ВнутрихозяйственныеРасчеты;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.АктивПассив;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	
	
	#КонецОбласти
	#КонецОбласти
	
	#Область Продажи
	#Область ГруппаПродажи
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "Продажи";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Продажи'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008500";
	Элемент.РеквизитДопУпорядочивания = 8500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область ВыручкаОтПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыручкаОтПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выручка от продаж'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008510";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8510;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "СуммаВыручкиБезНДС");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "СуммаВыручкиРегл");
	#КонецОбласти
	
	#Область ВыручкаОтПродажСНДС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВыручкаОтПродажСНДС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выручка от продаж с НДС'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008520";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8520;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "СуммаВыручки");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "СуммаВыручкиСНДСРегл");
	#КонецОбласти
	
	#Область СебестоимостьПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СебестоимостьПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Себестоимость продаж'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008530";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Расход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8530;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "СтоимостьУпр,ДопРасходыУпр,ТрудозатратыУпр,ПостатейныеПостоянныеУпр,ПостатейныеПеременныеУпр,РасходыНаПродажуУпр,РезервПодОбесценениеУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "СтоимостьРегл,ДопРасходыРегл,ТрудозатратыРегл,ПостатейныеПостоянныеРегл,ПостатейныеПеременныеРегл,РасходыНаПродажуРегл,РезервПодОбесценениеРегл");
	#КонецОбласти
	
	#Область НДССПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДССПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС с продаж'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008540";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Расход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8540;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыКоличество = ТабличныеЧасти.РесурсыКоличество.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "СуммаВыручки");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "СуммаВыручкиБезНДС", -1);
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "СуммаВыручкиСНДСРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "СуммаВыручкиРегл", -1);
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыКоличество, "Количество", 0);
	#КонецОбласти
	
	#Область ПрочаяВыручка
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочаяВыручка";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочая выручка'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008550";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПрочаяВыручка.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8550;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.Реквизиты.Доходы.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "ВыручкаБезНДСУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "ВыручкаБезНДСРегл");
	#КонецОбласти
	
	#Область ПрочаяВыручкаСНДС
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочаяВыручкаСНДС";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочая выручка с НДС'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008560";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПрочаяВыручка.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8560;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.Реквизиты.Доходы.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	#КонецОбласти
	
	#Область НДССПрочихПродаж
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДССПрочихПродаж";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС с прочих продаж'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008570";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Расход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПрочаяВыручка.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8570;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.Реквизиты.Доходы.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	Элемент.РесурсыКоличество = ТабличныеЧасти.РесурсыКоличество.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, "НДСУпр");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, "НДСРегл");
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыКоличество, "Количество", 0);
	#КонецОбласти
	
	#Область НДСПоОтгрузкамБезПереходаПраваСобственности
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДСПоОтгрузкамБезПереходаПраваСобственности";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'НДС по отгрузкам без перехода права собственности'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000008580";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Продажи;
	Элемент.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 8580;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.НДСПоОтгрузкамБезПереходаПраваСобственности);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьУчетНДС.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	
	
	#КонецОбласти
	#КонецОбласти
	
	#Область ДоходыРасходы
	#Область ГруппаДоходыРасходы
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ДоходыРасходы";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доходы и расходы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000009000";
	Элемент.РеквизитДопУпорядочивания = 9000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область ПрочиеДоходы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочиеДоходы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие доходы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000009010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДоходыРасходы;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПрочиеДоходы.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 9010;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.Реквизиты.Доходы.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	#КонецОбласти
	
	#Область ПрочиеРасходы
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочиеРасходы";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие расходы'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000009020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДоходыРасходы;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Расход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПрочиеРасходы.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 9020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить(МетаСправочники.ГруппыФинансовогоУчетаДоходовРасходов.Реквизиты.Расходы.Имя, Истина);
	ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора);
	#КонецОбласти
	
	#Область ЗакрытиеДоходовОтПродолжающихсяОпераций
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗакрытиеДоходовОтПродолжающихсяОпераций";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие доходов от продолжающихся операций'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000009030";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДоходыРасходы;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Доход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 9030;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	ОписаниеОтбора.Вставить("ДебетКредит", Перечисления.ВидыДвиженийПрочихАктивовПассивов.Кредит);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	#КонецОбласти
	
	#Область ЗакрытиеРасходовОтПродолжающихсяОпераций
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРасходовОтПродолжающихсяОпераций";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие расходов от продолжающихся операций'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000009040";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ДоходыРасходы;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Расход;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 9040;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("Статья", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	ОписаниеОтбора.Вставить("ДебетКредит", Перечисления.ВидыДвиженийПрочихАктивовПассивов.Дебет);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	#КонецОбласти
	#КонецОбласти
	
	
	#Область ЗапасыПринятые
	#Область ГруппаЗапасыПринятые
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "ЗапасыПринятые";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Запасы принятые'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010500";
	Элемент.РеквизитДопУпорядочивания = 10500;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область ТоварыМатериалыПринятыеНаХранениеНаСкладах
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыМатериалыПринятыеНаХранениеНаСкладах";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и материалы принятые на хранение на складах'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010510";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыПринятые;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Истина;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = МетаСправочники.Склады.ПолноеИмя();
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 10510;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоСложения();
	ОписаниеОтбора.Добавить(КоллекцияЛогическогоУмножения());
	ОписаниеОтбора.Добавить(КоллекцияЛогическогоУмножения());
	РазделыУчета = КоллекцияЛогическогоСложения();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеКОформлениюСписания);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиКОформлениюСписания);
	ОписаниеОтбора[0].Вставить("РазделУчета", РазделыУчета);
	РазделыУчета = КоллекцияЛогическогоСложения();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи);
	ОписаниеОтбора[1].Вставить("РазделУчета", РазделыУчета);
	ОписаниеОтбора[1].Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
	ОписаниеОтбора[1].Вставить("АналитикаУчетаНоменклатуры.МестоХранения.ЦеховаяКладовая", Ложь);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	
	
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаПринятыхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаПринятыхЗапасовРегл());
	
	
	#КонецОбласти
	
	
	#Область ТоварыМатериалыПринятыеНаХранениеПереданныеПартнерам
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыМатериалыПринятыеНаХранениеПереданныеПартнерам";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары и материалы принятые на хранение переданные партнерам'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010540";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыПринятые;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Истина;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 10540;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	РазделыУчета = КоллекцияЛогическогоСложения();
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранениеПереданныеПартнерам);
	РазделыУчета.Добавить(Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиПереданныеПартнерам);
	ОписаниеОтбора.Вставить("РазделУчета", РазделыУчета);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	
	
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьОтветственноеХранениеВПроцессеЗакупки.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаПринятыхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаПринятыхЗапасовРегл());
	
	
	#КонецОбласти
	
	
	#Область ТоварыПринятыеНаКомиссию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыПринятыеНаКомиссию";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары принятые на комиссию'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010590";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыПринятые;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Истина;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 10590;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
	ОписаниеОтбора.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", Перечисления.ТипыМестХранения.Склад);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаПринятыхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаПринятыхЗапасовРегл());
	#КонецОбласти
	
	#Область ТоварыПереданныеНаСубкомиссию
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТоварыПереданныеНаСубкомиссию";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Товары переданные на субкомиссию'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010600";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыПринятые;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Истина;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.СебестоимостьТоваров.Имя;
	Элемент.ИсточникОбъектовНастройки = МетаСправочники.ГруппыФинансовогоУчетаНоменклатуры.ПолноеИмя();
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 10600;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	ОписаниеОтбора = КоллекцияЛогическогоУмножения();
	ОписаниеОтбора.Вставить("РазделУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию);
	ТипыМестХранения = КоллекцияЛогическогоСложения();
	ТипыМестХранения.Добавить(Перечисления.ТипыМестХранения.Партнер);
	ТипыМестХранения.Добавить(Перечисления.ТипыМестХранения.Организация);
	ОписаниеОтбора.Вставить("АналитикаУчетаНоменклатуры.ТипМестаХранения", ТипыМестХранения);
	ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора);
	Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
	ДобавитьФункциональнуюОпцию(Элемент.ФункциональныеОпции, МетаФункциональныеОпции.ИспользоватьКомиссиюПриПродажах.Имя);
	ЗаполнитьСвязиФункциональныхОпций(Элемент);
	Элемент.РесурсыУпр = ТабличныеЧасти.РесурсыУпр.Скопировать();
	Элемент.РесурсыРегл = ТабличныеЧасти.РесурсыРегл.Скопировать();
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыУпр, РесурсыУчетаПринятыхЗапасовУпр());
	ЗаполнитьТаблицуРесурсов(Элемент.РесурсыРегл, РесурсыУчетаПринятыхЗапасовРегл());
	
	
	#КонецОбласти
	
	#Область ПринятаяВозвратнаяТара
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПринятаяВозвратнаяТара";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятая возвратная тара'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000010610";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗапасыПринятые;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = МетаРегистрыНакопления.ПринятаяВозвратнаяТара.Имя;
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 10610;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	#КонецОбласти
	#КонецОбласти
	
	#Область СлужебныеСтатьи
	#Область ГруппаСлужебныеСтатьи
	Элемент = Элементы.Добавить();
	Элемент.ЭтоГруппа = Истина;
	Элемент.ИмяПредопределенныхДанных = "СлужебныеСтатьи";
	МассивТипов = Новый Массив;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Служебные статьи'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000011000";
	Элемент.РеквизитДопУпорядочивания = 11000;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Ложь;
	#КонецОбласти
	
	#Область ВводОстатков
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВводОстатков";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000011010";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СлужебныеСтатьи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = "";
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 11010;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.Описание = НСтр("ru = 'Статья используется для формирования двойной записи с любой статьей, по которой производится ввод начальных остатков документами ввода остатков'");
	#КонецОбласти
	
	#Область РасчетыСРозничнымиПокупателями
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасчетыСРозничнымиПокупателями";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты с розничными покупателями'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000011020";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СлужебныеСтатьи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = "";
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 11020;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.Описание = НСтр("ru = 'Транзитная статья для формирования двойной записи со статьями учета выручки и оплат в документах розничных продаж и возвратов'");
	#КонецОбласти
	
	#Область РасчетыПоВзаимозачетамЗадолженности
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РасчетыПоВзаимозачетамЗадолженности";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты по взаимозачетам задолженности'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000011030";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СлужебныеСтатьи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Ложь;
	Элемент.ИсточникДанных = "";
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Истина;
	Элемент.РеквизитДопУпорядочивания = 11030;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.Описание = НСтр("ru = 'Транзитная статья для формирования двойной записи со статьями учета расчетов в документах взаимозачета задолженности'");
	#КонецОбласти
	
	#Область НесобственныеЦенности
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НесобственныеЦенности";
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.СтатьиБезАналитики"));
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Элемент.ТипЗначения = ОписаниеТипа;
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Несобственные ценности'", КодыЯзыков); // @НСтр-2
	Элемент.Код = "00000011040";
	Элемент.Родитель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.СлужебныеСтатьи;
	Элемент.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
	Элемент.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
	Элемент.НесобственныеПодконтрольныеЦенности = Истина;
	Элемент.ИсточникДанных = "";
	Элемент.ИсточникОбъектовНастройки = "";
	Элемент.ИсточникДетальныхНастроек = "";
	Элемент.СчетаУчетаВНастройкахПроводок = Ложь;
	Элемент.РеквизитДопУпорядочивания = 11040;
	Элемент.ВыводитьОборот = Ложь;
	Элемент.БезАналитики = Истина;
	Элемент.Описание = НСтр("ru = 'Служебная статья для обеспечения работы со статьями учета принятых товаров и материалов'");
	#КонецОбласти
	#КонецОбласти
	
	#КонецОбласти // #Область ОписаниеСтатейФинансовогоУчета
	
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - ПланВидовХарактеристикОбъект.СтатьиАктивовПассивов - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает источники данных статей активов и пассивов, являющихся объектами финансового учета.
// 
// Параметры:
//  ОбъектыУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, Массив из ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - статьи для отбора при необходимости
// 
// Возвращаемое значение:
//  Массив из Строка - имена регистров накопления
//
Функция ИсточникиДанныхОбъектовУчета(ОбъектыУчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиАктивовПассивов.ИсточникДанных КАК ИсточникДанных
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|ГДЕ
	|	НЕ СтатьиАктивовПассивов.ПометкаУдаления
	|	И СтатьиАктивовПассивов.ИсточникДанных <> """"
	|";
	
	Если ОбъектыУчета <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СтатьиАктивовПассивов.Ссылка В (&ОбъектыУчета)";
		Запрос.УстановитьПараметр("ОбъектыУчета", ОбщегоНазначенияУТКлиентСервер.Массив(ОбъектыУчета));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИсточникиДанных = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИсточникДанных) Тогда
			ИсточникиДанных.Добавить(Выборка.ИсточникДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсточникиДанных;
	
КонецФункции

// Возвращает структуру со свойствами, влияющими на состав используемых объектов финансового учета
//
// Возвращаемое значение:
//  Структура:
//  * ФормированиеКорреспонденций - Булево - По данным объектов учета формируются проводки с корреспонденцией
//  * УчетНесобственныхЦенностей - Булево - Используется учет несобственных подконтрольных ценностей
//  * УчетВыручкиБезНДС - Булево - Используется учет выручки от продаж без НДС
//  * УчетВыручкиСНДС - Булево - Используется учет выручки от продаж с НДС
//
Функция НастройкиФинансовогоУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ФормированиеКорреспонденций", Истина);
	НастройкиУчета.Вставить("УчетНесобственныхЦенностей", Истина);
	НастройкиУчета.Вставить("УчетВыручкиБезНДС", Ложь);
	НастройкиУчета.Вставить("УчетВыручкиСНДС", Истина);
	
	Возврат НастройкиУчета;
	
КонецФункции

// Возвращает таблицу объектов финансового учета со свойствами для настройки счетов.
// Если какой-либо параметр является выражением языка запросов, то описания полей в нем должны содержать
// псевдоним источника данных, полученный через функцию ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию().
// Если параметр является только именем поля,в том числе разыменованным через точку, его можно указывать без псевдонима источника данных.
// Допускается использовать параметры запроса из функции МеждународныйУчетПоДаннымФинансовыхРегистров.ЗапросДанныхФинансовыхРегистров().
// Допускается использовать строковые шаблоны из функции МеждународныйУчетПоДаннымФинансовыхРегистров.ТекстыЗапросовЗаписейРегистров().
// 
// Параметры:
//  НастройкиУчета - см. НастройкиФинансовогоУчета
//  СоСчетамиВНастройках - Булево - Истина - только объекты учета со счетами в настройках проводок, Ложь - все
//  ОбъектыУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, Массив из ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - статьи для отбора при необходимости
// 
// Возвращаемое значение:
//  см. НоваяТаблицаОбъектовФинансовогоУчета
// 
Функция ОписаниеОбъектовФинансовогоУчета(НастройкиУчета, СоСчетамиВНастройках = Ложь, ОбъектыУчета = Неопределено) Экспорт
	
	Запрос = ЗапросОбъектовФинансовогоУчета(НастройкиУчета, СоСчетамиВНастройках, ОбъектыУчета);
	
	ДополнительныеПоляВыборки = "
	|	РеквизитыСтатей.ОтборДанных КАК ОтборДанных,
	|	РеквизитыСтатей.ПутиКДаннымСубконто КАК ПутиКДаннымСубконто,
	|	РеквизитыСтатей.РесурсыУпр КАК РесурсыУпр,
	|	РеквизитыСтатей.РесурсыРегл КАК РесурсыРегл,
	|	РеквизитыСтатей.РесурсыВал КАК РесурсыВал,
	|	РеквизитыСтатей.РесурсыКоличество КАК РесурсыКоличество";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляВыборки", ДополнительныеПоляВыборки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеОбъектовУчета = НоваяТаблицаОбъектовФинансовогоУчета();
	ДвиженияПрочиеАктивыПассивы = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
		
	Пока Выборка.Следующий() Цикл
		Если ИспользованиеСтатьиПоФункциональнымОпциям(Выборка) Тогда
			НоваяСтрока = ОписаниеОбъектовУчета.Добавить();
			НоваяСтрока.ОбъектУчета = Выборка.ОбъектУчета;
			НоваяСтрока.ИсточникДанных = Выборка.ИсточникДанных;
			НоваяСтрока.ОтборДанных = ОтборКомпоновкиИзХранилищаНастроек(Выборка.ОтборДанных);
			НоваяСтрока.НесобственныеЦенности = Выборка.НесобственныеЦенности;
			НоваяСтрока.ВыделениеДолгосрочныхАктивовОбязательств = Выборка.ВыделениеДолгосрочныхАктивовОбязательств;
			НоваяСтрока.СчетаУчетаВНастройкахПроводок = Выборка.СчетаУчетаВНастройкахПроводок;
			НоваяСтрока.ОписаниеТиповОбъектНастройки = ОписаниеТиповПоПолномуИмениОбъекта(Выборка.ИсточникОбъектовНастройки);
			НоваяСтрока.ОписаниеТиповДетальнойНастройки = ОписаниеТиповПоПолномуИмениОбъекта(Выборка.ИсточникДетальныхНастроек);
			НоваяСтрока.ОтборОбъектовНастройки = ОтборКомпоновкиИзХранилищаНастроек(Выборка.ОтборОбъектовНастройки);
			НоваяСтрока.ПутиКДаннымСубконто = Выборка.ПутиКДаннымСубконто.Выгрузить();
			НоваяСтрока.РесурсыУпр = Выборка.РесурсыУпр.Выгрузить();
			НоваяСтрока.РесурсыРегл = Выборка.РесурсыРегл.Выгрузить();
			НоваяСтрока.РесурсыВал = Выборка.РесурсыВал.Выгрузить();
			НоваяСтрока.РесурсыКоличество = Выборка.РесурсыКоличество.Выгрузить();
			
			Если НоваяСтрока.ИсточникДанных = ДвиженияПрочиеАктивыПассивы Тогда
				Если НоваяСтрока.ОтборДанных.Элементы.Количество() = 0 Тогда
					НовыйЭлемент = НоваяСтрока.ОтборДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статья");
					НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлемент.ПравоеЗначение = НоваяСтрока.ОбъектУчета;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОбъектовУчета.Индексы.Добавить("ОбъектУчета");
	ОписаниеОбъектовУчета.Индексы.Добавить("ИсточникДанных");
	
	Возврат ОписаниеОбъектовУчета;
	
КонецФункции

// Возвращает структуру со свойствами переданного объекта финансового учета.
// 
// Параметры:
//  ОбъектУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - объект финансового учета
// 
// Возвращаемое значение:
//  Неопределено - объект учета не найден,
//  Структура:
//  * ОбъектУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Ссылка объекта финансового учета
//  * ИсточникДанных - Строка - Имя регистра накопления, в котором ведется учет по объекту фин.учета
//  * ОтборДанных - ОтборКомпоновкиДанных - Отбор данных регистра по объекту фин.учета
//  * УсловиеДебет - Строка - Условие на языке запросов для определения признака дебета движения. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * УсловиеКредит - Строка - Условие на языке запросов для определения признака кредита движения. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутиКДаннымСубконто - Соответствие из КлючИЗначение - Уточнение путей выборки субконто. Указывается в случае некорректного результата подбора значения субконто по источникам субконто регистра:
//   ** Ключ - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Вид субконто
//   ** Значение - Строка - Путь выборки значения субконто
//  * КорИсточникиДанных - Массив из Строка - Массив строк с именами регистров накопления, в которых ведется учет корреспондирующих объектов учета. Применяется для регистра Выручка.
//  * НесобственныеЦенности - Булево - Признак учета в объекте несобственных подконтрольных ценностей
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево - Данные объекта учета делятся на краткосрочные и долгосрочные, признак транслируется из источника данных.
//  * СчетаУчетаВНастройкахПроводок - Булево - Признак указания счетов учета в настройках проводок
//  * ОписаниеТиповОбъектНастройки - ОписаниеТипов - описание типов объекта настройки
//  * ОписаниеТиповДетальнойНастройки - ОписаниеТипов - описание типов объекта детальной настройки
//  * ОтборОбъектовНастройки - ОтборКомпоновкиДанных - отбор объектов настройки
//  * УчетНДС - Булево - Признак учета в объекте сумм НДС
//  * УчетСНДС - Булево - Признак учета в объекте сумм с НДС.
//
Функция ОписаниеОбъектаФинансовогоУчета(ОбъектУчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиУчета = НастройкиФинансовогоУчета();
	Для Каждого КлючИЗначение Из НастройкиУчета Цикл
		НастройкиУчета[КлючИЗначение.Ключ] = Истина;
	КонецЦикла;
	
	ОписаниеОбъектовУчета = ОписаниеОбъектовФинансовогоУчета(НастройкиУчета,, ОбъектУчета);
	
	Если ОписаниеОбъектовУчета.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеОбъектаУчета = Новый Структура();
	
	Для Каждого Колонка Из ОписаниеОбъектовУчета.Колонки Цикл
		Если Колонка.Имя = "ПутиКДаннымСубконто" Тогда
			ПутиКДаннымСубконто = Новый Соответствие();
			Для Каждого СтрокаТаблицы Из ОписаниеОбъектовУчета[0][Колонка.Имя] Цикл
				ПутиКДаннымСубконто.Вставить(СтрокаТаблицы.ВидСубконто, СтрокаТаблицы.ПутьКДанным);
			КонецЦикла;
			ОписаниеОбъектаУчета.Вставить(Колонка.Имя, ПутиКДаннымСубконто);
		ИначеЕсли НЕ Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			ОписаниеОбъектаУчета.Вставить(Колонка.Имя, ОписаниеОбъектовУчета[0][Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеОбъектаУчета;
	
КонецФункции

// Возвращает дерево объектов финансового учета со свойствами для представления в формах. Состав
// объектов учета управляется передаваемыми настройками учета и признаком наличия счетов в настройках.
// 
// Параметры:
//  НастройкиУчета - см. НастройкиФинансовогоУчета
//  СоСчетамиВНастройках - Булево - Истина - только объекты учета со счетами в настройках проводок, Ложь - все
//  ОбъектыУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, Массив из ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - статьи для отбора при необходимости
// 
// Возвращаемое значение:
//  см. НовоеДеревоОбъектовФинансовогоУчета
//
Функция ДеревоОбъектовФинансовогоУчета(НастройкиУчета, СоСчетамиВНастройках = Ложь, ОбъектыУчета = Неопределено) Экспорт
	
	Запрос = ЗапросОбъектовФинансовогоУчета(НастройкиУчета, СоСчетамиВНастройках, ОбъектыУчета);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляВыборки", "ИСТИНА");
	Запрос.Текст = Запрос.Текст + "
	|ИТОГИ
	|	МИНИМУМ(НесобственныеЦенности)
	|ПО
	|	Родитель
	|";
	
	Результат = Запрос.Выполнить();
	ВыборкаРодитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоОбъектовУчета = НовоеДеревоОбъектовФинансовогоУчета();
	СтрокиДереваКУдалению = Новый Массив;
	
	Пока ВыборкаРодитель.Следующий() Цикл
		НоваяГруппа = ДеревоОбъектовУчета.Строки.Добавить();
		НоваяГруппа.ЭтоГруппа = Истина;
		НоваяГруппа.ОбъектУчета = ВыборкаРодитель.Родитель;
		НоваяГруппа.НесобственныеЦенности = ВыборкаРодитель.НесобственныеЦенности;
		
		Выборка = ВыборкаРодитель.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ИспользованиеСтатьиПоФункциональнымОпциям(Выборка) Тогда
				Если ПустаяСтрока(НоваяГруппа.Представление) Тогда
					НоваяГруппа.Представление = Выборка.РодительПредставление;
				КонецЕсли;
				
				НоваяСтрока = НоваяГруппа.Строки.Добавить();
				НоваяСтрока.ОбъектУчета = Выборка.ОбъектУчета;
				НоваяСтрока.Представление = Выборка.ОбъектУчетаПредставление;
				НоваяСтрока.ИсточникДанных = Выборка.ИсточникДанных;
				НоваяСтрока.НесобственныеЦенности = Выборка.НесобственныеЦенности;
				НоваяСтрока.ВыделениеДолгосрочныхАктивовОбязательств = Выборка.ВыделениеДолгосрочныхАктивовОбязательств;
				НоваяСтрока.ОписаниеТиповОбъектНастройки = ОписаниеТиповПоПолномуИмениОбъекта(Выборка.ИсточникОбъектовНастройки);
				НоваяСтрока.ОписаниеТиповДетальнойНастройки = ОписаниеТиповПоПолномуИмениОбъекта(Выборка.ИсточникДетальныхНастроек);
				НоваяСтрока.ОтборОбъектовНастройки = ОтборКомпоновкиИзХранилищаНастроек(Выборка.ОтборОбъектовНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(НоваяГруппа.Представление) Тогда
			СтрокиДереваКУдалению.Добавить(НоваяГруппа);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДерева Из СтрокиДереваКУдалению Цикл
		ДеревоОбъектовУчета.Строки.Удалить(СтрокаДерева);
	КонецЦикла;
	
	Возврат ДеревоОбъектовУчета;
	
КонецФункции

// Возвращает представление объекта по переданному описанию типов
// 
// Параметры:
//  ОписаниеТиповОбъекта - ОписаниеТипов - описание типов объекта
// 
// Возвращаемое значение:
//  Строка - описание объекта на основании представлений метаданных
//
Функция ЗаголовокОбъектаПоОписаниюТипов(ОписаниеТиповОбъекта) Экспорт
	
	ПредставленияОбъекта = Новый Массив();
	
	Для каждого Тип Из ОписаниеТиповОбъекта.Типы() Цикл
		МетаданныеОбъекта =  Метаданные.НайтиПоТипу(Тип); 
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) И МетаданныеОбъекта.ПредставлениеОбъекта <> "" Тогда
			ПредставленияОбъекта.Добавить(МетаданныеОбъекта.ПредставлениеОбъекта);
		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта) И МетаданныеОбъекта.ПредставлениеОбъекта <> "" Тогда
			ПредставленияОбъекта.Добавить(МетаданныеОбъекта.ПредставлениеОбъекта);
		ИначеЕсли МетаданныеОбъекта <> Неопределено Тогда
			ПредставленияОбъекта.Добавить(МетаданныеОбъекта.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияОбъекта, ",");
	
КонецФункции

// Инициализирует компоновщик настроек запросом к источнику данных.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
//  ИсточникДанных - Строка - имя регистра накопления
//  ПараметрыОтраженияВУчете - см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//  ИдентификаторФормы - УникальныйИдентификатор, Строка - уникальный идентификатор формы или адрес во временном хранилище.
//  	Уникальный идентификатор передается когда КомпоновщикНастроек является реквизитом формы.
//  	Адрес во временном хранилище передается КомпоновщикНастроек и адрес схемы компоновки данных являются реквизитами формы.
//
Процедура ИнициализироватьКомпоновщикНастроекИсточникомДанных(КомпоновщикНастроек,
	ИсточникДанных, ПараметрыОтраженияВУчете = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	Если НЕ ПустаяСтрока(ИсточникДанных) Тогда
		Если ПараметрыОтраженияВУчете = Неопределено Тогда
			МенеджерРегистра = РегистрыНакопления[ИсточникДанных]; // РегистрНакопленияМенеджер -
			ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
		КонецЕсли;
		
		ИсточникиАналитики = ПараметрыОтраженияВУчете.ИсточникиАналитики;
		ПоляОтбораДвижений = ПараметрыОтраженияВУчете.ПоляОтбораДвижений;
		
		ПоляВыборки = Новый Массив();
		ПоляОтбора = Новый Массив();
		
		Для каждого КлючИЗначение Из ИсточникиАналитики Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ОписаниеПоля = КлючИЗначение.Значение; 
			ПоляВыборки.Добавить(ОписаниеПоля.ПутьКДанным + " КАК " + ИмяПоля); //@query-part
		КонецЦикла;
		
		Для каждого КлючИЗначение Из ПоляОтбораДвижений Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ОписаниеПоля = КлючИЗначение.Значение; 
			ТипПримитивный = ОписаниеПримитивныхТипов().СодержитТип(ОписаниеПоля.Тип.Типы()[0]);
			ПоляОтбора.Добавить(ОписаниеПоля.ПутьКДанным + ?(ТипПримитивный, "", ".*") + " КАК " + ИмяПоля); //@query-part
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ПоляВыборки
		|ИЗ
		|	&ИмяТаблицыРегистра КАК ТаблицаРегистра
		|{ГДЕ
		|	&ПоляОтбора
		|}";
		
		Разделитель = "," + Символы.ПС +Символы.Таб;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, Разделитель));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОтбора", СтрСоединить(ПоляОтбора, Разделитель));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыРегистра", "РегистрНакопления." + ИсточникДанных);
		
		НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
		НаборДанных.Запрос = ТекстЗапроса;
		
		Для каждого КлючИЗначение Из ИсточникиАналитики Цикл
			ОписаниеПоля = КлючИЗначение.Значение; // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ОписаниеПоляРегистра
			НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = КлючИЗначение.Ключ;
			НовоеПоле.ПутьКДанным = ОписаниеПоля.ПутьКДанным;
			НовоеПоле.Заголовок = ОписаниеПоля.Заголовок;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из ПоляОтбораДвижений Цикл
			ОписаниеПоля = КлючИЗначение.Значение; // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ОписаниеПоляРегистра
			Если НаборДанных.Поля.Найти(ОписаниеПоля.ПутьКДанным) = Неопределено Тогда
				НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				НовоеПоле.Поле = КлючИЗначение.Ключ;
				НовоеПоле.ПутьКДанным = ОписаниеПоля.ПутьКДанным;
				НовоеПоле.Заголовок = ОписаниеПоля.Заголовок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторФормы = Неопределено Тогда
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Иначе
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ИдентификаторФормы);
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
КонецПроцедуры

// Инициализирует компоновщик настроек запросом к источнику объектов настройки.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
//  ПолноеИмяОбъектаНастройки - Строка - полное имя источника объектов настройки
//  МетаданныеОбъектаНастройки - ОбъектМетаданных - метаданные источника объектов настройки
//  ИдентификаторФормы - УникальныйИдентификатор, Строка - уникальный идентификатор формы или адрес во временном хранилище.
//  	Уникальный идентификатор передается когда КомпоновщикНастроек является реквизитом формы.
//  	Адрес во временном хранилище передается КомпоновщикНастроек и адрес схемы компоновки данных являются реквизитами формы.
//
Процедура ИнициализироватьКомпоновщикНастроекОбъектомНастройки(КомпоновщикНастроек,
	ПолноеИмяОбъектаНастройки, МетаданныеОбъектаНастройки = Неопределено, ИдентификаторФормы = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	Если НЕ ПустаяСтрока(ПолноеИмяОбъектаНастройки) Тогда
		Если МетаданныеОбъектаНастройки = Неопределено Тогда
			МетаданныеОбъектаНастройки = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаНастройки);
		КонецЕсли;
		
		ЭтоОбъектСсылочногоТипа = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъектаНастройки);
		
		ПоляВыборки = Новый Массив();
		ПоляОтбора = Новый Массив();
		
		Для Каждого Реквизит Из МетаданныеОбъектаНастройки.СтандартныеРеквизиты Цикл
			ИмяПоля = Реквизит.Имя;
			ТипПоля = Реквизит.Тип; 
			ТипПримитивный = ОписаниеПримитивныхТипов().СодержитТип(ТипПоля.Типы()[0]);
			ПоляВыборки.Добавить(ИмяПоля + " КАК " + ИмяПоля); //@query-part
			ПоляОтбора.Добавить(ИмяПоля + ?(ТипПримитивный, "", ".*") + " КАК " + ИмяПоля); //@query-part
		КонецЦикла;
		
		Если ЭтоОбъектСсылочногоТипа Тогда
			Для Каждого Реквизит Из МетаданныеОбъектаНастройки.Реквизиты Цикл
				ИмяПоля = Реквизит.Имя;
				ТипПоля = Реквизит.Тип; 
				ТипПримитивный = ОписаниеПримитивныхТипов().СодержитТип(ТипПоля.Типы()[0]);
				ПоляВыборки.Добавить(ИмяПоля + " КАК " + ИмяПоля); //@query-part
				ПоляОтбора.Добавить(ИмяПоля + ?(ТипПримитивный, "", ".*") + " КАК " + ИмяПоля); //@query-part
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ПоляВыборки
		|ИЗ
		|	&ИмяТаблицыОбъекта КАК ТаблицаОбъекта
		|{ГДЕ
		|	&ПоляОтбора
		|}";
		
		Разделитель = "," + Символы.ПС +Символы.Таб;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, Разделитель));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОтбора", СтрСоединить(ПоляОтбора, Разделитель));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыОбъекта", ПолноеИмяОбъектаНастройки);
		
		НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
		НаборДанных.Запрос = ТекстЗапроса;
		
		Для Каждого Реквизит Из МетаданныеОбъектаНастройки.СтандартныеРеквизиты Цикл
			НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = Реквизит.Имя;
			НовоеПоле.ПутьКДанным = Реквизит.Имя;
			НовоеПоле.Заголовок = Реквизит.Синоним;
		КонецЦикла;
		
		Если ЭтоОбъектСсылочногоТипа Тогда
			Для Каждого Реквизит Из МетаданныеОбъектаНастройки.Реквизиты Цикл
				НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				НовоеПоле.Поле = Реквизит.Имя;
				НовоеПоле.ПутьКДанным = Реквизит.Имя;
				НовоеПоле.Заголовок = Реквизит.Синоним;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторФормы = Неопределено Тогда
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Иначе
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ИдентификаторФормы);
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			Если ЭтоОбъектФинансовогоУчета(Параметры.Ключ) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаОбъектаУчета";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		Если Параметры.Свойство("ОбъектыФинансовогоУчета") И Параметры.ОбъектыФинансовогоУчета = Истина Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораОбъектаУчета";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ДоходыИРасходыСервер.ОбработкаПолученияДанныхВыбораПВХСтатьиАктивовПассивов(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует компоновщик настроек запросом к именам функциональных опций.
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
//  ФункциональныеОпции - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция - перечень функциональных опций, влияющих на использование статьи:
//   * ИмяФункциональнойОпции - Строка - имя функциональной опции
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы. Передается когда КомпоновщикНастроек является реквизитом формы
//
Процедура ИнициализироватьКомпоновщикНастроекФункциональнымиОпциями(КомпоновщикНастроек,
	ФункциональныеОпции, ИдентификаторФормы = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	Если ЗначениеЗаполнено(ФункциональныеОпции) Тогда
		МетаФункциональныеОпции = Метаданные.ФункциональныеОпции;
		
		ПоляВыборки = Новый Массив();
		
		Для Каждого СтрокаОпции Из ФункциональныеОпции Цикл
			ИмяПоля = СтрокаОпции.ИмяФункциональнойОпции;
			ПоляВыборки.Добавить("ИСТИНА КАК " + ИмяПоля); //@query-part
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ПоляВыборки
		|{ГДЕ
		|	&ПоляВыборки
		|}";
		
		Разделитель = "," + Символы.ПС + Символы.Таб;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, Разделитель));
		
		НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
		НаборДанных.Запрос = ТекстЗапроса;
		
		Для Каждого СтрокаОпции Из ФункциональныеОпции Цикл
			НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = СтрокаОпции.ИмяФункциональнойОпции;
			НовоеПоле.ПутьКДанным = СтрокаОпции.ИмяФункциональнойОпции;
			НовоеПоле.Заголовок = МетаФункциональныеОпции[СтрокаОпции.ИмяФункциональнойОпции].Синоним;
		КонецЦикла;
	КонецЕсли;
	
	Если ИдентификаторФормы = Неопределено Тогда
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Иначе
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ИдентификаторФормы);
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
КонецПроцедуры

Функция ЭтоПользовательскаяСтатья(СтатьяАктивовПассивов) Экспорт
	
	Если ТипЗнч(СтатьяАктивовПассивов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтатьяАктивовПассивов, "Предопределенный");
	Иначе
		ЗначенияРеквизитов = СтатьяАктивовПассивов;
	КонецЕсли;
	
	Возврат НЕ ЗначенияРеквизитов.Предопределенный;
	
КонецФункции

Функция ЭтоСтатьяУправленческогоБаланса(СтатьяАктивовПассивов) Экспорт
	
	Если ТипЗнч(СтатьяАктивовПассивов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтатьяАктивовПассивов, "АктивПассив,Вид,ИмяПредопределенныхДанных,Предопределенный");
	Иначе
		ЗначенияРеквизитов = СтатьяАктивовПассивов;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИмяПредопределенныхДанных = "ЗаймыВыданные"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "Налоги"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "ОплатаТруда" Тогда
		Возврат Истина;
	Иначе
		Возврат ЗначенияРеквизитов.Предопределенный
			И НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.Вид)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.АктивПассив);
	КонецЕсли;
	
КонецФункции

Функция ЭтоОбъектФинансовогоУчета(СтатьяАктивовПассивов) Экспорт
	
	Если ТипЗнч(СтатьяАктивовПассивов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтатьяАктивовПассивов, "АктивПассив,Вид,ИмяПредопределенныхДанных,Предопределенный");
	Иначе
		ЗначенияРеквизитов = СтатьяАктивовПассивов;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИмяПредопределенныхДанных = "РасчетыПоВыделенномуИмуществу"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "РасчетыСФилиалами"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "НДСПоОтгрузкамБезПереходаПраваСобственности"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "РезервыПоВознаграждениям"
	 ИЛИ ЗначенияРеквизитов.ИмяПредопределенныхДанных = "РезервыПоСтраховымВзносам" Тогда
		Возврат Истина;
	Иначе
		Возврат ЗначенияРеквизитов.Предопределенный
			И ЗначениеЗаполнено(ЗначенияРеквизитов.Вид)
			И НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.АктивПассив);
	КонецЕсли;
	
КонецФункции

Функция ИспользованиеСтатьиПоФункциональнымОпциям(СтатьяАктивовПассивов, КомпоновщикНастроек = Неопределено) Экспорт
	
	Если ТипЗнч(СтатьяАктивовПассивов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		РеквизитыСтатьи = Новый Массив();
		РеквизитыСтатьи.Добавить("ФункциональныеОпции");
		Если КомпоновщикНастроек = Неопределено Тогда
			РеквизитыСтатьи.Добавить("СвязиФункциональныхОпций");
		КонецЕсли;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтатьяАктивовПассивов, СтрСоединить(РеквизитыСтатьи, ","));
		ФункциональныеОпции = ЗначенияРеквизитов.ФункциональныеОпции.Выгрузить();
		Если КомпоновщикНастроек = Неопределено Тогда
			СвязиФункциональныхОпций = ЗначенияРеквизитов.СвязиФункциональныхОпций;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтатьяАктивовПассивов) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ФункциональныеОпции = СтатьяАктивовПассивов.ФункциональныеОпции.Выгрузить();
		СвязиФункциональныхОпций = СтатьяАктивовПассивов.СвязиФункциональныхОпций;
	Иначе
		ФункциональныеОпции = СтатьяАктивовПассивов.ФункциональныеОпции;
		Если КомпоновщикНастроек = Неопределено Тогда
			СвязиФункциональныхОпций = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтатьяАктивовПассивов.Ссылка, "СвязиФункциональныхОпций");
		КонецЕсли;
	КонецЕсли;
	
	Если ФункциональныеОпции.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		ИнициализироватьКомпоновщикНастроекФункциональнымиОпциями(КомпоновщикНастроек, ФункциональныеОпции);
		НастройкиСвязиФункциональныхОпций = СвязиФункциональныхОпций.Получить();
		Если ТипЗнч(НастройкиСвязиФункциональныхОпций) = Тип("НастройкиКомпоновкиДанных") Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСвязиФункциональныхОпций);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользованиеРазделаУчетаПоФункциональнымОпциям(КомпоновщикНастроек.Настройки.Отбор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеЭлементовНачальнымиДанными

Функция КоллекцияЛогическогоСложения()
	
	Возврат Новый Массив();
	
КонецФункции

Функция КоллекцияЛогическогоУмножения()
	
	Возврат Новый Соответствие();
	
КонецФункции

Функция ОписаниеПримитивныхТипов()
	
	Возврат Новый ОписаниеТипов("Строка, Число, Дата, Булево, Тип, Неопределено, УникальныйИдентификатор");
	
КонецФункции

Процедура ЗаполнитьОтборИсточникаДанных(Элемент, ОписаниеОтбора)
	
	Если НЕ (ЗначениеЗаполнено(Элемент.ИсточникДанных) И ЗначениеЗаполнено(ОписаниеОтбора)) Тогда
		Элемент.ОтборДанных = Неопределено;
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	ИнициализироватьКомпоновщикНастроекИсточникомДанных(КомпоновщикНастроек, Элемент.ИсточникДанных);
	
	ЗаполнитьОтборПоОписанию(КомпоновщикНастроек.Настройки.Отбор, ОписаниеОтбора);
	Элемент.ОтборДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

Процедура ЗаполнитьОтборОбъектовНастройки(Элемент, ОписаниеОтбора)
	
	Если НЕ (ЗначениеЗаполнено(Элемент.ИсточникОбъектовНастройки) И ЗначениеЗаполнено(ОписаниеОтбора)) Тогда
		Элемент.ОтборДанных = Неопределено;
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	ИнициализироватьКомпоновщикНастроекОбъектомНастройки(КомпоновщикНастроек, Элемент.ИсточникОбъектовНастройки);
	
	ЗаполнитьОтборПоОписанию(КомпоновщикНастроек.Настройки.Отбор, ОписаниеОтбора);
	Элемент.ОтборОбъектовНастройки = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

Процедура ЗаполнитьОтборПоОписанию(НастройкиОтбора, ОписаниеОтбора, ЭтоПервыйУровень = Истина)
	
	ЭтоЛогическоеСложение = ТипЗнч(ОписаниеОтбора) = ТипЗнч(КоллекцияЛогическогоСложения());
	ЭтоЛогическоеУмножение = ТипЗнч(ОписаниеОтбора) = ТипЗнч(КоллекцияЛогическогоУмножения());
	
	Если ЭтоЛогическоеСложение И ОписаниеОтбора.Количество() > 1 Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			НастройкиОтбора.Элементы,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ИначеЕсли ЭтоЛогическоеУмножение И ОписаниеОтбора.Количество() > 1 И НЕ ЭтоПервыйУровень Тогда
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			НастройкиОтбора.Элементы,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	Иначе
		ГруппаОтбора = НастройкиОтбора;
	КонецЕсли;
	
	Если ЭтоЛогическоеСложение ИЛИ ЭтоЛогическоеУмножение Тогда
		Для Каждого ЭлементОписанияОтбора Из ОписаниеОтбора Цикл
			ЗаполнитьОтборПоОписанию(ГруппаОтбора, ЭлементОписанияОтбора, Ложь);
		КонецЦикла;
	Иначе
		ПолеОтбора = ОписаниеОтбора.Ключ;
		Если ТипЗнч(ОписаниеОтбора.Значение) = ТипЗнч(КоллекцияЛогическогоСложения()) Тогда
			ЗначениеОтбора = Новый СписокЗначений();
			ЗначениеОтбора.ЗагрузитьЗначения(ОписаниеОтбора.Значение);
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ЗначениеОтбора = ОписаниеОтбора.Значение;
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьФункциональнуюОпцию(ТаблицаОпций, ИмяФункциональнойОпции)
	
	НоваяСтрока = ТаблицаОпций.Добавить();
	НоваяСтрока.ИмяФункциональнойОпции = ИмяФункциональнойОпции;
	
КонецПроцедуры

Процедура ЗаполнитьСвязиФункциональныхОпций(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ФункциональныеОпции) ИЛИ Элемент.ФункциональныеОпции.Количество() = 0 Тогда
		Элемент.СвязиФункциональныхОпций = Неопределено;
		Возврат;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	ИнициализироватьКомпоновщикНастроекФункциональнымиОпциями(КомпоновщикНастроек, Элемент.ФункциональныеОпции);
	НастройкиОтбора = КомпоновщикНастроек.Настройки.Отбор;
	
	Если Элемент.ФункциональныеОпции.Количество() = 1 Тогда
		ИмяФункциональнойОпции = Элемент.ФункциональныеОпции[0].ИмяФункциональнойОпции;
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(НастройкиОтбора, ИмяФункциональнойОпции, Истина);
	
	
	ИначеЕсли Элемент.ИмяПредопределенныхДанных = "ОбязательстваПоНеотфактурованномуНДС" Тогда
		ГруппаОтбораИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(НастройкиОтбора.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		Для Каждого СтрокаТЧ Из Элемент.ФункциональныеОпции Цикл
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбораИ, СтрокаТЧ.ИмяФункциональнойОпции, Истина);
		КонецЦикла;
	Иначе
		ГруппаОтбораИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(НастройкиОтбора.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		Для Каждого СтрокаТЧ Из Элемент.ФункциональныеОпции Цикл
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбораИли, СтрокаТЧ.ИмяФункциональнойОпции, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Элемент.СвязиФункциональныхОпций = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРесурсов(ТаблицаРесурсов, ИменаРесурсов, Коэффициент = 1)
	
	МассивИменРесурсов = МассивИменОбъектов(ИменаРесурсов);
	
	Для Каждого ИмяРесурса Из МассивИменРесурсов Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.ИмяРесурса = ИмяРесурса;
		НоваяСтрока.Коэффициент = Коэффициент;
	КонецЦикла;
	
КонецПроцедуры


Функция РесурсыУчетаСобственныхЗапасовУпр()
	
	РесурсыУпр = Новый Массив();
	РесурсыУпр.Добавить("СтоимостьУпр");
	РесурсыУпр.Добавить("ДопРасходыУпр");
	РесурсыУпр.Добавить("ТрудозатратыУпр");
	РесурсыУпр.Добавить("ПостатейныеПостоянныеУпр");
	РесурсыУпр.Добавить("ПостатейныеПеременныеУпр");
	
	Возврат РесурсыУпр;
	
КонецФункции

Функция РесурсыУчетаСобственныхЗапасовРегл()
	
	РесурсыРегл = Новый Массив();
	РесурсыРегл.Добавить("СтоимостьРегл");
	РесурсыРегл.Добавить("ДопРасходыРегл");
	РесурсыРегл.Добавить("ТрудозатратыРегл");
	РесурсыРегл.Добавить("ПостатейныеПостоянныеРегл");
	РесурсыРегл.Добавить("ПостатейныеПеременныеРегл");
	
	Возврат РесурсыРегл;
	
КонецФункции

Функция РесурсыУчетаПринятыхЗапасовУпр()
	
	РесурсыУпр = Новый Массив();
	РесурсыУпр.Добавить("СтоимостьЗабалансовая");
	
	Возврат РесурсыУпр;
	
КонецФункции

Функция РесурсыУчетаПринятыхЗапасовРегл()
	
	РесурсыРегл = Новый Массив();
	РесурсыРегл.Добавить("СтоимостьЗабалансоваяРегл");
	
	Возврат РесурсыРегл;
	
КонецФункции


#КонецОбласти

#Область ОбращенияКОбъектамФинансовогоУчета

Функция ЗапросОбъектовФинансовогоУчета(НастройкиУчета, СоСчетамиВНастройках, ОбъектыУчета)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СтатьиАктивовПассивов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ СтатьиАктивовПассивов.Предопределенный
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|		КОГДА СтатьиАктивовПассивов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыССотрудниками)
	|		КОГДА СтатьиАктивовПассивов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ЗаймыВыданные)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыССотрудниками)
	|		КОГДА СтатьиАктивовПассивов.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыПоНалогам)
	|		ИНАЧЕ СтатьиАктивовПассивов.Родитель
	|	КОНЕЦ КАК Родитель
	|ПОМЕСТИТЬ втСтатьиАктивовПассивов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|ГДЕ
	|	НЕ СтатьиАктивовПассивов.ПометкаУдаления
	|	И СтатьиАктивовПассивов.Вид <> ЗНАЧЕНИЕ(Перечисление.ВидыСтатейАктивовПассивов.ПустаяСсылка)
	|	И &СчетаУчетаВНастройкахПроводок
	|	И &НесобственныеПодконтрольныеЦенности
	|	И &ИсключаемыеСтатьиАктивовПассивов
	|	И &ВыбираемыеСтатьиАктивовПассивов
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Родитель
	|
	|;
	|
	|ВЫБРАТЬ
	|	СтатьиАктивовПассивов.Ссылка КАК ОбъектУчета,
	|	СтатьиАктивовПассивов.Родитель КАК Родитель,
	|	ПРЕДСТАВЛЕНИЕ(СтатьиАктивовПассивов.Ссылка) КАК ОбъектУчетаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|		КОГДА СтатьиАктивовПассивов.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|			ТОГДА &ПрочиеАктивыПассивыПредставление
	|		ИНАЧЕ СтатьиАктивовПассивов.Родитель
	|	КОНЕЦ) КАК РодительПредставление,
	|	ВЫБОР
	|		КОГДА СтатьиАктивовПассивов.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|			ТОГДА &ПрочиеАктивыПассивыПорядок + РеквизитыСтатей.РеквизитДопУпорядочивания
	|		КОГДА СтатьиАктивовПассивов.Родитель <> РеквизитыСтатей.Родитель
	|			ТОГДА РеквизитыРодителей.РеквизитДопУпорядочивания + РеквизитыСтатей.РеквизитДопУпорядочивания
	|		ИНАЧЕ РеквизитыСтатей.РеквизитДопУпорядочивания
	|	КОНЕЦ КАК Порядок,
	|	РеквизитыСтатей.ИсточникДанных КАК ИсточникДанных,
	|	РеквизитыСтатей.НесобственныеПодконтрольныеЦенности КАК НесобственныеЦенности,
	|	РеквизитыСтатей.ВыделениеДолгосрочныхАктивовОбязательств КАК ВыделениеДолгосрочныхАктивовОбязательств,
	|	РеквизитыСтатей.СчетаУчетаВНастройкахПроводок КАК СчетаУчетаВНастройкахПроводок,
	|	РеквизитыСтатей.ИсточникОбъектовНастройки КАК ИсточникОбъектовНастройки,
	|	РеквизитыСтатей.ОтборОбъектовНастройки КАК ОтборОбъектовНастройки,
	|	РеквизитыСтатей.ИсточникДетальныхНастроек КАК ИсточникДетальныхНастроек,
	|	РеквизитыСтатей.ФункциональныеОпции КАК ФункциональныеОпции,
	|	РеквизитыСтатей.СвязиФункциональныхОпций КАК СвязиФункциональныхОпций,
	|	&ДополнительныеПоляВыборки
	|ИЗ
	|	втСтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК РеквизитыСтатей
	|	ПО СтатьиАктивовПассивов.Ссылка = РеквизитыСтатей.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК РеквизитыРодителей
	|	ПО СтатьиАктивовПассивов.Родитель = РеквизитыРодителей.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|";
	
	Если СоСчетамиВНастройках Тогда
		СчетаУчетаВНастройкахПроводок = "СтатьиАктивовПассивов.СчетаУчетаВНастройкахПроводок";
	Иначе
		СчетаУчетаВНастройкахПроводок = "ИСТИНА";
	КонецЕсли;
	
	Если НастройкиУчета.УчетНесобственныхЦенностей Тогда
		НесобственныеПодконтрольныеЦенности = "ИСТИНА";
	Иначе
		НесобственныеПодконтрольныеЦенности = "НЕ СтатьиАктивовПассивов.НесобственныеПодконтрольныеЦенности"
	КонецЕсли;
	
	Если НастройкиУчета.ФормированиеКорреспонденций
		И НастройкиУчета.УчетВыручкиБезНДС
		И НастройкиУчета.УчетВыручкиСНДС Тогда
		ИсключаемыеСтатьиАктивовПассивов = "ИСТИНА";
	Иначе
		СтрокиИсключаемыхЗначений = Новый Массив();
		РазделительСтрок = "," + Символы.ПС + Символы.Таб;
		
		Если НЕ НастройкиУчета.ФормированиеКорреспонденций Тогда
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСРозничнымиПокупателями)");
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыПоВзаимозачетамЗадолженности)");
		КонецЕсли;
		
		Если НЕ НастройкиУчета.УчетВыручкиБезНДС Тогда
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ВыручкаОтПродаж)");
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочаяВыручка)");
		КонецЕсли;
		
		Если НЕ НастройкиУчета.УчетВыручкиСНДС Тогда
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ВыручкаОтПродажСНДС)");
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочаяВыручкаСНДС)");
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НДССПродаж)");
			СтрокиИсключаемыхЗначений.Добавить("ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НДССПрочихПродаж)");
		КонецЕсли;
		
		ИсключаемыеСтатьиАктивовПассивов = "НЕ СтатьиАктивовПассивов.Ссылка В (
			|	" + СтрСоединить(СтрокиИсключаемыхЗначений, РазделительСтрок) + ")";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектыУчета) Тогда
		ВыбираемыеСтатьиАктивовПассивов = "СтатьиАктивовПассивов.Ссылка В (&ОбъектыУчета)";
	Иначе
		ВыбираемыеСтатьиАктивовПассивов = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетаУчетаВНастройкахПроводок", СчетаУчетаВНастройкахПроводок);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НесобственныеПодконтрольныеЦенности", НесобственныеПодконтрольныеЦенности);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыеСтатьиАктивовПассивов", ИсключаемыеСтатьиАктивовПассивов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыбираемыеСтатьиАктивовПассивов", ВыбираемыеСтатьиАктивовПассивов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПрочиеАктивыПассивыПорядок", 999999);
	Запрос.УстановитьПараметр("ПрочиеАктивыПассивыПредставление", НСтр("ru = 'Прочие активы и обязательства'"));
	Запрос.УстановитьПараметр("ОбъектыУчета", ОбщегоНазначенияУТКлиентСервер.Массив(ОбъектыУчета));
	
	Возврат Запрос;
	
КонецФункции

// Возвращает таблицу объектов финансового учета со свойствами для настройки счетов и обращения к данным.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ОбъектУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Ссылка объекта финансового учета
//  * ИсточникДанных - Строка - Имя регистра накопления, в котором ведется учет по объекту фин.учета
//  * ОтборДанных - ОтборКомпоновкиДанных - Отбор данных регистра по объекту фин.учета
//  * УсловиеДебет - Строка - Условие на языке запросов для определения признака дебета движения. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * УсловиеКредит - Строка - Условие на языке запросов для определения признака кредита движения. Указывается в случае отличия от правил отнесения движений в регистре или их отсутствия
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымНастройкаХозОперации - Строка - Путь выборки значения настройки хозяйственной операции. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки регистра. Указывается в случае отличия от аналогичного параметра регистра накопления
//  * ПутиКДаннымСубконто - ТаблицаЗначений - Уточнение путей выборки субконто. Указывается в случае некорректного результата подбора значения субконто по источникам субконто регистра:
//   ** ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные - Вид субконто
//   ** ПутьКДанным - Строка - Путь выборки значения субконто
//  * РесурсыУпр - ТаблицаЗначений - Строки с именами ресурсов, хранящих сумму операции в валюте управленческого учета. Указывается в случае отличия от аналогичного параметра регистра накопления:
//   ** ИмяРесурса - Строка - Имя ресурса регистра накопления
//   ** Коэффициент - Число - Коэффициент ресурса регистра накопления
//  * РесурсыРегл - ТаблицаЗначений - Строки с именами ресурсов, хранящих сумму операции в валюте регламентированного учета. Указывается в случае отличия от аналогичного параметра регистра накопления:
//   ** ИмяРесурса - Строка - Имя ресурса регистра накопления
//   ** Коэффициент - Число - Коэффициент ресурса регистра накопления
//  * РесурсыВал - ТаблицаЗначений - Строки с именами ресурсов, хранящих валютную сумму операции. Указывается в случае отличия от аналогичного параметра регистра накопления:
//   ** ИмяРесурса - Строка - Имя ресурса регистра накопления
//   ** Коэффициент - Число - Коэффициент ресурса регистра накопления
//  * РесурсыКоличество - ТаблицаЗначений - Строки с именами ресурсов, хранящих количество операции. Указывается в случае отличия от аналогичного параметра регистра накопления:
//   ** ИмяРесурса - Строка - Имя ресурса регистра накопления
//   ** Коэффициент - Число - Коэффициент ресурса регистра накопления
//  * КорИсточникиДанных - Массив из Строка - Массив строк с именами регистров накопления, в которых ведется учет корреспондирующих объектов учета. Применяется для регистра Выручка.
//  * НесобственныеЦенности - Булево - Признак учета в объекте несобственных подконтрольных ценностей
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево - Данные объекта учета делятся на краткосрочные и долгосрочные, признак транслируется из источника данных.
//  * СчетаУчетаВНастройкахПроводок - Булево - Признак указания счетов учета в настройках проводок
//  * ОписаниеТиповОбъектНастройки - ОписаниеТипов - описание типов объекта настройки
//  * ОписаниеТиповДетальнойНастройки - ОписаниеТипов - описание типов объекта детальной настройки
//  * ОтборОбъектовНастройки - ОтборКомпоновкиДанных - отбор объектов настройки
//  * УчетНДС - Булево - Признак учета в объекте сумм НДС
//  * УчетСНДС - Булево - Признак учета в объекте сумм с НДС
//  * ПризнакиУчетаКорреспонденций - ТаблицаЗначений - Описание корреспонденций текущего объекта фин.учета с другими объектами, возможных при выполнении определенных условий:
//   ** ОбъектУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Корреспондирующий объект финансового учета
//   ** ПризнакУчета - Строка - Наименование признака учета, управляющего корреспонденцией объектов фин.учета
//   ** Значение - Булево - Значение признака учета, при котором возможна корреспонденция объектов фин.учета
// 
Функция НоваяТаблицаОбъектовФинансовогоУчета()
	
	ТаблицаОбъектовУчета = Новый ТаблицаЗначений();
	ТаблицаОбъектовУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтборДанных", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	ТаблицаОбъектовУчета.Колонки.Добавить("УсловиеДебет", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("УсловиеКредит", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутьКДаннымОбъектНастройки", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутьКДаннымНаправлениеДеятельности", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутьКДаннымИдентификаторФинЗаписи", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутьКДаннымНастройкаХозОперации", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутьКДаннымИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПутиКДаннымСубконто", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОбъектовУчета.Колонки.Добавить("РесурсыУпр", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОбъектовУчета.Колонки.Добавить("РесурсыРегл", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОбъектовУчета.Колонки.Добавить("РесурсыВал", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОбъектовУчета.Колонки.Добавить("РесурсыКоличество", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаОбъектовУчета.Колонки.Добавить("КорИсточникиДанных", Новый ОписаниеТипов("Массив"));
	ТаблицаОбъектовУчета.Колонки.Добавить("НесобственныеЦенности", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ВыделениеДолгосрочныхАктивовОбязательств", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("СчетаУчетаВНастройкахПроводок", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОписаниеТиповОбъектНастройки", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОписаниеТиповДетальнойНастройки", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтборОбъектовНастройки", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	ТаблицаОбъектовУчета.Колонки.Добавить("УчетНДС", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("УчетСНДС", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ПризнакиУчетаКорреспонденций", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ТаблицаОбъектовУчета;
	
КонецФункции

// Возвращает дерево объектов финансового учета со свойствами для представления в формах.
// 
// Возвращаемое значение:
//  ДеревоЗначений:
//  * ЭтоГруппа - Булево -
//  * ОбъектУчета - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов -
//  * Представление - Строка -
//  * ИсточникДанных - Строка -
//  * НесобственныеЦенности - Булево -
//  * ВыделениеДолгосрочныхАктивовОбязательств - Булево -
//  * ОписаниеТиповОбъектНастройки - ОписаниеТипов -
//  * ОписаниеТиповДетальнойНастройки - ОписаниеТипов -
//  * ОтборОбъектовНастройки - ОтборКомпоновкиДанных -
//
Функция НовоеДеревоОбъектовФинансовогоУчета()
	
	ДеревоОбъектовУчета = Новый ДеревоЗначений();
	ДеревоОбъектовУчета.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	ДеревоОбъектовУчета.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектовУчета.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектовУчета.Колонки.Добавить("НесобственныеЦенности", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОписаниеТиповОбъектНастройки", Новый ОписаниеТипов("ОписаниеТипов"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОписаниеТиповДетальнойНастройки", Новый ОписаниеТипов("ОписаниеТипов"));
	ДеревоОбъектовУчета.Колонки.Добавить("ОтборОбъектовНастройки", Новый ОписаниеТипов("ОтборКомпоновкиДанных"));
	ДеревоОбъектовУчета.Колонки.Добавить("ВыделениеДолгосрочныхАктивовОбязательств", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоОбъектовУчета;
	
КонецФункции

Функция ИспользованиеРазделаУчетаПоФункциональнымОпциям(ЭлементОтбора)
	
	ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
	
	ЭтоЛогическоеСложение = ТипЭлементаОтбора = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭтоЛогическоеУмножение = ТипЭлементаОтбора = Тип("ОтборКомпоновкиДанных")
		ИЛИ (ТипЭлементаОтбора = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		И ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Если ЭтоЛогическоеУмножение Тогда
		РазделУчетаИспользуется = Истина;
		Для Каждого ПодчиненныйЭлемент Из ЭлементОтбора.Элементы Цикл
			Если НЕ ИспользованиеРазделаУчетаПоФункциональнымОпциям(ПодчиненныйЭлемент) Тогда
				РазделУчетаИспользуется = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЭтоЛогическоеСложение Тогда
		РазделУчетаИспользуется = Ложь;
		Для Каждого ПодчиненныйЭлемент Из ЭлементОтбора.Элементы Цикл
			Если ИспользованиеРазделаУчетаПоФункциональнымОпциям(ПодчиненныйЭлемент) Тогда
				РазделУчетаИспользуется = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЭлементаОтбора = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		РазделУчетаИспользуется = ПолучитьФункциональнуюОпцию(Строка(ЭлементОтбора.ЛевоеЗначение));
		ЭлементОтбора.ПравоеЗначение = РазделУчетаИспользуется;
	Иначе
		РазделУчетаИспользуется = Истина;
	КонецЕсли;
	
	Возврат РазделУчетаИспользуется;
	
КонецФункции


#КонецОбласти

Функция МассивИменОбъектов(ИменаОбъектов)
	
	Если ТипЗнч(ИменаОбъектов) = Тип("Строка") Тогда
		Возврат СтрРазделить(ИменаОбъектов, ",");
	Иначе
		Возврат ОбщегоНазначенияУТКлиентСервер.Массив(ИменаОбъектов);
	КонецЕсли;
	
КонецФункции

Функция ОписаниеТиповПоПолномуИмениОбъекта(ПолноеИмяОбъекта)
	
	Если ПустаяСтрока(ПолноеИмяОбъекта) Тогда
		Возврат Новый ОписаниеТипов();
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	ПустаяСсылка = МенеджерОбъекта.ПустаяСсылка();
	
	Возврат ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(ТипЗнч(ПустаяСсылка));
	
КонецФункции

Функция ОтборКомпоновкиИзХранилищаНастроек(ХранилищеНастроек)
	
	ОтборКомпоновкиДанных = Новый ОтборКомпоновкиДанных();
	
	НастройкиКомпоновкиДанных = ХранилищеНастроек.Получить();
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(ОтборКомпоновкиДанных, НастройкиКомпоновкиДанных.Отбор);
	КонецЕсли;
	
	Возврат ОтборКомпоновкиДанных;
	
КонецФункции

Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник)
	
	Для Каждого ЭлементОтбора Из ОтборИсточник.Элементы Цикл
		ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора)
	
	ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
	
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(ТипЭлементаОтбора);
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);

	Если ТипЭлементаОтбора = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, ЭлементОтбора);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьЭлементыНачальнымиДанными";
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c2228d01-4a2a-44ca-891a-e621c2762e30");
	Обработчик.Многопоточный = Истина;
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗарегистрироватьПредопределенныеЭлементыДляОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов плана видов характеристик ""Статьи активов и пассивов"" согласно заданным разработчиками настройкам.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.38";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dc409a16-cb15-6bfa-ae09-cf57019db878");
	Обработчик.Многопоточный = Истина;
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид статьи"" в статьях активов и пассивов,
		|созданных пользователями, на основании значения реквизита ""Актив/Пассив""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьПредопределенныеЭлементыДляОбновления(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "ПланВидовХарактеристик.СтатьиАктивовПассивов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ДополнительныеПараметры = Новый Структура;
	
	ОбновлениеИнформационнойБазы.ЗарегистрироватьПредопределенныеЭлементыДляОбновления(
		Параметры, Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыНачальнымиДанными(Параметры) Экспорт
	
	НастройкиЗаполнения = ОбновлениеИнформационнойБазы.НастройкиЗаполнения();
	ОбновлениеИнформационнойБазы.ЗаполнитьЭлементыНачальнымиДанными(Параметры, 
		Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов, НастройкиЗаполнения);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "ПланВидовХарактеристик.СтатьиАктивовПассивов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СтатьиАктивовПассивов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|ГДЕ
	|	НЕ СтатьиАктивовПассивов.ЭтоГруппа
	|	И НЕ СтатьиАктивовПассивов.Предопределенный
	|	И (СтатьиАктивовПассивов.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСтатейАктивовПассивов.ПустаяСсылка)
	|		ИЛИ СтатьиАктивовПассивов.ИсточникДанных = """")
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	СтатьиАктивовПассивов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СтатьиАктивовПассивов);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиАктивовПассивов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого СтатьяАктивовПассивов Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтатьяАктивовПассивов.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СтатьяАктивовПассивовОбъект = СтатьяАктивовПассивов.Ссылка.ПолучитьОбъект(); // ПланВидовХарактеристикОбъект.СтатьиАктивовПассивов
			
			Если СтатьяАктивовПассивовОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтатьяАктивовПассивов.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПользовательскаяСтатья(СтатьяАктивовПассивовОбъект) Тогда
				Если НЕ ЗначениеЗаполнено(СтатьяАктивовПассивовОбъект.Вид) Тогда
					Если СтатьяАктивовПассивовОбъект.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив Тогда
						СтатьяАктивовПассивовОбъект.Вид = Перечисления.ВидыСтатейАктивовПассивов.Актив;
					ИначеЕсли СтатьяАктивовПассивовОбъект.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив Тогда
						СтатьяАктивовПассивовОбъект.Вид = Перечисления.ВидыСтатейАктивовПассивов.Пассив;
					Иначе
						СтатьяАктивовПассивовОбъект.Вид = Перечисления.ВидыСтатейАктивовПассивов.АктивПассив;
					КонецЕсли;
				КонецЕсли;
				Если ПустаяСтрока(СтатьяАктивовПассивовОбъект.ИсточникДанных) Тогда
					СтатьяАктивовПассивовОбъект.ИсточникДанных = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.Имя;
				КонецЕсли;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяАктивовПассивовОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), СтатьяАктивовПассивов.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
