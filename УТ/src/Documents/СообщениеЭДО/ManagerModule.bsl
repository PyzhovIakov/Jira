#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ЭлектронныйДокумент)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ЭлектронныйДокумент)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ТипЭлементаРегламента");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Данные.ТипЭлементаРегламента, Данные.Номер, Данные.Дата);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает проштампованный файл.
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  
// Возвращаемое значение:
//  Структура - Структура результата получения проштампованного файла:
//  * ПредставлениеДокумента - ДвоичныеДанные - Данные проштампованного файла.
//                           - Неопределено - Если файл не удалось получить.
//  * Успех                  - Булево - Истина, если удалось получить двоичные данные, иначе - Ложь.
//  * ТекстОшибки            - Строка - Текст ошибки.
//
Функция ПроштампованныйФайл(СообщениеЭДО) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ПроштампованныйФайл(СообщениеЭДО);
	
КонецФункции

// Определяет, можно ли использовать предварительный просмотр в pdf для сообщения ЭДО
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  ПроверятьДоступностьВыводаПДФ_А3 - Булево - Проверять версию платформы для работы с просмотром файлов формата
//                                     PDF/A3. Требуется для того, чтобы не получать ошибку обновления динамического
//                                     списка. Следует передавать Истина, если проверка требуется.
// 
// Возвращаемое значение:
//  Булево - можно ли использовать предварительный просмотр в pdf.
//
Функция ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3 = Ложь) Экспорт
	
	Возврат ВизуализацияЭДОСлужебный.ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3);
	
КонецФункции

// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Структура:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
//  * ИдентификаторОрганизации - Строка
//  * ИдентификаторДокумента - Строка
Функция СвойстваПоФайлу(ФайлСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СообщениеЭДО.ТипЭлементаРегламента КАК ТипЭлементаРегламента,
		|	ЕСТЬNULL(ЭлектронныйДокументВходящийЭДО.ИдентификаторОрганизации,
		|		ЕСТЬNULL(ЭлектронныйДокументИсходящийЭДО.ИдентификаторОрганизации, """")) КАК ИдентификаторОрганизации,
		|	ЕСТЬNULL(ЭлектронныйДокументВходящийЭДО.ИдентификаторДокумента,
		|		ЕСТЬNULL(ЭлектронныйДокументИсходящийЭДО.ИдентификаторДокумента, """")) КАК ИдентификаторДокумента
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла = СообщениеЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка = &ФайлСообщения";
	
	Запрос.УстановитьПараметр("ФайлСообщения", ФайлСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Свойства = Новый Структура;
	Свойства.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Свойства.Вставить("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ПустаяСсылка());
	Свойства.Вставить("ИдентификаторОрганизации", "");
	Свойства.Вставить("ИдентификаторДокумента", "");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
Функция ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент) Экспорт
	Возврат ОсновнойФайлПоТипуЭлементаРегламента(
		ЭлектронныйДокумент, Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ТипЭлементаРегламента - ПеречислениеСсылка.ТипыЭлементовРегламентаЭДО
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
Функция ОсновнойФайлПоТипуЭлементаРегламента(ЭлектронныйДокумент, ТипЭлементаРегламента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипЭлементаРегламента", ТипЭлементаРегламента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщениеЭДО.ОсновнойФайл КАК ОсновнойФайл
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОсновнойФайл;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Параметры:
//  Сообщение - ДокументСсылка.СообщениеЭДО
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументИсходящийЭДО,ДокументСсылка.ЭлектронныйДокументВходящийЭДО
Функция ЭлектронныйДокумент(Сообщение) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ЭлектронныйДокумент");
КонецФункции

// Параметры:
//  СвойстваСообщения - Структура:
//  * Дата - Дата
//  * ВидСообщения - СправочникСсылка.ВидыДокументовЭДО
//  ЭтоНовый - Булево - Признак нового сообщения.
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеПоСвойствам(СвойстваСообщения, ЭтоНовый = Ложь) Экспорт
	Возврат СтрШаблон(НСтр("ru = '%1 от %2'"), СвойстваСообщения.ВидСообщения, Формат(СвойстваСообщения.Дата, "ДЛФ=D;"));
КонецФункции

#КонецОбласти

#КонецЕсли