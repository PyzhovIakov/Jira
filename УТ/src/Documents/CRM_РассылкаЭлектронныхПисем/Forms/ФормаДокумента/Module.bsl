
&НаКлиенте
Перем ТекущаяПозицияHTML;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Рассылки'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Получатели");
	КонецЕсли;
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	// Заполним список кодировок
	СписокКодировок = РаботаСФайламиСлужебный.Кодировки();
	
	Для Каждого Элемент Из СписокКодировок Цикл
		
		Элементы.Кодировка.СписокВыбора.Добавить(Элемент.Значение);
		
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	// Заполним список выбора учетных записей.
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора);
	
	ТранслитерироватьИменаФайловПриДобавленииВложений = 
		ХранилищеОбщихНастроек.Загрузить("ТранслитерироватьИменаФайловПриДобавленииВложений", 
		"ТранслитерироватьИменаФайловПриДобавленииВложений", Ложь);
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаHTML);
		ПриСозданииИПриЧтенииНаСервере();
		Если Не ЗначениеЗаполнено(Объект.СервисРассылки) Тогда
			Объект.СервисРассылки = CRM_ИнтеграцияССервисамиРассылок.СервисРассылкиПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	
	// АВТОТЕКСТ
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	ИдентификаторМДПисьма =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	ОбъектыАвтотекста.Добавить(ИдентификаторМДПисьма);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, ИдентификаторМДПисьма, , , Истина);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач,
		 ИдентификаторМДПисьма, , Истина,
		 Истина);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Истина);
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Ложь, , Истина);
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если Не ИспользоватьГруппыПользователей Тогда
		Элементы.ПользователиЗаполнитьПоГруппе.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	СформироватьСсылкиВложений();	
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	НастроитьФормуПоСервисуРассылки();
	
	Элементы.ОтправлятьПисьмаСразу.ТолькоПросмотр =
		НЕ (Объект.ДатаНачалаВыполненияРассылки < CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПриСозданииНаСервере(ЭтотОбъект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбновитьЗаголовокФормы();
	
	Элементы.ГруппаДополнительное.Видимость = Ложь;
	
	Если Объект.Запущена Или Объект.Завершена Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ТекстПисьмаHTML.Доступность = Ложь;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи

	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент");

	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииИПриЧтенииНаСервере();
	
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;	
	СформироватьСсылкиВложений();
	
	УстановитьСвойстваЭлементовФормы();
	
	CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	Элементы.ТекстПисьмаHTML.Вперед();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);

	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Маркетинг.РассылкаЭлектронныхПисем.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
		И Не (Объект.Запущена Или Объект.Завершена) Тогда
	
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Если HTMLДокумент <> Неопределено Тогда
			ТекстПисьмаПередЗакрытием = HTMLДокумент.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПередЗакрытием);
			Если ТекстПисьмаПередЗакрытием <> ТекстПисьмаПриОткрытии Тогда
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныРассылки")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_СпискиРассылок") Тогда
		Возврат;
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(Элементы.ТекстПисьмаHTML, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	ИначеЕсли ВыбранноеЗначение <> Неопределено Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		ОбработкаВыбораНаСервере(МассивПользователейГрупп);
		
	Иначе	
		
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПартнера" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Партнеры") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаКлиенты(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаКлиенты(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "Запись_Пользователи" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Пользователи") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Пользователи") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаКлиенты(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "ПроверкаПравописания_ИзмененТекст" И Источник = ЭтотОбъект Тогда
		ТекстПисьмаHTML = Параметр.Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
	CRM_НеЗадаватьВопросПередЗаписью = Истина;
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
						 , "Вложения", ,
						 Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	// Если рассылка не новая и уже есть черновики, тогда надо уточнить переносить ли изменения
	// содержания, вложений и отправителя в существующие черновики.
	Если НЕ Объект.Ссылка.Пустая() И ЕстьНеОтправленныеПисьма(Объект.Ссылка) И ( Объект.ЕстьИзменения
																			 ИЛИ CRM_ИзмененоСодержаниеРассылки 
																			 ИЛИ CRM_ИзмененОтправитель
																			 ИЛИ CRM_ИзмененыВложения
																			 ИЛИ CRM_ИзмененСоставПолучателей
																			 ИЛИ CRM_ИзмененаТема) Тогда
		Если НЕ CRM_НеЗадаватьВопросПередЗаписью Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Рассылка была изменена."
"Переформировать письма?';en='Mailing has been changed."
"Reform e-mails?'"), Режим, 0);
		Иначе
			Объект.ЕстьИзменения	= Ложь;
			CRM_ПеренестиИзменения	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ТекстПисьмаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстПисьмаHTML, КартинкиДобавленные, УникальныйИдентификатор);
	ТекстПисьмаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ЕстьИзменения	= Ложь;
		CRM_ПеренестиИзменения	= Истина;
	Иначе
		Объект.ЕстьИзменения	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.СервисРассылки <> Справочники.CRM_СервисыРассылок.SMTP И Вложения.Итог("Размер") > 1000000 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='При рассылке через сервис,
			| размер письма  не должен превышать 1 Мб.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не CRM_ЕстьПисьма Или CRM_ИзмененоСодержаниеРассылки Тогда
		
		CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстПисьмаHTMLПриЗаписи,
			ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые);
		
		ТекущийОбъект.ТекстHTML = ТекстПисьмаHTMLПриЗаписи;
		ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
		
		CRM_Объект_ТекстHTML    = ТекущийОбъект.ТекстHTML;
		
	Иначе
		ТекущийОбъект.ТекстHTML = CRM_Объект_ТекстHTML;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПередЗаписьюНаСервере(ТекущийОбъект, ЭтотОбъект);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ЕстьПисьма Или CRM_ИзмененоСодержаниеРассылки Тогда
		
		Письмо = ТекущийОбъект.Ссылка;
		
		Для Каждого УдаленнаяКартинка Из КартинкиУдаляемые Цикл
			ОбъектВложение = УдаленнаяКартинка.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		КартинкиУдаляемые.Очистить();
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		УдаленныеВложения.Очистить();
		
		// Создадим вложения для добавленных картинок.
		Для Каждого Строка Из КартинкиДобавленные Цикл
			
			ПараметрыВложения = Строка.Значение;
			
			ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		КартинкиДобавленные.Очистить();
		
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			
			Размер = 0;
			ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
			
			Если СтрокаТаблицыВложений.Расположение = 4 Тогда
				
				ПараметрыВложения = Новый Структура;
				ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
				ПараметрыВложения.Вставить("Размер", Размер);
				
				// из временного хранилища
				CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
				// из файла на сервере
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
				
				CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
					Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
				// перезаписать вложение
			КонецЕсли;
			
			СтрокаТаблицыВложений.Расположение = 0;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ДанныеПоПисьмам = ВведеныПисьмаНаОсновании(Объект.Ссылка);
	
	ЗаполнитьВложения();
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		ТекущийОбъект.ТекстHTML,
		Объект.Ссылка,
		УникальныйИдентификатор,
		ИдентификаторыКартинокПисьма);
	
	CRM_Объект_ТекстHTML = Объект.ТекстHTML;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Переносим изменения в ранее созданные письма, если требуется
	// создаем новые письма.
	Если CRM_ПеренестиИзменения Тогда
		ПолучитьНеОтправленныеПисьмаИСкорректировать(Объект.Ссылка, CRM_ИзмененоСодержаниеРассылки,
			 CRM_ИзмененОтправитель, CRM_ИзмененаТема,
			 CRM_ИзмененыВложения);
	КонецЕсли;
	
	Если Элементы.Вложения.Видимость Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Вложения);
	КонецЕсли;
	
	CRM_НеЗадаватьВопросПередЗаписью = Ложь;
	CRM_ПеренестиИзменения			 = Ложь;
	CRM_ИзмененоСодержаниеРассылки	 = Ложь;
	CRM_ИзмененОтправитель			 = Ложь;
	CRM_ИзмененыВложения			 = Ложь;
	CRM_ИзмененСоставПолучателей	 = Ложь;
	CRM_ИзмененаТема				 = Ложь;
	
	//ПриСозданииИПриЧтенииНаСервере();
	
	УстановитьСвойстваЭлементовФормы();
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	
	ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстПисьмаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Получатели Цикл
		ОповеститьОбИзменении(ТекСтрока.Письмо);
	КонецЦикла;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Маркетинг.РассылкаЭлектронныхПисем.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СервисРассылкиПриИзменении(Элемент)
	
	НастроитьФормуПоСервисуРассылки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, Нстр("ru='В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;	
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		Если Элементы.ТекстПисьмаHTML.Документ <> Неопределено Тогда
			ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		Иначе
			ТекстВПолеHTML = ТекстПисьмаПриОткрытии;
		КонецЕсли;
		ИзменитьПодпись(ТекстВПолеHTML, ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка			= Ложь;
		Объект.ОтправительПредставление	= ЭлементСписка.Представление;
		Модифицированность		= Истина;
		Если CRM_ЕстьПисьма Тогда
			CRM_ИзмененОтправитель	= Истина;
			Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
			УстановитьСвойстваЭлементовФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВыполненияРассылкиПриИзменении(Элемент)
	Если Объект.ДатаНачалаВыполненияРассылки > ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		Если Объект.ОтправлятьПисьмаСразу Тогда
			Объект.ОтправлятьПисьмаСразу = Ложь;
		КонецЕсли;
		Элементы.ОтправлятьПисьмаСразу.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОтправлятьПисьмаСразу.ТолькоПросмотр = Ложь ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенаПриИзменении(Элемент)
	Если Объект.Завершена Тогда
		Если НЕ Объект.Запущена Тогда
			Объект.Запущена = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.Запущена.ТолькоПросмотр =  Объект.Завершена;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПоСтатусуПисьма = Расшифровка;
	ОтборПоСтатусуПисьмаПриИзменении(Неопределено);
	Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаПолучателей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусуПисьмаПриИзменении(Элемент)
	СтруктураОтбора = Неопределено;
	Если ЗначениеЗаполнено(ОтборПоСтатусуПисьма) Тогда
		Если ТипЗнч(ОтборПоСтатусуПисьма) = Тип("Строка") Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура(Новый Структура("Доставлено", Истина));
		Иначе
			СтруктураОтбора = Новый ФиксированнаяСтруктура(Новый Структура("Статус", ОтборПоСтатусуПисьма));
		КонецЕсли;
	КонецЕсли;
	Элементы.Получатели.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененаТема	= Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаФорматированныйДокументПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВложенияПредставление = НСтр("ru='Добавить файл...'") Тогда
		ДобавитьВложение();		
	КонецЕсли;			
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьСсылкиВложений();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьПисьмаСразуПриИзменении(Элемент)
	Элементы.ДатаНачалаВыполненияРассылки.Видимость = НЕ Объект.ОтправлятьПисьмаСразу;
КонецПроцедуры

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриИзменении(Элемент)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLДокументСформирован(Элемент)
	
	ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML; 
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент);
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	УдалитьВложениеВыполнить();	
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПриИзмененииПолучателейПисем(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПолучателиПисьмо" Тогда 
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Письмо);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.Получатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.ПолучателиПартнер.ВыбиратьТип = Ложь;
		Модифицированность = Истина;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			ДобавитьВыбранноеЗначение(Элемент, ЭлементМассива, СтандартнаяОбработка);
		КонецЦикла;
	Иначе
		ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер, Строка(ТекДанные.Партнер), Строка(ТекДанные.КонтактноеЛицо)) + " <" 
					+ Адрес.Представление 
					+ ">";
				ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.Партнер)
		 И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		СписокАдресов = СформироватьСписокАдресов(ТекДанные.Партнер);
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Партнер) + " <" + Адрес.Представление + ">";
				ТекДанные.Принадлежность 		= Истина;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;		
	Иначе
		ТекДанные.Адрес					= "";
		ТекДанные.ПредставлениеАдреса	= "";
		ТекДанные.Принадлежность = Ложь;
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПолучателиПартнер.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер, Строка(ТекДанные.Партнер), Строка(ТекДанные.КонтактноеЛицо)) + " <" 
					+ Адрес.Представление 
					+ ">";
				ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиАдресЗавершениеВыбора", ЭтотОбъект, ТекДанные);
	СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
		 ТекДанные.Партнер,
		 ТекДанные.КонтактноеЛицо));
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите адрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресЗавершениеВыбора(ЭлементСписка, ТекДанные) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер, Строка(ТекДанные.Партнер), Строка(ТекДанные.КонтактноеЛицо)) + " <" 
			+ Адрес.Представление 
			+ ">";
		ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Партнер) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресПриИзменении(Элемент)
	РезультатПроверки =
		CRM_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымАдресом(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	Иначе
		ТекДанные = Элементы.Получатели.ТекущиеДанные;
		ТекДанные.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо),
			 Строка(ТекДанные.КонтактноеЛицо), Строка(ТекДанные.Партнер)) + " <" + ТекДанные.Адрес 
			+ ">";
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымАдресом(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Объект.Запущена = Истина;
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаВыполненияРассылки) Тогда
			Объект.ДатаНачалаВыполненияРассылки = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		Если Не Записать() Тогда
			Объект.Запущена = Ложь;
			Если Объект.ДатаНачалаВыполненияРассылки <= ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
				Объект.ДатаНачалаВыполненияРассылки = Дата(1, 1, 1);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если Не ЕстьОшибки Тогда
		Закрыть();
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	CRM_НеЗадаватьВопросПередЗаписью = (НЕ Объект.Ссылка.Пустая() И Модифицированность) ИЛИ Объект.ЕстьИзменения;
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность ИЛИ Объект.ЕстьИзменения Тогда
		Записать();
	КонецЕсли;
	
	// Объект записан в информационную базу.
	Если НЕ Объект.Ссылка.Пустая() Тогда
	
		Если НЕ CRM_ЕстьПисьма И СформироватьПисьмаНаСервере(Объект.Ссылка) Тогда
			CRM_ЕстьПисьма = Истина;
		КонецЕсли;
			
		Прочитать();
		УстановитьСвойстваЭлементовФормы();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Объект.Запущена = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаВыполненияРассылки) Тогда
			Объект.ДатаНачалаВыполненияРассылки = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		Если НЕ Записать() Тогда
			Объект.Запущена = Ложь;
			Если Объект.ДатаНачалаВыполненияРассылки <= ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
				Объект.ДатаНачалаВыполненияРассылки = Дата(1, 1, 1);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если Не ЕстьОшибки Тогда
		Состояние(НСтр("ru='Отправка электронных писем завершена'"));
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
	Прочитать();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	МассивКлиентовКонтактов = Новый Массив;
	Для каждого Получатель Из Объект.Получатели Цикл
		Если ЗначениеЗаполнено(Получатель.Партнер) И ТипЗнч(Получатель.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			МассивКлиентовКонтактов.Добавить(Получатель.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Получатель.КонтактноеЛицо) Тогда
			МассивКлиентовКонтактов.Добавить(Получатель.КонтактноеЛицо);
		КонецЕсли;
	КонецЦикла;
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач,
		 Новый Структура("Источник", ЭтотОбъект), ,
		 МассивКлиентовКонтактов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Фильтр = НСтр("ru = 'Документ HTML (*.html;*.htm)|*.html;*.htm'");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = Фильтр;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Результат[0];
	
	РазделительПути = ПолучитьРазделительПути();
	
	Файл = Новый Файл(ПолноеИмяФайла);
	КаталогФайла = Файл.Путь;
	Если Не СтрЗаканчиваетсяНа(КаталогФайла, РазделительПути) Тогда
		КаталогФайла = КаталогФайла + РазделительПути;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ДополнительныеПараметры.Вставить("РазделительПути", РазделительПути);
	Оповещение = Новый ОписаниеОповещения("ТекстовыйДокументЧтениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстовыйДокумент.НачатьЧтение(Оповещение, ПолноеИмяФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстовыйДокументЧтениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекстПисьмаHTML = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
	ТекстПисьмаHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПисьмаHTML, " ");
	
	ПутиККартинкам = ПутиККартинкамHTML(ТекстПисьмаHTML);
	Для Каждого ТекущийПуть Из ПутиККартинкам Цикл
		
		ПутьККартинке = ТекущийПуть;
		ФайлКартинка = Новый Файл(ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ТекущийПуть);
		ДополнительныеПараметрыПроверки.Вставить("КаталогФайла", КаталогФайла);
		ДополнительныеПараметрыПроверки.Вставить("РазделительПути", ДополнительныеПараметры.РазделительПути);
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПродолжение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		Если СтрНайти(ВРег(ДополнительныеПараметры.ПутьККартинке), ВРег("file://")) = 0 Тогда
			ТекстПисьмаHTML = СтрЗаменить(ТекстПисьмаHTML, ДополнительныеПараметры.ТекущийПуть, "file://" 
				+ ДополнительныеПараметры.ПутьККартинке);
		КонецЕсли;
		
	Иначе
		
		Если СтрНачинаетсяС(ДополнительныеПараметры.ПутьККартинке, ДополнительныеПараметры.РазделительПути) Тогда
			ДополнительныеПараметры.ПутьККартинке = Сред(ДополнительныеПараметры.ПутьККартинке, 2);
		КонецЕсли;
		
		ДополнительныеПараметры.ПутьККартинке = ДополнительныеПараметры.КаталогФайла + ДополнительныеПараметры.ПутьККартинке;
		ФайлКартинка = Новый Файл(ДополнительныеПараметры.ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ДополнительныеПараметры.ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ДополнительныеПараметры.ТекущийПуть);
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ТекстПисьмаHTML = СтрЗаменить(ТекстПисьмаHTML, ДополнительныеПараметры.ТекущийПуть, "file://" 
			+ ДополнительныеПараметры.ПутьККартинке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзШаблонаСервисаРассылки(Команда)
	
	МассивШаблонов = CRM_ИнтеграцияССервисамиРассылокВызовСервера.МассивШаблоновСервиса(Объект.СервисРассылки);
	Если МассивШаблонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныСервиса = Новый СписокЗначений;
	Для каждого ТекШаблон Из МассивШаблонов Цикл
		ШаблоныСервиса.Добавить(Строка(Формат(ТекШаблон.id, "ЧГ=0")), ТекШаблон.Title);
	КонецЦикла;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьИзШаблонаСервисаЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОповещениеЗавершения, ШаблоныСервиса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзШаблонаСервисаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШаблона = CRM_ИнтеграцияССервисамиРассылокВызовСервера.ШаблонСервиса(Объект.СервисРассылки,
		 ВыбранныйЭлемент.Значение);
	Объект.Тема = СтруктураШаблона.Тема;
	ТекстПисьмаHTML = СтруктураШаблона.ТекстПисьма;
	
	Модифицированность = Истина;
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСШаблонами

&НаКлиенте
Процедура ВыбратьШаблон(Команда)
	
	ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	ЗаполненТекстПисьма = ТекстПисьмаHTMLЗаполнен(ТекстВПолеHTML);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыбратьШаблонПродолжение", ЭтотОбъект);
	
	Если ЗаполненТекстПисьма Или Вложения.Количество() > 0 Тогда
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить("ЗаменитьТекстИВложения", "Заменить");
		КнопкиДиалогаВопрос.Добавить("ДополнитьТекстИВложения", "Дополнить");
		КнопкиДиалогаВопрос.Добавить("Отмена", "Отмена");
		
		ТекстВопроса = НСтр("ru='Как поступить с текущим текстом и вложениями?'");
		
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, КнопкиДиалогаВопрос, , , НСтр("ru='Заполнение из шаблона'"));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, "ЗаменитьТекстИВложения");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонПродолжение(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = "Отмена" Или Не ЗначениеЗаполнено(ОтветПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Действие", ОтветПользователя);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыбратьШаблонЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьТекстИВложения = (ДополнительныеПараметры.Действие = "ЗаменитьТекстИВложения");
	
	Шаблон = РезультатВыбора;
	ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	ЗаполнитьПоШаблону(ТекстВПолеHTML, ЗаменитьТекстИВложения);
	
	Модифицированность = Истина;
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	Элементы.Вложения.Видимость = (Вложения.Количество() > 0);
	
	Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаСодержания;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

#КонецОбласти

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	Элементы.ПоказатьДопФорматирование.Пометка = НЕ Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость = Элементы.ПоказатьДопФорматирование.Пометка;
КонецПроцедуры

#КонецОбласти

#Область Автотекст

&НаКлиенте
Процедура Подключаемый_ВставитьТэг(Команда)
	
	ИмяКоманды = Команда.Имя;
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	Если Лев(ИмяКоманды, 4) = "Тема" Тогда
		Объект.Тема = Объект.Тема + " " + Тэг;
	Иначе
		Кнопка = "insertText";
		Если Элементы.ТекстПисьмаHTML.Документ.queryCommandSupported(Кнопка) Тогда
			Элементы.ТекстПисьмаHTML.Документ.execCommand(Кнопка, Ложь, Тэг);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьТег(Команда)
	
	Если Прав(Команда.Имя, 4) = "Тема" Тогда
		АвтотекстТемы = Истина;
	Иначе
		АвтотекстТемы = Ложь;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_СоздатьТегЗавершение", ЭтотОбъект, АвтотекстТемы);
	CRM_АвтотекстКлиент.СоздатьТегАвтотекста(ЭтотОбъект, Команда, ОбъектыАвтотекста, , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьТегЗавершение(ТегАвтотекста, АвтотекстТемы) Экспорт
	
	ИмяКоманды = ДобавитьКомандуАвтотекста(ТегАвтотекста, АвтотекстТемы);
	Команда = Команды.Найти(ИмяКоманды);
	Если Команда <> Неопределено Тогда
		Подключаемый_ВставитьТэг(Команда);
	КонецЕсли;
	ИмяКоманды = ДобавитьКомандуАвтотекста(ТегАвтотекста, НЕ АвтотекстТемы);
	
КонецПроцедуры

#КонецОбласти

#Область СписокПолучателей

&НаКлиенте
Процедура ЗаполнитьПоСегменту(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Получатели.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаВыборСегмента", ПараметрыФормы,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		Сегмент							= Результат.Сегмент;
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиАдресами		= Результат.НеЗаполнятьСПустымиАдресами;
		ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		НеЗаполнятьОтписавшимисяОтРассылок = Результат.НеЗаполнятьОтписавшимисяОтРассылок;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Получатели.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчета(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Получатели.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаВыбораРезультатаОтчета",
		 ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиАдресами		= Результат.НеЗаполнятьСПустымиАдресами;
		НеЗаполнятьОтписавшимисяОтРассылок = Результат.НеЗаполнятьОтписавшимисяОтРассылок;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Получатели.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПартнеров";
	ДополнительныеДанные.ИмяСправочника = "Партнеры";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактнымиЛицами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляКонтактныхЛиц";
	ДополнительныеДанные.ИмяСправочника = "КонтактныеЛицаПартнеров";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПотенциальнымиКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПотенциальныхКлиентов";
	ДополнительныеДанные.ИмяСправочника = "CRM_ПотенциальныеКлиенты";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейПоСКД(Данные, ДополнительныеПараметры) Экспорт
	
	Если НЕ Данные.ОтборНастроен Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗаписи = Объект.Получатели.Количество() > 0;
	
	Если ЕстьЗаписи Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКДЗавершение", ЭтотОбъект, Данные);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Список получателей содержит записи. "
		"Очистить список получателей?';en='Tabular section already contains records. "
		"Clear tabular section?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПолучателейПоСКДЗавершение(Неопределено, Данные);
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейПоСКДЗавершение(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Форма") Тогда
		ДополнительныеПараметры.Удалить("Форма");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Оповещение") Тогда
		ДополнительныеПараметры.Удалить("Оповещение");
	КонецЕсли;
	
	ЭтоПартнеры = Ложь;
	Если ДополнительныеПараметры.Свойство("ИмяСправочника") Тогда
		ЭтоПартнеры = ДополнительныеПараметры.ИмяСправочника = "Партнеры";
	КонецЕсли;
	
	СписокСсылок = CRM_ОбщегоНазначенияКлиент.СписокПолучателей(ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Формирование списка заполнения'"), ,
		НСтр("ru = 'Список сформирован.'")
	);
		
	ВидКонтактнойИнформации      = ДополнительныеПараметры.ВидКонтактнойИнформации;
	НеЗаполнятьСПустымиАдресами  = ДополнительныеПараметры.НеЗаполнятьСПустымиАдресами;
	ТолькоОсновныеКонтактныеЛица = ?(ДополнительныеПараметры.Свойство("ТолькоОсновныеКонтактныеЛица"),
	                                 ДополнительныеПараметры.ТолькоОсновныеКонтактныеЛица,
	                                 Ложь);
	Если ДополнительныеПараметры.Свойство("НеЗаполнятьОтписавшимисяОтРассылок") Тогда
		НеЗаполнятьОтписавшимисяОтРассылок = ДополнительныеПараметры.НеЗаполнятьОтписавшимисяОтРассылок;
	КонецЕсли;
	ЗаполнитьТЧПоРезультатуСКД(СписокСсылок, ЭтоПартнеры);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиЗаполнитьПоСпискуРассылкиПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылкиПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиЗаполнитьПоСпискуРассылкиЗавершение",
				 ЭтотОбъект,
				 ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПолучателиЗаполнитьПоСпискуРассылкиЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылкиЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;												
	КонецЕсли;
	
	ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьПоМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, , , , ,
		 НовоеОповещение,
		 РежимОткрытия); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Список получателей содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(2, Нстр("ru='Заменить';en='Replace'"));
			КнопкиВопроса.Добавить(0, Нстр("ru='Дополнить';en='Add'"));
			КнопкиВопроса.Добавить(1, Нстр("ru='Отмена'"));			
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеПоМаркетинговойКампанииПослеВопроса",
				 ЭтотОбъект,
				 ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеПоМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнениеПоМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 1 Тогда
		Возврат;
	ИначеЕсли Результат = 2 Тогда
		Объект.Получатели.Очистить();
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);		
	ИначеЕсли Результат = 0 Тогда
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоМаркетинговойКампании(Кампания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиПервичногоИнтереса.Партнер КАК Партнер
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса = &Кампания";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для Каждого СтрокаМассива Из Результат Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер = СтрокаМассива;
			НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива);
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
				 НоваяСтрока.Партнер,
				 НоваяСтрока.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока.Адрес	= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
					 Строка(НоваяСтрока.Партнер), Строка(НоваяСтрока.КонтактноеЛицо)) + " <" 
					+ СписокАдресов[0].Значение.Представление 
					+ ">";				
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда			
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер = ?(ЗначениеЗаполнено(СтрокаМассива.Партнер), СтрокаМассива.Партнер, СтрокаМассива);
			Если ЗначениеЗаполнено(СтрокаМассива.Партнер) Тогда
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);				
			КонецЕсли;				
			СписокАдресов = СформироватьСписокАдресов(НоваяСтрока.Партнер);			
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= Строка(НоваяСтрока.Партнер) + " <" 
					+ СписокАдресов[0].Значение.Представление 
					+ ">";				
			КонецЕсли;			
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;	
	
	Если Результат.Количество() > 0 Тогда
		УдалитьДублиСтрок();							
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнениеУчастникамиМаркетинговойКампании(Кампания)

	Для Каждого СтрокаМассива Из Кампания.ПартнерыИКонтактныеЛица Цикл
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Партнер = СтрокаМассива.Партнер;
		НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива.Партнер);
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 НоваяСтрока.Партнер,
			 НоваяСтрока.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
			НоваяСтрока.ПредставлениеАдреса	= Строка(НоваяСтрока.Партнер) + " <" + СписокАдресов[0].Значение.Представление + ">";
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;
	
	Если Кампания.ПартнерыИКонтактныеЛица.Количество() > 0 Тогда
		УдалитьДублиСтрок();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайла(Команда)
	
	Если CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть() Тогда
	
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
		НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаЗавершение", ЭтотОбъект);
		ПараметрыФормы  = Новый Структура("РежимЗагрузкиВДокумент, ЗагрузкаВДокумент", Истина, "РассылкаЭлектронныхПисем");
		
		ОткрытьФорму("Обработка.CRM_ЗагрузкаДанныхИзФайла.Форма.ФормаИмпортаКлиентов", ПараметрыФормы, , , , ,
					 НовоеОповещение, РежимОткрытия);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Табличная часть содержит записи. Заменить или дополнить?'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'; en = 'Replace'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'; en = 'Add'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена';en='Cancel'"));
			
			ПараметрыОповещения	= Новый Структура("МассивЭлементов", Результат);
			НовоеОповещение		= Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗагрузкаКлиентов(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Получатели.Очистить();
		ЗагрузкаКлиентов(ДополнительныеПараметры.МассивЭлементов);
	ИначеЕсли Результат = 2 Тогда
		ЗагрузкаКлиентов(ДополнительныеПараметры.МассивЭлементов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентов(МассивЭлементов)
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер 		= ЭлементМассива.Партнер;
			НоваяСтрока.ПартнерСтрокой	= ЭлементМассива.ПартнерСтрокой;
			НоваяСтрока.КонтактноеЛицо	= ЭлементМассива.Контакт;
			НоваяСтрока.Адрес			= СокрЛП(ЭлементМассива.Почта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяТаблицы = "Получатели")
	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект, ИмяТаблицы);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Список получателей содержит записи. Продолжить?'"),
			 РежимДиалогаВопрос.ДаНет, ,
			 КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(Ответ, ИмяТаблицы) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяТаблицы].Очистить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	ОчиститьТабличнуюЧасть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдреса(Команда)
	
	ПроверитьАдресаПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыБезАдреса(Команда)
	
	УдалитьКонтактыБезАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОдинаковыеСтроки(Команда)
	
	УдалитьКонтактыСОдинаковымиАдресами();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьОдинаковыеСтроки(Команда)
	
	ВыделитьКонтактыСОдинаковымиАдресами();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	Если Команда.Имя = "ПодборКлиенты" Тогда
		
		ПараметрыФормы.Вставить("ПрограммноеОткрытие", Истина);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элементы.Получатели);
		
	ИначеЕсли Команда.Имя = "ПодборПользователи" Тогда
		
		Если ИспользоватьГруппыПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппПользователей",	Истина);
			ПараметрыФормы.Вставить("ВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		КонецЕсли;
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, Элементы.Получатели);
		
	ИначеЕсли Команда.Имя = "ПодборКонтактныеЛица" Тогда
		
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элементы.Получатели);
		
	ИначеЕсли Команда.Имя = "ПодборПотенциальныхКлиентов" Тогда
		
		ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора", ПараметрыФормы, Элементы.Получатели);
		
	ИначеЕсли Команда.Имя = "ПодборФизЛица" Тогда
		
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.Получатели);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиСПустымиАдресамиКлиенты(Команда)
	ОбновитьАдресаКлиенты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	
	ПодразделенияСУчетомИерархии = Ложь;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделениюВложенные(Команда)
	
	ПодразделенияСУчетомИерархии = Истина;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастникамиМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьУчастникамиМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, , , , ,
		 НовоеОповещение,
		 РежимОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастникамиМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru='Заменить'"));
			КнопкиВопроса.Добавить(2, Нстр("ru='Дополнить'"));
			КнопкиВопроса.Добавить(0, Нстр("ru='Заменить';en='Replace'"));
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеУчастникамиМаркетинговойКампанииПослеВопроса",
				 ЭтотОбъект,
				 ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеУчастникамиМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеУчастникамиМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Получатели.Очистить();
		ЗаполнениеУчастникамиМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	ИначеЕсли Результат = 2 Тогда
		ЗаполнениеУчастникамиМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиЗаполнитьПоГруппе(Команда)
	
	Если Не ИспользоватьГруппыПользователей Тогда
		ПоказатьПредупреждение(, НСтр("ru='Отключена настройка ""Использовать группы пользователей""!'"), 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ВыборГруппПользователей", Истина, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаЗаполнитьПоГруппе(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя)
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.ФормаСформироватьПисьма.Видимость = НЕ ТолькоПросмотр;
	
	Элементы.Запущена.ТолькоПросмотр 				= (Объект.Завершена ИЛИ НЕ CRM_ЕстьПисьма ИЛИ CRM_Отправляли);
	Элементы.ПолучателиПисьмо.Видимость				= CRM_ЕстьПисьма;
	Элементы.ПолучателиГруппаСтатус.Видимость		= CRM_ЕстьПисьма;
	Элементы.ПолучателиРасшифровка.Видимость		= CRM_ЕстьРасшифровки;
	Элементы.СтраницаДиаграммы.Видимость			= (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ГруппаОтправленные.Видимость			= (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.Получатели.ТолькоПросмотр				= (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.СтраницаСодержания.ТолькоПросмотр		= (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ДатаНачалаВыполненияРассылки.ТолькоПросмотр = (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ОтправительПредставление.ТолькоПросмотр	=  (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ОтправлятьПисьмаСразу.ТолькоПросмотр		=  (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ГруппаШаблона.ТолькоПросмотр				=  (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ФормаСформироватьПисьма.Видимость		= НЕ (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ФормаОтправить.Видимость				= НЕ (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ФормаОтправитьИЗакрыть.Видимость		= НЕ (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ФормаЗаписатьИЗакрыть.Видимость		= (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = (CRM_Отправляли ИЛИ Объект.Запущена);
	Элементы.Получатели.ПоложениеКоманднойПанели = ?((CRM_Отправляли ИЛИ Объект.Запущена),
		 ПоложениеКоманднойПанелиЭлементаФормы.Нет, ПоложениеКоманднойПанелиЭлементаФормы.Верх);
	Элементы.ИнформационнаяНадпись.Видимость		= Объект.ЕстьИзменения И НЕ (CRM_Отправляли ИЛИ Объект.Запущена);
	
	Элементы.ФормаСформироватьПисьма.Видимость	= НЕ CRM_Отправляли И (Объект.ЕстьИзменения 
													  ИЛИ НЕ CRM_ЕстьПисьма 
													  ИЛИ CRM_ИзмененСоставПолучателей
													  ИЛИ CRM_ИзмененыВложения
													  ИЛИ CRM_ИзмененОтправитель
													  ИЛИ CRM_ИзмененоСодержаниеРассылки
													  ИЛИ CRM_ИзмененаТема);
	Если CRM_ЕстьПисьма Тогда
		Элементы.ФормаСформироватьПисьма.Заголовок	= НСтр("ru='Переформировать письма';en='Re-form letters'");
	КонецЕсли;
	Элементы.ДатаНачалаВыполненияРассылки.Видимость = НЕ Объект.ОтправлятьПисьмаСразу;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Тема = Объект.Тема;
	Если Объект.Ссылка.Пустая() Тогда
		Заголовок = Нстр("ru='Рассылка электронных писем (создание)'");
	Иначе
		Заголовок = Нстр("ru='Рассылка электронных писем'") + ?(ЗначениеЗаполнено(Тема), ": " + Тема, "") 
			+ Нстр("ru=' от '") + Формат(Объект.Дата,
			 "ДЛФ = ДД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДанныеПоПисьмам = ВведеныПисьмаНаОсновании(Объект.Ссылка);
		CRM_ЕстьПисьма		= ДанныеПоПисьмам.ЕстьПисьма;
		CRM_Отправляли		= ДанныеПоПисьмам.Отправляли;
		CRM_ЕстьРасшифровки	= ДанныеПоПисьмам.ЕстьРасшифровки;
	КонецЕсли;
	
	ЗаполнитьВложения(Параметры);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			ТекстПисьмаHTML = "<html><body><br></body></html>";
			ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
				ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			
		КонецЕсли;
	Иначе
		
		CRM_Объект_ТекстHTML = Объект.ТекстHTML;
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
			Объект.ТекстHTML, Объект.Ссылка, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования,
				 Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
						новСтр.ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
					Иначе
						новСтр.ИмяФайла = Стр.ИмяФайла;
					КонецЕсли;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	//ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		// И Параметры.ЗначенияЗаполнения.Свойство("Основание") 
	//	И ТипЗнч(Параметры.ЗначенияЗаполнения.Основание) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
		
		Если Параметры.Свойство("Основание") 
		И ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.Основание, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
						новСтр.ИмяФайла							= СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
					Иначе
						новСтр.ИмяФайла							= Стр.ИмяФайла;
					КонецЕсли;
					новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			
			// Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
					новСтр.ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
				Иначе
					новСтр.ИмяФайла = Стр.ИмяФайла;
				КонецЕсли;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер / 1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			ОсновнаяУчетнаяЗапись = Объект.УчетнаяЗапись;
		Иначе
			Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
				ОсновнаяУчетнаяЗапись = Параметры.УчетнаяЗапись;
			Иначе
				ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОсновнаяУчетнаяЗапись = Неопределено Тогда
			Если НЕ Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(ОсновнаяУчетнаяЗапись) = Неопределено Тогда
				Объект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Объект.ОтправительПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОсновнаяУчетнаяЗапись.ИмяПользователя,
					 ОсновнаяУчетнаяЗапись.АдресЭлектроннойПочты,
					 "");
			ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
				Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
				Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
			КонецЕсли;
		ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
			Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
			Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.СервисРассылки = ЗначениеКопирования.СервисРассылки;
			ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьТекстВТекстПисьмаHTML(
				Неопределено, ЗначениеКопирования.ТекстHTML, ЗначениеКопирования, Истина, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			
		КонецЕсли;
	Иначе
		УчетнаяЗаписьСпискавыбора =  Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
		Если УчетнаяЗаписьСпискаВыбора  <> Неопределено Тогда
			Объект.ОтправительПредставление =  УчетнаяЗаписьСпискавыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = НЕ Форма.ТолькоПросмотр;
	Форма.Элементы.Вложения.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
	
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Партнеры.ПустаяСсылка()) Тогда
		
			мПартнеры = ПолучитьПартнеровГруппы(ВыбранноеЗначение);
			Для Каждого эПартнер Из мПартнеры Цикл
			
				ТекДанные = Объект.Получатели.Добавить();
				ТекДанные.Партнер = эПартнер;
				ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
				СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
					 ТекДанные.Партнер,
					 ТекДанные.КонтактноеЛицо));
				Если СписокАдресов.Количество() > 0 Тогда
					Адрес = СписокАдресов[0].Значение;
					Если НЕ Адрес.Количество() = 0 Тогда
						ТекДанные.Адрес					= Адрес.Представление;
						ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер, Строка(ТекДанные.Партнер), Строка(ТекДанные.КонтактноеЛицо)) + " <" 
							+ Адрес.Представление 
							+ ">";
						ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
					Иначе
						ТекДанные.Адрес					= "";
						ТекДанные.ПредставлениеАдреса	= "";
						ТекДанные.Принадлежность = Ложь;
					КонецЕсли;
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
			
			мФизЛица = ПолучитьФизическихЛицГруппы(ВыбранноеЗначение);
			Для Каждого эФизЛицо Из мФизЛица Цикл
				СтрокаПолучатель = Объект.Получатели.Добавить();
				СтрокаПолучатель.Партнер = эФизЛицо;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(эФизЛицо, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.ФизЛицо) + " <" + СтрокаПолучатель.Адрес 
					+ ">",
					 "");
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.Получатели.Добавить();
				СтрокаПолучатель.Партнер = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес 
					+ ">",
					 "");
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда		
		
		мПользователи = ПолучитьПользователейПодразделения(ВыбранноеЗначение);
		Для Каждого Пользователь Из мПользователи Цикл
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.Получатели.Добавить();
				СтрокаПолучатель.Партнер = Пользователь;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(Пользователь, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Партнер) + " <" + СтрокаПолучатель.Адрес 
					+ ">",
					 "");
			КонецЕсли;				
		КонецЦикла;			
		Модифицированность = Истина;
				
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПисьмаHTMLЗаполнен(Знач ТекстВПолеHTML)
	
	ТекстTHMLБезПодписи = CRM_Взаимодействия.УдалитьПодписьИзТекстаHTML(ТекстВПолеHTML);
	ОбычныйТекстБезПодписи = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстTHMLБезПодписи);
	
	Возврат ЗначениеЗаполнено(ОбычныйТекстБезПодписи);
	
КонецФункции

&НаСервере
Процедура ИзменитьПодпись(ТекстВПолеHTML, НоваяУчетнаяЗапись)
	
	ТекущийПользователь = ПОльзователи.ТекущийПользователь();
	
	ТекстПисьмаHTML = CRM_Взаимодействия.УдалитьПодписьИзТекстаHTML(ТекстВПолеHTML);
	ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
		ТекстПисьмаHTML, НоваяУчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутиККартинкамHTML(Знач Текст)
	
	ПутиККартинкам = Новый Массив;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	
	ЧтениеHTML.УстановитьСтроку(Текст);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		Путь = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src").Значение;
		ПутиККартинкам.Добавить(Путь);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПутиККартинкам);
	
КонецФункции

#Область СписокПолучателей

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные, ВидКИ = Неопределено, ИспользоватьКИДляОповещений = Ложь)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
		Если ТипЗнч(ТекущиеДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(?(ЗначениеЗаполнено(ТекущиеДанные.Партнер)
				 И НЕ ТекущиеДанные.Партнер.ЭтоГруппа И НЕ ТекущиеДанные.Партнер.CRM_ОтписалсяОтEmailРассылок,
				 ТекущиеДанные.Партнер, Неопределено),
											?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо, Неопределено),
											Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКИ);
		Иначе
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные.Партнер,
				 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		КонецЕсли;
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;	
	
	Если НЕ Таб = Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные) = Тип("Структура")
			 И ТипЗнч(ТекущиеДанные.Партнер) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			МассивСтрок = Таб;
			
			ПерваяСтрока = Неопределено;

		Иначе
			МассивСтрок = Таб;			
			ПерваяСтрока = Неопределено;
		КонецЕсли;
		
		СписокЗнач = Новый СписокЗначений;
		ТекСсылка = "";
		ПерваяСтрокаБыла = Ложь;
		
		Для Каждого СтрокаТаб Из МассивСтрок Цикл
			
			СтруктураАдреса = Новый Структура;
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				Если ПерваяСтрока = Неопределено Тогда						
					СтруктураАдреса.Вставить("Адрес"		, СокрЛП(СтрокаТаб.АдресЭП));
					СтруктураАдреса.Вставить("Представление", СокрЛП(СтрокаТаб.Представление));
					СтруктураАдреса.Вставить("Объект"		, СтрокаТаб.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(СтрокаТаб.Ссылка));
					ТекСсылка = СтрокаТаб.Ссылка;						
				Иначе						
					СтруктураАдреса.Вставить("Адрес"		, СокрЛП(ПерваяСтрока.АдресЭП));
					СтруктураАдреса.Вставить("Представление", СокрЛП(ПерваяСтрока.Представление));
					СтруктураАдреса.Вставить("Объект"		, ПерваяСтрока.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(ПерваяСтрока.Ссылка));
					ТекСсылка = ПерваяСтрока.Ссылка;
					ПерваяСтрока = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураАдреса = Новый Структура;
			СтруктураАдреса.Вставить("Адрес"		, СокрЛП(СтрокаТаб.АдресЭП));
			СтруктураАдреса.Вставить("Представление", СокрЛП(СтрокаТаб.Представление));
			СтруктураАдреса.Вставить("Объект"		, СтрокаТаб.Ссылка);
			СписокАдресов.Добавить(СтруктураАдреса, "   " + СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;	
		Если СписокАдресов.Количество() > 0 Тогда
			Возврат СписокАдресов;
		КонецЕсли;				
	КонецЕсли;	
	
	Возврат СписокАдресов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	Если Не ТекПартнер.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок
		И Не ТекПартнер.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
		
		Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
			ТекДанные = Объект.Получатели.Добавить();
			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
				ТекДанные.Партнер = ВыбранноеЗначение;
				ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
			Иначе
				ТекДанные.Партнер = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
				ТекДанные.КонтактноеЛицо = ВыбранноеЗначение;
			КонецЕсли;
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
				 ТекДанные.Партнер,
				 ТекДанные.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес					= Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер, Строка(ТекДанные.Партнер), Строка(ТекДанные.КонтактноеЛицо)) + " <" 
						+ Адрес.Представление 
						+ ">";
					ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.Получатели.Добавить();
				СтрокаПолучатель.Партнер = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Партнер) + " <" + СтрокаПолучатель.Адрес 
					+ ">",
					 "");
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтрокаПолучатель = Объект.Получатели.Добавить();
		СтрокаПолучатель.Партнер = ВыбранноеЗначение;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранноеЗначение, ВидыИнформации);
		СтрокаПолучатель.Адрес = АдресЭП;
		СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Партнер) + " <" + СтрокаПолучатель.Адрес 
			+ ">",
			 "");
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		
		СтрокаПолучатель = Объект.Получатели.Добавить();
		СтрокаПолучатель.Партнер = ВыбранноеЗначение;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранноеЗначение, ВидыИнформации);
		СтрокаПолучатель.Адрес = АдресЭП;
		СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Партнер) + " <" + СтрокаПолучатель.Адрес 
			+ ">",
			 "");
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_СпискиРассылок") Тогда	
		
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранноеЗначениеЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			Возврат;
		КонецЕсли;
		
		ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранноеЗначениеЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;												
	КонецЕсли;
	ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвоиЛицаПоГруппеПользователей(ГруппаПользователей)
	Если Не ЗначениеЗаполнено(ГруппаПользователей)
		 Или ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СтрокаПолучатель = Объект.Получатели.Добавить();
		СтрокаПолучатель.Партнер = ПользовательСсылка;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ПользовательСсылка, ВидыИнформации);
		СтрокаПолучатель.Адрес = АдресЭП;
		СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Партнер) + " <" + СтрокаПолучатель.Адрес 
			+ ">",
			 "");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоСегменту()
	
	Запрос = Новый Запрос;
	Если Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически
		 ИЛИ Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		// Для периодически обновляемых сегментов всеравно получаем клиентов вручную - как и по динамическим - чтобы не
		// возникало вопросов о том, что сегмент в настоящий момент может быть не актуален.
		РеквизитыСКДСегмента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
			
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Сегмент,
				 РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла; // Подключить поля запроса списка.
			
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД, НастройкиСписка, , ,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Партнеры.Ссылка КАК Партнер,
				|	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	НЕ Партнеры.ПометкаУдаления
				|	И Партнеры.Ссылка В (&МассивПартнеров)
				|	" + ?(НеЗаполнятьОтписавшимисяОтРассылок,
					 "И НЕ Партнеры.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок", "");
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |			" + ?(НеЗаполнятьОтписавшимисяОтРассылок,
               	 "И (НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок)", "") + "
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", Сегмент);
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыСегмента.Партнер КАК Партнер,
			|	ПартнерыСегмента.Сегмент КАК Сегмент,
			|	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Сегмент = &Сегмент
			|	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления
			|	" + ?(НеЗаполнятьОтписавшимисяОтРассылок,
				 "И НЕ ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок", "");
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыСегмента.Партнер КАК Партнер,
			|	ПартнерыСегмента.Сегмент КАК Сегмент,
			|	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
			|			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
			|			" + ?(НеЗаполнятьОтписавшимисяОтРассылок, "И (НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок)", "") + "
			|ГДЕ
			|	ПартнерыСегмента.Сегмент = &Сегмент
			|	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабПартнеров Цикл
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
			?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
		Если СписокАдресов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
			НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
			НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
				 Строка(НоваяСтрока.Партнер),
				Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
		ИначеЕсли НЕ НеЗаполнятьСПустымиАдресами Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	
	Если СписокСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СписокСсылок[0].Значение) <> Тип("Строка") Тогда
		Для Каждого ЭлементСписка Из СписокСсылок Цикл
			
			Если Не ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Если НеЗаполнятьОтписавшимисяОтРассылок
					 И ЭлементСписка.Значение.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок Тогда
					Продолжить;
				КонецЕсли;
				
				ТекПартнер = ЭлементСписка.Значение;
				
				Если ЭлементСписка.Значение.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
					ТекКл = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
				Иначе
					ТекКл = ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				
				Если НеЗаполнятьОтписавшимисяОтРассылок И ЭлементСписка.Значение.CRM_ОтписалсяОтEmailРассылок Тогда
					Продолжить;
				КонецЕсли;
				
				ТекПартнер = ЭлементСписка.Значение;
				ТекКл      = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
				
			Иначе
				
				Если НеЗаполнятьОтписавшимисяОтРассылок И ЭлементСписка.Значение.CRM_ОтписалсяОтEmailРассылок Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементСписка.Значение.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				ТекКл      = ЭлементСписка.Значение;
				ТекПартнер = ТекКл.Владелец;
				
			КонецЕсли;
			
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, ТекКл),
														?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер			= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо	= ТекКл;
				НоваяСтрока.Адрес			= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
					 Строка(НоваяСтрока.Партнер), Строка(НоваяСтрока.КонтактноеЛицо)) + " <" 
					+ СписокАдресов[0].Значение.Представление 
					+ ">";
			ИначеЕсли Не НеЗаполнятьСПустымиАдресами Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер			= ТекПартнер;
				НоваяСтрока.КонтактноеЛицо	= ТекКл;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ЭлементСписка Из СписокСсылок Цикл
			Если СтрНайти(ЭлементСписка.Значение, "@") > 0 Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Адрес = ЭлементСписка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуСКД(СписокСсылок, ЭтоПартнеры = Ложь)
	
	Если ТолькоОсновныеКонтактныеЛица Тогда // список должен состоять из СправочникСсылка.Партнеры
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер,
			|	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	НЕ Партнеры.ПометкаУдаления
			|	И Партнеры.Ссылка В(&МассивПартнеров)
			|	И НЕ Партнеры.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления " + ?(НеЗаполнятьОтписавшимисяОтРассылок, "И (НЕ Партнеры.CRM_ОтписалсяОтEmailРассылок)", "");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
		ТабПартнеров = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаб Из ТабПартнеров Цикл
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				Если НеЗаполнятьОтписавшимисяОтРассылок
					 И СтрокаТаб.КонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок Тогда Продолжить; КонецЕсли;
			Иначе
				Если НеЗаполнятьОтписавшимисяОтРассылок
					 И СтрокаТаб.Партнер.CRM_ОтписалсяОтEmailРассылок Тогда Продолжить; КонецЕсли;
			КонецЕсли;	
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
				 СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
				?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
					 Строка(НоваяСтрока.Партнер),
					Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
			ИначеЕсли НЕ НеЗаполнятьСПустымиАдресами Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // по алгоритму ЗаполнитьПоРезультатуОтчета
		Если ЭтоПартнеры Тогда
			
			// Удалить из списка партнеров, отписавшихся от рассылок
			Если НеЗаполнятьОтписавшимисяОтРассылок Тогда
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Партнеры.Ссылка КАК Партнер
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	НЕ Партнеры.ПометкаУдаления
				|	И Партнеры.Ссылка В (&МассивПартнеров)
				|	И Партнеры.CRM_ОтписалсяОтEmailРассылок";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НайденныйЭлемент = СписокСсылок.НайтиПоЗначению(Выборка.Партнер);
					СписокСсылок.Удалить(НайденныйЭлемент);
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
			|ПОМЕСТИТЬ тмпКЛ
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец В(&МассивПартнеров)
			|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
			|	" + ?(НеЗаполнятьОтписавшимисяОтРассылок, "И НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок", "") + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	тмпКЛ.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпКЛ.Партнер КАК Партнер
			|ИЗ
			|	тмпКЛ КАК тмпКЛ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
			
			ТабПартнеров = Запрос.Выполнить().Выгрузить();
			
			МассивКЛ = ТабПартнеров.ВыгрузитьКолонку("КонтактноеЛицо");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид",             ВидКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип",             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Запрос.УстановитьПараметр("МассивПартнеров", МассивКЛ);
			ТекстЗапроса = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
			|	КонтактнаяИнформация.Ссылка.Наименование КАК КонтактноеЛицоНаименование,
			|	КонтактнаяИнформация.Ссылка.Владелец КАК Партнер,
			|	КонтактнаяИнформация.Ссылка.Владелец.Наименование КАК ПартнерНаименование,
			|	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
			|	КонтактнаяИнформация.АдресЭП КАК АдресЭП,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
			|	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Ссылка В (&МассивПартнеров)
			|	" + ?(ВидКонтактнойИнформации.Пустая(), "", "И КонтактнаяИнформация.Вид = &Вид") + "
			|	И КонтактнаяИнформация.АдресЭП <> """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерНаименование,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
			|	ИспользоватьДляОповещений УБЫВ,
			|	ВидРеквизитДопУпорядочивания";
			
			Запрос.Текст = ТекстЗапроса;
			ТабАдресов = Запрос.Выполнить().Выгрузить();
			
			МассивПартнеровИсключать = ТабАдресов.ВыгрузитьКолонку("Партнер");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид",                      ВидКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип",                      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Запрос.УстановитьПараметр("МассивПартнеровИсключать", МассивПартнеровИсключать);
			Запрос.УстановитьПараметр("МассивПартнеров",          СписокСсылок.ВыгрузитьЗначения());
			ТекстЗапроса = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК Партнер,
			|	КонтактнаяИнформация.Ссылка.Наименование КАК ПартнерНаименование,
			|	Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо,
			|	"""" КАК КонтактноеЛицоНаименование,
			|	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
			|	КонтактнаяИнформация.АдресЭП КАК АдресЭП,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
			|	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Ссылка В (&МассивПартнеров)
			|	И НЕ КонтактнаяИнформация.Ссылка В (&МассивПартнеровИсключать)
			|	" + ?(ВидКонтактнойИнформации.Пустая(), "", "И КонтактнаяИнформация.Вид = &Вид") + "
			|	И КонтактнаяИнформация.АдресЭП <> """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерНаименование,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
			|	ИспользоватьДляОповещений УБЫВ,
			|	ВидРеквизитДопУпорядочивания";
			
			Запрос.Текст = ТекстЗапроса;
			ТабАдресовДоп = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаТаб Из ТабАдресовДоп Цикл
				СтрокаАдрес = ТабАдресов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАдрес, СтрокаТаб);
			КонецЦикла;
			
			Если НЕ НеЗаполнятьСПустымиАдресами Тогда
				МассивПартнеровИсключать = ТабАдресов.ВыгрузитьКолонку("Партнер");
				МассивКЛИсключать = ТабАдресов.ВыгрузитьКолонку("КонтактноеЛицо");
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
				|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
				|ПОМЕСТИТЬ тмпКЛ
				|ИЗ
				|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|ГДЕ
				|	КонтактныеЛицаПартнеров.Владелец В(&МассивПартнеров)
				|	И НЕ КонтактныеЛицаПартнеров.Владелец В (&МассивПартнеровИсключать)
				|	И НЕ КонтактныеЛицаПартнеров.Ссылка В (&МассивКЛИсключать)
				|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Партнеры.Ссылка КАК Партнер,
				|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо
				|ПОМЕСТИТЬ тмпПартнеры
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	Партнеры.Ссылка В(&МассивПартнеров)
				|	И НЕ Партнеры.Ссылка В (&МассивПартнеровИсключать)
				|	И НЕ Партнеры.Ссылка В
				|				(ВЫБРАТЬ
				|					тмпКЛ.Партнер КАК Партнер
				|				ИЗ
				|					тмпКЛ КАК тмпКЛ)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
				|	ВложенныйЗапрос.Партнер КАК Партнер
				|ИЗ
				|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		тмпКЛ.КонтактноеЛицо КАК КонтактноеЛицо,
				|		тмпКЛ.Партнер КАК Партнер
				|	ИЗ
				|		тмпКЛ КАК тмпКЛ
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		тмпПартнеры.КонтактноеЛицо,
				|		тмпПартнеры.Партнер
				|	ИЗ
				|		тмпПартнеры КАК тмпПартнеры) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.КонтактноеЛицо,
				|	ВложенныйЗапрос.Партнер";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
				Запрос.УстановитьПараметр("МассивПартнеровИсключать", МассивПартнеровИсключать);
				Запрос.УстановитьПараметр("МассивКЛИсключать", МассивКЛИсключать);
				
				ТабПартнеров = Запрос.Выполнить().Выгрузить();
				
				Для Каждого СтрокаТаб Из ТабПартнеров Цикл
					СтрокаАдрес = ТабАдресов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаАдрес, СтрокаТаб);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаТаб Из ТабАдресов Цикл
				СтруктураПоиска = Новый Структура("Партнер,КонтактноеЛицо", СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо);
				МассивСтрок = Объект.Получатели.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
				НоваяСтрока.Адрес				= СтрокаТаб.АдресЭП;
				НоваяСтрока.ПредставлениеАдреса	= ?(СтрокаТаб.КонтактноеЛицо.Пустая(),
					 Строка(НоваяСтрока.Партнер), Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + НоваяСтрока.Адрес 
					+ ">";
			КонецЦикла;
			Объект.Получатели.Сортировать("Партнер, КонтактноеЛицо");
		Иначе
			Для Каждого ЭлементСписка Из СписокСсылок Цикл
				
				Если НЕ ЭлементСписка.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
					
					ТекПартнер = ЭлементСписка.Значение;
					
					Если ТекПартнер.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
						ТекКл = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
					Иначе
						ТекКл = ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
					
					ТекПартнер = ЭлементСписка.Значение;
					ТекКл      = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
					
				Иначе
					
					Если ЭлементСписка.Значение.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					
					ТекКл      = ЭлементСписка.Значение;
					ТекПартнер = ТекКл.Владелец;
					
				КонецЕсли;
				
				Если НеЗаполнятьОтписавшимисяОтРассылок И ТекКл.CRM_ОтписалсяОтEmailРассылок Тогда
					Продолжить;
				КонецЕсли;
				
				СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, ТекКл),
				?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
				Если СписокАдресов.Количество() > 0 Тогда
					НоваяСтрока = Объект.Получатели.Добавить();
					НоваяСтрока.Партнер			= ТекПартнер;
					НоваяСтрока.КонтактноеЛицо	= ТекКл;
					НоваяСтрока.Адрес			= СписокАдресов[0].Значение.Представление;
					НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
						 Строка(НоваяСтрока.Партнер), Строка(НоваяСтрока.КонтактноеЛицо)) + " <" 
						+ СписокАдресов[0].Значение.Представление 
						+ ">";
				ИначеЕсли НЕ НеЗаполнятьСПустымиАдресами Тогда
					НоваяСтрока = Объект.Получатели.Добавить();
					НоваяСтрока.Партнер			= ТекПартнер;
					НоваяСтрока.КонтактноеЛицо	= ТекКл;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(СписокРассылки)
	СоставСписка = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(СписокРассылки);
	Если СоставСписка.Количество() > 0 Тогда
		Для Каждого СтруктураАдреса Из СоставСписка Цикл
			Если Не ЗначениеЗаполнено(СтруктураАдреса.Адрес) И Не ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПартнер = Неопределено;
			ТекКонтактноеЛицо = Неопределено;
			ТекАдрес = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТипЗнч(СтруктураАдреса.Контакт) = Тип("Строка") Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.ПартнерСтрокой = СтруктураАдреса.Контакт;
				НоваяСтрока.Адрес = СтруктураАдреса.Адрес;
				НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтруктураАдреса.Контакт), 
					Строка(СтруктураАдреса.Контакт) + " <" + СтруктураАдреса.Адрес + ">", СтруктураАдреса.Адрес);
				Продолжить;
			КонецЕсли;				
			
			Если ТипЗнч(СтруктураАдреса.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
				 И ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				ТекПартнер = СтруктураАдреса.Контакт.Владелец;
				ТекКонтактноеЛицо = СтруктураАдреса.Контакт;
			ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда	
				ТекПартнер = СтруктураАдреса.Контакт;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Адрес) Тогда
				ТекАдрес = СтруктураАдреса.Адрес;
			КонецЕсли;
			
			СписокАдресов = Неопределено;
			Если Не ЗначениеЗаполнено(ТекАдрес) И (ЗначениеЗаполнено(ТекПартнер) Или ЗначениеЗаполнено(ТекКонтактноеЛицо)) Тогда
				Если ТипЗнч(СтруктураАдреса.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
					СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
						 ТекПартнер, ТекКонтактноеЛицо),
						 Неопределено);
				Иначе
					СписокАдресов = СформироватьСписокАдресов(ТекПартнер);
				КонецЕсли;
				Если СписокАдресов.Количество() = 0 Тогда
					СписокАдресов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокАдресов <> Неопределено Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер = ТекПартнер;
				Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо = ТекКонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Адрес = СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса = ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,
					 Строка(НоваяСтрока.Партнер),
					Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
				//
			ИначеЕсли ЗначениеЗаполнено(ТекАдрес) Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				Если ЗначениеЗаполнено(ТекПартнер) Тогда
					НоваяСтрока.Партнер = ТекПартнер;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо = ТекКонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Адрес = ТекАдрес;
				
				ОбъектПредставления = Неопределено;
				Если ЗначениеЗаполнено(ТекПартнер) И Не ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					ОбъектПредставления = ТекПартнер;
				ИначеЕсли ЗначениеЗаполнено(ТекПартнер) И ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
						 ТекПартнер, Неопределено),
						 Неопределено);
					Если СписокАдресов.Количество() = 0 Тогда
						ОбъектПредставления = ТекКонтактноеЛицо;
					Иначе
						Для Каждого ЗначениеСписка Из СписокАдресов Цикл
							Если НРег(ЗначениеСписка.Значение.Адрес) = НРег(ТекАдрес) Тогда
								ОбъектПредставления = ТекПартнер;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ЗначениеЗаполнено(ОбъектПредставления) Тогда
							ОбъектПредставления = ТекКонтактноеЛицо;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбъектПредставления = ТекКонтактноеЛицо;
				КонецЕсли;
				
				НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(ОбъектПредставления), Строка(ОбъектПредставления) + " <" + ТекАдрес 
					+ ">",
					 ТекАдрес);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьАдресаПолучателей()
	
	Флаг = Истина;
	
	Для Каждого СтрокаТЧ Из Объект.Получатели Цикл
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымАдресом(СокрЛП(СтрокаТЧ.Адрес));
		Если РезультатПроверки.Отказ Тогда
			Флаг = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , "Объект.Получатели["
			+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Адрес");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;
	
КонецФункции

&НаСервере
Процедура УдалитьКонтактыБезАдреса(ИмяТаблицы = "Получатели")
	
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество() - 1 Цикл
		Если Не ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			Объект[ИмяТаблицы].Удалить(Индекс);
			Модифицированность = Истина;
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество() - 1 Цикл
		Если ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			МассивСтрок = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Адрес", Объект[ИмяТаблицы][Индекс].Адрес));
			Если МассивСтрок.Количество() > 1 Тогда
				Объект[ИмяТаблицы].Удалить(Индекс);
				Модифицированность = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиСтрок()
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.Получатели);						
КонецПроцедуры	

&НаСервере
Функция ПолучитьПартнеровГруппы(ПартнерГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ПартнерГруппа);
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	Партнеры.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	НЕ Партнеры.ПометкаУдаления
	                |	И НЕ Партнеры.ЭтоГруппа";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Партнеры.ЭтоГруппа", "");
	КонецЕсли;
	Если ПартнерГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Партнеры.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Партнеры.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Партнеры.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

&НаСервере
Функция ПолучитьФизическихЛицГруппы(ФизЛицоГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ФизЛицоГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |ГДЕ
	                |	НЕ ФизическиеЛица.ПометкаУдаления
	                |	И НЕ ФизическиеЛица.ЭтоГруппа";
	Если ФизЛицоГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И ФизическиеЛица.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	ФизическиеЛица.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

&НаСервере
Функция ПолучитьПользователейПодразделения(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникПользователи.Ссылка КАК Ссылка,
	               |	СправочникПользователи.ПометкаУдаления КАК ПометкаУдаления,
	               |	СправочникПользователи.Предопределенный КАК Предопределенный,
	               |	СправочникПользователи.Наименование КАК Наименование,
	               |	СправочникПользователи.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Пользователи КАК СправочникПользователи
	               |ГДЕ
	               |	СправочникПользователи.Подразделение В(&Подразделение)
	               |	И НЕ СправочникПользователи.ПометкаУдаления";	 
	
	Если ПодразделенияСУчетомИерархии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "В(&Подразделение)", "В ИЕРАРХИИ(&Подразделение)");
	КонецЕсли;		
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя.
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если	ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных(ИмяТаблицы) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если	ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект." 
					+ ИмяТаблицы 
					+ ".ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216, 218, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 195, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 172, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 156));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 180));
	МассивЦветов.Добавить(Новый Цвет(196, 154, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 162, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 192, 218));
	МассивЦветов.Добавить(Новый Цвет(148, 218, 228));
	
	УжеПроверенныеАдреса = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		ТекАдрес = СтрокаТаблицы.Адрес;
		Если Не ЗначениеЗаполнено(ТекАдрес) Тогда
			Продолжить;
		КонецЕсли;
		Если УжеПроверенныеАдреса.Найти(ТекАдрес) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УжеПроверенныеАдреса.Добавить(ТекАдрес);
		
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Адрес", ТекАдрес));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			Если ТекущийИндексИдентификатораОформления > МассивЦветов.ВГраница() Тогда
				ТекущийИндексИдентификатораОформления = 0;
			КонецЕсли;	
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
			НовоеПоле.Использование = Истина;
			
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				
				ИндексСтроки = Объект[ИмяТаблицы].Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект[ИмяТаблицы].Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьАдресаКлиенты(КонтактСсылка = Неопределено)
	Если ЗначениеЗаполнено(КонтактСсылка) Тогда
		Если ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("Партнер", КонтактСсылка));
		ИначеЕсли ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактСсылка));
		Иначе
			ИтераторСтрок = Объект.Получатели;
		КонецЕсли;
	Иначе
		ИтераторСтрок = Объект.Получатели;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИтераторСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
				 СтрокаТаблицы.Партнер,
				 СтрокаТаблицы.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					СтрокаТаблицы.Адрес					= Адрес.Представление;
					СтрокаТаблицы.ПредставлениеАдреса	= ?(Адрес.Объект = СтрокаТаблицы.Партнер,
						 Строка(СтрокаТаблицы.Партнер), Строка(СтрокаТаблицы.КонтактноеЛицо)) + " <" + Адрес.Представление 
						+ ">";
					СтрокаТаблицы.Принадлежность		= (Адрес.Объект = СтрокаТаблицы.КонтактноеЛицо);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект, ОбъектЗначение, ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение, Объект);
	Объект.CRM_Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта", ПолучитьПараметрыДляВыгрузки(),
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект,ТипФормы", АдресВХранилище, "ФормаДокумента"));
	
КонецФункции

#КонецОбласти

#Область ФормированиеИОтправкиПисем

&НаКлиенте
Процедура ОтправитьПисьма()
	
	Если НЕ CRM_ЕстьПисьма Тогда
		Если Объект.Получатели.Количество() > 0 И ПроверитьАдресаПолучателей() Тогда
			Состояние(НСтр("ru='Выполняется формирование электронных писем. Пожалуйста подождите...'"));
			Если СформироватьПисьмаНаСервере(Объект.Ссылка) Тогда
				Состояние(НСтр("ru='Формирование электронных писем завершено.'"));
				CRM_ЕстьПисьма = Истина;
				Состояние(НСтр("ru='Выполняется отправка писем. Пожалуйста подождите...'"));
				ПолучитьНеОтправленныеПисьмаИОтправить();
				CRM_Отправляли = Истина;
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
	Иначе
		Состояние(НСтр("ru='Выполняется отправка писем. Пожалуйста подождите...'"));
		ПолучитьНеОтправленныеПисьмаИОтправить();
		CRM_Отправляли = Истина;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПослеОтправкиПисем", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиПисем()
	// АПК:566-выкл ошибка в определении синхронного вызова: "Выбрать".
	Прочитать();
	// АПК:566-вкл
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка, CRM_ИзмененоСодержаниеРассылки,
	 CRM_ИзмененОтправитель, CRM_ИзмененаТема,
	 CRM_ИзмененыВложения)
	
	Документы.CRM_РассылкаЭлектронныхПисем.ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка,
		 CRM_ИзмененоСодержаниеРассылки, CRM_ИзмененОтправитель, CRM_ИзмененаТема,
		 CRM_ИзмененыВложения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНеОтправленныеПисьма(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
	|ИЗ
    |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
    |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Запрос.УстановитьПараметр("Предмет", ДокументСсылка);
	
	// АПК:566-выкл ошибка в определении синхронного вызова: "Выбрать".
	Выборка = Запрос.Выполнить().Выбрать();
	// АПК:566-вкл
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервере
Функция ВведеныПисьмаНаОсновании(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Отправляли
	               |ИЗ
				   |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				   |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	               |ГДЕ
	               |	ПредметыПапкиВзаимодействий.Предмет = &Рассылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Отправляли УБЫВ";
	Запрос.УстановитьПараметр("Рассылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("ЕстьПисьма, Отправляли, ЕстьРасшифровки", Ложь, Ложь, Ложь);
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.ЕстьПисьма	= Истина;
		СтруктураВозврата.Отправляли	= Выборка.Отправляли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_РассылкаЭлектронныхПисемПолучатели.НомерСтроки КАК НомерСтроки,
		               |	ПредметыПапкиВзаимодействий.Взаимодействие КАК Письмо,
		               |	ЕСТЬNULL(CRM_СтатусыПисемEmailРассылки.Статус, ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма) КАК Статус,
		               |	ВЫРАЗИТЬ(CRM_РасшифровкиСтатусовПисемEmailРассылки.Расшифровка КАК СТРОКА(100)) КАК Расшифровка
		               |ПОМЕСТИТЬ ВременнаяТаблица
		               |ИЗ
		               |	Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК CRM_РассылкаЭлектронныхПисемПолучатели
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК CRM_СтатусыПисемEmailРассылки
		               |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_РасшифровкиСтатусовПисемEmailРассылки КАК CRM_РасшифровкиСтатусовПисемEmailРассылки
		               |					ПО (CRM_РасшифровкиСтатусовПисемEmailРассылки.КодСтатуса = CRM_СтатусыПисемEmailРассылки.СтатусСтрокой)
		               |				ПО (CRM_СтатусыПисемEmailРассылки.Письмо = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка)
		               |			ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
		               |				И (ПредметыПапкиВзаимодействий.Предмет = &Рассылка)
		               |		ПО (CRM_РассылкаЭлектронныхПисемПолучатели.Адрес = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес)
		               |			И (CRM_РассылкаЭлектронныхПисемПолучатели.ПартнерСтрокой = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление
		               |				ИЛИ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт
		               |				ИЛИ CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт)
		               |			И (CRM_РассылкаЭлектронныхПисемПолучатели.Ссылка = &Рассылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВременнаяТаблица.НомерСтроки КАК НомерСтроки,
		               |	ВременнаяТаблица.Письмо КАК Письмо,
		               |	ВременнаяТаблица.Статус КАК Статус,
		               |	ВЫБОР
		               |		КОГДА ВременнаяТаблица.Статус В(&Статусы)
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Доставлено,
		               |	ЕСТЬNULL(CRM_НеотправленныеПисьма.ТекстОшибки, ВременнаяТаблица.Расшифровка) КАК Расшифровка
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НеотправленныеПисьма КАК CRM_НеотправленныеПисьма
		               |		ПО ВременнаяТаблица.Письмо = CRM_НеотправленныеПисьма.Письмо
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВременнаяТаблица.НомерСтроки
		               |ИТОГИ
		               |	МАКСИМУМ(Расшифровка)
		               |ПО
		               |	ОБЩИЕ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА ВременнаяТаблица.Статус В(&Статусы)
		               |			ТОГДА &Доставлено
		               |		ИНАЧЕ ВременнаяТаблица.Статус
		               |	КОНЕЦ КАК Серия,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблица.Письмо) КАК Значение
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВЫБОР
		               |		КОГДА ВременнаяТаблица.Статус В(&Статусы)
		               |			ТОГДА &Доставлено
		               |		ИНАЧЕ ВременнаяТаблица.Статус
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВременнаяТаблица.Статус КАК Серия,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВременнаяТаблица.Письмо) КАК Значение
		               |ИЗ
		               |	ВременнаяТаблица КАК ВременнаяТаблица
		               |ГДЕ
		               |	ВременнаяТаблица.Статус В(&Статусы)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВременнаяТаблица.Статус
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВременнаяТаблица";
		
		МассивСтатусов = Новый Массив();
		МассивСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Доставлено);
		МассивСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.Прочитано);
		МассивСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.ПереходПоСсылке);
		МассивСтатусов.Добавить(Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки);
		
		СтатусДоставлено = НСтр("ru = 'Доставлено'; en = 'Delivered'");
		
		Запрос.УстановитьПараметр("Статусы", МассивСтатусов);
		Запрос.УстановитьПараметр("Доставлено", СтатусДоставлено);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаИтог = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаИтог.Следующий() Тогда
			СтруктураВозврата.ЕстьРасшифровки = ЗначениеЗаполнено(ВыборкаИтог.Расшифровка);
			Выборка = ВыборкаИтог.Выбрать();
			Пока Выборка.Следующий() Цикл
				Строка = Объект.Получатели[Выборка.НомерСтроки - 1];
				ЗаполнитьЗначенияСвойств(Строка, Выборка, "Письмо, Статус, Расшифровка, Доставлено");
			КонецЦикла;
		КонецЕсли;
		
		ДанныеДиаграммы = РезультатЗапроса[2].Выгрузить();
		ОбновитьДиаграмму("ДиаграммаДоставка", ДанныеДиаграммы);
		
		ДанныеДиаграммы = РезультатЗапроса[3].Выгрузить();
		ОбновитьДиаграмму("ДиаграммаЭффективность", ДанныеДиаграммы);
		
	КонецЕсли;
	
	Если СтруктураВозврата.ЕстьПисьма Тогда
		СписокСтатусов = Документы.CRM_РассылкаЭлектронныхПисем.ПолучитьСтатусыПисемРассылки(Объект.Ссылка);
		Элементы.ОтборПоСтатусуПисьма.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов.ВыгрузитьЗначения());
		Если Объект.Получатели.НайтиСтроки(Новый Структура("Доставлено", Истина)).Количество() > 0 Тогда
			Элементы.ОтборПоСтатусуПисьма.СписокВыбора.Добавить(СтатусДоставлено);
			Элементы.ОтборПоСтатусуПисьма.СписокВыбора.СортироватьПоПредставлению();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция СформироватьПисьмаНаСервере(Рассылка)
	
	ПисьмаСформированы = Документы.CRM_РассылкаЭлектронныхПисем.СформироватьПисьма(Рассылка);
	Прочитать();
	Возврат ПисьмаСформированы;
	
КонецФункции

&НаСервере
Процедура ПолучитьНеОтправленныеПисьмаИОтправить()
	
	бОтправитьСразу = (Не Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить()
		 ИЛИ Объект.ОтправлятьПисьмаСразу);
	Документы.CRM_РассылкаЭлектронныхПисем.ПолучитьНеОтправленныеПисьмаИОтправить(Объект.Ссылка, бОтправитьСразу);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

#КонецОбласти

#Область РаботаСШаблонами

&НаСервере
Процедура ЗаполнитьПоШаблону(ТекстВПолеHTML, ЗаменитьТекстИВложения)
	
	CRM_ИзмененоСодержаниеРассылки = Истина;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТемаШаблона = Шаблон.Тема;
	Если ЗначениеЗаполнено(ТемаШаблона) Тогда
		Объект.Тема = ТемаШаблона;
	КонецЕсли;
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьТекстВТекстПисьмаHTML(
		ТекстВПолеHTML, Шаблон.Текст, Шаблон, ЗаменитьТекстИВложения, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
	
	Если ЗаменитьТекстИВложения Тогда
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
		Для Каждого ТекущееВложение Из Вложения Цикл
			Если ТекущееВложение.Расположение = 0 И Не ЗначениеЗаполнено(ТекущееВложение.ИДФайлаЭлектронногоПисьма) Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Вложения.Очистить();
		
	КонецЕсли;
	
	// Заполнение вложений по пересылаемому письму.
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Шаблон, Истина);
	
	Для Каждого Стр Из табВложения Цикл
		Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
			новСтр = Вложения.Добавить();
			новСтр.Ссылка								= Стр.Ссылка;
			Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
				новСтр.ИмяФайла							= СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
			Иначе
				новСтр.ИмяФайла							= Стр.ИмяФайла;
			КонецЕсли;
			новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
			новСтр.Размер								= Стр.Размер;
			РазмерВложения								= Цел(новСтр.Размер / 1024);
			новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.РазмерПредставление					= Стр.РазмерПредставление;
			новСтр.Расположение							= 1;
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор		= "#";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ДобавитьВложение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
		Если ПодключеноРасширениеРаботыСФайлами Тогда	
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.МножественныйВыбор = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеЗавершение", ЭтотОбъект);
			НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,
				 НСтр("ru='В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя,
				 ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(), "/",
				 "\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			РасширениеФайла = ?(ПозицияТочки = 0, "", Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки));
			
			новСтр						= Вложения.Добавить();
			новСтр.Расположение			= 4;
			Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
				новСтр.ИмяФайла			= СтроковыеФункцииКлиент.СтрокаЛатиницей(ИмяФайла);
			Иначе
				новСтр.ИмяФайла			= ИмяФайла;
			КонецЕсли;
			новСтр.ИмяФайлаНаКомпьютере	= ПомещенныеФайлы[Индекс].Хранение;
			новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
			новСтр.Размер				= РазмерФайла(ПомещенныеФайлы[Индекс].Хранение);
			РазмерВложения				= Цел(новСтр.Размер / 1024);
			новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		ОбновитьОтображениеДанных();
		CRM_ИзмененоСодержаниеРассылки = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазмерФайла(Хранение)
	Возврат ПолучитьИзВременногоХранилища(Хранение).Размер();
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ДобавитьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, ЭтотОбъект);

	ИначеЕсли текДанные.Расположение = 2 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);	
		НачатьЗапускПриложения(ОписаниеОповещения, """" + текДанные.ИмяФайлаНаКомпьютере + """");

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьПродолжение", ЭтотОбъект, текДанные);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьПродолжение(Подключен, текДанные) Экспорт
	
	Если Подключен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершение", ЭтотОбъект, текДанные);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(,
			 НСтр("ru='В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершение(ИмяКаталогаВременныхФайлов, текДанные) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершениеЗапуск", ЭтотОбъект);
	МассивФайлов = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
	ПередаваемыйФайл.Имя = текДанные.ИмяФайла;
	ПередаваемыйФайл.Хранение = текДанные.ИмяФайлаНаКомпьютере;
	МассивФайлов.Добавить(ПередаваемыйФайл);
	НачатьПолучениеФайлов(ОписаниеОповещения, МассивФайлов, ИмяКаталогаВременныхФайлов, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершениеЗапуск(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого Файл Из ПолученныеФайлы Цикл
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиент);	
		НачатьЗапускПриложения(ОписаниеОповещения, """" + Файл.ПолноеИмя + """");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить()
	
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		
		Если РасширениеВложения = "EML" Тогда
				
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
				
			Возврат;
				
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеПродолжение", ЭтотОбъект,
			 Новый Структура("текДанные, РасширениеВложения", текДанные,
			 РасширениеВложения));
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	Если ПодключеноРасширениеРаботыСФайлами Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДополнительныеПараметры.текДанные.ИмяФайла;
		ВыборФайла.Расширение = ДополнительныеПараметры.РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1'"), ДополнительныеПараметры.РасширениеВложения, ДополнительныеПараметры.РасширениеВложения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.текДанные.ИмяФайла,
			 ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ВыборФайла, Ложь);
		
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере,
				 ДополнительныеПараметры.текДанные.ИмяФайла,
				 Истина);
		#КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПолученныеФайлы <> Неопределено Тогда
		Состояние(НСтр("ru='Файл успешно сохранен'"), , ПолученныеФайлы[0].Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);
		
		ОбновитьОтображениеДанных();
		
		// Если _ЕстьПисьма Тогда
		//	_ИзмененыВложения = Истина;
		//	Объект.ЕстьИзменения = (_ЕстьПисьма И НЕ _Отправляли);
		//	УстановитьСвойстваЭлементовФормы();
		//КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если (текДанные <> Неопределено) И (текДанные.Расположение = 0) Тогда
		 
		 УдаленныеВложения.Добавить(текДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьСсылкиВложений();	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСсылкиВложений()
	Если ВсегдаПоказыватьВложения Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	КонецЕсли;		
		
	Если Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения';en='to contract enclosures'");
		Элементы.ВложенияПредставление.Видимость = Ложь;		
	Иначе	
		ВложенияПредставление = "";
		Элементы.ВложенияПредставление.Видимость = Истина;
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" 
					+ ЭлементТаблицы.РазмерСтрокой 
					+ ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" 
					+ ЭлементТаблицы.РазмерСтрокой 
					+ ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = НСтр("ru='Добавить файл...';en='Add file...'");
			Элементы.ВложенияПредставление.Видимость = Истина;			
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл")
			 И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл")
			 И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			
			// Это файл.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗагрузкиФайла(Файл, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя),
				 УникальныйИдентификатор),
				 Файл.Имя);
			
		ИначеЕсли ТипЗнч(Файл) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// Это присоединенный файл с версионированием.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер,
				 РеквизитыФайла.Расширение, Ложь,
				 МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		Иначе
			
			// Это элемент справочника *ПрисоединенныеФайлы.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер,
				 РеквизитыФайла.Расширение, Ложь,
				 МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокВложений.Количество() > 0 Тогда
		
		Для Каждого ЭлементСпискаФайлов Из СписокВложений Цикл
			новСтр = Вложения.Добавить();
			
			новСтр.Расположение = 4;
			новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(новСтр.ИмяФайла);
			новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
			новСтр.ИмяФайлаНаКомпьютере = ЭлементСпискаФайлов.Значение;
			Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
				новСтр.ИмяФайла = СтроковыеФункцииКлиент.СтрокаЛатиницей(ЭлементСпискаФайлов.Представление);
			Иначе
				новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			КонецЕсли;
			новСтр.Размер = ПолучитьИзВременногоХранилища(ЭлементСпискаФайлов.Значение).Размер();
			РазмерВложения = Цел(новСтр.Размер / 1024);
			новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПроверяемогоФайла(Файл)
	Возврат Новый Структура("Размер, Расширение", Файл.Размер, Файл.Расширение);
КонецФункции	

#КонецОбласти

#Область ПоказателиРассылки

&НаСервере
Процедура ОбновитьДиаграмму(ИмяДиаграммы, ДанныеДиаграммы)
	
	Диаграмма = ЭтотОбъект[ИмяДиаграммы];
	Диаграмма.Очистить();
	
	Элементы[ИмяДиаграммы].Видимость = (ДанныеДиаграммы.Количество() <> 0);
	Если ДанныеДиаграммы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Диаграмма.КоличествоСерий = 0;
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Нет;
	Диаграмма.КоличествоТочек = 1; 
	Диаграмма.Обновление = Ложь;
	Диаграмма.АвтоТранспонирование = Ложь;
	
	ТекстТочки = ?(ИмяДиаграммы = "ДиаграммаДоставка", НСтр("ru = 'Всего'"), НСтр("ru = 'Доставлено'"));
	Диаграмма.Точки[0].Текст = "";
	
	ДанныеВсего = ДанныеДиаграммы.Итог("Значение");
	Диаграмма.ОбластьЗаголовка.Текст = ТекстТочки + ": " + Строка(ДанныеВсего);
	Для каждого СтрокаДанных Из ДанныеДиаграммы Цикл
		ТекстСерии = Строка(СтрокаДанных.Серия) + " - " + Строка(СтрокаДанных.Значение) + " шт., " 
			+ ?(СтрокаДанных.Значение = 0, 0, Окр(СтрокаДанных.Значение * 100 / ДанныеВсего)) + "%";
		Серия = Диаграмма.УстановитьСерию(СтрокаДанных.Серия);
		Серия.Текст = ТекстСерии;
		Серия.Расшифровка = СтрокаДанных.Серия;
		Диаграмма.УстановитьЗначение(0, Серия, СтрокаДанных.Значение, СтрокаДанных.Серия, ТекстСерии);
	КонецЦикла;
	
	Диаграмма.Обновление = Истина;
	Диаграмма.АвтоТранспонирование = Истина;    
КонецПроцедуры

#КонецОбласти

#Область Автотекст

&НаСервере
Функция ДобавитьКомандуАвтотекста(ТегАвтотекста, АвтотекстТемы)
	
	Возврат CRM_АвтотекстПереопределяемый.ДобавитьКомандуАвтотекста(ЭтотОбъект, ТегАвтотекста,
		 АвтотекстТемы,
		 НЕ АвтотекстТемы);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РаботаСHTMLФайлом

&НаСервере
Процедура НастроитьФормуПоСервисуРассылки()
	
	Если Не ЗначениеЗаполнено(Объект.СервисРассылки) Или Объект.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
		Элементы.ЗагрузитьИзШаблонаСервисаРассылки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивШаблонов = CRM_ИнтеграцияССервисамиРассылокВызовСервера.МассивШаблоновСервиса(Объект.СервисРассылки);
	Если МассивШаблонов = Неопределено Тогда
		Элементы.ЗагрузитьИзШаблонаСервисаРассылки.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	Элементы.ЗагрузитьИзШаблонаСервисаРассылки.Видимость = Истина;
	Элементы.ЗагрузитьИзШаблонаСервисаРассылки.Заголовок = НСтр("ru = 'Загрузить из шаблона'") + " " 
		+ Объект.СервисРассылки.ИмяСервиса;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПравописания

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ТекстПисьмаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстПисьмаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстПисьмаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
		 ПроверяемыйТекст,
		 Объект.ТипТекста);
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекущийЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстПисьмаHTML");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели
