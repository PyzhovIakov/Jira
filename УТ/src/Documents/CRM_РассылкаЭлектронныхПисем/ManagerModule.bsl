#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Функция СформироватьПисьма(Рассылка) Экспорт
	
	Если Рассылка.СервисРассылки <> Справочники.CRM_СервисыРассылок.SMTP
		И НЕ CRM_ИнтеграцияССервисамиРассылок.ПроверитьАдресУчетнойЗаписи(Рассылка.СервисРассылки,
			 Рассылка.УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПолучателиРассылки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПолучателиРассылки.Принадлежность
	|			ТОГДА ПолучателиРассылки.КонтактноеЛицо
	|		ИНАЧЕ ПолучателиРассылки.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ПолучателиРассылки.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ПолучателиРассылки.Адрес КАК Адрес,
	|	ПолучателиРассылки.ПредставлениеАдреса КАК ПредставлениеАдреса,
	|	ПолучателиРассылки.ПартнерСтрокой КАК ПартнерСтрокой,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Взаимодействие, НЕОПРЕДЕЛЕНО) КАК Письмо
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК ПолучателиРассылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ПолучателиПисьма
	|			ПО ПредметыПапкиВзаимодействий.Взаимодействие = ПолучателиПисьма.Ссылка
	|				И (ПредметыПапкиВзаимодействий.Предмет = &Рассылка)
	|		ПО (ПолучателиРассылки.Адрес = ПолучателиПисьма.Адрес)
	|			И (ПолучателиРассылки.ПартнерСтрокой = ПолучателиПисьма.Представление
	|				ИЛИ ПолучателиРассылки.Партнер = ПолучателиПисьма.Контакт
	|				ИЛИ ПолучателиРассылки.КонтактноеЛицо = ПолучателиПисьма.Контакт)
	|ГДЕ
	|	ПолучателиРассылки.Ссылка = &Рассылка");
	
	Запрос.УстановитьПараметр("Рассылка", Рассылка);
	
	РезультатаЗапроса = Запрос.Выполнить();
	Если РезультатаЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТабПолучателей = СформироватьТаблицуПолучателей(Рассылка);
	ТаблицаАвтотекста = ПолучитьТаблицуАвтотекста();
	
	Выборка = РезультатаЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Адрес) И Не ЗначениеЗаполнено(Выборка.Письмо) Тогда
			
			НачатьТранзакцию();
			Попытка
				
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, Выборка, ТаблицаАвтотекста);
				НовоеЭлектронноеПисьмо.ДополнительныеСвойства.Вставить("НаОснованииРассылки");
				НовоеЭлектронноеПисьмо.Записать();
				
				Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Рассылка);
				
				Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Рассылка.УчетнаяЗапись, "Черновики");
				CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, Папка, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьНеОтправленныеПисьмаИОтправить(Рассылка, бОтправитьСразу) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	               |ГДЕ
	               |	ПредметыПапкиВзаимодействий.Предмет = &Ссылка
	               |	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	               |	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект						= Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		ПисьмоОбъект.ОбменДанными.Загрузка	= Истина;
		ПисьмоОбъект.Записать();
		
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Рассылка.УчетнаяЗапись, "Исходящие");
		CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
		
		// Если отправляем сразу
		Если бОтправитьСразу Тогда
			Если Рассылка.СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
				Результат = ВыполнитьОтправку(Выборка.Ссылка, Рассылка.СервисРассылки);
			ИначеЕсли ЗначениеЗаполнено(Рассылка.СервисРассылки) Тогда
				ПараметрыСервиса = CRM_ИнтеграцияССервисамиРассылок.НастройкиСервиса(Рассылка.СервисРассылки);
				Результат = ВыполнитьОтправку(Выборка.Ссылка, Рассылка.СервисРассылки, ПараметрыСервиса);
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат + "  (" + Строка(Выборка.Ссылка) + ")");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка, CRM_ИзмененоСодержаниеРассылки,
	 CRM_ИзмененОтправитель, CRM_ИзмененаТема,
	 CRM_ИзмененыВложения) Экспорт
	
	// Получим актуальную таблицу получателей.
	ТабПолучателей = СформироватьТаблицуПолучателей(Рассылка);
	ТабПолучателей.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	
	// Создадим таблицу для неактуальных писем.
	ТаблицаНеактуальныхПисем = Новый ТаблицаЗначений;
	ТаблицаНеактуальныхПисем.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	// Запросом получим ранее созданные письма.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка
	|ИЗ
    |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
    |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Ссылка
	|	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.CRM_РассылкаИзменена
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаАвтотекста = ПолучитьТаблицуАвтотекста();
	
	Пока Выборка.Следующий() Цикл
		МассивПолучателей = ТабПолучателей.НайтиСтроки(Новый Структура("Партнер",
			 Выборка.Ссылка.ПолучателиПисьма[0].Контакт));
		
		// Если среди получателей не нашли, то данное письмо неактуально.
		Если МассивПолучателей.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНеактуальныхПисем.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			Продолжить;
		КонецЕсли;
		
		// Перенесем изменения в письмо.
		НачатьТранзакцию();
		Попытка
			МассивПолучателей[0].Обработано = Истина;
			
			ЭлектронноеПисьмо			= Выборка.Ссылка.ПолучитьОбъект();
			
			КонтактПисьма				= Выборка.Ссылка.ПолучателиПисьма[0].Контакт;
			
			ИзмененАдресПолучателя = Ложь;
			
			// Если изменили адрес почты, то меняем и в письме.
			Если НЕ Выборка.Ссылка.ПолучателиПисьма[0].Адрес = МассивПолучателей[0].Адрес Тогда
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Адрес			= МассивПолучателей[0].Адрес;
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Представление	= МассивПолучателей[0].ПредставлениеАдреса;
				ЭлектронноеПисьмо.СписокПолучателейПисьма			= МассивПолучателей[0].ПредставлениеАдреса;
				
				АдресПисьма					= МассивПолучателей[0].Адрес;
				АдресПисьмаПредставление	= МассивПолучателей[0].ПредставлениеАдреса;
				
				ИзмененАдресПолучателя = Истина;
			Иначе
				АдресПисьма					= Выборка.Ссылка.ПолучателиПисьма[0].Адрес;
				АдресПисьмаПредставление	= Выборка.Ссылка.ПолучателиПисьма[0].Представление;
			КонецЕсли;
			
			СтрокаПолучателя = Новый Структура;
			СтрокаПолучателя.Вставить("НомерСтроки"			, 0);
			
			Если ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.Партнеры")
				 ИЛИ ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.Пользователи") 
			ИЛИ ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СтрокаПолучателя.Вставить("Партнер"			, КонтактПисьма);
				СтрокаПолучателя.Вставить("КонтактноеЛицо"	, Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			ИначеЕсли ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				СтрокаПолучателя.Вставить("Партнер"			, КонтактПисьма.Владелец);
				СтрокаПолучателя.Вставить("КонтактноеЛицо"	, КонтактПисьма);
			Иначе
				СтрокаПолучателя.Вставить("Партнер"			, Неопределено);
				СтрокаПолучателя.Вставить("КонтактноеЛицо"	, Неопределено);
				СтрокаПолучателя.Вставить("ПартнерСтрокой"	, МассивПолучателей[0].ПартнерСтрокой);
			КонецЕсли;
			
			СтрокаПолучателя.Вставить("Адрес"				, АдресПисьма);
			СтрокаПолучателя.Вставить("ПредставлениеАдреса"	, АдресПисьмаПредставление);
			
			ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(Рассылка.ТекстHTML,
				 ДанныеФормированияТекстаПисьма(СтрокаПолучателя),
				 ТаблицаАвтотекста);
			
			Если CRM_ИзмененОтправитель Тогда
				ЭлектронноеПисьмо.УчетнаяЗапись				= Рассылка.УчетнаяЗапись;
				ЭлектронноеПисьмо.ОтправительПредставление	= Рассылка.ОтправительПредставление;
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ ИзмененАдресПолучателя Тогда
				ЭлектронноеПисьмо.Текст					= ИтоговыйТекстПисьма;
				ЭлектронноеПисьмо.ТекстHTML				= ИтоговыйТекстПисьма;
			КонецЕсли;
			
			Если CRM_ИзмененаТема Тогда
				ЭлектронноеПисьмо.Тема = ВернутьТему(Рассылка.Тема,
					 ДанныеФормированияТекстаПисьма(СтрокаПолучателя),
					 ТаблицаАвтотекста);
			КонецЕсли;
			
			Если (CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененОтправитель ИЛИ ИзмененАдресПолучателя
				 ИЛИ CRM_ИзмененаТема)
				 И НЕ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.ЕстьВложения = Рассылка.ЕстьВложения;
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из ТабПолучателей Цикл
		// Тут либо новый получатель, либо поменяли получателя.
		Если НЕ СтрокаПолучателя.Обработано Тогда
			НачатьТранзакцию();
			Попытка
				Если ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
					
					НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, СтрокаПолучателя, ТаблицаАвтотекста);
					НовоеЭлектронноеПисьмо.Записать();
					
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Рассылка.Ссылка);
					
					Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Рассылка.УчетнаяЗапись, "Исходящие");
					CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка, Папка, Ложь, Ложь);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Установим пометку удаления у неактуальных писем.
	Для Каждого НеактуальноеПисьмо Из ТаблицаНеактуальныхПисем Цикл
		НачатьТранзакцию();
		Попытка
			НеактуальноеПисьмоОбъект = НеактуальноеПисьмо.Ссылка.ПолучитьОбъект();
			НеактуальноеПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			НеактуальноеПисьмоОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтатусыПисемРассылки(Рассылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЕСТЬNULL(CRM_СтатусыПисемEmailРассылки.Статус, ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма) КАК Статус
	                      |ИЗ
	                      |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК CRM_СтатусыПисемEmailРассылки
	                      |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = CRM_СтатусыПисемEmailРассылки.Письмо
	                      |ГДЕ
	                      |	ПредметыПапкиВзаимодействий.Предмет = &Рассылка");
	
	Запрос.УстановитьПараметр("Рассылка", Рассылка);
	СписокСтатусов = Новый СписокЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
	СписокСтатусов.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Статус"));
	Возврат СписокСтатусов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, СтрокаПолучателя, ТаблицаАвтотекста)

	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();

	НовоеЭлектронноеПисьмо.Дата                      = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();

	НовоеЭлектронноеПисьмо.УчетнаяЗапись			= Рассылка.УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление	= Рассылка.ОтправительПредставление;

	НовоеЭлектронноеПисьмо.Ответственный			= Рассылка.Ответственный;
	НовоеЭлектронноеПисьмо.Автор					= Пользователи.ТекущийПользователь();
	НовоеЭлектронноеПисьмо.Важность					= Рассылка.Важность;
	НовоеЭлектронноеПисьмо.Тема						= ВернутьТему(Рассылка.Тема,
		 ДанныеФормированияТекстаПисьма(СтрокаПолучателя),
		 ТаблицаАвтотекста);
	НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

	НовоеЭлектронноеПисьмо.Кодировка				= Рассылка.Кодировка;
	Если ПустаяСтрока(НовоеЭлектронноеПисьмо.Кодировка) Тогда
		НовоеЭлектронноеПисьмо.Кодировка			= "utf-8";
	КонецЕсли;

	НовоеЭлектронноеПисьмо.ТипТекста				= Рассылка.ТипТекста;
	
	СохранятьТекстыПисемРассылок = Не ПолучитьФункциональнуюОпцию("CRM_НеСохранятьТекстыПисемРассылок");
	Если СохранятьТекстыПисемРассылок Тогда
		ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(Рассылка.ТекстHTML,
			 ДанныеФормированияТекстаПисьма(СтрокаПолучателя),
			 ТаблицаАвтотекста);
		НовоеЭлектронноеПисьмо.Текст					= ИтоговыйТекстПисьма;
		НовоеЭлектронноеПисьмо.ТекстHTML				= ИтоговыйТекстПисьма;
	КонецЕсли;

	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СтрокаПолучателя.ПредставлениеАдреса;

	НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();

	НоваяСтрокаПолучателей.Адрес         = СтрокаПолучателя.Адрес;
	НоваяСтрокаПолучателей.Представление = СтрокаПолучателя.КонтактноеЛицо;
	НоваяСтрокаПолучателей.Контакт       = СтрокаПолучателя.Партнер;
	Если ЗначениеЗаполнено(СтрокаПолучателя.ПартнерСтрокой) Тогда
		НоваяСтрокаПолучателей.Представление       = СтрокаПолучателя.ПартнерСтрокой;
	КонецЕсли;

	НовоеЭлектронноеПисьмо.ЕстьВложения = Рассылка.ЕстьВложения;

	Возврат НовоеЭлектронноеПисьмо;

КонецФункции

Функция ДанныеФормированияТекстаПисьма(ИсходнаяСтруктура)
	
	Результат = ИсходнаяСтруктура;
	
	Если ТипЗнч(ИсходнаяСтруктура.Партнер) = Тип("СправочникСсылка.Пользователи")
		И ЗначениеЗаполнено(ИсходнаяСтруктура.Партнер.ФизическоеЛицо) Тогда
	
		ДанныеФормированияТекстаПисьма = Новый Структура;
		
		Если ТипЗнч(ИсходнаяСтруктура) = Тип("Структура") Тогда
			
			Для Каждого ЭлементКоллекции Из ИсходнаяСтруктура Цикл
				ДанныеФормированияТекстаПисьма.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ИсходнаяСтруктура) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			ТаблицаВладелецСтроки = ИсходнаяСтруктура.Владелец();
			
			Для Каждого Колонка Из ТаблицаВладелецСтроки.Колонки Цикл
				ДанныеФормированияТекстаПисьма.Вставить(Колонка.Имя, ИсходнаяСтруктура[Колонка.Имя]);
			КонецЦикла;
			
		КонецЕсли;
		
		// Переопределение пользователя на его физическое лицо для корректной работы шаблонов автотекста:
		Если ДанныеФормированияТекстаПисьма.Свойство("Партнер") Тогда
			ДанныеФормированияТекстаПисьма.Партнер = ДанныеФормированияТекстаПисьма.Партнер.ФизическоеЛицо;
		КонецЕсли;
		
		Результат = ДанныеФормированияТекстаПисьма;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьТаблицуАвтотекста()
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	ТаблицаАвтотекста.Колонки.Добавить("ТэгLAT");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")), , , Истина);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")), , Истина, Истина);
	Возврат ТаблицаАвтотекста;
КонецФункции

Функция ВыполнитьОтправку(ЭлектронноеПисьмо, СервисРассылки, ПараметрыСервиса = Неопределено)
	
	ЭлектронноеПисьмоОбъект = ЭлектронноеПисьмо.ПолучитьОбъект();
	Попытка
		ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ЭлектронноеПисьмоОбъект);
		Если СервисРассылки = Справочники.CRM_СервисыРассылок.SMTP Тогда
			ИдентификаторПисьма = CRM_Взаимодействия.ВыполнитьОтправкуПисьма(ЭлектронноеПисьмоОбъект, , ПараметрыПисьма);
		ИначеЕсли ЗначениеЗаполнено(СервисРассылки) Тогда
			ТекстОшибки = "";
			ИдентификаторПисьма = CRM_ИнтеграцияССервисамиРассылок.ВыполнитьОтправкуПисьма(ЭлектронноеПисьмоОбъект,
				 ПараметрыПисьма, ПараметрыСервиса,
				  ТекстОшибки);
			Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
				Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
					ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
					ЗаписьСтатуса.Статус = ИдентификаторПисьма;
					ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
					ЗаписьСтатуса.Записать();
					ВызватьИсключение ТекстОшибки;
				Иначе
					ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
					ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
					ЗаписьСтатуса.Записать();
				КонецЕсли;
			Иначе
				ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
				ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
				ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
				ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
				ЗаписьСтатуса.Записать();
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЭлектронноеПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
		КонецЕсли;
	Исключение
		// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
		ТекстОшибки = ИнформацияОбОшибке();
		CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ЭлектронноеПисьмо, ИнформацияОбОшибке().Описание);
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	ЭлектронноеПисьмоОбъект.СтатусПисьма =
		ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
	ЭлектронноеПисьмоОбъект.ДатаОтправления = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ЭлектронноеПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ЭлектронноеПисьмо.УчетнаяЗапись, "Отправленные");
	CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(ЭлектронноеПисьмоОбъект.Ссылка, Папка, Ложь, Ложь);
	
	// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
	// если есть, то удалим.
	CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ЭлектронноеПисьмоОбъект.Ссылка);
	Возврат "";
	
КонецФункции

Функция СформироватьТаблицуПолучателей(Рассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_РассылкаЭлектронныхПисемПолучатели.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА CRM_РассылкаЭлектронныхПисемПолучатели.Принадлежность
	|			ТОГДА CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо
	|		ИНАЧЕ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер
	|	КОНЕЦ КАК Партнер,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо КАК КонтактноеЛицо,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.Адрес КАК Адрес,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.ПредставлениеАдреса КАК ПредставлениеАдреса,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.ПартнерСтрокой КАК ПартнерСтрокой
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК CRM_РассылкаЭлектронныхПисемПолучатели
	|ГДЕ
	|	CRM_РассылкаЭлектронныхПисемПолучатели.Ссылка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьТекстПисьмаПолучателю(CRM_Объект_ТекстHTML, СтрокаТаблицы, ТаблицаАвтотекста)
	
	РедактируемыйТекст = CRM_Объект_ТекстHTML;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если СтрНайти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			Если СтрокаАвтотекста.Тэг = "%АДРЕС_WEB_ДОСТУПА%" Тогда
				WEbДоступ = Константы.CRM_АдресWebДоступа.Получить();
				Если НЕ ЗначениеЗаполнено(WEbДоступ) Тогда
					СтрокаWEBДоступа = "{адрес web-доступа в настройках системы не заполнен}";
				Иначе
					СтрокаWEBДоступа = "<a target='_blank' href='" + WEbДоступ + "'>Адрес web-доступа</a>";					
				КонецЕсли;
				РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, СтрокаWEBДоступа);
				Продолжить;
			КонецЕсли;
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаАвтотекста.ТэгLAT) И СтрНайти(РедактируемыйТекст, СтрокаАвтотекста.ТэгLAT) > 0 Тогда
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.ТэгLAT, ЗначениеТэга);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции

Функция ВернутьТему(ОбъектТема, СтрокаТаблицы, ТаблицаАвтотекста)
	
	РедактируемыйТекст = ОбъектТема;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если СтрНайти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			Если СтрокаАвтотекста.Тэг = "%АДРЕС_WEB_ДОСТУПА%" Тогда
				WEbДоступ = Константы.CRM_АдресWebДоступа.Получить();
				Если НЕ ЗначениеЗаполнено(WEbДоступ) Тогда
					СтрокаWEBДоступа = "{адрес web-доступа в настройках системы не заполнен}";
				Иначе
					СтрокаWEBДоступа = "<a target='_blank' href='" + WEbДоступ + "'>Адрес web-доступа</a>";					
				КонецЕсли;
				РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, СтрокаWEBДоступа);
				Продолжить;
			КонецЕсли;
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции

#КонецОбласти

#КонецЕсли
