#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.АвторизованныйПользователь();
	Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата = ТекущаяДатаСеанса();
	Автор = Пользователи.АвторизованныйПользователь();
	Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено;
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(ЭтотОбъект, СтандартнаяОбработка, Префикс);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Не ДополнительныеСвойства.Свойство("НеПроверятьПересечениеПериодов")
		Или Не ДополнительныеСвойства.НеПроверятьПересечениеПериодов Тогда
		
		ПроверитьПересечениеПериода(Отказ);
	КонецЕсли;
	
	ЗаполнитьУдаляемыйДоступ();
	
	Если Состояние <> Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено Тогда
		Если Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Завершено
			 И ЗначениеЗаполнено(ЗамещающийСотрудник) Тогда
			ДополнительныеСвойства.Вставить("ОповещенияЗамещающего", ОповещенияЗамещающего("ЗавершениеЗамещенияСотрудника"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Ссылка.ЗамещающийСотрудник) И Ссылка.ЗамещающийСотрудник <> ЗамещающийСотрудник)
		Или Ссылка.Сотрудник <> Сотрудник Тогда
		ДополнительныеСвойства.Вставить("УдалитьВременныйДоступ", Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗамещающийСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	РолиСотрудника = Документы.CRM_ОтсутствиеСотрудника.РолиПользователя(Сотрудник);
	РолиЗамещающего = Документы.CRM_ОтсутствиеСотрудника.РолиПользователя(ЗамещающийСотрудник);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Не РольДоступна("ПолныеПрава") И Не ДополнительныеСвойства.Свойство("ОбъектЗаписанУправляющимБП") Тогда
			Если РолиСотрудника.Найти(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ПолныеПрава)) <> Неопределено
				И РолиЗамещающего.Найти(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.ПолныеПрава)) = Неопределено Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещено проводить документ отсутствия пользователя с полными правами!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;

			Если РольДоступна("CRM_ПередачаДелОтветственному") Тогда
				
			ИначеЕсли НЕ ДоступенСотрудник(Сотрудник) Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрещено проводить документ отсутствия выбранного сотрудника! Обратитесь к его руководителю.'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ГруппыДоступаСотрудника = Документы.CRM_ОтсутствиеСотрудника.ГруппыДоступаПользователя(Сотрудник);
	НедостающиеГруппы = Новый Массив;
	ГруппыДоступаЗамещающего = Документы.CRM_ОтсутствиеСотрудника.ГруппыДоступаПользователя(ЗамещающийСотрудник);
	
	Для каждого ГруппаДоступаСотрудника Из ГруппыДоступаСотрудника Цикл
		Если ГруппыДоступаЗамещающего.Найти(ГруппаДоступаСотрудника) = Неопределено Тогда
			НедостающиеГруппы.Добавить(ГруппаДоступаСотрудника);
		КонецЕсли;
	КонецЦикла;
	Если НедостающиеГруппы.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("НедостающиеГруппыДоступа", НедостающиеГруппы);
	КонецЕсли;
	
	НедостающиеУчетныеЗаписи = НедостающиеУчетныеЗаписи();
	УчетныеЗаписиСотрудника = УчетныеЗаписиСотрудника();
	Если НедостающиеУчетныеЗаписи.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("НедостающиеУчетныеЗаписи", НедостающиеУчетныеЗаписи);
	КонецЕсли;

	НедостающиеРоли = НедостающиеРоли();
	РолиИспСотрудника = РолиИсполнителяСотрудника();
	Если НедостающиеРоли.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("НедостающиеРоли", НедостающиеРоли);
	КонецЕсли;
	
	ВременныйДоступПользователя = ВременныйДоступПользователя();
	ВыданныеЭлементыДоступа = Новый Массив;
	Для каждого ЭлементДоступа Из ВременныйДоступПользователя Цикл
		Если ТипЗнч(ЭлементДоступа) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
			Если НедостающиеГруппы.Найти(ЭлементДоступа) = Неопределено И
				ГруппыДоступаСотрудника.Найти(ЭлементДоступа) <> Неопределено Тогда
				ВыданныеЭлементыДоступа.Добавить(ЭлементДоступа);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементДоступа) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров")
			Или ТипЗнч(ЭлементДоступа) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Для каждого ЭлементУЗ Из НедостающиеУчетныеЗаписи Цикл
				Если ЭлементУЗ.УчетнаяЗапись = ЭлементДоступа Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УчетныеЗаписиСотрудника.Найти(ЭлементДоступа) <> Неопределено Тогда
				ВыданныеЭлементыДоступа.Добавить(ЭлементДоступа);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементДоступа) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НедостающиеРоли.Найти(ЭлементДоступа) = Неопределено И
				РолиИспСотрудника.Найти(ЭлементДоступа) <> Неопределено Тогда
				ВыданныеЭлементыДоступа.Добавить(ЭлементДоступа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ВыданныеЭлементыДоступа.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("ВыданныеЭлементыДоступа", ВыданныеЭлементыДоступа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ОповещенияСервер.УдалитьОповещения(Ссылка);
	
	Если Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено Тогда
		
		Движение = Движения.CRM_ОтсутствиеСотрудников.Добавить();
		Движение.Сотрудник = Сотрудник; 
		Движение.ЗамещающийСотрудник = ЗамещающийСотрудник; 
		Движение.ДатаНачала = ДатаНачалаОтсутствия; 
		Движение.ДатаОкончания = ДатаОкончанияОтсутствия;
		
		Если ТекущаяДатаСеанса() >= ДатаНачалаОтсутствия Тогда
			Движение.ПраваПереданы = Истина;
			
			Если ДополнительныеСвойства.Свойство("НедостающиеГруппыДоступа") Тогда
				Для каждого Группа Из ДополнительныеСвойства.НедостающиеГруппыДоступа Цикл
					ГруппаОбъект = Группа.ПолучитьОбъект();
					НовСтр = ГруппаОбъект.Пользователи.Добавить();
					НовСтр.Пользователь = ЗамещающийСотрудник;
					ГруппаОбъект.Записать();
					
					Движение = Движения.CRM_ВременныйДоступПользователя.Добавить();
					Движение.Пользователь = ЗамещающийСотрудник;
					Движение.ЭлементДоступа = Группа;
					Движение.Документ = Ссылка;
				КонецЦикла;
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("НедостающиеУчетныеЗаписи") Тогда
				ДополнитьУчетныеЗаписи(ДополнительныеСвойства.НедостающиеУчетныеЗаписи);
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("НедостающиеРоли") Тогда
				ДополнитьРоли(ДополнительныеСвойства.НедостающиеРоли);
			КонецЕсли;

			Если ДополнительныеСвойства.Свойство("ВыданныеЭлементыДоступа") Тогда
				Для каждого ЭлементДоступа Из ДополнительныеСвойства.ВыданныеЭлементыДоступа Цикл
					Движение = Движения.CRM_ВременныйДоступПользователя.Добавить();
					Движение.Пользователь = ЗамещающийСотрудник;
					Движение.ЭлементДоступа = ЭлементДоступа;
					Движение.Документ = Ссылка;
				КонецЦикла;
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("УдалитьВременныйДоступ") Тогда
				УдалитьВременныйДоступПользователя();
				Движения.CRM_ВременныйДоступПользователя.Записывать = Истина;
			Иначе
				Движения.CRM_ВременныйДоступПользователя.Записать(Ложь);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		УдалитьВременныйДоступПользователя();
		Движения.CRM_ВременныйДоступПользователя.Записывать = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗамещающийСотрудник) Тогда
		Если ДополнительныеСвойства.Свойство("ОповещенияЗамещающего") Тогда
			ОповещенияЗамещающего = ДополнительныеСвойства.ОповещенияЗамещающего;
		Иначе
			ОповещенияЗамещающего = ОповещенияЗамещающего("НазначениеЗамещающегоСотрудника");
		КонецЕсли;
		Если ОповещенияЗамещающего.Количество() > 0 Тогда
			CRM_ОповещенияСервер.ДобавитьОповещение(ОповещенияЗамещающего);
		КонецЕсли;
	КонецЕсли;
		
	Движения.CRM_ОтсутствиеСотрудников.Записать(Истина);
	РегистрыСведений.CRM_ОтсутствиеСотрудников.ВклВыклРегЗадание();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ОповещенияСервер.УдалитьОповещения(Ссылка);
	
	УдалитьВременныйДоступПользователя();
	
	РегистрыСведений.CRM_ОтсутствиеСотрудников.ВклВыклРегЗадание();
	
	CRM_ОповещенияСервер.УдалитьОповещения(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьУдаляемыйДоступ()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВременныйДоступПользователя.Пользователь КАК Пользователь,
	                      |	CRM_ВременныйДоступПользователя.ЭлементДоступа КАК ЭлементДоступа
	                      |ПОМЕСТИТЬ Пользователи
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВременныйДоступПользователя КАК CRM_ВременныйДоступПользователя
	                      |ГДЕ
	                      |	CRM_ВременныйДоступПользователя.Регистратор = &Регистратор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_ВременныйДоступПользователя.Пользователь КАК Пользователь,
	                      |	CRM_ВременныйДоступПользователя.ЭлементДоступа КАК ЭлементДоступа,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ВременныйДоступПользователя.Регистратор) КАК Регистратор
	                      |ПОМЕСТИТЬ ВременныйДоступ
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВременныйДоступПользователя КАК CRM_ВременныйДоступПользователя
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	CRM_ВременныйДоступПользователя.ЭлементДоступа,
	                      |	CRM_ВременныйДоступПользователя.Пользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Пользователи.Пользователь КАК Пользователь,
	                      |	Пользователи.ЭлементДоступа КАК ЭлементДоступа
	                      |ИЗ
	                      |	Пользователи КАК Пользователи
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременныйДоступ КАК ВременныйДоступ
	                      |		ПО Пользователи.Пользователь = ВременныйДоступ.Пользователь
	                      |			И Пользователи.ЭлементДоступа = ВременныйДоступ.ЭлементДоступа
	                      |			И (ВременныйДоступ.Регистратор = 1)
	                      |ИТОГИ ПО
	                      |	Пользователь");
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УдаляемыйДоступ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		УдаляемыеГруппы = Новый Массив;
		УдаляемыеУровни = Новый Массив;
		УдаляемыеУровни = Новый Массив;
		УдаляемыеРоли = Новый Массив;
		УдаляемыеУчетныеЗаписи = Новый Массив;
		ВыборкаДоступ = Выборка.Выбрать();
		Пока ВыборкаДоступ.Следующий() Цикл
			Если ТипЗнч(ВыборкаДоступ.ЭлементДоступа) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
				УдаляемыеГруппы.Добавить(ВыборкаДоступ.ЭлементДоступа);
			ИначеЕсли ТипЗнч(ВыборкаДоступ.ЭлементДоступа) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				УдаляемыеРоли.Добавить(ВыборкаДоступ.ЭлементДоступа);
			ИначеЕсли ТипЗнч(ВыборкаДоступ.ЭлементДоступа) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров")
				Или ТипЗнч(ВыборкаДоступ.ЭлементДоступа) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
				УдаляемыеУчетныеЗаписи.Добавить(ВыборкаДоступ.ЭлементДоступа);
			КонецЕсли;
		КонецЦикла;
		СтруктураУдаления = Новый Структура;
		СтруктураУдаления.Вставить("Пользователь", Выборка.Пользователь);
		СтруктураУдаления.Вставить("УдаляемыеГруппыДоступа", УдаляемыеГруппы);
		СтруктураУдаления.Вставить("УдаляемыеУровниДоступа", УдаляемыеУровни);
		СтруктураУдаления.Вставить("УдаляемыеРоли", УдаляемыеРоли);
		СтруктураУдаления.Вставить("УдаляемыеУчетныеЗаписи", УдаляемыеУчетныеЗаписи);
		УдаляемыйДоступ.Добавить(СтруктураУдаления);
	КонецЦикла;
	Если УдаляемыйДоступ.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("УдаляемыйДоступ", УдаляемыйДоступ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйДоступПользователя()
	
	Если ДополнительныеСвойства.Свойство("УдаляемыйДоступ") Тогда
		Для каждого Пользователь Из ДополнительныеСвойства.УдаляемыйДоступ Цикл
			
			Для каждого Группа Из Пользователь.УдаляемыеГруппыДоступа Цикл
				ГруппаОбъекта = Группа.ПолучитьОбъект();
				Строка = ГруппаОбъекта.Пользователи.Найти(Пользователь.Пользователь);
				Если Строка <> Неопределено Тогда
					ГруппаОбъекта.Пользователи.Удалить(Строка);
					ГруппаОбъекта.Записать();
				КонецЕсли;
			КонецЦикла;

			Для каждого Элемент Из Пользователь.УдаляемыеРоли Цикл
				МенеджерЗаписи = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.РольИсполнителя = Элемент;
				МенеджерЗаписи.Исполнитель = ЗамещающийСотрудник;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЦикла;

			Для каждого УчетнаяЗапись Из Пользователь.УдаляемыеУчетныеЗаписи Цикл
				Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
					МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьМенеджерЗаписи();
				ИначеЕсли ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров") Тогда
					МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиМессенджеров.СоздатьМенеджерЗаписи();
				КонецЕсли;
				МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
				МенеджерЗаписи.Пользователь = ЗамещающийСотрудник;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВременныйДоступПользователя()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВременныйДоступПользователя.ЭлементДоступа КАК ЭлементДоступа
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВременныйДоступПользователя КАК CRM_ВременныйДоступПользователя
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВременныйДоступПользователя КАК CRM_ВременныйДоступПользователя1
	                      |		ПО CRM_ВременныйДоступПользователя.ЭлементДоступа = CRM_ВременныйДоступПользователя1.ЭлементДоступа
	                      |			И (CRM_ВременныйДоступПользователя1.Регистратор = &Регистратор)
	                      |ГДЕ
	                      |	CRM_ВременныйДоступПользователя.Пользователь = &Пользователь
	                      |	И CRM_ВременныйДоступПользователя.Регистратор <> &Регистратор
	                      |	И CRM_ВременныйДоступПользователя1.ЭлементДоступа ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ЗамещающийСотрудник);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлементДоступа");
КонецФункции

Процедура ПроверитьПересечениеПериода(Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.ДатаНачала КАК ДатаНачала,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	                      |			ТОГДА ДАТАВРЕМЯ(3000, 12, 31)
	                      |		ИНАЧЕ CRM_ОтсутствиеСотрудников.ДатаОкончания
	                      |	КОНЕЦ КАК ДатаОкончания,
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор <> &Регистратор
	                      |	И CRM_ОтсутствиеСотрудников.Сотрудник = &Сотрудник");
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	ТемпОкончаниеОтсутствия = ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия), ДатаОкончанияОтсутствия, Дата(3000, 12, 31));
	Пока Выборка.Следующий() Цикл
		Если Макс(ДатаНачалаОтсутствия, Выборка.ДатаНачала) <= Мин(ТемпОкончаниеОтсутствия, Выборка.ДатаОкончания) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Период отсутствия пересекается с периодом введенном в документе %1'"), Строка(Выборка.Регистратор)));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗамещающийСотрудник) Тогда
		
		Запрос.УстановитьПараметр("Сотрудник", ЗамещающийСотрудник);
		Выборка = Запрос.Выполнить().Выбрать();
		ТемпОкончаниеОтсутствия = ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия), ДатаОкончанияОтсутствия, Дата(3000, 12, 31));
		Пока Выборка.Следующий() Цикл
			Если Макс(ДатаНачалаОтсутствия, Выборка.ДатаНачала) <= Мин(ТемпОкончаниеОтсутствия, Выборка.ДатаОкончания) Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Замещающий сотрудник будет отсутствовать в выбранном периоде. %1'"), Строка(Выборка.Регистратор)));
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступенСотрудник(Сотрудник)
	ДоступныеПользователи = ПолучитьСписокДоступныхПользователей(Истина);
	Возврат (ДоступныеПользователи.Найти(Сотрудник) <> Неопределено);
КонецФункции

Функция ОповещенияЗамещающего(ВидОповещения)
	МассивОповещений = Новый Массив;
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_ОповещенияПользовательскиеНастройки.Напоминание КАК Напоминание,
	                      |	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	                      |	CRM_ОповещенияПользовательскиеНастройки.СМС КАК СМС,
	                      |	CRM_ОповещенияПользовательскиеНастройки.Мессенджер КАК Мессенджер
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	                      |ГДЕ
	                      |	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ОповещатьОНовыхЗадачах)
	                      |	И CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	                      |	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
	                      |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
	                      |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Мессенджер
	                      |			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("Пользователь", ЗамещающийСотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Напоминание Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
			СтруктураОповещения.Вставить("Предмет", Ссылка);
			СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
			СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.Напоминание);
			СтруктураОповещения.Вставить("СрокОповещения", ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
			СтруктураОповещения.Вставить("Периодичность", Неопределено);
			
			МассивОповещений.Добавить(СтруктураОповещения);
			
            Если ВидОповещения = "НазначениеЗамещающегоСотрудника" Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
				СтруктураОповещения.Вставить("Предмет", Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
				СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.Напоминание);
				СтруктураОповещения.Вставить("СрокОповещения", ДатаНачалаОтсутствия);
				СтруктураОповещения.Вставить("ДатаАктуальности", ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаНачалаОтсутствия)));
				СтруктураОповещения.Вставить("Периодичность", Неопределено);
				
				МассивОповещений.Добавить(СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если Выборка.ЭлектроннаяПочта Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
			СтруктураОповещения.Вставить("Предмет", Ссылка);
			СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
			СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
			СтруктураОповещения.Вставить("СрокОповещения", ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
			СтруктураОповещения.Вставить("Периодичность", Неопределено);
			
			МассивОповещений.Добавить(СтруктураОповещения);
			
            Если ВидОповещения = "НазначениеЗамещающегоСотрудника" Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
				СтруктураОповещения.Вставить("Предмет", Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
				СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта);
				СтруктураОповещения.Вставить("СрокОповещения", ДатаНачалаОтсутствия);
				СтруктураОповещения.Вставить("ДатаАктуальности", ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаНачалаОтсутствия)));
				СтруктураОповещения.Вставить("Периодичность", Неопределено);
				
				МассивОповещений.Добавить(СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если Выборка.СМС Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
			СтруктураОповещения.Вставить("Предмет", Ссылка);
			СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
			СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.СМС);
			СтруктураОповещения.Вставить("СрокОповещения", ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
			СтруктураОповещения.Вставить("Периодичность", Неопределено);
			
			МассивОповещений.Добавить(СтруктураОповещения);
			
            Если ВидОповещения = "НазначениеЗамещающегоСотрудника" Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
				СтруктураОповещения.Вставить("Предмет", Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
				СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.СМС);
				СтруктураОповещения.Вставить("СрокОповещения", ДатаНачалаОтсутствия);
				СтруктураОповещения.Вставить("ДатаАктуальности", ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаНачалаОтсутствия)));
				СтруктураОповещения.Вставить("Периодичность", Неопределено);
				
				МассивОповещений.Добавить(СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Мессенджер Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
			СтруктураОповещения.Вставить("Предмет", Ссылка);
			СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
			СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.Мессенджер);
			СтруктураОповещения.Вставить("СрокОповещения", ТекущаяДатаСеанса());
			СтруктураОповещения.Вставить("ДатаАктуальности", КонецДня(ТекущаяДатаСеанса()));
			СтруктураОповещения.Вставить("Периодичность", Неопределено);
			
			МассивОповещений.Добавить(СтруктураОповещения);
			
            Если ВидОповещения = "НазначениеЗамещающегоСотрудника" Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Получатель", ЗамещающийСотрудник);
				СтруктураОповещения.Вставить("Предмет", Ссылка);
				СтруктураОповещения.Вставить("ВидОповещения", ВидОповещения);
				СтруктураОповещения.Вставить("Канал", Перечисления.CRM_КаналыОповещений.Мессенджер);
				СтруктураОповещения.Вставить("СрокОповещения", ДатаНачалаОтсутствия);
				СтруктураОповещения.Вставить("ДатаАктуальности", ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаОкончанияОтсутствия),
					 КонецДня(ДатаНачалаОтсутствия)));
				СтруктураОповещения.Вставить("Периодичность", Неопределено);
				
				МассивОповещений.Добавить(СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат МассивОповещений;
КонецФункции

Функция УчетныеЗаписиСотрудника()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиСотрудника.УчетнаяЗапись КАК УчетнаяЗапись
	                      |ИЗ
	                      |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиСотрудника
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиСотрудника.Пользователь = &Сотрудник
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись
	                      |ИЗ
	                      |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Сотрудник");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
КонецФункции

Функция РолиИсполнителяСотрудника()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РолиСотрудника.РольИсполнителя КАК РольИсполнителя
	                      |ИЗ
	                      |	РегистрСведений.ИсполнителиЗадач КАК РолиСотрудника
	                      |ГДЕ
	                      |	РолиСотрудника.Исполнитель = &Сотрудник");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
КонецФункции

Функция НедостающиеУчетныеЗаписи()
	
	Результат = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиСотрудника.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |	CRM_УчетныеЗаписиСотрудника.Запись КАК Запись
	                      |ИЗ
	                      |	РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиСотрудника
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиЗамещающего
	                      |		ПО CRM_УчетныеЗаписиСотрудника.УчетнаяЗапись = CRM_УчетныеЗаписиЗамещающего.УчетнаяЗапись
	                      |			И (CRM_УчетныеЗаписиЗамещающего.Пользователь = &Замещающий)
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиСотрудника.Пользователь = &Сотрудник
	                      |	И CRM_УчетныеЗаписиЗамещающего.УчетнаяЗапись ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Замещающий", ЗамещающийСотрудник);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("УчетнаяЗапись, Запись", Выборка.УчетнаяЗапись, Выборка.Запись));
	КонецЦикла;

	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиСотрудника.УчетнаяЗапись КАК УчетнаяЗапись,
	               |	CRM_УчетныеЗаписиСотрудника.Запись КАК Запись
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиСотрудника
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЗамещающего
	               |		ПО CRM_УчетныеЗаписиСотрудника.УчетнаяЗапись = CRM_УчетныеЗаписиЗамещающего.УчетнаяЗапись
	               |			И (CRM_УчетныеЗаписиЗамещающего.Пользователь = &Замещающий)
	               |ГДЕ
	               |	CRM_УчетныеЗаписиСотрудника.Пользователь = &Сотрудник
	               |	И CRM_УчетныеЗаписиЗамещающего.УчетнаяЗапись ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("УчетнаяЗапись, Запись", Выборка.УчетнаяЗапись, Выборка.Запись));
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция НедостающиеРоли()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РолиСотрудника.РольИсполнителя КАК РольИсполнителя
	                      |ИЗ
	                      |	РегистрСведений.ИсполнителиЗадач КАК РолиСотрудника
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК РолиЗамещающего
	                      |		ПО РолиСотрудника.РольИсполнителя = РолиЗамещающего.РольИсполнителя
	                      |			И (РолиЗамещающего.Исполнитель = &Замещающий)
	                      |ГДЕ
	                      |	РолиСотрудника.Исполнитель = &Сотрудник
	                      |	И РолиЗамещающего.РольИсполнителя ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Замещающий", ЗамещающийСотрудник);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	Возврат Результат;

КонецФункции

Процедура ДополнитьУчетныеЗаписи(НедостающиеУчетныеЗаписи)
	
	Для каждого Элемент Из НедостающиеУчетныеЗаписи Цикл
		Если ТипЗнч(Элемент.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьМенеджерЗаписи();
		ИначеЕсли ТипЗнч(Элемент.УчетнаяЗапись) = Тип("СправочникСсылка.CRM_УчетныеЗаписиМессенджеров") Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиМессенджеров.СоздатьМенеджерЗаписи();
		КонецЕсли;
		МенеджерЗаписи.УчетнаяЗапись = Элемент.УчетнаяЗапись;
		МенеджерЗаписи.Пользователь = ЗамещающийСотрудник;
		МенеджерЗаписи.Запись = Элемент.Запись;
		МенеджерЗаписи.Записать();
		
		Движение = Движения.CRM_ВременныйДоступПользователя.Добавить();
		Движение.Пользователь = ЗамещающийСотрудник;
		Движение.ЭлементДоступа = Элемент.УчетнаяЗапись;
		Движение.Документ = Ссылка;
	КонецЦикла;
	
КонецПроцедуры
		
Процедура ДополнитьРоли(НедостающиеРоли)
	
	Для каждого Элемент Из НедостающиеРоли Цикл
		МенеджерЗаписи = РегистрыСведений.ИсполнителиЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.РольИсполнителя = Элемент;
		МенеджерЗаписи.Исполнитель = ЗамещающийСотрудник;
		МенеджерЗаписи.Записать();
		
		Движение = Движения.CRM_ВременныйДоступПользователя.Добавить();
		Движение.Пользователь = ЗамещающийСотрудник;
		Движение.ЭлементДоступа = Элемент;
		Движение.Документ = Ссылка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid call of object on client.'");
#КонецЕсли
