
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Отсутствия сотрудника'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);

	ПриЧтенииСозданииНаСервере();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.Сотрудник = ТекущийПользователь;
	КонецЕсли;

	Если Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава") Тогда
		Элементы.Сотрудник.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ИначеЕсли Не Объект.Ссылка.Пустая() Тогда
		ТекПользователь = Пользователи.ТекущийПользователь();
		Если Объект.Сотрудник <> ТекПользователь 
			И CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Объект.Сотрудник).Найти(ТекПользователь) = Неопределено Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Завершить.Видимость = (Объект.Проведен
		 И Объект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено);
	
	ЗаполнитьДеревоСвязанныхДокументов();
	Элементы.ГруппаСвязанныеДокументы.Видимость = СвязанныеДокументы.ПолучитьЭлементы().Количество() > 1;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Отказ = Не CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ДатаОтсутствияПриИзменении(Неопределено);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И СписокРедактируемыхДокументов.Количество() > 0 Тогда
		
		ВыполнитьКорректировкуДокументовОтсутствия(ТекущийОбъект, СписокРедактируемыхДокументов);
		
		ЗаполнитьДеревоСвязанныхДокументов();
		Элементы.ГруппаСвязанныеДокументы.Видимость = СвязанныеДокументы.ПолучитьЭлементы().Количество() > 1;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Корректировка документов завершена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
		Если СписокРедактируемыхДокументов.Количество() = 0 Тогда
		СтруктураОтвета = ПроверитьПересеченияПериодов(Объект.Ссылка, Объект.Сотрудник,
			 Объект.ДатаНачалаОтсутствия,
			 Объект.ДатаОкончанияОтсутствия);
		Если Не СтруктураОтвета.ТекстСообщения = "" 
			И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Отказ = Истина;
			
			Оповещение = Новый ОписаниеОповещения("ПослеПроверкиДатОтсутствия", ЭтотОбъект, СтруктураОтвета.МассивСсылок);
			ПоказатьВопрос(Оповещение, СтруктураОтвета.ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиДатОтсутствия(Ответ, МассивСсылок) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СписокРедактируемыхДокументов.ЗагрузитьЗначения(МассивСсылок);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// +CRM_Модуль
&НаКлиенте
Процедура Подключаемый_ИнцидентыПоПредмету()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписьДокументаПередОткрытиемИнцидентов", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		                     |Переход к ""Инциденты"" возможен только после записи данных.
		                     |Данные будут записаны.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
		ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДокументаПередОткрытиемИнцидентов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
	ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	Если Объект.Сотрудник = Объект.ЗамещающийСотрудник Тогда
		Объект.ЗамещающийСотрудник = Неопределено;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сотрудник и замещающий сотрудник длжны быть разными пользователями.'"));
	КонецЕсли;
	ПроверитьДоступностьСогласования();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтсутствияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОтсутствия)
		 И Объект.ДатаНачалаОтсутствия > Объект.ДатаОкончанияОтсутствия Тогда
		Объект.ДатаОкончанияОтсутствия = Неопределено;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть меньше даты начала.'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОтсутствия) И ЗначениеЗаполнено(Объект.ДатаОкончанияОтсутствия) Тогда
		ДнейОтсутствия = (Объект.ДатаОкончанияОтсутствия - Объект.ДатаНачалаОтсутствия) / 86400 + 1;
		Элементы.ДнейОтсутствия.Видимость = Истина;
	Иначе
		Элементы.ДнейОтсутствия.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОтсутствия) И ЗначениеЗаполнено(Объект.ДатаОкончанияОтсутствия) Тогда
		Диалог.Период.ДатаНачала = Объект.ДатаНачалаОтсутствия;
		Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияОтсутствия;
	КонецЕсли;
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ДатаНачалаОтсутствия = Результат.ДатаНачала;
		Объект.ДатаОкончанияОтсутствия = Результат.ДатаОкончания;
	КонецЕсли;
	ДатаОтсутствияПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Сотрудник = ТекущийПользователь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.Дата, "ДФ=d.MM.yyyy") + " " + НСтр("ru='в';en='in'") 
		+ " " + Формат(Объект.Дата,
		 "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	ОбновитьИнфоНадпись();
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьСогласования()
	
	Если Не (ЗначениеЗаполнено(Объект.Сотрудник) И ЗначениеЗаполнено(Объект.ЗамещающийСотрудник)) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнфоНадпись()
	Элементы.ИнфоНадпись.Шрифт = Новый Шрифт;
	ДатаОкончанияСтр = ?(ЗначениеЗаполнено(Объект.ДатаОкончанияОтсутствия),
		 Формат(Объект.ДатаОкончанияОтсутствия, "ДФ=dd.MM.yyyy"),
		 НСтр("ru = '<дата не указана>'"));
	Если Объект.Проведен И Объект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено Тогда
		Строка1 = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 в %2 до %3'"), Строка(Объект.Сотрудник), Строка(Объект.ПричинаОтсутствия), ДатаОкончанияСтр));
		Если ЗначениеЗаполнено(Объект.ЗамещающийСотрудник) Тогда
			Строка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'Замещающий'") + " - " + Строка(Объект.ЗамещающийСотрудник));
		Иначе
			Строка2 = "";
		КонецЕсли;
		ИнфоНадпись = Новый ФорматированнаяСтрока(Строка1, Символы.ПС, Строка2);
		Если ТекущаяДатаСеанса() > Объект.ДатаНачалаОтсутствия Тогда
			Элементы.ИнфоНадпись.Шрифт = Новый Шрифт(, , Истина);
		КонецЕсли;
	ИначеЕсли Объект.Проведен И (Объект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Отменено 
				Или Объект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.НаСогласовании) Тогда
		ИнфоНадпись = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствие %1 на период с %2 по %3 находится в  состоянии %4.
                  |Необходимо провести документ в в состоянии “Утверждено”.'"), Строка(Объект.Сотрудник), 
				Формат(Объект.ДатаНачалаОтсутствия, "ДФ=dd.MM.yyyy"), ДатаОкончанияСтр, Строка(Объект.Состояние)));
	ИначеЕсли Объект.Проведен И Объект.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Завершено Тогда
		Если ЗначениеЗаполнено(Объект.ЗамещающийСотрудник) Тогда
			ИнфоНадпись = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Замещающий - %1
	                  |на %2 перестал замещать %3.'"), Строка(Объект.ЗамещающийСотрудник), Формат(ТекущаяДатаСеанса(), 
		              "ДФ=dd.MM.yyyy"), Строка(Объект.Сотрудник)));
		Иначе
			ИнфоНадпись = "";
		КонецЕсли;
	Иначе	
		ИнфоНадпись = "";
		//ИнфоНадпись = Новый ФорматированнаяСтрока(НСтр("ru = 'Для регистрации отсутствия сотрудника необходимо провести документ в состоянии “Утверждено”.'"));
	КонецЕсли;
	Элементы.ИнфоНадпись.Заголовок = ИнфоНадпись;
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы КАК CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы
	               |ГДЕ
	               |	CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	               |	И НЕ CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы.ПометкаУдаления
	               |	И НЕ CRM_ОтсутствиеСотрудникаПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы ('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Действие возможно только после записи данных. Записать?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,
		 НСтр("ru = 'Отсутствие сотрудника будет завершено. Продолжить?'"),
		 РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗавершение(Результат, ДопПараметры) Экспорт
	Объект.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СостоянияОтсутствияСотрудника.Завершено");
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПересеченияПериодов(Ссылка, Сотрудник, ДатаНачалаОтсутствия, ДатаОкончанияОтсутствия)
	
	ТекстСообщения = "";
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("МассивСсылок", Новый Массив);
	СтруктураОтвета.Вставить("ТекстСообщения", ТекстСообщения);
	
	// Проверим, что сотрудник не включен в другие документы, как замещающий.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ОтсутствиеСотрудников.ДатаНачала КАК ДатаНачала,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ОтсутствиеСотрудников.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	                      |			ТОГДА ДАТАВРЕМЯ(3000, 12, 31)
	                      |		ИНАЧЕ CRM_ОтсутствиеСотрудников.ДатаОкончания
	                      |	КОНЕЦ КАК ДатаОкончания,
	                      |	CRM_ОтсутствиеСотрудников.Регистратор КАК Регистратор,
	                      |	CRM_ОтсутствиеСотрудников.Сотрудник КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.CRM_ОтсутствиеСотрудников КАК CRM_ОтсутствиеСотрудников
	                      |ГДЕ
	                      |	CRM_ОтсутствиеСотрудников.Регистратор <> &Регистратор
	                      |	И CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник = &Сотрудник");
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	ТемпОкончаниеОтсутствия = ?(ЗначениеЗаполнено(ДатаОкончанияОтсутствия), ДатаОкончанияОтсутствия, Дата(3000,12,31));
	Пока Выборка.Следующий() Цикл
		
		ДатаПересеченияНачало = Макс(ДатаНачалаОтсутствия, Выборка.ДатаНачала);
		ДатаПересеченияКонец = Мин(ТемпОкончаниеОтсутствия, Выборка.ДатаОкончания);
		
		Если Макс(ДатаНачалаОтсутствия, Выборка.ДатаНачала) <= Мин(ТемпОкончаниеОтсутствия, Выборка.ДатаОкончания) Тогда
			СтруктураОтвета.МассивСсылок.Добавить(Выборка.Регистратор);
			ДатаПересеченияНачалоСтрока = Формат(ДатаПересеченияНачало, "ДФ=dd.MM.yyyy");
			ДатаПересеченияКонецСтрока = Формат(ДатаПересеченияКонец,  "ДФ=dd.MM.yyyy");
			ПериодЗамещенияТекст = ?(ДатаПересеченияНачало = ДатаПересеченияКонец, "на %1", "с %1 по %2");
			ПериодЗамещенияТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПериодЗамещенияТекст, 
			                                                                               ДатаПересеченияНачалоСтрока,
			                                                                               ДатаПересеченияКонецСтрока);
			
			ТекстСообщения = ?(ТекстСообщения = "", ТекстСообщения, ТекстСообщения + Символы.ПС) +
			                 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     НСтр("ru = '%1 указан как замещающий %2 в документе %3 %4.'"),
			                     Строка(Сотрудник),
			                     Строка(Выборка.Сотрудник),
			                     Строка(Выборка.Регистратор),
			                     ПериодЗамещенияТекст);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекстСообщения = "" Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС +
		                 НСтр("ru = 'Выполнить автоматическую корректировку?'");
		СтруктураОтвета.ТекстСообщения = ТекстСообщения;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьКорректировкуДокументовОтсутствия(ДокументОбъект, СписокРедактируемыхДокументов)
	
	ТемпОкончаниеОтсутствия = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияОтсутствия),
		 ДокументОбъект.ДатаОкончанияОтсутствия, Дата(3000,12,
		31));
	
	Для Каждого ТекЭлемент Из СписокРедактируемыхДокументов Цикл
		
		ТекОбъект = ТекЭлемент.Значение.ПолучитьОбъект();
		ТекОбъект.СвязанныйДокумент = ДокументОбъект.Ссылка;
		
		СписокНеиспользованныхДат = Новый СписокЗначений;
		СписокНеиспользованныхДат.Добавить(ДокументОбъект.ДатаНачалаОтсутствия);
		СписокНеиспользованныхДат.Добавить(ТемпОкончаниеОтсутствия);
		
		СоздаватьДопДокументы = Истина;
		
		// Дата начала отсутствия
		Если ДокументОбъект.ДатаОкончанияОтсутствия < ТекОбъект.ДатаОкончанияОтсутствия
			И ТекОбъект.ДатаНачалаОтсутствия >= ДокументОбъект.ДатаНачалаОтсутствия Тогда
			
			Если ТекОбъект.ДатаНачалаОтсутствия > ДокументОбъект.ДатаНачалаОтсутствия Тогда
				СписокНеиспользованныхДат.Удалить(СписокНеиспользованныхДат.НайтиПоЗначению(ДокументОбъект.ДатаНачалаОтсутствия));
				СписокНеиспользованныхДат.Добавить(ТекОбъект.ДатаНачалаОтсутствия);
			КонецЕсли;
			
			ТекОбъект.ДатаНачалаОтсутствия = ДокументОбъект.ДатаОкончанияОтсутствия + 86400;
			
		КонецЕсли;
		
		// Дата окончания отсутствия
		Если ТекОбъект.ДатаНачалаОтсутствия < ДокументОбъект.ДатаНачалаОтсутствия Тогда
			
			СписокНеиспользованныхДат.Добавить(ТекОбъект.ДатаОкончанияОтсутствия);
			ТекОбъект.ДатаОкончанияОтсутствия = ДокументОбъект.ДатаНачалаОтсутствия - 86400;
			
		Иначе
			Если ТекОбъект.ДатаОкончанияОтсутствия <= ТемпОкончаниеОтсутствия Тогда
				
				СоздаватьДопДокументы = Ложь;
				ТекОбъект.ЗамещающийСотрудник = ДокументОбъект.ЗамещающийСотрудник;
				
			КонецЕсли;
		КонецЕсли;
		
		ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если СоздаватьДопДокументы Тогда
			
			СписокНеиспользованныхДат.СортироватьПоЗначению();
			ДопДокументДатаНачала = СписокНеиспользованныхДат[0].Значение;
			ДопДокументДатаОкончания = ?(СписокНеиспользованныхДат[1].Значение = Дата(3000,12,31),
			                             Дата(0001,01,01),
			                             СписокНеиспользованныхДат[1].Значение);
			
			// Создать новый документ
			ДопДокумент = Документы.CRM_ОтсутствиеСотрудника.СоздатьДокумент();
			ДопДокумент.Дата = ТекущаяДатаСеанса();
			ДопДокумент.Сотрудник = ТекОбъект.Сотрудник;
			ДопДокумент.ПричинаОтсутствия = ТекОбъект.ПричинаОтсутствия;
			ДопДокумент.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено;
			ДопДокумент.ЗамещающийСотрудник = ДокументОбъект.ЗамещающийСотрудник;
			ДопДокумент.ДатаНачалаОтсутствия = ДопДокументДатаНачала;
			ДопДокумент.ДатаОкончанияОтсутствия = ДопДокументДатаОкончания;
			ДопДокумент.СвязанныйДокумент = ДокументОбъект.Ссылка;
			ДопДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
			СписокНеиспользованныхДат.Удалить(СписокНеиспользованныхДат.НайтиПоЗначению(ДопДокументДатаНачала));
			СписокНеиспользованныхДат.Удалить(СписокНеиспользованныхДат.НайтиПоЗначению(ДопДокументДатаОкончания));
			
			СписокНеиспользованныхДат.Добавить(ДопДокументДатаОкончания + 86400);
			СписокНеиспользованныхДат.СортироватьПоЗначению();
			
			Если СписокНеиспользованныхДат.Количество() > 1 Тогда
				
				// Создать новый документ
				ДопДокумент = Документы.CRM_ОтсутствиеСотрудника.СоздатьДокумент();
				ДопДокумент.Дата = ТекущаяДатаСеанса();
				ДопДокумент.Сотрудник = ТекОбъект.Сотрудник;
				ДопДокумент.ПричинаОтсутствия = ТекОбъект.ПричинаОтсутствия;
				ДопДокумент.Состояние = Перечисления.CRM_СостоянияОтсутствияСотрудника.Утверждено;
				ДопДокумент.ЗамещающийСотрудник = ТекОбъект.ЗамещающийСотрудник;
				ДопДокумент.ДатаНачалаОтсутствия = СписокНеиспользованныхДат[0].Значение;
				ДопДокумент.ДатаОкончанияОтсутствия = СписокНеиспользованныхДат[1].Значение;
				ДопДокумент.СвязанныйДокумент = ДокументОбъект.Ссылка;
				ДопДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРедактируемыхДокументов.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСвязанныхДокументов()
	
	ДеревоСвязанныеДокументы = РеквизитФормыВЗначение("СвязанныеДокументы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ОтсутствиеСотрудника.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА CRM_ОтсутствиеСотрудника.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.CRM_ОтсутствиеСотрудника.ПустаяСсылка)
		|			ТОГДА CRM_ОтсутствиеСотрудника.Ссылка
		|		ИНАЧЕ CRM_ОтсутствиеСотрудника.СвязанныйДокумент
		|	КОНЕЦ КАК СвязанныйДокумент,
		|	CRM_ОтсутствиеСотрудника.Сотрудник КАК Сотрудник,
		|	CRM_ОтсутствиеСотрудника.ПричинаОтсутствия КАК ПричинаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ЗамещающийСотрудник КАК ЗамещающийСотрудник,
		|	РАЗНОСТЬДАТ(CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия, CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия, ДЕНЬ) КАК ПериодОтсутствия
		|ПОМЕСТИТЬ втСсылкиНаДокументы
		|ИЗ
		|	Документ.CRM_ОтсутствиеСотрудника КАК CRM_ОтсутствиеСотрудника
		|ГДЕ
		|	CRM_ОтсутствиеСотрудника.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ОтсутствиеСотрудника.Ссылка,
		|	CRM_ОтсутствиеСотрудника.Ссылка,
		|	CRM_ОтсутствиеСотрудника.Сотрудник,
		|	CRM_ОтсутствиеСотрудника.ПричинаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ЗамещающийСотрудник,
		|	РАЗНОСТЬДАТ(CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия, CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия, ДЕНЬ)
		|ИЗ
		|	Документ.CRM_ОтсутствиеСотрудника КАК CRM_ОтсутствиеСотрудника
		|ГДЕ
		|	CRM_ОтсутствиеСотрудника.Ссылка = &СвязанныйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ОтсутствиеСотрудника.Ссылка,
		|	CRM_ОтсутствиеСотрудника.СвязанныйДокумент,
		|	CRM_ОтсутствиеСотрудника.Сотрудник,
		|	CRM_ОтсутствиеСотрудника.ПричинаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ЗамещающийСотрудник,
		|	РАЗНОСТЬДАТ(CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия, CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия, ДЕНЬ)
		|ИЗ
		|	Документ.CRM_ОтсутствиеСотрудника КАК CRM_ОтсутствиеСотрудника
		|ГДЕ
		|	CRM_ОтсутствиеСотрудника.СвязанныйДокумент = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ОтсутствиеСотрудника.Ссылка,
		|	CRM_ОтсутствиеСотрудника.СвязанныйДокумент,
		|	CRM_ОтсутствиеСотрудника.Сотрудник,
		|	CRM_ОтсутствиеСотрудника.ПричинаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия,
		|	CRM_ОтсутствиеСотрудника.ЗамещающийСотрудник,
		|	РАЗНОСТЬДАТ(CRM_ОтсутствиеСотрудника.ДатаНачалаОтсутствия, CRM_ОтсутствиеСотрудника.ДатаОкончанияОтсутствия, ДЕНЬ)
		|ИЗ
		|	Документ.CRM_ОтсутствиеСотрудника КАК CRM_ОтсутствиеСотрудника
		|ГДЕ
		|	CRM_ОтсутствиеСотрудника.СвязанныйДокумент = &СвязанныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСсылкиНаДокументы.Ссылка КАК Ссылка,
		|	втСсылкиНаДокументы.СвязанныйДокумент КАК СвязанныйДокумент,
		|	втСсылкиНаДокументы.Сотрудник КАК Сотрудник,
		|	втСсылкиНаДокументы.ПричинаОтсутствия КАК ПричинаОтсутствия,
		|	втСсылкиНаДокументы.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
		|	втСсылкиНаДокументы.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
		|	втСсылкиНаДокументы.ЗамещающийСотрудник КАК ЗамещающийСотрудник,
		|	втСсылкиНаДокументы.ПериодОтсутствия КАК ПериодОтсутствия
		|ИЗ
		|	втСсылкиНаДокументы КАК втСсылкиНаДокументы
		|ГДЕ
		|	НЕ втСсылкиНаДокументы.СвязанныйДокумент = ЗНАЧЕНИЕ(Документ.CRM_ОтсутствиеСотрудника.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	втСсылкиНаДокументы.Ссылка,
		|	втСсылкиНаДокументы.СвязанныйДокумент,
		|	втСсылкиНаДокументы.Сотрудник,
		|	втСсылкиНаДокументы.ПричинаОтсутствия,
		|	втСсылкиНаДокументы.ДатаНачалаОтсутствия,
		|	втСсылкиНаДокументы.ДатаОкончанияОтсутствия,
		|	втСсылкиНаДокументы.ЗамещающийСотрудник,
		|	втСсылкиНаДокументы.ПериодОтсутствия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаОтсутствия
		|ИТОГИ ПО
		|	СвязанныйДокумент";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СвязанныйДокумент", Объект.СвязанныйДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТекстШаблонПредставления = НСтр("ru = '%1 замещается %2 по причине %3 с %4 по %5 (%6)'");
	
	ВыборкаСвязанныйДокумент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСвязанныйДокумент.Следующий() Цикл
		
		ГлавнаяСтрока = ДеревоСвязанныеДокументы.Строки.Добавить();
		ГлавнаяСтрока.ДокументСсылка = ВыборкаСвязанныйДокумент.СвязанныйДокумент;
		ГлавнаяСтрока.ЭтоТекущийДокумент = (ВыборкаСвязанныйДокумент.СвязанныйДокумент = Объект.Ссылка);
		
		ВыборкаДетальныеЗаписи = ВыборкаСвязанныйДокумент.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Ссылка = ВыборкаДетальныеЗаписи.СвязанныйДокумент Тогда
				РедактируемаяСтрока = ГлавнаяСтрока;
			Иначе
				РедактируемаяСтрока = ГлавнаяСтрока.Строки.Добавить();
			КонецЕсли;
			
			РедактируемаяСтрока.ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			РедактируемаяСтрока.ЭтоТекущийДокумент = (ВыборкаДетальныеЗаписи.Ссылка = Объект.Ссылка);
			
			ПериодОтсутсвтияСтрока = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			                         НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня';
			                         |en = ';%1 день;;%1 дня;%1 дней;%1 дня'"), ВыборкаДетальныеЗаписи.ПериодОтсутствия);
			
			ПредставлениеЗамещающего = СклонениеПредставленийОбъектов.ПросклонятьФИО(
			                               ВыборкаДетальныеЗаписи.ЗамещающийСотрудник, 5);
			
			ПредставлениеПричины = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			                           ВыборкаДетальныеЗаписи.ПричинаОтсутствия, 6);
			
			РедактируемаяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                                            ТекстШаблонПредставления,
			                                            ВыборкаДетальныеЗаписи.Сотрудник,
			                                            ПредставлениеЗамещающего,
			                                            ПредставлениеПричины,
			                                            Формат(ВыборкаДетальныеЗаписи.ДатаНачалаОтсутствия, "ДЛФ=DD"),
			                                            Формат(ВыборкаДетальныеЗаписи.ДатаОкончанияОтсутствия, "ДЛФ=DD"),
			                                            ПериодОтсутсвтияСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоСвязанныеДокументы, СвязанныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СвязанныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоТекущийДокумент Тогда
		ПоказатьЗначение(,ТекущиеДанные.ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
