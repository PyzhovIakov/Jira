
#Область ОписаниеПеременных

&НаКлиенте
Перем РольОтветственногоДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +CRM
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	// -CRM
	
	Если Объект.Ссылка.Пустая() Тогда
		// +CRM
		Объект.Автор = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Ответственный = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Объект.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		// -CRM
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
	КонецЕсли;
	
	// +CRM
	// Лиды
	НаборСвойствНастроекЭлементовСостоянияОбращения = Новый Массив;
	НаборСвойствНастроекЭлементовСостоянияОбращения.Добавить("Видимость");
	НаборСвойствНастроекЭлементовСостоянияОбращения.Добавить("Доступность");
	АдресНастройкиЭлементовСостоянияОбращения = CRM_МетодыФормДокументовСервер.СохранитьНастройкиЭлементовСостоянияОбращения(ЭтотОбъект,
																															МассивЭлементовСостоянияОбращения(),
																															НаборСвойствНастроекЭлементовСостоянияОбращения);
	ОбновитьСостояниеОбращения();
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите")
		 И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;	
	// -CRM
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Входящий = НЕ (Параметры.Свойство("Основание")
		И НЕ (Параметры.Основание = Ложь ИЛИ Параметры.Основание = Неопределено));
	КонецЕсли;
	
	// +CRM
	Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		АбонентКонтакт_Состояние = Объект.АбонентКонтакт.CRM_Состояние;
	Иначе
		ОтправительКонтакт_Состояние = Перечисления.CRM_Состояние.ПустаяСсылка();
	КонецЕсли;
	
	Если Параметры.Свойство("АбонентКонтакт") И ЗначениеЗаполнено(Параметры.АбонентКонтакт) Тогда
		Объект.АбонентКонтакт = Параметры.АбонентКонтакт;
		Если АбонентКонтакт_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.Уволен") Тогда
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт) + " (" + АбонентКонтакт_Состояние + ")";
		Иначе
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	// -CRM
	
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		// +CRM
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Ложь);
		// -CRM
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.ДанныеУчастника <> Неопределено И Объект.АбонентКонтакт <> Параметры.ДанныеУчастника.Контакт Тогда
		ЗаполнитьНаОснованииУчастника(Параметры.ДанныеУчастника);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	// +CRM
	сфпЗаполнитьВладельцаКонтакта();
	// -CRM
	
	ПриСозданииИПриЧтенииНаСервере();
	
	// +CRM
	//ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СформироватьОписаниеКаналаИсточника();
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	// -CRM
	
	// Если Элементы.Найти("СкрытьПоказатьИнтересы") <> Неопределено Тогда
		//Элементы.СкрытьПоказатьИнтересы.Видимость = Ложь;
	//КонецЕсли;
	
	сфпИспользоватьРечевуюАналитику = Константы.сфпИспользоватьРечевуюАналитику.Получить();
	Элементы.ГруппаРечеваяАналитика.Видимость = сфпИспользоватьРечевуюАналитику;
		
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ВнутреннийНомер, ДатаНачала, ДатаОтвета, ДатаОкончания
		|ИЗ РегистрСведений.сфпИсторияЗвонков
		|ГДЕ Звонок = &Звонок И ИдентификаторЗвонка = &ИдентификаторЗвонка");
		Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", Объект.сфпИдентификаторЗвонка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			сфпВнутреннийНомер = Выборка.ВнутреннийНомер;
			сфпДатаНачала = Выборка.ДатаНачала;
			сфпДатаОтвета = Выборка.ДатаОтвета;
			сфпДатаОкончания = Выборка.ДатаОкончания;
		КонецЕсли;
		
		Если сфпИспользоватьРечевуюАналитику Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ Тематика, Количество, СтопСлова
			|ИЗ РегистрСведений.сфпРечеваяАналитика
			|ГДЕ Звонок = &Звонок
			|УПОРЯДОЧИТЬ ПО Тематика
			|АВТОУПОРЯДОЧИВАНИЕ");
			Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
			сфпТематикиРазговора.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	СписокВидовКонтактовДляВыбора = Новый СписокЗначений();
	СписокВидовКонтактовДляВыбора.Добавить("Партнеры", Нстр("ru='Клиенты';en='Customers'"));
	СписокВидовКонтактовДляВыбора.Добавить("КонтактныеЛицаПартнеров", Нстр("ru='Контактные лица';en='Contact persons'"));
	СписокВидовКонтактовДляВыбора.Добавить("CRM_ПотенциальныеКлиенты",
		 Нстр("ru='Потенциальные клиенты';en='Potential сustomers'"));
	
	//СписокИнтерактивноСоздаваемыхКонтактов = Новый СписокЗначений();
	//СписокИнтерактивноСоздаваемыхКонтактов.Добавить("Партнеры", Нстр("ru='Создать клиента';en='Create customer'"));
	//СписокИнтерактивноСоздаваемыхКонтактов.Добавить("КонтактныеЛицаПартнеров",
		// Нстр("ru='Создать контактное лицо';en='Create contact person'"));
	//СписокИнтерактивноСоздаваемыхКонтактов.Добавить("CRM_ПотенциальныеКлиенты",
		// Нстр("ru='Создать потенциального клиента';
		//|en='Create potential customer'"));
	
	Если Параметры.Свойство("CRM_ОтключитьКомандыПереадресации") Тогда
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Ложь;
		Элементы.ПеренаправитьНаРоль.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) И Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.CRM_РольОтветственного.Видимость = Истина;
	КонецЕсли;
	
	ОбрабатыватьОбращения = Константы.сфпНастройкиТелефонии_ПрименитьПравилаОбработки.Получить();
	Если Не (ОбрабатыватьОбращения <> Неопределено И ОбрабатыватьОбращения) Тогда
		Элементы.ПравилаОбработки.Видимость = Ложь;
	КонецЕсли;
	
	ПользовательАдминистратор = (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("сфпУправлениеМаршрутизацией"));
	Элементы.ПравилаОбработки.Доступность = ПользовательАдминистратор;
	
	УстановитьУсловноеОформление();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	// -CRM
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ГиперссылкаФайлов = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	// -CRM
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииИПриЧтенииНаСервере();
	
	// CRM_УправлениеДоступом
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец CRM_УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +CRM
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	сфпДлительность = Дата('00010101') + Объект.сфпДлительностьЗвонка;
	
	УстановитьЗаголовокФормы();
	
	Если Объект.Входящий Тогда
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Элементы.СостояниеЗвонка.Заголовок = НСтр("ru='Пропущенный';en='Missed'"); 
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Элементы.СостояниеЗвонка.Заголовок = НСтр("ru='Отвеченный';en='Answered'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;

		Элементы.ГруппаЛево.Заголовок = НСтр("ru='Кто звонил';en='Caller'");
		Элементы.ГруппаПраво.Заголовок = НСтр("ru='Кто ответил';en='Who answered'");
		
	Иначе
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Элементы.СостояниеЗвонка.Заголовок = НСтр("ru='Не дозвонились';en='Not reached'");
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Элементы.СостояниеЗвонка.Заголовок = НСтр("ru='Отвеченный';en='Answered'"); 
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;	
		
		Элементы.ГруппаЛево.Заголовок = НСтр("ru='Кому звонили';en='Called Whom'");
		Элементы.ГруппаПраво.Заголовок = НСтр("ru='Кто звонил';en='Caller'");
	КонецЕсли;
	// -CRM
			
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	//ПроверитьДоступностьСозданияКонтакта();
	ДоступностьПервичногоИнтереса();
	
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
		ТекЭлемент = Элементы.Найти(СпозиционироватьсяНаРеквизите);
		Если ТекЭлемент <> Неопределено Тогда
			ТекущийЭлемент = ТекЭлемент;
		КонецЕсли;
	КонецЕсли;
	
	сфпРазрешеныИзмененияВДокументе();

	УстановитьВидимостьКонтакта();
	
	Элементы.сфпНомерКомпании.Видимость = ЗначениеЗаполнено(Объект.сфпНомерКомпании);
	// -CRM
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взамодействия.ТелефонныйЗвонок.ДлительностьСценариев.ВремяРаботыВФорме");
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	// +CRM
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	// +CRM
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		// Зафиксировать актуальный источник привлечения.
		НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборРегистра.Прочитать();
		НаборРегистра.Очистить();
		
		// Если ЗначениеЗаполнено(сфпВладелец) И (ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ
		// ЗначениеЗаполнено(ИсточникПервичногоИнтереса)) Тогда
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
			Запись								= НаборРегистра.Добавить();
			Запись.Период						= ?(ЗначениеЗаполнено(ТекущийОбъект.Дата), ТекущийОбъект.Дата,
				 CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
			Запись.Партнер						= сфпВладелец;
			Запись.Сделка						= ТекущийОбъект.Ссылка;
			Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
			Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
		КонецЕсли;
		
		НаборРегистра.Записать();
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "ТелефонныйЗвонок");
	// +CRM
	//ПроверитьДоступностьСозданияКонтакта();
	
	Если НЕ ПустаяСтрока(Объект.сфпCoMagicID) Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(Объект.АбонентКонтакт, "сфпCoMagicID") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Оповестить("ОбновленыДанныеТелефонногоЗвонка", Объект.Ссылка);
	// -CRM
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// +CRM
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Объект.сфпДлительностьЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата() - Объект.Дата;
			Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Отвеченный");
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание	= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если Параметр.Свойство("НовыйОтветственный") Тогда
				Объект.Ответственный = Параметр.НовыйОтветственный;
			КонецЕсли;
			
			Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Истина;
			Элементы.ПеренаправитьНаРоль.Доступность = Истина;
			
			Попытка
				Записать();
			Исключение
				Модифицированность	= Истина;
			КонецПопытки;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли (ИмяСобытия = "сфпКонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			
			Если Объект.ВерсияДанных <> ВерсияДанныхОбъекта(Объект.Ссылка) Тогда
				Прочитать();
			КонецЕсли;
			
			Если Параметр.Свойство("СостояниеЗвонка") И (Объект.сфпСостояниеЗвонка <> Параметр.СостояниеЗвонка) Тогда
				Объект.сфпСостояниеЗвонка = Параметр.СостояниеЗвонка;
				Модифицированность = Истина;
			КонецЕсли;
			
			Если Параметр.Свойство("ДлительностьЗвонка") И (Объект.сфпДлительностьЗвонка <> Параметр.ДлительностьЗвонка) Тогда
				Объект.сфпДлительностьЗвонка = Параметр.ДлительностьЗвонка;
				Модифицированность = Истина;
			КонецЕсли;	
			
			Если Параметр.Свойство("ИдентификаторЗаписи") И НЕ ЗначениеЗаполнено(Объект.сфпИдентификаторЗаписи) Тогда
				Объект.сфпИдентификаторЗаписи = Параметр.ИдентификаторЗаписи;
				Модифицированность = Истина;
			КонецЕсли;
			
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание	= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если ЗначениеЗаполнено(Элементы.Комментарий.ТекстРедактирования) Тогда
				Объект.Комментарий = Элементы.Комментарий.ТекстРедактирования;
			КонецЕсли;
			
			Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Истина;
			Элементы.ПеренаправитьНаРоль.Доступность = Истина;
			
			Попытка
				Записать();
			Исключение
				Модифицированность	= Истина;
			КонецПопытки;
		КонецЕсли;

	 	Возврат;

	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Если (Объект.сфпДлительностьЗвонка = 0) И (сфпСтруктураВнешнихДанных = Неопределено) Тогда
				// Заполняем документ данными из CoMagic
				сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
				Объект.сфпCoMagicID			= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				Объект.Комментарий = Объект.Комментарий + ?(ПустаяСтрока(Объект.Комментарий), "", Символы.ПС) 
					+ НСтр("ru='Кампания: ';en='Campaign: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
					+ НСтр("ru='Сайт: ';en='Website: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
					+ НСтр("ru='Ключевые слова: ';en='Keywords: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query;
					
				ИмяПредопределенногоЗначения = "ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic";	
				КаналПервичногоИнтереса = ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
				ИсточникПервичногоИнтереса =
					сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
			
				Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
					сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
				КонецЕсли;
				
				Попытка
					Записать();
				Исключение
					Модифицированность	= Истина;
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
		
		Возврат;

	ИначеЕсли (ИмяСобытия = "ЗаполнитьКонтактВТелефонномЗвонке") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Объект.АбонентКонтакт = Параметр.Контакт;
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
			Элементы.СоздатьКонтакт.Видимость = Ложь;
			
			Попытка
				Записать();
			Исключение
				Модифицированность	= Истина;
			КонецПопытки;
			
			сфпЗаполнитьВладельцаКонтакта();
			УстановитьВидимостьКонтакта();
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" ИЛИ  ИмяСобытия = "Создано новое контактное лицо"
		 ИЛИ  ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		
		Если Источник <> Неопределено И ЭтотОбъект <> Источник.ВладелецФормы Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранныйКонтакт = Параметр;
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ДанныеПК = ДанныеПотенциальногоКлиента(Параметр);
			Если ЗначениеЗаполнено(ДанныеПК.Контакт) Тогда
				ВыбранныйКонтакт = ДанныеПК.Контакт;
			ИначеЕсли ЗначениеЗаполнено(ДанныеПК.Клиент) Тогда
				ВыбранныйКонтакт = ДанныеПК.Клиент;
			КонецЕсли;
		КонецЕсли;
		ПриВыбореКонтакта(ВыбранныйКонтакт);
		
	ИначеЕсли ИмяСобытия = "ОбъектыПереопределеныСПК" И Объект.АбонентКонтакт = Параметр.ПК Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ПринятиеОбращения" И Источник = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	// -CRM
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// +CRM
	//ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	//ПроверитьДоступностьСозданияКонтакта();
	// -CRM

	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// +CRM	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// -CRM

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// +CRM
	//Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	ОбновитьСостояниеОбращения();
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// +CRM
	//ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	Если ИсточникВыбора.ВладелецФормы <> ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ПриВыбореКонтакта(ВыбранноеЗначение);
	
	ЗадатьВопросОСохраненииКИ();
	// -CRM
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взамодействия.ТелефонныйЗвонок.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Источник.ВладелецФормы <> ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ПриВыбореКонтакта(НовыйОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
КонецПроцедуры
// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// +CRM
&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Объект.Ответственный = Неопределено Тогда
		Объект.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ВыбранПользователь = (ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи"));
	
	Если ВыбранПользователь Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура АбонентПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовоеОповещение = Новый ОписаниеОповещения("ВыбратьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыбратьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник." + Результат.Значение + ".ФормаВыбора", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура АбонентПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АбонентКонтакт = Неопределено;
	АбонентКонтактПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.АбонентКонтакт);
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовоеОповещение = Новый ОписаниеОповещения("ВыбратьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		
		Элементы.Ответственный.Видимость = Истина;
		Элементы.CRM_РольОтветственного.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.CRM_РольОтветственного = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		
			ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Объект.CRM_РольОтветственного = РольОтветственногоДоИзменения;
			Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РольОтветственногоДоИзменения = Объект.CRM_РольОтветственного;
КонецПроцедуры
// -CRM

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтактВыполнить()
	
	// +CRM
	//ВзаимодействияКлиент.СоздатьКонтакт(
	//	Объект.АбонентПредставление, Объект.АбонентКакСвязаться, Объект.Ссылка, СписокИнтерактивноСоздаваемыхКонтактов);
	
	ЗаполнитьСписокИнтерактивноСоздаваемыхКонтактов();
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокИнтерактивноСоздаваемыхКонтактов, Элементы.СоздатьКонтакт);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеВзаимодействияВыполнить()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предмет", Объект.Предмет);
	
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.ФормаСписка", ПараметрыОтбора, ЭтотОбъект, , Окно);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// +CRM
&НаКлиенте
Процедура ПрослушатьЗаписьРазговора(Команда)
	
	ПараметрыЗвонка = Новый Структура("ИдентификаторЗвонка, ИдентификаторЗаписи, Ответственный,
		| Входящий, НомерТелефона, ВнутреннийНомер, ДатаНачала, ДатаОкончания, Звонок",
		Объект.сфпИдентификаторЗвонка, Объект.сфпИдентификаторЗаписи, Объект.Ответственный, Объект.Входящий, Объект.АбонентКакСвязаться, сфпВнутреннийНомер, сфпДатаНачала, сфпДатаОкончания, Объект.Ссылка);
	сфпСофтФонПроКлиент.НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, ЭтотОбъект,
		Элементы.ФормаПрослушатьЗаписьРазговора);
	
КонецПроцедуры // ПрослушатьЗаписьРазговора()

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "КонтактныеЛицаПартнеров" Тогда
		ПараметрыФормы = Новый Структура("Основание", Новый Структура("НомерТелефона", Объект.АбонентКакСвязаться));
		ИмяФормыВыбора = ".Форма.CRM_ФормаБыстрогоВвода";
				
	ИначеЕсли Результат.Значение = "Партнеры" Тогда
		СтруктураПараметрыНового = Новый Структура;
		СтруктураПараметрыНового.Вставить("Наименование" , ?(СтрНайти(Объект.АбонентПредставление,
			 "!!!") = 0, Объект.АбонентПредставление,
			 ""));
		ПараметрыФормы = Новый Структура("Основание, ПараметрыНового", Объект.Ссылка, СтруктураПараметрыНового);
		Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.АбонентКонтакт);
			ПараметрыФормы.Вставить("ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи");
		КонецЕсли;
		
		ИмяФормыВыбора = ".ФормаОбъекта";
	Иначе
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ИмяФормыВыбора = ".ФормаОбъекта";
	КонецЕсли;
	ОткрытьФорму("Справочник." + Результат.Значение + ИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТелефон(Команда)
	ДобавитьТелефонНаСервер(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться);
	//Элементы.ДобавитьТелефон.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРоль(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач,
		 Новый Структура("Источник", ЭтотОбъект),
		 Тип("СправочникСсылка.РолиИсполнителей"));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьОтклонение(Команда)
	CRM_МетодыФормДокументовКлиент.ОтменитьОтклонение(Объект.Ссылка, Элементы.ГруппаКомандаОтменитьОтклонение);
	ОбновитьСостояниеОбращения();
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Если CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.АбонентКонтакт);
		
		ОчищенныйНомер = SMS4B_ОтправкаSMS.ФорматироватьНомер(Объект.АбонентКакСвязаться);
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ОчищенныйНомер);
		ПреобразованныйНомер = сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
		Структура.Вставить("Телефон", ПреобразованныйНомер);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакОбращение(Команда)
	
	ОтметитьКакОбращениеНаСервере();
	Элементы.ОтметитьКакОбращение.Видимость = Ложь;
	Элементы.СостояниеЛида.Видимость = Истина;
	Элементы.ДекорацияСостояниеЛида.Видимость = Истина;
	
КонецПроцедуры
// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНаОснованииУчастника(ДанныеУчастника)
	
	Объект.АбонентКонтакт = ДанныеУчастника.Контакт;
	Если ПустаяСтрока(ДанныеУчастника.КакСвязаться) Тогда
		
		Объект.АбонентКакСвязаться = "";
		Взаимодействия.ДозаполнитьПоляКонтактов(Объект.АбонентКонтакт,
			Объект.АбонентПредставление,
			Объект.АбонентКакСвязаться,
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Иначе
		
		Объект.АбонентКакСвязаться = ДанныеУчастника.КакСвязаться;
		
	КонецЕсли;
	
	Объект.АбонентПредставление = ДанныеУчастника.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()

	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	// +CRM
	//Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	//Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	// -CRM

КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// +CRM

&НаСервереБезКонтекста
// Процедура добавляет номер телефона из поля "Как связаться" в объект из поля "Контакт"
//
//   Параметры:
//    СсылкаКИ 		- СправочникСсылка 	- Объект, к которому добавляется телефон
//	  НомерТелефона - Строка			- Добавляемый номер телефона
//
Процедура ДобавитьТелефонНаСервер(СсылкаКИ, НомерТелефона)
	ОбъектКИ = СсылкаКИ.ПолучитьОбъект();
	НомерТелефона = СокрЛП(НомерТелефона);
	Если ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если ОбъектКИ.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ИначеЕсли СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		Иначе	
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
				+ ") " 
				+ СтруктураНомера.НомерТелефона;
		Иначе
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
		КонецЕсли;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
				+ ") " 
				+ СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента");
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
				+ ") " 
				+ СтруктураНомера.НомерТелефона;
		Иначе
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		КонецЕсли;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
				+ ") " 
				+ СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Пользователи") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если СтрНайти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя");
		Иначе
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий");
		КонецЕсли;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны), СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода 
				+ ") " 
				+ СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;
		ОбъектКИ.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКонтакта()
	
	Элементы.АбонентКонтакт.Видимость       = Ложь;
	Элементы.АбонентПредставление.Видимость = НЕ Элементы.АбонентКонтакт.Видимость;
	Элементы.СоздатьКонтакт.Видимость       = НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) 
	                                         
	                                          	
	                                          	 	 ИЛИ (ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                          	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.АбонентКонтакт)));
	Элементы.сфпВладелец.Видимость          = ЗначениеЗаполнено(Объект.АбонентКонтакт)
		 И ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров");
	
КонецПроцедуры

&НаСервере
// Процедура вычисляет владельца контакта и отображает его в форме документа
//
Процедура сфпЗаполнитьВладельцаКонтакта()
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		ИмяМетаданных = Объект.АбонентКонтакт.Метаданные().Имя;
		Если ИмяМетаданных = "КонтактныеЛица" ИЛИ ИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
			//Элементы.сфпВладелец.Видимость = Истина;
			//Элементы.сфпБизнесРегион_GMT.Видимость = Истина;
			
			УстановитьПривилегированныйРежим(Истина);
			сфпВладелец = Объект.АбонентКонтакт.Владелец;
			УстановитьПривилегированныйРежим(Ложь);
		ИначеЕсли ИмяМетаданных = "Партнеры" Тогда
			УстановитьПривилегированныйРежим(Истина);
			сфпВладелец = Объект.АбонентКонтакт;
			УстановитьПривилегированныйРежим(Ложь);
		Иначе	
			УстановитьПривилегированныйРежим(Истина);
			сфпВладелец = Справочники.Партнеры.ПустаяСсылка();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.АбонентКонтакт = Контакт.Ссылка;
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()	

&НаСервере
Процедура сфпРазрешеныИзмененияВДокументе()
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекущиеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекПользователь);
	Если ТекущиеПользователи.Найти(Объект.Ответственный) = Неопределено
		 И Не Пользователи.РолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией")
		И НЕ CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(ТекПользователь, Объект.CRM_РольОтветственного) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Ложь;
		Элементы.ПеренаправитьНаРоль.Доступность = Ложь;
		Элементы.ГруппаКомандаОтменитьОтклонение.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = НСтр("ru='Звонок';en='Call'");
	
	Если Объект.Входящий Тогда
		Заголовок = Заголовок + НСтр("ru=' входящий ';en=' Incoming '");
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			  Заголовок = Заголовок + НСтр("ru='(пропущенный)';en='(Missed)'");
		Иначе Заголовок = Заголовок + НСтр("ru='(отвеченный)';en='(Answered)'");
		КонецЕсли;

	Иначе
		Заголовок = Заголовок + НСтр("ru=' исходящий ';en=' Outcoming '");
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			  Заголовок = Заголовок + НСтр("ru='(не дозвонились)';en='(Not Reached)'");
		Иначе Заголовок = Заголовок + НСтр("ru='(отвеченный)';en='(Answered)'");
		КонецЕсли;	
	КонецЕсли;
	
	Заголовок = Заголовок + ", " + Объект.АбонентПредставление + ", " + Формат(Объект.Дата, "ДЛФ=D") 
		+ "/" + Формат(Объект.Дата, "ДЛФ=T; ДП=0:00:00") + "/" + Формат(сфпДлительность,
		 "ДЛФ=T; ДП=0:00:00");
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореКонтакта(ВыбранныйКонтакт)
	
	ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(ВыбранныйКонтакт);
	Если СписокВидовКонтактовДляВыбора.НайтиПоЗначению(ИмяМетаданных) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АбонентКонтакт = ВыбранныйКонтакт;
	АбонентКонтактПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ТекущаяДатаСеанса(), ЭтотОбъект.Предмет, сфпВладелец);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			//Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Иначе
		ПредыдущийИсточник = Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник <> Неопределено Тогда
		Актуальность = ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	
	пПартнер = сфпВладелец;
	
	Если Актуальность = Истина И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	
	ИначеЕсли Актуальность = Ложь И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = ЗаполнятьПервичныйИнтерес;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = ЗаполнятьПервичныйИнтерес;
	КонецЕсли;
	
	Если Элементы.ИсточникПервичногоИнтереса.Доступность И ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
			Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
			
		Иначе
			Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса);
			Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	//пПартнер = Неопределено;
	//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
	//	пПартнер = Партнер;
	// Иначе
	//	пПартнер = Объект.Партнер;
	//КонецЕсли;
	Если ЗначениеЗаполнено(сфпВладелец) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , сфпВладелец);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность =
					Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияДанныхОбъекта(ОбъектСсылка)
	сфпСофтФонПроСервер.сфпЗаписьЖурналаРегистрации("Отладка", "Запрос версии объекта: " 
		+ ОбъектСсылка.сфпИдентификаторЗвонка);
	Возврат ОбъектСсылка.ВерсияДанных;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПартнера(ПотенциальныйКлиент)
	
	Возврат ПотенциальныйКлиент.Партнер;
	
КонецФункции

#Область ОбработчикиИнтереса

&НаКлиенте
Процедура АбонентКонтактПриИзменении(Элемент = Неопределено)
	
	Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		АбонентКонтакт_Состояние = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.АбонентКонтакт,
			 "CRM_Состояние");
	Иначе
		АбонентКонтакт_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.ПустаяСсылка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		Если АбонентКонтакт_Состояние = ПредопределенноеЗначение("Перечисление.CRM_Состояние.Уволен") Тогда
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт) + " (" + АбонентКонтакт_Состояние + ")";
		Иначе
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		КонецЕсли;
	Иначе
		Объект.АбонентПредставление = НСтр("ru='!!!Не определен!!!';en='!!!Undefined!!!'");
	КонецЕсли;
	
	сфпЗаполнитьВладельцаКонтакта();
	УстановитьВидимостьКонтакта();
	УстановитьЗаголовокФормы();

	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	ЗаполнитьГруппуИнтереса();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ПараметрыФормы = Новый Структура();

	МассивСсылок = Новый Массив();
	ПараметрыФормы.Вставить("ТелефонныйЗвонок", Объект.Ссылка);
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("НомерТелефона", Объект.АбонентКакСвязаться);
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		МассивСсылок.Добавить(Объект.АбонентКонтакт);
	КонецЕсли;

	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, Объект.АбонентКакСвязаться);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработки(Команда)

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОткрытьФорму("Документ.ТелефонныйЗвонок.Форма.CRM_ФормаНастройкиПравилОбработки", , , , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ТекущееСостояние = Неопределено;
		Если CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние) Тогда
			CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
			Возврат;
		КонецЕсли;
		
		Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, Объект.Ссылка);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
				 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		Иначе	
			ОтклонитьОбращениеЗавершение(Истина, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, Ссылка) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	
	Иначе
	
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПричинаОтказа")
			 И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			ОтклонитьОбращениеНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);

		Иначе
			ОтклонитьОбращениеНаСервере(Ссылка, Неопределено, "");
		КонецЕсли;

		Объект.CRM_СкрытьВАРМ = Истина;
		Записать();

	КонецЕсли;

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) 
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
			 Комментарий); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
	
	// Надпись = "";
	// Интерес = Неопределено;
	//КаналПервичногоИнтереса = Неопределено;
	//ИсточникПервичногоИнтереса = Неопределено;
	//
	// Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
	//	Если ЗначениеЗаполнено(пПартнер) Тогда
	//		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,, пПартнер);
	//		Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
	//			Надпись = "Канал: " + Интерес.КаналПервичногоИнтереса;
	//			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
	//				Надпись = Надпись + Символы.ПС + "Источник: " + Интерес.ИсточникПервичногоИнтереса;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	//Элементы.ДекорацияИсточникПривлечения.Заголовок = Надпись;
	//  Элементы.ГруппаИсточникПривлечения.Видимость = ЗначениеЗаполнено(Надпись);

	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(сфпВладелец);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		//пПартнер = Неопределено;
		//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		//	пПартнер = Партнер;
		// Иначе
		//	пПартнер = Объект.Партнер;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(сфпВладелец) Тогда
			
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Если ПервичныйИнтерес.Количество() > 0 Тогда
				Интерес = ПервичныйИнтерес.Получить(0);
			Иначе
				Интерес = Неопределено;
			КонецЕсли;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо,
						 Надпись,
						 ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивЭлементовСостоянияОбращения()
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить(Элементы.ГруппаСостояниеЛида);
	МассивЭлементов.Добавить(Элементы.ПричинаОтклонения);
	МассивЭлементов.Добавить(Элементы.КомментарийСостоянияЛида);
	МассивЭлементов.Добавить(Элементы.ДекорацияЗаголовокСостояниеЛида);
	МассивЭлементов.Добавить(Элементы.ДекорацияСостояниеЛида);	
	МассивЭлементов.Добавить(Элементы.СостояниеЛида);
	МассивЭлементов.Добавить(Элементы.ФормаОтклонитьОбращение);

	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеОбращения()
	
	// Установка значений по умолчанию:
	СостояниеЛида = Неопределено;
	ПричинаОтклоненияЛида = Неопределено;
	КомментарийСостоянияЛида = Неопределено;
	ЛидСконвертированВОбъект = Неопределено;
	
	CRM_МетодыФормДокументовСервер.ВосстановитьНастройкиЭлементовСостоянияОбращения(АдресНастройкиЭлементовСостоянияОбращения,
																					МассивЭлементовСостоянияОбращения());

	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) 
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Объект.Ссылка) Тогда
		СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
		Если СтруктураСостоянияЛида = Неопределено ИЛИ НЕ Объект.Входящий Тогда
			Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
		Иначе
			СостояниеЛида = СтруктураСостоянияЛида.Состояние;
			Если СостояниеЛида <> Справочники.CRM_СостоянияЛидов.Новый Тогда
				Элементы.ФормаОтклонитьОбращение.Доступность = Ложь;
			КонецЕсли;

			Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
				КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;

				Элементы.ПричинаОтклонения.Видимость = ЗначениеЗаполнено(ПричинаОтклоненияЛида);
				Элементы.КомментарийСостоянияЛида.Видимость = ЗначениеЗаполнено(КомментарийСостоянияЛида);
				
				CRM_МетодыФормДокументовСервер.ДобавитьКомандуОтменитьОтклонение(ЭтотОбъект,
					 Элементы.ГруппаКомандаОтменитьОтклонение);
				
			Иначе
				ЛидСконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
				Элементы.ПричинаОтклонения.Видимость = Ложь;
				Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
			КонецЕсли;
			
			ОбновитьДатуОбработкиОбращения(СтруктураСостоянияЛида.ДатаОбработки);
			
		КонецЕсли;
		
		Элементы.ДекорацияЗаголовокСостояниеЛида.Видимость = Элементы.ПричинаОтклонения.Видимость
			 ИЛИ Элементы.КомментарийСостоянияЛида.Видимость;

	Иначе
		Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
		Элементы.ФормаОтклонитьОбращение.Видимость = Ложь;
		Элементы.ОтметитьКакОбращение.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияСостояниеЛида.Видимость = Элементы.ГруппаСостояниеЛида.Видимость;
	Элементы.СостояниеЛида.Видимость = Элементы.ГруппаСостояниеЛида.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуОбработкиОбращения(ДатаОбработки)
	
	ШаблонЗаголовка = НСтр("ru = 'Дата обработки: %1'; en = 'Processing Date: %1'");
	Элементы.ДатаОбработкиОбращения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		 Формат(ДатаОбработки,
		 "ДФ='dd.MM.yyyy HH:mm'"));
	Элементы.ДатаОбработкиОбращения.Видимость = ЗначениеЗаполнено(ДатаОбработки);
	
КонецПроцедуры

&НаСервере
Функция ТелефонКонтактаСуществует(Контакт, Телефон)
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КИСуществует = Ложь;
	
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
			Продолжить;
		Иначе
			СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);
			ТелефонКИ = СтрЗаменить(сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера), "+", "");
			Если Прав(ТелефонКИ, 7) = Прав(Телефон, 7) Тогда	
				КИСуществует = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КИСуществует;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;
КонецФункции

&НаСервере
Функция ДобавитьТелефонКонтакту(Контакт, Телефон)
	
	КИСуществует = ТелефонКонтактаСуществует(Контакт, Телефон);
	
	Если КИСуществует = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли КИСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	НоваяСтрока.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
		 "");
	НоваяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(НоваяСтрока.Представление,
		 НоваяСтрока.Вид, "");
	НоваяСтрока.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(СтруктураТелефона.НомерТелефона);
	НоваяСтрока.НомерТелефона         = УбратьРазделителиВНомерТелефона(СтруктураТелефона.КодСтраны 
		+ СтруктураТелефона.КодГорода 
		+ СтруктураТелефона.НомерТелефона);
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяСтрока.Значение,
		 НоваяСтрока.Представление,
		 НоваяСтрока.Вид);
		
	АдресЗаписан = Истина;
	
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;
	
	Возврат АдресЗаписан;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИ()
	
	КИСуществует = ТелефонКонтактаСуществует(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться);
	Если КИСуществует = Неопределено ИЛИ КИСуществует = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонВопроса = НСтр("ru = 'Сохранить в карточке контакта телефон: %1?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, Объект.АбонентКакСвязаться);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросОСохраненииКИЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ДобавитьТелефонКонтакту(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться) Тогда
			Сообщение =
				НСтр("ru='Для автоматического связывания звонков с данным контактом укажите текущий телефон в его карточке'");
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДанныеПотенциальногоКлиента(ПотенциальныйКлиент)
	
	Результат = Новый Структура("Клиент, Контакт");
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Клиент = ПотенциальныйКлиент.Партнер;
	Результат.Контакт = ПотенциальныйКлиент.КонтактноеЛицо;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуИнтереса()

	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, ,
		 ТипЗнч(Объект.Ссылка),
		 Объект.Ссылка.Пустая());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИнтерактивноСоздаваемыхКонтактов()
	
	СписокИнтерактивноСоздаваемыхКонтактов = Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт)
		 И НЕ ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить("Партнеры", Нстр("ru='Создать клиента';en='Create customer'"));
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить("КонтактныеЛицаПартнеров",
			 Нстр("ru='Создать контактное лицо';en='Create contact person'"));
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить("CRM_ПотенциальныеКлиенты",
			 Нстр("ru='Создать потенциального клиента';
			|en='Create potential customer'"));
	Иначе
		Если Не Объект.АбонентКонтакт = Неопределено
			 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.АбонентКонтакт, "Партнер") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт.Партнер) Тогда
				СписокИнтерактивноСоздаваемыхКонтактов.Добавить("Партнеры", Нстр("ru='Создать клиента';en='Create customer'"));
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
				СписокИнтерактивноСоздаваемыхКонтактов.Добавить("Партнеры", Нстр("ru='Создать клиента';en='Create customer'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АбонентПредставление");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АбонентКонтакт_Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.CRM_Состояние.Уволен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьКакОбращениеНаСервере()
	
	Объект.CRM_СкрытьВАРМ = Ложь;
	Записать();
	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект.Ссылка, 
		Справочники.CRM_СостоянияЛидов.Новый, , , , , , Истина);
	СостояниеЛида = Справочники.CRM_СостоянияЛидов.Новый;
	
КонецПроцедуры

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи
// -CRM

#КонецОбласти
