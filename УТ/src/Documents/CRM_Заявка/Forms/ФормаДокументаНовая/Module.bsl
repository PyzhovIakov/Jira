
#Область ОписаниеПеременных

&НаКлиенте
Перем РольОтветственногоДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");

	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("ИсточникПолучения") Тогда
			Объект.ИсточникПолучения = Параметры.ИсточникПолучения;
			ИсточникПолученияПриИзмененииНаСервере();
		КонецЕсли;	
		Если Параметры.Свойство("Мероприятие") Тогда
			Объект.ДокументОснование = Параметры.Мероприятие;
			Объект.Тема = Объект.ДокументОснование.Наименование;
		КонецЕсли;	
		Если Параметры.Свойство("Контакт") Тогда
			Объект.Контакт = Параметры.Контакт;
			Объект.Наименование = Объект.Контакт.Наименование;
			Стр = Объект.Контакт.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.Телефон, "Тип");
			Если Стр <> Неопределено Тогда
				Объект.Телефон = Стр.Представление;
			КонецЕсли;	
			Стр = Объект.Контакт.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
			Если Стр <> Неопределено Тогда
				Объект.ЭлектроннаяПочта = Стр.Представление; 
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Лиды
	НаборСвойствНастроекЭлементовСостоянияОбращения = Новый Массив;
	НаборСвойствНастроекЭлементовСостоянияОбращения.Добавить("Видимость");
	НаборСвойствНастроекЭлементовСостоянияОбращения.Добавить("Доступность");
	АдресНастройкиЭлементовСостоянияОбращения = CRM_МетодыФормДокументовСервер.СохранитьНастройкиЭлементовСостоянияОбращения(ЭтотОбъект,
																															МассивЭлементовСостоянияОбращения(),
																															НаборСвойствНастроекЭлементовСостоянияОбращения);
	ОбновитьСостояниеОбращения();
	
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");

	Если Объект.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Элементы.ДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) И Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.CRM_РольОтветственного.Видимость = Истина;
	КонецЕсли;

	Если ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Если ЗначениеЗаполнено(Объект.Контакт) Тогда
			КонтактВладелец = Объект.Контакт.Владелец;
			Элементы.КонтактВладелец.Видимость = Истина;
		КонецЕсли;		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контакт) Тогда		
		Объект.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.Контакт) 
	                                   
	                                    	 ИЛИ (ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.Контакт)));
	
	Если ЗначениеЗаполнено(Объект.Контакт) И
		(ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.Партнеры")
			 ИЛИ ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		ОтображатьКаналИсточник = Истина;
		Элементы.ГруппаПервичныйИнтерес.Видимость = ОтображатьКаналИсточник;
		Партнер = ?(ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.Партнеры"), Объект.Контакт, Объект.Контакт.Владелец);
	КонецЕсли;
	СформироватьОписаниеКаналаИсточника();
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = Ложь;
	КонецЕсли;

	Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДокументОснование.Гиперссылка = Истина;
	КонецЕсли;
	
	// Выведем Звонок, введенный "на основании" данной заявки
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	ТелефонныйЗвонок.Ссылка КАК Ссылка
		                |ИЗ
		                |	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		                |ГДЕ
		                |	ТелефонныйЗвонок.ВзаимодействиеОснование = &Заявка";
		
		Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			ВведенныйЗвонок = Выборка.Ссылка;
			Элементы.ВведенныйЗвонок.Видимость = Истина;
			Элементы.ВведенныйЗвонок.Вид = ВидПоляФормы.ПолеНадписи;
			Элементы.ВведенныйЗвонок.Гиперссылка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Заявка.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьИзФормы", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеОбязательныхПолей()
	ТекстСообщения = "";
	ЕстьОшибки = Ложь;
	Если Объект.ИсточникПолучения.ТелефонОбязательно И НЕ ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТекстСообщения = "Не заполнено обязательное поле 'Телефон'";
		ЕстьОшибки = Истина;
	КонецЕсли;	
	Если Объект.ИсточникПолучения.НаименованиеОбязательно И НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
		|") + "Не заполнено обязательное поле 'ФИО'";
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Объект.ИсточникПолучения.ПочтаОбязательно И НЕ ЗначениеЗаполнено(Объект.ЭлектроннаяПочта) Тогда
		ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
		|") + "Не заполнено обязательное поле 'Электронная почта'";
		ЕстьОшибки = Истина;
	КонецЕсли;
	Для Каждого Строка Из Объект.ИсточникПолучения.ДополнительныеРеквизиты Цикл
		Если Строка.Обязательно Тогда
			СтруктураОтбора = Новый Структура("Свойство", Строка.Свойство);
			Стр = Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Если Стр.Количество() = 0 Тогда
				ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
				|") + "Не заполнен обязательный доп. реквизит '" + Строка.Свойство.Наименование + "'";
				ЕстьОшибки = Истина;
			ИначеЕсли НЕ ЗначениеЗаполнено(Стр[0].Значение) Тогда
				ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
				|") + "Не заполнен обязательный доп. реквизит '" + Строка.Свойство.Наименование + "'";
				ЕстьОшибки = Истина;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Если ЕстьОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;	
	Возврат ЕстьОшибки;
КонецФункции	

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	Отказ = ПроверитьЗаполнениеОбязательныхПолей();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ОбновитьСостояниеОбращения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		пПартнер = Объект.Контакт;
		
		Если ЗначениеЗаполнено(Объект.Контакт) Тогда
			Если ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				пПартнер = Объект.Контакт.Владелец;
			КонецЕсли;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(ТекущийОбъект.КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ТекущийОбъект.ИсточникПервичногоИнтереса) 
				И ТипЗнч(ТекущийОбъект.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
				= Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ТекущийОбъект.ИсточникПервичногоИнтереса) Тогда
				Если ЗначениеЗаполнено(пПартнер) Тогда
					Запрос = Новый Запрос("
					|ВЫБРАТЬ Период
					|ИЗ РегистрСведений.ИсточникиПервичногоИнтереса
					|ГДЕ Сделка = &Сделка И Партнер = &Партнер");
					Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Партнер", пПартнер);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = Выборка.Период;
						МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
						МенеджерЗаписи.Партнер = пПартнер;
						МенеджерЗаписи.Удалить();
					КонецЦикла;
				КонецЕсли;	
					
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущийОбъект.Дата;
				Запись.Партнер = пПартнер;
				Запись.Сделка = ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса = ТекущийОбъект.ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса = ТекущийОбъект.КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Источник.ВладелецФормы <> ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Партнеры")
		 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Пользователи")
			 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Объект.Контакт = НовыйОбъект;
		ОбработкаВыбораКонтакта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Создан новый партнер" ИЛИ  ИмяСобытия = "Создано новое контактное лицо"
		 Или  ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан"
		 Или (ИмяСобытия = "ОбъектыПереопределеныСПК" И Объект.Контакт = Параметр.ПК) Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ДанныеПК = ДанныеПотенциальногоКлиента(Параметр);
			Если ЗначениеЗаполнено(ДанныеПК.Контакт) Тогда
				Объект.Контакт = ДанныеПК.Контакт;
			ИначеЕсли ЗначениеЗаполнено(ДанныеПК.Клиент) Тогда
				Объект.Контакт = ДанныеПК.Клиент;
			Иначе
				Объект.Контакт = Параметр;
			КонецЕсли;
			
		Иначе
			
			Объект.Контакт = Параметр;
			
		КонецЕсли;
		ОбработкаВыбораКонтакта();
	
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Клиенты.Заявка.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Объект.Ответственный = Неопределено Тогда
		Объект.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ВыбранПользователь = (ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи"));
	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура CRM_РольОтветственногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		
		Элементы.Ответственный.Видимость = Истина;
		Элементы.CRM_РольОтветственного.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.CRM_РольОтветственного = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		
			ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Объект.CRM_РольОтветственного = РольОтветственногоДоИзменения;
			Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РольОтветственногоДоИзменения = Объект.CRM_РольОтветственного;
КонецПроцедуры

&НаСервере
Процедура ИсточникПолученияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ИсточникПолучения) Тогда
		Объект.Ответственный = Объект.ИсточникПолучения.ОтветственныйМенеджер;
		Объект.CRM_РольОтветственного = Объект.ИсточникПолучения.CRM_РольОтветственного;
		Элементы.ФормаОтклонитьОбращение.Видимость = Объект.ИсточникПолучения.CRM_ИсточникЛидов;
		Объект.ДополнительныеРеквизиты.Очистить();
		Для Каждого Строка Из Объект.ИсточникПолучения.ДополнительныеРеквизиты Цикл
			Стр = Объект.ДополнительныеРеквизиты.Добавить();
			Стр.Свойство = Строка.Свойство;
		КонецЦикла;	
		Объект.ИсточникПервичногоИнтереса = Объект.ИсточникПолучения.ИсточникПервичногоИнтереса;
		Объект.КаналПервичногоИнтереса = Объект.ИсточникПолучения.КаналПервичногоИнтереса;
	КонецЕсли;
	
	Если Объект.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Элементы.ДополнительныеРеквизиты.Видимость = Ложь;
	Иначе	
		Элементы.ДополнительныеРеквизиты.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПолученияПриИзменении(Элемент)
	ИсточникПолученияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, ,
		 ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка),
		 Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)

	ОбработкаВыбораКонтакта();
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();		

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтакта()
	
	Если ЗначениеЗаполнено(Объект.Контакт) И НЕ ТипЗнч(Объект.Контакт) = Тип("Тип") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораКонтактаЗавершение", ЭтотОбъект);
		ЗадатьВопросОСохраненииКИ(Ложь, ОписаниеОповещения);
		Возврат;
	Иначе
		КонтактВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.КонтактВладелец.Видимость = Ложь;
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
		//Элементы.ГруппаПервичныйИнтерес.Видимость = ОтображатьКаналИсточник;
	КонецЕсли;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();	
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.Контакт) 
	                                   
	                                    	 ИЛИ (ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.Контакт)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтактаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		КонтактВладелец = ПолучитьВладельца(Объект.Контакт);
		Элементы.КонтактВладелец.Видимость = Истина;
	Иначе
		КонтактВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.КонтактВладелец.Видимость = Ложь;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		 ИЛИ ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.Партнеры")) Тогда
		Партнер = ?(ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.Партнеры"), Объект.Контакт,
			 ПолучитьВладельца(Объект.Контакт));
		ОтображатьКаналИсточник = Истина;
	Иначе
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
	КонецЕсли;
	
	//Элементы.ГруппаПервичныйИнтерес.Видимость = ОтображатьКаналИсточник;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.Контакт) 
	                                   
	                                    	 ИЛИ (ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.Контакт)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИ(ЗаписыватьОбъект, ОповещениеПриЗавершении = Неопределено)
			
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаписыватьОбъект", ЗаписыватьОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	АдресСуществует = EMailКонтактаСуществует(Объект.Контакт, Объект.ЭлектроннаяПочта);
	ТелефонСуществует = ТелефонКонтактаСуществует(Объект.Контакт, Объект.Телефон);	
	
	ДобавлятьАдрес = НЕ (АдресСуществует = Неопределено ИЛИ АдресСуществует = Истина);
	ДобавлятьТелефон = НЕ (ТелефонСуществует = Неопределено ИЛИ ТелефонСуществует = Истина);
	
	ДополнительныеПараметры.Вставить("ДобавлятьАдрес", ДобавлятьАдрес);
	ДополнительныеПараметры.Вставить("ДобавлятьТелефон", ДобавлятьТелефон);
	
	Если НЕ (ДобавлятьАдрес ИЛИ ДобавлятьТелефон) Тогда
		ЗадатьВопросОСохраненииКИЗавершение(Неопределено, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	МассивТекстовВопросов = Новый Массив;
	Если ДобавлятьАдрес Тогда		
		ШаблонВопроса = НСтр("ru = 'Сохранить в карточке контакта email: %1?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, Объект.ЭлектроннаяПочта);
		МассивТекстовВопросов.Добавить(ТекстВопроса);
	КонецЕсли;
	Если ДобавлятьТелефон Тогда		
		ШаблонВопроса = НСтр("ru = 'Сохранить в карточке контакта телефон: %1?'");
		ТекстВопроса = СтрШаблон(ШаблонВопроса, Объект.Телефон);
		МассивТекстовВопросов.Добавить(ТекстВопроса);
	КонецЕсли;
	
	ТекстВопроса = СтрСоединить(МассивТекстовВопросов, Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросОСохраненииКИЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	Если СчетчикВопросовКИ = 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		СчетчикВопросовКИ = СчетчикВопросовКИ + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СчетчикВопросовКИ = 0;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.ДобавлятьАдрес Тогда
			Если НЕ ДобавитьEMailКонтакту(Объект.Контакт, Объект.ЭлектроннаяПочта) Тогда
				Сообщение =
					НСтр("ru='Для автоматического связывания писем с данным контактом укажите текущий email в его карточке'");
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ДобавлятьТелефон Тогда
			Если НЕ ДобавитьТелефонКонтакту(Объект.Контакт, Объект.Телефон) Тогда
				Сообщение =
					НСтр("ru='Для автоматического связывания звонков с данным контактом укажите текущий телефон в его карточке'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Истина);
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗаписыватьОбъект Тогда
		Записать();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты", Объект.ЭлектроннаяПочта);
	ПараметрыНового.Вставить("Телефон", Объект.Телефон);
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Наименование) Тогда
		ШаблонНаименования = НСтр("ru = '%1, %2'");
	Иначе
		ШаблонНаименования = НСтр("ru = '%1%2'");
	КонецЕсли;
	
	ПараметрыНового.Вставить("Наименование", СтрШаблон(ШаблонНаименования, СокрЛП(Объект.Организация),
		 СокрЛП(Объект.Наименование)));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	Если ИспользоватьПК Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Потенциальные клиенты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонтактВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Элементы.КонтактВладелец.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КонтактВладелецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, КонтактВладелец);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЛидаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Элементы.ГруппаСостояниеЛида.Видимость Тогда
		Элементы.ГруппаСостояниеЛида.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВывестиГруппаСостояниеЛида", 0.1, Истина);
		ПодключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида", 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиГруппаСостояниеЛида()
	Элементы.ГруппаСостояниеЛида.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппаСостояниеЛида()
	
	Если Элементы.ГруппаСостояниеЛида.Скрыта() Тогда
		Если Элементы.ГруппаСостояниеЛида.Видимость Тогда
			Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
			ОтключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида");
			#Если ВебКлиент Тогда
				ПодключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида", 0.1, Истина);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыCRM_ТаблицаИнтересов

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект["CRM_ТаблицаИнтересов"].НайтиСтроки(Новый Структура("Ссылка", ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект["CRM_ТаблицаИнтересов"].Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект["CRM_ТаблицаИнтересов"].Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект["CRM_ТаблицаИнтересов"].Сдвинуть(ЭтотОбъект["CRM_ТаблицаИнтересов"].Индекс(МассивСтрок[0]),
			 -ЭтотОбъект["CRM_ТаблицаИнтересов"].Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект["CRM_ТаблицаИнтересов"].Количество() > 0 Тогда
		CRM_ИнтересСтрокой =
			CRM_МетодыФормДокументовСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект["CRM_ТаблицаИнтересов"][0].Ссылка);
	Иначе
		CRM_ИнтересСтрокой = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура ДополнительныеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("НаборСвойств", ПолучитьНаборСвойствПоИмени("Справочник_CRM_ИсточникиПолученияЛидов")));
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Позвонить(Команда)
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ЭлектроннаяПочта)) Тогда
		Возврат;
	КонецЕсли;
		
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(Объект.Наименование, Объект.ЭлектроннаяПочта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заявка", Объект.Ссылка);	
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ТекущееСостояние = Неопределено;
		Если CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние) Тогда
			CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
			Возврат;
		КонецЕсли;
		
		Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, Объект.Ссылка);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
				 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			ОтклонитьОбращениеЗавершение(Истина, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, Ссылка) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	
	Иначе
	
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПричинаОтказа")
			 И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			ОтклонитьОбращениеНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);

		Иначе
			ОтклонитьОбращениеНаСервере(Ссылка, Неопределено, "");
		КонецЕсли;
	
		Объект.CRM_СкрытьВАРМ = Истина;
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Записать();

	КонецЕсли;

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) 
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
			 Комментарий); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьОтклонение(Команда)
	CRM_МетодыФормДокументовКлиент.ОтменитьОтклонение(Объект.Ссылка, Элементы.ГруппаКомандаОтменитьОтклонение);
	ОбновитьСостояниеОбращения();
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактВыполнить()
	
	ЭтоПотенциальныйКлиент = ЗначениеЗаполнено(Объект.Контакт)
		 И ТипЗнч(Объект.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты", Объект.ЭлектроннаяПочта);
	ПараметрыНового.Вставить("Телефон", Объект.Телефон);
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Наименование) Тогда
		ШаблонНаименования = НСтр("ru = '%1, %2'");
	Иначе
		ШаблонНаименования = НСтр("ru = '%1%2'");
	КонецЕсли;
	ПараметрыНового.Вставить("Наименование", СтрШаблон(ШаблонНаименования, СокрЛП(Объект.Организация),
		 СокрЛП(Объект.Наименование)));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ЭтоПотенциальныйКлиент Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.Контакт);
		ПараметрыФормы.Вставить("СкопироватьКИПотенциальногоКлиента");
		ПараметрыФормы.Вставить("ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи");
	КонецЕсли;
	
	СписокИнтерактивноСоздаваемыхКонтактов = Новый СписокЗначений();
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	Если ИспользоватьПК И НЕ ЭтоПотенциальныйКлиент Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Потенциального клиента'");
	КонецЕсли;
	
	Если НЕ ЭтоПотенциальныйКлиент Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	КонецЕсли;
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокИнтерактивноСоздаваемыхКонтактов, Элементы.СоздатьКонтакт);
	
КонецПроцедуры // СоздатьКонтактВыполнить()

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Результат.Значение;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы, ЭтотОбъект, , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	// Если Результат = Неопределено Тогда
	//	Возврат
	//КонецЕсли;
	//
	//Если Результат.Значение = "КонтактныеЛицаПартнеров" Тогда
	//	ПараметрыФормы = Новый Структура("Основание", Новый Структура("НомерТелефона", Объект.АбонентКакСвязаться));
	//	ИмяФормыВыбора = ".Форма.CRM_ФормаБыстрогоВвода";
	//			
	//ИначеЕсли Результат.Значение = "Партнеры" Тогда
	//	СтруктураПараметрыНового = Новый Структура;
	//	СтруктураПараметрыНового.Вставить("Телефон", Объект.АбонентКакСвязаться);
	//	СтруктураПараметрыНового.Вставить("Наименование" , ?(СтрНайти(Объект.АбонентПредставление,
		// "!!!") = 0, Объект.АбонентПредставление,
		// ""));
	//	ПараметрыФормы = Новый Структура("Основание, ПараметрыНового", Объект.Ссылка, СтруктураПараметрыНового);
	//	ИмяФормыВыбора = ".ФормаОбъекта";
	// Иначе
	//	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	//	ИмяФормыВыбора = ".ФормаОбъекта";
	//КонецЕсли;
	//ОткрытьФорму("Справочник." + Результат.Значение + ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма,,,,,
		// РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакОбращение(Команда)
	
	ОтметитьКакОбращениеНаСервере();
	Элементы.ОтметитьКакОбращение.Видимость = Ложь;
	Элементы.СостояниеЛида.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДанныеПотенциальногоКлиента(ПотенциальныйКлиент)
	
	Результат = Новый Структура("Клиент, Контакт");
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Клиент = ПотенциальныйКлиент.Партнер;
	Результат.Контакт = ПотенциальныйКлиент.КонтактноеЛицо;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	Возврат;
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Партнер);
			
			Объект.КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			Объект.ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Партнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность =
					Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
	
	Возврат;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		
		ПервичныйИнтерес.Очистить();		
		ВыводитьНадпись = Ложь;
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Интерес = Неопределено;
			Если ПервичныйИнтерес.Количество() > 0 Тогда  
				
				Интерес = ПервичныйИнтерес.Получить(0); 
				
			КонецЕсли;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо,
						 Надпись,
						 ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Возврат;
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Если ПервичныйИнтерес.Количество() > 0 Тогда  
		
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0); 
		
	КонецЕсли;
	Если ПредыдущийИсточник <> Неопределено Тогда
		
		Актуальность = ПредыдущийИсточник.Актуальность;
		
	КонецЕсли;
	
	пПартнер = Партнер;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер), Истина, Ложь);
	
	Если НаличиеУчастников Тогда
		Элементы.КаналПервичногоИнтереса.Доступность = Истина;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) 
		И ТипПВХ(Объект.КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Отметки незаполненного
	Если Актуальность = Истина И Не ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) Тогда
		// Если обязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал актуального источника
		// привлечения.
		Если ЗаполнятьПервичныйИнтерес Тогда
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
			
		Иначе
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ИсточникПервичногоИнтереса.Доступность = Истина 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(Объект.ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаналПервичногоИнтереса) 
		И ТипПВХ(Объект.КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_МетодыФормДокументовСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Функция ТелефонКонтактаСуществует(Контакт, Телефон)
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(Телефон) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КИСуществует = Ложь;
	
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) Тогда
			Продолжить;
		Иначе
			СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаКИ.Представление);
			ТелефонКИ = сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
			Если ТелефонКИ = Телефон Тогда	
				КИСуществует = Истина;
			Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КИСуществует;
	
КонецФункции

&НаСервереБезКонтекста
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	Поз = СтрНайти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз - 1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;
КонецФункции

&НаСервере
Функция ДобавитьТелефонКонтакту(Контакт, Телефон)
	
	КИСуществует = ТелефонКонтактаСуществует(Контакт, Телефон);
	
	Если КИСуществует = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли КИСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	НоваяСтрока.Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
		 "");
	НоваяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(НоваяСтрока.Представление,
		 НоваяСтрока.Вид, "");
	НоваяСтрока.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(СтруктураТелефона.НомерТелефона);
	НоваяСтрока.НомерТелефона         = УбратьРазделителиВНомерТелефона(СтруктураТелефона.КодСтраны 
		+ СтруктураТелефона.КодГорода 
		+ СтруктураТелефона.НомерТелефона);
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяСтрока.Значение,
		 НоваяСтрока.Представление,
		 НоваяСтрока.Вид);
		
	АдресЗаписан = Истина;
	
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;
	
	Возврат АдресЗаписан;
	
КонецФункции

&НаСервере
Функция EMailКонтактаСуществует(Контакт, EMail)
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(EMail) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСуществует = Ложь;
	
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			Продолжить;
		ИначеЕсли СтрокаКИ.Представление = EMail Тогда	
			АдресСуществует = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АдресСуществует;
	
КонецФункции

&НаСервере
// Функция добавляет адрес электронной почты выбранному контакту.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//	EMail	- Строка			- Адрес электронной почты.
//
// Возвращаемое значение:
//	Булево	- Результат добавления.
//
Функция ДобавитьEMailКонтакту(Контакт, EMail)
	
	АдресСуществует = EMailКонтактаСуществует(Контакт, EMail);
	
	Если АдресСуществует = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли АдресСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	НоваяСтрока.Представление	= EMail;
	НоваяСтрока.АдресЭП			= EMail;
	Поз = СтрНайти(EMail, "@");
	Если Поз > 0 Тогда
		НоваяСтрока.ДоменноеИмяСервера = Сред(EMail, Поз + 1);
	КонецЕсли;
	
	НоваяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(EMail,
		 НоваяСтрока.Вид, "");
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяСтрока.Значение,
		 НоваяСтрока.Представление,
		 НоваяСтрока.Вид);
	
	АдресЗаписан = Истина;
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;	
	Возврат АдресЗаписан;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВладельца(КонтактноеЛицо)
	
	Возврат КонтактноеЛицо.Владелец;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПартнера(ПотенциальныйКлиент)
	
	Возврат ПотенциальныйКлиент.Партнер;
	
КонецФункции

&НаСервере
Функция МассивЭлементовСостоянияОбращения()
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить(Элементы.ГруппаСостояниеЛида);
	МассивЭлементов.Добавить(Элементы.ПричинаОтклонения);
	МассивЭлементов.Добавить(Элементы.КомментарийСостоянияЛида);
	МассивЭлементов.Добавить(Элементы.ЛидСконвертированВОбъект);
	МассивЭлементов.Добавить(Элементы.ФормаОтклонитьОбращение);

	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеОбращения()
	
	// Установка значений по умолчанию:
	СостояниеЛида 			 = Неопределено;
	ПричинаОтклоненияЛида 	 = Неопределено;
	КомментарийСостоянияЛида = Неопределено;
	ЛидСконвертированВОбъект = Неопределено;
	
	CRM_МетодыФормДокументовСервер.ВосстановитьНастройкиЭлементовСостоянияОбращения(АдресНастройкиЭлементовСостоянияОбращения,
																					МассивЭлементовСостоянияОбращения());

	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) 
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Объект.Ссылка) Тогда
		СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
		Если СтруктураСостоянияЛида = Неопределено Тогда
			Элементы.СостояниеЛида.Гиперссылка = Ложь;
		Иначе
			СостояниеЛида = СтруктураСостоянияЛида.Состояние;
			Если СостояниеЛида <> Справочники.CRM_СостоянияЛидов.Новый И СостояниеЛида.Предопределенный Тогда
				Элементы.ФормаОтклонитьОбращение.Доступность = Ложь;
			КонецЕсли;
			
			Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				Элементы.СостояниеЛида.Гиперссылка = Истина;
				ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
				КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;
				Элементы.СостояниеЛида.Подсказка = "Причина: " + ПричинаОтклоненияЛида + Символы.ПС +
												   "Комментарий: " + КомментарийСостоянияЛида;
				CRM_МетодыФормДокументовСервер.ДобавитьКомандуОтменитьОтклонение(ЭтотОбъект,
					 Элементы.ГруппаКомандаОтменитьОтклонение);
			Иначе
				ЛидСконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
				Элементы.ЛидСконвертированВОбъект.Видимость = ЗначениеЗаполнено(ЛидСконвертированВОбъект);
				Элементы.СостояниеЛида.Гиперссылка = ЗначениеЗаполнено(ЛидСконвертированВОбъект);
				Элементы.ПричинаОтклонения.Видимость = Ложь;
				Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
			КонецЕсли;
			
			ОбновитьДатуОбработкиОбращения(СтруктураСостоянияЛида.ДатаОбработки);
			
		КонецЕсли;
	Иначе
		Элементы.СостояниеЛида.Гиперссылка = Ложь;
		Элементы.ФормаОтклонитьОбращение.Видимость = Ложь;
		Элементы.ОтметитьКакОбращение.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
		Элементы.СостояниеЛида.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДатуОбработкиОбращения(ДатаОбработки)
	
	ШаблонЗаголовка = НСтр("ru = 'Дата обработки: %1'; en = 'Processing Date: %1'");
	Элементы.ДатаОбработкиОбращения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		 Формат(ДатаОбработки,
		 "ДФ='dd.MM.yyyy HH:mm'"));
	Элементы.ДатаОбработкиОбращения.Видимость = ЗначениеЗаполнено(ДатаОбработки);
	
КонецПроцедуры

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	Если ТекЭлемент.Имя = "Наименование" Тогда
		Объект.Наименование = ТРег(Объект.Наименование);
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Организация");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Наименование");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

&НаСервере
Процедура ОтметитьКакОбращениеНаСервере()
	
	Если Объект.CRM_СкрытьВАРМ Тогда
		Объект.CRM_СкрытьВАРМ = Ложь;
		Записать();
	КонецЕсли;
	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект.Ссылка, 
		Справочники.CRM_СостоянияЛидов.Новый, , , , , , Истина);
	СостояниеЛида = Справочники.CRM_СостоянияЛидов.Новый;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаборСвойствПоИмени(ИмяНабора)
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
КонецФункции

#КонецОбласти
