#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("ИсточникПолучения") Тогда
			Объект.ИсточникПолучения = Параметры.ИсточникПолучения;
			ИсточникПолученияПриИзмененииНаСервере();
		КонецЕсли;	
		Если Параметры.Свойство("Мероприятие") Тогда
			Объект.ДокументОснование = Параметры.Мероприятие;
			Объект.Тема = Объект.ДокументОснование.Наименование;
		КонецЕсли;	
		Если Параметры.Свойство("Контакт") Тогда
			Объект.Контакт = Параметры.Контакт;
			Объект.Наименование = Объект.Контакт.Наименование;
			Стр = Объект.Контакт.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.Телефон, "Тип");
			Если Стр <> Неопределено Тогда
				Объект.Телефон = Стр.Представление;
			КонецЕсли;	
			Стр = Объект.Контакт.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
			Если Стр <> Неопределено Тогда
				Объект.ЭлектроннаяПочта = Стр.Представление; 
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Лиды
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) Тогда
		СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
		Если СтруктураСостоянияЛида = Неопределено Тогда
			Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
		Иначе
			СостояниеЛида = СтруктураСостоянияЛида.Состояние;
			Если Не СостояниеЛида = Справочники.CRM_СостоянияЛидов.Новый Тогда
				Элементы.ФормаПринятьОбращение.Доступность = Ложь;
				Элементы.ФормаОтклонитьОбращение.Доступность = Ложь;
			КонецЕсли;
			Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
				КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;
			Иначе
				ЛидСконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
				Элементы.ЛидСконвертированВОбъект.Видимость = ЗначениеЗаполнено(ЛидСконвертированВОбъект);
				Элементы.ПричинаОтклонения.Видимость = Ложь;
				Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
		Элементы.ФормаОтклонитьОбращение.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Элементы.ДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	// Если НЕ Объект.Ссылка.Пустая() Тогда
	//	Элементы.Ответственный.ТолькоПросмотр = Истина;
	// КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Закрыть(Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов", Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", CRM_ТаблицаИнтересовЗнач);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтересИзменен", ИнтересИзменен);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Отказ = ПроверитьЗаполнениеОбязательныхПолей();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСервисРаспознаванияЛиц")
		 И ТипЗнч(ТекущийОбъект.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Об = ТекущийОбъект.Контакт.ПолучитьОбъект();
		Об.Наименование = ТекущийОбъект.Наименование;
		Об.Организация = ТекущийОбъект.Организация;
		
		Стр = Об.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.Телефон, "Тип");
		Если Стр = Неопределено Тогда
			Стр = Об.КонтактнаяИнформация.Добавить();
		КонецЕсли;	
		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Стр.Вид = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		Стр.Представление = ТекущийОбъект.Телефон;
		Стр.НомерТелефона = ТекущийОбъект.Телефон;
		
		Стр = Об.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
		Если Стр = Неопределено Тогда
			Стр = Об.КонтактнаяИнформация.Добавить();
		КонецЕсли;	
		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Стр.Вид = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		Стр.АдресЭП = ТекущийОбъект.ЭлектроннаяПочта;
		Стр.Представление = ТекущийОбъект.ЭлектроннаяПочта;
		Об.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникПолученияПриИзменении(Элемент)
	ИсточникПолученияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура ДополнительныеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка      = Ложь;
	ДополнительныеПараметры   = Новый Структура();
	ОповещениеВыбораРеквизита = Новый ОписаниеОповещения("ОбработкаВыбораРеквизита", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить(
		"Отбор", Новый Структура("НаборСвойств", ПолучитьНаборСвойствПоИмени("Справочник_CRM_ИсточникиПолученияЛидов")));
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", ПараметрыФормы,
		 Элемент, , , ,
		 ОповещениеВыбораРеквизита);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Позвонить(Команда)
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмо(Команда)
	Если НЕ ЗначениеЗаполнено(СокрЛП(Объект.ЭлектроннаяПочта)) Тогда
		Возврат;
	КонецЕсли;
		
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(Объект.Наименование, Объект.ЭлектроннаяПочта);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заявка", Объект.Ссылка);	
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ТекущееСостояние = Неопределено;
		Если CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние) Тогда
			CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
			Возврат;
		КонецЕсли;
		
		Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, Объект.Ссылка);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
				 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			ОтклонитьОбращениеЗавершение(Истина, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, Ссылка) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		ОтклонитьОбращениеНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		ОтклонитьОбращениеНаСервере(Ссылка, Неопределено, "");
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
			 Комментарий); 
	КонецЕсли;
	
	Об = Ссылка.ПолучитьОбъект();
	Об.CRM_СкрытьВАРМ = Истина;
	Если Не ЗначениеЗаполнено(Об.Ответственный) Тогда
		Об.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	Об.Записать();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИсточникПолученияПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ИсточникПолучения) Тогда
		Объект.Ответственный = Объект.ИсточникПолучения.ОтветственныйМенеджер;
		Объект.CRM_РольОтветственного = Объект.ИсточникПолучения.CRM_РольОтветственного;
		Элементы.ФормаОтклонитьОбращение.Видимость = Объект.ИсточникПолучения.CRM_ИсточникЛидов;
		Объект.ДополнительныеРеквизиты.Очистить();
		Для Каждого Строка Из Объект.ИсточникПолучения.ДополнительныеРеквизиты Цикл
			Стр = Объект.ДополнительныеРеквизиты.Добавить();
			Стр.Свойство = Строка.Свойство;
		КонецЦикла;	
		Объект.ИсточникПервичногоИнтереса = Объект.ИсточникПолучения.ИсточникПервичногоИнтереса;
		Объект.КаналПервичногоИнтереса = Объект.ИсточникПолучения.КаналПервичногоИнтереса;
	КонецЕсли;
	
	Если Объект.ДополнительныеРеквизиты.Количество() = 0 Тогда
		Элементы.ДополнительныеРеквизиты.Видимость = Ложь;
	Иначе	
		Элементы.ДополнительныеРеквизиты.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеОбязательныхПолей()
	ТекстСообщения = "";
	ЕстьОшибки = Ложь;
	Если Объект.ИсточникПолучения.ТелефонОбязательно И НЕ ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТекстСообщения = "Не заполнено обязательное поле 'Телефон'";
		ЕстьОшибки = Истина;
	КонецЕсли;	
	Если Объект.ИсточникПолучения.НаименованиеОбязательно И НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
		|") + "Не заполнено обязательное поле 'ФИО'";
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Объект.ИсточникПолучения.ПочтаОбязательно И НЕ ЗначениеЗаполнено(Объект.ЭлектроннаяПочта) Тогда
		ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
		|") + "Не заполнено обязательное поле 'Электронная почта'";
		ЕстьОшибки = Истина;
	КонецЕсли;
	Для Каждого Строка Из Объект.ИсточникПолучения.ДополнительныеРеквизиты Цикл
		Если Строка.Обязательно Тогда
			СтруктураОтбора = Новый Структура("Свойство", Строка.Свойство);
			Стр = Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Если Стр.Количество() = 0 Тогда
				ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
				|") + "Не заполнен обязательный доп. реквизит '" + Строка.Свойство.Наименование + "'";
				ЕстьОшибки = Истина;
			ИначеЕсли НЕ ЗначениеЗаполнено(Стр[0].Значение) Тогда
				ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + "
				|") + "Не заполнен обязательный доп. реквизит '" + Строка.Свойство.Наименование + "'";
				ЕстьОшибки = Истина;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Если ЕстьОшибки Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;	
	Возврат ЕстьОшибки;
КонецФункции	

&НаКлиенте
Процедура ОбработкаВыбораРеквизита(РезультатВыбора, ДополнительныеПараметры) Экспорт
	РезультатОповещения = Истина;
КонецПроцедуры // ОбработкаВыбораМеста()

&НаСервере
Функция ПолучитьНаборСвойствПоИмени(ИмяНабора)
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
КонецФункции

#КонецОбласти
