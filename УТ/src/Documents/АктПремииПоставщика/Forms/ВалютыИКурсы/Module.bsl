// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТолькоПросмотр = Параметры.ТолькоПросмотр;
	
	ВалютаБонусов = Параметры.ВалютаБонусов;
	ВалютаВзаиморасчетов = Параметры.ВалютаВзаиморасчетов;
	ВалютаВзаиморасчетовПриОткрытии = Параметры.ВалютаВзаиморасчетов;
	ВалютаРеглУчета = Параметры.ВалютаРеглУчета;
	КурсЧислительВзаиморасчетов = Параметры.КурсЧислительВзаиморасчетов;
	КурсЗнаменательВзаиморасчетов = Параметры.КурсЗнаменательВзаиморасчетов;
	ДатаКурсаВалюты = Параметры.ДатаКурсаВалюты;
	Договор = Параметры.Договор;
	Если НЕ Договор.Пустая() Тогда
		ВариантКурсаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантКурсаДоговора");
	КонецЕсли;
	
	ВидимостьКурса = Параметры.ВидимостьКурса;
	СформироватьНадписиВалют(ЭтотОбъект);
	
	Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = Параметры.ЗапретИзмененияВалюты;
	
	УстановитьВидимостьКурса(ЭтотОбъект);
	ЗаполнитьСписокКурсовВалют();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СформироватьНадписиВалют(ЭтотОбъект);
	УстановитьВидимостьКурса(ЭтотОбъект);
	ЗаполнитьСписокКурсовВалют(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсЧислительВзаиморасчетовПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсЧислительВзаиморасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбработатьВыборПолейКурсов(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсЗнаменательВзаиморасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбработатьВыборПолейКурсов(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ВозвращаемыеДанные = РетроБонусыКлиентСервер.ПараметрыЗавершенияУказанияВалютыКурса();
	ВозвращаемыеДанные.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	
	ВозвращаемыеДанные.КурсЧислитель = КурсЧислительВзаиморасчетов;
	ВозвращаемыеДанные.КурсЗнаменатель = КурсЗнаменательВзаиморасчетов;
	
	Закрыть(ВозвращаемыеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКурса(Форма)
	
	Если Форма.ВалютаВзаиморасчетов.Пустая()
	 ИЛИ Форма.ВалютаВзаиморасчетов = Форма.ВалютаБонусов
	 ИЛИ Форма.ВалютаРеглУчета.Пустая() Тогда
		
		Форма.Элементы.ГруппаКурсВзаиморасчеты.Видимость = Ложь;
		
	Иначе
		
		Форма.Элементы.ГруппаКурсВзаиморасчеты.Видимость = Форма.ВидимостьКурса;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - Число - Запрос даты курса
//  				  - Структура:
//  				  	* КурсЧислитель - Число -
//  				  	* КурсЗнаменатель - Число -
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
&НаКлиенте
Процедура ОбработатьВыборПолейКурсов(ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Укажите дату курса валюты'");
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("КурсВалютыВзаиморасчетовОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(
			ОбработчикОповещенияОЗакрытии,
			ДатаКурсаВалюты,
			ТекстЗаголовка,
			ЧастиДаты.Дата);
		
	Иначе
		
		КурсЧислительВзаиморасчетов = ВыбранноеЗначение.КурсЧислитель;
		КурсЗнаменательВзаиморасчетов = ВыбранноеЗначение.КурсЗнаменатель;
		ОчиститьСообщения();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДатаКурса - Неопределено, Дата -
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура КурсВалютыВзаиморасчетовОбработкаВыбораЗавершение(ДатаКурса, ДополнительныеПараметры) Экспорт
	
	Если ДатаКурса <> Неопределено Тогда
		КурсВалютыВзаиморасчетовОбработкаВыбораНаСервере(ДатаКурса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсВалютыВзаиморасчетовОбработкаВыбораНаСервере(Знач ДатаКурса)
	
	Если ВалютаБонусов = ВалютаРеглУчета Тогда
		
		КурсНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса, ВалютаРеглУчета);
		КурсЧислительВзаиморасчетов = КурсНаДату.КурсЧислитель;
		КурсЗнаменательВзаиморасчетов = КурсНаДату.КурсЗнаменатель;
		
	Иначе
		
		КурсВалютыБонусовНаДату = ПолучитьКурсВалюты(ВалютаБонусов, ДатаКурса, ВалютаРеглУчета);
		КурсВалютыВзаиморасчетовНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса, ВалютаРеглУчета);
		КурсПересчета = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсВалютыБонусовНаДату, КурсВалютыВзаиморасчетовНаДату);
		
		КурсЧислительВзаиморасчетов = КурсПересчета.КурсЧислитель;
		КурсЗнаменательВзаиморасчетов = КурсПересчета.КурсЗнаменатель;
		
	КонецЕсли;
	
	Если НЕ КурсЕстьВСписке(Элементы.КурсЧислительВзаиморасчетов.СписокВыбора, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов) Тогда
			
		Если ДатаКурса > ТекущаяДатаСеанса() Тогда
			
			ДобавитьКурсВСписокВыбора(
				ВалютаВзаиморасчетов,
				Неопределено,
				ВалютаРеглУчета,
				Элементы.КурсЧислительВзаиморасчетов.СписокВыбора,
				КурсНаДату);
			ДобавитьКурсВСписокВыбора(
				ВалютаВзаиморасчетов,
				Неопределено,
				ВалютаРеглУчета,
				Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора,
				КурсНаДату);
			
		Иначе
			
			ДобавитьКурсВСписокВыбора(
				ВалютаВзаиморасчетов,
				ДатаКурса,
				ВалютаРеглУчета,
				Элементы.КурсЧислительВзаиморасчетов.СписокВыбора,
				КурсНаДату);
			ДобавитьКурсВСписокВыбора(
				ВалютаВзаиморасчетов,
				ДатаКурса,
				ВалютаРеглУчета,
				Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора,
				КурсНаДату);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКурсовВалют(Знач ИзмененаВалюта = Ложь)
	
	СписокКурсовВалют = Новый СписокЗначений; // СписокЗначений из Число
	МассивДнейДляСпискаВыбора = Новый Массив; // Массив из Дата
	
	Если ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
		
		МассивДнейДляСпискаВыбора = ПолучитьДатыКурсаВалютыДоговора();
		
	Иначе
		
		Для ДеньМинус = 1 По 5 Цикл
			
			ДатаКурса = ДатаКурсаВалюты - (ДеньМинус * 86400);
			МассивДнейДляСпискаВыбора.Добавить(ДатаКурса);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ВалютаБонусов = ВалютаРеглУчета Тогда
		
		КурсНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурсаВалюты, ВалютаРеглУчета);
		Если НЕ ЗначениеЗаполнено(КурсЧислительВзаиморасчетов)
		 ИЛИ ИзмененаВалюта Тогда
			
			КурсЧислительВзаиморасчетов = КурсНаДату.КурсЧислитель;
			КурсЗнаменательВзаиморасчетов = КурсНаДату.КурсЗнаменатель;
			
		КонецЕсли;
		
		ДобавитьКурсВСписокВыбора(ВалютаВзаиморасчетов, ДатаКурсаВалюты, ВалютаРеглУчета, СписокКурсовВалют, КурсНаДату);
			
		Для Каждого ДатаКурса Из МассивДнейДляСпискаВыбора Цикл
			
			ДобавитьКурсВСписокВыбора(ВалютаВзаиморасчетов, ДатаКурса, ВалютаРеглУчета, СписокКурсовВалют);
			
		КонецЦикла;
		СписокКурсовВалют.Добавить(0, НСтр("ru = '<Выбрать другую дату>'"));
		
		Элементы.КурсЧислительВзаиморасчетов.СписокВыбора.Очистить();
		Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора.Очистить();
		
	ИначеЕсли ЗначениеЗаполнено(ВалютаБонусов)
			И ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		
		КурсВалютыБонусовНаДату = ПолучитьКурсВалюты(ВалютаБонусов, ДатаКурсаВалюты, ВалютаРеглУчета);
		КурсВалютыВзаиморасчетовНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурсаВалюты, ВалютаРеглУчета);
		
		КурсПересчета = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсВалютыБонусовНаДату, КурсВалютыВзаиморасчетовНаДату);
		
		Если ИзмененаВалюта
		 ИЛИ КурсЧислительВзаиморасчетов = 0 Тогда
			
			КурсЧислительВзаиморасчетов = КурсПересчета.КурсЧислитель;
			КурсЗнаменательВзаиморасчетов = КурсПересчета.КурсЗнаменатель;
			
		КонецЕсли;
		
		ДобавитьКурсВСписокВыбора(ВалютаБонусов, ДатаКурсаВалюты, ВалютаВзаиморасчетов, СписокКурсовВалют, КурсПересчета);
		
		Для Каждого ДатаКурса Из МассивДнейДляСпискаВыбора Цикл
			
			КурсВалютыБонусовНаДату = ПолучитьКурсВалюты(ВалютаБонусов, ДатаКурса, ВалютаРеглУчета);
			КурсВалютыВзаиморасчетовНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса, ВалютаРеглУчета);
			КурсПересчета = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
				КурсВалютыБонусовНаДату, КурсВалютыВзаиморасчетовНаДату);
			ДобавитьКурсВСписокВыбора(
				ВалютаБонусов,
				ДатаКурса,
				ВалютаВзаиморасчетов,
				СписокКурсовВалют,
				КурсПересчета);
			
		КонецЦикла;
		
		СписокКурсовВалют.Добавить(0, НСтр("ru = '<Выбрать другую дату>'"));
		
	КонецЕсли;
	
	Элементы.КурсЧислительВзаиморасчетов.СписокВыбора.Очистить();
	Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора.Очистить();
	
	Для Каждого КурсНаДату Из СписокКурсовВалют Цикл
		
		Элементы.КурсЧислительВзаиморасчетов.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
		Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора.Добавить(КурсНаДату.Значение, КурсНаДату.Представление);
		
	КонецЦикла;
	
	Если Элементы.КурсЧислительВзаиморасчетов.СписокВыбора.Количество() > 0
	   И ЗначениеЗаполнено(КурсЧислительВзаиморасчетов) Тогда
		
		Если НЕ КурсЕстьВСписке(Элементы.КурсЧислительВзаиморасчетов.СписокВыбора, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов) Тогда
			
			КурсВалютыБонусовНаДату = ПолучитьКурсВалюты(ВалютаБонусов, ДатаКурса, ВалютаРеглУчета);
			КурсВалютыВзаиморасчетовНаДату = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса, ВалютаРеглУчета);
			КурсПересчета = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(
				КурсВалютыБонусовНаДату, КурсВалютыВзаиморасчетовНаДату);
			
			ДобавитьКурсВСписокВыбора(
				ВалютаБонусов,
				ДатаКурса,
				ВалютаВзаиморасчетов,
				Элементы.КурсЧислительВзаиморасчетов.СписокВыбора,
				КурсПересчета);
			
			ДобавитьКурсВСписокВыбора(
				ВалютаБонусов,
				ДатаКурса,
				ВалютаВзаиморасчетов,
				Элементы.КурсЗнаменательВзаиморасчетов.СписокВыбора,
				КурсПересчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатыКурсаВалютыДоговора()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ДатаКурсаВалюты", ДатаКурсаВалюты);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	КурсыВалютРасчетовПоДоговорам.Период КАК Период
	|ИЗ
	|	РегистрСведений.КурсыВалютРасчетовПоДоговорам КАК КурсыВалютРасчетовПоДоговорам
	|ГДЕ
	|	КурсыВалютРасчетовПоДоговорам.Договор = &Договор
	|	И КурсыВалютРасчетовПоДоговорам.Период < &ДатаКурсаВалюты
	|	И КурсыВалютРасчетовПоДоговорам.Период > ДАТАВРЕМЯ(1980, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервере
Функция ПолучитьКурсВалюты(Валюта, Дата, БазоваяВалюта)
	
	Если ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
		
		Результат = РегистрыСведений.КурсыВалютРасчетовПоДоговорам.ПолучитьЗначенияКурсаВалютыДоговора(Договор, Дата);
		Результат.Вставить("Валюта", ВалютаБонусов);
		Результат.Вставить("БазоваяВалюта", БазоваяВалюта);
		Если Результат.Свойство("КурсНеЗадан")
		   И Результат.КурсНеЗадан Тогда
			Результат = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, Дата, БазоваяВалюта)
		КонецЕсли;
		
	Иначе
		
		Результат = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, Дата, БазоваяВалюта)
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КурсЕстьВСписке(Список, КурсЧислитель, КурсЗнаменатель)
	
	КурсНайден = Ложь;
	Для Каждого ЭлементВыбора Из Список Цикл
		
		ЗначениеЭлемента = ЭлементВыбора.Значение;
		Если ТипЗнч(ЗначениеЭлемента) = Тип("Структура") Тогда
			 
			Если КурсЧислитель = ЗначениеЭлемента.КурсЧислитель
			   И КурсЗнаменатель = ЗначениеЭлемента.КурсЗнаменатель Тогда
				
				КурсНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КурсНайден;
	
КонецФункции

// Параметры:
//  Валюта - СправочникСсылка.Валюты
//  Дата - Дата, Неопределено -
//  БазоваяВалюта  - СправочникСсылка.Валюты
//  СписокВыбора - СписокЗначений из Структура
//  СтруктураКурса - см. РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты 
//
&НаСервере
Процедура ДобавитьКурсВСписокВыбора(Валюта, Дата, БазоваяВалюта, СписокВыбора, СтруктураКурса = Неопределено)
	
	Если СтруктураКурса = Неопределено Тогда
		СтруктураКурса = ПолучитьКурсВалюты(Валюта, Дата, БазоваяВалюта);
	КонецЕсли;
	
	ШаблонПредставленияСДатой = НСтр("ru = '%1 %2 = %3 %4 (на %5)'");;
	ШаблонПредставленияБезДаты = НСтр("ru = '%1 %2 = %3 %4'");;
	
	Если Дата = Неопределено Тогда
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставленияБезДаты,
			Формат(СтруктураКурса.КурсЧислитель, "ЧДЦ=4"),
			Строка(БазоваяВалюта),
			Формат(СтруктураКурса.КурсЗнаменатель, "ЧДЦ=4"),
			Строка(Валюта));
		
	Иначе
		
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставленияСДатой,
			Формат(СтруктураКурса.КурсЧислитель, "ЧДЦ=4"),
			Строка(БазоваяВалюта),
			Формат(СтруктураКурса.КурсЗнаменатель, "ЧДЦ=4"),
			Строка(Валюта),
			Формат(Дата, "ДЛФ = D"));
		
	КонецЕсли;
	
	СписокВыбора.Добавить(СтруктураКурса, Представление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписиВалют(Форма)
	
	Если Форма.ВалютаБонусов = Форма.ВалютаРеглУчета Тогда
		
		Форма.КурсЧислительВзаиморасчетовНадпись = Строка(Форма.ВалютаБонусов) + " =";
		Форма.КурсЗнаменательВзаиморасчетовНадпись = Строка(Форма.ВалютаВзаиморасчетов);
		
	Иначе
		
		Форма.КурсЧислительВзаиморасчетовНадпись = Строка(Форма.ВалютаВзаиморасчетов) + " =";
		Форма.КурсЗнаменательВзаиморасчетовНадпись = Строка(Форма.ВалютаБонусов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти