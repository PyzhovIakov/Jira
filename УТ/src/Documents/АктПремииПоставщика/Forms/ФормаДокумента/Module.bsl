//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДоступноИзменениеДокумента = УправлениеДоступом.ИзменениеРазрешено(Объект.Ссылка);
	Если НЕ ДоступноИзменениеДокумента Тогда
		
		ИменаПолейДоступность = Новый Массив; // Массив из Строка
		ИменаПолейДоступность.Добавить(Элементы.ДекорацияВалютыИКурсПлатежа.Имя);
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ИменаПолейДоступность,
			"Доступность",
			Ложь);
		
		// Все условия ретро-бонусов проходят по доступности организации в акте, поэтому достаточно проверить первый в списке.
		// Не проверяем по доступности метаданных, т.к. в рамках другой организации может быть доступно (не по той, что в акте).
		
		Если Объект.РетроБонусы.Количество() > 0 Тогда
			
			ДокументыБонусовДоступны = Истина;
			Для каждого СтрокаБонуса Из Объект.РетроБонусы Цикл
				
				Если НЕ СтрокаБонуса.ДокументУсловий.Пустая() Тогда
					
					ДокументыБонусовДоступны = УправлениеДоступом.ЧтениеРазрешено(СтрокаБонуса.ДокументУсловий);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ДокументыБонусовДоступны Тогда
				
				ИменаПолейВидимость = Новый Массив; // Массив из Строка
				ИменаПолейВидимость.Добавить(Элементы.РетроБонусы.Имя);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
					Элементы,
					ИменаПолейВидимость,
					"Видимость",
					Ложь,
					Истина);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтотОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	ПараметрыВыбораСтатейИАналитик = Документы.АктПремииПоставщика.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриЧтенииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	ТекущийДоговор = Объект.Договор;
	Если НЕ Объект.Договор.Пустая() Тогда
		ВариантКурсаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ВариантКурсаДоговора");
	КонецЕсли;
	
	ПараметрыВыбораСтатейИАналитик = Документы.АктПремииПоставщика.ПараметрыВыбораСтатейИАналитик();
	ДоходыИРасходыСервер.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьКурсКратностьТекстом();
	ЗаполнитьСлужебныеРеквизитыРетроБонусов();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НужноОчищатьРетроБонусы() Тогда
		
		ТекстВопроса = НСтр("ru = 'Строки с заполненными документами условий будут удалены.
							|Продолжить?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОчиститьСтрокиРетроБонусов();
			ТекущаяОрганизация = Объект.Организация;
			ОрганизацияПриИзмененииСервер();
			
		Иначе
			
			Объект.Организация = ТекущаяОрганизация;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяОрганизация = Объект.Организация;
		ОрганизацияПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура КонтрагентПриИзменении(Элемент)
	
	Если НужноОчищатьРетроБонусы() Тогда
		
		ТекстВопроса = НСтр("ru = 'Строки с заполненными документами условий будут удалены.
							|Продолжить?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОчиститьСтрокиРетроБонусов();
			ТекущийКонтрагент = Объект.Контрагент;
			КонтрагентПриИзмененииСервер();
			
		Иначе
			
			Объект.Контрагент = ТекущийКонтрагент;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийКонтрагент = Объект.Контрагент;
		КонтрагентПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

// Параметры:
//  Элемент - ДекорацияФормы - Элемент
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура НадписьДекорацияВалютыИКурсПлатежаНажатие(Элемент, СтандартнаяОбработка)
	
	Попытка
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		
	Исключение
		
		ПоказатьПредупреждение(, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецПопытки;
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияВалютыИКурсПлатежаНажатиеЗавершение", ЭтотОбъект);
	
	ЗаполнитьСведенияПоВалютамБонусов();
	ВидимостьКурса = (НЕ НесколькоВалютБонусов
					  И Объект.РетроБонусы.Количество() > 0
					  И НЕ ВалютаБонусов.Пустая());
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ВалютаБонусов", ВалютаБонусов);
	ПараметрыОткрытия.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	ПараметрыОткрытия.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	ПараметрыОткрытия.Вставить("КурсЧислительВзаиморасчетов", КурсЧислительВзаиморасчетов);
	ПараметрыОткрытия.Вставить("КурсЗнаменательВзаиморасчетов", КурсЗнаменательВзаиморасчетов);
	ПараметрыОткрытия.Вставить("ЗапретИзмененияВалюты", НЕ Объект.Договор.Пустая());
	ПараметрыОткрытия.Вставить("ВидимостьКурса", ВидимостьКурса);
	ПараметрыОткрытия.Вставить("Договор", Объект.Договор);
	ПараметрыОткрытия.Вставить("ДатаКурсаВалюты", Объект.Дата);
	
	ОткрытьФорму("Документ.АктПремииПоставщика.Форма.ВалютыИКурсы", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПассивовНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДоходыИРасходыКлиент.НачалоВыбораСтатьи(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПассивовПриИзменении(Элемент)
	
	СтатьяПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРетроБонусы

&НаКлиенте
Процедура РетроБонусыДокументУсловийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РетроБонусы.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	РетроБонусыДокументУсловийПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыСуммаБонусаПриИзменении(Элемент)
	
	РетроБонусыСуммаБонусаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыВалютаБонусаПриИзменении(Элемент)
	
	РетроБонусыВалютаБонусаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыКурсЧислительВзаиморасчетовПриИзменении(Элемент)
	
	РетроБонусыКурсЧислительВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыПослеУдаления(Элемент)
	
	РетроБонусыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыПартнерПриИзменении(Элемент)
	
	УстановитьОтборДоговораВРетроБонусах();
	
КонецПроцедуры

&НаКлиенте
Процедура РетроБонусыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборДоговораВРетроБонусах();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами

// Параметры:
//  Команда - КомандаФормы - выполняемая команда.
//
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПодобратьПоОстаткам(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ВидПоля = "Поле";
	ВидСообщения = "Заполнение";
	
	ПроверяемыеПоля = Новый Соответствие;
	ПроверяемыеПоля.Вставить("Организация", НСтр("ru = 'Организация'"));
	ПроверяемыеПоля.Вставить("Контрагент", НСтр("ru = 'Контрагент'"));
	ПроверяемыеПоля.Вставить("Дата", НСтр("ru = 'Дата'"));
	
	Для Каждого ТекущееПоле Из ПроверяемыеПоля Цикл
		
		Поле = ТекущееПоле.Ключ;
		
		Если НЕ ЗначениеЗаполнено(Объект[Поле]) Тогда
			
			ИмяПоля = ТекущееПоле.Значение;
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ПодобратьНачисленныеРБ();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ИменаПолей = Новый Массив; // Массив Из Строка
	ИменаПолей.Добавить("Дата");
	ИменаПолей.Добавить("ВалютаВзаиморасчетов");
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, ИменаПолей);
	
	ОбновитьДанныеВзаиморасчетовВСтроках();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Организация, ВалютаВзаиморасчетов");
	
	УстановитьВидимостьПоВалюте();
	ОбновитьДанныеВзаиморасчетовВСтроках();
	РассчитатьИтоги();
	УстановитьПараметрыВыбораДокументовУсловий()
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Контрагент");
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
		
	КонецЕсли;
	УстановитьПараметрыВыбораДокументовУсловий();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "Партнер");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	Если ТекущийДоговор = Объект.Договор Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Договор.Пустая() Тогда
		
		ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.ПустаяСсылка();
		
	Иначе
		
		// В случае, когда мы просто очистили договор - сохраняем прежнюю валюту
		
		Объект.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		
		ИменаРеквизитовДоговора = "ВалютаВзаиморасчетов,НаправлениеДеятельности,ВариантКурсаДоговора";
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, ИменаРеквизитовДоговора);
		Объект.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
		ВариантКурсаДоговора = РеквизитыДоговора.ВариантКурсаДоговора;
		
		ИменаПолей = Новый Массив; // Массив Из Строка
		ИменаПолей.Добавить("Договор");
		ИменаПолей.Добавить("ВалютаВзаиморасчетов");
		ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, ИменаПолей);
		ВзаиморасчетыСервер.ПриИзмененииПараметровМеханизма(ЭтотОбъект);
		
		ОбновитьДанныеВзаиморасчетовВСтроках();
		УстановитьВидимостьПоВалюте();
		РассчитатьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыЗавершения - см. РетроБонусыКлиентСервер.ПараметрыЗавершенияУказанияВалютыКурса
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ДекорацияВалютыИКурсПлатежаНажатиеЗавершение(ПараметрыЗавершения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыЗавершения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВалютаВзаиморасчетов <> ПараметрыЗавершения.ВалютаВзаиморасчетов
	 ИЛИ КурсЧислительВзаиморасчетов <> ПараметрыЗавершения.КурсЧислитель
	 ИЛИ КурсЗнаменательВзаиморасчетов <> ПараметрыЗавершения.КурсЗнаменатель Тогда
		
		ДекорацияВалютыИКурсПлатежаНажатиеЗавершениеНаСервере(ПараметрыЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ПараметрыЗавершения - см. РетроБонусыКлиентСервер.ПараметрыЗавершенияУказанияВалютыКурса
//
&НаСервере
Процедура ДекорацияВалютыИКурсПлатежаНажатиеЗавершениеНаСервере(Знач ПараметрыЗавершения)
	
	Объект.ВалютаВзаиморасчетов = ПараметрыЗавершения.ВалютаВзаиморасчетов;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтотОбъект, "ВалютаВзаиморасчетов", Истина);
	
	Для Каждого СтрокаТаблицы Из Объект.РетроБонусы Цикл
		
		Если Объект.Организация.Пустая() Тогда
			
			СтрокаТаблицы.КурсЧислительВзаиморасчетов = 0;
			СтрокаТаблицы.КурсЗнаменательВзаиморасчетов = 0;
			
		ИначеЕсли КурсЧислительВзаиморасчетов <> ПараметрыЗавершения.КурсЧислитель
			  ИЛИ КурсЗнаменательВзаиморасчетов <> ПараметрыЗавершения.КурсЗнаменатель Тогда
			
			СтрокаТаблицы.КурсЧислительВзаиморасчетов = ПараметрыЗавершения.КурсЧислитель;
			СтрокаТаблицы.КурсЗнаменательВзаиморасчетов = ПараметрыЗавершения.КурсЗнаменатель;
			
		Иначе
			
			ЗаполнитьКурсИКратностьВСтроке(СтрокаТаблицы);
			
		КонецЕсли;
		
		СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.ВалютаВзаиморасчетов);
		РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
		
	КонецЦикла;
	
	УстановитьВидимостьПоВалюте();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура СтатьяПриИзмененииСервер(Знач ИмяЭлемента)
	
	ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(ЭтотОбъект, Элементы[ИмяЭлемента]);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРетроБонусов

&НаСервере
Процедура РетроБонусыПослеУдаленияСервер()
	
	ЗаполнитьСведенияПоВалютамБонусов();
	УстановитьВидимостьПоВалюте();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура РетроБонусыДокументУсловийПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаТаблицы = Объект.РетроБонусы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ВалютаОпределяетсяУсловием"));
	СтруктураДействий.Вставить(
		"ЗаполнитьВалютуРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ВалютаБонуса"));
	
	КешЗначений = Неопределено;
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
		СтрокаТаблицы,
		СтруктураДействий,
		КешЗначений,
		Объект.РетроБонусы);
	
	ЗаполнитьКурсИКратностьВСтроке(СтрокаТаблицы);
	СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.ВалютаВзаиморасчетов);
	РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
	
	ЗаполнитьСведенияПоВалютамБонусов();
	УстановитьВидимостьПоВалюте();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура РетроБонусыСуммаБонусаПриИзмененииСервер()
	
	ИдентификаторСтроки = Элементы.РетроБонусы.ТекущаяСтрока; // Число
	СтрокаТаблицы = Объект.РетроБонусы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура РетроБонусыВалютаБонусаПриИзмененииСервер()
	
	ИдентификаторСтроки = Элементы.РетроБонусы.ТекущаяСтрока; // Число
	СтрокаТаблицы = Объект.РетроБонусы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьКурсИКратностьВСтроке(СтрокаТаблицы);
	СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.ВалютаВзаиморасчетов);
	РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
	
	ЗаполнитьСведенияПоВалютамБонусов();
	УстановитьВидимостьПоВалюте();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура РетроБонусыКурсЧислительВзаиморасчетовПриИзмененииНаСервере()
	
	ИдентификаторСтроки = Элементы.РетроБонусы.ТекущаяСтрока; // Число
	СтрокаТаблицы = Объект.РетроБонусы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
	СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.ВалютаВзаиморасчетов);
	РассчитатьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьОформлениеРетроБонусыВалютаБонуса();
	УстановитьОформлениеРетроБонусыКурсЧислительВзаиморасчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеРетроБонусыВалютаБонуса()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РетроБонусыВалютаБонуса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РетроБонусы.ВалютаОпределяетсяУсловием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеРетроБонусыКурсЧислительВзаиморасчетов()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РетроБонусыКурсЧислительВзаиморасчетов.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПоОстаткам

&НаКлиенте
Асинх Процедура ПодобратьНачисленныеРБ()
	
	ТребуетсяВопрос = Ложь;
	Если Объект.Проведен Тогда
		
		ТребуетсяВопрос = Истина;
		ТекстВопроса = НСтр("ru = 'Перед подбором начислений необходимо отменить проведение документа. Продолжить?'");
		
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			Если Объект.Проведен Тогда
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодобратьНачисленныеРБПродолжить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНачисленныеРБПродолжить()
	
	АдресТаблицыПодобранныхСтрок = АдресТаблицыПодобранныхСтрок();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("АдресТаблицыПодобранныхСтрок", АдресТаблицыПодобранныхСтрок);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ДатаАктуальности", Объект.Дата);
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьНачисленныеРБЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрНакопления.РетроБонусыПоставщиков.Форма.ФормаПодбораПоОстаткам",
		ПараметрыПодбора, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыПодобранныхСтрок()
	
	ТаблицаПодобранныхСтрок = Объект.РетроБонусы.Выгрузить();
	ТаблицаПодобранныхСтрок.Колонки.Добавить("ДокументВыбран", Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхСтрок.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхСтрок.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодобранныхСтрок Цикл
		
		СтрокаТаблицы.ДокументВыбран = Истина;
		СтрокаТаблицы.Пометка = Истина;
		СтрокаТаблицы.Валюта = СтрокаТаблицы.ВалютаБонуса;
		
	КонецЦикла;
	
	АдресТаблицыПодобранныхСтрок = ПоместитьВоВременноеХранилище(ТаблицаПодобранныхСтрок, УникальныйИдентификатор);
	
	Возврат АдресТаблицыПодобранныхСтрок;
	
КонецФункции

// Параметры:
//  Результат - Неопределено, Строка - 
//  ДополнительныеПараметры - Произвольный -
//
&НаКлиенте
Процедура ПодобратьНачисленныеРБЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И ЭтоАдресВременногоХранилища(Результат) Тогда
		
		ОбработкаПодбораДокументовНачислений(Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
//
&НаСервере
Процедура ОбработкаПодбораДокументовНачислений(Знач АдресВХранилище)
	
	ТаблицаОстатков = ТаблицаВыбранныхОстатков(АдресВХранилище);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
	Объект.РетроБонусы.Очистить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаОстатков Цикл
		
		НоваяСтрока = Объект.РетроБонусы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.ВалютаБонуса = ТекущаяСтрока.Валюта;
		НоваяСтрока.СуммаБонуса = ТекущаяСтрока.Сумма;
		
	КонецЦикла;
	
	ОбновитьДанныеВзаиморасчетовВСтроках();
	ВыполнитьСлужебныеПроцедурыЗаполнения();
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
//   * Партнер - СправочникСсылка.Партнеры
//   * Договор - СправочникСсылка.ДоговорыКонтрагентов
//   * ВидРетроБонуса - СправочникСсылка.ВидыРетроБонусовПоставщиков
//   * Описание - Строка
//   * НачалоДействия - Дата
//   * ОкончаниеДействия - Дата
//   * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * Валюта - СправочникСсылка.Валюты
//
&НаСервере
Функция ТаблицаВыбранныхОстатков(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоговора()
	
	СвязиПараметровДоговора = Новый Массив(); // Массив из СвязьПараметраВыбора
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	СвязиПараметровДоговора.Добавить(НоваяСвязь);
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
	СвязиПараметровДоговора.Добавить(НоваяСвязь);
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер");
	СвязиПараметровДоговора.Добавить(НоваяСвязь);
	
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговора);
	
	ПараметрыВыбораДоговора = Новый Массив(); // Массив из ПараметрВыбора
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	ПараметрыВыбораДоговора.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	ПараметрыВыбораДоговора.Добавить(НовыйПараметр);
	
	ТипыДоговоров = РетроБонусыКлиентСервер.ТипыДоговоровЗакупки();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипДоговора",  Новый ФиксированныйМассив(ТипыДоговоров));
	ПараметрыВыбораДоговора.Добавить(НовыйПараметр);
	
	Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ЗаполнитьКурсКратностьТекстом();
	ВыполнитьСлужебныеПроцедурыЗаполнения();
	
	ТекущийКонтрагент = Объект.Контрагент;
	ТекущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСлужебныеПроцедурыЗаполнения()
	
	ЗаполнитьСлужебныеРеквизитыРетроБонусов();
	ЗаполнитьСведенияПоВалютамБонусов();
	УстановитьВидимостьПоВалюте();
	УстановитьСвязиПараметровВыбораДоговора();
	УстановитьПараметрыВыбораДокументовУсловий();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыРетроБонусов()
	
	Если НЕ ДоступноИзменениеДокумента Тогда
		
		// Если по правам мы не можем менять документ, то и ТЧ мы не видим, заполнять не требуется 
		Возврат;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ВалютаОпределяетсяУсловием"));
	
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РетроБонусы, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзаиморасчетовВСтроках()
	
	ИзвестныеПараметрыПоВалюте = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из Объект.РетроБонусы Цикл
		
		Если Объект.Организация.Пустая() Тогда
			
			СтрокаТаблицы.КурсЧислительВзаиморасчетов = 0;
			СтрокаТаблицы.КурсЗнаменательВзаиморасчетов = 0;
			
		Иначе
			
			КурсИКратность = ИзвестныеПараметрыПоВалюте[СтрокаТаблицы.ВалютаБонуса]; // См. КурсЧислительИКурсЗнаменательВзаиморасчетов
			Если КурсИКратность = Неопределено Тогда
				
				ПараметрыЗаполнения = ПараметрыЗаполненияКурсаИКратности();
				ПараметрыЗаполнения.Валюта = СтрокаТаблицы.ВалютаБонуса;
				
				КурсИКратность = КурсЧислительИКурсЗнаменательВзаиморасчетов(ПараметрыЗаполнения);
				ИзвестныеПараметрыПоВалюте[СтрокаТаблицы.ВалютаБонуса] = КурсИКратность;
				
			КонецЕсли;
			
			СтрокаТаблицы.КурсЧислительВзаиморасчетов = КурсИКратность.КурсЧислитель;
			СтрокаТаблицы.КурсЗнаменательВзаиморасчетов = КурсИКратность.КурсЗнаменатель;
			
			СформироватьКурсЗнаменательТекстом(СтрокаТаблицы, Объект.ВалютаВзаиморасчетов);
			РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоги()
	
	СуммаВзаиморасчетов = Объект.РетроБонусы.Итог("СуммаВзаиморасчетов");
	
	Элементы.ДекорацияВалютыИКурсПлатежа.Заголовок = НадписьВалютыИКурсПлатежа();
	
КонецПроцедуры

&НаСервере
Функция НадписьВалютыИКурсПлатежа()
	
	КопияРетроБонусы = Объект.РетроБонусы.Выгрузить(,
		"СуммаБонуса, ВалютаБонуса, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов");
	КопияРетроБонусы.Свернуть("ВалютаБонуса, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов", "СуммаБонуса");
	
	Если Объект.ВалютаВзаиморасчетов.Пустая() Тогда
		
		СтрокаЗаголовка = НСтр("ru = 'Расчеты: <Валюта не указана>, Бонусы:'");
		
	ИначеЕсли Объект.Организация.Пустая() Тогда
		
		СтрокаЗаголовка = НСтр("ru = 'Расчеты: <укажите организацию документа>, Бонусы:'");
		
	Иначе
		
		ШаблонЗаголовка = НСтр("ru = 'Расчеты: %1 %2, Бонусы:'");
		СтрокаЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовка,
			Формат(СуммаВзаиморасчетов, "ЧДЦ=2;"),
			Строка(Объект.ВалютаВзаиморасчетов));
		
	КонецЕсли;
	
	ШаблонКурса = "(%1 %2 = %3 %4)";
	СтрокиНадписи = Новый Массив; // Массив из Строка
	СтрокиНадписи.Добавить(СтрокаЗаголовка);
	
	Для каждого СтрокаТаблицы Из КопияРетроБонусы Цикл
		
		СтрокиНадписи.Добавить(Строка(СтрокаТаблицы.СуммаБонуса));
		СтрокиНадписи.Добавить(Строка(СтрокаТаблицы.ВалютаБонуса));
		
		Если СтрокаТаблицы.КурсЧислительВзаиморасчетов <> 0
		   И НЕ Объект.ВалютаВзаиморасчетов.Пустая()
		   И НЕ ВалютаРеглУчета.Пустая() Тогда
			
			Если СтрокаТаблицы.ВалютаБонуса = ВалютаРеглУчета Тогда
				
				ТекстНадписи = СтрШаблон(
					ШаблонКурса,
					СтрокаТаблицы.КурсЗнаменательВзаиморасчетов,
					Объект.ВалютаВзаиморасчетов,
					Формат(СтрокаТаблицы.КурсЧислительВзаиморасчетов, "ЧДЦ=4"),
					СтрокаТаблицы.ВалютаБонуса);
				
			Иначе
				
				ТекстНадписи = СтрШаблон(
					ШаблонКурса,
					СтрокаТаблицы.КурсЗнаменательВзаиморасчетов,
					СтрокаТаблицы.ВалютаБонуса,
					Формат(СтрокаТаблицы.КурсЧислительВзаиморасчетов, "ЧДЦ=4"),
					Объект.ВалютаВзаиморасчетов);
				
			КонецЕсли;
			
			СтрокиНадписи.Добавить(ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиНадписи, " ");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКурсКратностьТекстом()
	
	Для каждого СтрокаТЧ Из Объект.РетроБонусы Цикл
		
		СформироватьКурсЗнаменательТекстом(СтрокаТЧ, Объект.ВалютаВзаиморасчетов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКурсЗнаменательТекстом(СтрокаТЧ, ВалютаПересчета)
	
	ШаблонКурса = "%1 %2 = %3 %4";
	Если СтрокаТЧ.КурсЧислительВзаиморасчетов <> 0 Тогда
		
		Если СтрокаТЧ.ВалютаБонуса = ВалютаРеглУчета Тогда
			
			СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = СтрШаблон(
				ШаблонКурса,
				СтрокаТЧ.КурсЗнаменательВзаиморасчетов,
				ВалютаПересчета,
				Формат(СтрокаТЧ.КурсЧислительВзаиморасчетов, "ЧДЦ=4"),
				СтрокаТЧ.ВалютаБонуса);
			
		Иначе
			
			СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = СтрШаблон(
				ШаблонКурса,
				СтрокаТЧ.КурсЗнаменательВзаиморасчетов,
				СтрокаТЧ.ВалютаБонуса,
				Формат(СтрокаТЧ.КурсЧислительВзаиморасчетов, "ЧДЦ=4"),
				ВалютаПересчета);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТЧ.КурсЧислительВзаиморасчетовТекст = "0";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВзаиморасчетовВСтроке(СтрокаТЧ)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Валюта", СтрокаТЧ.ВалютаБонуса);
	ПараметрыРасчета.Вставить("КурсЧислитель", СтрокаТЧ.КурсЧислительВзаиморасчетов);
	ПараметрыРасчета.Вставить("КурсЗнаменатель", СтрокаТЧ.КурсЗнаменательВзаиморасчетов);
	ПараметрыРасчета.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	
	СтрокаТЧ.СуммаВзаиморасчетов = РетроБонусыКлиентСервер.ПересчитатьСуммуВзаиморасчетовВСтроке(
		ПараметрыРасчета, СтрокаТЧ.СуммаБонуса, ВалютаРеглУчета);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияКурсаИКратности()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	ПараметрыЗаполнения.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ВалютаРегламентированногоУчета", ВалютаРеглУчета);
	ПараметрыЗаполнения.Вставить("Договор", Объект.Договор);
	ПараметрыЗаполнения.Вставить("ВариантКурсаДоговора", ВариантКурсаДоговора);
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКурсИКратностьВСтроке(СтрокаТаблицы)
	
	ПараметрыЗаполнения = ПараметрыЗаполненияКурсаИКратности();
	ПараметрыЗаполнения.Валюта = СтрокаТаблицы.ВалютаБонуса;
	
	КурсИКратность = КурсЧислительИКурсЗнаменательВзаиморасчетов(ПараметрыЗаполнения);
	
	СтрокаТаблицы.КурсЧислительВзаиморасчетов = КурсИКратность.КурсЧислитель;
	СтрокаТаблицы.КурсЗнаменательВзаиморасчетов = КурсИКратность.КурсЗнаменатель;
	
КонецПроцедуры

// Параметры:
//  ПараметрыЗаполнения - см. ПараметрыЗаполненияКурсаИКратности
// 
// Возвращаемое значение:
//  Структура:
// * КурсЧислитель - Число -
// * КурсЗнаменатель - Число - 
// * ВариантКурсаДоговора - ПеречислениеСсылка.ВариантыКурсаДоговора - 
//
&НаСервере
Функция КурсЧислительИКурсЗнаменательВзаиморасчетов(ПараметрыЗаполнения)
	
	КурсИКратность = Новый Структура;
	КурсИКратность.Вставить("КурсЧислитель", 1);
	КурсИКратность.Вставить("КурсЗнаменатель", 1);
	КурсИКратность.Вставить("ВариантКурсаДоговора", Перечисления.ВариантыКурсаДоговора.Переменный);
	
	Если ПараметрыЗаполнения.Валюта <> ПараметрыЗаполнения.ВалютаВзаиморасчетов Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.Договор) Тогда
			КурсИКратность.ВариантКурсаДоговора = ПараметрыЗаполнения.ВариантКурсаДоговора;
		КонецЕсли;
		
		Если КурсИКратность.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре Тогда
			
			Если ПараметрыЗаполнения.Валюта = ВалютаРеглУчета Тогда
				
				КурсИКратность = РегистрыСведений.КурсыВалютРасчетовПоДоговорам.ПолучитьЗначенияКурсаВалютыДоговора(
					ПараметрыЗаполнения.Договор, ПараметрыЗаполнения.Дата);
				
			Иначе
				
				КурсДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ПараметрыЗаполнения.Валюта,
					ПараметрыЗаполнения.Дата,
					ПараметрыЗаполнения.ВалютаРегламентированногоУчета);
				КурсВзаиморасчетов = РегистрыСведений.КурсыВалютРасчетовПоДоговорам.ПолучитьЗначенияКурсаВалютыДоговора(
					ПараметрыЗаполнения.Договор,
					ПараметрыЗаполнения.Дата);
				КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсДокумента,КурсВзаиморасчетов);
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЗаполнения.Валюта = ПараметрыЗаполнения.ВалютаРегламентированногоУчета Тогда
				
				КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ПараметрыЗаполнения.ВалютаВзаиморасчетов,
					ПараметрыЗаполнения.Дата,
					ПараметрыЗаполнения.ВалютаРегламентированногоУчета);
				
			ИначеЕсли ПараметрыЗаполнения.ВалютаВзаиморасчетов = ПараметрыЗаполнения.ВалютаРегламентированногоУчета Тогда
				
				КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ПараметрыЗаполнения.Валюта,
					ПараметрыЗаполнения.Дата,
					ПараметрыЗаполнения.ВалютаРегламентированногоУчета);
				
			Иначе
				
				КурсДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ПараметрыЗаполнения.Валюта,
					ПараметрыЗаполнения.Дата,
					ПараметрыЗаполнения.ВалютаРегламентированногоУчета);
				КурсВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(
					ПараметрыЗаполнения.ВалютаВзаиморасчетов,
					ПараметрыЗаполнения.Дата,
					ПараметрыЗаполнения.ВалютаРегламентированногоУчета);
				КурсИКратность = РаботаСКурсамиВалютУТ.ПолучитьКроссКурсВалют(КурсДокумента,КурсВзаиморасчетов);
				
			КонецЕсли;
			
		КонецЕсли;
		
		КурсИКратность.Вставить("ТипОбъектаРасчетов", Перечисления.ТипыОбъектовРасчетов.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат КурсИКратность;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоВалюте()
	
	ИменаЭлементовВалют = Новый Массив; // Массив из Строка
	ИменаЭлементовВалют.Добавить(Элементы.РетроБонусыСуммаВзаиморасчетов.Имя);
	ИменаЭлементовВалют.Добавить(Элементы.РетроБонусыГруппаКурс.Имя);
	
	СкрытьКурсыПоСтрокам = Ложь;
	Если НЕ НесколькоВалютБонусов
	 ИЛИ Объект.ВалютаВзаиморасчетов.Пустая()
	 ИЛИ ВалютаРеглУчета.Пустая() Тогда
		
		СкрытьКурсыПоСтрокам = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		ИменаЭлементовВалют,
		"Видимость",
		НЕ СкрытьКурсыПоСтрокам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияПоВалютамБонусов()
	
	ИменаПолейТаблицы = "ВалютаБонуса, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов";
	КопияТаблицыБонусов = Объект.РетроБонусы.Выгрузить(, ИменаПолейТаблицы);
	КопияТаблицыБонусов.Свернуть(ИменаПолейТаблицы);
	
	Если КопияТаблицыБонусов.Количество() = 0 Тогда
		
		НесколькоВалютБонусов = Ложь;
		ВалютаБонусов = Справочники.Валюты.ПустаяСсылка();
		КурсЧислительВзаиморасчетов = 0;
		КурсЗнаменательВзаиморасчетов = 0;
		
	ИначеЕсли КопияТаблицыБонусов.Количество() = 1 Тогда
		
		НесколькоВалютБонусов = Ложь;
		ВалютаБонусов = КопияТаблицыБонусов[0].ВалютаБонуса;
		КурсЧислительВзаиморасчетов = КопияТаблицыБонусов[0].КурсЧислительВзаиморасчетов;
		КурсЗнаменательВзаиморасчетов = КопияТаблицыБонусов[0].КурсЗнаменательВзаиморасчетов;
		
	Иначе
		
		НесколькоВалютБонусов = Истина;
		ВалютаБонусов = Справочники.Валюты.ПустаяСсылка();
		КурсЧислительВзаиморасчетов = 0;
		КурсЗнаменательВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСтрокиРетроБонусов()
	
	МассивКУдалению = Новый Массив;  // Массив из ДанныеФормыЭлементКоллекции
	
	Для Каждого ТекущаяСтрока Из Объект.РетроБонусы Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументУсловий) Тогда
			
			МассивКУдалению.Добавить(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьСтрокиТаблицыЗначений(Объект.РетроБонусы, МассивКУдалению);
	
КонецПроцедуры

&НаКлиенте
Функция НужноОчищатьРетроБонусы()
	
	НужноОчищать = Ложь;
	
	Если Объект.РетроБонусы.Количество() > 0 
	   И (ТекущаяОрганизация <> Объект.Организация
	     ИЛИ ТекущийКонтрагент <> Объект.Контрагент) Тогда
		
		Для Каждого ТекущаяСтрока Из Объект.РетроБонусы Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументУсловий) Тогда
				
				НужноОчищать = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НужноОчищать;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораДокументовУсловий()
	
	ПараметрыВыбораДокументаУсловия = Новый Массив(); // Массив из ПараметрВыбора
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Организация", Объект.Организация);
	ПараметрыВыбораДокументаУсловия.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Контрагент", Объект.Контрагент);
	ПараметрыВыбораДокументаУсловия.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("ПодборПоКонтрагенту", Истина);
	ПараметрыВыбораДокументаУсловия.Добавить(НовыйПараметр);
	
	Элементы.РетроБонусыДокументУсловий.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДокументаУсловия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДоговораВРетроБонусах()
	
	ДанныеСтроки = Элементы.РетроБонусы.ТекущиеДанные;
	ПараметрыВыбораДоговора = ПараметрыВыбораДоговора(ДанныеСтроки);
	Элементы.РетроБонусыДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораДоговора(ДанныеСтроки)
	
	ПоддерживаемыеТипыДоговоров = РетроБонусыКлиентСервер.ТипыДоговоровЗакупки();
	
	ПараметрыВыбораДоговора = Новый Массив(); // Массив из ПараметрВыбора
	
	ОтборТип = Новый ПараметрВыбора("Отбор.ТипДоговора", Новый ФиксированныйМассив(ПоддерживаемыеТипыДоговоров));
	ПараметрыВыбораДоговора.Добавить(ОтборТип);
	
	ОтборПометка = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	ПараметрыВыбораДоговора.Добавить(ОтборПометка);
	
	Если ДанныеСтроки <> Неопределено
	   И ЗначениеЗаполнено(ДанныеСтроки.Партнер) Тогда
		
		НовыйОтбор = Новый ПараметрВыбора("Партнер", ДанныеСтроки.Партнер);
		ПараметрыВыбораДоговора.Добавить(НовыйОтбор);
		
	КонецЕсли;
	
	Возврат ПараметрыВыбораДоговора;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#КонецОбласти