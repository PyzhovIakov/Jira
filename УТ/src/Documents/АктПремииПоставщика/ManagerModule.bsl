//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("РетроБонусы");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	
	АктПремииПоставщикаЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка.АктПремииПоставщика, ДокументОбъект.АктПремииПоставщика - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.АктПремииПоставщика") Тогда
		
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
		
	Иначе
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений; // СписокЗначений из Строка
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРетроБонусыПоставщиков(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		
		ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		
		АктПремииПоставщикаЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	АктПремииПоставщикаЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	АктПремииПоставщикаЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
	Отчеты.ВедомостьПоРетроБонусамПоставщиков.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "ВедомостьПоРБПКонтекстАктПремии");
	
КонецПроцедуры

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	АктПремииПоставщикаЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Описание логики ограничений прав доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент.Партнер)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение, ПустаяСсылка КАК ИСТИНА)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ДляВсехСтрок(ЗначениеРазрешено(РетроБонусы.Партнер, ПустаяСсылка КАК ИСТИНА, NULL КАК ИСТИНА))";
	
КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Добавляет команду создания документа "Акт премии клиенту".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Результат = Неопределено;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.АктПремииПоставщика) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.АктПремииПоставщика.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = Метаданные.Документы.АктПремииПоставщика.Синоним;
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Результат = КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает параметры механизма взаиморасчетов.
//
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект.АктПремииПоставщика, ДокументСсылка.АктПремииПоставщика, Структура, ДанныеФормыСтруктура - Объект или коллекция для
//              расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	См. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		
		СтруктураДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеЗаполнения, 
			"Договор");
		Договор = СтруктураДанныеЗаполнения.Договор;
		
	ИначеЕсли ДанныеЗаполнения = Неопределено Тогда
		
		Договор = Неопределено;
		
	Иначе
		
		Договор = ДанныеЗаполнения.Договор;
		
	КонецЕсли;
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	#Область ОбязательныеПараметры
	
	// Если все опции ложь, то это платеж или служебный документ.
	СтруктураПараметров.ЭтоЗаказ = Ложь;
	СтруктураПараметров.ЭтоСправочник = Ложь;
	СтруктураПараметров.ЭтоПродажаЗакупка = Истина;
	
	// Определяет какой регистр двигают параметры, какие общие формы, перечисления и справочники использовать.
	СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	СтруктураПараметров.Организация = "Объект.Организация";
	
	// При определенных значениях реквизитов документа он может не изменять взаиморасчеты в части оплат или отгрузок.
	// Пример - Передача товара на комиссию.
	
	// Если оба флага отрицательны, то скрывается гиперссылка "Расчеты", очищаются суммы взаиморасчеты и табличные части механизма.
	// При отрицательном значении будут скрыты кнопки ЗачетОплаты и ЭтапыОплаты, но можно будет менять валюты и курс.
	СтруктураПараметров.ИзменяетПланОплаты = Истина;
	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки = Ложь;
	
	// Дата отражения документа в системе.
	// Используется для получения остатков просроченной задолженности для функции ограничения задолженности.
	// Используется для получения курсов валют документа. 
	// Используется для заполнения этапов оплаты и расшифровки платежа по умолчанию.
	СтруктураПараметров.Дата = "Объект.Дата";
	// Системный номер объекта
	СтруктураПараметров.Номер = "Объект.Номер";
	
	// Валюта и сумма операции. Обязательно путь к реквизитам объекта.
	СтруктураПараметров.ВалютаДокумента = "Объект.ВалютаВзаиморасчетов";
	СтруктураПараметров.СуммаДокумента = "Объект.СуммаВзаиморасчетов";
	
	// Используются для генерации объектов расчетов и аналитики.
	СтруктураПараметров.Партнер = "Объект.Партнер";
	СтруктураПараметров.Контрагент = "Объект.Контрагент";
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	// Отличные от валюты и суммы документа реквизиты. Если не заполнен, то для чтения будет взята валюта документа.
	СтруктураПараметров.ВалютаВзаиморасчетов = "";
	СтруктураПараметров.СуммаВзаиморасчетов = "";
	СтруктураПараметров.СуммаНДСВзаиморасчетов = "";
	СтруктураПараметров.СуммаВзаиморасчетовПоТаре = "";
	
	// Используется для генерации аналитики проведения и объекта расчетов, определения графика исполнения договора.
	СтруктураПараметров.Договор = "Объект.Договор";
	//	Используется для получения реквизитов ГФУ, ПорядокРасчетов, ВалютаВзаиморасчетов, ОплатаВВалюте при учете продаж конечным покупателям.
	СтруктураПараметров.ДоговорКомиссионера = "";
	// Используется для генерации аналитики проведения и объекта расчетов.
	СтруктураПараметров.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	// Порядок расчетов документа.
	СтруктураПараметров.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	
	// Сумма всего с залоговой тарой. Путь к итоговому показателю формы (реквизиту).
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа и т.д.
	СтруктураПараметров.СуммаДокументаФорма = "";
	
	// Реквизит формы итоговых показателей, содержащий сумму залога за тару в валюте документа.
	// Используется в заполнении этапов графика оплаты.
	СтруктураПараметров.СуммаЗалогаЗаТаруФорма = ""; 
	
	// Табличная часть, по которой распределяется сумма взаиморасчетов и есть поле "заказ".
	// Используется для отображения гиперссылок, редактирования и заполнения графика плановых оплат
	// редактирования расшифровки платежа, если не заполнен параметр СуммаДокументаФорма.
	// В ТЧ заполняются объекты расчетов по заказам.
	СтруктураПараметров.ПутьКДаннымТЧ = "";
	// Имя реквизита суммы с ндс табличной части.
	СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС = "";
	// Имя реквизита тч, содержащего заказ.
	СтруктураПараметров.ИмяРеквизитаТЧЗаказ = "";
	
	// Путь к табличной части Расшифровка платежа.
	// Используется в функция зачета оплат, распределения взаиморасчетов, распределения оплаты.
	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа = "";
	
	// Используется для заполнения значений по умолчанию, заполнения графика плановых оплат и даты платежа.
	СтруктураПараметров.Соглашение = "";
	
	// Используются для определения значения ОплатаВВалюте и в форме редактирования правил оплаты.
	СтруктураПараметров.БанковскийСчетОрганизации = "";
	СтруктураПараметров.БанковскийСчетКонтрагента = "";
	СтруктураПараметров.Касса = "";
	СтруктураПараметров.ФормаОплаты = "";
	СтруктураПараметров.ОплатаВВалюте = "";
	// Используется в форме правил оплаты и для подбора в расшифровку платежа объектов расчетов.
	СтруктураПараметров.ИдентификаторПлатежа = "";
	СтруктураПараметров.НалогообложениеНДС = "";
	
	// Место хранения ссылки/ссылок на справочник Объекты расчетов.
	СтруктураПараметров.ОбъектРасчетов = "Объект.ОбъектРасчетов";
	
	// Реквизиты для объекта расчетов, используются в проведении.
	СтруктураПараметров.ГруппаФинансовогоУчета = "Объект.ГруппаФинансовогоУчета";
	СтруктураПараметров.Подразделение = "Объект.Подразделение";
	СтруктураПараметров.Менеджер = "Объект.Ответственный";
	СтруктураПараметров.НомерВходящегоДокумента = "Объект.НомерВходящегоДокумента";
	СтруктураПараметров.ДатаВходящегоДокумента = "Объект.ДатаВходящегоДокумента";
	
	// Используется для определения объекта расчетов.
	СтруктураПараметров.НакладнаяПоЗаказам = "";
	
	// Используется при определении порядка расчетов по умолчанию и списка доступных порядков для выбора.
	// Используется для определения объекта расчетов.
	СтруктураПараметров.ЗаказОснование = ""; 
	
	// Имя кнопки, открывающей помощник зачета оплат для текущего набора параметров.
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты = "";
	// Имя элемента таблицы формы, отображающей сумму взаиморасчетов.
	// Используется для установки условного оформления.
	// Следует заполнить если документ поддерживает построчное ручное редактирование сумм взаиморасчетов.
	СтруктураПараметров.ЭлементыФормы.СуммаВзаиморасчетовТЧ = "РетроБонусыСуммаВзаиморасчетов";
	
	// Имя элемента формы содержащего группу финансового учета для отражения текущего набора параметров по БУ.
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета = "ГруппаФинансовогоУчета";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности = "НаправлениеДеятельности";
	
	#КонецОбласти
	
	#Область РедактированиеРасшифровкиПлатежа
	
	// Если расшифровка редактируется в общей форме, используется в Зачете возвратов товаров.
	СтруктураПараметров.ЭлементыФормы.ГиперссылкаРасшифровкаПлатежа = "";
	
	// Если расшифровка редактируется в документе.
	// Используется в распределении оплаты.
	СтруктураПараметров.ПлатежиПо275ФЗ = Ложь;
	СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа = "";
	СтруктураПараметров.ЭлементыФормы.ПодборВРасшифровкуПлатежа = "";
	
	// Настройки подбора и выбора в ТЧ Расшифровка платежа
	
	// Для подбора остатков расчетов по партнерам с типом расчетов Прочие отношения, без отбора по партнеру.
	СтруктураПараметров.ПартнерПрочиеОтношения = Ложь;
	СтруктураПараметров.ПодборДебиторскойЗадолженности = Ложь;
	СтруктураПараметров.ПодборТолькоБезусловнойЗадолженности = Ложь;
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента
	
	// Курс документа - одна пара для документа.
	// Используются для расчета суммы взаиморасчетов и в форме редактирования валют и курсов документа.
	СтруктураПараметров.КурсЧислитель = "";
	СтруктураПараметров.КурсЗнаменатель = "";
	
	// Имя гиперссылки, отображающей текущий курс взаиморасчетов документа и открывающей соответствующую форму.
	СтруктураПараметров.ЭлементыФормы.НадписьВалюты = "ДекорацияВалюты";
	
	// Используется, когда в вызывающей форме не стоит флаг ТолькоПросмотр, но ограничить редактирование валют нужно.
	СтруктураПараметров.ВалютыИКурсДокументаТолькоПросмотр = Ложь;
	
	// Используются в условии через ИЛИ с правом отклонения от условий продаж/закупок.
	СтруктураПараметров.ВалютаДокументаТолькоПросмотр = Истина;
	СтруктураПараметров.ВалютаВзаиморасчетовТолькоПросмотр = ЗначениеЗаполнено(Договор);
	
	// Если не следует показывать сумму и валюту взаиморасчетов исходя из данных документа.
	СтруктураПараметров.НеПоказыватьРасчеты = Ложь;
	// Если не требуется предлагать пересчет суммы документа.
	СтруктураПараметров.НеПересчитыватьСуммуДокумента = Ложь;
	
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
	
	// Функция Этапы оплаты и дата платежа
	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты = "";
	СтруктураПараметров.ДатаПлатежа = "";
	СтруктураПараметров.ГрафикОплаты = "";
	СтруктураПараметров.ДатаСогласования = "";
	СтруктураПараметров.ДатаОтгрузки = "";
	
	// Имя гиперссылки, отображающей текущие правила оплаты документа и открывающей форму Правила оплаты.
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы = "";
	
	// Если требуется ограничить редактирование плавил оплаты.
	СтруктураПараметров.ЭтапыОплатыТолькоПросмотр = Ложь;
	// Если истина и накладная по заказам то будет отображена расширенная форма графика оплаты, несмотря на функциональную опцию "Упрощенная форма оплаты".
	СтруктураПараметров.ВозможнаНакладнаяПоНесколькимЗаказам = Ложь;
	// Скрывает Банковский счет, кассу, оплату в валюте и УИП в форме плавил оплаты, используется в самообслуживании.
	СтруктураПараметров.НеУказыватьИсточникиОплаты = Ложь;
	// Взвести если не нужны варианты контроля До отгрузки и до обеспечения в графике оплаты. Пример - Отчет комиссионера.
	СтруктураПараметров.НетКонтроляПредоплаты = Ложь;
	// Взвести если у документа реализован отложенный переход права собственности, даст возможность указания варианта отчета "От даты перехода права собственности"
	СтруктураПараметров.ЕстьДатаПереходаПраваСобственности = Ложь;
	СтруктураПараметров.ДатаПереходаПраваСобственности = "";
	
	#КонецОбласти
	
	#Область СостояниеВзаиморасчетов
	
	// Имя гиперссылки, отображающей состояние расчетов и открывающей соответствующий отчет,
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты = "";
	
	#КонецОбласти
	
	#Область ОграниченияЗадолженностиПоДоговору
	
	// Гиперссылка отображающая состояние ограничения задолженности
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиТекст = "";
	// Картинка отображающая запрет отгрузки
	СтруктураПараметров.ЭлементыФормы.ОграничениеЗадолженностиКартинка = "";
	
	#КонецОбласти
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает параметры выбора статей в документе.
// 
// Возвращаемое значение:
//	см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяДоходовПассивов";
	ПараметрыВыбора.ТипСтатьи = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов = "АналитикаДоходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходовПассивов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивов");
	
	Возврат ПараметрыВыбора;
	
КонецФункции


// Возвращает адаптированный текст запроса движений по регистру
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра для получения адаптированного запроса 
// 
// Возвращаемое значение:
//  см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
// 
Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.АктПремииПоставщика";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ШаблонИсключения = НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонИсключения,
			ПолноеИмяДокумента,
			ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено, ДокументОбъект = Неопределено) Экспорт
	
	ИмяРегистра = "СуммыДокументовВВалютахУчета";
	
	Если Регистры <> Неопределено
	   И НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
		
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса("СуммыДокументовВВалютахУчета", ТекстыЗапроса) Тогда
		Возврат "";
	КонецЕсли;
		
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Бонусы"" КАК ИсточникДанных,
	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Дата КАК Период,
	|	Шапка.ВалютаВзаиморасчетов КАК Валюта,
	|	Шапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодБазыНДС,
	|	Шапка.Дата КАК ДатаКурса,
	|	0 КАК НомерСтроки,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторСтроки,
	|	Шапка.СуммаВзаиморасчетов КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	Шапка.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Шапка.СуммаВзаиморасчетов КАК СуммаПриведенная,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаПриведеннаяРегл,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаПриведеннаяУпр,
	|	ИСТИНА КАК ОтражаетсяВРасчетах,
	|	Шапка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ЛОЖЬ КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	ДанныеДокументаШапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	Шапка.Ссылка В(&Ссылка)";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.АктПремииПоставщика");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  Запрос - Запрос -
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Регистры - Неопределено - Регистры
//  ДокументОбъект - Неопределено, ДокументОбъект.АктПремииПоставщика - Документ объект
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект) Экспорт
	
	ИмяРегистра = "ВтКурсыВалют";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтДанныеОбъектовРасчетов", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтДанныеОбъектовРасчетов(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.КурсЧислительВалютыВзаиморасчетов) КАК КурсЧислительВалютыВзаиморасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.КурсЗнаменательВалютыВзаиморасчетов) КАК КурсЗнаменательВалютыВзаиморасчетов,
	|	МАКСИМУМ(ВложенныйЗапрос.КурсЧислительВалютыУправленческогоУчета) КАК КурсЧислительВалютыУправленческогоУчета,
	|	МАКСИМУМ(ВложенныйЗапрос.КурсЗнаменательВалютыУправленческогоУчета) КАК КурсЗнаменательВалютыУправленческогоУчета
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		КурсыИВалютыДокументов.КурсЧислительВалютыВзаиморасчетов КАК КурсЧислительВалютыВзаиморасчетов,
	|		КурсыИВалютыДокументов.КурсЗнаменательВалютыВзаиморасчетов КАК КурсЗнаменательВалютыВзаиморасчетов,
	|		КурсыИВалютыДокументов.КурсЧислительВалютыУправленческогоУчета КАК КурсЧислительВалютыУправленческогоУчета,
	|		КурсыИВалютыДокументов.КурсЗнаменательВалютыУправленческогоУчета КАК КурсЗнаменательВалютыУправленческогоУчета
	|	ИЗ
	|		РегистрСведений.ВалютыИКурсыДокументов КАК КурсыИВалютыДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ПО (ДанныеОбъектаРасчетов.Объект = КурсыИВалютыДокументов.Документ)
	|				И (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов,
	|		КурсыВалютРасчетовПоДоговорамСрезПоследних.КурсЧислитель,
	|		КурсыВалютРасчетовПоДоговорамСрезПоследних.КурсЗнаменатель,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(
	|				&Период,
	|				Договор В
	|					(ВЫБРАТЬ
	|						ДанныеОбъектаРасчетов.Договор
	|					ИЗ
	|						ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов)) КАК КурсыВалютРасчетовПоДоговорамСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ПО (ДанныеОбъектаРасчетов.Договор = КурсыВалютРасчетовПоДоговорамСрезПоследних.Договор)
	|				И (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов,
	|		0,
	|		0,
	|		КурсыВалютРасчетовПоДоговорамСрезПоследних.КурсЧислитель,
	|		КурсыВалютРасчетовПоДоговорамСрезПоследних.КурсЗнаменатель
	|	ИЗ
	|		РегистрСведений.КурсыВалютРасчетовПоДоговорам.СрезПоследних(
	|				&Период,
	|				Договор В
	|					(ВЫБРАТЬ
	|						ДанныеОбъектаРасчетов.Договор
	|					ИЗ
	|						ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов)) КАК КурсыВалютРасчетовПоДоговорамСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ПО (ДанныеОбъектаРасчетов.Договор = КурсыВалютРасчетовПоДоговорамСрезПоследних.Договор)
	|				И (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре))
	|				И (ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов,
	|		0,
	|		0,
	|		ОтносительныеКурсы.КурсЧислитель,
	|		ОтносительныеКурсы.КурсЗнаменатель
	|	ИЗ
	|		ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|					&Период,
	|					Валюта = &ВалютаУправленческогоУчета
	|						И БазоваяВалюта = &ВалютаРегламентированногоУчета) КАК ОтносительныеКурсы
	|			ПО (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.УстановленныйВДоговоре))
	|				И (ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов,
	|		ОтносительныеКурсы.КурсЧислитель,
	|		ОтносительныеКурсы.КурсЗнаменатель,
	|		0,
	|		0
	|	ИЗ
	|		ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|					&Период,
	|					Валюта В
	|							(ВЫБРАТЬ
	|								Т.ВалютаВзаиморасчетов
	|							ИЗ
	|								ВтДанныеОбъектовРасчетов КАК Т)
	|						И БазоваяВалюта = &ВалютаРегламентированногоУчета) КАК ОтносительныеКурсы
	|			ПО (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный))
	|				И (ОтносительныеКурсы.Валюта = ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОбъектаРасчетов.ОбъектРасчетов,
	|		ДанныеОбъектаРасчетов.ВалютаВзаиморасчетов,
	|		0,
	|		0,
	|		ОтносительныеКурсы.КурсЧислитель,
	|		ОтносительныеКурсы.КурсЗнаменатель
	|	ИЗ
	|		ВтДанныеОбъектовРасчетов КАК ДанныеОбъектаРасчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|					&Период,
	|					Валюта = &ВалютаУправленческогоУчета
	|						И БазоваяВалюта = &ВалютаРегламентированногоУчета) КАК ОтносительныеКурсы
	|			ПО (ДанныеОбъектаРасчетов.ВариантКурсаДоговора = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный))) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.ВалютаВзаиморасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов,
	|	ВалютаВзаиморасчетов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Параметры:
//  Запрос - Запрос - Запрос
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Реквизиты документа:
// * Ссылка - ДокументСсылка.АктПремииПоставщика -
// * Дата - Дата -
// * Номер - Строка -
// * Период - Дата -
// * Организация - СправочникСсылка.Организации -
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты
// * СтатьяДоходовПассивов - ПланВидовХарактеристикСсылка.СтатьиДоходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - 
//
Функция РеквизитыДокумента(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СтатьяДоходовПассивов КАК СтатьяДоходовПассивов
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Реквизиты =	РеквизитыДокумента(Запрос);
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

// Параметры:
//  Реквизиты - см. РеквизитыДокумента
// 
// Возвращаемое значение:
//  Структура 
//
Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	
	Значения.Вставить(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.АктПремииПоставщика"));
	
	Значения.Вставить(
		"ВалютаУправленческогоУчета",
		Константы.ВалютаУправленческогоУчета.Получить());
	
	Значения.Вставить(
		"ИспользоватьУчетПрочихАктивовПассивов",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	
	Значения.Вставить(
		"ИспользоватьУчетПрочихДоходовРасходов",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	
	Если Реквизиты <> Неопределено Тогда
		
		Значения.Вставить(
			"НомерНаПечать",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		Значения.Вставить(
			"ВалютаРегламентированногоУчета",
			ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
		
		Значения.Вставить("Ссылка", Реквизиты.Ссылка);
		Значения.Вставить("Период", Реквизиты.Период);
		Значения.Вставить("Организация", Реквизиты.Организация);
		Значения.Вставить("СтатьяДоходовПассивов", Реквизиты.СтатьяДоходовПассивов);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	Шапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА Шапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельностиКонтрагента,
	|	Шапка.Партнер КАК Партнер,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.Договор КАК Договор,
	|	Шапка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА Шапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельностиСтатьи,
	|	Шапка.СтатьяДоходовПассивов КАК СтатьяДоходовРасходов,
	|	Шапка.АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	Шапка.АналитикаДоходов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	Шапка.ВалютаВзаиморасчетов КАК Валюта,
	|	Шапка.СуммаВзаиморасчетов КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	Шапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Шапка.СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	Шапка.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторФинЗаписи
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	Шапка.Ссылка В(&Ссылка)";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА Шапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	Шапка.СтатьяДоходовПассивов КАК Статья,
	|	Шапка.АналитикаАктивовПассивов КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтражениеПремииПоставщикаРетроБонус) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|		ПО Шапка.СтатьяДоходовПассивов = СтатьиАктивовПассивов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	&ИспользоватьУчетПрочихАктивовПассивов
	|	И Шапка.Ссылка В (&Ссылка)";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоХранения,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК Строка(100)) КАК Комментарий,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаПервичногоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.АктПремииПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылка)";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРетроБонусыПоставщиков(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РетроБонусыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход) КАК ВидДвиженияРегистра,
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	ДанныеТаблицы.НачалоПериода КАК НачалоПериода,
	|	ДанныеТаблицы.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеТаблицы.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеТаблицы.ВалютаБонуса КАК Валюта,
	|	0 КАК Начислено,
	|	0 КАК КСписанию,
	|	0 КАК Списано,
	|	ДанныеТаблицы.СуммаБонуса КАК Актировано
	|ИЗ
	|	ДанныеДокументаРетроБонусы КАК ДанныеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК ДанныеШапки
	|		ПО ДанныеТаблицы.Ссылка = ДанныеШапки.Ссылка
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтДанныеОбъектовРасчетов(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ВтДанныеОбъектовРасчетов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК Объект,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	Шапка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|				И ЕСТЬNULL(ОбъектыРасчетов.Договор.ВариантКурсаДоговора, ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки)
	|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетов.Договор.ВариантКурсаДоговора, ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный))
	|	КОНЕЦ КАК ВариантКурсаДоговора
	|ПОМЕСТИТЬ ВтДанныеОбъектовРасчетов
	|ИЗ
	|	ДанныеДокументаШапка КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО Шапка.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	Шапка.Ссылка В(&Ссылка)";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.АктПремииКлиенту");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	Шапка.Дата КАК ДатаРегистратора,
	|	Шапка.Номер КАК НомерРегистратора,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.Партнер КАК Партнер,
	|	Шапка.Договор КАК Договор,
	|	Шапка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Шапка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Шапка.ВалютаВзаиморасчетов КАК Валюта,
	|	Шапка.СуммаВзаиморасчетов КАК Сумма,
	|	Шапка.СуммаВзаиморасчетов КАК КОплате,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииВзаиморасчетов.КорректировкаЗадолженности) КАК ОперацияВзаиморасчетов,
	|	Шапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|	ИСТИНА КАК ИсключатьПриКонтроле,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтражениеПремииПоставщикаРетроБонус) КАК НастройкаХозяйственнойОперации,
	|	4 КАК ВидОперацииДляСортировки,
	|	1 КАК ПорядокОперацииВПределахДокумента
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО Шапка.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|			И Шапка.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И Шапка.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И Шапка.Договор = РегистрАналитикаУчетаПоПартнерам.Договор
	|			И Шапка.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	Шапка.Ссылка В(&Ссылка)
	|	И ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	Шапка.Дата КАК ДатаРегистратора,
	|	Шапка.Номер КАК НомерРегистратора,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.Партнер КАК Партнер,
	|	Шапка.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	Шапка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Шапка.ВалютаВзаиморасчетов КАК Валюта,
	|	Шапка.СуммаВзаиморасчетов КАК Сумма,
	|	Шапка.СуммаВзаиморасчетов КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииВзаиморасчетов.КорректировкаЗадолженности) КАК ОперацияВзаиморасчетов,
	|	Шапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
	|	ИСТИНА КАК ИсключатьПриКонтроле,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтражениеПремииПоставщикаРетроБонус) КАК НастройкаХозяйственнойОперации,
	|	4 КАК ВидОперацииДляСортировки,
	|	1 КАК ПорядокОперацииВПределахДокумента
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО Шапка.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|			И Шапка.Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|			И Шапка.Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|			И Шапка.Договор = РегистрАналитикаУчетаПоПартнерам.Договор
	|			И  РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	Шапка.Ссылка В(&Ссылка)
	|	И НЕ ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА Шапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	Шапка.СтатьяДоходовПассивов КАК СтатьяДоходов,
	|	Шапка.АналитикаДоходов КАК АналитикаДоходов,
	|	Шапка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	Шапка.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтражениеПремииПоставщикаРетроБонус) КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|	
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И Шапка.СтатьяДоходовПассивов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда 
		ТекстЗапросаТаблицаВтКурсыВалют(Запрос, ТекстыЗапроса, Неопределено, ДокументОбъект);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Шапка.НаправлениеДеятельности.УчетРасчетовСПоставщиками, ЛОЖЬ)
	|			ТОГДА Шапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	Шапка.СтатьяДоходовПассивов КАК Статья,
	|	ВЫБОР
	|		КОГДА Шапка.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Шапка.АналитикаАктивовПассивов
	|	КОНЕЦ КАК Аналитика,
	|	ВЫБОР
	|		КОГДА Шапка.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Шапка.СуммаВзаиморасчетов
	|		КОГДА &ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1) / ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) КАК ЧИСЛО(31, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ(Шапка.СуммаВзаиморасчетов * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыУправленческогоУчета, 1) / (ЕСТЬNULL(КурсВалюты.КурсЗнаменательВалютыВзаиморасчетов, 1) * ЕСТЬNULL(КурсВалюты.КурсЧислительВалютыУправленческогоУчета, 1)) КАК ЧИСЛО(31, 2))
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.АктПремииПоставщика КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалюты
	|		ПО Шапка.ВалютаВзаиморасчетов = КурсВалюты.ВалютаВзаиморасчетов
	|			И Шапка.ОбъектРасчетов = КурсВалюты.ОбъектРасчетов
	|ГДЕ
	|	&ИспользоватьУчетПрочихАктивовПассивов
	|	И Шапка.СтатьяДоходовПассивов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов";
	
	Если ДокументОбъект <> Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктПремииПоставщика", "ДанныеДокументаШапка");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДанныеДокумента

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)
	
	СписокЗапросов = Новый Массив; // Массив из Строка
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаРетроБонусы(СписокЗапросов);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеДокумента.СтатьяДоходовПассивов КАК СтатьяДоходовПассивов,
	|	ДанныеДокумента.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеДокумента.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.НастройкаСчетовУчета КАК НастройкаСчетовУчета
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.АктПремииПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаРетроБонусы(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.ДокументУсловий КАК ДокументУсловий,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.Договор КАК Договор,
	|	ТаблицаДанных.НачалоПериода КАК НачалоПериода,
	|	ТаблицаДанных.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ТаблицаДанных.ВалютаБонуса КАК ВалютаБонуса,
	|	ТаблицаДанных.СуммаБонуса КАК СуммаБонуса,
	|	ТаблицаДанных.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ДанныеДокументаРетроБонусы
	|ИЗ
	|	Документ.АктПремииПоставщика.РетроБонусы КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли