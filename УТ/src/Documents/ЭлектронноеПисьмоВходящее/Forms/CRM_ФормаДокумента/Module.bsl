
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КонтекстВыбора;

&НаКлиенте
Перем CRM_ОбновитьАРМПослеЗаписи;

&НаКлиенте
Перем РольОтветственногоДоИзменения;

&НаКлиенте
Перем ВыведеныПолучатели;

&НаКлиенте
Перем ВыведеныПолучателиКопии;

// Переменная для команды контекстного меню по копированию гиперссылки в буфер обмена, 
// показывает, что нужно не обрабатывать клик для текущего обрабатываемого элемента HTML
&НаКлиенте
Перем НеОбрабатыватьКлик;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// Запретим создание новых
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
		СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
	Иначе
		СозданИзЭтапаСделки = Ложь;
	КонецЕсли;
	
	// Запретим создание новых
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь  = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	// Запретим изменение документа пользователям, которых нет в учетной записи.
	ВключитьТолькоПросмотр = Ложь;
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда // Если нет учетной записи, то открываем вложение типа EML.
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Ответственному разрешено открывать письмо независимо от прочих проверок.
		Если Не ТекущийПользовательОтветственнный() Тогда
			
			// Проверим наличие доступа в учетной записи.
			Если Не Объект.УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись
				 И Не CRM_ОбщегоНазначенияСервер.НайтиПользователяВУчетнойЗаписи(Объект.УчетнаяЗапись, ТекущийПользователь) Тогда
				
				Если Объект.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям Тогда
					ВключитьТолькоПросмотр = Истина;
				Иначе
					
					// Проверяем, открывается ли письмо из другого документа, задачи, БП и пр., если да, то письмо ставим в режим
					// "Только чтение".
					Если Параметры.Свойство("ОткрытиеИзФормы") И Параметры.ОткрытиеИзФормы Тогда
						ВключитьТолькоПросмотр = Истина;
					
					Иначе
						ТекстСообщения =
							CRM_ВзаимодействияКлиентСервер.ПолучитьТекстСообщенияОбОтсутствииПравДоступаКЭлектронномуПисьму(Объект.УчетнаяЗапись);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ВключитьТолькоПросмотр Тогда
		ТолькоПросмотр = Истина;
		Элементы.КоманднаяПанельАтрибуты.Доступность = Ложь;
		Элементы.ГруппаИнтерес.Доступность = Ложь;
		Элементы.ФормаCRM_ОтклонитьОбращение.Доступность = Ложь;
		Элементы.ГруппаКомандаОтменитьОтклонение.Доступность = Ложь;
		Элементы.СписокПисемПереместитьВПапку.Доступность = Ложь;
	КонецЕсли;
	
	// Сформируем представление отправителя.
	ОтправительПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление,
		 Объект.ОтправительАдрес,
		 Объект.ОтправительКонтакт);
	
	// Сформируем представление Кому и Копии.
	УстановитьПривилегированныйРежим(Истина);
	ПолучателиПредставление            =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма);
	ПолучателиКопийПредставление       =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий);
	ПолучателиОтветаПредставление      =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиОтвета);
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительнаяИнформацияОПисьме = НСтр("ru='Создано:'") + "   " + Объект.Дата + НСтр("ru='"
"Получено:'") + "  " + Объект.ДатаПолучения + НСтр("ru='"
"Важность:'") + "  " + Объект.Важность + НСтр("ru='"
"Кодировка:'") + " " + Объект.Кодировка;
	
	Заголовок = ПолучитьЗаголовокФормыДокумента();
	
	Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
			ОтправительВладелец = Объект.ОтправительКонтакт.Владелец;
			Элементы.ОтправительВладелец.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		
		Объект.ОтправительКонтакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		
	КонецЕсли;
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.ОтправительКонтакт)
	                                   
	                                    	
	                                    	 	 ИЛИ (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.ОтправительКонтакт)));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьТекстHTML();
	КонецЕсли;
	// -CRM
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.ОбластьНастроек;
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
		
	Элементы.ПредметПредставление.Видимость = ЗначениеЗаполнено(ПредметПредставление);
	Элементы.ИзменитьПредмет.Видимость = Истина;
	Элементы.ПредметИзменение.Видимость = Ложь;
	
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");
				
	Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		Если (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")
			 ИЛИ ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
			ОтображатьКаналИсточник = Истина;
			Партнер = ?(ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры"),
				 Объект.ОтправительКонтакт,
				 Объект.ОтправительКонтакт.Владелец);
		ИначеЕсли ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ОтображатьКаналИсточник = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьОписаниеКаналаИсточника();
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	ОткрытоИзФормыНапоминаний = Ложь;
	Параметры.Свойство("ОткрытоИзФормыНапоминаний", ОткрытоИзФормыНапоминаний); 
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();	
	УстановитьПоложениеТумблераСтатусПисьма();
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Лиды
	АдресНастройкиЭлементовСостоянияОбращения = CRM_МетодыФормДокументовСервер.
				СохранитьНастройкиЭлементовСостоянияОбращения(ЭтотОбъект, МассивЭлементовСостоянияОбращения());
	ОбновитьСостояниеОбращения();
	Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) И Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Элементы.Ответственный.Видимость = Ложь;
		Элементы.CRM_РольОтветственного.Видимость = Истина;
	КонецЕсли;
	
	// Показать/скрыть свойства по умолчанию	
	CRM_ПоказатьСкрытьСвойстваНаСервере(Истина);
	CRM_ОбновитьДатуПисьма();
	
	ЗаполнитьДополнительныеДанныеКонтакта();
	УстановитьУсловноеОформление();
	
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент", Ложь);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ВыведеныПолучатели      = Ложь;
	ВыведеныПолучателиКопии = Ложь;
	НеОбрабатыватьКлик      = Ложь;
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если ОткрытоИзФормыНапоминаний Тогда
		//Оповестить("ПисьмоУспешноОткрытоИзНапоминания",Новый Структура("Ссылка", Объект.Ссылка));
		Оповестить("ПисьмоУспешноОткрытоИзНапоминания", Новый Структура("Ссылка, Пользователь",
			 Объект.Ссылка,
			 ТекущийПользователь));
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если CRM_НапоминанияСервер.CRM_УдалитьНапоминанияОПисьме(Объект.Ссылка) Тогда
	
		Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", Истина));
	
	КонецЕсли; 
	
	УстановитьПометкуОПрочтении();
	
	ОформлениеИзбранного();
	
	Если ВладелецФормы <> Неопределено И 
		ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если ВладелецФормы.ИмяФормы = "Обработка.CRM_МенеджерПочты.Форма.Форма" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзМенеджераПочты");
		ИначеЕсли ВладелецФормы.ИмяФормы = "ОбщаяФорма.CRM_ФормаНапоминаний" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзОкнаНапоминанийПользователю");
		ИначеЕсли ВладелецФормы.ИмяФормы = "ОбщаяФорма.CRM_СтруктураПодчиненности" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзФормыСвязанныеДокументы");
		ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиДела.Форма.Форма" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзАРМаМоиДелаКолонкаВходящие");
		ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиПродажи.Форма.Форма" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзАРМаМоиПродажиКолонкаОбращения");
		ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_Поддержка.Форма.Форма" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзАРМаПоддержкаКолонкаОбращения");
		ИначеЕсли (ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая"
			 Или ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаСписка" 
			Или ВладелецФормы.ИмяФормы = "Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаЭлемента"
				 Или ВладелецФормы.ИмяФормы = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлементаНовая" 
			Или ВладелецФормы.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая") Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеИзЛенты");
		КонецЕсли;
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ОткрытиеВОдинКлик.ОткрытиеБезКонтекста");
	КонецЕсли;

	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов, "Предмет, Рассмотрено, РассмотретьПосле");
	ОбработатьНеобходимостьУведомленияОПрочтении();
	
	Папка = CRM_Взаимодействия.ПапкаПисьма(Объект.Ссылка);
	
	НеОтображатьКартинкиПометка = ХранилищеОбщихНастроекЗагрузить("НеОтображатьКартинки", "НеОтображатьКартинки", Ложь);
	
	ПараметрыТегов	= ПараметрыТегов();
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы, ПараметрыТегов);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// CRM_УправлениеДоступом
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец CRM_УправлениеДоступом
	
	// Заполняем массив с картинками расширений файлов
	СписокИконокФайлов.Очистить();
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2]);
	КонецЦикла;
	
	// +CRM в БСП 2.2 это уже есть!
	// Установим текст и вид текста.
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
		Или Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.CRM_ДоверенныеАдресаЭлектроннойПочты КАК ДоверенныеАдреса
		|ГДЕ
		|	ДоверенныеАдреса.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
		
		Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Объект.ОтправительАдрес);
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗапрещеноОтображениеНебезопасногоСодержимого = Взаимодействия.ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах();
		
		ВключитьНебезопасноеСодержимое = Не ЗапрещеноОтображениеНебезопасногоСодержимого
			И (ТекущийОбъект.CRM_ВключитьНебезопасноеСодержимое Или Не РезультатЗапроса.Пустой());
		
		ПрочитатьТекстПисьмаHTML();
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		
	Иначе
		ТекстПисьма = Объект.Текст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Для Каждого СтрокаВложения Из Вложения Цикл
			СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
	КонецЕсли;
	// -CRM
	
	УстановитьВидимостьПредупрежденияБезопасности();
	
	// Заполним вложения
	ВложенияОчищеныПоНастройке = Ложь;
	
	Вложения.Очистить();
	
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка);
	
	Для Каждого Стр Из табВложения Цикл
		
		новСтр = Вложения.Добавить();
		новСтр.Ссылка			= Стр.Ссылка;
		новСтр.ИмяФайла			= Стр.ИмяФайла;
		новСтр.ИндексКартинки	= Стр.ИндексКартинки;
		новСтр.Размер			= Стр.Размер;
		РазмерВложения			= Цел(Стр.Размер / 1024);
		новСтр.РазмерСтрокой	= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		новСтр.ИДФайлаЭлектронногоПисьмаОтбор = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		НовСтр.ИДФайлаЭлектронногоПисьма = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		
		Если Не ВложенияОчищеныПоНастройке И Стр.ОчищенПоНастройке Тогда
			ВложенияОчищеныПоНастройке = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаленноеВложение Из Объект.НепринятыеВложения Цикл
		
		НовоеВложение = Вложения.Добавить();
		НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
		НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(".msg") + 1;
		НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		
	КонецЦикла;
	
	Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
	
	Элементы.CRM_ЗагрузитьВложения.Видимость = ВложенияОчищеныПоНастройке;
	Элементы.СохранитьВсеВложения.Доступность = Не ВложенияОчищеныПоНастройке;
	Элементы.КопироватьВсеВложенияВБуферОбмена.Доступность = Не ВложенияОчищеныПоНастройке;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// +CRM
	Если НЕ Настройки["CRM_ПоказатьСкрытьСвойства"] = Неопределено Тогда
		CRM_ПоказатьСкрытьСвойстваНаСервере(Настройки["CRM_ПоказатьСкрытьСвойства"]);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Партнеры")
		 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Пользователи")
			 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			Если ИмяЭлемента = "ОтправительКонтакт" Тогда
				Объект[ИмяЭлемента] = НовыйОбъект;
				ОбработкаВыбораКонтактаОтправителя();
			Иначе
				ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
				ТекДанные.Контакт	= НовыйОбъект;
			КонецЕсли;
			ИмяЭлемента			= "";
			ТекущееДействие		= Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Создан новый партнер из письма" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактноеЛицо	= Параметр;
			Клиент			= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
		Иначе	
			Клиент			= Параметр;
			КонтактноеЛицо	= ПолучитьОсновноеКонтактноеЛицо(Клиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Объект.ОтправительКонтакт = КонтактноеЛицо;
			ОтправительВладелец = Клиент;
			ОтправительПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление,
				 Объект.ОтправительАдрес,
				 Объект.ОтправительКонтакт);
			Элементы.ОтправительВладелец.Видимость = Истина;
		Иначе
			Объект.ОтправительКонтакт = Клиент;
			ОтправительПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление,
				 Объект.ОтправительАдрес,
				 Объект.ОтправительКонтакт);
			Элементы.ОтправительВладелец.Видимость = Ложь;
		КонецЕсли;
		ЗадатьВопросОСохраненииКИ(Истина);
		Модифицированность = Истина;
		
		// +ПанельБП
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя"
		 ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача" Тогда
		Если ИмяСобытия = "СохраненаЛичнаяЗадача" Тогда
			Если ОбновитьДанныеДокументаПоСсылке() Тогда
				ОбновитьОтображениеДанных();
			КонецЕсли;
		КонецЕсли;
		
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		УстановитьПоложениеТумблераСтатусПисьма();	
		
		// -ПанельБП
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" ИЛИ  ИмяСобытия = "Создано новое контактное лицо"
		 ИЛИ  ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" 
		 ИЛИ ИмяСобытия = "НовыйПартнерЗаписанСПараметрами" Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			Если ((ИмяСобытия = "Создан новый партнер" ИЛИ ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан")
				 И ТекущееДействие = 0) ИЛИ (ИмяСобытия = "Создано новое контактное лицо"
				 И ТекущееДействие = 1) Тогда
				Если ИмяЭлемента = "ОтправительКонтакт" Тогда
					Если ТипЗнч(Параметр) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						ДанныеПК = ДанныеПотенциальногоКлиента(Параметр);
						Если ЗначениеЗаполнено(ДанныеПК.Контакт) Тогда
							Объект[ИмяЭлемента] = ДанныеПК.Контакт;
						ИначеЕсли ЗначениеЗаполнено(ДанныеПК.Клиент) Тогда
							Объект[ИмяЭлемента] = ДанныеПК.Клиент;
						Иначе
							Объект[ИмяЭлемента] = Параметр;
						КонецЕсли;
					Иначе
						Объект[ИмяЭлемента] = Параметр;
					КонецЕсли;
					ОбработкаВыбораКонтактаОтправителя();
				Иначе
					ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
					ТекДанные.Контакт	= Параметр;
				КонецЕсли;
				ИмяЭлемента			= "";
				ТекущееДействие		= Неопределено;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбъектыПереопределеныСПК" И Объект.ОтправительКонтакт = Параметр.ПК Тогда
		
		Прочитать();
			
		ИмяЭлемента			= "";
		ТекущееДействие		= Неопределено;
		
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленФлагОбработано" И Источник = ЭтотОбъект Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПринятиеОбращения" И Источник = Объект.Ссылка Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "СозданПредметВзаимодействия" И Объект.Ссылка = Параметр Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		
		ОбновитьОблакоТегов();
		
	ИначеЕсли ИмяСобытия = "ВключеноНебезопасноеСодержимое" Тогда
		ЭтоТекущееПисьмо = (Объект.Ссылка = Параметр); 
		ТекущееПисьмоВМассиве = ТипЗнч(Параметр) = Тип("Массив") 
			И Параметр.Найти(Объект.Ссылка) <> Неопределено;
		Если ЭтоТекущееПисьмо Или ТекущееПисьмоВМассиве Тогда
			Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ДобавленДоверенныйАдрес" Тогда
		ЭтоТекущийОтправитель = (Объект.ОтправительАдрес = Параметр);
		ТекущийОтправительВМассиве = ТипЗнч(Параметр) = Тип("Массив") 
			И Параметр.Найти(Объект.ОтправительАдрес) <> Неопределено;
		Если ЭтоТекущийОтправитель Или ТекущийОтправительВМассиве Тогда
			Прочитать();
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ПослеСозданияТега" И (Источник = Элементы.Тег) Тогда
		
		Тег = Параметр;
		CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элементы.Тег);
		
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Тогда
		
		ЗаполнитьДополнительныеДанныеКонтакта();
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	НаличиеУчастников = ?(ЗначениеЗаполнено(Партнер), Истина, Ложь);
	Если ЗаполнятьПервичныйИнтерес Тогда
		
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИсточникПервичногоИнтереса");
				КонецЕсли;
			Иначе
				УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИсточникПервичногоИнтереса");
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИсточникПервичногоИнтереса");
		КонецЕсли;
		
	Иначе
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ТабПервичныйИнтерес = ПервичныйИнтерес.Получить(0);
	Иначе
		ТабПервичныйИнтерес = Неопределено;
	КонецЕсли;
	Если ТабПервичныйИнтерес <> Неопределено 
		И ЗначениеЗаполнено(ТабПервичныйИнтерес.КаналПервичногоИнтереса) 
		И ТабПервичныйИнтерес.Актуальность = Истина Тогда 
		
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, "ИсточникПервичногоИнтереса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ВыведеныПолучатели Или ВыведеныПолучателиКопии Тогда
		ПроверитьСкорректироватьПолучателейПисьма(ВыведеныПолучатели, ВыведеныПолучателиКопии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		// Зафиксировать актуальный источник привлечения.
		НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборРегистра.Прочитать();
		НаборРегистра.Очистить();
		
		Если (ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)) Тогда
			Если ЗначениеЗаполнено(Партнер) Тогда
				Запись								= НаборРегистра.Добавить();
				Запись.Период						= ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаПолучения),
					 ТекущийОбъект.ДатаПолучения,
					 ТекущийОбъект.Дата);
				Запись.Партнер						= Партнер;
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			ИначеЕсли (ЗначениеЗаполнено(Объект.ОтправительКонтакт)
				 И (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"))) Тогда
				Запись								= НаборРегистра.Добавить();
				Запись.Период						= ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаПолучения),
					 ТекущийОбъект.ДатаПолучения,
					 ТекущийОбъект.Дата);
				Запись.Партнер						= Объект.ОтправительКонтакт;
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;	
		КонецЕсли;
		
		НаборРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	ОбновитьСостояниеОбращения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновленыДанныеЭлектронногоПисьмаВходящего", Объект.Ссылка);
	
	Если CRM_ОбновитьАРМПослеЗаписи = Истина Тогда
		CRM_ОбновитьАРМПослеЗаписи = Неопределено;
		Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		// Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		//	Возврат;
		//КонецЕсли;
		//
		//ЗаполнитьУточненныеКонтакты(ВыбранноеЗначение);
		//ИзменилисьКонтакты = Истина;
		// Модифицированность = Истина;
		
	// +CRM	
	ИначеЕсли КонтекстВыбора = "ВыборПредмета" Тогда
		
		Предмет = ВыбранноеЗначение;
		Модифицированность = Истина;
		КонтекстВыбора = Неопределено;
	// -CRM	
	Иначе
		
		ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ТребуетсяЗапросУведомленияОПрочтении Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Отправитель запросил уведомление о прочтении. Отправить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			НСтр("ru='Запрос уведомления'"));
			
	КонецЕсли;
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяУстановкаФлагаОтправкиУведомления Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры
// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоВыбораРеквизитаОтветственный");
	
	Если Объект.Ответственный = Неопределено Тогда
		Объект.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ВыбранПользователь = (ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи"));
	
	Если ВыбранПользователь Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ТекущийПользователь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура CRM_РольОтветственногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		
		Объект.Ответственный = ТекущийПользователь;
		
		Элементы.Ответственный.Видимость = Истина;
		Элементы.CRM_РольОтветственного.Видимость = Ложь;
	
	КонецЕсли;
	
	Если Объект.CRM_РольОтветственного = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		
			ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Объект.CRM_РольОтветственного = РольОтветственногоДоИзменения;
			Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ПредметИзменение.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	// откроем форму предмета
	СтандартнаяОбработка = Ложь;
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьПредмет(Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительВладелецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОтправительВладелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеПриИзменении(Элемент)
	
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоВыбораРеквизитаКанал");
	
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса,
			 "ТипЗначения"));
	КонецЕсли;	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Видимость = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Видимость = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)	И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	КаналПервичногоИнтереса);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		
		Если ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				 И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса,
					 "Владелец"));
			КонецЕсли;
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ,
				 ВариантОткрытияОкна.ОтдельноеОкно, ,
				 ОписаниеВыбораПартнера);
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.Партнеры") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Документ.CRM_Телемаркетинг.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактПриИзменении(Элемент)
	
	ОбработкаВыбораКонтактаОтправителя();
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	ЗаполнитьДополнительныеДанныеКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоВыбораРеквизитаКонтакт");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты", Объект.ОтправительАдрес);
	ПараметрыНового.Вставить("Наименование", СокрЛП(СтрЗаменить(Объект.ОтправительПредставление, "<" + Объект.ОтправительАдрес 
		+ ">",
		 "")));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	Если ИспользоватьПК Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Потенциальные клиенты");
	КонецЕсли;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактОткрытие(Элемент, СтандартнаяОбработка)
	ИмяЭлемента = "ОтправительКонтакт";
	ТекущееДействие = 0;
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Результат.Значение;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
	// Если Результат = Неопределено Тогда
	//	Возврат
	//КонецЕсли;
	//
	//Если Результат.Значение = "КонтактныеЛицаПартнеров" Тогда
	//	ПараметрыФормы = Новый Структура("Основание", Новый Структура("НомерТелефона", Объект.АбонентКакСвязаться));
	//	ИмяФормыВыбора = ".Форма.CRM_ФормаБыстрогоВвода";
	//			
	//ИначеЕсли Результат.Значение = "Партнеры" Тогда
	//	СтруктураПараметрыНового = Новый Структура;
	//	СтруктураПараметрыНового.Вставить("Телефон", Объект.АбонентКакСвязаться);
	//	СтруктураПараметрыНового.Вставить("Наименование" , ?(СтрНайти(Объект.АбонентПредставление,
		// "!!!") = 0, Объект.АбонентПредставление,
		// ""));
	//	ПараметрыФормы = Новый Структура("Основание, ПараметрыНового", Объект.Ссылка, СтруктураПараметрыНового);
	//	ИмяФормыВыбора = ".ФормаОбъекта";
	// Иначе
	//	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	//	ИмяФормыВыбора = ".ФормаОбъекта";
	//КонецЕсли;
	//ОткрытьФорму("Справочник." + Результат.Значение + ИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект,,,,,
		// РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьКонтактВыполнить".
//
Процедура СоздатьКонтактВыполнить()
	
	ЭтоПотенциальныйКлиент = ЗначениеЗаполнено(Объект.ОтправительКонтакт)
		 И ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	
	ИмяЭлемента						= "ОтправительКонтакт";
	ИдентификаторСтрокиПолучателя	= "";
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты", Объект.ОтправительАдрес);
	ПараметрыНового.Вставить("Наименование", СокрЛП(СтрЗаменить(Объект.ОтправительПредставление, "<" + Объект.ОтправительАдрес 
		+ ">",
		 "")));
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	Если ЭтоПотенциальныйКлиент Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.ОтправительКонтакт);
		ПараметрыФормы.Вставить("СкопироватьКИПотенциальногоКлиента");
		ПараметрыФормы.Вставить("ОбновитьДанныеПотенциальногоКлиентаПослеЗаписи");
	КонецЕсли;
	
	СписокИнтерактивноСоздаваемыхКонтактов = Новый СписокЗначений();
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 0);
	СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	Если ИспользоватьПК И Не ЭтоПотенциальныйКлиент Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
		СтруктураДанныхВыбора.Вставить("ТекущееДействие", 0);
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Потенциального клиента'");
	КонецЕсли;
	
	Если Не ЭтоПотенциальныйКлиент Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
		СтруктураДанныхВыбора.Вставить("ТекущееДействие", 1);
		СписокИнтерактивноСоздаваемыхКонтактов.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	КонецЕсли;
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокИнтерактивноСоздаваемыхКонтактов, Элементы.СоздатьКонтакт);
	
КонецПроцедуры // СоздатьКонтактВыполнить()

&НаКлиенте
Процедура ОтправительКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "Получатели";
	ИдентификаторСтрокиПолучателя	= Элементы.Получатели.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 0);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 1);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 2);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 3);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Физическое лицо'");
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Element.className = "rightClick" Тогда
		Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
			CRM_БуферОбмена = ДанныеСобытия.Href;
			НастроитьКомандуКопированияВБуферОбменаВКМ(Истина);
			НеОбрабатыватьКлик = Истина;
		ИначеЕсли Не НеОбрабатыватьКлик Тогда
			НастроитьКомандуКопированияВБуферОбменаВКМ(Ложь);
		Иначе
			НеОбрабатыватьКлик = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура СостояниеЛидаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Элементы.ГруппаСостояниеЛида.Видимость Тогда
		Элементы.ГруппаСостояниеЛида.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВывестиГруппаСостояниеЛида", 0.1, Истина);
		ПодключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида", 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиГруппаСостояниеЛида()
	Элементы.ГруппаСостояниеЛида.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппаСостояниеЛида()
	
	Если Элементы.ГруппаСостояниеЛида.Скрыта() Тогда
		Если Элементы.ГруппаСостояниеЛида.Видимость Тогда
			Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
			ОтключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида");
			#Если ВебКлиент Тогда
				ПодключитьОбработчикОжидания("ЗакрытьГруппаСостояниеЛида", 0.1, Истина);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// -CRM

&НаКлиенте
Процедура ТекстПисьмаДокументСформирован(Элемент)
	
	Если Элементы.ТекстПисьма.Документ.links.length = 0 Тогда
		Возврат;
	КонецЕсли;
	
	CRM_БуферОбмена = " ";
	
	Элемент = Элементы.ТекстПисьма.Документ.getElementsByTagName("body")[0];
	Элемент.setAttribute("onmouseup", "if (event.button === 2) { event.preventDefault(); " 
		+ "this.setAttribute('class', 'rightClick'); this.click(); }");
		
	ВсеЭлементыСсылок = Элементы.ТекстПисьма.Документ.querySelectorAll("a");
	
	Для Каждого ТекущийЭлементСсылки Из ВсеЭлементыСсылок Цикл
		ТекущийЭлементСсылки.setAttribute("onmouseup", 
			"if (event.button === 2) { event.preventDefault(); this.setAttribute('class', 'rightClick'); this.click(); }");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучателиКопии

&НаКлиенте
Процедура ПолучателиКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиКопии.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиКопии";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиКопии.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиКопии.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 0);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 1);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 2);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие", 3);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Ответить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаОтветить");
	СоздатьПисьмоНаОсновании("Ответить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаОтветитьВсем");
	СоздатьПисьмоНаОсновании("ОтветитьВсем");
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПереслать");
	СоздатьПисьмоНаОсновании("Переслать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПисьмо(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаЗаписать");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаИзменитьПредмет");
	Элементы.ПредметПредставление.Видимость = Ложь;
	Элементы.ПредметИзменение.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПараметрыПисьма");
	ТекстЗаголовкиИнтернета = Новый ТекстовыйДокумент;
	ТекстЗаголовкиИнтернета.ДобавитьСтроку(Объект.ВнутреннийЗаголовок);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Получено", Объект.ДатаПолучения);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстЗаголовкиИнтернета);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоВходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	СтруктураПараметры.Вставить("Папка", Папка);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыПисьмаЗавершение", ЭтотОбъект);
	Результат = ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ПараметрыЭлектронногоПисьма",
		СтруктураПараметры, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьмаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Объект.Кодировка <> Результат.Кодировка Тогда
			Объект.Кодировка = Результат.Кодировка;
			ПреобразоватьКодировкуПисьма(Объект.Кодировка);			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателей(Команда)
	
	Если Не ВыведеныПолучатели Тогда
		ВывестиПолучатели();
		ВыведеныПолучатели = Истина;
		НастроитьКомандыДобавленныхТаблиц();
	КонецЕсли;
	
	Элементы.СкрытьПоказатьПолучателей.Пометка = НЕ Элементы.СкрытьПоказатьПолучателей.Пометка;
	Элементы.ТабПолучатели.Видимость = Элементы.СкрытьПоказатьПолучателей.Пометка;
	Если Элементы.ТабПолучатели.Видимость = Истина Тогда
		Для каждого Элемент Из ЭтотОбъект["Получатели"] Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.Контакт) Тогда
				Элемент.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейКопии(Команда)
	
	Если Не ВыведеныПолучателиКопии Тогда
		ВывестиПолучателиКопии();
		ВыведеныПолучателиКопии = Истина;
		НастроитьКомандыДобавленныхТаблиц();
	КонецЕсли;
	
	Элементы.СкрытьПоказатьПолучателейКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Элементы.ТабПолучателиКопии.Видимость = Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Если Элементы.ТабПолучатели.Видимость = Истина Тогда
		Для каждого Элемент Из ЭтотОбъект["ПолучателиКопии"] Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.Контакт) Тогда
				Элемент.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПеренестиВОбработанные()
	
	ТекущееСостояние = Неопределено;
	CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние);
	
	Если ТекущееСостояние = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый") Тогда
		ДополнительныеПараметры = Новый Структура("ПропуститьВопрос", Истина);
		CRM_ВыполнитьОтклонениеОбращения(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	CRM_ПеренестиВОбработанныеКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПеренестиВОбработанныеКлиент(ПропуститьВопрос = Ложь)
	
	Если НЕ ПропуститьВопрос И CRM_НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
		CRM_ЗадатьВопросПриПереносеВОбработанные();
	Иначе
		CRM_ВопросПриПереносеВОбработанныеЗавершение(CRM_ОтветПереноситьВОбработанные());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтклонитьОбращение(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаОтклонитьОбращение");
	
	CRM_ВыполнитьОтклонениеОбращения();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВыполнитьОтклонениеОбращения(ДополнительныеПараметры = Неопределено)
	
	ТекущееСостояние = Неопределено;
	НельзяОтклонить = CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние);
	
	Если ТекущееСостояние = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Повторный") Тогда
		
		CRM_ОбработатьПовторноНаСервере(Объект.Ссылка);
		CRM_ПеренестиВОбработанныеКлиент(Истина);
		Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
		
	Иначе
		
		Если НельзяОтклонить Тогда
			CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
		
		Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ОтклонитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
				 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			CRM_ОтклонитьЗавершение(Истина, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтклонитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			
		CRM_ОтклонитьОбращениеНаСервере(ДополнительныеПараметры.Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		CRM_ОтклонитьОбращениеНаСервере(ДополнительныеПараметры.Ссылка, Неопределено, "");
	КонецЕсли;
	
	ПропуститьВопрос = ?(ДополнительныеПараметры.Свойство("ПропуститьВопрос"),
		 ДополнительныеПараметры.ПропуститьВопрос,
		 Ложь);
	CRM_ПеренестиВОбработанныеКлиент(ПропуститьВопрос);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	Если РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка)
		 И (РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) 
		 Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Ссылка)) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
			 Комментарий);
		
		ОбновитьДанныеДокументаПоСсылке();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_ОбработатьПовторноНаСервере(Ссылка)
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) 
		 Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПеренаправитьОтветственному");
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРоль(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПеренаправитьНаРоль");
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач,
		 Новый Структура("Источник", ЭтотОбъект),
		 Тип("СправочникСсылка.РолиИсполнителей"));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьОтклонение(Команда)
	CRM_МетодыФормДокументовКлиент.ОтменитьОтклонение(Объект.Ссылка, Элементы.ГруппаКомандаОтменитьОтклонение);
	ОбновитьСостояниеОбращения();
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПоказатьСкрытьСвойства(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПоказатьСкрытьСвойства");
	CRM_ПоказатьСкрытьСвойстваНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура CRM_ПоказатьСкрытьСвойстваНаСервере(НовоеЗначениеВидимость = Неопределено)
	
	Если НовоеЗначениеВидимость = Неопределено Тогда	
		НовоеЗначениеВидимость = НЕ Элементы.ГруппаНастройкиПраваяКолонка.Видимость;
	КонецЕсли;
		
	Элементы.ГруппаНастройкиПраваяКолонка.Видимость = НовоеЗначениеВидимость;
	
	CRM_ПоказатьСкрытьСвойства = Элементы.ГруппаНастройкиПраваяКолонка.Видимость;
	
	Если CRM_ПоказатьСкрытьСвойства Тогда
		Элементы.CRM_ПоказатьСкрытьСвойства.Заголовок = НСтр("ru = 'Скрыть свойства'; en = 'Hide properties'");
		Элементы.CRM_ПоказатьСкрытьСвойства.Картинка = БиблиотекаКартинок.CRM_СвойстваСкрыть;
	Иначе
		Элементы.CRM_ПоказатьСкрытьСвойства.Заголовок = НСтр("ru = 'Показать свойства'; en = 'Show properties'");
		Элементы.CRM_ПоказатьСкрытьСвойства.Картинка = БиблиотекаКартинок.CRM_СвойстваПоказать;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиПраваяКолонка.Ширина = ?(НовоеЗначениеВидимость, 40, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Избранный(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаУстановитьПометкуЗвездочка");
	Объект.CRM_Избранный = НЕ Объект.CRM_Избранный;
	
	ОформлениеИзбранного();
	
	Модифицированность = Истина;
	
	CRM_ОбновитьАРМПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзбранного()
	
	Если Объект.CRM_Избранный Тогда
		Элементы.CRM_Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
		Элементы.CRM_Избранный.Заголовок = НСтр("ru='Снять пометку'");
	Иначе
		Элементы.CRM_Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
		Элементы.CRM_Избранный.Заголовок = НСтр("ru='Установить пометку'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПереместитьВПапку(Команда)

	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПереместитьВПапку");
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюПереместитьВПапку", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, СписокПереместитьВПапку(), Элементы.СписокПисемПереместитьВПапку);

КонецПроцедуры

&НаКлиенте
Функция СписокПереместитьВПапку()
	
	Возврат СписокПереместитьВПапкуНаСервере();
	
КонецФункции

&НаСервере
Функция СписокПереместитьВПапкуНаСервере()
	
	ДеревоУчетныхЗаписей = Новый ДеревоЗначений;
	
	МассивУчетныхЗаписей = Новый Массив;
	МассивУчетныхЗаписей.Добавить(Объект.УчетнаяЗапись);	
	
	ЗаполнитьДеревоУчетныхЗаписей(МассивУчетныхЗаписей, ДеревоУчетныхЗаписей);
	
	ИсключаемыеВидыПапок = Новый Массив;
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики"));
	Если НЕ Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
		ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные"));
	КонецЕсли;
	
	МассивПапокСИерархией = Новый Массив;
	ДеревоПапок = ДеревоУчетныхЗаписей.Строки;
	Для Каждого СтрокаДереваПапок Из ДеревоПапок Цикл
		
		Если СтрокаДереваПапок.УчетнаяЗапись <> Объект.УчетнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		МассивПапокУчетнойЗаписиСИерархией(СтрокаДереваПапок.Строки, МассивПапокСИерархией, ИсключаемыеВидыПапок);
		
	КонецЦикла;
	
	Список = Новый СписокЗначений;	
	
	Для Каждого ЭлементСтуктура Из МассивПапокСИерархией Цикл
		
		Если ЭлементСтуктура.ВнизСписка Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(ЭлементСтуктура.Ссылка, ЭлементСтуктура.Имя);
		
	КонецЦикла;
	
	Для Каждого ЭлементСтуктура Из МассивПапокСИерархией Цикл
		
		Если НЕ ЭлементСтуктура.ВнизСписка Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(ЭлементСтуктура.Ссылка, ЭлементСтуктура.Имя);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораИзМенюПереместитьВПапку(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно переместить незаписанное письмо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПапку = ВыбранныйЭлемент.Значение;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		Возврат;
	КонецЕсли;
	
	// действие	
	СтруктураПапки = СтруктураПапки(СсылкаНаПапку);
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(СтруктураПапки.Папка, "Удаленные") Тогда
		УстановитьПометкуУдаления(Объект.Ссылка);
	КонецЕсли;
	
	Если CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(СтруктураПапки.Папка, "Обработанные") Тогда
		ВыполняетсяПереносВПапку = Истина;
		CRM_ПеренестиВОбработанные();
		ВыполняетсяПереносВПапку = Ложь;
	Иначе	
	
		УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, СсылкаНаПапку);
		
		// В подписке CRM_РегистрыСведенийПриЗаписи идет изменение объекта, поэтому необходимо повторное чтение из базы данных.
		Прочитать();
		
		ОбновитьРеквизитыПисьма("Папка");
		Заголовок = ПолучитьЗаголовокФормыДокумента();
		
		Оповестить("CRM_ПисьмоПеремещеноВПапку");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПисьма(СтрокаРеквизитов)
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов, СтрокаРеквизитов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПапки(СсылкаНаПапку)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Папка", СсылкаНаПапку);
	СтруктураРезультат.Вставить("УчетнаяЗапись", СсылкаНаПапку.Владелец);
	Если СсылкаНаПапку.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ПапкиУчетныхЗаписей.ВидПапки, ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка)) КАК ВидПапки
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
		|		ПО (УчетныеЗаписи.Ссылка = ПапкиЭлектронныхПисем.Владелец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|		ПО (ПапкиУчетныхЗаписей.Папка = ПапкиЭлектронныхПисем.Ссылка)
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи) И ПапкиЭлектронныхПисем.Ссылка = &Папка
		|");
	
		Запрос.УстановитьПараметр("УчетныеЗаписи", СсылкаНаПапку.Владелец);
		Запрос.УстановитьПараметр("Папка", СсылкаНаПапку);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураРезультат.Вставить("ВидПапки", Выборка.ВидПапки);
		КонецЦикла;
		
	Иначе
		СтруктураРезультат.Вставить("ВидПапки", СсылкаНаПапку.CRM_Вид);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура CRM_Печать(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПечать");
	
	СтруктураОбхекта = Новый Структура;
	СтруктураОбхекта.Вставить("ОбъектСсылка",               Объект.Ссылка);
	СтруктураОбхекта.Вставить("ТекстПисьма",                ТекстПисьма);
	СтруктураОбхекта.Вставить("ПредупреждениеБезопасности", Элементы.ПредупреждениеБезопасности.Видимость);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(СтруктураОбхекта);
	
	CRM_УправлениеПечатьюКлиент.CRM_Почта_ПечатьЭлектронноеПисьмоHTML(ОбъектыПечати);
	
КонецПроцедуры

// +CRM
#Область Настройки

&НаКлиенте
Процедура ОткрытьПерсональныеНастройки(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаОткрытьНастройки");
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения("ОткрытьПерсональныеНастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АРМПочта");
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "ЭлектроннаяПочта");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияНастроек,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиЗавершение(Результат, ДопПараметры) Экспорт
			
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	СформироватьСсылкиВложений();
	НеОтображатьКартинкиПометка = ХранилищеОбщихНастроекЗагрузить("НеОтображатьКартинки", "НеОтображатьКартинки", Ложь);
	ПрочитатьТекстПисьмаHTML();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения();
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферВсеВложениеВыполнить(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл
		МассивСсылок.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСсылкиВложений()
	
	ГруппаСсылокВложений = Элементы.ГруппаСсылкиВложений;
	
	МаксимальнаяДлинаИмениВложения = 35;
	МаксимальнаяДлинаСтроки = 105;
	
	МассивЭкранов = ПолучитьИнформациюЭкрановКлиента();
	// Защита от Толстого клиента - в нем ПолучитьИнформациюЭкрановКлиента() возвращает Неопределено и падает ошибка
	Если МассивЭкранов <> Неопределено Тогда
		ШиринаЭкрана = ПолучитьИнформациюЭкрановКлиента()[0].Ширина;
	Иначе
		ШиринаЭкрана = 1440;
	КонецЕсли;
	МаксимальнаяДлинаСтроки = МаксимальнаяДлинаСтроки * (ШиринаЭкрана / 1920);
	
	// Удаление предыдущих элементов
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из ГруппаСсылокВложений.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если СтрЧислоВхождений(КомандаФормы.Имя, "Команда_Сохранить_СсылкаВложения_") > 0
			Или СтрЧислоВхождений(КомандаФормы.Имя, "Команда_КопироватьВБуфер_СсылкаВложения_") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КомандаФормы Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(КомандаФормы);
	КонецЦикла;
		
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		ПредставлениеСсылки = "";
		Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
		ИначеЕсли ВсеВложенияПометка Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчет длины текущей строки
		Если СтрДлина(ПредставлениеСсылки) > МаксимальнаяДлинаИмениВложения Тогда
			ПредставлениеСсылки = Лев(ПредставлениеСсылки, МаксимальнаяДлинаИмениВложения) + "...";
		КонецЕсли;
		ШиринаЭлемента = СтрДлина(ПредставлениеСсылки);
		Если ШиринаЭлемента > 8 Тогда 
			ШиринаЭлемента = ШиринаЭлемента * 0.8;
		КонецЕсли;
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ШиринаЭлемента;
		
		// Создание следующей горизонтальной группы
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеСсылки) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаСтрокаВложений = Элементы.Добавить("СтрокаВложений" + НомерСтрокиЭлементов,
				 Тип("ГруппаФормы"), ГруппаСсылокВложений);
			ГруппаСтрокаВложений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрокаВложений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСтрокаВложений.ОтображатьЗаголовок = Ложь;
			ГруппаСтрокаВложений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрокаВложений.РастягиватьПоВертикали = Ложь;
			ГруппаСтрокаВложений.Высота = 1;
			ГруппаСтрокаВложений.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			ГруппаСтрокаВложений.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		ИдентификаторСсылкиВложения = ЭлементТаблицы.ПолучитьИдентификатор();
		
		// Вывод иконки типа вложения
		ДекорацияИконкаВложения = Элементы.Добавить("ИконкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияИконкаВложения.Вид = ВидДекорацииФормы.Картинка;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.ИмяФайла);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		//ДекорацияИконкаВложения.Картинка = БиблиотекаКартинок["CRM_ИконкаТипаФайла_"+ИндексКартинки];
		ДекорацияИконкаВложения.Картинка = СписокИконокФайлов[ИндексКартинки / 2].Значение;
		
		// Создание элемента-вложения
		ДекорацияСсылкаВложения = Элементы.Добавить("СсылкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияСсылкаВложения.Заголовок = ПредставлениеСсылки;
		ДекорацияСсылкаВложения.Гиперссылка = Не ВложенияОчищеныПоНастройке;
		ДекорацияСсылкаВложения.ЦветТекста = ?(ВложенияОчищеныПоНастройке,
			 ЦветаСтиля.CRM_ЦветДополнительногоТекста,
			 ЦветаСтиля.CRM_ОсновнойГолубой);
		
		ДекорацияСсылкаВложения.УстановитьДействие("Нажатие", "ДекорацияСсылкаВложенияНажатие");
		
		// Формирование контекстного меню декорации:
		ИмяЭлементаКнопки = "Сохранить_" + ДекорацияСсылкаВложения.Имя;
		КнопкаСохранитьВложение = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаСохранитьВложение = Неопределено Тогда
			
			КнопкаСохранитьВложение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
				 ДекорацияСсылкаВложения.КонтекстноеМеню);
			
			ИмяКоманды = "Команда_" + ИмяЭлементаКнопки;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='Сохранить';en='Save'");
			Команда.Подсказка = НСтр("ru='Сохранить';en='Save'");
			Команда.Картинка = БиблиотекаКартинок.CRM_СохранитьКак;
			Команда.Действие = "Подключаемый_СохранитьВложениеКонтекстноеМеню";
			Команда.ИзменяетСохраняемыеДанные = Ложь;
			
			КнопкаСохранитьВложение.ИмяКоманды = Команда.Имя;
			
		КонецЕсли;
		КнопкаСохранитьВложение.Видимость = Не ВложенияОчищеныПоНастройке;
		
		ИмяЭлементаКнопки = "КопироватьВБуфер_" + ДекорацияСсылкаВложения.Имя;
		КнопкаКопироватьВБуфер = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаКопироватьВБуфер = Неопределено Тогда
			
			КнопкаКопироватьВБуфер = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
				 ДекорацияСсылкаВложения.КонтекстноеМеню);
			
			ИмяКоманды = "Команда_" + ИмяЭлементаКнопки;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='Копировать в буфер обмена';en='Copy to clipboard'");
			Команда.Подсказка = НСтр("ru='Копировать в буфер обмена';en='Copy to clipboard'");
			Команда.Картинка = БиблиотекаКартинок.СкопироватьВБуферОбмена;
			Команда.Действие = "Подключаемый_КопироватьВБуферВложениеКонтекстноеМеню";
			Команда.ИзменяетСохраняемыеДанные = Ложь;
			
			КнопкаКопироватьВБуфер.ИмяКоманды = Команда.Имя;
			
		КонецЕсли;
		КнопкаКопироватьВБуфер.Видимость = Не ВложенияОчищеныПоНастройке;
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если ГруппаСсылокВложений.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Элементы.СохранитьВсеВложения.Видимость = Ложь;
		Элементы.КопироватьВсеВложенияВБуферОбмена.Видимость = Ложь;
		Элементы.ГруппаРаботаСВложениями.Видимость = Ложь;
	Иначе
		Элементы.СохранитьВсеВложения.Видимость = Истина;
		Элементы.КопироватьВсеВложенияВБуферОбмена.Видимость = Истина;
		Элементы.ГруппаРаботаСВложениями.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаВложенияНажатие(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнпкиВложенийСлева");
	ИдентификаторСсылкиВложения = СтрЗаменить(Элемент.Имя, "СсылкаВложения_", "");
	ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = Объект.ДатаПолучения;
		ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;

		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыВложения, ЭтотОбъект);
		
	Иначе
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_Сохранить_СсылкаВложения_", "");
	СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КопироватьВБуферВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_КопироватьВБуфер_СсылкаВложения_", "");
	КопироватьВБуферВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ТекущиеДанные.Ссылка);
	CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложения(Команда)
	
	ВыполнитьЗагрузкуВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДиск(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаСохранитьПисьмоНаДиск");
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_СохранитьНаДискПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru = 'Вложения письма были очищены! Перед сохранением письма,
			| вложения будут загруженны с сервера.
                                                |Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВзаимодействияКлиент.СохранитьПисьмоНаДиск(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДискПродолжение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("CRM_СохранитьНаДискЗавершение", ЭтотОбъект);
		CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(Объект.Ссылка, ЭтотОбъект, ОповещениеЗавершения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера! Возможно письмо удалено на сервере.
                                                         |Сохранить письмо на диск не удалось!'"));
	Иначе
		ВзаимодействияКлиент.СохранитьПисьмоНаДиск(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакОбращение(Команда)
	
	ОтметитьКакОбращениеНаСервере();
	Элементы.ОтметитьКакОбращение.Видимость = Ложь;
	Элементы.СостояниеЛида.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВМенеджерПочты(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Папка", Папка);
	
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма");
	Оповестить("CRM_ПереходВМенеджерПочтыИзПисьма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИсторииПереписки(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДокументСсылка", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаИсторииПереписки", ПараметрыОткрытия);
	
КонецПроцедуры
	
// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтветИПересылка

&НаКлиенте
Процедура СоздатьПисьмоНаОсновании(ВидОснования)
	
	Записать();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидОснования", ВидОснования);
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииПослеВопроса",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если ВложенияОчищеныПоНастройке Тогда
		ТекстВопроса = НСтр("ru = 'Загрузить удаленные картинки и вложения?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуВложений(ОповещениеЗавершения);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВидОснования = ДополнительныеПараметры.ВидОснования;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНовогоПисьмаНаОсновании", ЭтотОбъект);
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, ВидОснования);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия, , , , ,
		ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНовогоПисьмаНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = Истина Тогда
		НастройкиХранилище = CRM_ВзаимодействияВызовСервера.ПолучитьНастройкуРаботаСПочтой();
		
		ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета = ?(
			НастройкиХранилище.Свойство("ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета"),
			НастройкиХранилище.ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета, Ложь);
		
		Если ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПослеЗакрытияФормыНовогоПисьмаНаОсновании()

#КонецОбласти

#Область ЗагрузкаВложений

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложений(ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуВложенийЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(Объект.Ссылка, ЭтотОбъект, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера! Возможно письмо удалено на сервере.'"));
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
	Оповестить("ЗагруженыВложения");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ТекущийПользовательОтветственнный()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
	Результат = Ложь;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИсполнительЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Исполнитель");
		Если ТипЗнч(ИсполнительЗадачи) = Тип("СправочникСсылка.Пользователи") Тогда
			Результат = (ТекущиеПользователи.Найти(ИсполнительЗадачи) <> Неопределено);
		ИначеЕсли ТипЗнч(ИсполнительЗадачи) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ИсполнительЗадачи);
			Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
				 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналДокументов.CRM_Интерес.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналДокументов.ОсновнойИнтерес УБЫВ");
	
	Запрос.Параметры.Вставить("Объект", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ТекущиеПользователи.Найти(Выборка.Ответственный) <> Неопределено Тогда
				Результат = Истина;
			Иначе
				Руководители = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Выборка.Ответственный);
				Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
					 Руководители).Количество() > 0);
			КонецЕсли;
        ИначеЕсли ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Выборка.Ответственный);
			Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
				 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.CRM_РольОтветственного) Тогда
		ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Объект.CRM_РольОтветственного);
		Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
			 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
	Иначе
		Результат = (ТекущиеПользователи.Найти(Объект.Ответственный) <> Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перечитывает данные по ссылке в форму.
//
&НаСервере
Функция ОбновитьДанныеДокументаПоСсылке()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			Если Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных Тогда
				ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "",
	 ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено,
	 ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,
		 ЗначениеПоУмолчанию, ОписаниеНастроек,
		 ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	 ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено,
	 НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,
		 ОписаниеНастроек, ИмяПользователя,
		 НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
Процедура ОбработатьНеобходимостьУведомленияОПрочтении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомленияОПрочтении.Письмо КАК Письмо
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|ГДЕ
	|	УведомленияОПрочтении.Письмо = &Письмо
	|	И (НЕ УведомленияОПрочтении.ТребуетсяОтправка)";
	
	Запрос.УстановитьПараметр("Письмо", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоеДействие = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляВходящегоЭлектронногоПисьма();
	
	Если НеобходимоеДействие = Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ВсегдаОтправлятьУведомление Тогда
		
		ТребуетсяУстановкаФлагаОтправкиУведомления = Истина;
		
	ИначеЕсли НеобходимоеДействие = 
		Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.НикогдаНеОтправлятьУведомление Тогда
		
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Ложь);
		
	ИначеЕсли НеобходимоеДействие = 
		Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление Тогда
		
		ТребуетсяЗапросУведомленияОПрочтении = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет перекодировку текстов  электронного сообщения.
&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, Объект.Кодировка);
	ЗаписьТекста.Записать(?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
		 Объект.ТекстHTML,
		 Объект.Текст));
	ЗаписьТекста.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, ВыбраннаяКодировка);
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда	
		Объект.ТекстHTML = ЧтениеТекста.Прочитать();
	Иначе
		Объект.Текст = ЧтениеТекста.Прочитать();
		ТекстПисьма = Объект.Текст;
	КонецЕсли;
	ЧтениеТекста.Закрыть();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, Объект.Кодировка);
	ЗаписьТекста.ЗаписатьСтроку(ОтправительПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиКопийПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиОтветаПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиПредставление);
	ЗаписьТекста.ЗаписатьСтроку(Объект.Тема);
	ЗаписьТекста.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, ВыбраннаяКодировка);
	ОтправительПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиКопийПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиОтветаПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиПредставление = ЧтениеТекста.ПрочитатьСтроку();
	Объект.Тема = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.ГруппаПервичныйИнтерес.Видимость = Форма.ОтображатьКаналИсточник;
	
	Форма.Элементы.ДекорацияКопия.Видимость					= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
	Форма.Элементы.ПолучателиКопийПредставление.Видимость	= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
	Форма.Элементы.СкрытьПоказатьПолучателейКопии.Видимость	= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
	Форма.Элементы.ТабПолучатели.Видимость					= Форма.Элементы.СкрытьПоказатьПолучателей.Пометка;
	Форма.Элементы.ТабПолучателиКопии.Видимость				= Форма.Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельца(КонтактноеЛицо)
	
	Возврат КонтактноеЛицо.Владелец;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПартнера(ПотенциальныйКлиент)
	
	Возврат ПотенциальныйКлиент.Партнер;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновноеКонтактноеЛицо(Клиент)
	
	Возврат Клиент.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьСкорректироватьПолучателейПисьма(Знач ВыведеныПолучатели, Знач ВыведеныПолучателиКопии)
	
	Если ВыведеныПолучатели И ЭтотОбъект["Получатели"].Количество() > 0 Тогда
		Объект.ПолучателиПисьма.Очистить();
		Для Каждого СтрокаПолучателя Из ЭтотОбъект["Получатели"] Цикл
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	КонецЕсли;
	
	Если ВыведеныПолучателиКопии И ЭтотОбъект["ПолучателиКопии"].Количество() > 0 Тогда
		Объект.ПолучателиКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ЭтотОбъект["ПолучателиКопии"] Цикл
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСкорректироватьПолучателейПисьма()

&НаСервере
Процедура УстановитьПоложениеТумблераСтатусПисьма()
	
	Если Рассмотрено Тогда
		СтатусПисьма = "Обработано";
	Иначе		
		СтатусПисьма = "ВРаботе";
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_МетодыФормДокументовСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаКлиенте
Процедура СохранитьВложения()
	ВыделенныеВложения = Новый Массив;
	КоличествоВложений = Вложения.Количество();
	ТолькоВыделенные = Ложь;
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	
	Если Не ВсеВложенияПометка Тогда
		ТолькоВыделенные = Истина;
		Для Каждого Вложение Из Вложения Цикл 
			Если Вложение.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				Индекс = Вложения.Индекс(Вложение);
				ВыделенныеВложения.Добавить(Индекс);
			КонецЕсли;;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда
				Если ТекущийНомерВложения = ДополнительныеПараметры.КоличествоВложений - 1 Тогда
					
					// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
					СписокИменФайлов = Новый СписокЗначений;
					Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
						ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
						Если ЭлементСписка = Неопределено Тогда
							СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
						Иначе
							Файл = Новый Файл(ПолучаемыйФайл.Имя);
							ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
							ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
						КонецЕсли;
					КонецЦикла;
					// Выполняем сохранение файлов.
					Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ДополнительныеПараметры.ВыборКаталога.Каталог, Ложь);
				Иначе
					ДополнительныеПараметры.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
					СохранитьВложенияПослеВыбораКаталога(ДополнительныеПараметры.ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Сохраняется файл ""%1"" (%2 Мб)"
"Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку), 1, НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ШаблонТекстаВопроса	= НСтр("ru='Файл %1 уже существует.%2Выберите действие для всех существующих файлов:'");
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса,
		 ПараметрыВложения.ПолноеИмяФайла,
		 Символы.ПС);
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

// +CRM

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// -CRM

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(пПартнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , пПартнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность =
					Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		пПартнер = Неопределено;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			пПартнер = Партнер;
		Иначе
			пПартнер = Объект.Партнер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пПартнер) Тогда
			
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Если ПервичныйИнтерес.Количество() > 0 Тогда
				Интерес = ПервичныйИнтерес.Получить(0);
			Иначе 
				Интерес = Неопределено;
			КонецЕсли;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо,
						 Надпись,
						 ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(?(ЗначениеЗаполнено(Объект.ДатаПолучения),
				 Объект.ДатаПолучения, Объект.Дата), Объект.Ссылка,
				 пПартнер);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Иначе
		ПредыдущийИсточник	= Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Партнер) Тогда
		НаличиеУчастников = Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		НаличиеУчастников = (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
	Иначе	
		НаличиеУчастников = Ложь;
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
			 И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Ложь;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция EMailКонтактаСуществует(Контакт, EMail)
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСуществует = Ложь;
	
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			Продолжить;
		ИначеЕсли СтрокаКИ.Представление = EMail Тогда	
			АдресСуществует = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АдресСуществует;
	
КонецФункции

&НаСервере
// Функция добавляет адрес электронной почты выбранному контакту.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//	EMail	- Строка			- Адрес электронной почты.
//
// Возвращаемое значение:
//	Булево	- Результат добавления.
//
Функция ДобавитьEMailКонтакту(Контакт, EMail)
	
	АдресСуществует = EMailКонтактаСуществует(Контакт, EMail);
	
	Если АдресСуществует = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли АдресСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	НоваяСтрока.Представление	= EMail;
	НоваяСтрока.АдресЭП			= EMail;
	Поз = СтрНайти(EMail, "@");
	Если Поз > 0 Тогда
		НоваяСтрока.ДоменноеИмяСервера = Сред(EMail, Поз + 1);
	КонецЕсли;
	
	НоваяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(EMail,
		 НоваяСтрока.Вид, "");
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяСтрока.Значение,
		 НоваяСтрока.Представление,
		 НоваяСтрока.Вид);
	
	АдресЗаписан = Истина;
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;	
	Возврат АдресЗаписан;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораКонтактаОтправителя()
	
	Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) И НЕ ТипЗнч(Объект.ОтправительКонтакт) = Тип("Тип") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораКонтактаОтправителяЗавершение", ЭтотОбъект);
		ЗадатьВопросОСохраненииКИ(Ложь, ОписаниеОповещения);
		Возврат;
	Иначе
		ОтправительВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.ОтправительВладелец.Видимость = Ложь;
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
	КонецЕсли;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.ОтправительКонтакт) 
	                                   
	                                    	
	                                    	 	 ИЛИ (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    	 И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.ОтправительКонтакт)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтактаОтправителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ОтправительВладелец = ПолучитьВладельца(Объект.ОтправительКонтакт);
		ОтправительПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление,
			 Объект.ОтправительАдрес,
			 Объект.ОтправительКонтакт);
		Элементы.ОтправительВладелец.Видимость = Истина;
	Иначе
		ОтправительВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.ОтправительВладелец.Видимость = Ложь;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		 ИЛИ ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")) Тогда
		Партнер = ?(ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры"),
			 Объект.ОтправительКонтакт,
			 ПолучитьВладельца(Объект.ОтправительКонтакт));
		ОтображатьКаналИсточник = Истина;
	Иначе
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
	КонецЕсли;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Элементы.СоздатьКонтакт.Видимость = Не ЗначениеЗаполнено(Объект.ОтправительКонтакт)
	                                    ИЛИ (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
	                                    И НЕ ЗначениеЗаполнено(ПолучитьПартнера(Объект.ОтправительКонтакт)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИ(ЗаписыватьОбъект, ОповещениеПриЗавершении = Неопределено)
			
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаписыватьОбъект", ЗаписыватьОбъект);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	АдресСуществует = EMailКонтактаСуществует(Объект.ОтправительКонтакт, Объект.ОтправительАдрес);
	Если АдресСуществует = Неопределено ИЛИ АдресСуществует = Истина Тогда
		ЗадатьВопросОСохраненииКИЗавершение(Неопределено, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ШаблонВопроса = НСтр("ru = 'Сохранить в карточке контакта email: %1?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, Объект.ОтправительАдрес);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросОСохраненииКИЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ДобавитьEMailКонтакту(Объект.ОтправительКонтакт, Объект.ОтправительАдрес) Тогда
			Сообщение =
				НСтр("ru='Для автоматического связывания писем с данным контактом укажите текущий email в его карточке'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Истина);
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗаписыватьОбъект Тогда
		Записать();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ДанныеПотенциальногоКлиента(ПотенциальныйКлиент)
	
	Результат = Новый Структура("Клиент, Контакт");
	
	Если НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Клиент = ПотенциальныйКлиент.Партнер;
	Результат.Контакт = ПотенциальныйКлиент.КонтактноеЛицо;
	
	Возврат Результат;
	
КонецФункции

// +ПанельБП

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоВыбораРеквизитаПроект");
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоЗаполненияРеквизитаКомментарий");
КонецПроцедуры

// -ПанельБП

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоВыбораРеквизитаТег");
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура ОбновитьОблакоТегов()
	
	ПараметрыТегов	= ПараметрыТегов();
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект, ПараметрыТегов);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыТегов()
	
	Если ШиринаТегов = 0 Тогда
		ШиринаТегов	= Элементы.ГруппаНастройкиПраваяКолонка.Ширина;
	КонецЕсли;	
	ПараметрыТегов = Новый Структура;
	ПараметрыТегов.Вставить("МаксДлинаПервойСтроки", ШиринаТегов - Элементы.Тег.Ширина);
	ПараметрыТегов.Вставить("ДобавитьКСтроке", Элементы.Тег.Ширина);
	Возврат ПараметрыТегов;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка) 
		И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
	
КонецФункции

// +CRM
&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, ,
		 ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка),
		 Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	CRM_ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если CRM_ОбработатьНаСервере(Истина) Тогда
			Оповестить("CRM_УстановленФлагОбработано");
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция CRM_ОбработатьНаСервере(Записывать = Ложь)
	
	Рассмотрено = Истина;
	Объект.CRM_СкрытьВАРМ = Истина;
	УстановитьПоложениеТумблераСтатусПисьма();
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		Элементы.Ответственный.Видимость = Истина;
		Элементы.CRM_РольОтветственного.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Записывать Или Записать() Тогда
		CRM_ПеренестиПисьмоВОбработанные();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура CRM_ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаСервере
Функция CRM_НеобходимоЗадатьВопросПриПереносеВОбработанные()

	Если CRM_ПисьмоВПапкеОбработанные() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = Объект.УчетнаяЗапись;
	Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Функция CRM_ПисьмоВПапкеОбработанные()

	Результат = (Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные);
		
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция CRM_ОтветПереноситьВОбработанные()
	
	Ответ = ?( CRM_ПисьмоВПапкеОбработанные(), КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да);
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Процедура CRM_ПеренестиПисьмоВОбработанные()
	
	// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
	// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента.
	Если ВыполняетсяПереносВПапку ИЛИ (Объект.УчетнаяЗапись.CRM_ПереноситьВОбработанные
		 И CRM_ПереноситьПисьмаВОбработанные) Тогда
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.УчетнаяЗапись, "Обработанные");
		УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка);
		Об = Объект.Ссылка.ПолучитьОбъект();
		Об.CRM_СкрытьВАРМ = Истина;
		Об.Записать();
		
		// В подписке CRM_РегистрыСведенийПриЗаписи идет изменение объекта, поэтому необходимо повторное чтение из базы данных.
		Прочитать();
		
		ПрочитанныеПисьма = Новый Массив;
		ПрочитанныеПисьма.Добавить(Объект.Ссылка);
		CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.Удобство.КоличествоНажатийКнопкаПринятьОбращение");
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПисьмоВходящее", Объект.Ссылка);
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		МассивСсылок.Добавить(Объект.ОтправительКонтакт);
	КонецЕсли;
	Для Каждого СтрокаДанных Из ЭтотОбъект["CRM_ТаблицаИнтересов"] Цикл
		МассивСсылок.Добавить(СтрокаДанных.Ссылка);
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("АдресЭП", Объект.ОтправительАдрес);
	ПараметрыФормы.Вставить("ТемаПисьма", Объект.Тема);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, Объект.ОтправительАдрес);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуОПрочтении()
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Объект.Ссылка);
	CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(МассивСсылок, Истина);
КонецПроцедуры

&НаСервере
Функция МассивЭлементовСостоянияОбращения()
	
	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьЗаявки")
		 И (Пользователи.ЭтоПолноправныйПользователь()
		 ИЛИ РольДоступна("CRM_ДобавлениеИзменениеЗаявок"));
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить(Элементы.ГруппаСостояниеЛида);
	МассивЭлементов.Добавить(Элементы.ПричинаОтклонения);
	МассивЭлементов.Добавить(Элементы.КомментарийСостоянияЛида);
	МассивЭлементов.Добавить(Элементы.ЛидСконвертированВОбъект);
	МассивЭлементов.Добавить(Элементы.ФормаCRM_ОтклонитьОбращение);
	Если ИспользоватьЗаявки Тогда
		МассивЭлементов.Добавить(Элементы.ФормаДокументCRM_ЗаявкаСоздатьНаОсновании);
	КонецЕсли;
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеОбращения()
	
	// Установка значений по умолчанию:
	СостояниеЛида = Неопределено;
	ПричинаОтклоненияЛида = Неопределено;
	КомментарийСостоянияЛида = Неопределено;
	ЛидСконвертированВОбъект = Неопределено;
	
	CRM_МетодыФормДокументовСервер.ВосстановитьНастройкиЭлементовСостоянияОбращения(АдресНастройкиЭлементовСостоянияОбращения,
																					МассивЭлементовСостоянияОбращения());

	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьЗаявки")
		 И (Пользователи.ЭтоПолноправныйПользователь()
		 ИЛИ РольДоступна("CRM_ДобавлениеИзменениеЗаявок"));
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) 
		Или РегистрыСведений.CRM_СостоянияЛидов.СсылкаОтмеченаКакОбращениеВручную(Объект.Ссылка) Тогда
		СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
		Если СтруктураСостоянияЛида = Неопределено Тогда
			Элементы.СостояниеЛида.Гиперссылка = Ложь;
			Элементы.ФормаCRM_ОтклонитьОбращение.Видимость = Ложь;
			Элементы.ОтметитьКакОбращение.Видимость = Истина;
		Иначе
			СостояниеЛида = СтруктураСостоянияЛида.Состояние;
			Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				Элементы.СостояниеЛида.Гиперссылка = Истина;
				ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
				КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;
				Элементы.СостояниеЛида.Подсказка = "Причина: " + ПричинаОтклоненияЛида + Символы.ПС +
												   "Комментарий: " + КомментарийСостоянияЛида;
				CRM_МетодыФормДокументовСервер.ДобавитьКомандуОтменитьОтклонение(ЭтотОбъект,
					 Элементы.ГруппаКомандаОтменитьОтклонение);
			Иначе
				Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Повторный Тогда
					Элементы.ФормаCRM_ОтклонитьОбращение.Заголовок = НСтр("ru = 'Обработать'");
				КонецЕсли;
				ЛидСконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
				Элементы.ПричинаОтклонения.Видимость = Ложь;
				Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
				Элементы.СостояниеЛида.Гиперссылка = ЗначениеЗаполнено(ЛидСконвертированВОбъект);
			КонецЕсли;
			
			Элементы.ЛидСконвертированВОбъект.Видимость = ЗначениеЗаполнено(ЛидСконвертированВОбъект);			
			ОбновитьДанныеОбработкиОбращения(СтруктураСостоянияЛида.ДатаОбработки,
											СтруктураСостоянияЛида.ОтветственныйЗаОбработку,
											СтруктураСостоянияЛида.Состояние);
			
		КонецЕсли;
		Если ИспользоватьЗаявки Тогда
			Элементы.ФормаДокументCRM_ЗаявкаСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.СостояниеЛида.Гиперссылка = Ложь;
		Элементы.ФормаCRM_ОтклонитьОбращение.Видимость = Ложь;
		Элементы.ОтметитьКакОбращение.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбработкиОбращения(ДатаОбработки, ОтветственныйЗаОбработку, СостояниеПараметр)
	
	РеквизитыВидимы = НЕ (СостояниеПараметр = Справочники.CRM_СостоянияЛидов.Новый
						ИЛИ СостояниеПараметр = Справочники.CRM_СостоянияЛидов.Повторный);
	
	ШаблонЗаголовкаДата = НСтр("ru = 'Дата обработки: %1'; en = 'Processing Date: %1'");
	Элементы.ДатаОбработкиОбращения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаДата,
		 Формат(ДатаОбработки,
		 "ДФ='dd.MM.yyyy HH:mm'"));
	Элементы.ДатаОбработкиОбращения.Видимость = ЗначениеЗаполнено(ДатаОбработки) И РеквизитыВидимы;	
	
	ОтветственныйЗаОбработкуОбращения = ОтветственныйЗаОбработку;
	Элементы.ГруппаОтветственныйЗаОбработку.Видимость = ЗначениеЗаполнено(ОтветственныйЗаОбработку) И РеквизитыВидимы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПапкуЭлектронногоПисьма(Письмо, Папка)
	
	Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Письмо, Папка);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ОбновитьДатуПисьма()
	
	ДатаПриведенная = "";
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		И Объект["СтатусПисьма"] = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		ДатаПриведенная = Объект["ДатаОтправления"];
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И Объект["CRM_СмещениеДатыОтправленияЗаполнено"] Тогда
		CRM_СмещениеДатыТекущегоСеанса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
		ДатаПриведенная = Объект.Дата - Объект["CRM_СмещениеДатыОтправления"] + CRM_СмещениеДатыТекущегоСеанса;
	Иначе
		ДатаПриведенная = Объект.Дата;
	КонецЕсли;

	Элементы.CRM_ДекорацияДата.Заголовок = Формат(ДатаПриведенная, "ДЛФ=DD") + ", " + Формат(ДатаПриведенная, "ДФ=ЧЧ:мм");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоУчетныхЗаписей(УчетныеЗаписи, Дерево)
	
	// заполнение дерева папок
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец КАК Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид КАК Вид
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
		|	И ПапкиЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА ПапкиЭлектронныхПисем.Владелец.CRM_ОтображатьТолькоПодписанныеПапки
		|				ТОГДА ПапкиЭлектронныхПисем.CRM_Подписаться
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкиЭлектронныхПисем.Владелец.Наименование,
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Владелец,
		|	Ссылка ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);

	Результат = Запрос.Выполнить();
	
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("УчетнаяЗапись");
	Дерево.Колонки.Добавить("Папка");
	Дерево.Колонки.Добавить("ВидПапки");
	Дерево.Строки.Очистить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаУЗ = Дерево.Строки.Добавить();
		СтрокаУЗ.Наименование	= ВыборкаДетальныеЗаписи.Владелец.Наименование;
		СтрокаУЗ.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		
		ДобавитьСтрокуВДеревоПапок(СтрокаУЗ, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	// Удалим дубли строк (ошибка платформы).
	УбратьОшибкиИтоговПоИерархии(Дерево.Строки);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВДеревоПапок(Дерево, Знач ВыборкаДетальныеЗаписи)
	
	ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Ссылка");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Наименование	= ВыборкаДетальныеЗаписи.Ссылка.Наименование;
		НоваяСтрока.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		НоваяСтрока.Папка = ВыборкаДетальныеЗаписи.Ссылка;
		НоваяСтрока.ВидПапки = ВыборкаДетальныеЗаписи.Вид;		
		
		ДобавитьСтрокуВДеревоПапок(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УбратьОшибкиИтоговПоИерархии(Строки, Поле = "Папка", Родитель = Неопределено)
    // Убираем все элементы, равные текущему.
    Всего = Строки.Количество();
    Для Инд = 1 По Всего Цикл
        Стр = Строки[Всего - Инд];
        Зн = Стр[Поле];
        Если Родитель <> Неопределено И Зн = Родитель Тогда
            Строки.Удалить(Стр);
        Иначе
            УбратьОшибкиИтоговПоИерархии(Стр.Строки, Поле, Зн);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура МассивПапокУчетнойЗаписиСИерархией(СтрокиДерева, МассивПапок,
	 ИсключаемыеВидыПапок = Неопределено, Иерархия = "",
	 ПолучатьГУИД = Ложь)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ТипЗнч(ИсключаемыеВидыПапок) = Тип("Массив") Тогда
			
			ПапкаИсключена = Ложь;
			
			Для Каждого ВидПапкиКИсключение Из ИсключаемыеВидыПапок Цикл
				Если СтрокаДерева.ВидПапки = ВидПапкиКИсключение Тогда
					ПапкаИсключена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПапкаИсключена Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураЭлемента = Новый Структура;
		СтруктураЭлемента.Вставить("Имя", Иерархия + СтрокаДерева.Папка);
		
		Если ПолучатьГУИД Тогда
			СтруктураЭлемента.Вставить("Ссылка", СтрокаДерева.Папка.УникальныйИдентификатор());
		Иначе
			СтруктураЭлемента.Вставить("Ссылка", СтрокаДерева.Папка);
		КонецЕсли;

		Если СтрокаДерева.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта")
			ИЛИ СтрокаДерева.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
			СтруктураЭлемента.Вставить("ВнизСписка", Истина);
		Иначе
			СтруктураЭлемента.Вставить("ВнизСписка", Ложь);
		КонецЕсли;
		
		МассивПапок.Добавить(СтруктураЭлемента);
		
		МассивПапокУчетнойЗаписиСИерархией(СтрокаДерева.Строки, МассивПапок, ИсключаемыеВидыПапок, Иерархия + "  ",
			 ПолучатьГУИД);
		
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокФормыДокумента()
	
	// Тема (Учетная запись, Название папки)
	
	ЧастиЗаголовка = Новый Массив;
	
	ВидПапки = Неопределено;
	
	ПредставлениеПапки = Строка(Папка);
	Если CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(Папка, ВидПапки) Тогда
		ПредставлениеПапки = Строка(ВидПапки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Новое письмо'"));
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru='<Без темы>'"));
	Иначе
		ЧастиЗаголовка.Добавить(Объект.Тема);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Если ЗначениеЗаполнено(Папка) Тогда
			ЧастиЗаголовка.Добавить("(" + Объект.УчетнаяЗапись + ",");
			ЧастиЗаголовка.Добавить(ПредставлениеПапки + ")");
		Иначе
			ЧастиЗаголовка.Добавить("(" + Объект.УчетнаяЗапись + ")");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Папка) Тогда
			ЧастиЗаголовка.Добавить("(" + ПредставлениеПапки + ")");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиЗаголовка, " ");
	
КонецФункции

&НаСервере
Процедура ОбработатьТекстHTML()
	
	// Заполняем массив с картинками расширений файлов
	СписокИконокФайлов.Очистить();
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2]);
	КонецЦикла;
	
	// Установим текст и вид текста.
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		ТекстПисьма = Объект.ТекстHTML;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	Иначе
		ТекстПисьма = Объект.Текст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	КонецЕсли;
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
		Или Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		
		ТекстПисьма = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(ТекстПисьма, Объект.Ссылка);
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
	Иначе
		Для Каждого СтрокаВложения Из Вложения Цикл
			СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	Если РезультатЗакрытия <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы,
		 ДополнительныеПараметры.Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
Процедура ЗаполнитьДополнительныеДанныеКонтакта()
	
	Если Объект.ОтправительКонтакт = Неопределено Тогда
		CRM_ОтправительКонтактСостояние = Перечисления.CRM_Состояние.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	CRM_ОтправительКонтактТип = Метаданные.НайтиПоТипу(ТипЗнч(Объект.ОтправительКонтакт)).ПолноеИмя();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект.ОтправительКонтакт, "CRM_Состояние") Тогда
		CRM_ОтправительКонтактСостояние = Объект.ОтправительКонтакт.CRM_Состояние;
	Иначе
		CRM_ОтправительКонтактСостояние = Перечисления.CRM_Состояние.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтправительКонтакт");
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_ОтправительКонтактТип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Справочник.КонтактныеЛицаПартнеров";
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("CRM_ОтправительКонтактСостояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.CRM_Состояние.Уволен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПолучатели()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	/////////////////////
	// РЕКВИЗИТЫ
	
	// Получатели
	РеквизитТаблицаПолучатели = Новый РеквизитФормы("Получатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитТаблицаПолучатели);
	
	// Получатели.Адрес
	ОписаниеТипаСтрока100 = ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ПолеАдрес = Новый РеквизитФормы("Адрес", ОписаниеТипаСтрока100, "Получатели");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАдрес);
	
	// Получатели.Представление
	ПолеПредставление = Новый РеквизитФормы("Представление", ОписаниеТипаСтрока100, "Получатели");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПредставление);
	
	// Получатели.Контакт
	ТипыПоляСсылка = Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы();
	
	ПолеКонтакт = Новый РеквизитФормы("Контакт", Новый ОписаниеТипов(ТипыПоляСсылка), "Получатели");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКонтакт);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	/////////////////////
	// ЭЛЕМЕНТЫ ФОРМЫ
	
	// Элементы.Получатели
	ЭлементПолучатели = Элементы.Добавить("Получатели", Тип("ТаблицаФормы"), Элементы.ТабПолучатели);
	ЭлементПолучатели.ПутьКДанным					= "Получатели";
	ЭлементПолучатели.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементПолучатели.ПоложениеКоманднойПанели		= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементПолучатели.ПоложениеСтрокиПоиска			= ПоложениеСтрокиПоиска.Нет;
	ЭлементПолучатели.ПоложениеСостоянияПросмотра	= ПоложениеСостоянияПросмотра.Нет;
	ЭлементПолучатели.ПоложениеУправленияПоиском	= ПоложениеУправленияПоиском.Нет;
	ЭлементПолучатели.МножественныйВыбор			= Ложь;
	ЭлементПолучатели.ЧередованиеЦветовСтрок		= Ложь;
	ЭлементПолучатели.РастягиватьПоВертикали		= Ложь;
	ЭлементПолучатели.Шапка							= Ложь;
	ЭлементПолучатели.Высота						= 2;
	ЭлементПолучатели.ЦветРамки						= Новый Цвет(221, 221, 221);
	ЭлементПолучатели.КонтекстноеМеню.Видимость		= Ложь;
	
	ЭлементПолучатели.УстановитьДействие("ПередНачаломДобавления",	"ПолучателиПередНачаломДобавления");
	ЭлементПолучатели.УстановитьДействие("ПередУдалением",			"ПолучателиПередУдалением");
	
	// Элементы.ТабПолучателиАдрес
	НовоеПоле = Элементы.Добавить("ТабПолучателиАдрес", Тип("ПолеФормы"), ЭлементПолучатели);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным	= "Получатели.Адрес";
	НовоеПоле.Ширина		= 15;
	
	// Элементы.ТабПолучателиКонтакт
	НовоеПоле = Элементы.Добавить("ТабПолучателиКонтакт", Тип("ПолеФормы"), ЭлементПолучатели);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным	= "Получатели.Контакт";
	
	НовоеПоле.УстановитьДействие("НачалоВыбора",	"ТабПолучателиКонтактНачалоВыбора");
	НовоеПоле.УстановитьДействие("ОбработкаВыбора",	"ТабПолучателиКонтактОбработкаВыбора");
	НовоеПоле.УстановитьДействие("АвтоПодбор",		"ТабПолучателиКонтактАвтоПодбор");
	
	/////////////////////
	// ЗАПОЛНЕНИЕ ДАННЫХ
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиПисьма Цикл
		НоваяСтрока = ЭтотОбъект["Получатели"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
КонецПроцедуры // ВывестиПолучатели()

&НаСервере
Процедура ВывестиПолучателиКопии()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	/////////////////////
	// РЕКВИЗИТЫ
	
	// ПолучателиКопии
	РеквизитТаблицаПолучателиКопии = Новый РеквизитФормы("ПолучателиКопии", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитТаблицаПолучателиКопии);
	
	// ПолучателиКопии.Адрес
	ОписаниеТипаСтрока100 = ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ПолеАдрес = Новый РеквизитФормы("Адрес", ОписаниеТипаСтрока100, "ПолучателиКопии");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАдрес);
	
	// ПолучателиКопии.Представление
	ПолеПредставление = Новый РеквизитФормы("Представление", ОписаниеТипаСтрока100, "ПолучателиКопии");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПредставление);
	
	// ПолучателиКопии.Контакт
	ТипыПоляСсылка = Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы();
	
	ПолеКонтакт = Новый РеквизитФормы("Контакт", Новый ОписаниеТипов(ТипыПоляСсылка), "ПолучателиКопии");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКонтакт);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	/////////////////////
	// ЭЛЕМЕНТЫ ФОРМЫ
	
	// Элементы.ЭлементПолучателиКопии
	ЭлементПолучателиКопии = Элементы.Добавить("ПолучателиКопии", Тип("ТаблицаФормы"), Элементы.ТабПолучателиКопии);
	ЭлементПолучателиКопии.ПутьКДанным					= "ПолучателиКопии";
	ЭлементПолучателиКопии.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементПолучателиКопии.ПоложениеКоманднойПанели		= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементПолучателиКопии.ПоложениеСтрокиПоиска		= ПоложениеСтрокиПоиска.Нет;
	ЭлементПолучателиКопии.ПоложениеСостоянияПросмотра	= ПоложениеСостоянияПросмотра.Нет;
	ЭлементПолучателиКопии.ПоложениеУправленияПоиском	= ПоложениеУправленияПоиском.Нет;
	ЭлементПолучателиКопии.МножественныйВыбор			= Ложь;
	ЭлементПолучателиКопии.ЧередованиеЦветовСтрок		= Ложь;
	ЭлементПолучателиКопии.РастягиватьПоВертикали		= Ложь;
	ЭлементПолучателиКопии.Шапка						= Ложь;
	ЭлементПолучателиКопии.Высота						= 2;
	ЭлементПолучателиКопии.ЦветРамки					= Новый Цвет(221, 221, 221);
	ЭлементПолучателиКопии.КонтекстноеМеню.Видимость	= Ложь;
	
	ЭлементПолучателиКопии.УстановитьДействие("ПередНачаломДобавления",	"ПолучателиПередНачаломДобавления");
	ЭлементПолучателиКопии.УстановитьДействие("ПередУдалением",			"ПолучателиПередУдалением");
	
	// Элементы.ПолучателиКопииАдрес
	НовоеПоле = Элементы.Добавить("ПолучателиКопииАдрес", Тип("ПолеФормы"), ЭлементПолучателиКопии);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным	= "ПолучателиКопии.Адрес";
	НовоеПоле.Ширина		= 15;
	
	// Элементы.ТабПолучателиКонтакт
	НовоеПоле = Элементы.Добавить("ПолучателиКопииКонтакт", Тип("ПолеФормы"), ЭлементПолучателиКопии);
	НовоеПоле.Вид			= ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным	= "ПолучателиКопии.Контакт";
	
	НовоеПоле.УстановитьДействие("НачалоВыбора",	"ПолучателиКопииКонтактНачалоВыбора");
	НовоеПоле.УстановитьДействие("ОбработкаВыбора",	"ПолучателиКопииКонтактОбработкаВыбора");
	НовоеПоле.УстановитьДействие("АвтоПодбор",		"ПолучателиКопииКонтактАвтоПодбор");
	
	/////////////////////
	// ЗАПОЛНЕНИЕ ДАННЫХ
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиКопий Цикл
		НоваяСтрока = ЭтотОбъект["ПолучателиКопии"].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
КонецПроцедуры // ВывестиПолучателиКопии()

&НаКлиенте
Процедура НастроитьОтображениеКонтекстногоМеню(ИмяЭлементаФормы)
	
	КомандыМеню = Элементы[ИмяЭлементаФормы].КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Элемент.Доступность = Ложь;
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры // НастроитьПолучателиКопии()

&НаКлиенте
Процедура НастроитьКомандыДобавленныхТаблиц()
	
	Если ВыведеныПолучатели Тогда
		НастроитьОтображениеКонтекстногоМеню("Получатели");
	КонецЕсли;
	
	Если ВыведеныПолучателиКопии Тогда
		НастроитьОтображениеКонтекстногоМеню("ПолучателиКопии");
	КонецЕсли;
	
КонецПроцедуры

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекстПисьмаHTML()
	
	ТекстПисьма = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(Объект.ТекстHTML, Объект.Ссылка);
	CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
	
	// Коррекция ошибочного HTML.
	ПозицияЗакрывающегоТега = СтрНайти(ТекстПисьма, "</html>", НаправлениеПоиска.СКонца);
	Если ПозицияЗакрывающегоТега > 0 Тогда
		ТекстПисьма = Лев(ТекстПисьма, ПозицияЗакрывающегоТега + СтрДлина("</html>"));
	КонецЕсли;
	
	Взаимодействия.ОтфильтроватьСодержимоеТекстаHTML(
		ТекстПисьма, Объект.Кодировка, Не ВключитьНебезопасноеСодержимое, ЕстьНебезопасноеСодержимое);
	
	УстановитьВидимостьПредупрежденияБезопасности();
	
	Если НеОтображатьКартинкиПометка Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстПисьма);
		НайденныеУзлы = ДокументHTML.ПолучитьЭлементыПоИмени("img");
		
		Для Каждого Узел Из НайденныеУзлы Цикл
			Узел.Источник = "";
		КонецЦикла;
		
		ТекстПисьма = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПредупрежденияБезопасности()
	
	ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах =
		Взаимодействия.ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах();
	Элементы.ПредупреждениеБезопасности.Видимость = Не ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах
		И ЕстьНебезопасноеСодержимое И Не ВключитьНебезопасноеСодержимое;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьНебезопасноеСодержимое" Тогда
		СтандартнаяОбработка = Ложь;
		Объект.CRM_ВключитьНебезопасноеСодержимое = Истина;
		ВключитьНебезопасноеСодержимое = Истина;
		ПрочитатьТекстПисьмаHTML();
		Записать();
		Оповестить("ВключеноНебезопасноеСодержимое", Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСодержимоеДляВсехПисемОтправителяОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
		 НавигационнаяСсылкаФорматированнойСтроки,
		 СтандартнаяОбработка);
	ДобавитьВДоверенныеАдреса(Объект.ОтправительАдрес);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВДоверенныеАдреса(ОтправительАдрес)

	НоваяЗапись = РегистрыСведений.CRM_ДоверенныеАдресаЭлектроннойПочты.СоздатьМенеджерЗаписи();
	НоваяЗапись.АдресЭлектроннойПочты = ОтправительАдрес;
	НоваяЗапись.Записать();

КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РольОтветственногоДоИзменения = Объект.CRM_РольОтветственного;
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

// -CRM

// Устанавливает пометку удаления входящего электронного письма в значение Истина
//
// Параметры:
//  Ссылка  - СправочникиСсылка.ЭлектронноеПисьмоВходящее - ссылка на входящее электронное письмо
//
&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаления(Ссылка)
	
	ПисьмоОбъект = Ссылка.ПолучитьОбъект();
	ПисьмоОбъект.ПометкаУдаления = Истина;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

// Создает и добавляет в контекстное меню либо удаляет команду копирования гиперссылки в буфер обмена
//
// Параметры:
//  ЭтоДобавлениеКоманды  - Булево - при значении Истина команда добавляется, при значении Ложь удаляется
//
&НаСервере
Процедура НастроитьКомандуКопированияВБуферОбменаВКМ(ЭтоДобавлениеКоманды)
	
	ИмяКоманды = "СкопироватьГиперссылку";
	
	Если ЭтоДобавлениеКоманды Тогда
		
		Если Команды.Найти(ИмяКоманды) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = "Подключаемый_" + ИмяКоманды;
		ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ТекстПисьма.КонтекстноеМеню);
		// BSLLS:Typo-off
		ПунктМеню.Заголовок = НСтр("ru = 'Скопировать гиперссылку'");
		// BSLLS:Typo-on
		ПунктМеню.ИмяКоманды = ИмяКоманды;
		
	Иначе
		
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Команда = Команды.Найти(ИмяКоманды);
		Команды.Удалить(Команда);
		ПунктМеню = Элементы.Найти(ИмяКоманды);
		Элементы.Удалить(ПунктМеню);
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует гиперссылку из электронного письма в буфер обмена
//
&НаКлиенте
Процедура Подключаемый_СкопироватьГиперссылку()
	
	CRM_БуферОбмена = 
		СтрШаблон("<!DOCTYPE html>
		|<html>
		|	<body onload = 'copy()'>
		|		<input id = 'input' type = 'text'>
		|		<script>
		|			function copy() {
		|				var copyText = document.getElementById('input');
		|				copyText.value = '%1';
		|				copyText.select();
		|				document.execCommand('copy');
		|			}
		|		</script>
		|	</body>
		|</html>", CRM_БуферОбмена);
	
	НастроитьКомандуКопированияВБуферОбменаВКМ(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьКакОбращениеНаСервере()
	
	Объект.CRM_СкрытьВАРМ = Ложь;
	Записать();
	РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект.Ссылка, 
		Справочники.CRM_СостоянияЛидов.Новый, , , , , , Истина);
	СостояниеЛида = Справочники.CRM_СостоянияЛидов.Новый;
	
КонецПроцедуры


#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели

#КонецОбласти
