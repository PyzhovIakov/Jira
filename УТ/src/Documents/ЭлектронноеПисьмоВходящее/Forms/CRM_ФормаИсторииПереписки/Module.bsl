
#Область ОписаниеПеременных

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументСсылка = Параметры.ДокументСсылка;
	ЗапрещеноОтображениеНебезопасногоСодержимого = Взаимодействия.ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах();
	
	ВсеВложенияПометка = ХранилищеОбщихНастроек.Загрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	НеОтображатьКартинкиПометка = ХранилищеОбщихНастроек.Загрузить("НеОтображатьКартинки", "НеОтображатьКартинки", Ложь);
	
	СформироватьHTMLОтображенияТекстаПисьма();
	
	ВывестиДеревоДокументовНаСервере();
	УстановитьУсловноеОформление();
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииВебКлиент", 0, Истина);
	#ИначеЕсли МобильныйКлиент Тогда
		РазвернутьСтандартныеВетки();
	#Иначе
		РазвернутьСтандартныеВетки();
		ТекущийЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Свернуть(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	СоздатьПисьмоНаОсновании("Ответить");
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	СоздатьПисьмоНаОсновании("Переслать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	СоздатьПисьмоНаОсновании("ОтветитьВсем");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсторию(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДокументСсылка", ТекущийДокумент);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаИсторииПереписки", ПараметрыОткрытия, , ТекущийДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		УстановитьДоступностьКоманд(Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьСодержаниеПисьмаОбработчик", 0.1, Истина);
	УстановитьДоступностьКоманд(Не ТекущиеДанные.ЭтоОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоОтбор Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ДокументСсылка, Элемент.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоДокументов

#Область СозданиеИстории

&НаСервере
Процедура СоздатьИсторию(Дерево, Ссылки)
	
	ДанныеДокументов = ДанныеДокументовСтруктурыПодчиненности(Ссылки);
	Если ДанныеДокументов = Неопределено Тогда
		Дерево.Строки.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДерева(Дерево, Дерево, ДанныеДокументов);
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьИсториюПереписки(Дерево);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДокументовСтруктурыПодчиненности(Ссылки)
	
	ДанныеСобытийТЗ = ДанныеДокументовЗапросом(Ссылки);
	Если ДанныеСобытийТЗ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	Для Каждого Данные Из ДанныеСобытийТЗ Цикл
		Результат.Вставить(Данные.Ссылка, Данные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеДокументовЗапросом(Ссылки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ДокументЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	               |	""ЭлектронноеПисьмо"" КАК ТипСобытия,
	               |	ДокументЭлектронноеПисьмоВходящее.ПометкаУдаления КАК ПометкаУдаления,
	               |	ДокументЭлектронноеПисьмоВходящее.Дата КАК Дата,
	               |	ДокументЭлектронноеПисьмоВходящее.ЕстьВложения КАК ЕстьВложения,
	               |	ДокументЭлектронноеПисьмоВходящее.Тема КАК Тема,
	               |	ВЫБОР
	               |		КОГДА CRM_НепрочитанныеЭлектронныеПисьма.Письмо ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Прочитанное,
	               |	ДокументЭлектронноеПисьмоВходящее.ОтправительПредставление КАК СписокУчастников,
	               |	ДокументЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
	               |	ДокументЭлектронноеПисьмоВходящее.Важность КАК Важность
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК ДокументЭлектронноеПисьмоВходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
	               |		ПО (CRM_НепрочитанныеЭлектронныеПисьма.Письмо = ДокументЭлектронноеПисьмоВходящее.Ссылка),
	               |	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	               |ГДЕ
	               |	ДокументЭлектронноеПисьмоВходящее.Ссылка В(&Ссылки)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	""ЭлектронноеПисьмо"",
	               |	ЭлектронноеПисьмоИсходящее.ПометкаУдаления,
	               |	ВЫБОР
	               |		КОГДА НЕ CRM_ПапкиУчетныхЗаписей.ВидПапки ЕСТЬ NULL
	               |				И CRM_ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ЭлектронноеПисьмоИсходящее.Дата
	               |	КОНЕЦ,
	               |	ЭлектронноеПисьмоИсходящее.ЕстьВложения,
	               |	ЭлектронноеПисьмоИсходящее.Тема,
	               |	ИСТИНА,
	               |	ВЫБОР
	               |		КОГДА ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма <> """"
	               |				И ЭлектронноеПисьмоИсходящее.СписокПолучателейКопий <> """"
	               |			ТОГДА ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма + "", "" + ЭлектронноеПисьмоИсходящее.СписокПолучателейКопий
	               |		КОГДА ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма <> """"
	               |			ТОГДА ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма
	               |		ИНАЧЕ ЭлектронноеПисьмоИсходящее.СписокПолучателейКопий
	               |	КОНЕЦ,
	               |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись,
	               |	ЭлектронноеПисьмоИсходящее.Важность
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = CRM_ПапкиУчетныхЗаписей.Папка
	               |		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка В(&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеДерева(Дерево, СтрокаДерева, ДанныеДокументов)
	
	Индекс = 0;
	Пока Индекс < СтрокаДерева.Строки.Количество() Цикл
		
		Узел = СтрокаДерева.Строки[Индекс];
		
		Если Не ЗначениеЗаполнено(Узел.ТипСобытия) И ДанныеДокументов[Узел.Ссылка] <> Неопределено Тогда
			ЗаполнитьДанныеЭлементаДерева(Узел, ДанныеДокументов[Узел.Ссылка]);
		КонецЕсли;
		
		Родитель = Узел.Родитель;
			ЗаполнитьДанныеДерева(Дерево, Узел, ДанныеДокументов);
			Индекс = Индекс + 1;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьИсториюПереписки(Дерево)
	
	Результат = КопияТиповДереваВерхнегоУровня(Дерево);
	
	СтрокаЗаголовка = Результат.Строки.Добавить();
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокИсторииПереписки());
	
	Для Каждого Строка Из Дерево.Строки Цикл
		НоваяСтрока = СтрокаЗаголовка.Строки.Добавить();
		ЗаполнитьСтрокуДереваПоОснованию(НоваяСтрока, Строка);
	КонецЦикла;
	
	Дерево = Результат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокИсторииПереписки()
	Возврат НСтр("ru = 'История переписки'");
КонецФункции

#КонецОбласти

#Область СозданиеДополнительныхГрупп

&НаСервере
Процедура СоздатьДополнительныеГруппы(Дерево, Ссылки)
	
	ЗначенияДляГрупп = ЗначенияДляСозданияДополнительныхГрупп(Дерево);
	ДобавитьГруппуНаТему(Дерево, ЗначенияДляГрупп.Тема, Ссылки);
	ДобавитьГруппуСУчастниками(Дерево, ЗначенияДляГрупп.СписокУчастников, Ссылки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуНаТему(Дерево, Тема, СобытияВИстории)
	
	Если ПустаяСтрока(Тема) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПисем = ДанныеПисемНаТемуЗапросом(Тема, СобытияВИстории);
	Если ДанныеПисем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовка = Дерево.Строки.Добавить();
	ЗаголовокГруппы = ЗаголовокГруппыНаТему(Тема, ДанныеПисем.Количество());
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокГруппы);
	
	ДобавитьСтрокиИзМассива(СтрокаЗаголовка, ДанныеПисем);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПисемНаТемуЗапросом(Тема, ИсключенныеСобытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ЭлектронноеПисьмоВходящее.Тема КАК Тема,
	               |	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	               |	ЭлектронноеПисьмоВходящее.ПометкаУдаления КАК ПометкаУдаления,
	               |	""Входящее"" КАК ВходящееИсходящееПисьмо,
	               |	ЭлектронноеПисьмоВходящее.Важность КАК Важность,
	               |	ЭлектронноеПисьмоВходящее.Дата КАК Дата,
	               |	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК СписокУчастников,
	               |	""ЭлектронноеПисьмо"" КАК ТипСобытия,
	               |	ЭлектронноеПисьмоВходящее.ЕстьВложения КАК ЕстьВложения,
	               |	ВЫБОР
	               |		КОГДА CRM_НепрочитанныеЭлектронныеПисьма.Письмо ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Прочитанное,
	               |	ЭлектронноеПисьмоВходящее.МоментВремени КАК МоментВремени
	               |ПОМЕСТИТЬ ПисьмаНаТему
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
	               |		ПО ЭлектронноеПисьмоВходящее.Ссылка = CRM_НепрочитанныеЭлектронныеПисьма.Письмо
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоВходящее.Ссылка В (&ИсключенныеСобытия)
	               |	И ВЫБОР
	               |			КОГДА ЭлектронноеПисьмоВходящее.Тема = &Тема
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Тема КАК СТРОКА(300)) ПОДОБНО &ТемаПодобно
	               |							И (НРЕГ(ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Тема КАК СТРОКА(2))) = ""re""
	               |								ИЛИ НРЕГ(ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Тема КАК СТРОКА(2))) = ""fw"")
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ЭлектронноеПисьмоИсходящее.Тема,
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ЭлектронноеПисьмоИсходящее.ПометкаУдаления,
	               |	""Исходящее"",
	               |	ЭлектронноеПисьмоИсходящее.Важность,
	               |	ВЫБОР
	               |		КОГДА НЕ CRM_ПапкиУчетныхЗаписей.ВидПапки ЕСТЬ NULL
	               |				И CRM_ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ЭлектронноеПисьмоИсходящее.Дата
	               |	КОНЕЦ,
	               |	ЭлектронноеПисьмоИсходящее.ОтправительПредставление,
	               |	""ЭлектронноеПисьмо"",
	               |	ЭлектронноеПисьмоИсходящее.ЕстьВложения,
	               |	ИСТИНА,
	               |	ЭлектронноеПисьмоИсходящее.МоментВремени
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = CRM_ПапкиУчетныхЗаписей.Папка
	               |		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоИсходящее.Ссылка В (&ИсключенныеСобытия)
	               |	И ВЫБОР
	               |			КОГДА ЭлектронноеПисьмоИсходящее.Тема = &Тема
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ВЫРАЗИТЬ(ЭлектронноеПисьмоИсходящее.Тема КАК СТРОКА(300)) ПОДОБНО &ТемаПодобно
	               |							И (НРЕГ(ВЫРАЗИТЬ(ЭлектронноеПисьмоИсходящее.Тема КАК СТРОКА(2))) = ""re""
	               |								ИЛИ НРЕГ(ВЫРАЗИТЬ(ЭлектронноеПисьмоИсходящее.Тема КАК СТРОКА(2))) = ""fw"")
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ПисьмаНаТему.Тема КАК Тема,
	               |	ПисьмаНаТему.Ссылка КАК Ссылка,
	               |	ПисьмаНаТему.ПометкаУдаления КАК ПометкаУдаления,
	               |	ПисьмаНаТему.ВходящееИсходящееПисьмо КАК ВходящееИсходящееПисьмо,
	               |	ПисьмаНаТему.Важность КАК Важность,
	               |	ПисьмаНаТему.Дата КАК Дата,
	               |	ПисьмаНаТему.СписокУчастников КАК СписокУчастников,
	               |	ПисьмаНаТему.ТипСобытия КАК ТипСобытия,
	               |	ПисьмаНаТему.ЕстьВложения КАК ЕстьВложения,
	               |	ПисьмаНаТему.Прочитанное КАК Прочитанное,
	               |	ПисьмаНаТему.МоментВремени КАК МоментВремени
	               |ИЗ
	               |	ПисьмаНаТему КАК ПисьмаНаТему
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ";
	
	ФлагПервыеСКоличеством = СтрШаблон("ПЕРВЫЕ %1", КоличествоПисемДляПоиска());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", ФлагПервыеСКоличеством);
	
	Запрос.УстановитьПараметр("Тема", Тема);
	ТемаПодобно = СтрШаблон("%%%1%%", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Тема));
	Запрос.УстановитьПараметр("ТемаПодобно", ТемаПодобно);
	Запрос.УстановитьПараметр("ИсключенныеСобытия", ИсключенныеСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗаголовокГруппыНаТему(Тема, КоличествоСтрокВДереве)
	
	КоличествоПисемДляПоиска = КоличествоПисемДляПоиска();
	
	Если КоличествоСтрокВДереве >= КоличествоПисемДляПоиска Тогда
		ЗаголовокГруппы = НСтр("ru = 'Последние %1 писем на тему ""%2""'");
		Возврат СтрШаблон(ЗаголовокГруппы, КоличествоПисемДляПоиска, Тема);
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'Другие письма на тему ""%1""'");
		Возврат СтрШаблон(ЗаголовокГруппы, Тема);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппуСУчастниками(Дерево, СписокУчастников, ПисьмаВИстории)
	
	Если ПустаяСтрока(СписокУчастников) Тогда
		Возврат;
	КонецЕсли;
	
	Участники = ЭлектронныеПочтыИзСпискаУчастников(СписокУчастников);
	ДанныеПисем = ДанныеПисемСУчастникамиЗапросом(Участники, ПисьмаВИстории);
	Если ДанныеПисем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовка = Дерево.Строки.Добавить();
	ЗаголовокГруппы = ЗаголовокГруппыСУчастниками(СписокУчастников, ДанныеПисем.Количество(), Участники.Количество());
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокГруппы);
	
	ДобавитьСтрокиИзМассива(СтрокаЗаголовка, ДанныеПисем);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПисемСУчастникамиЗапросом(Участники, ИсключенныеСобытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ЭлектронноеПисьмоВходящее.Тема КАК Тема,
	               |	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
	               |	ЭлектронноеПисьмоВходящее.ПометкаУдаления КАК ПометкаУдаления,
	               |	""Входящее"" КАК ВходящееИсходящееПисьмо,
	               |	ЭлектронноеПисьмоВходящее.Важность КАК Важность,
	               |	ЭлектронноеПисьмоВходящее.Дата КАК Дата,
	               |	ЭлектронноеПисьмоВходящее.ОтправительПредставление КАК СписокУчастников,
	               |	""ЭлектронноеПисьмо"" КАК ТипСобытия,
	               |	ЭлектронноеПисьмоВходящее.ЕстьВложения КАК ЕстьВложения,
	               |	ВЫБОР
	               |		КОГДА CRM_НепрочитанныеЭлектронныеПисьма.Письмо ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Прочитанное,
	               |	ЭлектронноеПисьмоВходящее.ОтправительАдрес КАК КакСвязаться,
	               |	ЭлектронноеПисьмоВходящее.МоментВремени КАК МоментВремени
	               |ПОМЕСТИТЬ СобытияСУчастниками
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК CRM_НепрочитанныеЭлектронныеПисьма
	               |		ПО ЭлектронноеПисьмоВходящее.Ссылка = CRM_НепрочитанныеЭлектронныеПисьма.Письмо
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоВходящее.Ссылка В (&ИсключенныеСобытия)
	               |	И ЭлектронноеПисьмоВходящее.ОтправительАдрес В(&Участники)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ЭлектронноеПисьмоИсходящее.Тема,
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ЭлектронноеПисьмоИсходящее.ПометкаУдаления,
	               |	""Исходящее"",
	               |	ЭлектронноеПисьмоИсходящее.Важность,
	               |	ВЫБОР
	               |		КОГДА НЕ CRM_ПапкиУчетныхЗаписей.ВидПапки ЕСТЬ NULL
	               |				И CRM_ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ЭлектронноеПисьмоИсходящее.Дата
	               |	КОНЕЦ,
	               |	ЭлектронноеПисьмоИсходящееПолучателиКопий.Представление,
	               |	""ЭлектронноеПисьмо"",
	               |	ЭлектронноеПисьмоИсходящее.ЕстьВложения,
	               |	ИСТИНА,
	               |	ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес,
	               |	ЭлектронноеПисьмоИсходящее.МоментВремени
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиКопий КАК ЭлектронноеПисьмоИсходящееПолучателиКопий
	               |		ПО ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование = ЭлектронноеПисьмоИсходящееПолучателиКопий.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = CRM_ПапкиУчетныхЗаписей.Папка
	               |		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоИсходящее.Ссылка В (&ИсключенныеСобытия)
	               |	И ЭлектронноеПисьмоИсходящееПолучателиКопий.Адрес В(&Участники)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	ЭлектронноеПисьмоИсходящее.Тема,
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ЭлектронноеПисьмоИсходящее.ПометкаУдаления,
	               |	""Исходящее"",
	               |	ЭлектронноеПисьмоИсходящее.Важность,
	               |	ВЫБОР
	               |		КОГДА НЕ CRM_ПапкиУчетныхЗаписей.ВидПапки ЕСТЬ NULL
	               |				И CRM_ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики)
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ЭлектронноеПисьмоИсходящее.Дата
	               |	КОНЕЦ,
	               |	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление,
	               |	""ЭлектронноеПисьмо"",
	               |	ЭлектронноеПисьмоИсходящее.ЕстьВложения,
	               |	ИСТИНА,
	               |	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес,
	               |	ЭлектронноеПисьмоИсходящее.МоментВремени
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	               |		ПО ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
	               |			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = CRM_ПапкиУчетныхЗаписей.Папка
	               |		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	               |ГДЕ
	               |	НЕ ЭлектронноеПисьмоИсходящее.Ссылка В (&ИсключенныеСобытия)
	               |	И ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес В(&Участники)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 50
	               |	СобытияСУчастниками.Тема КАК Тема,
	               |	СобытияСУчастниками.Ссылка КАК Ссылка,
	               |	СобытияСУчастниками.ПометкаУдаления КАК ПометкаУдаления,
	               |	СобытияСУчастниками.ВходящееИсходящееПисьмо КАК ВходящееИсходящееПисьмо,
	               |	СобытияСУчастниками.Важность КАК Важность,
	               |	СобытияСУчастниками.Дата КАК Дата,
	               |	СобытияСУчастниками.СписокУчастников КАК СписокУчастников,
	               |	СобытияСУчастниками.ТипСобытия КАК ТипСобытия,
	               |	СобытияСУчастниками.ЕстьВложения КАК ЕстьВложения,
	               |	СобытияСУчастниками.Прочитанное КАК Прочитанное,
	               |	СобытияСУчастниками.КакСвязаться КАК КакСвязаться,
	               |	СобытияСУчастниками.МоментВремени КАК МоментВремени
	               |ИЗ
	               |	СобытияСУчастниками КАК СобытияСУчастниками
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СобытияСУчастниками.Тема,
	               |	СобытияСУчастниками.Ссылка,
	               |	СобытияСУчастниками.ПометкаУдаления,
	               |	СобытияСУчастниками.ВходящееИсходящееПисьмо,
	               |	СобытияСУчастниками.Важность,
	               |	СобытияСУчастниками.Дата,
	               |	СобытияСУчастниками.СписокУчастников,
	               |	СобытияСУчастниками.ТипСобытия,
	               |	СобытияСУчастниками.ЕстьВложения,
	               |	СобытияСУчастниками.Прочитанное,
	               |	СобытияСУчастниками.КакСвязаться,
	               |	СобытияСУчастниками.МоментВремени
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(СобытияСУчастниками.КакСвязаться) = &КоличествоУчастников
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ";
	
	ФлагПервыеСКоличеством = СтрШаблон("ПЕРВЫЕ %1", КоличествоПисемДляПоиска());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", ФлагПервыеСКоличеством);
	
	Запрос.УстановитьПараметр("Участники", Участники);
	Запрос.УстановитьПараметр("КоличествоУчастников", Участники.Количество());
	Запрос.УстановитьПараметр("ИсключенныеСобытия", ИсключенныеСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗаголовокГруппыСУчастниками(СписокУчастников, КоличествоСтрокВДереве, КоличествоКонтактов = Неопределено)
	
	КоличествоПисемДляПоиска = КоличествоПисемДляПоиска();
	
	Если КоличествоКонтактов = Неопределено Тогда
		КоличествоКонтактов = СписокУчастников.Количество();
	КонецЕсли;
	
	Если КоличествоКонтактов = 1 Тогда
		
		Если КоличествоСтрокВДереве >= КоличествоПисемДляПоиска Тогда
			ЗаголовокГруппы = НСтр("ru = 'Последние %1 писем с ""%2""'");
			Возврат СтрШаблон(ЗаголовокГруппы, КоличествоПисемДляПоиска, СписокУчастников);
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Другие письма с ""%1""'");
			Возврат СтрШаблон(ЗаголовокГруппы, СписокУчастников);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоСтрокВДереве >= КоличествоПисемДляПоиска Тогда
			ЗаголовокГруппы = НСтр("ru = 'Последние %1 писем с %3 участниками: ""%2""'");
			Возврат СтрШаблон(ЗаголовокГруппы, КоличествоПисемДляПоиска, СписокУчастников, КоличествоКонтактов);
		Иначе
			ЗаголовокГруппы = НСтр("ru = 'Другие письма с %2 участниками: ""%1""'");
			Возврат СтрШаблон(ЗаголовокГруппы, СписокУчастников, КоличествоКонтактов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КоличествоПисемДляПоиска()
	Возврат 50;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиИзМассива(УзелДерева, МассивСДаннымиСтрок)
	
	Для Каждого Данные Из МассивСДаннымиСтрок Цикл
		
		Строка = УзелДерева.Строки.Добавить();
		ЗаполнитьДанныеЭлементаДерева(Строка, Данные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КопияТиповДереваВерхнегоУровня(Дерево)
	
	Результат = Новый ДеревоЗначений;
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоОснованию(Приемник, Источник)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Для Каждого Строка Из Источник.Строки Цикл
		НоваяСтрока = Приемник.Строки.Добавить();
		ЗаполнитьСтрокуДереваПоОснованию(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияДляСозданияДополнительныхГрупп(Дерево)
	
	Результат = Новый Структура;
	
	Данные = Неопределено;
	ПоляДокументаВДереве(ДокументСсылка, Дерево, "Тема, СписокУчастников", Данные);
	
	Если Не Данные.Количество() Тогда
		Данные = ПоляДляОтбораЗапросом(ДокументСсылка);
	КонецЕсли;
	
	Результат.Вставить("Тема", ОчищеннаяТемаОтПрефиксов(Данные.Тема));
	Результат.Вставить("СписокУчастников", Строка(Данные.СписокУчастников));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляДляОтбораЗапросом(Событие)
	
	Если ТипЗнч(Событие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, "Тема, ОтправительПредставление");
		ЗначенияРеквизитов.Вставить("СписокУчастников", ЗначенияРеквизитов.ОтправительПредставление);
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, 
			"Тема, СписокПолучателейПисьма, СписокПолучателейКопий");
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.СписокПолучателейПисьма)
			И ЗначениеЗаполнено(ЗначенияРеквизитов.СписокПолучателейКопий) Тогда
			СписокУчастников = ЗначенияРеквизитов.СписокПолучателейПисьма
				+ ", " + ЗначенияРеквизитов.СписокПолучателейКопий;
		ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитов.СписокПолучателейПисьма) Тогда
			СписокУчастников = ЗначенияРеквизитов.СписокПолучателейПисьма;
		Иначе
			СписокУчастников = ЗначенияРеквизитов.СписокПолучателейКопий;
		КонецЕсли;
		ЗначенияРеквизитов.Вставить("СписокУчастников", СписокУчастников);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервере
Функция ОчищеннаяТемаОтПрефиксов(Тема)
	
	Результат = Тема;
	Пока Истина Цикл
		
		НачалоСтроки = НРег(Сред(Результат, 1, 4));
		Если НачалоСтроки = "re: " Или НачалоСтроки = "fw: " Тогда
			Результат = Сред(Результат, 5);
			Продолжить;
		КонецЕсли;
		
		Если Сред(Результат, 1, 5) = "fwd: " Тогда
			Результат = Сред(Результат, 6);
			Продолжить;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеДляУзлаЗаголовка(УзелЗаголовок, ЗаголовокТекстом)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		УзелЗаголовок.ДатаСтрокой = ЗаголовокТекстом;
	Иначе
		УзелЗаголовок.ЗаголовокОтбора = ЗаголовокТекстом;
	КонецЕсли;
	
	УзелЗаголовок.Картинка = -1;
	УзелЗаголовок.ВажностьЧислом = 1;
	УзелЗаголовок.ЭтоОтбор = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДереваДокументов

&НаСервере
Процедура ЗаполнитьДанныеЭлементаДерева(Узел, Данные)
	
	ЗаполнитьЗначенияСвойств(Узел, Данные, , "ЕстьВложения");
	
	Узел.ЕстьВложения = ?(Данные.ЕстьВложения, 0, 1);
	
	Тема = Узел.Тема;
	Если ПустаяСтрока(Тема) Тогда
		Тема = НСтр("ru = '<Без темы>'");
	КонецЕсли;
	Узел.Тема = Тема;
	
	Если Данные.Дата = '00010101' Тогда
		Узел.ДатаСтрокой = НСтр("ru = 'Черновик'");
	Иначе
		Узел.ДатаСтрокой = Строка(Данные.Дата);
	КонецЕсли;
	
	УстановитьКартинку(Узел, Данные);
	УстановитьВажностьЧислом(Узел, Данные);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинку(Узел, Данные)
	
	Если ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		НомерКартинки = 17;
	Иначе
		НомерКартинки = 16;
	КонецЕсли;
	Узел.Картинка = НомерКартинки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВажностьЧислом(Узел, Данные)
	
	Если Данные.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная Тогда
		Узел.ВажностьЧислом = 1;
	ИначеЕсли Данные.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая Тогда
		Узел.ВажностьЧислом = 2;
	Иначе
		Узел.ВажностьЧислом = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список реквизитов переданного документа, внося его в переданный список.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево
//
// Возвращаемое значение:
//  СписокРеквизитов - СписокЗначений
Функция СписокРеквизитовДокумента(ДокументСсылка, УжеВСписке) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
	ЗаполнитьСписокРеквизитовДокументаСКэшем(СписокРеквизитов, ДокументСсылка.Метаданные(), УжеВСписке, ДокументСсылка);
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура ЗаполнитьСписокРеквизитовДокументаСКэшем(СписокРеквизитов, МетаданныеДокумента, УжеВСписке, ДокументСсылка)
	
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип Из ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				
				Если ЗначениеРеквизита <> Неопределено
					И Не ЗначениеРеквизита.Пустая()
					И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
					И УжеВСписке[ЗначениеРеквизита] = Неопределено
					И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено
					И ЗначениеРеквизита <> ДокументСсылка Тогда
					СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата, "ДФ=yyyyMMddЧЧММсс"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип Из ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ Из СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ Из СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И УжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						СписокРеквизитов.Добавить(ЗначениеРеквизита, Формат(ЗначениеРеквизита.Дата,
							"ДФ=yyyyMMddЧЧММсс"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	УжеВСписке.Вставить(ДокументСсылка, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПоляДокументаВДереве(Ссылка, Дерево, СписокПолей, Результат = Неопределено, РезультатПолучен = Ложь)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Строки = Дерево.Строки;
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Ссылка = Ссылка Тогда
			
			СписокПолей = СтрРазделить(СписокПолей, ", ", Ложь);
			Для Каждого Поле Из СписокПолей Цикл
				Результат.Вставить(Поле, Строка[Поле]);
			КонецЦикла;
			РезультатПолучен = Истина;
			Возврат Результат;
			
		КонецЕсли;
		
		ПоляДокументаВДереве(Ссылка, Строка, СписокПолей, Результат, РезультатПолучен);
		
		Если РезультатПолучен Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ВывестиДеревоДокументовНаСервере()
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	УжеВСписке = Новый Соответствие;
	Дерево = ДеревоДокументов;
	ЗаполнитьДеревоДокументов(ДокументСсылка, Дерево, УжеВСписке);
	
	Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Ссылки = СсылкиПоРезультатуИзСтруктурыПодчиненности(УжеВСписке);
	СоздатьИсторию(Дерево, Ссылки);
	СоздатьДополнительныеГруппы(Дерево, Ссылки);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
	
	УстановитьТекущееПисьмо(ДокументСсылка);
	
КонецПроцедуры

#Область ЗаполнениеДерева

// Заполняет переданное дерево структурой подчинения от переданного документа.
//
// Параметры:
//  Документ - ДокументСсылка 
//  Дерево - ДеревоЗначений - дерево, которое заполнят структурой подчиненности 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
//
&НаСервере
Процедура ЗаполнитьДеревоДокументов(Знач Документ, Дерево, УжеВСписке)
	
	ВывестиРодительскиеДокументы(Документ, Дерево, УжеВСписке);
	ВывестиПодчиненныеДокументы(Дерево, УжеВСписке);
	
КонецПроцедуры // ЗаполнитьДеревоДокументов(ДокументСсылка, Дерево, УжеВСписке, Истина);()

// Процедура выполняет вывод родительских документов.
//
Процедура ВывестиРодительскиеДокументы(ДокументСсылка, Дерево, УжеВСписке)
	
	СписокРеквизитов = СписокРеквизитовДокумента(ДокументСсылка, УжеВСписке);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение, Дерево, УжеВСписке);
	КонецЕсли;
	
	ВывестиРодительскиеДокументыОкончание(ДокументСсылка, Дерево, УжеВСписке);
	
КонецПроцедуры

// Возвращает выборку родительских документов по данному документу
Функция ВыборкаРодительскихДокументов(ДокументСсылка, МетаданныеДокумента)

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, Представление, 
	| Дата, Номер, #ВходящееИсходящееПисьмо, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
	| ИЗ Документ." + МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
	
	Если МетаданныеДокумента.Имя = "ЭлектронноеПисьмоВходящее" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееПисьмо", 
			"""Входящее"" КАК ВходящееИсходящееПисьмо");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееПисьмо", 
			"""Исходящее"" КАК ВходящееИсходящееПисьмо");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Процедура выполняет вывод родительских документов
//
// Параметры:
//  Документ - ДокументСсылка
//  Дерево - ДеревоЗначений - дерево, которое заполнят структурой подчиненности 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
Процедура ВывестиРодительскиеДокументыОкончание(Документ, Дерево, УжеВСписке) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	СтрокаДерева = Дерево.ПолучитьЭлементы().Добавить();
	Выборка = ВыборкаРодительскихДокументов(Документ, МетаданныеДокумента);
	Если Выборка.Следующий() Тогда
		СтрокаДерева.Ссылка = Выборка.Ссылка;
	Иначе
		СтрокаДерева.Ссылка = Документ;
	КонецЕсли;
	
	Дерево = СтрокаДерева;
	
КонецПроцедуры

// Процедура осуществляет вывод подчиненных документов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений 
//  УжеВСписке - Соответствие - хранит ссылки на документы, уже выведенные в дерево 
//  ТолькоСсылки - Булево - показывает, надо ли выводить все дерево или построить дерево только из ссылок (по умолчанию - Ложь) 
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева, УжеВСписке) Экспорт
	
	Таблица = ПолучитьСписокПодчиненныхДокументов(СтрокаДерева.Ссылка);
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	Если КэшПоТипамДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаПодчиненныхДокументов(КэшПоТипамДокументов);
	Пока Выборка.Следующий() Цикл
		
		Если УжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			
			НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			
				УжеВСписке.Вставить(Выборка.Ссылка, Истина);
				ВывестиПодчиненныеДокументы(НоваяСтрока, УжеВСписке);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает выборку подчиненных документов по данному документу
Функция ВыборкаПодчиненныхДокументов(КэшПоТипамДокументов)
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
		|ВЫБРАТЬ ", "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|Ссылка, ПометкаУдаления, Представление,  """ + КлючИЗначение.Ключ + """ КАК Метаданные, 
		|Дата, Номер, #ВходящееИсходящееПисьмо 
		|ИЗ Документ." + КлючИЗначение.Ключ + "
		|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";  
		
		Если КлючИЗначение.Ключ = "ЭлектронноеПисьмоВходящее" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееПисьмо", 
			"""Входящее"" КАК ВходящееИсходящееПисьмо");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВходящееИсходящееПисьмо", 
			"""Исходящее"" КАК ВходящееИсходящееПисьмо");
		КонецЕсли;
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОбъектЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК ОбъектЭлектронноеПисьмоВходящее
	               |ГДЕ
	               |	ОбъектЭлектронноеПисьмоВходящее.ВзаимодействиеОснование = &ЗначениеКритерияОтбора
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОбъектЭлектронноеПисьмоИсходящее.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ОбъектЭлектронноеПисьмоИсходящее
	               |ГДЕ
	               |	ОбъектЭлектронноеПисьмоИсходящее.CRM_Предмет = &ЗначениеКритерияОтбора
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ОбъектЭлектронноеПисьмоИсходящее.Ссылка
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ОбъектЭлектронноеПисьмоИсходящее
	               |ГДЕ
	               |	ОбъектЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование = &ЗначениеКритерияОтбора";
	
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

&НаСервере
Функция СсылкиПоРезультатуИзСтруктурыПодчиненности(УжеВСписке)
	
	Результат = Новый Массив;
	
	Для Каждого КлючИЗначение Из УжеВСписке Цикл
		Результат.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущееПисьмо(Письмо)
	
	Индекс = 0;
	НайтиИндексУзлаПоСсылке(Письмо, ДеревоДокументов, Индекс);
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Если Индекс = 0 И Не ЭлементыДерева.Количество() = 0 Тогда
		ПервыйДокумент = ЭлементыДерева[0].ПолучитьЭлементы()[0].Ссылка;
		НайтиИндексУзлаПоСсылке(ПервыйДокумент, ДеревоДокументов, Индекс);
	КонецЕсли;
	
	Элементы.ДеревоДокументов.ТекущаяСтрока = Индекс;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево()
	
	ЭлементыДереваДокументов = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДереваДокументов Цикл
		СвернутьВеткуДерева(ЭлементДерева);
		Элементы.ДеревоДокументов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Свернуть(ИдентификаторСтроки);
		СвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтандартныеВетки()
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	
	#Если МобильныйКлиент Тогда
		ПолеДляПоиска = "ДатаСтрокой";
	#Иначе
		ПолеДляПоиска = "ЗаголовокОтбора";
	#КонецЕсли
	
	ЗаголовокИсторииПереписки = ЗаголовокИсторииПереписки();
	ЧастьЗаголовкаНаТему = НСтр("ru = 'на тему'");
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ЭтоОтбор
			И (СтрНайти(ЭлементДерева[ПолеДляПоиска], ЗаголовокИсторииПереписки)
			Или СтрНайти(ЭлементДерева[ПолеДляПоиска], ЧастьЗаголовкаНаТему)) Тогда
			
			ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
			Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	УзлыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого Узел Из УзлыДерева Цикл
		ИдентификаторСтроки = Узел.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИндексУзлаПоСсылке(Ссылка, Дерево, Индекс = 0, ИндексНайден = Ложь)
	
	Строки = Дерево.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Ссылка = Ссылка Тогда
			Индекс = Строка.ПолучитьИдентификатор();
			ИндексНайден = Истина;
			Прервать;
		КонецЕсли;
		
		НайтиИндексУзлаПоСсылке(Ссылка, Строка, Индекс, ИндексНайден);
		
		Если ИндексНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОформляемыеПоля = Новый Массив;
	
	// Установка недоступности на документы с пометкой удаления
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУсловноеОформление.Отбор, 
		"ДеревоДокументов.ПометкаУдаления", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЗаблокированныйРеквизитЦвет);
	
	// Непрочитанные
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУсловноеОформление.Отбор, 
		"ДеревоДокументов.Прочитанное", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка оформления для заголовков отборов
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовВажностьЧислом.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовЕстьВложения.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовПрочитанное.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУсловноеОформление.Отбор, 
		"ДеревоДокументов.ЭтоОтбор", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Отображать", Ложь);
	
	// Установка оформления для обычных колонок
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовЗаголовокОтбора.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовоеУсловноеОформление.Отбор, 
		"ДеревоДокументов.ЭтоОтбор", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Видимость", Ложь);
	ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Отображать", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Предпросмотр

&НаКлиенте
Процедура ПоказатьСодержаниеПисьмаОбработчик()
	ПоказатьСодержаниеПисьма(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание = Ложь)
	
	Если Не НужноПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСодержаниеПисьмаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция НужноПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание = Ложь)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	Ссылка = ТекущиеДанные.Ссылка;
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПринудительноОбновитьСодержание И Ссылка = ТекущийДокумент Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПоказатьСодержаниеПисьмаНаСервере()
	
	ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент = ТекущиеДанные.Ссылка;
	
	СтруктураОписанияПисьма = СформироватьОписаниеТекущегоПисьма(ТекущийДокумент);
	
	Если СтруктураОписанияПисьма = Неопределено Тогда
		ОписаниеПисьма = СформироватьПустоеОписание();
		СтрОтправитель = "";
		СтрКому = "";
		СтрТема = "";
	Иначе
		ТекстПисьма = СтруктураОписанияПисьма.Тело;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
		
		СтрОтправитель = СтруктураОписанияПисьма.От;
		СтрКому = СтруктураОписанияПисьма.Кому;
		СтрТема = СтруктураОписанияПисьма.Тема;
	КонецЕсли;
	
	Элементы.ПредупреждениеБезопасности.Видимость = Не ЗапрещеноОтображениеНебезопасногоСодержимого
		И ЕстьНебезопасноеСодержимое И Не ВключитьНебезопасноеСодержимое;
	
	УстановитьВложенияВHTML();
	
	Элементы.ОткрытьИсторию.Видимость = (ДокументСсылка <> ТекущийДокумент);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПустоеОписание()
	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<body scroll=""auto"">
	|</body>
	|</html>";
КонецФункции

&НаСервере
Функция СформироватьОписаниеТекущегоПисьма(ПисьмоСсылка)
	
	ВложенияОчищеныПоНастройке = Ложь;
	
	СтруктураОписания = Новый Структура;
	
	// Проверим доступность письма по RLS.
	Попытка
		СсылкаДоступна = ПисьмоСсылка.Дата;
	Исключение
		// письмо недоступно
		
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = НСтр("ru = 'Письмо недоступно из-за ограничения прав доступа'");
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
		
		СтруктураОписания.Вставить("Тело", Текст);
		СтруктураОписания.Вставить("От",   "");
		СтруктураОписания.Вставить("Кому", "");
		СтруктураОписания.Вставить("Тема", "");
		
		Возврат СтруктураОписания;
		
	КонецПопытки;
	
	Если ПисьмоСсылка = Неопределено Или ТипЗнч(ПисьмоСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоСсылка);
	ЭтоПисьмоРассылки = (ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
						И ЗначениеЗаполнено(Предмет)
						И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	
	Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Для Каждого УдаленноеВложение Из ПисьмоСсылка.НепринятыеВложения Цикл
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			НовоеВложение.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьНебезопасноеСодержимое = Ложь;
	ВключитьНебезопасноеСодержимое = Истина;
	
	Если ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		Текст = СтрЗаменить(ПисьмоСсылка.Текст, Символы.ПС, "<br>");
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(Текст);
	Иначе
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		ПозицияПараметров = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");		
		Если ПозицияПараметров > 0 Тогда
			НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияПараметров - 1);
		КонецЕсли;
		Для Каждого ЭлементСписка Из ИдентификаторыКартинокПисьма Цикл
			НавигационнаяСсылка = СтрЗаменить(ЭлементСписка.Значение.НавигационнаяСсылка, НавигационнаяСсылкаИнформационнойБазы 
				+ "/",
				 "");
			Если ЭтоАдресВременногоХранилища(НавигационнаяСсылка) Тогда
				УдалитьИзВременногоХранилища(НавигационнаяСсылка);
			КонецЕсли;
		КонецЦикла;
		ИдентификаторыКартинокПисьма.Очистить();
		Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(Предмет.ТекстHTML, Предмет);
			CRM_Взаимодействия.ЗаполнитьАвтотекстПоПисьму(Текст, ПисьмоСсылка);
			
		Иначе
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(ПисьмоСсылка.ТекстHTML, ПисьмоСсылка);
			
		КонецЕсли;
		
		Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Если ПисьмоСсылка.CRM_ВключитьНебезопасноеСодержимое Тогда
				
				ВключитьНебезопасноеСодержимое = Не ЗапрещеноОтображениеНебезопасногоСодержимого;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИСТИНА
				|ИЗ
				|	РегистрСведений.CRM_ДоверенныеАдресаЭлектроннойПочты КАК ДоверенныеАдреса
				|ГДЕ
				|	ДоверенныеАдреса.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
				
				Запрос.УстановитьПараметр("АдресЭлектроннойПочты", ПисьмоСсылка.ОтправительАдрес);
				РезультатЗапроса = Запрос.Выполнить();
				
				ВключитьНебезопасноеСодержимое = Не ЗапрещеноОтображениеНебезопасногоСодержимого И Не РезультатЗапроса.Пустой();
				
			КонецЕсли;
			
			// Коррекция ошибочного HTML.
			ПозицияЗакрывающегоТега = СтрНайти(Текст, "</html>", НаправлениеПоиска.СКонца);
			Если ПозицияЗакрывающегоТега > 0 Тогда
				Текст = Лев(Текст, ПозицияЗакрывающегоТега + СтрДлина("</html>"));
			КонецЕсли;
			
			Взаимодействия.ОтфильтроватьСодержимоеТекстаHTML(
				Текст, ПисьмоСсылка.Кодировка, Не ВключитьНебезопасноеСодержимое, ЕстьНебезопасноеСодержимое);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет);
	Иначе
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка);
	КонецЕсли;
	
	Вложения.Очистить();
	Для Каждого Стр Из табВложения Цикл
		НовСтр 										= Вложения.Добавить();
		НовСтр.Ссылка								= Стр.Ссылка;
		НовСтр.ИмяФайла								= Стр.ИмяФайла;
		НовСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		НовСтр.Размер								= Стр.Размер;
		РазмерВложения								= Цел(Стр.Размер / 1024);
		НовСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		НовСтр.Расположение							= 0;
		НовСтр.ИДФайлаЭлектронногоПисьмаОтбор		= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		НовСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		
		Если Не ВложенияОчищеныПоНастройке И Стр.ОчищенПоНастройке Тогда
			ВложенияОчищеныПоНастройке = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПисьмаВложения(ПисьмоСсылка);
	
	Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
	
	Описание = "";
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПисьмоСсылка));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НеОтображатьКартинкиПометка И (ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
		ИЛИ ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками) Тогда
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Текст);
		НайденныеУзлы = ДокументHTML.ПолучитьЭлементыПоИмени("img");
		Для Каждого Узел Из НайденныеУзлы Цикл
			Узел.Источник = "";
		КонецЦикла;
		Текст = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", Текст);
	СтруктураОписания.Вставить("От", ПисьмоСсылка.ОтправительПредставление);
	СтруктураОписания.Вставить("Кому", ПисьмоСсылка.СписокПолучателейПисьма);
	СтруктураОписания.Вставить("Тема", ПисьмоСсылка.Тема);
	
	Возврат СтруктураОписания;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманд(Доступны)
	
	Элементы.Ответить.Доступность = Доступны;
	Элементы.ОтветитьВсем.Доступность = Доступны;
	Элементы.Переслать.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюОтветитьВсем.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюПереслать.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюОтветить.Доступность = Доступны;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытииВебКлиент()
	
	РазвернутьСтандартныеВетки();
	ТекущийЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОсновании(ВидОснования)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидОснования", ВидОснования);
	ДополнительныеПараметры.Вставить("ТекущееПисьмо", ТекущиеДанные.Ссылка);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииПослеВопроса",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
		 
	Если ВложенияОчищеныПоНастройке Тогда
		ТекстВопроса = НСтр("ru = 'Загрузить удаленные картинки и вложения?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуВложений(ОповещениеЗавершения);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВидОснования = ДополнительныеПараметры.ВидОснования;
	ТекущийДокумент = ДополнительныеПараметры.ТекущееПисьмо;
	
	Основание = Новый Структура("Основание, Команда", ТекущийДокумент, ВидОснования);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	Возврат НоваяСсылка;
	
КонецФункции

// Возвращает массив уникальных электронных почт на основе списка участников (реквизит документа Событие)
//
// Параметры:
//  СписокУчастников - Строка - реквизит документа Событие СписокУчастников
// 
// Возвращаемое значение:
//  Массив из Строка - массив электронных почт
//
Функция ЭлектронныеПочтыИзСпискаУчастников(СписокУчастников) Экспорт
	
	Контакты = Новый Массив;
	
	ДлинаСтроки = СтрДлина(СписокУчастников);
	
	Индекс = 1;
	Символ = "";
	СтрокаЭлектроннойПочты = "";
	ФормируемЭлектроннуюПочту = Ложь;
	
	Пока Индекс <= ДлинаСтроки Цикл
		
		Символ = Сред(СписокУчастников, Индекс, 1);
		
		Если Символ = "<" Тогда
			
			ФормируемЭлектроннуюПочту = Истина;
			Индекс = Индекс + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если Символ = ">" Тогда
			
			Если СтрНайти(СтрокаЭлектроннойПочты, "@") И Контакты.Найти(СтрокаЭлектроннойПочты) = Неопределено Тогда
				Контакты.Добавить(СтрокаЭлектроннойПочты);
			КонецЕсли;
			
			ФормируемЭлектроннуюПочту = Ложь;
			СтрокаЭлектроннойПочты = "";
			Индекс = Индекс + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ФормируемЭлектроннуюПочту Тогда
			СтрокаЭлектроннойПочты = СтрШаблон("%1%2", СтрокаЭлектроннойПочты, Символ);
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если Контакты.Количество() = 0
		И СтрНайти(СписокУчастников, "@")
		И Не СтрНайти(СписокУчастников, " ") Тогда
		Контакты.Добавить(СокрЛП(СписокУчастников));
	КонецЕсли;
	
	Возврат Контакты;
	
КонецФункции

#Область НебезопасноеСодержимое

&НаКлиенте
Процедура ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьНебезопасноеСодержимое" Тогда
		СтандартнаяОбработка = Ложь;
		ВключитьНебезопасноеСодержимое = Истина;
		ЗаписатьПризнакВключитьНебезопасноеСодержимое(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
		ПринудительнаяАктивизацияСтроки = Истина;
		ПоказатьСодержаниеПисьма(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПризнакВключитьНебезопасноеСодержимое(ПисьмоСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	ПисьмоОбъект.CRM_ВключитьНебезопасноеСодержимое = Истина;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСодержимоеДляВсехПисемОтправителяОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	ДобавитьВДоверенныеАдреса(Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВДоверенныеАдреса(ПисьмоСсылка)
	
	НоваяЗапись = РегистрыСведений.CRM_ДоверенныеАдресаЭлектроннойПочты.СоздатьМенеджерЗаписи();
	НоваяЗапись.АдресЭлектроннойПочты = ПисьмоСсылка.ОтправительАдрес;
	НоваяЗапись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

Процедура ДобавитьОформляемоеПоле(УсловноеОформление, ПутьКДаннымПоля) Экспорт
	
	ОформляемоеПоле                = УсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ОформляемоеПоле.Использование  = Истина;
	
КонецПроцедуры

Процедура ДобавитьОформляемыеПоля(УсловноеОформление, ПоляКомпоновкиДанных) Экспорт
	
	Если ТипЗнч(ПоляКомпоновкиДанных) = Тип("Массив") Тогда
		МассивПолей = ПоляКомпоновкиДанных;
	ИначеЕсли ТипЗнч(ПоляКомпоновкиДанных) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ПоляКомпоновкиДанных, 
			Символы.ПС, ""));
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого ИмяПоля Из МассивПолей Цикл
		ДобавитьОформляемоеПоле(УсловноеОформление, ИмяПоля)
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьЭлементУсловногоОформления(УсловноеОформление, Идентификатор, Значение) Экспорт
	
	Оформление = УсловноеОформление.Оформление.Элементы.Найти(Идентификатор);
	Оформление.Значение      = Значение;
	Оформление.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Вложения

&НаСервере
Процедура УстановитьВложенияВHTML()
	
	ВерсткаВложений = СформироватьСсылкиВложений(
		Вложения, ВсеВложенияПометка, ВложенияОчищеныПоНастройке);
	
	Если ПустаяСтрока(ВерсткаВложений) Тогда
		Элементы.ВложенияHTML.Видимость = Ложь;
	Иначе
		Элементы.ВложенияHTML.Видимость = Истина;
		
		ВложенияHTML = СтрЗаменить(
			ВложенияHTMLШаблон, "<INNER_FILES_HTML>", ВерсткаВложений);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьПисьмаВложения(ПисьмоСсылка)

	ТаблицаПисемВложений = Взаимодействия.ДанныеХранимыхВБазеПисемВложений(ПисьмоСсылка);
	
	Для Каждого ПисьмоВложение Из ТаблицаПисемВложений Цикл
		
		ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоВложение.Тема, ПисьмоВложение.Дата);
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Письмо = ПисьмоВложение.Письмо;
		НоваяСтрока.ИмяФайла = ПредставлениеПисьма + ".eml";
		НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла("eml");
		НоваяСтрока.ИмяФайлаНаКомпьютере = "";
		НоваяСтрока.Размер = ПисьмоВложение.Размер;
		РазмерВложения = Цел(ПисьмоВложение.Размер / 1024);
		НоваяСтрока.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ПисьмоВложение.Размер) 
			+ " байт");
		НоваяСтрока.Расположение = 5;
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСсылкиВложений(Знач Вложения, Знач ВсеВложенияПометка, Знач ВложенияОчищеныПоНастройке)
	
	// Параметр %1 - Идентификатор вложения - для открытия.
	// Параметр %2 - Количество пикселей смещения внутри БиблиотекаКартинок.КоллекцияПиктограммФайлов20.
	// Параметр %3 - Имя файла.
	// Параметр %4 - Идентификатор вложения - для скачивания.
	HTMLШаблонФайла =
	"<div class=""files-item " + ?(ВложенияОчищеныПоНастройке, "files-item__disabled", "") + """>
	|	<a class=""files-item-name-container"" href=""%1"" title=""%3"">
	|		<div class=""files-item-icon"" style=""background-position-x: -%2px""></div>
	|		<p class=""files-item-name"">%3</p>
	|	</a>
	|	<a class=""files-item-button file-button-icon-small file-button-icon__save-all"" href=""%4"" title=""Сохранить на диск""></a>
	|	<a class=""files-item-button file-button-icon-small file-button-icon__copy"" href=""%5"" title=""Копировать в буфер обмена""></a>
	|</div>";
	
	КоличествоВложений       = 0;
	ВсеВложенияВФорматеHTML  = "";
	РазмерыКартинкиВПикселях = 20;
	
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		// Получение представления.
		Если (Не ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#")
				Или ВсеВложенияПометка Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
			КоличествоВложений = КоличествоВложений + 1;
		Иначе
			ПредставлениеСсылки = "";
		КонецЕсли;
		
		// Если нет представления ссылки на файл, тогда такое вложение пропускаем.
		Если ПустаяСтрока(ПредставлениеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение смещения для картинки для вставки в HTML.
		РасширениеФайла	= ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.ИмяФайла);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		
		// Вычисляем смещения внутки большой картинки пиктограмм файлов.
		// Каждая картинка по 20 пикселей в высоту и ширину.
		СмещениеКартинки = ИндексКартинки * РазмерыКартинкиВПикселях;
		СмещениеКартинки = Формат(СмещениеКартинки, "ЧН=0; ЧГ=");
		
		// Сформируем идентфикаторы вложения.
		Если ВложенияОчищеныПоНастройке Тогда
			ИдентификаторВложенияСсылкаОткрытие		= "";
			ИдентификаторВложенияСсылкаСкачивание	= "";
			ИдентификаторВложенияСсылкаКопирование	= "";
		Иначе
			ИдентификаторСсылкиВложения = Формат(ЭлементТаблицы.ПолучитьИдентификатор(), "ЧН=0; ЧГ=");
			ИдентификаторВложенияСсылкаОткрытие		= "СсылкаВложения_" + ИдентификаторСсылкиВложения;
			ИдентификаторВложенияСсылкаСкачивание	= "Сохранить_СсылкаВложения_" + ИдентификаторСсылкиВложения;
			ИдентификаторВложенияСсылкаКопирование	= "Скопировать_СсылкаВложения_" + ИдентификаторСсылкиВложения;
		КонецЕсли;
		
		// Заполним шаблон.
		ВсеВложенияВФорматеHTML = ВсеВложенияВФорматеHTML + СтрШаблон(
			HTMLШаблонФайла,
			ИдентификаторВложенияСсылкаОткрытие,		// %1
			СмещениеКартинки,							// %2
			ПредставлениеСсылки,						// %3
			ИдентификаторВложенияСсылкаСкачивание,		// %4
			ИдентификаторВложенияСсылкаКопирование);	// %5
	КонецЦикла;
	
	HTMLИтоговаяВерстка = "<h1>Вложения (" + Строка(КоличествоВложений) + ")</h1>";
	
	Если ПустаяСтрока(ВсеВложенияВФорматеHTML) Тогда
		Возврат "";
	КонецЕсли;
	
	HTMLИтоговаяВерстка = HTMLИтоговаяВерстка + "<div id=""files-items"">" + ВсеВложенияВФорматеHTML + "</div>";
	
	Если ВложенияОчищеныПоНастройке Тогда
			ПодсказкаСсылки = "Для автозагрузки всех вложений у входящих писем требуется указать "
				+ "'Загружать вложения при получении писем' в учетной записи электронной почты";
			
			HTMLИтоговаяВерстка = HTMLИтоговаяВерстка
				+ "<div id=""file-buttons-container"">
				|	<a class=""file-button"" href=""CRM_ЗагрузитьВложения"" title=""" + ПодсказкаСсылки + """>
				|	<div class=""file-button-icon-big file-button-icon__download-removed""></div>
				|	<p class=""file-button-name"">Загрузить удаленные картинки и вложения</p></a></div>";
		Иначе
			HTMLИтоговаяВерстка = HTMLИтоговаяВерстка
				+ "<div id=""file-buttons-container"">
				|	<a class=""file-button"" href=""СохранитьВсеВложения"" title=""Сохранить все вложения"">
				|	<div class=""file-button-icon-big file-button-icon__save-all""></div>
				|	<p class=""file-button-name"">Сохранить все</p></a>
				|	<a class=""file-button"" href=""СкопироватьВсеВложения"" title=""Копировать все вложения в буфер обмена"">
				|	<div class=""file-button-icon-big file-button-icon__copy""></div>
				|	<p class=""file-button-name"">Копировать все</p></a></div>";
	КонецЕсли;
	
	Возврат HTMLИтоговаяВерстка;
	
КонецФункции

&НаСервере
Процедура СформироватьHTMLОтображенияТекстаПисьма()
	
	Макет = Обработки.CRM_МенеджерПочты.ПолучитьМакет("ВложенияHTML");
	ВложенияHTMLШаблон = Макет.ПолучитьТекст();
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_КоллекцияПиктограммФайлов20, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<FILE_ICONS_PATH>", ПутьККартинке);
	
	// Картинки сохранения.
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СохранитьКак, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_DOWNLOAD>", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ЗагрузитьУдаленныеВложения, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_DOWNLOAD_REMOVED>", ПутьККартинке);
	
	// Картинки копирования в буфер обмена.
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.СкопироватьВБуферОбмена, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_COPY>", ПутьККартинке);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		// Сохраненить вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "Сохранить_СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("Сохранить_СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
			Возврат;
		КонецЕсли;
		
		// Скопировать вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "Скопировать_СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("Скопировать_СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			
			ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ТекущиеДанные.Ссылка);
			CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), 
					МассивСсылок.Количество()));
			Возврат;
		КонецЕсли;
		
		// Открыть вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
			Возврат;
		КонецЕсли;
		
		// Групповые действия.
		
		Если СтрНайти(ДанныеСобытия.Href, "CRM_ЗагрузитьВложения") > 0 Тогда
			ВыполнитьЗагрузкуВложений();
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "СохранитьВсеВложения") > 0 Тогда
			ПолучаемыеФайлы = Новый Массив;
			ПолученныеФайлы = Новый Массив;
			
			ПроверкаСуществованияФайлов = Истина;
			
			СохранитьВложения();
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "СкопироватьВсеВложения") > 0 Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Вложение Из Вложения Цикл
				МассивСсылок.Добавить(Вложение.Ссылка);
			КонецЦикла;
			
			CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), 
					МассивСсылок.Количество()));
		Иначе
			CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(
				ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущийДокумент, Элемент.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанныеПисьма = Элементы.ДеревоДокументов.ТекущиеДанные;
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = Дата(ТекущиеДанныеПисьма.ДатаСтрокой);
		ПараметрыВложения.ПисьмоОснование     = ТекущиеДанныеПисьма.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = ТекущиеДанныеПисьма.Тема;
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо, ПараметрыВложения, ЭтотОбъект);
		
	Иначе
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	// +CRM
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(ТекущиеДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, ТекущиеДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	ИначеЕсли (ТекущиеДанные.Расположение = 5) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьПисьмоНаДиск(ТекущиеДанные.Письмо, УникальныйИдентификатор);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложений(ОповещениеЗавершения = Неопределено)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуВложенийЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(ТекущиеДанные.Ссылка, ЭтотОбъект, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьСодержаниеПисьма(Истина);
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера! Возможно письмо удалено на сервере.'"));
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения()
	ВыделенныеВложения = Новый Массив;
	КоличествоВложений = Вложения.Количество();
	ТолькоВыделенные = Ложь;
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	
	Если Не ВсеВложенияПометка Тогда
		ТолькоВыделенные = Истина;
		Для Каждого Вложение Из Вложения Цикл 
			Если Вложение.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				Индекс = Вложения.Индекс(Вложение);
				ВыделенныеВложения.Добавить(Индекс);
			КонецЕсли;;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", 
			"ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПисьмаПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если Не (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если Не ЗначениеЗаполнено(КаталогСохранения) Тогда
		Возврат;
	КонецЕсли;
	Если Не (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловПисемНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда
		ТекущееВложение = ВыделенныеВложения[ТекущийНомерВложения];
		ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение,
			 УникальныйИдентификатор);
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
		ДополнительныеПараметры.Вставить("СохранениеПисем", Истина);
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловПисемНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда
		ТекущееВложение = ВыделенныеВложения[ТекущийНомерВложения];
		//ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение, УникальныйИдентификатор);
		ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение,
			 УникальныйИдентификатор);
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
		ДополнительныеПараметры.Вставить("СохранениеПисем", Истина);
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПисьмаПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сохраняется файл ""%1"" (%2 Мб)"
		"Пожалуйста, подождите...'"), ИмяФайла, 
		РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб));
		Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку), 1, НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда
		
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда
				Если ТекущийНомерВложения = ДополнительныеПараметры.КоличествоВложений - 1 Тогда
					
					// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
					СписокИменФайлов = Новый СписокЗначений;
					Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
						ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
						Если ЭлементСписка = Неопределено Тогда
							СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
						Иначе
							Файл = Новый Файл(ПолучаемыйФайл.Имя);
							ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
							ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения 
								+ "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
						КонецЕсли;
					КонецЦикла;
					// Выполняем сохранение файлов.
					Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ДополнительныеПараметры.ВыборКаталога.Каталог, Ложь);
				Иначе
					ДополнительныеПараметры.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
					СохранитьВложенияПослеВыбораКаталога(ДополнительныеПараметры.ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);
			КонецЕсли;
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
					+ ТекущееВложение.ИмяФайла 
					+ НСтр("ru=' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			ПроверитьНаличиеФайловПисемНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ШаблонТекстаВопроса	= НСтр("ru='Файл %1 уже существует.%2Выберите действие для всех существующих файлов:'");
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса,
		 ПараметрыВложения.ПолноеИмяФайла,
		 Символы.ПС);
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
		СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти