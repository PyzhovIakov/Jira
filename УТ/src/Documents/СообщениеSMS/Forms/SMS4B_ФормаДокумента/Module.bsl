
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +CRM
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	// -CRM
	
	УстановитьУсловноеОформление();
		
	// +CRM
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Адресаты");
	КонецЕсли;
	// -CRM
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
		Рассмотрено = Истина;
		ПриСозданииЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
	Если НЕ ИнформационнаяБазаФайловая Тогда
		Элементы.АдресатыПроверитьСтатусыДоставки.Видимость = Ложь;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	
	// Определим типы контактов, которые можно создать.
	СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	Элементы.СоздатьКонтакт.Видимость      = СписокИнтерактивноСоздаваемыхКонтактов.Количество() > 0;
	
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ГиперссылкаФайлов = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ШаблоныСообщений
	ОпределитьВозможностьЗаполненияПисьмаПоШаблону();
	// Конец СтандартныеПодсистемы.ШаблоныСообщений
	
	// +CRM
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	Если Параметры.Свойство("ДанныеЗаполнения") Тогда
		Объект.ВзаимодействиеОснование = Параметры.ДанныеЗаполнения;
		ВзаимодействиеОснование = Объект.ВзаимодействиеОснование;
	КонецЕсли;
	
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Параметры.Свойство("СокращеннаяФорма") Или Параметры.Основание <> Неопределено Тогда
		Элементы.ГруппаПравая.Видимость = Ложь;
		Элементы.СтраницаКомментарий.Видимость = Ложь;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("Взаимодействие") И ЗначениеЗаполнено(Параметры.Взаимодействие) Тогда
			CRM_КонтекстВызова = Параметры.Взаимодействие;
		ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			Если Параметры.Основание.Свойство("ВзаимодействиеОснование") Тогда
				CRM_КонтекстВызова = Параметры.Основание.ВзаимодействиеОснование;
			ИначеЕсли Параметры.Основание.Свойство("Ссылка") Тогда
				CRM_КонтекстВызова = Параметры.Основание.Ссылка;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			CRM_КонтекстВызова = Параметры.ЗначениеКопирования;
		ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СообщениеSMS") Тогда
			CRM_КонтекстВызова = Параметры.Основание;
		ИначеЕсли Параметры.Свойство("CRM_КонтекстВызова") Тогда
			CRM_КонтекстВызова = Параметры.CRM_КонтекстВызова;
		КонецЕсли;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	// -CRM
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры
// -CRM

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM
	// CRM_УправлениеДоступом
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец CRM_УправлениеДоступом
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТекстСообщения.ОбновитьТекстРедактирования();
	
	// +CRM
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	// -CRM
	
	// +SMS4B
	Если НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнены настройки отправки SMS сообщений.';
			|en='The settings for sending SMS messages are not filled.'"), , , ,
			 Отказ);
		Возврат;
	КонецЕсли;
	// -SMS4B
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьДоступностьСозданияКонтакта();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// +CRM
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// +CRM
	Если ИмяСобытия = "СофтФон_OnLinesStatus" Тогда
		Возврат;
	КонецЕсли;
	// -CRM
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	ПроверитьДоступностьСозданияКонтакта();
	КоличествоАдресатов = Объект.Адресаты.Количество();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ШаблоныСообщений
	Если ИмяСобытия = "Запись_ШаблоныСообщений" Тогда
		ОпределитьВозможностьЗаполненияПисьмаПоШаблону();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ШаблоныСообщений
	
	// +SMS4B
	Если ИмяСобытия = "ВыбранКонтакт" Тогда
		ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Объект.SMS4B_ЕстьАвтотекст Тогда
				ТекущиеДанные.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
						Объект.ТекстСообщения,
						ТекущиеДанные.Контакт,
						SMS4B_ТаблицаАвтотекста);
		КонецЕсли;
	КонецЕсли;
	// -SMS4B
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	// +SMS4B
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		ТекущийОбъект.SMS4B_СтатусСтрокой = НСтр("ru='Всего: ';en='Total: '") + Строка(Объект.Адресаты.Количество()) + ";" 
			+ НСтр("ru=' записано,
			| но не отправлено'");
	КонецЕсли;
	// -SMS4B

	// +CRM
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПередЗаписьюНаСервере(ТекущийОбъект, ЭтотОбъект);

	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "СообщениеSMS");
	ПроверитьДоступностьСозданияКонтакта();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
	// +CRM
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	Оповестить("ЛентаСобытий_Обновить");
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьЗаполнениеСпискаАдресатов(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// +CRM
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	// -CRM
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		ВзаимодействияКлиент.ПроверкаЗаполненностиРеквизитовОтложеннойОтправки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	
	// +CRM
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Объект.Адресаты.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?';en='Clear the list of receivers?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе	
			CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		CRM_ОбработкаВыбораНаСервере(МассивПользователейГрупп);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		CRM_ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
	КонецЕсли;
	CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыКонтактыДопРеквизитыКомментарийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(
		РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НаКонтролеПриИзменении()
	
	Рассмотрено = НЕ НаКонтроле;
	УправлениеДоступностью(ЭтотОбъект);
	// +SMS4B
	SMS4B_УправлениеДоступностью();
	// -SMS4B
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСообщенияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	// +CRM
	//ОсталосьСимволов      = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	//                          Объект.ОтправлятьВТранслите,
	//                          Текст);
	Возврат; // Заглушка
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьВТранслитеПриИзменении(Элемент)
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	                        Объект.ОтправлятьВТранслите,
	                        Объект.ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// +SMS4B
&НаКлиенте
Процедура SMS4B_ДатаКогдаОтправитьПриИзменении(Элемент)
	
	Объект.ДатаКогдаОтправить = SMS4B_ДатаКогдаОтправить + (SMS4B_ВремяКогдаОтправить - Дата('00010101'));
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Объект.ДатаКогдаОтправить < ДатаСеанса Тогда
		Объект.ДатаКогдаОтправить	= ДатаСеанса;
		SMS4B_ДатаКогдаОтправить	= Объект.ДатаКогдаОтправить;
		SMS4B_ВремяКогдаОтправить	= Объект.ДатаКогдаОтправить;
	КонецЕсли;
	
	НоваяАктуальность = Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
	Если ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) И (Объект.ДатаАктуальностиОтправки < НоваяАктуальность) Тогда
		SMS4B_ДатаАктуальностиОтправки	= НоваяАктуальность;
		SMS4B_ВремяАктуальностиОтправки	= НоваяАктуальность;
		SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	Иначе
		
		МаксДлительностьДоставки = SMS4B_НастройкиСервиса.МаксДлительностьДоставки;
		Если (МаксДлительностьДоставки > 0)
			 И ((Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > МаксДлительностьДоставки * 3600) Тогда
			ТекстСообщения =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длительность доставки превышает %1 суток';
				|en='Delivery time exceeds %1 day'"),
				 МаксДлительностьДоставки / 24);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Объект.ДатаАктуальностиОтправки = (Объект.ДатаКогдаОтправить + (МаксДлительностьДоставки * 3600));
		КонецЕсли;
		
		SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьПриИзменении(Элемент)
	
	SMS4B_ДатаКогдаОтправитьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ДатаАктуальностиОтправкиПриИзменении(Элемент)
	
	Объект.ДатаАктуальностиОтправки = SMS4B_ДатаАктуальностиОтправки 
		+ (SMS4B_ВремяАктуальностиОтправки - Дата('00010101'));
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) Тогда
		Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли; 
	
	Если Объект.ДатаАктуальностиОтправки < (Объект.ДатаКогдаОтправить + 900) Тогда
		ТекстСообщения = НСтр("ru='Срок актуальности сообщения не может быть меньше 15 минут от времени начала рассылки.';
			|en='The period of the message actuality can not be less than 15 minutes from the time of the start of the mailing.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + 900;
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
	
	МаксАктуальностьДоставки = SMS4B_НастройкиСервиса.МаксАктуальностьДоставки;
	Если (МаксАктуальностьДоставки > 0) И (Объект.ДатаАктуальностиОтправки > (Объект.Дата 
		+ (МаксАктуальностьДоставки * 3600))) Тогда
		ТекстСообщения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Срок актуальности сообщения не может быть больше %1 сут. от даты документа';
			|en='Message validity period cannot be more than %1 day from date of document'"),
			 МаксАктуальностьДоставки / 24);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки	= (Объект.Дата + (МаксАктуальностьДоставки * 3600));
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
	
	МаксДлительностьДоставки = SMS4B_НастройкиСервиса.МаксДлительностьДоставки;
	Если (МаксДлительностьДоставки > 0)
		 И ((Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > МаксДлительностьДоставки * 3600) Тогда
		ТекстСообщения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Длительность доставки превышает %1 суток';
			|en='Delivery time exceeds %1 day'"),
			 МаксДлительностьДоставки / 24);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки = (Объект.ДатаКогдаОтправить + (МаксДлительностьДоставки * 3600));
	КонецЕсли;
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиПриИзменении(Элемент)
	
	SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ИспользоватьПериодЗапретаПриИзменении(Элемент)
	
	Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
		ПериодЗапрета = SMS4B_НастройкиСервиса.ПериодЗапрета;
		Если Не ЗначениеЗаполнено(Объект.SMS4B_НачалоПериодаЗапрета) Тогда
			Объект.SMS4B_НачалоПериодаЗапрета = ПериодЗапрета.ДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.SMS4B_КонецПериодаЗапрета) Тогда 
			Объект.SMS4B_КонецПериодаЗапрета = ПериодЗапрета.ДатаОкончания;
		КонецЕсли;
	Иначе
		Объект.SMS4B_НачалоПериодаЗапрета = Дата('00010101');
		Объект.SMS4B_КонецПериодаЗапрета  = Дата('00010101');
	КонецЕсли;
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_НачалоПериодаЗапретаПриИзменении(Элемент)
	
	Объект.SMS4B_НачалоПериодаЗапрета = НачалоЧаса(Объект.SMS4B_НачалоПериодаЗапрета);
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_НачалоПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.SMS4B_НачалоПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.SMS4B_НачалоПериодаЗапрета = Объект.SMS4B_НачалоПериодаЗапрета + 82800;
	Иначе	
		Объект.SMS4B_НачалоПериодаЗапрета = Объект.SMS4B_НачалоПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_КонецПериодаЗапретаПриИзменении(Элемент)
	
	Объект.SMS4B_КонецПериодаЗапрета = НачалоЧаса(Объект.SMS4B_КонецПериодаЗапрета);
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_КонецПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.SMS4B_КонецПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.SMS4B_КонецПериодаЗапрета = Объект.SMS4B_КонецПериодаЗапрета + 82800;
	Иначе	
		Объект.SMS4B_КонецПериодаЗапрета = Объект.SMS4B_КонецПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_РавномернаяРассылкаПриИзменении(Элемент)
	
	КоличествоПолучателей = Объект.Адресаты.Количество();
	Если Объект.SMS4B_РавномернаяРассылка И (КоличествоПолучателей > 0) Тогда
		КогдаОтправить = Объект.ДатаКогдаОтправить;
		АктуальностьОтправки = Объект.ДатаАктуальностиОтправки;
		Если Не ЗначениеЗаполнено(АктуальностьОтправки) Тогда
			АктуальностьОтправки = КогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
		КонецЕсли;
		Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
			Всего = SMS4B_ИсключениеВременногоПериода(КогдаОтправить, АктуальностьОтправки,
				 Объект.SMS4B_НачалоПериодаЗапрета,
				 Объект.SMS4B_КонецПериодаЗапрета);
		Иначе
			Всего = SMS4B_ИсключениеВременногоПериода(КогдаОтправить, АктуальностьОтправки);
		КонецЕсли;
		ТекстВсего		= SMS4B_ПолучитьПредставлениеВремени(Всего);
		ТекстИнтервала	= SMS4B_ПолучитьПредставлениеВремени(Всего / КоличествоПолучателей);
		Элементы.ВремяРассылки.Заголовок = НСтр("ru='В течение ';en='During'") + ТекстВсего + НСтр("ru=' с интервалом '") 
			+ ТекстИнтервала;
	Иначе
		Элементы.ВремяРассылки.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ТекстСообщенияПриИзменении(Элемент)
	
	SMS4B_ТекстСообщенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_БалансНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	SMS4B_ВзаимодействияКлиент.SMS4B_ОткрытьЛичныйКабинетСервиса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= SMS4B_ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") 
		+ (Цел((SMS4B_ВремяКогдаОтправить - НачалоДня(SMS4B_ВремяКогдаОтправить)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("SMS4B_ВремяКогдаОтправитьЗавершениеВыбора", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		SMS4B_ВремяКогдаОтправить = ВыбранныйЭлемент.Значение;
		SMS4B_ДатаКогдаОтправитьПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= SMS4B_ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") 
		+ (Цел((SMS4B_ВремяАктуальностиОтправки - НачалоДня(SMS4B_ВремяАктуальностиОтправки)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("SMS4B_ВремяАктуальностиОтправкиЗавершениеВыбора",
		 ЭтотОбъект,
		 Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		SMS4B_ВремяАктуальностиОтправки = ВыбранныйЭлемент.Значение;
		SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыКакСвязатьсяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(ТекущиеДанные.Контакт);
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_АдресатыКакСвязатьсяЗавершениеВыбора",
		 ЭтотОбъект,
		 ТекущиеДанные);
	ПоказатьВыборИзСписка(ОповещениеЗавершения, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыКакСвязатьсяЗавершениеВыбора(ВыбранныйЭлемент, ТекущиеДанные) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки", ВыбранныйЭлемент.Значение));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанные.НомерДляОтправки	= ВыбранныйЭлемент.Значение;
		ТекущиеДанные.КакСвязаться		= ВыбранныйЭлемент.Представление;
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		Если НайденныеСтроки[0].НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
			ТекущиеДанные.НомерДляОтправки	= ВыбранныйЭлемент.Значение;
			ТекущиеДанные.КакСвязаться		= ВыбранныйЭлемент.Представление;
		Иначе	
			ПоказатьПредупреждение(,
				 НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов.';
				|en='The selected phone number is already present in the destination table.'"));
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(,
			 НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов.';
			|en='The selected phone number is already present in the destination table.'"));
	КонецЕсли;
	
КонецПроцедуры

// -SMS4B

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаты

&НаКлиенте
Процедура АдресатыПриИзменении(Элемент)
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	КоличествоАдресатов = Объект.Адресаты.Количество();
	ИзменилисьКонтакты = Истина;
	
	// +SMS4B
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	// -SMS4B
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	ПараметрыОткрытия = ВзаимодействияКлиент.ПараметрыВыбораКонтакта(УникальныйИдентификатор);
	ПараметрыОткрытия.ТолькоТелефон = Истина;
	ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, ТекущиеДанные.КакСвязаться, 
		ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.Контакт, ПараметрыОткрытия); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = АвтоПодборКонтактов(Текст);
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		ДанныеВыбора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
		ТекущиеДанные.ПредставлениеКонтакта = ВыбранноеЗначение.ПредставлениеКонтакта;
		ТекущиеДанные.Контакт               = ВыбранноеЗначение.Контакт;
		ПредставлениеКонтактаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	
	// +SMS4B
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Контакт = Неопределено Тогда
		ТекущиеДанные.ПредставлениеКонтакта	= "";
		ТекущиеДанные.НомерДляОтправки			= "";
		ТекущиеДанные.КакСвязаться				= "";
		ТекущиеДанные.SMS4B_ТекстСообщения		= "";
		Возврат;
	КонецЕсли;
	// -SMS4B
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Контакт) Тогда
		ВзаимодействияВызовСервера.ПредставлениеИВсяКонтактнаяИнформациюКонтакта(ТекущиеДанные.Контакт,
			ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.КакСвязаться, 
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	КонецЕсли;
	ПроверитьДоступностьСозданияКонтакта();
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	
	// +SMS4B
	СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(ТекущиеДанные.Контакт);
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ЭлементСписка.Представление));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущиеДанные.КакСвязаться		= ЭлементСписка.Представление;
			ТекущиеДанные.НомерДляОтправки	= ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		ТекущиеДанные.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущиеДанные.Контакт,
				SMS4B_ТаблицаАвтотекста);
	КонецЕсли;
	// -SMS4B
	
	// +CRM
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Контакт);

КонецПроцедуры

&НаКлиенте
Процедура АдресатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СостояниеСообщения) Тогда
		ТекущиеДанные.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Черновик");
	КонецЕсли;
	
КонецПроцедуры 

// +CRM
&НаКлиенте
Процедура АдресатыПослеУдаления(Элемент)
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
КонецПроцедуры
// -CRM

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтактВыполнить()
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Если Объект.Ссылка.Пустая() И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВзаимодействияКлиент.СоздатьКонтакт(ТекущиеДанные.ПредставлениеКонтакта, ТекущиеДанные.КакСвязаться, 
		Объект.Ссылка, СписокИнтерактивноСоздаваемыхКонтактов);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		ОтправитьВыполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыДоставки(Команда)
	
	ОчиститьСообщения();
	ПроверитьСтатусыДоставкиСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.ШаблоныСообщений

&НаКлиенте
Процедура СформироватьПоШаблону(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
		ПредметСообщения = ?(ЗначениеЗаполнено(Предмет), Предмет, "Общий");
		МодульШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону(ПредметСообщения, "СообщениеSMS", Оповещение);
	КонецЕсли
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// +SMS4B

&НаКлиенте
Процедура SMS4B_ОбновитьНастройки(Команда)
	
	Если SMS4B_ОбновитьНастройкиСервиса() Тогда
		ТекстОповещения = НСтр("ru='Обновление параметров SMS4B';en='Update SMS4B settings'");
		ТекстПояснения = НСтр("ru='Параметры сервиса SMS4B успешно обновлены.';
			|en='SMS4B service parameters have been successfully updated.'");
		ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32,
			 СтатусОповещенияПользователя.Информация,
			 "SMS4B");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВставитьШаблон(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("SMS4B_ВставитьШаблонПродолжить", ЭтотОбъект, Новый Структура);
	
	Если ЗначениеЗаполнено(Объект.ТекстСообщения) Тогда
		ТекстВопроса = НСтр("ru='Текст сообщения будет заменен содержанием выбранного шаблона. Продолжить?';
			|en='The text of the message will be replaced with the contents of the selected template. Continue?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_SMS4B_ВставитьТэгАвтотекста(Команда)
	
	ИмяКоманды = СтрЗаменить(Команда.Имя, "SMS4B_", "");
	НайденныеСтроки = SMS4B_ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.ТекстСообщения.ВыделенныйТекст = НайденныеСтроки[0].Тэг;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыПроверитьТелефоны(Команда)
	
	Если SMS4B_ПроверитьЗаполнениеАдресатов() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Проверка выполнена успешно!';en='Verification completed successfully!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыВыделитьСОдинаковымиТелефонами(Команда)
	
	SMS4B_ВыделитьАдресатовСОдинаковымиТелефонами();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыУдалитьСОдинаковымиТелефонами(Команда)
	
	SMS4B_УдалитьАдресатовСОдинаковымиТелефонами();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыУдалитьБезТелефонов(Команда)
	
	SMS4B_УдалитьАдресатовБезТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыОчистить(Команда)
	
	Если Объект.Адресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='Табличная часть содержит записи. Продолжить?';
		|en='Tabular section contain records. Continue?'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_АдресатыОчиститьЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// -SMS4B

// +CRM

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоГруппе(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчета(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.SMS4B_ФормаВыбораРезультатаОтчета", ПараметрыФормы,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоСегменту(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.SMS4B_ФормаВыборСегмента", ПараметрыФормы, ЭтотОбъект, ,
		 , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_Сегмент							= Результат.Сегмент;
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		CRM_ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Адресаты.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПартнеров";
	ДополнительныеДанные.ИмяСправочника = "Партнеры";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("CRM_ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьКонтактнымиЛицами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляКонтактныхЛиц";
	ДополнительныеДанные.ИмяСправочника = "КонтактныеЛицаПартнеров";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("CRM_ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьПотенциальнымиКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПотенциальныхКлиентов";
	ДополнительныеДанные.ИмяСправочника = "CRM_ПотенциальныеКлиенты";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("CRM_ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьПолучателейПоСКД(Данные, ДополнительныеПараметры) Экспорт
	
	Если НЕ Данные.ОтборНастроен Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗаписи = Объект.Адресаты.Количество() > 0;
	
	Если ЕстьЗаписи Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ЗаполнитьПолучателейПоСКДЗавершение", ЭтотОбъект, Данные);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Табличная часть уже содержит записи. "
		"Очистить табличную часть?';en='Tabular section already contains records. "
		"Clear tabular section?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		CRM_ЗаполнитьПолучателейПоСКДЗавершение(Неопределено, Данные);
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнитьПолучателейПоСКДЗавершение(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Форма") Тогда
		ДополнительныеПараметры.Удалить("Форма");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Оповещение") Тогда
		ДополнительныеПараметры.Удалить("Оповещение");
	КонецЕсли;
	
	СписокСсылок = CRM_ОбщегоНазначенияКлиент.СписокПолучателей(ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Формирование списка заполнения'"), ,
		НСтр("ru = 'Список сформирован.'")
	);
		
	CRM_ВидКонтактнойИнформации			= ДополнительныеПараметры.ВидКонтактнойИнформации;
	CRM_НеЗаполнятьСПустымиТелефонами		= ДополнительныеПараметры.НеЗаполнятьСПустымиАдресами;
	CRM_ТолькоОсновныеКонтактныеЛица	= ?(ДополнительныеПараметры.Свойство("ТолькоОсновныеКонтактныеЛица"),
										ДополнительныеПараметры.ТолькоОсновныеКонтактныеЛица,
										Ложь);
	CRM_ЗаполнитьТЧПоРезультатуСКД(СписокСсылок);	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеКонтакта.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Адресаты.Контакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветФонаВыделенияПоля);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПроверитьДоступностьСозданияКонтакта()
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Элементы.СоздатьКонтакт.Доступность = (ТекущиеДанные <> Неопределено) 
	    И (НЕ ЗначениеЗаполнено(ТекущиеДанные.Контакт));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АвтоПодборКонтактов(Знач СтрокаПоиска)
	
	Возврат Взаимодействия.АвтоПодборКонтактов(СтрокаПоиска);
	
КонецФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ОбработатьПереданныеПараметры(Параметры);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	                     Объект.ОтправлятьВТранслите,
	                     Объект.ТекстСообщения);
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	НаКонтроле = НЕ Рассмотрено;
	УправлениеДоступностью(ЭтотОбъект);
	КоличествоАдресатов = Объект.Адресаты.Количество();
	
	// +SMS4B
	
	ТаблицаАвтотекста = РеквизитФормыВЗначение("SMS4B_ТаблицаАвтотекста");
	SMS4B_Взаимодействия.SMS4B_СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.СообщениеSMS")));
	ЗначениеВРеквизитФормы(ТаблицаАвтотекста, "SMS4B_ТаблицаАвтотекста");
	SMS4B_Взаимодействия.SMS4B_ЗаполнитьКоманднуюПанельАвтотекста(ЭтотОбъект);
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	
	SMS4B_НастройкиСервиса = Новый ФиксированнаяСтруктура(SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса());
	
	SMS4B_Баланс = Формат(SMS4B_НастройкиСервиса.ОстатокПоСчету, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00" ) 
		+ НСтр("ru=' руб.';en=' RUB'");
	
	Если Объект.SMS4B_ТипСообщения <> Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ИменаОтправителя = SMS4B_НастройкиСервиса.ИменаОтправителя;
		СписокВыбора = Элементы.SMS4B_ИмяОтправителя.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ИмяОтправителя Из ИменаОтправителя Цикл
			СписокВыбора.Добавить(ИмяОтправителя);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.ДатаКогдаОтправить) Тогда
			Объект.ДатаКогдаОтправить = Объект.Дата;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) Тогда
			Если ЗначениеЗаполнено(SMS4B_НастройкиСервиса.СрокЖизниСообщений) Тогда
				Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
			КонецЕсли;
		КонецЕсли;
		
		Объект.SMS4B_ТипСообщения = Перечисления.SMS4B_ТипыСообщений.Исходящее;
		
		УстановитьПривилегированныйРежим(Истина);
		НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
		УстановитьПривилегированныйРежим(Ложь);
		Объект.SMS4B_ИмяОтправителя = НастройкиОтправки.ИмяОтправителя;
		
		Объект.SMS4B_ИспользоватьПериодЗапрета = Константы.SMS4B_ИспользоватьПериодЗапретаОтправки.Получить();
		Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
			ПериодЗапрета = SMS4B_НастройкиСервиса.ПериодЗапрета;
			Объект.SMS4B_НачалоПериодаЗапрета = ПериодЗапрета.ДатаНачала;
			Объект.SMS4B_КонецПериодаЗапрета = ПериодЗапрета.ДатаОкончания;
		КонецЕсли;
		
		Если Объект.SMS4B_ЕстьАвтотекст Тогда
			Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
				ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
					Объект.ТекстСообщения,
					ТекущаяСтрока.Контакт,
					SMS4B_ТаблицаАвтотекста);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	SMS4B_ДатаКогдаОтправить		= Объект.ДатаКогдаОтправить;
	SMS4B_ВремяКогдаОтправить		= Объект.ДатаКогдаОтправить;
	SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	
	SMS4B_УправлениеДоступностью();
	
	Если Объект.SMS4B_ТипСообщения = Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ТекстЗаголовка	= НСтр("ru='Входящее сообщение';en='Incoming message'");
	Иначе	
		ТекстЗаголовка	= НСтр("ru='Исходящее сообщение';en='Outgoing message'");
	КонецЕсли;
	ТекстЗаголовка	= ТекстЗаголовка + " от " + Формат(Объект.Дата, "ДЛФ=DD") + " (" + НРег(Строка(Объект.Состояние)) + ")";
	Заголовок		= ТекстЗаголовка;
	
	// -SMS4B
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	ОчиститьСообщения();
	
	ОтправленоУспешно = РезультатОтправкиНаСервере();
	Если ОтправленоУспешно Тогда
		// +CRM
		ЗаписатьДанныеБизнесСтатистики();
		// -CRM
		Закрыть();
	КонецЕсли;
	
	// +CRM
	Оповестить("ЛентаСобытий_Обновить");
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСпискаАдресатов(Отказ)

	Для Каждого Адресат Из Объект.Адресаты Цикл
		ПроверитьЗаполнениеТелефона(Адресат, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТелефона(Адресат, Отказ)
	
	// +CRM
	// Исключим из анализа телефона вид, указанный в скобках
	АдресатНомерТелефона = Адресат.КакСвязаться;
	
	НачальныйНомер = СтрНайти(АдресатНомерТелефона, "(", НаправлениеПоиска.СКонца) - 1;
	КонечныйНомер  = СтрНайти(АдресатНомерТелефона, ")", НаправлениеПоиска.СКонца);
	КоличествоСимволов = КонечныйНомер - НачальныйНомер + 1;
	
	СтрокаВидКИ = Сред(АдресатНомерТелефона, НачальныйНомер, КоличествоСимволов);
	АдресатНомерТелефона = СтрЗаменить(АдресатНомерТелефона, СтрокаВидКИ, "");
	// -CRM
	
	Если ПустаяСтрока(АдресатНомерТелефона) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Номер телефона"" не заполнено.';en = '""Phone number"" is not filled.'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
			Возврат;
	КонецЕсли;
		
	Если СтрРазделить(АдресатНомерТелефона, ";", Ложь).Количество() > 1 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В строке %1 указан более чем один номер телефона.'"), Адресат.НомерСтроки),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
			Возврат;
	КонецЕсли;
	
	Если Не Взаимодействия.КорректноВведенНомерТелефона(АдресатНомерТелефона) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Введите номер телефона в международном формате.
				|Допускается использовать в номере пробелы, скобки и дефисы.
				|Например, ""+7 (123) 456-78-90"".';
				|en='Enter phone number in the international format.
				|You can use spaces, brackets, and hyphens.
				|For example, ""+7 (123) 456-78-90"".'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
		Возврат;
	КонецЕсли;
	
	Адресат.НомерДляОтправки = ФорматироватьНомер(Адресат.КакСвязаться);
	
КонецПроцедуры

&НаСервере
Функция ФорматироватьНомер(Номер)
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер, Позиция, 1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) > 10 Тогда
		ПервыйСимвол = Лев(Результат, 1);
		Если ПервыйСимвол = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);
		ИначеЕсли ПервыйСимвол <> "+" Тогда
			Результат = "+" + Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция РезультатОтправкиНаСервере()
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Результат = Истина;
	
	Если ИнформационнаяБазаФайловая 
		И (Объект.ДатаКогдаОтправить = Дата(1, 1, 1) ИЛИ Объект.ДатаКогдаОтправить < ТекущаяДатаСеанса())
		И (Объект.ДатаАктуальностиОтправки = Дата(1, 1, 1) ИЛИ Объект.ДатаАктуальностиОтправки > ТекущаяДатаСеанса()) Тогда
			
			КоличествоОтправленных =  Взаимодействия.ОтправкаSMSПоДокументу(Объект);
			Результат = КоличествоОтправленных > 0;
	Иначе
		
		Взаимодействия.УстановитьСостояниеИсходящееДокументСообщениеSMS(Объект);
		
	КонецЕсли;
	
	Записать();
	УправлениеДоступностью(ЭтотОбъект);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	СообщениеОтправлено = СообщениеОтправлено(Форма.Объект.Состояние);
	СтатусВышеИсходящее = Форма.Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
	                      И Форма.Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее");
	
	ОтправкаДоступна = Истина;
	Если Форма.ИнформационнаяБазаФайловая Тогда
		Если СообщениеОтправлено Тогда
			ОтправкаДоступна = Ложь;
		ИначеЕсли Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ДатаСеанса = ТекущаяДатаСеанса();
			#Иначе
				ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
			#КонецЕсли
			Если (Форма.Объект.ДатаКогдаОтправить) <> Дата(1, 1, 1)
				И Форма.Объект.ДатаКогдаОтправить > ДатаСеанса Тогда
				ОтправкаДоступна = Ложь;
			КонецЕсли;
			Если (Форма.Объект.ДатаАктуальностиОтправки) <> Дата(1, 1, 1)
				И Форма.Объект.ДатаАктуальностиОтправки < ДатаСеанса Тогда
				ОтправкаДоступна = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Форма.Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик") Тогда
			ОтправкаДоступна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ФормаОтправить.Доступность                 = ОтправкаДоступна;
	Форма.Элементы.Адресаты.ТолькоПросмотр                    = СтатусВышеИсходящее;
	Форма.Элементы.ОтправлятьВТранслите.Доступность           = НЕ СтатусВышеИсходящее;
	Форма.Элементы.ТекстСообщения.ТолькоПросмотр              = СтатусВышеИсходящее;
	Форма.Элементы.РассмотретьПосле.Доступность               = Форма.НаКонтроле;
	Форма.Элементы.ГруппаДатаОтправкиАктуальность.Доступность = НЕ СтатусВышеИсходящее;
	
	Форма.Элементы.АдресатыПроверитьСтатусыДоставки.Доступность =
	                 Форма.ИнформационнаяБазаФайловая
	                 И СообщениеОтправлено
	                 	 	 И Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Доставляется");
	
	// +CRM
	Форма.Элементы.CRM_ПолучателиЗаполнить.Доступность = Не СообщениеОтправлено;
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыДоставкиСервер()

	УстановитьПривилегированныйРежим(Истина);
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"), , "Объект");
		Возврат;
	КонецЕсли;
	
	// +SMS4B
	//Взаимодействия.ПроверитьСтатусыДоставкиSMS(Объект, Модифицированность);
	SMS4B_Взаимодействия.ПроверитьСтатусыДоставкиSMS(Объект, Модифицированность);
	SMS4B_УправлениеДоступностью();
	// -SMS4B
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(ПереданныеПараметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ПереданныеПараметры.Свойство("Текст") И НЕ ПустаяСтрока(ПереданныеПараметры.Текст) Тогда
			
			Объект.ТекстСообщения = ПереданныеПараметры.Текст;
			
		КонецЕсли;
		
		Если ПереданныеПараметры.Адресаты <> Неопределено Тогда
			
			Если ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("Строка") И НЕ ПустаяСтрока(ПереданныеПараметры.Адресаты) Тогда
				
				НоваяСтрока = Объект.Адресаты.Добавить();
				НоваяСтрока.Адрес = ПереданныеПараметры.Кому;
				НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из ПереданныеПараметры.Адресаты Цикл
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться  = ЭлементСписка.Значение;
					НоваяСтрока.Представление = ЭлементСписка.Представление;
					НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из ПереданныеПараметры.Адресаты Цикл
					
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться          = ЭлементМассива.Телефон;
					НоваяСтрока.ПредставлениеКонтакта = ЭлементМассива.Представление;
					НоваяСтрока.Контакт               = ЭлементМассива.ИсточникКонтактнойИнформации;
					НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПереданныеПараметры.Свойство("Предмет") Тогда
			Предмет = ПереданныеПараметры.Предмет;
		КонецЕсли;
		
		Если ПереданныеПараметры.Свойство("ОтправлятьВТранслите") Тогда
			Объект.ОтправлятьВТранслите = ПереданныеПараметры.ОтправлятьВТранслите;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОтправлено(Состояние)
	
	Возврат Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
	        И Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее");
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ШаблоныСообщений

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьШаблонПослеВыбора(Результат.Шаблон);
		Элементы.ТекстСообщения.ОбновитьТекстРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонПослеВыбора(ШаблонСсылка)
	
	ОбъектСообщение = РеквизитФормыВЗначение("Объект");
	ОбъектСообщение.Заполнить(ШаблонСсылка);
	ЗначениеВРеквизитФормы(ОбъектСообщение, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВозможностьЗаполненияПисьмаПоШаблону()
	
	ИспользуютсяШаблоныСообщений = Ложь;
	Если Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Черновик
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		Если МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений() Тогда
			ИспользуютсяШаблоныСообщений = МодульШаблоныСообщенийСлужебный.ЕстьДоступныеШаблоны("SMS");
		КонецЕсли;
	КонецЕсли;
	Элементы.ФормаСформироватьПоШаблону.Видимость = ИспользуютсяШаблоныСообщений;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// +SMS4B

&НаКлиенте
Функция SMS4B_ЗаполнитьСписокВыбораВремени()
	СписокВремени	= Новый СписокЗначений;
	ПустаяДата		= Дата("00010101");
	ТекВремя		= ПустаяДата;
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		СписокВремени.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	КонецЦикла;
	Возврат СписокВремени;
КонецФункции

&НаКлиенте
Функция SMS4B_ИсключениеВременногоПериода(Знач Начало, Знач Конец, Знач Т1 = 0, Знач Т2 = 0)
	Если ТипЗнч(Начало) = Тип("Дата") Тогда
		Если ТипЗнч(Т1) = Тип("Дата") Тогда
			Т1 = Т1 - НачалоДня(Т1);
		КонецЕсли;
		Если ТипЗнч(Т2) = Тип("Дата") Тогда
			Т2 = Т2 - НачалоДня(Т2);
			Если Т2 = 0 Тогда
				Т2 = 86400;
			КонецЕсли;
		КонецЕсли;
		ДД = Мин(Конец, КонецДня(Начало) + 1);
		Всего = SMS4B_ИсключениеВременногоПериода(Начало - НачалоДня(Начало), ДД - НачалоДня(Начало), Т1, Т2);
		Если ДД < Конец Тогда
			Всего = Всего + SMS4B_ИсключениеВременногоПериода(0, Конец - НачалоДня(Конец), Т1, Т2);
			ПолныхДней = (НачалоДня(Конец) - ДД) / 86400;
			ЧастьДня = ?(Т1 > Т2, Т1 - Т2, 86400 - Т2 + Т1);
			Всего = Всего + ПолныхДней * ЧастьДня;
		КонецЕсли;
	Иначе
		Всего = Конец - Начало;
		Если Т1 <= Т2 Тогда
			Если (Т1 < Конец) И (Т2 > Начало) Тогда
				Всего = Всего - (Т2 - Т1) + ?(Т1 < Начало, Начало - Т1, 0) + ?(Т2 > Конец, Т2 - Конец, 0);
			КонецЕсли;
		Иначе
			Всего = Всего - ?(Начало < Т2, Т2 - Начало, 0) - ?(Конец > Т1, Конец - Т1, 0);
		КонецЕсли;
	КонецЕсли;
	Возврат Всего;
КонецФункции

&НаКлиенте
Функция SMS4B_ПолучитьПредставлениеВремени(Время)
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(86400,	"ru='дня(ей)'");
	СписокВремен.Добавить(3600,		"ru='часа(ов)'");
	СписокВремен.Добавить(60,		"ru='минут(ы)'");
	СписокВремен.Добавить(1,		"ru='секунд(ы)'");
	Текст = "";
	Для Каждого Элемент Из СписокВремен Цикл
		Если Время >= Элемент.Значение Тогда
			Текст = Формат(Время / Элемент.Значение, "ЧДЦ=1; ЧРД=.; ЧГ=0") + " " + НСтр(Элемент.Представление);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура SMS4B_ВставитьШаблонПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_ВставитьШаблонЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Справочник.SMS4B_ШаблоныСообщений.ФормаВыбора", , ЭтотОбъект, , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВставитьШаблонЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	SMS4B_ЗаполнитьТекстПоШаблонуСообщения(Результат);
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ЗаполнитьТекстПоШаблонуСообщения(ШаблонСообщения)
	
	Объект.ТекстСообщения = ШаблонСообщения.Содержание;
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущаяСтрока.Контакт,
				SMS4B_ТаблицаАвтотекста);
		КонецЦикла;
	КонецЕсли;
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
		Объект.ОтправлятьВТранслите,
		Объект.ТекстСообщения);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ОбновитьИспользованиеАвтотекста()
	
	ЕстьАвтотекст = Ложь;
	ТекстПоиска = Объект.ТекстСообщения;
	Для Каждого СтрокаАвтотекста Из SMS4B_ТаблицаАвтотекста Цикл
		Если СтрНайти(ТекстПоиска, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЕстьАвтотекст = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Объект.SMS4B_ЕстьАвтотекст = ЕстьАвтотекст;
	
	Если НЕ ЕстьАвтотекст Тогда 
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ТекстСообщенияПриИзмененииНаСервере()
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущаяСтрока.Контакт,
				SMS4B_ТаблицаАвтотекста);
		КонецЦикла;
	КонецЕсли;
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
		Объект.ОтправлятьВТранслите,
		Объект.ТекстСообщения);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УправлениеДоступностью()
	
	СообщениеОтправлено = СообщениеОтправлено(Объект.Состояние);
	
	Элементы.SMS4B_НачалоПериодаЗапрета.Доступность = Объект.SMS4B_ИспользоватьПериодЗапрета;
	Элементы.SMS4B_КонецПериодаЗапрета.Доступность  = Объект.SMS4B_ИспользоватьПериодЗапрета;
	Элементы.SMS4B_АдресатыТекстСообщения.Видимость = Объект.SMS4B_ЕстьАвтотекст;
	
	Элементы.SMS4B_ИмяОтправителяБаланс.Доступность = Не СообщениеОтправлено;
	Элементы.SMS4B_ПанельШаблоны.Доступность = Не СообщениеОтправлено;
	
	Элементы.SMS4B_ГруппаАдресатыПроверка.Доступность = Не СообщениеОтправлено;
	
КонецПроцедуры

&НаСервере
Функция SMS4B_ОбновитьНастройкиСервиса()
	
	РезультатПодключения = SMS4B_ОтправкаSMS.SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПодключения.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	SMS4B_НастройкиСервиса = Новый ФиксированнаяСтруктура(РезультатПодключения.НастройкиСервиса);
	
	Баланс = Формат(SMS4B_НастройкиСервиса.ОстатокПоСчету, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00" ) + НСтр("ru=' руб.'");
	
	Если Объект.SMS4B_ТипСообщения <> Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ИменаОтправителя = SMS4B_НастройкиСервиса.ИменаОтправителя;
		СписокВыбора = Элементы.SMS4B_ИмяОтправителя.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ИмяОтправителя Из ИменаОтправителя Цикл
			СписокВыбора.Добавить(ИмяОтправителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция SMS4B_ПроверитьЗаполнениеАдресатов()
	
	ЕстьОшибки = Ложь;
	СписокТелефонов = Новый СписокЗначений;
	
	Для Каждого Адресат Из Объект.Адресаты Цикл
		
		АдресатНомерТелефона = Адресат.КакСвязаться;
		
		НачальныйНомер = СтрНайти(АдресатНомерТелефона, "(", НаправлениеПоиска.СКонца) - 1;
		КонечныйНомер  = СтрНайти(АдресатНомерТелефона, ")", НаправлениеПоиска.СКонца);
		КоличествоСимволов = КонечныйНомер - НачальныйНомер + 1;
		
		// Исключим из анализа телефона вид, указанный в скобках
		СтрокаВидКИ = Сред(АдресатНомерТелефона, НачальныйНомер, КоличествоСимволов);
		АдресатНомерТелефона = СтрЗаменить(АдресатНомерТелефона, СтрокаВидКИ, "");
		
		Если ПустаяСтрока(АдресатНомерТелефона) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Номер телефона"" не заполнено.'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		ИначеЕсли СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресатНомерТелефона, ";",
			Истина).Количество() > 1 Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Должен быть указан только один номер телефона'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		Иначе
			Если КорректноВведенНомерТелефона(АдресатНомерТелефона) Тогда
				Если СписокТелефонов.НайтиПоЗначению(АдресатНомерТелефона) = Неопределено Тогда
					СписокТелефонов.Добавить(АдресатНомерТелефона);
					Адресат.НомерДляОтправки = SMS4B_ОтправкаSMS.ФорматироватьНомер(АдресатНомерТелефона);
				Иначе
					ЕстьОшибки = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Номер телефона уже присутствует в таблице адресатов!'"), ,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
				КонецЕсли;
			Иначе
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Номер телефона должен быть указан в формате ""+xx (xxx) xxxxxxx"".'"), ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
			КонецЕсли;
		КонецЕсли;
		Если Объект.SMS4B_ЕстьАвтотекст И ПустаяСтрока(Адресат.SMS4B_ТекстСообщения) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Текст сообщения"" не заполнено.'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "SMS4B_ТекстСообщения"));
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция КорректноВведенНомерТелефона(НомерТелефона)
	Возврат Взаимодействия.КорректноВведенНомерТелефона(НомерТелефона);
КонецФункции

&НаСервере
Процедура SMS4B_ВыделитьАдресатовСОдинаковымиТелефонами()
	
	SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216, 218, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 195, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 172, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 156));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 180));
	МассивЦветов.Добавить(Новый Цвет(196, 154, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 162, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 192, 218));
	МассивЦветов.Добавить(Новый Цвет(148, 218, 228));
	УжеПроверенныеНомера = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		ТекНомер = СтрокаТаблицы.КакСвязаться;
		Если НЕ ЗначениеЗаполнено(ТекНомер) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ (УжеПроверенныеНомера.Найти(ТекНомер) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		УжеПроверенныеНомера.Добавить(ТекНомер);
		НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ТекНомер));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			ОформлениеЭлемента = SMS4B_ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Адресаты");
			НовоеПоле.Использование = Истина;
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				ИндексСтроки = Объект.Адресаты.Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект.Адресаты.Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьАдресатовСОдинаковымиТелефонами()
	
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", СтрокаТЧ.КакСвязаться));
		Если МассивСтрок.Количество() > 1 Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЦикла;
	SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьАдресатовБезТелефона()
	
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		Если ПустаяСтрока(СтрокаТЧ.КакСвязаться) Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами()
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных("Адресаты") Тогда
				Продолжить;
			КонецЕсли;
			ОформлениеЭлемента = SMS4B_ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка
			УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция SMS4B_ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// -SMS4B

// +CRM

#Область ОбработчикиЗаполнения

&НаСервере
// Процедура заполняет получателей по сегменту
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТЧПоСегменту()
	Запрос = Новый Запрос;
	Если CRM_Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		РеквизитыСКДСегмента = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
			CRM_Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(CRM_Сегмент,
				 РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла;
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД, НастройкиСписка, , ,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", CRM_Сегмент);
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент КАК Сегмент,
               |	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент КАК Сегмент,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабПартнеров Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.КонтактноеЛицо);
		Иначе	
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.Партнер);
		КонецЕсли;	
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоСегменту()	

&НаСервере
// Процедура заполняет получателей по результату отчета
//
// Параметры:
//	СписокСсылок	- СписокЗначений	- Список получателей из отчета
//
Процедура CRM_ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ЭлементСписка.Значение);
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоРезультатуОтчета()

&НаСервере
// Функция возвращает список номеров телефонов получателя
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов
//
Функция CRM_ПолучитьСписокНомеровТелефоновКонтрагента(Получатель)
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель, ,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(, Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Получатель,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаКИ Цикл
		НомерТелефона = SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если СтрНайти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // CRM_ПолучитьСписокНомеровТелефоновКонтрагента()

&НаСервере
// Функция возвращает массив клиентов, входящих в переданную группу
//
// Параметры:
//	ПартнерГруппа	- СправочникСсылка	- Группа клиентов
//
// Возвращаемое значение:
//	Массив	- Массив клиентов
//
Функция CRM_ПолучитьПартнеровГруппы(ПартнерГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ПартнерГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Партнеры.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	НЕ Партнеры.ПометкаУдаления
	                |	И НЕ Партнеры.ЭтоГруппа";
	Если ПартнерГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Партнеры.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Партнеры.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Партнеры.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьПартнеровГруппы()

&НаСервере
// Функция возвращает массив физических лиц, входящих в переданную группу
//
// Параметры:
//	ФизЛицоГруппа	- СправочникСсылка	- Группа физических лиц
//
// Возвращаемое значение:
//	Массив	- Массив физических лиц
//
Функция CRM_ПолучитьФизическихЛицГруппы(ФизЛицоГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ФизЛицоГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |ГДЕ
	                |	НЕ ФизическиеЛица.ПометкаУдаления
	                |	И НЕ ФизическиеЛица.ЭтоГруппа";
	Если ФизЛицоГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И ФизическиеЛица.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	ФизическиеЛица.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьФизическихЛицГруппы()

&НаСервере
// Процедура загружает данные из шалона
//
// Параметры:
//	ШаблонОбъект	- СправочникОъект	- Шалон
//
Процедура CRM_ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект, ОбъектЗначение, ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение, Объект);
КонецПроцедуры // CRM_ЗагрузитьИзШаблонаНаСервере()

&НаСервере
// Процедура добавляет получателей, входящих в переданную группу
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа пользователей
//
Процедура CRM_ДобавитьПолучателейПоГруппеПользователей(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей)
		 Или НЕ (ТипЗнч(ГруппаПользователей) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		Возврат;
	КонецЕсли;
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ПользовательСсылка);
		НоваяСтрока 						= Объект.Адресаты.Добавить();
		НоваяСтрока.Контакт					= ПользовательСсылка;
		НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
			НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ДобавитьПолучателейПоГруппеПользователей()

&НаСервере
// Процедура - обработчик события "Выбор"
//
// Параметры:
//	ВыбранноеЗначение	- СправочникСсылка	- Выбранное значение
//
Процедура CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Партнеры.ПустаяСсылка()) Тогда
			мПартнеры = CRM_ПолучитьПартнеровГруппы(ВыбранноеЗначение);
			Для Каждого эПартнер Из мПартнеры Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эПартнер);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
			мФизЛица = CRM_ПолучитьФизическихЛицГруппы(ВыбранноеЗначение);
			Для Каждого эФизЛицо Из мФизЛица Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эФизЛицо);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранныйПользовательГруппа);
				НоваяСтрока 						= Объект.Адресаты.Добавить();
				НоваяСтрока.Контакт					= ВыбранныйПользовательГруппа;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				КонецЕсли;	
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				CRM_ДобавитьПолучателейПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработкаВыбораНаСервере()

&НаСервере
Процедура CRM_ЗаполнитьТЧПоРезультатуСКД(СписокСсылок)
	
	Если CRM_ТолькоОсновныеКонтактныеЛица Тогда // список должен состоять из СправочникСсылка.Партнеры
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Партнер,
			|	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	НЕ Партнеры.ПометкаУдаления
			|	И Партнеры.Ссылка В (&МассивПартнеров)
			|	И НЕ Партнеры.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок";
		
		Запрос = Новый Запрос;		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
		ТабПартнеров = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаб Из ТабПартнеров Цикл
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.КонтактноеЛицо);
			Иначе	
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.Партнер);
			КонецЕсли;	
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока = Объект.Адресаты.Добавить();
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
				Иначе
					НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
				КонецЕсли;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
				НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
				НоваяСтрока = Объект.Адресаты.Добавить();
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
				Иначе
					НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
				КонецЕсли;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // по алгоритму ЗаполнитьПоРезультатуОтчета	
	
		Для Каждого ЭлементСписка Из СписокСсылок Цикл
			Если НЕ ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;

			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ЭлементСписка.Значение);
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока							= Объект.Адресаты.Добавить();
				НоваяСтрока.Контакт					= ЭлементСписка.Значение;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
				НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
				НоваяСтрока							= Объект.Адресаты.Добавить();
				НоваяСтрока.Контакт					= ЭлементСписка.Значение;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект,ТипФормы", АдресВХранилище, "ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта", ПолучитьПараметрыДляВыгрузки(),
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИнтереса

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, ,
		 ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка),
		 Объект.Ссылка.Пустая());
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьДанныеБизнесСтатистики()
	
	Если CRM_КонтекстВызова = Неопределено Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.БезКонтекста");
	ИначеЕсли CRM_КонтекстВызова = "SMS4B_ФормаСписка" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.ДокументСообщениеSMS");
	ИначеЕсли ТипЗнч(CRM_КонтекстВызова) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.Задача");
	ИначеЕсли ТипЗнч(CRM_КонтекстВызова) = Тип("СправочникСсылка.Партнеры") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.КарточкаКлиента");
	ИначеЕсли ТипЗнч(CRM_КонтекстВызова) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.КарточкаКонтактногоЛицаКлиента");
	ИначеЕсли ТипЗнч(CRM_КонтекстВызова) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.КарточкаПотенциальногоКлиента");
	ИначеЕсли ТипЗнч(CRM_КонтекстВызова) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.SMS.Отправка.ФормаИнтереса");
	КонецЕсли;
	
КонецПроцедуры

// -CRM

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекущийЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстСообщения");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарии");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти
