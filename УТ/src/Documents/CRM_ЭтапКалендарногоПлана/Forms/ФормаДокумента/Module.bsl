
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Контрольной точки'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		Документ_CRM_ЭтапКалендарногоПлана_ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГруппаЕще");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ЭтоНовый = Ложь;
		Если Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена
			 ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Проект) И Объект.Проект.ЭтоГруппа Тогда
			//
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите элемент,
				| а не группу!';en='Select item,
				| instead of group!'"));
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("Начало") Тогда
			Объект.ПлановаяДатаНачала = Параметры.Начало;
		КонецЕсли;
		Если Параметры.Свойство("Окончание") Тогда
			Объект.ПлановаяДатаОкончания = Параметры.Окончание;
		КонецЕсли;
		Если Параметры.Свойство("Наименование") Тогда
			Объект.Тема = Параметры.Наименование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
			Объект.ПлановаяДатаНачала = ТекущаяДатаСеанса();
		КонецЕсли;

		// // Заполним ответственных по КТ.
		//УчастникиДобавитьОтветственных();
		ЭтоНовый = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		СтатусПроекта = Объект.Проект.CRM_Статус;
	Иначе 
		СтатусПроекта = Перечисления.CRM_СтатусыПроектов.Планируется;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	УстановитьДоступностьРеквизитов(?(Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена,
		 Ложь,
		 Истина));
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СформироватьПредставлениеВложений();
	
	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Команды["ВернутьВРаботу"].Подсказка = НСтр("ru='Вернуть в работу контрольную точку';
			|en='Return check point to work'");
		Команды["Отменить"].Подсказка = НСтр("ru='Отменить контрольную точку';en='Cancel Check Point'");
	Иначе
		Команды["ВернутьВРаботу"].Подсказка = НСтр("ru='Вернуть в работу задачу проекта';
			|en='Return to work project task'");
		Команды["Отменить"].Подсказка = НСтр("ru='Отменить задачу проекта';en='Cancel task of project'");
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	УчитыватьПроизводственныйКалендарь = Объект.Проект.CRM_УчитыватьПроизводственныйКалендарь;
	
	Если УчитыватьПроизводственныйКалендарь Тогда
		Элементы.ДекорацияПродолжительностьДней.ОтображениеПодсказки     = ОтображениеПодсказки.Кнопка;
		Элементы.ДекорацияПродолжительностьДнейФакт.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ДекорацияПродолжительностьДней.ОтображениеПодсказки     = ОтображениеПодсказки.Нет;
		Элементы.ДекорацияПродолжительностьДнейФакт.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Тема) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеКонтекстов();

КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	Строки = Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина));
	Если Строки.Количество() = 0 Тогда
		Если Объект.Участники.Количество() = 1 Тогда
			Объект.Участники[0].Ответственный = Истина;
		ИначеЕсли ПраваНаЧекЛист = "Ограниченные"
			 И Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ДействиеПослеВопроса", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Нет прав на указание других участников в качестве Ответственного! Указать Вас?';
				|en='There is no permission to specify other participants as Responsible Person! Would you like to specify yourself?'"),
				 РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		Объект.ПлановаяДатаОкончания	= Объект.ПлановаяДатаНачала;
		Объект.ФактическаяДатаОкончания = Объект.ФактическаяДатаНачала;
		Объект.ПлановаяДлительность 	= 0;
		Объект.ФактическаяДлительность  = 0;
	КонецЕсли;
	
	//Если ПолучитьЗначениеРеквизита(Объект.Проект, "CRM_Статус") =
	// ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе")
		// И ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И
	//Объект.ПлановаяДатаНачала <= НачалоДня(ТекущаяДата()) И Объект.Статус =
	// ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована") Тогда
	//	
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	//	УстановитьДоступностьРеквизитов(Истина);
	//	
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Проект);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИмяФормыПроекта = "Справочник.Проекты.Форма.CRM_ФормаЭлемента";
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Проекты.Формы",
		 "CRM_Модуль_ФормаЭлемента") Тогда
		ИмяФормыПроекта = "Справочник.Проекты.Форма.CRM_Модуль_ФормаЭлемента";
	Иначе
		ИмяФормыПроекта = "Справочник.Проекты.ФормаОбъекта";
	КонецЕсли;
	ПолученнаяФорма = ПолучитьФорму(ИмяФормыПроекта, ПараметрыФормы);
		
	Если ПолученнаяФорма.Открыта() Тогда
		ФормаПроектаОткрыта = Истина;
	КонецЕсли;
	
	// Проверим владельца формы
	Если НЕ ФормаПроектаОткрыта Тогда
		Если ВладелецФормы <> Неопределено Тогда
			Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецФормы, "Объект")
				И ВладелецФормы.Объект.Свойство("Ссылка")
				И ВладелецФормы.Объект.Ссылка = Объект.Проект Тогда
				ФормаПроектаОткрыта = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ТекущийОбъект.Ссылка.Пустая()
		 И НЕ ТекущийОбъект.Ссылка.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена
	И НЕ ТекущийОбъект.Ссылка.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена
	И (ТекущийОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена
		 ИЛИ ТекущийОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена ) Тогда
		CRM_ОповещенияСервер.УдалитьОповещения(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Проверим что есть ответственный за КТ.
	Строки = Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина));
	Если Строки.Количество() = 0 Тогда
	// Если Объект.Участники.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Необходимо указать ответственного!';
							|en='It is necessary to specify at least one responsible for test point!'"), , "Участники[0].Ответственный" 
						, "Объект",
						Отказ);
	КонецЕсли;
	
	Если (Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") ИЛИ 
		  Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена")) И
		  НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Для текущего статуса необходимо указать дату закрытия!';en='For the current status, you must specify a closing date!'"), , "Объект.ПлановаяДатаОкончания", , Отказ);
		
	КонецЕсли;

	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И Объект.ФактическаяДатаНачала < Объект.ПлановаяДатаНачала Тогда
			Поле = "Объект.ФактическаяДатаНачала";
			ТекстОшибки = НСтр("ru='Фактическая дата не может быть меньше плановой даты';
				|en='Actual date cannot be less than the planned date'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Истина);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания)
		 И Объект.ФактическаяДатаНачала > Объект.ФактическаяДатаОкончания Тогда
		Поле = "Объект.ФактическаяДатаОкончания";
		ТекстОшибки = НСтр("ru='Фактическая дата окончания не может быть меньше фактической даты начала';
			|en='Actual end date cannot be less than actual start date'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Истина);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И Объект.ПлановаяДатаНачала > Объект.ПлановаяДатаОкончания Тогда
		Поле = "Объект.ПлановаяДатаОкончания";
		ТекстОшибки = НСтр("ru='Плановая дата окончания не может быть меньше плановой даты начала';
			|en='Planned end date cannot be less than planned start date'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Истина);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьПланыПроектов", , ЭтотОбъект);

	// Оповещение календарю о записи документа.
	Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
		 Объект.Ссылка, Параметры.ОбновлятьКалендарь),
		 ЭтотОбъект);
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьПланировщик");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// Измененим плановую дату окончания при необходимости
	ПроектОбъект = ТекущийОбъект.Проект.ПолучитьОбъект();
	ЗаписатьПроект = Ложь;
	Если НЕ ФормаПроектаОткрыта Тогда
		
		МаксимальнаяПлановаяДатаОкончания =
			CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(ТекущийОбъект.Проект);
		Если ТекущийОбъект.Проект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
			ПроектОбъект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
			ЗаписатьПроект = Истина;
		КонецЕсли;
		
		МинимальнаяДатаНачала = CRM_УправлениеПроектамиВызовСервера.ПолучитьДатуНачалаПроекта(ТекущийОбъект.Проект);
		Если МинимальнаяДатаНачала <> Неопределено Тогда
			Если ТекущийОбъект.Проект.ДатаНачала <> МинимальнаяДатаНачала Тогда
				ПроектОбъект.ДатаНачала = МинимальнаяДатаНачала;
				ЗаписатьПроект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(ТекущийОбъект.Проект);
		Если ТекущийОбъект.Проект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
			ПроектОбъект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
			ЗаписатьПроект = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроект Тогда
			ПроектОбъект.Записать();
		КонецЕсли;
		
		ФормаПроектаОткрыта = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		 И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	РеквизитыСсылки = ЗначенияРеквизитовПроекта(Объект.Проект);
	// Заполняем подразделение только, если оно пустое.
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = РеквизитыСсылки.Подразделение;
	КонецЕсли;
	Объект.Этап = РеквизитыСсылки.ТекущийЭтап;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьОтветственными(Команда)
	УчастникиДобавитьОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчистить(Команда)
	
	Если Объект.Участники.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПользователиОчиститьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru='Список пользователей будет очищен. Продолжить?';
			|en='The list of users will be cleared. Continue?'"), РежимДиалогаВопрос.ОКОтмена,
			 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.Участники.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиПодбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ПланируемаяДата", Объект.ПлановаяДатаНачала);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьПоПодразделению(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РазрешитьВыборКорня", Истина);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиДатуКТ(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаСтарая", НачалоДня(Объект.ПлановаяДатаНачала));
	СтруктураПараметров.Вставить("ТипЭтапа", Объект.ТипЭтапа);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПеренестиДатуКТЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаПереносаСроков", СтруктураПараметров,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиДатуКТЗавершение(ВведенныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВведенныеДанные)  Тогда
		
		// Получены данные для смещения срока КТ.
		ДатаВремяНачала = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВведенныеДанные.ДатаНачала);
		ДатаВремяОкончания = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВведенныеДанные.ДатаОкончания);
		Строка = Объект.Смещения.Добавить();
		Строка.СмещениеДатаНачало = Объект.ПлановаяДатаНачала;
		Строка.СмещениеДатаОкончание = Объект.ПлановаяДатаОкончания;
		Строка.Комментарий 	 = ВведенныеДанные.Комментарий;
		Строка.Автор		 = ПользователиКлиентСервер.ТекущийПользователь();
		// изменим дату КТ
		Объект.ПлановаяДатаНачала = НачалоДня(ВведенныеДанные.ДатаНачала);
		Объект.ПлановаяДатаОкончания = НачалоДня(ВведенныеДанные.ДатаОкончания);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СмещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СмещенияКомментарий" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Комментарий);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если не массив, то превратим в массив.
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		МассивВрем = Новый Массив;
		МассивВрем.Добавить(ВыбранноеЗначение);
		ВыбранноеЗначение =  МассивВрем;
	КонецЕсли;
	
	Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ЭлементМассива));
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Пользователь = ЭлементМассива;
				КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
				НоваяСтрока.Адрес = КИПользователя.Адрес;
				НоваяСтрока.Телефон = КИПользователя.Телефон;
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			МассивПользователей = ПолучитьПользователейПодразделения(ЭлементМассива);
			Для каждого Элемент Из МассивПользователей Цикл
				
				Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Элемент));
				Если Строки.Количество() = 0 Тогда
					НоваяСтрока = Объект.Участники.Добавить();
					НоваяСтрока.Пользователь = Элемент;
					КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
					НоваяСтрока.Адрес = КИПользователя.Адрес;
					НоваяСтрока.Телефон = КИПользователя.Телефон;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И (НЕ Элемент.ТекущиеДанные.Добавлена
			И (Элемент.ТекущиеДанные.Пользователь <> ТекущийПользователь ИЛИ Элемент.ТекущиеДанные.Ответственный)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
// BSLLS:ServerSideExportFormMethod-off
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
// BSLLS:ServerSideExportFormMethod-on
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	Модифицированность = Истина;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
		Объект.ФактическаяДатаНачала = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	УстановитьДоступностьРеквизитов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания)
		 ИЛИ Объект.ФактическаяДатаОкончания < Объект.ФактическаяДатаНачала Тогда
		Объект.ФактическаяДатаОкончания = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	ФактическаяДатаОкончанияПриИзменении(Элементы.ФактическаяДатаОкончания);
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена");
		Если НЕ ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда
			Объект.ФактическаяДатаНачала = Объект.ПлановаяДатаНачала;
		КонецЕсли;
		УстановитьДоступностьРеквизитов(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	Модифицированность = Истина;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") Тогда
	
		Оповещение = Новый ОписаниеОповещения("ВернутьВРаботуПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст =
				НСтр("ru='Вернуть в работу даннную контрольную точку (фактическая дата будет очищена) ?';en='Do you want return to work this check point (actual date will be cleared) ?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст =
				НСтр("ru='Вернуть в работу даннную задачу (фактическая дата окончания будет очищена) ?';en='Return this task to work? The actual end date will be cleared.'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	ИначеЕсли КонецДня(Объект.ПлановаяДатаНачала) <= КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда 
		Если ПолучитьЗначениеРеквизита(Объект.Проект,
			 "CRM_Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
		Иначе
			Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована");
		КонецЕсли;
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
		Объект.ФактическаяДатаОкончания = Дата(1, 1, 1);
		Объект.ФактическаяДлительность = 0;
	КонецЕсли;
	
	ТолькоПросмотр = Ложь;
	
	Объект.КомментарийОтменыЗадачи = "";
	УстановитьДоступностьРеквизитов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	Модифицированность = Истина;
	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена");
	УстановитьДоступностьРеквизитов(Ложь);
	ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Модифицированность = Истина;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
		Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст = НСтр("ru='Действительно отменить контрольную точку,
				| находящуюся в работе?';en='Are you sure to cancel check point in progress?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст = НСтр("ru='Действительно отменить задачу,
				| находящуюся в работе?';en='Are you sure to cancel task in progress?'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
		Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст = НСтр("ru='Действительно отменить выполненную контрольную точку?';
				|en='Are you sure to cancel completed check point?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст = НСтр("ru='Действительно отменить выполненную задачу?';en='Are you sure to cancel completed task?'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена");
		УстановитьДоступностьРеквизитов(Ложь);
	КонецЕсли;
	ТолькоПросмотр = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалаПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаОкончанияПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДлительностьПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаНачалаПриИзменении(Элемент)
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		УстановкаРазрешена = Истина;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			// Проверим наличие файлов с необходимым контекстом
			СписокНедостающихКонтекстов = Новый СписокЗначений;
			
			CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Объект.Ссылка,
				 СписокНедостающихКонтекстов);
			
			Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
				УстановкаРазрешена = Ложь; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановкаРазрешена Тогда
			РассчитатьПродолжительность(Элемент);
		Иначе
			Объект.ФактическаяДатаНачала = "";
			
			Сообщение = НСтр("ru='Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:';en='To complete checkpoint,
				| attach file(s) of following context:'");
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЕсли;
	Иначе
		РассчитатьПродолжительность(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаОкончанияПриИзменении(Элемент)
	
	УстановкаРазрешена = Истина;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
		
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Объект.Ссылка,
			 СписокНедостающихКонтекстов);
		
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстановкаРазрешена Тогда
		РассчитатьПродолжительность(Элемент);
	Иначе
		Объект.ФактическаяДатаОкончания = "";
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Сообщение =
				НСтр("ru='Для завершения задачи необходимо присоединить файл(ы) следующего контекста:';en='It is necessary to attach the file(s) to complete task in following context:'");
		Иначе
			Сообщение = НСтр("ru='Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:';en='To complete checkpoint,
				| attach file(s) of following context:'");
		КонецЕсли;
		Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
			Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДлительностьПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(ТекДанные.Пользователь);
		ТекДанные.Адрес = КИПользователя.Адрес;
		ТекДанные.Телефон = КИПользователя.Телефон;
	Иначе
		ТекДанные.Адрес = "";
		ТекДанные.Телефон = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокАдресов = СформироватьСписокКИ(ТекДанные.Пользователь, "АдресЭлектроннойПочты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Адрес");
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения,
		 НСтр("ru='Выберите адрес электронной почты';
		|en='Select email address'"));
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокТелефонов = СформироватьСписокКИ(ТекДанные.Пользователь, "Телефон");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Телефон");
	СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите телефон';en='Select phone'"));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКИЗавершение(ВыбранныйЭлемент, ИмяРеквизита) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекДанные = Элементы.Пользователи.ТекущиеДанные;
		ТекДанные[ИмяРеквизита] = ВыбранныйЭлемент.Значение.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		Заголовок = Объект.Тема;
	Иначе
		Заголовок = НСтр("ru='Введите наименование...';en='Enter name...'"); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПередНачаломИзменения(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЧекЛистОписаниеЗадачи" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКонтекстаФайловПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОтветственныйПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекДанные.Ответственный Тогда
		Для каждого СтрОтветственный Из Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина)) Цикл
			СтрОтветственный.Ответственный = Ложь;
		КонецЦикла;
		ТекДанные.Ответственный = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКонтекстаФайловПриИзменении(Элемент)
	СформироватьПредставлениеКонтекстов();
КонецПроцедуры

&НаКлиенте
Процедура ТЧСОграничениемПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Текданные.Добавлена = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьОписаниеВЧекЛист(Команда)
	
	Если ПустаяСтрока(Объект.Описание) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("en = 'The description is not filled in.'; ru = 'Не заполнено описание.'"), ,
			"Описание",
			"Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ЧекЛист.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПреобразоватьОписаниеВЧекЛистПродолжение", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("en = 'Clear the current checklist?'; ru = 'Очистить текущий чек-лист?'"),
			РежимДиалогаВопрос.ДаНетОтмена, , ,
			НСтр("en = 'Transferring the description to the checklist'; ru = 'Перенос описания в чек-лист'"));
	Иначе
		ПреобразоватьОписаниеВЧекЛистПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПреобразоватьОписаниеВЧекЛист()

// +CRM_Модуль
&НаКлиенте
Процедура Подключаемый_ИнцидентыПоПредмету()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписьДокументаПередОткрытиемИнцидентов", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		                     |Переход к ""Инциденты"" возможен только после записи данных.
		                     |Данные будут записаны.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
		ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДокументаПередОткрытиемИнцидентов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
	ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
// -CRM_Модуль

#КонецОбласти //ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

&НаСервере
Функция СформироватьСписокКИ(Пользователь, ТипСтрокой)
	
	Массив = Новый Массив;
	Массив.Добавить(Пользователь);
	КИПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив,
		 Перечисления.ТипыКонтактнойИнформации[ТипСтрокой]);
	
	СписокТелефонов = Новый СписокЗначений;
	
	Если НЕ КИПользователя = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из КИПользователя Цикл
			
			Если НЕ ТекСсылка = Пользователь Тогда
				СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураНомера.Вставить("Объект"			, Пользователь);
				СписокТелефонов.Добавить(СтруктураНомера, Строка(Пользователь));
				ТекСсылка = Пользователь;
			КонецЕсли;
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, Пользователь);
			СписокТелефонов.Добавить(СтруктураНомера, "   " + СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокТелефонов;
	
КонецФункции

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Результат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
	Иначе
		Результат = Новый СписокЗначений;
		ПоследнийЭлемент = Неопределено;
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = СтрНайти(Стр, "=");
				Если Поз <> 0 Тогда
					ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз + 1), Лев(Стр, Поз - 1));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Добавляет строки участников, ответственных по проекту.
Процедура УчастникиДобавитьОтветственных()
	
	Если НЕ Объект.Проект.Пустая() И Не Объект.Проект.ЭтоГруппа И ЗначениеЗаполнено(Объект.Проект.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.Проект.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.Проект.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Этап.Пустая() И Не Объект.Этап.ЭтоГруппа И ЗначениеЗаполнено(Объект.Этап.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.Этап.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.Этап.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовПроекта(ПроектСсылка)
	Возврат Новый Структура("Подразделение, ТекущийЭтап", ПроектСсылка.CRM_Подразделение, ПроектСсылка.CRM_ТекущийЭтап);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователейПодразделения(Подразделение)

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И Пользователи.Подразделение = &Подразделение";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ПолучитьПользователейПодразделения()

&НаКлиенте
Процедура ВернутьВРаботуПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
		Объект.ФактическаяДатаОкончания = "";
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Объект.ФактическаяДатаНачала = "";
		КонецЕсли;
		Объект.ФактическаяДлительность = 0;
		ТолькоПросмотр = Ложь;
		УстановитьДоступностьРеквизитов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПродолжение(Результат, ДопПараметры) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжениеВводКомментария", ЭтотОбъект);

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыОткрытия = Новый Структура("ТипОбъекта", Объект.ТипЭтапа);
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаВводаКомментария", ПараметрыОткрытия,
			 , , , , Оповещение,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПродолжениеВводКомментария(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена");
		Элементы.КомментарийОтменыЗадачи.Видимость = Истина;
		Объект.КомментарийОтменыЗадачи = Результат;
		
		УстановитьДоступностьРеквизитов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитов(Доступность)
	
	Элементы.ГруппаШапка.ТолькоПросмотр = ((Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена 
												И НЕ (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Объект.Проект.Ответственный = Пользователи.ТекущийПользователь()))
											ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена 
											ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена);

	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.Имя = "Автор" Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Элемент.ТолькоПросмотр = НЕ Доступность;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") И Элемент.Имя <> "ФормаСкопировать" Тогда
			Элемент.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Истина;
	Элементы.ФормаЗаписать.Доступность 		 = Истина;
	
	Элементы.ВернутьВРаботу.Видимость 	= НЕ Доступность;
	Элементы.ВернутьВРаботу.Доступность = НЕ Доступность;
	
	Элементы.Отменить.Видимость	 		= Доступность;
	Элементы.Отменить.Доступность 		= Доступность;
	
	Элементы.ВыполнитьЗадачу.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
		
	Если Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена
		 ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена Тогда 
		Элементы.Отменить.Видимость 					 = Ложь;
		Элементы.Отменить.Доступность 					 = Ложь;
		Элементы.ВернутьВРаботу.Видимость 				 = Истина;
		Элементы.ВернутьВРаботу.Доступность				 = Истина;
		Элементы.ФактическаяДатаНачала.ТолькоПросмотр	 = Истина;
		Элементы.ФактическаяДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ФактическаяДлительность.ТолькоПросмотр	 = Истина;
		Элементы.Завершить.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена
			 И НЕ Элементы.ГруппаШапка.ТолькоПросмотр);
	Иначе	
		Элементы.Завершить.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомментарийОтменыЗадачи)
		 И Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
		Элементы.КомментарийОтменыЗадачи.Видимость = Истина;
	Иначе	
		Элементы.КомментарийОтменыЗадачи.Видимость = Ложь;
	КонецЕсли;
		
	ВидимостьФактДат = ?(СтатусПроекта = Перечисления.CRM_СтатусыПроектов.Планируется, Ложь, Истина);
	
	Элементы.ФактическаяДатаНачала.Видимость 		  	   = ВидимостьФактДат;
	Элементы.ФактическаяДатаОкончания.Видимость 		   = ВидимостьФактДат;
	Элементы.ФактическаяДлительность.Видимость 			   = ВидимостьФактДат;
	Элементы.ДекорацияПродолжительностьДнейФакт.Видимость  = ВидимостьФактДат;
	
	Элементы.Статус.ТолькоПросмотр = Истина;
	
	АвтоЗаголовок = Ложь;
	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
			Заголовок = НСтр("ru='Новая контрольная точка...';en='New Check Point...'");
		Иначе
			Заголовок = Объект.Тема;
		КонецЕсли;
		
		Элементы.Тема.ПодсказкаВвода = НСтр("ru='Введите наименование контрольной точки';en='Enter name of check point'");
		//Элементы.ПереносСроковЗадачи.Заголовок = НСтр("ru='Перенос сроков контрольной точки';
			//|en='Rescheduling of check point'");
		
		Элементы.ПлановаяДатаНачала.Заголовок    	= НСтр("ru='Плановая дата';en='Planned Date'");
		Элементы.ПлановаяДатаОкончания.Видимость 	= Ложь;
		Элементы.ПлановаяДлительность.Видимость  	= Ложь;
		Элементы.ДекорацияПродолжительностьДней.Видимость  = Ложь;
		
		Элементы.ФактическаяДатаНачала.Заголовок 	= НСтр("ru='Фактическая дата';en='Actual date'");
		Элементы.ФактическаяДатаОкончания.Видимость = Ложь;
		Элементы.ФактическаяДлительность.Видимость  = Ложь;
		Элементы.ДекорацияПродолжительностьДнейФакт.Видимость  = Ложь;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
			Заголовок = НСтр("ru='Новая задача проекта...';en='New project task...'");
		Иначе
			Заголовок = Объект.Тема;
		КонецЕсли;
		
		Элементы.Тема.ПодсказкаВвода = НСтр("ru='Введите наименование задачи проекта';en='Enter name of project task'");
		
	КонецЕсли;

	Если НЕ ЭтоНовый Тогда
		Элементы.Проект.ТолькоПросмотр = Истина;
		Элементы.Этап.ТолькоПросмотр = НЕ (Объект.ВведенВручную);
	КонецЕсли;
	
	// Права на редактирвание Чек-листа
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ПраваНаЧекЛист = "Полные";
		
	ИначеЕсли Объект.Автор = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Полные";
			
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) И Объект.Проект.Ответственный  = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Полные";
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Этап) И Объект.Этап.Ответственный  = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Ограниченные";
			
	ИначеЕсли Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество() > 0 Тогда
		
		ПраваНаЧекЛист = "Ограниченные";
			
	Иначе
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ЧекЛист.ИзменятьПорядокСтрок = (ПраваНаЧекЛист = "Полные");
	Элементы.ЧекЛист.ИзменятьСоставСтрок  = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ГруппаСтатусГоризонт1.Доступность = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ПользователиОтветственный.ТолькоПросмотр = (ПраваНаЧекЛист <> "Полные");
	Планируется = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована);
	Элементы.ПлановаяДатаНачала.ТолькоПросмотр		 = (ПраваНаЧекЛист <> "Полные" ИЛИ НЕ Планируется);
	Элементы.ПлановаяДатаОкончания.ТолькоПросмотр	 = Элементы.ПлановаяДатаНачала.ТолькоПросмотр;
	Элементы.ПлановаяДлительность.ТолькоПросмотр	 = Элементы.ПлановаяДатаНачала.ТолькоПросмотр;
	Элементы.Описание.ТолькоПросмотр = (ПраваНаЧекЛист <> "Полные");
	
	Элементы.ПринятьВРаботу.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована
		 И СтатусПроекта = Перечисления.CRM_СтатусыПроектов.ВРаботе);
	
	Элементы.ГруппаВариантыКонтекстаФайлов.Доступность = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ВариантыКонтекстаФайлов.ИзменятьПорядокСтрок = (ПраваНаЧекЛист = "Полные");
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьПродолжительность(ТекущийЭлементПерерасчета)
	
	День = 86400; // 60*60*24 
	ДатаПлюсТриДня = КонецДня(ОбщегоНазначенияКлиент.ДатаСеанса()) + (День * 3);
	
	Если ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала
		 Или ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания
		 Или ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания)
			 И ЗначениеЗаполнено(Объект.ФактическаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала Тогда
			
			Объект.ФактическаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ФактическаяДатаНачала, Объект.ФактическаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания)
			 И ЗначениеЗаполнено(Объект.ФактическаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания Тогда
			
			Объект.ФактическаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
				Объект.ФактическаяДатаНачала, Объект.ФактическаяДатаОкончания, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания)
			 И ЗначениеЗаполнено(Объект.ФактическаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
			
			Объект.ФактическаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ФактическаяДатаНачала, Объект.ФактическаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
			
			Объект.ФактическаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
				Объект.ФактическаяДатаНачала, Объект.ФактическаяДатаОкончания, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) Тогда
			
			Объект.ФактическаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ФактическаяДатаНачала, Объект.ФактическаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) Тогда
			
			Объект.ФактическаяДатаНачала = ПолучитьДатуНачала(
				Объект.ФактическаяДатаОкончания, Объект.ФактическаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		КонецЕсли;
		
		Если Объект.ФактическаяДатаОкончания > ДатаПлюсТриДня
			 И Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Фактическая дата окончания не должна быть больше,
				| чем на 3 дня от текущей даты';en='Actual end date can not be more than 3 days from current date'"));
			Объект.ФактическаяДатаОкончания = '00010101';
			Объект.ФактическаяДлительность = 0;
			Возврат;
		ИначеЕсли Объект.ФактическаяДатаНачала > ДатаПлюсТриДня
			 И Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Фактическая дата не должна быть больше,
				| чем на 3 дня от текущей даты';en='Actual date can not be more than 3 days from current date'"));
			Объект.ФактическаяДатаНачала = '00010101';
			Объект.ФактическаяДлительность = 0;
			Возврат;
		КонецЕсли;
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Если (Объект.ФактическаяДатаНачала > Объект.ПлановаяДатаНачала
				 И ЗначениеЗаполнено(Объект.ПлановаяДатаНачала)
				 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала) ИЛИ
				(Объект.ФактическаяДатаОкончания > Объект.ПлановаяДатаОкончания
					 И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания)
					 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания) ИЛИ
				(Объект.ФактическаяДлительность > Объект.ПлановаяДлительность
					 И ЗначениеЗаполнено(Объект.ПлановаяДлительность)
					 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность) Тогда
				
				Если Объект.ФактическаяДлительность > Объект.ПлановаяДлительность
					 И ЗначениеЗаполнено(Объект.ПлановаяДлительность)
					 И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
					ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Если Объект.ФактическаяДатаНачала > Объект.ПлановаяДатаНачала И ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
				
				ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала;
				
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(Объект.ПлановаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ПлановаяДатаНачала Тогда
			
			Объект.ПлановаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ПлановаяДатаНачала, Объект.ПлановаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ПлановаяДатаОкончания Тогда
			
			Объект.ПлановаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
				Объект.ПлановаяДатаНачала, Объект.ПлановаяДатаОкончания, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала)
			 И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность)
			 И ТекущийЭлементПерерасчета = Элементы.ПлановаяДлительность Тогда
			
			Объект.ПлановаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ПлановаяДатаНачала, Объект.ПлановаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) Тогда
			
			Объект.ПлановаяДлительность = CRM_УправлениеПроектамиСервер.ПолучитьПродолжительностьПериода(
				Объект.ПлановаяДатаНачала, Объект.ПлановаяДатаОкончания, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) Тогда	
			
			Объект.ПлановаяДатаОкончания = ПолучитьДатуОкончания(
				Объект.ПлановаяДатаНачала, Объект.ПлановаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) Тогда
			
			Объект.ПлановаяДатаНачала = ПолучитьДатуНачала(
				Объект.ПлановаяДатаОкончания, Объект.ПлановаяДлительность, УчитыватьПроизводственныйКалендарь);
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуОкончания(ДатаНачала, Длительность, УчитыватьКалендарь = Истина)
	
	День = 86400;
	ДатаОкончания = '00010101';
	
	Если Длительность = 0 Тогда
		ДатаОкончания = ДатаНачала;
	ИначеЕсли УчитыватьКалендарь Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		ДлительностьПериода = Макс(0, Длительность - 1);
		ДатаОкончания = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаНачала, ДлительностьПериода, Ложь);
	Иначе
		ДатаОкончания = (НачалоДня(ДатаНачала)) + ((Длительность - 1) * День);
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуНачала(ДатаОкончания, Длительность, УчитыватьКалендарь = Истина)
	
	День = 86400;
	ДатаНачала = '00010101';
	
	ДатаНачала = (КонецДня(ДатаОкончания)) - ((Длительность - 1) * День);
	
	Если УчитыватьКалендарь Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		ДатаНачала = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаНачала, 1, Ложь, Ложь);
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("CRM_ЗапрашиватьКонтекст", Истина);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Действие возможно только после записи данных. Записать?';en='Data is not yet recorded."
"Action is possible only after recording the data. Record?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ЭтапПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	               |ИЗ
	               |	Справочник.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы КАК ЭтапПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭтапПрисоединенныеФайлы.ВладелецФайла = &Этап
	               |	И НЕ ЭтапПрисоединенныеФайлы.ПометкаУдаления
	               |	И НЕ ЭтапПрисоединенныеФайлы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеКонтекстов()
	
	ЧислоКонтекстов = Объект.ВариантыКонтекстаФайлов.Количество();
	Если ЧислоКонтекстов = 0 Тогда
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов'");
	Иначе
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов('") + ЧислоКонтекстов + ")"; 
	КонецЕсли;
	Элементы.ГруппаВариантыКонтекстаФайлов.Заголовок = КонтекстыПредставление;
	
КонецПроцедуры // СформироватьПредставлениеКонтекстов()

&НаКлиенте
Процедура ДействиеПослеВопроса(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
		Если Строки.Количество() > 0 Тогда
			Строки[0].Ответственный = Истина;
			Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьОписаниеВЧекЛистПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Отмена Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.ЧекЛист.Очистить();
		КонецЕсли;
		
		ВыделенныйТекст = Элементы.Описание.ВыделенныйТекст;
		
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			ВыделенныйТекст = Объект.Описание;
		КонецЕсли;
		
		СтрокиВыделенногоТекста = СтрРазделить(ВыделенныйТекст, Символы.ПС, Ложь);
		
		Для Каждого ТекущаяВыделеннаяСтрока Из СтрокиВыделенногоТекста Цикл
			Если Не ПустаяСтрока(ТекущаяВыделеннаяСтрока) Тогда
				НоваяСтрока = Объект.ЧекЛист.Добавить();
				НоваяСтрока.ОписаниеЗадачи = СокрЛП(ТекущаяВыделеннаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПреобразоватьОписаниеВЧекЛистПродолжение()

// +CRM
#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
// -CRM

&НаКлиенте
Процедура Подключаемый_CRM_СвернутьРазвернутьГруппу(Команда)
	Группа = Неопределено;
	Родитель = ТекущийЭлемент.Родитель;
	Пока Группа = Неопределено Цикл
		Если ТипЗнч(Родитель) = Тип("ГруппаФормы") И Родитель.Поведение = ПоведениеОбычнойГруппы.Всплывающая Тогда
			Группа = Родитель;
		Иначе
			Родитель = Родитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Если Группа <> Неопределено
		И Группа = Элементы.Найти("CRM_ГруппаРабочееВремяПользователей") Тогда
		
		Элементы.CRM_ГруппаРабочееВремяПользователей_Внутренняя.РастягиватьПоВертикали =
			Не Элементы.CRM_ГруппаРабочееВремяПользователей_Внутренняя.РастягиватьПоВертикали;
		Элементы.CRM_ГруппаРабочееВремяПользователей_Внутренняя.РастягиватьПоГоризонтали =
			Не Элементы.CRM_ГруппаРабочееВремяПользователей_Внутренняя.РастягиватьПоГоризонтали;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейОписаниеРаботыНачалоВыбора(Элемент,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	ОбработчикОповещения = Новый ОписаниеОповещения("РедактированиеОписанияРаботыПриОкончании",
		 ЭтотОбъект,
		 ДополнительныеПараметры); 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОбработчикОповещения,
		Элемент.ТекстРедактирования);
	
КонецПроцедуры

// Параметры:
//   ИзмененныйТекст         - Строка
//   ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура РедактированиеОписанияРаботыПриОкончании(ИзмененныйТекст, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	НайденнаяСтрока = ЭтотОбъект[Элемент.Родитель.Имя].НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока);
	ИндексСтроки    = ЭтотОбъект[Элемент.Родитель.Имя].Индекс(НайденнаяСтрока);
	
	Если ЭтотОбъект[Элемент.Родитель.Имя][ИндексСтроки].ОписаниеРаботы <> ИзмененныйТекст Тогда
		ЭтотОбъект[Элемент.Родитель.Имя][ИндексСтроки].ОписаниеРаботы = ИзмененныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекущийЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Результат");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти // СлужебныеПроцедурыИФункции
