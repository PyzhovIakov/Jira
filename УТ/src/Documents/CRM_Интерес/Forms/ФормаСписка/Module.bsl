
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Список");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	Элементы.ОтборПодразделениеДляТегов.Видимость = ИспользоватьПодразделения;
	
	CRM_ОбщегоНазначенияСервер.УдалитьЭлементОтбораСписка(Список, "Партнер");
	
	ОтборЗавершен = "Все";
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		Элементы.Список.РежимВыбора			= Параметры.РежимВыбора;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗакрыватьПриВыборе") И НЕ (Параметры.ЗакрыватьПриВыборе = Неопределено) Тогда
		ЗакрыватьПриВыборе			= Параметры.ЗакрыватьПриВыборе;
	КонецЕсли;
	
	Если Параметры.Свойство("МножественныйВыбор") И НЕ (Параметры.МножественныйВыбор = Неопределено) Тогда
		Элементы.Список.МножественныйВыбор	= Параметры.МножественныйВыбор;
	КонецЕсли;
	
	ТипОбращенияИнтерес = Справочники.CRM_ТипыОбращений.Интерес;
	
	ТолькоОбращенияПоддержки = Ложь;
	Если Параметры.Свойство("ТолькоОбращенияПоддержки") И Параметры.ТолькоОбращенияПоддержки Тогда
		ТолькоОбращенияПоддержки = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"ТипОбращения",
																			ТипОбращенияИнтерес,
																			ВидСравненияКомпоновкиДанных.НеРавно, ,
																			Истина,
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.ОтборТипОбращения.РежимВыбораИзСписка = Истина;
		ДанныеВыбора = Справочники.CRM_ТипыОбращений.ПолучитьДанныеВыбора(Новый Структура);
		Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
			Если ЭлементДанных.Значение = ТипОбращенияИнтерес Тогда
				Продолжить;
			КонецЕсли;
			НовыйЭлемент = Элементы.ОтборТипОбращения.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементДанных);
		КонецЦикла;
		
	КонецЕсли;
	
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ОтборТеги.Видимость = Ложь;
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
	Иначе
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов,
			 Истина));

		ОбновитьЗначенияОтбораТегов();
	КонецЕсли; 
	ОтбиратьОбъектыБезТегов = Ложь;
	
	Если Параметры.Свойство("ЭтоВыборИнтереса") И Параметры.ЭтоВыборИнтереса Тогда
		ЭтоВыборИнтереса = Истина;
	Иначе
		ОтборПользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
			Элементы.ФормаДокументCRM_СчетНаОплатуПокупателюСоздатьНаОсновании.Заголовок = "Заказ клиента";
		Иначе
			Элементы.ФормаДокументCRM_СчетНаОплатуПокупателюСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Элементы.Найти("ФормаОбщаяКомандаCRM_СоздатьЛичнуюЗадачу") <> Неопределено Тогда
		Элементы.ФормаОбщаяКомандаCRM_СоздатьЛичнуюЗадачу.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		
		ИнтересыКакПродажа = Ложь;
		ТипОбращенияПереданКакОтбор = Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ТипОбращения");
		Если НЕ ТолькоОбращенияПоддержки И ТипОбращенияПереданКакОтбор Тогда
			Если Параметры.Отбор.ТипОбращения = Справочники.CRM_ТипыОбращений.Интерес Тогда
				ИнтересыКакПродажа = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ИнтересыКакПродажа Тогда
			
			АвтоЗаголовок = Ложь;
			Если ТолькоОбращенияПоддержки Тогда
				Заголовок = НСтр("ru = 'Обращения в поддержку'");
			Иначе
				Заголовок = НСтр("ru = 'Интересы клиентов и обращения в поддержку'");
			КонецЕсли;
			
			Элементы.ТипОбращения.Видимость = Истина;
			
			Элементы.ОтборТипОбращения.Видимость = Истина;
			Если ТипОбращенияПереданКакОтбор Тогда
				ОтборТипОбращения = Параметры.Отбор.ТипОбращения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", ТекущаяДатаСеанса());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Календарь",
		Константы.ОсновнойКалендарьПредприятия.Получить());
	
	ИспользоватьКоммерческиеПредложенияКлиентам =
		ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	Если Не ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Элементы.ФормаДокументКоммерческоеПредложениеКлиентуСоздатьНаОсновании.Видимость =
			ИспользоватьКоммерческиеПредложенияКлиентам;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ФормаАвтоКнопки, Элементы.ПодменюПечать);
	
	/////////////////////////////////////////
	// Данные поля ограничены для пользовательских настроек
	// и получаются в событии "ПриПолученииДанныхНаСервере".
	
	ПоляДляОграничения = Новый Массив;
	ПоляДляОграничения.Добавить("СрокНаЭтапе");
	ПоляДляОграничения.Добавить("КаналПервичногоИнтереса");
	ПоляДляОграничения.Добавить("ИсточникПервичногоИнтереса");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(ПоляДляОграничения);
	Список.УстановитьОграниченияИспользованияВПорядке(ПоляДляОграничения);
	Список.УстановитьОграниченияИспользованияВОтборе(ПоляДляОграничения);
	
	/////////////////////////////////////////
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоВыборИнтереса Тогда
		ОтборЗавершен = "Незавершенные";
		ОтборЗавершенПриИзменении(Неопределено);
	Иначе
		УстановитьОтборПоОтветственномуИСоисполнителю(Список, ОтборПользователь);
	КонецЕсли;
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);
	
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКонтрагент, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПослеЗаписиТега" Или ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		ОбновитьЗначенияОтбораТегов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ПометкаПоказатьСкрытьДопИнформацию", ПометкаПоказатьСкрытьДопИнформацию);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Партнер") Тогда
		Если ТипЗнч(Параметры.Отбор.Партнер) = Тип("СписокЗначений") Тогда
			ОтборКонтрагент = ?(Параметры.Отбор.Партнер.Количество() > 0, Параметры.Отбор.Партнер[0].Значение, ОтборКонтрагент);
		Иначе
			ОтборКонтрагент = Параметры.Отбор.Партнер;
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("КонтактноеЛицо") Тогда
			КонтактноеЛицоОтбор = Параметры.Отбор.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Проект") Тогда
		Если ТипЗнч(Параметры.Отбор.Проект) = Тип("СписокЗначений") Тогда
			ОтборПроект = ?(Параметры.Отбор.Проект.Количество() > 0, Параметры.Отбор.Проект[0].Значение, ОтборПроект);
		Иначе
			ОтборПроект = Параметры.Отбор.Проект;
		КонецЕсли;
	КонецЕсли;
	
	ОтборЗавершен = Настройки.Получить("ОтборЗавершен");
	Если ОтборЗавершен = "Завершенные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен", Истина, Истина,
			 ВидСравненияКомпоновкиДанных.Равно);
	ИначеЕсли ОтборЗавершен = "Незавершенные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен", Ложь, Истина,
			 ВидСравненияКомпоновкиДанных.Равно);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен");
	КонецЕсли;
	
	ОтборПользователь = Настройки.Получить("ОтборПользователь");
	УстановитьОтборПоОтветственномуИСоисполнителю(Список, ОтборПользователь);
	
	Если НЕ (Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка = Элементы.ГруппаПанельИнформации.Видимость) Тогда
		Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка = Элементы.ГруппаПанельИнформации.Видимость;
	КонецЕсли;
	
	Если НЕ Настройки["ПометкаПоказатьСкрытьДопИнформацию"] = Неопределено Тогда
		ПометкаПоказатьСкрытьДопИнформацию	= Настройки["ПометкаПоказатьСкрытьДопИнформацию"];
	КонецЕсли;
	
	Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка = ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.ГруппаПанельИнформации.Видимость		= ПометкаПоказатьСкрытьДопИнформацию;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		 СтандартнаяОбработка,
		 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершенПриИзменении(Элемент)
	Если ОтборЗавершен = "Завершенные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен", Истина, Истина,
			 ВидСравненияКомпоновкиДанных.Равно);
	ИначеЕсли ОтборЗавершен = "Незавершенные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен", Ложь, Истина,
			 ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Завершен");
	КонецЕсли;
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершенОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтборЗавершен = "Все";
	ОтборЗавершенПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКонтрагент, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПользовательПриИзменении(Элемент)
	УстановитьОтборПоОтветственномуИСоисполнителю(Список, ОтборПользователь);
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПроект) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект", ОтборПроект, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект");
	КонецЕсли;
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);

КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОбращенияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборТипОбращения) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбращения", ОтборТипОбращения, Истина);
	Иначе	
		Если ТолькоОбращенияПоддержки Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список,
																		"ТипОбращения",
																		ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"),
																		Истина,
																		ВидСравненияКомпоновкиДанных.НеРавно);
		Иначе
			CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ТипОбращения");
		КонецЕсли;
	КонецЕсли;
	
	ОтборПоЗавершенности = ?(ОтборЗавершен = "Все", "", ОтборЗавершен);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПоЗавершенности, ОтборКонтрагент,
		 ОтборПользователь, ОтборПроект,
		 ОтборТипОбращения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат; КонецЕсли;
	
	МассивИнтересов = Новый Массив;
	МассивИнтересов.Добавить(ТекущиеДанные.Ссылка);
	
	Если Поле.Имя = "Избранный" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьСостояниеИзбранности(МассивИнтересов, НЕ ТекущиеДанные.Избранный);
		
	Иначе
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Продажи.Интерес.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// При добавлении Интереса запускаем мастер принятия обращения
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ПараметрыФормы = Новый Структура("Партнер, ИзСписка, Проект", ОтборКонтрагент, Неопределено, ОтборПроект);
		Если ТолькоОбращенияПоддержки Тогда
			ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
		Иначе
			ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
		КонецЕсли;
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы);
	Иначе
		ТекущийЭлементСписка = Элементы.Список.ТекущиеДанные;
		
		Если ТекущийЭлементСписка <> Неопределено Тогда
			ПараметрыФормы = Новый Структура(
				"ЗначениеКопирования", ТекущийЭлементСписка.Ссылка
			);
			
			ФормаИнтереса = ПолучитьФорму(
				"Документ.CRM_Интерес.Форма.ФормаДокументаНовая",
				ПараметрыФормы
			);
			
			ИсточникиИнтереса = ПолучитьИсточникиПервичногоИнтереса(
				ТекущийЭлементСписка.Ссылка, ТекущийЭлементСписка.Партнер
			);
			
			ФормаИнтереса.КаналПервичногоИнтереса		= ИсточникиИнтереса.КаналПервичногоИнтереса;
			ФормаИнтереса.ИсточникПервичногоИнтереса	= ИсточникиИнтереса.ИсточникПервичногоИнтереса;
			
			ФормаИнтереса.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеИнтересы = Строки.ПолучитьКлючи();
	
	/////////////////////////////////////////
	// Проверка на наличие полей в выборке.
	
	ЭлементКоллекцииСтрок = Строки.Получить(ПолученныеИнтересы[0]);
	
	ДанныеЭлемента = ЭлементКоллекцииСтрок.Данные;
	
	ЕстьПолеКаналПервичногоИнтереса		= ДанныеЭлемента.Свойство("КаналПервичногоИнтереса");
	ЕстьПолеИсточникПервичногоИнтереса	= ДанныеЭлемента.Свойство("ИсточникПервичногоИнтереса");
	ЕстьПолеСрокНаЭтапе					= ДанныеЭлемента.Свойство("СрокНаЭтапе");
	
	Если Не (ЕстьПолеСрокНаЭтапе Или ЕстьПолеИсточникПервичногоИнтереса Или ЕстьПолеКаналПервичногоИнтереса) Тогда
		Возврат;
	КонецЕсли;
	
	/////////////////////////////////////////
	// Выполнение запроса.
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка,
		|	CRM_Интерес.Партнер КАК Партнер,
		|	CRM_Интерес.ПотенциальныйКлиент КАК ПотенциальныйКлиент,
		|	CRM_Интерес.Завершен КАК Завершен,
		|	CRM_Интерес.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ втПолученныеИнтересы
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	CRM_Интерес.Ссылка В(&ПолученныеИнтересы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(КалендарныеГрафики.ДатаГрафика) КАК СрокНаЭтапе
		|ПОМЕСТИТЬ ДлительностиАктивныхЭтапов
		|ИЗ
		|	втПолученныеИнтересы КАК CRM_Интерес
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ИсторияСостоянийОбращений.СрезПоследних КАК CRM_ИсторияСостоянийОбращенийСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|			ПО CRM_ИсторияСостоянийОбращенийСрезПоследних.Период <= КалендарныеГрафики.ДатаГрафика
		|				И (КалендарныеГрафики.ДеньВключенВГрафик)
		|				И (КалендарныеГрафики.ДатаГрафика <= &ТекущаяДата)
		|				И (КалендарныеГрафики.Календарь = &Календарь)
		|		ПО CRM_Интерес.Ссылка = CRM_ИсторияСостоянийОбращенийСрезПоследних.Обращение
		|ГДЕ
		|	НЕ CRM_Интерес.Завершен
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_Интерес.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ИсточникиПервичногоИнтереса.Период) КАК Период,
		|	ВЫБОР
		|		КОГДА CRM_Интерес.Партнер <> ЗНАЧЕНИЕ(СПравочник.Партнеры.ПустаяСсылка)
		|			ТОГДА CRM_Интерес.Партнер
		|		ИНАЧЕ CRM_Интерес.ПотенциальныйКлиент
		|	КОНЕЦ КАК Партнер
		|ПОМЕСТИТЬ МаксДатыСделок
		|ИЗ
		|	втПолученныеИнтересы КАК CRM_Интерес
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		|		ПО CRM_Интерес.Ссылка = ИсточникиПервичногоИнтереса.Сделка
		|			И (ВЫБОР
		|				КОГДА CRM_Интерес.Партнер <> ЗНАЧЕНИЕ(СПравочник.Партнеры.ПустаяСсылка)
		|					ТОГДА CRM_Интерес.Партнер = ИсточникиПервичногоИнтереса.Партнер
		|				ИНАЧЕ CRM_Интерес.ПотенциальныйКлиент = ИсточникиПервичногоИнтереса.Партнер
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_Интерес.Ссылка,
		|	ВЫБОР
		|		КОГДА CRM_Интерес.Партнер <> ЗНАЧЕНИЕ(СПравочник.Партнеры.ПустаяСсылка)
		|			ТОГДА CRM_Интерес.Партнер
		|		ИНАЧЕ CRM_Интерес.ПотенциальныйКлиент
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксДатыСделок.Ссылка КАК Сделка,
		|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса,
		|	МаксДатыСделок.Партнер КАК Партнер
		|ПОМЕСТИТЬ КаналыИИсточники
		|ИЗ
		|	МаксДатыСделок КАК МаксДатыСделок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		|		ПО МаксДатыСделок.Ссылка = ИсточникиПервичногоИнтереса.Сделка
		|			И МаксДатыСделок.Период = ИсточникиПервичногоИнтереса.Период
		|			И МаксДатыСделок.Партнер = ИсточникиПервичногоИнтереса.Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПолученныеИнтересы.Ссылка КАК Ссылка,
		|	ДлительностиАктивныхЭтапов.СрокНаЭтапе КАК СрокНаЭтапе,
		|	КаналыИИсточники.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
		|	КаналыИИсточники.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса
		|ИЗ
		|	втПолученныеИнтересы КАК втПолученныеИнтересы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДлительностиАктивныхЭтапов КАК ДлительностиАктивныхЭтапов
		|		ПО втПолученныеИнтересы.Ссылка = ДлительностиАктивныхЭтапов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КаналыИИсточники КАК КаналыИИсточники
		|		ПО втПолученныеИнтересы.Ссылка = КаналыИИсточники.Сделка
		|			И (ВЫБОР
		|				КОГДА втПолученныеИнтересы.Партнер <> ЗНАЧЕНИЕ(СПравочник.Партнеры.ПустаяСсылка)
		|					ТОГДА втПолученныеИнтересы.Партнер
		|				ИНАЧЕ втПолученныеИнтересы.ПотенциальныйКлиент
		|			КОНЕЦ = КаналыИИсточники.Партнер)");
	
	Запрос.УстановитьПараметр("ПолученныеИнтересы", ПолученныеИнтересы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	
	РезультатыЗапроса = Запрос.Выполнить().Выгрузить();
	
	/////////////////////////////////////////
	// Заполнение.
	
	Для Каждого ТекущаяСтрокаСписка Из Строки Цикл
		РезультатПоиска = РезультатыЗапроса.Найти(ТекущаяСтрокаСписка.Значение.Данные.Ссылка, "Ссылка");
		
		Если РезультатПоиска <> Неопределено Тогда
			Если ЕстьПолеКаналПервичногоИнтереса Тогда
				ТекущаяСтрокаСписка.Значение.Данные.КаналПервичногоИнтереса 
					= РезультатПоиска.КаналПервичногоИнтереса;
			КонецЕсли;
			
			Если ЕстьПолеИсточникПервичногоИнтереса Тогда
				ТекущаяСтрокаСписка.Значение.Данные.ИсточникПервичногоИнтереса 
					= РезультатПоиска.ИсточникПервичногоИнтереса;
			КонецЕсли;
			
			Если ЕстьПолеСрокНаЭтапе Тогда
				ТекущаяСтрокаСписка.Значение.Данные.СрокНаЭтапе
					= РезультатПоиска.СрокНаЭтапе;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СписокПриПолученииДанныхНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.Найти("Тег_Очистить");
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, Истина);	
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьCRM_СчетНаОплатуПокупателю(Команда)
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ТекДанные.Ссылка;
	
	Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
		ИмяДокумента = "ЗаказКлиента";
	Иначе
		ИмяДокумента = "CRM_СчетНаОплатуПокупателю";
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ПолучитьВзаимодействиеИнтереса(Ссылка);
	
	ПараметрыФормы = Новый Структура("Основание", Ссылка);
	ПараметрыФормы.Вставить("Взаимодействие", СсылкаНаВзаимодействие);
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПоИнтересам(Команда)
	
	Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка	= НЕ Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию					= Элементы.СписокСкрытьПоказатьПоИнтересам.Пометка;
	Элементы.ГруппаПанельИнформации.Видимость			= ПометкаПоказатьСкрытьДопИнформацию;
	
	ОбработатьАктивизациюСтрокиСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ВосстанавливатьФормуПриОткрытии",
		 Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	ТекущийОбъект = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		УсловияОтбора = Новый Структура("Объект", ТекущийОбъект);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
		ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКП_Почта(Команда)
	
	ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(ТекущиеДанныеСписка.Ссылка, ЭтотОбъект, Ложь);
	
КонецПроцедуры // ОтправитьКП_Почта()

&НаКлиенте
Процедура ОтправитьКП_Мессенджер(Команда)
	
	ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(ТекущиеДанныеСписка.Ссылка, ЭтотОбъект, Истина);
	
КонецПроцедуры // ОтправитьКП_Мессенджер()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьИсточникиПервичногоИнтереса(ИнтересСсылка, ПартнерСсылка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса КАК КаналПервичногоИнтереса,
	|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса КАК ИсточникПервичногоИнтереса
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(
	|			НЕОПРЕДЕЛЕНО,
	|			Сделка = &Сделка
	|				И Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникиПервичногоИнтересаСрезПоследних.Период УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Сделка", ИнтересСсылка);
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	
	РезультатВыборка = Запрос.Выполнить().Выбрать();
	
	ИсточникиИнтереса = Новый Структура(
		"КаналПервичногоИнтереса,ИсточникПервичногоИнтереса",
		Неопределено, Неопределено
	);
	
	Если РезультатВыборка.Следующий() Тогда
		ИсточникиИнтереса.КаналПервичногоИнтереса		= РезультатВыборка.КаналПервичногоИнтереса;
		ИсточникиИнтереса.ИсточникПервичногоИнтереса	= РезультатВыборка.ИсточникПервичногоИнтереса;
	КонецЕсли;
	
	Возврат ИсточникиИнтереса;
	
КонецФункции // ПолучитьИсточникиПервичногоИнтереса()

&НаКлиенте
Процедура УстановитьВидимостьКомандНаОсновании(ТипОбращения)
	
	ИнтересКакПродажа = (ТипОбращения = ТипОбращенияИнтерес);
	
	Элемент1 = Элементы.ФормаДокументКоммерческоеПредложениеКлиентуСоздатьНаОсновании;
	Элемент2 = Элементы.ФормаДокументCRM_СчетНаОплатуПокупателюСоздатьНаОсновании;
	
	Если Элемент1.Видимость <> ИнтересКакПродажа Тогда
		Элемент1.Видимость = ИнтересКакПродажа;
		Элемент2.Видимость = ИнтересКакПродажа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес");
КонецФункции

&НаСервере
Функция ПолучитьВзаимодействиеИнтереса(Ссылка)
	СсылкаНаВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	ВзаимодействияТЗ = CRM_ВзаимодействияСервер.ПолучитьВзаимодействия(Ссылка);
	Если ВзаимодействияТЗ.Количество() > 0 Тогда
		СсылкаНаВзаимодействие = ВзаимодействияТЗ[0].Ссылка;
	КонецЕсли;
	Возврат СсылкаНаВзаимодействие;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, 1);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Если ПометкаПоказатьСкрытьДопИнформацию Тогда
		ИспользуемаяСсылкаОтображения = Неопределено;
		
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ИспользуемаяСсылкаОтображения = Элементы.Список.ТекущаяСтрока;
		ИначеЕсли Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
			ИспользуемаяСсылкаОтображения = Элементы.Список.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(
			ЭтотОбъект,
			ИспользуемаяСсылкаОтображения,
			НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(),
			"ГруппаПанельИнформации",
			"ПолеОтображениеСодержания");
	Иначе
		ПолеОтображениеСодержания = "";
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Свойство("ЭтоПоддержка")
		И Элементы.Список.ТекущиеДанные.ЭтоПоддержка Тогда
		
		Элементы.ФормаОтправитьКП_Почта.Видимость = Ложь;
		Элементы.ФормаОтправитьКП_Мессенджер.Видимость = Ложь;
	Иначе
		Элементы.ФормаОтправитьКП_Почта.Видимость = Истина;
		Элементы.ФормаОтправитьКП_Мессенджер.Видимость = Истина;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Свойство("ТипОбращения") Тогда
		УстановитьВидимостьКомандНаОсновании(Элементы.Список.ТекущиеДанные.ТипОбращения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементДляОчистки = Элементы.Найти("Тег_Очистить");	
	
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;	
	КонецЕсли; 	
	
	Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, СтандартнаяОбработка);	
	// Пометка = CRM_ТегиКлиент.ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент,
	// СтандартнаяОбработка,,,,ОтбиратьОбъектыБезТегов, СписокВышестоящихПодразделений);

	// Поведение при нажатии на кнопку очистки отборов по тегам.
	Если Элемент = ЭлементДляОчистки Тогда
		ОбновитьЗначенияОтбораТегов();
		Возврат;
	КонецЕсли; 
	
	// Поведение при нажатии на кнопку отбора [нет тегов].
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 	
	
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов  Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	CRM_Теги.ОбновитьЗначенияОтбораТегов(ЭтотОбъект, , ОтборПодразделениеДляТегов,
		 СписокВышестоящихПодразделений.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов,
		 Истина));	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеИзбранности(МассивИнтересов, Избранный)

	Для Каждого ИнтересСсылка Из МассивИнтересов Цикл
		ИнтересОбъект = ИнтересСсылка.ПолучитьОбъект();
		ИнтересОбъект.Избранный = Избранный;
		
		Попытка
			ИнтересОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственномуИСоисполнителю(Список, ОтборПользователь)
	ГруппаОтбораПользователя = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы,
		"ГруппаОтбораПользователя", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	Если ЗначениеЗаполнено(ОтборПользователь) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтбораПользователя, "Ответственный",
			ОтборПользователь, Истина);
		ГруппаОтбораСоисполнителя = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораПользователя.Элементы,
			"ГруппаОтбораСоисполнителя", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтбораСоисполнителя, "Ответственный",
			ОтборПользователь, Истина, ВидСравненияКомпоновкиДанных.НеРавно);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтбораСоисполнителя, "Соисполнитель",
			ОтборПользователь, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
