
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

&НаКлиенте
Перем ОтветственныйДоИзменения;

&НаКлиенте
Перем ВыведеныТоварыИУслуги;

&НаКлиенте
Перем ВыведеныБизнесПроцессы;

&НаКлиенте
Перем ВыведеныСоисполнители;

&НаКлиенте
Перем ВыведеныСвязанныеПартнеры;

&НаКлиенте
Перем ВыведеныПотенциальныеКлиенты;

// +CRM_Модуль
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания
// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		УстановитьТолькоПросмотр = Истина;
	Иначе
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
			ОбращениеПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ФлагКопированияИнтереса = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если ФлагКопированияИнтереса Тогда
		ЭтоПоддержка = Объект.ЭтоПоддержка;
		
		Если ЭтоПоддержка Тогда
			ПересчитатьСрокиНаСервере();
		КонецЕсли;
		
		ВыполнитьОбновлениеДанныхПоддержкиИЗаполнитьСписокВыбораТиповОбращения();
		ВывестиЧекЛист();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		ПостфиксФормы = ?(ЭтоПоддержка, "_Поддержка", "");
		Если CRM_УправлениеЭлементамиНаФормах.ЕстьДополнительныеСвойстваВОбластиОсновное(ИмяФормы, ПостфиксФормы) Тогда
			СвойстваВыполнитьОтложеннуюИнициализацию();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущиеПользователи.ЗагрузитьЗначения(РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь));
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	НастроитьРолевуюАдресацию(Объект.СостояниеИнтереса);
	//Элементы.Ответственный.ТолькоПросмотр = Истина;
	//Элементы.Ответственный.КнопкаВыбора = Ложь;
	Элементы.Перенаправить.Видимость = Истина;
	
	СценарийИнтереса = Объект.СостояниеИнтереса.Родитель;
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	ЗаполнитьПервичныйИнтерес(Параметры.Основание);
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ВалютаРасчетов = Объект.Договор["ВалютаРасчетов"];
	КонецЕсли;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
		 Новый Структура("Валюта",
		 ВалютаРегламентированногоУчета));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
		
	СтруктураПоВалютеДокумента = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
		 Новый Структура("Валюта",
		 Объект.Валюта));
	КурсВалютаДокумента  = СтруктураПоВалютеДокумента.Курс;
	КратностьВалютаДокумента = СтруктураПоВалюте.Кратность;

	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВыручкаВВалюте = РаботаСКурсамиВалют.ПересчитатьВВалюту(Объект.ОжидаемаяВыручка,
		 ВалютаУправленческогоУчета, Объект.Валюта,
		 Объект.Дата);
	Элементы.ВалютаДекорация.Заголовок = Объект.Валюта;
	
	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(Объект.ОжидаемаяВыручка) + " " 
		+ ВалютаУправленческогоУчета.Наименование 
		+ ")";
	
	Если Объект.Валюта = ВалютаУправленческогоУчета Тогда
		Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = Ложь;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ВалютаВременная = Объект.Валюта;
		
		// Сформируем надпись цены и валюты.
		УчетВалютныхОпераций = Константы["ФункциональнаяУчетВалютныхОпераций"].Получить();
		Если Не УчетВалютныхОпераций Тогда
			Элементы.ВалютаДекорация.Заголовок = ВалютаУправленческогоУчета;
			Элементы.ВалютаУпрНадпись.Видимость = Истина;
			ВалютаУпрНадпись = ВалютаУправленческогоУчета.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		
		Если Объект.Завершен Тогда
			ТекущаяЗадача = ПолучитьЗадачуЗавершенногоИнтереса(Объект.Ссылка);
		Иначе
			ОткрываемаяЗадача = Неопределено;
			Параметры.Свойство("ОткрываемаяЗадача", ОткрываемаяЗадача);
			ТекущаяЗадача = ПолучитьЗадачуБПИнтереса(Объект.Ссылка, ОткрываемаяЗадача);
		КонецЕсли;
		БизнесПроцесс = ТекущаяЗадача.БизнесПроцесс;
		Элементы.ГруппаПричинаОтказа.Видимость = (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
			Или Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Если НЕ Объект.Завершен Тогда
			//Элементы.ГруппаЭтапБП.Видимость = Истина;
			//ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " 
				//+ Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			//ТекущаяЗадачаПредставление = Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			ПолучитьТаблицуТипов();
		КонецЕсли;
	КонецЕсли;
	Элементы.СценарийИнтереса.ТолькоПросмотр = (ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Объект.СостояниеИнтереса.Завершено);
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытиеИзТелемаркетинга") И Параметры.ОткрытиеИзТелемаркетинга Тогда 
		ОткрытиеИзТелемаркетинга = Истина;
		Если Параметры.Свойство("СозданиеИзСтрокиТелемаркетинга") И Параметры.СозданиеИзСтрокиТелемаркетинга Тогда
			СозданиеИзСтрокиТелемаркетинга = Истина;
		КонецЕсли;
		// Значит создаём интерес из телемаркетинга.
		Если Параметры.Свойство("Содержание") Тогда
			КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			СодержаниеВзаимодействия = Параметры.Содержание; 
		КонецЕсли;
		Если Параметры.Свойство("Взаимодействие") Тогда
			ВидВзаимодействияИзТелемаркетинга = Параметры.Взаимодействие;
		КонецЕсли;
	КонецЕсли;
	
	// +Софтфон
	Если Параметры.Свойство("сфпВыбранныйОбъект") Тогда
		Если Параметры.сфпВыбранныйОбъект.Свойство("ПотенциальныйКлиент") Тогда
			Объект.ПотенциальныйКлиент = Параметры.сфпВыбранныйОбъект.ПотенциальныйКлиент;
		Иначе
			Объект.Партнер = Параметры.сфпВыбранныйОбъект.Партнер;
			Объект.КонтактноеЛицо = Параметры.сфпВыбранныйОбъект.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КлючевоеФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.КонтактноеЛицо);
		Если КлючевоеФизЛицо = Неопределено Тогда
			Если ЗначениеЗаполнено(Объект.Партнер)
				 И Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				МассивКЛ = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(Объект.Партнер);
				Если МассивКЛ.Количество() > 0 Тогда
					CRM_ФизЛицо = Объект.Партнер;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			CRM_ФизЛицо = КлючевоеФизЛицо;
		КонецЕсли;
	КонецЕсли;
	// -Софтфон
	
	Партнер = Объект.Партнер;
	
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент.Организация) Тогда
			Элементы.ДекорацияОрганизацияПК.Заголовок = "Компания: " + Объект.ПотенциальныйКлиент.Организация;
		Иначе
			Элементы.ДекорацияОрганизацияПК.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СписокТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер,
		 "ГруппаКИПартнера",
		 СписокТиповКИ.ВыгрузитьЗначения());
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
		 Объект.ПотенциальныйКлиент, "ГруппаКИПК",
		 СписокТиповКИ.ВыгрузитьЗначения());
	
	ОбновитьТаблицуНаКонтроле();	
	СформироватьПредставлениеВложений();
	СформироватьОписаниеКаналаИсточника();
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	КонтрПартнер = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Объект["Партнер"], ЭтотОбъект["КонтрагентПартнера"]);
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		КонтрПартнер,
		Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(КонтрПартнер),
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	ОбязательноВводитьРезультат = Ложь;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ЗаполнитьДанныеВзаиморасчетов();
	
	ОбновитьЗаголовокФормы();
	
	Если ЭтоПоддержка Тогда
		Элементы.ОтображатьВсюИсториюКлиента.Видимость = Ложь;
		Элементы.ОтправитьКП_Почта.Видимость = Ложь;
		Элементы.ОтправитьКП_Мессенджер.Видимость = Ложь;
	Иначе
		ОтображатьВсюИсториюКлиента = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы,
			 "ОтображатьВсюИсториюКлиента");
		Элементы.ОтображатьВсюИсториюКлиента.Пометка = ОтображатьВсюИсториюКлиента;
	КонецЕсли;
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь, "ЛентаИнтереса");
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект, Лента_ЗначенияНастроек);
	НастроитьОбластьВвода();
	Если ОтображатьВсюИсториюКлиента И ЗначениеЗаполнено(Объект.Партнер) Тогда
		МассивПартнеров = ПартнерыВКонтактах.ВыгрузитьЗначения();
		Если МассивПартнеров.Найти(Объект.Партнер) = Неопределено Тогда
			МассивПартнеров.Добавить(Объект.Партнер);
		КонецЕсли;
		ОбъектЛенты = МассивПартнеров;
		Режим = "ЛентаКлиента";
	Иначе
		ОбъектЛенты = Объект.Ссылка;
		Режим = "ЛентаИнтереса";
	КонецЕсли;
	НеобходимоЗаполнитьЛентуСобытий = Объект.Ссылка.Пустая();
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(ОбъектЛенты, ЭтотОбъект, Режим, Ложь, НеобходимоЗаполнитьЛентуСобытий);
	// Конец ЛентаСобытий
	
	CRM_РазрешитьСозданиеИнтересаБезКЛ = (РольДоступна("ПолныеПрава")
		 ИЛИ РольДоступна("CRM_РазрешитьСозданиеИнтересаБезКЛ"));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создан';en='Created'") + ": ", ,
		 ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.Дата, "ДФ=d.MM.yyyy") + " " + НСтр("ru='в';en='in'") 
		+ " " + Формат(Объект.Дата,
		 "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	Элементы.Разделы_ПереключитьБизнесПроцессы.Видимость = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	
	РегистрироватьСвязиВИнтересах = ПолучитьФункциональнуюОпцию("CRM_РегистрироватьВИнтересахВзаимосвязиКлиентов");
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Разделы_ПереключитьСвязанныхПартнеров.Доступность = Ложь;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Дата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Дата);

	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") Тогда
		КлючОткрываемойАктивности = Параметры.ПозиционироватьНаВзаимодействие;
	КонецЕсли;
	
	Если Параметры.Свойство("Модифицированность") Тогда
		Модифицированность = Параметры.Модифицированность;
	КонецЕсли;
	
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(ТекущееСостояние);
		
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(
		ЭтотОбъект, ,
		"ГруппаДополнительно",
		?(ЭтоПоддержка, "Поддержка", ""));
	// Конец Управление элементами на форме
	
	// Поддержка
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	CRM_ДанныеОбратнойСвязи.Оценка КАК Оценка,
	|	CRM_ДанныеОбратнойСвязи.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.CRM_ДанныеОбратнойСвязи КАК CRM_ДанныеОбратнойСвязи
	|ГДЕ
	|	CRM_ДанныеОбратнойСвязи.Обращение = &Обращение
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ДанныеОбратнойСвязи.ДатаОценки УБЫВ";
	Запрос.УстановитьПараметр("Обращение", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Оценка = Выборка.Оценка;
		КомментарийОценки = СокрЛП(Выборка.Комментарий);
		Элементы.ГруппаОценка.Видимость = Истина;
		Элементы.ДекорацияКомментарийОценки.Заголовок = "(" + Оценка + " из 5) " 
			+ ?(СтрДлина(КомментарийОценки) > 45, Лев(КомментарийОценки, 42) + "...", КомментарийОценки);
	КонецЕсли;
	// Конец Поддержка
	
	// +Модели машинного обучения
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения") Тогда
		Помощник_Использовать = Помощник_ПроверитьИспользование();
		Если Помощник_Использовать Тогда
			Элементы.ГруппаПомощник.Видимость = Истина;
		КонецЕсли;
		
		ОписаниеОшибкиСервисы = "";
		СервисыДоступны = CRM_ЛицензированиеЭкспортныеМетоды.ПроверитьПодключениеКОтраслевымСервисам(ОписаниеОшибкиСервисы);
		Если СервисыДоступны Тогда
			Элементы.ДекорацияВероятностьСделки.Видимость = Ложь;
			Помощник_ОбновитьСостояние();
		Иначе
			Элементы.СтраницаПомощник.Видимость = Ложь;
			Элементы.СтраницаПредупреждение.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// -Модели машинного обучения
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.ДополнитьРеквизитыФормыДляСозданияКонтрагента(ЭтотОбъект);
	КонецЕсли;
	
	ЗаблокироватьРеквизитыПоСостояниюИнтереса();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДатаКасания = РегистрыСведений.CRM_ДатыКасанийКонтактов.ПолучитьДатуКасания(Объект.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СформироватьСмещениеВремениТекущегоАбонента(Объект.Партнер.БизнесРегион);
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		СформироватьСмещениеВремениТекущегоАбонента(Объект.ПотенциальныйКлиент.БизнесРегион);
	Иначе
		СформироватьСмещениеВремениТекущегоАбонента(Неопределено);
	КонецЕсли;
	
	// +CRM_Модуль
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
									ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	УправлениеСвязямиПараметровВыбораРеквизитовФормы();
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение) И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	Элементы.Контрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	ОбновитьНадписиПосоглашениюСервер();                                                                    
	
	// + Печать счета
	ГруппаКонтейнер = Элементы.Добавить("ГруппаКоммерческиеУсловия3", Тип("ГруппаФормы"), Элементы.ГруппаКоммерческиеУсловия);
	ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтейнер.ОтображатьЗаголовок = Ложь;
	ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Банковский счет организации
	
	НовыйЭлементПоле = Элементы.Вставить("CRM_Модуль_БанковскийСчет", Тип("ПолеФормы"), ГруппаКонтейнер);
	НовыйЭлементПоле.Заголовок = "Банковский счет";
	НовыйЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоле.ПутьКДанным = "Объект.CRM_Модуль_БанковскийСчет";
	НовыйЭлементПоле.КнопкаОчистки = Истина;
	НовыйЭлементПоле.КнопкаОткрытия = Ложь;
	НовыйЭлементПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	СвязьПоВладельцу = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация");
	МассивСвязей = Новый Массив();
	МассивСвязей.Добавить(СвязьПоВладельцу);
	НовыеСвязи = Новый ФиксированныйМассив(МассивСвязей);
	НовыйЭлементПоле.СвязиПараметровВыбора = НовыеСвязи;
	
	НовыйЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_БанковскийСчетПриИзменении");
	
	// Банковский счет контрагента
	
	НовыйЭлементПоле = Элементы.Вставить("CRM_Модуль_БанковскийСчетКонтрагента", Тип("ПолеФормы"), ГруппаКонтейнер);
	НовыйЭлементПоле.Заголовок = "Банковский счет контрагента";
	НовыйЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлементПоле.ПутьКДанным = "Объект.CRM_Модуль_БанковскийСчетКонтрагента";
	НовыйЭлементПоле.КнопкаОчистки = Истина;
	НовыйЭлементПоле.КнопкаОткрытия = Ложь;
	НовыйЭлементПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	СвязьПоВладельцу = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
	МассивСвязей = Новый Массив();
	МассивСвязей.Добавить(СвязьПоВладельцу);
	НовыеСвязи = Новый ФиксированныйМассив(МассивСвязей);
	НовыйЭлементПоле.СвязиПараметровВыбора = НовыеСвязи;
	
	НовыйЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_БанковскийСчетКонтрагентаПриИзменении");
	// -Печать счета
	
	// -CRM_Модуль
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Элементы["ПомощникПродаж"].Видимость = НЕ Объект.ЭтоПоддержка;
	КонецЕсли;
	
	// +Мобильный клиент
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		УстановитьТолькоПросмотр = Истина;
	ИначеЕсли ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку(Истина,
			 Истина).ПодготовитьФормуДляМобильногоКлиента(ЭтотОбъект);
	КонецЕсли;
	// -Мобильный клиент
	
	ЗаполнитьКодыЗавершения();
	
	Элементы.ИсторияРеквизитов.Видимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов");
	Элементы.Переместить(Элементы.ФормаАвтоКнопки, Элементы.ПодменюПечать);
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ЦветГолубой = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЦветКрасный = ЦветаСтиля.ЦветОсобогоТекста;
	
	ЭлементИнциденты = Элементы.Найти("КнопкаИнцидентыПоПредмету");
	Если ЭлементИнциденты <> Неопределено Тогда
		ГруппаКомандыНавигации1 = Элементы.Найти("ГруппаКомандыНавигации1");
		Элементы.Переместить(ЭлементИнциденты, ГруппаКомандыНавигации1);
		ЭлементИнциденты.Вид = ВидКнопкиФормы.ОбычнаяКнопка;;
		ЭлементИнциденты.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ВыведеныКонтактныеДанные = Ложь;
	ВыведеныТоварыИУслуги = Ложь;
	ВыведеныБизнесПроцессы = Ложь;
	ВыведеныСоисполнители = Ложь;
	ВыведеныСвязанныеПартнеры = Ложь;
	ВыведеныПотенциальныеКлиенты = Ложь;
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ДоступностьПотенциальногоКлиента();
	ДоступностьПервичногоИнтереса();
	УстановитьДоступностьИнтереса();
	ОформлениеИзбранного();
	УстановитьВидимостьЭлементовПоТипуОбращения();
	
	Если КлючОткрываемойАктивности <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПозиционироватьНаВзаимодействие", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	// Конец ЛентаСобытий
	
	Если РегистрироватьСвязиВИнтересах Тогда
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСвязиМеждуПартнерами", 0.3, Истина);
	КонецЕсли;
	
	ОбновитьЗаголовокСоисполнители();
	ОбновитьЗаголовокКонтактныеЛица();
	ОбновитьЗаголовокГруппыТовары();
	ОбновитьЗаголовокСвязанныхПК();
	
	Если УстановитьТолькоПросмотр Тогда
		ТолькоПросмотр										= Истина;
		Элементы.ГруппаКоманднаяПанель.Доступность			= Ложь;
		Элементы.ГруппаПанельСостояний.Доступность			= Ложь;
		Элементы.Лента_ПанельКоманд.Доступность				= Ложь;
		Элементы.БыстрыйВвод_ПримечаниеТема.Доступность		= Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	ЗаполнитьПанельСостоянийИнтереса(, Истина);
	#Иначе	
	ЗаполнитьПанельСостоянийИнтереса();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если КлючОткрываемойАктивности <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПозиционироватьНаВзаимодействие", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (УстановитьТолькоПросмотр 
			Или НЕ ЕстьДоступУровняАккаунтМенеджера 
			Или ПроверитьЗапланированныеАктивности()) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОткрытиеИзТелемаркетинга И НЕ СозданиеИзСтрокиТелемаркетинга Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ							= Истина;
			ОткрытиеИзТелемаркетинга		= Ложь;
			СозданиеИзСтрокиТелемаркетинга	= Истина;
			Закрыть(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		// Если выбрали ответственного в форме выбора по типу услуги
		Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") 
			И (ИсточникВыбора.ИмяФормы = "ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги"
				 ИЛИ ИсточникВыбора.ИмяФормы = "Справочник.РолиИсполнителей.Форма.ФормаВыбора") Тогда
			Если ЗначениеЗаполнено(ВыбранноеЗначение) 
				И (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
					 ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиИсполнителей")) Тогда
				Если ВыбранноеЗначение <> Объект.Ответственный Тогда
					ИзменитьОтветственногоНаСервере(ВыбранноеЗначение);
					Модифицированность = Истина;
					Записать();
					Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		// +CRM_Модуль
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
			
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.Форма" Тогда // +CRM_ERP2.5
			
			ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
			ОбновитьЗаголовокГруппыТовары();
	
		// -CRM_Модуль
			
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Или
		ИмяСобытия = "Запись_Файл" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец") = Объект.Партнер Тогда
			Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
				Объект.КонтактноеЛицо = Параметр;
			КонецЕсли;
			НастроитьОбластьВвода();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Тогда
		
		ПараметрыОтбора = Новый Структура("Контакт", Параметр);
		НайденныеСтроки = Объект.Контакты.НайтиСтроки(ПараметрыОтбора);
		Если Параметр = Объект.КонтактноеЛицо Или НайденныеСтроки.Количество() > 0 Тогда
			КонтактыПриИзменении();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" И Параметр = Объект.ПотенциальныйКлиент Тогда
		
		ПотенциальныйКлиентПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" И Параметр = Объект.Партнер Тогда
		
		ПартнерПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер"
		Или (ИмяСобытия = "ОбъектыПереопределеныСПК" И Параметр.Интерес = Объект.Ссылка) Тогда
		
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект
					 ИЛИ Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Прочитать();
			Если ИмяСобытия = "ОбъектыПереопределеныСПК" Тогда
				Если ЗначениеЗаполнено(Параметр.Партнер) Тогда
					Объект.Партнер = Параметр.Партнер;
					Партнер = Объект.Партнер;
					ПартнерПриИзменении(Неопределено);
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.КонтактноеЛицо) Тогда
					Объект.КонтактноеЛицо = Параметр.КонтактноеЛицо;
				КонецЕсли;
			Иначе
				Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
					Объект.Партнер = Параметр;
					Партнер = Объект.Партнер;
					ПартнерПриИзменении(Неопределено);
				ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
					Партнер = Объект.Партнер;
					ПартнерПриИзменении(Неопределено);
					Объект.КонтактноеЛицо = Параметр;
				КонецЕсли;
			КонецЕсли;
			НастроитьОбластьВвода();
			
			ОбновитьСвязиМеждуПКНаФорме();
			ДоступностьПотенциальногоКлиента();
			
			Модифицированность = Истина;
			Записать();
			
			Если ИмяСобытия = "ОбъектыПереопределеныСПК" Тогда
				ПотенциальныйКлиентПриИзмененииНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписатьИнтерес" Тогда
		Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененОтветственныйПоИнтересу" И Источник = ЭтотОбъект Тогда
		ОтветственныйПриИзменении(Элементы.Ответственный);
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеСобытия" 
		И (СтрНайти(Источник.ИмяФормы, "CRM_БизнесПроцесс") > 0 ИЛИ СтрНайти(Источник.ИмяФормы,
			 "ЗадачаИсполнителя") > 0) Тогда
		ЗаполнитьДеревоПроцессов();
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		ЗаполнитьДеревоПроцессов();
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0  И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	// +Софтфон
	ИначеЕсли (ИмяСобытия = "СозданКонтактДляИнтереса") И Параметр.Свойство("сфпИнтерес")
		 И Параметр.сфпИнтерес = Строка(ЭтотОбъект.УникальныйИдентификатор) Тогда
		Если Параметр.Свойство("Контакт") Тогда
			Если ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр.Контакт, "Владелец");
				Партнер = Объект.Партнер;
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо = Параметр.Контакт;
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер			= Параметр.Контакт;
				Партнер = Объект.Партнер;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Объект.ПотенциальныйКлиент = Параметр.Контакт;
				
				ОбновитьСвязиМеждуПКНаФорме();
				ДоступностьПотенциальногоКлиента();
				
				Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СофтФон_КонецРазговора" ИЛИ ИмяСобытия = "сфпКонецРазговора" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);	
	ИначеЕсли ИмяСобытия = "ОбновитьПланировщик" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	// -Софтфон
	ИначеЕсли (ИмяСобытия = "Запись_ЗадачаИсполнителя" ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача"
		 ИЛИ ИмяСобытия = "СохраненоПоручение"
		 ИЛИ ИмяСобытия = "ЗадачаВыполнена") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ЗадачаИсполнителя") 
			И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("СсылкаНаОбъект")
				 И (Параметр.СсылкаНаОбъект = ЭтотОбъект["ЗадачаИсполнителя"]) Тогда
			ТекущаяЗадача = ЭтотОбъект["ЗадачаИсполнителя"];
			#Если ВебКлиент Тогда
			ЗаполнитьПанельСостоянийИнтереса(, Истина);
			#Иначе	
			ЗаполнитьПанельСостоянийИнтереса();
			#КонецЕсли
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		ЗаполнитьДеревоПроцессов();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказКлиента" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеВзаиморасчетов" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеВзаиморасчетов", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_Перенаправить" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ПереопределяемаяКоманда_ЗадачаИсполнителя_ПринятаКИсполнению" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ЗаписанаСвязьМеждуПартнерами" И (Параметр = Неопределено
		 ИЛИ Параметр.Интерес = Объект.Ссылка) Тогда
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСвязиМеждуПартнерами", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоТегов();
	ИначеЕсли ИмяСобытия = "ПрозвонитьМессенджеры" Тогда
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПрозвонитьМессенджеры(ПараметрыОповещенияПрозвона(Параметр,
			 "Представление"));
	ИначеЕсли ИмяСобытия = "ПослеСозданияТега" И (Источник = Элементы.Тег) Тогда
		Тег = Параметр;
		CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элементы.Тег);
	ИначеЕсли ИмяСобытия = "ОбновленаСвязьМеждуПК"
		И (Параметр = Неопределено
			ИЛИ Параметр.ПотенциальныйКлиентА = Объект.ПотенциальныйКлиент
			ИЛИ Параметр.ПотенциальныйКлиентБ = Объект.ПотенциальныйКлиент
		) Тогда
		ПодключитьОбработчикОжидания("ОбновитьСвязиМеждуПКНаФорме", 0.1, Истина);
	КонецЕсли;
	
	// +CRM_Модуль
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	// -CRM_Модуль
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// +CRM_Модуль
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПартнера = Объект.Контрагент;
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, КонтрагентПартнера);
	КонецЕсли;
	ПриЧтенииСозданииНаСервере();
	// -CRM_Модуль
	
	ЭтоПоддержка = (Объект.ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПараметрыСвойств")
			И ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация 
			И CRM_УправлениеЭлементамиНаФормах.ЕстьДополнительныеСвойстваВОбластиОсновное(ИмяФормы, 
				?(ЭтоПоддержка, "_Поддержка", "")) Тогда
				CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект, , ?(ЭтоПоддержка, "Поддержка", ""));
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	Элементы.ГруппаПричинаОтказа.Видимость = (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
		Или Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение);
	
	ЗаполнитьКонтактнуюИнформациюКонтактов();
	
	ВыполнитьОбновлениеДанныхПоддержкиИЗаполнитьСписокВыбораТиповОбращения();
	
	ОбновитьСоставКомандГруппыСоздать();
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;

	ВывестиЧекЛист();

	ЗаблокироватьРеквизитыПоСостояниюИнтереса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
	ДокументЗаписан = Ложь;
	ГруппаРеквизитыКлиентаВидимость = Элементы.ГруппаРеквизитыКлиента.Видимость;
	ГруппаРеквизитыКонтактаВидимость = Элементы.ГруппаРеквизитыКонтакта.Видимость;
	Если ГруппаРеквизитыКлиентаВидимость Или ГруппаРеквизитыКонтактаВидимость Тогда
		
		Если Не ГруппаРеквизитыКлиентаВидимость 
			И Элементы.Партнер.Видимость
			И НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран клиент!'"),,,,
				Отказ);
			Возврат;
		КонецЕсли;
		
		Если НЕ Клиент_Проверен Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаКлиентаПродолжение", ЭтотОбъект);
			НайтиДубли(ОписаниеОповещения);
			Возврат;
		КонецЕсли;
		
		СоздатьКлиентаИКонтактНаСервере();
		СозданноеКЛ = Объект.КонтактноеЛицо;
		
		ОбновитьСвязиМеждуПКНаФорме();
		ДоступностьПотенциальногоКлиента();
		
		ПартнерПриИзменении(Неопределено);
		Объект.КонтактноеЛицо = СозданноеКЛ; // восстановление КЛ после изменения Партнера
											// в случае создания Контакта по ПК при существующем
											// Партнере
	КонецЕсли;
	
	Если Не Объект.Завершен Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)
				 И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				Если ОбязательноУказыватьКЛ() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран основной контакт клиента!';
						|en='Incomplete contact'"));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен потенциальный клиент';
				|en='Missing potential customer'"));
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Партнер) И НЕ ЭтоПоддержка Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги
				 И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги,
					| запись документа отменена!';en='Active lead of customer on the chosen type of service was discovered,
					| the document record was canceled!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтрПартнер = "Партнер";
		Если ПроверяемыеРеквизитыИнтереса.Найти(СтрПартнер) <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент';
					|en='The customer is not filled in'"));
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)
				 И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				Если ОбязательноУказыватьКЛ() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено контактное лицо';
						|en='Not filled in contact person'"));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда

		Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(Объект.Ответственный,
			 "Подразделение");
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение)
			И ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда // в случае незаполненности реквизита при выбранной роли - не отказываемся от записи
			
			ТекстСообщения = Нстр("ru='У текущего пользователя не заполнено подразделение!';
				|en='The current user does not have a department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ответственный);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Офис) Тогда

		Объект.Офис = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
		Если НЕ ЗначениеЗаполнено(Объект.Офис)
			И ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда // в случае незаполненности реквизита при выбранной роли - не отказываемся от записи

			ТекстСообщения = Нстр("ru='У подразделения пользователя не заполнен офис!';
				|en='Office is not filled in user department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Подразделение);
			Отказ = Истина;
			Возврат;

		КонецЕсли;

	КонецЕсли;
	
	НовыйИнтерес = Объект.Ссылка.Пустая();
	
	Если Не Отказ И ФлагКопированияИнтереса И Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = "КопированиеИнтереса";
	КонецЕсли;
	
	// +CRM_Модуль
	//ЗапрещенныеКонтакты = ЗапрещенныеКонтактыПоПользователям();
	//Если ЗапрещенныеКонтакты.Количество() > 0 Тогда
	//	Отказ = Истина;
	//	ВопросДобавленияУровнейДоступа(ЗапрещенныеКонтакты);
	//КонецЕсли;
	// -CRM_Модуль
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Ссылка.Ответственный <> Объект.Ответственный Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Объект.Ссылка, Объект.Ответственный);
		
		Если ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			CRM_ОбщегоНазначенияСервер.УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(Объект.Ссылка,
				 Объект.Ссылка.Ответственный,
				 Объект.Ответственный);
		КонецЕсли;
		
		Если Не Объект.Ответственный = ТекущийПользователь Тогда
			// Если объект перенаправил на себя текущий пользователь, то оповещять его об этом не надо.
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.Ответственный,
				 Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах,
				 Объект.Ссылка);
			Если НЕ (ПараметрыОповещения = Неопределено) Тогда
				CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
			МассивЗадач = Новый Массив;
			МассивЗадач.Добавить(БизнесПроцесс);
			CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(МассивЗадач, Объект.Ответственный);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПоддержка
		 И Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя успешно завершать интерес потенциального клиента. Зарегистрируйте партнера.';
				|en='It is impossible to successfully complete the lead of a potential customer. Register a partner.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьРеквизитыСостояния(ТекущееСостояние, Отказ);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если Не Отказ И Не ЗначениеЗаполнено(Объект.Номер) И ФлагКопированияИнтереса Тогда
		Если Объект.Тема = "КопированиеИнтереса" Тогда
			ТекущийОбъект.УстановитьНовыйНомер();
			
			НоваяТемаИнтереса = "#" + ТекущийОбъект.Номер;
			
			Объект.Тема			= НоваяТемаИнтереса;
			ТекущийОбъект.Тема	= НоваяТемаИнтереса;
		КонецЕсли;
	ИначеЕсли Отказ И ФлагКопированияИнтереса И Объект.Тема = "КопированиеИнтереса" Тогда
		Объект.Тема = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	ОбновитьЗаголовокФормы();
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент) 
				И ЗначениеЗаполнено(ТекущийОбъект.Партнер)
				И НЕ ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент.Партнер) 
				Тогда
				
			ПотенциальныйКлиентОбъект = ТекущийОбъект.ПотенциальныйКлиент.ПолучитьОбъект();
			ПотенциальныйКлиентОбъект.Партнер = ТекущийОбъект.Партнер;
			ПотенциальныйКлиентОбъект.КонтактноеЛицо = ТекущийОбъект.КонтактноеЛицо;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПеревеситьДокументыНаПартнера(ТекущийОбъект.ПотенциальныйКлиент, ТекущийОбъект.Партнер,
				 ТекущийОбъект.КонтактноеЛицо);
			CRM_ОбщегоНазначенияСервер.ПереписатьАктивныеИнтересыСПотенциальногоКлиентаНаПартнера(ТекущийОбъект.ПотенциальныйКлиент,
				 ТекущийОбъект.Партнер,
				 ТекущийОбъект.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Интерес", Объект.Ссылка);
	Оповестить("ОбновитьАРМ", Объект.СостояниеИнтереса, ЭтотОбъект);
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) 
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
			ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Объект.ДокументОснование,
				 "ВзаимодействиеОснование");
			Если ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Основание",		ОснованиеЗвонка);
				СтруктураОповещения.Вставить("Звонок",			Объект.ДокументОснование);
				СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
				СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
				СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
				Оповестить("СофтФон_ЗаписьИнтереса", СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			//сфпCoMagicIDЗвонка = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
			//Если НЕ ПустаяСтрока(сфпCoMagicIDЗвонка) Тогда
			//	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			//		сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.КонтактноеЛицо, сфпCoMagicIDЗвонка);
			//	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			//		сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.Партнер, сфпCoMagicIDЗвонка);
			//	КонецЕсли;	
			//	сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
			//КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	Если ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") 
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы, "Объект")
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы.Объект, "Ссылка")
		И ((ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Телемаркетинг")) 
		ИЛИ (ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"))) Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
			СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
			СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
			СтруктураОповещения.Вставить("ПартнерСтрокой",	Объект.Описание);
			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
	КонецЕсли;
	
	ДокументЗаписан = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		СкорретироватьРеквизитыБизнесПроцесса();
	КонецЕсли;
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ФлагКопированияИнтереса = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)	
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьСвязанныхПартнеров.Доступность = Ложь Тогда
		Элементы.Разделы_ПереключитьСвязанныхПартнеров.Доступность = Истина;
	КонецЕсли;
	
	// +CRM_Модуль
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	ДанныеВыбранногоСостоянияИнтереса = Неопределено;
	// -CRM_Модуль
	
	Элементы.ГруппаПричинаОтказа.Видимость =
		(Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение);
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ВывестиЧекЛист();
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИнтересИзмененТриггером") Тогда
		ЗаполнитьПанельСостоянийИнтереса();
	КонецЕсли;
	
	Если ВыведеныКонтактныеДанные Тогда
		ЗаполнитьКонтактнуюИнформациюКонтактов();
		НастроитьОтображениеКонтактныхДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаЗаполнения(ПроверяемыеРеквизиты, Отказ);
	
	// СтандартныеПодсистемы.Свойства
	Если Не ДополнительныеРеквизитыПроверены И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Отказ И Объект.Тема = "КопированиеИнтереса" Тогда
		Объект.Тема = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервереБезКонтекста
Функция ПолучитьШиринуЭлемента(ЗначениеЭлемента, Полужирный = Ложь, ВебКлиент = Ложь)
	СтрокаЗначения = Строка(ЗначениеЭлемента);
	ДлинаПредставления = СтрДлина(СтрокаЗначения);
	Если ДлинаПредставления > 30 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.4, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 24 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.35, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 18 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.3, 0, РежимОкругления.Окр15как20);
	ИначеЕсли ДлинаПредставления > 12 Тогда
		ШиринаЭлемента	= Окр(ДлинаПредставления / 1.25, 0, РежимОкругления.Окр15как20);
	Иначе	
		ШиринаЭлемента	= ДлинаПредставления;
	КонецЕсли;
	Если НЕ ВебКлиент Тогда
		ШиринаЭлемента	= ШиринаЭлемента - 1;
	КонецЕсли;	
	Если Полужирный	Тогда
		Если ДлинаПредставления > 18 Тогда
			ШиринаЭлемента	= ШиринаЭлемента + 2;
		Иначе	
			ШиринаЭлемента	= ШиринаЭлемента + 1;
		КонецЕсли;	
	КонецЕсли;
	Если ВРег(СтрокаЗначения) = СтрокаЗначения Тогда
		ШиринаЭлемента	= ШиринаЭлемента + 2;
	КонецЕсли;
	Возврат ШиринаЭлемента;
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// +CRM_Модуль
	ОрганизацияПриИзмененииСервер();
	ПечатьСчета_ОрганизацияПриИзмененииСервер();
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, Дополнительно) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно);
	#Если ВебКлиент Тогда
	ЗаполнитьПанельСостоянийИнтереса(, Истина);
	#Иначе	
	ЗаполнитьПанельСостоянийИнтереса();
	#КонецЕсли
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
	ОбработатьПараметрыОбновления(Дополнительно);
	КолонкиАРМ = Новый Массив;
	КолонкиАРМ.Добавить(Дополнительно.Состояние);
	КолонкиАРМ.Добавить(Дополнительно.НовоеСостояние);
	Оповестить("ОбновитьАРМ", КолонкиАРМ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПараметрыОбновления(ПараметрыОбработки)
	
	Если ТипЗнч(ПараметрыОбработки.НовоеСостояние) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
		
		Если ПараметрыОбработки.НовоеСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
			ПараметрыОбработки.НовоеСостояние = "ТаблицаУспешно";
		ИначеЕсли ПараметрыОбработки.НовоеСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
			ПараметрыОбработки.НовоеСостояние = "ТаблицаНеудачно";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОбработки.Состояние) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
		
		Если ПараметрыОбработки.Состояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
			ПараметрыОбработки.Состояние = "ТаблицаУспешно";
		ИначеЕсли ПараметрыОбработки.Состояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
			ПараметрыОбработки.Состояние = "ТаблицаНеудачно";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно)
	Если Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных Тогда
		Прочитать();
	КонецЕсли;
	
	НастроитьРолевуюАдресацию(Дополнительно.НовоеСостояние);
	
	Если Результат.Свойство("Успех") Тогда
		Если Результат.Успех Тогда
			ОбъектЗначение = РеквизитФормыВЗначение("Объект");
			ЗаполнитьЗначенияСвойств(ОбъектЗначение, Результат.ИнтересОбъект, , "CRM_Теги,
				| ДополнительныеРеквизиты, Контакты, ЧекЛист, " + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "Товары",
				 "Товары,
				| СкидкиНаценки"));
			Если ЗаполнятьПервичныйИнтерес И Результат.Свойство("КаналПервичногоИнтереса") Тогда
				КаналПервичногоИнтереса = Результат.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса = Результат.ИсточникПервичногоИнтереса;
			КонецЕсли;
			ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	Иначе	
		Если ПроверитьЗаполнение() Тогда
			ПеревестиИнтересВСледующееСостояниеСервер(Дополнительно.НовоеСостояние, Дополнительно.Этап);
		Иначе
			НастроитьРолевуюАдресацию(Объект.СостояниеИнтереса);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Записать();
	
	ЗаблокироватьРеквизитыПоСостояниюИнтереса();

	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(Объект.СостояниеИнтереса);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
		 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса",
		 Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
		 Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
КонецПроцедуры

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеСервер(СостояниеИнтереса, Этап = Неопределено)
	
	Если Объект.СостояниеИнтереса <> СостояниеИнтереса Тогда
		Объект.СостояниеИнтереса = СостояниеИнтереса;
		Объект.ВероятностьСделки = СостояниеИнтереса.ВероятностьСделки;
		Объект.Завершен = СостояниеИнтереса.Завершено;
		
		Если ЗначениеЗаполнено(Объект.ПричинаОтказа) 
			И Объект.СостояниеИнтереса.ВидСостояния <> Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
			И Объект.СостояниеИнтереса.ВидСостояния <> Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
			
			Объект.ПричинаОтказа = Справочники.CRM_ПричиныОтказаПоИнтересам.ПустаяСсылка();
		КонецЕсли;
		
		РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Объект.Ссылка, СостояниеИнтереса);
		
		CRM_ИнтересыСервер.СоздатьАвтоВзаимодействияПоИнтересу(Объект, СостояниеИнтереса, ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса,
			 "ТипЗначения"));
	КонецЕсли;	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Видимость = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Видимость = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)	И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры // КаналПервичногоИнтересаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	КаналПервичногоИнтереса);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ИсточникПервичногоИнтереса".
//
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		
		Если ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				 И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса,
					 "Владелец"));
			КонецЕсли;
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ,
				 ВариантОткрытияОкна.ОтдельноеОкно, ,
				 ОписаниеВыбораПартнера);
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.Партнеры") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ФормаВыбора = ПолучитьФорму("Документ.CRM_Телемаркетинг.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ФормаВыбора.Открыть();
			
		КонецЕсли;
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры // ИсточникПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ТипУслуги".
//
Процедура ТипУслугиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) и Не ЭтоПоддержка Тогда
			Если НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги
				 И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!'"));
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ТипУслугиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ТипУслуги".
//
Процедура ТипУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтандартнаяОбработка	= Ложь;
		ПараметрыФормы			= Новый Структура;
		МассивСвоихТиповУслуг	=
			CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если МассивСвоихТиповУслуг.Количество() > 0 Тогда
			// Если есть массив своих типов услуг, то накладываем фильтр.
			ПараметрыФормы.Вставить("МассивСвоихТиповУслуг", МассивСвоихТиповУслуг);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ТипУслуги);
		КонецЕсли;	
		ОткрытьФорму("Справочник.CRM_ТипУслуги.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ТипУслугиНачалоВыбора()

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()

	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(Объект.Ответственный,
		 "Подразделение");
	Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
	ПодразделениеПриИзмененииСервере();

КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Объект.Ответственный = Неопределено Тогда
		Объект.Ответственный = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ВыбранПользователь = (ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи"));
	
	Если ВыбранПользователь Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ТекущийПользователь;
		КонецЕсли;
		
	ИначеЕсли Объект.Ответственный = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		
			ТекстОшибки = НСтр("ru='Это служебная роль. Выбор ее для адресации не предусмотрен.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Объект.Ответственный = ОтветственныйДоИзменения;
			Возврат;
		
	КонецЕсли;
	
	ОтветственныйПриИзмененииНаСервере();
	
	СоисполнителиДобавитьОтветственногоДокумента();
	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура ДекорацияКомментарийОценкиНажатие(Элемент)
	Если ПустаяСтрока(КомментарийОценки) Тогда
		Возврат;
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиент.ПоказатьНашеПредупреждение(КомментарийОценки);
КонецПроцедуры

&НаСервере
Функция ПолучитьПервоеСостояниеСценария(НовыйСценарий)
	Возврат Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(НовыйСценарий);
КонецФункции

&НаСервере
Процедура ПодразделениеПриИзмененииСервере()
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		// Если типа услуги нет в массиве своих услуг, то его очищаем.
		МассивСвоихТиповУслуг	=
			CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(Объект.ТипУслуги) = Неопределено) Тогда
			Объект.ТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Подразделение".
//
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервере();		
КонецПроцедуры // ПодразделениеПриИзменении()

&НаСервере
Процедура ПроектПриИзмененииНаСервере()

	МассивСоисполнителей = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Если ЗначениеЗаполнено(Объект.Проект.Ответственный) Тогда
			МассивСоисполнителей.Добавить(Объект.Проект.Ответственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Проект.CRM_ТекущийЭтап)
			И ЗначениеЗаполнено(Объект.Проект.CRM_ТекущийЭтап.Ответственный) Тогда
			МассивСоисполнителей.Добавить(Объект.Проект.CRM_ТекущийЭтап.Ответственный);
		КонецЕсли;
		СоисполнителиДобавитьПользователей(МассивСоисполнителей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииНаСервере();
	Если ВыведеныСоисполнители Тогда
		СоисполнителиОбновитьПослеИзменения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПотенциальныйКлиентПриИзмененииНаСервере()
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
		 Объект.ПотенциальныйКлиент, "ГруппаКИПК",
		 СписокТиповКИ.ВыгрузитьЗначения());
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент.Организация) Тогда
		Элементы.ДекорацияОрганизацияПК.Заголовок = "Компания: " + Объект.ПотенциальныйКлиент.Организация;
	Иначе
		Элементы.ДекорацияОрганизацияПК.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Партнер".
//
Процедура ПартнерПриИзменении(Элемент)
	
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда // Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		Возврат;
	КонецЕсли;
	
	Если Элемент <> Неопределено Тогда
		КаналПервичногоИнтереса	= Неопределено;
		ИсточникПервичногоИнтереса	= Неопределено;
	КонецЕсли;
	ПартнерПередИзменением = Партнер;
	Партнер = Объект.Партнер;
	
	Если ПартнерПередИзменением <> Объект.Партнер Тогда
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если ЗначениеЗаполнено(Объект.ТипУслуги) 
				И Не CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!'"));
			КонецЕсли;
		КонецЕсли;
		СтруктураДанные = ПолучитьДанныеПартнерПриИзменении(Объект.Дата, Объект.Валюта, Объект.Партнер,
			Объект.Организация, Объект.Проект);
		
		Объект.КонтактноеЛицо = СтруктураДанные.ОсновноеКонтактноеЛицо;
		
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			КонтактыОбработкаВыбораСервер(Объект.КонтактноеЛицо, Истина);
		КонецЕсли;
		
		СформироватьОписаниеКаналаИсточника();
		ДоступностьПервичногоИнтереса();
		
		ОбновитьЗаголовокФормы();
		ОбновленПартнерКонтакт = Истина;
		
		ПартнерПриИзмененииНаСервере();
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		
		// +CRM_Модуль
		ПартнерПриИзмененииСервер();
		// -CRM_Модуль
		
		НайденныеКонтакты = ПолучитьКонтактыПредыдущегоПартнера(ПартнерПередИзменением);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтруктураДанные", СтруктураДанные);
		ДопПараметры.Вставить("ПартнерПередИзменением", ПартнерПередИзменением);
		ДопПараметры.Вставить("НайденныеКонтакты", НайденныеКонтакты);
		
		Если НайденныеКонтакты.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Удалить контактные лица предыдущего клиента из таблицы контактов?'");
			ОповещениеПродолжения = Новый ОписаниеОповещения("ОчисткаКонтактовПродолжение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		// +CRM_Модуль
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			СоглашениеПриИзменении(Элемент);
		КонецЕсли;
		// -CRM_Модуль
		
	КонецЕсли;
	
КонецПроцедуры // ПартнерПриИзменении()

&НаКлиенте
Процедура ОчисткаКонтактовПродолжение(Ответ, ДопПараметры) Экспорт
	
	НайденныеКонтакты = ДопПараметры.НайденныеКонтакты;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого ИдентификаторСтроки Из НайденныеКонтакты Цикл
			ТекСтрока = Объект.Контакты.НайтиПоИдентификатору(ИдентификаторСтроки);
			Объект.Контакты.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактыПредыдущегоПартнера(ПартнерСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец
		|	И КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактов)";
	
	Запрос.УстановитьПараметр("Владелец", ПартнерСсылка);
	Запрос.УстановитьПараметр("МассивКонтактов", Объект.Контакты.Выгрузить().ВыгрузитьКолонку("Контакт"));
	
	МассивКонтактов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СтруктураПоиска = Новый Структура("Контакт", МассивКонтактов);
	НайденныеКонакты = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.Контакты Цикл
		Если МассивКонтактов.Найти(ТекСтрока.Контакт) <> Неопределено Тогда
			НайденныеКонакты.Добавить(ТекСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеКонакты;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Ссылка = ТекущаяЗадача Тогда
		Если Элементы.Найти("ГруппаОписаниеЗадачи") <> Неопределено Тогда
			Элементы.ГруппаОписаниеЗадачи.Показать();
			Возврат;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Ссылка = БизнесПроцесс Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальныйКлиентНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Объект.ПотенциальныйКлиент);
	ПараметрыОткрытия.Вставить("ТекущийИнтерес", Объект.Ссылка);
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.ПотенциальныйКлиент.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
	
	ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОписаниеОткрытиеЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		ОповещениеЗавершения,
		Объект.Описание,
		Элементы.Описание.Заголовок);
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОткрытиеЗавершение(ВведенныйТекст, ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВведенныйТекст <> Объект.Описание Тогда
		Объект.Описание = ВведенныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область Поддержка

&НаКлиенте
Процедура ТипОбращенияПриИзменении(Элемент)
	
	Если Объект.ТипОбращения = ТипОбращенияКэш Тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхСценариев = ПолучитьСписокДоступныхСценариевПоддержки(Объект.ТипОбращения);
	Если СписокДоступныхСценариев.Количество() = 1 Тогда
		ТипОбращенияПриИзмененииЗавершение(СписокДоступныхСценариев[0], Неопределено);
	ИначеЕсли СписокДоступныхСценариев.Количество() > 1 Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ТипОбращенияПриИзмененииЗавершение", ЭтотОбъект);
		СписокДоступныхСценариев.ПоказатьВыборЭлемента(ОповещениеЗавершения, НСтр("ru='Выбрите сценарий'"));
	Иначе
		ТекстОшибки = НСтр("ru='Нет доступных сценариев для типа обращения: '") + Объект.ТипОбращения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Объект.ТипОбращения = ТипОбращенияКэш;
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ОжидаемаяВыручкаПриИзменении(Элемент)
	Объект.ОжидаемаяВыручка =  ПересчитатьСуммуПоВалюте(ВыручкаВВалюте, Объект.Валюта, ВалютаУправленческогоУчета);
КонецПроцедуры

&НаКлиенте
Процедура ТипОбращенияПриИзмененииЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Объект.ТипОбращения = ТипОбращенияКэш;
		Возврат;
	КонецЕсли;
	
	НовыйСценарий = ВыбранноеЗначение.Значение;
	ТекущийСценарий = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СостояниеИнтереса, "Родитель");
	ТипОбращенияКэш = Объект.ТипОбращения;
	ЭтоПоддержка = (Объект.ТипОбращения <> ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес"));
	
	Если НовыйСценарий <> ТекущийСценарий Тогда
		Дополнительно = Новый Структура;
		Дополнительно.Вставить("НовоеСостояние", ПолучитьПервоеСостояниеСценария(НовыйСценарий));
		Дополнительно.Вставить("Состояние", Объект.СостояниеИнтереса);
		Дополнительно.Вставить("Этап", НовыйСценарий);
		ОбработатьИнтересЗавершение(Новый Структура, Дополнительно);
	КонецЕсли;
	
	Элементы.ОтправитьКП_Почта.Видимость = Не ЭтоПоддержка;
	Элементы.ОтправитьКП_Мессенджер.Видимость = Не ЭтоПоддержка;
	
	ПересчитатьСлужебныеРеквизитыПоддержки();
	ОбновитьДанныеПоддержки();
	#Если ВебКлиент Тогда
	ЗаполнитьПанельСостоянийИнтереса(, Истина);
	#Иначе	
	ЗаполнитьПанельСостоянийИнтереса();
	#КонецЕсли
	ОбновитьЭлементыДополнительныхРеквизитов();
	УстановитьВидимостьЭлементовПоТипуОбращения();
	
	ОбновитьСоставКомандГруппыСоздать();
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньПоддержкиОписаниеОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПересчитатьСроки" Тогда
		СтандартнаяОбработка = Ложь;
		ПересчитатьСрокиНаСервере();
		ОбновитьДанныеПоддержки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	Если СтрНайти(Команда.Имя, "Кнопка") <> 0 Тогда
		ИмяВсплывающейГруппы		= СтрЗаменить(Команда.Имя, "Кнопка", "");
		ЭлементВсплывающейГруппы	= Элементы[ИмяВсплывающейГруппы];
		
		Если ЭлементВсплывающейГруппы <> Неопределено И ЭлементВсплывающейГруппы.Скрыта() Тогда
			ИмяПоследнейКомандыКонтактнойИнформации = Команда.Имя;
			ПодключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформация_Закрытие()
	
	Если ПустаяСтрока(ИмяПоследнейКомандыКонтактнойИнформации)
			Или СтрНайти(ИмяПоследнейКомандыКонтактнойИнформации, "КнопкаПодменю") = 0 Тогда
		ОтключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие");
		Возврат;
	КонецЕсли;
	
	Если Элементы[СтрЗаменить(ИмяПоследнейКомандыКонтактнойИнформации, "Кнопка", "")].Скрыта() Тогда
		ТекущийЭлемент = Элементы[ИмяПоследнейКомандыКонтактнойИнформации];
		ОтключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие");
	Иначе
		ПодключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатие(Команда)
	
	CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
	Если Команда.Имя = "СделатьКЛОсновным" Тогда
		Если Элементы["ГруппаСписокКЛ"].Скрыта() Тогда
			//КонтактноеЛицоПриИзменении();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Контактное лицо не выбрано!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_КлиентыКлиент.КонтактныеЛицаВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_HTMLДокументСформирован(Элемент)
	
	Если Лента_HTML_ПозицияОтКрая <> 0 Тогда
		Смещение = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight - Лента_HTML_ПозицияОтНачала;
		Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop = Лента_HTML_ПозицияОтКрая + Смещение;
		Лента_HTML_ПозицияОтКрая = 0;
		Лента_HTML_ПозицияОтНачала = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	Если сфпСофтФонПроСервер.ЭтоСсылкаСлужебногоПользователя(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			Если ИмяКоманды = "ОбъектЛенты_Закрепить_" Или ИмяКоманды = "ОбъектЛенты_Открепить_" Тогда
				Лента_HTML_ПозицияОтКрая = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollTop;
				Лента_HTML_ПозицияОтНачала = Элементы.Лента_HTML.Документ.getElementById("scollable-wrap").scrollHeight;
			КонецЕсли;
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ЗадачаИсполнителя")
		 И ЗначениеЗаполнено(ЭтотОбъект["ЗадачаИсполнителя"])
		И СтрНайти(ДанныеСсылки, ПолучитьНавигационнуюСсылку(ЭтотОбъект["ЗадачаИсполнителя"])) > 0 Тогда
		Если Элементы.Найти("ГруппаОписаниеЗадачи") <> Неопределено Тогда
			Элементы.ГруппаОписаниеЗадачи.Показать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаОбъект = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСсылки);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.ОткрытиеВОдинКлик.ПереходИзЛентыКарточкиИнтерес");
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			 Новый Структура("Ключ", СсылкаНаОбъект),
			 ЭтотОбъект);
	Иначе
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			ПозицияНайденного = СтрНайти(ДанныеСсылки, "e1cib/");
			ДлинаСсылкиВнутр  = СтрДлина(ДанныеСсылки) + 1 - ПозицияНайденного;
			НавигационнаяСсылка = Прав(ДанныеСсылки, ДлинаСсылкиВнутр);
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			// Обработка не требуется.
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаИнтереса");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Лента_ОтборПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Лента_Отбор_", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_Пометка", "");
	
	Если ИмяЭлемента = "Звонки" Или ИмяЭлемента = "Письма" Тогда
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяЭлемента);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяЭлемента);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяЭлемента);
		ЭлементСпискаВходящие.Пометка = ЭлементСписка.Пометка;
		ЭлементСпискаИсходящие.Пометка = ЭлементСписка.Пометка;
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Входящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Входящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	Если СтрНайти(ИмяЭлемента, "Исходящие") > 0 Тогда
		ИмяРодителя = СтрЗаменить(ИмяЭлемента, "Исходящие", "");
		ЭлементСписка = Лента_Отбор.НайтиПоЗначению(ИмяРодителя);
		ЭлементСпискаВходящие = Лента_Отбор.НайтиПоЗначению("Входящие" + ИмяРодителя);
		ЭлементСпискаИсходящие = Лента_Отбор.НайтиПоЗначению("Исходящие" + ИмяРодителя);
		ЭлементСписка.Пометка = Макс(ЭлементСпискаВходящие.Пометка, ЭлементСпискаИсходящие.Пометка);
	КонецЕсли;
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество() - 1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	CRM_ЛентаСобытий.СохранитьОтборЛенты(Лента_Отбор, "ЛентаИнтереса");
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ЗакрепленныеСверхуПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	
	Если НастройкаВсеСобытия.Пометка И Не Лента_ЗакрепленныеСверху Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	СохранитьЗначениеЗакрепленныеСверху();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеЗакрепленныеСверху()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("CRM_ЛентаСобытий_ЗакрепленныеСверху",
		"ЛентаИнтереса", Лента_ЗакрепленныеСверху);
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
			
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	ПроверитьКорректностьДатыОкончания();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ДанныеБыстрогоВвода",
		 CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаИнтереса",
		 БыстрыйВвод_ТекущийТипОбъекта,
		 ЭтотОбъект));
	ПараметрыОткрытия.ДанныеБыстрогоВвода.Вставить("ОткрыватьФорму", Истина);
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка = Ложь;
			
			БыстрыйВвод_ДатаНачала = ВыбранноеЗначение.Начало;
			БыстрыйВвод_ДатаОкончания = ВыбранноеЗначение.Конец;
			
			БыстрыйВвод_ДатаНачалаПриИзменении();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДлительностьИнтервала = БыстрыйВвод_ДатаОкончания - БыстрыйВвод_ДатаНачала;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// Осуществляется перенос обеих дат на указанный интервал
			БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаНачала, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение, ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаНачала = Результат;
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаНачалаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		
		СрокПоУмолчанию = 3600;
		Если БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
			СрокПоУмолчанию = 1800;
		КонецЕсли;
		
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СрокПоУмолчанию;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(БыстрыйВвод_ДатаОкончания, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БыстрыйВвод_ДатаОкончания = Результат;
	КонецЕсли;
	
КонецПроцедуры // БыстрыйВвод_ДатаОкончанияОбработкаВыбораЗавершение()

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	ПроверитьКорректностьДатыОкончания();
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_ПримечаниеТема", "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		 "БыстрыйВвод_КомандыПримечание", "Видимость",
		 ТемаЗаполнена);
	Если ТемаЗаполнена Тогда
		Элементы.БыстрыйВвод_СоздатьПримечание.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;		
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Тема");
	БыстрыйВвод_Содержание = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

// не используется
&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала,
		 БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели),
		 "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий),
		 "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий),
		 "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение",
		 ЭтотОбъект,
		 Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия, , , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru='Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",
		 ПараметрыОткрытия, ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки - 1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество() - 1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + ВыбранноеЗначение;
	
	Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных, Ожидание,
	 СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки - 1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество() - 1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Файл
&НаКлиенте
Процедура БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
	ВысотаТемы = ?(ЗначениеЗаполнено(Текст), 3, 1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
		 "Высота",
		 ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
		 "Видимость",
		 ЕстьВложения);
	
	Если ЕстьВложения Тогда
		Элементы.БыстрыйВвод_СоздатьФайл.КнопкаПоУмолчанию = Истина;
	Иначе	
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Чат
&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка, Истина);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбораЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыбранноеЗначение = "НайтиВМессенджерах" Тогда
		
		ДополнительныеДанныеНомеровСоответствие = Новый Соответствие;
		МассивТелефонныхНомеров = ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие);
		
		Если МассивТелефонныхНомеров.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
													ПолучитьНавигационнуюСсылку(Объект.Ссылка),
													НСтр("ru = 'Не найдены номера телефонов для поиска в мессенджерах'"));
		Иначе
			
			ПараметрыПрозвона = Новый Структура("Форма, Ссылка", ЭтотОбъект, Объект.Ссылка);
			ПараметрыПрозвона.Вставить("ПрозвонВсехНомеров");
			ПараметрыПрозвона.Вставить("МассивТелефонныхНомеров", МассивТелефонныхНомеров);
			ПараметрыПрозвона.Вставить("МассивИсключаемыхМессенджеров", Новый Массив);
			ПараметрыПрозвона.Вставить("ДополнительныеДанныеНомеровСоответствие", ДополнительныеДанныеНомеровСоответствие);
			ПараметрыПрозвона.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
			
			ПараметрыПрозвона.Вставить("ИмяТаблицыКИ", "КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов");
			ПараметрыПрозвона.Вставить("ОбъектИнтереса");
			ИмяРеквизитаКИ = "";
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ИмяРеквизитаКИ = "ВидКИ_Клиент";
				ПараметрыПрозвона.ОбъектИнтереса = Объект.Партнер;
			ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
				ИмяРеквизитаКИ = "ВидКИ_ПК";
				ПараметрыПрозвона.ОбъектИнтереса = Объект.ПотенциальныйКлиент;
			КонецЕсли;
			ПараметрыПрозвона.Вставить("ИмяРеквизитаКИ", ИмяРеквизитаКИ);
			ПараметрыПрозвона.Вставить("БезЗаполненияПолей");
			
			CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ЗапуститьДлительнуюОперациюПрозвонитьМессенджеры(ПараметрыПрозвона);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("Идентификатор", ДополнительныеПараметры.ВыбранноеЗначение);
		НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныйПолучатель = НайденныеСтроки[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель				= НайденныйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
			
			// учетная запись есть в списке доступных пользователю
			Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись",
				 НайденныйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
				БыстрыйВвод_ЧатУчетнаяЗапись		= НайденныйПолучатель.УчетнаяЗапись;
				БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;                                                         
			КонецЕсли; 
			
			БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
			
		КонецЕсли;
		
		УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
		CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
		CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаЧатСодержание(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ЧатУчетнаяЗапись = ВыбранноеЗначение;
	БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтветственныйДоИзменения = Объект.Ответственный;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьОжидаемуюВыручку(Команда)
	ПерезаполнитьОжидаемуюВыручкуНаСервере(); // +CRM_Модуль
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи", Новый Структура("Задача", ТекущаяЗадача), ЭтотОбъект,
		 , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыВыбораПользователя = Новый Структура("Партнер, КонтактноеЛицо", Объект.Партнер, Объект.КонтактноеЛицо);
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ПараметрыВыбораПользователя.Вставить("ТипУслуги", Объект.ТипУслуги);
	КонецЕсли;			
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", ПараметрыВыбораПользователя, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРоль(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьНаКонтроль(Команда)
	
	Если Модифицированность Тогда
		ОповещениеКонтрольВопрос = Новый ОписаниеОповещения("КонтрольВопросЗавершение", ЭтотОбъект);
		ПроверкаВопросЗаписатьДанные(ОповещениеКонтрольВопрос);
	Иначе
		КонтрольВопросЗавершение(Истина, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма", Новый Структура("БизнесПроцесс",
		 БизнесПроцесс), ЭтотОбъект,
		 УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Избранный(Команда)
	Объект.Избранный = НЕ Объект.Избранный;
	ОформлениеИзбранного();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СменитьПроцесс(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СменитьПроцессПродолжить", ЭтотОбъект);
	
	Если ЭтоПоддержка Тогда
		ТекстВопроса = НСтр("ru = 'Обращение будет передано в процесс продажи. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Интерес будет передан в процесс поддержки. Продолжить?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТекущийИнтерес(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СкопироватьТекущийИнтересЗавершение", ЭтотОбъект
		);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Для копирования необходимо выполнить запись данных';"
			"en = 'To copy, you need to write data'"),
			РежимДиалогаВопрос.ОКОтмена, ,
			КодВозвратаДиалога.ОК,
			НСтр("ru = 'Внимание!'; en = 'Attention!'")
		);
	Иначе
		ВыполнитьКопированиеТекущегоИнтереса();
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТекущийИнтерес()

&НаКлиенте
Процедура СменитьПроцессПродолжить(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоддержка Тогда
		Объект.ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес");
		ТипОбращенияПриИзменении(Неопределено);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("СменитьПроцессЗавершение", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТолькоПоддержка", Истина);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выберите тип обращения'"));
		ОткрытьФорму("Справочник.CRM_ТипыОбращений.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект,
			 УникальныйИдентификатор, , ,
			 ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПроцессЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипОбращения = ВыбранноеЗначение;
	ТипОбращенияПриИзменении(Неопределено);
	
КонецПроцедуры

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
		Элементы.Лента_СписокОтборов.Показать();
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОткрытьЖурналДокументов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоИнтересу", Объект.Ссылка);
	
	ОткрытьФорму(
		"Обработка.CRM_УниверсальныйЖурналДокументов.Форма.ФормаФиксированныйОтбор",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры // Лента_ОткрытьЖурналДокументов()

&НаКлиенте
Процедура Лента_Закрыть()
	
	Если Элементы.Лента_СписокОтборов.Скрыта() Тогда
		
		ТекущийЭлемент = Элементы.Лента_ПоказатьОтборы;
		ОтключитьОбработчикОжидания("Лента_Закрыть");
		
		CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Прочее.ЛентаСобытий.ДлительностьСценариев.ВремяУстановкиФильтра");
		
	Иначе
		ПодключитьОбработчикОжидания("Лента_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыМассив = СтрРазделить(Команда.Значение, "_");
	Иначе	
		ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
		Если Команда.Имя = "БыстрыйВвод_Чат" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ЧатКарточкаИнтерес");
		КонецЕсли;
	КонецЕсли;
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
	Если Элементы.ЧекЛист.Видимость Тогда
		ДекорацияСвернутьРазвернутьЧекЛистНажатие(Неопределено);
		ЧекЛист_ПоказатьПослеВвода = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		НайтиВходящиеПисьмаВИнтересе(ДополнительныеПараметры);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаИнтереса",
			БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		Если ДополнительныеПараметры.Свойство("ОтправитьКакОтвет") Тогда
			ДанныеЗаполнения.Вставить("ВзаимодействиеОснование", ДополнительныеПараметры.ВзаимодействиеОснование);
			ДанныеЗаполнения.Вставить("ИдентификаторОснования", ДополнительныеПараметры.ИдентификаторСообщения);
			ДанныеЗаполнения.Вставить("ИдентификаторыОснований", СокрЛП(ДополнительныеПараметры.ИдентификаторыОснований 
				+ " <" + ДополнительныеПараметры.ИдентификаторСообщения + ">"));
		КонецЕсли;
		
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
			ВозможностьОтправкиСообщения = CRM_ЛентаСобытий.ПроверитьВозможностьОтправкиСообщения(ДанныеЗаполнения);
			Если Не ВозможностьОтправкиСообщения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данный мессенджер нельзя писать первыми!
				                                           |С указанным контактом не было диалогов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
			СформироватьПредставлениеВложений();
		КонецЕсли;
		
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		
		Если ЧекЛист_ПоказатьПослеВвода И Не Элементы.ЧекЛист.Видимость Тогда
			ЧекЛист_ПоказатьПослеВвода = Ложь;
			Элементы.ЧекЛист.Видимость = Истина;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
	Если ЧекЛист_ПоказатьПослеВвода И Не Элементы.ЧекЛист.Видимость Тогда
		ЧекЛист_ПоказатьПослеВвода = Ложь;
		Элементы.ЧекЛист.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДругиеПараметрыЗавершение", ЭтотОбъект, Новый Структура);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметрыЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если Не ОбъектЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ВыбранныйЭлемент.Значение, "БыстрыйВвод_") = 1 Тогда
		БыстрыйВвод_СменитьСтраницу(ВыбранныйЭлемент);
	Иначе
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаИнтереса", ВыбранныйЭлемент.Значение, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаКомандыЛенты".
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыЛенты(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ДополнительныеПараметры = Новый Структура;
	СписокКоманд = Новый СписокЗначений;
	ИмяКоманды = СтрЗаменить(Элемент.Имя, "ОбычныйВвод_", "");
	СписокКоманд.Добавить(ИмяКоманды, Элемент.Заголовок); 
	ОбычныйВвод_ПоказатьЕщеЗавершение(СписокКоманд[0], ДополнительныеПараметры);	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайл(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ДобавитьФайлЗавершение", ЭтотОбъект);
	CRM_ЛентаСобытийКлиент.ДобавитьВложение(ЭтотОбъект, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДобавитьФайлЗавершение(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БыстрыйВвод_УдалитьФайл(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "БыстрыйВвод_Удалить_СсылкаВложения_", "");
	
	CRM_ЛентаСобытийКлиент.УдалитьВложение(ЭтотОбъект, ИдентификаторСсылкиВложения);
	
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВставитьФайлИзБуфера(Команда)
	
	CRM_ЛентаСобытийКлиент.ВставитьФайлИзБуфераОбмена(ЭтотОбъект);
	БыстрыйВвод_ОбновитьЭлементыВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаИнтереса", ИмяКомандыМассив[1], ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПоТипуОбращения(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;

	УИд = СтрЗаменить( СтрЗаменить(Команда.Имя, "КомандаСоздатьПоТипуОбращения_", "") , "_", "-");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипОбращения", ПолучитьТипОбращенияПоУИд(УИд));
	Если ПараметрыОткрытия.ТипОбращения = ПредопределенноеЗначение("Справочник.CRM_ТипыОбращений.Интерес") Тогда 
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	Иначе
		ПараметрыОткрытия.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзОбращений());
	КонецЕсли;
	ПараметрыОткрытия.Вставить("НеОбновлятьТипОбращения", Истина);
	ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

// +CRM_Модуль

&НаКлиенте
Процедура Подключаемый_ИнцидентыПоПредмету()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписьДокументаПередОткрытиемИнцидентов", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		                     |Переход к ""Инциденты"" возможен только после записи данных.
		                     |Данные будут записаны.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
		ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДокументаПередОткрытиемИнцидентов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ПараметрыФормы = Новый Структура("Предмет", Объект.Ссылка);
	ОткрытьФорму("Справочник.Инциденты.Форма.ИнцидентыПоПредмету", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетПриИзменении(Элемент) 
	Возврат; // Заглушка
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетКонтрагентаПриИзменении(Элемент) 
	Возврат; // Заглушка
КонецПроцедуры

&НаСервере
Процедура ПечатьСчета_ДоговорПриИзмененииСервер()
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.CRM_Модуль_БанковскийСчет, Объект.CRM_Модуль_БанковскийСчетКонтрагента);
КонецПроцедуры

&НаСервере
Процедура ПечатьСчета_ОрганизацияПриИзмененииСервер()
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.CRM_Модуль_БанковскийСчет);
КонецПроцедуры

&НаСервере
Процедура ПечатьСчета_КонтрагентПриИзмененииСервер()
	Объект.CRM_Модуль_БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчета()
	
	НовыйМассив = Новый Массив();
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Объект.Валюта));
	КонецЕсли;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Закрыт", Ложь));
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы["CRM_Модуль_БанковскийСчет"].ПараметрыВыбора = НовыеПараметры;
	Элементы["CRM_Модуль_БанковскийСчетКонтрагента"].ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

// -CRM_Модуль

&НаКлиенте
Процедура ИсторияРеквизитов(Команда)
	
	УсловияОтбора = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.CRM_ИсторияРеквизитов.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Навигация_Перейти(Команда)
	
	ИмяСтраницы = СтрЗаменить(Команда.Имя, "Навигация_", "");
	
	Если ИмяСтраницы = "Основное" Тогда
		
		Элементы.СтраницыДанныеДокумента.ТекущаяСтраница = Элементы.СтраницаДанныеДокумента;
		ТекущийЭлемент = Элементы.Навигация_Основное1;
		
	ИначеЕсли ИмяСтраницы = "ТоварыИУслуги" Тогда
		
		Если Не ВыведеныТоварыИУслуги Тогда
			ВывестиТоварыИУслуги();
			ЗаблокироватьРеквизитыПоСостояниюИнтереса();
			// +CRM_Модуль
			//ОбновитьНадписьЦеныИВалюту();
			// -CRM_Модуль
		КонецЕсли;
		ВыведеныТоварыИУслуги = Истина;
		
		Элементы.СтраницыДанныеДокумента.ТекущаяСтраница = Элементы.СтраницаТоварыИУслуги;
		ТекущийЭлемент = Элементы.Навигация_ТоварыИУслуги2;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьКонтакты(Команда)
	
	Если Не ВыведеныКонтактныеДанные Тогда
		ВывестиКонтактныеДанные();
	КонецЕсли;
	
	ВыведеныКонтактныеДанные = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьКонтактов = Элементы.ГруппаКонтактыВнутр.Видимость;
	Элементы.ГруппаКонтактыВнутр.Видимость = Не ВидимостьКонтактов;
	Если ВидимостьКонтактов Тогда
		Элементы.Разделы_ПереключитьКонтакты.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьКонтакты.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьСоисполнителей(Команда)
	
	Если Не ВыведеныСоисполнители Тогда
		ВывестиСоисполнителей();
	КонецЕсли;
	
	ВыведеныСоисполнители = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьСоисполнителей = Элементы.ГруппаСоисполнителиВнутр.Видимость;
	Элементы.ГруппаСоисполнителиВнутр.Видимость = Не ВидимостьСоисполнителей;
	Если ВидимостьСоисполнителей Тогда
		Элементы.Разделы_ПереключитьСоисполнителей.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		СформироватьТаблицуСоисполнители();
		Элементы.Разделы_ПереключитьСоисполнителей.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьБизнесПроцессы(Команда = Неопределено)
	
	Если Элементы.ГруппаСвязанныеПартнеры.Видимость Тогда
		Элементы.ГруппаСвязанныеПартнеры.Видимость = Ложь;
		Элементы.Разделы_ПереключитьСвязанныхПартнеров.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	КонецЕсли;
	
	Если Не ВыведеныБизнесПроцессы Тогда
		ВывестиБизнесПроцессы();
	КонецЕсли;
	
	ВыведеныБизнесПроцессы = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьБизнесПроцессов = Элементы.ГруппаБизнесПроцессы.Видимость;
	Элементы.ГруппаБизнесПроцессы.Видимость = Не ВидимостьБизнесПроцессов;
	Если ВидимостьБизнесПроцессов Тогда
		Элементы.Разделы_ПереключитьБизнесПроцессы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьБизнесПроцессы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьСвязанныхПартнеров(Команда = Неопределено)
	
	Если Элементы.ГруппаБизнесПроцессы.Видимость Тогда
		Элементы.ГруппаБизнесПроцессы.Видимость = Ложь;
		Элементы.Разделы_ПереключитьБизнесПроцессы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	КонецЕсли;
	
	Если Не ВыведеныСвязанныеПартнеры Тогда
		ВывестиСвязанныхПартнеров();
	КонецЕсли;
	
	ВыведеныСвязанныеПартнеры = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьСвязанныхПартнеров = Элементы.ГруппаСвязанныеПартнеры.Видимость;
	Элементы.ГруппаСвязанныеПартнеры.Видимость = Не ВидимостьСвязанныхПартнеров;
	Если ВидимостьСвязанныхПартнеров Тогда
		Элементы.Разделы_ПереключитьСвязанныхПартнеров.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьСвязанныхПартнеров.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьДополнительно(Команда)
	
	ВидимостьДополнительно = Элементы.ГруппаДополнительно.Видимость;
	Элементы.ГруппаДополнительно.Видимость = Не ВидимостьДополнительно;
	Если ВидимостьДополнительно Тогда
		Элементы.Разделы_ПереключитьДополнительно.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьДополнительно.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			
			СвойстваВыполнитьОтложеннуюИнициализацию();
			МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура Разделы_ПереключитьПотенциальныеКлиенты(Команда)
	
	Если Не ВыведеныПотенциальныеКлиенты Тогда
		ВывестиПотенциальныхКлиентов();
	КонецЕсли;
	
	ВыведеныПотенциальныеКлиенты = Истина;
	НастроитьКомандыДобавленныхТаблиц();
	
	ВидимостьПотенциальныхКлиентоы = Элементы.ПотенциальныеКлиентыВнутр.Видимость;
	Элементы.ПотенциальныеКлиентыВнутр.Видимость = Не ВидимостьПотенциальныхКлиентоы;
	Если ВидимостьПотенциальныхКлиентоы Тогда
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвязи(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектОтбора", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.CRM_СтруктураПодчиненностиИнтереса", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКП_Почта(Команда)
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(Объект, ЭтотОбъект, Ложь);
	
КонецПроцедуры // ОтправитьКП_Почта()

&НаКлиенте
Процедура ОтправитьКП_Мессенджер(Команда)
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(Объект, ЭтотОбъект, Истина);
	
КонецПроцедуры // ОтправитьКП_Мессенджер()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СкопироватьТекущийИнтересЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
		
		Если Не Объект.Ссылка.Пустая() И Не Модифицированность Тогда
			ВыполнитьКопированиеТекущегоИнтереса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТекущийИнтересЗавершение()

&НаКлиенте
Процедура ВыполнитьКопированиеТекущегоИнтереса()
	
	ПараметрыФормы = Новый Структура(
		"ЗначениеКопирования", Объект.Ссылка
	);
	
	ФормаИнтереса = ПолучитьФорму(
		"Документ.CRM_Интерес.Форма.ФормаДокументаНовая",
		ПараметрыФормы
	);
	
	ФормаИнтереса.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
	ФормаИнтереса.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
	
	ФормаИнтереса.Открыть();
	
КонецПроцедуры // ВыполнитьКопированиеТекущегоИнтереса()

&НаСервере
Процедура ВыполнитьОбновлениеДанныхПоддержкиИЗаполнитьСписокВыбораТиповОбращения()
	
	Если ЭтоПоддержка Тогда
		ОбновитьДанныеПоддержки();
	КонецЕсли;
	
	ТипОбращенияКэш = Объект.ТипОбращения;
	
	ДанныеВыбора = Справочники.CRM_ТипыОбращений.ПолучитьДанныеВыбора(Новый Структура("ТолькоПоддержка"));
	Для Каждого ЭлементДанных Из ДанныеВыбора Цикл
		НовыйЭлемент = Элементы.ТипОбращения.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементДанных);
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОбновлениеДанныхПоддержкиИЗаполнитьСписокВыбораТиповОбращения()

&НаКлиенте
Процедура Подключаемый_ЗаполнитьКонтекстноеМенюТелефона(Команда)
	
	СписокКоманд 				= Новый СписокЗначений;
	СписокКоманд.Добавить("ПрозвонитьМессенджеры", НСтр("ru = 'Найти в мессенджерах'"), ,
		 БиблиотекаКартинок.CRM_ТелефонныйЗвонок);
	СписокКоманд.Добавить("НаписатьВЧат", НСтр("ru = 'Написать в чат'"), , БиблиотекаКартинок.CRM_СообщениеМессенджера);
	
	ИмяРеквизита = СтрЗаменить(Команда.Имя, "КнопкаКонтекстноеМенюТипаКИ", "ЭлементТипаКИ");
	
	ОповещениеМеню = Новый ОписаниеОповещения("ПослеВыбораИзМенюДействий",
		 CRM_УправлениеКонтактнойИнформациейКлиент,
		 ПараметрыОповещенияПрозвона(ИмяРеквизита));
	ПоказатьВыборИзМеню(ОповещениеМеню, СписокКоманд, Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОповещенияПрозвона(ИмяРеквизита, ИмяКолонкиПоиска = Неопределено)
	
	Если ЗначениеЗаполнено(ИмяКолонкиПоиска) Тогда
		Отбор = Новый Структура(ИмяКолонкиПоиска, ИмяРеквизита);
	Иначе
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	КонецЕсли;
	Строки = ЭтотОбъект["КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов"].НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма",		ЭтотОбъект);
	ПараметрыОповещения.Вставить("Ссылка",	Объект.Ссылка);
	Если Не ДанныеСтроки = Неопределено Тогда
		ПараметрыОповещения.Вставить("ИмяРеквизита",    ДанныеСтроки.ИмяРеквизита);
		ПараметрыОповещения.Вставить("НайденнаяСтрока", ДанныеСтроки);
		Если Элементы[ДанныеСтроки.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
			ПараметрыОповещения.Вставить("ТекстРедактирования", Элементы[ДанныеСтроки.ИмяРеквизита].ТекстРедактирования);
		Иначе
			ПараметрыОповещения.Вставить("ТекстРедактирования", Элементы[ДанныеСтроки.ИмяРеквизита].Заголовок);
		КонецЕсли;
	Иначе
		ПараметрыОповещения.Вставить("ИмяРеквизита", "");
		ПараметрыОповещения.Вставить("НайденнаяСтрока", ДанныеСтроки);
		ПараметрыОповещения.Вставить("ТекстРедактирования", "");
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("ИмяТаблицыКИ", "КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов");
	
	ПараметрыОповещения.Вставить("ОбъектИнтереса");
	ИмяРеквизитаКИ = "";
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ИмяРеквизитаКИ = "ВидКИ_Клиент";
		ПараметрыОповещения.ОбъектИнтереса = Объект.Партнер;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		ИмяРеквизитаКИ = "ВидКИ_ПК";
		ПараметрыОповещения.ОбъектИнтереса = Объект.ПотенциальныйКлиент;
	КонецЕсли;
	ПараметрыОповещения.Вставить("ИмяРеквизитаКИ", ИмяРеквизитаКИ);
	ПараметрыОповещения.Вставить("БезЗаполненияПолей");
	
	Возврат ПараметрыОповещения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПрозвонМессенджеровЗавершение(Результат, ДополнительныеПараметры) Экспорт

	// Отключить картинку Длительной операции:
	Если НЕ ДополнительныеПараметры.Свойство("ПрозвонВсехНомеров") Тогда
		Элементы["ДекорацияПрозвон" + ДополнительныеПараметры.ИмяРеквизита].Вид = ВидДекорацииФормы.Надпись;
		Элементы["ДекорацияПрозвон" + ДополнительныеПараметры.ИмяРеквизита].Ширина = 0;
	КонецЕсли;
	
	ОшибкаПриПрозвоне = Результат = Неопределено Или ТипЗнч(Результат) <> Тип("Структура")
	                    Или (Результат.Свойство("Статус") И Результат.Статус = "Ошибка");
	
	Если ОшибкаПриПрозвоне Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		РезультатПрозвона = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ПараметрыНаСервер = Новый Структура;
		Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
			
			Если КлючЗначение.Ключ = "Форма" Или КлючЗначение.Ключ = "НайденнаяСтрока" Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыНаСервер.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		
		РезультатПроцедуры = Новый Структура("ОбъектИнтересаЗаписан", Ложь);
		ПрозвонМессенджеровЗавершениеСервер(РезультатПрозвона, ПараметрыНаСервер, РезультатПроцедуры);
		Если РезультатПроцедуры.ОбъектИнтересаЗаписан Тогда
			Если ТипЗнч(ДополнительныеПараметры.ОбъектИнтереса) = Тип("СправочникСсылка.Партнеры") Тогда
				Оповестить("ЗаписьПартнера", ДополнительныеПараметры.ОбъектИнтереса, Неопределено);
			ИначеЕсли ТипЗнч(ДополнительныеПараметры.ОбъектИнтереса) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Оповестить("НовыйПотенциальныйКлиентЗаписан", ДополнительныеПараметры.ОбъектИнтереса, Неопределено);
			КонецЕсли;
		КонецЕсли;
			
		CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона.ВидыКИ,
			 ДополнительныеПараметры);
		
		Для Каждого СтрСообщения Из РезультатПрозвона.Сообщения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрСообщения);
		КонецЦикла;
		
		Если РезультатПрозвона.ВидыКИ.Количество() = 0 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Поиск в мессенджерах'"),
				 ПолучитьНавигационнуюСсылку(Объект.Ссылка),
				 НСтр("ru = 'Новых мессенджеров не найдено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПрозвонМессенджеровЗавершениеСервер(РезультатПрозвона, ПередаваемыеПараметры, РезультатПроцедуры)
	CRM_УправлениеКонтактнойИнформацией.CRM_ПрозвонМессенджеровЗавершение(РезультатПрозвона.ВидыКИ,
		 ПередаваемыеПараметры,
		 РезультатПроцедуры);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаписатьВЧатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерТелефона = Результат;
	
	АдресПараметровОповещения = ПоместитьВоВременноеХранилище(
									Новый Структура("ИмяПроцедуры, Параметры", 
											"Подключаемый_ПереключитьНаЧат", 
											Новый Структура("НомерТелефона", НомерТелефона)), УникальныйИдентификатор);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
							
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьНаЧат(Результат, ДополнительныеПараметры) Экспорт // АПК:78 - исключить из проверки.
							
	НомерТелефона = ДополнительныеПараметры.НомерТелефона;
	
	Если НЕ БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		ПереключитьСтраницуБыстрогоВвода("Чат");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Адрес", НомерТелефона);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
		БыстрыйВвод_ЧатЭтоНомерТелефона			= НайденныйПолучатель.ЭтоНомерТелефона;
		БыстрыйВвод_ЧатВидКИ					= НайденныйПолучатель.ВидКИ;
	КонецЕсли;
	
	УчетныеЗаписиМессенджеров = CRM_КлиентыСервер.УчетныеЗаписиМессенджеров(БыстрыйВвод_ЧатВидКИ, Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.НастроитьОбластьВводаУчетныеЗаписиМессенджеров(УчетныеЗаписиМессенджеров, ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.БыстрыйВвод_ЧатСодержание;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонПриИзменении(Элемент)
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	// Разложить строку телефона по полям
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, Элемент.Имя) Тогда
			ЭтотОбъект[Элемент.Имя] = Представление;
		КонецЕсли;
	Иначе
		Представление = ЗначениеКИ;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ЗаписатьКонтактнуюИнформацию(Представление, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонНачалоВыбора(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	// Разложить строку телефона по полям
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
	Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
	
	ЗначенияПолей = Новый Структура;
	ЗначенияПолей.Вставить("countryCode", СтруктураТелефона.КодСтраны);
	ЗначенияПолей.Вставить("areaCode", СтруктураТелефона.КодГорода);
	ЗначенияПолей.Вставить("number", СтруктураТелефона.НомерТелефона);
	ЗначенияПолей.Вставить("extNumber", СтруктураТелефона.Добавочный);
	ЗначенияПолей.Вставить("value", Представление);
	ЗначенияПолей.Вставить("comment", "");
	
	ЗначенияПолей = CRM_ОбщегоНазначенияСервер.СтруктураВСтрокуJSON(ЗначенияПолей);
	
	ВладелецКИ = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ВладелецКИ = Объект.Партнер;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		ВладелецКИ = Объект.ПотенциальныйКлиент;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", CRM_ВидКИПоУмолчанию(ВладелецКИ,
		 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")));
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", Представление);
	
	Оповещение = Новый ОписаниеОповещения("ТелефонНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент", Элемент);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция CRM_ВидКИПоУмолчанию(ВладелецКИ, ТипКИ)
	Возврат CRM_УправлениеКонтактнойИнформацией.CRM_ВидКИПоУмолчанию(ВладелецКИ, ТипКИ);
КонецФункции

&НаКлиенте
Процедура ТелефонНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.Элемент.Имя;
	
	Попытка
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Результат.Представление);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
		ЭтотОбъект[ИмяРеквизита] = Представление;
		ЗаписатьКонтактнуюИнформацию(Представление,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АдресЭППриИзменении(Элемент)
	
	Ошибка = Ложь;
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(ЗначениеКИ);
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя, , Ошибка);
	КонецЕсли;
	
	Если НЕ Ошибка Тогда
		ЗаписатьКонтактнуюИнформацию(ЗначениеКИ,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтактнуюИнформацию(ЗначениеКИ, ТипКИ)
	
	ПартнерЗаполнен = ЗначениеЗаполнено(Объект.Партнер);
	ПКЗаполнен = ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	
	ЗаписатьКонтактнуюИнформациюНаСервере(ЗначениеКИ, ТипКИ, ПартнерЗаполнен, ПКЗаполнен);
	
	Если ПартнерЗаполнен Тогда
		Оповестить("ЗаписьПартнера", Объект.Партнер);
	ИначеЕсли ПКЗаполнен Тогда
		Оповестить("НовыйПотенциальныйКлиентЗаписан", Объект.ПотенциальныйКлиент);
	КонецЕсли;
	
	Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Оповестить("ПрозвонитьМессенджеры", ЗначениеКИ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтактнуюИнформациюНаСервере(ЗначениеКИ, ТипКИ, ПартнерЗаполнен, ПКЗаполнен)
	
	ЗаписываемыйОбъект = Неопределено;
	
	Если ПартнерЗаполнен Тогда
		ЗаписываемыйОбъект = Объект.Партнер.ПолучитьОбъект();
	ИначеЕсли ПКЗаполнен Тогда
		ЗаписываемыйОбъект = Объект.ПотенциальныйКлиент.ПолучитьОбъект();
	КонецЕсли;
	
	ВидКИ = CRM_УправлениеКонтактнойИнформацией.CRM_ВидКИПоУмолчанию(ЗаписываемыйОбъект.Ссылка, ТипКИ);
	
	Представление = ЗначениеКИ;
	
	ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
		ВидКИ, "");
	
	ДанныеПоПолям = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ДанныеКИ,
		Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если Лев(ДанныеПоПолям.CountryCode, 1) <> "+" Тогда
			ДанныеПоПолям.CountryCode = "+" + ДанныеПоПолям.CountryCode;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеПоПолям);
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЗаписываемыйОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	
	ЗаписываемыйОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьСуммуПоВалюте(Сумма, ТекущаяВалюта, НоваяВалюта)
	
	Результат = 0;
	
	Если НоваяВалюта = ТекущаяВалюта Тогда
		Результат = Сумма;
		СуммаВВалютеУпрУчета = Результат;
	Иначе
		Результат = РаботаСКурсамиВалют.ПересчитатьВВалюту(Сумма, ТекущаяВалюта, НоваяВалюта, Объект.Дата);
		СуммаВВалютеУпрУчета = РаботаСКурсамиВалют.ПересчитатьВВалюту(Результат, НоваяВалюта,
			 ВалютаУправленческогоУчета,
			 Объект.Дата);
	КонецЕсли;
	
	Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = (Объект.Валюта <> ВалютаУправленческогоУчета);
	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(СуммаВВалютеУпрУчета) + " " 
		+ ВалютаУправленческогоУчета.Наименование 
		+ ")";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВидКонтрагентаСПАРКРиски(КонтрПартнер)
	
	Возврат Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(КонтрПартнер);
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьДатыОкончания()
	Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
		ПлановаяДатаЗавершенияТМП = БыстрыйВвод_ДатаНачала 
			+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * 60;
		Если БыстрыйВвод_ДатаОкончания < ПлановаяДатаЗавершенияТМП Тогда
			БыстрыйВвод_ДатаОкончания = ПлановаяДатаЗавершенияТМП;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция ПроверитьЗаполнениеКлиентаКонтакта()
	
	Отказ = Ложь;
	
	ДополнительныеПоля = Новый Массив;
		
	Если (Элементы.ГруппаРеквизитыКлиента.Видимость Или Элементы.ГруппаРеквизитыКонтакта.Видимость) 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПоискДублей_НайденыДубли") 
		И Не РольДоступна("ПолныеПрава") Тогда
		
		Если ЭтотОбъект["ПоискДублей_НайденыДублиКлиенты"] 
			И Константы.CRM_ЗапретитьВводНовогоКлиентаПриНайденныхСовпадениях.Получить() Тогда
		
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли клиента!
				|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
		КонецЕсли;
		Если ЭтотОбъект["ПоискДублей_НайденыДублиКонтакты"] 
			И Константы.CRM_ЗапретитьВводНовогоКонтактаПриНайденныхСовпадениях.Получить() Тогда
		
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Найдены дубли контактного лица!
				|Необходимо обратиться к администратору базы для предоставления прав доступа к имеющемуся контакту. '"), , , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Клиент_Объект.Наименование) Тогда
			ТекстСообщения = НСтр("ru='Не заполнено наименование клиента'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Объект.Наименование", , Отказ);
		КонецЕсли;
		
		ПроверитьЗаполнениеИНН(Отказ);
		
		ПроверитьЗаполнениеКонтактнойИнформацииКлиента(Отказ);
		Если Клиент_Объект.ЮрФизЛицо <> Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			ДополнительныеПоля.Добавить("Клиент_Телефон");
			ДополнительныеПоля.Добавить("Клиент_Email");
			Если Элементы.Клиент_МобТелефон.Видимость Тогда
				ДополнительныеПоля.Добавить("Клиент_МобТелефон");
			КонецЕсли;
		КонецЕсли;
		Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
			CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
			CRM_Модуль.ПроверитьЗаполнениеКонтрагента(ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		Если НЕ CRM_РазрешитьСозданиеИнтересаБезКЛ Тогда
			
			ЮрЛицо = Истина;
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ЮрЛицо = (Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
			Иначе
				ЮрЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Контакт_Объект.Наименование) И ЮрЛицо Тогда
				ТекстСообщения = НСтр("ru='Не заполнено наименование контакта'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт_Объект.Наименование", , Отказ);
			КонецЕсли;
			
			ПроверятьЗаполнениеКИ = ЗначениеЗаполнено(Контакт_Объект.Наименование) Или ЮрЛицо;
			
			Если ПроверятьЗаполнениеКИ Тогда
				ПроверитьЗаполнениеКонтактнойИнформацииКонтакта(Отказ);
			КонецЕсли;
			
			Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("CRM_РазрешитьСохранениеКЛБезКИ")
				И ПроверятьЗаполнениеКИ Тогда
				ДополнительныеПоля.Добавить("Контакт_Email");
				ДополнительныеПоля.Добавить("Контакт_Телефон");
				Если Элементы.Контакт_МобТелефон.Видимость Тогда
					ДополнительныеПоля.Добавить("Контакт_МобТелефон");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПоля <> Неопределено Тогда
		
		НетЗаполненных = Истина;
		Для Каждого Поле Из ДополнительныеПоля Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[Элементы[Поле].ПутьКДанным]) Тогда
				НетЗаполненных = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НетЗаполненных Тогда
			Для Каждого Поле Из ДополнительныеПоля Цикл
				Если Элементы[Поле].Видимость Тогда
					ТекстСообщения = НСтр("ru='Не заполнена контактная информация';en='Contact information not filled'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Элементы[Поле].ПутьКДанным, , Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ);
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеИНН(Отказ)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Контрагент_Объект") Тогда
			Модуль_ОбщегоНазначенияУТКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияУТКлиентСервер");
			ЭтоЮрЛицо = Модуль_ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо);
		Иначе
			ЭтоЮрЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		КонецЕсли;
		
		УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен();
		
		Если ЭтоЮрЛицо И Не ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
			И Не УпрощенныйВводДоступен Тогда
			
			Если ПустаяСтрока(Клиент_ИНН) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано значение ИНН';
					|en = 'TIN value is not specified'"), , "Клиент_ИНН", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеДопРеквизитовКлиентаКонтакта(Отказ)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив;
	МассивИсключений = Новый Массив;
	ВидСвойств = Перечисления.ВидыСвойств.ДополнительныеРеквизиты;
	ОписаниеОбъекта = Неопределено;
	
	Если ЗначениеЗаполнено(Клиент_Объект.Ссылка) Или Не Элементы.ГруппаРеквизитыКлиента.Видимость Тогда
		// Не будет создан клиент
		ОписаниеОбъекта = Клиент_Объект;
	КонецЕсли;
	
	Если ПустаяСтрока(Контакт_Объект.Наименование) Или ЗначениеЗаполнено(Контакт_Объект.Ссылка)
		Или Не Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		// Не будет создан контакт
		ОписаниеОбъекта = Контакт_Объект;
	КонецЕсли;
	
	Если ОписаниеОбъекта <> Неопределено Тогда
		Свойства_НаборыДополнительныхРеквизитовОбъекта = Новый СписокЗначений;
		
		КлючНазначения = Неопределено;
		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
			ОписаниеОбъекта, КлючНазначения);
		
		УправлениеСвойствамиСлужебный.ЗаполнитьНаборыСДополнительнымиРеквизитами(
			НаборыСвойствОбъекта,
			Свойства_НаборыДополнительныхРеквизитовОбъекта);
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
			ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
			Свойства_НаборыДополнительныхРеквизитовОбъекта,
			ВидСвойств);
		Для Каждого ТекСвойство Из ОписаниеСвойств Цикл
			МассивИсключений.Добавить(ТекСвойство.Свойство);
		КонецЦикла;
	КонецЕсли;
	
	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
	МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, , МассивИсключений);
	
	ДополнительныеРеквизитыПроверены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРолевуюАдресацию(СостояниеИнтереса)
	
	Если НЕ ЗначениеЗаполнено(СостояниеИнтереса) Тогда
		Возврат;
	КонецЕсли;
	
	ТипПользователи = Тип("СправочникСсылка.Пользователи");
	ТипРолиИсполнителей = Тип("СправочникСсылка.РолиИсполнителей");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипПользователи);
	
	Элементы.ПеренаправитьНаРоль.Видимость = Ложь;
	
	Если СостояниеИнтереса.РазрешитьРолевуюАдресацию Тогда		
		МассивТипов.Добавить(ТипРолиИсполнителей);
		Элементы.ПеренаправитьНаРоль.Видимость = Истина;
	ИначеЕсли ТипЗнч(Объект.Ответственный) = ТипРолиИсполнителей Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	Элементы.Ответственный.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипОбращенияПоУИд(УИд)
	Возврат Справочники.CRM_ТипыОбращений.ПолучитьСсылку(Новый УникальныйИдентификатор(УИд));
КонецФункции

&НаСервере
Процедура ОбновитьСоставКомандГруппыСоздать()
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Создать_Интерес.Видимость = Ложь;
	
	СписокТиповОбращений = СписокТиповОбращений();
	
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПреобразованныйУИд = СтрЗаменить(ЭлементСписка.Значение.УникальныйИдентификатор(), "-", "_");
		
		// команда
		ИмяКоманды = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаКомандыФормы = Команды.Найти(ИмяКоманды);
		
		Если РезультатПоискаКомандыФормы = Неопределено Тогда
			КомандаСоздатьПоТипуОбращения = Команды.Добавить(ИмяКоманды);
			КомандаСоздатьПоТипуОбращения.Заголовок  = НСтр("ru = 'Создать по типу обращения'");
			КомандаСоздатьПоТипуОбращения.Действие   = "КомандаСоздатьПоТипуОбращения";
		КонецЕсли;
		
		// элемент формы
		ИмяЭлементаФормы = "КомандаСоздатьПоТипуОбращения_" + ПреобразованныйУИд;
		РезультатПоискаЭлементаФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если РезультатПоискаЭлементаФормы = Неопределено Тогда
			ЭлементФормы = Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), Элементы.Группа5);
			ЭлементФормы.Вид    = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ЭлементФормы.Заголовок  = ЭлементСписка.Значение;
			ЭлементФормы.Картинка = ЭлементСписка.Картинка;
			ЭлементФормы.ИмяКоманды = ИмяКоманды;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповОбращений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ТипыОбращений.Ссылка КАК Ссылка,
		|	CRM_ТипыОбращений.ИндексКартинки КАК ИндексКартинки
		|ИЗ
		|	Справочник.CRM_ТипыОбращений КАК CRM_ТипыОбращений
		|ГДЕ
		|	НЕ CRM_ТипыОбращений.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ТипыОбращений.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТиповОбращений = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповОбращений.Добавить(Выборка.Ссылка, , , БиблиотекаКартинок["CRM_ТипОбращения" + Выборка.ИндексКартинки]);
	КонецЦикла;
	
	Возврат СписокТиповОбращений;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Команда, "Имя") Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.ПроверитьДействиеФормы(ЭтотОбъект, Команда);
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Команда.Имя, "КомандаПереключить_") > 0 Тогда
		
		// СтандартныеПодсистемы.Свойства
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
			Если Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
				
				СвойстваВыполнитьОтложеннуюИнициализацию();
				МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
				МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
				
			КонецЕсли;
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает доступность и видимость полей формы.
//
Процедура УстановитьДоступностьИнтереса()
	
	Если ТекущиеПользователи.НайтиПоЗначению(Объект.Автор) <> Неопределено Тогда
		ЕстьДоступУровняАккаунтМенеджера = Истина;
		
	ИначеЕсли ТекущиеПользователи.НайтиПоЗначению(Объект.Ответственный) <> Неопределено Тогда
		ЕстьДоступУровняАккаунтМенеджера = Истина;
		
	ИначеЕсли CRM_БизнесПроцессыСервер.ПользовательУчастникРоли(ТекущийПользователь, Объект.Ответственный) Тогда
		ЕстьДоступУровняАккаунтМенеджера = Истина;
		
	ИначеЕсли ИнтересДоступенДляСоисполнения() Тогда
		ЕстьДоступУровняАккаунтМенеджера = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		ЕстьДоступУровняАккаунтМенеджера =
			CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(Объект.Партнер);
		Если Не ЕстьДоступУровняАккаунтМенеджера
			И ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") И Не ЕстьПолныеПрава() Тогда
			МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Объект.Ответственный);
			ЕстьДоступУровняАккаунтМенеджера = (МассивРуководителей.Найти(ТекущийПользователь) <> Неопределено);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") И Не ЕстьПолныеПрава() Тогда
			МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Объект.Ответственный);
			ЕстьДоступУровняАккаунтМенеджера = (МассивРуководителей.Найти(ТекущийПользователь) <> Неопределено);
		Иначе
			ЕстьДоступУровняАккаунтМенеджера = Истина;
		КонецЕсли;
	Иначе
		ЕстьДоступУровняАккаунтМенеджера = Истина;
	КонецЕсли;
	
	Элементы.ГруппаВсеРеквизиты.ТолькоПросмотр = Не ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаТоварыИУслугиВнутр.Доступность = ЕстьДоступУровняАккаунтМенеджера;
	
	Если УстановитьТолькоПросмотр Тогда
		Элементы.ГруппаПанельСостояний.Доступность = Ложь;
	Иначе
		Элементы.ГруппаПанельСостояний.Доступность = ЕстьДоступУровняАккаунтМенеджера
			 И Не (ЗначениеЗаполнено(ТекущаяЗадача)
			 И Объект.Завершен);
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	
	Элементы.Перенаправить.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ПеренаправитьНаРоль.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	Элементы.СоздатьНовогоКлиента.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	
КонецПроцедуры // УстановитьДоступностьИнтереса()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты, Отказ)
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	ПроверяемоеСостояния = Объект.СостояниеИнтереса;
	
	Если ДанныеВыбранногоСостоянияИнтереса <> Неопределено Тогда
		ВыбранноеСостояние = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"),
			ДанныеВыбранногоСостоянияИнтереса.Состояние, ДанныеВыбранногоСостоянияИнтереса);
		ПроверяемоеСостояния = ВыбранноеСостояние;
		ПроверитьРеквизитыСостояния(ВыбранноеСостояние, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемоеСостояния)
		И НЕ ПроверяемоеСостояния.РазрешитьРолевуюАдресацию
		И ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Для состояния %1 не разрешена ролевая адресация'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ПроверяемоеСостояния), ,
			 "Ответственный", "Объект",
			 Отказ);
		
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеКлиентаКонтакта() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыСостояния(Состояние, Отказ)
	
	ПроверяемыеРеквизитыСостояния =
			CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(Состояние);
	
	Для каждого Реквизит Из ПроверяемыеРеквизитыСостояния Цикл
		Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
			
			Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				Если Реквизит = "Соглашение" И НЕ ЭтотОбъект["ИспользоватьСоглашенияСКлиентами"] Тогда
					Продолжить;
				КонецЕсли;
				Если Реквизит = "Договор" И НЕ ИспользоватьДоговорыСКлиентами() Тогда
					Продолжить;
				КонецЕсли;
				Если Реквизит = "Договор" И ИспользоватьСоглашенияСКлиентамиПроверяемыеРеквизиты()
					И ВСоглашенииОтключеныДоговорыКонтрагентов() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Реквизит = "Договор" И НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				Продолжить;
			КонецЕсли;
			РеквизитМД = Метаданные.Документы.CRM_Интерес.Реквизиты.Найти(Реквизит);
			ТабличнаяЧастьМД = Метаданные.Документы.CRM_Интерес.ТабличныеЧасти.Найти(Реквизит);
			
			Если РеквизитМД <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Объект[Реквизит]) Тогда
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не заполнено поле ""%1"". Запись документа невозможна!'"), РеквизитМД.Синоним), Объект.Ссылка, "Объект." + Реквизит, , Отказ);
						Элемент = Элементы.Найти(Реквизит);
						Если Элемент <> Неопределено Тогда
							Элемент.АвтоОтметкаНезаполненного = Истина;
						КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТабличнаяЧастьМД <> Неопределено Тогда
				
				Если НЕ CRM_ОбщегоНазначенияСервер.ТЧИнтересаЗаполнена(Объект, Реквизит) Тогда
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не заполнена табличная часть ""%1"". Запись документа невозможна!'"), ТабличнаяЧастьМД.Синоним),
							Объект.Ссылка, "Объект." + Реквизит, , Отказ);
					Элемент = Элементы.Найти(Реквизит);
					Если Элемент <> Неопределено Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЭтотОбъект.Свойства_ИспользоватьСвойства И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
		Для Каждого ОписаниеДопРеквизита Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Если ПроверяемыеРеквизитыСостояния.Найти(ОписаниеДопРеквизита.Свойство) <> Неопределено
				И НЕ ЗначениеЗаполнено(ЭтотОбъект[ОписаниеДопРеквизита.ИмяРеквизитаЗначение]) Тогда
				ТекстСообщения =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено поле ""%1"". Запись документа невозможна!';
					|"),
					 ОписаниеДопРеквизита.Наименование);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ОписаниеДопРеквизита.ИмяРеквизитаЗначение, , Отказ);
				Элемент = Элементы.Найти(ОписаниеДопРеквизита.ИмяРеквизитаЗначение);
				Если Элемент <> Неопределено Тогда
					Элемент.АвтоОтметкаНезаполненного = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьСоглашенияСКлиентамиПроверяемыеРеквизиты()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФО = "ИспользоватьСоглашенияСКлиентами";
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервере
Функция ВСоглашенииОтключеныДоговорыКонтрагентов()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Истина;
	
	Если ЗначениеЗаполнено(Объект["Соглашение"])
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект["Соглашение"], "ИспользуютсяДоговорыКонтрагентов") Тогда
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Объект["Соглашение"].ИспользуютсяДоговорыКонтрагентов;
	КонецЕсли;
	
	Возврат НЕ ПоСоглашениюИспользуютсяДоговорыКонтрагентов;
	
КонецФункции

&НаСервере
Функция ИспользоватьДоговорыСКлиентами()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяФО = "ИспользоватьДоговорыСКлиентами";
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
		 	Интерес = Неопределено;
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Интерес) Тогда
				// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
				// КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.Видимость = ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаИсточникПривлечения.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаСервере
Процедура ПолучитьТаблицуТипов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(ТекущаяЗадача);
	ТаблицаТипов.Очистить();
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВзаиморасчетов()
	
	Если ЭтоПоддержка Тогда
		Возврат;
	КонецЕсли; // не надо делать расчеты для поддержки
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.CRM_РасчетыСПокупателями.Остатки(, Заказ В (&МассивСчетов)) КАК РасчетыСПокупателямиОстатки";
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_РасчетыСПокупателями.Остатки(, Заказ",
			 "РасчетыСКлиентами.Остатки(, ОбъектРасчетов");
		МассивОбъектовРасчетов = Новый Массив;
		Для Каждого Заказ Из МассивСчетов Цикл
			МассивОбъектовРасчетов.Добавить(Заказ.ОбъектРасчетов);
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСчетов", МассивОбъектовРасчетов);
	Иначе
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СуммаОстаток");
	Элементы.ДекорацияСостояниеВзаиморасчетов.Заголовок = ЗаголовокНадписиВзаиморасчетов(?(СуммаВзаиморасчетов < 0,
		 НСтр("ru='Должны мы'"), НСтр("ru='Должен нам'")),
		 СуммаВзаиморасчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
					|	CRM_ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
					|ИЗ
					|	РегистрНакопления.CRM_Продажи.Обороты(, , , ДокументПродажи В (&МассивСчетов)) КАК CRM_ПродажиОбороты";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(, , , ДокументПродажи",
			 "ВыручкаИСебестоимостьПродаж.Обороты(, , ,
			| ЗаказКлиента");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаВыручкиСНДСРеглОборот");
	КонецЕсли;
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СтоимостьОборот");
	
	Элементы.ДекорацияСуммаПродаж.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Продажи';
		| en = 'Sales'"),
		 СуммаВзаиморасчетов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ЗаголовокНадписиВзаиморасчетов(Заголовок, Сумма)
	
	КрупныйШрифт = Новый Шрифт(, 10, Истина);
	МелкийШрифт  = Новый Шрифт(, 9, Истина);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ", Новый Шрифт(, 10),
		 ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Сумма) Тогда
		СуммаСтрокой = Формат(?(Сумма < 0, -Сумма, Сумма), "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя),
			 КрупныйШрифт,
			 ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя + 1),
			 МелкийШрифт,
			 ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , "Взаиморасчеты"));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Нет'"), КрупныйШрифт,
			 ЦветаСтиля.CRM_ОсновнойГолубой, ,
			 "Взаиморасчеты"));
	КонецЕсли;
	// КомпонентыФС.Добавить(" " + Константы.ВалютаУправленческогоУчета.Получить().СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСчетовНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес"		, Объект.Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_ЖурналДокументов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	|	И CRM_ЖурналДокументов.CRM_Интерес = &Интерес";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "CRM_СчетНаОплатуПокупателю", "ЗаказКлиента");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат МассивСчетов;
КонецФункции

&НаКлиенте
Процедура ДекорацияСостояниеВзаиморасчетовОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			МассивОбъектовРасчетов = Новый Массив;
			Для Каждого Заказ Из МассивСчетов Цикл
				МассивОбъектовРасчетов.Добавить(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Заказ, "ОбъектРасчетов"));
			КонецЦикла;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ОбъектРасчетов", МассивОбъектовРасчетов));
		Иначе
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Заказ", МассивСчетов));
		КонецЕсли;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
			ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
		Иначе
			ПараметрыФормы.Вставить("КлючВарианта", "Ведомость");
			ИмяФормыОтчета = "Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='По данному Интересу нет взаиморасчетов.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСуммаПродажОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ЗаказКлиента", МассивСчетов));
			ПараметрыФормы.Вставить("КлючВарианта", "ПродажиПоПартнерамБазовая");
			ИмяФормыОтчета = "Отчет.ВыручкаИСебестоимостьПродаж.Форма";
		Иначе
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПродажи", МассивСчетов));
			ПараметрыФормы.Вставить("КлючВарианта", "ПоНеделямДням");
			ИмяФормыОтчета = "Отчет.CRM_Продажи.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='По данному Интересу нет взаиморасчетов.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВопросЗавершение(ПродолжитьВыполнение, ДополнительныеПараметры) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		
		ДокументЗаписан = Ложь;
		ЭтотОбъект.Записать();
		
		Если ДокументЗаписан Тогда
			КонтрольОписаниеОповещения = Новый ОписаниеОповещения("КонтрольЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура("Интерес", Объект.Ссылка);
			ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаКонтроляНовая", ПараметрыФормы, ЭтотОбъект, ,
				 ВариантОткрытияОкна.ОтдельноеОкно, , КонтрольОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольЗавершениеНаСервере()
	ОбновитьТаблицуНаКонтроле();
КонецПроцедуры	

&НаКлиенте
Процедура КонтрольЗавершение(СтруктураНаКонтроле, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНаКонтроле <> Неопределено Тогда
		
			Если СтруктураНаКонтроле.НаКонтроле Тогда
				
				CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
				ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"), СтруктураНаКонтроле.Комментарий);
				
			Иначе
				
				НайтиСтроки = НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
				
				Если НайтиСтроки.Количество() > 0 Тогда
					ТекКомментарий = НайтиСтроки[0].Комментарий;
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"), ТекКомментарий);						
				Иначе
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"));		
				КонецЕсли;
				
			КонецЕсли;
			КонтрольЗавершениеНаСервере();
			
			Оповестить("ОбновитьАРМ", Объект.СостояниеИнтереса, ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет таблицу "На контроле" из регистра сведений.
//
Процедура ОбновитьТаблицуНаКонтроле()
	
	НаКонтроле.Очистить();
	
	Запрос = Новый запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект КАК Объект,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь КАК Пользователь,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля КАК Статус,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Подразделение КАК Подразделение,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, Объект = &Интерес) КАК CRM_ИнтересыНаКонтролеСрезПоследних
	|ГДЕ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для Каждого Выборка Из РезультатЗапроса Цикл
			НоваяСтрока = НаКонтроле.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;		
	
	Если НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество() = 0 Тогда
		Элементы.ВзятьНаКонтроль.Заголовок = НСтр("ru='Взять на контроль'");
		Элементы.ВзятьНаКонтроль.Картинка = БиблиотекаКартинок.CRM_ВзятьНаКонтроль;
	Иначе	
		Элементы.ВзятьНаКонтроль.Заголовок = НСтр("ru='На контроле'");
		Элементы.ВзятьНаКонтроль.Картинка = БиблиотекаКартинок.CRM_ВзятоНаКонтроль;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр ИЛИ НЕ ЕстьДоступУровняАккаунтМенеджера);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение",
			 ЭтотОбъект,
			 ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные еще не записаны."
"Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура выводит на заголовок формы информацию о клиенте и контактном лице.
//
// Параметры:
//	нет
Процедура ОбновитьЗаголовокФормы()
	Если НЕ ЭтоПоддержка Тогда
	ЭтотОбъект.Заголовок = НСтр("ru='Интерес ""';en='Lead ""'") + Объект.Тема + НСтр("ru='"" от '") 
		+ Формат(Объект.Дата,
		 "ДФ=dd.MM.yyyy");
	Иначе
		ЭтотОбъект.Заголовок = СокрЛП(Объект.ТипОбращения) + " #" + Объект.Номер + НСтр("ru=' от '") 
			+ Формат(Объект.Дата, "ДФ='dd.MM.yyyy HH:mm'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	КоличествоВложений = 0;
	ВложенияПредставление = НСтр("ru='Файлы'");
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
		|ИЗ
		|	Справочник.CRM_ИнтересПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ВладелецФайла = &Ссылка
		|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
		|	И НЕ ПрисоединенныеФайлы.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			КоличествоВложений = Выборка.КоличествоФайлов;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоВложений > 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы'") + " (" + КоличествоВложений + ")"; 
	КонецЕсли;
	
	Элементы.ПоказатьФайлы1.Заголовок = ВложенияПредставление;
	Элементы.ПоказатьФайлы2.Заголовок = ВложенияПредставление;
	
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
// Процедура определяет доступность потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПотенциальногоКлиента()
	
	ДоступностьКлиента = ДоступностьКлиента(Объект.Партнер, Объект.ПотенциальныйКлиент);
	Элементы.ГруппаКлиент.Видимость								= ДоступностьКлиента;
	Элементы.Партнер.АвтоОтметкаНезаполненного				= ДоступностьКлиента;
	Элементы.Партнер.ОтметкаНезаполненного					= ДоступностьКлиента;
	Элементы.ГруппаПотенциальныйКлиент.Видимость			= НЕ ДоступностьКлиента;
	
	Если Элементы.Найти("Договор") <> Неопределено Тогда
		Элементы["Договор"].Видимость = Элементы["Договор"].Видимость И ДоступностьКлиента; // +CRM_Модуль: для сохранения результат
																							// ПродажиСервер.УстановитьДоступностьДоговора
	КонецЕсли;
	Если Элементы.Найти("Договор1") <> Неопределено Тогда
		Элементы["Договор1"].Видимость = ДоступностьКлиента;
	КонецЕсли;
	Элементы.ДатаКасания.Видимость = (ДоступностьКлиента И ЗначениеЗаполнено(ДатаКасания));
	
	// СвязиМеждуПК+
	Если ДоступностьКлиента Тогда
		Элементы.ПотенциальныеКлиенты.Видимость = Ложь;
	КонецЕсли;
	// СвязиМеждуПК-
	
КонецПроцедуры // ДоступностьПотенциальногоКлиента()	

&НаКлиентеНаСервереБезКонтекста
Функция ДоступностьКлиента(Партнер, ПотенциальныйКлиент)
	Возврат ЗначениеЗаполнено(Партнер) ИЛИ НЕ ЗначениеЗаполнено(ПотенциальныйКлиент);
КонецФункции

&НаКлиенте
// Процедура определяет видимость реквизитов для поддержки/интереса.
//
// Параметры:
//	Нет.
//
Процедура УстановитьВидимостьЭлементовПоТипуОбращения()
	
	Элементы.ГруппаЦентр.Видимость = НЕ ЭтоПоддержка;	
	Элементы.ГруппаВыручка.Видимость = НЕ ЭтоПоддержка;	
	Элементы.ГруппаДатаПродажи.Видимость = НЕ ЭтоПоддержка И НЕ Объект.Завершен;	
	Элементы.Навигация_ТоварыИУслуги1.Видимость = НЕ ЭтоПоддержка;
	Элементы.Декорация5.Видимость = НЕ ЭтоПоддержка;
	Элементы.Декорация7.Видимость = НЕ ЭтоПоддержка;
	Элементы.ГруппаОбращение.Видимость = ЭтоПоддержка;
	Элементы.Разделы_ПереключитьСвязанныхПартнеров.Видимость = НЕ ЭтоПоддержка;
	
	Элементы.ВзятьНаКонтроль.Видимость = НЕ ЭтоПоддержка;
	
	Если ЭтоПоддержка Тогда
		Элементы.Создать_Счет.Видимость = Ложь;
		Элементы.Создать_ЗаказКлиента.Видимость = Ложь;
		Элементы.Создать_КоммерческоеПредложение.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоПоддержка Тогда
		Элементы.СменитьПроцесс.Заголовок = НСтр("ru = 'Передать в продажу'");
	Иначе
		Элементы.СменитьПроцесс.Заголовок = НСтр("ru = 'Передать в поддержку'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИсточникОбращения) Тогда
		Элементы.ИсточникОбращения.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КаналОбращения) Тогда
		Элементы.КаналОбращения.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьЭлементовПоТипуОбращения(

&НаСервере
Процедура СкорретироватьРеквизитыБизнесПроцесса()
	
	Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
		
		БизнесПроцессОбъект = ТекущаяЗадача.БизнесПроцесс.ПолучитьОбъект();
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема Тогда
			БизнесПроцессОбъект.Наименование = Объект.Тема;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер Тогда
			БизнесПроцессОбъект.Партнер = Объект.Партнер;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо Тогда
			БизнесПроцессОбъект.КонтактноеЛицо = Объект.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка Тогда
			БизнесПроцессОбъект.Сумма = Объект.ОжидаемаяВыручка;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация Тогда
			БизнесПроцессОбъект.Организация = Объект.Организация;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
			БизнесПроцессОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
// с потенциального клиента на партнера.
//
// Параметры:
//	ПотенциальныйКлиент - СправочникСсылка.CRM_ПотенциальныеКлиенты
//	Партнер				- СправочникСсылка.Партнеры
Процедура ПеревеситьДокументыНаПартнера(ПотенциальныйКлиент, Партнер, КонтактноеЛицо)
	CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент,
		 Партнер,
		 КонтактноеЛицо);
	CRM_ОбщегоНазначенияСервер.ПереопределитьЗвонкиСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент,
		 Партнер,
		 КонтактноеЛицо);
	CRM_ОбщегоНазначенияСервер.ПереопределитьДиалогиСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент,
		 Партнер,
		 КонтактноеЛицо);
	CRM_ОбщегоНазначенияСервер.ПереопределитьВзаимодействияСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент,
		 Партнер,
		 КонтактноеЛицо);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер,
		 "ГруппаКИПартнера",
		 СписокТиповКИ.ВыгрузитьЗначения());
	ДатаКасания = РегистрыСведений.CRM_ДатыКасанийКонтактов.ПолучитьДатуКасания(Объект.Партнер);
	СформироватьСмещениеВремениТекущегоАбонента(Объект.Партнер.БизнесРегион);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПроцессов()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ЭтотОбъект, "ДеревоВсеПроцессы") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ДеревоВсеПроцессы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ ЗадачиПоБизнесПроцессу
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения
	|ПОМЕСТИТЬ ДанныеЗадач
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс В
	|			(ВЫБРАТЬ
	|				ЗадачиПоБизнесПроцессу.БизнесПроцесс КАК БизнесПроцесс
	|			ИЗ
	|				ЗадачиПоБизнесПроцессу)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПоБизнесПроцессу.Ссылка,
	|	ЗадачиПоБизнесПроцессу.БизнесПроцесс,
	|	ЗадачиПоБизнесПроцессу.СрокИсполнения
	|ИЗ
	|	ЗадачиПоБизнесПроцессу КАК ЗадачиПоБизнесПроцессу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗадач.Ссылка КАК Ссылка,
	|	ДанныеЗадач.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	ДанныеЗадач КАК ДанныеЗадач
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеЗадач.СрокИсполнения УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	БизнесПроцесс";
	
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	
	АктивныхПроцессов = 0;
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		НовыйБП = ЭтотОбъект.ДеревоВсеПроцессы.ПолучитьЭлементы().Добавить();
		ТекБизнесПроцесс = ВыборкаБП.БизнесПроцесс;
		Если ЗначениеЗаполнено(ТекБизнесПроцесс) Тогда
			НовыйБП.Наименование = ТекБизнесПроцесс.Наименование;
		Иначе
			НовыйБП.Наименование = ВыборкаБП.БизнесПроцесс;
		КонецЕсли;
		НовыйБП.Ссылка = ТекБизнесПроцесс;
		НовыйБП.Выполнена = ТекБизнесПроцесс.Завершен;
		Если НЕ ТекБизнесПроцесс.Завершен Тогда
			АктивныхПроцессов = АктивныхПроцессов + 1;
		КонецЕсли;
		Выборка = ВыборкаБП.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗадача = НовыйБП.ПолучитьЭлементы().Добавить();
			Задача = Выборка.Ссылка;
			НоваяЗадача.Ссылка = Задача;
			НоваяЗадача.Этап = Задача.CRM_ТочкаМаршрута;
			НоваяЗадача.Исполнитель = Задача.Исполнитель;
			НоваяЗадача.ДатаИсполнения = ПолучитьПредставлениеДаты(Задача.ДатаИсполнения, Истина);
			НоваяЗадача.ПринятаКИсполнению = Задача.ПринятаКИсполнению;
			НоваяЗадача.Просрочена = ?(Задача.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()), Истина, Ложь);
			НоваяЗадача.СрокИсполнения = ПолучитьПредставлениеДаты(Задача.СрокИсполнения);
			НоваяЗадача.Выполнена = Задача.Выполнена;
		КонецЦикла;
	КонецЦикла;
	Элементы.ГруппаБизнесПроцессы.Заголовок = НСтр("ru = 'Бизнес-процессы'; en = 'Business Processes'") + " (" + Строка(АктивныхПроцессов) 
		+ ")";
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПартнерПриИзменении(Дата, ВалютаДокумента, Партнер, Организация, Проект)
	
	СтруктураДанные = Новый Структура;
	Если ЗначениеЗаполнено(Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
		СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо",		Партнер.CRM_ОсновноеКонтактноеЛицо);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
							|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
							|ГДЕ
							|	КонтактныеЛицаПартнеров.Владелец = &Владелец
							|	И КонтактныеЛицаПартнеров.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)
							|
							|УПОРЯДОЧИТЬ ПО
							|	КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи УБЫВ");
		Запрос.УстановитьПараметр("Владелец", Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо", Выборка.Ссылка);
		Иначе
			СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо", Партнер.CRM_ОсновноеКонтактноеЛицо);
		КонецЕсли;
	КонецЕсли;
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		мДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Партнер, Организация);
		СтруктураДанные.Вставить("Договор",						мДоговор);
		СтруктураДанные.Вставить("ВалютаРасчетов",				мДоговор.ВалютаРасчетов);
		СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	
			РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мДоговор.ВалютаРасчетов)));
		СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
		СтруктураДанные.Вставить("ВидЦен",						мДоговор.ВидЦен);
		СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах",	мДоговор.РасчетыВУсловныхЕдиницах);
		СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
		СтруктураДанные.Вставить("ЦенаВключаетНДС",			?(ЗначениеЗаполнено(мДоговор.ВидЦен),
			 мДоговор.ВидЦен.ЦенаВключаетНДС,
			 Неопределено));
	КонецЕсли;
	
	Если	Не ЗначениеЗаполнено(СтруктураДанные.ОсновноеКонтактноеЛицо)
		И	ЗначениеЗаполнено(Проект)
		И	ЗначениеЗаполнено(Проект.CRM_Партнер)
		И	Проект.CRM_Партнер = Партнер
		И	ЗначениеЗаполнено(Проект.CRM_КонтактноеЛицоПартнера) Тогда
		//
		СтруктураДанные.ОсновноеКонтактноеЛицо = Проект.CRM_КонтактноеЛицоПартнера;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПартнерПриИзменении()

&НаКлиенте
// Процедура открывает краткую форму взаимодействия.
//
// Параметры:
//	Нет.
//
Процедура ПозиционироватьНаВзаимодействие()
	ПараметрыАктивности = Новый Структура;
	ПараметрыАктивности.Вставить("Ключ", КлючОткрываемойАктивности);
	ОткрытьФорму("РегистрСведений.CRM_ЗапланированныеАктивности.ФормаЗаписи",
		ПараметрыАктивности, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзбранного()
	
	Если Объект.Избранный Тогда
		Элементы.Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
		//Элементы.Избранный.Заголовок = НСтр("ru='Снять пометку'");
	Иначе
		Элементы.Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
		//Элементы.Избранный.Заголовок = НСтр("ru='Установить пометку'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НовыйОбъект_ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НовыйОбъект_ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(ТекущаяЗадача.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НовыйОбъект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекущаяЗадача.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекущаяЗадача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекущаяЗадача.CRM_ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НовыйОбъект;
	ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
	ЗаписьРегистра.ВидОбъекта		= НовыйОбъект_ВидОбъекта;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет отображение взаиморасчетов
//
Процедура Подключаемый_ОбновитьСостояниеВзаиморасчетов()
	
	ЗаполнитьДанныеВзаиморасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтветственногоНаСервере(НовыйОтветственный)
	
	Объект.Ответственный = НовыйОтветственный;
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьРеквизитОтветственного(Объект.Ответственный,
		 "Подразделение");
	Объект.Офис = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСмещениеВремениТекущегоАбонента(БизнесРегион)
	
	Если НЕ ЗначениеЗаполнено(БизнесРегион) Тогда
		
		Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		Элементы.ДекорацияСмещениеВремени.Видимость = Ложь;
		
	Иначе
		
		СмещениеБизнесРегионаСтрока = Формат(БизнесРегион.CRM_ВремяПоГринвичу_GMT, "ЧЦ=2; ЧВН=; ЧО=1");
		
		Если НЕ ЗначениеЗаполнено(СмещениеБизнесРегионаСтрока) Тогда
			СмещениеБизнесРегионаСтрока = "00";
		КонецЕсли;
		
		Если БизнесРегион.CRM_ВремяПоГринвичу_GMT >= 0 Тогда
			СмещениеБизнесРегионаСтрока = "+" + СмещениеБизнесРегионаСтрока;
		КонецЕсли;
		
		ШаблонЧасовогоПояса = "GMT%1";
		ЧасовойПоясБизнесРегиона = СтрШаблон(ШаблонЧасовогоПояса, СмещениеБизнесРегионаСтрока);
		
		ВремяБизнесРегиона = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясБизнесРегиона);
		
		Элементы.ДекорацияСмещениеВремени.Видимость = Истина;
		
		ТекущееВремяКлиента	= ВремяБизнесРегиона;
		НачалоДняКлиента 	= НачалоДня(ТекущееВремяКлиента) + 9 * 60 * 60;
		КонецДняКлиента		= НачалоДня(ТекущееВремяКлиента) + 19 * 60 * 60;
		Если ТекущееВремяКлиента >= НачалоДняКлиента И ТекущееВремяКлиента <= КонецДняКлиента Тогда
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		Иначе
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
		
		Если Час(ТекущееВремяКлиента) < 9 И Час(ТекущееВремяКлиента) > 5 Тогда
			ДобавочныйТекст = Нстр("ru=' (утро)'");
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) > 19 И Час(ТекущееВремяКлиента) <= 23 Тогда
			ДобавочныйТекст = Нстр("ru=' (вечер)'");
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) >= 0 И Час(ТекущееВремяКлиента) <= 5 Тогда
			ДобавочныйТекст = Нстр("ru=' (ночь)'");
			НерабочееВремя = Истина;
		Иначе
			ДобавочныйТекст = "";
		КонецЕсли;
				
		Элементы.ДекорацияСмещениеВремени.Заголовок = Нстр("ru='У клиента сейчас: '") 
			+ Формат(ТекущееВремяКлиента, "ДФ = Ч:мм") + ДобавочныйТекст;
	КонецЕсли;
	
	Элементы.ДекорацияСмещениеВремениПК.Видимость  = Элементы.ДекорацияСмещениеВремени.Видимость;
	Элементы.ДекорацияСмещениеВремениПК.Заголовок  = Элементы.ДекорацияСмещениеВремени.Заголовок;
	Элементы.ДекорацияСмещениеВремениПК.ЦветТекста = Элементы.ДекорацияСмещениеВремени.ЦветТекста;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачуБПИнтереса(Интерес, ТекущаяЗадача)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	ЗадачаИсполнителя.Ссылка КАК Задача
						|ИЗ
						|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
						|ГДЕ
						|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
						|	И НЕ ЗадачаИсполнителя.Выполнена");
	
	Запрос.УстановитьПараметр("Интерес", Интерес);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Количество() > 0 И ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Если Выборка.НайтиСледующий(Новый Структура("Задача", ТекущаяЗадача)) Тогда
			Возврат ТекущаяЗадача;
		Иначе
			Выборка.Сбросить();
		КонецЕсли;
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Задача;
	Иначе
		Возврат Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗадачуЗавершенногоИнтереса(Интерес)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	ЗадачаИсполнителя.Ссылка КАК Задача
						|ИЗ
						|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
						|ГДЕ
						|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
						|
						|УПОРЯДОЧИТЬ ПО
						|	ЗадачаИсполнителя.ДатаИсполнения УБЫВ");
	
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Задача;
	Иначе
		Возврат Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#Область ОбработкаПервичногоИнтереса

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Интерес = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= Интерес.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) 
			И ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность =
					Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервере
// Процедура заполняет первичный интерес по документу - основанию.
//
// Параметры:
//	Основание	- ДокументСсылка	- Документ - основание.
//
Процедура ЗаполнитьПервичныйИнтерес(Основание)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если ЗначениеЗаполнено(Основание) И (ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
				КаналПервичногоИнтереса		= Интерес.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
				Элементы.ИсточникПервичногоИнтереса.Видимость = (ЗначениеЗаполнено(КаналПервичногоИнтереса)
				И НЕ ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"));
			КонецЕсли;
		Иначе
			Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
		КонецЕсли;
КонецПроцедуры // ЗаполнитьПервичныйИнтерес()

&НаСервере
// Процедура формирует описание канала источника.
//
// Параметры:
//	Нет.
//
Процедура СформироватьОписаниеКаналаИсточника()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			Интерес = Неопределено;
			Если ПервичныйИнтерес.Количество() > 0 Тогда
				Интерес = ПервичныйИнтерес.Получить(0);
			КонецЕсли;
			РанееНеЗарегистровано = Ложь;
			// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
			Если НЕ (Интерес = Неопределено) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				//ВыводитьНадпись = Истина;
				//	Надпись = "";
				//	CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес,
					// АктуальноДо, Надпись,
					// ВыводитьНадпись);
				//	Элементы.ИсточникПервичногоИнтереса.Подсказка = Надпись;
				Элементы.КаналПервичногоИнтереса.ПодсказкаВвода = Интерес.КаналПервичногоИнтереса;
				Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
					Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Интерес.ИсточникПервичногоИнтереса;
				Иначе
					Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = "";
				КонецЕсли;
			Иначе
				Элементы.КаналПервичногоИнтереса.ПодсказкаВвода = "";
				Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = "";
			КонецЕсли;
			// КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьОписаниеКаналаИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
					Если ЗначениеЗаполнено(Объект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ТекущийОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ТекущийОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ТекущийОбъект.Дата;
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запись.Партнер					= ТекущийОбъект.Партнер;
				Иначе
					Запись.Партнер					= ТекущийОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Иначе
		ПредыдущийИсточник	= Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
			 И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Ложь;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаКлиенте
// Функция проверяет наличие реквизиты у формы
//  Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, у которой проверяем наличие реквизита
//   РеквизитПоиска - Строка - Реквизит формы
//
//  Возвращаемое значение:
//   Булево - Истина, если реквизит есть, Ложь - в противном случае
//
Функция ПроверитьНаличиеРеквизитаУФормы(Форма, РеквизитПоиска)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(РеквизитПоиска, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[РеквизитПоиска] <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	Если РезультатЗакрытия <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы,
		 ДополнительныеПараметры.Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

#КонецОбласти

#Область ПанельСостоянийИнтереса

&НаСервере
Процедура ЗаполнитьПанельСостоянийИнтереса(Этап = Неопределено, ВебКлиент = Ложь)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ОбновитьВероятностьСделки();
		Элементы.ГруппаСрокиНаЭтапах.ЦветТекстаЗаголовка = ЦветТекущегоСостоянияИнтереса(); 
		Если Объект.Завершен Тогда
			Элементы.ГруппаСрокиНаЭтапах.Заголовок = Формат(Объект.ДатаЗакрытия, "ДФ=d.MM.yyyy");
		Иначе
			ШаблонСрокаНаЭтапе = НСтр("ru = 'Срок на этапе: %1 дн.'");
			Элементы.ГруппаСрокиНаЭтапах.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСрокаНаЭтапе,
				 Строка(СрокНаТекущемЭтапе));
		КонецЕсли;
		Если Элементы.ГруппаПанельСостояний.Видимость Тогда
			Элементы.Переместить(Элементы.ГруппаСрокиНаЭтапах, Элементы.ГруппаСлужебная);
		КонецЕсли;
		Если Элементы.Найти("ГруппаЗаголовокЗадачиПринята") <> Неопределено Тогда
			Элементы.Переместить(Элементы.ГруппаСрокиНаЭтапах, Элементы.ГруппаЗаголовокЗадачиПринята);
		КонецЕсли;
		Элементы.ГруппаПанельСостояний.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ВебКлиент
		 И (КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2) Тогда
		ВебКлиент = Истина;
	КонецЕсли;
	Элементы.Переместить(Элементы.ГруппаСрокиНаЭтапах, Элементы.ГруппаСлужебная);
	КоличествоЭлементов = Элементы.ГруппаПанельСостояний.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		ЭлементПанели = Элементы.ГруппаПанельСостояний.ПодчиненныеЭлементы[КоличествоЭлементов - НомерЭлемента];
		Если ЭлементПанели.Имя = "СостоянияПредыдущие" Тогда
			ЭлементПанели.Заголовок	= "Предыдущие";
			ЭлементПанели.Шрифт		= Новый Шрифт();
			ЭлементПанели.Ширина	= ПолучитьШиринуЭлемента(ЭлементПанели.Заголовок, , ВебКлиент);
			Продолжить;
		КонецЕсли;
		Если ЭлементПанели.Имя = "СтрелкаСледующие" Тогда
			ЭлементПанели.Видимость	= Истина;
			Продолжить;
		КонецЕсли;
		Если ЭлементПанели.Имя = "СостоянияСледующие" Тогда
			ЭлементПанели.Видимость	= Истина;
			Продолжить;
		КонецЕсли;
		Если ЭлементПанели.Имя = "СтрелкаЗавершение" Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементПанели.Имя = "СостоянияЗавершение" Тогда
			ЭлементПанели.Заголовок	= "Завершение";
			ЭлементПанели.Шрифт		= Новый Шрифт();
			ЭлементПанели.Ширина	= ПолучитьШиринуЭлемента(ЭлементПанели.Заголовок, , ВебКлиент);
			ЭлементПанели.Видимость	= Истина;
			Продолжить;
		КонецЕсли;
		Если ЭлементПанели.Имя = "ГруппаСрокиНаЭтапах" Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Удалить(ЭлементПанели);
	КонецЦикла;
	
	СостоянияЗавершение_Команды.Очистить();
	СостоянияПредыдущие_Команды.Очистить();
	СостоянияСледующие_Команды.Очистить();
	
	Если Объект.Завершен Тогда
		Если Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
			Элементы.ГруппаПанельСостояний.ЦветФона = Новый Цвет(220, 250, 220);
		Иначе
			Элементы.ГруппаПанельСостояний.ЦветФона = Новый Цвет(250, 220, 220);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПанельСостояний.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	КонецЕсли;
	
	ЦветТекущегоСостояния = ЦветаСтиля.ЦветТекстаФормы;
	СтруктураДоступныхСостоянийИнтереса	= Новый Структура;
	ИндексТекущего	= -1;
	СписокСостояний	= ПолучитьСписокСостоянийСервер(Объект.СостояниеИнтереса);
	Для Каждого Состояние Из СписокСостояний Цикл
		Индекс = СписокСостояний.Индекс(Состояние);
		ТекСостояние	= Состояние.Значение;
		ИмяКомандыСостояния	= "СостояниеИнтереса" + СтрЗаменить(Строка(ТекСостояние.УникальныйИдентификатор()), "-", "");
		Если Команды.Найти(ИмяКомандыСостояния) = Неопределено Тогда
			НоваяКоманда	= Команды.Добавить(ИмяКомандыСостояния);
			НоваяКоманда.Действие	= "ПанельСостоянийИнтересаВыбор";
			НоваяКоманда.Подсказка	= Состояние.Представление;
		КонецЕсли;
		СтруктураДоступныхСостоянийИнтереса.Вставить(ИмяКомандыСостояния, Состояние.Значение);
		Если ТекСостояние.Завершено Тогда
			Если ТекСостояние = Объект.СостояниеИнтереса Тогда
				Элементы.СостоянияЗавершение.Заголовок	= Состояние.Представление;
				Элементы.СостоянияЗавершение.Шрифт		= Новый Шрифт(, , Истина);
				Элементы.СостоянияЗавершение.Ширина		= ПолучитьШиринуЭлемента(Элементы.СостоянияЗавершение.Заголовок,
					 Истина,
					 ВебКлиент);
				КартинкаЗавершение		= Элементы.Вставить("КартинкаСостоянияЗавершение", Тип("ДекорацияФормы"),
					 Элементы.ГруппаПанельСостояний,
					 Элементы.СостоянияЗавершение);
				КартинкаЗавершение.Вид	= ВидДекорацииФормы.Картинка;
				КартинкаЗавершение.Заголовок	= "Картинка";
				КартинкаЗавершение.РастягиватьПоГоризонтали	= Ложь;
				КартинкаЗавершение.РастягиватьПоВертикали		= Ложь;
				КартинкаЗавершение.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
				КартинкаЗавершение.Ширина	= 2;
				КартинкаЗавершение.Высота	= 1;
				Если ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					Элементы.СостоянияЗавершение.ЦветТекста	= Новый Цвет(50, 150, 50);
					КартинкаЗавершение.Картинка	= БиблиотекаКартинок.CRM_УспешноеЗавершение;
				ИначеЕсли ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
					Элементы.СостоянияЗавершение.ЦветТекста	= WebЦвета.Лосось;
					КартинкаЗавершение.Картинка	= БиблиотекаКартинок.CRM_НеудачноеЗавершение;
				КонецЕсли;
			Иначе
				СостоянияЗавершение_Команды.Добавить(ИмяКомандыСостояния, Состояние.Представление, , Состояние.Картинка); 
			КонецЕсли;
		ИначеЕсли ТекСостояние = Объект.СостояниеИнтереса Тогда
			ИндексТекущего = Индекс;
			Элементы.СостоянияПредыдущие.Заголовок	= Состояние.Представление;
			Элементы.СостоянияПредыдущие.Шрифт		= Новый Шрифт(, , Истина);
			Элементы.СостоянияПредыдущие.Ширина		= ПолучитьШиринуЭлемента(Элементы.СостоянияПредыдущие.Заголовок,
				 Истина,
				 ВебКлиент);
			ЦветТекущегоСостояния = ЦветТекущегоСостоянияИнтереса();
			Элементы.СостоянияПредыдущие.ЦветТекста	= ЦветТекущегоСостояния;
			КартинкаПредыдущие = Элементы.Найти("КартинкаПредыдущие");
			Если КартинкаПредыдущие = Неопределено Тогда
				КартинкаПредыдущие		= Элементы.Вставить("КартинкаПредыдущие", Тип("ДекорацияФормы"),
					 Элементы.ГруппаПанельСостояний,
					 Элементы.СостоянияПредыдущие);
				КартинкаПредыдущие.Вид	= ВидДекорацииФормы.Картинка;
				КартинкаПредыдущие.Заголовок	= "Картинка";
				КартинкаПредыдущие.РастягиватьПоГоризонтали	= Ложь;
				КартинкаПредыдущие.РастягиватьПоВертикали	= Ложь;
				КартинкаПредыдущие.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
				КартинкаПредыдущие.Ширина	= 2;
				КартинкаПредыдущие.Высота	= 1;
				КартинкаПредыдущие.Картинка = БиблиотекаКартинок.CRM_Выполнено;
			КонецЕсли;
		ИначеЕсли ИндексТекущего = -1 Тогда
			СостоянияПредыдущие_Команды.Вставить(0, ИмяКомандыСостояния, Состояние.Представление, ,
				 БиблиотекаКартинок.CRM_Выполнено); 
		Иначе
			СостоянияСледующие_Команды.Добавить(ИмяКомандыСостояния, Состояние.Представление, , Состояние.Картинка); 
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Завершен Тогда
		Элементы.СтрелкаСледующие.Видимость		= Ложь;
		Элементы.СостоянияСледующие.Видимость	= Ложь;
		Если СостоянияПредыдущие_Команды.Количество() > 0 Тогда
			Состояние	= СостоянияПредыдущие_Команды[0];
			ДекорацияПанели	= Элементы.Вставить(Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний,
				 Элементы.СтрелкаЗавершение);
			ДекорацияПанели.Заголовок	= Состояние.Представление;
			ДекорацияПанели.ЦветТекста	= ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ДекорацияПанели.РастягиватьПоГоризонтали	= Ложь;
			ДекорацияПанели.РастягиватьПоВертикали		= Ложь;
			ДекорацияПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			ДекорацияПанели.Ширина		= ПолучитьШиринуЭлемента(ДекорацияПанели.Заголовок, , ВебКлиент);
			ДекорацияПанели.Гиперссылка	= Истина;
			ДекорацияПанели.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаКомандыСостояния");
			КартинкаПанели		= Элементы.Вставить("Картинка" + Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний, ДекорацияПанели);
			КартинкаПанели.Вид	= ВидДекорацииФормы.Картинка;
			КартинкаПанели.Заголовок	= "Картинка";
			КартинкаПанели.РастягиватьПоГоризонтали	= Ложь;
			КартинкаПанели.РастягиватьПоВертикали	= Ложь;
			КартинкаПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			КартинкаПанели.Ширина	= 2;
			КартинкаПанели.Высота	= 1;
			КартинкаПанели.Картинка	= БиблиотекаКартинок.CRM_Выполнено;
			СтрелкаПанели		= Элементы.Вставить("Стрелка" + Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний, КартинкаПанели);
			СтрелкаПанели.Вид	= ВидДекорацииФормы.Картинка;
			СтрелкаПанели.Заголовок	= "Стрелка";
			СтрелкаПанели.РастягиватьПоГоризонтали	= Ложь;
			СтрелкаПанели.РастягиватьПоВертикали	= Ложь;
			СтрелкаПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			СтрелкаПанели.Картинка	= БиблиотекаКартинок.CRM_СтрелкаВправо;
			СтрелкаПанели.Ширина	= 2;
			СтрелкаПанели.Высота	= 1;
			СостоянияПредыдущие_Команды.Удалить(Состояние);
		КонецЕсли;
	Иначе
		Элементы.СостоянияЗавершение.Видимость = Ложь;
		Пока СостоянияЗавершение_Команды.Количество() > 0 Цикл
			Состояние = СостоянияЗавершение_Команды[0]; 
			ДекорацияПанели = Элементы.Добавить(Состояние.Значение, Тип("ДекорацияФормы"), Элементы.ГруппаПанельСостояний);
			ДекорацияПанели.Заголовок	= Состояние.Представление;
			ДекорацияПанели.ЦветТекста	= ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ДекорацияПанели.РастягиватьПоГоризонтали	= Ложь;
			ДекорацияПанели.РастягиватьПоВертикали		= Ложь;
			ДекорацияПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			ДекорацияПанели.Ширина = ПолучитьШиринуЭлемента(Состояние.Представление, , ВебКлиент);
			ДекорацияПанели.Гиперссылка	= Истина;
			ДекорацияПанели.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаКомандыСостояния");
			КартинкаПанели		= Элементы.Вставить("Картинка" + Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний, ДекорацияПанели);
			КартинкаПанели.Вид	= ВидДекорацииФормы.Картинка;
			КартинкаПанели.Заголовок	= "Картинка";
			КартинкаПанели.РастягиватьПоГоризонтали	= Ложь;
			КартинкаПанели.РастягиватьПоВертикали	= Ложь;
			КартинкаПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			КартинкаПанели.Ширина	= 2;
			КартинкаПанели.Высота	= 1;
			КартинкаПанели.Картинка	= Состояние.Картинка;
			СостоянияЗавершение_Команды.Удалить(Состояние);
		КонецЦикла;
		ШиринаПанели	= 0;
		Для Каждого ЭлементПанели Из Элементы.ГруппаПанельСостояний.ПодчиненныеЭлементы Цикл
			Если ЭлементПанели.АвтоМаксимальнаяШирина Тогда 
				ШиринаПанели	= ШиринаПанели + ЭлементПанели.Ширина;
			Иначе
				ШиринаПанели	= ШиринаПанели + ЭлементПанели.МаксимальнаяШирина;
			КонецЕсли;	
		КонецЦикла;
		
		ВыведеноСостояний = 0;
		Пока СостоянияСледующие_Команды.Количество() > 0 И ВыведеноСостояний < 2 Цикл
			Состояние		= СостоянияСледующие_Команды[0];
			ШиринаЭлемента	= ПолучитьШиринуЭлемента(Состояние.Представление, , ВебКлиент);
			//Если (ШиринаПанели + ШиринаЭлемента + 2) > ШиринаСостояний Тогда
			//	Если СостоянияСледующие_Команды.Количество() = 1 Тогда
			//		Если (ШиринаПанели + ШиринаЭлемента + 2 - Элементы.СостоянияСледующие.Ширина) > ШиринаСостояний Тогда
			//			Прервать;
			//		КонецЕсли;
			//	Иначе
			//		Прервать;
			//	КонецЕсли;	
			//КонецЕсли;
			КартинкаПанели		= Элементы.Вставить("Стрелка" + Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний, Элементы.СтрелкаСледующие);
			КартинкаПанели.Вид	= ВидДекорацииФормы.Картинка;
			КартинкаПанели.Заголовок	= "Стрелка";
			КартинкаПанели.РастягиватьПоГоризонтали	= Ложь;
			КартинкаПанели.РастягиватьПоВертикали	= Ложь;
			КартинкаПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			КартинкаПанели.Картинка	= БиблиотекаКартинок.CRM_СтрелкаВправо;
			КартинкаПанели.Ширина	= 2;
			КартинкаПанели.Высота	= 1;
			ДекорацияПанели	= Элементы.Вставить(Состояние.Значение, Тип("ДекорацияФормы"),
				 Элементы.ГруппаПанельСостояний,
				 Элементы.СтрелкаСледующие);
			ДекорацияПанели.Заголовок	= Состояние.Представление;
			ДекорацияПанели.ЦветТекста	= ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ДекорацияПанели.РастягиватьПоГоризонтали	= Ложь;
			ДекорацияПанели.РастягиватьПоВертикали		= Ложь;
			ДекорацияПанели.ВертикальноеПоложениеВГруппе	= ВертикальноеПоложениеЭлемента.Центр;
			ДекорацияПанели.Ширина	= ШиринаЭлемента;
			ДекорацияПанели.Высота	= 1;
			ДекорацияПанели.Гиперссылка	= Истина;
			ДекорацияПанели.УстановитьДействие("Нажатие", "Подключаемый_ОбработкаКомандыСостояния");
			ШиринаПанели	= ШиринаПанели + ШиринаЭлемента + 2;
			СостоянияСледующие_Команды.Удалить(Состояние);
			
			ВыведеноСостояний = ВыведеноСостояний + 1;
		КонецЦикла;
		Если СостоянияСледующие_Команды.Количество() = 0 Тогда
			Элементы.СтрелкаСледующие.Видимость		= Ложь;
			Элементы.СостоянияСледующие.Видимость	= Ложь;
		Иначе	
			Элементы.СтрелкаСледующие.Видимость		= Истина;
			Элементы.СостоянияСледующие.Видимость	= Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если УстановитьТолькоПросмотр Тогда
		Элементы.ГруппаПанельСостояний.Доступность = Ложь;
	Иначе
		Элементы.ГруппаПанельСостояний.Доступность = ЕстьДоступУровняАккаунтМенеджера
			 И НЕ (ЗначениеЗаполнено(ТекущаяЗадача)
			 И Объект.Завершен);
	КонецЕсли;
	
	ГруппаКонецПанели = Элементы.Добавить("ГруппаКонецПанели", Тип("ГруппаФормы"), Элементы.ГруппаПанельСостояний);
	ГруппаКонецПанели.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонецПанели.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	ГруппаКонецПанели.ОтображатьЗаголовок = Ложь;
	Если Объект.Завершен Тогда
		Элементы.ГруппаСрокиНаЭтапах.Заголовок = Формат(Объект.ДатаЗакрытия, "ДФ=d.MM.yyyy");
		Элементы.ГруппаСрокиНаЭтапах.ЦветТекстаЗаголовка = ЦветТекущегоСостоянияИнтереса();
	Иначе
		ШаблонСрокаНаЭтапе = НСтр("ru = 'Срок на этапе: %1 дн.'");
		Элементы.ГруппаСрокиНаЭтапах.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСрокаНаЭтапе,
			 Строка(СрокНаТекущемЭтапе));
		Элементы.ГруппаСрокиНаЭтапах.ЦветТекстаЗаголовка = ЦветТекущегоСостояния;
	КонецЕсли;
	Элементы.Переместить(Элементы.ГруппаСрокиНаЭтапах, Элементы.ГруппаКонецПанели);
	Если ЭтоПоддержка Тогда
		Элементы.ГруппаСрокиНаЭтапах.Видимость = Ложь;
	КонецЕсли;
	ОбновитьВероятностьСделки();
	Элементы.ГруппаПанельСостояний.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЦветТекущегоСостоянияИнтереса()
	ТемпСроки = CRM_ИнтересыСервер.СрокиНаЭтапах(Объект.Ссылка);
	СрокиНаЭтапах.Очистить();
	Для Каждого ТемпЭтап Из ТемпСроки Цикл
		НовСтр = СрокиНаЭтапах.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТемпЭтап);
	КонецЦикла;
	
	СрокНаТекущемЭтапе = 0;
	КолСтр = СрокиНаЭтапах.Количество();
	Если КолСтр > 0 Тогда
		СрокНаТекущемЭтапе = СрокиНаЭтапах[КолСтр - 1].СрокНаЭтапе;
	КонецЕсли;
	
	ОжидаемыйСрокНаЭтапе = Объект.СостояниеИнтереса.ОжидаемыйСрокНаЭтапе;
	
	Если ОжидаемыйСрокНаЭтапе = 0 Или Объект.Завершен Тогда
		Цвет = ЦветаСтиля.CRM_ОсновнойГолубой;
	ИначеЕсли СрокНаТекущемЭтапе < ОжидаемыйСрокНаЭтапе Тогда
		Цвет = Новый Цвет(50, 150, 50);
	ИначеЕсли СрокНаТекущемЭтапе = ОжидаемыйСрокНаЭтапе Тогда
		Цвет = Новый Цвет(200, 200, 50);
	Иначе
		Цвет = Новый Цвет(220, 110, 80);
	КонецЕсли;
	
	Возврат Цвет;
КонецФункции

// Процедура - обработчик события "ОбработкаКомандыСостояния".
&НаКлиенте
Процедура Подключаемый_ОбработкаКомандыСостояния(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ПанельСостоянийИнтересаВыбор(Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостоянияПредыдущие(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ПанельСостоянийИнтересаВыбор(ВыбранныйЭлемент);	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияПредыдущиеНажатие(Элемент)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияПредыдущие", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СостоянияПредыдущие_Команды, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостоянияСледующие(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ПанельСостоянийИнтересаВыбор(ВыбранныйЭлемент);	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияСледующиеНажатие(Элемент)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияСледующие", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СостоянияСледующие_Команды, Элементы.СостоянияСледующие);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостоянияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ПанельСостоянийИнтересаВыбор(ВыбранныйЭлемент);	
КонецПроцедуры

&НаКлиенте
Процедура СостоянияЗавершениеНажатие(Элемент)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СостоянияЗавершение_Команды, Элементы.СостоянияЗавершение);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВероятностьСделки()
	
	Если ЭтоПоддержка Тогда
		Возврат;
	КонецЕсли;
	
	КрупныйШрифт = Новый Шрифт(, 10, Истина);
	МелкийШрифт  = Новый Шрифт(, 9, Истина);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Вероятность сделки'; en = 'Probability'") + ": ", Новый Шрифт(, 10) ,
		 ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Объект.ВероятностьСделки) Тогда
		СуммаСтрокой = Формат(Объект.ВероятностьСделки, "ЧДЦ=0");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(СуммаСтрокой + "%", КрупныйШрифт,
			 ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Нет'"), КрупныйШрифт,
			 ЦветаСтиля.CRM_ОсновнойГолубой));
	КонецЕсли;
	
	Элементы.ДекорацияВероятностьСделки.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельСостоянийИнтересаВыбор(Команда)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадача,
			 СписокОбязательныхТипов,
			 Истина);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверитьЧекЛист(Истина) Тогда
		ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для изменения состояния %1 необходимо выполнить все задачи чек-листа!'"),
											?(ЭтоПоддержка, НСтр("ru = 'обращения'"), НСтр("ru = 'интереса'")));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю, , , "Объект.ЧекЛист");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Команда) = Тип("ЭлементСпискаЗначений") Тогда
		ИмяКомандыСостояния = Команда.Значение;
	Иначе	
		ИмяКомандыСостояния = Команда.Имя;
	КонецЕсли;
	ДанныеВыбранногоСостоянияИнтереса = СтруктураДоступныхСостоянийИнтереса[ИмяКомандыСостояния];
	ВыбранноеСостояние = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"),
		ДанныеВыбранногоСостоянияИнтереса.Состояние, ДанныеВыбранногоСостоянияИнтереса);
	ВыбранныйЭтап = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"),
		 ДанныеВыбранногоСостоянияИнтереса.Этап,
		 Неопределено);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовоеСостояние", ВыбранноеСостояние);
	Дополнительно.Вставить("Состояние", Объект.СостояниеИнтереса);
	Дополнительно.Вставить("Этап", ВыбранныйЭтап);
	
	ПоказыватьКодыЗавершения = Ложь;
	Если КодыЗавершения.Количество() > 0 Тогда
		ВидСостояния = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВыбранноеСостояние, "ВидСостояния");
		Если ВидСостояния = ПредопределенноеЗначение("Перечисление.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение") Тогда
			ПоказыватьКодыЗавершения = Не (Элементы.Найти(ИмяКомандыСостояния) = Неопределено);
		ИначеЕсли ЭтоПоддержка
			 И ВидСостояния = ПредопределенноеЗначение("Перечисление.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение") Тогда
			ПоказыватьКодыЗавершения = Не (Элементы.Найти(ИмяКомандыСостояния) = Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьКодыЗавершения Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("КодЗавершенияПриВыборе", ЭтотОбъект, Дополнительно);
		ПоказатьВыборИзМеню(ОповещениеЗавершения, КодыЗавершения, Элементы[ИмяКомандыСостояния]);
		Возврат;
	КонецЕсли;
	
	Если ОткрыватьФормуПереносаИнтереса(ВыбранноеСостояние) Тогда
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Дополнительно);
		ПараметрыФормы = Новый Структура("Интерес, ИнтересОбъект, Задача,
			| ДанныеВыбранногоСостоянияИнтереса", Объект.Ссылка, Объект, ТекущаяЗадача,
			 ДанныеВыбранногоСостоянияИнтереса);
		ПараметрыФормы.Вставить("ОткрытиеИзИнтереса", Истина);
		Если ЗаполнятьПервичныйИнтерес Тогда
			СтруктураПервичногоИнтереса = Новый Структура;
			СтруктураПервичногоИнтереса.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
			СтруктураПервичногоИнтереса.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СтруктураПервичногоИнтереса", СтруктураПервичногоИнтереса);
		КонецЕсли;
		Если ЗаписатьПриЗавершенииПоддержки(ВыбранноеСостояние) Тогда
			ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
				 ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ПереносИнтересаЗавершение,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОбработатьИнтересЗавершение(Новый Структура, Дополнительно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗавершенияПриВыборе(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодЗавершения = ВыбранныйЭлемент;
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		КодЗавершения = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Если КодЗавершения = "ПоказатьВыбор" Тогда 
		
		ПараметрыФормыВыбора = Новый Структура("Сценарий,ТипОбращения", СценарийИнтереса, Объект.ТипОбращения);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("КодЗавершенияПриВыборе", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.CRM_ПричиныОтказаПоИнтересам.ФормаВыбора", ПараметрыФормыВыбора,
			 ЭтотОбъект, , , ,
			 ОповещениеЗавершения);
		Возврат;
	Иначе
		Объект.ПричинаОтказа = КодЗавершения;
	КонецЕсли;
	
	Если ОткрыватьФормуПереносаИнтереса(ДополнительныеПараметры.Состояние) Тогда
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект,
			 ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Интерес, ИнтересОбъект, Задача,
			| ДанныеВыбранногоСостоянияИнтереса", Объект.Ссылка, Объект, ТекущаяЗадача,
			 ДанныеВыбранногоСостоянияИнтереса);
		ПараметрыФормы.Вставить("ОткрытиеИзИнтереса", Истина);
		Если ЗаполнятьПервичныйИнтерес Тогда
			СтруктураПервичногоИнтереса = Новый Структура;
			СтруктураПервичногоИнтереса.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
			СтруктураПервичногоИнтереса.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СтруктураПервичногоИнтереса", СтруктураПервичногоИнтереса);
		КонецЕсли;
		ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
			 ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ПереносИнтересаЗавершение,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбработатьИнтересЗавершение(Новый Структура, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрыватьФормуПереносаИнтереса(СостояниеИнтереса)
	
	УказыватьДостигнутыйРезультат = Ложь;
	Если СостояниеИнтереса.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Объект.Ссылка,
				 ТипАктивности,
				 СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
	КонецЕсли;
	Возврат УказыватьДостигнутыйРезультат
		ИЛИ (СостояниеИнтереса.Завершено И СостояниеИнтереса.Родитель.ЭтоПоддержка)
		ИЛИ СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение;
	
КонецФункции

&НаСервере
Функция ЗаписатьПриЗавершенииПоддержки(СостояниеИнтереса)
	
	Результат = Истина;
	Если СостояниеИнтереса.Завершено И СостояниеИнтереса.Родитель.ЭтоПоддержка Тогда
		Если Не Записать() Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКодыЗавершения()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка КАК Ссылка,
	|	ПричиныЗавершения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеПричины
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = &ТипОбращения
	|	И ПричиныЗавершения.Сценарий = &Сценарий
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = &ТипОбращения
	|	И ПричиныЗавершения.Сценарий = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.ПустаяСсылка)
	|	И ПричиныЗавершения.Сценарий = &Сценарий
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.ПустаяСсылка)
	|	И ПричиныЗавершения.Сценарий = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеПричины.Ссылка КАК Ссылка,
	|	ДоступныеПричины.Наименование КАК Наименование
	|ИЗ
	|	ДоступныеПричины КАК ДоступныеПричины
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоступныеПричины.Наименование");
	
	Запрос.Параметры.Вставить("ТипОбращения", Объект.ТипОбращения);
	Запрос.Параметры.Вставить("Сценарий", Объект.СостояниеИнтереса.Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КодыЗавершения.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	КодыЗавершения.Добавить("ПоказатьВыбор", НСтр("ru = 'Еще...'"));
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗапланированныеАктивности()
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	Если Объект.ВерсияДанных < Объект.Ссылка.ВерсияДанных Тогда
		ПроверяемоеСостояние = Объект.Ссылка.СостояниеИнтереса;
	Иначе
		ПроверяемоеСостояние = Объект.СостояниеИнтереса;
	КонецЕсли;

	ТекстСообщения = "";
	РезультатПроверки = РегистрыСведений.CRM_ЗапланированныеАктивности.ПроверитьОбязательноеПланированиеАктивности(Объект.Ссылка,
		ПроверяемоеСостояние, ТекстСообщения);
	Если Не РезультатПроверки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции

&НаСервере
Процедура СценарийИнтересаПриИзмененииНаСервере()
	Объект.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийИнтереса);
	Записать();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если Объект.Завершен Тогда
			ТекущаяЗадача = ПолучитьЗадачуЗавершенногоИнтереса(Объект.Ссылка);
		Иначе
			ОткрываемаяЗадача = Неопределено;
			Параметры.Свойство("ОткрываемаяЗадача", ОткрываемаяЗадача);
			ТекущаяЗадача = ПолучитьЗадачуБПИнтереса(Объект.Ссылка, ОткрываемаяЗадача);
		КонецЕсли;
		БизнесПроцесс = ТекущаяЗадача.БизнесПроцесс;
		Элементы.ГруппаПричинаОтказа.Видимость = (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
			Или Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Если НЕ Объект.Завершен Тогда
			ПолучитьТаблицуТипов();
		КонецЕсли;
	КонецЕсли;
	Элементы.СценарийИнтереса.ТолькоПросмотр = (ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Объект.СостояниеИнтереса.Завершено);
	ЗаблокироватьРеквизитыПоСостояниюИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСценариев = Новый Структура;
	ПараметрыСценариев.Вставить("ТипУслуги", Объект.ТипУслуги);
	ПараметрыСценариев.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыСценариев.Вставить("ДоступныКарты", Ложь);
	ПараметрыСценариев.Вставить("ТипОбращения", Объект.ТипОбращения);
	ПараметрыСценариев.Вставить("ЭтоПоддержка", Объект.ЭтоПоддержка);
	ПараметрыСценариев.Вставить("ИсточникОбращения", Объект.ИсточникОбращения);

	ДанныеВыбора = ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев)
	
	ПараметрыСценариев.Вставить("ИспользоватьТипыУслуг", ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг"));

	Возврат Обработки.CRM_МастерРегистрацииОбращения.ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
	
КонецФункции

&НаКлиенте
Процедура СценарийИнтересаПриИзменении(Элемент)
	СценарийИнтересаПриИзмененииНаСервере();
	#Если ВебКлиент Тогда
	ЗаполнитьПанельСостоянийИнтереса(, Истина);
	#Иначе	
	ЗаполнитьПанельСостоянийИнтереса();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("Сценарий", СценарийИнтереса);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Функция получает список состояний из справочника CRM_СостоянияИнтересов.
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	СписокСостояний - СписокЗначений
Функция ПолучитьСписокСостоянийСервер(ТекСостояние = Неопределено)
	
	СписокСостояний = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
	|	CRM_СостоянияИнтересов.Наименование КАК Наименование,
	|	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	CRM_СостоянияИнтересов.Представление КАК Представление,
	|	CRM_СостоянияИнтересов.Завершено КАК Завершено,
	|	CRM_СостоянияИнтересов.ВидСостояния КАК ВидСостояния
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
	|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
	|	И CRM_СостоянияИнтересов.Родитель = &Родитель
	|	И CRM_СостоянияИнтересов.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Родитель", ТекСостояние.Родитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТекСостояние = Неопределено Тогда
			СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление);
		Иначе
			Если Выборка.Ссылка = ТекСостояние Тогда
				КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
			ИначеЕсли Выборка.РеквизитДопУпорядочивания < ТекСостояние.РеквизитДопУпорядочивания И НЕ Выборка.Завершено Тогда
				КартинкаСостояния = БиблиотекаКартинок.CRM_Выполнено;
			ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
				КартинкаСостояния = БиблиотекаКартинок.CRM_УспешноеЗавершение;
			ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
				КартинкаСостояния = БиблиотекаКартинок.CRM_НеудачноеЗавершение;
			Иначе
				КартинкаСостояния = Неопределено;
			КонецЕсли;
			СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление, , КартинкаСостояния);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСостояний;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура ОбновитьОблакоТегов()
	ПараметрыТегов	= ПараметрыТегов();
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект, ПараметрыТегов);
КонецПроцедуры

&НаСервере
Функция ПараметрыТегов()
	Если ШиринаТегов = 0 Тогда
		ШиринаТегов	= 61;
	КонецЕсли;	
	ПараметрыТегов = Новый Структура;
	ПараметрыТегов.Вставить("МаксДлинаПервойСтроки", ШиринаТегов - Элементы.Тег.Ширина - 14);
	ПараметрыТегов.Вставить("ДобавитьКСтроке", Элементы.Тег.Ширина + 14);
	Возврат ПараметрыТегов;
КонецФункции

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент,
		 НавигационнаяСсылкаФорматированнойСтроки,
		 СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	КонтрПартнер = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Объект["Партнер"], ЭтотОбъект["КонтрагентПартнера"]);
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		КонтрПартнер, // Искать по ссылке
		ВидКонтрагентаСПАРКРиски(КонтрПартнер),
		ЭтотОбъект,
		ПараметрыОтображения);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, 1);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	Если ОтображатьВсюИсториюКлиента И ЗначениеЗаполнено(Объект.Партнер) Тогда
		МассивПартнеров = ПартнерыВКонтактах.ВыгрузитьЗначения();
		Если МассивПартнеров.Найти(Объект.Партнер) = Неопределено Тогда
			МассивПартнеров.Добавить(Объект.Партнер);
		КонецЕсли;
		ОбъектЛенты = МассивПартнеров;
		Режим = "ЛентаКлиента";
	Иначе
		ОбъектЛенты = Объект.Ссылка;
		Режим = "ЛентаИнтереса";
	КонецЕсли;
	
	Лента_НеЗаполнять = Не ЗначениеЗаполнено(Объект.Ссылка);
	CRM_ЛентаСобытийКлиентСервер.ОбновитьЛенту(ОбъектЛенты, ЭтотОбъект, Режим, Лента_Прокрутить, Лента_НеЗаполнять);
	
	Если ЭтоАдресВременногоХранилища(АдресПараметровОповещения) Тогда
		
		ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресПараметровОповещения);
		УдалитьИзВременногоХранилища(АдресПараметровОповещения);
		АдресПараметровОповещения = "";
		
		Оповещение = Новый ОписаниеОповещения(ПараметрыОповещения.ИмяПроцедуры, ЭтотОбъект, ПараметрыОповещения.Параметры);
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает КИ типа Телефон, найденную в данных формы.
// Расширение одноименного метода из CRM_КлиентыСервер
&НаСервере
Функция ВсеТелефоныФормы(ДополнительныеДанныеНомеровСоответствие)
	
	МассивТелефонов = Новый Массив;
	
	ТаблицаКИ = ЭтотОбъект["КонтактнаяИнформацияОбъектовОписаниеДополнительныхРеквизитов"].Выгрузить();
	
	ОтборСтрок = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	// Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
	//	ОтборСтрок.Вставить("Объект", Объект.КонтактноеЛицо);
	// Иначе
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОтборСтрок.Вставить("Объект", Объект.Партнер);
	Иначе
		ОтборСтрок.Вставить("Объект", Объект.ПотенциальныйКлиент);
	КонецЕсли;
	
	СтрокиСТелефонами = ТаблицаКИ.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаСТелефоном Из СтрокиСТелефонами Цикл
			
			НомерТелефона = CRM_УправлениеКонтактнойИнформацией.НомерТелефонаПоЗначениюКИ(СтрокаСТелефоном.Значение,
				 СтрокаСТелефоном.Тип);
			
			Если НЕ ЗначениеЗаполнено(НомерТелефона) Тогда
				Продолжить;
			КонецЕсли;
			Если МассивТелефонов.Найти(НомерТелефона) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; // Особенность Интереса в том, что могут существовать 2 копии одного номера:
																					// один выведен на форму, другой - во всплывающей группе
			
			МассивТелефонов.Добавить(НомерТелефона);
			ДополнительныеДанныеНомеровСоответствие.Вставить(НомерТелефона, Новый Структура("ИмяРеквизита,
				| Значение, Представление",
					СтрокаСТелефоном.ИмяРеквизита, СтрокаСТелефоном.Значение, СтрокаСТелефоном.Представление));
			
	КонецЦикла;
	
	Возврат МассивТелефонов;
	
КонецФункции

&НаКлиенте
Процедура ОтображатьВсюИсториюКлиента(Команда)
	ОтображатьВсюИсториюКлиента = Не ОтображатьВсюИсториюКлиента;
	Элементы.ОтображатьВсюИсториюКлиента.Пометка = ОтображатьВсюИсториюКлиента;
	СохранитьНастройку(ИмяФормы, "ОтображатьВсюИсториюКлиента", ОтображатьВсюИсториюКлиента);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройку(КлючОбъекта, КлючНастроек, Настройка)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройка);
КонецПроцедуры

#КонецОбласти

#Область Поддержка

&НаСервере
Процедура ОбновитьДанныеПоддержки()
	
	Если Не ЭтоПоддержка Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКонтроля = ТекущаяДатаСеанса();
	
	УровеньПоддержкиОписание = ОписаниеУровняПоддержки(Объект.УровеньПоддержки);
	
	СведенияПоддержки = РегистрыСведений.CRM_СведенияПоддержки.СведенияПоддержкиПоОбращению(Объект.Ссылка);
	
	ЕстьРеакция = СведенияПоддержки.ЕстьОтвет;
	Если ЕстьРеакция Тогда
		СрокВыполнен = СведенияПоддержки.ДатаОтвета <= Объект.СрокРеакции;
		Если СрокВыполнен Тогда
			Элементы.КартинкаСрокРеакцииСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
			Элементы.НадписьСрокРеакцииСостояние.Заголовок = НСтр("ru = 'Есть ответ, в срок'");
		Иначе
			Элементы.КартинкаСрокРеакцииСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
			Элементы.НадписьСрокРеакцииСостояние.Заголовок = НСтр("ru = 'Есть ответ, просрочено'");
		КонецЕсли;
	Иначе
		СрокВыполнен = ДатаКонтроля <= Объект.СрокРеакции;
		Если СрокВыполнен Тогда
			Элементы.КартинкаСрокРеакцииСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
			Элементы.НадписьСрокРеакцииСостояние.Заголовок = НСтр("ru = 'Нужен ответ'");
		Иначе
			Элементы.КартинкаСрокРеакцииСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
			Элементы.НадписьСрокРеакцииСостояние.Заголовок = НСтр("ru = 'Нужен ответ, просрочено'");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРешение = Объект.Завершен;
	Если ЕстьРешение Тогда
		СрокВыполнен = Объект.ДатаЗакрытия <= Объект.СрокРешения;
		Если СрокВыполнен Тогда
			Элементы.КартинкаСрокРешенияСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
			Элементы.НадписьСрокРешенияСостояние.Заголовок = НСтр("ru = 'Решено, в срок'");
		Иначе
			Элементы.КартинкаСрокРешенияСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
			Элементы.НадписьСрокРешенияСостояние.Заголовок = НСтр("ru = 'Решено, просрочено'");
		КонецЕсли;
	Иначе
		Приостановлено =
			(Объект.СостояниеИнтереса.КатегорияСостояния = Перечисления.CRM_КатегорииСостоянийПоддержки.ВОжидании);
		Если Приостановлено Тогда
			Элементы.КартинкаСрокРешенияСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
			Элементы.НадписьСрокРешенияСостояние.Заголовок = НСтр("ru = 'Ожидает ответа клиента'");
		Иначе
			СрокВыполнен = ДатаКонтроля <= Объект.СрокРешения;
			Если СрокВыполнен Тогда
				Элементы.КартинкаСрокРешенияСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Элементы.НадписьСрокРешенияСостояние.Заголовок = НСтр("ru = 'В процессе решения'");
			Иначе
				Элементы.КартинкаСрокРешенияСостояние.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Элементы.НадписьСрокРешенияСостояние.Заголовок = НСтр("ru = 'В процессе решения, просрочено'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеУровняПоддержки(УровеньПоддержки)
	
	Цвет = ЦветаСтиля.CRM_ОсновнойГолубой;
	Шрифт = Новый Шрифт(, , Истина);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(УровеньПоддержки);
	
	Описания = Новый Массив;
	Описания.Добавить(Новый ФорматированнаяСтрока(Строка(УровеньПоддержки), Шрифт, Цвет, , НавигационнаяСсылка));
	Описания.Добавить(" " + НСтр("ru = 'Время реакции'") + ": ");
	Описания.Добавить(Новый ФорматированнаяСтрока(Формат(УровеньПоддержки.ВремяРеакции, "ЧФ='Ч ч.'"), Шрифт, Цвет));
	Описания.Добавить(" " + НСтр("ru = 'Время решения'") + ": ");
	Описания.Добавить(Новый ФорматированнаяСтрока(Формат(УровеньПоддержки.ВремяРешения, "ЧФ='Ч ч.'"), Шрифт, Цвет));
	Описания.Добавить(" ");
	Описания.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'пересчитать'"), , Цвет, , "ПересчитатьСроки"));
	
	Возврат Новый ФорматированнаяСтрока(Описания);
	
КонецФункции

&НаСервере
Процедура ПересчитатьСрокиНаСервере()
	СрокиПоОбращению = Справочники.CRM_УровниПоддержки.СрокиПоУровнюПоддержки(Объект.Дата,
		 Объект.УровеньПоддержки,
		 Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(Объект, СрокиПоОбращению);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСлужебныеРеквизитыПоддержки()
	
	ПоляФормы = Новый Структура;
	ПоляФормы.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
	ПоляФормы.Вставить("Организация",		Объект.Организация);
	ПоляФормы.Вставить("Ответственный",		Объект.Ответственный);
	ПоляФормы.Вставить("Партнер",			Объект.Партнер);
	ПоляФормы.Вставить("ТипУслуги",			Объект.ТипУслуги);
	ПоляФормы.Вставить("ТипОбращения",		Объект.ТипОбращения);
	ПоляФормы.Вставить("Проект",			Объект.Проект);
	ПоляФормы.Вставить("Подразделение",		Объект.Подразделение);
	
	ДанныеОбращения = Справочники.CRM_УровниПоддержки.ОписаниеДанныхОбращения();
	СтрокаНабора = ДанныеОбращения.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаНабора, ПоляФормы);
	
	СтрокаНабора.Ключ			= Строка(Новый УникальныйИдентификатор);
	СтрокаНабора.Дата			= Объект.Дата;
	
	ДанныеУровня = Справочники.CRM_УровниПоддержки.ДанныеУровняПоддержки(ДанныеОбращения);
	Объект.УровеньПоддержки = ДанныеУровня.Уровень;
	ПересчитатьСрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхСценариевПоддержки(ТипОбращения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ЭтоПоддержка
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ НЕ СостоянияИнтересов.ЭтоПоддержка
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияИнтересовТипыОбращений.Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов.ТипыОбращений КАК СостоянияИнтересовТипыОбращений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|		ПО (СостоянияИнтересов.Ссылка = СостоянияИнтересовТипыОбращений.Ссылка)
	|ГДЕ
	|	СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ЭтоПоддержка
	|				ТОГДА СостоянияИнтересов.ЭтоПоддержка
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И СостоянияИнтересовТипыОбращений.ТипОбращения = &ТипОбращения";
	
	Запрос.УстановитьПараметр("ТипОбращения", ТипОбращения);
	Запрос.УстановитьПараметр("ЭтоПоддержка", ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТабРезультат = Результат.Выгрузить();
		МассивСценариев = ТабРезультат.ВыгрузитьКолонку("Ссылка");
		СписокСценариев = Новый СписокЗначений;
		СписокСценариев.ЗагрузитьЗначения(МассивСценариев);
		Возврат СписокСценариев;
	Иначе
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбластьВвода    

&НаСервере
Функция ПолучитьЦветАктивнойНадписи()
	Возврат ЦветаСтиля.CRM_ОсновнойГолубой; 
КонецФункции

&НаСервере
Функция ПолучитьЦветНеАктивнойНадписи()
	Возврат ЦветаСтиля.ЦветТекстаКнопки; 
КонецФункции

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияКлиент.ЭтоМобильныйКлиент() Тогда     
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;  
		Элементы[ИмяТекущиейКнопки].ЦветТекста = ПолучитьЦветНеАктивнойНадписи();
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		Элементы[ИмяКнопки].ЦветТекста = ПолучитьЦветАктивнойНадписи();
	Иначе	
		ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
		ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
		Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки, , , Ложь);
		
		ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
		ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки, , , Истина);  
	КонецЕсли;
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	Если БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		Элементы.БыстрыйВвод_ФайлОписание.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
	Если ПолныйСброс Тогда
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Иначе	
		ИмяКнопкиСоздать = "БыстрыйВвод_Создать" + НовыйТипОбъекта;
		Элементы[ИмяКнопкиСоздать].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ОбычныйВвод_Команды Цикл
		ЭлементСписка.Пометка = (ЭлементСписка.Значение = ИмяКнопки);
	КонецЦикла;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		СсылкаНаКонтакт = Неопределено;
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			СсылкаНаКонтакт = Объект.КонтактноеЛицо;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			СсылкаНаКонтакт = Объект.Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			СсылкаНаКонтакт = Объект.ПотенциальныйКлиент;
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаНаКонтакт) Тогда
			ДанныеПолучателя = АдресЭПКонтакта(СсылкаНаКонтакт);
			Если ТипЗнч(ДанныеПолучателя) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(БыстрыйВвод_ПисьмоПолучатели.Добавить(), ДанныеПолучателя);
				ДанныеКонтактов = Новый Структура("Кому, Копии, Скрытые", БыстрыйВвод_ПисьмоПолучатели, 
					Новый Структура(), Новый Структура());
				ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
				БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	Если ТолькоПросмотр Тогда
		Элементы.БыстрыйВвод_Страницы.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа =
		Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(Объект.СостояниеИнтереса);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
		 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса",
		 Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
		 Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу")
		 И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаИнтереса", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
	// Шаблоны рассылок
	СписокШаблонов.Очистить();
	ЗапросШаблонов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ШаблоныРассылки КАК ШаблоныРассылки
	|ГДЕ
	|	НЕ ШаблоныРассылки.ЭтоГруппа
	|	И НЕ ШаблоныРассылки.ШаблонОповещения");
	РезультатЗапроса = ЗапросШаблонов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокШаблонов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	ЭтоCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	Элементы.Создать_Счет.Видимость = ЭтоCRM;
	Элементы.Создать_ЗаказКлиента.Видимость = Не ЭтоCRM;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	// Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
		Если БыстрыйВвод_Вложения.Количество() > 0 Тогда
			БыстрыйВвод_Вложения.Очистить();
			CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_ПримечаниеТема", "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			 "БыстрыйВвод_КомандыПримечание", "Видимость",
			 ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаИнтереса",
			 Объект.СостояниеИнтереса);
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Тема;
		КонецЕсли;
		Если БыстрыйВвод_Содержание = "" Тогда
			БыстрыйВвод_Содержание = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаНачала = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(БыстрыйВвод_ДатаНачала, 30);
		
		КоличествоСекундВМинуте		= 60;
		СтандартноеКоличествоМинут	= 30;
		
		Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид)
				И ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию) Тогда
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала
				+ БыстрыйВвод_ВзаимодействиеВид.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		Иначе
			БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + СтандартноеКоличествоМинут * КоличествоСекундВМинуте;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеОтправитель = ТекущийПользователь;
		БыстрыйВвод_ВзаимодействиеПолучатель = Объект.КонтактноеЛицо;
		БыстрыйВвод_ВзаимодействиеПартнер = Объект.Партнер;
		
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = (CRM_ЛентаСобытий.ЭтоПартнерСКонтактами(Объект.Партнер)
																	ИЛИ Объект.Контакты.Количество() > 0);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ТекущаяДата, 30) + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора, ,
			 ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Партнер);
			КонтактыПартнера = CRM_ЛентаСобытий.КонтактыПартнера(Объект.Партнер);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыКонтактнойИнформации, КонтактыПартнера);
		Иначе
			ВладельцыКонтактнойИнформации.Добавить(Объект.ПотенциальныйКлиент);
		КонецЕсли;
		// Добавим контакты из ТЧ Контакты
		Для Каждого ТекКонтакт Из Объект.Контакты Цикл
			ВладельцыКонтактнойИнформации.Добавить(ТекКонтакт.Контакт);
		КонецЦикла;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Строка.Объект,
				 Строка.Представление,
				 "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Файл" Тогда
		
		ЕстьВложения = (БыстрыйВвод_Вложения.Количество() > 0);
		ВысотаТемы = ?(ЗначениеЗаполнено(БыстрыйВвод_Тема), 3, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ФайлОписание",
			 "Высота",
			 ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_КомандыФайл",
			 "Видимость",
			 ЕстьВложения);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		Если БыстрыйВвод_ЧатПолучатели.Количество() > 0 Тогда
			ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
			БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
			БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
			БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
			БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
			// учетная запись есть в списке доступных пользователю
			Если БыстрыйВвод_ЧатУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись",
				 ПервыйПолучатель.УчетнаяЗапись)).Количество() > 0 Тогда
				БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
				БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = ПервыйПолучатель.УчетнаяЗапись;
			КонецЕсли;
			БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
			БыстрыйВвод_ЧатЭтоНомерТелефона = ПервыйПолучатель.ЭтоНомерТелефона;
			БыстрыйВвод_ЧатВидКИ = ПервыйПолучатель.ВидКИ;
		КонецЕсли;
	Иначе
		Если Объект.ЭтоПоддержка Тогда
			УстановитьКонтактB2BПортала();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонтактB2BПортала() 
	// B2B портал
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменB2BПортал") Тогда
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "CRM_ПодключенКB2BПорталу") Тогда
			БыстрыйВвод_ЧатПолучатель = Объект.КонтактноеЛицо;
			БыстрыйВвод_ЧатПредставлениеПолучателя = Объект.КонтактноеЛицо;
			БыстрыйВвод_ЧатУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал;
			БыстрыйВвод_ЧатПредставлениеУчетнойЗаписи = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТЧ_Контакты

&НаСервере
Функция ОбязательноУказыватьКЛ()
	Возврат  НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("CRM_РазрешитьСозданиеИнтересаБезКЛ");
КонецФункции	

&НаКлиенте
Процедура КонтактыРольПриИзменении(Элемент)
	
	ТекДанные = Элементы.Контакты.ТекущиеДанные;
	ИзменитьРольКонтактаНаСервере(ТекДанные.Контакт, ТекДанные.Роль);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьРольКонтактаНаСервере(Контакт, РольКЛ)
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	КонтактОбъект.CRM_РольКонтактногоЛица = РольКЛ;
	КонтактОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриИзменении(Элемент = Неопределено)
	ОбновитьЗаголовокКонтактныеЛица();
	КонтактыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтактыПриИзмененииНаСервере()
	Если ВыведеныКонтактныеДанные Тогда
		ЗаполнитьКонтактнуюИнформациюКонтактов();
		НастроитьОтображениеКонтактныхДанных();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы	= Новый Структура;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Партнер));
		ПараметрыФормы.Вставить("ПодборСОтключениемФильтраВладельца");
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	КонтактыОбработкаВыбораСервер(ВыбранноеЗначение, СтандартнаяОбработка);
	ОбновитьЗаголовокКонтактныеЛица();
КонецПроцедуры

&НаСервере
Процедура КонтактыОбработкаВыбораСервер(ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Контакты.НайтиСтроки(Новый Структура("Контакт", ВыбранноеЗначение)).Количество() = 0 Тогда
		НовКонтакт = Объект.Контакты.Добавить();
		НовКонтакт.Контакт = ВыбранноеЗначение;
		НовКонтакт.Роль = ВыбранноеЗначение.CRM_РольКонтактногоЛица;
		
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ВыбранноеЗначение,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НовКонтакт.Телефон = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ВыбранноеЗначение,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НовКонтакт.АдресЭлектроннойПочты = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
		
		Если ВыведеныКонтактныеДанные Тогда
			ЗаполнитьКонтактнуюИнформациюКонтактов();
			НастроитьОтображениеКонтактныхДанных();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактыПередУдалением(Элемент, Отказ)
	Если Элементы.Контакты.ТекущиеДанные.Контакт = Объект.КонтактноеЛицо И ОбязательноУказыватьКЛ() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя удалять основной контакт интереса!'"));
	ИначеЕсли Элементы.Контакты.ТекущиеДанные.Контакт = Объект.КонтактноеЛицо Тогда
		Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Контакты_ТекДанные = Элементы.Контакты.ТекущиеДанные;

	Если Контакты_ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "КонтактыТелефон" Тогда
			Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
				Возврат;
			КонецЕсли;
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
			ДополнительныеПараметры	= Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
			сфпСофтФонПроКлиент.сфпПозвонить(Контакты_ТекДанные.Телефон, Контакты_ТекДанные.Контакт, ДополнительныеПараметры);
		ИначеЕсли Поле.Имя = "КонтактыАдресЭлектроннойПочты" Тогда
		   	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
			СписокАдресов = Новый СписокЗначений;
			СписокАдресов.Добавить(Контакты_ТекДанные.Контакт, Контакты_ТекДанные.АдресЭлектроннойПочты);
			ПараметрыФормы.Вставить("Кому", СписокАдресов);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли Поле.Имя = "КонтактыПоказатьДопНомера" Тогда
			СписокТелефоновКЛ = ДопТелефоныПолучитьНаСервере(Контакты_ТекДанные.Контакт);
			Оповещение = Новый ОписаниеОповещения("ВыборТелефонаИзМенюЗавершение", ЭтотОбъект, Контакты_ТекДанные.Контакт);
			ПоказатьВыборИзМеню(Оповещение, СписокТелефоновКЛ);
		ИначеЕсли Поле.Имя = "КонтактыПоказатьДопАдреса" Тогда
			СписокАдресовЭПКЛ = ДопАдресаЭППолучитьНаСервере(Контакты_ТекДанные.Контакт);
			Оповещение = Новый ОписаниеОповещения("ВыборАдресаЭПИзМенюЗавершение", ЭтотОбъект, Контакты_ТекДанные.Контакт);
			ПоказатьВыборИзМеню(Оповещение, СписокАдресовЭПКЛ);
		ИначеЕсли Поле.Имя <> "КонтактыРоль" Тогда
			ПоказатьЗначение(, Контакты_ТекДанные.Контакт);
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Контакты_СделатьОсновным(Команда)
	Контакты_ТекДанные = Элементы.Контакты.ТекущиеДанные;
	Если Контакты_ТекДанные <> Неопределено Тогда
		Объект.КонтактноеЛицо = Контакты_ТекДанные.Контакт;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	Контакты_ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Контакты_ТекущиеДанные = Неопределено Тогда
		Элементы.Контакты_СделатьОсновным.Доступность = Ложь;
	Иначе
		Элементы.Контакты_СделатьОсновным.Доступность = (ЗначениеЗаполнено(Объект.Партнер)
			И Объект.Партнер = ВладелецКонтакта(Контакты_ТекущиеДанные.Контакт));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформациюКонтактов()
	
	Для Каждого ТекКонтакт Из Объект.Контакты Цикл
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекКонтакт.Контакт,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ТекКонтакт.Телефон = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекКонтакт.Контакт,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			ТекКонтакт.АдресЭлектроннойПочты = КонтактнаяИнформация[0].Представление;
		КонецЕсли;
		ТекКонтакт.Роль = ТекКонтакт.Контакт.CRM_РольКонтактногоЛица;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокКонтактныеЛица()
	
	ЗаголовокКонтактныеЛица = НСтр("ru = 'Контактные лица'");
	КоличествоКонтактов = Объект.Контакты.Количество();
	
	Если КоличествоКонтактов > 0 Тогда
		ЗаголовокКонтактныеЛица = ЗаголовокКонтактныеЛица + " (" + КоличествоКонтактов + ")";
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьКонтакты.Заголовок <> ЗаголовокКонтактныеЛица Тогда
		Элементы.Разделы_ПереключитьКонтакты.Заголовок = ЗаголовокКонтактныеЛица;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СвязиМеждуПартнерами

&НаКлиенте
Процедура СвязиМеждуПартнерамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.СвязиМеждуПартнерами.ФормаЗаписи", Новый Структура("Ключ,
		| ОткрытиеИзИнтереса", ВыбраннаяСтрока, Истина),
		 ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СвязиМеждуПартнерамиПослеУдаления(Элемент)
	ОбновитьЗаголовокСвязиМеждуПартнерами();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвязиМеждуПартнерами()
	ЗаголовокСвязей = НСтр("ru = 'Связанные партнеры'; en = 'Related partners'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КоличествоСвязей = КоличествоСвязейМеждуПартнерамиНаСервере(Объект.Ссылка);
		Если КоличествоСвязей > 0 Тогда
			ЗаголовокСвязей = ЗаголовокСвязей + " (" + КоличествоСвязей + ")";
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ГруппаСвязанныеПартнеры.Заголовок <> ЗаголовокСвязей Тогда
		Элементы.ГруппаСвязанныеПартнеры.Заголовок = ЗаголовокСвязей;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоСвязейМеждуПартнерамиНаСервере(Интерес)
	Запрос = Новый Запрос("ВЫБРАТЬ
						|	КОЛИЧЕСТВО(СвязиМеждуПартнерами.CRM_Интерес) КАК Интерес
						|ИЗ
						|	РегистрСведений.СвязиМеждуПартнерами КАК СвязиМеждуПартнерами
						|ГДЕ
						|	СвязиМеждуПартнерами.CRM_Интерес = &CRM_Интерес");
	Запрос.УстановитьПараметр("CRM_Интерес", Интерес);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Интерес;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область Товары

// +Процедура области Товары к переносу в объединенные решения

&НаКлиенте
Процедура ОбновитьЗаголовокГруппыТовары()
	
	ИмяКолонкиИтога = "";
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ИмяКолонкиИтога = "Всего";
	Иначе
		ИмяКолонкиИтога = "СуммаСНДС";
	КонецЕсли;
	
	ИтогВсего = Объект.Товары.Итог(ИмяКолонкиИтога);
	
	КоличествоСтрок = Объект.Товары.Количество();
	
	ТоварыЗаголовок = НСтр("ru = 'Товары и услуги'");
	Если КоличествоСтрок > 0 Тогда
		ТоварыЗаголовок = ТоварыЗаголовок + " (" + КоличествоСтрок + ")"
	КонецЕсли;
	
	Элементы.Навигация_ТоварыИУслуги1.Заголовок = ТоварыЗаголовок;
	Элементы.Навигация_ТоварыИУслуги2.Заголовок = ТоварыЗаголовок;
	
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = (ИтогВсего <> Объект.ОжидаемаяВыручка);
	
КонецПроцедуры

// -Процедура области Товары к переносу в объединенные решения

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение",
		 ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект,
		 ОписаниеОповещения, ?(ЭтоПоддержка, "Поддержка",
		 ""));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект, ,	?(ЭтоПоддержка, "Поддержка", ""));
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьРеквизитыПоСостояниюИнтереса()
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
		 "Свойства_ИспользоватьДопРеквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	Если БлокируемыеРеквизитыИнтереса <> Неопределено Тогда
		Для каждого БлокируемыйРеквизит из БлокируемыеРеквизитыИнтереса Цикл
			ЗаблокироватьЭлементФормы(БлокируемыйРеквизит, Ложь);
		КонецЦикла;
	КонецЕсли;
	
	БлокируемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.БлокируемыеРеквизитыИнтересаВСостоянии(Объект.СостояниеИнтереса);
	
	Для каждого БлокируемыйРеквизит из БлокируемыеРеквизитыИнтереса Цикл
		ЗаблокироватьЭлементФормы(БлокируемыйРеквизит, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьЭлементФормы(БлокируемыйРеквизит, ТолькоПросмотр)
	
	Если ТипЗнч(БлокируемыйРеквизит) = Тип("Строка") Тогда
		ИмяЭлемента = БлокируемыйРеквизит;
	Иначе
		Если ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
			СтрокиРеквизита = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(
				Новый Структура("Свойство", БлокируемыйРеквизит));
			Для каждого СтрРеквизита из СтрокиРеквизита Цикл	
				ИмяЭлемента = СтрРеквизита.ИмяРеквизитаЗначение;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Элемент.ТолькоПросмотр = ТолькоПросмотр;
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			Для Каждого ЭлПанели Из Элемент.КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ЭлПанели) = Тип("КнопкаФормы") Тогда
					ЭлПанели.Доступность = НЕ ТолькоПросмотр;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
		
		// Управление элементами на форме
		CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(
			ЭтотОбъект, ,
			"ГруппаДополнительно",
			?(ЭтоПоддержка, "Поддержка", ""));
		// Конец Управление элементами на форме
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект.Свойства_ИспользоватьСвойства И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
		
		МассивОбъектовСДопРеквизитами = Новый Массив;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКлиента");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", Клиент_Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтейнерДопРеквизитовКонтакта");
		ДополнительныеПараметры.Вставить("НеУчитыватьЗависимости", Ложь);
		ДополнительныеПараметры.Вставить("Объект", Контакт_Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МассивОбъектовСДопРеквизитами.Добавить(ДополнительныеПараметры);
		
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, МассивОбъектовСДопРеквизитами);
		
		РазложитьДопРеквизитыПоКолонкам(МассивОбъектовСДопРеквизитами);
		ИзменитьСоставРеквизитов();
	КонецЕсли;
	// +CRM
	CRM_УправлениеСвойствами.ПослеОтрисовкиДополнительныхРеквизитов(ЭтотОбъект);
	// -CRM
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(
		ЭтотОбъект, ,
		"ГруппаДополнительно",
		?(ЭтоПоддержка, "Поддержка", ""));
	// Конец Управление элементами на форме
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СценарийИнтересаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоны(Команда)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ПоказатьШаблоныЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СписокШаблонов, Элементы.БыстрыйВвод_ПоказатьШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьШаблоныЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаСервере
Процедура БыстрыйВвод_ОбновитьЭлементыВложений()
	
	CRM_ЛентаСобытий.ОбновитьЭлементыВложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеПолучательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(БыстрыйВвод_ВзаимодействиеПолучатель) Тогда
		БыстрыйВвод_ВзаимодействиеПартнер = ВладелецКонтакта(БыстрыйВвод_ВзаимодействиеПолучатель);
	Иначе
		БыстрыйВвод_ВзаимодействиеПартнер = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВладелецКонтакта(Контакт)
	Возврат Контакт.Владелец;
КонецФункции

#Область МоделиМашинногоОбучения

&НаСервере
Функция Помощник_ПроверитьИспользование()
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоПоддержка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиМоделей = CRM_МоделиМашинногоОбучения.ПолучитьНастройкиМоделей();
	Если Не CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделейЗаполнены(НастройкиМоделей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НастройкиМоделей.ИспользоватьИнформированиеОКонверсии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = CRM_МоделиМашинногоОбучения.ПроверитьСостояние("ИнформированиеОКонверсии", НастройкиМоделей);
	Если РезультатПроверки.Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Помощник_ЗаголовокНажатие(Элемент)
	Элементы.Помощник_Подсказки.Показать();
	ТекущийЭлемент = Элементы.Помощник_ИконкаБольшая;
КонецПроцедуры

&НаКлиенте
Процедура Помощник_СохранитьДляСравнения(Команда)
	Помощник_СохранитьДляСравненияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ОбновитьВероятность(Команда)
	Помощник_ОбновитьСостояние();
КонецПроцедуры

&НаСервере
Процедура Помощник_СохранитьДляСравненияНаСервере()
	РегистрыСведений.CRM_ПрогнозыВероятностиСделки.ЗаписатьВероятность(Объект.Ссылка, Помощник_ТекущаяВероятность);
	Помощник_ОбновитьСостояние();
КонецПроцедуры

&НаСервере
Процедура Помощник_ОбновитьСостояние()
	
	Если Не Помощник_Использовать Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеДанные = РегистрыСведений.CRM_ПрогнозыВероятностиСделки.ПолучитьВероятность(Объект.Ссылка);
	Помощник_ПредыдущаяВероятность = СохраненныеДанные.Вероятность;
	Помощник_ПредыдущаяДата = СохраненныеДанные.Дата;
	
	Помощник_ТекущаяВероятность = CRM_МоделиМашинногоОбучения.ВероятностьКонверсии(Объект.Ссылка, Объект.Партнер);
	
	Элементы.Помощник_Вероятность.Заголовок = Формат(Помощник_ТекущаяВероятность, "ЧФ=Ч%");
	Элементы.Помощник_ТекущаяВероятность.Заголовок = Формат(Помощник_ТекущаяВероятность, "ЧФ=Ч%");
	Элементы.Помощник_ПредыдущаяВероятность.Заголовок = Формат(Помощник_ПредыдущаяВероятность, "ЧФ=Ч%");
	
	Если СохраненныеДанные.Вероятность = Неопределено Тогда
		Элементы.Помощник_Тренд.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправоЖелтая;
		Элементы.Помощник_ПредыдущаяВероятность.Видимость = Ложь;
		Элементы.Помощник_ПредыдущаяВероятностьЗаголовок.Заголовок =
			НСтр("ru = 'Нет ранее сохраненных для сравнения данных'");
		Элементы.Помощник_ГруппаПредыдущаяДата.Видимость = Ложь;
		Элементы.Помощник_ТекстПрогноза.Заголовок = НСтр("ru = 'Динамика не изменялась'");
	ИначеЕсли Помощник_ТекущаяВероятность = Помощник_ПредыдущаяВероятность Тогда
		Элементы.Помощник_Тренд.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправоЖелтая;
		Элементы.Помощник_ПредыдущаяВероятность.Видимость = Истина;
		Элементы.Помощник_ПредыдущаяВероятностьЗаголовок.Заголовок = НСтр("ru = 'Предыдущая вероятность:'");
		Элементы.Помощник_ГруппаПредыдущаяДата.Видимость = Истина;
		Элементы.Помощник_ТекстПрогноза.Заголовок = НСтр("ru = 'Динамика не изменялась'");
	ИначеЕсли Помощник_ТекущаяВероятность > Помощник_ПредыдущаяВероятность Тогда
		Элементы.Помощник_Тренд.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправоВверхЗеленая;
		Элементы.Помощник_ПредыдущаяВероятность.Видимость = Истина;
		Элементы.Помощник_ПредыдущаяВероятностьЗаголовок.Заголовок = НСтр("ru = 'Предыдущая вероятность:'");
		Элементы.Помощник_ГруппаПредыдущаяДата.Видимость = Истина;
		Элементы.Помощник_ТекстПрогноза.Заголовок = НСтр("ru = 'Динамика позитивная'");
	ИначеЕсли Помощник_ТекущаяВероятность < Помощник_ПредыдущаяВероятность Тогда
		Элементы.Помощник_Тренд.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправоВнизКрасная;
		Элементы.Помощник_ПредыдущаяВероятность.Видимость = Истина;
		Элементы.Помощник_ПредыдущаяВероятностьЗаголовок.Заголовок = НСтр("ru = 'Предыдущая вероятность:'");
		Элементы.Помощник_ГруппаПредыдущаяДата.Видимость = Истина;
		Элементы.Помощник_ТекстПрогноза.Заголовок = НСтр("ru = 'Динамика ухудшилась'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_СервисНедоступенНажатие(Элемент)
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
КонецПроцедуры

#КонецОбласти // МоделиМашинногоОбучения

#Область ЗаполнениеДанныхКлиента

&НаКлиенте
Процедура СоздатьКлиента(Команда)
	
	ИницилизироватьДанныеКлиента();
	CRM_ЗаписатьВсеТипыОтношений();
	СформироватьТипОтношенийПредставление();
	
	ВидПартнераКомпания = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	ВидПартнераЧастноеЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Клиент_Объект.ОсновнойМенеджер = Объект.Ответственный;
	
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		ЗаполнитьКлиентаИзПотенциального(Объект.ПотенциальныйКлиент);
	КонецЕсли;
	
	Элементы.ГруппаРеквизитыКлиента.Видимость = Истина;
	Элементы.ГруппаЗаписатьОтмена.Видимость = Истина;
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ПотенциальныеКлиенты.Видимость = Ложь;
	Элементы.ГруппаКонтактыИнтереса.Видимость = Ложь;
	
	КонтактнаяИнформацяКлиентаИзменитьОтметкиНезаполненного();
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	
	Клиент_ОбъектЮрФизЛицоПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаОтмена(Команда)
	Элементы.ГруппаРеквизитыКлиента.Видимость = Ложь;
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
	Элементы.ГруппаЗаписатьОтмена.Видимость = Ложь;
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
	Элементы.ПотенциальныеКлиенты.Видимость = Истина;
	Элементы.ГруппаКонтактыИнтереса.Видимость = Истина;
	
	// очистить и скрыть поле Партнера
	Объект.Партнер = Неопределено;
	Элементы.ГруппаКлиент.Видимость = Ложь;
	Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
	Партнер = Объект.Партнер;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлиентаЗаписать(Команда)
	
	Если НЕ ПроверитьЗаполнениеКлиентаКонтакта() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ЗаполнитьКонтактнуюИнформациюКонтактов();
	ЭтотОбъект.Прочитать();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКлиентаИзПотенциального(ПК)
	Если ЗначениеЗаполнено(ПК.Организация) Тогда
		Клиент_Объект.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
		Клиент_Объект.Наименование = ПК.Организация;
		Клиент_Объект.НаименованиеПолное = ПК.Организация;
		Контакт_Объект.Наименование = ПК.Наименование;
		СтрокаТелефонаПотенциальногоКлиента	= ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	Иначе
		Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Клиент_Объект.Наименование = ПК.Наименование;
		Клиент_Объект.НаименованиеПолное = ПК.Наименование;
		СтрокаТелефонаПотенциальногоКлиента	= ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Клиент_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Клиент_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.Партнеры.ПустаяСсылка());
			Клиент_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Клиент_Мессенджер.Видимость = Истина;
			Элементы.Клиент_Мессенджер.Заголовок = Клиент_МессенджерВид;
		КонецЕсли;
	КонецЕсли;
	
	Должность = ПК.Должность;
	Клиент_Объект.БизнесРегион = ПК.БизнесРегион;
	Клиент_Объект.CRM_ОсновнаяОтрасль = ПК.Отрасль;
	Клиент_Объект.Комментарий = ПК.Комментарий;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактноеЛицоИзПотенциального(ПК, НеПроверятьОрганизацию = Ложь)
	
	Если ЗначениеЗаполнено(ПК.Организация) Или НеПроверятьОрганизацию Тогда
		
		Контакт_Объект.Наименование = ПК.Наименование;
		СтрокаТелефонаПотенциальногоКлиента	= ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Телефон = СтрокаТелефонаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента,
			 "Вид");
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			Контакт_Email = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		СтрокаДругойКИПотенциальногоКлиента = ПК.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,
			 "Тип");
		Если НЕ (СтрокаДругойКИПотенциальногоКлиента = Неопределено)
			 И Метаданные.Обработки.Найти("CRM_РаботаСМессенджером" + СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование) <> Неопределено Тогда
			Контакт_МессенджерВид = Обработки["CRM_РаботаСМессенджером" 
				+ СтрокаДругойКИПотенциальногоКлиента.Вид.Наименование].ПолучитьВидКИМессенджера(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			Контакт_Мессенджер = СтрокаДругойКИПотенциальногоКлиента.Представление;
			Элементы.Контакт_Мессенджер.Видимость = Истина;
			Элементы.Контакт_Мессенджер.Заголовок = Контакт_МессенджерВид;
		КонецЕсли;
	КонецЕсли;
	
	Должность = ПК.Должность;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		ЗаполнитьКонтактноеЛицоИзПотенциального(Объект.ПотенциальныйКлиент, Истина);
	КонецЕсли;
	
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Истина;
	Элементы.ГруппаЗаписатьОтмена.Видимость = Истина;
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ПотенциальныеКлиенты.Видимость = Ложь;
	Элементы.ГруппаКонтактыИнтереса.Видимость = Ложь;
	
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	
	Клиент_ОбъектЮрФизЛицоПриИзменении(Неопределено);
	
	Элементы.ГруппаКлиент.Видимость = Истина; // отобразить поле выбора партнера
	Элементы.Партнер.АвтоОтметкаНезаполненного = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектЮрФизЛицоПриИзменении(Элемент)
	
	ОбрабатыватьАктивизациюПоиска = Ложь;
	
	Клиент_ОбъектЮрФизЛицоПриИзмененииСервер();
	
	ФизЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));
	
	Элементы.Клиент_ОбъектДатаРождения.Видимость = Элементы.Клиент_ОбъектДатаРождения.Видимость И ФизЛицо;
	Элементы.Клиент_ОбъектПол.Видимость = Элементы.Клиент_ОбъектПол.Видимость И ФизЛицо;
	Элементы.Клиент_МобТелефон.Видимость = ФизЛицо;
	
	Элементы.Клиент_ЮрАдрес.Видимость = Элементы.Клиент_ЮрАдрес.Видимость И НЕ ФизЛицо;
	Элементы.Клиент_ОбъектCRM_КПП.Видимость = Элементы.Клиент_ОбъектCRM_КПП.Видимость И НЕ ФизЛицо;
	
	Элементы.ГруппаРеквизитыКонтакта.Видимость = Истина;
	Элементы.Контакт_ОбъектНаименование.АвтоОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо);
	Элементы.Контакт_ОбъектНаименование.ОтметкаНезаполненного =  НЕ (CRM_РазрешитьСозданиеИнтересаБезКЛ ИЛИ ФизЛицо)
																И НЕ ЗначениеЗаполнено(Контакт_Объект.Наименование);
	
	Если Элемент <> Неопределено Тогда
		Если ФизЛицо Тогда // с юр лица на физ лицо
			
			Клиент_Email = Контакт_Email;
			Клиент_Телефон = Контакт_Телефон;
			Клиент_МобТелефон = Контакт_МобТелефон;
			Клиент_Мессенджер = Контакт_Мессенджер;
			
			Контакт_Email = "";
			Контакт_Телефон = "";
			Контакт_МобТелефон = "";
			Контакт_Мессенджер = "";
			
		Иначе // с физ лица на юр лицо
			
			Контакт_Объект.Наименование = Клиент_Объект.Наименование;
			Контакт_Email = Клиент_Email;
			Контакт_Телефон = Клиент_Телефон;
			Контакт_МобТелефон = Клиент_МобТелефон;
			Контакт_Мессенджер = Клиент_Мессенджер;
			Контакт_МессенджерВид = Клиент_МессенджерВид;
			
			Клиент_Email = "";
			Клиент_Телефон = "";
			Клиент_МобТелефон = "";
			Клиент_Мессенджер = "";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Клиент_ОбъектЮрФизЛицоПриИзмененииСервер()
	
	ОбновитьЭлементыДополнительныхРеквизитов();

	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.ЮрФизЛицоПриИзменении(ЭтотОбъект);
	КонецЕсли;

	// Установить маски ввода КИ
	ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить();
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Клиент_Телефон) И ВидКИ.ВводитьНомерПоМаске Тогда
		Элементы.Клиент_Телефон.Маска = ВидКИ.МаскаНомераТелефона;
	Иначе
		Элементы.Клиент_Телефон.Маска = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Клиент_МобТелефон)
		 И Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ВводитьНомерПоМаске Тогда
		Элементы.Клиент_МобТелефон.Маска =
			Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.МаскаНомераТелефона;
	Иначе
		Элементы.Клиент_МобТелефон.Маска = "";
	КонецЕсли;
	
	ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Контакт_Телефон) И ВидКИ.ВводитьНомерПоМаске Тогда
		Элементы.Контакт_Телефон.Маска = ВидКИ.МаскаНомераТелефона;
	Иначе
		Элементы.Контакт_Телефон.Маска = "";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Контакт_МобТелефон)
		 И Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ВводитьНомерПоМаске Тогда
		Элементы.Контакт_МобТелефон.Маска =
			Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.МаскаНомераТелефона;
	Иначе
		Элементы.Контакт_МобТелефон.Маска = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если НЕ ЗначениеЗаполнено(Клиент_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено';en='The field ""TIN"" is empty'"));
		ТекущийЭлемент = Элементы.Клиент_ОбъектCRM_ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Клиент_Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?';en='Refill current attributes?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов"
"необходимо подключиться к Интернет-поддержке пользователей."
"Подключиться сейчас?';en='Fill in details of counterparty automatically"
"it is necessary to connect to user Internet support."
"Connect now?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Контрагент_Объект") Тогда
		Модуль_ОбщегоНазначенияУТКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияУТКлиентСервер");
		ЭтоЮрЛицо = Модуль_ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо);
	Иначе
		ЭтоЮрЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		СведенияКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(СведенияКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СведенияКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		РеквизитыКонтрагента = СведенияКонтрагента.ЕГРЮЛ;
		Если РеквизитыКонтрагента = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'"), Клиент_ИНН);
			Возврат;
		КонецЕсли;
		
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Клиент_ИНН);
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Клиент_Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮрЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			Клиент_ЮрАдрес = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			Клиент_ЮрАдресЗначение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("КПП") И ЗначениеЗаполнено(РеквизитыКонтрагента.КПП) Тогда
			Клиент_КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Контакт_Объект.Наименование)
			И РеквизитыКонтрагента.Свойство("Руководители")
			И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители) Тогда
			Контакт_Объект.Наименование = РеквизитыКонтрагента.Руководители[0].Представление;
			Контакт_Объект.CRM_Должность =
				Справочники.CRM_Должности.НайтиПоНаименованию(РеквизитыКонтрагента.Руководители[0].Должность);
		КонецЕсли;
		Если РеквизитыКонтрагента.Свойство("НаименованиеСокращенное")
			 И ЗначениеЗаполнено(РеквизитыКонтрагента.НаименованиеСокращенное) Тогда
			CRM_Контрагент_НаименованиеСокращенное = РеквизитыКонтрагента.НаименованиеСокращенное;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер")
		 И ЗначениеЗаполнено(РеквизитыКонтрагента.РегистрационныйНомер) Тогда
		Клиент_ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Клиент_Телефон) 
		И РеквизитыКонтрагента.Свойство("Телефон")
		И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		Клиент_Телефон = РеквизитыКонтрагента.Телефон.Представление;
	КонецЕсли;
	
	// +CRM_Модуль
	//РеквизитыКонтрагента.Свойство("КПП", Клиент_Объект.CRM_КПП);
	РеквизитыКонтрагента.Свойство("ИНН", Клиент_ИНН);
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ТипОтношенийПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Элементы.ГруппаВсеТипыОтношений.Показать();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаВсеТипыОтношений.Скрыта() Тогда
		ТекущийЭлемент = Элементы.Клиент_ОбъектCRM_ТипОтношенийПредставление;
		CRM_ЗаписатьВсеТипыОтношений();
		СформироватьТипОтношенийПредставление();
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаСервере
Процедура СформироватьТипОтношенийПредставление()
	
	CRM_ТипыОтношений = "";
	ТипКлиент = Ложь;
	ТипПоставщик = Ложь;
	ТипКонкурент = Ложь;
	ТипПрочиеОтношения = Ложь;
	
	Для Каждого Строка Из Клиент_Объект.CRM_ТипыОтношений Цикл
		ТипКлиент = ТипКлиент ИЛИ Строка.ТипОтношений.Клиент;
		ТипПоставщик = ТипПоставщик ИЛИ Строка.ТипОтношений.Поставщик;
		ТипКонкурент = ТипКонкурент ИЛИ Строка.ТипОтношений.Конкурент;
		ТипПрочиеОтношения = ТипПрочиеОтношения ИЛИ Строка.ТипОтношений.ПрочиеОтношения;
		
		CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + Строка.ТипОтношений;
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	Клиент_Объект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	Клиент_Объект.Клиент = ТипКлиент;
	Клиент_Объект.Поставщик = ТипПоставщик;
	Клиент_Объект.Конкурент = ТипКонкурент;
	Клиент_Объект.ПрочиеОтношения = ТипПрочиеОтношения;
	
КонецПроцедуры

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Клиент_Объект.CRM_ТипыОтношений.Очистить();
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
Процедура КлиентКонтакт_КИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыОткрытия = Новый Структура;
	Если Элемент.Имя = "Клиент_Адрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера"));
	ИначеЕсли Элемент.Имя = "Клиент_ЮрАдрес" Тогда
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации",
			 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ЮрАдрес"));
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Представление", ЭтотОбъект[Элемент.Имя]);
	ПараметрыОткрытия.Вставить("Значение", ЭтотОбъект[Элемент.Имя + "Значение"]);
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения", Элемент.Имя);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения] = РезультатЗакрытия.Представление;
	ЭтотОбъект[ДополнительныеПараметры.ИмяЭлементаРазмещения + "Значение"] = РезультатЗакрытия.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ТелефонПриИзменении(Элемент)
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
		ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Телефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры
								
&НаКлиенте
Процедура Клиент_МобТелефонПриИзменении(Элемент)
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
		ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Клиент_МобТелефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ТелефонПриИзменении(Элемент)
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
		ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Контакт_Телефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры

&НаКлиенте
Процедура Контакт_МобТелефонПриИзменении(Элемент)
	Если Элемент.Маска = "" Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭтотОбъект[Элемент.Имя]);
		ЭтотОбъект[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
			 "");
	КонецЕсли;
	
	ВыполнитьПоискДублейПоЗначению(Контакт_МобТелефон, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
КонецПроцедуры
								
&НаКлиенте
Процедура Клиент_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
КонецПроцедуры

&НаКлиенте
Процедура Контакт_EmailПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Контакт_Email, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
КонецПроцедуры

&НаКлиенте
Процедура Клиент_АдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_Адрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ЮрАдресПриИзменении(Элемент)
	ВыполнитьПоискДублейПоЗначению(Клиент_ЮрАдрес, Элемент,
									ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
КонецПроцедуры

&НаСервере
Процедура ИницилизироватьДанныеКлиента()
	
	ВыбранныеТипы = Новый Массив;
	
	ОсновнойТипОтношенийСКлиентом = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойТипОтношенийСКлиентом");
	Если ЗначениеЗаполнено(ОсновнойТипОтношенийСКлиентом) Тогда
		ВыбранныеТипы.Добавить(ОсновнойТипОтношенийСКлиентом);
	Иначе
		ВыбранныеТипы.Добавить(Справочники.CRM_ТипыОтношений.Покупатель);
	КонецЕсли;
	
	Справочники.CRM_ТипыОтношений.ЗаполнитьСписокОтношений(CRM_ВсеТипыОтношений, ВыбранныеТипы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитов()
	
	Настройки = ПараметрыСеанса.CRM_НастройкаСоставаРеквизитовМастераРегистрации.Получить();
	ОбщиеНастройки = Неопределено;
	Настройки.Свойство("ОбщиеНастройки", ОбщиеНастройки);
	Если ОбщиеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеЭлементов = Обработки.CRM_МастерРегистрацииОбращения.СответствиеЭлементовМастераИИнтереса();
	Для Каждого НастройкаГруппы Из ОбщиеНастройки Цикл
		Если НастройкаГруппы.Ключ = "Клиент" Или НастройкаГруппы.Ключ = "Контакт" Тогда
			Для Каждого НастройкаЭлемента Из НастройкаГруппы.Значение Цикл
				Если ТипЗнч(НастройкаЭлемента.Значение) = Тип("Строка") Тогда
					ИмяЭлемента = "";
					Если Не СоответствиеЭлементов.Свойство(НастройкаЭлемента.Значение, ИмяЭлемента) Тогда
						ИмяЭлемента = НастройкаЭлемента.Значение;
					КонецЕсли;
					Элемент = Элементы.Найти(ИмяЭлемента);
				Иначе
					Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
						 И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
						ОписанияДР = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",
							 НастройкаЭлемента.Значение));
						Если ОписанияДР.Количество() > 0 Тогда
							Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элемент <> Неопределено Тогда
					Элемент.Видимость = НастройкаЭлемента.Пометка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура РазложитьДопРеквизитыПоКолонкам(МассивОбъектов)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ЭтотОбъект.Свойства_ИспользоватьСвойства И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
		Для Каждого ОбъектДопРеквизитов Из МассивОбъектов Цикл
			ГруппаДопРеквизитов = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения);
			Если ГруппаДопРеквизитов <> Неопределено Тогда
				ГруппаЛев = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Левая");
				ГруппаПрав = Элементы.Найти(ОбъектДопРеквизитов.ИмяЭлементаДляРазмещения + "Правая");
				Если ГруппаЛев <> Неопределено И ГруппаПрав <> Неопределено Тогда
					Левая = Истина;
					Для Каждого ДопРеквизит Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
						ДопЭлемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ДопРеквизит);
						Если ДопЭлемент <> Неопределено
							И (ДопЭлемент.Родитель = ГруппаДопРеквизитов Или ДопЭлемент.Родитель.Родитель = ГруппаДопРеквизитов) Тогда
							ДопЭлемент.Видимость = Ложь;
							Элементы.Переместить(ДопЭлемент, ?(Левая, ГруппаЛев, ГруппаПрав));
							Левая = Не Левая;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Клиент_Телефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Телефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
				 "");
		Иначе
			Представление = Клиент_Телефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Клиент_МобТелефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_МобТелефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
		Иначе
			Представление = Клиент_МобТелефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Клиент_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Мессенджер) Тогда
		Если Клиент_МессенджерВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Клиент_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				 Клиент_МессенджерВид, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Клиент_МессенджерВид);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
				 Клиент_Мессенджер,
				 Клиент_МессенджерВид);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, ДанныеКИ,
			 Клиент_МессенджерВид,
			 Клиент_МессенджерВид.Тип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ТипКИ = ВидКИ.Тип;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, Клиент_АдресЗначение, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент_ЮрАдрес) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес;
		ТипКИ = ВидКИ.Тип;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Клиент_Объект, Клиент_ЮрАдресЗначение, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект.Свойства_ИспользоватьСвойства И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Клиент_Объект);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			НовСтр = Клиент_Объект.CRM_ТипыОтношений.Добавить();
			НовСтр.ТипОтношений = ТипОтношений.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ИНН") Тогда
		Клиент_Объект["CRM_ИНН"] = Клиент_ИНН;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_КПП") Тогда
		Клиент_Объект["CRM_КПП"] = Клиент_КПП;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ОГРН") Тогда
		Клиент_Объект["CRM_ОГРН"] = Клиент_ОГРН;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Клиент_Объект.ОсновнойМенеджер) Тогда
		Клиент_Объект.ОсновнойМенеджер = Объект.Ответственный;
	КонецЕсли;
	Клиент_Объект.CRM_Автор = ТекущийПользователь;
	
	НовыйКлиент = РеквизитФормыВЗначение("Клиент_Объект");
	НовыйКлиент.ДатаРегистрации = ТекущаяДатаСеанса();
	НовыйКлиент.Записать();
	
	Если Метаданные.ОбщиеМодули.Найти("CRM_Модуль_РаботаСКонтрагентами") <> Неопределено Тогда
		CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_РаботаСКонтрагентами");
		CRM_Модуль.СоздатьКонтрагентаПриСозданииПартнера(ЭтотОбъект, НовыйКлиент.Ссылка);
	КонецЕсли;
	
	Объект.Партнер = НовыйКлиент.Ссылка;
	Партнер = Объект.Партнер;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтактНаСервере()
	
	Если ПустаяСтрока(Контакт_Объект.Наименование) ИЛИ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Контакт_Объект.Владелец = Объект.Партнер;
	
	Если ЗначениеЗаполнено(Контакт_Телефон) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Контакт_Телефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Телефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
				 "");
		Иначе
			Представление = Контакт_Телефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_МобТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Если Элементы.Контакт_МобТелефон.Маска = "" Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_МобТелефон);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
		Иначе
			Представление = Контакт_МобТелефон;
		КонецЕсли;
		ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
			 ВидКИ, "");
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Email) Тогда
		ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, Контакт_Email, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Мессенджер) Тогда
		Если Контакт_МессенджерВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Контакт_Мессенджер);
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
				 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
				 "");
			ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
				 Контакт_МессенджерВид, "");
		Иначе
			СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Контакт_МессенджерВид);
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ,
				 Контакт_Мессенджер,
				 Контакт_МессенджерВид);
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Контакт_Объект, ДанныеКИ,
			 Контакт_МессенджерВид,
			 Контакт_МессенджерВид.Тип);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Если ЭтотОбъект.Свойства_ИспользоватьСвойства И ЭтотОбъект.Свойства_ИспользоватьДопРеквизиты Тогда
			CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, Контакт_Объект);
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контакт_Объект.ДатаРождения) Тогда
		ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.НайтиПоНаименованию(Нстр("ru='День рождения контактного лица'"),
			 Истина);
		Если НЕ (ВидСобытия = Справочники.CRM_ВидыКлючевыхСобытий.ПустаяСсылка()) Тогда
			НовСтрока = Контакт_Объект.CRM_КлючевыеСобытия.Добавить();
			НовСтрока.ВидСобытия = ВидСобытия;
			НовСтрока.ДатаСобытия = Контакт_Объект.ДатаРождения;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Статус) Тогда
		НовСтрока = Контакт_Объект.CRM_Статусы.Добавить();
		НовСтрока.Статус = Контакт_Статус;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ИНН") Тогда
		Клиент_Объект["CRM_ИНН"] = Клиент_ИНН;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_КПП") Тогда
		Клиент_Объект["CRM_КПП"] = Клиент_КПП;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Клиент_Объект, "CRM_ОГРН") Тогда
		Клиент_Объект["CRM_ОГРН"] = Клиент_ОГРН;
	КонецЕсли;
	
	НовыйКонтакт = РеквизитФормыВЗначение("Контакт_Объект");
	НовыйКонтакт.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	НовыйКонтакт.Автор = ТекущийПользователь;
	НовыйКонтакт.Записать();
	
	Объект.КонтактноеЛицо = НовыйКонтакт.Ссылка;
	НовСтрКЛ = Объект.Контакты.Добавить();
	НовСтрКЛ.Контакт = НовыйКонтакт.Ссылка;
	НовСтрКЛ.Роль = НовыйКонтакт.CRM_РольКонтактногоЛица;
	
	Если ЗначениеЗаполнено(Объект.Партнер)
		И НЕ ЗначениеЗаполнено(Объект.Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
		ПартнерОбъект = Объект.Партнер.ПолучитьОбъект();
		ПартнерОбъект.CRM_ОсновноеКонтактноеЛицо = Объект.КонтактноеЛицо;
		ПартнерОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКлиентаИКонтактНаСервере()
	
	СоздатьКлиентаНаСервере();
	Элементы.ГруппаРеквизитыКлиента.Видимость = НЕ ЗначениеЗаполнено(Объект.Партнер);
		
	Если Элементы.ГруппаРеквизитыКонтакта.Видимость Тогда
		СоздатьКонтактНаСервере();
		Элементы.ГруппаРеквизитыКонтакта.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаЗаписатьОтмена.Видимость = 
			(Элементы.ГруппаРеквизитыКлиента.Видимость ИЛИ Элементы.ГруппаРеквизитыКонтакта.Видимость);
	Элементы.ГруппаКонтактыИнтереса.Видимость = НЕ Элементы.ГруппаЗаписатьОтмена.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектCRM_ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Клиент_ИНН) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Контрагент_Объект") Тогда
			Модуль_ОбщегоНазначенияУТКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияУТКлиентСервер");
			ЭтоЮрЛицо = Модуль_ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЭтотОбъект["Контрагент_Объект"].ЮрФизЛицо);
		Иначе
			ЭтоЮрЛицо = (Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		КонецЕсли;
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Клиент_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_ИНН");
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПриИзменении(Элемент)
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		Если Не ИмяКлиентаИзСписка Тогда
			
			ФИО_Темп = Клиент_Объект.Наименование;
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ",", "");
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ".", "");		
			ФИО_Темп = СтрЗаменить(ФИО_Темп, ";", "");
			
			ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			
			Клиент_Объект.CRM_Фамилия = ПервоеСлово;			
			Клиент_Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			Клиент_Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО_Темп);
			
			Если Не ЗначениеЗаполнено(Клиент_Объект.Пол) Тогда
				Клиент_Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Клиент_Объект.CRM_Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,
			 "ПравоваяФормаКлиентаПоУмолчанию");
		Клиент_Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" , СокрЛП(Клиент_Объект.Наименование),
			СокрЛП(ПравоваяФорма) + " """ + СокрЛП(Клиент_Объект.Наименование) + """");
	Иначе
		Клиент_Объект.НаименованиеПолное = СокрЛП(Клиент_Объект.Наименование);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Клиент_Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Не ИмяКлиентаИзСписка Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.ЗагрузитьЗначения(CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Клиент_Объект));	
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКлиентаИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контакт_ОбъектНаименованиеПриИзменении(Элемент)
	
	КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного();
	ВыполнитьПоискДублейПоЗначению(Контакт_Объект.Наименование, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Клиент_ОбъектНаименованиеПолноеПриИзменении(Элемент)
	
	ВыполнитьПоискДублейПоЗначению(Клиент_Объект.НаименованиеПолное, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКлиентаПродолжение(НайденыДубли, ДополнительныеПараметры) Экспорт
	
	Если НЕ НайденыДубли Тогда
		Клиент_Проверен = Истина;
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения)
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!';
			|en='Search attributes in the settings of the service functions are not set!'"));
	КонецЕсли;
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование",		Клиент_Объект.Наименование);
	СтруктураОбъекта.Вставить("НаименованиеПолное",	Клиент_Объект.НаименованиеПолное) ;
	СтруктураОбъекта.Вставить("ИНН",				Клиент_ИНН);
	Если ЗначениеЗаполнено(Клиент_Адрес) Тогда
		СтруктураОбъекта.Вставить("Адрес", Клиент_Адрес);
	КонецЕсли;
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	Если НЕ ПустаяСтрока(Контакт_Телефон) Тогда
		СтруктураОбъекта.Вставить("Контакт_Телефон", Контакт_Телефон);
		ТелефонДляПоиска	= Контакт_Телефон;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Клиент_Телефон) Тогда
		СтруктураОбъекта.Вставить("Телефон", Клиент_Телефон);
		Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(ТелефонДляПоиска) Тогда
			ТелефонДляПоиска	= Клиент_Телефон;
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ПустаяСтрока(Контакт_Email) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", Контакт_Email);
		EmailДляПоиска	= Контакт_Email;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Клиент_Email) Тогда
		СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Клиент_Email);
		Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(EmailДляПоиска) Тогда
			EmailДляПоиска	= Клиент_Email;
		КонецЕсли;
	КонецЕсли;
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы, ЭтотОбъект);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе 
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект,
			 ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиНайденыЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Перейти" ИЛИ РезультатЗакрытия.Результат = "Продолжить" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						Объект.КонтактноеЛицо = РезультатЗакрытия.Объект;
						Партнер = Объект.Партнер;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						Объект.Партнер = РезультатЗакрытия.Объект;
						Партнер = Объект.Партнер;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли (ТипЗнч(РезультатЗакрытия) = Тип("КодВозвратаДиалога")) 
		И (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
КонецПроцедуры

&НаСервере
// Функция создает Структуру реквизитов для поиска партнеров.
//
Функция СоздатьСтруктуруПоиска()
	СтруктураПоиска = Новый Структура;
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если НЕ (РеквизитыПоиска = Неопределено) Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = СтрНайти(Значение, ";");
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПоиска;
КонецФункции

#КонецОбласти

#Область ПоискДублейПоЗначению

&НаКлиенте
Процедура ВыполнитьПоискДублейПоЗначению(ЗначениеПоиска, Поле, ТипКИ = Неопределено)
	
	ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, Поле.Имя, ТипКИ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискДублейПоЗначениюНаСервере(ЗначениеПоиска, ИмяПоля, ТипКИ)
	
	CRM_ПоискКонтактовВызовСервера.ПодготовитьПоискДублейПоЗначению(ЭтотОбъект, ЗначениеПоиска, ИмяПоля, ТипКИ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаРезультатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	CRM_ПоискКонтактовКлиент.ОбработатьВыборТаблицыРезультатов(ЭтотОбъект, Элемент, ВыбраннаяСтрока,
		 Поле,
		 СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОжидаемаяДатаПродажи

&НаСервере
Процедура ПересчитатьОжидаемуюДатуПродажиНаСервере()
	Объект.РучнойВводДатыПродажи = Ложь;
	Модифицированность = Истина;
	Объект.ОжидаемаяДатаПродажи = CRM_ИнтересыСервер.ПлановаяДатаПродажи(Объект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОжидаемуюДатуПродажи(Команда)
	Если Элементы.ОжидаемаяДатаПродажи.ТолькоПросмотр ИЛИ Объект.Завершен Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В данном состоянии интереса запрещено менять ожидаемую дату продажи!'"));
		Возврат;
	КонецЕсли;
	Если Объект.РучнойВводДатыПродажи Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьОжидаемуюДатуПродажиПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Ожидаемая дата продажи была введена вручную!
					|Пересчитать дату продажи и включить автоматический пересчет?'"),
			РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Пересчет ожидаемой даты продажи'"));
	Иначе
		ПересчитатьОжидаемуюДатуПродажиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОжидаемуюДатуПродажиПродолжение(Ответ, ДопПар) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьОжидаемуюДатуПродажиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяДатаПродажиПриИзменении(Элемент)
	Объект.РучнойВводДатыПродажи = ЗначениеЗаполнено(Объект.ОжидаемаяДатаПродажи);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СрокиНаЭтапах(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		СтандартнаяОбработка = Ложь;
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
			"CRM_Статистика.АРМДиалоги.ОткрытиеВОдинКлик.ПереходИзКарточкиИнтересДокументОснование");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ДокументОснование);
		
		ОткрытьФорму(
			"Обработка.CRM_Мессенджер.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ЕстьПолныеПрава()
	Возврат РольДоступна("ПолныеПрава");
КонецФункции

#Область ЧекЛист

&НаКлиенте
Процедура ДекорацияСвернутьРазвернутьЧекЛистНажатие(Элемент)
	
	Элементы.ЧекЛист.Видимость = Не Элементы.ЧекЛист.Видимость;
	Элементы.ДекорацияСвернутьРазвернутьЧекЛист.Картинка = ?(Элементы.ЧекЛист.Видимость,
		БиблиотекаКартинок.CRM_СтрелкаВверх16, БиблиотекаКартинок.CRM_СтрелкаВниз16);
	
КонецПроцедуры
	
&НаСервере
Процедура ВывестиЧекЛист()
	
	Если Объект.СостояниеИнтереса.ИспользоватьЧекЛист Тогда
		РазмерЧЛ = Объект.ЧекЛист.НайтиСтроки(Новый Структура("СостояниеИнтереса", Объект.СостояниеИнтереса)).Количество();
		
		Если РазмерЧЛ > 0 Тогда
			Элементы.ЧекЛист.ОтборСтрок = Новый ФиксированнаяСтруктура("СостояниеИнтереса", Объект.СостояниеИнтереса);
			Элементы.ЧекЛист.ВысотаВСтрокахТаблицы = РазмерЧЛ;
			Элементы.ГруппаЧекЛист.Видимость = Истина;
			Если Не ПроверитьЧекЛист()  Тогда
				Элементы.ДекорацияСвернутьРазвернутьЧекЛист.Картинка = БиблиотекаКартинок.CRM_СтрелкаВверх16;
				Элементы.ЧекЛист.Видимость = Истина;
			Иначе
				Элементы.ДекорацияСвернутьРазвернутьЧекЛист.Картинка = БиблиотекаКартинок.CRM_СтрелкаВниз16;
				Элементы.ЧекЛист.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаЧекЛист.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЧекЛист.Видимость = Ложь;
	КонецЕсли;
	УстановитьЗаголовокЧекЛиста(Элементы.ЗаголовокГруппыЧеклист, Объект.ЧекЛист, Объект.СостояниеИнтереса);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЧекЛиста(Элемент, ЧекЛист, СостояниеИнтереса)
	Элемент.Заголовок = НСтр("ru = 'Чек-лист'") + ": " + Строка(СостояниеИнтереса) +
		" (" + Строка(ЧекЛист.НайтиСтроки(Новый Структура("СостояниеИнтереса, Выполнено",
			 СостояниеИнтереса, Истина)).Количество()) +
		"/" + Строка(ЧекЛист.НайтиСтроки(Новый Структура("СостояниеИнтереса", СостояниеИнтереса)).Количество()) + ")";
КонецПроцедуры

&НаСервере
Функция ПроверитьЧекЛист(ПоказыватьЧекЛист = Ложь)

	Если Объект.СостояниеИнтереса.ИспользоватьЧекЛист И Объект.СостояниеИнтереса.ПроверкаВыполненияЧекЛиста
		И Объект.ЧекЛист.НайтиСтроки(Новый Структура("СостояниеИнтереса, Выполнено",
			Объект.СостояниеИнтереса, Ложь)).Количество() > 0 Тогда
		
		Если ПоказыватьЧекЛист И Не Элементы.ЧекЛист.Видимость Тогда
			Элементы.ЧекЛист.Видимость = Истина;
			Элементы.ДекорацияСвернутьРазвернутьЧекЛист.Картинка = БиблиотекаКартинок.CRM_СтрелкаВверх16;
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ЧекЛистВыполненоПриИзменении(Элемент)
	УстановитьЗаголовокЧекЛиста(Элементы.ЗаголовокГруппыЧеклист, Объект.ЧекЛист, Объект.СостояниеИнтереса);
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ЧекЛистСнятьВыделениеСтрок", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистСнятьВыделениеСтрок()
	Элементы.ЧекЛист.ВыделенныеСтроки.Очистить();
КонецПроцедуры

#КонецОбласти

// +CRM_Модуль
#Область CRM_Модуль

#Область CRM_Модуль_Разное

&НаСервере
Процедура УстановитьУсловноеОформлениеТоваров()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(ЭтотОбъект);
	
	//
	
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтотОбъект); // ERP 2.5
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	//
	
	ЦеныПредприятияЗаполнениеСервер.УстановитьУсловноеОформлениеВидовЦен(ЭтотОбъект); // ERP 2.5
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ИспользоватьСоглашенияСКлиентами();
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ВалютаДокумента = Объект.Валюта;
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Если Элементы.Найти("ТоварыНоменклатура") <> Неопределено Тогда
		НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	КонецЕсли;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость,
		Объект.Договор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАвтоСкидки = КоллекцияТовары.Итог("СуммаАвтоматическойСкидки");

	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки");

	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего = КоллекцияТовары.Итог("СуммаСНДС");
	
	СуммаБезНДС = КоллекцияТовары.Итог("Сумма");
	
	Если СуммаБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	ОтображатьИтогСуммыНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаПродажи(Форма.Объект.НалогообложениеНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
			Объект.НалогообложениеНДС, Объект.Дата, Объект.Организация));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	// +CRM_ERP2.5
	СтруктураПараметров = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок();
	СтруктураПараметров.ИмяТаблицы = "Товары";
	СтруктураПараметров.ТолькоДляВыделенныхСтрок = ТолькоВыделенныеСтроки;
	СтруктураПараметров.ТолькоАктивныеСтроки = ТолькоАктивныеСтроки; // +CRM_ERP2.5
	Возврат СкидкиНаценкиЗаполнениеСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(
		ЭтотОбъект, УникальныйИдентификатор, СтруктураПараметров);
	// -CRM_ERP2.5
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	CRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьУсловияПродажПоУмолчанию(ДокументПродажи);
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение) И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");

	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		ПриИзмененииХозяйственнойОперацииСервер();
		
	КонецЕсли;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // ERP 2.5
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	// +CRM_ERP 2.5
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ВалютаПриИзмененииСервер(
			Объект.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента));
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект["CRM_Модуль_БанковскийСчет"])
		И НЕ CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект["CRM_Модуль_БанковскийСчет"], "ВалютаДенежныхСредств") = Объект.Валюта Тогда
		Объект["CRM_Модуль_БанковскийСчет"] = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект["CRM_Модуль_БанковскийСчетКонтрагента"])
		И НЕ CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект["CRM_Модуль_БанковскийСчетКонтрагента"], "ВалютаДенежныхСредств") = Объект.Валюта Тогда
		Объект["CRM_Модуль_БанковскийСчетКонтрагента"] = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьПараметрыВыбораБанковскогоСчета();
	// -CRM_ERP 2.5

	ВалютаДокумента = Объект.Валюта;
	
	ОбновитьЗаголовокГруппыТовары();
	ВыручкаВВалюте = ПересчитатьСуммуПоВалюте(Объект.ОжидаемаяВыручка, ВалютаУправленческогоУчета, Объект.Валюта);
	
	Элементы.ВалютаДекорация.Заголовок = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДСПродажи()
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьСоглашенияСКлиентами()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И (Не ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Или ЗначениеЗаполнено(Объект.Партнер));
КонецФункции

#КонецОбласти // CRM_Модуль_Разное

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		ЗаполнитьНалогообложениеНДСПродажи();
		НалогообложениеНДСПриИзмененииСервер();
		
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	ИспользоватьСоглашенияСКлиентами = ИспользоватьСоглашенияСКлиентами();
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		Если ИспользоватьДоговорыСКлиентами Тогда
			ЗаполнитьДоговорПоУмолчанию();
		КонецЕсли;
		Если НЕ Элементы.Контрагент.Видимость Тогда
			ПечатьСчета_КонтрагентПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	СкладПриИзмененииСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
		Объект.НалогообложениеНДС, Объект.Дата, Объект.Организация));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	CRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьУсловияПродажПоСоглашению(ДокументПродажи);
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	СкладПриИзмененииСервер();
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение) И ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ВыручкаВВалюте = РаботаСКурсамиВалют.ПересчитатьВВалюту(Объект.ОжидаемаяВыручка, ВалютаУправленческогоУчета, Объект.Валюта, Объект.Дата);
	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(Объект.ОжидаемаяВыручка)+" "+ВалютаУправленческогоУчета.Наименование + ")";
	
	Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = (Объект.Валюта <> ВалютаУправленческогоУчета);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиПосоглашениюСервер()
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.Соглашение.Пустая() Тогда
		ЗаголовокСклад = Новый ФорматированнаяСтрока("Склад: ", Новый ФорматированнаяСтрока("Соглашение не выбрано", , WebЦвета.Синий));
		ЗаголовокКонтрагент = Новый ФорматированнаяСтрока("Контрагент: ", Новый ФорматированнаяСтрока("Соглашение не выбрано", , WebЦвета.Синий));
	Иначе
		ЗаголовокСклад = Новый ФорматированнаяСтрока("Склад: ", Новый ФорматированнаяСтрока(?(Объект.Соглашение.Склад.Пустая(), "Не заполнен в соглашении", Объект.Соглашение.Склад.Наименование), , WebЦвета.Синий));
		ЗаголовокКонтрагент = Новый ФорматированнаяСтрока("Контрагент: ", Новый ФорматированнаяСтрока(?(Объект.Соглашение.Контрагент.Пустая(), "Не заполнен в соглашении", Объект.Соглашение.Контрагент.Наименование), , WebЦвета.Синий));
	КонецЕсли;
	Элементы.ДекорацияСклад.Заголовок = ЗаголовокСклад;
	Элементы.ДекорацияКонтрагент.Заголовок = ЗаголовокКонтрагент;
КонецПроцедуры	

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента, ВалютаРегламентированногоУчета);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента, ВалютаРегламентированногоУчета);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде=Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
		CRM_Модуль_СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
		Если Элементы.Найти("ПоказатьСообщения") <> Неопределено Тогда
			CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьОжидаемуюВыручкуНаСервере()
	ВыручкаВВалюте = Объект.Товары.Итог("СуммаСНДС");  
	Объект.ОжидаемаяВыручка = РаботаСКурсамиВалют.ПересчитатьВВалюту(ВыручкаВВалюте, Объект.Валюта, ВалютаУправленческогоУчета, Объект.Дата);
	Элементы.ДекорацияВыручкаВУпрВалюте.Заголовок = "(" + Строка(Объект.ОжидаемаяВыручка)+ " " +ВалютаУправленческогоУчета.Наименование + ")";
	
	Элементы.ДекорацияВыручкаВУпрВалюте.Видимость = (Объект.Валюта <> ВалютаУправленческогоУчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя); // +CRM_ERP2.5
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Товары") Тогда
		УстановитьПараметрыВыбораТоварыСклад();
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	//СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	//ВсегоСкладов = ТаблицаСкладов.Количество();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	ОбновитьНадписиПосоглашениюСервер();
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Ложь;
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = Истина;
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент              = Элемент;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПараметрыВыбораСоглашения.Партнер = Объект.Партнер;
		ПараметрыВыбораСоглашения.ДанныеФормыСтруктура = Объект;
	Иначе
		ПараметрыВыбораСоглашения.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
	КонецЕсли;
	ПараметрыВыбораСоглашения.Документ             = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента        = Объект.Дата;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// +CRM_Модуль
	ПечатьСчета_КонтрагентПриИзмененииСервер();
	КонтрагентПартнера = Объект.Контрагент;
	// -CRM_Модуль
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	ОбновитьЗаголовокГруппыТовары();
	ВыручкаВВалюте = ПересчитатьСуммуПоВалюте(Объект.ОжидаемаяВыручка, ВалютаУправленческогоУчета, Объект.Валюта);
	Элементы.ВалютаДекорация.Заголовок = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер(Неопределено);
	
	// +CRM_Модуль     
	ПечатьСчета_ДоговорПриИзмененииСервер();
	// -CRM_Модуль

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
														ХозяйственнаяОперация, 
														Объект.Валюта);
															
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСвязямиПараметровВыбораРеквизитовФормы()
	
	// Договор, добавляем связь с реквизитом формы ПоСоглашениюИспользуютсяДоговорыКонтрагентов
	ЭлементФормы = Элементы.Договор;
	НовыеСвязиПараметровВыбора = Новый Массив;
	Для Каждого СвязьПараметровВыбора Из ЭлементФормы.СвязиПараметровВыбора Цикл
		Если Не СвязьПараметровВыбора.Имя = "ПоСоглашениюИспользуютсяДоговорыКонтрагентов" Тогда
			НовыеСвязиПараметровВыбора.Добавить(СвязьПараметровВыбора);
		КонецЕсли;
	КонецЦикла;
	ПараметрВыбора = Новый СвязьПараметраВыбора("ПоСоглашениюИспользуютсяДоговорыКонтрагентов", "ПоСоглашениюИспользуютсяДоговорыКонтрагентов", РежимИзмененияСвязанногоЗначения.НеИзменять);
	НовыеСвязиПараметровВыбора.Добавить(ПараметрВыбора);
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязиПараметровВыбора);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьЗаголовокГруппыТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ, Истина);
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	НоваяСтрока.Склад = Объект.Склад;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтотОбъект, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
				Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
				Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ТоварыВыборФрагмент();

	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
		ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
		
		Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтотОбъект);
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
	
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыВыборФрагмент();
	
КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
	
	Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект); // +CRM_ERP2.5
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект)); // +CRM_ERP2.5
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
		Объект.НалогообложениеНДС, Объект.Дата, Объект.Организация));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));
		
	ДобавитьДействиеЗаполненияЦен(СтруктураДействий); // +CRM_ERP2.5

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ТекущаяСтрока.Содержание = СформироватьСодержаниеДляПечати(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ДобавитьДействиеЗаполненияЦен(СтруктураДействий)
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение)) 
		Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		ПараметрыЗаполненияЦеныВСтрокеТЧ = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ПараметрыЗаполненияЦеныВСтрокеТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСодержаниеДляПечати(Номенклатура, Характеристика)
	Возврат CRM_Модуль_РаботаСФормамиСервер.СформироватьСодержаниеДляПечати(Номенклатура, Характеристика);
КонецФункции
// -CRM_Модуль

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект)); // +CRM_ERP2.5
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);// +CRM_ERP2.5
	ТекущаяСтрока.Содержание = СформироватьСодержаниеДляПечати(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект)); // +CRM_ERP2.5
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект)); // +CRM_ERP2.5
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Элементы.Товары.ТекущиеДанные.Содержание", НСтр("ru='Содержание'"));

КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены( // +CRM_ERP2.5
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены( // +CRM_ERP2.5
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция СтруктураСообщений()
	
	Возврат CRM_Модуль_СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
		
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	СтруктураСообщений = CRM_Модуль_СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	CRM_Модуль_СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP2.5
			
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда // +CRM_ERP2.5
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	 // +CRM_ERP2.5
	 Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru = 'Товары';
																				|en = 'Goods'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения = 
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект);
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораЦен.ИспользоватьПриПродаже = Истина;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;
	 // -CRM_ERP2.5

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВТЧПоСоглашению(Команда)
	ОбновитьНадписиПосоглашениюСервер();
	ЗаполнитьСкладВТЧПоСоглашениюСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладВТЧПоСоглашениюСервер()
	Если ЗначениеЗаполнено(Объект.Соглашение.Склад) Тогда
		Объект.Склад = Объект.Соглашение.Склад;
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.Склад = Объект.Соглашение.Склад;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.CRM_Интерес.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'Интерес'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)';
				|en = 'Discounts (markups)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны';
				|en = 'Discount (markups) are calculated'"),
			БиблиотекаКартинок.Информация32);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда // +CRM_ERP2.5
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияРучныхСкидок( // +CRM_ERP2.5
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта); // +CRM_ERP2.5
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда // +CRM_ERP2.5
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияРучныхСкидок( // +CRM_ERP2.5
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта); // +CRM_ERP2.5
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиЗаполнениеКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда // +CRM_ERP2.5
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(); // +CRM_ERP2.5
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку( // +CRM_ERP2.5
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт // +CRM_ERP
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект); // +CRM_ERP
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

// +CRM_ERP
&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыЗагрузки = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	ПараметрыЗагрузки.ЗагружатьЦены = Истина;
	ПараметрыЗагрузки.ЦенаВключаетНДС    = Объект.ЦенаВключаетНДС;
	ПараметрыЗагрузки.НалогообложениеНДС = Объект.НалогообложениеНДС;
	ПараметрыЗагрузки.ДатаЗаполнения     = Объект.Дата;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Дата       = Объект.Дата;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Валюта     = Объект.Валюта;
	ПараметрыЗагрузки.ПараметрыЦенКомплектующих.Соглашение = Объект.Соглашение;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры
// -CRM_ERP

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	//ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	//ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

// +CRM_Модуль
&НаСервере
Функция ПроверитьЗаполнениеРеквизитовДляПомощникаПродаж()
	ЕстьОшибки = Ложь;
	Если Объект.Соглашение.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"),,"Объект.Соглашение","Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Объект.Контрагент.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан Контрагент'"),,"Объект.Контрагент","Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если НЕ Объект.Соглашение.Пустая() Тогда
		Если Объект.Соглашение.Склад.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В соглашении не указан Склад'"),,"Объект.Соглашение","Объект");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Табличная часть ""Товары"" не заполнена'"),,"Объект.Товары","Объект");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Ячейка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Сч = 0;
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.Номенклатура.Пустая() Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ячейка%", "Номенклатура");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", "Товары");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Сч + 1);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Сч + 1, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Строка.Количество = 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ячейка%", "Количество");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", "Товары");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Сч + 1);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Сч + 1, "Количество");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Строка.Цена = 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Ячейка%", "Цена");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", "Товары");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Сч + 1);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Сч + 1, "Цена");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
КонецФункции	

&НаКлиенте
Процедура ПомощникПродаж(Команда)
	Если ПроверитьЗаполнениеРеквизитовДляПомощникаПродаж() Тогда Возврат КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОткрытИзИнтереса", Истина);
	ПараметрыОткрытия.Вставить("Интерес", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПомощникПродаж.Форма.CRM_Модуль_Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуСообщений(СтруктураСообщений(), ЭтотОбъект); // +CRM_ERP2.5
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменятьКоличество = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение)) 
		Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьВидЦены", Новый Структура("ВидЦены", ВидЦеныПоУмолчанию));
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтотОбъект);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	КонецЕсли;
		
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
	//СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	//ВсегоСкладов = ТаблицаСкладов.Количество();
	//СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация",
			Объект.НалогообложениеНДС, Объект.Дата, Объект.Организация));
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтотОбъект, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтотОбъект, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтотОбъект, Параметры, "Товары");
	
КонецФункции

#КонецОбласти

#КонецОбласти
// -CRM_Модуль

&НаСервере
Функция ДопТелефоныПолучитьНаСервере(КонтактноеЛицо)
	
	СписокТелефонов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Представление КАК ВидПредставление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид,
		|	Представление
		|ИТОГИ ПО
		|	Вид";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		
		СписокТелефонов.Добавить(ВыборкаВид.Вид);
		
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокТелефонов.Добавить(ВыборкаДетальныеЗаписи.Представление, "   " + ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокТелефонов;
	
КонецФункции

&НаКлиенте
Процедура ВыборТелефонаИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") 
		Или Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("Основание", Объект.Ссылка);
	сфпСофтФонПроКлиент.сфпПозвонить(Результат.Значение, ДополнительныеПараметры,
		 Новый Структура("ДанныеЗаполнения",
		 ДанныеЗаполнения));
	
КонецПроцедуры

&НаСервере
Функция ДопАдресаЭППолучитьНаСервере(КонтактноеЛицо)
	
	СписокАдресовЭП = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид.Представление КАК ВидПредставление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид,
		|	Представление
		|ИТОГИ ПО
		|	Вид";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		
		СписокАдресовЭП.Добавить(ВыборкаВид.Вид);
		
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокАдресовЭП.Добавить(ВыборкаДетальныеЗаписи.Представление, "   " + ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокАдресовЭП;
	
КонецФункции

&НаКлиенте
Процедура ВыборАдресаЭПИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(ДополнительныеПараметры, Результат.Значение);
	ПараметрыФормы.Вставить("Кому", СписокАдресов);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКлиента(Отказ)
	
	Если Константы.CRM_ОсновнойВидТелефонаКлиента.Получить().ОбязательноеЗаполнение 
		И Элементы.Клиент_Телефон.Видимость И Не ЗначениеЗаполнено(Клиент_Телефон) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Телефон"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Телефон", , Отказ);
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ОбязательноеЗаполнение
		И Элементы.Клиент_МобТелефон.Видимость И Не ЗначениеЗаполнено(Клиент_МобТелефон) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Моб. телефон"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_МобТелефон", , Отказ);
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКлиента.Получить().ОбязательноеЗаполнение
		И Элементы.Клиент_Email.Видимость И Не ЗначениеЗаполнено(Клиент_Email) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Email"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Email", , Отказ);
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.АдресПартнера.ОбязательноеЗаполнение
		И Элементы.Клиент_Адрес.Видимость И Не ЗначениеЗаполнено(Клиент_Адрес) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Адрес"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_Адрес", , Отказ);
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес.ОбязательноеЗаполнение
		И Элементы.Клиент_ЮрАдрес.Видимость И Не ЗначениеЗаполнено(Клиент_ЮрАдрес) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Юр. адрес"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Клиент_ЮрАдрес", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонтактнойИнформацииКонтакта(Отказ)
	
	Если Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить().ОбязательноеЗаполнение
		И Элементы.Контакт_Телефон.Видимость И Не ЗначениеЗаполнено(Контакт_Телефон) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Телефон"" контактного лица не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт_Телефон", , Отказ);
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКонтакта.Получить().ОбязательноеЗаполнение
		И Элементы.Контакт_Email.Видимость И Не ЗначениеЗаполнено(Контакт_Email) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Email"" контактного лица не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт_Email", , Отказ);
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ОбязательноеЗаполнение
		И Элементы.Контакт_МобТелефон.Видимость И Не ЗначениеЗаполнено(Контакт_МобТелефон) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Моб. телефон"" контактного лица не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контакт_МобТелефон", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацяКлиентаИзменитьОтметкиНезаполненного()
	
	Если Константы.CRM_ОсновнойВидТелефонаКлиента.Получить().ОбязательноеЗаполнение
		И Элементы.Клиент_Телефон.Видимость Тогда
		
		Элементы.Клиент_Телефон.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Телефон.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Телефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Телефон.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица.ОбязательноеЗаполнение
		И Элементы.Клиент_МобТелефон.Видимость Тогда
		
		Элементы.Клиент_МобТелефон.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_МобТелефон.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_МобТелефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_МобТелефон.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Константы.CRM_ОсновнойВидEmailКлиента.Получить().ОбязательноеЗаполнение
		И Элементы.Клиент_Email.Видимость Тогда
		
		Элементы.Клиент_Email.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Email.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Email.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Email.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.АдресПартнера.ОбязательноеЗаполнение
		И Элементы.Клиент_Адрес.Видимость Тогда
		
		Элементы.Клиент_Адрес.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_Адрес.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_Адрес.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_Адрес.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес.ОбязательноеЗаполнение
		И Элементы.Клиент_ЮрАдрес.Видимость Тогда
		
		Элементы.Клиент_ЮрАдрес.АвтоОтметкаНезаполненного = Истина;
		Элементы.Клиент_ЮрАдрес.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Клиент_ЮрАдрес.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Клиент_ЮрАдрес.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацяКонтактаИзменитьОтметкиНезаполненного()
	
	ЮрЛицо = Истина;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ЮрЛицо = (Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Иначе
		ЮрЛицо = (Клиент_Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контакт_Объект.Наименование) Или ЮрЛицо Тогда
		
		Если Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить().ОбязательноеЗаполнение
			И Элементы.Контакт_Телефон.Видимость Тогда
			
			Элементы.Контакт_Телефон.АвтоОтметкаНезаполненного = Истина;
			Элементы.Контакт_Телефон.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Контакт_Телефон.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Контакт_Телефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если Константы.CRM_ОсновнойВидEmailКонтакта.Получить().ОбязательноеЗаполнение
			И Элементы.Контакт_Email.Видимость Тогда
			
			Элементы.Контакт_Email.АвтоОтметкаНезаполненного = Истина;
			Элементы.Контакт_Email.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Контакт_Email.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Контакт_Email.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица.ОбязательноеЗаполнение
			И Элементы.Контакт_МобТелефон.Видимость Тогда
			
			Элементы.Контакт_МобТелефон.АвтоОтметкаНезаполненного = Истина;
			Элементы.Контакт_МобТелефон.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Контакт_МобТелефон.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Контакт_МобТелефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.Контакт_Телефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контакт_Телефон.ОтметкаНезаполненного = Ложь;
		
		Элементы.Контакт_Email.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контакт_Email.ОтметкаНезаполненного = Ложь;
		
		Элементы.Контакт_МобТелефон.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контакт_МобТелефон.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область СвязиМеждуПК

&НаСервере
Процедура ВывестиПотенциальныхКлиентов()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитТаблицаПК = Новый РеквизитФормы("ТаблицаСвязейМеждуПК", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитТаблицаПК);
	
	ОписаниеТипаПК = Новый ОписаниеТипов("СправочникСсылка.CRM_ПотенциальныеКлиенты");
	ПолеПК = Новый РеквизитФормы("ПотенциальныйКлиент", ОписаниеТипаПК, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПК);
	
	ОписаниеТипаПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ПолеАвтор = Новый РеквизитФормы("Автор", ОписаниеТипаПользователь, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАвтор);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ПолеКомментарий = Новый РеквизитФормы("Комментарий", ОписаниеТипаСтрока0, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеКомментарий);
	
	ПолеТелефон = Новый РеквизитФормы("Телефон", ОписаниеТипаСтрока0, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеТелефон);
	
	ПолеАдресЭП = Новый РеквизитФормы("АдресЭлектроннойПочты", ОписаниеТипаСтрока0, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеАдресЭП);
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ПолеЕстьДопНомера = Новый РеквизитФормы("ЕстьДопНомера", ОписаниеТипаБулево, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеЕстьДопНомера);
	
	ПолеЕстьДопАдреса = Новый РеквизитФормы("ЕстьДопАдреса", ОписаниеТипаБулево, "ТаблицаСвязейМеждуПК");
	МассивДобавляемыхРеквизитов.Добавить(ПолеЕстьДопАдреса);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаКонтейнер = Элементы.ПотенциальныеКлиентыВнутр;
	
	ЭлементТаблицаПК = Элементы.Добавить("СвязиМеждуПК", Тип("ТаблицаФормы"), ГруппаКонтейнер);
	ЭлементТаблицаПК.ПутьКДанным = "ТаблицаСвязейМеждуПК";
	ЭлементТаблицаПК.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблицаПК.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементТаблицаПК.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементТаблицаПК.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементТаблицаПК.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблицаПК.МножественныйВыбор = Ложь;
	ЭлементТаблицаПК.ВысотаВСтрокахТаблицы = 5;
	ЭлементТаблицаПК.АвтоВводНовойСтроки = Ложь;
	ЭлементТаблицаПК.ИзменятьПорядокСтрок = Ложь;
	ЭлементТаблицаПК.УстановитьДействие("ПриИзменении", "Подключаемый_СвязиМеждуПКПриИзменении");
	ЭлементТаблицаПК.УстановитьДействие("Выбор", "Подключаемый_СвязиМеждуПКВыбор");
	ЭлементТаблицаПК.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_СвязиМеждуПКПередНачаломДобавления");
	ЭлементТаблицаПК.УстановитьДействие("ПередУдалением", "Подключаемый_СвязиМеждуПКПередУдалением");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКПотенциальныйКлиент", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.ПотенциальныйКлиент";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.Заголовок = НСтр("ru = 'Потенциальный клиент'");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПККомментарий", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.Комментарий";
	НовоеПоле.УстановитьДействие("ПриИзменении", "Подключаемый_СвязиМеждуПККомментарийПриИзменении");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКАвтор", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.Автор";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКТелефон", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.Телефон";
	НовоеПоле.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКЕстьДопНомера", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.ЕстьДопНомера";
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.Ширина = 2;
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКАдресЭлектроннойПочты", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.АдресЭлектроннойПочты";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.Заголовок = НСтр("ru = 'Email'");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПКЕстьДопАдреса", Тип("ПолеФормы"), ЭлементТаблицаПК);
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ПутьКДанным = "ТаблицаСвязейМеждуПК.ЕстьДопНомера";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.Ширина = 2;
	
	НоваяКоманда = Команды.Добавить("СвязиМеждуПК_СделатьОсновным");
	НоваяКоманда.Действие = "Подключаемый_СвязиМеждуПК_СделатьОсновным";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Заголовок = НСтр("ru = 'Сделать основным'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Сделать основным потенциальным клиентом'");
	
	НоваяКнопка = Элементы.Добавить("СвязиМеждуПК_СделатьОсновным", Тип("КнопкаФормы"), ЭлементТаблицаПК.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СвязиМеждуПК_СделатьОсновным";
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НоваяКнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	НоваяКоманда = Команды.Добавить("СвязиМеждуПК_Открыть");
	НоваяКоманда.Действие = "Подключаемый_СвязиМеждуПК_Открыть";
	НоваяКоманда.Заголовок = НСтр("ru = 'Открыть'");
	
	НоваяКнопка = Элементы.Добавить("СвязиМеждуПК_Открыть", Тип("КнопкаФормы"), ЭлементТаблицаПК.КонтекстноеМеню);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СвязиМеждуПК_Открыть";
	
	СформироватьТаблицуСвязейМеждуПК();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СвязиМеждуПК");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСвязейМеждуПК.ПотенциальныйКлиент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПотенциальныйКлиент");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыПотенциальныхКлиентов()
	
	КомандыПанели = Элементы.СвязиМеждуПК.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыПанели Цикл
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКДобавить") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
			Элемент.Заголовок = НСтр("ru = 'Связать'");
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКЗакончитьРедактирование") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКСортировка") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКПоискПоТекущемуЗначению1") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПКУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Элемент.Заголовок = НСтр("ru = 'Удалить'");
		КонецЕсли;
	КонецЦикла;
	
	КомандыМеню = Элементы.СвязиМеждуПК.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюДобавить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюУдалить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПККонтекстноеМенюСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКонтекстноеМенюПереместить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПКПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПриИзменении(Элемент)
	
	ОбновитьЗаголовокСвязанныхПК();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязиМеждуПКПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаВыбора",
		 Новый Структура("МножественныйВыбор", Истина), ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязиМеждуПКПередНачаломДобавленияЗавершение(МассивПК, ДопПараметр) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МассивПК) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПК Из МассивПК Цикл
	
		Если Объект.ПотенциальныйКлиент = ПК Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать текущий элемент!'"));
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.ТаблицаСвязейМеждуПК.НайтиСтроки(Новый Структура("ПотенциальныйКлиент", ПК)).Количество() > 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 уже есть в списке!'"),
				 ПК));
			Продолжить;
		КонецЕсли;
		
		ДобавитьСвязьМеждуПКНаСервере(Объект.ПотенциальныйКлиент, ПК);
		
		ОбновитьСвязиМеждуПКНаФорме();
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.СвязиМеждуПК.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПК = Элементы.СвязиМеждуПК.ТекущиеДанные.ПотенциальныйКлиент;
	УдалитьСвязьМеждуПКНаСервере(ПК);
	
	ОбновитьСвязиМеждуПКНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПККомментарийПриИзменении(Элемент)
	
	Если Элементы.СвязиМеждуПК.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.СвязиМеждуПК.ТекущиеДанные;
	
	ПрочиеДанные = Новый Структура("Автор, Комментарий", ТекДанные.Автор, ТекДанные.Комментарий);
	ИзменитьСвязьМеджуПКНаСервере(ТекДанные.ПотенциальныйКлиент, ПрочиеДанные);
	
	//ОбновитьСвязиМеждуПКНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СвязиМеждуПК.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.СвязиМеждуПК.ТекущиеДанные;
	
	Если Поле.Имя = "СвязиМеждуПКПотенциальныйКлиент" Тогда
		
		ПоказатьЗначение(, ТекДанные.ПотенциальныйКлиент);
		
	ИначеЕсли Поле.Имя = "СвязиМеждуПКАвтор" Тогда
		
		ПоказатьЗначение(, ТекДанные.Автор);
		
	ИначеЕсли Поле.Имя = "СвязиМеждуПКТелефон" Тогда
		
		Если Не сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
			Возврат;
		КонецЕсли;
		
		ТелефонныйНомерПК = ТекДанные.Телефон;
		
		ДанныеЗаполнения	= Новый Структура;
		ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
		ДополнительныеПараметры	= Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
		сфпСофтФонПроКлиент.сфпПозвонить(ТелефонныйНомерПК, ТекДанные.ПотенциальныйКлиент, ДополнительныеПараметры);
		
	ИначеЕсли Поле.Имя = "СвязиМеждуПКАдресЭлектроннойПочты" Тогда
		
	   	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
		СписокАдресов = Новый СписокЗначений;
		СписокАдресов.Добавить(ТекДанные.ПотенциальныйКлиент, ТекДанные.АдресЭлектроннойПочты);
		ПараметрыФормы.Вставить("Кому", СписокАдресов);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли Поле.Имя = "СвязиМеждуПКЕстьДопНомера" Тогда
		
		СписокТелефоновПК = ПолучитьКИСвязанногоПКНаСервере(ТекДанные.ПотенциальныйКлиент,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		Оповещение = Новый ОписаниеОповещения("ВыборТелефонаИзМенюЗавершение", ЭтотОбъект, ТекДанные.ПотенциальныйКлиент);
		ПоказатьВыборИзМеню(Оповещение, СписокТелефоновПК);
		
	ИначеЕсли Поле.Имя = "СвязиМеждуПКЕстьДопАдреса" Тогда
		
		СписокАдресовЭППК = ПолучитьКИСвязанногоПКНаСервере(ТекДанные.ПотенциальныйКлиент,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Оповещение = Новый ОписаниеОповещения("ВыборАдресаЭПИзМенюЗавершение", ЭтотОбъект, ТекДанные.ПотенциальныйКлиент);
		ПоказатьВыборИзМеню(Оповещение, СписокАдресовЭППК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПК_СделатьОсновным(Команда)
	
	СвязиМеждуПК_ТекДанные = Элементы.СвязиМеждуПК.ТекущиеДанные;
	
	Если СвязиМеждуПК_ТекДанные <> Неопределено Тогда
		Объект.ПотенциальныйКлиент = СвязиМеждуПК_ТекДанные.ПотенциальныйКлиент;
		ОбновитьСвязиМеждуПКНаФорме();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_СвязиМеждуПК_СделатьОсновным()

&НаСервере
Процедура ИзменитьСвязьМеджуПКНаСервере(ПК, ПрочиеДанные)
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.ОбновитьСвязь(Объект.ПотенциальныйКлиент, ПК, ПрочиеДанные);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвязьМеждуПКНаСервере(ПК_А, ПК_Б)
	
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.ДобавитьСвязь(ПК_А, ПК_Б, Новый Структура("Автор, Комментарий"));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьМеждуПКНаСервере(ПотенциальныйКлиентДляУделанияСвязи)
	
	РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.УдалитьПК(ПотенциальныйКлиентДляУделанияСвязи);
	
КонецПроцедуры // УдалитьСвязьМеждуПКНаСервере()
&НаСервере
Процедура СформироватьТаблицуСвязейМеждуПК()
	
	Если Объект.ПотенциальныйКлиент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСвязанные =
		РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СвязанныеПотенциальныеКлиенты(Объект.ПотенциальныйКлиент);
	
	НоваяСтрока = ВсеСвязанные.Вставить(0);
	НоваяСтрока.ПотенциальныйКлиент = Объект.ПотенциальныйКлиент;
	
	ЭтотОбъект.ТаблицаСвязейМеждуПК.Загрузить(ВсеСвязанные);	
	ЕстьПКСДопНомерами = Ложь;
	ЕстьПКСДопАдресами = Ложь;
	
	Для Каждого СвязанныйПКСтрока Из ЭтотОбъект.ТаблицаСвязейМеждуПК Цикл
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(СвязанныйПКСтрока.ПотенциальныйКлиент,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			СвязанныйПКСтрока.Телефон = КонтактнаяИнформация[0].Представление;
			Если КонтактнаяИнформация.Количество() > 1 Тогда
				ЕстьПКСДопНомерами = Истина;
				СвязанныйПКСтрока.ЕстьДопНомера = Истина;
			КонецЕсли;
		КонецЕсли;
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(СвязанныйПКСтрока.ПотенциальныйКлиент,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			СвязанныйПКСтрока.АдресЭлектроннойПочты = КонтактнаяИнформация[0].Представление;
			Если КонтактнаяИнформация.Количество() > 1 Тогда
				ЕстьПКСДопАдресами = Истина;
				СвязанныйПКСтрока.ЕстьДопАдреса = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "СвязиМеждуПК") Тогда
		Элементы.СвязиМеждуПКЕстьДопНомера.Видимость = ЕстьПКСДопНомерами;
		Элементы.СвязиМеждуПКЕстьДопАдреса.Видимость = ЕстьПКСДопАдресами;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязиМеждуПКНаФорме()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ЭтотОбъект, "ТаблицаСвязейМеждуПК") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуСвязейМеждуПК();
	ОбновитьЗаголовокСвязанныхПК();
	
	Элементы.СвязиМеждуПК.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКИСвязанногоПКНаСервере(ПК, ТипКИ)
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Вид.Представление КАК ВидПредставление,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ПК
		|	И КонтактнаяИнформация.Тип = &ТипКИ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид,
		|	Представление
		|ИТОГИ ПО
		|	Вид";
	
	Запрос.УстановитьПараметр("ПК", ПК);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		
		Результат.Добавить(ВыборкаВид.Вид);
		
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Результат.Добавить(ВыборкаДетальныеЗаписи.Представление, "   " + ВыборкаДетальныеЗаписи.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СвязиМеждуПК_Открыть(Команда)
	ПоказатьЗначение(, Элементы.СвязиМеждуПК.ТекущиеДанные.ПотенциальныйКлиент);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСвязанныхПК()
	
	ЗаголовокСвязанныхПК	= НСтр("ru = 'Связанные потенциальные клиенты'");
	КоличествоСвязанныхПК	= ?(
		ВыведеныПотенциальныеКлиенты,
		ЭтотОбъект.ТаблицаСвязейМеждуПК.Количество(),
		ПолучитьКоличествоСвязанныхПотенциальныхКлиентов(Объект.ПотенциальныйКлиент) + 1);
	
	Если КоличествоСвязанныхПК > 0 Тогда
		ЗаголовокСвязанныхПК = ЗаголовокСвязанныхПК + " (" + КоличествоСвязанныхПК + ")";
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Заголовок <> ЗаголовокСвязанныхПК Тогда
		Элементы.Разделы_ПереключитьПотенциальныеКлиенты.Заголовок = ЗаголовокСвязанныхПК;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗаголовокСвязанныхПК()

&НаСервереБезКонтекста
Функция ПолучитьКоличествоСвязанныхПотенциальныхКлиентов(ПотенциальныйКлиент)
	
	Связанные =
		РегистрыСведений.CRM_СвязанныеПотенциальныеКлиенты.СвязанныеПотенциальныеКлиенты(ПотенциальныйКлиент);
	
	Возврат Связанные.Количество();
	
КонецФункции // ПолучитьКоличествоСвязанныхПотенциальныхКлиентов()

#КонецОбласти

#Область Соисполнители

&НаСервере
Процедура ВывестиСоисполнителей()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитСоисполнители = Новый РеквизитФормы("Соисполнители", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСоисполнители);
	
	ОписаниеТипаПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	РеквизитСоисполнитель = Новый РеквизитФормы("Соисполнитель", ОписаниеТипаПользователь, "Соисполнители");
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСоисполнитель);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	РеквизитСтатус = Новый РеквизитФормы("Статус", ОписаниеТипаСтрока0, "Соисполнители");
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСтатус);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаКонтейнер = Элементы.ГруппаСоисполнителиВнутр;
	
	ЭлементСоисполнители = Элементы.Добавить("Соисполнители", Тип("ТаблицаФормы"), ГруппаКонтейнер);
	ЭлементСоисполнители.ПутьКДанным = "Соисполнители";
	ЭлементСоисполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСоисполнители.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементСоисполнители.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементСоисполнители.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементСоисполнители.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементСоисполнители.ВысотаВСтрокахТаблицы = 5;
	ЭлементСоисполнители.АвтоВводНовойСтроки = Ложь;
	ЭлементСоисполнители.УстановитьДействие("ПередНачаломДобавления", "СоисполнителиПередНачаломДобавления");
	ЭлементСоисполнители.УстановитьДействие("ПередУдалением", "СоисполнителиПередУдалением");
	ЭлементСоисполнители.УстановитьДействие("ПослеУдаления", "СоисполнителиПослеУдаления");
	
	НовоеПоле = Элементы.Добавить("СоисполнителиСоисполнитель", Тип("ПолеФормы"), ЭлементСоисполнители);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Соисполнители.Соисполнитель";
	НовоеПоле.УстановитьДействие("ПриИзменении", "СоисполнителиСоисполнительПриИзменении");
	НовоеПоле.УстановитьДействие("ОбработкаВыбора", "СоисполнителиСоисполнительОбработкаВыбора");
	
	НовоеПоле = Элементы.Добавить("СоисполнителиСтатус", Тип("ПолеФормы"), ЭлементСоисполнители);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Соисполнители.Статус";
	НовоеПоле.РедактированиеТекста = Ложь;
	НовоеПоле.РежимВыбораИзСписка = Истина;
	НовоеПоле.СписокВыбора.Добавить("Соисполнитель");
	НовоеПоле.СписокВыбора.Добавить("Ответственный");
	НовоеПоле.УстановитьДействие("ПриИзменении", "СоисполнителиСтатусПриИзменении");
	
	НоваяКоманда = Команды.Добавить("Соисполнители_СделатьОсновным");
	НоваяКоманда.Действие = "Подключаемый_СоисполнителиСделатьОсновным";
	НоваяКоманда.Заголовок = НСтр("ru = 'Сделать основным'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Сделать основным'");
	
	НоваяКнопка = Элементы.Добавить("Соисполнители_СделатьОсновным", Тип("КнопкаФормы"), ЭлементСоисполнители.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "Соисполнители_СделатьОсновным";
	НоваяКнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Соисполнители");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Соисполнители.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ЗначениеОтветственный();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина)); // Жирный
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыСоисполнителей()
	
	КомандыПанели = Элементы.Соисполнители.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыПанели Цикл
		Если СтрНайти(Элемент.Имя, "СоисполнителиДобавить") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СоисполнителиЗакончитьРедактирование") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиПереместить") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиСортировка") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиПоискПоТекущемуЗначению1") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СоисполнителиУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			//Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
	КонецЦикла;
	
	КомандыМеню = Элементы.Соисполнители.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "СоисполнителиКонтекстноеМенюСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиКонтекстноеМенюПереместить") > 0
			Или СтрНайти(Элемент.Имя, "СоисполнителиПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСоисполнители()
	
	ЗаголовокСоисполнители = НСтр("ru='Соисполнители'; en=''");
	КоличествоСоисполнителей = Объект.Соисполнители.Количество();
	
	Если КоличествоСоисполнителей > 0 Тогда
		ЗаголовокСоисполнители = ЗаголовокСоисполнители + " (" + КоличествоСоисполнителей + ")";
	КонецЕсли;
	
	Если Элементы.Разделы_ПереключитьСоисполнителей.Заголовок <> ЗаголовокСоисполнители Тогда
		Элементы.Разделы_ПереключитьСоисполнителей.Заголовок = ЗаголовокСоисполнители;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиОбновитьПослеИзменения()
	ОбновитьТЧСоисполнителиНаСервере();
	ОбновитьЭлементСоисполнители();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементСоисполнители()
	
	Элементы.Соисполнители.Обновить();
	ОбновитьЗаголовокСоисполнители();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЧСоисполнителиНаСервере(ВсеСоисполнители = Ложь)
	
	Объект.Соисполнители.Очистить();
	
	Для Каждого СтрСоисполнители Из ЭтотОбъект.Соисполнители Цикл
		
		Если НЕ ВсеСоисполнители И СтрСоисполнители.Статус = ЗначениеОтветственный() Тогда
			Продолжить; // Ответственный не сохраняется в ТЧ
		КонецЕсли;
			
		НС = Объект.Соисполнители.Добавить();
		НС.Соисполнитель = СтрСоисполнители.Соисполнитель; 
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуСоисполнители()
	
	ЭтотОбъект.Соисполнители.Очистить();
	
	ТЧСоисполнителиТЗ = Объект.Соисполнители.Выгрузить(, "Соисполнитель");
	
	// Добавление ответственного (Ответственный не должен сохраняться в ТЧ Соисполнители)
	ЕстьОтветственный = (ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи")
		 И ЗначениеЗаполнено(Объект.Ответственный));
	Если ЕстьОтветственный Тогда
		Если ТЧСоисполнителиТЗ.НайтиСтроки(Новый Структура("Соисполнитель", Объект.Ответственный)).Количество() = 0 Тогда
			НС = ЭтотОбъект.Соисполнители.Добавить();
			НС.Соисполнитель = Объект.Ответственный;
			НС.Статус = ЗначениеОтветственный();
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого СтрТЧСоисполнителиТЗ Из ТЧСоисполнителиТЗ Цикл
		НС = ЭтотОбъект.Соисполнители.Добавить();
		НС.Соисполнитель = СтрТЧСоисполнителиТЗ.Соисполнитель;
		Если ЕстьОтветственный И НС.Соисполнитель = Объект.Ответственный Тогда
			НС.Статус = ЗначениеОтветственный();
		Иначе
			НС.Статус = ЗначениеСоисполнитель();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиДобавитьОтветственногоДокумента()
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ЭтотОбъект, "Соисполнители") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТЧСоисполнителиНаСервере(Истина);
	СформироватьТаблицуСоисполнители();
	ОбновитьЭлементСоисполнители();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеСоисполнитель()
	Возврат "Соисполнитель";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеОтветственный()
	Возврат "Ответственный";
КонецФункции

&НаКлиенте
Процедура Подключаемый_СоисполнителиСделатьОсновным(Команда)
	
	Если Элементы.Соисполнители.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элементы.Соисполнители.ТекущиеДанные.Соисполнитель) Тогда
		Элементы.Соисполнители.ТекущиеДанные.Статус = ЗначениеОтветственный();
		СоисполнителиУстановитьНовогоОтветственного();
		СоисполнителиОбновитьПослеИзменения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиСоисполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отказ = Ложь;
	СоисполнителиПроверитьВозможностьДобавления(ВыбранноеЗначение, Отказ);
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиСоисполнительПриИзменении(Элемент)
	
	Если Элементы.Соисполнители.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка нового ответственного
	Если Элементы.Соисполнители.ТекущиеДанные.Статус = ЗначениеОтветственный() Тогда
		Если ЗначениеЗаполнено(Элементы.Соисполнители.ТекущиеДанные.Соисполнитель) Тогда
			СоисполнителиУстановитьНовогоОтветственного();
		КонецЕсли;
	КонецЕсли;
	
	СоисполнителиОбновитьПослеИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиСтатусПриИзменении(Элемент)
	
	Если Элементы.Соисполнители.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка нового ответственного
	Если Элементы.Соисполнители.ТекущиеДанные.Статус = ЗначениеОтветственный() Тогда
		Если ЗначениеЗаполнено(Элементы.Соисполнители.ТекущиеДанные.Соисполнитель) Тогда
			СоисполнителиУстановитьНовогоОтветственного();
		КонецЕсли;
	КонецЕсли;
	
	СоисполнителиОбновитьПослеИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиУстановитьНовогоОтветственного()
	
	МассивОтветственных = ЭтотОбъект.Соисполнители.НайтиСтроки(Новый Структура("Статус", ЗначениеОтветственный()));
	Для Каждого СтрОтветственный Из МассивОтветственных Цикл
		Если СтрОтветственный.Соисполнитель = Элементы.Соисполнители.ТекущиеДанные.Соисполнитель Тогда
			Продолжить;
		КонецЕсли;
		СтрОтветственный.Статус = ЗначениеСоисполнитель();
	КонецЦикла;
	
	Объект.Ответственный = Элементы.Соисполнители.ТекущиеДанные.Соисполнитель;
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	СоисполнителиНачатьДобавление();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиНачатьДобавление()
	
	РанееВыбранныеПользователи = СоисполнителиРанееВыбранныеПользователи();
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("СкрываемыеПользователи", РанееВыбранныеПользователи);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСоисполнителяПользовательВыбран", ЭтотОбъект, Новый Структура);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция СоисполнителиРанееВыбранныеПользователи()
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(ЭтотОбъект.Соисполнители.Выгрузить().ВыгрузитьКолонку("Соисполнитель"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ДобавитьСоисполнителяПользовательВыбран(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныеПользователи = Результат;
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныеПользователи) = Тип("СправочникСсылка.Пользователи") Тогда
		ВыбранныйПользователь = ВыбранныеПользователи;
		ВыбранныеПользователи = Новый Массив;
		ВыбранныеПользователи.Добавить(ВыбранныйПользователь);
	КонецЕсли;
	
	Для Каждого НовыйСоисполнитель Из ВыбранныеПользователи Цикл
		
		Отказ = Ложь;
		СоисполнителиПроверитьВозможностьДобавления(НовыйСоисполнитель, Отказ);
		
		Если Не Отказ Тогда
			НС = ЭтотОбъект.Соисполнители.Добавить();
			НС.Соисполнитель = НовыйСоисполнитель;
			НС.Статус = ЗначениеСоисполнитель();
		КонецЕсли;
		
	КонецЦикла;
	
	СоисполнителиОбновитьПослеИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиПроверитьВозможностьДобавления(Пользователь, Отказ, ВыводитьСообщение = Истина)
	
	ДанныеОтбора = Новый Структура("Соисполнитель", Пользователь);
	
	Если ЭтотОбъект.Соисполнители.НайтиСтроки(ДанныеОтбора).Количество() > 0 Тогда
		Отказ = Истина;
		Если ВыводитьСообщение Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пользователь %1 уже присутствует в таблице'"),
				Пользователь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоисполнителиДобавитьПользователей(Пользователи)
	
	Если Пользователи = Неопределено
		Или Пользователи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НовыйСоисполнитель Из Пользователи Цикл
		
		ДанныеОтбора = Новый Структура("Соисполнитель", НовыйСоисполнитель);
		
		Если Объект.Соисполнители.НайтиСтроки(ДанныеОтбора).Количество() = 0 Тогда
			НС = Объект.Соисполнители.Добавить();
			НС.Соисполнитель = НовыйСоисполнитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиПередУдалением(Элемент, Отказ)
	
	СоисполнителиПроверитьВозможностьУдаления(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиПослеУдаления(Элемент)
	
	СоисполнителиОбновитьПослеИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнителиПроверитьВозможностьУдаления(Отказ)
	
	Если Элементы.Соисполнители.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.Соисполнители.ТекущиеДанные.Статус = ЗначениеОтветственный() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно удалить пользователя в статусе ""Ответственный""'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтересДоступенДляСоисполнения()
	
	Для каждого СтрСоисполнителя Из Объект.Соисполнители Цикл
		Если ТекущиеПользователи.НайтиПоЗначению(СтрСоисполнителя.Соисполнитель) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов   = РаспознаваниеРечи_МассивИменЭлементов();
	МассивПолей           = РаспознаваниеРечи_МассивПолей();
	ИмяОперацииСтатистики = "CRM_Статистика.ГолосовойВвод.ИнтересГолосовойВводНажатие";
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.Тема);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "Объект.Тема");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	Контекст.Вставить("ИмяОперацииСтатистики",            ИмяОперацииСтатистики);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	РаспознанныйТекст = CRM_ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания);
	Если ТекЭлемент.Имя = "БыстрыйВвод_ПримечаниеТема" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	ИначеЕсли ТекЭлемент.Имя = "БыстрыйВвод_ФайлОписание" Тогда
		РаспознанныйТекст = ТекЭлемент.ТекстРедактирования + РаспознанныйТекст;
		БыстрыйВвод_ФайлОписаниеИзменениеТекстаРедактирования(ТекЭлемент, РаспознанныйТекст, Истина);
	Иначе
		// Обработка не требуется. Распознанный текст уже заполнен.
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивИменЭлементов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПримечаниеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ВзаимодействиеТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Содержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЗадачаТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоТема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ФайлОписание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ПисьмоСодержание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "БыстрыйВвод_ЧатСодержание");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

&НаСервере
Процедура ВывестиБизнесПроцессы()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитДеревоВсеПроцессы = Новый РеквизитФормы("ДеревоВсеПроцессы", Новый ОписаниеТипов("ДеревоЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитДеревоВсеПроцессы);
	
	ТипыПоляСсылка = Новый Массив;
	ТипыПоляСсылка.Добавить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	ТипыПоляСсылка.Добавить(Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс"));
	РеквизитСсылка = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов(ТипыПоляСсылка), "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСсылка);
	
	ОписаниеТипаСтрока0 = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ПолеНаименование = Новый РеквизитФормы("Наименование", ОписаниеТипаСтрока0, "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеНаименование);
	
	ПолеЭтап = Новый РеквизитФормы("Этап", ОписаниеТипаСтрока0, "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеЭтап);
	
	ТипыПоляИсполнитель = Новый Массив;
	ТипыПоляИсполнитель.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	ТипыПоляИсполнитель.Добавить(Тип("СправочникСсылка.Пользователи"));
	ПолеНаименование = Новый РеквизитФормы("Исполнитель", Новый ОписаниеТипов(ТипыПоляИсполнитель), "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеНаименование);
	
	ПолеДатаИсполнения = Новый РеквизитФормы("ДатаИсполнения", ОписаниеТипаСтрока0, "ДеревоВсеПроцессы");
	ПолеДатаИсполнения.Заголовок = НСтр("ru = 'Дата исполнения'");
	МассивДобавляемыхРеквизитов.Добавить(ПолеДатаИсполнения);
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ПолеПринятаКИсполнению = Новый РеквизитФормы("ПринятаКИсполнению", ОписаниеТипаБулево, "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПринятаКИсполнению);
	
	ПолеПросрочена = Новый РеквизитФормы("Просрочена", ОписаниеТипаБулево, "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеПросрочена);
	
	ПолеСрокИсполнения = Новый РеквизитФормы("СрокИсполнения", ОписаниеТипаСтрока0, "ДеревоВсеПроцессы");
	ПолеСрокИсполнения.Заголовок = НСтр("ru = 'Срок исполнения'");
	МассивДобавляемыхРеквизитов.Добавить(ПолеСрокИсполнения);
	
	ПолеВыполнена = Новый РеквизитФормы("Выполнена", ОписаниеТипаБулево, "ДеревоВсеПроцессы");
	МассивДобавляемыхРеквизитов.Добавить(ПолеВыполнена);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаБизнесПроцессы = Элементы.ГруппаБизнесПроцессы;
	
	ЭлементДеревоВсеПроцессы = Элементы.Добавить("ДеревоВсеПроцессы", Тип("ТаблицаФормы"), ГруппаБизнесПроцессы);
	ЭлементДеревоВсеПроцессы.ПутьКДанным = "ДеревоВсеПроцессы";
	ЭлементДеревоВсеПроцессы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементДеревоВсеПроцессы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементДеревоВсеПроцессы.МножественныйВыбор = Ложь;
	ЭлементДеревоВсеПроцессы.ИзменятьСоставСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.ИзменятьПорядокСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.Отображение = ОтображениеТаблицы.Дерево;
	ЭлементДеревоВсеПроцессы.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	ЭлементДеревоВсеПроцессы.АвтоВводНовойСтроки = Ложь;
	ЭлементДеревоВсеПроцессы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	ЭлементДеревоВсеПроцессы.ЧередованиеЦветовСтрок = Ложь;
	ЭлементДеревоВсеПроцессы.УстановитьДействие("Выбор", "ДеревоВсеПроцессыВыбор");
	ЭлементДеревоВсеПроцессы.УстановитьДействие("ПередНачаломДобавления", "ДеревоВсеПроцессыПередНачаломДобавления");
	ЭлементДеревоВсеПроцессы.УстановитьДействие("ПередНачаломИзменения", "ДеревоВсеПроцессыПередНачаломИзменения");
	
	НоваяГруппаКолонок = Элементы.Добавить("ДеревоВсеПроцессыГруппаКолонок", Тип("ГруппаФормы"), ЭлементДеревоВсеПроцессы);
	НоваяГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
	НоваяГруппаКолонок.ОтображатьЗаголовок = Ложь;
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыНаименование", Тип("ПолеФормы"), НоваяГруппаКолонок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Наименование";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыЭтап", Тип("ПолеФормы"), НоваяГруппаКолонок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Этап";
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыИсполнитель", Тип("ПолеФормы"), ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Исполнитель";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыСрокИсполнения", Тип("ПолеФормы"), ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.СрокИсполнения";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыДатаИсполнения", Тип("ПолеФормы"), ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.ДатаИсполнения";
	
	НовоеПоле = Элементы.Добавить("ДеревоВсеПроцессыСсылка", Тип("ПолеФормы"), ЭлементДеревоВсеПроцессы);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "ДеревоВсеПроцессы.Ссылка";
	НовоеПоле.Видимость = Ложь;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Просрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(200, 0, 0));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(120, 120, 120));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.ПринятаКИсполнению");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВсеПроцессы.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	ЗаполнитьДеревоПроцессов();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДаты(ДатаЗадачи, ЭтоДатаИсполнения = Ложь)
	
	СекундВСутках = 86400;
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	ДатаВчера = ДатаСегодня - СекундВСутках;
	ДатаЗавтра = ДатаСегодня + СекундВСутках;
	ТекущийГод = Год(ДатаСегодня);
	
	ДатаБезВремениПредыдущая = Дата("00010101");
	ПредставлениеДня = "";
	
	ТипОбъектаПредыдущий = "";
	БлокОбъектПредыдущий = Неопределено;
	
	ВыведенЗаголовокЗапланировано = Ложь;
	ВыведенЗаголовокЗакрепленныеОбъекты = Ложь;
	
	НадписьПоказать = Неопределено;
	НадписьСкрыть = Неопределено;
	
	// Вывод сделан так исходя из необходимости вывести ленту за один обход выборки без итогов и группировок.
	ДатаБезВремени = НачалоДня(ДатаЗадачи);
	
	Если ДатаБезВремени <> ДатаБезВремениПредыдущая Тогда
		
		Если ДатаБезВремени = ДатаСегодня Тогда
			ПредставлениеДня = НСтр("ru='Сегодня';en='Today'");
		ИначеЕсли ДатаБезВремени = ДатаВчера Тогда
			ПредставлениеДня = НСтр("ru='Вчера';en='Yesterday'");
		ИначеЕсли ДатаБезВремени = ДатаЗавтра Тогда
			ПредставлениеДня = НСтр("ru='Завтра';en='Tomorrow'");
		Иначе
			Если Год(ДатаБезВремени) = ТекущийГод Тогда
				ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM'"));
			Иначе
				ПредставлениеДня = ТРег(Формат(ДатаБезВремени, "ДФ='d MMMM yyyy'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеВремени = Формат(ДатаЗадачи, "ДФ=HH:mm");
	Если ЗначениеЗаполнено(ПредставлениеДня) Тогда
		ПредставлениеДня = ПредставлениеДня
			+ ?(ЭтоДатаИсполнения, НСтр("ru=' в ';en=' on '"), НСтр("ru=' до ';en=' to '"))
			+ ПредставлениеВремени;
	КонецЕсли;
	
	Возврат ПредставлениеДня;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКомандыБизнесПроцессов()
	
	КомандыМеню = Элементы.ДеревоВсеПроцессы.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "ДеревоВсеПроцессыКонтекстноеМенюИзменить") > 0
			Или СтрНайти(Элемент.Имя, "ДеревоВсеПроцессыПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКонтактныеДанные()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ЕстьДопНомера = Новый РеквизитФормы("ЕстьДопНомера",
		ОписаниеТипаБулево, "Объект.Контакты", "Контакты.ЕстьДопНомера");
	МассивДобавляемыхРеквизитов.Добавить(ЕстьДопНомера);
	
	ЕстьДопАдреса = Новый РеквизитФормы("ЕстьДопАдреса",
		ОписаниеТипаБулево, "Объект.Контакты", "Контакты.ЕстьДопАдреса");
	МассивДобавляемыхРеквизитов.Добавить(ЕстьДопАдреса);
	
	КонтактПометкаУдаления = Новый РеквизитФормы("КонтактПометкаУдаления",
		ОписаниеТипаБулево, "Объект.Контакты", "Контакты.КонтактПометкаУдаления");
	МассивДобавляемыхРеквизитов.Добавить(КонтактПометкаУдаления);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ГруппаКонтактыВнутр = Элементы.ГруппаКонтактыВнутр;
	
	ЭлементКонтакты = Элементы.Добавить("Контакты", Тип("ТаблицаФормы"), ГруппаКонтактыВнутр);
	ЭлементКонтакты.ПутьКДанным = "Объект.Контакты";
	ЭлементКонтакты.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКонтакты.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Верх;
	ЭлементКонтакты.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементКонтакты.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементКонтакты.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементКонтакты.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементКонтакты.ВысотаВСтрокахТаблицы = 5;
	ЭлементКонтакты.АвтоВводНовойСтроки = Ложь;
	ЭлементКонтакты.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	ЭлементКонтакты.УстановитьДействие("ПриИзменении", "КонтактыПриИзменении");
	ЭлементКонтакты.УстановитьДействие("Выбор", "КонтактыВыбор");
	ЭлементКонтакты.УстановитьДействие("ПриАктивизацииСтроки", "КонтактыПриАктивизацииСтроки");
	ЭлементКонтакты.УстановитьДействие("ПередНачаломДобавления", "КонтактыПередНачаломДобавления");
	ЭлементКонтакты.УстановитьДействие("ПередУдалением", "КонтактыПередУдалением");
	ЭлементКонтакты.УстановитьДействие("ОбработкаВыбора", "КонтактыОбработкаВыбора");
	
	НовоеПоле = Элементы.Добавить("КонтактыКонтакт", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.Контакт";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("КонтактыКонтактCRM_Должность", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.Контакт.CRM_Должность";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НовоеПоле = Элементы.Добавить("КонтактыРоль", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.Роль";
	НовоеПоле.УстановитьДействие("ПриИзменении", "КонтактыРольПриИзменении");
	
	НовоеПоле = Элементы.Добавить("КонтактыТелефон", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.Телефон";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	
	НовоеПоле = Элементы.Добавить("КонтактыПоказатьДопНомера", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.ЕстьДопНомера";
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
	НовоеПоле.Ширина = 2;
	
	НовоеПоле = Элементы.Добавить("КонтактыАдресЭлектроннойПочты", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.АдресЭлектроннойПочты";
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	
	НовоеПоле = Элементы.Добавить("КонтактыПоказатьДопАдреса", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ГиперссылкаЯчейки = Истина;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.ЕстьДопАдреса";
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.CRM_ЭлектронноеПисьмоСоздать;
	НовоеПоле.Ширина = 2;
	
	НовоеПоле = Элементы.Добавить("КонтактыКонтактВладелец", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.Контакт.Владелец";
	
	НовоеПоле = Элементы.Добавить("КонтактыКонтактПометкаУдаления", Тип("ПолеФормы"), ЭлементКонтакты);
	НовоеПоле.Вид = ВидПоляФормы.ПолеФлажка;
	НовоеПоле.ПутьКДанным = "Объект.Контакты.КонтактПометкаУдаления";
	НовоеПоле.ТолькоПросмотр = Истина;
	
	НоваяКоманда = Команды.Добавить("Контакты_СделатьОсновным");
	НоваяКоманда.Действие = "Подключаемый_Контакты_СделатьОсновным";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	НоваяКоманда.Заголовок = НСтр("ru = 'Сделать основным'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Сделать основным контактом'");
	
	НоваяКнопка = Элементы.Добавить("Контакты_СделатьОсновным", Тип("КнопкаФормы"), ЭлементКонтакты.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "Контакты_СделатьОсновным";
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НоваяКнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Контакты");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контакты.Контакт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КонтактноеЛицо");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контакты.КонтактПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина)); // Полужирный
	
	// Оформление помеченных на удаление
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Ложь, Ложь, Ложь, Истина)); // Зачеркнутый
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КонтактыКонтакт");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контакты.КонтактПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЗаполнитьКонтактнуюИнформациюКонтактов();
	НастроитьОтображениеКонтактныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКонтактныхДанных()
	
	ОтобразитьКолонкуДопНомера = Ложь;
	ОтобразитьКолонкуДопАдреса = Ложь;
	
	Если Объект.Контакты.Количество() > 0 Тогда
		
		КонтактныеЛицаИнтереса = Новый Массив;
		Для Каждого Строка Из Объект.Контакты Цикл
			КонтактныеЛицаИнтереса.Добавить(Строка.Контакт);
		КонецЦикла;
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Контакт
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&КонтактныеЛицаИнтереса)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактнаяИнформация.НомерТелефона) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Контакт
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&КонтактныеЛицаИнтереса)
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактнаяИнформация.АдресЭП) > 1");
		
		Запрос.УстановитьПараметр("КонтактныеЛицаИнтереса", КонтактныеЛицаИнтереса);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаДопНомера = РезультатЗапроса[0].Выгрузить();
		ТаблицаДопАдреса = РезультатЗапроса[1].Выгрузить();
		
		ОтобразитьКолонкуДопНомера = (ТаблицаДопНомера.Количество() > 0);
		ОтобразитьКолонкуДопАдреса = (ТаблицаДопАдреса.Количество() > 0);
		
		Для Каждого Строка Из Объект.Контакты Цикл
			Строка.ЕстьДопНомера = (ТаблицаДопНомера.Найти(Строка.Контакт) <> Неопределено);
			Строка.ЕстьДопАдреса = (ТаблицаДопАдреса.Найти(Строка.Контакт) <> Неопределено);
			Строка.КонтактПометкаУдаления = Строка.Контакт.ПометкаУдаления;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КонтактыКонтактПометкаУдаления", "Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КонтактыПоказатьДопНомера", "Видимость", ОтобразитьКолонкуДопНомера);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КонтактыПоказатьДопАдреса", "Видимость", ОтобразитьКолонкуДопАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыКонтактов()
	
	КомандыПанели = Элементы.Контакты.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыПанели Цикл
		Если СтрНайти(Элемент.Имя, "КонтактыДобавить") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "КонтактыЗакончитьРедактирование") > 0
			Или СтрНайти(Элемент.Имя, "КонтактыСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "КонтактыСортировка") > 0
			Или СтрНайти(Элемент.Имя, "КонтактыПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "КонтактыУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
	КонецЦикла;
	
	КомандыМеню = Элементы.Контакты.КонтекстноеМеню.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "КонтактыКонтекстноеМенюСкопировать") > 0
			Или СтрНайти(Элемент.Имя, "КонтактыПоискПоТекущемуЗначению") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСвязанныхПартнеров()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	РеквизитСписок = Новый РеквизитФормы("СвязиМеждуПартнерами", Новый ОписаниеТипов("ДинамическийСписок"));
	МассивДобавляемыхРеквизитов.Добавить(РеквизитСписок);
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Этотобъект.СвязиМеждуПартнерами.ОсновнаяТаблица = "РегистрСведений.СвязиМеждуПартнерами";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Этотобъект.СвязиМеждуПартнерами, "CRM_Интерес", Объект.Ссылка);
	
	ГруппаКонтейнер = Элементы.ГруппаСвязанныеПартнеры;
	ЭлементСписок = Элементы.Добавить("СвязиМеждуПартнерами", Тип("ТаблицаФормы"), ГруппаКонтейнер);
	ЭлементСписок.ПутьКДанным = "СвязиМеждуПартнерами";
	ЭлементСписок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСписок.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ЭлементСписок.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ЭлементСписок.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ЭлементСписок.ПутьКДаннымКартинкиСтроки = "";
	ЭлементСписок.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементСписок.ВысотаВСтрокахТаблицы = 3;
	ЭлементСписок.УстановитьДействие("Выбор", "СвязиМеждуПартнерамиВыбор");
	ЭлементСписок.УстановитьДействие("ПослеУдаления", "СвязиМеждуПартнерамиПослеУдаления");
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПартнерамиПервыйПартнер", Тип("ПолеФормы"), ЭлементСписок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "СвязиМеждуПартнерами.ПервыйПартнер";
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПартнерамиВидСвязи", Тип("ПолеФормы"), ЭлементСписок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "СвязиМеждуПартнерами.ВидСвязи";
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПартнерамиВторойПартнер", Тип("ПолеФормы"), ЭлементСписок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "СвязиМеждуПартнерами.ВторойПартнер";
	
	НовоеПоле = Элементы.Добавить("СвязиМеждуПартнерамиКомментарий", Тип("ПолеФормы"), ЭлементСписок);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "СвязиМеждуПартнерами.Комментарий";
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыСвязанныхПартнеров()
	
	КомандыМеню = Элементы.СвязиМеждуПартнерами.КоманднаяПанель.ПодчиненныеЭлементы;
	Для Каждого Элемент Из КомандыМеню Цикл
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиСоздать") > 0 Тогда
			Элемент.ЦветФона = ЦветГолубой;
			Элемент.ЦветРамки = ЦветГолубой;
			Элемент.ЦветТекста = Новый Цвет(255, 255, 255);
			Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиВывестиСписок") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиИзменить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиНайти") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиНастройки") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиОбновить") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиОтменитьПоиск") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиПоискПоТекущемуЗначению") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиПолучитьНавигационнуюСсылку") > 0
			Или СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиСкопировать") > 0 Тогда
			Элемент.Доступность = Ложь;
			Элемент.Видимость = Ложь;
		КонецЕсли;
		Если СтрНайти(Элемент.Имя, "СвязиМеждуПартнерамиУдалить") > 0 Тогда
			Элемент.ЦветТекста = ЦветКрасный;
			Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
			Элемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТоварыИУслуги()
	
	// +CRM_Модуль
	ЭлементТовары = Элементы.Добавить("Товары", Тип("ТаблицаФормы"), Элементы.ГруппаТоварыИУслугиВнутр);
	ЭлементТовары.ПутьКДанным = "Объект.Товары";
	ЭлементТовары.РастягиватьПоВертикали = Истина;
	ЭлементТовары.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	ЭлементТовары.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
	ЭлементТовары.УстановитьДействие("Выбор", "ТоварыВыбор");
	ЭлементТовары.УстановитьДействие("ПередНачаломДобавления", "ТоварыПередНачаломДобавления");
	ЭлементТовары.УстановитьДействие("ПередУдалением", "ТоварыПередУдалением");
	ЭлементТовары.УстановитьДействие("ПриНачалеРедактирования", "ТоварыПриНачалеРедактирования");
	ЭлементТовары.УстановитьДействие("ПриОкончанииРедактирования", "ТоварыПриОкончанииРедактирования");
	ЭлементТовары.УстановитьДействие("ПослеУдаления", "ТоварыПослеУдаления");
	
	Элементы.Переместить(ЭлементТовары, Элементы.ГруппаТоварыИУслугиВнутр, Элементы.ГруппаВсего);
	
	// Номер строки
	НовоеПоле = Элементы.Добавить("ТоварыНомерСтроки", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.ПутьКДанным = "Объект.Товары.НомерСтроки";
	НовоеПоле.Ширина = 2;
	
	ТоварыГруппаСодержание = Элементы.Добавить("ТоварыГруппаНоменклатураСодержание", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаСодержание.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаСодержание.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ТоварыГруппаНоменклатураХарактеристика = Элементы.Добавить(
		"ТоварыГруппаНоменклатураХарактеристика", Тип("ГруппаФормы"), ТоварыГруппаСодержание);
	ТоварыГруппаНоменклатураХарактеристика.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНоменклатураХарактеристика.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	// Номенклатура
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатура", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Номенклатура";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыНоменклатураПриИзменении");
	НовоеПоле.Ширина = 16;
	
	// Характеристика
	НовоеПоле = Элементы.Добавить("ТоварыХарактеристика", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Характеристика";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыХарактеристикаПриИзменении");
	НовоеПоле.Ширина = 16;
	
	// Тип номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураТипНоменклатуры", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.Номенклатура.ТипНоменклатуры";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 7;
	НовоеПоле.Заголовок = НСтр("ru = 'Тип'");
	
	// Код номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураКод", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Номенклатура.Код";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 16;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Видимость = Ложь;
	
	// Артикул номенклатуры
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураАртикул", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Артикул";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина = 16;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Видимость = Ложь;
	
	// Содержание
	НовоеПоле = Элементы.Добавить("ТоварыСодержание", Тип("ПолеФормы"), ТоварыГруппаСодержание);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Содержание";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("НачалоВыбора", "ТоварыСодержаниеНачалоВыбора");
	
	// Индекс набора
	НовоеПоле = Элементы.Добавить("ТоварыИндексНабора", Тип("ПолеФормы"), ТоварыГруппаНоменклатураХарактеристика);
	НовоеПоле.ПутьКДанным = "Объект.Товары.ИндексНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Наборы;
	НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Набор;
	
	// Наборы
	ТоварыГруппаНаборы = Элементы.Добавить("ТоварыГруппаНаборы", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаНаборы.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНаборы.Группировка = ГруппировкаКолонок.ВЯчейке;
	ТоварыГруппаНаборы.ОтображатьВШапке = Истина;
	ТоварыГруппаНаборы.ОтображатьЗаголовок = Истина;
	ТоварыГруппаНаборы.Заголовок = НСтр("ru = 'Наборы'");
	ТоварыГруппаНаборы.Видимость = Ложь;
	
	// Номенклатура набора
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураНабора", Тип("ПолеФормы"), ТоварыГруппаНаборы);
	НовоеПоле.ПутьКДанным = "Объект.Товары.НоменклатураНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ОтображатьВШапке = Ложь;
	
	// Характеристика набора
	НовоеПоле = Элементы.Добавить("ТоварыХарактеристикаНабора", Тип("ПолеФормы"), ТоварыГруппаНаборы);
	НовоеПоле.ПутьКДанным = "Объект.Товары.ХарактеристикаНабора";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр = Истина;
	НовоеПоле.ОтображатьВШапке = Ложь;
	
	// Количество и единицы измерения
	ТоварыГруппаКоличествоЕдиницаИзмерения = Элементы.Добавить(
		"ТоварыГруппаКоличествоЕдиницаИзмерения", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаКоличествоЕдиницаИзмерения.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаКоличествоЕдиницаИзмерения.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаКоличествоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	
	//Количество упаковок
	НовоеПоле = Элементы.Добавить("ТоварыКоличествоУпаковок", Тип("ПолеФормы"), ТоварыГруппаКоличествоЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным = "Объект.Товары.КоличествоУпаковок";
	НовоеПоле.ПутьКДаннымПодвала = "Объект.Товары.ИтогКоличествоУпаковок";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 8;
	НовоеПоле.Заголовок = НСтр("ru = 'Количество'");
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыКоличествоУпаковокПриИзменении");
	
	// Упаковка и единица измерения
	ТоварыУпаковкаЕдиницаИзмерения = Элементы.Добавить(
		"ТоварыУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), ТоварыГруппаКоличествоЕдиницаИзмерения);
	ТоварыУпаковкаЕдиницаИзмерения.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыУпаковкаЕдиницаИзмерения.Группировка = ГруппировкаКолонок.ВЯчейке;
	ТоварыУпаковкаЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	
	// Упаковка
	НовоеПоле = Элементы.Добавить("ТоварыУпаковка", Тип("ПолеФормы"), ТоварыУпаковкаЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Упаковка";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 10;
	НовоеПоле.ОтображатьВШапке = Ложь;
	НовоеПоле.Заголовок = НСтр("ru = 'Упаковка'");
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыУпаковкаПриИзменении");
	
	// Единица измерения
	НовоеПоле = Элементы.Добавить("ТоварыНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"),
		ТоварыУпаковкаЕдиницаИзмерения);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.Номенклатура.ЕдиницаИзмерения";
	НовоеПоле.Вид = ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Заголовок = НСтр("ru = 'Ед. изм.'");
	НовоеПоле.Ширина = 8;
	
	// Вид цены
	НовоеПоле = Элементы.Добавить("ТоварыВидЦены", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Объект.Товары.ВидЦены";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 16;
	НовоеПоле.КнопкаВыпадающегоСписка = Истина;
	НовоеПоле.КнопкаВыбора = Истина;
	НовоеПоле.КнопкаОчистки = Истина;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыВидЦеныПриИзменении");
	
	СвязиПараметровВыбораПоля = Новый Массив;
	
	СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор.ЦенаВключаетНДС", "Объект.ЦенаВключаетНДС");
	СвязиПараметровВыбораПоля.Добавить(СвязьПараметраВыбора);
	
	НовоеПоле.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораПоля);
	
	ПараметрыВыбораПоля = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует);
	ПараметрыВыбораПоля.Добавить(ПараметрВыбора);
	
	НовоеПоле.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПоля);
	
	// Цена
	НовоеПоле = Элементы.Добавить("ТоварыЦена", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным = "Объект.Товары.Цена";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыЦенаПриИзменении");
	НовоеПоле.Ширина = 9;
	
	// Процент скидок
	ТоварыГруппаПроцентСкидок = Элементы.Добавить(
		"ТоварыГруппаПроцентСкидок", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаПроцентСкидок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаПроцентСкидок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаПроцентСкидок.РастягиватьПоГоризонтали = Ложь;
	
	// Процент ручной скидки
	НовоеПоле = Элементы.Добавить("ТоварыПроцентРучнойСкидки", Тип("ПолеФормы"), ТоварыГруппаПроцентСкидок);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.ПроцентРучнойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыПроцентРучнойСкидкиПриИзменении");
	НовоеПоле.Ширина = 6;
	НовоеПоле.Заголовок = НСтр("ru = '% руч.'");
	
	// Процент автоматической скидки
	НовоеПоле = Элементы.Добавить("ТоварыПроцентАвтоматическойСкидки", Тип("ПолеФормы"), ТоварыГруппаПроцентСкидок);
	НовоеПоле.ПутьКДанным = "Объект.Товары.ПроцентАвтоматическойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 6;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Сумма скидок
	ТоварыГруппаСуммыСкидок = Элементы.Добавить(
		"ТоварыГруппаСуммыСкидок", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаСуммыСкидок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаСуммыСкидок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаСуммыСкидок.РастягиватьПоГоризонтали = Ложь;
	
	// Сумма ручной скидки
	НовоеПоле = Элементы.Добавить("ТоварыСуммаРучнойСкидки", Тип("ПолеФормы"), ТоварыГруппаСуммыСкидок);
	НовоеПоле.ПутьКДанным = "Объект.Товары.СуммаРучнойСкидки";
	НовоеПоле.ПутьКДаннымПодвала = "Объект.Товары.ИтогСуммаРучнойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаРучнойСкидкиПриИзменении");
	НовоеПоле.Ширина = 9;
	НовоеПОле.ПропускатьПриВводе = Истина;
	
	// Сумма автоматической скидки
	НовоеПоле = Элементы.Добавить("ТоварыСуммаАвтоматическойСкидки", Тип("ПолеФормы"), ТоварыГруппаСуммыСкидок);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.СуммаАвтоматическойСкидки";
	НовоеПоле.ПутьКДаннымПодвала = "Объект.Товары.ИтогСуммаАвтоматическойСкидки";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Ширина = 9;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Сумма
	НовоеПоле = Элементы.Добавить("ТоварыСумма", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.Сумма";
	НовоеПоле.ПутьКДаннымПодвала = "Объект.Товары.ИтогСумма";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаПриИзменении");
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Ширина = 9;
	НовоеПОле.ПропускатьПриВводе = Истина;
	
	// НДС
	ТоварыГруппаНДС = Элементы.Добавить(
		"ТоварыГруппаНДС", Тип("ГруппаФормы"), ЭлементТовары);
	ТоварыГруппаНДС.Вид = ВидГруппыФормы.ГруппаКолонок;
	ТоварыГруппаНДС.Группировка = ГруппировкаКолонок.Горизонтальная;
	ТоварыГруппаНДС.РастягиватьПоГоризонтали = Ложь;
	
	// Сумма НДС
	НовоеПоле = Элементы.Добавить("ТоварыСуммаНДС", Тип("ПолеФормы"), ТоварыГруппаНДС);
	НовоеПоле.ПутьКДанным = "Объект.Товары.СуммаНДС";
	НовоеПоле.ПутьКДаннымПодвала = "Объект.Товары.ИтогСуммаНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСуммаНДСПриИзменении");
	НовоеПоле.Ширина = 9;
	НовоеПоле.ПропускатьПриВводе = Истина;
	НовоеПоле.Заголовок = НСтр("ru = 'НДС'");
	
	// Ставка НДС
	НовоеПоле = Элементы.Добавить("ТоварыСтавкаНДС", Тип("ПолеФормы"), ТоварыГруппаНДС);
	НовоеПоле.ПутьКДанным = "Объект.Товары.СтавкаНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.УстановитьДействие("ПриИзменении", "ТоварыСтавкаНДСПриИзменении");
	НовоеПоле.Ширина = 9;
	
	// Сумма с НДС
	НовоеПоле = Элементы.Добавить("ТоварыСуммаСНДС", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.СуммаСНДС";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	НовоеПоле.Ширина = 9;
	НовоеПоле.ТолькоПросмотр = Истина;
	
	// Склад
	НовоеПоле = Элементы.Добавить("ТоварыСклад", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.Склад";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	
	// Комментарий для покупателя
	НовоеПоле = Элементы.Добавить("ТоварыКомментарийДляПокупателя", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.КомментарийДляПокупателя";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Заголовок = НСтр("ru = 'Доп. информация для покупателя'");
	
	// Комментарий для покупателя
	НовоеПоле = Элементы.Добавить("ТоварыКомментарийВнутренний", Тип("ПолеФормы"), ЭлементТовары);
	НовоеПоле.ПутьКДанным =  "Объект.Товары.КомментарийВнутренний";
	НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
	НовоеПоле.Заголовок = НСтр("ru = 'Комментарий (внутренний)'");
	
	// Цены и скидки
	ГруппаЦеныСкидки = Элементы.Добавить("ГруппаЦеныСкидки", Тип("ГруппаФормы"), ЭлементТовары.КоманднаяПанель);
	ГруппаЦеныСкидки.Вид = ВидГруппыФормы.Подменю;
	ГруппаЦеныСкидки.Заголовок = НСтр("ru = 'Цены и скидки'");
	
	ГруппаТоварыЦены = Элементы.Добавить("ГруппаТоварыЦены", Тип("ГруппаФормы"), ГруппаЦеныСкидки);
	ГруппаТоварыЦены.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗаполнитьЦеныПоСоглашению", Тип("КнопкаФормы"), ГруппаТоварыЦены);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗаполнитьЦеныПоСоглашению";
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен",
		Тип("КнопкаФормы"), ГруппаТоварыЦены);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен";
	
	ГруппаТоварыСкидкиНаценки = Элементы.Добавить("ГруппаТоварыСкидкиНаценки", Тип("ГруппаФормы"), ГруппаЦеныСкидки);
	ГруппаТоварыСкидкиНаценки.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыРассчитатьСкидкиНаценки", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "РассчитатьСкидкиНаценки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьАвтоматическиеСкидки",
		Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьАвтоматическиеСкидки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьРучнуюСкидку", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьРучнуюСкидку";
	
	НоваяКнопка = Элементы.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок",
		Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "НазначитьРучнуюСкидкуВыделенныхСтрок";
	
	НоваяКнопка = Элементы.Добавить("ТоварыОтменитьРучныеСкидки", Тип("КнопкаФормы"), ГруппаТоварыСкидкиНаценки);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОтменитьРучныеСкидки";
	
	ГруппаТоварыИнформацияОСкидках = Элементы.Добавить("ГруппаТоварыИнформацияОСкидках",
		Тип("ГруппаФормы"), ГруппаТоварыСкидкиНаценки);
	ГруппаТоварыИнформацияОСкидках.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	НоваяКнопка = Элементы.Добавить("ТоварыОткрытьИнформациюОСкидках",
		Тип("КнопкаФормы"), ГруппаТоварыИнформацияОСкидках);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОткрытьИнформациюОСкидках";
	
	// Подобрать товары
	ГруппаТоварыПодобратьТовары = Элементы.Добавить("ГруппаТоварыПодобратьТовары",
		Тип("ГруппаФормы"), ЭлементТовары.КоманднаяПанель);
	ГруппаТоварыПодобратьТовары.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ТоварыГруппаЗаполнить = Элементы.Добавить("ТоварыГруппаЗаполнить",
		Тип("ГруппаФормы"), ГруппаТоварыПодобратьТовары);
	ТоварыГруппаЗаполнить.Вид = ВидГруппыФормы.Подменю;
	ТоварыГруппаЗаполнить.Заголовок = НСтр("ru = 'Заполнить'");
	
	НоваяКнопка = Элементы.Добавить("ТоварыОткрытьПодбор",
		Тип("КнопкаФормы"), ТоварыГруппаЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ОткрытьПодбор";
	
	НоваяКнопка = Элементы.Добавить("ТоварыЗагрузитьИзВнешнегоФайла",
		Тип("КнопкаФормы"), ТоварыГруппаЗаполнить);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ЗагрузитьИзВнешнегоФайла";
	
	НоваяКнопка = Элементы.Добавить("ТоварыПоискПоШтрихкоду",
		Тип("КнопкаФормы"), ГруппаТоварыПодобратьТовары);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ПоискПоШтрихкоду";
	
	НоваяКнопка = Элементы.Добавить("ТоварыСоставНабора",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СоставНабора";
	
	НоваяКнопка = Элементы.Добавить("ТоварыРазбитьСтроку",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "РазбитьСтроку";
	
	НоваяКнопка = Элементы.Добавить("ТоварыВставитьСтроки",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ВставитьСтроки";
	
	НоваяКнопка = Элементы.Добавить("ТоварыСкопироватьСтроки",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "СкопироватьСтроки";
	
	НоваяКнопка = Элементы.Добавить("ПоказатьСообщения",
		Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	НоваяКнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды = "ПоказатьСообщения";
	НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	НоваяКнопка.Заголовок = НСтр("ru = 'Есть сообщения'");
	
	
	
	
	
	//// Кнопка подбора.
	//НоваяКнопка = Элементы.Добавить("Подобрать", Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	//НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	//НоваяКнопка.ИмяКоманды = "Подбор";
	//
	//// Гиперссылка цена и валюта.
	//НоваяКнопка = Элементы.Добавить("РедактироватьЦеныИВалюту", Тип("КнопкаФормы"), ЭлементТовары.КоманднаяПанель);
	//НоваяКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	//НоваяКнопка.ИмяКоманды = "РедактироватьЦеныИВалюту";
	//НоваяКнопка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	//НоваяКнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	//НоваяКнопка.Отображение = ОтображениеКнопки.Текст;
	//
	//// Настройка
	//Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	//	
	//	CRM_Модуль = ОбщегоНазначения.ОбщийМодуль("CRM_ОбщегоНазначенияСервер");
	//	Если CRM_Модуль.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда	
	//		Элементы["ТоварыСтавкаНДС"].Видимость = Истина;
	//		Элементы["ТоварыСуммаНДС"].Видимость = Истина;
	//		Элементы["ТоварыВсего"].Видимость = Истина;
	//	Иначе	
	//		Элементы["ТоварыСтавкаНДС"].Видимость = Ложь;
	//		Элементы["ТоварыСуммаНДС"].Видимость = Ложь;
	//		Элементы["ТоварыВсего"].Видимость = Ложь;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	УстановитьУсловноеОформлениеТоваров();
	
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	Элементы.ТоварыСклад.Видимость = ИспользоватьСкладыВТЧ;
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыДобавленныхТаблиц()
	
	Если ВыведеныКонтактныеДанные Тогда
		НастроитьКомандыКонтактов();
	КонецЕсли;
	
	Если ВыведеныБизнесПроцессы Тогда
		НастроитьКомандыБизнесПроцессов();
	КонецЕсли;
	
	Если ВыведеныСоисполнители Тогда
		НастроитьКомандыСоисполнителей();
	КонецЕсли;
	
	Если ВыведеныСвязанныеПартнеры Тогда
		НастроитьКомандыСвязанныхПартнеров();
	КонецЕсли;
	
	Если ВыведеныПотенциальныеКлиенты Тогда
		НастроитьКомандыПотенциальныхКлиентов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВходящиеПисьмаВИнтересе(ДополнительныеПараметры)
	
	ВходящиеПисьма = ВходящиеПисьмаВИнтересеНаСервере(Объект.Ссылка);
	
	Если ВходящиеПисьма.Количество() = 1 Тогда
		ДополнительныеПараметры.Вставить("ОтправитьКакОтвет", Истина);
		ДополнительныеПараметры.Вставить("ВзаимодействиеОснование", ВходящиеПисьма[0].Объект);
		ДополнительныеПараметры.Вставить("ИдентификаторСообщения", ВходящиеПисьма[0].ИдентификаторСообщения);
		ДополнительныеПараметры.Вставить("ИдентификаторыОснований", ВходящиеПисьма[0].ИдентификаторыОснований);
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВходящиеПисьмаВИнтересеНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЖурналДокументов.Объект КАК Объект,
		|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения КАК ИдентификаторСообщения,
		|	ЭлектронноеПисьмоВходящее.ИдентификаторыОснований КАК ИдентификаторыОснований
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО CRM_ЖурналДокументов.Объект = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	CRM_ЖурналДокументов.CRM_Интерес = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ЭлектронноеПисьмоВходящее)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресЭПКонтакта(СсылкаНаКонтакт)
	
	ПараметрыОтбора = Новый Структура("Тип", 
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	АдресаЭП = СсылкаНаКонтакт.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если АдресаЭП.Количество() > 0 Тогда
		ДанныеПолучателя = Новый Структура("Адрес, Контакт, Представление");
		ДанныеПолучателя.Адрес = АдресаЭП[0].АдресЭП;
		ДанныеПолучателя.Контакт = СсылкаНаКонтакт;
		ДанныеПолучателя.Представление = СсылкаНаКонтакт.Наименование;
		Возврат ДанныеПолучателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

