// +CRM_Модуль
#Область ОписаниеПеременных

&НаКлиенте
Перем НеПроверятьВарианты;

&НаКлиенте
Перем ОтказТемп;

#КонецОбласти
// -CRM_Модуль

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УстановитьУсловноеОформление();
	// +CRM
	ЭтоНовый = Объект.Ссылка.Пустая();
	// -CRM
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	// +CRM_Модуль
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Объект.ЦенаВключаетНДС = Параметры.Основание.ЦенаВключаетНДС;
		РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	КонецЕсли;
	// -CRM_Модуль
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка        = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	// +CRM_Модуль
	// При отсутствии данного кода на командной панели КП создается еще одна кнопка "Еще", содержащая команды,
	// у которых ТолькоВоВсехДействиях = Истина
	Для Каждого ЭлементЭДО Из Элементы.ПодменюЭДО.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементЭДО) = Тип("ГруппаФормы") Тогда 
			Для Каждого КнопкаЭДО Из ЭлементЭДО.ПодчиненныеЭлементы Цикл
				КнопкаЭДО.ТолькоВоВсехДействиях = Ложь;
				КнопкаЭДО.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
			КонецЦикла;
		Иначе
			ЭлементЭДО.ТолькоВоВсехДействиях = Ложь;
			ЭлементЭДО.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		КонецЕсли;
	КонецЦикла;
	// -CRM_Модуль
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КоммерческоеПредложениеКлиентуПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Работа с вариантами
	// Выгрузим табличную часть КомментарииВариантов во временную таблицу значений
	// просто выгрузить ТЧ нельзя. поэтому цикл.
	Для Каждого СтрокаКомментарией Из Объект.CRM_КомментарииВариантов Цикл
		Стр = ТаблицаКомментариевВариантов.Добавить();
		Стр.ИДВарианта = СтрокаКомментарией.ИДВарианта;
		Стр.КомментарийВарианта = СтрокаКомментарией.КомментарийВарианта;
	КонецЦикла;
	Если Объект.Товары.Количество() = 0 Тогда
		СписокИменВариантов.Добавить(1, "Вариант 1");
	КонецЕсли;	
	ИДИзменяемогоВарианта = 0;
	CRM_ИДВарианта = 1;
	СписокЗагруженПриСменеВарианта = Ложь;

	СформироватьПанельВариантов();
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");
	
	// +CRM
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	// -CRM
	
	// +CRM
	АвтоматическиУтверждатьЕдинственныйВариант =
		Константы.CRM_АвтоматическиУтверждатьЕдинственныйВариантКоммерческогоПредложения.Получить();
	ПриПроведениеПредлагатьУтверждениеВарианта =
		Константы.CRM_ПриПроведениеКоммерческогоПредложенияПредлагатьУтверждениеВарианта.Получить();
	// -CRM
	
	// +CRM_Модуль
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.ДокументОснование) 
	И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебный.ПрисоединенныеФайлыКОбъекту(Объект.ДокументОснование);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементЗадание = Элементы.Найти("ПодменюСоздатьНаОснованииКомандаСоздатьНаОсновании0_БизнесПроцесс_Задание");
	Если ЭлементЗадание <> Неопределено Тогда
		Элементы.Удалить(ЭлементЗадание);
	КонецЕсли;
	ИспользоватьОбменБизнесСеть = Константы.ИспользоватьОбменБизнесСеть.Получить();
	Элементы.ГруппаПодвалТекущееПредложение.Видимость = ИспользоватьОбменБизнесСеть;		
	// -CRM_Модуль

	// +Мобильный клиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку(Истина, Истина).ПодготовитьФормуДляМобильногоКлиента(ЭтотОбъект);
	КонецЕсли;
	// -Мобильный клиент
	
	Элементы.Переместить(Элементы.ФормаАвтоКнопки, Элементы.ПодменюПечать);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбработатьДополнительнуюИнформациюКлиенту();
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КоммерческоеПредложениеКлиентуПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
	ПроверкаНаВидимостьПричинаОтказа();
	
	Для каждого Строка Из Объект.Товары Цикл
		Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка.Артикул = Строка.Номенклатура.Артикул;
			Строка.НоменктатураСсылка = Строка.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// +CRM
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Клиент"" не заполнено";
		Сообщение.Поле = "Клиент";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	// -CRM
	
	ПараметрыЗаписи.Вставить("ТребуетсяВопросОРасчетеСкидок", Ложь);
	Если Не ПараметрыЗаписи.Свойство("ОтветНаВопросОРасчетеСкидокПолучен") Тогда
		ПараметрыЗаписи.Вставить("ОтветНаВопросОРасчетеСкидокПолучен", Ложь);
	КонецЕсли;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	КоммерческоеПредложениеКлиентуПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	// -CRM
	
	Если Не ПараметрыЗаписи.ОтветНаВопросОРасчетеСкидокПолучен
		И ПараметрыЗаписи.ТребуетсяВопросОРасчетеСкидок Тогда
		
		Отказ = Истина;
		
		ОповещениеПослеЗакрытия = Новый ОписаниеОповещения(
					"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
					ЭтотОбъект,
					ПараметрыЗаписи);
					
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПредложитьПользователюРассчитатьСкидки(ЭтотОбъект, Отказ, ОповещениеПослеЗакрытия);
		
		// +CRM
		Возврат;
		// -CRM		
			
	КонецЕсли;
	// +CRM	
	
	// Проверим на наличие утвержденого варианта.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И
		НЕ НеПроверятьВарианты И Объект.Товары.Количество() > 0 Тогда
		СтрокиУтвержденногоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));

		Если СтрокиУтвержденногоВарианта.Количество() = 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			Если СписокИменВариантов.Количество() = 1 И АвтоматическиУтверждатьЕдинственныйВариант Тогда
				СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
				Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
					КомандаУтвердитьВариант(Неопределено);
				КонецЕсли;
			ИначеЕсли ПриПроведениеПредлагатьУтверждениеВарианта Тогда
					
					ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отсутствует утвержденный вариант!
										|Утвердить текущий?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
					Отказ = Истина;
					Возврат;
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Запишем комментарии вариантов из временной таблицы в табличную часть.
	
	ЗаписатьКомментарийВарианта(CRM_ИДВарианта);
	
	Для каждого СтрокаТаблицыВариантов Из ТаблицаКомментариевВариантов Цикл
		
		НайденныеСтрокиТЧЗаказы = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
		
		Если НайденныеСтрокиТЧЗаказы.Количество() > 0 Тогда
			
			СтрокиТабличнойЧастиКомментарии = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
			
			Если СтрокиТабличнойЧастиКомментарии.Количество() > 0 Тогда
				СтрокаТабличнойЧастиКомментарии = СтрокиТабличнойЧастиКомментарии[0];
			Иначе
				СтрокаТабличнойЧастиКомментарии				= Объект.CRM_КомментарииВариантов.Добавить();
				СтрокаТабличнойЧастиКомментарии.ИДВарианта 	= СтрокаТаблицыВариантов.ИДВарианта;
			КонецЕсли;

			СтрокаТабличнойЧастиКомментарии.КомментарийВарианта = СтрокаТаблицыВариантов.КомментарийВарианта;

		КонецЕсли;
	
	КонецЦикла;
	// -CRM
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Проверим, можно ли утвердить новый вариант.
		СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
		Если СтрокиТекущегоВарианта.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Текущий вариант не будет утвержден по причине: вариант не содержит строк.'"));
		Иначе
			КомандаУтвердитьВариант(Неопределено);
		КонецЕсли;
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры
// -CRM

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументHTMLПодготовлен = Ложь;
	
	ТаблицаСоответствийИменВложенийCID.Очистить();
	
	СтруктураВложений = Новый Структура;
	ИнформацияДляПокупателяФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ДополнительнаяИнформацияКлиентуHTML, СтруктураВложений);
	
	Для каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийCID.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.CID      = Новый УникальныйИдентификатор;
		НоваяСтрока.Картинка = Вложение.Значение;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийCID.Количество() > 0 Тогда
		
		ДокументHTML = КоммерческиеПредложенияДокументы.ОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ДополнительнаяИнформацияКлиентуHTML);
		КоммерческиеПредложенияДокументы.ЗаменитьИменаКартинокНаCIDВложенийHTML(ДокументHTML, ТаблицаСоответствийИменВложенийCID.Выгрузить());
		
		ДокументHTMLПодготовлен = Истина;
		
	КонецЕсли;
	
	Если ДокументHTMLПодготовлен Тогда
		
		ТекущийОбъект.ДополнительнаяИнформацияКлиентуHTML = КоммерческиеПредложенияДокументы.ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	Письмо = ТекущийОбъект.Ссылка;
	
	ТаблицаВложенийКартинокФорматированногоДокумента = Документы.КоммерческоеПредложениеКлиенту.ПрисоединенныеФайлыСНеПустымCID(Объект.Ссылка);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.КоммерческоеПредложениеКлиентуПрисоединенныеФайлы");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Вложение.Ссылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ОбъектВложение = Вложение.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
		
	КонецЦикла;
	
	Для каждого Вложение Из ТаблицаСоответствийИменВложенийCID Цикл
		
		ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
		АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
		ПрисоединенныйФайл = КоммерческиеПредложенияДокументы.ЗаписатьВложениеИзВременногоХранилища(
		                     Письмо,
		                     АдресКартинкиВоВременномХранилище,
		                     "_" + СтрЗаменить(Вложение.CID, "-", "_"));
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.CIDВложенияHTML = Вложение.CID;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// +CRM
	CRM_Модуль_ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// +CRM
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	Если ТекущийОбъект.Проведен Тогда
		// Нет "ответственного" в объединенной конфигурации, вместо него подставляем менеджера
		//ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Ответственный,Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма, ТекущийОбъект.Ссылка);
		ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Менеджер, Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма, ТекущийОбъект.Ссылка);
		Если (НЕ ПараметрыОповещения = Неопределено) И (ТекущийОбъект.СуммаДокумента >= ПараметрыОповещения[0].Сумма) Тогда
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	// -CRM
	
	ЗаполнитьЗависимыеРеквизитыТабличнойЧастиТовары();
	ОпределитьНаличиеДополнительнойИнформацииПокупателю(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КоммерческоеПредложениеКлиентуПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	Если Элементы.ТоварыАртикул.Видимость Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаТабличнойЧасти.Артикул = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "Артикул");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// -CRM
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
// +CRM
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);

	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	КоммерческоеПредложениеКлиентуПриОткрытии(ЭтотОбъект, Отказ);
	
	КомандаТекущегоВарианта = Команды["КомандаВариант" + CRM_ИДВарианта];
	ПанельВариантовВыбратьВариант(КомандаТекущегоВарианта, Ложь);
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
		
	// +ПричинаОтказа
	ПроверкаНаВидимостьПричинаОтказа();
	// -ПричинаОтказа	
	
// +CRM_Модуль
	ФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
	Если ФормаСоздатьНаОсновании <> Неопределено Тогда
		ФормаСоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
// -CRM_Модуль

// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// +CRM
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	КоммерческоеПредложениеКлиентуПриЗакрытии(ЭтотОбъект);
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	// -CRM
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ОчиститьПанельВариантов();
	ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
	СформироватьПанельВариантов();
КонецПроцедуры	
// -CRM

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(
	ОбработкаВыбораПодборНоменклатуры(
		ЭтотОбъект,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
		ВыбранноеЗначение, 
		ИсточникВыбора);
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ПричиныОтказов") Тогда
		Объект.CRM_ПричинаОтказа = ВыбранноеЗначение;
		Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
		
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаОповещенияПодборНоменклатуры(
	КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(
	// -CRM
			ЭтотОбъект,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
			ИмяСобытия,
			Параметр,
			Источник);
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		СФормироватьНадписьПрисоединенныеФайлы();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		Прочитать();
	КонецЕсли;
	
	// +CRM
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
// +CRM_Модуль
	
	// проверим табличную часть, исключая разделители
	МассивПустыхКолонок = новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		
		МассивПустыхКолонок.Очистить();
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			МассивПустыхКолонок.Добавить("Номенклатура");
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(Строка.Номенклатура) И ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители")) Тогда
			                                                              
			Если Строка.ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
				МассивПустыхКолонок.Добавить("Характеристика");
			КонецЕсли;
		
			Если Строка.Количество = 0 Тогда
				МассивПустыхКолонок.Добавить("Количество");
			КонецЕсли;
			
			Если Строка.Цена = 0 Тогда
				МассивПустыхКолонок.Добавить("Цена");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				МассивПустыхКолонок.Добавить("СтавкаНДС");
			КонецЕсли;
			
			Если Строка.Сумма = 0 Тогда
				МассивПустыхКолонок.Добавить("Сумма");
			КонецЕсли;
		
		КонецЕсли;
		
		ИмяПроверяемогоВарианта = ПолучитьИмяВариантаПоНомеру(Строка.CRM_ИДВарианта);
		
		Для Каждого ЭлементМассива Из МассивПустыхКолонок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка """ + ЭлементМассива + """ в строке " + Строка.НомерСтроки + " списка ""Запасы"" (" + ИмяПроверяемогоВарианта +")'"),,
			 													"Объект.Товары[" + (Строка.НомерСтроки-1) + "][" + ЭлементМассива + "]");
			Отказ = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
// -CRM_Модуль	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	// +CRM_УНФ
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВнешнееСобытие(ЭтотОбъект, Источник, Событие, Данные);
	КоммерческоеПредложениеКлиентуВнешнееСобытие(ЭтотОбъект, Источник, Событие, Данные);
	// -CRM_УНФ	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("КоммерческоеПредложениеКлиенту_Запись", Объект.ДокументОснование, Объект.Ссылка);
	Оповестить("ИзмененСтатусЗапросаКоммерческихПредложений", "ЕстьОтветНаЗапрос", Объект.ИдентификаторЗКПВСервисе);
	
	// +CRM
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	НеПроверятьВарианты = Ложь;
	Оповестить("ЛентаСобытий_Обновить");
	// -CRM
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

// +CRM
#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияДляПокупателяФорматированныйДокументПриИзменении(Элемент)
	
	ОпределитьНаличиеДополнительнойИнформацииПокупателю(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументОснование" Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ПоказатьЗначение(, Объект.ДокументОснование);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокументОснованиеЗапрос" Тогда
		
		// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", Объект.ДокументОснование);
			ПараметрыОткрытия.Вставить("ТекущаяСтраница", "УсловияЗакупки");
			
			ОткрытьФорму("Документ.ЗапросКоммерческогоПредложенияОтКлиента.ФормаОбъекта", ПараметрыОткрытия);
			
		КонецЕсли;
		// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНалогообложенияНДС(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
		
	Если ТребуетсяСерверныйВызов Тогда
		НалогообложениеПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект, Объект.Налогообложение, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ЦенаВключаетНДСПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПартнера(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииПартнера(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		КлиентПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
	// +CRM
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	
	ЗаполнитьБанковскийСчетКонтрагента();
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКонтрагента(ЭтотОбъект, ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
	// +CRM
	ЗаполнитьБанковскийСчетКонтрагента();
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВалюты(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов 
		Или ПоЗапросу Тогда
		ВалютаПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ПоЗапросу Тогда 
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСрокаДействияКоммерческогоПредложения(ЭтотОбъект, 
	                                                                                                         ОбщегоНазначенияКлиент.ДатаСеанса(),
	                                                                                                         ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		СрокДействияПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХозяйственнойОперации(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	Если ТребуетсяСерверныйВызов Тогда
		ОперацияПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НеМожетВыкупатьсяЧастичноПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	Объект.МожетВыкупатьсяЧастично = Не НеМожетВыкупатьсяЧастично;
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииФлагаМожетВыкупатьсяЧастично(ЭтотОбъект, ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		НеМожетВыкупатьсяЧастичноПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтатуса(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса(), ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		СтатусПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
// +CRM_Модуль
	ПроверкаНаВидимостьПричинаОтказа();
// -CRM_Модуль	
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииМенеджера(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		МенеджерПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКонтактногоЛица(ЭтотОбъект, ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		КонтактноеЛицоПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииОрганизации(ЭтотОбъект, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(ЭтотОбъект, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
	// +CRM
	ЗаполнитьБанковскийСчетОрганизации();
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантУказанияСрокаПоставкиПриИзменении(Элемент)
	
	КоммерческиеПредложенияДокументыКлиентСервер.УправлениеКолонкойСрокПоставки(Объект.ВариантУказанияСрокаПоставки,
	                                                                            Элементы.ТоварыСрокПоставки,
	                                                                            Элементы.УказатьСрокПоставки);
	КоммерческиеПредложенияДокументыКлиентСервер.ОчиститьСрокПоставкиЕслиНеСоответствуетВарианту(Объект.Товары, "СрокПоставки", Объект.ВариантУказанияСрокаПоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныеФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Открыть" Тогда
		
		СтандартнаяОбработка = Ложь;
		КоммерческиеПредложенияДокументыКлиент.ОткрытьСписокПрисоединенныхФайлов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM
	//Если ПоЗапросу Тогда
	//	
	//	Отказ = Истина;
	//	
	//	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	//	
	//	Если ТекущиеДанные = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если ТекущиеДанные.НомерПредложенияПоСтрокеЗапроса = 1 Тогда
	//		УдалитьСтрокиСПредложениямиПоСтрокеЗапроса(ТекущиеДанные.ИдентификаторСтрокиЗапроса);
	//	Иначе
	//		УдалитьСтрокуСПредложениемПоСтрокеЗапроса(ТекущиеДанные);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если НЕ Отказ Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект, Элемент);
		РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	// +CRM
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
	// -CRM
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ТоварыCRM_СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Элементы.Товары.ТекущиеДанные.CRM_Содержание", НСтр("ru='Содержание'"));
КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// +CRM
	Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
		Возврат;
	КонецЕсли;
	// -CRM
	
	// +CRM_Модуль
	ТекущиеДанные.CRM_Содержание = СформироватьСодержаниеДляПечати(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	// -CRM_Модуль
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, 
	//                                                                                ТекущиеДанные, 
	//                                                                                "Номенклатура", 
	//                                                                                ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(ЭтотОбъект, 
                                                           ТекущиеДанные, 
                                                           "Номенклатура", 
                                                           ТребуетсяСерверныйВызов);

	ТекущиеДанные.Артикул = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Номенклатура, "Артикул");
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыНоменклатураПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// +CRM_Модуль
	ТекущиеДанные.CRM_Содержание = СформироватьСодержаниеДляПечати(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	// -CRM_Модуль
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект,
	//                                                                                  ТекущиеДанные, 
	//                                                                                  Элемент,
	//                                                                                  ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(ЭтотОбъект,
	                                                         ТекущиеДанные, 
	                                                         Элемент,
	                                                         ТребуетсяСерверныйВызов);
	// -CRM																					  
																					  
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыХарактеристикаПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЕдиницыИзмерения(ЭтотОбъект, 
	//                                                                                    ТекущиеДанные, 
	//                                                                                    ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(ЭтотОбъект, 
                                                               ТекущиеДанные, 
                                                               ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыЕдиницаИзмеренияПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыКоличествоПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// +CRM
	//Если ПоЗапросу Тогда
	//	
	//	Отказ = Истина;
	//	
	//	ДобавитьСтрокуПоПозицииЗапроса();
	//	
	//КонецЕсли;
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломДобавленияЗавершение", ЭтотОбъект, Копирование);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	// -CRM	
	
КонецПроцедуры

#Область ЦеныСуммы

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыЦенаПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВидаЦены(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыВидЦеныПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСумма(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииСумма(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыСуммаПриИзмененииСервер();
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтавкаНДС(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыСтавкаНДСПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные,
	//                                                                            Объект.ЦенаВключаетНДС, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM																			
																				
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыСуммаНДСПриИзмененииИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиТаблицыТовары", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РучныеСкидки

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПроцентаРучнойСкидки(
	//        ЭтотОбъект,
	//        ТекущиеДанные,
	//        Объект.ЦенаВключаетНДС,
	//        Объект.Налогообложение,
	//        ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
			
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыПроцентРучнойСкидкиПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыРучнойСкидки(
	//         ЭтотОбъект,
	//         ТекущиеДанные,
	//         Объект.ЦенаВключаетНДС,
	//         Объект.Налогообложение,
	//         ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(ЭтотОбъект, ТекущиеДанные, ТребуетсяСерверныйВызов);
	// -CRM
	
	Если ТребуетсяСерверныйВызов Тогда
		ТоварыСуммаРучнойСкидкиПриИзмененииСервер();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Комментарии

&НаКлиенте
Процедура ТоварыКомментарийДляПокупателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийДляПокупателяНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийВнутреннийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийВнутреннийНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийДляПокупателяПодвалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийДляПокупателяНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийВнутреннийПодвалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийВнутреннийНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийДляПокупателяПодвалПриИзменении(Элемент)
	
	КомментарийВСтрокеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийВнутреннийПодвалПриИзменении(Элемент)
	
	КомментарийВСтрокеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийВнутреннийПриИзменении(Элемент)
	
	КомментарийВСтрокеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийДляПокупателяПриИзменении(Элемент)
	
	КомментарийВСтрокеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентуТоварыВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов);
	// -CRM	
	
	Если ТребуетсяСерверныйВызов Тогда
		РезультатОбработки = Неопределено;
		ТоварыВыборСервер(Поле.Имя, РезультатОбработки);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеВыполненияТоварыВыбор(
			ЭтотОбъект, Поле.Имя, РезультатОбработки);
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьУсловияДоставки(Команда)
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполнениеКомандыЗаполнитьУсловияДоставки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУсловияОплаты(Команда)
	
	 КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполнениеКомандыЗаполнитьУсловияОплаты(ЭтотОбъект);
	
 КонецПроцедуры

#Область ЗаполнениеТабличнойЧастиТовары

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	// -CRM
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ОткрытьПодборПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда Возврат; КонецЕсли;
	
	КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	// +CRM
	//ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	//
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуЗагрузкиИзВнешнихФайлов(ЭтотОбъект, ОповещениеПриЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	// -CRM
	
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда Возврат; КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	
	КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(ЭтотОбъект, ОповещениеПриЗавершении);
	
КонецПроцедуры
// -CRM


&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	// +CRM_Модуль
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьСтрокуПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	// -CRM_Модуль
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура РазбитьСтрокуПродолжение(РазрешеноИзменениеТоваров, ДопПараметры) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда Возврат; КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРазбитьСтроку(ЭтотОбъект, ТекущиеДанные, ОповещениеОЗавершении);
	
КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.НачатьЗагрузкуДанныхИзТСД(ЭтотОбъект, ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзЗапроса(Команда)
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	ОповещенииОВыборе = Новый ОписаниеОповещения("ДобавитьИзЗапросаЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ДокументОснование",    Объект.ДокументОснование);
	ПараметрыОткрытия.Вставить("УжеДобавленныеСтроки", СписокУжеВыбранныхСтрокПоЗапросу(Объект.Товары));
	
	ОткрытьФорму("Документ.ЗапросКоммерческогоПредложенияОтКлиента.Форма.ФормаВыбораПотребностей", 
		ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,,
		ОповещенииОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредложениеПоПозиции(Команда)

	ДобавитьСтрокуПоПозицииЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСрокПоставки(Команда)
	
	Если Объект.ВариантУказанияСрокаПоставки = ПредопределенноеЗначение("Перечисление.ВариантыСроковПоставкиКоммерческихПредложений.УказываетсяВДняхСМоментаЗаказа") Тогда	
		
		Оповещение = Новый ОписаниеОповещения("СрокПоставкиЗавершение", ЭтотОбъект, Истина);
		
		ПоказатьВводЧисла(Оповещение,
			1,
			НСтр("ru = 'Введите срок поставки'"),
			3,
			0);
		
	ИначеЕсли Объект.ВариантУказанияСрокаПоставки = ПредопределенноеЗначение("Перечисление.ВариантыСроковПоставкиКоммерческихПредложений.УказываетсяНаОпределеннуюДату") Тогда
		
		Оповещение = Новый ОписаниеОповещения("СрокПоставкиЗавершение", ЭтотОбъект, Ложь);
		
		ПоказатьВводДаты(Оповещение,
			?(ЗначениеЗаполнено(Объект.СрокДействия), Объект.СрокДействия, Объект.Дата),
			НСтр("ru = 'Введите дату поставки'"),
			ЧастиДаты.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ПоЗапросу Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM_Модуль
	//СкопироватьСтрокиНаСервере();
	КоличествоСкопированныхСтрок = 0;
	СкопироватьСтрокиНаСервере(КоличествоСкопированныхСтрок);
	// -CRM_Модуль
	ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена';
										|en = 'Copy to clipboard'"), Окно.ПолучитьНавигационнуюСсылку(),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано строк: %1';
																	|en = 'Lines copied: %1'"), Элементы.Товары.ВыделенныеСтроки.Количество()));
	Оповестить("ДанныеСкопированыВБуферОбмена", Новый Структура("ИсточникКопирования", "Товары"), Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если ПоЗапросу Тогда
		Возврат;
	КонецЕсли;
	
	// +CRM_Модуль
	ОписаниеОповещения = Новый ОписаниеОповещения("ВставитьСтрокиПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	// -CRM_Модуль
	
КонецПроцедуры

// +CRM_Модуль
&НаКлиенте
Процедура ВставитьСтрокиПродолжение(РазрешеноИзменениеТоваров, ДопПараметры) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда Возврат; КонецЕсли;	
	
	Количество = РезультатВставкиСтрок();
	Если Количество > 0 Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена';
											|en = 'Pasting'"), Окно.ПолучитьНавигационнуюСсылку(), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вставлено строк: %1';
																		|en = 'Inserted lines: %1'"), Количество));
			
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры
// -CRM_Модуль

#КонецОбласти

#Область ЦеныИСкидки

&НаКлиенте
Процедура ЗаполнитьЦеныПоУсловиямПродаж(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.Товары.ВыделенныеСтроки);
	ОповещениеПослеВыбораУсловияПродаж = Новый ОписаниеОповещения("ПослеВыбораУсловияПродаж", ЭтотОбъект, ДополнительныеПараметры);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоУсловиямПродаж(ЭтотОбъект, ОповещениеПослеВыбораУсловияПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.Товары.ВыделенныеСтроки);
	ОповещениеПослеВыбораВидаЦены = Новый ОписаниеОповещения("ПослеВыбораВидаЦены", ЭтотОбъект, ДополнительныеПараметры);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоВидуЦен(ЭтотОбъект, ОповещениеПослеВыбораВидаЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидки(Команда)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM_Модуль
	ТоварыСохранитьАктивность();
	// -CRM_Модуль
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРассчитатьСкидки(ЭтотОбъект, ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		Результат = Неопределено;
		РассчитатьСкидкиНаСервере(Результат);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаСкидок(ЭтотОбъект, Результат);
	КонецЕсли;
	
	// +CRM_Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM_Модуль
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	// +CRM_Модуль
	ТоварыСохранитьАктивность();
	// -CRM_Модуль
	
	ТребуетсяСерверныйВызов = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.Товары.ВыделенныеСтроки);
	ОповещениеПослеНазначенияАвтоматическойСкидки = Новый ОписаниеОповещения("ПослеНазначенияАвтоматическойСкидки", ЭтотОбъект, ДополнительныеПараметры);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыНазначитьАвтоматическиеСкидки(
		ЭтотОбъект, ОповещениеПослеНазначенияАвтоматическойСкидки, ТребуетсяСерверныйВызов);
		
	Если ТребуетсяСерверныйВызов Тогда
		Результат = Неопределено;
		ПриНазначенииАвтоматическихСкидокНаСервере(Результат);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиНазначенияАвтоматическихСкидок(
			ЭтотОбъект, ОповещениеПослеНазначенияАвтоматическойСкидки, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	
	// +CRM_Модуль
	ТоварыСохранитьАктивность();
	
	// Разделители не копируем
	МассивВыделенныеСтроки = Новый Массив;
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			МассивВыделенныеСтроки.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Для Каждого ЭлМассива Из МассивВыделенныеСтроки Цикл
		Элементы.Товары.ВыделенныеСтроки.Добавить(ЭлМассива);
	КонецЦикла;
	// -CRM_Модуль
	
	СтандартнаяОбработка = Истина;
	ТребуетсяСерверныйВызов = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы.Товары.ВыделенныеСтроки);
	
	ОповещениеПослеНазначенияРучнойСкидки = Новый ОписаниеОповещения("ПослеНазначенияРучнойСкидки", ЭтотОбъект, ДополнительныеПараметры);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыНазначитьРучнуюСкидку(
		ЭтотОбъект, Элементы.Товары.ВыделенныеСтроки, СтандартнаяОбработка, ТребуетсяСерверныйВызов);
	
	Если СтандартнаяОбработка Тогда
		
		ПоказатьВводЧисла(ОповещениеПослеНазначенияРучнойСкидки, 0, НСтр("ru = 'Укажите процент скидки'"), 4, 2);
		
	ИначеЕсли ТребуетсяСерверныйВызов Тогда
		
		РезультатОбработки = Неопределено;
		ПриНазначенииРучнойСкидкиНаСервере(РезультатОбработки);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиНазначенияРучныхСкидок(
		        ЭтотОбъект,
		        Элементы.Товары.ВыделенныеСтроки,
		        ОповещениеПослеНазначенияРучнойСкидки,
		        РезультатОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНазначенияРучнойСкидки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("СтандартнаяОбработка") 
			И Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
			
			Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов")
				И ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
				
				ПослеНазначенияРучнойСкидкиНаСервере(Результат, Элементы.Товары.ВыделенныеСтроки, ДополнительныеПараметры);
				
			КонецЕсли;
			
		Иначе
		
			Для Каждого ВыделеннаяСтрока Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
				ДанныеСтроки = Элементы.Товары.ДанныеСтроки(ВыделеннаяСтрока);
				ДанныеСтроки.ПроцентРучнойСкидки = Результат;
				// +CRM
				//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПроцентаРучнойСкидки(
				//        ЭтотОбъект,
				//        ДанныеСтроки,
				//        Объект.ЦенаВключаетНДС,
				//        Объект.Налогообложение);
				КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(ЭтотОбъект, ДанныеСтроки);
				// -CRM		
			КонецЦикла;
			
		КонецЕсли;
		// +CRM_Модуль
		ТоварыВосстановитьАктивность();
		// -CRM_Модуль
		РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеЗавершенияНазначенияРучныхСкидок(ЭтотОбъект, Элементы.Товары.ВыделенныеСтроки, Результат);
		
	КонецЕсли;
	// +CRM_Модуль не удалять, это не дублирование
	ТоварыВосстановитьАктивность();
	// -CRM_Модуль
КонецПроцедуры

&НаКлиенте
Процедура ПослеНазначенияАвтоматическойСкидки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТребуетсяСерверныйВызов = Ложь;
		
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеНазначенияАвтоматическойСкидки(
			ЭтотОбъект, Результат, ТребуетсяСерверныйВызов);
			
		Если ТребуетсяСерверныйВызов Тогда
			ПослеНазначенияАвтоматическойСкидкиНаСервере(Результат, ДополнительныеПараметры);
			КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаНазначенныхАвтоматическихСкидок(
				ЭтотОбъект, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	// +CRM_Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	// +CRM_Модуль
	ТоварыСохранитьАктивность();
	// -CRM_Модуль
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОтменитьРучныеСкидки(
	           ЭтотОбъект, 
	           Элементы.Товары.ВыделенныеСтроки, 
	           Объект.ЦенаВключаетНДС, 
	           Объект.Налогообложение,
	           ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		Результат = Неопределено;
		ПриОтменеРучныхСкидокНаСервере(Результат);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОтменыРучныхСкидок(
		        ЭтотОбъект,
		        Элементы.Товары.ВыделенныеСтроки,
		        Результат);
	КонецЕсли;
	
	// +CRM_Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках(ЭтотОбъект, ТребуетсяСерверныйВызов);
	
	Если ТребуетсяСерверныйВызов Тогда
		Результат = Неопределено;
		ПодготовитьОткрытиеИнформацииОСкидкахНаСервере(Результат);
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиОткрытияИнформацииОСкидках(ЭтотОбъект, Результат);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
// 	Команда - КомандаФормы.
&НаКлиенте
Процедура Подключаемый_ПереопределяемаяКоманда(Команда)
	
	ТребуетсяСерверныйВызов = Ложь;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииПереопределяемойКоманды(
	КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(
	// -CRM
		ЭтотОбъект, Команда, ТребуетсяСерверныйВызов);
		
	Если ТребуетсяСерверныйВызов Тогда
		Результат = Неопределено;
		ПереопределяемаяКомандаСервер(Команда.Имя, Результат);
		// +CRM
		//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеВыполненияПереопределяемойКоманды(
		КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(
		// -CRM
			ЭтотОбъект, Команда, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ВнедрениеПодсистемБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	// +CRM
	//ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	Если СтрНайти(Команда.Имя, "ПодменюПечать") > 0 Или СтрНайти(Команда.Имя, "ФормаАвтоКнопки") Тогда
		
		ВыбранныйВариант = Неопределено;
			
		Варианты = ПолучитьВарианты();
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтотОбъект["ПараметрыПодключаемыхКоманд"].АдресТаблицыКоманд);
		Если Варианты.Количество() = 1 Тогда
			Подключаемый_ВыполнитьКомандуЗавершение(Варианты[0], Команда);
		Иначе	
			Если СтрНайти(ОписаниеКоманды.Идентификатор, "Договор") = 0 Тогда
				Варианты.Добавить(-1, НСтр("ru='Все варианты'"));
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьКомандуЗавершение", ЭтотОбъект, Команда);
			Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите вариант для печати'"));
		КонецЕсли;	
	Иначе	
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
	// -CRM
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Если РезультатВыбора.Значение <> Неопределено Тогда
		ВыбранныйВариант = РезультатВыбора.Значение;
		CRM_УправлениеПечатьюВызовСервера.ПоместитьВариантНаПечатьВХранилище(ВыбранныйВариант);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// -CRM

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства
#КонецОбласти

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// +CRM
&НаКлиенте
Процедура ОтправитьКП_Почта(Команда)
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(Объект, ЭтотОбъект, Ложь);
	
КонецПроцедуры // ОтправитьКП_Почта()

&НаКлиенте
Процедура ОтправитьКП_Мессенджер(Команда)
	
	CRM_УправлениеПечатьюКлиент.ВыполнитьКомандуОтправкиКП(Объект, ЭтотОбъект, Истина);
	
КонецПроцедуры // ОтправитьКП_Мессенджер()
// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.ГруппаПредставлениеДокументаОснования.Видимость       = ПоЗапросу;
	Элементы.ТоварыГруппаЗапрошеноНомерСтрокиКоличество.Видимость  = ПоЗапросу;
	Элементы.ТоварыНоменклатураПокупателяПредставление.Видимость   = ПоЗапросу;
	Элементы.ТоварыГруппаЗапрошеноКоличество.Видимость             = ПоЗапросу;
	Элементы.ТоварыЗапросЦена.Видимость                            = ПоЗапросу;
	Элементы.ГруппаИнформацияЗапрошеноПредложеноПоСтроке.Видимость = ПоЗапросу;
	Элементы.ТоварыПодобратьИзЗапроса.Видимость                    = ПоЗапросу;
	Элементы.ТоварыДобавитьПредложениеПоПозиции.Видимость          = ПоЗапросу;
	Элементы.ТоварыСкопироватьСтроки.Видимость                     = Не ПоЗапросу;
	Элементы.ТоварыВставитьСтроки.Видимость                        = Не ПоЗапросу;
	
	Элементы.ТоварыДобавить.Видимость                              = Не ПоЗапросу;
	Элементы.ТоварыПоискПоШтрихкоду.Видимость                      = Не ПоЗапросу И НастройкиУчета.РеализованПоискПоШтрихкоду;
	Элементы.ТоварыРазбитьСтроку.Видимость                         = НастройкиУчета.РеализованоРазбиениеСтрок;
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость                  = НастройкиУчета.РеализованаЗагрузкаДанныхТСД;
	Элементы.ТоварыОткрытьПодбор.Видимость            = Не ПоЗапросу 
	                                                    И НастройкиУчета.РеализованПодборНоменклатуры;
	Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Видимость = Не ПоЗапросу 
	                                                    И НастройкиУчета.РеализованоЗаполнениеДокументовИзВнешнегоФайла;
	
	Элементы.Организация.Видимость = Не НастройкиУчета.ИспользуетсяЕдинственнаяОрганизация;
	Элементы.Валюта.Видимость      = Не НастройкиУчета.ИспользуетсяЕдинственнаяВалюта;
	
	Элементы.Клиент.Видимость         = НастройкиУчета.ИспользуютсяПартнеры;
	Элементы.Контрагент.Видимость     =  КоммерческиеПредложенияДокументыКлиентСервер.ПолеКонтрагентВидимо(НастройкиУчета);

	Элементы.ТоварыХарактеристика.Видимость = НастройкиУчета.ИспользуютсяХарактеристикиНоменклатуры;
	
	Элементы.ТоварыПроцентАвтоматическойСкидки.Видимость   = НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах;
	Элементы.ТоварыСуммаАвтоматическойСкидки.Видимость     = НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах;
	Элементы.ТоварыРассчитатьСкидки.Видимость              = НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах;
	Элементы.ТоварыНазначитьАвтоматическиеСкидки.Видимость = НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах
	                                                         И НастройкиУчета.ИспользуютсяНазначаемыеАвтоматическиеСкидкиВПродажах;

	Элементы.ТоварыПроцентРучнойСкидки.Видимость   = НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах;
	Элементы.ТоварыСуммаРучнойСкидки.Видимость     = НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах;
	Элементы.ТоварыНазначитьРучнуюСкидку.Видимость = НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах;
	Элементы.ТоварыОтменитьРучныеСкидки.Видимость  = НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах;
	
	Элементы.ТоварыОткрытьИнформациюОСкидках.Видимость = (НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах
	                                                      Или НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах)
	                                                      И НастройкиУчета.РеализованаФормаПросмотраСкидок;
	
	Элементы.ТоварыЗаполнитьЦеныПоУсловиямПродаж.Видимость = НастройкиУчета.РеализованоЗаполнениеЦенПоУсловиямПродаж;
	Элементы.ТоварыЗаполнитьЦеныПоВидуЦен.Видимость        = НастройкиУчета.ИспользуютсяВидыЦен 
	                                                         И НастройкиУчета.РеализованоЗаполнениеЦенПоВидамЦен;
	Элементы.ТоварыВидЦены.Видимость                       = НастройкиУчета.ИспользуютсяВидыЦен;
	
	ЕстьСкидки        = НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах Или НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах;
	ЕстьЗаполнениеЦен = НастройкиУчета.РеализованоЗаполнениеЦенПоУсловиямПродаж Или НастройкиУчета.РеализованоЗаполнениеЦенПоВидамЦен;
	
	Если ЕстьСкидки И Не ЕстьЗаполнениеЦен Тогда
		Элементы.ГруппаЦеныСкидки.Заголовок = НСтр("ru = 'Скидки'");
	ИначеЕсли ЕстьЗаполнениеЦен И Не ЕстьСкидки Тогда
		Элементы.ГруппаЦеныСкидки.Заголовок = НСтр("ru = 'Цены'");
	КонецЕсли;
	
	Элементы.ЗаполнитьУсловияОплаты.Видимость   = НастройкиУчета.РеализованоЗаполнениеУсловийОплаты;
	Элементы.ЗаполнитьУсловияДоставки.Видимость = НастройкиУчета.РеализованоЗаполнениеУсловийДоставки;
	
	Элементы.ДекорацияПустаяПрочиеУсловияПоставки.Видимость = НастройкиУчета.РеализованоЗаполнениеУсловийОплаты
	                                                          И НастройкиУчета.РеализованоЗаполнениеУсловийДоставки;
	
	Элементы.ТоварыЗапросСрокПоставкиПредставление.Видимость = ПоЗапросу И УказанХотяБыОдинСрокПоставки;
	
	КоммерческиеПредложенияДокументыКлиентСервер.УправлениеКолонкойСрокПоставки(Объект.ВариантУказанияСрокаПоставки, Элементы.ТоварыСрокПоставки, Элементы.УказатьСрокПоставки);
	КоммерческиеПредложенияДокументыКлиентСервер.ОчиститьСрокПоставкиЕслиНеСоответствуетВарианту(Объект.Товары, "СрокПоставки", Объект.ВариантУказанияСрокаПоставки);
	
	СформироватьПредставлениеДокументаОснования();
	
	Если НастройкиУчета.ИспользуютсяСтатусыКоммерческихПредложенийКлиентам Тогда
		КоммерческиеПредложенияДокументыКлиентСерверПереопределяемый.СформироватьПредставлениеСостоянияПоСтатусу(ЭтотОбъект, Объект.Статус, ТекущаяДатаСеанса());
	КонецЕсли;
	
	Элементы.Товары.ИзменятьПорядокСтрок = Не ПоЗапросу;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПереместить", "Видимость", Не ПоЗапросу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПереместить1", "Видимость", Не ПоЗапросу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюПереместить", "Видимость", Не ПоЗапросу);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСортировка", "Видимость", Не ПоЗапросу);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Форма.Элементы.ОткрытьПрисоединенныеФайлы.Доступность = Не Форма.Объект.Ссылка.Пустая();
	
КонецПроцедуры

#КонецОбласти

#Область ВнедрениеПодсистемБСП

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#Область Комментарии

&НаКлиенте
Процедура КомментарийВнутреннийНачалоВыбора()

	КоммерческиеПредложенияДокументыКлиент.КомментарийНачалоВыбора(ЭтотОбъект,
	                                                               "КомментарийВнутренний",
	                                                                "ЕстьКомментарий",
	                                                                "ТоварыКомментарийВнутреннийПодвал",
	                                                                "КомментарийДляПокупателя");

КонецПроцедуры

&НаКлиенте
Процедура КомментарийДляПокупателяНачалоВыбора()

	КоммерческиеПредложенияДокументыКлиент.КомментарийНачалоВыбора(ЭтотОбъект,
	                                                               "КомментарийДляПокупателя",
	                                                               "ЕстьКомментарий",
	                                                               "ТоварыКомментарийДляПокупателяПодвал",
	                                                               "КомментарийВнутренний");

КонецПроцедуры

&НаКлиенте
Процедура КомментарийВСтрокеПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоммерческиеПредложенияДокументыКлиент.ОпределитьНаличиеКомментарияВСтроке(ТекущиеДанные, 
	                                                                           "КомментарийВнутренний", 
	                                                                           "КомментарийДляПокупателя", 
	                                                                            "ЕстьКомментарий"); 
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительнаяИнформацияКлиенту

&НаСервере
Процедура ОбработатьДополнительнуюИнформациюКлиенту()

	Если Не Объект.Ссылка.Пустая() 
		И ЗначениеЗаполнено(Объект.ДополнительнаяИнформацияКлиентуHTML) Тогда
		
		ТаблицаВложенийCID = Документы.КоммерческоеПредложениеКлиенту.ПрисоединенныеФайлыСНеПустымCID(Объект.Ссылка);
		ВложенияСНепустымCID.ЗагрузитьЗначения(ТаблицаВложенийCID.ВыгрузитьКолонку("Ссылка"));
		
		СтруктураВложений = Новый Структура;
		Объект.ДополнительнаяИнформацияКлиентуHTML = КоммерческиеПредложенияДокументы.ОбработанныйТекстHTMLДляФорматированногоДокумента(
		                                             Объект.Ссылка, Объект.ДополнительнаяИнформацияКлиентуHTML, СтруктураВложений);
		ИнформацияДляПокупателяФорматированныйДокумент.УстановитьHTML(Объект.ДополнительнаяИнформацияКлиентуHTML, СтруктураВложений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеДополнительнойИнформацииПокупателю(Форма)
	
	ТекстДопИнформация = Форма.ИнформацияДляПокупателяФорматированныйДокумент.ПолучитьТекст();
	
	Форма.Элементы.СтраницаДополнительнаяИнформация.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(ТекстДопИнформация);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеСтрокИзЗапроса

&НаКлиенте
Процедура ДобавитьИзЗапросаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДобавитьСтрокиИзЗапроса(Результат);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

&НаКлиентеНаСервереБезКонтекста
Функция СписокУжеВыбранныхСтрокПоЗапросу(Товары)
	
	СписокУжеВыбранныхСтрок = Новый СписокЗначений;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.НомерПредложенияПоСтрокеЗапроса = 1 Тогда
			СписокУжеВыбранныхСтрок.Добавить(СтрокаТовары.ИдентификаторСтрокиЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокУжеВыбранныхСтрок;
	
КонецФункции

// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

&НаСервере
Процедура ДобавитьСтрокиИзЗапроса(МассивИдентификаторовДобавляемыхСтрокЗапроса)

	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НомерСтрокиЗапроса                        КАК НомерСтрокиЗапроса,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторСтрокиЗапроса                КАК ИдентификаторСтрокиЗапроса,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НоменклатураПокупателяПредставление       КАК НоменклатураПокупателяПредставление,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НоменклатураПокупателяИдентификатор       КАК НоменклатураПокупателяИдентификатор,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НоменклатураВСервисеИдентификатор         КАК НоменклатураВСервисеИдентификатор,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ХарактеристикаВСервисеИдентификатор       КАК ХарактеристикаВСервисеИдентификатор,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторДляСопоставленияНоменклатуры КАК ИдентификаторДляСопоставленияНоменклатуры,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НоменклатураСсылка                        КАК Номенклатура,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ХарактеристикаСсылка                      КАК Характеристика,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ЕдиницаИзмерения                          КАК ЗапросЕдиницаИзмерения,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.Количество                                КАК ЗапросКоличество,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.МаксимальнаяЦена                          КАК ЗапросЦена,
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.СрокПоставки                              КАК ЗапросСрокПоставки
	|ИЗ
	|	Документ.ЗапросКоммерческогоПредложенияОтКлиента.Товары КАК ЗапросКоммерческогоПредложенияОтКлиентаТовары
	|ГДЕ 
	|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.Ссылка = &ЗапросКоммерческогоПредложения
	|	И ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторСтрокиЗапроса В (&МассивИдентификаторовДобавляемыхСтрокЗапроса)
	|	И НЕ ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторСтрокиЗапроса В (&МассивИдентификаторовУжеИмеющихсяСтрокЗапроса)";
	
	Запрос.УстановитьПараметр("ЗапросКоммерческогоПредложения",                Объект.ДокументОснование);
	Запрос.УстановитьПараметр("МассивИдентификаторовДобавляемыхСтрокЗапроса",  МассивИдентификаторовДобавляемыхСтрокЗапроса);
	Запрос.УстановитьПараметр("МассивИдентификаторовУжеИмеющихсяСтрокЗапроса", СписокУжеВыбранныхСтрокПоЗапросу(Объект.Товары));
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	МассивИдентификаторовДобавленныхСтрок = Новый Массив;
	Пока ВыборкаТовары.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), ВыборкаТовары);
		МассивИдентификаторовДобавленныхСтрок.Добавить(ВыборкаТовары.ИдентификаторСтрокиЗапроса);
		КоммерческиеПредложенияДокументыПереопределяемый.ПослеДобавленияСтрокИзЗапросаВКоммерческомПредложениеКлиенту(ЭтотОбъект, МассивИдентификаторовДобавленныхСтрок);
		
	КонецЦикла;
	
	ЗаполнитьЗависимыеРеквизитыТабличнойЧастиТовары(МассивИдентификаторовДобавленныхСтрок);
	
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзВнешнегоФайла

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьПолученныеИзВнешнегоФайлаДанные(Результат);

КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьПолученныеИзВнешнегоФайлаДанные(Результат)

	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ЗагрузитьПолученныеИзВнешнегоФайлаДанные(ЭтотОбъект, Результат);
	КоммерческоеПредложениеКлиентуЗагрузитьПолученныеИзВнешнегоФайлаДанные(ЭтотОбъект, Результат);
	// -CRM
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ИнформацияЗапрошеноПредложено

&НаКлиенте
Процедура ПриАктивизацииСтрокиТаблицыТовары()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ИнформацияЗапрошеноПредложеноПоСтроке = Неопределено;
		Возврат;
	КонецЕсли;
	
	ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюЗапрошеноПредложеноПоСтроке(ИдентификаторСтроки)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИнформацияЗапрошеноПредложеноПоСтроке.Очистить();
	
	МакетЗапрошено = Документы.КоммерческоеПредложениеКлиенту.ПолучитьМакет("СравнениеЗапрошеноПредложено");
	Шапка = МакетЗапрошено.ПолучитьОбласть("Шапка");
	
	Если ТекущиеДанные.НомерПредложенияПоСтрокеЗапроса = 1 Тогда
		
		ДанныеПоСтрокеЗапроса = ТекущиеДанные;
		
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИдентификаторСтрокиЗапроса",      ТекущиеДанные.ИдентификаторСтрокиЗапроса);
		ПараметрыПоиска.Вставить("НомерПредложенияПоСтрокеЗапроса", 1);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеПоСтрокеЗапроса = НайденныеСтроки[0];
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Шапка.Параметры.ЗапросКоличество       = ДанныеПоСтрокеЗапроса.ЗапросКоличество;
	Шапка.Параметры.ЗапросЕдиницаИзмерения = ДанныеПоСтрокеЗапроса.ЗапросЕдиницаИзмерения;
	Шапка.Параметры.ЗапросЦена             = ДанныеПоСтрокеЗапроса.ЗапросЦенаВалютаДокумента;
	Шапка.Параметры.НомерСтроки            = ТекущиеДанные.НомерСтроки;
	Шапка.Параметры.Номенклатура           = ТекущиеДанные.Номенклатура;
	Шапка.Параметры.Количество             = ТекущиеДанные.Количество;
	Шапка.Параметры.ЕдиницаИзмерения       = ТекущиеДанные.ЕдиницаИзмерения;
	Шапка.Параметры.Цена                   = ТекущиеДанные.Цена;
	Шапка.Параметры.Валюта                 = Объект.Валюта;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриЗаполненииПараметровСравненияЗапрошеноПредложено(Шапка.Параметры, ДанныеПоСтрокеЗапроса, ТекущиеДанные);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Формат(ДанныеПоСтрокеЗапроса.ЗапросНомерСтроки, "ЧГ="));
	МассивСтрок.Добавить(". ");
	МассивСтрок.Добавить(ДанныеПоСтрокеЗапроса.НоменклатураПокупателяПредставление);
	
	Шапка.Параметры.НоменклатураЗапрошено = СтрСоединить(МассивСтрок);
	
		Если ТекущиеДанные.Цена > ДанныеПоСтрокеЗапроса.ЗапросЦена 
		И ДанныеПоСтрокеЗапроса.ЗапросЦена <> 0 
		И ТекущиеДанные.Цена <> 0 Тогда
		
		Шапка.Области.ПредложениеЦена.Картинка   = БиблиотекаКартинок.ОтклонениеБольшеКоммерческиеПредложения;
		Шапка.Области.ПредложениеЦена.ЦветТекста = ЦветаСтиля.НезаполненныйРеквизитЦветБЭД;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Количество < ДанныеПоСтрокеЗапроса.ЗапросКоличество 
		И ДанныеПоСтрокеЗапроса.ЗапросКоличество <> 0 
		И ТекущиеДанные.Количество <> 0  Тогда
		
		Шапка.Области.ПредложениеКоличество.Картинка   = БиблиотекаКартинок.ОтклонениеМеньшеКоммерческиеПредложения;
		Шапка.Области.ПредложениеКоличество.ЦветТекста = ЦветаСтиля.НезаполненныйРеквизитЦветБЭД;
		
	ИначеЕсли ТекущиеДанные.Количество > ДанныеПоСтрокеЗапроса.ЗапросКоличество
		И Не Объект.МожетВыкупатьсяЧастично
		И ДанныеПоСтрокеЗапроса.ЗапросКоличество <> 0 
		И ТекущиеДанные.Количество <> 0  Тогда 
		
		Шапка.Области.ПредложениеКоличество.Картинка   = БиблиотекаКартинок.ОтклонениеБольшеКоммерческиеПредложения;
		Шапка.Области.ПредложениеКоличество.ЦветТекста = ЦветаСтиля.НезаполненныйРеквизитЦветБЭД;
		
	КонецЕсли;
	
	ИнформацияЗапрошеноПредложеноПоСтроке.Вывести(Шапка, Неопределено, "Шапка", Истина);
	ИнформацияЗапрошеноПредложеноПоСтроке.ФиксацияСверху = 3;
	ИнформацияЗапрошеноПредложеноПоСтроке.ВысотаСтраницы = 3;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюЗапрошеноПредложеноЕслиПоЗапросу(ТекущиеДанные)
	
	Если ПоЗапросу Тогда
		
		СформироватьИнформациюЗапрошеноПредложеноПоСтроке(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтрокамиЗапрошено

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНомераПредложенийПоСтрокеЗапроса(Форма, ИдентификаторСтрокиЗапроса)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИдентификаторСтрокиЗапроса", ИдентификаторСтрокиЗапроса);
	
	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	НомерПредложенияПоСтрокеЗапроса = 1;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НайденнаяСтрока.НомерПредложенияПоСтрокеЗапроса = НомерПредложенияПоСтрокеЗапроса;
		НомерПредложенияПоСтрокеЗапроса = НомерПредложенияПоСтрокеЗапроса + 1; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиСПредложениямиПоСтрокеЗапроса(ИдентификаторСтрокиЗапроса)

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИдентификаторСтрокиЗапроса", ИдентификаторСтрокиЗапроса);
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.Товары.Удалить(НайденнаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуСПредложениемПоСтрокеЗапроса(ДанныеСтроки)

	ИдентификаторСтрокиЗапроса = ДанныеСтроки.ИдентификаторСтрокиЗапроса;
	
	Объект.Товары.Удалить(ДанныеСтроки);
	ОпределитьНомераПредложенийПоСтрокеЗапроса(ЭтотОбъект, ИдентификаторСтрокиЗапроса);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПоПозицииЗапроса()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекущиеДанные)+1);
	НоваяСтрока.ИдентификаторСтрокиЗапроса = ТекущиеДанные.ИдентификаторСтрокиЗапроса;
	ОпределитьНомераПредложенийПоСтрокеЗапроса(ЭтотОбъект, ТекущиеДанные.ИдентификаторСтрокиЗапроса);
	
	Элементы.Товары.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыНоменклатура;
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦенуЗапроса()

	КоэффициентПересчетаИзВалютыЗапросаВВалютуДокумента = КоммерческиеПредложенияДокументы.КоэффициентПересчетаИзВалютыВВалюту(ВалютаЗапроса, Объект.Валюта, Объект.Дата);
	
	Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
		
		СтрокаТаблицыТовары.ЗапросЦенаВалютаДокумента = СтрокаТаблицыТовары.ЗапросЦена * КоэффициентПересчетаИзВалютыЗапросаВВалютуДокумента;
		
	КонецЦикла;
	
	Если Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		СформироватьИнформациюЗапрошеноПредложеноПоСтроке(Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПредставлений

&НаСервере
Процедура СформироватьПредставлениеДокументаОснования()

	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		ПредставлениеДокументаОснования = КоммерческиеПредложенияДокументы.ПредставлениеОснованияПоЗапросу(Объект.ДокументОснование);
		Возврат;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	ПредставлениеДокументаОснования = КоммерческиеПредложенияДокументы.ПредставлениеДокументаОснования(Объект.ДокументОснование);

КонецПроцедуры

&НаСервере
Процедура СФормироватьНадписьПрисоединенныеФайлы()
	
	КоличествоПрисоединенныхФайлов = 0;
	Размер = 0;
	
	ОбъектФормы = Объект;
	
	Если Не ОбъектФормы.Ссылка.Пустая() Тогда
		
		ИмяСправочника = "Справочник." + ОбъектФормы.Ссылка.Метаданные().Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИмяТаблицы.Ссылка) КАК КоличествоФайлов,
		|	ЕстьNULL(СУММА(ИмяТаблицы.Размер), 0)   КАК Размер
		|ИЗ
		|	&ИмяСправочника КАК ИмяТаблицы
		|ГДЕ
		|	НЕ ИмяТаблицы.ПометкаУдаления
		|	И ИмяТаблицы.CIDВложенияHTML = """"
		|	И ИмяТаблицы.ВладелецФайла   = &ВладелецФайла";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ОбъектФормы.Ссылка);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", ИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		КоличествоПрисоединенныхФайлов = Выборка.КоличествоФайлов;
		Размер = Окр(Выборка.Размер / 1024 / 1024, 0);
		
	КонецЕсли;
	
	Строки = Новый Массив;
		Цвет = ?(Размер > 60, ЦветаСтиля.ПросроченныеДанныеЦвет, ЦветаСтиля.ПоясняющийТекст);
	
	ПредставлениеПрисоединенныхФайлов = НСтр("ru = 'Файлы для отправки клиенту';
											|en = 'Files for sending to the customer'");
		
	Если ЗначениеЗаполнено(КоличествоПрисоединенныхФайлов) Тогда 
		Строки.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '%1 (%2)';
																	|en = '%1 (%2)'"),
			ПредставлениеПрисоединенныхФайлов, КоличествоПрисоединенныхФайлов),,,,"Открыть"));
		Строки.Добавить(". ");
		Строки.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '%1 Мб.';
																	|en = '%1 MB.'"), Размер),,Цвет));
	Иначе
		Строки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрисоединенныхФайлов,,,,"Открыть"));
	КонецЕсли;
	
	Элементы.ОткрытьПрисоединенныеФайлы.Заголовок            = Новый ФорматированнаяСтрока(Строки);
	Элементы.ОткрытьПрисоединенныеФайлы.ОтображениеПодсказки = ?(Размер > 60, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСрокаПоставки(СрокПоставки)

	Если Не ЗначениеЗаполнено(СрокПоставки) Тогда
		
		Возврат "";
		
	ИначеЕсли ТипЗнч(СрокПоставки) = Тип("Число") Тогда
		
		Возврат СтрШаблон(НСтр("ru = 'В течение %1 дн.'"), СрокПоставки);
		
	ИначеЕсли ТипЗнч(СрокПоставки) = Тип("Дата") Тогда
		
		Возврат СтрШаблон(НСтр("ru = 'до %1'"), Формат(СрокПоставки, "ДЛФ=D"));
		
	КонецЕсли;

КонецФункции
// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента

#КонецОбласти

#Область ИтогиНачальноеЗаполнение

&НаСервере
Функция НаОснованииЗапросаКоммерческогоПредложения()

	Результат = Ложь;
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		Результат = Истина;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()

	ПоЗапросу = НаОснованииЗапросаКоммерческогоПредложения();
	
	НастройкиУчета = КоммерческиеПредложенияДокументы.НастройкиУчета();
	
	НеМожетВыкупатьсяЧастично = Не Объект.МожетВыкупатьсяЧастично;
	
	СФормироватьНадписьПрисоединенныеФайлы();
	ОпределитьНаличиеДополнительнойИнформацииПокупателю(ЭтотОбъект);
	
	ЗаполнитьЗависимыеРеквизитыТабличнойЧастиТовары();
	НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	Если Объект.Налогообложение Тогда
		ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Объект.Организация,Объект.Дата);
		НалогообложениеНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи;
	КонецЕсли;
	НастроитьЭлементыФормы();
	УправлениеДоступностью(ЭтотОбъект);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеРеквизитыТабличнойЧастиТовары(МассивИдентификаторовДобавленныхСтрок = Неопределено)
	
	Если МассивИдентификаторовДобавленныхСтрок <> Неопределено
		И МассивИдентификаторовДобавленныхСтрок.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.СрокПоставки               КАК ЗапросСрокПоставки,
		|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.СнятСРассмотрения          КАК СнятСРассмотрения,
		|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.НомерСтрокиЗапроса         КАК ЗапросНомерСтроки,
		|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторСтрокиЗапроса КАК ИдентификаторСтрокиЗапроса
		|ИЗ
		|	Документ.ЗапросКоммерческогоПредложенияОтКлиента.Товары КАК ЗапросКоммерческогоПредложенияОтКлиентаТовары
		|ГДЕ
		|	ЗапросКоммерческогоПредложенияОтКлиентаТовары.Ссылка = &ДокументОснование
		|	И ВЫБОР
		|			КОГДА &ЕстьОтборПоСтрокам
		|				ТОГДА ЗапросКоммерческогоПредложенияОтКлиентаТовары.ИдентификаторСтрокиЗапроса В (&МассивИдентификаторовДобавленныхСтрок)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапросКоммерческогоПредложенияОтКлиента.Валюта КАК Валюта
		|ИЗ
		|	Документ.ЗапросКоммерческогоПредложенияОтКлиента КАК ЗапросКоммерческогоПредложенияОтКлиента
		|ГДЕ
		|	ЗапросКоммерческогоПредложенияОтКлиента.Ссылка = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		Если МассивИдентификаторовДобавленныхСтрок <> Неопределено Тогда
			Запрос.УстановитьПараметр("МассивИдентификаторовДобавленныхСтрок", МассивИдентификаторовДобавленныхСтрок);
			Запрос.УстановитьПараметр("ЕстьОтборПоСтрокам",                    Истина);
		Иначе
			Запрос.УстановитьПараметр("МассивИдентификаторовДобавленныхСтрок", Новый Массив);
			Запрос.УстановитьПараметр("ЕстьОтборПоСтрокам",                    Ложь);
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТоварыЗапросаКлиента = Результат[0].Выгрузить(); // ТаблицаЗначений
		ТоварыЗапросаКлиента.Индексы.Добавить("ИдентификаторСтрокиЗапроса");
		
		ИдентификаторТекущейСтроки      = "";
		НомерПредложенияПоСтрокеЗапроса = 0;
		СтрокаЗапроса                   = Неопределено;
		
		ВалютаВалютаЗапроса = Результат[1].Выбрать();
		ВалютаВалютаЗапроса.Следующий();
		
		ВалютаЗапроса = ВалютаВалютаЗапроса.Валюта;
		КоэффициентПересчетаИзВалютыЗапросаВВалютуДокумента = КоммерческиеПредложенияДокументы.КоэффициентПересчетаИзВалютыВВалюту(ВалютаЗапроса, Объект.Валюта, Объект.Дата);
		
		Для Каждого СтрокаТаблицыТовары Из Объект.Товары Цикл
			
			СтрокаТаблицыТовары.ЗапросЦенаВалютаДокумента = СтрокаТаблицыТовары.ЗапросЦена * КоэффициентПересчетаИзВалютыЗапросаВВалютуДокумента;
			
			Если МассивИдентификаторовДобавленныхСтрок <> Неопределено
				И МассивИдентификаторовДобавленныхСтрок.Найти(СтрокаТаблицыТовары.ИдентификаторСтрокиЗапроса) = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаТаблицыТовары.ИдентификаторСтрокиЗапроса <> ИдентификаторТекущейСтроки Тогда
				НомерПредложенияПоСтрокеЗапроса = 1;
				ИдентификаторТекущейСтроки = СтрокаТаблицыТовары.ИдентификаторСтрокиЗапроса;
			Иначе
				НомерПредложенияПоСтрокеЗапроса = НомерПредложенияПоСтрокеЗапроса + 1;
			КонецЕсли;
			
			СтрокаТаблицыТовары.НомерПредложенияПоСтрокеЗапроса = НомерПредложенияПоСтрокеЗапроса;
			
			Если НомерПредложенияПоСтрокеЗапроса = 1 Тогда 
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("ИдентификаторСтрокиЗапроса", СтрокаТаблицыТовары.ИдентификаторСтрокиЗапроса);
				
				НайденныеСтроки = ТоварыЗапросаКлиента.НайтиСтроки(ПараметрыПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаЗапроса = НайденныеСтроки[0];
				Иначе
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицыТовары.СнятСРассмотрения  = СтрокаЗапроса.СнятСРассмотрения;
				СтрокаТаблицыТовары.ЗапросНомерСтроки  = СтрокаЗапроса.ЗапросНомерСтроки;
				СтрокаТаблицыТовары.ЗапросСрокПоставки = СтрокаЗапроса.ЗапросСрокПоставки;
				
				СтрокаТаблицыТовары.ЗапросСрокПоставкиПредставление = ПредставлениеСрокаПоставки(СтрокаТаблицыТовары.ЗапросСрокПоставки);
				
				Если Не ПустаяСтрока(СтрокаТаблицыТовары.ЗапросСрокПоставкиПредставление) Тогда
					УказанХотяБыОдинСрокПоставки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ЗапросКоммерческогоПредложенияОтКлиента
	
	КоммерческиеПредложенияДокументы.ОпределитьНаличиеКомментарияВСтроках(
		ЭтотОбъект, "Товары", "КомментарийДляПокупателя", "КомментарийВнутренний", "ЕстьКомментарий");

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	КоммерческиеПредложенияДокументы.УстановитьУсловноеОформлениеСуммНДС(ЭтотОбъект);
	КоммерческиеПредложенияДокументы.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтотОбъект);
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	// -CRM
	
#Область СнятСРассмотрения
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СнятСРассмотрения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЗапросНомерСтроки");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыНоменклатураПокупателяПредставление");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЗапросСрокПоставкиПредставление");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЗапросКоличество");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЗапросЕдиницаИзмерения");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыЗапросЦена");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ТоварыНоменклатураПокупателяПредставление.Шрифт
	                                                                  ,,,,,,Истина));
	
#КонецОбласти

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Изменилось");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыИзменилось");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриУстановкеУсловногоОформления(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриУстановкеУсловногоОформления(ЭтотОбъект);
	
	// Разделитель
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	
	// Компенсируем условие при неиспользовании многооборотной тары.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	КонецЕсли;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Бежевый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Разрешаем вводить описание для разделителя
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыCRM_Содержание.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	// -CRM
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиФормы(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	// +CRM_Модуль
	Форма.СуммаНДС           = 0;
	Форма.СуммаДокументаСНДС = 0;
	СуммаБезНДС              = 0;
	
	СуммаАвтоСкидки   = 0;
	СуммаРучнойСкидки = 0;
	
	Для Каждого СтрокаКоллекцияТовары Из КоллекцияТовары Цикл
		
		Если СтрокаКоллекцияТовары.CRM_Утвержден Тогда
		
			Форма.СуммаНДС           = Форма.СуммаНДС + СтрокаКоллекцияТовары.СуммаНДС;
			Форма.СуммаДокументаСНДС = Форма.СуммаДокументаСНДС + СтрокаКоллекцияТовары.СуммаСНДС;
			СуммаБезНДС              = СуммаБезНДС + СтрокаКоллекцияТовары.Сумма;
			
			СуммаАвтоСкидки   = СуммаАвтоСкидки + СтрокаКоллекцияТовары.СуммаАвтоматическойСкидки;
			СуммаРучнойСкидки = СуммаРучнойСкидки + СтрокаКоллекцияТовары.СуммаРучнойСкидки;
			
		КонецЕсли;
		
	КонецЦикла;
	// -CRM_Модуль
	
	Форма.СуммаСкидки = СуммаАвтоСкидки + СуммаРучнойСкидки;
		
	Если СуммаБезНДС > 0 Тогда
		ПроцентАвтоСкидки   = СуммаАвтоСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		ПроцентРучнойСкидки = СуммаРучнойСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки = ПроцентАвтоСкидки + ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
		
	Если Форма.Объект.Налогообложение Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассчитатьИтоговыеПоказателиФормы() Экспорт // АПК:78 - исключить из проверки.

	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ЗавершениеВыполненияКомандФормы

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки)
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
	//	ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки);
	КоммерческоеПредложениеКлиентуОбработкаРезультатаПодбораНоменклатуры(ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		// +CRM
		//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущаяСтрока);
		//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, НоваяСтрока);
		КоммерческоеПредложениеКлиентуПриИзмененииКоличества(ЭтотОбъект, ТекущаяСтрока);
		КоммерческоеПредложениеКлиентуПриИзмененииКоличества(ЭтотОбъект, НоваяСтрока);
		// -CRM
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		НоваяСтрока.НоменклатураПокупателяПредставление = "";
		НоваяСтрока.ЗапросНомерСтроки                   = 0;
		НоваяСтрока.ЗапросСрокПоставкиПредставление     = "";
		НоваяСтрока.ЗапросКоличество                    = 0;
		НоваяСтрока.ЗапросЦена                          = 0;
		НоваяСтрока.ЗапросЦенаВалютаДокумента           = 0;
		НоваяСтрока.ЗапросЕдиницаИзмерения              = Неопределено;
		
		ОпределитьНомераПредложенийПоСтрокеЗапроса(ЭтотОбъект, НоваяСтрока.ИдентификаторСтрокиЗапроса);
		
		РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
		
		// +CRM
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		// -CRM
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СрокПоставкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИндексСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Элементы.Товары.ДанныеСтроки(ИндексСтроки);
		ТекущаяСтрока.СрокПоставки = Результат;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяСерверныйВызов = Ложь;
	РезультатОбработки = Неопределено;
	
	// +CRM
	//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОповещенияПодбораНоменклатуры(ЭтотОбъект, 
	//                                                                                          Результат, 
	//                                                                                          ДополнительныеПараметры,
	//                                                                                          ТребуетсяСерверныйВызов);
	КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(ЭтотОбъект, 
																	Результат, 
																	ДополнительныеПараметры,
																	ТребуетсяСерверныйВызов);
	// -CRM																							 
	
	Если ТребуетсяСерверныйВызов Тогда
		ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры, РезультатОбработки);
		// +CRM
		//КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиОповещенияПодбораНоменклатуры(ЭтотОбъект,
		//                                                                                                   Результат,
		//                                                                                                   РезультатОбработки, 
		//                                                                                                   ДополнительныеПараметры);
		КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(ЭтотОбъект,
																				Результат,
																				РезультатОбработки, 
																				ДополнительныеПараметры);
		// -CRM																								   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаЦены(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЗаполнитьЦеныПоВидуЦенНаСервере(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловияПродаж(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЗаполнитьЦеныПоУсловиюПродажНаСервере(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

&НаСервере
Процедура ЗаполнитьЦеныПоВидуЦенНаСервере(ВидЦены, ДополнительныеПараметры)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьЦеныПоВидуЦен(ЭтотОбъект, ВидЦены, ДополнительныеПараметры);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоУсловиюПродажНаСервере(УсловиеПродажи, ДополнительныеПараметры)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ЗаполнитьЦеныПоУсловиюПродаж(ЭтотОбъект, УсловиеПродажи, ДополнительныеПараметры);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаВводаШтрихкода

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработки = Неопределено;
	ОбработатьВводШтрихкода(Результат, РезультатОбработки);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиШтриховыхКодов(ЭтотОбъект, РезультатОбработки);

КонецПроцедуры

&НаСервере
Процедура ОбработатьВводШтрихкода(ДанныеШтрихкода, РезультатОбработки)
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, РезультатОбработки);
	КоммерческоеПредложениеКлиентуОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, РезультатОбработки);
	// -CRM
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект);
	
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриПолученииДанныхИзТСД(ОповещениеОЗавершении, ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(ТаблицаТоваров, ДополнительныеПараметры) Экспорт
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	РезультатОбработки = Неопределено;
	
	ОбработатьПолученныеДанныеТСД(ТаблицаТоваров, РезультатОбработки);
	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиШтриховыхКодов(ЭтотОбъект, РезультатОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСД(ТаблицаТоваров, РезультатОбработки)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ОбработатьПолученныеДанныеТСД(ЭтотОбъект, ТаблицаТоваров, РезультатОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ТоварыСуммаРучнойСкидкиПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСуммыРучнойСкидки(
	         ЭтотОбъект,
	         ТекущиеДанные,
	         Объект.ЦенаВключаетНДС,
	         Объект.Налогообложение);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентРучнойСкидкиПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииПроцентаРучнойСкидки(
	        ЭтотОбъект,
	        ТекущиеДанные,
	        Объект.ЦенаВключаетНДС,
	        Объект.Налогообложение);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаНДСПриИзмененииИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтавкаНДСПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСтавкаНДС(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСуммаПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСумма(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВидЦеныПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииВидаЦены(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЦенаПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКоличествоПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыЕдиницаИзмеренияПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииЕдиницыИзмерения(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект,
	                                                                            ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, 
	                                                                          ТекущиеДанные, 
	                                                                          "Номенклатура");
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВыборСервер(ИмяПоля, РезультатОбработки)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ТоварыВыборСервер(ЭтотОбъект, ИмяПоля, РезультатОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииОрганизации(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриИзмененииОрганизацииСервер(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииКонтактногоЛица(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура МенеджерПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииМенеджера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСтатуса(ЭтотОбъект, ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервере
Процедура НеМожетВыкупатьсяЧастичноПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииФлагаМожетВыкупатьсяЧастично(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОперацияПриИзмененииСервер()
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииХозяйственнойОперации(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперацииСервер(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииСрокаДействияКоммерческогоПредложения(ЭтотОбъект,
	                                                                                                   ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	Если ПоЗапросу Тогда
		ПересчитатьЦенуЗапроса();
	КонецЕсли;
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииВалюты(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриИзмененииВалюты(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ПересчитатьЦенуЗапроса();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииКонтрагента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииСервер()
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииПартнера(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриИзмененииПартнераСервер(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер()
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииЦенаВключаетНДС(ЭтотОбъект, Объект.Налогообложение);
	КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДССервер(ЭтотОбъект, Объект.Налогообложение);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеПриИзмененииСервер()
	
	// +CRM
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриИзмененииНалогообложенияНДС(ЭтотОбъект);
	КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДССервер(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПереопределяемаяКомандаСервер(ИмяКоманды, Результат)

	КоммерческиеПредложенияДокументыПереопределяемый.ПриВыполненииПереопределяемойКоманды(ЭтотОбъект, ИмяКоманды, Результат);

КонецПроцедуры

#КонецОбласти

#Область Скидки

&НаСервере
Процедура РассчитатьСкидкиНаСервере(РезультатОбработки)
	
	
	// +CRM_Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM_Модуль
	
	КоммерческиеПредложенияДокументыПереопределяемый.РассчитатьСкидкиНаСервере(ЭтотОбъект, РезультатОбработки);
	
	// +CRM_Модуль
	ТоварыВосстановитьАктивность();		
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОткрытиеИнформацииОСкидкахНаСервере(РезультатОбработки)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПодготовитьОткрытиеИнформацииОСкидкахНаСервере(ЭтотОбъект, РезультатОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ПриОтменеРучныхСкидокНаСервере(РезультатОбработки)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриОтменеРучныхСкидокНаСервере(ЭтотОбъект, РезультатОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ПриНазначенииРучнойСкидкиНаСервере(РезультатОбработки)
	
	 КоммерческиеПредложенияДокументыПереопределяемый.ПриНазначенииРучнойСкидкиНаСервере(ЭтотОбъект, РезультатОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеНазначенияРучнойСкидкиНаСервере(РезультатОбработки, Знач ВыделенныеСтроки, ДополнительныеПараметры)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПослеНазначенияРучнойСкидкиНаСервере(ЭтотОбъект, ВыделенныеСтроки, РезультатОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриНазначенииАвтоматическихСкидокНаСервере(Результат)

	КоммерческиеПредложенияДокументыПереопределяемый.ПриНазначенииАвтоматическихСкидокНаСервере(ЭтотОбъект, Результат);

КонецПроцедуры

&НаСервере
Процедура ПослеНазначенияАвтоматическойСкидкиНаСервере(Результат, ДополнительныеПараметры)
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПослеНазначенияАвтоматическойСкидкиНаСервере(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РассчитатьСкидки(Неопределено);
	КонецЕсли;
	
	ДополнительныеПараметры.ОтветНаВопросОРасчетеСкидокПолучен = Истина;
	Записать(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрок

&НаСервере
Процедура СкопироватьСтрокиНаСервере(КоличествоСкопированныхСтрок)
	
	СтандартнаяОбработка = Истина;
	
	// +CRM_Модуль
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриКопированииСтрокВБуферОбмена(ЭтотОбъект,
	//                                                                                 Объект.Товары,
	//                                                                                 Элементы.Товары.ВыделенныеСтроки, 
	//                                                                                 "Товары",
	//                                                                                 СтандартнаяОбработка);
	
	// Разделители не копируем
	
	МассивВыделенныеСтроки = Новый Массив;
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		Если ТипЗнч(СтрокаТаблицы.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			МассивВыделенныеСтроки.Добавить(ТекСтрока);
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоСкопированныхСтрок = МассивВыделенныеСтроки.Количество();
	
	Если КоличествоСкопированныхСтрок = 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		// очистим текущий буфер обмена
		ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
		
		Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
			Адрес = ТекущийБуферОбмена.Данные;
		Иначе
			Адрес = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ПустаяТаблицаСкопированныхСтрок = Новый ТаблицаЗначений;
		
		ДанныеВХранилище = ПоместитьВоВременноеХранилище(ПустаяТаблицаСкопированныхСтрок, Адрес);
		
		СтруктураБуфераОбмена = Новый Структура;
		СтруктураБуфераОбмена.Вставить("Источник", Неопределено);
		СтруктураБуфераОбмена.Вставить("Данные", ДанныеВХранилище);
		
		ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);	
		
		Возврат;
	КонецЕсли;	
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриКопированииСтрокВБуферОбмена(ЭтотОбъект,
	                                                                                 Объект.Товары,
	                                                                                 МассивВыделенныеСтроки, 
	                                                                                 "Товары",
	                                                                                 СтандартнаяОбработка);
	// -CRM_Модуль
	
	Если СтандартнаяОбработка Тогда
		
		ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки, "Товары");
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаСервере
Функция РезультатВставкиСтрок()
	
	СтандартнаяОбработка = Истина;
	КоличествоСтрок      = 0;
	
	// +CRM_Модуль
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок, СтандартнаяОбработка);
	КоммерческоеПредложениеКлиентуПриВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок, СтандартнаяОбработка);
	// -CRM_Модуль

	Если СтандартнаяОбработка Тогда
		
		ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
		Если ДанныеИзБуфераОбмена.Источник <> "Товары" Тогда
			Возврат 0;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДанныеИзБуфераОбмена.Данные Цикл
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
		КоличествоСтрок = ДанныеИзБуфераОбмена.Данные.Количество();
	
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
	// +CRM
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	РасчитатьИтогоПоВарианту();
	// -CRM
	
	Возврат КоличествоСтрок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// +CRM

#Область ПроцедурыДляРаботыСВариантами

&НаКлиенте
Процедура ТоварыСдвинутьВверх(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		ТекущийИДВариант = Элементы.Товары.ТекущиеДанные.CRM_ИДВарианта;
		Пока ИндексТекСтроки >= 1 Цикл             		 
			 СледующийТовар = Объект.Товары.Получить(ИндексТекСтроки-1);
			 Объект.Товары.Сдвинуть(ИндексТекСтроки, -1);
			 Если СледующийТовар.CRM_ИДВарианта = ТекущийИДВариант Тогда				 				 
				 Прервать;
			 КонецЕсли;
			 ИндексТекСтроки = ИндексТекСтроки - 1;
		КонецЦикла;	
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСдвинутьВниз(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		ТекущийИДВариант = Элементы.Товары.ТекущиеДанные.CRM_ИДВарианта;
		Пока ИндексТекСтроки <= Объект.Товары.Количество() Цикл             		 
			 СледующийТовар = Объект.Товары.Получить(ИндексТекСтроки+1);
			 Объект.Товары.Сдвинуть(ИндексТекСтроки, 1);
			 Если СледующийТовар.CRM_ИДВарианта = ТекущийИДВариант Тогда				 				 
				 Прервать;
			 КонецЕсли;
			 ИндексТекСтроки = ИндексТекСтроки + 1;
		КонецЦикла;			
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьВарианты()
	
	//Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Объект.Ссылка);
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПанельВариантовВыбратьВариант(Команда, ЗаписыватьКомментарийВарианта = Неопределено)
	
	ИмяКоманды = Команда.Имя;
	ИмяКнопки = "Вариант" + СтрЗаменить(ИмяКоманды, "КомандаВариант", "");
	Кнопка = Элементы[ИмяКнопки];
	
	Если Кнопка.Пометка Тогда
		
		// Запустим механизм переименования кнопки.
		КомандаПереименоватьВариант(Команда);
		
	Иначе
		
		// Запустим механизм переключения варианта.
		ЗаписыватьКомментарий = ?(ЗаписыватьКомментарийВарианта = Неопределено, Истина, ЗаписыватьКомментарийВарианта);
	
		Если ЗаписыватьКомментарий Тогда
			
			// Запишем содержимое комментария варианта.
			ЗаписатьКомментарийВарианта(CRM_ИДВарианта);
		
		КонецЕсли;
		
		// Получим идентификатор выбранного варианта.
		CRM_ИДВарианта = ПолучитьИдентификаторВарианта(Кнопка);
		
		// Установим отбор номенклатуры по выбранному варианту.
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		
		МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
		
		Если МассивСтрокВариантов.Количество() = 0 Тогда
			Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		Иначе
			Элементы.КнопкаУтвердитьВариант.Пометка = СтрНайти(Кнопка.Заголовок, НСтр("ru = '(Утв.)'"));
		КонецЕсли;
		
		// Установим пометку у выбранного варианта.
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Пометка = Ложь;
		КонецЦикла;
		
		Кнопка.Пометка = Истина;
		
		// Установим комментарий выбранного варианта.
		УстановитьКомментарийВарианта(CRM_ИДВарианта);
		
		СписокЗагруженПриСменеВарианта = Истина;
		
		РасчитатьИтогоПоВарианту();
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
КонецПроцедуры

// Устанавливает значение комментария из табличной части в поле ввода.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура УстановитьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		КомментарийВарианта =  "";
	Иначе
		КомментарийВарианта = СтрокиКомментариев[0].КомментарийВарианта;
	КонецЕсли;

КонецПроцедуры // УстановитьКомментарийВарианта()

&НаКлиенте
Процедура КомандаДобавитьВариант(Команда)
	
	// Получим номер нового варианта.
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

// Возвращает номер Варианта
//
// Параметры:
//	Кнопка формф
//	Если кнопка указана, возвращается номер, иначе генерируется новый.
// Возвращаемое значение:
//   Число   
//
&НаКлиенте
Функция ПолучитьИдентификаторВарианта(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		
		// Найдем идентификатор нового варианта.
		СписокНомеров = СписокИменВариантов.Скопировать();
		СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);

		НовыйИдентификатор = СписокНомеров[СписокНомеров.Количество()-1].Значение + 1;
		
		Возврат НовыйИдентификатор;
		
	Иначе
		
		// Найдем идентификатор варианта нажатой кнопки.
		ИндексКнопки = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы.Индекс(Кнопка);
		Возврат СписокИменВариантов[ИндексКнопки].Значение;
		
	КонецЕсли;
КонецФункции // ПолучитьИдентификаторВарианта()

// Удаление элемента формы
//
&НаСервере
Процедура УдалитьКнопкуВарианта(ИмяУдаляемогоЭлемента)
	
	// удалим элемент (кнопку)
	УдаляемыйЭлемент = Элементы[ИмяУдаляемогоЭлемента];
	Элементы.Удалить(УдаляемыйЭлемент);
	
	// удалим команду кнопки
	УдаляемаяКоманда = Команды["Команда" + ИмяУдаляемогоЭлемента];
	Команды.Удалить(УдаляемаяКоманда);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариант(Команда)
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;

	Если КнопкиВариантов.Количество() = 2 Тогда // Один вариант + кнопка добавления.
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя удалить единственный вариант!'"));
		Возврат;
	КонецЕсли;
	
	// Запросим подтверждение удаления варианта.
	ТекстВопроса = НСтр("ru = 'Удалить вариант?'");
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Данный вариант утвержден!
					   |'") + ТекстВопроса; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУдалитьВариантЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариантЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;
	УдаляемаяКнопка = Элементы["Вариант" + CRM_ИДВарианта];
	ИндексУдаляемойКнопки = КнопкиВариантов.Индекс(УдаляемаяКнопка);
	
	// Удалим имя кнопки из списка имен;
	СписокИменВариантов.Удалить(ИндексУдаляемойКнопки);
	
	// Удалим номенклатуру варианта.
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		Объект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	// удалим кнопку варианта
	УдалитьКнопкуВарианта("Вариант" + CRM_ИДВарианта);
	
	// Удалим комментарий варианта.
	МассивСтрокТаблицыКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта", CRM_ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		ТаблицаКомментариевВариантов.Удалить(ТаблицаКомментариевВариантов.Индекс(СтрокаТаблицыКомментариев));
	
	КонецЕсли;
	
	МассивСтрокТаблицыКомментариев = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", CRM_ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		Объект.CRM_КомментарииВариантов.Удалить(СтрокаТаблицыКомментариев);
	
	КонецЕсли;
	
	Если КнопкиВариантов.Количество() = 2 Тогда // Остался один вариант + кнопка добавления
		// сделаем активным единственный оставшийся вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[0];
	
	ИначеЕсли КнопкиВариантов.Количество() = ИндексУдаляемойКнопки + 1 Тогда // Посл. справа кнопка варианта.
		
		// Сделаем активным предыдущий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки - 1];
		
	Иначе
		
		// Сделаем активным следующий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки];
		
	КонецЕсли;
	
	ПанельВариантовВыбратьВариант(Команды["Команда" + КнопкаТекущегоВарианта.Имя], Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьВариант(Команда)
	
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.CRM_ИДВарианта = НовыйНомерВарианта;
		НоваяСтрока.CRM_ИмяВарианта = "";
		НоваяСтрока.CRM_Утвержден = Ложь;
		
	КонецЦикла;
	
	// Скопируем комментарий варианта.
	
	СтрокаКомментарияНовогоВарианта = ТаблицаКомментариевВариантов.Добавить();
	СтрокаКомментарияНовогоВарианта.ИДВарианта = НовыйНомерВарианта;
	СтрокаКомментарияНовогоВарианта.КомментарийВарианта = КомментарийВарианта;
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариант(Команда)
	
	ЭлементСпискаИменВариантов = СписокИменВариантов.НайтиПоЗначению(CRM_ИДВарианта);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПереименоватьВариантЗавершение", ЭтотОбъект, ЭлементСпискаИменВариантов);
	ПоказатьВводСтроки(ОписаниеОповещения, ЭлементСпискаИменВариантов.Представление, НСтр("ru = 'Введите новое имя варианта'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариантЗавершение(ИмяВарианта, ЭлементСпискаИменВариантов) Экспорт
	
	Если ИмяВарианта <> Неопределено Тогда
		
		ИмяВарианта = СокрЛП(ИмяВарианта);
		ИмяВарианта= ?(ИмяВарианта = "", "Вариант " + CRM_ИДВарианта, ИмяВарианта);
		СтароеИмяВарианта = ЭлементСпискаИменВариантов.Представление;
		ВариантУтвержден = Элементы.КнопкаУтвердитьВариант.Пометка;
		
		Если НЕ ИмяВарианта = СтароеИмяВарианта Тогда
			ЭлементСпискаИменВариантов.Представление = ИмяВарианта;
			
			СтрокиВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
			
			Для каждого СтрокаВарианта Из СтрокиВариантов Цикл
				СтрокаВарианта.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
			КонецЦикла;
			
			Элементы["Вариант" + CRM_ИДВарианта].Заголовок = ?(ВариантУтвержден, ИмяВарианта + НСтр("ru = ' (Утв.)'"), ИмяВарианта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКнопкуПанелиВариантов(ИДВарианта)
	
	ИскомаяКоманда = Команды.Найти("КомандаВариант" + ИДВарианта);
	Если НЕ ИскомаяКоманда = Неопределено Тогда
		Команды.Удалить(ИскомаяКоманда);
	КонецЕсли;
	
	ИскомыйЭлемент = Элементы.Найти("Вариант" + ИДВарианта);
	Если НЕ ИскомыйЭлемент = Неопределено Тогда
		Элементы.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все кнопки вариантов.
//
&НаСервере
Процедура ОчиститьПанельВариантов()
	
	Ном = 0;
	Для Каждого КомандаФормы Из Команды Цикл
		Если СтрНайти(КомандаФормы.Имя, "КомандаВариант") > 0 Тогда
			Ном = Ном + 1;
		КонецЕсли;
	КонецЦикла;
	
	Пока Ном > 0 Цикл
		УдалитьКнопкуПанелиВариантов(Ном);
		Ном = Ном - 1;
	КонецЦикла;
	
КонецПроцедуры

// Создает команду и кнопку для варианта.
//
&НаСервере
Процедура СоздатьКнопкуВарианта(ИДНовогоВарианта, ЗаголовокКнопки)
	
	// создадим команду
	НоваяКоманда = Команды.Добавить("КомандаВариант" + ИДНовогоВарианта);
	НоваяКоманда.Заголовок = ЗаголовокКнопки;
	НоваяКоманда.Подсказка = НСтр("ru = 'Выбрать вариант'");
	НоваяКоманда.Действие  = "ПанельВариантовВыбратьВариант";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
	// создадим кнопку
	НовыйЭлемент = Элементы.Добавить("Вариант" + ИДНовогоВарианта, Тип("КнопкаФормы"), Элементы.КоманднаяПанельВариантов);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.Заголовок = ЗаголовокКнопки;
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	
	// Переместим в конец коллекции кнопку создания нового варианта.
	Элементы.Переместить(Элементы.КнопкаДобавитьВариант, Элементы.КоманднаяПанельВариантов);
КонецПроцедуры // СоздатьКнопкуВарианта()

// Формирует кнопки, "разделяющие" табличную часть товары по вариантам.
//
&НаСервере
Процедура СформироватьПанельВариантов()
	
	ТаблицаВариантов = Объект.Товары.Выгрузить();
	ТаблицаВариантов.Свернуть("CRM_ИДВарианта");
	ТаблицаВариантов.Сортировать("CRM_ИДВарианта");
	
	Если ТаблицаВариантов.Количество() = 0 Тогда // Создадим одну кнопку "по умолчанию"
		// создадим кнопку "по умолчанию".
		СоздатьКнопкуВарианта(1, НСтр("ru = 'Вариант 1'"));
		Возврат;
	Иначе
		СписокИменВариантов.Очистить();
	КонецЕсли;
		
	// Заполним список имен вариантов.
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		СписокИменВариантов.Добавить(СтрокаТаблицы.CRM_ИДВарианта, ПолучитьИмяВариантаПоНомеру(СтрокаТаблицы.CRM_ИДВарианта));
	КонецЦикла;	
		
	Для Сч = 0 По ТаблицаВариантов.Количество()-1 Цикл

		СоздатьКнопкуВарианта(ТаблицаВариантов[Сч].CRM_ИДВарианта, СписокИменВариантов.НайтиПоЗначению(ТаблицаВариантов[Сч].CRM_ИДВарианта).Представление);

	КонецЦикла;
	
	// Найдем утвержденный вариант.
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));
	ТекИДВарианта = ?(УтвержденныеСтроки.Количество() = 0, 0, УтвержденныеСтроки[0].CRM_ИДВарианта);
	
	Если ТекИДВарианта > 0 Тогда
		
		Кнопка = Элементы["Вариант"+ТекИДВарианта];
		Кнопка.Заголовок = Кнопка.Заголовок + НСтр("ru = ' (Утв.)'");
		CRM_ИДВарианта = ТекИДВарианта;
		
	Иначе
		// Сделаем активным первый вариант.
		CRM_ИДВарианта = ТаблицаВариантов[0].CRM_ИДВарианта;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя вараинта по номеру.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - Имя варианта.
//	
&НаСервере
Функция ПолучитьИмяВариантаПоНомеру(НомерВарианта)
	
	ИмяВарианта = "";
	МассивСтрокВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", НомерВарианта));
	Если МассивСтрокВарианта.Количество() > 0 Тогда
		
		СтрокаВарианта = МассивСтрокВарианта[0];
		
		Если ПустаяСтрока(СтрокаВарианта.CRM_ИмяВарианта) Тогда
			ИмяВарианта = "Вариант " + НомерВарианта;
		Иначе
			ИмяВарианта = СтрокаВарианта.CRM_ИмяВарианта;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ИмяВарианта;
		
КонецФункции// ПолучитьИмяВариантаПоНомеру(НомерВарианта)

// записывает значение комментария из поля ввода в табличную часть.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура ЗаписатьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		СтрокаКомментария = ТаблицаКомментариевВариантов.Добавить();
		СтрокаКомментария.ИДВарианта = НомерВарианта;
	Иначе
		СтрокаКомментария = СтрокиКомментариев[0];
	КонецЕсли;
	
	СтрокаКомментария.КомментарийВарианта = КомментарийВарианта;

КонецПроцедуры // ЗаписатьКомментарийВарианта()

&НаКлиенте
Процедура КомандаУтвердитьВариант(Команда)
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	Если МассивСтрокВариантов.Количество() = 0 Тогда
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя утвердить вариант с незаполненной табличной частью!'"));
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаУтвердитьВариант.Пометка = НЕ Элементы.КнопкаУтвердитьВариант.Пометка;
	
	// по любому очищаем старую
	Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
		КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
	КонецЦикла;

	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Строка.УдалитьАктивность = Ложь;
		КонецЕсли;
	КонецЦикла;

	// Если пометка, тогда утверждаем.
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		УтвердитьВариант(CRM_ИДВарианта);
		КнопкаУтверждаемогоВарианта = Элементы["Вариант" + CRM_ИДВарианта];
		КнопкаУтверждаемогоВарианта.Заголовок = КнопкаУтверждаемогоВарианта.Заголовок + НСтр("ru = ' (Утв.)'");
	КонецЕсли;
	
	ПересчитатьИтогиСервер();
	
КонецПроцедуры  // КомандаУтвердитьВариант()

// Процедура предназначена для утверждения варианта.
//
&НаКлиенте
Процедура УтвердитьВариант(ИдентификаторВарианта = 0)
	//
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Строка.УдалитьАктивность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКУтверждению = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИдентификаторВарианта));
	Для Каждого Строка Из СтрокиКУтверждению Цикл
		Строка.CRM_Утвержден = Истина;
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка.УдалитьАктивность = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // УтвердитьВариант()

&НаКлиенте
Процедура КомментарийВариантаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомментарийВариантаЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, КомментарийВарианта, НСтр("ru = 'Введите описание'"), , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВариантаЗавершение(ВведенныйКомментарий, ДополнительныеПараметры) Экспорт
	Если ВведенныйКомментарий<>Неопределено Тогда
		КомментарийВарианта =  ВведенныйКомментарий;
	КонецЕсли;
КонецПроцедуры


// Возвращает имя варианта для занесения в табличную часть Товары.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - если имя варианта стандартное, возвращает пустую строку, иначе - имя варианта.
//	
&НаСервере
Функция ИмяВариантаДляТабличнойЧасти(НомерВарианта)
	ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
	ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
	Возврат ИмяВарианта;
КонецФункции

&НаКлиенте
Процедура ДобавитьРазделитель(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		
		Модифицированность = Истина;
		Разделитель = ПредопределенноеЗначение("Справочник.CRM_Разделители.ПустаяСсылка");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительЗавершение", ЭтотОбъект);
		ПоказатьВводЗначения(ОписаниеОповещения, Разделитель, "Выберите разделитель");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительЗавершение(Разделитель, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Разделитель) Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Разделитель;
		НоваяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
		НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
		НоваяСтрока.CRM_ЭтоРазделитель = Истина;
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет, есть ли товары, относящиеся к утвержденному варианту.
//
// Параметры:
//  СтруктураПараметров - Структура - может содержать следующие элементы:

// ВозвращаемоеЗначение:
//  Булево - Истина, если изменение табличной части "Товары" разрешено.
//
Процедура РазрешеноИзменениеТоваров(СтруктураПараметров = Неопределено, ОписаниеОповещенияОЗавершении)
	
	Перем ТоварыТекущаяСтрока, ПроверитьВсеТовары;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ПроверитьВсеТовары", Ложь);
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ТоварыТекущаяСтрока", ТоварыТекущаяСтрока);
	Если Не СтруктураПараметров.Свойство("ПроверитьВсеТовары" , ПроверитьВсеТовары) Тогда
		ПроверитьВсеТовары = Ложь;
	КонецЕсли;
	
	ИДУтвержденногоВарианта = 0;
	Если ТоварыТекущаяСтрока = Неопределено Тогда
		
		Если ПроверитьВсеТовары Тогда
			
			ИндексСтроки = 0;
			ТоварыКоличествоСтрок = Объект.Товары.Количество();
			
			Пока ИндексСтроки < ТоварыКоличествоСтрок И ИДУтвержденногоВарианта = 0 Цикл
				
				СтрокаТовары = Объект.Товары[ИндексСтроки];
				
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
		
		Иначе	
			
			// Проверим только текущий вариант.
			СтрокиТекущегоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта",CRM_ИДВарианта));
			Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
				СтрокаТовары = СтрокиТекущегоВарианта[0];
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТоварыТекущаяСтрока.CRM_Утвержден Тогда
		
		ИДУтвержденногоВарианта = ТоварыТекущаяСтрока.CRM_ИДВарианта;

	КонецЕсли;
	
	Если ИДУтвержденногоВарианта > 0 Тогда
		
		ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(ИДУтвержденногоВарианта).Представление;
		
		ТекстВопроса =НСтр("ru = ' Вариант """ + ИмяВарианта + """ утвержден!
					   |При внесении изменений в таблицу товаров и услуг
					   |статус ""Утвержден"" будет снят. Продолжить?'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешеноИзменениеТоваровЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);			   
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура РазрешеноИзменениеТоваровЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
		КонецЦикла;
		
		УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
		Для Каждого Строка Из УтвержденныеСтроки Цикл
			Строка.CRM_Утвержден = Ложь;
			Строка.УдалитьАктивность = Ложь;		
		КонецЦикла;
		
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		
		РазрешеноИзменение = Истина;
		
	Иначе
		
		РазрешеноИзменение = Ложь;
		
	КонецЕсли;
	
	ПересчитатьИтогиСервер();
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, РазрешеноИзменение); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(РазрешеноИзменениеТоваров, Элемент) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		
		Отказ = Ложь;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ПоЗапросу Тогда
			
			Отказ = Истина;
			
			Если ТекущиеДанные.НомерПредложенияПоСтрокеЗапроса = 1 Тогда
				УдалитьСтрокиСПредложениямиПоСтрокеЗапроса(ТекущиеДанные.ИдентификаторСтрокиЗапроса);
			Иначе
				УдалитьСтрокуСПредложениемПоСтрокеЗапроса(ТекущиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
		КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТоварыПередУдалением(ЭтотОбъект,
		                                                                            Элемент, 
		                                                                            ТекущиеДанные, 
		                                                                            Отказ);
		
		Если Не Отказ Тогда
			МассивСтрок = Новый Массив;
			Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
				МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из МассивСтрок Цикл
				Объект.Товары.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
			РасчитатьИтогоПоВарианту();
			РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавленияЗавершение(РазрешеноИзменениеТоваров, Копирование) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПоЗапросу Тогда
		
		ДобавитьСтрокуПоПозицииЗапроса();
		
	Иначе	
	
		ТекСтрока = Элементы.Товары.ТекущиеДанные;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.CRM_ИДВарианта = CRM_ИДВарианта;
		НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
		
		Если Копирование И ТекСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,, "НомерСтроки,НомерСтрокиВарианта");
		КонецЕсли;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", CRM_ИДВарианта);
		
		Если Не НоваяСтрока = Неопределено Тогда
			НоваяСтрока.УдалитьАктивность = Истина;
		КонецЕсли;
		
		СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Модифицированность = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	ОтказТемп = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломИзмененияЗавершение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	Отказ = ОтказТемп;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзмененияЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт

	ОтказТемп = НЕ РазрешеноИзменениеТоваров;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьИтогоПоВарианту()
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", CRM_ИДВарианта));
	ИтогоПоВарианту = 0;
	Для Каждого СтрокаМассива Из МассивСтрокВариантов Цикл
		ИтогоПоВарианту = ИтогоПоВарианту + СтрокаМассива.СуммаСНДС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерСтрокиВарианта(Форма)
	СтруктураПоиска = Новый Структура("CRM_ИДВарианта", Форма.CRM_ИДВарианта);
	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Счетчик = 1;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.CRM_ЭтоРазделитель Тогда
			НайденнаяСтрока.НомерСтрокиВарианта = 0;
			Счетчик = 1;
		Иначе
			НайденнаяСтрока.НомерСтрокиВарианта = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.CRM_Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппаИнтерес

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_МетодыФормДокументовСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры	

#КонецОбласти

#Область CRM

&НаСервере
Процедура ПроверкаНаВидимостьПричинаОтказа()
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		Элементы.ПричинаОтказа.Видимость = Истина;
	Иначе
		Объект.CRM_ПричинаОтказа = Справочники.CRM_ПричиныОтказов.ПустаяСсылка();
		Элементы.ПричинаОтказа.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияНетПричиныОтказа.Видимость = НЕ Элементы.ПричинаОтказа.Видимость;
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаПриИзменении(Элемент)
	
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаСервере
Процедура CRM_Модуль_ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПредложениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные ИЗ СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.ДокументОснование, ПредложениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ВыбранныйВариант =Неопределено;
		
	Варианты = ПолучитьВарианты();
	Варианты.Добавить(0,"Все варианты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПечатьВнешнегоМакетаЗавершение", ЭтотОбъект, Команда);
	Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
	
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакетаЗавершение(РезультатВыбора, Команда) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	ВыбранныйВариант = РезультатВыбора.Значение;
		
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиСервер()
	
//	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
//	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры// ПересчитатьИтогиСервер()	

&НаСервере
Процедура ТоварыСохранитьАктивность()
	
	Если Не CRM_ВосстановитьПризнакАктивность Тогда
		
		CRM_ТаблицаАктивность.Очистить();
		
		Для каждого СтрокаТовары Из Объект.Товары Цикл
			
			CRM_ТаблицаАктивностьНоваяСтрока = CRM_ТаблицаАктивность.Добавить();
			
			ЗаполнитьЗначенияСвойств(CRM_ТаблицаАктивностьНоваяСтрока, СтрокаТовары);
			
			СтрокаТовары.УдалитьАктивность = НЕ СтрокаТовары.CRM_ЭтоРазделитель;
			
		КонецЦикла;
		
		CRM_ВосстановитьПризнакАктивность = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ТоварыВосстановитьАктивность()
	
	Если CRM_ВосстановитьПризнакАктивность Тогда	
		
		ИндексПоследнегоТовара = Объект.Товары.Количество() - 1;
		
		Для ИндексТекущегоТовара = 0 По ИндексПоследнегоТовара Цикл
			
			СтрокаТовары = Объект.Товары[ИндексТекущегоТовара];
			
			CRM_ТаблицаАктивностьСтрока = CRM_ТаблицаАктивность[ИндексТекущегоТовара];
			
			СтрокаТовары.УдалитьАктивность = CRM_ТаблицаАктивностьСтрока.Активность	
			
		КонецЦикла;
		
		CRM_ТаблицаАктивность.Очистить();
		
		CRM_ВосстановитьПризнакАктивность = Ложь;
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются".
// 
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются")
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для вида цены
//
// Параметры:
//  Форма - Форма - Содержит данную форму 
//  ИмяПоляВводаВидаЦены - Строка - Наименование элемента формы, содержащего вид цены,
//                                  если оно отличается от "ТоварыВидЦены".
//  ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВидЦены",
//                             если он отличается от "Объект.Товары.ВидЦены".
//
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеВидовЦен(Форма,
											   ИмяПоляВводаВидаЦены = "ТоварыВидЦены",
											   ПутьКПолюОтбора = "Объект.Товары.ВидЦены")
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаВидаЦены].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.CRM_ЭтоРазделитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<произвольная>'"));	
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

#Область CRM_Модуль_ОбработчикиЭлементовФормы

// +CRM_Модуль
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РасчитатьИтогоПоВарианту();
КонецПроцедуры
// -CRM_Модуль

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// +CRM_Модуль перенесено из ЗапасыПриНачалеРедактирования
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.CRM_ИДВарианта  = CRM_ИДВарианта;
	ТекущаяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(CRM_ИДВарианта);
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатура;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтаФорма);
	
	// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБанковскийСчетКонтрагента()
	
	Объект.CRM_Модуль_БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент, Объект.Валюта);
	
КонецПроцедуры// ЗаполнитьБанковскийСчетКонтрагента()

&НаСервере
Процедура ЗаполнитьБанковскийСчетОрганизации()
	
	Объект.CRM_Модуль_БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.Валюта);
	
КонецПроцедуры// ЗаполнитьБанковскийСчетКонтрагента()

#КонецОбласти

#Область Обработчики_Вызываемые_Из_Формы

#Область КоммерческиеПредложенияДокументыКлиентУТ

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры.
//
Процедура ОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
	
		КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(ЭтотОбъект, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.Форма" Тогда
		
		КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(ЭтотОбъект, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриОткрытии(Форма, Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриЗакрытии(Форма)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуВнешнееСобытие(Форма, Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(ЭтотОбъект.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		Результат = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект), Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПередЗаписью(Форма, Отказ, ПараметрыЗаписи)
	
	Если Форма.НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах
		И Не Форма.Объект.СкидкиРассчитаны Тогда
		ПараметрыЗаписи.ТребуетсяВопросОРасчетеСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = НалогообложениеНДС;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",          ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",       ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",             Новый Структура("Номенклатура", "ТипНоменклатуры"));
	// +CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                          ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",    СтруктураПереопределяемыеДействия(ЭтотОбъект));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
	ТекущаяСтрока.ЕдиницаИзмерения    = ТекущаяСтрокаСтруктура.Упаковка;
	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество          = ТекущаяСтрокаСтруктура.КоличествоУпаковок;
		
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый",  СтруктураПереопределяемыеДействия(ЭтотОбъект));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураЗаполненияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураЗаполненияЦены.Вставить("ИмяКолонкиУпаковка", "Упаковка");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.КоличествоВременное);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	ТекущаяСтрокаСтруктура.Количество = ТекущаяСтрока.КоличествоВременное;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество = ТекущаяСтрокаСтруктура.КоличествоУпаковок;
	ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрокаСтруктура.Упаковка;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов = Ложь)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество = ТекущаяСтрокаСтруктура.КоличествоУпаковок;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	ЭтоПередачаТоваров = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию");
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ЭтоПередачаТоваров);
	СтруктураПересчетаЦены.Вставить("ИмяКоличества", "Количество");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                   СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                  СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов = Ложь)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки",                "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) 
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки",               "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                             "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",          Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки, ИмяКоличества",
	                                                                                           Ложь, Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",  Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                          СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                         СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуТоварыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов)
	
	Если Элемент.Имя = "Товары" Тогда
	
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
			
			Если Поле.Имя <> "ТоварыКомментарийДляПокупателя"
				Или Поле.Имя <> "ТоварыКомментарийВнутренний" Тогда
			
				ТребуетсяСерверныйВызов = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если Поле.Имя = "ТоварыЦена" Тогда
			
				Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
					ТребуетсяСерверныйВызов = Истина;
					Возврат;
				КонецЕсли;
				
				ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
				Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
					ОчиститьСообщения();
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
						Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ЭтотОбъект.ВалютаДокумента) Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ЭтотОбъект.ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	Если Не ТребуетсяСерверныйВызов Тогда
		ЭтотОбъект.ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(ЭтотОбъект, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов)

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено';
														|en = 'Currency is required'"), Объект.Ссылка, "Объект.Валюта");
		Возврат;
	КонецЕсли;
	
	Если НастройкиУчета.ИспользуютсяВидыЦен Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ОповещениеПослеВыбораЦеныДляПодбора = Новый ОписаниеОповещения("ПослеВыбораЦенДляПодбора", ЭтотОбъект, ДополнительныеПараметры);
		
		ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
		Если ВидЦеныПрайсЛист <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеВыбораЦеныДляПодбора, ВидЦеныПрайсЛист);
			Возврат;
		КонецЕсли;
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ЦенаВключаетНДС",        Объект.ЦенаВключаетНДС);
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", Истина);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбор);
		ПараметрыОткрытияФормы.Вставить("Заголовок", НСтр("ru = 'Вид цены для отображения в подборе'"));
		
		
		ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",
		             ПараметрыОткрытияФормы,,,,,
		             ОповещениеПослеВыбораЦеныДляПодбора);
		
	Иначе
		
		КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(ЭтотОбъект, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"), ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура ПослеВыбораЦенДляПодбора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	Иначе
		ВидЦены = Результат;
	КонецЕсли;
	
	КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(ДополнительныеПараметры.Форма, 
	                                                                         ВидЦены, 
	                                                                         ДополнительныеПараметры.ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(Форма, ВидЦены, ОповещениеПриЗавершении)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%';
							|en = 'Pick goods in %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту';
																				|en = 'sales quotation'"));
	КонецЕсли;
	
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                         Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                     Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",                  НалогообложениеНДС);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",             МассивОтборовПоТипуНоменклатуры);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",                Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию"));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                Истина);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                           ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                            Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦены",                             ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами", Истина);
	
	Если ПоЗапросу Тогда
		
		ПараметрыФормы.Вставить("НеРазбиватьНаборыПоКомплектующим",Истина);
		
		ВариантыПредставленияНабораВПечатныхФормах = Новый Массив;
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка"));
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор"));
		
		ПараметрыФормы.Вставить("ОтборПоВариантуПредставленияНабораВПечатныхФормах", ВариантыПредставленияНабораВПечатныхФормах);
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
// 
Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора)
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект), ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = ЭтотОбъект.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма), ДанныеШтрихкодов);
		
	ИначеЕсли ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактированиеНабора", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	ИначеЕсли ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактироватьНабор", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов)
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		Если НаборыКлиент.ДействиеРедактироватьНабор(Результат) Тогда
			НаборыКлиент.ПриУдаленииКомплектующих(Форма, "Товары", ДополнительныеПараметры)
		ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Результат) Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("АдресТоваровВХранилище") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактированиеНабора") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактироватьНабор") Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("РедактироватьНабор") Тогда
		
			Если РезультатОбработки <> Неопределено Тогда
				
				ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", РезультатОбработки, Форма, Форма.УникальныйИдентификатор);
				
			КонецЕсли;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("РедактированиеНабора") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ВыбранноеЗначение = "УдалитьВесьНабор" Тогда
		
		Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении)
	
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	
	ПараметрыФормы.ЗагружатьЦены      = Истина;
	ПараметрыФормы.ЦенаВключаетНДС    = Объект.ЦенаВключаетНДС;
	ПараметрыФормы.Организация        = Объект.Организация;
	ПараметрыФормы.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыФормы.ДатаЗаполнения     = Объект.Дата;
	ПараметрыФормы.ПараметрыОтбора.Вставить("ТипНоменклатуры", Новый ФиксированныйМассив(МассивОтборовПоТипуНоменклатуры));
	
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыФормы, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов)
	
	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	ИначеЕсли Команда.Имя = "ПоказатьНаборы" Тогда
		
		Элементы.ТоварыГруппаНаборы.Видимость = Не Элементы.ТоварыГруппаНаборы.Видимость;
		Элементы.ПоказатьНаборы.Пометка       = Не Элементы.ПоказатьНаборы.Пометка;
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Процедура КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат)

	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуСообщений(Результат, ЭтотОбъект);
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		Если Результат <> Неопределено Тогда
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", Результат, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Функция СтруктураПереопределяемыеДействия(Форма)
	
	СтруктураПереопределяемыеДействия = Новый Структура;
	СтруктураПереопределяемыеДействия.Вставить("ИмяФормы",          Форма.ИмяФормы);
	СтруктураПереопределяемыеДействия.Вставить("ИмяТабличнойЧасти", "Товары");
	
	Возврат СтруктураПереопределяемыеДействия;
	
КонецФункции

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем СтруктураПараметровДействия;
	
	СтруктураПолейТЧ = Новый Структура;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоВременное", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия)
	   И СтруктураПараметровДействия <> Неопределено 
	   И СтруктураПараметровДействия.Свойство("НужноОкруглять")
	   И ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		СтруктураПолейТЧ.Вставить("НужноОкруглять");	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", СтруктураПараметровДействия)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс + "ВЕТИС", 0);
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			СтруктураПолейТЧ.Вставить("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовЗаказРеализация");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
	
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда

		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизитаСтатьиРасходов") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизитаСтатьиРасходов"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		Если СтруктураДействий.ПроверитьЗаполнитьОбеспечение.Свойство("ПроверитьЗаполнитьНазначениеОтправителя") Тогда	
			СтруктураПолейТЧ.Вставить("НазначениеОтправителя")
		Иначе
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИндексАкцизнойМарки", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("ИндексАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("КоличествоАкцизныхМарок");
		СтруктураПолейТЧ.Вставить("Количество");
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Если СтруктураПараметровДействия.Свойство("ИмяКолонкиКоличество") Тогда
				СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяКолонкиКоличество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруЕГАИС", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("НоменклатураЕГАИС");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьАлкогольнуюПродукцию", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Продукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеТекст");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИменаПолей = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство(ИменаПолей.Серия) Тогда
					СтруктураПолейТЧ.Вставить(ИменаПолей.Серия);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Номенклатура);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Характеристика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("КатегорияЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("СпособПогашенияСтоимостиБУ");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("СрокЭксплуатации");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия + "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиентЛокализация.ПолучитьТекущуюСтрокуСтруктурой(СтруктураДействий, СтруктураПолейТЧ);
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

&НаКлиенте
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыКлиентУТ
//
Функция ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус)
	
	СтруктураВозврата = Новый Структура("Серия, Номенклатура, Характеристика");
	
	Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
		СтруктураВозврата.Серия = "Серия";
		СтруктураВозврата.Номенклатура = "Номенклатура"; 
		СтруктураВозврата.Характеристика = "Характеристика";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОтправитель" Тогда
		СтруктураВозврата.Серия = "СерияОтправитель";
		СтруктураВозврата.Номенклатура = "НоменклатураОтправитель";
		СтруктураВозврата.Характеристика = "ХарактеристикаОтправитель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПолучатель" Тогда
		СтруктураВозврата.Серия = "СерияПолучатель";
		СтруктураВозврата.Номенклатура = "НоменклатураПолучатель";
		СтруктураВозврата.Характеристика = "ХарактеристикаПолучатель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОприходование" Тогда
		СтруктураВозврата.Серия = "СерияОприходование";
		СтруктураВозврата.Номенклатура = "НоменклатураОприходование";
		СтруктураВозврата.Характеристика = "ХарактеристикаОприходование";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийНаСкладах" Тогда
		СтруктураВозврата.Серия = "СерияНаСкладах";
		СтруктураВозврата.Номенклатура = "НоменклатураНаСкладах";
		СтруктураВозврата.Характеристика = "ХарактеристикаНаСкладах";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийТоварыУПартнеров" Тогда
		СтруктураВозврата.Серия = "СерияТоварыУПартнеров";
		СтруктураВозврата.Номенклатура = "НоменклатураТоварыУПартнеров";
		СтруктураВозврата.Характеристика = "ХарактеристикаТоварыУПартнеров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПереданныхТоваров" Тогда
		СтруктураВозврата.Серия = "СерияПереданныхТоваров";
		СтруктураВозврата.Номенклатура = "НоменклатураПереданныхТоваров";
		СтруктураВозврата.Характеристика = "ХарактеристикаПереданныхТоваров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийСписываемаяСерия" Тогда
		СтруктураВозврата.Серия = "СерияСписываемаяСерия";
		СтруктураВозврата.Номенклатура = "НоменклатураСписываемаяСерия";
		СтруктураВозврата.Характеристика = "ХарактеристикаСписываемаяСерия";
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

#КонецОбласти

#Область КоммерческиеПредложенияДокументыУТ

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура ПриВставкеСтрокИзБуфераОбмена
// 
// См. КоммерческиеПредложенияДокументыПереопределяемый.ПослеВставкиСтрокИзБуфераОбмена.
//
Процедура КоммерческоеПредложениеКлиентуПриВставкеСтрокИзБуфераОбмена(Форма, КоличествоСтрок, СтандартнаяОбработка)
	
	НастройкиУчета                    = КоммерческиеПредложенияДокументы.НастройкиУчета();
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	ДанныеБуфера = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена();
	
	// +CRM_Модуль
	Если Не ЗначениеЗаполнено(ДанныеБуфера) Тогда
		КоличествоСтрок = 0;
		Возврат;
	КонецЕсли;
	НомерВарианта = Форма.CRM_ИДВарианта;
	ИмяВарианта = Форма.СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
	ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
	// -CRM_Модуль
	
	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	
	Для каждого СтрокаТовара Из ДанныеБуфера Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		// +CRM_Модуль
		ТекущаяСтрока.CRM_ИДВарианта  = НомерВарианта;
		ТекущаяСтрока.CRM_ИмяВарианта = ИмяВарианта;
		ТекущаяСтрока.Артикул = ТекущаяСтрока.Номенклатура.Артикул;
		// -CRM_Модуль
		Если ИспользоватьНаборы Тогда
			ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		КонецЕсли;
		Если НЕ НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
		ПараметрыДействия.НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",             Новый Структура("Номенклатура", "ТипНоменклатуры"));
		// +CRM_Модуль
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
		// -CRM_Модуль
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                          ПараметрыДействия);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	КоличествоСтрок = ДанныеБуфера.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура КоммерческоеПредложениеКлиентуПриИзмененииПартнера
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииПартнераСервер(Форма)
	
	Объект = Форма.Объект;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Клиент, Объект.Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Клиент, Объект.КонтактноеЛицо);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Объект = Форма.Объект; // ДокументОбъект
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, Форма);
	
	Если Объект.Ссылка.Пустая() Тогда
		КоммерческоеПредложениеКлиентуПриСозданииЧтенииНаСервере(Форма);
	КонецЕсли;
	
#Область СвязиПараметровВыбора

	// Контрагент
	НовыеСвязи = Новый Массив;
	НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Клиент"));
	Форма.Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
	// Контактное лицо 
	НовыеСвязи = Новый Массив;
	НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Клиент"));
	Форма.Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
	// Единица измерения
	НовыеСвязи = Новый Массив;
	НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Номенклатура", "Элементы.Товары.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять));
	Форма.Элементы.ТоварыЕдиницаИзмерения.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
	// Вид цены
	НовыеСвязи = Новый Массив;
	НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Отбор.ЦенаВключаетНДС", "Объект.ЦенаВключаетНДС"));
	Форма.Элементы.ТоварыВидЦены.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
#КонецОбласти

#Область ПараметрыВыбора
	
	// Партнер
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
	Форма.Элементы.Клиент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	// Контрагент
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("ЗаголовокПоПартнеру", НСтр("ru = 'По клиенту';
																			|en = 'By customer'")));
	Форма.Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	// Номенклатура
	НовыеПараметры = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивТиповНоменклатуры));
	Форма.Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	// Вид цены
	НовыеПараметры = Новый Массив;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриПродаже", Истина));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
	Форма.Элементы.ТоварыВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
#КонецОбласти

#Область УправлениеОтображениемРеквизитов
	
	Форма.Элементы.ТоварыСуммаСНДС.ТолькоПросмотр                   = Истина;
	Форма.Элементы.ТоварыЕдиницаИзмерения.АвтоОтметкаНезаполненного = Ложь;
	
#КонецОбласти

#Область ДобавлениеЭлементовФормы

	ДобавитьЭлементФормыЕдиницаИзмерения(Форма);
	
	КомандаФормы = Форма.Команды.Добавить("ПоказатьСообщения");
	КомандаФормы.Заголовок   = НСтр("ru = 'Есть сообщения';
									|en = 'There are messages'");
	КомандаФормы.Действие    = "Подключаемый_ПереопределяемаяКоманда";
	КомандаФормы.Картинка    = БиблиотекаКартинок.Предупреждение;
	
	Элемент             = Форма.Элементы.Добавить("ПоказатьСообщения", Тип("КнопкаФормы"), Форма.Элементы.ГруппаКлиентКонтрагент);
	Элемент.Вид         = ВидКнопкиФормы.Гиперссылка;
	Элемент.ИмяКоманды  = "ПоказатьСообщения";
	
#Область Сделка

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами") Тогда
		
		Элемент = Форма.Элементы.Вставить("Сделка", Тип("ПолеФормы"), Форма.Элементы.ГруппаДополнительноПраво, Форма.Элементы.Организация);
		Элемент.ПутьКДанным            = "Объект.Сделка";
		Элемент.Вид                    = ВидПоляФормы.ПолеВвода;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина     = 28;
		
		НовыеСвязи = Новый Массив;
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Клиент"));
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
		
	КонецЕсли;

#КонецОбласти

#Область КартаЛояльности

	Если ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности") Тогда
		
		Элемент = Форма.Элементы.Вставить("КартаЛояльности", Тип("ПолеФормы"), Форма.Элементы.ГруппаДополнительноПраво, Форма.Элементы.ДекорацияДополнительноПравоПустая);
		Элемент.ПутьКДанным            = "Объект.КартаЛояльности";
		Элемент.Вид                    = ВидПоляФормы.ПолеВвода;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина     = 28;
		
		НовыеСвязи = Новый Массив;
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Клиент"));
		Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
		
	КонецЕсли;

#КонецОбласти	
	
#Область Наборы

	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");

	Если ИспользоватьНаборы
		И Не Форма.ПоЗапросу Тогда
	
		Элемент = Форма.Элементы.Вставить("ТоварыИндексНабора", Тип("ПолеФормы"), Форма.Элементы.Товары, Форма.Элементы.ТоварыНоменклатура);
		
		Элемент.ПутьКДанным        = "Объект.Товары.ИндексНабора";
		Элемент.Вид                = ВидПоляФормы.ПолеКартинки;
		Элемент.КартинкаЗначений   = БиблиотекаКартинок.Наборы;
		Элемент.КартинкаШапки      = БиблиотекаКартинок.Набор;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элемент = Форма.Элементы.Вставить("ТоварыГруппаНаборы", Тип("ГруппаФормы"), Форма.Элементы.Товары, Форма.Элементы.ТоварыНоменклатура);
		Элемент.Заголовок        = НСтр("ru = 'Наборы';
										|en = 'Sets'");
		Элемент.Группировка      = ГруппировкаКолонок.ВЯчейке;
		Элемент.ОтображатьВШапке = Истина;
		Элемент.Видимость        = Ложь;
		
		Элемент = Форма.Элементы.Вставить("ТоварыНоменклатураНабора", Тип("ПолеФормы"), Форма.Элементы.ТоварыГруппаНаборы);
		Элемент.ПутьКДанным = "Объект.Товары.НоменклатураНабора";
		Элемент.ОтображатьВШапке = Ложь;
		
		Элемент = Форма.Элементы.Вставить("ТоварыХарактеристикаНабора", Тип("ПолеФормы"), Форма.Элементы.ТоварыГруппаНаборы);
		Элемент.ПутьКДанным = "Объект.Товары.ХарактеристикаНабора";
		Элемент.ОтображатьВШапке = Ложь;
		
		КомандаФормы = Форма.Команды.Добавить("СоставНабора");
		КомандаФормы.Заголовок                 = НСтр("ru = 'Состав набора';
														|en = 'Set content'");
		КомандаФормы.Действие                  = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Картинка                  = БиблиотекаКартинок.Набор;
		КомандаФормы.Отображение               = ОтображениеКнопки.Картинка;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		Элемент             = Форма.Элементы.Вставить("СоставНабора", Тип("КнопкаФормы"), Форма.Элементы.ГруппаКоманднаяПанельТоварыСрокПоставки, Форма.Элементы.ТоварыПоискПоШтрихкоду);
		Элемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.Ширина      = 3;
		Элемент.ИмяКоманды  = "СоставНабора";
		
		КомандаФормы = Форма.Команды.Добавить("ПоказатьНаборы");
		КомандаФормы.Заголовок   = НСтр("ru = 'Показать наборы';
										|en = 'Show sets'");
		КомандаФормы.Действие    = "Подключаемый_ПереопределяемаяКоманда";
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
		
		Элемент                       = Форма.Элементы.Добавить("ПоказатьНаборы", Тип("КнопкаФормы"), Форма.Элементы.КоманднаяПанельТовары);
		Элемент.Вид                   = ВидКнопкиФормы.ОбычнаяКнопка;
		Элемент.ТолькоВоВсехДействиях = Истина;
		Элемент.ИмяКоманды            = "ПоказатьНаборы";
	
	КонецЕсли;
	
#КонецОбласти
	
#КонецОбласти
	
#Область Локализация
	
	// Скрытие элементов по учету НДС.
	ИспользоватьУчетНДС = ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
	
	Если Не ИспользоватьУчетНДС Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ТоварыСтавкаНДС");
		МассивЭлементов.Добавить("ТоварыСуммаНДС");
		МассивЭлементов.Добавить("ТоварыСуммаСНДС");
		МассивЭлементов.Добавить("Налогообложение");
		МассивЭлементов.Добавить("ЦенаВключаетНДС");
		МассивЭлементов.Добавить("ГруппаСтраницыНДС");
		МассивЭлементов.Добавить("СтраницаВсегоСНДС");
		
		Для каждого ЭлементКоллекции Из МассивЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
				ЭлементКоллекции, "Видимость", ИспользоватьУчетНДС);
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
	ОбновитьЗависимыеРеквизитыНоменклатуры(Форма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПартнер",             "Клиент");
	ДополнительныеПараметры.Вставить("НеВыводитьСообщенияПоСоглашению", Истина);
	
	СкидкиНаценкиЗаполнениеСервер.НастроитьКомандуПоказатьСообщения(Объект, Форма.Элементы.ПоказатьСообщения,,ДополнительныеПараметры);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		ЭлементСписка = Форма.Элементы.Операция.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию);
			
		Если ЭлементСписка <> Неопределено Тогда
			Форма.Элементы.Операция.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ТоварыСтавкаНДС.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(Форма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Форма.Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриЧтенииНаСервере(Форма, ТекущийОбъект)
	
	КоммерческоеПредложениеКлиентуПриСозданииЧтенииНаСервере(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриСозданииЧтенииНаСервере(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	КоммерческоеПредложениеКлиентуСоздатьДополнительныеРеквизитыФормы(Форма);
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);
	
	Форма.ВалютаДокумента = Объект.Валюта;
	Форма.ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	Форма.ИспользоватьГрафикиОплаты        = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	
	Элементы.ЗаполнитьУсловияОплаты.Видимость = Форма.ИспользоватьСоглашенияСКлиентами 
	                                            Или Форма.ИспользоватьГрафикиОплаты;
	
	ОпределитьВидЦеныПоУмолчанию(Форма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		НаборыСервер.ЗаполнитьСлужебныеРеквизиты(Форма);
	КонецЕсли;
	
	ПараметрыЗаполнения = КоммерческоеПредложениеКлиентуПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	НалогообложениеНДС = Форма.НалогообложениеНДС;
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения, Форма.УчетНДСКэшированныеЗначенияПараметров);
	
	Налогообложение = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеКоммерческихПредложенийПоНалогообложениюНДС(НалогообложениеНДС);
	Если Налогообложение <> Объект.Налогообложение Тогда
		Объект.Налогообложение = Налогообложение;
		КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДССервер(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПослеЗаписиНаСервере(Форма, ТекущийОбъект)

	ОбновитьЗависимыеРеквизитыНоменклатуры(Форма);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Если Форма.Объект.Товары.Количество() > 0
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "ИндексНабора") Тогда
		НаборыСервер.ЗаполнитьСлужебныеРеквизиты(Форма);
	КонецЕсли;
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);

КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриУстановкеУсловногоОформления(Форма)
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы           = Форма.Элементы;
	
	// +CRM
	//Ценообразование.УстановитьУсловноеОформлениеВидовЦен(Форма);
	УстановитьУсловноеОформлениеВидовЦен(Форма);
	НаборыСервер.УстановитьУсловноеОформление(Форма, "Товары");
	// -CRM
	
#Область Цена
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеТоварыЦена = Элементы.ТоварыЦена; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область Сумма

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеТоварыСумма = Элементы.ТоварыЦена; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДССервер(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	СтруктураЗаполненияСтавкиНДС.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	// +CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",              СтруктураЗаполненияСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",             СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",            СтруктураПересчетаСуммы);

	// +CRM_Модуль
	//ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	CRM_Модуль_ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	// -CRM_Модуль
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДССервер(Форма, Налогообложение)

	Объект = Форма.Объект;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОпределитьВидЦеныПоУмолчанию(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииВалюты(Форма)

	Объект = Форма.Объект;
	
	НоваяВалюта                 = Объект.Валюта;
	СтараяВалюта                = Форма.ВалютаДокумента;
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата, ВалютаРегламентированногоУчета);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата, ВалютаРегламентированногоУчета);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина,
		"Количество");
		
	Форма.ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура КоммерческоеПредложениеКлиентуПриИзмененииОрганизации
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииОрганизацииСервер(Форма)

	КоммерческоеПредложениеКлиентуЗаполнитьНалогообложениеНДСПродажи(Форма);
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Форма.Объект.Организация);
	Если Не ЗначениеЗаполнено(Форма.Объект.Валюта) Тогда
		Форма.Объект.Валюта = ВалютаРеглУчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// Исходная процедура КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации
// 
Процедура КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперацииСервер(Форма)
	
	КоммерческоеПредложениеКлиентуЗаполнитьНалогообложениеНДСПродажи(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура ОпределитьВидЦеныПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
	ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
	ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
	ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
	
	Форма.ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура ОбновитьЗависимыеРеквизитыНоменклатуры(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураДействий = Новый Структура;
	// +CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM_Модуль
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуЗаполнитьНалогообложениеНДСПродажи(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыЗаполнения = КоммерческоеПредложениеКлиентуПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения, Форма.УчетНДСКэшированныеЗначенияПараметров);
	
	Налогообложение = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеКоммерческихПредложенийПоНалогообложениюНДС(НалогообложениеНДС);
	Если Налогообложение <> Объект.Налогообложение Тогда
		Объект.Налогообложение = Налогообложение;
		КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДССервер(Форма);
	КонецЕсли;
	
	Если Налогообложение Тогда
		ПараметрыУчетаОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(ПараметрыЗаполнения.Организация,ПараметрыЗаполнения.Дата);
		Форма.НалогообложениеНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи;
	Иначе
		Форма.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Функция КоммерческоеПредложениеКлиентуПараметрыЗаполненияНалогообложенияНДСПродажи(Объект)
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.Дата        = Объект.Дата;
	ПараметрыЗаполнения.ЭтоЗаказ    = Истина;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ВидыОперацийКоммерческихПредложений.ЗакупкаУПоставщика Тогда
		
		ПараметрыЗаполнения.РеализацияТоваров    = Истина;
		ПараметрыЗаполнения.РеализацияРаботУслуг = Истина;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию Тогда
		
		ПараметрыЗаполнения.ПередачаНаКомиссию = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуСоздатьДополнительныеРеквизитыФормы(Форма)
			
	Если Не Форма.ДополнительныеРеквизитыСозданы Тогда
		
		ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТипНоменклатуры",
		                                                  Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"),
		                                                  "Объект.Товары"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидЦеныПоУмолчанию",
		                                                  Новый ОписаниеТипов("СправочникСсылка.ВидыЦен")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВалютаДокумента",
		                                                  Новый ОписаниеТипов("СправочникСсылка.Валюты")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УчетНДСКэшированныеЗначенияПараметров",
		                                                  Новый ОписаниеТипов()));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования",
		                                                  Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование",
		                                                  Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресПримененныхСкидокВоВременномХранилище",
		                                                  Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("УправляемыеСкидки",
		                                                  Новый ОписаниеТипов("СписокЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьСоглашенияСКлиентами",
		                                                  Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьГрафикиОплаты",
		                                                  Новый ОписаниеТипов("Булево")));
		
		Если ИспользоватьНаборы Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИндексНабора",
			                                                  ОбщегоНазначения.ОписаниеТипаЧисло(10),
			                                                  "Объект.Товары"));
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КоличествоВременное",
		                                                  Новый ОписаниеТипов("Число"),
		                                                  "Объект.Товары"));
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма.ДополнительныеРеквизитыСозданы = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ДополнительныеПараметры, РезультатОбработки)
	
	ТипОперации = "ПодборНоменклатуры";
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("РедактированиеНабора") Тогда
		
			ТипОперации = "РедактированиеНабора";
			
		ИначеЕсли ВыбранноеЗначение.Свойство("РедактироватьНабор") Тогда 
			
			ТипОперации = "РедактироватьНабор";
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ВыбранноеЗначение = "УдалитьВесьНабор" Тогда
		
		ТипОперации = "УдалениеНабора";
		
	КонецЕсли;
	
	Если ТипОперации = "ПодборНоменклатуры" Тогда
		
		Объект = Форма.Объект;
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураЗаполнитьСтавкуНДС = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
		СтруктураЗаполнитьСтавкуНДС.НалогообложениеНДС = 
			КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(
				Объект.Налогообложение);
		СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		КэшированныеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураЗаполнитьСтавкуНДС = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
		СтруктураЗаполнитьСтавкуНДС.НалогообложениеНДС = Форма.НалогообложениеНДС;
		СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		// +CRM_Модуль
		НомерВарианта = Форма.CRM_ИДВарианта;
		ИмяВарианта = Форма.СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
		ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
		// -CRM_Модуль
		
		Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(
				ТекущаяСтрока,
				СтрокаТовара,
				" НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, ВидЦены, Цена, ПроцентРучнойСкидки");
				
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ИндексНабора") Тогда
				ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
			КонецЕсли;
			
			// +CRM_Модуль
			ТекущаяСтрока.CRM_Содержание      = СформироватьСодержаниеДляПечати(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
			// -CRM_Модуль
				
			ТекущаяСтрока.ЕдиницаИзмерения    = СтрокаТовара.Упаковка;
			ТекущаяСтрока.КоличествоВременное = СтрокаТовара.Количество;
			ТекущаяСтрока.Количество          = СтрокаТовара.КоличествоУпаковок;
			
			// +CRM_Модуль
			ТекущаяСтрока.CRM_ИДВарианта  = НомерВарианта;
			ТекущаяСтрока.CRM_ИмяВарианта = ИмяВарианта;
			// -CRM_Модуль
			
			СтруктураЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
			СтруктураЗаполнитьСтавкуНДС.НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",             Новый Структура("Номенклатура", "ТипНоменклатуры"));
			// +CRM_Модуль
			СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
			// -CRM_Модуль
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                          СтруктураЗаполнитьСтавкуНДС);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЦикла;
		
		СтруктураХарактеристикиНоменклатуры = Новый Структура;
		СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
		
	ИначеЕсли ТипОперации = "УдалениеНабора" Тогда
		
		НаборыСервер.ПриУдаленииКомплектующих(Форма, "Товары", ДополнительныеПараметры);
		
	ИначеЕсли ТипОперации = "РедактированиеНабора" Тогда
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВоВременномХранилище));
		ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", Новый Структура);
		ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
		ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(Форма));
		
		СоответствиеИменКолонок = СоответствиеИменКолонокДляНабора();
		
		ПараметрыДанных.Вставить("СоответствиеИменКолонок", СоответствиеИменКолонок);
		
		НаборыСервер.ПриОкончанииРедактированияНабора(Форма, "Товары", ПараметрыДанных);
		
	ИначеЕсли ТипОперации = "РедактироватьНабор" Тогда
		
		РезультатОбработки = ПараметрыОткрытияСоставаНабора(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуЗагрузитьПолученныеИзВнешнегоФайлаДанные(Форма, ВыбранноеЗначение)
	
	Объект = Форма.Объект;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	
	// +CRM_Модуль
	НомерВарианта = Форма.CRM_ИДВарианта;
	ИмяВарианта = Форма.СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
	ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
	// -CRM_Модуль
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.ЕдиницаИзмерения    = СтрокаТоваров.Упаковка;
		//@skip-warning
		СтрокаТЧТовары.КоличествоВременное = СтрокаТоваров.Количество;
		СтрокаТЧТовары.Количество          = СтрокаТоваров.КоличествоУпаковок;
		
		// +CRM_Модуль
		СтрокаТЧТовары.CRM_ИДВарианта      = НомерВарианта;
		СтрокаТЧТовары.CRM_ИмяВарианта     = ИмяВарианта;
		// -CRM_Модуль
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, РезультатОбработки)
	
	Объект = Форма.Объект;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	СтруктураЗаполнитьСтавкуНДС.НалогообложениеНДС = Форма.НалогообложениеНДС;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	// +CRM_Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ТоварыНоменклатураЕдиницаИзмерения"));
	// -CRM_Модуль
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС",                         СтруктураЗаполнитьСтавкуНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи",                       ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСНДС",                       СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму",                           "Количество");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",        Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС",                       СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму",                           "Количество");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",        Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	СтруктураДействий =  ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкода;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ИмяКолонкиУпаковка                     = "ЕдиницаИзмерения";
	СтруктураДействий.ИмяКолонкиКоличество                   = "Количество";

	Если Объект.ХозяйственнаяОперация = Перечисления.ВидыОперацийКоммерческихПредложений.ЗакупкаУПоставщика Тогда
		СтруктураДействий.ТолькоТоварыИРабота = Истина;
	Иначе
		СтруктураДействий.ТолькоТовары = Истина;
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(Форма,Объект, СтруктураДействий, КэшированныеЗначения);
	РезультатОбработки = СтруктураДействий;
	РезультатОбработки.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Функция ПараметрыОткрытияСоставаНабора(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Товары = Элементы.Товары; // ТаблицаФормы
	ВыбраннаяСтрока = Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(Форма));
	ПараметрыКомплекта.Вставить("СоответствиеИменКолонокДляНабора", СоответствиеИменКолонокДляНабора());
	
	АдресНабораВоВременномХранилище = НаборыСервер.АдресНабораВоВременномХранилище(Форма, ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Форма.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыОткрытия.Вставить("НеПодбиратьМногооборотнуюТару", Истина);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	Колонки.Добавить("Упаковка");
	
	Если Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ЗакупкаУПоставщика") Тогда
		Если Форма.НастройкиУчета.ИспользуютсяРучныеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентРучнойСкидки");
			Колонки.Добавить("СуммаРучнойСкидки");
		КонецЕсли;
		Если Форма.НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентАвтоматическойСкидки");
			Колонки.Добавить("СуммаАвтоматическойСкидки");
		КонецЕсли;
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Функция СоответствиеИменКолонокДляНабора()
	
	ИменаКолонок = Новый Соответствие;
	ИменаКолонок.Вставить("Упаковка", "ЕдиницаИзмерения");
	ИменаКолонок.Вставить("КоличествоУпаковок", "Количество");
	
	Возврат ИменаКолонок;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура ДобавитьЭлементФормыЕдиницаИзмерения(Форма)
	
	Перем Элемент;
	
	// +CRM добавил элемент на форму вручную
	//Элемент     = Форма.Элементы.Добавить("ТоварыНоменклатураЕдиницаИзмерения", Тип("ПолеФормы"), Форма.Элементы.ТоварыУпаковкаЕдиницаИзмерения);
	//Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
	//Элемент.КнопкаОткрытия            = Ложь;
	//Элемент.ТолькоПросмотр            = Истина;
	//Элемент.ОтображатьВШапке          = Ложь;
	//Элемент.Ширина                    = 8;
	//
	//Элемент.ПутьКДанным               = "Объект.Товары.Номенклатура.ЕдиницаИзмерения";
	//Элемент.АвтоОтметкаНезаполненного = Ложь;
	// -CRM
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "Объект.Товары.ЕдиницаИзмерения";
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	
КонецПроцедуры

// +CRM_Модуль
&НаСервереБезКонтекста
Функция СформироватьСодержаниеДляПечати(Номенклатура, Характеристика)
	Возврат CRM_Модуль_РаботаСФормамиСервер.СформироватьСодержаниеДляПечати(Номенклатура, Характеристика);
КонецФункции

// -CRM_Модуль

#КонецОбласти

#КонецОбласти

#КонецОбласти

НеПроверятьВарианты = Ложь;
// -CRM
