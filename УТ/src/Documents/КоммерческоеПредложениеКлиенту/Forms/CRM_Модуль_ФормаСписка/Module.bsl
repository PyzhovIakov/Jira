
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	НастроитьЭлементыФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыПриСозданииНаСервере.ИсточникКомандЭДО = Список;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ПредставлениеСостояния.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ДатаАктуальности",
	                                                                   ТекущаяДатаСеанса(),
	                                                                   Истина);
	
	КоммерческиеПредложенияДокументыКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборСрокВыполнения.СписокВыбора);
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаСобытия, 
	                                                                                     ТекущаяДатаСеанса(), СтруктураБыстрогоОтбора,
	                                                                                     Элементы.ОтборСрокВыполнения.СписокВыбора);
	
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                                       "Состояние",
	                                                                                       СостояниеОтбор,
	                                                                                       СтруктураБыстрогоОтбора,,
	                                                                                       ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                                       "СостояниеОтбор");
	
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                                       "Менеджер",
	                                                                                        Менеджер,
	                                                                                        СтруктураБыстрогоОтбора);
																							
	// +CRM_Модуль																							
	//КоммерческиеПредложенияДокументыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);	
	КоммерческоеПредложениеКлиентуФормаСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ЭлементЗадание = Элементы.Найти("ПодменюСоздатьНаОснованииКомандаСоздатьНаОсновании0_БизнесПроцесс_Задание");
	Если ЭлементЗадание <> Неопределено Тогда
		Элементы.Удалить(ЭлементЗадание);
	КонецЕсли;
	// -CRM_Модуль
	// Конец ВводНаОсновании
	
	// +CRM
	Элементы.Переместить(Элементы.ФормаАвтоКнопки, Элементы.ПодменюПечать);
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаОповещенияФормСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +CRM
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	// -CRM
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
// +CRM_Модуль
	ФормаСоздатьНаОсновании = Элементы.Найти("ФормаСоздатьНаОсновании");
	Если ФормаСоздатьНаОсновании <> Неопределено Тогда
		ФормаСоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
// -CRM_Модуль
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПараметрыНастроек = КоммерческиеПредложенияДокументыКлиентСервер.ПараметрыОтбораПередЗагрузкойИзНастроек();
	ПараметрыНастроек.Список        = Список;
	ПараметрыНастроек.ИмяКолонки    = "Состояние";
	ПараметрыНастроек.ИмяНастройки  = "СостояниеОтбор";
	ПараметрыНастроек.Настройки     = Настройки;
	ПараметрыНастроек.Использование = Неопределено;
	ПараметрыНастроек.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(ПараметрыНастроек, СостояниеОтбор, СтруктураБыстрогоОтбора);
	
	ПараметрыНастроек = КоммерческиеПредложенияДокументыКлиентСервер.ПараметрыОтбораПередЗагрузкойИзНастроек();
	ПараметрыНастроек.Список        = Список; 
	ПараметрыНастроек.ИмяКолонки    = "Менеджер";
	ПараметрыНастроек.ИмяНастройки  = "Менеджер";
	ПараметрыНастроек.Настройки     = Настройки;
	
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(ПараметрыНастроек, Менеджер, СтруктураБыстрогоОтбора);
	
	КоммерческиеПредложенияДокументыКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(
		Список,
		Актуальность,
		ДатаСобытия,
		ТекущаяДатаСеанса(),
		СтруктураБыстрогоОтбора,
		Настройки,
		Элементы.ОтборСрокВыполнения.СписокВыбора);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                                            Элемент,
	                                                                            СостояниеОтбор,
	                                                                            Тип(ИмяТипаСостояние),
	                                                                            НСтр("ru = 'Выбранные состояния'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияПриИзменении(Элемент)

	КоммерческиеПредложенияДокументыКлиентСервер.ПриИзмененииОтбораПоАктуальности(
		Список, 
		Актуальность, 
		ДатаСобытия, 
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		Элементы.ОтборСрокВыполнения.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КоммерческиеПредложенияДокументыКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтаФорма,
		Список,
		"Актуальность",
		"ДатаСобытия",
		"ОтборСрокВыполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияПредложенияОчистка(Элемент, СтандартнаяОбработка)
	
	КоммерческиеПредложенияДокументыКлиентСервер.ПриОчисткеОтбораПоАктуальности(
		Список,
		Актуальность, 
		ДатаСобытия, 
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		СтандартнаяОбработка,
		Элементы.ОтборСрокВыполнения.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Менеджер",
	                                                                        Менеджер,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентами.ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	// +CRM
	//ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	Если СтрНайти(Команда.Имя, "ПодменюПечать") > 0 Или СтрНайти(Команда.Имя, "ФормаАвтоКнопки") Тогда
		ВыбранныйВариант = Неопределено;
			
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
			Варианты = ПолучитьВарианты();
			ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтотОбъект["ПараметрыПодключаемыхКоманд"].АдресТаблицыКоманд);
			Если Варианты.Количество() = 1 Тогда
				Подключаемый_ВыполнитьКомандуЗавершение(Варианты[0], Команда);
			Иначе	
				Если СтрНайти(ОписаниеКоманды.Идентификатор, "Договор") = 0 Тогда
					Варианты.Добавить(-1, НСтр("ru='Все варианты';en='All options'"));
				КонецЕсли;
				ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьКомандуЗавершение", ЭтотОбъект, Команда);
				Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите вариант для печати';en='Select Option for Printing'"));
			КонецЕсли;	
		Иначе
			Варианты = Новый СписокЗначений;
			Варианты.Добавить(Неопределено);
			Подключаемый_ВыполнитьКомандуЗавершение(Варианты[0], Команда)
		КонецЕсли;
	Иначе	
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	КонецЕсли;
	// -CRM
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Если РезультатВыбора.Значение <> Неопределено Тогда
		ВыбранныйВариант = РезультатВыбора.Значение;
		CRM_УправлениеПечатьюВызовСервера.ПоместитьВариантНаПечатьВХранилище(ВыбранныйВариант);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
// -CRM

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	НастройкиУчета = КоммерческиеПредложенияДокументы.НастройкиУчета();
	
	Элементы.Клиент.Видимость         = НастройкиУчета.ИспользуютсяПартнеры;
	Элементы.Контрагент.Видимость     = КоммерческиеПредложенияДокументыКлиентСервер.ПолеКонтрагентВидимо(НастройкиУчета);
	
	Элементы.Статус.Видимость         = НастройкиУчета.ИспользуютсяСтатусыКоммерческихПредложенийКлиентам;
	Элементы.Состояние.Видимость      = НастройкиУчета.ИспользуютсяСостоянияКоммерческихПредложенийКлиентам;
	Элементы.ОтборСостояние.Видимость = НастройкиУчета.ИспользуютсяСостоянияКоммерческихПредложенийКлиентам;
	
	Если НастройкиУчета.ИспользуютсяСостоянияКоммерческихПредложенийКлиентам Тогда
	
		Для Каждого Тип Из Метаданные.ОпределяемыеТипы.СостоянияКоммерческихПредложенийКлиенту.Тип.Типы() Цикл
			
			МетаданныеЗначения = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеЗначения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмяТипа = МетаданныеЗначения.ПолноеИмя();
			
			Если СтрНайти(ПолноеИмяТипа, "Перечисление") > 0 Тогда
				ИмяТипаСостояние = "ПеречислениеСсылка." + МетаданныеЗначения.Имя;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "СтатусыЧерновик",
	                                                                   НастройкиУчета.СтатусыКоммерческихПредложенийКлиентамЧерновик,
	                                                                   Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУчета = КоммерческиеПредложенияДокументы.НастройкиУчета();
	
	УсловноеОформление.Элементы.Очистить();
	Список.УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДатаСеанса();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = НастройкиУчета.СтатусыКоммерческихПредложенийКлиентамЧерновик;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СрокДействия");
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	КоммерческиеПредложенияДокументыПереопределяемый.ПриУстановкеУсловногоОформления(ЭтотОбъект);
	
КонецПроцедуры 

#Область БыстрыеОтборы

// Обработчик события начала выбора быстрого множественного отбора в списке.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - Форма, в которой выполняется действие.
//  Элемент            - ЭлементыФормы - элемент, для которого обрабатывается событие.
//  Значения           - СписокЗначений - содержит уже выбранные значения.
//  ТипПеречисления    - Тип - тип перечисления, по которому происходит отбор.
//  Заголовок - Строка - заголовок формы выбора.
//
&НаКлиенте
Процедура МножественныйОтборСпискаНачалоВыбора(Форма, Элемент, Значения, ТипПеречисления, Заголовок)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокОтбор", Значения);
	ПараметрыОткрытия.Вставить("ТипПеречисления", ТипПеречисления);
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаМножественногоОтбораПослеЗакрытия", Форма, ДополнительныеПараметры);
	ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.Форма.МножественныйОтборСписка", ПараметрыОткрытия, Элемент,,,,
		ОповещениеОЗакрытии);

КонецПроцедуры

// Параметры:
// 	Результат - Произвольный.
// 	ДополнительныеПараметры - Структура.
&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ОтборСостояние Тогда
		
		СостояниеОтбор = Результат;
		УстановитьОтборСостояние();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояние()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Состояние",
	                                                                        СостояниеОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеОтбор.Количество() > 0);
	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// +CRM

#Область CRM

&НаСервере
// Функция возвращает варианты коммерческого предложения.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Варианты коммерческого предложения.
//
Функция ПолучитьВарианты()
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Элементы.Список.ТекущаяСтрока);
КонецФункции // ПолучитьВарианты()

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	ВыбранныйВариант = Неопределено;
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		Варианты = ПолучитьВарианты();
		Варианты.Добавить(-1, "Все варианты");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПечатьВнешнегоМакетаЗавершение", ЭтотОбъект, Команда);
		Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
		Возврат;
	КонецЕсли;
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакетаЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ВыбранныйВариант = РезультатВыбора.Значение;
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

#КонецОбласти

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область CRM_Модуль

#Область Обработчики_Вызываемые_Из_Формы

&НаСервереБезКонтекста
// Процедура скопирована из общего модуля КоммерческиеПредложенияДокументыУТ
// 
Процедура КоммерческоеПредложениеКлиентуФормаСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ОтборМенеджер.РежимВыбораИзСписка = Истина;
		
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Форма.Элементы.ОтборМенеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.КоммерческоеПредложениеКлиенту));
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти
// -CRM

