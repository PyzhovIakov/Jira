//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьЗаголовок();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовок();
	ЗаполнитьСлужебныеПоляРасшифровкиСписаний();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаСписаний

&НаКлиенте
Процедура РасшифровкаСписанийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПослеУдаления(Элемент)
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийСуммаПриИзменении(Элемент)
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийВалютаПриИзменении(Элемент)
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийДокументУсловияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаСписаний.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУсловий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		РасшифровкаСписанийДокументУсловияПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
		
	Иначе
		
		ПустаяДата = Дата(1, 1, 1);
		
		ТекущиеДанные.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.ПустаяСсылка");
		ТекущиеДанные.НачалоПериода = ПустаяДата;
		ТекущиеДанные.ОкончаниеПериода = ПустаяДата;
		ТекущиеДанные.ВалютаОпределяетсяУсловием = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПартнерПриИзменении(Элемент)
	
	УстановитьОтборДоговораВРасшифровке();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборДоговораВРасшифровке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

// Параметры:
//  Команда - КомандаФормы - выполняемая команда.
//
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ПодобратьПоОстаткам(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ВидПоля = "Поле";
	ВидСообщения = "Заполнение";
	
	ПроверяемыеПоля = Новый Соответствие;
	ПроверяемыеПоля.Вставить("Организация", НСтр("ru = 'Организация'"));
	ПроверяемыеПоля.Вставить("Контрагент", НСтр("ru = 'Контрагент'"));
	ПроверяемыеПоля.Вставить("Дата", НСтр("ru = 'Дата'"));
	
	Для Каждого ТекущееПоле Из ПроверяемыеПоля Цикл
		
		Поле = ТекущееПоле.Ключ;
		
		Если НЕ ЗначениеЗаполнено(Объект[Поле]) Тогда
			
			ИмяПоля = ТекущееПоле.Значение;
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		
		ПодобратьНачисленныеРБ();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ЗаполнитьСлужебныеПоляРасшифровкиСписаний();
	РассчитатьИтоги();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Если Объект.Организация.Пустая() Тогда
		
		ВалютаРеглУчета = Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		
		ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		
		Если ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоВалют") Тогда
			
			Для Каждого СтрокаТЧ Из Объект.РасшифровкаСписаний Цикл
				
				СтрокаТЧ.Валюта = ВалютаРеглУчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРетроБонусовВспомогательные

&НаСервере
Процедура РасшифровкаСписанийДокументУсловияПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаТаблицы = Объект.РасшифровкаСписаний.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ВалютаОпределяетсяУсловием"));
	СтруктураДействий.Вставить(
		"ЗаполнитьВалютуРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "Валюта"));
	СтруктураДействий.Вставить(
		"ЗаполнитьТипРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ТипБонуса"));
	
	КешЗначений = Неопределено;
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
		СтрокаТаблицы,
		СтруктураДействий,
		КешЗначений,
		Объект.РасшифровкаСписаний);
	
	Если СтрокаТаблицы.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		СтрокаТаблицы.НачалоПериода = Дата(1, 1, 1);
		СтрокаТаблицы.ОкончаниеПериода = Дата(1, 1, 1);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоВалют") Тогда
		СтрокаТаблицы.Валюта = ВалютаРеглУчета;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьОформлениеРасшифровкаСписанийПериодДействия();
	УстановитьОформлениеРасшифровкаСписанийВалюта();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеРасшифровкаСписанийПериодДействия()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаСписанийНачалоПериода.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаСписанийОкончаниеПериода.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаСписаний.ТипБонуса");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыРетроБонусовПоставщиков.Остатки;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаСписаний.ДокументУсловий");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеРасшифровкаСписанийВалюта()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаСписанийВалюта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаСписаний.ВалютаОпределяетсяУсловием");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПоОстаткам

&НаКлиенте
Асинх Процедура ПодобратьНачисленныеРБ()
	
	ТребуетсяВопрос = Ложь;
	Если Объект.Проведен Тогда
		
		ТребуетсяВопрос = Истина;
		ТекстВопроса = НСтр("ru = 'Перед подбором начислений необходимо отменить проведение документа. Продолжить?'");
		
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			Если Объект.Проведен Тогда
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодобратьНачисленныеРБПродолжить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНачисленныеРБПродолжить()
	
	АдресТаблицыПодобранныхСтрок = АдресТаблицыПодобранныхСтрок();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("АдресТаблицыПодобранныхСтрок", АдресТаблицыПодобранныхСтрок);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ДатаАктуальности", Объект.Дата);
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьНачисленныеРБЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрНакопления.РетроБонусыПоставщиков.Форма.ФормаПодбораПоОстаткам",
		ПараметрыПодбора, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыПодобранныхСтрок()
	
	ТаблицаПодобранныхСтрок = Объект.РасшифровкаСписаний.Выгрузить();
	ТаблицаПодобранныхСтрок.Колонки.Добавить("ДокументВыбран", Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхСтрок.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодобранныхСтрок Цикл
		
		СтрокаТаблицы.ДокументВыбран = Истина;
		СтрокаТаблицы.Пометка = Истина;
		
	КонецЦикла;
	
	АдресТаблицыПодобранныхСтрок = ПоместитьВоВременноеХранилище(ТаблицаПодобранныхСтрок, УникальныйИдентификатор);
	
	Возврат АдресТаблицыПодобранныхСтрок;
	
КонецФункции

// Параметры:
//  Результат - Неопределено, Строка - 
//  ДополнительныеПараметры - Произвольный -
//
&НаКлиенте
Процедура ПодобратьНачисленныеРБЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И ЭтоАдресВременногоХранилища(Результат) Тогда
		
		ОбработкаПодбораДокументовНачислений(Результат);
		РассчитатьИтоги();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
//
&НаСервере
Процедура ОбработкаПодбораДокументовНачислений(Знач АдресВХранилище)
	
	ТаблицаОстатков = ТаблицаВыбранныхОстатков(АдресВХранилище);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
	Объект.РасшифровкаСписаний.Очистить();
	Объект.РасшифровкаСписаний.Загрузить(ТаблицаОстатков);
	ЗаполнитьСлужебныеПоляРасшифровкиСписаний();
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
//   * Партнер - СправочникСсылка.Партнеры
//   * Договор - СправочникСсылка.ДоговорыКонтрагентов
//   * ВидРетроБонуса - СправочникСсылка.ВидыРетроБонусовПоставщиков
//   * Описание - Строка
//   * НачалоДействия - Дата
//   * ОкончаниеДействия - Дата
//   * Сумма - ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
//   * Валюта - СправочникСсылка.Валюты
//
&НаСервере
Функция ТаблицаВыбранныхОстатков(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура РассчитатьИтоги()
	
	СуммаВсего = Объект.РасшифровкаСписаний.Итог("Сумма");
	
	КопияСписания = Объект.РасшифровкаСписаний.Выгрузить(,
		"Сумма, Валюта");
	КопияСписания.Свернуть("Валюта", "Сумма");
	
	Если КопияСписания.Количество() = 0 Тогда
		
		СтрокаЗаголовка = НСтр("ru = 'Итого: <нет данных>'");
		
	Иначе
		
		СтрокаЗаголовка = НСтр("ru = 'Итого:'");
		
	КонецЕсли;
	
	СтрокиНадписи = Новый Массив; // Массив из Строка
	СтрокиНадписи.Добавить(СтрокаЗаголовка);
	
	Для каждого СтрокаТаблицы Из КопияСписания Цикл
		
		СтрокиНадписи.Добавить(Формат(СтрокаТаблицы.Сумма, "ЧДЦ=2;"));
		Если СтрокаТаблицы.Валюта.Пустая() Тогда
			СтрокиНадписи.Добавить("<..>");
		Иначе
			СтрокиНадписи.Добавить(Строка(СтрокаТаблицы.Валюта));
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДекорацияИтого.Заголовок = СтрСоединить(СтрокиНадписи, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = РетроБонусыСервер.ЗаголовокДокумента(
		Объект.Ссылка, Объект.Номер, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеПоляРасшифровкиСписаний()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ЗаполнитьПризнакУказанияВалютыРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ВалютаОпределяетсяУсловием"));
	СтруктураДействий.Вставить(
		"ЗаполнитьТипРетроБонусовПоставщиков",
		Новый Структура("ДокументУсловий", "ТипБонуса"));
	
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаСписаний, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДоговораВРасшифровке()
	
	ДанныеСтроки = Элементы.РасшифровкаСписаний.ТекущиеДанные;
	ПараметрыВыбораДоговора = ПараметрыВыбораДоговора(ДанныеСтроки);
	Элементы.РасшифровкаСписанийДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораДоговора(ДанныеСтроки)
	
	ПоддерживаемыеТипыДоговоров = РетроБонусыКлиентСервер.ТипыДоговоровЗакупки();
	
	ПараметрыВыбораДоговора = Новый Массив(); // Массив из ПараметрВыбора
	
	ОтборТип = Новый ПараметрВыбора("Отбор.ТипДоговора", Новый ФиксированныйМассив(ПоддерживаемыеТипыДоговоров));
	ПараметрыВыбораДоговора.Добавить(ОтборТип);
	
	ОтборПометка = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	ПараметрыВыбораДоговора.Добавить(ОтборПометка);
	
	Если ДанныеСтроки <> Неопределено
	   И ЗначениеЗаполнено(ДанныеСтроки.Партнер) Тогда
		
		НовыйОтбор = Новый ПараметрВыбора("Партнер", ДанныеСтроки.Партнер);
		ПараметрыВыбораДоговора.Добавить(НовыйОтбор);
		
	КонецЕсли;
	
	Возврат ПараметрыВыбораДоговора;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method - неявный вызов из УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти