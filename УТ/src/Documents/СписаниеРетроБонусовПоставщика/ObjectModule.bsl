//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.НачислениеРетроБонусовПоставщика") Тогда
		
		ДокументНачисления = ДанныеЗаполнения; // ДокументСсылка.НачислениеРетроБонусовПоставщика
		ЗаполнитьПоДаннымДокументаНачислений(ДокументНачисления, СтандартнаяОбработка);
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ДокументыБезПериода = ДокументыУсловийСТипомБонусаОстатки();
	ПустаяДата = Дата(1, 1, 1);
	
	ВидПоля = "Колонка";
	ИмяСписка = НСтр("ru = 'Расшифровка списаний'");
	ИмяПоляНачалоПериода = НСтр("ru = 'Начало периода'");
	ИмяПоляОкончаниеПериода = НСтр("ru = 'Окончание периода'");
	
	Для Каждого ТекущаяСтрока Из РасшифровкаСписаний Цикл
		
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
		
		Если ДокументыБезПериода.Найти(ТекущаяСтрока.ДокументУсловий) = Неопределено
		   И ЗначениеЗаполнено(ТекущаяСтрока.ДокументУсловий) Тогда
			
			Если ТекущаяСтрока.НачалоПериода = ПустаяДата Тогда
				
				ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"РасшифровкаСписаний", НомерСтроки, "НачалоПериода");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					ВидПоля,
					,
					ИмяПоляНачалоПериода,
					НомерСтроки,
					ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКПолю,, Отказ);
				
			КонецЕсли;
			
			Если ТекущаяСтрока.ОкончаниеПериода = ПустаяДата Тогда
				
				ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"РасшифровкаСписаний", НомерСтроки, "ОкончаниеПериода");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					ВидПоля,
					,
					ИмяПоляОкончаниеПериода,
					НомерСтроки,
					ИмяСписка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКПолю,, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Запрещено изменение документа в подчиненном узле обмена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ВалютыБонусов = РасшифровкаСписаний.ВыгрузитьКолонку("Валюта");
	ВалютыБонусов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВалютыБонусов); // Массив из СправочникСсылка.Валюты
	
	МультивалютныйДокумент = (ВалютыБонусов.Количество() > 1);
	
	Если МультивалютныйДокумент Тогда
		
		СуммаДокумента = 0;
		Валюта = Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		
		СуммаДокумента = РасшифровкаСписаний.Итог("Сумма");
		Если ВалютыБонусов.Количество() > 0 Тогда
			Валюта = ВалютыБонусов[0];
		Иначе
			Валюта = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Массив из ДокументСсылка.УсловияРетроБонусовПоставщика
//
Функция ДокументыУсловийСТипомБонусаОстатки()
	
	Колонка = "ДокументУсловий";
	ДокументыУсловий = РасшифровкаСписаний.Выгрузить().ВыгрузитьКолонку(Колонка);  // Массив из ДокументСсылка.УсловияРетроБонусовПоставщика
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыУсловий", ДокументыУсловий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияРетроБонусовПоставщика.Ссылка КАК ДокументУсловий
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика КАК УсловияРетроБонусовПоставщика
	|ГДЕ
	|	УсловияРетроБонусовПоставщика.Ссылка В (&ДокументыУсловий)
	|	И УсловияРетроБонусовПоставщика.ТипБонуса = ЗНАЧЕНИЕ(Перечисление.ТипыРетроБонусовПоставщиков.Остатки)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(Колонка);
	
КонецФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСписанийРетроБонусовПоставщиков") Тогда
		
		Статус = Перечисления.СтатусыДокументовРетроБонусов.Черновик;
		
	Иначе
		
		Статус = Перечисления.СтатусыДокументовРетроБонусов.Согласован;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

// Параметры:
//  ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовПоставщика
//  СтандартнаяОбработка - Булево - 
//
Процедура ЗаполнитьПоДаннымДокументаНачислений(ДокументНачисления, СтандартнаяОбработка)
	
	ДанныеЗаполнения = Документы.НачислениеРетроБонусовПоставщика.ДанныеДокументаНачисления(ДокументНачисления);
	
	ДанныеШапки = ДанныеЗаполнения.Шапка;
	ДанныеСтрок = ДанныеЗаполнения.ДанныеСтрок;
	Контрагенты = ДанныеЗаполнения.Контрагенты;
	
	ДанныеШапки.Следующий();
	ТипБонуса = ДанныеШапки.ТипБонуса;
	
	Если Контрагенты.Количество() > 1
	   И ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		ТекстУведомления = НСтр("ru = 'В документе начисления указаны несколько контрагентов. Невозможно определить контрагента для создания документа списания.'");
		ВызватьИсключение ТекстУведомления;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапки);
		
		Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
		   И Контрагенты.Количество() > 0 Тогда
			
			Контрагенты.Следующий();
			Контрагент = Контрагенты.Контрагент;
			
		КонецЕсли;
		
		Пока ДанныеСтрок.Следующий() Цикл
			
			НоваяСтрока = РасшифровкаСписаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтрок);
			НоваяСтрока.Валюта = ДанныеШапки.Валюта;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли