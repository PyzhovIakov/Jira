//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.УсловияРетроБонусовПоставщика") Тогда
		
		СсылкаНаДокумент = ДанныеЗаполнения; // ДокументСсылка.УсловияРетроБонусовПоставщика
		ЗаполнитьПоУсловиюРетроБонусовПоставщиков(СсылкаНаДокумент);
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(НачалоДействия)
	   И ЗначениеЗаполнено(ОкончаниеДействия)
	   И ОкончаниеДействия < НачалоДействия Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата окончания действия должна быть не меньше даты начала действия'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОкончаниеДействия",, Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив; // Массив Из Строка
	
	Если ВидРетроБонуса.Пустая() Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ОтборУчастников");
		МассивНепроверяемыхРеквизитов.Добавить("ОтборТоваров");
		МассивНепроверяемыхРеквизитов.Добавить("ПериодичностьУсловий");
		МассивНепроверяемыхРеквизитов.Добавить("ПериодичностьНачислений");
		МассивНепроверяемыхРеквизитов.Добавить("СуммаПлан");
		МассивНепроверяемыхРеквизитов.Добавить("БонусПроцент");
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		
		МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
		МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
		МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
		МассивНепроверяемыхРеквизитов.Добавить("Склады");
		МассивНепроверяемыхРеквизитов.Добавить("Поставщики");
		
	Иначе
		
		Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
		 ИЛИ ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
			МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
			
		КонецЕсли;
		
		Если ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары");
			МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
			
		КонецЕсли;
		
		РеквизитыВида = ДанныеВидаДокумента();
		
		Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ОтборУчастников");
			МассивНепроверяемыхРеквизитов.Добавить("БонусПроцент");
			МассивНепроверяемыхРеквизитов.Добавить("СуммаПлан");
			МассивНепроверяемыхРеквизитов.Добавить("СуммаБонус");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Процент");
			МассивНепроверяемыхРеквизитов.Добавить("НачалоДействия");
			МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеДействия");
			МассивНепроверяемыхРеквизитов.Добавить("ПериодичностьНачислений");
			
			МассивНепроверяемыхРеквизитов.Добавить("Поставщики");
			МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
			МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
			
			Если ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все Тогда
				МассивНепроверяемыхРеквизитов.Добавить("Склады");
			КонецЕсли;
			
		ИначеЕсли ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ДатаОстатков");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборСкладов");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаБонус");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.БонусЗаЕдиницу");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборУчастников");
			МассивНепроверяемыхРеквизитов.Добавить("Склады");
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			
			Если НЕ РежимНесколькоПоставщиков Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("Поставщики");
				
			КонецЕсли;
			
			Если РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
				
			ИначеЕсли РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда	
				
				МассивНепроверяемыхРеквизитов.Добавить("Товары");
				
			КонецЕсли;
			
			Если РеквизитыВида.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
				
			ИначеЕсли РеквизитыВида.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
				
			КонецЕсли;
			
		ИначеЕсли ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ДатаОстатков");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборСкладов");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаБонус");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.БонусЗаЕдиницу");
			
			МассивНепроверяемыхРеквизитов.Добавить("Склады");
			МассивНепроверяемыхРеквизитов.Добавить("Поставщики");
			
			Если РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
				
			ИначеЕсли РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда	
				
				МассивНепроверяемыхРеквизитов.Добавить("Товары");
				
			КонецЕсли;
			
			Если РеквизитыВида.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
				
			ИначеЕсли РеквизитыВида.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапретПревышенияПоСумме =
			(РеквизитыВида.ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
			 И ЗапретНачисленияСверхПлана);
		Если РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура
		   И ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные
		   И НЕ ЗапретПревышенияПоСумме Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("БонусПроцент");
			
		КонецЕсли;
		
		Если БезРасчета
		 ИЛИ (РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется
			  И РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("БонусПроцент");
			
		КонецЕсли;
		
		ПроверитьЗаполнениеПериодовШапки(РеквизитыВида, Отказ);
		
		НужнаПроверкаПериодаУсловий =
			(ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
			ИЛИ ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи)
				 И РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется;
		Если БезРасчета
		 ИЛИ НЕ НужнаПроверкаПериодаУсловий Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ПериодичностьУсловий");
			
		КонецЕсли;
		
		Если БезРасчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ДатаОстатков");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборСкладов");
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары");
			МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
			МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
			МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборУчастников");
			МассивНепроверяемыхРеквизитов.Добавить("ОтборТоваров");
			МассивНепроверяемыхРеквизитов.Добавить("Склады");
			МассивНепроверяемыхРеквизитов.Добавить("Поставщики");
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("СуммаБонус");
			
		КонецЕсли;
		
		Если РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("СуммаПлан");
			
		КонецЕсли;
		
		Если РеквизитыВида.БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены
		   И РеквизитыВида.БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары.БазоваяЦена");
			
		КонецЕсли;
		
		НужнаПроверкаВалюты = 
			(БезРасчета
			 ИЛИ РеквизитыВида.БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены
			 ИЛИ РеквизитыВида.БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены)
			 ИЛИ ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
			 ИЛИ РеквизитыВида.ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма;
		
		Если НЕ НужнаПроверкаВалюты Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Валюта");
			
		КонецЕсли;
		
		ПроверитьПоСоставуПоставщики(Отказ);
		
		ПроверитьПоСоставуУчастниковКонтрагенты(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ);
		ПроверитьПоСоставуУчастниковИНН(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПроверитьПоСоставуТоваровНоменклатура(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ);
		ПроверитьПоСоставуТоваровСегментыНоменклатуры(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ);
		ПроверитьПоСоставуСкладов(РеквизитыВида, Отказ);
		ПроверитьДанныеПоставщиков(РеквизитыВида, Отказ);
		
		ПроверитьОграниченияПоНачислениям(РеквизитыВида, Отказ);
		
	КонецЕсли;
	
	ИсправлениеДокументов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Запрещено изменение документа в подчиненном узле обмена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	РетроБонусыСервер.ПроверитьЦепочкуДокументов(
		ИсправляемыйДокумент, СторнируемыйДокумент, ИдентификаторЦепочки, РежимЗаписи);
	
	ПропуститьПроверкуИзмененияПоСтатусу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства,
		"ПропуститьПроверкуИзмененияПоСтатусу",
		Ложь);
	
	РазрешеноИзменение = Истина;
	
	Если НЕ Статус.Пустая()
	   И НЕ ПропуститьПроверкуИзмененияПоСтатусу Тогда
		
		РазрешеноИзменение = Документы.УсловияРетроБонусовПоставщика.РазрешеноИзменениеПоСтатусу(Статус);
		Если НЕ РазрешеноИзменение Тогда
			
			ШаблонОшибки = НСтр("ru = 'Изменение документа в статусе ""%1"" запрещено'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Строка(Статус));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Статус",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВидРетроБонуса.Пустая() Тогда
		
		РеквизитыВида = ДанныеВидаДокумента();
		
		Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			
			ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
			ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.ПустаяСсылка();
			СуммаПлан = 0;
			БонусПроцент = 0;
			НачалоДействия = Дата(1, 1, 1);
			ОкончаниеДействия = Дата(1, 1, 1);
			
			Если НачислитьСразу Тогда
				
				СуммаБонус = Товары.Итог("СуммаБонус");
				Склады.Очистить();
				ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все;
				
			Иначе
				
				СуммаБонус = 0;
				
			КонецЕсли;
			
		Иначе
			
			ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
			ДатаОстатков = Дата(1, 1, 1);
			Если НЕ БезРасчета Тогда
				НачислитьСразу = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			
			ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
			
			ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
			
		КонецЕсли;
		
		Если БезРасчета Тогда
			
			ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.ПустаяСсылка();
			ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
			
		КонецЕсли;
		
		КорректировкаДанныхПоставщикаИРежимаВводаПоСоставуДанных();
		
		Если БезРасчета
		 ИЛИ (РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество
			  И РеквизитыВида.ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма) Тогда
			
			ЗапретНачисленияСверхПлана = Ложь;
			
		КонецЕсли;
		
		ЗапретПревышенияПоСумме =
			(РеквизитыВида.ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
			 И ЗапретНачисленияСверхПлана);
		Если БезРасчета
		 ИЛИ НЕ (ОтборТоваров <> Перечисления.СоставыСписковРетроБонусов.Выбранные
				 ИЛИ РеквизитыВида.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры
				 ИЛИ ЗапретПревышенияПоСумме) Тогда
			
			БонусПроцент = 0;
			
		КонецЕсли;
		
		ПараметрыУчастников = Документы.УсловияРетроБонусовПоставщика.ПараметрыОчисткиРеквизитовУчастников();
		ПараметрыУчастников.СоставУчастников = РеквизитыВида.СоставУчастников;
		ПараметрыУчастников.ОтборУчастников = ОтборУчастников;
		Документы.УсловияРетроБонусовПоставщика.ОчиститьНеиспользуемыеРеквизитыУчастников(
			ЭтотОбъект, ПараметрыУчастников);
		
		ПараметрыТоваров = Документы.УсловияРетроБонусовПоставщика.ПараметрыОчисткиРеквизитовТоваров();
		ПараметрыТоваров.СоставТоваров = РеквизитыВида.СоставТоваров;
		ПараметрыТоваров.ОтборТоваров = ОтборТоваров;
		ПараметрыТоваров.ПоказательТоваров = РеквизитыВида.ПоказательТоваров;
		ПараметрыТоваров.БазаРасчета = РеквизитыВида.БазаРасчета;
		ПараметрыТоваров.ТипБонуса = ТипБонуса;
		ПараметрыТоваров.НачислитьСразу = НачислитьСразу;
		Документы.УсловияРетроБонусовПоставщика.ОчиститьНеиспользуемыеРеквизитыТоваров(ЭтотОбъект, ПараметрыТоваров);
		
		Если НЕ РежимНесколькоПоставщиков
		 ИЛИ НЕ Исправление Тогда
			
			ПустаяДата = Дата(1, 1, 1);
			
			Для Каждого СтрокаТЧ Из Поставщики Цикл
				
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
				СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
				
			КонецЦикла
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Исправление Тогда
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(ИсправляемыйДокумент);
		Если РеквизитыУсловий.СегментыЗафиксированы
		   И РазрешеноИзменение Тогда
			
			ТекстУведомления = НСтр("ru = 'Сегменты зафиксированы, ввод исправлений невозможен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстУведомления, ЭтотОбъект,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазрешеноИзменение Тогда
		
		ПроверитьОграниченияПоНачислениям(РеквизитыВида, Отказ, Истина);
		
	КонецЕсли;
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИсправлениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Статус = Перечисления.СтатусыДокументовРетроБонусов.Черновик;
	
	ИменаОчищаемыхПолей = Новый Массив; // Массив из Строка
	ИменаОчищаемыхПолей.Добавить("НачалоДействияДоИзменений");
	ИменаОчищаемыхПолей.Добавить("ОкончаниеДействияДоИзменений");
	
	РетроБонусыСервер.ИнициализироватьКопируемыйСписок(ЭтотОбъект, "КонтрагентыКлиентов");
	РетроБонусыСервер.ИнициализироватьКопируемыйСписок(ЭтотОбъект, "ИННКонтрагентовКлиентов", ИменаОчищаемыхПолей);
	
	РетроБонусыСервер.ИнициализироватьКопируемыйСписок(ЭтотОбъект, "Товары", ИменаОчищаемыхПолей);
	РетроБонусыСервер.ИнициализироватьКопируемыйСписок(ЭтотОбъект, "СегментыТоваров");
	
	РетроБонусыСервер.ИнициализироватьКопируемыйСписок(ЭтотОбъект, "Поставщики", ИменаОчищаемыхПолей);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ?(Исправление, "К", "0");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Данные вида документа.
// 
// Возвращаемое значение:
//  Структура:
//	* БезРасчета - Булево
//	* НачалоДействия - Дата
//	* ОкончаниеДействия - Дата 
//	* ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов
//	* ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов
//	* ОтборТоваров - ПеречислениеСсылка.СоставыСписковРетроБонусов
//	* ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов
//
Функция ДанныеВидаДокумента()
	
	МассивРеквизитов = Новый Массив; // Массив Из Строка
	МассивРеквизитов.Добавить("НачалоДействия");
	МассивРеквизитов.Добавить("ОкончаниеДействия");
	МассивРеквизитов.Добавить("ПериодичностьУсловий");
	МассивРеквизитов.Добавить("ПериодичностьНачислений");
	МассивРеквизитов.Добавить("СоставТоваров");
	МассивРеквизитов.Добавить("ОтборТоваров");
	МассивРеквизитов.Добавить("СоставУчастников");
	МассивРеквизитов.Добавить("ОтборУчастников");
	МассивРеквизитов.Добавить("БезРасчета");
	МассивРеквизитов.Добавить("ПоказательТоваров");
	МассивРеквизитов.Добавить("БазаРасчета");
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидРетроБонуса, МассивРеквизитов);
	
	Возврат РеквизитыВида;
	
КонецФункции

// Заполнить по условию ретро бонусов клиентов.
// 
// Параметры:
//  ДанныеЗаполнения - ДокументСсылка.УсловияРетроБонусовПоставщика - Данные заполнения
//
Процедура ЗаполнитьПоУсловиюРетроБонусовПоставщиков(ДанныеЗаполнения)
	
	ДокументЗаполнения = ДанныеЗаполнения; // ДокументСсылка.УсловияРетроБонусовПоставщика
	ПоследнееИсправление = ИсправлениеДокументов.ПоследнийИсправительныйДокумент(ДокументЗаполнения);
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("НачалоДействия");
	ИменаРеквизитов.Вставить("ОкончаниеДействия");
	ИменаРеквизитов.Вставить("СуммаПлан");
	ИменаРеквизитов.Вставить("ПоказательТоваров", "ВидРетроБонуса.ПоказательТоваров");
	ИменаРеквизитов.Вставить("СоставУчастников", "ВидРетроБонуса.СоставУчастников");
	
	Если ПоследнееИсправление = Неопределено Тогда
		
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ДокументЗаполнения);
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЗаполнения, ИменаРеквизитов);
		
	Иначе
		
		ПоследнееИсправлениеСсылка = ПоследнееИсправление.Ссылка; // ДокументСсылка.УсловияРетроБонусовПоставщика
		
		ПоследнееИсправлениеСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПоследнееИсправлениеСсылка, "Статус");
		Если ПоследнееИсправлениеСтатус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
			
			ТекстУведомления = НСтр("ru = 'Последний в цепочке исправлений документ не согласован, ввод исправлений невозможен'");
			ВызватьИсключение ТекстУведомления;
			
		КонецЕсли;
		
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ПоследнееИсправление.Ссылка);
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоследнееИсправление.Ссылка, ИменаРеквизитов);
		
	КонецЕсли;
	
	Если ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно
	 ИЛИ ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийПоставщиков(ИсправляемыйДокумент);
		Если МаксимальнаяДата <> Дата(1, 1, 1) Тогда
			
			ТекстУведомления = НСтр("ru = 'Зарегистрировано начисление ретро-бонусов, ввод исправлений невозможен'");
			ВызватьИсключение ТекстУведомления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(ИсправляемыйДокумент);
	Если РеквизитыУсловий.СегментыЗафиксированы Тогда
		
		ТекстУведомления = НСтр("ru = 'Сегменты зафиксированы, ввод исправлений невозможен.'");
		ВызватьИсключение ТекстУведомления;
		
	КонецЕсли;
	
	Статус = Перечисления.СтатусыДокументовРетроБонусов.Черновик;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента = Дата(1, 1, 1);
	
	#Область ТЧ_КонтрагентыКлиентов
	СтрокиКУдалению = Новый Массив; // Массив из ДокументТабличнаяЧастьСтрока.УсловияРетроБонусовПоставщика.КонтрагентыКлиентов
	
	Для Каждого СтрокаТЧ Из КонтрагентыКлиентов Цикл
		
		Если СтрокаТЧ.Отменено Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТЧ);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.ИсходнаяСтрока = Истина;
		
		Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаполнитьДанныеПериодовПоОснованию(СтрокаТЧ, РеквизитыОснования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		КонтрагентыКлиентов.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	#КонецОбласти
	
	#Область ТЧ_ИННКонтрагентовКлиентов
	СтрокиКУдалению = Новый Массив; // Массив из ДокументТабличнаяЧастьСтрока.УсловияРетроБонусовПоставщика.ИННКонтрагентовКлиентов
	
	Для Каждого СтрокаТЧ Из ИННКонтрагентовКлиентов Цикл
		
		Если СтрокаТЧ.Отменено Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТЧ);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.ИсходнаяСтрока = Истина;
		
		Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаполнитьДанныеПериодовПоОснованию(СтрокаТЧ, РеквизитыОснования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		ИННКонтрагентовКлиентов.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	#КонецОбласти
	
	#Область ТЧ_Товары
	СтрокиКУдалению = Новый Массив; // Массив из ДокументТабличнаяЧастьСтрока.УсловияРетроБонусовПоставщика.Товары
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.Отменено Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТЧ);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.ИсходнаяСтрока = Истина;
		
		Если РетроБонусыКлиентСервер.ИспользуетсяПериодУсловийТоваров(РеквизитыОснования.ПоказательТоваров) Тогда
			
			ЗаполнитьДанныеПериодовПоОснованию(СтрокаТЧ, РеквизитыОснования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		Товары.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	#КонецОбласти
	
	#Область ТЧ_СегментыТоваров
	СтрокиКУдалению = Новый Массив; // Массив из ДокументТабличнаяЧастьСтрока.УсловияРетроБонусовПоставщика.СегментыТоваров
	
	Для Каждого СтрокаТЧ Из СегментыТоваров Цикл
		
		Если СтрокаТЧ.Отменено Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТЧ);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.ИсходнаяСтрока = Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		СегментыТоваров.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	#КонецОбласти
	
	#Область ТЧ_Поставщики
	СтрокиКУдалению = Новый Массив; // Массив из ДокументТабличнаяЧастьСтрока.УсловияРетроБонусовПоставщика.Поставщики
	
	Для Каждого СтрокаТЧ Из Поставщики Цикл
		
		Если СтрокаТЧ.Отменено Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТЧ);
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТЧ.ИсходнаяСтрока = Истина;
		
		ЗаполнитьДанныеПериодовПоОснованию(СтрокаТЧ, РеквизитыОснования);
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		Поставщики.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

// Параметры:
//  СтрокаДанных - СтрокаТабличнойЧасти:
//  * НачалоДействия - Дата
//  * НачалоДействияДоИзменений - Дата
//  * ОкончаниеДействия - Дата
//  * ОкончаниеДействияДоИзменений - Дата
//	ДанныеОснования - Структура:
//  * НачалоДействия - Дата
//  * ОкончаниеДействия - Дата
//
Процедура ЗаполнитьДанныеПериодовПоОснованию(СтрокаДанных, Знач ДанныеОснования)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если СтрокаДанных.НачалоДействия = ПустаяДата Тогда
				
		СтрокаДанных.НачалоДействияДоИзменений = ДанныеОснования.НачалоДействия;
		
	Иначе
		
		СтрокаДанных.НачалоДействияДоИзменений = СтрокаДанных.НачалоДействия;
		
	КонецЕсли;
	
	Если СтрокаДанных.ОкончаниеДействия = ПустаяДата Тогда
		
		СтрокаДанных.ОкончаниеДействияДоИзменений = ДанныеОснования.ОкончаниеДействия;
		
	Иначе
		
		СтрокаДанных.ОкончаниеДействияДоИзменений = СтрокаДанных.ОкончаниеДействия;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  Отказ - Булево - Отказ
//
Процедура ПроверитьЗаполнениеПериодовШапки(РеквизитыВида, Отказ)
	
	Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	МаксимальнаяДата = Дата(2999, 12, 31);
	
	НачалоДействияВида = РеквизитыВида.НачалоДействия;
	ОкончаниеДействияВида = РеквизитыВида.ОкончаниеДействия;
	Если ОкончаниеДействияВида = ПустаяДата Тогда
		ОкончаниеДействияВида = МаксимальнаяДата;
	КонецЕсли;
	
	Если НачалоДействия <> ПустаяДата
	   И НачалоДействия < НачалоДействияВида Тогда
		
		ТекстСообщения = НСтр("ru = 'Начало периода действия документа раньше, чем начало действия вида ретро-бонуса'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НачалоДействия",, Отказ);
		
	КонецЕсли;
	
	Если ОкончаниеДействия <> ПустаяДата
	   И ОкончаниеДействия > ОкончаниеДействияВида Тогда
		
		ТекстСообщения = НСтр("ru = 'Окончание периода действия документа больше, чем окончание действия вида ретро-бонуса'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОкончаниеДействия",, Отказ);
		
	КонецЕсли;
	
	Если НачалоДействия <> ПустаяДата
	   И ОкончаниеДействия <> ПустаяДата Тогда
		
		РезультатПроверки = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
			ПериодичностьУсловий, 
			НачалоДействия,
			ОкончаниеДействия);
		Если РезультатПроверки.ЕстьНарушениеНачала Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиНачала, ЭтотОбъект, "НачалоДействия",, Отказ);
			
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьНарушениеОкончания Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиОкончания, ЭтотОбъект, "ОкончаниеДействия",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  МассивНепроверяемыхРеквизитов - Массив из Строка- Массив непроверяемых реквизитов
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуУчастниковКонтрагенты(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ)
	
	Если РеквизитыВида.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты
	 ИЛИ ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "КонтрагентыКлиентов";
	ПредставлениеТаблицы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
		РеквизитыВида.СоставУчастников, ОтборУчастников, Истина);
	Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
		
		РетроБонусыСервер.ПроверитьПериодыТаблицы(
			ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Отменено", Ложь);
	РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
		ЭтотОбъект, ИмяТаблицы, "Контрагент", Отказ, ПредставлениеТаблицы,, ОтборСтрок);
	
	РетроБонусыСервер.ПроверитьНаличиеДействующихСтрок(
		ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("ИННКонтрагентовКлиентов");
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  МассивНепроверяемыхРеквизитов - Массив из Строка- Массив непроверяемых реквизитов
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуУчастниковИНН(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ)
	
	Если РеквизитыВида.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.ИНН
	 ИЛИ ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "ИННКонтрагентовКлиентов";
	ПредставлениеТаблицы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
		РеквизитыВида.СоставУчастников, ОтборУчастников, Истина);
	Если ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
		
		РетроБонусыСервер.ПроверитьПериодыТаблицы(
			ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
		
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Отменено", Ложь);
	РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
		ЭтотОбъект, ИмяТаблицы, "ИНН", Отказ, ПредставлениеТаблицы,, ОтборСтрок);
	
	РетроБонусыСервер.ПроверитьНаличиеДействующихСтрок(
		ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
	
	РетроБонусыСервер.ПроверитьЗаполнениеИНН(ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
	МассивНепроверяемыхРеквизитов.Добавить("КонтрагентыКлиентов");
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуСкладов(РеквизитыВида, Отказ)
	
	Если ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Остатки
	 ИЛИ ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "Склады";
	ПредставлениеТаблицы = РетроБонусыКлиентСервер.ЗаголовокСтраницыСклады(ОтборСкладов);
	
	РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
		ЭтотОбъект, ИмяТаблицы, "Склад", Отказ, ПредставлениеТаблицы,);
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  Отказ - Булево - Отказ
//
Процедура ПроверитьДанныеПоставщиков(РеквизитыВида, Отказ)
	
	Если ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		Возврат;
	КонецЕсли;
		
	ШаблонСообщения = НСтр("ru = 'В строке %1 списка Поставщики необходимо заполнить одно из полей ""Контрагент"", ""Поставщик""'");
	ТекстОшибки = НСтр("ru = 'Необходимо заполнить одно из полей ""Контрагент"", ""Поставщик""'");
	
	Если РежимНесколькоПоставщиков Тогда
		
		ИмяТаблицы = "Поставщики";
		ПредставлениеТаблицы = НСтр("ru = 'Поставщики'");
		РетроБонусыСервер.ПроверитьПериодыТаблицы(ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Отменено", Ложь);
		
		КлючевыеПоля = "Контрагент,Партнер,Договор,Соглашение";
		
		РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
			ЭтотОбъект, ИмяТаблицы, КлючевыеПоля, Отказ, ПредставлениеТаблицы,, ОтборСтрок);
		
		Для Каждого ТекущаяСтрока Из Поставщики Цикл
			
			НомерСтроки = ТекущаяСтрока.НомерСтроки;
			
			КонтрагентНеЗаполнен = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Контрагент);
			ПартнерНеЗаполнен = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Партнер);
			ПоляНеЗаполнены = (КонтрагентНеЗаполнен И ПартнерНеЗаполнен);
			
			Если ПоляНеЗаполнены Тогда
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяТаблицы, НомерСтроки, "НомерСтроки");
					
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, Строка(НомерСтроки));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		КонтрагентНеЗаполнен = НЕ ЗначениеЗаполнено(Контрагент);
		ПартнерНеЗаполнен = НЕ ЗначениеЗаполнено(Партнер);
		
		ПоляНеЗаполнены = (КонтрагентНеЗаполнен И ПартнерНеЗаполнен);
		
		Если ПоляНеЗаполнены Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Контрагент", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  МассивНепроверяемыхРеквизитов - Массив из Строка- Массив непроверяемых реквизитов
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуТоваровНоменклатура(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ)
	
	Если РеквизитыВида.СоставТоваров <> Перечисления.СоставыТоваровРетроБонусов.Номенклатура
	 ИЛИ ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	МассивНепроверяемыхРеквизитов.Добавить("СегментыТоваров");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		КлючевыеПоля = "Номенклатура,Характеристика";
		
	Иначе
		
		КлючевыеПоля = "Номенклатура";
		
	КонецЕсли;
	
	ПредставлениеТаблицы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
		РеквизитыВида.СоставТоваров, ОтборТоваров);
	
	Если ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные
	   И ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		ПериодыУсловияЗаполнены = (ЗначениеЗаполнено(НачалоДействия)
								   И ЗначениеЗаполнено(ОкончаниеДействия));
		
		РетроБонусыСервер.ПроверитьПериодыТаблицы(ЭтотОбъект, "Товары", ПредставлениеТаблицы, Отказ);
		
		Если РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.КоличествоСовокупно
		 ИЛИ РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.ПакетноеПредложение Тогда
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("Отменено", Ложь);
			РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
				ЭтотОбъект, "Товары", КлючевыеПоля, Отказ, ПредставлениеТаблицы,, ОтборСтрок);
			
		КонецЕсли;
		
		Если ПериодыУсловияЗаполнены Тогда
			
			Если РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.Сумма
			 ИЛИ РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.НеИспользуется
			 ИЛИ РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.Количество Тогда
				
				ПроверитьПериодыТоваровПоКлючам(РеквизитыВида, ПредставлениеТаблицы, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитыВида.ПоказательТоваров = ПоказателиТоваров.Сумма
		  И ЗапретНачисленияСверхПлана Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Процент");
			
		КонецЕсли;
		
	Иначе
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("Отменено", Ложь);
		РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
			ЭтотОбъект, "Товары", КлючевыеПоля, Отказ, ПредставлениеТаблицы,, ОтборСтрок);
			
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Процент");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.НачалоДействия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ОкончаниеДействия");
		
	КонецЕсли;
	
	МассивПоказатели = Новый Массив; // Массив Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	МассивПоказатели.Добавить(ПоказателиТоваров.Количество);
	МассивПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	МассивПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	
	ПроверитьКоличествоПлан = (ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
							   ИЛИ МассивПоказатели.Найти(РеквизитыВида.ПоказательТоваров) <> Неопределено)
							   И ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные;
	
	Если Не ПроверитьКоличествоПлан Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоПлан");
		
	КонецЕсли;
	
	Если ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
	   И НЕ НачислитьСразу Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаБонус");
		
	КонецЕсли;
	
	РетроБонусыСервер.ПроверитьНаличиеДействующихСтрок(ЭтотОбъект, "Товары", ПредставлениеТаблицы, Отказ);
	
КонецПроцедуры

Процедура ПроверитьПериодыТоваровПоКлючам(РеквизитыВида, ПредставлениеТаблицы, Отказ)
	
	Данные = ДанныеПериодовТоваровПоКлючам(РеквизитыВида);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		ШаблонСообщенияПериоды = НСтр("ru = 'В списке ""%1"" пересекаются периоды действия по ключевым полям ""Номенклатура, Характеристика"" (%2)'");
		ШаблонСообщенияДубли = НСтр("ru = 'В списке ""%1"" дублируются показатели ""Кол-во, план и/или Бонус, %"" по ключевым полям ""Номенклатура, Характеристика"" (%2)'");
		
	Иначе
		
		ШаблонСообщенияПериоды = НСтр("ru = 'В списке ""%1"" пересекаются периоды действия по ключевому полю ""Номенклатура"" (%2)'");
		ШаблонСообщенияДубли = НСтр("ru = 'В списке ""%1"" дублируются показатели ""Кол-во, план и/или Бонус, %"" по ключевому полю ""Номенклатура"" (%2)'");
		
	КонецЕсли;
	
	Пока Данные.ПересеченияПериодов.Следующий() Цикл
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			Данные.ПересеченияПериодов.Номенклатура,
			Данные.ПересеченияПериодов.Характеристика);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияПериоды,
			ПредставлениеТаблицы,
			ПредставлениеНоменклатуры);
			
		ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Товары", Данные.ПересеченияПериодов.ПерваяСтрока, "НомерСтроки");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКПолю,, Отказ);
		
	КонецЦикла;
	
	Пока Данные.ДублиПланаПроцента.Следующий() Цикл
		
		ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			Данные.ДублиПланаПроцента.Номенклатура,
			Данные.ДублиПланаПроцента.Характеристика);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияДубли,
			ПредставлениеТаблицы,
			ПредставлениеНоменклатуры);
			
		ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Товары", Данные.ДублиПланаПроцента.ПерваяСтрока, "НомерСтроки");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКПолю,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
// 
// Возвращаемое значение:
//  Структура - Данные периодов товаров по ключам:
// * ПересеченияПериодов - ВыборкаИзРезультатаЗапроса:
//	** ПерваяСтрока - Число -
// 	** Номенклатура - СправочникСсылка.Номенклатура -
// 	** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// * ДублиПланаПроцента - ВыборкаИзРезультатаЗапроса:
//	** ПерваяСтрока - Число -
// 	** Номенклатура - СправочникСсылка.Номенклатура -
// 	** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// 
Функция ДанныеПериодовТоваровПоКлючам(РеквизитыВида)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.КоличествоПлан КАК КоличествоПлан,
	|	ТаблицаТоваров.Процент КАК Процент,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ТаблицаТоваров.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ТаблицаТоваров.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваровЗеркало
	|		ПО ТаблицаТоваров.НомерСтроки <> ТаблицаТоваровЗеркало.НомерСтроки
	|			И ТаблицаТоваров.Номенклатура = ТаблицаТоваровЗеркало.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровЗеркало.Характеристика
	|			И (ТаблицаТоваров.НачалоДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия
	|				ИЛИ ТаблицаТоваров.ОкончаниеДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия)
	|ГДЕ
	|	НЕ &ЭтоПрогрессивнаяШкала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки)
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваровЗеркало
	|		ПО ТаблицаТоваров.НомерСтроки <> ТаблицаТоваровЗеркало.НомерСтроки
	|			И ТаблицаТоваров.Номенклатура = ТаблицаТоваровЗеркало.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровЗеркало.Характеристика
	|			И (ТаблицаТоваров.НачалоДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия
	|				ИЛИ ТаблицаТоваров.ОкончаниеДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия
	|				ИЛИ &ВесьПериод)
	|			И (ТаблицаТоваров.НачалоДействия <> ТаблицаТоваровЗеркало.НачалоДействия
	|				ИЛИ ТаблицаТоваров.ОкончаниеДействия <> ТаблицаТоваровЗеркало.ОкончаниеДействия)
	|ГДЕ
	|	&ЭтоПрогрессивнаяШкала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваровЗеркало
	|		ПО ТаблицаТоваров.НомерСтроки <> ТаблицаТоваровЗеркало.НомерСтроки
	|			И ТаблицаТоваров.Номенклатура = ТаблицаТоваровЗеркало.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровЗеркало.Характеристика
	|			И (ТаблицаТоваров.НачалоДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия
	|				ИЛИ ТаблицаТоваров.ОкончаниеДействия МЕЖДУ ТаблицаТоваровЗеркало.НачалоДействия И ТаблицаТоваровЗеркало.ОкончаниеДействия
	|				ИЛИ &ВесьПериод)
	|			И (ТаблицаТоваров.КоличествоПлан = ТаблицаТоваровЗеркало.КоличествоПлан
	|				ИЛИ ТаблицаТоваров.Процент = ТаблицаТоваровЗеркало.Процент)
	|ГДЕ
	|	&ЭтоПрогрессивнаяШкала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыОтбора = Новый Структура("Отменено", Ложь);
	КолонкиВыгрузки = "НомерСтроки, Номенклатура, Характеристика, КоличествоПлан, Процент, НачалоДействия, ОкончаниеДействия";
	ПодготовленныеТовары = Товары.Выгрузить(ПараметрыОтбора, КолонкиВыгрузки);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПодготовленныеТовары);
	
	Запрос.УстановитьПараметр("НачалоДействия", НачалоДействия);
	Запрос.УстановитьПараметр("ОкончаниеДействия", ОкончаниеДействия);
	
	ЭтоПрогрессивнаяШкала = 
		(РеквизитыВида.ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Количество);
	Запрос.УстановитьПараметр("ЭтоПрогрессивнаяШкала", ЭтоПрогрессивнаяШкала);
	
	ВесьПериод = (ЭтоПрогрессивнаяШкала
				  И ПериодичностьУсловий = Перечисления.ПериодичностиРетроБонусов.ВесьПериод);
	Запрос.УстановитьПараметр("ВесьПериод", ВесьПериод);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); // РезультатЗапроса
	ВсегоРезультатов = РезультатЗапроса.ВГраница();
	
	ВыборкаПересеченийПериодов = РезультатЗапроса[ВсегоРезультатов - 1].Выбрать();
	ВыборкаДублейПланаПроцента = РезультатЗапроса[ВсегоРезультатов].Выбрать();
	
	Результат = Новый Структура;
	Результат.Вставить("ПересеченияПериодов", ВыборкаПересеченийПериодов);
	Результат.Вставить("ДублиПланаПроцента", ВыборкаДублейПланаПроцента);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  МассивНепроверяемыхРеквизитов - Массив из Строка- Массив непроверяемых реквизитов
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуТоваровСегментыНоменклатуры(РеквизитыВида, МассивНепроверяемыхРеквизитов, Отказ)
	
	Если РеквизитыВида.СоставТоваров <> Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары");
	
	ИмяТаблицы = "СегментыТоваров";
	ПредставлениеТаблицы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
		РеквизитыВида.СоставТоваров, ОтборТоваров);
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Отменено", Ложь);
	РетроБонусыСервер.ПроверитьНаличиеДублейСтрокТЧ(
		ЭтотОбъект, ИмяТаблицы, "Сегмент", Отказ, ПредставлениеТаблицы,, ОтборСтрок);
	
	РетроБонусыСервер.ПроверитьНаличиеДействующихСтрок(ЭтотОбъект, ИмяТаблицы, ПредставлениеТаблицы, Отказ);
	
КонецПроцедуры

// Параметры:
//  Отказ - Булево - Отказ
//
Процедура ПроверитьПоСоставуПоставщики(Отказ)

	Если НЕ РежимНесколькоПоставщиков Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТаблицы = НСтр("ru = 'Поставщики'");
	
	РетроБонусыСервер.ПроверитьНаличиеДействующихСтрок(ЭтотОбъект, "Поставщики", ПредставлениеТаблицы, Отказ);

КонецПроцедуры

Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

// Параметры:
//  РеквизитыВида - см. ДанныеВидаДокумента
//  Отказ - Булево -
//  ВыполнятьСБлокировкой - Булево -
//
Процедура ПроверитьОграниченияПоНачислениям(РеквизитыВида, Отказ, ВыполнятьСБлокировкой = Ложь)
	
	ПропуститьПроверкуНаОграничениеПоНачислениямПриОтсутствииИзменений = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства,
		"ПропуститьПроверкуНаОграничениеПоНачислениямПриОтсутствииИзменений",
		Истина);
	
	Если ПропуститьПроверкуНаОграничениеПоНачислениямПриОтсутствииИзменений 
	   И Проведен Тогда
		
		ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект);
		Если ИзмененияДокумента.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ДанныеДляПроверки();
	
	Если НЕ ЗначениеЗаполнено(Результат.ДокументПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументПроверки = Результат.ДокументПроверки;
	ИзменениеСогласованногоДокумента = Результат.ИзменениеСогласованногоДокумента;
	СтароеЗначениеСуммаПлан = Результат.СтароеЗначениеСуммаПлан;
	
	Если ВыполнятьСБлокировкой Тогда
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РетроБонусыПоставщиков");
			ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ДокументПроверки);
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку на наличие уже введенных начислений по документу условий по причине:
								|%1'");
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, 
				ОписаниеОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
	
	КонецЕсли;
	
	МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийПоставщиков(ДокументПроверки);
	
	Если МаксимальнаяДата <> Дата(1, 1, 1) Тогда
		
		Если ИзменениеСогласованногоДокумента Тогда
			
			ТекстСообщения = НСтр("ru = 'Зарегистрировано начисление ретро-бонусов, ввод исправлений невозможен.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект", Отказ);
			
		ИначеЕсли ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно
		  ИЛИ ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			
			ТекстСообщения = НСтр("ru = 'Зарегистрировано начисление ретро-бонусов, ввод исправлений невозможен'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		Иначе
			
			Если СтароеЗначениеСуммаПлан <> СуммаПлан Тогда
				
				ТекстСообщения = НСтр("ru = 'Зарегистрировано начисление ретро-бонусов, изменение суммы плана запрещено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СуммаПлан", "Объект", Отказ);
				
			КонецЕсли;
			
			ЦелевыеПоказателиБезПериода = Новый Массив; // Массив из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
			ЦелевыеПоказателиБезПериода.Добавить(Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.ПакетноеПредложение);
			ЦелевыеПоказателиБезПериода.Добавить(Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.КоличествоСовокупно);
			
			МаксимальнаяДатаСтрокой = Формат(МаксимальнаяДата, "ДЛФ=D;");
			ВыполнятьПроверкуПериодовВТаблицах = Истина;
			
			Если ОкончаниеДействия < МаксимальнаяДата Тогда
				
				Шаблон = НСтр("ru = 'Дата окончания действия не может быть меньше %1 - даты окончания периода зарегистрированного начисления'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон, МаксимальнаяДатаСтрокой);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОкончаниеДействия", "Объект", Отказ);
				ВыполнятьПроверкуПериодовВТаблицах = Ложь;
				
			КонецЕсли;
			
			ИмяПредставлениеТаблицы = РетроБонусыСервер.ИмяПредставлениеТаблицыПоРеквизитамУсловийПоставщиков(
				РеквизитыВида.СоставУчастников, ОтборУчастников);
			
			Если ИмяПредставлениеТаблицы.ИмяТаблицы <> "" Тогда
				
				ИмяТаблицы = ИмяПредставлениеТаблицы.ИмяТаблицы;
				ПредставлениеТаблицы = ИмяПредставлениеТаблицы.ПредставлениеТаблицы;
				ПроверитьИзмененияУсловийВТаблице(
					МаксимальнаяДата,
					ОтборУчастников,
					ИмяТаблицы,
					ПредставлениеТаблицы,
					ВыполнятьПроверкуПериодовВТаблицах,
					Отказ);
					
			КонецЕсли;
			
			ИмяПредставлениеТаблицы = РетроБонусыСервер.ИмяПредставлениеТаблицыПоРеквизитамУсловийПоставщиков(
				РеквизитыВида.СоставТоваров, ОтборТоваров);
				
			Если ИмяПредставлениеТаблицы.ИмяТаблицы <> "" Тогда
				
				ИмяТаблицы = ИмяПредставлениеТаблицы.ИмяТаблицы;
				ПредставлениеТаблицы = ИмяПредставлениеТаблицы.ПредставлениеТаблицы;
				
				Если ЦелевыеПоказателиБезПериода.Найти(РеквизитыВида.ПоказательТоваров) <> Неопределено Тогда
					
					ПроверитьИзмененияУсловийВТаблицеБезПериодовДействия(
						ОтборТоваров,
						ПредставлениеТаблицы,
						Отказ);
					
				Иначе
					
					ПроверитьИзмененияУсловийВТаблице(
						МаксимальнаяДата,
						ОтборТоваров,
						ИмяТаблицы,
						ПредставлениеТаблицы,
						ВыполнятьПроверкуПериодовВТаблицах,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
			   И Поставщики.Количество() > 0 Тогда
				
				ИмяТаблицы = "Поставщики";
				ПредставлениеТаблицы = НСтр("ru = 'Поставщики'");
				ПроверитьИзмененияУсловийВТаблице(
					МаксимальнаяДата,
					Перечисления.СоставыСписковРетроБонусов.Выбранные,
					ИмяТаблицы,
					ПредставлениеТаблицы,
					ВыполнятьПроверкуПериодовВТаблицах,
					Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает документ требующий проверки и признак изменения согласованного документа.
// 
// Возвращаемое значение:
//  Структура - Данные для проверки:
// * ДокументПроверки - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * ИзменениеСогласованногоДокумента - Булево
// * СтароеЗначениеСуммаПлан- Число
// 
Функция ДанныеДляПроверки()
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументПроверки", Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка());
	Результат.Вставить("ИзменениеСогласованногоДокумента", Ложь);
	Результат.Вставить("СтароеЗначениеСуммаПлан", 0);
	
	Если НЕ ИсправляемыйДокумент.Пустая() Тогда
		
		Результат.ДокументПроверки = ИсправляемыйДокумент;
		Результат.СтароеЗначениеСуммаПлан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, "СуммаПлан");;
		
	Иначе
		
		Если НЕ Ссылка.Пустая() Тогда
			
			СтатусСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
			
			Если СтатусСсылки = Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
				
				Результат.ДокументПроверки = Ссылка;
				Результат.ИзменениеСогласованногоДокумента = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверка корректности внесенных изменения по отношению к периоду начислений
// 
// Параметры:
//  МаксимальнаяДата - Дата
//  Отбор - ПеречислениеСсылка.СоставыСписковРетроБонусов
//  ИмяТаблицы - Строка - Имя проверяемой табличной части
//  ПредставлениеТаблицы - Строка - Представление проверяемой табличной части
//  ВыполнятьПроверкуПериодовВТаблицах - Булево
//  Отказ - Булево
//
Процедура ПроверитьИзмененияУсловийВТаблице(МаксимальнаяДата, Отбор, ИмяТаблицы, ПредставлениеТаблицы, ВыполнятьПроверкуПериодовВТаблицах, Отказ)
	
	Если Отбор = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка()
	 ИЛИ (НЕ ВыполнятьПроверкуПериодовВТаблицах
	      И Отбор = Перечисления.СоставыСписковРетроБонусов.Выбранные) Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	
	ТабличнаяЧастьОбъекта = ЭтотОбъект[ИмяТаблицы]; // ДокументТабличнаяЧасть.УсловияРетроБонусовПоставщика.КонтрагентыКлиентов, ДокументТабличнаяЧасть.УсловияРетроБонусовПоставщика.ИННКонтрагентовКлиентов, ДокументТабличнаяЧасть.УсловияРетроБонусовПоставщика.Товары, ДокументТабличнаяЧасть.УсловияРетроБонусовПоставщика.Поставщики 
	Для Каждого ТекущаяСтрокаТаблицы Из ТабличнаяЧастьОбъекта Цикл
		
		Если Отбор = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			Если ТекущаяСтрокаТаблицы.НачалоДействия = ПустаяДата Тогда
				ТекущаяДатаНачала = НачалоДействия
			Иначе
				ТекущаяДатаНачала = ТекущаяСтрокаТаблицы.НачалоДействия;
			КонецЕсли;
			
			Если ТекущаяСтрокаТаблицы.ОкончаниеДействия = ПустаяДата Тогда
				ТекущаяДатаОкончания = ОкончаниеДействия;
			Иначе
				ТекущаяДатаОкончания = ТекущаяСтрокаТаблицы.ОкончаниеДействия;
			КонецЕсли;
			
			РетроБонусыСервер.ПроверитьДопустимостьНачалаПериодаСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаНачала,
				ТекущаяСтрокаТаблицы,
				Отказ);
			
			РетроБонусыСервер.ПроверитьИзменениеНачалоПериодаИсходнойСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаНачала,
				ТекущаяСтрокаТаблицы,
				Отказ);
			
			РетроБонусыСервер.ПроверитьДопустимостьНачалаПериодаИсходнойСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаНачала,
				ТекущаяСтрокаТаблицы,
				Отказ);
			
			РетроБонусыСервер.ПроверитьДопустимостьОкончанияПериодаСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаОкончания,
				ТекущаяСтрокаТаблицы,
				Отказ);
			
			РетроБонусыСервер.ПроверитьИзменениеОкончанияПериодаИсходнойСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаОкончания,
				ТекущаяСтрокаТаблицы,
				Отказ);
				
			РетроБонусыСервер.ПроверитьДопустимостьИзменениеОкончанияПериодаИсходнойСтроки(
				МаксимальнаяДата,
				ИмяТаблицы,
				ПредставлениеТаблицы,
				ТекущаяДатаОкончания,
				ТекущаяСтрокаТаблицы,
				Отказ);
			
			Если ТекущаяСтрокаТаблицы.Отменено
			   И ТекущаяСтрокаТаблицы.НачалоДействияДоИзменений <= МаксимальнаяДата Тогда
				
				Шаблон = НСтр("ru = 'В строке %1 списка ""%2"" отмена невозможна. В период действия условия были зарегистрированы начисления'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Строка(ТекущаяСтрокаТаблицы.НомерСтроки),
					ПредставлениеТаблицы);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяТаблицы, ТекущаяСтрокаТаблицы.НомерСтроки, "НомерСтроки");
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		Иначе
			
			БылиКорректировки = Ложь;
			
			Если НЕ ТекущаяСтрокаТаблицы.ИсходнаяСтрока
			 ИЛИ ТекущаяСтрокаТаблицы.Отменено
			 ИЛИ ТекущаяСтрокаТаблицы.ОкончаниеДействия <> ПустаяДата
			 ИЛИ ТекущаяСтрокаТаблицы.НачалоДействия <> ПустаяДата Тогда
				
				БылиКорректировки = Истина;
				
			КонецЕсли;
			
			Если БылиКорректировки Тогда
				
				Шаблон = НСтр("ru = 'В строке %1 списка ""%2"" запрещены изменения, так как в период действия условия были введены начисления'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Строка(ТекущаяСтрокаТаблицы.НомерСтроки),
					ПредставлениеТаблицы);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ИмяТаблицы, ТекущаяСтрокаТаблицы.НомерСтроки, "НомерСтроки");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка наличия изменений, в таблицах без периода действия запрещенных к изменению
// 
// Параметры:
//  Отбор - ПеречислениеСсылка.СоставыСписковРетроБонусов
//  ПредставлениеТаблицы - Строка - Представление проверяемой табличной части
//  Отказ - Булево
//
Процедура ПроверитьИзмененияУсловийВТаблицеБезПериодовДействия(Отбор, ПредставлениеТаблицы, Отказ)
	
	Если Отбор = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат;
	КонецЕсли;
	
	Шаблон = НСтр("ru = 'В строке %1 списка ""%2"" запрещены изменения, так как в период действия условия были введены начисления'");
	
	Для Каждого ТекущаяСтрокаТаблицы Из Товары Цикл
		
		БылиКорректировки = Ложь;
			
		Если НЕ ТекущаяСтрокаТаблицы.ИсходнаяСтрока
		 ИЛИ ТекущаяСтрокаТаблицы.Отменено Тогда
			
			БылиКорректировки = Истина;
			
		КонецЕсли;
		
		Если БылиКорректировки Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				Строка(ТекущаяСтрокаТаблицы.НомерСтроки),
				ПредставлениеТаблицы);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары", ТекущаяСтрокаТаблицы.НомерСтроки, "НомерСтроки");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КорректировкаДанныхПоставщикаИРежимаВводаПоСоставуДанных()
	
	Если РежимНесколькоПоставщиков Тогда
		
		ПереключениеРазрешено = РазрешеноПереключениеРежима();
		
		Если ПереключениеРазрешено Тогда
			
			РежимНесколькоПоставщиков = Ложь;
			
			Если Поставщики.Количество() = 1 Тогда
				
				СтрокаПоставщика = Поставщики[0];
				Контрагент = СтрокаПоставщика.Контрагент;
				Партнер = СтрокаПоставщика.Партнер;
				Договор = СтрокаПоставщика.Договор;
				Соглашение = СтрокаПоставщика.Соглашение;
				
				Поставщики.Очистить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимНесколькоПоставщиков Тогда
		
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазрешеноПереключениеРежима()
	
	Если Поставщики.Количество() = 0 Тогда
		
		ПереключениеРазрешено = Истина;
		
	ИначеЕсли Поставщики.Количество() > 1 Тогда
		
		ПереключениеРазрешено = Ложь;
		
	Иначе
		
		ПустаяДата = Дата(1, 1, 1);
		СтрокаПоставщика = Поставщики[0];
		
		Если СтрокаПоставщика.НачалоДействия = ПустаяДата Тогда
			ТекущаяДатаНачала = НачалоДействия
		Иначе
			ТекущаяДатаНачала = СтрокаПоставщика.НачалоДействия;
		КонецЕсли;
			
		Если СтрокаПоставщика.ОкончаниеДействия = ПустаяДата Тогда
			ТекущаяДатаОкончания = ОкончаниеДействия;
		Иначе
			ТекущаяДатаОкончания = СтрокаПоставщика.ОкончаниеДействия;
		КонецЕсли;
		
		ПереключениеРазрешено = (ТекущаяДатаНачала = НачалоДействия
			И ТекущаяДатаОкончания = ОкончаниеДействия);
		
	КонецЕсли;
	
	Возврат ПереключениеРазрешено;
	
КонецФункции

#КонецОбласти

#КонецЕсли