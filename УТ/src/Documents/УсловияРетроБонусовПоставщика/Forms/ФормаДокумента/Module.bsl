//@strict-types

#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТолькоПросмотр = Ложь;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Объект.НачислитьСразу
	   И Элементы.ДекорацияОтменитьСогласование.Видимость Тогда
		
		Элементы.ДекорацияОтменитьСогласование.Видимость = НЕ ДатыЗапретаИзменения.ИзменениеЗапрещено(ТекущийОбъект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьЗаголовок();
	УстановитьДоступностьПоляДоговор();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПропуститьПроверкуИзмененияПоСтатусу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗаписи,
		"ПропуститьПроверкуИзмененияПоСтатусу",
		Ложь);
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПропуститьПроверкуИзмененияПоСтатусу",
		ПропуститьПроверкуИзмененияПоСтатусу);
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПропуститьПроверкуНаОграничениеПоНачислениямПриОтсутствииИзменений",
		Ложь);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(ТекущийОбъект);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	УстановитьЗаголовок();
	ЗаполнитьРеквизитыСегментовПоУсловию();
	УстановитьНастройкиПоСтатусу();
	ЗаполнитьСлужебныеДанныеПоСоглашению();
	УстановитьТекущуюСтраницуДанныеПоставщикаПослеЗаписи();
	УстановитьДоступностьПоляДоговор();
	АктуализироватьРасчетыПоУсловиямРетроБонусовЗакрыты();
	АктуализироватьСтатусыРасчетов();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//@skip-check invocation-parameter-type-intersect
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРетроБонусов.Согласован") Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ будет проведен, продолжить?'");
		Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			ОчиститьСообщения();
			
			Если Объект.ИсправляемыйДокумент.Пустая() Тогда
				Объект.ИдентификаторЦепочки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("ПропуститьПроверкуИзмененияПоСтатусу", Истина);
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
			
			Попытка
				
				УспешноПроведен = Записать(ПараметрыЗаписи);
				Если НЕ УспешноПроведен Тогда
					
					Объект.Статус = ТекущийСтатус;
					
				КонецЕсли;
				
			Исключение
				
				Объект.Статус = ТекущийСтатус;
				ТекстОшибки = НСтр("ru = 'При проведении документа возникли ошибки, статус не установлен'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Объект.Статус");
				ВызватьИсключение;
				
			КонецПопытки;
			
			ТекущийСтатус = Объект.Статус;
			
			// СтандартныеПодсистемы.ПодключаемыеКоманды
			ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
		Иначе
			
			Объект.Статус = ТекущийСтатус;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийСтатус = Объект.Статус;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРетроБонусаПриИзменении(Элемент)
	
	ВидРетроБонусаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьСразуПриИзменении(Элемент)
	
	Если Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
	   И НЕ ЗначениеЗаполнено(Объект.ДатаОстатков)
	   И Объект.НачислитьСразу Тогда
		
		Объект.ДатаОстатков = Объект.Дата;
		
	КонецЕсли;
	
	Если Объект.НачислитьСразу
	   И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
		
		ОтображатьПодвал = Истина;
		ЗаголовокКомандыЗаполнения = НСтр("ru = 'Заполнить количество'");
		ЗаголовокТоварыКоличествоПлан = НСтр("ru = 'Количество'");
		Объект.Склады.Очистить();
		Объект.ОтборСкладов = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Все");
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
			СтрокаТЧ.СуммаБонус = СтрокаТЧ.КоличествоПлан * СтрокаТЧ.БонусЗаЕдиницу;
		
		КонецЦикла;
		
	Иначе
		
		ОтображатьПодвал = Ложь;
		ЗаголовокТоварыКоличествоПлан = НСтр("ru = 'Кол-во, план'");
		ЗаголовокКомандыЗаполнения = НСтр("ru = 'Заполнить кол-во, план...'");
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
			СтрокаТЧ.СуммаБонус = 0;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Элементы.Товары.Подвал = ОтображатьПодвал;
	Элементы.ТоварыКоличествоПлан.Заголовок = ЗаголовокТоварыКоличествоПлан;
	Элементы.ТоварыЗаполнитьКоличествоПлан.Заголовок = ЗаголовокКомандыЗаполнения;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЗависимыеЭлементыФормы("НачислитьСразу");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияПриИзменении(Элемент)
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДействияПриИзменении(Элемент)
	
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьУсловийПриИзменении(Элемент)
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчастниковПриИзменении(Элемент)
	
	ОтборУчастниковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТоваровПриИзменении(Элемент)
	
	ОтборТоваровПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладовПриИзменении(Элемент)

	ОтборСкладовПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	УстановитьЗаголовкиПоВалюте();
	
	Если ТекущаяВалюта <> Объект.Валюта Тогда
		
		АктуализироватьДоговорыСоглашенияПоставщикаПоДаннымШапки();
		
	КонецЕсли;
	
	Если НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Договор",
			"ТолькоПросмотр",
			НЕ ИспользуютсяДоговорыКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьСогласованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "ОтменитьСогласование";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ОтменитьСогласование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимНесколькоПоставщиковПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницуДанныеПоставщика();
	НастроитьЗависимыеЭлементыФормы("РежимНесколькоПоставщиков");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретНачисленияСверхПланаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ЗапретНачисленияСверхПлана");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗафиксироватьСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "Зафиксировать";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ЗафиксироватьСоставСегментов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьФиксациюСегментовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "ОтменитьФиксацию";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ОтменитьФиксациюСоставаСегментов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
	КонтрагентНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура  ПартнерНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
	ПартнерНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
	ДоговорНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
	СоглашениеНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ТекущийКонтрагент <> Объект.Контрагент Тогда
		
		Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		ТекущийКонтрагент = Объект.Контрагент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ТекущийПартнер = Объект.Партнер Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если НЕ (Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки")
			 И Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка")) Тогда
	
		Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	КонецЕсли;
	
	Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	ИспользуютсяДоговорыКонтрагентов = Истина;
	ТекущийПартнер = Объект.Партнер;
	
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
	ПартнерПриИзмененииНаСервере(ДанныеПоставщика);
	
	Объект.Контрагент = ДанныеПоставщика.Контрагент;
	Объект.Партнер = ДанныеПоставщика.Партнер;
	Объект.Договор = ДанныеПоставщика.Договор;
	Объект.Соглашение = ДанныеПоставщика.Соглашение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		
		ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
		ДоговорПриИзмененииНаСервере(ДанныеПоставщика);
		
		Объект.Контрагент = ДанныеПоставщика.Контрагент;
		Объект.Партнер = ДанныеПоставщика.Партнер;
		Объект.Договор = ДанныеПоставщика.Договор;
		Объект.Соглашение = ДанныеПоставщика.Соглашение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
		СоглашениеПриИзмененииНаСервере(ДанныеПоставщика);
		
		Объект.Контрагент = ДанныеПоставщика.Контрагент;
		Объект.Партнер = ДанныеПоставщика.Партнер;
		Объект.Договор = ДанныеПоставщика.Договор;
		Объект.Соглашение = ДанныеПоставщика.Соглашение;
		
		ИспользуютсяДоговорыКонтрагентов = ДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов;
		
	Иначе
		
		ИспользуютсяДоговорыКонтрагентов = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Договор",
		"ТолькоПросмотр",
		НЕ ИспользуютсяДоговорыКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДекорацияСостояниеРасчетов(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОтчет" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьПоРБПКонтекстУсловия");
		ПараметрыФормы.Вставить("ПараметрКоманды", Объект.Ссылка);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ОткрытьФорму("Отчет.ВедомостьПоРетроБонусамПоставщиков.Форма", ПараметрыФормы, ЭтотОбъект, Ложь);
		
	Иначе
		
		ОчиститьСообщения();
		ЗакрытьВозобновитьРасчеты(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура; 
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
		ТекущиеДанные,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПланПриИзменении(Элемент)

	Если Объект.НачислитьСразу
	   И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
	
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.СуммаБонус = ТекущиеДанные.КоличествоПлан * ТекущиеДанные.БонусЗаЕдиницу;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыБонусЗаЕдиницуПриИзменении(Элемент)

	Если Объект.НачислитьСразу
	   И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
	
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.СуммаБонус = ТекущиеДанные.КоличествоПлан * ТекущиеДанные.БонусЗаЕдиницу;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБонусПриИзменении(Элемент)

	Если Объект.НачислитьСразу
	   И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
	
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
		Если ТекущиеДанные.КоличествоПлан = 0 Тогда
			ТекущиеДанные.БонусЗаЕдиницу = ТекущиеДанные.СуммаБонус;
		Иначе
			ТекущиеДанные.БонусЗаЕдиницу = Окр(ТекущиеДанные.СуммаБонус / ТекущиеДанные.КоличествоПлан, 2);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставщики

&НаКлиенте
Процедура ПоставщикиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока
	   И НЕ Копирование Тогда
		
		ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов = Истина;
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонтрагент = ТекущиеДанные.Контрагент;
	ТекущийПартнер = ТекущиеДанные.Партнер;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
	КонтрагентНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПартнерНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
	ПартнерНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиДоговорНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
	ДоговорНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
	СоглашениеНачалоВыбораЗавершение(ДанныеПоставщика, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущийКонтрагент <> ТекущиеДанные.Контрагент Тогда
		
		ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		ТекущийКонтрагент = ТекущиеДанные.Контрагент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущийПартнер = ТекущиеДанные.Партнер Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Если НЕ (Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки")
			 И ТекущиеДанные.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка")) Тогда
		
		ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		
	КонецЕсли;
	
	ТекущиеДанные.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов = Истина;
	ТекущийПартнер = ТекущиеДанные.Партнер;
	
	ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
	ПартнерПриИзмененииНаСервере(ДанныеПоставщика);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоставщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиСоглашениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Соглашение) Тогда
		
		ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
		СоглашениеПриИзмененииНаСервере(ДанныеПоставщика);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоставщика);
		
	Иначе
		
		ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
		
		ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ТекущиеДанные.ИспользуютсяДоговорыКонтрагентов, ТекущиеДанные);
		ДоговорПриИзмененииНаСервере(ДанныеПоставщика);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоставщика);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагентыКлиентов

&НаКлиенте
Процедура КонтрагентыКлиентовПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.КонтрагентыКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.КонтрагентыКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКлиентовОтмененоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.КонтрагентыКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИННКонтрагентовКлиентов

&НаКлиенте
Процедура ИННКонтрагентовКлиентовПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.ИННКонтрагентовКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИННКонтрагентовКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.ИННКонтрагентовКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИННКонтрагентовКлиентовОтмененоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИННКонтрагентовКлиентов.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСегментыТоваров

&НаКлиенте
Процедура СегментыТоваровПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элементы.СегментыТоваров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СегментыТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.СегментыТоваров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьИнтервалПослеЗавершения", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоДействия", "ОкончаниеДействия"),
		ОписаниеОповещения);
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ОчиститьСообщения();
	
	ОтображатьПериод = (Элементы.ТоварыНачалоДействия.Видимость
					ИЛИ Элементы.ТоварыОкончаниеДействия.Видимость);
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Характеристика", ИспользоватьХарактеристикиНоменклатуры);
	НастройкиОтображенияПолей.Вставить("Период", ОтображатьПериод);
	НастройкиОтображенияПолей.Вставить("КоличествоПлан", Элементы.ТоварыКоличествоПлан.Видимость);
	НастройкиОтображенияПолей.Вставить("БазоваяЦена", Элементы.ТоварыБазоваяЦена.Видимость);
	НастройкиОтображенияПолей.Вставить("Процент", Элементы.ТоварыПроцент.Видимость);
	НастройкиОтображенияПолей.Вставить("СуммаБонус", Элементы.ТоварыСуммаБонус.Видимость);
	НастройкиОтображенияПолей.Вставить("БонусЗаЕдиницу", Элементы.ТоварыБонусЗаЕдиницу.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовПоставщика.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка товаров из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаТовары(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСегментыТоваровИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовПоставщика.СегментыТоваров";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка сегментов товаров из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаСегментовТоваров();
	ПараметрыЗагрузки.ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСегментыТоваровИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИННИзФайла(Команда)
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Период", Элементы.ИННКонтрагентовКлиентовНачалоДействия.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовПоставщика.ИННКонтрагентовКлиентов";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка ИНН из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаИНН(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИННКонтрагентовИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонтрагентыКлиентовИзФайла(Команда)
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Период", Элементы.КонтрагентыКлиентовНачалоДействия.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовПоставщика.КонтрагентыКлиентов";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка контрагентов из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаКонтрагенты(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКонтрагентовИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоСегменту(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.СегментыНоменклатуры.ФормаВыбора",
		,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьКоличествоПлан(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки; // Массив из Число
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Подсказка = НСтр("ru = 'Кол-во, план'");
		Квалификаторы = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		ТипКоличествоПлан = Новый ОписаниеТипов("Число", Квалификаторы);
		НовыйПлан = 0;
		Результат = Ждать ВвестиЗначениеАсинх(НовыйПлан, Подсказка, ТипКоличествоПлан); // Число, Неопределено
		ПересчитатьСуммуБонус = Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
			И Объект.НачислитьСразу;
		
		Если Результат <> Неопределено Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если НЕ СтрокаТоваров.ИсходнаяСтрока Тогда
					
					СтрокаТоваров.КоличествоПлан = Результат;
					
					Если ПересчитатьСуммуБонус Тогда
						СтрокаТоваров.СуммаБонус = СтрокаТоваров.КоличествоПлан * СтрокаТоваров.БонусЗаЕдиницу;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не выбраны строки для заполнения.'");
		Ждать ПредупреждениеАсинх(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПроцентБонуса(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки; // Массив из Число
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Подсказка = НСтр("ru = '% бонуса'");
		Квалификаторы = Новый КвалификаторыЧисла(4, 2, ДопустимыйЗнак.Неотрицательный);
		ТипПроцент = Новый ОписаниеТипов("Число", Квалификаторы);
		НовыйПроцент = 0;
		Результат = Ждать ВвестиЗначениеАсинх(НовыйПроцент, Подсказка, ТипПроцент); // Число, Неопределено
		
		Если Результат <> Неопределено Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если НЕ СтрокаТоваров.Отменено
				   И НЕ СтрокаТоваров.ИсходнаяСтрока Тогда
					
					СтрокаТоваров.Процент = Результат;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не выбраны строки для заполнения.'");
		Ждать ПредупреждениеАсинх(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ТекущийСтатус = Объект.Статус;
	
	ЗаполнитьПризнакНаличияНачислений();
	ЗаполнитьДанныеПоследнейКорректировки();
	
	УстановитьЗаголовкиДекорацийСГиперссылками();
	
	ЗаполнитьПоВидуРетроБонуса(Истина);
	УстановитьЗаголовкиПоВалюте();
	УстановитьНеизменнуюНастройкуПолейПоВиду();
	
	ДенежныеСредстваСервер.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	МассивЭлементов = Новый Массив; // Массив из Строка
	МассивЭлементов.Добавить(Элементы.УстановитьИнтервал.Имя);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", НЕ Объект.Исправление);
	
	МассивДопустимыхТипов = Новый ФиксированныйМассив(РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры());
	ПараметрВыбораНоменклатуры = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивДопустимыхТипов);
	ПараметрыВыбораНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбораНоменклатуры); // Массив из ПараметрВыбора
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНоменклатуры);
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	СформироватьСуммыПлановСтрокой(ЭтотОбъект);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ТекущаяОрганизация = Объект.Организация;
	ТекущийВидРетроБонуса = Объект.ВидРетроБонуса;
	ТекущаяВалюта = Объект.Валюта;
	ТекущийКонтрагент = Объект.Контрагент;
	ТекущийПартнер = Объект.Партнер;
	
	УстановитьНастройкиСведенийПоставщиков();
	ИспользуютсяДоговорыКонтрагентов = Истина;
	ЗаполнитьСлужебныеДанныеПоСоглашению();
	ПериодДействияУсловияПоставщикаДоИзменения();
	
	УстановитьНастройкиСведенийУчастников();
	УстановитьНастройкиСведенийТоваров();
	УстановитьНастройкиСведенийСкладов();
	ЗаполнитьРеквизитыСегментовПоУсловию();
	
	УстановитьНастройкиПоСтатусу();
	АктуализироватьРасчетыПоУсловиямРетроБонусовЗакрыты();
	АктуализироватьСтатусыРасчетов();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоСтатусу()
	
	Если Объект.Ссылка.Пустая() Тогда
		ДоступноИзменениеПоПравам = Истина;
	Иначе
		ДоступноИзменениеПоПравам = УправлениеДоступом.ИзменениеРазрешено(Объект.Ссылка);
	КонецЕсли;
	
	РазрешеноИзменение = Документы.УсловияРетроБонусовПоставщика.РазрешеноИзменениеПоСтатусу(Объект.Статус);
	ВидимостьОтменыСогласования = Ложь;
	
	Если НЕ РазрешеноИзменение Тогда
		
		ТолькоПросмотр = Истина;
		
		ВидимостьОтменыСогласования = (ДоступноИзменениеПоПравам
									   И Объект.Статус = Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.ДекорацияОтменитьСогласование.Имя,
		"Видимость",
		ВидимостьОтменыСогласования);
	
	Элементы.РежимНесколькоПоставщиков.ТолькоПросмотр = ТолькоПросмотр;
	
	Если ТолькоПросмотр Тогда
		
		Элементы.Статус.СписокВыбора.Очистить();
		Элементы.Статус.РежимВыбораИзСписка = Ложь;
		
	Иначе
		
		РазрешенныеСтатусы = Документы.УсловияРетроБонусовПоставщика.РазрешенныеСтатусыКУстановке();
		
		Если РазрешенныеСтатусы.Количество() > 0 Тогда
			
			Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(РазрешенныеСтатусы);
			Элементы.Статус.РежимВыбораИзСписка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСегментовПоУсловию()
	
	Если Объект.Проведен Тогда
		
		ДанныеУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(Объект.Ссылка);
		ИспользуютсяСегменты =
			(ДанныеУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		СоставСегментовЗафиксирован = ДанныеУсловий.СегментыЗафиксированы;
		
	Иначе
		
		ИспользуютсяСегменты = Ложь;
		СоставСегментовЗафиксирован = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандФиксацииСегментов(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Форма.Элементы.ДекорацияЗафиксироватьСегменты.Имя,
		"Доступность",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Форма.Элементы.ДекорацияОтменитьФиксациюСегментов.Имя,
		"Доступность",
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиДекорацийСГиперссылками()
	
	РетроБонусыСервер.УстановитьЗаголовкиДекорацийФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьРасчетыПоУсловиямРетроБонусовЗакрыты()
	
	ВыполнятьАктуализацию = Истина;
	Если НЕ Объект.Исправление Тогда
		
		ДокументУсловий = Объект.Ссылка;
		ВыполнятьАктуализацию = НЕ Объект.Ссылка.Пустая();
		
	Иначе
		
		ДокументУсловий = Объект.ИсправляемыйДокумент;
		
	КонецЕсли;
	
	Если ВыполнятьАктуализацию Тогда
		
		РасчетыПоУсловиямРетроБонусовЗакрыты = 
			Документы.УсловияРетроБонусовПоставщика.РасчетыПоУсловиямРетроБонусовЗакрыты(ДокументУсловий);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура АктуализироватьСтатусыРасчетов()
	
	ОткрытьОтчет = "ОткрытьОтчет";
	ВозобновитьЗакрытьРасчеты = "";
	ВыполнятьАктуализацию = Истина;
	
	Если НЕ Объект.Исправление Тогда
			
		ДокументУсловий = Объект.Ссылка;
		ВыполнятьАктуализацию = НЕ Объект.Ссылка.Пустая();
		
	Иначе
		
		ДокументУсловий = Объект.ИсправляемыйДокумент;
		
	КонецЕсли;
	
	Если НЕ ВыполнятьАктуализацию Тогда
		
		Элементы.ДекорацияСостояниеРасчетов.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если РасчетыПоУсловиямРетроБонусовЗакрыты Тогда
		
		ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Расчеты</a> по условиям бонусов закрыты <a href=""%2"">(возобновить расчеты)</a>'");
		ВозобновитьЗакрытьРасчеты = "ВозобновитьРасчеты";
		
	Иначе
		
		СтатусРасчетов = Документы.УсловияРетроБонусовПоставщика.СтатусРасчетовДокументаУсловий(ДокументУсловий);
		
		Если СтатусРасчетов.НачисленныеБонусыАктивированыПолностью Тогда
			
			ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Начисленные бонусы</a> полностью актированы/списаны <a href=""%2"">(подтвердить закрытие расчетов)</a>'");
			
		ИначеЕсли СтатусРасчетов.ОжидаетсяНачисление Тогда
			
			ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Ожидается</a> начисление бонусов <a href=""%2"">(закрыть расчеты)</a>'");
			
		ИначеЕсли СтатусРасчетов.ОжидаетсяАкт Тогда
			
			ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Ожидается</a> акт премии от поставщика <a href=""%2"">(закрыть расчеты)</a>'");
			
		ИначеЕсли СтатусРасчетов.ПогашениеБольшеНачисления Тогда
			
			ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Актировано/списано</a> больше, чем начислено <a href=""%2"">(закрыть расчеты)</a>'");
			
		Иначе
			
			ШаблонЗаголовка = НСтр("ru = '<a href=""%1"">Разные состояния расчетов</a> по разным валютам <a href=""%2"">(закрыть расчеты)</a>'");
			
		КонецЕсли;
		
		ВозобновитьЗакрытьРасчеты = "ЗакрытьРасчеты";
		ДокументУсловийЗарегистрирован = СтатусРасчетов.ДокументУсловийЗарегистрирован;
		Элементы.ДекорацияСостояниеРасчетов.Видимость = ДокументУсловийЗарегистрирован;
		
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка,
		ОткрытьОтчет,
		ВозобновитьЗакрытьРасчеты);
	Элементы.ДекорацияСостояниеРасчетов.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьВозобновитьРасчеты(Знач КомандаСтрокой)
	
	АктуализироватьРасчетыПоУсловиямРетроБонусовЗакрыты();
	
	ЗакрытьРасчеты = (КомандаСтрокой = "ЗакрытьРасчеты");
	
	Если ЗакрытьРасчеты <> РасчетыПоУсловиямРетроБонусовЗакрыты Тогда
		
		Если НЕ Объект.Исправление Тогда
			ДокументУсловий = Объект.Ссылка;
		Иначе
			ДокументУсловий = Объект.ИсправляемыйДокумент;
		КонецЕсли;
		
		ДокументыУсловий = Новый Массив; // Массив Из ДокументСсылка.УсловияРетроБонусовПоставщика
		ДокументыУсловий.Добавить(ДокументУсловий);
		
		РезультатИзмененияСтатуса = РегистрыСведений.ЗавершенныеУсловияРетроБонусовПоставщиков.ИзменитьСтатусРасчетов(
			ДокументыУсловий,
			ЗакрытьРасчеты);
		
		ЕстьОшибки = РезультатИзмененияСтатуса.ЕстьОшибки;
		ИнформацияОбОшибке = РезультатИзмененияСтатуса.ИнформацияОбОшибке;
		
		Если ЕстьОшибки Тогда
			
			ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке, ЭтотОбъект);
			
		Иначе
			
			РасчетыПоУсловиямРетроБонусовЗакрыты = НЕ РасчетыПоУсловиямРетроБонусовЗакрыты;
			
		КонецЕсли;
		
	КонецЕсли;
	
	АктуализироватьСтатусыРасчетов();
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьОформлениеТаблицыПоставщики();
	УстановитьОформлениеТаблицыКонтрагенты();
	УстановитьОформлениеТаблицыИННКонтрагентовКлиентов();
	УстановитьОформлениеТаблицыТовары();
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.СегментыТоваров,
		Элементы.СегментыТоваровОтменено.Имя);
	
	УстановитьОформлениеИсходныхСтрокСегментыТоваров();
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Новые параметры оформления исправления:
// * ПоляИсходнаяСтрока - Массив из Строка - 
// * ПоляДоИзменений - Массив из Строка -
//
&НаСервере
Функция НовыеПараметрыОформленияИсходныхСтрок()
	
	Результат = Новый Структура;
	Результат.Вставить("ПоляИсходнаяСтрока", Новый Массив);
	Результат.Вставить("ПоляДоИзменений", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаФормы - ТаблицаФормы - Таблица формы
//  Параметры - см. НовыеПараметрыОформленияИсходныхСтрок
// 
&НаСервере
Процедура ОформитьПоляПоИсходнымСтрокам(ТаблицаФормы, Параметры)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ПутьКИсходнаяСтрока = ПутьКТЧ + ".ИсходнаяСтрока";
	
	#Область ДанныеИсходнойСтроки
	ПоляИсходнаяСтрока = Параметры.ПоляИсходнаяСтрока;
	Если ПоляИсходнаяСтрока.Количество() > 0 Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Для Каждого ИмяПоля Из ПоляИсходнаяСтрока Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		Для Каждого ИмяПоля Из Параметры.ПоляДоИзменений Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПоляДоИзменений
	Если Параметры.ПоляДоИзменений.Количество() > 0 Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Для Каждого ИмяПоля Из Параметры.ПоляДоИзменений Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
		Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		
	КонецЕсли;
	#КонецОбласти
	
	ОформлениеФлагаОтмены(ТаблицаФормы);
	
КонецПроцедуры

// Блокировка флага отмены в исправлении документа
&НаСервере
Процедура ОформлениеФлагаОтмены(ТаблицаФормы)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ИмяТЧ = ТаблицаФормы.Имя;
	ИмяОтменено = ИмяТЧ + "Отменено";
	ПутьКИсходнаяСтрока = ПутьКТЧ + ".ИсходнаяСтрока";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяОтменено);
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Отбор);
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПериода(ТаблицаФормы, ДатаНачалоСтрокой, ДатаОкончанияСтрокой)
	
	// Заполнение датой из шапки, если не указана в строках
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ИмяТаблицы = ТаблицаФормы.Имя;
	ИмяНачалоДействия = ИмяТаблицы + "НачалоДействия";
	ПутьКНачалоДействия = ПутьКТЧ + ".НачалоДействия";
	ИмяОкончаниеДействия = ИмяТаблицы + "ОкончаниеДействия";
	ПутьКОкончаниеДействия = ПутьКТЧ + ".ОкончаниеДействия";
	ПутьКОтменено = ПутьКТЧ + ".Отменено";
	
	#Область НачалоДействия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяНачалоДействия);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКНачалоДействия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ДатаНачалоСтрокой);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	#КонецОбласти
	
	#Область ОкончаниеДействия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяОкончаниеДействия);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОкончаниеДействия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ДатаОкончанияСтрокой);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОтмененныеСтроки(ТаблицаФормы, ИменаЭлементов = Неопределено)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ПутьКОтменено = ПутьКТЧ + ".Отменено";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ИмяПоля Из ИменаЭлементов Цикл
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
	КонецЦикла;
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Отбор);
		
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокТовары()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыНоменклатура.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыХарактеристика.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыКоличествоПлан.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыБазоваяЦена.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыПроцент.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыБонусЗаЕдиницу.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ТоварыНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ТоварыОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.Товары, ПараметрыОформления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокСегментыТоваров()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.СегментыТоваровСегмент.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.СегментыТоваров, ПараметрыОформления);
	
КонецПроцедуры

#Область УсловноеОформлениеКонтрагенты

&НаСервере
Процедура УстановитьОформлениеТаблицыКонтрагенты()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.КонтрагентыКлиентов,
		Элементы.КонтрагентыКлиентовОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.КонтрагентыКлиентовНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.КонтрагентыКлиентовОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.КонтрагентыКлиентов, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокКонтрагентыКлиентов();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.КонтрагентыКлиентов,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
	УстановитьОформлениеКонтрагентыКлиентовКонтрагент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКонтрагентыКлиентовКонтрагент()
	
	#Область ОбязательностьЗаполнения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыКлиентовКонтрагент.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Клиенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПустойКонтрагент
	СтрокаПустогоКонтрагента = НСтр("ru = '<любой>'");
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыКлиентовКонтрагент.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Клиенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", СтрокаПустогоКонтрагента);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокКонтрагентыКлиентов()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.КонтрагентыКлиентовКонтрагент.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.КонтрагентыКлиентовНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.КонтрагентыКлиентовОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.КонтрагентыКлиентов, ПараметрыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформлениеИННКонтрагентовКлиентов

&НаСервере
Процедура УстановитьОформлениеТаблицыИННКонтрагентовКлиентов()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.ИННКонтрагентовКлиентов,
		Элементы.ИННКонтрагентовКлиентовОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ИННКонтрагентовКлиентовНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ИННКонтрагентовКлиентовОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.ИННКонтрагентовКлиентов, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокИННКонтрагентовКлиентов();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.ИННКонтрагентовКлиентов,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокИННКонтрагентовКлиентов()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ИННКонтрагентовКлиентовИНН.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ИННКонтрагентовКлиентовНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ИННКонтрагентовКлиентовОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.ИННКонтрагентовКлиентов, ПараметрыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьОформлениеТовары

&НаСервере
Процедура УстановитьОформлениеТаблицыТовары()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Товары,
		Элементы.ТоварыОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ТоварыНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ТоварыОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.Товары, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокТовары();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.Товары,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформлениеПоставщики

&НаСервере
Процедура УстановитьОформлениеТаблицыПоставщики()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Поставщики,
		Элементы.ПоставщикиОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ПоставщикиНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ПоставщикиОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.Поставщики, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокПоставщики();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.Поставщики,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПоставщикиДоговор");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Поставщики.Соглашение");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Поставщики.ИспользуютсяДоговорыКонтрагентов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокПоставщики()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ПоставщикиКонтрагент.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ПоставщикиПартнер.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ПоставщикиДоговор.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ПоставщикиСоглашение.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ПоставщикиНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ПоставщикиОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.Поставщики, ПараметрыОформления);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

// Параметры:
//  Результат - Неопределено - Результат
//  ДополнительныеПараметры - Структура - Дополнительные параметры
// 
&НаКлиенте
Процедура УстановитьИнтервалПослеЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Если Объект.Организация.Пустая()
	 ИЛИ Объект.Валюта.Пустая()
	 ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиРегУчет
	 ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаРеглУчет Тогда
		
		ОпределитьВалютуДокумента();
		
	КонецЕсли;
	
	УстановитьЗаголовкиПоВалюте();
	АктуализироватьДоговорыСоглашенияПоставщикаПоДаннымШапки();
	УстановитьДоступностьПоляДоговор();
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация");
	
КонецПроцедуры

&НаСервере
Процедура ВидРетроБонусаПриИзмененииСервер()
	
	ЗаполнитьПоВидуРетроБонуса();
	УстановитьЗаголовкиПоВалюте();
	АктуализироватьДоговорыСоглашенияПоставщикаПоДаннымШапки();
	УстановитьДоступностьПоляДоговор();
	УстановитьНеизменнуюНастройкуПолейПоВиду();
	
	ОтборУчастниковПриИзмененииСервер(Ложь);
	ОтборТоваровПриИзмененииСервер(Ложь);
	ОтборСкладовПриИзмененииСервер(Ложь);
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		Объект.ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все;
		Объект.НачалоДействия = Дата(1, 1, 1);
		Объект.ОкончаниеДействия = Дата(1, 1, 1);
		
	Иначе
		
		Объект.ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
		Объект.ДатаОстатков = Дата(1, 1, 1);
		
	КонецЕсли;
	
	Если Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		Объект.Поставщики.Очистить();
		Объект.РежимНесколькоПоставщиков = Ложь;
		Объект.Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма Тогда
		
		Объект.СуммаПлан = 0;
		
	КонецЕсли;
	
	Если ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.НеИспользуется Тогда
		
		Объект.БонусПроцент = 0;
		Объект.ЗапретНачисленияСверхПлана = Ложь;
		
	КонецЕсли;
	
	Если ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма Тогда
		
		Объект.БонусПроцент = 0;
		
	КонецЕсли;
	
	Если Объект.БезРасчета Тогда
		
		Для Каждого СтрокаКонтрагенты Из Объект.КонтрагентыКлиентов Цикл
			
			СтрокаКонтрагенты.НачалоДействия = Дата(1, 1, 1);
			СтрокаКонтрагенты.ОкончаниеДействия = Дата(1, 1, 1);
			
		КонецЦикла;
		
		Объект.ИННКонтрагентовКлиентов.Очистить();
		Объект.Товары.Очистить();
		Объект.СегментыТоваров.Очистить();
		Объект.Склады.Очистить();
		Объект.Поставщики.Очистить();
		
	Иначе
		
		Объект.НачислитьСразу = Ложь;
		
	КонецЕсли;
	
	Объект.СуммаБонус = 0;
	Элементы.Товары.Подвал = (Объект.НачислитьСразу
		И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборУчастниковПриИзмененииСервер(Знач НастроитьЗависимыеЭлементы = Истина)
	
	УстановитьНастройкиСведенийУчастников();
	
	ПараметрыУчастников = Документы.УсловияРетроБонусовПоставщика.ПараметрыОчисткиРеквизитовУчастников();
	ПараметрыУчастников.СоставУчастников = СоставУчастников;
	ПараметрыУчастников.ОтборУчастников = Объект.ОтборУчастников;
	Документы.УсловияРетроБонусовПоставщика.ОчиститьНеиспользуемыеРеквизитыУчастников(Объект, ПараметрыУчастников);
	
	Если НастроитьЗависимыеЭлементы Тогда
		
		НастроитьЗависимыеЭлементыФормыНаСервере("ОтборУчастников");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборТоваровПриИзмененииСервер(Знач НастроитьЗависимыеЭлементы = Истина)
	
	УстановитьНастройкиСведенийТоваров();
	
	ПараметрыТоваров = Документы.УсловияРетроБонусовПоставщика.ПараметрыОчисткиРеквизитовТоваров();
	ПараметрыТоваров.СоставТоваров = СоставТоваров;
	ПараметрыТоваров.ОтборТоваров = Объект.ОтборТоваров;
	ПараметрыТоваров.ПоказательТоваров = ПоказательТоваров;
	ПараметрыТоваров.БазаРасчета = БазаРасчета;
	ПараметрыТоваров.ТипБонуса = Объект.ТипБонуса;
	ПараметрыТоваров.НачислитьСразу = Объект.НачислитьСразу;
	Документы.УсловияРетроБонусовПоставщика.ОчиститьНеиспользуемыеРеквизитыТоваров(Объект, ПараметрыТоваров);
	
	Если НастроитьЗависимыеЭлементы Тогда
		
		НастроитьЗависимыеЭлементыФормыНаСервере("ОтборТоваров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборСкладовПриИзмененииСервер(Знач НастроитьЗависимыеЭлементы = Истина)
	
	ПараметрыСкладов = Документы.УсловияРетроБонусовПоставщика.ПараметрыОчисткиРеквизитовСкладов();
	ПараметрыСкладов.ОтборСкладов = Объект.ОтборСкладов;
	Документы.УсловияРетроБонусовПоставщика.ОчиститьНеиспользуемыеРеквизитыСкладов(Объект, ПараметрыСкладов);
	
	УстановитьНастройкиСведенийСкладов();
	
	Если НастроитьЗависимыеЭлементы Тогда
		
		НастроитьЗависимыеЭлементыФормыНаСервере("ОтборСкладов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование()
	
	ЗаполнитьПризнакНаличияНачислений();
	
	Если НЕ ЕстьНачисления Тогда
		
		Модифицированность = Истина;
		ТолькоПросмотр = Ложь;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРетроБонусов.Черновик");
		ТекущийСтатус = Объект.Статус;
		УстановитьНастройкиПоСтатусу();
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Иначе
		
		УстановитьЗаголовкиДекорацийСГиперссылками();
		
		ТекстСообщения = НСтр("ru = 'Созданы документы начисления. Отмена согласования запрещена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект", "Статус");
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы("Статус");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьСоставСегментов()
	
	ОбновитьДанныеПередФиксациейСегментов();
	Если НЕ ЕстьКорректировкаНаСогласовании
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Зафиксировать состав сегментов?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗафиксироватьСоставСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияЗафиксироватьСегменты.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ЗафиксироватьСоставСегментов(
				Объект.Ссылка,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
		
	Иначе
		
		Если ЕстьКорректировкаНаСогласовании Тогда
			
			ТекстСообщения = НСтр("ru = 'Невозможно зафиксировать состав сегментов: введена корректировка в статусе ""На согласовании"".'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		УстановитьДоступностьКомандФиксацииСегментов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтменитьФиксациюСоставаСегментов()
	
	ОбновитьДанныеПередОтменойФиксацииСегментов();
	Если НЕ ЕстьНачисления
	   И СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Отменить фиксацию состава сегментов?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтменитьФиксациюСоставаСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияОтменитьФиксациюСегментов.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ОтменитьФиксациюСоставаСегментов(
				Объект.Ссылка,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьДоступностьКомандФиксацииСегментов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗафиксироватьСоставСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			СоставСегментовЗафиксирован = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанныеПередФиксациейСегментов();
	УстановитьДоступностьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ОтменитьФиксациюСоставаСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			СоставСегментовЗафиксирован = Ложь;
			
		КонецЕсли;
		
	Иначе
		ЗаполнитьРеквизитыСегментовПоУсловию();
	КонецЕсли;
	
	УстановитьДоступностьКомандФиксацииСегментов(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполняютсяОперацииПоФиксацииСоставаСегментов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = НСтр("ru = 'По данному документу уже выполняются операции по фиксации состава сегментов. Попробуйте позже.'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	УстановитьДоступностьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Результат - СправочникСсылка.СегментыНоменклатуры, Неопределено -
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьТоварыПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыбранныйСегмент = Результат;
		ЗаполнитьТоварыПоСегментуСервер(ВыбранныйСегмент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоСегментуСервер(Знач Сегмент)
	
	СпособФормирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сегмент, "СпособФормирования");
	Если СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		
		ВыборкаНоменклатуры = ТоварыСтатическогоСегмента(Сегмент);
		
	Иначе
		
		ВыборкаНоменклатуры = ТоварыДинамическогоСегмента(Сегмент);
		
	КонецЕсли;
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		СтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаНоменклатуры);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ПоказательТоваров");
	РеквизитыФормы.Вставить("БазаРасчета");
	РеквизитыФормы.Вставить("СоставТоваров");
	РеквизитыФормы.Вставить("СоставУчастников");
	РеквизитыФормы.Вставить("ЕстьНачисления");
	РеквизитыФормы.Вставить("ЕстьПравоИзмененияУРБ");
	РеквизитыФормы.Вставить("ИспользуютсяСегменты");
	РеквизитыФормы.Вставить("СоставСегментовЗафиксирован");
	РеквизитыФормы.Вставить("ИспользуютсяДоговорыКонтрагентов");
	РеквизитыФормы.Вставить("ИспользоватьНесколькоСкладов");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьНеизменнуюНастройкуПолейПоВиду()
	
	// Состав списка отбора товаров
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовТоваров();
	ПараметрыОтбора.БезРасчета = Объект.БезРасчета;
	ПараметрыОтбора.ПоказательТоваров = ПоказательТоваров;
	ПараметрыОтбора.БазаРасчета = БазаРасчета;
	ПараметрыОтбора.СоставТоваров = СоставТоваров;
	ПараметрыОтбора.ТипБонуса = Объект.ТипБонуса;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтборТоваров(ПараметрыОтбора);
	Элементы.ОтборТоваров.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборТоваров", МассивВыбора);
	
	// Состав списка отбора участников
	НовыеПараметры = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовУчастников();
	НовыеПараметры.БезРасчета = Объект.БезРасчета;
	НовыеПараметры.СоставУчастников = СоставУчастников;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтбораУчастников(НовыеПараметры);
	Элементы.ОтборУчастников.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборУчастников", МассивВыбора);
	
	УстановитьНастройкиСведенийТоваров();
	
	ЗаголовокТоварыКоличествоПлан = НСтр("ru = 'Кол-во, план'");
	ЗаголовокКомандыЗаполнения = НСтр("ru = 'Заполнить кол-во, план...'");
	
	Если Объект.БезРасчета Тогда
		
		ЗаголовокВалюты =  НСтр("ru = 'Валюта
								|начисляемого бонуса'");
		
	ИначеЕсли БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены
		  ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены Тогда
		
		ЗаголовокВалюты = НСтр("ru = 'Валюта
							   |базовых цен'");
		
	Иначе
		
		ЗаголовокВалюты = НСтр("ru = 'Валюта'");
		
	КонецЕсли;
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
	   И Объект.НачислитьСразу Тогда
		
		ЗаголовокКомандыЗаполнения = НСтр("ru = 'Заполнить количество'");
		ЗаголовокТоварыКоличествоПлан = НСтр("ru = 'Количество'");
		
	КонецЕсли;
	
	Элементы.ТоварыКоличествоПлан.Заголовок = ЗаголовокТоварыКоличествоПлан;
	Элементы.ТоварыЗаполнитьКоличествоПлан.Заголовок = ЗаголовокКомандыЗаполнения;
	Элементы.Валюта.Заголовок = ЗаголовокВалюты;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийУчастников()
	
	ЗаголовокПоля = "";
	ИмяСтраницы = "";
	ЗаголовокСтраницы = "";
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Контрагенты
							 |клиентов'");
		ЗаголовокСтраницы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
			СоставУчастников, Объект.ОтборУчастников, Истина);
		ИмяСтраницы = Элементы.СтраницаКонтрагентыКлиентов.Имя;
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
		
		ЗаголовокПоля = НСтр("ru = 'ИНН клиентов'");
		ЗаголовокСтраницы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(
			СоставУчастников, Объект.ОтборУчастников, Истина);
		ИмяСтраницы = Элементы.СтраницаИННКонтрагентовКлиентов.Имя;
		
	Иначе
		
		ЗаголовокПоля = НСтр("ru = 'Участники'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.ОтборУчастников.Имя, "Заголовок", ЗаголовокПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, ИмяСтраницы, "Заголовок", ЗаголовокСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийТоваров()
	
	ЗаголовокПоля = "";
	Если СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Сегменты
							 |товаров'");
		
	Иначе
		
		ЗаголовокПоля = НСтр("ru = 'Товары'");
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.ОтборТоваров.Имя, "Заголовок", ЗаголовокПоля);
	
	Если СоставТоваров =  Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
		
		ЗаголовокСтраницы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(СоставТоваров, Объект.ОтборТоваров);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаТовары.Имя, "Заголовок", ЗаголовокСтраницы);
		
	ИначеЕсли СоставТоваров =  Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		ЗаголовокСтраницы = РетроБонусыКлиентСервер.ЗаголовокСтраницыПоНастройкам(СоставТоваров, Объект.ОтборТоваров);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаСегментыТоваров.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	
	Элементы.Товары.Подвал = (Объект.НачислитьСразу
		И Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийСкладов()
	
	ЗаголовокСтраницы = РетроБонусыКлиентСервер.ЗаголовокСтраницыСклады(Объект.ОтборСкладов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаСклады.Имя, "Заголовок", ЗаголовокСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийПоставщиков()
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		Если Объект.РежимНесколькоПоставщиков Тогда
			
			Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщиков;
			
		Иначе
			
			Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщика;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуДанныеПоставщика()
	
	Если Объект.ТипБонуса <> ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		ПереключениеРазрешено = РазрешеноПереключениеРежима();
		
		Если НЕ ПереключениеРазрешено Тогда
			
			Объект.РежимНесколькоПоставщиков = Истина;
			
		Иначе
			
			Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщика;
			
			Если Объект.Поставщики.Количество() = 1 Тогда
				
				СтрокаПоставщика = Объект.Поставщики[0];
				ИспользуютсяДоговорыКонтрагентов = СтрокаПоставщика.ИспользуютсяДоговорыКонтрагентов;
				ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, СтрокаПоставщика);
				
			Иначе
				
				ИспользуютсяДоговорыКонтрагентов = Истина;
				ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения();
				
			КонецЕсли;
			
			Объект.Контрагент = ДанныеПоставщика.Контрагент;
			Объект.Партнер = ДанныеПоставщика.Партнер;
			Объект.Договор = ДанныеПоставщика.Договор;
			Объект.Соглашение = ДанныеПоставщика.Соглашение;
			ТекущийКонтрагент = Объект.Контрагент;
			ТекущийПартнер = Объект.Партнер;
			
			Объект.Поставщики.Очистить(); 
			
			Если НЕ Объект.Исправление Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"Договор",
					"ТолькоПросмотр",
					НЕ ИспользуютсяДоговорыКонтрагентов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если (ЗначениеЗаполнено(Объект.Контрагент)
		 ИЛИ ЗначениеЗаполнено(Объект.Партнер)
		 ИЛИ ЗначениеЗаполнено(Объект.Договор)
		 ИЛИ ЗначениеЗаполнено(Объект.Соглашение)) Тогда
		
			СтрокаПоставщика = Объект.Поставщики.Добавить();
			ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
			ЗаполнитьЗначенияСвойств(СтрокаПоставщика, ДанныеПоставщика);
			
			Если Объект.Исправление  Тогда
				
				СтрокаПоставщика.ИсходнаяСтрока = Истина;
				СтрокаПоставщика.НачалоДействияДоИзменений = ПоставщикНачалоДействияДоИзменений;
				СтрокаПоставщика.ОкончаниеДействияДоИзменений = ПоставщикОкончаниеДействияДоИзменений;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийКонтрагент = Объект.Контрагент;
		ТекущийПартнер = Объект.Партнер;
		
		Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщиков;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РазрешеноПереключениеРежима()
	
	ОчиститьСообщения();
	
	Если Объект.Поставщики.Количество() = 0 Тогда
		
		ПереключениеРазрешено = Истина;
		
	ИначеЕсли Объект.Поставщики.Количество() > 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Переключение в режим ""Без разбиения"" невозможно, если в данных поставщика введено более одной строки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Поставщики", "Объект");
		ПереключениеРазрешено = Ложь;
		
	Иначе
		
		ТекущаяСтрока = Объект.Поставщики[0];
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Поставщики", 1, "НомерСтроки");
		
		Если ТекущаяСтрока.Отменено Тогда
			
			ТекстСообщения = НСтр("ru = 'Переключение в режим ""Без разбиения"" невозможно, если все строки отменены'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
			ПереключениеРазрешено = Ложь;
			
		Иначе
			
			ПустаяДата = Дата(1, 1, 1);
			Если ТекущаяСтрока.НачалоДействия = ПустаяДата Тогда
				ТекущаяДатаНачала = Объект.НачалоДействия
			Иначе
				ТекущаяДатаНачала = ТекущаяСтрока.НачалоДействия;
			КонецЕсли;
				
			Если ТекущаяСтрока.ОкончаниеДействия = ПустаяДата Тогда
				ТекущаяДатаОкончания = Объект.ОкончаниеДействия;
			Иначе
				ТекущаяДатаОкончания = ТекущаяСтрока.ОкончаниеДействия;
			КонецЕсли;
			
			ПереключениеРазрешено = (ТекущаяДатаНачала = Объект.НачалоДействия
				И ТекущаяДатаОкончания = Объект.ОкончаниеДействия);
			Если НЕ ПереключениеРазрешено Тогда
				
				ТекстСообщения = НСтр("ru = 'Переключение в режим ""Без разбиения"" невозможно, если период действия в строке не совпадает с периодом действия документа'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПереключениеРазрешено;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницуДанныеПоставщикаПослеЗаписи()
	
	Если Объект.ТипБонуса <> ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Закупки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РежимНесколькоПоставщиков Тогда
		
		Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщиков;
		
	Иначе
		
		Элементы.СтраницыДанныеПоставщика.ТекущаяСтраница = Элементы.СтраницаДанныеПоставщиков;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = РетроБонусыСервер.ЗаголовокДокумента(
		Объект.Ссылка, Объект.Номер, Объект.Дата, Объект.Исправление);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВидуРетроБонуса(ТолькоКеш = Ложь)
	
	МассивРеквизитов = Новый Массив; // Массив Из Строка
	
	Если НЕ ТолькоКеш Тогда
		
		МассивРеквизитов.Добавить("БезРасчета");
		МассивРеквизитов.Добавить("ТипБонуса");
		МассивРеквизитов.Добавить("ПериодичностьУсловий");
		МассивРеквизитов.Добавить("ПериодичностьНачислений");
		МассивРеквизитов.Добавить("ОтборТоваров");
		МассивРеквизитов.Добавить("ОтборУчастников");
		
	КонецЕсли;
	
	МассивРеквизитов.Добавить("ПоказательТоваров");
	МассивРеквизитов.Добавить("БазаРасчета");
	МассивРеквизитов.Добавить("СоставТоваров");
	МассивРеквизитов.Добавить("СоставУчастников");
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидРетроБонуса, МассивРеквизитов);
	
	Если НЕ ТолькоКеш Тогда
		
		Объект.БезРасчета = РеквизитыВида.БезРасчета;
		Если НЕ Объект.БезРасчета Тогда
			
			Объект.НачислитьСразу = Ложь;
			
		КонецЕсли;
		
		Объект.ТипБонуса = РеквизитыВида.ТипБонуса;
		Объект.ПериодичностьУсловий = РеквизитыВида.ПериодичностьУсловий;
		Объект.ПериодичностьНачислений = РеквизитыВида.ПериодичностьНачислений;
		Объект.ОтборУчастников = РеквизитыВида.ОтборУчастников;
		Объект.ОтборТоваров = РеквизитыВида.ОтборТоваров;
		
	КонецЕсли;
	
	ПоказательТоваров = РеквизитыВида.ПоказательТоваров;
	БазаРасчета = РеквизитыВида.БазаРасчета;
	СоставТоваров = РеквизитыВида.СоставТоваров;
	СоставУчастников = РеквизитыВида.СоставУчастников;
	
	Если НЕ ТолькоКеш Тогда
		
		ОпределитьВалютуДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВалютуДокумента()
	
	ПоказательСуммаВзаиморасчетов = 
		(ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
		 И (БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаВзаиморасчеты
		    ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты));
	
	Если НЕ Объект.Организация.Пустая()
	   И (БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиРегУчет
		  ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаРеглУчет) Тогда
		
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		
	ИначеЕсли Объект.БезРасчета
		  ИЛИ Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
		  ИЛИ (БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.ВыручкаВзаиморасчеты
		       И БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты)
		  ИЛИ ПоказательСуммаВзаиморасчетов Тогда
		
		Если Объект.Валюта.Пустая() Тогда
			Объект.Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		КонецЕсли;
		
	Иначе
		
		Объект.Валюта = Справочники.Валюты.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПоВалюте()
	
	Если Объект.Валюта.Пустая() Тогда
		НаименованиеВалюты = "";
	Иначе
		НаименованиеВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Валюта, "Наименование");
	КонецЕсли;
	
	#Область СуммаБонус
	
	Если Объект.Валюта.Пустая() Тогда
		
		ЗаголовокСуммаБонус = НСтр("ru = 'Бонус, сумма'");
		ЗаголовокБонусЗаЕдиницу = НСтр("ru = 'Бонус за единицу'");
		
	Иначе
		
		ШаблонСуммаБонус = НСтр("ru = 'Бонус, сумма (%1)'");
		ЗаголовокСуммаБонус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСуммаБонус,
			НаименованиеВалюты);
			
		ШаблонБонусЗаЕдиницу = НСтр("ru = 'Бонус за единицу (%1)'");
		ЗаголовокБонусЗаЕдиницу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонБонусЗаЕдиницу,
			НаименованиеВалюты);
		
	КонецЕсли;
	
	Элементы.ТоварыСуммаБонус.Заголовок = ЗаголовокСуммаБонус;
	Элементы.ТоварыБонусЗаЕдиницу.Заголовок = ЗаголовокБонусЗаЕдиницу;
	#КонецОбласти
	
	#Область БазоваяЦена
	Если БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены
	   И БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены
	 ИЛИ Объект.Валюта.Пустая() Тогда
		
		ЗаголовокБазоваяЦена = НСтр("ru = 'Базовая цена'");
		
	Иначе
		
		ШаблонБазоваяЦена = НСтр("ru = 'Базовая цена (%1)'");
		ЗаголовокБазоваяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонБазоваяЦена,
			НаименованиеВалюты);
		
	КонецЕсли;
	
	Элементы.ТоварыБазоваяЦена.Заголовок = ЗаголовокБазоваяЦена;
	#КонецОбласти
	
КонецПроцедуры

// Установить доступный список периодичности начислений
// 
// Параметры:
//  Форма - см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокПериодичностьНачислений(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхПериодичностейНачислений();
	ПараметрыОтбора.ПериодичностьУсловий = Объект.ПериодичностьУсловий;
	ПараметрыОтбора.ПоказательТоваров = Форма.ПоказательТоваров;
	ПараметрыОтбора.ТипБонуса = Объект.ТипБонуса;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокПериодичностьНачислений(ПараметрыОтбора);
	Форма.Элементы.ПериодичностьНачислений.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ПериодичностьНачислений", МассивВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакНаличияНачислений()
	
	Если Объект.ИсправляемыйДокумент.Пустая() Тогда
		
		Если Объект.Ссылка.Пустая()
		 ИЛИ Объект.НачислитьСразу Тогда
			
			ЕстьНачисления = Ложь;
			
		Иначе
			
			МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийПоставщиков(Объект.Ссылка);
			ЕстьНачисления = (МаксимальнаяДата <> Дата(1, 1, 1));
			
		КонецЕсли;
		
	Иначе
		
		МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийПоставщиков(Объект.ИсправляемыйДокумент);
		ЕстьНачисления = (МаксимальнаяДата <> Дата(1, 1, 1));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоследнейКорректировки()
	
	ЕстьКорректировкаНаСогласовании = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ЕстьКорректировкаНаСогласовании = РетроБонусыСервер.ЕстьКорректировкаНаСогласовании(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередФиксациейСегментов()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		УстановитьЗаголовкиДекорацийСГиперссылками();
		
	КонецЕсли;
	ЗаполнитьРеквизитыСегментовПоУсловию();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередОтменойФиксацииСегментов()
	
	ЗаполнитьПризнакНаличияНачислений();
	Если ЕстьНачисления Тогда
		УстановитьЗаголовкиДекорацийСГиперссылками();
	КонецЕсли;
	ЗаполнитьРеквизитыСегментовПоУсловию();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСуммыПлановСтрокой(Форма)
	
	Форма.СуммаПланСтрокой = Формат(Форма.Объект.СуммаПлан, "ЧДЦ=2;");
	
	ШаблонСуммы = "<%1>";
	Форма.СуммаПланСтрокойНеизменный = СтрШаблон(ШаблонСуммы, Форма.СуммаПланСтрокой);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварыСтатическогоСегмента(Сегмент)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Сегмент = &Сегмент
	|	И НоменклатураСегмента.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварыДинамическогоСегмента(Сегмент)
	
	ДанныеСегмента = ТаблицаДинамическогоСегментаНоменклатуры(Сегмент);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДанныеСегмента.ЭлементСписка КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ДанныеСегмента.ХарактеристикаЭлемента КАК Характеристика
	|ПОМЕСТИТЬ ВТ_НоменклатураСегментов
	|ИЗ
	|	&ДанныеСегмента КАК ДанныеСегмента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НоменклатураСегментов.Номенклатура КАК Номенклатура,
	|	ВТ_НоменклатураСегментов.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_НоменклатураСегментов КАК ВТ_НоменклатураСегментов
	|ГДЕ
	|	ВТ_НоменклатураСегментов.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеСегмента", ДанныеСегмента);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Параметры:
//  Сегмент - СправочникСсылка.СегментыНоменклатуры
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлементСписка - СправочникСсылка.Номенклатура
//  * ХарактеристикаЭлемента - СправочникСсылка.ХарактеристикиНоменклатуры
//
&НаСервереБезКонтекста
Функция ТаблицаДинамическогоСегментаНоменклатуры(Сегмент)
	
	ТаблицаСегмента = СегментыСервер.СписокЭлементовСКД(Сегмент);
	Возврат ТаблицаСегмента;
	
КонецФункции

&НаСервере
Процедура ПериодДействияУсловияПоставщикаДоИзменения()
	
	Если НЕ Объект.Исправление
	   И Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки
	   И НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", Объект.ИсправляемыйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РетроБонусыПоставщиковПоставщики.НачалоДействия,
	|	РетроБонусыПоставщиковПоставщики.ОкончаниеДействия
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковПоставщики КАК РетроБонусыПоставщиковПоставщики
	|ГДЕ
	|	РетроБонусыПоставщиковПоставщики.ДокументУсловий = &ДокументУсловий";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоставщикНачалоДействияДоИзменений = Выборка.НачалоДействия;
		ПоставщикОкончаниеДействияДоИзменений = Выборка.ОкончаниеДействия;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПриИзмененииКонтрагентовПартнеровПоставщиковВспомогательные

&НаСервере
Процедура ПартнерПриИзмененииНаСервере(ДанныеПоставщика)
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Партнер) Тогда
		
		ДанныеПоставщика.Контрагент = КонтрагентПоПартнеру(ДанныеПоставщика.Партнер);
		
	КонецЕсли;
	
	ТекущийПартнер = ДанныеПоставщика.Партнер;
	ТекущийКонтрагент = ДанныеПоставщика.Контрагент;
	
	УстановитьДоступностьПоляДоговор();
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииНаСервере(ДанныеПоставщика)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПоставщика.Соглашение) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Соглашение = ДанныеПоставщика.Соглашение;
	РеквизитыСоглашения = "Контрагент, Партнер, ИспользуютсяДоговорыКонтрагентов";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, РеквизитыСоглашения);
	ДанныеПоставщика.Партнер = Реквизиты.Партнер;
	ДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов = Реквизиты.ИспользуютсяДоговорыКонтрагентов;
	
	Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
		
		ДанныеПоставщика.Контрагент = Реквизиты.Контрагент;
		
	КонецЕсли;
	
	Если НЕ ДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДанныеПоставщика.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
	ТекущийПартнер = ДанныеПоставщика.Партнер;
	ТекущийКонтрагент = ДанныеПоставщика.Контрагент;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(ДанныеПоставщика)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПоставщика.Договор) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Договор = ДанныеПоставщика.Договор;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Контрагент, Партнер");
	ДанныеПоставщика.Партнер = Реквизиты.Партнер;
	ДанныеПоставщика.Контрагент = Реквизиты.Контрагент;
	
	ТекущийПартнер = ДанныеПоставщика.Партнер;
	ТекущийКонтрагент = ДанныеПоставщика.Контрагент;
	
КонецПроцедуры

// Параметры:
//  Партнер - СправочникСсылка.Партнеры
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
&НаСервереБезКонтекста
Функция КонтрагентПоПартнеру(Знач Партнер)
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Выборка = ВыборкаКонтрагентов(Партнер);
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Контрагент = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Параметры:
//  Партнер - СправочникСсылка.Партнеры - Партнер
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* Ссылка - СправочникСсылка.Контрагенты
//
&НаСервереБезКонтекста
Функция ВыборкаКонтрагентов(Знач Партнер)
	
	Запрос = Новый	Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Родитель
	|ГДЕ
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) = &Партнер
	|	И ЕСТЬNULL(Партнеры.Родитель, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатПоПартнеру = Результат[0];
	РезультатПоРодителюПартнера = Результат[1];
	
	Если РезультатПоПартнеру.Пустой() Тогда
		Возврат РезультатПоРодителюПартнера.Выбрать();
	Иначе
		Возврат РезультатПоПартнеру.Выбрать();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДанныеПоставщика

&НаСервере
Процедура УстановитьДоступностьПоляДоговор()
	
	Если Объект.РежимНесколькоПоставщиков
	 ИЛИ Объект.Исправление
	 ИЛИ НЕ ИспользоватьДоговорыСПоставщиками Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ИспользуютсяДоговорыКонтрагентов = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Договор",
		"ТолькоПросмотр",
		НЕ ИспользуютсяДоговорыКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(ДанныеПоставщика, Элемент)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеПоставщика.Партнер) Тогда
		
		СтруктураОтбора.Вставить("Партнер", ДанныеПоставщика.Партнер);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ДанныеПоставщика.Контрагент);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерНачалоВыбораЗавершение(ДанныеПоставщика, Элемент)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Поставщик", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Контрагент) Тогда
		
		ПараметрыФормы.Вставить("Контрагент", ДанныеПоставщика.Контрагент);
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока", ДанныеПоставщика.Партнер);
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбораЗавершение(ДанныеПоставщика, Элемент)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ТипыДоговоров = РетроБонусыКлиентСервер.ТипыДоговоровЗакупки();
	СтруктураОтбора.Вставить("ТипДоговора", Новый ФиксированныйМассив(ТипыДоговоров));
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Контрагент) Тогда
		
		СтруктураОтбора.Вставить("Контрагент", ДанныеПоставщика.Контрагент);
		
	КонецЕсли;
	
	Если ПоказательТоваров = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма")
	   И БазаРасчета = ПредопределенноеЗначение("Перечисление.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты") Тогда
		
		СтруктураОтбора.Вставить("ВалютаВзаиморасчетов", Объект.Валюта);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Партнер) Тогда
		
		СтруктураОтбора.Вставить("Партнер", ДанныеПоставщика.Партнер);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ПараметрыФормы.Вставить("ТекущаяСтрока", ДанныеПоставщика.Договор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбораЗавершение(ДанныеПоставщика, Элемент)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	МассивХозОпераций = РетроБонусыКлиентСервер.ХозяйственныеОперацииЗакупки();
	СтруктураОтбора.Вставить("ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивХозОпераций));
	
	МассивОрганизаций = Новый Массив; // Массив Из СправочникСсылка.Организации
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураОтбора.Вставить("Организация", Новый ФиксированныйМассив(МассивОрганизаций));
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Контрагент) Тогда
		
		МассивКонтрагентов = Новый Массив; // Массив Из СправочникСсылка.Контрагенты
		МассивКонтрагентов.Добавить(ДанныеПоставщика.Контрагент);
		МассивКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		СтруктураОтбора.Вставить("Контрагент", Новый ФиксированныйМассив(МассивКонтрагентов));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоставщика.Партнер) Тогда
		
		СтруктураОтбора.Вставить("Партнер", ДанныеПоставщика.Партнер);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РазрешитьВыборНедействующих", Истина);
	ПараметрыФормы.Вставить("ДатаДокумента", Дата(1, 1, 1)); // Не ограничиваем выбор соглашений по периоду
	ПараметрыФормы.Вставить("ТекущаяСтрока", ДанныеПоставщика.Соглашение);
	
	ОткрытьФорму("Справочник.СоглашенияСПоставщиками.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Параметры:
//  ИспользуютсяДоговорыКонтрагентов - Булево
//  ИсточникЗаполнения - ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура: см. Документ.УсловияРетроБонусовПоставщика.Форма.ФормаДокумента.Элементы.Поставщики, см. Документ.УсловияРетроБонусовПоставщика.Форма.ФормаДокумента -
// 
// Возвращаемое значение:
//  Структура - Данные поставщика для заполнения:
// * Контрагент - СправочникСсылка.Контрагенты - 
// * Партнер - СправочникСсылка.Партнеры - 
// * Договор - СправочникСсылка.ДоговорыКонтрагентов - 
// * Соглашение - СправочникСсылка.СоглашенияСПоставщиками - 
// * ИспользуютсяДоговорыКонтрагентов - Булево -
// 
&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов = Истина, ИсточникЗаполнения = Неопределено)
	
	Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	
	ДанныеПоставщика = Новый Структура;
	ДанныеПоставщика.Вставить("Контрагент", Контрагент);
	ДанныеПоставщика.Вставить("Партнер", Партнер);
	ДанныеПоставщика.Вставить("Договор", Договор);
	ДанныеПоставщика.Вставить("Соглашение", Соглашение);
	ДанныеПоставщика.Вставить("ИспользуютсяДоговорыКонтрагентов", Истина);
	
	Если ИсточникЗаполнения <> Неопределено Тогда
		
		ДанныеПоставщика.Контрагент = ИсточникЗаполнения.Контрагент;
		ДанныеПоставщика.Партнер = ИсточникЗаполнения.Партнер;
		ДанныеПоставщика.Договор = ИсточникЗаполнения.Договор;
		ДанныеПоставщика.Соглашение = ИсточникЗаполнения.Соглашение;
		ДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов = ИспользуютсяДоговорыКонтрагентов;
		
	КонецЕсли;
	
	Возврат ДанныеПоставщика;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеДанныеПоСоглашению()
	
	Если (НЕ ЗначениеЗаполнено(Объект.Соглашение)
		  И НЕ Объект.РежимНесколькоПоставщиков)
	 ИЛИ (НЕ Объект.РежимНесколькоПоставщиков
		  И Объект.Исправление)
	 ИЛИ НЕ ИспользоватьСоглашенияСПоставщиками Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Поле = "ИспользуютсяДоговорыКонтрагентов";
	Если НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		ИспользуютсяДоговорыКонтрагентов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, Поле);
		
	Иначе
		
		ОтборСтрок = Новый Структура("ИсходнаяСтрока", Ложь);
		Колонка = "Соглашение";
		Соглашения = Объект.Поставщики.Выгрузить(ОтборСтрок, Колонка).ВыгрузитьКолонку(Колонка); // Массив из СправочникСсылка.СоглашенияСПоставщиками
		
		ОтборПоСоглашению = Новый Структура;
		ОтборПоСоглашению.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		
		РеквизитыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Соглашения, Поле);
		
		Для Каждого ТекущиеДанныеПоставщика Из Объект.Поставщики Цикл
			
			ТекущееСоглашение = ТекущиеДанныеПоставщика.Соглашение;
			
			Если РеквизитыСоглашений[ТекущееСоглашение] = Неопределено Тогда
				
				ТекущиеДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов = Истина;
				
			Иначе
				
				ЗначениеРеквизита = РеквизитыСоглашений[ТекущееСоглашение].ИспользуютсяДоговорыКонтрагентов;
				ТекущиеДанныеПоставщика.ИспользуютсяДоговорыКонтрагентов = ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяАктуализацияДоговоровСоглашений()
	
	Актуализировать = Истина;
	
	Если (НЕ ИспользоватьДоговорыСПоставщиками
	   И НЕ ИспользоватьСоглашенияСПоставщиками)
	 ИЛИ (ТекущаяОрганизация = Объект.Организация
	   И ТекущийВидРетроБонуса = Объект.ВидРетроБонуса
	   И ТекущаяВалюта = Объект.Валюта) Тогда
		
		Актуализировать = Ложь;
		
	ИначеЕсли ПоказательТоваров <> Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
	   И БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты
	   И ТекущаяОрганизация = Объект.Организация Тогда
		
		Актуализировать = Ложь;
		
	КонецЕсли;
	
	ТекущаяОрганизация = Объект.Организация;
	ТекущийВидРетроБонуса = Объект.ВидРетроБонуса;
	ТекущаяВалюта = Объект.Валюта;
	
	Возврат Актуализировать;
	
КонецФункции

&НаСервере
Процедура АктуализироватьДоговорыСоглашенияПоставщикаПоДаннымШапки()
	
	Если НЕ ТребуетсяАктуализацияДоговоровСоглашений() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборПоВалюте = Ложь;
	Если ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
	   И БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты Тогда
		
		ОтборПоВалюте = Истина;
		
	КонецЕсли;
	
	Если НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		ТаблицаПроверки = Новый ТаблицаЗначений;
		ТаблицаПроверки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаПроверки.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаПроверки.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		ТаблицаПроверки.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаПроверки.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
		ТаблицаПроверки.Колонки.Добавить("НачалоДействия", Новый ОписаниеТипов("Дата"));
		ТаблицаПроверки.Колонки.Добавить("ОкончаниеДействия", Новый ОписаниеТипов("Дата"));
		ДанныеПоставщика = ДанныеПоставщикаДляЗаполнения(ИспользуютсяДоговорыКонтрагентов, Объект);
		ЗаполнитьЗначенияСвойств(ТаблицаПроверки.Добавить(), ДанныеПоставщика);
		
	Иначе
		
		ТаблицаПроверки = Объект.Поставщики.Выгрузить();
		
	КонецЕсли;
	
	АктуализированныеДанные = АктуализированныеДанныеПоставщика(ОтборПоВалюте, ТаблицаПроверки);
	
	Если НЕ Объект.РежимНесколькоПоставщиков Тогда
		
		Объект.Контрагент = АктуализированныеДанные[0].Контрагент;
		Объект.Партнер = АктуализированныеДанные[0].Партнер;
		Объект.Договор = АктуализированныеДанные[0].Договор;
		Объект.Соглашение = АктуализированныеДанные[0].Соглашение;
		ИспользуютсяДоговорыКонтрагентов = АктуализированныеДанные[0].ИспользуютсяДоговорыКонтрагентов;
		
	Иначе
		
		Объект.Поставщики.Загрузить(АктуализированныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОтборПоВалюте - Булево - Отбор по валюте
//  ТаблицаПроверки - ТаблицаЗначений - Таблица проверки:
// * НомерСтроки - Число
// * Контрагент - СправочникСсылка.Контрагенты
// * Партнер - СправочникСсылка.Партнеры
// * Договор - СправочникСсылка.ДоговорыКонтрагентов
// * Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// * НачалоДействия - Дата
// * ОкончаниеДействия - Дата
// 
// Возвращаемое значение:
//  ТаблицаЗначений - ТаблицаЗначений:
// * НомерСтроки - Число
// * Контрагент - СправочникСсылка.Контрагенты
// * Партнер - СправочникСсылка.Партнеры
// * Договор - СправочникСсылка.ДоговорыКонтрагентов
// * Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// * НачалоДействия - Дата
// * ОкончаниеДействия - Дата,
// * ИспользуютсяДоговорыКонтрагентов - Булево
//
&НаСервере
Функция АктуализированныеДанныеПоставщика(ОтборПоВалюте, ТаблицаПроверки)
	
	МассивОрганизаций = Новый Массив; // Массив Из СправочникСсылка.Организации
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПроверки", ТаблицаПроверки);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ОтборПоВалюте", ОтборПоВалюте);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПроверки.Контрагент КАК Контрагент,
	|	ТаблицаПроверки.Партнер КАК Партнер,
	|	ТаблицаПроверки.Договор КАК Договор,
	|	ТаблицаПроверки.Соглашение КАК Соглашение,
	|	ТаблицаПроверки.НачалоДействия КАК НачалоДействия,
	|	ТаблицаПроверки.ОкончаниеДействия КАК ОкончаниеДействия
	|ПОМЕСТИТЬ ВТ_ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПроверки.Контрагент КАК Контрагент,
	|	ТаблицаПроверки.Партнер КАК Партнер,
	|	ТаблицаПроверки.Договор КАК Договор,
	|	ТаблицаПроверки.Соглашение КАК Соглашение,
	|	ТаблицаПроверки.НачалоДействия КАК НачалоДействия,
	|	ТаблицаПроверки.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияДоговора,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДоговора,
	|	ЕСТЬNULL(СоглашенияСПоставщиками.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияСоглашения,
	|	ЕСТЬNULL(СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов, ИСТИНА) КАК ИспользуютсяДоговорыКонтрагентов
	|ПОМЕСТИТЬ ВТ_ТаблицаПроверкиСДаннымиПроверки
	|ИЗ
	|	ВТ_ТаблицаПроверки КАК ТаблицаПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО ТаблицаПроверки.Соглашение = СоглашенияСПоставщиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ТаблицаПроверки.Договор = ДоговорыКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверкиСДаннымиПроверки.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПроверкиСДаннымиПроверки.Контрагент КАК Контрагент,
	|	ТаблицаПроверкиСДаннымиПроверки.Партнер КАК Партнер,
	|	ТаблицаПроверкиСДаннымиПроверки.НачалоДействия КАК НачалоДействия,
	|	ТаблицаПроверкиСДаннымиПроверки.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаПроверкиСДаннымиПроверки.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	ВЫБОР
	|		КОГДА ТаблицаПроверкиСДаннымиПроверки.ОрганизацияДоговора <> &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОГДА &ОтборПоВалюте
	|				И ТаблицаПроверкиСДаннымиПроверки.ВалютаДоговора <> &Валюта
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаПроверкиСДаннымиПроверки.Договор
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПроверкиСДаннымиПроверки.ОрганизацияСоглашения В (&МассивОрганизаций)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаПроверкиСДаннымиПроверки.Соглашение
	|	КОНЕЦ КАК Соглашение
	|ИЗ
	|	ВТ_ТаблицаПроверкиСДаннымиПроверки КАК ТаблицаПроверкиСДаннымиПроверки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	АктуализированныеДанные = Запрос.Выполнить().Выгрузить();
	Возврат АктуализированныеДанные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ЗагрузкаИзФайлов

&НаСервере
Функция ОписаниеКолонокМакетаТовары(Знач НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.КоличествоПлан Тогда
		ИменаКолонок.Добавить("КоличествоПлан");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БазоваяЦена Тогда
		ИменаКолонок.Добавить("БазоваяЦена");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Процент Тогда
		ИменаКолонок.Добавить("Процент");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.СуммаБонус Тогда
		ИменаКолонок.Добавить("СуммаБонус");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БонусЗаЕдиницу Тогда
		ИменаКолонок.Добавить("БонусЗаЕдиницу");
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.Товары, Колонки);
	
	НомерКолонки = 0;
	
	ИмяГруппыНоменклатура = НСтр("ru = 'Номенклатура'");
	
	НомерКолонки = НомерКолонки + 1;
	ТипШтрихКод = ОбщегоНазначения.ОписаниеТипаСтрока(200);
	ЗаголовокКолонки = НСтр("ru = 'Штрихкод'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Штрихкод", ТипШтрихКод, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
	ЗаголовокКолонки = НСтр("ru = 'Код'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипАртикул = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ЗаголовокКолонки = НСтр("ru = 'Артикул'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Артикул", ТипАртикул, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипНаименованиеНоменклатуры = ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ЗаголовокКолонки = НСтр("ru = 'Номенклатура'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"НоменклатураНаименование",
		ТипНаименованиеНоменклатуры,
		ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	Если НастройкиОтображенияПолей.Характеристика Тогда
		
		НомерКолонки = НомерКолонки + 1;
		ТипНаименованиеХарактеристики = ОбщегоНазначения.ОписаниеТипаСтрока(150);
		ЗаголовокКолонки = НСтр("ru = 'Характеристика'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
			"ХарактеристикаНаименование",
			ТипНаименованиеХарактеристики,
			ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = "Характеристика";
		КолонкиМакета.Добавить(Колонка);
		
	КонецЕсли;
	
	ТекстПодсказкиЧисло =
		НСтр("ru = 'Поддерживаются лидирующие нули, а также разделители целой и дробной части "","" и "".""'");
	Если НастройкиОтображенияПолей.КоличествоПлан Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("КоличествоПлан", КолонкиМакета);
		Колонка.Заголовок = Элементы.ТоварыКоличествоПлан.Заголовок;
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БазоваяЦена Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("БазоваяЦена", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Базовая цена'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Процент Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("Процент", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Бонус, %'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БонусЗаЕдиницу Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("БонусЗаЕдиницу", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Бонус за единицу'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.СуммаБонус Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("СуммаБонус", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Бонус, сумма'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка -
//
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(Знач АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных); // ТаблицаЗначений
	
	РассчитатьСуммы = (Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
								И Объект.НачислитьСразу);
	
	СтрокиДобавлены = Ложь;
	Для НомерСтроки = 1 По ЗагруженныеДанные.Количество() Цикл
		
		СтрокаТаблицы = ЗагруженныеДанные[НомерСтроки - 1];
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СуммыЗаполнены = (НоваяСтрока.БонусЗаЕдиницу <> 0
						И НоваяСтрока.СуммаБонус <> 0);
		
		Если РассчитатьСуммы Тогда
			
			Если СуммыЗаполнены Тогда
				
				ПроверитьСуммыВЗагруженнойСтроке(НоваяСтрока, НомерСтроки);
				
			Иначе
				
				РассчитатьСуммыВЗагруженнойСтроке(НоваяСтрока);
				
			КонецЕсли;
			
		Иначе
			НоваяСтрока.СуммаБонус = 0;
		КонецЕсли;
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСуммыВЗагруженнойСтроке(СтрокаТЧ)
	
	Если СтрокаТЧ.БонусЗаЕдиницу = 0 Тогда
		
		Если СтрокаТЧ.КоличествоПлан = 0 Тогда
			СтрокаТЧ.БонусЗаЕдиницу = СтрокаТЧ.СуммаБонус;
		Иначе
			СтрокаТЧ.БонусЗаЕдиницу = Окр(СтрокаТЧ.СуммаБонус / СтрокаТЧ.КоличествоПлан, 2);
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.СуммаБонус = 0 Тогда
		
		СтрокаТЧ.СуммаБонус = СтрокаТЧ.БонусЗаЕдиницу * СтрокаТЧ.КоличествоПлан;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуммыВЗагруженнойСтроке(СтрокаТЧ, НомерСтроки)
	
	СуммаБонусРасчетная = СтрокаТЧ.БонусЗаЕдиницу * СтрокаТЧ.КоличествоПлан;
	
	Если СтрокаТЧ.СуммаБонус <> СуммаБонусРасчетная Тогда
		
		ШаблонСообщения = НСтр("ru = 'Значение суммы бонуса не совпадает с расчетным (%1)'");
		РасчетнаяСуммаСтрокой = Формат(СуммаБонусРасчетная, "ЧДЦ=2; ЧН=0;");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РасчетнаяСуммаСтрокой);
		ПутьКПолю = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "СуммаБонус");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, ПутьКПолю, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаСегментовТоваров()
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.СегментыТоваров, "Сегмент");
	
	ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
	ЗаголовокКолонки = НСтр("ru = 'Код'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 1;
	КолонкиМакета.Добавить(Колонка);
	
	ТипНаименованиеСегмента = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ЗаголовокКолонки = НСтр("ru = 'Сегмент'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"СегментНаименование",
		ТипНаименованиеСегмента,
		ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 2;
	КолонкиМакета.Добавить(Колонка);
	
	ЗагрузкаДанныхИзФайлаКлиентСервер.УдалитьКолонкуМакета("Сегмент", КолонкиМакета);
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьСегментыТоваровИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСегментыТоваровИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//
&НаСервере
Процедура ЗагрузитьСегментыТоваровИзФайлаНаСервере(Знач АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.СегментыТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаИНН(Знач НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	ИменаКолонок.Добавить("ИНН");
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.ИННКонтрагентовКлиентов, Колонки);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ИНН", КолонкиМакета);
	Колонка.ОбязательнаДляЗаполнения = Истина;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьИННКонтрагентовИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИННКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка -
//
&НаСервере
Процедура ЗагрузитьИННКонтрагентовИзФайлаНаСервере(Знач АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.ИННКонтрагентовКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаКонтрагенты(Знач НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.КонтрагентыКлиентов, Колонки);
	
	НомерКолонки = 0;
	
	ИмяГруппы = "Контрагент";
	
	НомерКолонки = НомерКолонки + 1;
	ТипИНН = Метаданные.ОпределяемыеТипы.ИНН.Тип;
	ЗаголовокКолонки = НСтр("ru = 'ИНН'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ИНН", ТипИНН, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Родитель = ИмяГруппы;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипКПП = ОбщегоНазначения.ОписаниеТипаСтрока(9);
	ЗаголовокКолонки = НСтр("ru = 'КПП'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КПП", ТипКПП, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Родитель = ИмяГруппы;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипНаименованиеКонтрагента = ОбщегоНазначения.ОписаниеТипаСтрока(250);
	ЗаголовокКолонки = НСтр("ru = 'Контрагент'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"КонтрагентНаименование",
		ТипНаименованиеКонтрагента,
		ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Родитель = ИмяГруппы;
	КолонкиМакета.Добавить(Колонка);
		
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьКонтрагентовИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка - Адрес загруженных данных
//
&НаСервере
Процедура ЗагрузитьКонтрагентовИзФайлаНаСервере(Знач АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.КонтрагентыКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти