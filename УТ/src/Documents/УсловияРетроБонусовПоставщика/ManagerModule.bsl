//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РетроБонусы");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовПоставщика, ДокументОбъект.УсловияРетроБонусовПоставщика - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.УсловияРетроБонусовПоставщика") Тогда
		
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
		
	Иначе
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений; // СписокЗначений из Строка
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаУсловия(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаТовары(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаИНН(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаКонтрагенты(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаСегментыТоваров(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаПоставщики(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаСклады(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРетроБонусыПоставщиков(ТекстыЗапроса, Регистры, ДокументОбъект);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	#Область СозданиеКорректировки
	НоваяКоманда = ИсправлениеДокументов.ДобавитьКомандуИсправление(
		КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	Если НоваяКоманда <> Неопределено Тогда
		
		НоваяКоманда.Представление = НСтр("ru = 'Корректировка условий ретро-бонусов поставщиков'");
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"БезРасчета",
			Ложь);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован);
			
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НачислитьСразу",
			Ложь);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область СозданиеНачисления
	НоваяКоманда = Документы.НачислениеРетроБонусовПоставщика.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании, Параметры);
	Если НоваяКоманда <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"БезРасчета",
			Истина);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НачислитьСразу",
			Ложь);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Подготавливает данные печати.
// 
// Параметры:
//  ИсточникиДанных - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ИсточникиДанных
//  ВнешниеНаборыДанных - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ВнешниеНаборыДанных
//  КодЯзыка - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.КодЯзыка
//  ДополнительныеПараметры - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ДополнительныеПараметры
//
Процедура ПриПодготовкеДанныхПечати(ИсточникиДанных, ВнешниеНаборыДанных, КодЯзыка, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАктуальныеДанные();
	Запрос.УстановитьПараметр("МассивОбъектов", ИсточникиДанных);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	НаибольшийИндекс = МассивРезультатов.ВГраница();
	РезультатСклады = МассивРезультатов[НаибольшийИндекс];
	РезультатПоставщики = МассивРезультатов[НаибольшийИндекс - 1];
	РезультатСегментыТоваров = МассивРезультатов[НаибольшийИндекс - 2];
	РезультатКонтрагенты = МассивРезультатов[НаибольшийИндекс - 3];
	РезультатИНН = МассивРезультатов[НаибольшийИндекс - 4];
	РезультатТовары = МассивРезультатов[НаибольшийИндекс - 5];
	РезультатУсловия = МассивРезультатов[НаибольшийИндекс - 6];
	РезультатПереопределяемыеПоля = МассивРезультатов[НаибольшийИндекс - 7];
	
	ВнешниеНаборыДанных.Вставить("НаборСклады", НаборДанныхСклады(РезультатСклады));
	ВнешниеНаборыДанных.Вставить("НаборПоставщики", НаборДанныхПоставщики(РезультатПоставщики));
	ВнешниеНаборыДанных.Вставить("НаборСегментыТоваров", НаборДанныхСегментыТоваров(РезультатСегментыТоваров));
	ВнешниеНаборыДанных.Вставить("НаборКонтрагенты", НаборДанныхКонтрагенты(РезультатКонтрагенты));
	ВнешниеНаборыДанных.Вставить("НаборИНН", НаборДанныхИНН(РезультатИНН));
	ВнешниеНаборыДанных.Вставить("НаборТовары", НаборДанныхТовары(РезультатТовары));
	ВнешниеНаборыДанных.Вставить("НаборУсловия", НаборДанныхУсловия(РезультатУсловия));
	ВнешниеНаборыДанных.Вставить("ПереопределяемыеДанные", НаборПереопределяемыеПоля(РезультатПереопределяемыеПоля));
	
	//-- Локализация
	
КонецПроцедуры

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Документ.УсловияРетроБонусовПоставщика.ПФ_MXL_Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Документ.УсловияРетроБонусовПоставщика.ПФ_MXL_КарточкаКорр";
	КомандаПечати.Представление = НСтр("ru = 'Карточка (с учетом корректировок)'");
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати,
		"БезРасчета",
		Ложь);
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
		КомандаПечати,
		"НачислитьСразу",
		Ложь);
	
	//-- Локализация
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.СоставСегментовРетроБонусовПоставщиков.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "СоставСегментовРетроБонусовПоставщиковКонтекст");
	
	Отчеты.СоставСегментовРетроБонусовПоставщиков.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "СоставСегментовРетроБонусовПоставщиковПоДаннымДокументаКонтекст");
	
	Отчеты.ВедомостьПоРетроБонусамПоставщиков.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "ВедомостьПоРБПКонтекстУсловия");
	
	КомандаОтчет = Отчеты.РасчетРетроБонусовПоставщиков.ДобавитьКомандуРасчетРетроБонусовПоставщиков(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет,
			"БезРасчета",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
КонецПроцедуры

// Описание логики ограничений прав доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
		
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Исправление");
	
КонецПроцедуры

// Параметры:
//  Данные - Структура - Данные документа:
//  * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов
//  * Номер - Строка -
//  * Дата - Дата
//  * Исправление - Булево
//  Представление - Строка - Представление
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.Ссылка <> Неопределено Тогда
		
		Представление = РетроБонусыВызовСервера.ЗаголовокДокумента(
			Данные.Ссылка,
			Данные.Номер,
			Данные.Дата,
			Данные.Исправление);
		
	КонецЕсли;
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска)
	   И Параметры.Свойство("ПодборПоКонтрагенту") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		УсловиеОтбора = "ИСТИНА";
		ШаблонСтрокиОтбора = "И Документы.%1 = &%1"; // @Query-part
		МассивСтрокОтбора = Новый Массив; // Массив Из Строка
		МассивСтрокОтбора.Добавить(УсловиеОтбора);
		
		Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
			
			Поле = КлючИЗначениеОтбора.Ключ; // Строка
			ЗначениеПоля = КлючИЗначениеОтбора.Значение;
			
			ТекстОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтрокиОтбора,
				Поле);
			МассивСтрокОтбора.Добавить(ТекстОтбора);
			Запрос.УстановитьПараметр(Поле, ЗначениеПоля);
			
		КонецЦикла;
		
		УсловиеОтбора = СтрСоединить(МассивСтрокОтбора, " ");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.Номер КАК Номер,
		|	Документы.Дата КАК Дата,
		|	Документы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	РегистрСведений.РетроБонусыПоставщиковПоставщики КАК РетроБонусыПоставщиковПоставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика КАК Документы
		|		ПО РетроБонусыПоставщиковПоставщики.ДокументУсловий = Документы.Ссылка
		|ГДЕ
		|	(РетроБонусыПоставщиковПоставщики.Контрагент = &Контрагент
		|			ИЛИ РетроБонусыПоставщиковПоставщики.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И Документы.Номер ПОДОБНО &СтрокаПоиска
		|	И &УсловиеОтбора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Номер";
		
		ПараметрСтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Параметры.СтрокаПоиска) + "%";
		Запрос.УстановитьПараметр("СтрокаПоиска", ПараметрСтрокаПоиска);
		Запрос.УстановитьПараметр("Контрагент", Параметры.Контрагент);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора); // @Query-part
		
		ДанныеВыбора = Новый СписокЗначений;
		ШаблонТекстаЗначения = "%1 (%2)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстЗначения = СтрШаблон(ШаблонТекстаЗначения, СокрЛП(Выборка.Номер), Выборка.Дата);
			
			ЗначениеСписка = Новый Структура;
			ЗначениеСписка.Вставить("Значение", Выборка.Ссылка);
			ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			
			ДанныеВыбора.Добавить(ЗначениеСписка, ТекстЗначения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗагрузкаДанных

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                               находятся загруженные данные из файла.
//                               Состав колонок: Идентификатор - Число - порядковый номер строки, остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                               являющейся копией табличной части документа, 
//                               которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//       * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность
//       * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные
//   ДополнительныеПараметры   - Произвольный - Любые дополнительные сведения
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	МетаданныеУРБ = Метаданные.Документы.УсловияРетроБонусовПоставщика;
	
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	ТаблицаДляЗаполнения = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	
	Если ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Товары.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧТовары(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыТоваров.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧСегментыТоваров(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.ИННКонтрагентовКлиентов.ПолноеИмя() Тогда
		
		Для Каждого СтрокаЗагружаемая Из ЗагружаемыеДанные Цикл
			
			СтрокаТаблицы = ТаблицаДляЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗагружаемая);
			
		КонецЦикла;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.КонтрагентыКлиентов.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧКонтрагентыКлиентов(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаДляЗаполнения, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Заполняет список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//	ПолноеИмяТабличнойЧасти - Строка - Полное имя табличной части, в которую загружаются данные.
//	СписокНеоднозначностей - Массив Из Произвольный - Массив для заполнения с неоднозначными данными.
//	ИмяКолонки - Строка - Имя колонки, в который возникла неоднозначность.
//	ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений - Загружаемые данные, на основании которых возникла неоднозначность.
//	ДополнительныеПараметры - Произвольный - Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	МетаданныеУРБ = Метаданные.Документы.УсловияРетроБонусовПоставщика;
	
	Если ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Товары.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Номенклатура" Тогда
			
			ЗаполнитьСписокНеоднозначностейНоменклатуры(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
		Если ИмяКолонки = "Характеристика" Тогда
			
			ЗаполнитьСписокНеоднозначностейХарактеристики(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыТоваров.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Сегмент" Тогда
			
			ЗаполнитьСписокНеоднозначностейСегментовТоваров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
			
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.КонтрагентыКлиентов.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Контрагент" Тогда
			
			ЗаполнитьСписокНеоднозначностейКонтрагентов(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Параметры очистки реквизитов ТЧ участников
// 
// Возвращаемое значение:
//  Структура - Параметры очистки реквизитов участников:
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов -
//	* ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов -
// 
Функция ПараметрыОчисткиРеквизитовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("СоставУчастников", Перечисления.СоставыУчастниковРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ОтборУчастников", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	
	Возврат НовыеПараметры;
	
КонецФункции

// Выполняет очистку неиспользуемых реквизитов участников условий ретро-бонусов
// 
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовПоставщика -
//  	   - ДанныеФормыСтруктура: см. Документ.УсловияРетроБонусовПоставщика.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовУчастников
//
Процедура ОчиститьНеиспользуемыеРеквизитыУчастников(Объект, Параметры) Экспорт
	
	ОчиститьНеиспользуемыеРеквизитыКонтрагентыКлиентов(Объект, Параметры);
	ОчиститьНеиспользуемыеРеквизитыИННКонтрагентовКлиентов(Объект, Параметры);
	
КонецПроцедуры

// Параметры очистки реквизитов ТЧ товаров
// 
// Возвращаемое значение:
//  Структура - Параметры очистки реквизитов участников:
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//	* ОтборТоваров - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков -
//	* НачислитьСразу - Булево -
//
Функция ПараметрыОчисткиРеквизитовТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("СоставТоваров", Перечисления.СоставыТоваровРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ОтборТоваров", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ПоказательТоваров", Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.ПустаяСсылка());
	НовыеПараметры.Вставить("БазаРасчета", Перечисления.БазыРасчетаРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.ПустаяСсылка());
	НовыеПараметры.Вставить("НачислитьСразу", Ложь);
	
	Возврат НовыеПараметры;
	
КонецФункции

// Выполняет очистку неиспользуемых реквизитов товаров условий ретро-бонусов
// 
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовПоставщика-
//  	   - ДанныеФормыСтруктура: см. Документ.УсловияРетроБонусовПоставщика.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовТоваров
//
Процедура ОчиститьНеиспользуемыеРеквизитыТоваров(Объект, Параметры) Экспорт
	
	Если Параметры.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
		
		Объект.СегментыТоваров.Очистить();
		
	ИначеЕсли Параметры.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		Объект.Товары.Очистить();
		
	Иначе
		
		Объект.Товары.Очистить();
		Объект.СегментыТоваров.Очистить();
		
	КонецЕсли;
	
	Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		
		Объект.Товары.Очистить();
		Объект.СегментыТоваров.Очистить();
		
	Иначе
		
		ПустаяДата = Дата(1, 1, 1);
		ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
		ЗапретПревышенияПоСумме =
			(Параметры.ПоказательТоваров = ПоказателиТоваров.Сумма
			 И Объект.ЗапретНачисленияСверхПлана);
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			
			Если НЕ Объект.Исправление Тогда
				
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.ИсходнаяСтрока = Ложь;
				
			КонецЕсли;
			
			Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
				СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
				СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
			КонецЕсли;
			
			Если Параметры.ОтборТоваров <> Перечисления.СоставыСписковРетроБонусов.Выбранные
			 ИЛИ ЗапретПревышенияПоСумме
			 ИЛИ Параметры.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
				
				СтрокаТЧ.Процент = 0;
				
			КонецЕсли;
			
			Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
				
				СтрокаТЧ.КоличествоПлан = 0;
				СтрокаТЧ.БазоваяЦена = 0;
				
			КонецЕсли;
			
			Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных
			 ИЛИ Параметры.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
			 ИЛИ НЕ РетроБонусыКлиентСервер.ИспользуетсяПериодУсловийТоваров(Параметры.ПоказательТоваров) Тогда
				
				СтрокаТЧ.НачалоДействия = ПустаяДата;
				СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
				СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
				СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
				
			КонецЕсли;
			
			Если Параметры.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Остатки
			 ИЛИ Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
				
				СтрокаТЧ.БонусЗаЕдиницу = 0;
				СтрокаТЧ.СуммаБонус = 0;
				
			КонецЕсли;
			
			Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				
				Если Параметры.ТипБонуса <> ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
				   И (Параметры.ПоказательТоваров <> ПоказателиТоваров.Количество
					  И Параметры.ПоказательТоваров <> ПоказателиТоваров.КоличествоСовокупно
					  И Параметры.ПоказательТоваров <> ПоказателиТоваров.ПакетноеПредложение) Тогда
					
					СтрокаТЧ.КоличествоПлан = 0;
					
				КонецЕсли;
				
				Если Параметры.БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены
				   И Параметры.БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены Тогда
					
					СтрокаТЧ.БазоваяЦена = 0;
					
				КонецЕсли;
				
				Если Параметры.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки")
				   И НЕ Параметры.НачислитьСразу Тогда
				
					СтрокаТЧ.СуммаБонус = 0;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Объект.Исправление Тогда
			
			Для Каждого СтрокаТЧ Из Объект.СегментыТоваров Цикл
				
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.ИсходнаяСтрока = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры очистки реквизитов ТЧ складов
// 
// Возвращаемое значение:
//  Структура - Параметры очистки реквизитов складов:
//	* ОтборСкладов - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//
Функция ПараметрыОчисткиРеквизитовСкладов() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("ОтборСкладов", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	
	Возврат НовыеПараметры;
	
КонецФункции

// Выполняет очистку неиспользуемых реквизитов складов условий ретро-бонусов поставщиков
// 
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовПоставщика -
//  	   - ДанныеФормыСтруктура: см. Документ.УсловияРетроБонусовПоставщика.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовСкладов
//
Процедура ОчиститьНеиспользуемыеРеквизитыСкладов(Объект, Параметры) Экспорт
	
	Если Параметры.ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Объект.Склады.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Получает актуальные данные по заданному условию (документ должен быть проведен)
//
// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика - Документ условий
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* БезРасчета - Булево -
//	* НачалоДействия - Дата -
//	* ОкончаниеДействия - Дата -
//	* Организация - СправочникСсылка.Организации -
//	* Контрагент - СправочникСсылка.Контрагенты -
//	* Партнер - СправочникСсылка.Партнеры -
//	* Договор - СправочникСсылка.ДоговорыКонтрагентов -
//	* Валюта - СправочникСсылка.Валюты -
//	* СуммаБонус - Число -
//	* ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов -
//	* ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов -
//	* ПериодичностьУсловийПредставление - Строка -
//	* СегментыЗафиксированы - Булево -
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов -
//	* Участники - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* Товары - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* Склады - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* ЗапретНачисленияСверхПлана - Булево -
//	* ДатаОстатков - Дата -
//	* ПоказательТоваров - ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам -
//	* ПоказательТоваровПредставление - Строка -
//	* ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов -
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаРетроБонусов -
//	* ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков -
//	* УчитыватьНДС - Булево -
//	* ПорядокРаспределения - ПеречислениеСсылка.ПорядкиРаспределенияРетроБонусов -
//	* ДокументУсловийРетроБонусовПредставление - Строка -
// 
Функция АктуальныеДанные(ДокументУсловий) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.ДокументУсловий.БезРасчета КАК БезРасчета,
	|	Данные.НачалоДействия КАК НачалоДействия,
	|	Данные.ОкончаниеДействия КАК ОкончаниеДействия,
	|	Данные.Организация КАК Организация,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Договор КАК Договор,
	|	Данные.Валюта КАК Валюта,
	|	Данные.СуммаБонус КАК СуммаБонус,
	|	Данные.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	Данные.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Данные.ПериодичностьУсловий) КАК ПериодичностьУсловийПредставление,
	|	Данные.СегментыЗафиксированы КАК СегментыЗафиксированы,
	|	Данные.СоставТоваров КАК СоставТоваров,
	|	Данные.СоставУчастников КАК СоставУчастников,
	|	Данные.Участники КАК Участники,
	|	Данные.Товары КАК Товары,
	|	Данные.Склады КАК Склады,
	|	Данные.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	Данные.ДатаОстатков КАК ДатаОстатков,
	|	Данные.Вид.ПоказательТоваров КАК ПоказательТоваров,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Данные.Вид.ПоказательТоваров) КАК ПоказательТоваровПредставление,
	|	ВЫБОР
	|		КОГДА Данные.Вид.ВыполнениеУсловийПоПокупателям
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПустаяСсылка)
	|	КОНЕЦ КАК ДетализацияРасчетаУчастников,
	|	Данные.Вид.БазаРасчета КАК БазаРасчета,
	|	Данные.ТипБонуса КАК ТипБонуса,
	|	Данные.Вид.УчитыватьНДС КАК УчитыватьНДС,
	|	Данные.Вид.ПорядокРаспределения КАК ПорядокРаспределения,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Данные.ДокументУсловий) КАК ДокументУсловийРетроБонусовПредставление
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковУсловия КАК Данные
	|ГДЕ
	|	Данные.ДокументУсловий = &ДокументУсловий";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Возвращает данные поставщика по заданному условию, если они единственные (документ должен быть проведен)
// 
// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика - Документ условий
// 
// Возвращаемое значение:
//  Структура:
// * Контрагент - СправочникСсылка.Контрагенты -
// * Партнер - СправочникСсылка.Партнеры -
// * Договор - СправочникСсылка.ДоговорыКонтрагентов -
// * Соглашение - СправочникСсылка.СоглашенияСПоставщиками -
//
Функция АктуальныеДанныеПоставщика(ДокументУсловий) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Результат.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Результат.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоставщиков.Контрагент) КАК КонтрагентКоличество,
	|	МАКСИМУМ(ДанныеПоставщиков.Контрагент) КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоставщиков.Партнер) КАК ПартнерКоличество,
	|	МАКСИМУМ(ДанныеПоставщиков.Партнер) КАК Партнер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоставщиков.Договор) КАК ДоговорКоличество,
	|	МАКСИМУМ(ДанныеПоставщиков.Договор) КАК Договор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоставщиков.Соглашение) КАК СоглашениеКоличество,
	|	МАКСИМУМ(ДанныеПоставщиков.Соглашение) КАК Соглашение
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковПоставщики КАК ДанныеПоставщиков
	|ГДЕ
	|	ДанныеПоставщиков.ДокументУсловий = &ДокументУсловий";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КонтрагентКоличество = 1 Тогда
		Результат.Контрагент = Выборка.Контрагент;
	КонецЕсли;
	
	Если Выборка.ПартнерКоличество = 1 Тогда
		Результат.Партнер = Выборка.Партнер;
	КонецЕсли;
	
	Если Выборка.ДоговорКоличество = 1 Тогда
		Результат.Договор = Выборка.Договор;
	КонецЕсли;
	
	Если Выборка.СоглашениеКоличество = 1 Тогда
		Результат.Соглашение = Выборка.Соглашение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет, есть ли право у текущего пользователя на непосредственное согласование документа условий ретро-бонусов клиентов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьПравоСогласования() Экспорт
	
	Результат = Пользователи.РолиДоступны(Метаданные.Роли.ПравоСогласованияУсловийРетроБонусовПоставщиков.Имя);
	
	Возврат Результат;
	
КонецФункции

// Разрешенные статусы документа к установке для текущего пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
//
Функция РазрешенныеСтатусыКУстановке() Экспорт
	
	РазрешенныеСтатусы = Новый Массив; // Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
	
	ЕстьСогласованиеЧерез1СДокументооборот = Ложь;
	// ИнтеграцияС1СДокументооборотом
	ЕстьСогласованиеЧерез1СДокументооборот = Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если ЕстьСогласованиеЧерез1СДокументооборот Тогда
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	Иначе
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании);
		
		Если ЕстьПравоСогласования() Тогда
		
			РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
		КонецЕсли;
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	КонецЕсли;
	
	Возврат РазрешенныеСтатусы;
	
КонецФункции

// Разрешенные статусы документа с возможностью изменения документа для текущего пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
//
Функция РазрешенныеСтатусыКИзменению() Экспорт
	
	РазрешенныеСтатусы = Новый Массив; // Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
	
	ЕстьСогласованиеЧерез1СДокументооборот = Ложь;
	// ИнтеграцияС1СДокументооборотом
	ЕстьСогласованиеЧерез1СДокументооборот = Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
	// Конец ИнтеграцияС1СДокументооборотом
	
	Если ЕстьСогласованиеЧерез1СДокументооборот Тогда
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	Иначе
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	КонецЕсли;
	
	Возврат РазрешенныеСтатусы;
	
КонецФункции

// Определяет, разрешено ли изменение документа по переданному статусу
// 
// Параметры:
//  СтатусДокумента - ПеречислениеСсылка.СтатусыДокументовРетроБонусов
// 
// Возвращаемое значение:
//  Булево
//
Функция РазрешеноИзменениеПоСтатусу(Знач СтатусДокумента) Экспорт
	
	Результат = Истина;
	
	Если НЕ СтатусДокумента.Пустая() Тогда
		
		РазрешенныеСтатусы = РазрешенныеСтатусыКИзменению();
		Результат = (РазрешенныеСтатусы.Найти(СтатусДокумента) <> Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив из Строка - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	МодульНастройки = ФинансоваяОтчетностьСервер;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область ПоляШапкиПоИсправлению
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Организация");
	Элемент.Поля.Добавить("ВидРетроБонуса");
	Элемент.Поля.Добавить("НачалоДействия");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область НастройкаПоПризнакуНачислений
	// Элементы участников
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("КонтрагентыКлиентов");
	Элемент.Поля.Добавить("КонтрагентыКлиентов.Контрагент");
	Элемент.Поля.Добавить("ИННКонтрагентовКлиентов");
	Элемент.Поля.Добавить("ИННКонтрагентовКлиентов.ИНН");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
	// Команды участников
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("КонтрагентыКлиентовЗагрузитьКонтрагентыКлиентовИзФайла");
	Элемент.Поля.Добавить("ИННКонтрагентовКлиентовЗагрузитьИННИзФайла");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти
	
	НастройкаТаблицыУчастников(Настройки, МодульНастройки);
	НастройкаТаблицыИННКонтрагентовКлиентов(Настройки, МодульНастройки);
	НастройкаТаблицыТовары(Настройки, МодульНастройки);
	НастройкаТаблицыСегментыТоваров(Настройки, МодульНастройки);
	НастройкаТаблицыСклады(Настройки, МодульНастройки);
	НастройкаТаблицыПоставщики(Настройки, МодульНастройки);
	
	НастройкаПоляНачислитьСразу(Настройки, МодульНастройки);
	НастройкаПоляЗапретНачисленияСверхПлана(Настройки, МодульНастройки);
	НастройкаПоляВалюта(Настройки, МодульНастройки);
	НастройкаПоляБонусПроцент(Настройки, МодульНастройки);
	НастройкаПоляОтборУчастников(Настройки, МодульНастройки);
	НастройкаПоляОтборТоваров(Настройки, МодульНастройки);
	НастройкаПоляОтборСкладов(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки);
	НастройкаПоляСуммаПлан(Настройки, МодульНастройки);
	НастройкаПоляСуммаБонус(Настройки, МодульНастройки);
	НастройкаПоляДатаОстатков(Настройки, МодульНастройки);
	НастройкаПолейПериода(Настройки, МодульНастройки);
	НастройкаПоляРежимНесколькоПоставщиков(Настройки, МодульНастройки);
	НастройкаПоляСоглашение(Настройки, МодульНастройки);
	НастройкаПоляДоговор(Настройки, МодульНастройки);
	НастройкаПоляКонтрагент(Настройки, МодульНастройки);
	НастройкаПоляПартнер(Настройки, МодульНастройки);
	НастройкаКомандФиксацииСегментов(Настройки, МодульНастройки);
	НастройкаДанныхПоставщика(Настройки, МодульНастройки);
	
КонецПроцедуры

// Возвращает адаптированный текст запроса движений по регистру
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра для получения адаптированного запроса 
// 
// Возвращаемое значение:
//  см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
// 
Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.УсловияРетроБонусовПоставщика";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ШаблонИсключения = НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонИсключения,
			ПолноеИмяДокумента,
			ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

// Шаблон заголовка документа с учетом признака исправления
// 
// Параметры:
//  Исправление - Булево - признак исправления документа
// 
// Возвращаемое значение:
//  Строка
//
Функция ШаблонЗаголовкаДокумента(Исправление) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВыводитьПолныеНаименованияРетроБонусовПоставщиков") Тогда
		
		Если Исправление Тогда
			ШаблонЗаголовкаДокумента = НСтр("ru = 'Корректировка условий ретро-бонусов поставщика %1'");
		Иначе
			ШаблонЗаголовкаДокумента = НСтр("ru = 'Условия ретро-бонусов поставщика %1'");
		КонецЕсли;
		
	Иначе
		
		Если Исправление Тогда
			ШаблонЗаголовкаДокумента = НСтр("ru = 'Корректировка условий РБ поставщика %1'");
		Иначе
			ШаблонЗаголовкаДокумента = НСтр("ru = 'Условия РБ поставщика %1'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШаблонЗаголовкаДокумента;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаАктуальногоДокументаУсловий() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_КорректировкиДокументов
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.ИсправляемыйДокумент = &ИсправляемыйДокумент
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И РеестрДокументов.Статус = &СтатусДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаДокументаИБ КАК ДатаДокумента
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка = &ИсправляемыйДокумент
	|	И РеестрДокументов.ИсправляемыйДокумент = ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовПоставщика.ПустаяСсылка)
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И РеестрДокументов.Статус = &СтатусДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрДокументов.ДатаДокументаИБ УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_КорректировкиДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_КорректировкиДокументов КАК ВТ_КорректировкиДокументов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ПоДаннымДокумента - Булево
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗапросаДляФиксацииСегментовНоменклатуры(ПоДаннымДокумента) Экспорт
	
	МассивЗапросов = Новый Массив; // Массив из Строка
	
	Если ПоДаннымДокумента Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СегментыТоваров.Сегмент КАК Сегмент,
		|	СегментыТоваров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	Документ.УсловияРетроБонусовПоставщика.СегментыТоваров КАК СегментыТоваров
		|ГДЕ
		|	СегментыТоваров.Ссылка = &ДокументУсловий
		|	И НЕ СегментыТоваров.Отменено";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыТоваров.Сегмент КАК Сегмент,
		|	СегментыТоваров.Сегмент.СпособФормирования КАК СпособФормирования
		|ПОМЕСТИТЬ ВТ_Сегменты
		|ИЗ
		|	РегистрСведений.РетроБонусыПоставщиковСегментыТоваров КАК СегментыТоваров
		|ГДЕ
		|	СегментыТоваров.ДокументУсловий = &ДокументУсловий
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сегмент"; 
		
	КонецЕсли;
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО ВТ_Сегменты.Сегмент = НоменклатураСегмента.Сегмент
	|		И НоменклатураСегмента.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сегменты.Сегмент КАК Сегмент
	|ИЗ
	|	ВТ_Сегменты КАК ВТ_Сегменты
	|ГДЕ
	|	ВТ_Сегменты.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// 
// Возвращаемое значение:
//  Структура - Текущий статус расчетов документа условий:
// * ДокументУсловийЗарегистрирован - Булево - 
// * ЕстьПериодыБезНачислений - Булево - 
// * НачисленныеБонусыАктивированыПолностью - Булево - 
// * ОжидаетсяНачисление - Булево - 
// * ПогашениеБольшеНачисления - Булево - 
// * ОжидаетсяАкт - Булево - 
//
Функция СтатусРасчетовДокументаУсловий(ДокументУсловий) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументУсловийЗарегистрирован", Ложь);
	Результат.Вставить("ЕстьПериодыБезНачислений", Ложь);
	Результат.Вставить("НачисленныеБонусыАктивированыПолностью", Ложь);
	Результат.Вставить("ОжидаетсяНачисление", Ложь);
	Результат.Вставить("ПогашениеБольшеНачисления", Ложь);
	Результат.Вставить("ОжидаетсяАкт", Ложь);
	Результат.Вставить("РазныеСостояния", Ложь);
	
	Данные = ДанныеРасчетовСПоставщиком(ДокументУсловий);
	РезультатДанныеУсловий = Данные.РезультатДанныеУсловий;
	РезультатИтоги = Данные.РезультатИтоги;
	ТаблицаПериодовНачислений = Данные.РезультатПериоды;
	
	Если РезультатДанныеУсловий.Следующий() Тогда
		
		НачалоДействия = РезультатДанныеУсловий.НачалоДействия;
		ОкончаниеДействия = РезультатДанныеУсловий.ОкончаниеДействия;
		ТипБонуса = РезультатДанныеУсловий.ТипБонуса;
		ПериодичностьНачислений = РезультатДанныеУсловий.ПериодичностьНачислений;
		Результат.ДокументУсловийЗарегистрирован = Истина;
		
		Если РезультатИтоги.Количество() > 0 Тогда
			
			ВыполнятьПроверку = НЕ (ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки
									ИЛИ ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно);
			
			Если ВыполнятьПроверку Тогда
				
				Результат.ЕстьПериодыБезНачислений = ЕстьРазрывыВПериодах(
					НачалоДействия, 
					ОкончаниеДействия,
					ТаблицаПериодовНачислений);
					
			КонецЕсли;
			
			ЗаполнитьРезультатПоИтогамПроверки(Результат, РезультатИтоги);
			
		Иначе
			
			Результат.ОжидаетсяНачисление = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// 
// Возвращаемое значение:
//  Булево - Условия ретро бонусов поставщиков завершены
//
Функция РасчетыПоУсловиямРетроБонусовЗакрыты(ДокументУсловий) Экспорт
	
	РасчетыЗакрыты = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗавершенныеУсловияРетроБонусовПоставщиков.Завершено КАК Завершено
	|ИЗ
	|	РегистрСведений.ЗавершенныеУсловияРетроБонусовПоставщиков КАК ЗавершенныеУсловияРетроБонусовПоставщиков
	|ГДЕ
	|	ЗавершенныеУсловияРетроБонусовПоставщиков.ДокументУсловий = &ДокументУсловий";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		РасчетыЗакрыты = Выборка.Завершено; // Булево
		
	КонецЕсли;
	
	Возврат РасчетыЗакрыты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Реквизиты документа
// 
// Параметры:
//  Запрос - Запрос - Запрос
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Реквизиты документа:
// * Дата - Дата -  
// * Номер - Строка - 
// * ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
// * Организация - СправочникСсылка.Организации -
// * Валюта - СправочникСсылка.Валюты -
// * НачалоДействия- Дата -
// * ОкончаниеДействия- Дата -
// * ДатаОстатков - Дата -
// * ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов
// * СуммаПлан - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная -
// * РежимНесколькоПоставщиков - Булево
// * Исправление - Булево -
// * ИсправляемыйДокумент - ДокументСсылка.УсловияРетроБонусовКлиентов -
//
Функция РеквизитыДокумента(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.ТипБонуса КАК ТипБонуса,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеДокумента.ДатаОстатков КАК ДатаОстатков,
	|	ДанныеДокумента.ОтборУчастников КАК ОтборУчастников,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.РежимНесколькоПоставщиков КАК РежимНесколькоПоставщиков,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Реквизиты =	РеквизитыДокумента(Запрос);
	
	Для Каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

// Параметры:
//  Реквизиты - см. РеквизитыДокумента
// 
// Возвращаемое значение:
//  Структура 
//
Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	
	Значения.Вставить(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УсловияРетроБонусовПоставщика"));
	
	Если Реквизиты <> Неопределено Тогда
		
		Значения.Вставить(
			"НомерНаПечать",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		Значения.Вставить("Период", Реквизиты.Дата);
		Значения.Вставить("Организация", Реквизиты.Организация);
		Значения.Вставить("ТипБонуса", Реквизиты.ТипБонуса);
		Значения.Вставить("Валюта", Реквизиты.Валюта);
		Значения.Вставить("НачалоДействия", Реквизиты.НачалоДействия);
		Значения.Вставить("ОкончаниеДействия", Реквизиты.ОкончаниеДействия);
		Значения.Вставить("ДатаОстатков", Реквизиты.ДатаОстатков);
		Значения.Вставить("ОтборУчастников", Реквизиты.ОтборУчастников);
		Значения.Вставить("СуммаПлан", Реквизиты.СуммаПлан);
		Значения.Вставить("РежимНесколькоПоставщиков", Реквизиты.РежимНесколькоПоставщиков);
		Значения.Вставить("Исправление", Реквизиты.Исправление);
		Значения.Вставить("ИсправляемыйДокумент", Реквизиты.ИсправляемыйДокумент);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоХранения,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК Строка(100)) КАК Комментарий,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	0 КАК Сумма,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Описание КАК Дополнительно,
	|	ДанныеДокумента.Дата КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ДанныеДокумента.Исправление КАК СторноИсправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.УсловияРетроБонусовПоставщика");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НомерНаПечать", "ДанныеДокумента.Номер");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУсловия(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковУсловия";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеДокумента.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВидРетроБонуса КАК Вид,
	|	ДанныеДокумента.ТипБонуса КАК ТипБонуса,
	|	ДанныеДокумента.Описание КАК Описание,
	|	ДанныеДокумента.СоставУчастников КАК СоставУчастников,
	|	ДанныеДокумента.ОтборУчастников КАК Участники,
	|	ДанныеДокумента.СоставТоваров КАК СоставТоваров,
	|	ДанныеДокумента.ОтборТоваров КАК Товары,
	|	ДанныеДокумента.ОтборСкладов КАК Склады,
	|	ДанныеДокумента.ДатаОстатков КАК ДатаОстатков,
	|	ДанныеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.БонусПроцент КАК БонусПроцент,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.СуммаБонус КАК СуммаБонус,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеДокумента.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеДокумента.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТовары(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковТовары";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Номенклатура КАК Номенклатура,
	|	ДанныеТаблицы.Характеристика КАК Характеристика,
	|	ДанныеТаблицы.КоличествоПлан КАК КоличествоПлан,
	|	ДанныеТаблицы.Процент КАК БонусПроцент,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.БазоваяЦена КАК БазоваяЦена,
	|	ДанныеТаблицы.БонусЗаЕдиницу КАК БонусЗаЕдиницу,
	|	ДанныеТаблицы.СуммаБонус КАК СуммаБонус,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаТовары КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаИНН(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковИНН";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.ИНН КАК ИНН,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаИНН КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКонтрагенты(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковКонтрагенты";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаКонтрагенты КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСегментыТоваров(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковСегментыТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Сегмент КАК Сегмент,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаСегментыТоваров КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоставщики(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковПоставщики";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	ДанныеТаблицы.Соглашение КАК Соглашение,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаПоставщики КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено
	|	И &РежимНесколькоПоставщиков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоДействия КАК НачалоДействия,
	|	&ОкончаниеДействия КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	ДанныеТаблицы.Соглашение КАК Соглашение,
	|	1 КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ &РежимНесколькоПоставщиков";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСклады(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиковСклады";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборСкладов = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Склад КАК Склад,
	|	ДанныеТаблицы.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаСклады КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРетроБонусыПоставщиков(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ НЕ ДокументОбъект.НачислитьСразу Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход) КАК ВидДвиженияРегистра,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеТаблицы.Ссылка КАК ДокументУсловий,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	ДанныеТаблицы.НачалоДействия КАК НачалоПериода,
	|	ДанныеТаблицы.ОкончаниеДействия КАК ОкончаниеПериода,
	|	&Валюта КАК Валюта,
	|	ДанныеТаблицы.СуммаБонус КАК Начислено
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДанныеДокумента

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)
	
	СписокЗапросов = Новый Массив; // Массив из Строка
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаТовары(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаИНН(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаКонтрагенты(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаСегментыТоваров(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаПоставщики(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаСклады(СписокЗапросов);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.РежимНесколькоПоставщиков КАК РежимНесколькоПоставщиков,
	|	ДанныеДокумента.Описание КАК Описание,
	|	ДанныеДокумента.ВидРетроБонуса КАК ВидРетроБонуса,
	|	ДанныеДокумента.ТипБонуса КАК ТипБонуса,
	|	ДанныеДокумента.ВидРетроБонуса.СоставУчастников КАК СоставУчастников,
	|	ДанныеДокумента.ОтборУчастников КАК ОтборУчастников,
	|	ДанныеДокумента.ВидРетроБонуса.СоставТоваров КАК СоставТоваров,
	|	ДанныеДокумента.ОтборТоваров КАК ОтборТоваров,
	|	ДанныеДокумента.ОтборСкладов КАК ОтборСкладов,
	|	ДанныеДокумента.ДатаОстатков КАК ДатаОстатков,
	|	ДанныеДокумента.ВидРетроБонуса.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.НачислитьСразу КАК НачислитьСразу,
	|	ДанныеДокумента.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеДокумента.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.СуммаБонус КАК СуммаБонус,
	|	ДанныеДокумента.БонусПроцент КАК БонусПроцент,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаТовары(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.КоличествоПлан КАК КоличествоПлан,
	|	ТаблицаДанных.БазоваяЦена КАК БазоваяЦена,
	|	ТаблицаДанных.СуммаБонус КАК СуммаБонус,
	|	ТаблицаДанных.БонусЗаЕдиницу КАК БонусЗаЕдиницу,
	|	ТаблицаДанных.Процент КАК Процент,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаТовары
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.Товары КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаИНН(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.ИНН КАК ИНН,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаИНН
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.ИННКонтрагентовКлиентов КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаКонтрагенты(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаКонтрагенты
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.КонтрагентыКлиентов КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаСегментыТоваров(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Сегмент КАК Сегмент,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаСегментыТоваров
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.СегментыТоваров КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаПоставщики(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.Договор КАК Договор,
	|	ТаблицаДанных.Соглашение КАК Соглашение,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаПоставщики
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.Поставщики КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаСклады(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Склад КАК Склад
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаСклады
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.Склады КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МетодыНастройкиПолейФормы

Процедура НастройкаТаблицыУчастников(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область ОбщаяНастройкаВидимостиСписка
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("КонтрагентыКлиентов");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборУчастников", СоставыСписков.Все);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставУчастников",
		Перечисления.СоставыУчастниковРетроБонусов.Контрагенты,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "КонтрагентыКлиентов", ОтборПолей);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "КонтрагентыКлиентов.Отменено");
	НастройкаПоляДекорацияКонтрагентыКлиентовЕстьНачисления(Настройки, МодульНастройки);
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияКонтрагентыКлиентовЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияКонтрагентыКлиентовЕстьНачисления");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.СоставУчастников",
		Перечисления.СоставыУчастниковРетроБонусов.Контрагенты);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаТаблицыИННКонтрагентовКлиентов(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область ОбщаяНастройкаВидимостиСписка
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ИННКонтрагентовКлиентов");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборУчастников", СоставыСписков.Все);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставУчастников",
		Перечисления.СоставыУчастниковРетроБонусов.ИНН,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "ИННКонтрагентовКлиентов", ОтборПолей);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "ИННКонтрагентовКлиентов.Отменено");
	НастройкаПоляДекорацияИННЕстьНачисления(Настройки, МодульНастройки);
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияИННЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияИННЕстьНачисления");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.СоставУчастников",
		Перечисления.СоставыУчастниковРетроБонусов.ИНН);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаТаблицыТовары(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область ОбщаяНастройкаВидимостиСписка
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.Все);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставТоваров",
		Перечисления.СоставыТоваровРетроБонусов.Номенклатура,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ПериодыДоИсправления
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.НачалоДействияДоИзменений");
	Элемент.Поля.Добавить("Товары.ОкончаниеДействияДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область Периоды
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.НачалоДействия");
	Элемент.Поля.Добавить("Товары.ОкончаниеДействия");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область НастройкаПоПризнакуНачислений
	// Элементы
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары");
	Элемент.Поля.Добавить("Товары.Номенклатура");
	Элемент.Поля.Добавить("Товары.Характеристика");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
	// Команды товаров
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТоварыЗаполнитьПроцентБонуса");
	Элемент.Поля.Добавить("ТоварыЗаполнитьКоличествоПлан");
	Элемент.Поля.Добавить("ТоварыЗаполнитьТоварыПоСегменту");
	Элемент.Поля.Добавить("ТоварыЗагрузитьТоварыИзФайла");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти
	
	НастройкаПоляТоварыПроцент(Настройки, МодульНастройки);
	НастройкаПоляТоварыБазоваяЦена(Настройки, МодульНастройки);
	НастройкаПоляТоварыКоличествоПлан(Настройки, МодульНастройки);
	НастройкаПоляТоварыБонусЗаЕдиницу(Настройки, МодульНастройки);
	НастройкаПоляТоварыСуммаБонус(Настройки, МодульНастройки);
	НастройкаПоляДекорацияТоварыЕстьНачисления(Настройки, МодульНастройки);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "Товары.Отменено");
	НастройкаКомандЗаполненияТаблицыТоваров(Настройки, МодульНастройки);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыПроцент(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПоТоварам = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.Процент");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ОтборТоваров", СоставыСписков.Выбранные);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.ПоказательТоваров", ПоказателиПоТоварам.Сумма);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ЗапретНачисленияСверхПлана", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыБазоваяЦена(Настройки, МодульНастройки)
	
	БазыПродаж = Перечисления.БазыРасчетаРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.БазоваяЦена");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.БазаРасчета", БазыПродаж.ВыручкаБазовыеЦены);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.БазаРасчета", БазыПродаж.СуммаЗакупкиБазовыеЦены);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыКоличествоПлан(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.КоличествоПлан");
	Элемент.Поля.Добавить("ТоварыНоменклатураЕдиницаИзмерения");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", ТипыБонусов.Остатки);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.Количество);
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	МодульНастройки.НовыйОтбор(ГруппаИ, "ОтборТоваров", СоставыСписков.Выбранные);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыБонусЗаЕдиницу(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.БонусЗаЕдиницу");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыСуммаБонус(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.СуммаБонус");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "НачислитьСразу", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияТоварыЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияТоварыЕстьНачисления");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.СоставТоваров",
		Перечисления.СоставыТоваровРетроБонусов.Номенклатура);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаКомандЗаполненияТаблицыТоваров(Настройки, МодульНастройки)
	
	СоставыТоваров = Перечисления.СоставыТоваровРетроБонусов;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	ПоказателиПоТоварам = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.Количество);
	ИсклПоказатели.Добавить(ПоказателиТоваров.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиТоваров.ПакетноеПредложение);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТоварыЗаполнитьКоличествоПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.СоставТоваров", СоставыТоваров.Номенклатура);
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(
		ГруппаИ, "ТипБонуса", ТипыБонусов.Остатки,, ВидСравненияКомпоновкиДанных.НеРавно);
	МодульНастройки.НовыйОтбор(
		ГруппаИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТоварыЗаполнитьПроцентБонуса");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", ТипыБонусов.Остатки);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ОтборТоваров", СоставыСписков.Выбранные);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.ПоказательТоваров", ПоказателиПоТоварам.Сумма);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ЗапретНачисленияСверхПлана", Истина);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаТаблицыСегментыТоваров(Настройки, МодульНастройки);
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область ОбщаяНастройкаВидимостиСписка
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СегментыТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.Все);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставТоваров",
		Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область СегментыТоваровОтмена
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СегментыТоваров.Отменено");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаТаблицыСклады(Настройки, МодульНастройки);
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Склады");
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МодульНастройки.НовыйОтбор(ГруппаИ, "ТипБонуса", ТипыБонусов.Остатки);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ОтборСкладов", СоставыСписков.Все,, ВидСравненияКомпоновкиДанных.НеРавно);
	МодульНастройки.НовыйОтбор(ГруппаИ, "НачислитьСразу", Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Склады");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаТаблицыПоставщики(Настройки, МодульНастройки)

	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Поставщики");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ТипБонуса", ТипыБонусов.Закупки);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "РежимНесколькоПоставщиков", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "Поставщики", ОтборПолей);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "Поставщики.Отменено");
	
КонецПроцедуры

Процедура НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, ИмяТаблицы, ОтборПолей)
	
	#Область ПериодыДоИсправления
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяТаблицы + "НачалоДействияДоИзменений");
	Элемент.Поля.Добавить(ИмяТаблицы + ".ОкончаниеДействияДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
		
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область Периоды
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяТаблицы + ".НачалоДействия");
	Элемент.Поля.Добавить(ИмяТаблицы + ".ОкончаниеДействия");
	
	МодульНастройки.СкопироватьОтбор(ОтборПолей, Элемент.Условие);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Функция БазовыйОтборПериодовТаблицУчастников(МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Отбор = Новый ОтборКомпоновкиДанных();
	
	МодульНастройки.НовыйОтбор(Отбор, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	
	Возврат Отбор;
	
КонецФункции

Процедура НастройкаПоляОтменено(Настройки, МодульНастройки, ИмяПоля)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяПоля);
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляВалюта(Настройки, МодульНастройки)
	
	БазаПродаж = Перечисления.БазыРасчетаРетроБонусов;
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	ЦелевыеПоказатели = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Элемент.Поля.Добавить("Валюта");
	Иначе
		Элемент.Поля.Добавить("ТекущаяВалюта");
	КонецЕсли;
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", ТипыБонусов.Остатки);
	
	ВклБазаВзаиморасчетов = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	ВклБазаВзаиморасчетов.Добавить(БазаПродаж.ВыручкаВзаиморасчеты);
	ВклБазаВзаиморасчетов.Добавить(БазаПродаж.СуммаЗакупкиВзаиморасчеты);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, 
		"Дополнительно.БазаРасчета",
		ВклБазаВзаиморасчетов,
		, 
		ВидСравненияКомпоновкиДанных.НеВСписке);
		
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.ПоказательТоваров",
		ЦелевыеПоказатели.Сумма);
		
	МодульНастройки.НовыйОтбор(
		ГруппаИ, 
		"Дополнительно.БазаРасчета",
		ВклБазаВзаиморасчетов,
		, 
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Валюта");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", ТипыБонусов.Остатки);
	
	ВклБазаБазовыеЦены = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	ВклБазаБазовыеЦены.Добавить(БазаПродаж.ВыручкаБазовыеЦены);
	ВклБазаБазовыеЦены.Добавить(БазаПродаж.СуммаЗакупкиБазовыеЦены);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, 
		"Дополнительно.БазаРасчета",
		ВклБазаБазовыеЦены,
		, 
		ВидСравненияКомпоновкиДанных.ВСписке);
		
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.ПоказательТоваров",
		ЦелевыеПоказатели.Сумма);
		
	МодульНастройки.НовыйОтбор(
		ГруппаИ, 
		"Дополнительно.БазаРасчета",
		ВклБазаВзаиморасчетов,
		, 
		ВидСравненияКомпоновкиДанных.ВСписке);
		
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Ложь);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляБонусПроцент(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БонусПроцент");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "БезРасчета", Ложь);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ОтборТоваров",
		Перечисления.СоставыСписковРетроБонусов.Выбранные,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
		
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставТоваров",
		Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.ПоказательТоваров",
		Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ЗапретНачисленияСверхПлана",
		Истина);
		
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БонусПроцент");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборУчастников(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Продажи,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборТоваров(Настройки, МодульНастройки)
	
	БазыПродаж = Перечисления.БазыРасчетаРетроБонусов;
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область Видимость	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Исправление", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИ, "БезРасчета", Ложь);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Остатки,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	ИсклПоказателиТоваров = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказателиТоваров.Добавить(ПоказателиТоваров.НеИспользуется);
	ИсклПоказателиТоваров.Добавить(ПоказателиТоваров.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИ, "Дополнительно.ПоказательТоваров", ИсклПоказателиТоваров,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ИсклПоказателиБазыПродаж = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.БазыРасчетаРетроБонусов
	ИсклПоказателиБазыПродаж.Добавить(БазыПродаж.ВыручкаБазовыеЦены);
	ИсклПоказателиБазыПродаж.Добавить(БазыПродаж.СуммаЗакупкиБазовыеЦены);
	ИсклПоказателиБазыПродаж.Добавить(БазыПродаж.ПустаяСсылка());
	
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.БазаРасчета", ИсклПоказателиБазыПродаж,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки)
	
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"ТипБонуса",
		Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ПоказателиТоваров.НеИспользуется);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "НачислитьСразу", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", ТипыБонусов.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляНачислитьСразу(Настройки, МодульНастройки);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("НачислитьСразу");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Ложь);
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ТипБонуса", Перечисления.ТипыРетроБонусовПоставщиков.Остатки);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляСуммаПлан(Настройки, МодульНастройки)
	
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаПлан");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.ПоказательТоваров",
		ПоказателиТоваров.Сумма,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ПоказательТоваров", ПоказателиТоваров.Сумма);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляЗапретНачисленияСверхПлана(Настройки, МодульНастройки)
	
	ПоказателиТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ЗапретНачисленияСверхПлана");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовПоставщиков.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиРетроБонусовПоТоварам
	ИсклПоказатели.Добавить(ПоказателиТоваров.Количество);
	ИсклПоказатели.Добавить(ПоказателиТоваров.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательТоваров", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ЗапретНачисленияСверхПлана");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДатаОстатков(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДатаОстатков");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		ТипыБонусов.Остатки,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПолейПериода(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("НачалоДействия");
	Элемент.Поля.Добавить("ОкончаниеДействия");
	Элемент.Поля.Добавить("УстановитьИнтервал");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		ТипыБонусов.Остатки,
		,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("НачалоДействия");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область Доступность
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("УстановитьИнтервал");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти

КонецПроцедуры

Процедура НастройкаПоляОтборСкладов(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборСкладов");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ТипБонуса", ТипыБонусов.Остатки);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "НачислитьСразу", Ложь);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНесколькоСкладов", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборСкладов");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСуммаБонус(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаБонус");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"БезРасчета",
		Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаБонус");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляРежимНесколькоПоставщиков(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("РежимНесколькоПоставщиков");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		ТипыБонусов.Закупки,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСоглашение(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Соглашение");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		ТипыБонусов.Закупки,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Соглашение");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДоговор(Настройки, МодульНастройки)
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Договор");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Исправление",
		Истина);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.ИспользуютсяДоговорыКонтрагентов",
		Ложь);
		
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Соглашение", 
		Справочники.СоглашенияСПоставщиками.ПустаяСсылка(),
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляКонтрагент(Настройки, МодульНастройки)
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагент");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПартнер(Настройки, МодульНастройки)
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Партнер");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаКомандФиксацииСегментов(Настройки, МодульНастройки)
	
	#Область Видимость
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияЗафиксироватьСегменты");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ЕстьПравоИзмененияУРБ", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ИспользуютсяСегменты", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.СоставСегментовЗафиксирован", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияОтменитьФиксациюСегментов");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ЕстьПравоИзмененияУРБ", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ИспользуютсяСегменты", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.СоставСегментовЗафиксирован", Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаДанныхПоставщика(Настройки, МодульНастройки)
	
	ТипыБонусов = Перечисления.ТипыРетроБонусовПоставщиков;
	
	#Область АвтоОтметкаНезаполненного
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Поля.Добавить("Партнер");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"ТипБонуса",
		ТипыБонусов.Закупки,
		,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область ДанныеПечати

// Текст запроса печати карточки с учетом корректировок
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаАктуальныеДанные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщика.Исправление
	|			ТОГДА УсловияРетроБонусовПоставщика.ИсправляемыйДокумент
	|		ИНАЧЕ УсловияРетроБонусовПоставщика.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	УсловияРетроБонусовПоставщика.Ссылка КАК Ссылка,
	|	УсловияРетроБонусовПоставщика.Валюта КАК Валюта,
	|	УсловияРетроБонусовПоставщика.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика КАК УсловияРетроБонусовПоставщика
	|ГДЕ
	|	УсловияРетроБонусовПоставщика.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументУсловий,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеДокумента.ВидРетроБонуса КАК ВидРетроБонуса,
	|	ДанныеДокумента.Описание КАК Описание,
	|	ДанныеДокумента.ОтборУчастников КАК ОтборУчастников,
	|	ДанныеДокумента.ОтборТоваров КАК ОтборТоваров,
	|	ДанныеДокумента.ВидРетроБонуса.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.БонусПроцент КАК БонусПроцент,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеДокумента.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеДокумента.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.РежимНесколькоПоставщиков КАК РежимНесколькоПоставщиков,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.ДатаОстатков КАК ДатаОстатков,
	|	ДанныеДокумента.ОтборСкладов КАК ОтборСкладов,
	|	ДанныеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ДокументыБезДвижений
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|	И НЕ ДанныеДокумента.Исправление
	|	И ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияРетроБонусовПоставщикаКонтрагенты.Ссылка КАК ДокументУсловий,
	|	УсловияРетроБонусовПоставщикаКонтрагенты.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаКонтрагенты.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаКонтрагенты.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаКонтрагенты.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаКонтрагенты.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	УсловияРетроБонусовПоставщикаКонтрагенты.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_РетроБонусыПоставщикаКонтрагенты
	|ИЗ
	|	Документ.УсловияРетроБонусовПоставщика.КонтрагентыКлиентов КАК УсловияРетроБонусовПоставщикаКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО УсловияРетроБонусовПоставщикаКонтрагенты.Ссылка = ВТ_Документы.ДокументУсловий
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПереопределяемыхПолей.Ссылка КАК Ссылка,
	|	ДанныеПереопределяемыхПолей.Валюта КАК Валюта,
	|	ДанныеПереопределяемыхПолей.Организация КАК Организация
	|ИЗ
	|	ВТ_Документы КАК ДанныеПереопределяемыхПолей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУсловий.ДокументУсловий КАК ДокументУсловий,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеУсловий.Организация КАК Организация,
	|	ДанныеУсловий.НачалоДействия КАК НачалоДействия,
	|	ДанныеУсловий.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеУсловий.Вид КАК Вид,
	|	ДанныеУсловий.Описание КАК Описание,
	|	ДанныеУсловий.Участники КАК Участники,
	|	ДанныеУсловий.Товары КАК Товары,
	|	ДанныеУсловий.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеУсловий.БонусПроцент КАК БонусПроцент,
	|	ДанныеУсловий.СуммаПлан КАК СуммаПлан,
	|	ДанныеУсловий.Валюта КАК Валюта,
	|	ДанныеУсловий.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеУсловий.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеУсловий.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеУсловий.ДокументУсловий.Номер КАК НомерДокументаУсловийСПрефиксом,
	|	ДанныеУсловий.Ответственный КАК Ответственный,
	|	ДанныеУсловий.Склады КАК Склады,
	|	ДанныеУсловий.ДатаОстатков КАК ДатаОстатков
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковУсловия КАК ДанныеУсловий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДанныеУсловий.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыБезДвижений.ДокументУсловий,
	|	ВТ_ДокументыБезДвижений.Ссылка,
	|	ВТ_ДокументыБезДвижений.Организация,
	|	ВТ_ДокументыБезДвижений.НачалоДействия,
	|	ВТ_ДокументыБезДвижений.ОкончаниеДействия,
	|	ВТ_ДокументыБезДвижений.ВидРетроБонуса,
	|	ВТ_ДокументыБезДвижений.Описание,
	|	ВТ_ДокументыБезДвижений.ОтборУчастников,
	|	ВТ_ДокументыБезДвижений.ОтборТоваров,
	|	ВТ_ДокументыБезДвижений.УчитыватьНДС,
	|	ВТ_ДокументыБезДвижений.БонусПроцент,
	|	ВТ_ДокументыБезДвижений.СуммаПлан,
	|	ВТ_ДокументыБезДвижений.Валюта,
	|	ВТ_ДокументыБезДвижений.ПериодичностьУсловий,
	|	ВТ_ДокументыБезДвижений.ПериодичностьНачислений,
	|	ВТ_ДокументыБезДвижений.ЗапретНачисленияСверхПлана,
	|	ВТ_ДокументыБезДвижений.Номер,
	|	ВТ_ДокументыБезДвижений.Ответственный,
	|	ВТ_ДокументыБезДвижений.ОтборСкладов,
	|	ВТ_ДокументыБезДвижений.ДатаОстатков
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТоваров.НачалоДействия КАК НачалоДействия,
	|	ДанныеТоваров.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеТоваров.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеТоваров.Номенклатура КАК Номенклатура,
	|	ДанныеТоваров.Характеристика КАК Характеристика,
	|	ДанныеТоваров.КоличествоПлан КАК КоличествоПлан,
	|	ДанныеТоваров.БонусПроцент КАК Процент,
	|	ДанныеТоваров.БазоваяЦена КАК БазоваяЦена,
	|	ДанныеТоваров.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ДанныеТоваров.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеТоваров.БонусЗаЕдиницу КАК БонусЗаЕдиницу,
	|	ДанныеТоваров.СуммаБонус КАК СуммаБонус,
	|	ДанныеТоваров.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковТовары КАК ДанныеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДанныеТоваров.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаТовары.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаТовары.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаТовары.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаТовары.ОкончаниеДействия
	|	КОНЕЦ,
	|	УсловияРетроБонусовПоставщикаТовары.Ссылка,
	|	УсловияРетроБонусовПоставщикаТовары.Номенклатура,
	|	УсловияРетроБонусовПоставщикаТовары.Характеристика,
	|	УсловияРетроБонусовПоставщикаТовары.КоличествоПлан,
	|	УсловияРетроБонусовПоставщикаТовары.Процент,
	|	УсловияРетроБонусовПоставщикаТовары.БазоваяЦена,
	|	УсловияРетроБонусовПоставщикаТовары.Номенклатура.Представление,
	|	УсловияРетроБонусовПоставщикаТовары.Характеристика.Представление,
	|	УсловияРетроБонусовПоставщикаТовары.Ссылка,
	|	УсловияРетроБонусовПоставщикаТовары.БонусЗаЕдиницу,
	|	УсловияРетроБонусовПоставщикаТовары.СуммаБонус,
	|	УсловияРетроБонусовПоставщикаТовары.НомерСтроки
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика.Товары КАК УсловияРетроБонусовПоставщикаТовары
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовПоставщикаТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИНН.НачалоДействия КАК НачалоДействия,
	|	ДанныеИНН.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеИНН.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеИНН.ИНН КАК ИНН,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеИНН.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковИНН КАК ДанныеИНН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДанныеИНН.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИННКонтрагентовКлиентов.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ ИННКонтрагентовКлиентов.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИННКонтрагентовКлиентов.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ ИННКонтрагентовКлиентов.ОкончаниеДействия
	|	КОНЕЦ,
	|	ИННКонтрагентовКлиентов.Ссылка,
	|	ИННКонтрагентовКлиентов.ИНН,
	|	ИННКонтрагентовКлиентов.Ссылка,
	|	ИННКонтрагентовКлиентов.НомерСтроки
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика.ИННКонтрагентовКлиентов КАК ИННКонтрагентовКлиентов
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = ИННКонтрагентовКлиентов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.НачалоДействия КАК НачалоДействия,
	|	ДанныеКонтрагентов.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеКонтрагентов.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеКонтрагентов.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковКонтрагенты КАК ДанныеКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДанныеКонтрагентов.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.НачалоДействия,
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.ОкончаниеДействия,
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.ДокументУсловий,
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.Контрагент,
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.ДокументУсловий,
	|	ВТ_РетроБонусыПоставщикаКонтрагенты.НомерСтроки
	|ИЗ
	|	ВТ_РетроБонусыПоставщикаКонтрагенты КАК ВТ_РетроБонусыПоставщикаКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ПО ВТ_РетроБонусыПоставщикаКонтрагенты.ДокументУсловий = ВТ_ДокументыБезДвижений.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСегментовТоваров.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеСегментовТоваров.Сегмент КАК Сегмент,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеСегментовТоваров.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковСегментыТоваров КАК ДанныеСегментовТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДанныеСегментовТоваров.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРетроБонусовПоставщикаСегментыТоваров.Ссылка,
	|	УсловияРетроБонусовПоставщикаСегментыТоваров.Сегмент,
	|	УсловияРетроБонусовПоставщикаСегментыТоваров.Ссылка,
	|	УсловияРетроБонусовПоставщикаСегментыТоваров.НомерСтроки
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика.СегментыТоваров КАК УсловияРетроБонусовПоставщикаСегментыТоваров
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовПоставщикаСегментыТоваров.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеПоставщиков.НачалоДействия КАК НачалоДействия,
	|	ДанныеПоставщиков.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеПоставщиков.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеПоставщиков.Контрагент КАК Контрагент,
	|	ДанныеПоставщиков.Партнер КАК Партнер,
	|	ДанныеПоставщиков.Договор КАК Договор,
	|	ДанныеПоставщиков.Соглашение КАК Соглашение,
	|	ДанныеПоставщиков.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыПоставщиковПоставщики КАК ДанныеПоставщиков
	|		ПО ВТ_Документы.ДокументУсловий = ДанныеПоставщиков.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРетроБонусовПоставщикаПоставщики.Ссылка,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаПоставщики.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаПоставщики.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовПоставщикаПоставщики.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовПоставщикаПоставщики.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	УсловияРетроБонусовПоставщикаПоставщики.Ссылка,
	|	УсловияРетроБонусовПоставщикаПоставщики.Контрагент,
	|	УсловияРетроБонусовПоставщикаПоставщики.Партнер,
	|	УсловияРетроБонусовПоставщикаПоставщики.Договор,
	|	УсловияРетроБонусовПоставщикаПоставщики.Соглашение,
	|	УсловияРетроБонусовПоставщикаПоставщики.НомерСтроки
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика.Поставщики КАК УсловияРетроБонусовПоставщикаПоставщики
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовПоставщикаПоставщики.Ссылка
	|			И (ВТ_ДокументыБезДвижений.РежимНесколькоПоставщиков)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыБезДвижений.Ссылка,
	|	ВТ_ДокументыБезДвижений.НачалоДействия,
	|	ВТ_ДокументыБезДвижений.ОкончаниеДействия,
	|	ВТ_ДокументыБезДвижений.Ссылка,
	|	ВТ_ДокументыБезДвижений.Контрагент,
	|	ВТ_ДокументыБезДвижений.Партнер,
	|	ВТ_ДокументыБезДвижений.Договор,
	|	ВТ_ДокументыБезДвижений.Соглашение,
	|	1
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|ГДЕ
	|	НЕ ВТ_ДокументыБезДвижений.РежимНесколькоПоставщиков
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДанныеСкладов.Склад КАК Склад,
	|	ДанныеСкладов.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеСкладов.НомерСтрокиДокумента КАК НомерСтроки
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыПоставщиковСклады КАК ДанныеСкладов
	|		ПО ВТ_Документы.ДокументУсловий = ДанныеСкладов.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРетроБонусовПоставщикаСклады.Ссылка,
	|	УсловияРетроБонусовПоставщикаСклады.Склад,
	|	УсловияРетроБонусовПоставщикаСклады.Ссылка,
	|	УсловияРетроБонусовПоставщикаСклады.НомерСтроки
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовПоставщика.Склады КАК УсловияРетроБонусовПоставщикаСклады
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовПоставщикаСклады.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаСклады - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Склад - СправочникСсылка.Склады
//
Функция НаборДанныхСклады(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборСклады = Новый ТаблицаЗначений;
	НаборСклады.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборСклады.Колонки.Добавить("АктуальныеДанныеТаблицаСклады", ОписаниеТиповТЗ);
	
	ТаблицаСкладыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаСкладыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	ВыборкаТаблицаСклады = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаСклады.Следующий() Цикл
		
		АктуальныеДанныеТаблицаСклады = ТаблицаСкладыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаСклады.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаСклады.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборСклады.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаСклады.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаСклады = АктуальныеДанныеТаблицаСклады;
		
	КонецЦикла;
	
	Возврат НаборСклады;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * УсловияРетроБонусовПоставщика - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Контрагент - СправочникСсылка.Контрагенты
// ** Партнер - СправочникСсылка.Партнеры
// ** Договор - СправочникСсылка.ДоговорыКонтрагентов
// ** Соглашение - СправочникСсылка.СоглашенияСПоставщиками
//
Функция НаборДанныхПоставщики(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборСклады = Новый ТаблицаЗначений;
	НаборСклады.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборСклады.Колонки.Добавить("АктуальныеДанныеТаблицаПоставщики", ОписаниеТиповТЗ);
	
	ТаблицаПоставщикиШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаПоставщикиШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	
	ВыборкаТаблицаПоставщики = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаПоставщики.Следующий() Цикл
		
		АктуальныеДанныеТаблицаПоставщики = ТаблицаПоставщикиШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаПоставщики.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаПоставщики.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборСклады.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаПоставщики.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаПоставщики = АктуальныеДанныеТаблицаПоставщики;
		
	КонецЦикла;
	
	Возврат НаборСклады;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаСегментыТоваров - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Сегмент - СправочникСсылка.СегментыНоменклатуры
//
Функция НаборДанныхСегментыТоваров(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборСегментыТоваров = Новый ТаблицаЗначений;
	НаборСегментыТоваров.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборСегментыТоваров.Колонки.Добавить("АктуальныеДанныеТаблицаСегментыТоваров", ОписаниеТиповТЗ);
	
	ТаблицаСегментыНоменклатурыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаСегментыНоменклатурыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	
	ВыборкаТаблицаСегментыТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаСегментыТоваров.Следующий() Цикл
		
		АктуальныеДанныеТаблицаСегментыТоваров = ТаблицаСегментыНоменклатурыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаСегментыТоваров.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаСегментыТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборСегментыТоваров.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаСегментыТоваров.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаСегментыТоваров = АктуальныеДанныеТаблицаСегментыТоваров;
		
	КонецЦикла;
	
	Возврат НаборСегментыТоваров;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаКонтрагенты - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Контрагент - СправочникСсылка.Контрагенты
//
Функция НаборДанныхКонтрагенты(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборКонтрагенты = Новый ТаблицаЗначений;
	НаборКонтрагенты.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборКонтрагенты.Колонки.Добавить("АктуальныеДанныеТаблицаКонтрагенты", ОписаниеТиповТЗ);
	
	ТаблицаКонтрагентыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаКонтрагентыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	ВыборкаТаблицаКонтрагенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаКонтрагенты.Следующий() Цикл
		
		АктуальныеДанныеТаблицаКонтрагенты = ТаблицаКонтрагентыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаКонтрагенты.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаКонтрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборКонтрагенты.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаКонтрагенты.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаКонтрагенты = АктуальныеДанныеТаблицаКонтрагенты;
		
	КонецЦикла;
	
	Возврат НаборКонтрагенты;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаИНН - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** ИНН - Строка
//
Функция НаборДанныхИНН(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборИНН = Новый ТаблицаЗначений;
	НаборИНН.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборИНН.Колонки.Добавить("АктуальныеДанныеТаблицаИНН", ОписаниеТиповТЗ);
	
	ТаблицаИННШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаИННШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	
	ВыборкаТаблицаИНН = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаИНН.Следующий() Цикл
		
		АктуальныеДанныеТаблицаИНН = ТаблицаИННШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаИНН.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаИНН.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборИНН.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаИНН.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаИНН = АктуальныеДанныеТаблицаИНН;
		
	КонецЦикла;
	
	Возврат НаборИНН;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаТовары - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Номенклатура - СправочникСсылка.Номенклатура
// ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// ** КоличествоПлан - Число
// ** Процент - Число
// ** БазоваяЦена - Число
// ** БонусЗаЕдиницу - Число
// ** СуммаБонус - Число
// ** ПредставлениеНоменклатуры - Строка
//
Функция НаборДанныхТовары(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборТовары = Новый ТаблицаЗначений;
	НаборТовары.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборТовары.Колонки.Добавить("АктуальныеДанныеТаблицаТовары", ОписаниеТиповТЗ);
	
	ТаблицаТоварыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаТоварыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Колонки.Добавить("КоличествоПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("Процент", ОбщегоНазначения.ОписаниеТипаЧисло(4, 2));
	Колонки.Добавить("БазоваяЦена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("БонусЗаЕдиницу", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("СуммаБонус", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ВыборкаТаблицаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаТовары.Следующий() Цикл
		
		АктуальныеДанныеТаблицаТовары = ТаблицаТоварыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаТовары.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			
			СтрокаТЗ.ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураПредставление,
				Выборка.ХарактеристикаПредставление);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборТовары.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаТовары.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаТовары = АктуальныеДанныеТаблицаТовары;
		
	КонецЦикла;
	
	Возврат НаборТовары;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * АктуальныеДанныеТаблицаУсловия - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// ** Вид - СправочникСсылка.ВидыРетроБонусовПоставщиков
// ** Описание - Строка
// ** Участники - ПеречислениеСсылка.СоставыСписковРетроБонусов
// ** Товары - ПеречислениеСсылка.СоставыСписковРетроБонусов
// ** ДатаОстатков - Дата
// ** УчитыватьНДС - Булево
// ** БонусПроцент - Число
// ** СуммаПлан - Число
// ** Валюта - СправочникСсылка.Валюты
// ** ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов
// ** ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов
// ** ЗапретНачисленияСверхПлана - Булево
// ** НомерДокументаУсловийСПрефиксом - Число
// ** Ответственный - СправочникСсылка.Пользователи
// ** Организация - СправочникСсылка.Организации
// ** Контрагент - СправочникСсылка.Контрагенты
// ** Партнер - СправочникСсылка.Партнеры
// ** Договор - СправочникСсылка.ДоговорыКонтрагентов
// ** Соглашение - СправочникСсылка.СоглашенияСПоставщиками
//
Функция НаборДанныхУсловия(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборУсловия = Новый ТаблицаЗначений;
	НаборУсловия.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборУсловия.Колонки.Добавить("АктуальныеДанныеТаблицаУсловия", ОписаниеТиповТЗ);
	
	ТаблицаУсловияШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаУсловияШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыРетроБонусовПоставщиков"));
	Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Участники", Новый ОписаниеТипов("ПеречислениеСсылка.СоставыСписковРетроБонусов"));
	Колонки.Добавить("Товары", Новый ОписаниеТипов("ПеречислениеСсылка.СоставыСписковРетроБонусов"));
	Колонки.Добавить("Склады", Новый ОписаниеТипов("ПеречислениеСсылка.СоставыСписковРетроБонусов"));
	Колонки.Добавить("ДатаОстатков", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("УчитыватьНДС", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("БонусПроцент", ОбщегоНазначения.ОписаниеТипаЧисло(4, 2));
	Колонки.Добавить("СуммаПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Колонки.Добавить("ПериодичностьУсловий", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностиРетроБонусов"));
	Колонки.Добавить("ПериодичностьНачислений", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностиРетроБонусов"));
	Колонки.Добавить("ЗапретНачисленияСверхПлана", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("НомерДокументаУсловийСПрефиксом", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	
	ВыборкаТаблицаУсловия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаУсловия.Следующий() Цикл
		
		АктуальныеДанныеТаблицаУсловия = ТаблицаУсловияШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаУсловия.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаУсловия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборУсловия.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаУсловия.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаУсловия = АктуальныеДанныеТаблицаУсловия;
		
	КонецЦикла;
	
	Возврат НаборУсловия;

КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
//   
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовПоставщика - 
// * Валюта - СправочникСсылка.Валюты - 
// * Организация - СправочникСсылка.Организации - 
Функция НаборПереопределяемыеПоля(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовПоставщика");
	
	ПереопределяемыеПоля = Новый ТаблицаЗначений;
	ПереопределяемыеПоля.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	ПереопределяемыеПоля.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПереопределяемыеПоля.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЗ = ПереопределяемыеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
		
	КонецЦикла;
	
	Возврат ПереопределяемыеПоля;

КонецФункции

#КонецОбласти

//-- Локализация

#Область Прочее

// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
// 
// Возвращаемое значение:
//  Структура - Данные расчетов с поставщиком:
// * РезультатДанныеУсловий - ВыборкаИзРезультатаЗапроса:
//  ** НачалоДействия - Дата
//  ** ОкончаниеДействия - Дата
//  ** ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
//  ** ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов
// * РезультатИтоги - ТаблицаЗначений:
//  ** Валюта - СправочникСсылка.Валюты
//  ** НачисленныеБонусыАктивированыПолностью - Булево
//  ** ПогашениеБольшеНачисления - Булево
//  ** ОжидаетсяАкт - Булево
// * РезультатПериоды - ТаблицаЗначений:
//  ** НачалоПериода - Дата
//  ** ОкончаниеПериода - Дата
//
Функция ДанныеРасчетовСПоставщиком(ДокументУсловий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РетроБонусыПоставщиков.Валюта КАК Валюта,
	|	РетроБонусыПоставщиков.НачалоПериода КАК НачалоПериода,
	|	РетроБонусыПоставщиков.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ВЫБОР
	|		КОГДА РетроБонусыПоставщиков.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход)
	|			ТОГДА РетроБонусыПоставщиков.НачисленоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено,
	|	ВЫБОР
	|		КОГДА РетроБонусыПоставщиков.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ТОГДА РетроБонусыПоставщиков.КСписаниюОборот + РетроБонусыПоставщиков.СписаноОборот + РетроБонусыПоставщиков.АктированоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Погашено
	|ПОМЕСТИТЬ ВТ_Расчеты
	|ИЗ
	|	РегистрНакопления.РетроБонусыПоставщиков.Обороты(, , , ДокументУсловий = &ДокументУсловий) КАК РетроБонусыПоставщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Расчеты.НачалоПериода КАК НачалоПериода,
	|	ВТ_Расчеты.ОкончаниеПериода КАК ОкончаниеПериода
	|ИЗ
	|	ВТ_Расчеты КАК ВТ_Расчеты
	|ГДЕ
	|	ВТ_Расчеты.Начислено > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Расчеты.Валюта КАК Валюта,
	|	СУММА(ВТ_Расчеты.Начислено) > 0 И СУММА(ВТ_Расчеты.Начислено) = СУММА(ВТ_Расчеты.Погашено) КАК НачисленныеБонусыАктивированыПолностью,
	|	СУММА(ВТ_Расчеты.Начислено) < СУММА(ВТ_Расчеты.Погашено) КАК ПогашениеБольшеНачисления,
	|	СУММА(ВТ_Расчеты.Начислено) > СУММА(ВТ_Расчеты.Погашено) КАК ОжидаетсяАкт
	|ИЗ
	|	ВТ_Расчеты КАК ВТ_Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Расчеты.Валюта
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТ_Расчеты.Начислено) <> 0
	|		ИЛИ СУММА(ВТ_Расчеты.Погашено) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыПоставщиковУсловия.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыПоставщиковУсловия.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыПоставщиковУсловия.ТипБонуса КАК ТипБонуса,
	|	РетроБонусыПоставщиковУсловия.ПериодичностьНачислений КАК ПериодичностьНачислений
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковУсловия КАК РетроБонусыПоставщиковУсловия
	|ГДЕ
	|	РетроБонусыПоставщиковУсловия.ДокументУсловий = &ДокументУсловий";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); // РезультатЗапроса
	РезультатЗапросаГраница = РезультатЗапроса.ВГраница();
	РезультатДанныеУсловий = РезультатЗапроса[РезультатЗапросаГраница].Выбрать();
	РезультатИтоги = РезультатЗапроса[РезультатЗапросаГраница - 1].Выгрузить();
	РезультатПериоды = РезультатЗапроса[РезультатЗапросаГраница - 2].Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатДанныеУсловий", РезультатДанныеУсловий);
	Результат.Вставить("РезультатИтоги", РезультатИтоги);
	Результат.Вставить("РезультатПериоды", РезультатПериоды);
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьРазрывыВПериодах(НачалоДействия, ОкончаниеДействия, ТаблицаПериодовНачислений)
	
	ЕстьПериодыБезНачислений = Ложь;
	
	Если ТаблицаПериодовНачислений.Количество() > 0 Тогда
		
		МассивНачалоПериода = ТаблицаПериодовНачислений.ВыгрузитьКолонку("НачалоПериода");
		МассивОкончаниеПериода = ТаблицаПериодовНачислений.ВыгрузитьКолонку("ОкончаниеПериода");
		
		НачалоПериодаНачислений = МинимальноеЗначениеВМассиве(МассивНачалоПериода);
		ОкончаниеПериодаНачислений = МаксимальноеЗначениеВМассиве(МассивОкончаниеПериода);
		
		Если НачалоПериодаНачислений > НачалоДействия
		 ИЛИ ОкончаниеПериодаНачислений < ОкончаниеДействия Тогда
			
			ЕстьПериодыБезНачислений = Истина;
			
		Иначе
			
			ТаблицаПериодовНачислений.Сортировать("НачалоПериода Возр, ОкончаниеПериода Возр");
			ТекущаяКонтрольнаяДата = НачалоДействия;
			
			Для Каждого ТекущийПериод Из ТаблицаПериодовНачислений Цикл
				
				Если КонецДня(ТекущаяКонтрольнаяДата) + 1 >= НачалоДня(ТекущийПериод.НачалоПериода) Тогда
					
					ТекущаяКонтрольнаяДата = Макс(ТекущийПериод.ОкончаниеПериода, ТекущаяКонтрольнаяДата);
					
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЕстьПериодыБезНачислений = (ТекущаяКонтрольнаяДата < ОкончаниеДействия);
			
		КонецЕсли;
		
	Иначе
		
		ЕстьПериодыБезНачислений = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьПериодыБезНачислений;
	
КонецФункции

// Параметры:
//  Массив - Массив Из Дата
// 
// Возвращаемое значение:
//  Дата
//
Функция МаксимальноеЗначениеВМассиве(Массив)
	
	Если Массив.Количество() = 0 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(Массив);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Возврат СписокДат[0].Значение;
	
КонецФункции

// Параметры:
//  Массив - Массив Из Дата
// 
// Возвращаемое значение:
//  Дата 
//  Неопределено
//
Функция МинимальноеЗначениеВМассиве(Массив)
	
	Если Массив.Количество() = 0 Тогда
		Возврат Дата(3999, 12, 31, 23, 59, 59);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(Массив);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Возврат СписокДат[0].Значение;
	
КонецФункции

Процедура ОчиститьНеиспользуемыеРеквизитыКонтрагентыКлиентов(Объект, Знач Параметры)
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		Объект.КонтрагентыКлиентов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	КромеВыбранных = (Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных);
	
	Для Каждого СтрокаТЧ Из Объект.КонтрагентыКлиентов Цикл
		
		Если НЕ Объект.Исправление Тогда
			
			СтрокаТЧ.Отменено = Ложь;
			СтрокаТЧ.ИсходнаяСтрока = Ложь;
			
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
		Если КромеВыбранных Тогда
			
			СтрокаТЧ.НачалоДействия = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыИННКонтрагентовКлиентов(Объект, Знач Параметры)
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
		
		Объект.ИННКонтрагентовКлиентов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	КромеВыбранных = (Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных);
	
	Для Каждого СтрокаТЧ Из Объект.ИННКонтрагентовКлиентов Цикл
		
		Если НЕ Объект.Исправление Тогда
			
			СтрокаТЧ.Отменено = Ложь;
			СтрокаТЧ.ИсходнаяСтрока = Ложь;
			
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
		Если КромеВыбранных Тогда
			
			СтрокаТЧ.НачалоДействия = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатПоИтогамПроверки(Результат, РезультатИтоги)
	
	Если НЕ Результат.ЕстьПериодыБезНачислений Тогда
		
		Если РезультатИтоги.Количество() > 1 Тогда
			
			РезультатИтогиСводно = РезультатИтоги.Скопировать();
			Колонки = "НачисленныеБонусыАктивированыПолностью, ПогашениеБольшеНачисления, ОжидаетсяАкт";
			РезультатИтогиСводно.Свернуть(Колонки);
			
			Если РезультатИтогиСводно.Количество() > 1 Тогда
				
				Результат.РазныеСостояния = Истина;
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(Результат, РезультатИтогиСводно[0]);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Результат, РезультатИтоги[0]);
			
		КонецЕсли;
		
	Иначе
		
		Результат.ОжидаетсяНачисление = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайлов

// Возвращаемое значение:
//  Структура - Строка данных по товарам:
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// 
Функция СтрокаДанныхПоТоварам();
	
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтрокаДанных.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Возврат СтрокаДанных;
	
КонецФункции

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.Номенклатура
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * НоменклатураНаименование - Строка
//  * Артикул - Строка
//  * Код - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейНоменклатуры(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.НоменклатураНаименование) Тогда
		
		ТекстУсловия =
		"(Номенклатура.Наименование = &Наименование
		| ИЛИ Номенклатура.НаименованиеПолное = &Наименование)";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.НоменклатураНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Артикул) Тогда
		
		ТекстУсловия =
		"Номенклатура.Артикул = &Артикул";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Артикул", ЗагружаемыеЗначенияСтрока.Артикул);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Номенклатура.Код = &Код";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = Символы.ПС + "И "; //@query-part
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.ХарактеристикиНоменклатуры
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * ХарактеристикаНаименование - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейХарактеристики(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Если НЕ ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ХарактеристикаНаименование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ХарактеристикаНаименование);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	НЕ Характеристики.ПометкаУдаления
	|	И Характеристики.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Характеристики.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	НЕ Характеристики.ПометкаУдаления
	|	И Характеристики.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Характеристики.Наименование <> &Наименование
	|	И Характеристики.НаименованиеПолное = &Наименование";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * НоменклатураНаименование - Строка
//  * Артикул - Строка
//  * Штрихкод - Строка
//  * Код - Строка
//  * ХарактеристикаНаименование - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений, Произвольный - Таблица для заполнения
//  ДополнительныеПараметры - Структура:
//  * НастройкиОтображенияПолей - Структура:
//  ** Характеристика - Булево
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
// * Колонка - Строка
// * Идентификатор - Число
//
Процедура СопоставитьЗагружаемыеДанныеТЧТовары(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ДанныеИБПоНоменклатуре = ДанныеИБПоНоменклатуреИХарактеристикам();
	ТаблицаШтрихкодов = ДанныеИБПоШтрихкодам(ЗагружаемыеДанные);
	
	НастройкиОтображенияПолей = ДополнительныеПараметры.НастройкиОтображенияПолей;
	ИспользоватьХарактеристики = НастройкиОтображенияПолей.Характеристика;
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		ДанныеНоменклатурыИХарактеристики = ПодобратьНоменклатуруПоРеквизитам(
			СтрокаДанных,
			ДанныеИБПоНоменклатуре,
			ТаблицаШтрихкодов,
			ИспользоватьХарактеристики,
			СписокНеоднозначностей);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНоменклатурыИХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Данные ИБ по номенклатуре и характеристикам:
// * ТаблицаНоменклатуры - ТаблицаЗначений:
// ** Код - Строка 
// ** Артикул - Строка 
// ** Наименование - Строка 
// ** НаименованиеПолное - Строка 
// ** Номенклатура - СправочникСсылка.Номенклатура 
// ** ИспользованиеХарактеристик - Булево 
// ** ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
// * ТаблицаХарактеристик - ТаблицаЗначений:
// ** НаименованиеХарактеристики - Строка 
// ** НаименованиеХарактеристикиПолное - Строка 
// ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры 
// ** ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
//
Функция ДанныеИБПоНоменклатуреИХарактеристикам()
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаНоменклатуры", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаХарактеристик", Новый ТаблицаЗначений);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДляОтбораХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик,
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик,
	|	Номенклатура.ВладелецХарактеристик
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Номенклатура.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик,
	|	Номенклатура.ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	ДанныеНоменклатуры.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ПОМЕСТИТЬ ПараметрыОтбораХарактеристик
	|ИЗ
	|	ТаблицаНоменклатуры КАК ДанныеНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначениеДляОтбораХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОтбора.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаХарактеристик
	|ИЗ
	|	ПараметрыОтбораХарактеристик КАК ПараметрыОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|		 И ПараметрыОтбора.ЗначениеДляОтбораХарактеристик <> НЕОПРЕДЕЛЕНО
	|		 И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хар.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Хар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|	Хар.Характеристика КАК Характеристика,
	|	Хар.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ИЗ
	|	ТаблицаХарактеристик КАК Хар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ном.Код КАК Код,
	|	Ном.Артикул КАК Артикул,
	|	Ном.Наименование КАК Наименование,
	|	Ном.НаименованиеПолное КАК НаименованиеПолное,
	|	Ном.Номенклатура КАК Номенклатура,
	|	Ном.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	Ном.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ИЗ
	|	ТаблицаНоменклатуры КАК Ном";
		
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[3]; // РезультатЗапроса
	
	Результат.ТаблицаХарактеристик = РезультатЗапроса.Выгрузить();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоХарактеристике(Результат.ТаблицаХарактеристик);
	
	РезультатЗапроса = МассивРезультатов[4]; // РезультатЗапроса
	
	Результат.ТаблицаНоменклатуры = РезультатЗапроса.Выгрузить();
	
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоНоменклатуре(Результат.ТаблицаНоменклатуры);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений:
//  * Код - Строка
//  * Артикул - Строка
//  * Наименование - Строка
//  * НаименованиеПолное - Строка
//  * АртикулПоиск - Строка
//  * НаименованиеПоиск - Строка
//  * НаименованиеПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоНоменклатуре(ТаблицаНоменклатуры)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		Код = СтрЗаменить(СтрокаНоменклатуры.Код, " ", "");
		СтрокаНоменклатуры.Код = ВРег(Код);
		
		АртикулПоиск = СтрЗаменить(СтрокаНоменклатуры.Артикул, " ", "");
		СтрокаНоменклатуры.АртикулПоиск = ВРег(АртикулПоиск);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаНоменклатуры.Наименование, " ", "");
		СтрокаНоменклатуры.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
		НаименованиеПолноеПоиск = СтрЗаменить(СтрокаНоменклатуры.НаименованиеПолное, " ", "");
		СтрокаНоменклатуры.НаименованиеПолноеПоиск = ВРег(НаименованиеПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ТаблицаХарактеристик - ТаблицаЗначений:
//  * НаименованиеХарактеристики - Строка
//  * НаименованиеХарактеристикиПолное - Строка
//  * НаименованиеХарактеристикиПоиск - Строка
//  * НаименованиеХарактеристикиПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоХарактеристике(ТаблицаХарактеристик)
	
	Для Каждого СтрокаХарактеристики Из ТаблицаХарактеристик Цикл
		
		НаименованиеХарактеристикиПоиск =
			СтрЗаменить(СтрокаХарактеристики.НаименованиеХарактеристики, " ", "");
		СтрокаХарактеристики.НаименованиеХарактеристикиПоиск = ВРег(НаименованиеХарактеристикиПоиск);
		
		НаименованиеХарактеристикиПолноеПоиск =
			СтрЗаменить(СтрокаХарактеристики.НаименованиеХарактеристикиПолное, " ", "");
		СтрокаХарактеристики.НаименованиеХарактеристикиПолноеПоиск =
			ВРег(НаименованиеХарактеристикиПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеИБПоШтрихкодам(ТаблицаДанных)
	
	ДанныеПоШтрихкодам = ТаблицаДанныхШтрихкодов();
	
	Штрихкоды = ОбщегоНазначенияУТ.УникальныеЗначенияИзКолонкиТаблицы(ТаблицаДанных, "Штрихкод");
	
	КоличествоЭлементовКоллекции = Штрихкоды.Количество();
	
	// Очищаем пустые значения
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если НЕ ЗначениеЗаполнено(Штрихкоды[Индекс]) Тогда
			Штрихкоды.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Штрихкоды.Количество() > 0 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкоды)
		|	И ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)";
		
		ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
		Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаДанных = ДанныеПоШтрихкодам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * Штрихкод - Строка
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//
Функция ТаблицаДанныхШтрихкодов()
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТиповХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ОписаниеТиповУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Штрихкод", ОписаниеТиповСтрока);
	Таблица.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатура);
	Таблица.Колонки.Добавить("Характеристика", ОписаниеТиповХарактеристика);
	Таблица.Колонки.Добавить("Упаковка", ОписаниеТиповУпаковка);
	
	Возврат Таблица;
	
КонецФункции

Функция ПодобратьНоменклатуруПоРеквизитам(ЗагружаемаяСтрока, ДанныеИБПоНоменклатуре, ТаблицаШтрихкодов, ИспользоватьХарактеристики, СписокНеоднозначностей)
	
	ТаблицаНоменклатуры = ДанныеИБПоНоменклатуре.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = ДанныеИБПоНоменклатуре.ТаблицаХарактеристик;
	
	СтрокиПоиска = Новый Структура;
	Штрихкод = СтрЗаменить(ЗагружаемаяСтрока.Штрихкод, " ", "");
	СтрокаПоискаШтрихкод = ВРег(Штрихкод);
	СтрокиПоиска.Вставить("Штрихкод", СтрокаПоискаШтрихкод);
	Код = СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "");
	СтрокаПоискаКод = ВРег(Код);
	СтрокиПоиска.Вставить("Код", СтрокаПоискаКод);
	Артикул = СтрЗаменить(ЗагружаемаяСтрока.Артикул, " ", "");
	СтрокаПоискаАртикул = ВРег(Артикул);
	СтрокиПоиска.Вставить("Артикул", СтрокаПоискаАртикул);
	Номенклатура = СтрЗаменить(ЗагружаемаяСтрока.НоменклатураНаименование, " ", "");
	СтрокаПоискаНоменклатура = ВРег(Номенклатура);
	СтрокиПоиска.Вставить("Номенклатура", СтрокаПоискаНоменклатура);
	Если ИспользоватьХарактеристики Тогда
		
		Характеристика = СтрЗаменить(ЗагружаемаяСтрока.ХарактеристикаНаименование, " ", "");
		СтрокаПоискаХарактеристика = ВРег(Характеристика);
		СтрокиПоиска.Вставить("Характеристика", СтрокаПоискаХарактеристика);
		
	КонецЕсли;
	
	ЕстьШтрихкод = ЗначениеЗаполнено(Штрихкод);
	ЕстьКод = ЗначениеЗаполнено(Код);
	ЕстьАртикул = ЗначениеЗаполнено(Артикул);
	ЕстьНоменклатура = ЗначениеЗаполнено(Номенклатура);
	ЕстьХарактеристика = (ИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаПоискаХарактеристика));
	
	НайденныеДанные = Новый Массив; // Массив из см. СтрокаДанныхПоТоварам
	ДанныеНайдены = Ложь;
	
	Если ЕстьШтрихкод Тогда
		
		ПодобратьНоменклатуруПоШтрихкоду(ТаблицаШтрихкодов, СтрокиПоиска, ДанныеНайдены, НайденныеДанные);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьКод
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоКодуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьКод
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоКоду(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуНоменклатуре(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И НЕ ЕстьАртикул
	   И ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И НЕ ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулу(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И НЕ ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И НЕ ЕстьАртикул
	   И ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоНаименованию(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Если ИспользоватьХарактеристики Тогда
		СтруктураРезультата.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеДанные.Количество() = 1 Тогда
			
			СтрокаНоменклатуры = НайденныеДанные[0];
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, СтрокаНоменклатуры);
			
		Иначе
			
			ЗаполнитьСпискиНеоднозначностиПриПодбореНоменклатуры(ЗагружаемаяСтрока, СписокНеоднозначностей, ИспользоватьХарактеристики);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ЗаполнитьСпискиНеоднозначностиПриПодбореНоменклатуры(ЗагружаемаяСтрока, СписокНеоднозначностей, ИспользоватьХарактеристики)
	
	СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
	СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
	СтрокаНеоднозначности.Колонка = "Номенклатура";
	
	Если ИспользоватьХарактеристики Тогда
		
		СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
		СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
		СтрокаНеоднозначности.Колонка = "Характеристика";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоНаименованию(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)

	СтруктураПоиска = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулу(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)

	СтруктураПоиска = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденныеХарактеристикиПоКлючу,
		ТаблицаНоменклатуры,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденныеХарактеристикиПоКлючу,
			ТаблицаНоменклатуры,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтруктураПоиска = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
			НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденныеХарактеристикиПоКлючу,
				ТаблицаНоменклатуры,
				ОтборПоСвязаннойТаблице);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(
					НайденныеХарактеристикиПоКлючу,
					ТаблицаНоменклатуры,
					ОтборПоСвязаннойТаблице);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтруктураПоиска = Новый Структура("НаименованиеПоиск",	СтрокиПоиска.Номенклатура);
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоиска = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;
		
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			СтруктураПоиска = Новый Структура(
				"ЗначениеДляОтбораХарактеристик", НоменклатураПоКлючу.ЗначениеДляОтбораХарактеристик);
			НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ХарактеристикаПоКлючу Из НайденныеХарактеристикиПоКлючу Цикл
				
				ДобавитьДанныеНайденнойСтроки(
					НайденныеДанные, НоменклатураПоКлючу.Номенклатура, ХарактеристикаПоКлючу.Характеристика);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НайденныеДанные.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуНоменклатуре(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоискаАртикул = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаАртикул);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоКоду(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Код", СтрокиПоиска.Код);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоискаКод = Новый Структура("Код", СтрокиПоиска.Код);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаКод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
		НайденнаяНоменклатураПоАртикулНаименованиеПолное = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоАртикулНаименованиеПолное,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОтборПоСвязаннойТаблице = Новый Структура;
			ОтборПоСвязаннойТаблице.Вставить("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденнаяНоменклатураПоАртикулНаименованиеПолное,
				ТаблицаХарактеристик,
				ОтборПоСвязаннойТаблице);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные, НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоКодуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("Код", СтрокиПоиска.Код);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура;
		ОтборПоСвязаннойТаблице.Вставить("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ПустойОтбор = Новый Структура;
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденнаяНоменклатураПоКлючу,
				ТаблицаХарактеристик,
				ПустойОтбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоШтрихкоду(ТаблицаШтрихкодов, СтрокиПоиска, ДанныеНайдены, НайденныеДанные)
	
	СтруктураПоискаШтрихкод = Новый Структура;
	СтруктураПоискаШтрихкод.Вставить("Штрихкод", СтрокиПоиска.Штрихкод);
	
	НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(СтруктураПоискаШтрихкод);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		СтрокаШтрихкода = НайденныеСтроки[0];
		ДобавитьДанныеНайденнойСтроки(НайденныеДанные, СтрокаШтрихкода.Номенклатура, СтрокаШтрихкода.Характеристика);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеНайденнойСтроки(НайденныеСтроки, Номенклатура, Характеристика = Неопределено);
	
	Данные = СтрокаДанныхПоТоварам();
	Данные.Номенклатура = Номенклатура;
	Данные.Характеристика = Характеристика;
	
	НайденныеСтроки.Добавить(Данные);
	
КонецПроцедуры

// Параметры:
//  МассивНайденныхРанее - Массив из СтрокаТаблицыЗначений - Массив найденных ранее
//  СвязаннаяТаблица - ТаблицаЗначений - Связанная таблица:
// * Код - Строка - 
// * Артикул - Строка - 
// * Наименование - Строка - 
// * НаименованиеПолное - Строка - 
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * ИспользованиеХарактеристик - Булево - 
// * ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры - 
//  ОтборПоСвязаннойТаблице - Структура - Отбор по связанной таблице:
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//
Функция ПоискПоСвязаннойТаблице(МассивНайденныхРанее, СвязаннаяТаблица, ОтборПоСвязаннойТаблице)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Если МассивНайденныхРанее.Количество() > 0 Тогда
		
		Для Каждого СтрокаПоКлючу Из МассивНайденныхРанее Цикл
			
			ОтборДляПоиска = Новый Структура;
			ОтборДляПоиска.Вставить("ЗначениеДляОтбораХарактеристик", СтрокаПоКлючу.ЗначениеДляОтбораХарактеристик);
			
			Для Каждого ЭлементОтбора Из ОтборПоСвязаннойТаблице Цикл
				ОтборДляПоиска.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			
			НайденныеПоОтбору = СвязаннаяТаблица.НайтиСтроки(ОтборДляПоиска);
			Для Каждого СтрокаНайденнаяПоОтбору Из НайденныеПоОтбору Цикл
				
				НоваяСтрокаРезультата = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаНайденнаяПоОтбору);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРезультата, СтрокаПоКлючу);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * СегментНаименование - Строка
//  * Код - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений:
//  * Сегмент - СправочникСсылка.СегментыНоменклатуры
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
// * Колонка - Строка
// * Идентификатор - Число 
//
Процедура СопоставитьЗагружаемыеДанныеТЧСегментыТоваров(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ТаблицаСегментовТоваров = ТаблицаСегментовТоваров();
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.Сегмент = ПодобратьСегментНоменклатурыПоРеквизитам(
			СтрокаДанных, ТаблицаСегментовТоваров, СписокНеоднозначностей);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений - Таблица сегментов товаров:
//  * Код - Строка
//  * Наименование - Строка
//  * Сегмент - СправочникСсылка.СегментыНоменклатуры
//
Функция ТаблицаСегментовТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СегментыНоменклатуры.Код КАК Код,
	|	СегментыНоменклатуры.Наименование КАК Наименование,
	|	СегментыНоменклатуры.Ссылка КАК Сегмент
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	НЕ СегментыНоменклатуры.ПометкаУдаления
	|	И НЕ СегментыНоменклатуры.ЭтоГруппа";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСегментов = Запрос.Выполнить().Выгрузить();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаСегментов.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	ЗаполнитьПоляПоискаПоСегментамТоваров(ТаблицаСегментов);
	
	Возврат ТаблицаСегментов;
	
КонецФункции

// Параметры:
//  ТаблицаСегментов - ТаблицаЗначений:
//  * Код - Строка
//  * Наименование - Строка
//  * НаименованиеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоСегментамТоваров(ТаблицаСегментов)
	
	Для Каждого СтрокаСегмента Из ТаблицаСегментов Цикл
		
		Код = СтрЗаменить(СтрокаСегмента.Код, " ", "");
		СтрокаСегмента.Код = ВРег(Код);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаСегмента.Наименование, " ", "");
		СтрокаСегмента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодобратьСегментНоменклатурыПоРеквизитам(ЗагружаемаяСтрока, ТаблицаСегментов, СписокНеоднозначностей)
	
	СтрокаПоискаКод = ВРег(СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "")); 
	СтрокаПоискаСегмент = ВРег(СтрЗаменить(ЗагружаемаяСтрока.СегментНаименование, " ", ""));
	
	ЕстьКод = ЗначениеЗаполнено(ЗагружаемаяСтрока.Код);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.СегментНаименование);
	
	ДанныеНайдены = Ложь;
	
	Если ЕстьКод Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Код", СтрокаПоискаКод);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаСегмент);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйСегмент = Справочники.СегментыНоменклатуры.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаСегмента = НайденныеСтроки[0];
			НайденныйСегмент = СтрокаСегмента.Сегмент;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Сегмент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйСегмент;
	
КонецФункции

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.СегментыНоменклатуры
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * СегментНаименование - Строка
//  * Код - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейСегментовТоваров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.СегментНаименование) Тогда
		
		ТекстУсловия =
		"Сегменты.Наименование = &Наименование";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.СегментНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Сегменты.Код = &Код";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = Символы.ПС + "И "; //@query-part
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сегменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК Сегменты
	|ГДЕ
	|	НЕ Сегменты.ПометкаУдаления
	|	И НЕ Сегменты.ЭтоГруппа";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * ИНН - Строка
//  * КПП - Строка
//  * КонтрагентНаименование - Строка
//  * Код - Строка - Код партнера
//  * ПартнерНаименование - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений:
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Партнер - СправочникСсылка.Партнеры
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
//  * Колонка - Строка
//  * Идентификатор - Число
//
Процедура СопоставитьЗагружаемыеДанныеТЧКонтрагентыКлиентов(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ТаблицаКонтрагентов = ДанныеИБПоКонтрагентам();
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.Контрагент = ПодобратьКонтрагентаПоРеквизитам(
			СтрокаДанных, ТаблицаКонтрагентов, СписокНеоднозначностей);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИНН - Строка
//  * КПП - Строка
//  * Наименование - Строка
//  * НаименованиеПолное - Строка
//  * Контрагент - СправочникСсылка.Контрагенты
//
Функция ДанныеИБПоКонтрагентам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоКонтрагентам(ТаблицаКонтрагентов);
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

// Параметры:
//  ТаблицаКонтрагентов - ТаблицаЗначений:
//  * ИНН - Строка
//  * КПП - Строка
//  * Наименование - Строка
//  * НаименованиеПолное - Строка
//  * НаименованиеПоиск - Строка
//  * НаименованиеПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоКонтрагентам(ТаблицаКонтрагентов)
	
	Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
		
		ИНН = СтрЗаменить(СтрокаКонтрагента.ИНН, " ", "");
		СтрокаКонтрагента.ИНН = ВРег(ИНН);
		
		КПП = СтрЗаменить(СтрокаКонтрагента.КПП, " ", "");
		СтрокаКонтрагента.КПП = ВРег(КПП);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаКонтрагента.Наименование, " ", "");
		СтрокаКонтрагента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
		НаименованиеПолноеПоиск = СтрЗаменить(СтрокаКонтрагента.НаименованиеПолное, " ", "");
		СтрокаКонтрагента.НаименованиеПолноеПоиск = ВРег(НаименованиеПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодобратьКонтрагентаПоРеквизитам(ЗагружаемаяСтрока, ТаблицаКонтрагентов, СписокНеоднозначностей)
	
	СтрокаПоискаИНН = ВРег(СтрЗаменить(ЗагружаемаяСтрока.ИНН, " ", "")); 
	СтрокаПоискаКПП = ВРег(СтрЗаменить(ЗагружаемаяСтрока.КПП, " ", "")); 
	СтрокаПоискаКонтрагент = ВРег(СтрЗаменить(ЗагружаемаяСтрока.КонтрагентНаименование, " ", ""));
	
	ЕстьИНН = ЗначениеЗаполнено(ЗагружаемаяСтрока.ИНН);
	ЕстьКПП = ЗначениеЗаполнено(ЗагружаемаяСтрока.КПП);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.КонтрагентНаименование);
	
	ДанныеНайдены = Ложь;
	
	// Поиск по всем заполненным полям
	СтруктураПоиска = Новый Структура;
	Если ЕстьИНН Тогда
		СтруктураПоиска.Вставить("ИНН", СтрокаПоискаИНН);
	КонецЕсли;
	Если ЕстьКПП Тогда
		СтруктураПоиска.Вставить("КПП", СтрокаПоискаКПП);
	КонецЕсли;
	Если ЕстьИмя Тогда
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаКонтрагент);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Удалить("НаименованиеПоиск");
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаКонтрагент);
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
	// Высший приоритет по ИНН
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИНН", СтрокаПоискаИНН);
		
		Если ЕстьКПП Тогда
			СтруктураПоиска.Вставить("КПП", СтрокаПоискаКПП);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск по наименованию
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаКонтрагент);
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск по полному наименованию
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаКонтрагент);
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаКонтрагента = НайденныеСтроки[0];
			НайденныйКонтрагент = СтрокаКонтрагента.Контрагент;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Контрагент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйКонтрагент;
	
КонецФункции

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.Контрагенты
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * КонтрагентНаименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейКонтрагентов(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.КонтрагентНаименование) Тогда
		
		ТекстУсловия =
		"(Контрагенты.Наименование = &Наименование
		| ИЛИ Контрагенты.НаименованиеПолное = &Наименование)";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.КонтрагентНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ИНН) Тогда
		
		ТекстУсловия =
		"Контрагенты.ИНН = &ИНН";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("ИНН", ЗагружаемыеЗначенияСтрока.ИНН);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.КПП) Тогда
		
		ТекстУсловия =
		"Контрагенты.КПП = &КПП";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.КПП);
		
	КонецЕсли;
	
	ТекстИ = Символы.ПС + "И "; //@query-part
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли