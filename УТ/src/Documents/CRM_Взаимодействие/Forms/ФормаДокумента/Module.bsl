
#Область ОписаниеПеременных

// ШаблоныЭлементовФорм
&НаКлиенте
Перем ШаблоныЭлементов_Формы, ТекущийУчастник;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если НЕ Параметры.Свойство("ОткрыватьФорму") И ЗначениеЗаполнено(Объект.ДокументОснование)
		 И ТипЗнч(Объект.ДокументОснование) <> Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда 
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			НеОбрабатыватьОткрытие = Истина;
			Возврат;
		Иначе
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			Если МодульУправлениеДоступом <> Неопределено Тогда
				НеОбрабатыватьОткрытие = МодульУправлениеДоступом.ЧтениеРазрешено(Объект.ДокументОснование);
			Иначе
				НеОбрабатыватьОткрытие = Истина;
			КонецЕсли;
			
			Если НеОбрабатыватьОткрытие Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("ВидВзаимодействия") И
			ЗначениеЗаполнено(Параметры.ВидВзаимодействия) Тогда
			Объект.ВидВзаимодействия = Параметры.ВидВзаимодействия;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытоИзФормыНапоминаний = Ложь;
	Параметры.Свойство("ОткрытоИзФормыНапоминаний", ОткрытоИзФормыНапоминаний);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ОтрисоватьКатегорииНаФорме();
	
	НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь));
	ТекущийПользовательУчастник = (НайденныеСтроки.Количество() > 0) ИЛИ (ТекущийПользователь = Объект.Ответственный);
	Если ТекущийПользовательУчастник Тогда
		CRM_ОповещенияСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаОповещений);
	КонецЕсли;
	
	ПериодическоеСтароеЗначение = Объект.Периодическое;
	
	СписокТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СписокТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер,
			 "ГруппаКИКлиента",
			 СписокТиповКИ.ВыгрузитьЗначения());
		CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
			 Объект.КонтактноеЛицо, "ГруппаКИКонтакта",
			 СписокТиповКИ.ВыгрузитьЗначения());
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда	
		CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
			 Объект.ПотенциальныйКлиент, "ГруппаКИПотенциальногоКлиента",
			 СписокТиповКИ.ВыгрузитьЗначения());
	КонецЕсли;
	
	ЗаполнитьУчастников();
	ПараметрыВыбораВида = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		 И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
			 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
				 Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
			СостоянияИнтереса = Новый Массив;
			УстановитьПривилегированныйРежим(Истина);
			СостоянияИнтереса.Добавить(Объект.ДокументОснование.СостояниеИнтереса);
			УстановитьПривилегированныйРежим(Ложь);
			СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса",
				 Новый ФиксированныйМассив(СостоянияИнтереса)));
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
				 Справочники.CRM_ВидыДелВзаимодействий.Задача_ЗадачаИсполнителя));
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
				 Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));	
		Иначе
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
				 Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
		КонецЕсли;
	Иначе
		ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
			 Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	КонецЕсли;
	
	Элементы.ВидВзаимодействия.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.CRM_ЖурналыВстреч") Тогда
		Элементы.ОбъектВзаимодействия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.CRM_ЖурналыВстреч");
	Иначе
		МассивТипов = Новый Массив(1);
		МассивТипов[0] = ТипЗнч(Объект.ДокументОснование);
		Элементы.ОбъектВзаимодействия.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ДекорацияВыбратьГруппу.Доступность = Ложь;
	КонецЕсли;
	СформироватьПредставлениеВложений();
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.ДатаНачала);
	
	ЭтоВстречаЖурнала = ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.CRM_ЖурналыВстреч");
	
	Если ЭтоВстречаЖурнала Тогда
		ПараметрыВыбораВидВзаимодействия = Новый Массив;
		ПараметрыВыбораВидВзаимодействия.Добавить(Новый ПараметрВыбора("Отбор.ПланироватьвЖурналеВстреч", Истина));
		Элементы.ВидВзаимодействия.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВидВзаимодействия);
	КонецЕсли;
	
	Если ЭтоВстречаЖурнала Тогда
		Элементы.ГруппаПериодВзаимодействия.Доступность = Не (Объект.ДокументОснование.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Действует
															Или Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено);
		Элементы.ВидВзаимодействия.Доступность =
			Не (Объект.ДокументОснование.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Действует);
		Элементы.Ответственный.Доступность =
			Не (Объект.ДокументОснование.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Действует);
		
		Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Объект.ДокументОснование) Тогда
			МассивЗадач = CRM_БизнесПроцессыСервер.ПолучитьНеВыполненныеЗадачи(Объект.ДокументОснование, Ложь);
			Если МассивЗадач.Количество() > 0 Тогда
				ТекущаяЗадача = МассивЗадач[0];
				Если ТекущаяЗадача.Исполнитель <> Пользователи.ТекущийПользователь() Тогда
					Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	Если Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
		Элементы.Состояние.ЦветФона = ?(Объект.ПосещениеПодтверждено, WebЦвета.СветлоЗеленый, WebЦвета.ЛососьСветлый);
	КонецЕсли;	
	
	ПоследнееСостояниеВзаимодействия = Объект.СтатусВзаимодействия;
	Элементы.ГруппаАдресОфиса.Видимость	= ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПланированиеВстреч");
	
	ЭтоВстреча = (Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча);
	НастроитьОтображениеСпискаУчастников(ЭтотОбъект, Не ЭтоВстреча);
	ВидимостьЧекЛист = ЭтоВстреча Или (Объект.ЧекЛист.Количество() > 0);
	НастроитьОтображениеЧекЛиста(ЭтотОбъект, Не ВидимостьЧекЛист);
	
	Объект.Баллы = Объект.ВидВзаимодействия.Баллы;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент");

	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	Если НеОбрабатыватьОткрытие Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
			ПараметрыОткрытия = Новый Структура("Ключ, ПозиционироватьНаВзаимодействие",
				 Объект.ДокументОснование,
				 Объект.Ссылка);
			
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Продажи.Интерес.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыОткрытия);
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
			
			ПараметрыОткрытия = Новый Структура("Ключ, ПозиционироватьНаВзаимодействие",
				 Объект.ДокументОснование,
				 Объект.Ссылка);
			
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Маркетинг.Телемаркетинг.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			
			ОткрытьФорму("Документ.CRM_Телемаркетинг.ФормаОбъекта", ПараметрыОткрытия);
			
		Иначе
			ПоказатьЗначение(, Объект.ДокументОснование);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	// Поиск себя.
	МассивСтрок = Участники.НайтиСтроки(Новый Структура("Участник", ТекущийПользователь));
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.Участники.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Заголовок = СформироватьЗаголовокФормы(Объект.Ссылка, Объект.Тема);
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);

	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.Взаимодействие.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НеОбрабатыватьОткрытие Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		ДобавитьОтветственногоВУчастники();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И (Объект.Ссылка = Параметр) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		 И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ВзаимодействиеПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() > 0  И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ВзаимодействиеПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоТегов();
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" И Параметр = Объект.ПотенциальныйКлиент Тогда
		ПотенциальныйКлиентПриИзмененииНаСервере();
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" И Параметр = Объект.Партнер Тогда
		ПартнерПриИзмененииНаСервере(Истина);
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И (Источник.ВладелецФормы = ЭтотОбъект
			Или (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник.ВладелецФормы, "ВладелецФормы")
				И Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект)
			Или (ТипЗнч(Источник.ВладелецФормы) = Тип("ПолеФормы")
				И Элементы.Найти(Источник.ВладелецФормы.Имя) <> Неопределено)) Тогда
			
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр;
				КонтактноеЛицоПриИзменении(Неопределено);
			КонецЕсли;
			Элементы.ГруппаПотенциальныйКлиент.Видимость	= Ложь;
			Элементы.ГруппаКлиентКонтакт.Видимость			= Истина;
			Модифицированность = Истина;
			Записать();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбъектыПереопределеныСПК" И Объект.ПотенциальныйКлиент = Параметр.ПК Тогда
		
		Прочитать();
		
	КонецЕсли;
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ОткрытоИзФормыНапоминаний И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПараметрОповещения = Новый Структура(
			"Ссылка, Пользователь",
			Объект.Ссылка,
			ПользователиКлиентСервер.ТекущийПользователь()
		);
		
		Оповестить("ПисьмоУспешноОткрытоИзНапоминания", ПараметрОповещения);
	КонецЕсли;
	
	Если ТипКлиента = "Клиент" Тогда
		Объект.ПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	Иначе
		Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеИнтереса)
			И ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		Объект.СостояниеИнтереса = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(
			Объект.ДокументОснование, "СостояниеИнтереса"
		);
	КонецЕсли;
	
	Если Модифицированность Тогда
		ВопросИзмененияЗадавался		= Ложь;
		Модифицированность	= Ложь;
	КонецЕсли;
	
	ДатаНовая				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	ОкончаниеСобытияНовое	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан,
		 ВремяОкончанияПлан);
	
	Объект.ПлановаяДата				= ДатаНовая;
	Объект.ПлановаяДатаЗавершение	= ОкончаниеСобытияНовое;
	
	СохранитьУчастников();
	
	Если Не ВопросИзмененияЗадавался Тогда
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) И Объект.Периодическое И Не Объект.ИзмененоВРяде Тогда
			СтарныеЗначенияРеквизитов = ПолучитьСтарыеЗначенияРеквизитовДокумента(Объект.Ссылка);
			
			ТемаСтарая			= СтарныеЗначенияРеквизитов.Тема;
			ДатаНачалаСтарая	= СтарныеЗначенияРеквизитов.ПлановаяДата;
			ДатаОкончанияСтарая	= СтарныеЗначенияРеквизитов.ПлановаяДатаЗавершение;
			
			ИзмененаДатаНачала		= Не (НачалоДня(ДатаНачалаСтарая) = НачалоДня(ДатаНовая));
			ИзмененаДатаОкончания	= Не (НачалоДня(ДатаОкончанияСтарая) = НачалоДня(ОкончаниеСобытияНовое));
			
			ИзмененоВремяНачала		= Не (ДатаНачалаСтарая = ДатаНовая);
			ИзмененоВремяОкончания	= Не (ДатаОкончанияСтарая = ОкончаниеСобытияНовое);
			
			БылаИзмененаДата		= ИзмененаДатаНачала Или ИзмененаДатаОкончания;
			БылоИзмененоВремя		= ИзмененоВремяНачала Или ИзмененоВремяОкончания;
			ПризнакИзмененияТемы	= Не (ТемаСтарая = Объект.Тема);
			
			Если Не Модифицированность И Не (ПризнакИзмененоРасписание Или ПризнакИзмененияТемы) Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "";
			Иначе
				Отказ = Истина;
				
				ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив);
				
				ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
				ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
				
				Если (БылоИзмененоВремя Или ПризнакИзмененияТемы) И Не БылаИзмененаДата Тогда
					ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
				КонецЕсли;
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюЗавершение",
					ЭтотОбъект
				);
				
				ОткрытьФорму(
					"Документ.CRM_Взаимодействие.Форма.ФормаИзменениеПериодическогоСобытия",
					ПараметрыФормы,
					ЭтотОбъект, , , ,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Параметры, Дополнительно) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПринятьИзменения = Истина Тогда 
			ПериодическоеСобытиеСпособИзмененияРяда = Параметры.СпособИзмененияРяда;
			ВопросИзмененияЗадавался				= Истина;
			
			Записать();
		Иначе
			ВопросИзмененияЗадавался = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	
	ПризнакНовогоМероприятия = ЭтоНовыйОбъект;
	
	ВзаимодействиеЗавершено = (ТекущийОбъект.СтатусВзаимодействия.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено
		Или ТекущийОбъект.СтатусВзаимодействия.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Отменено);
	
	Если ВзаимодействиеЗавершено И ТекущийОбъект.СтатусВзаимодействия <> ТекущийОбъект.Ссылка.СтатусВзаимодействия Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.ДокументОснование)
			 И ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТекущийОбъект.СостояниеИнтереса = ТекущийОбъект.ДокументОснование.СостояниеИнтереса;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		ТекущийОбъект.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		ТекущийОбъект.ЗавершившийПользователь      = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если Не ВзаимодействиеЗавершено И ЗначениеЗаполнено(ТекущийОбъект.ДатаЗавершенияВзаимодействия) Тогда
		ТекущийОбъект.ДатаЗавершенияВзаимодействия = Дата(1, 1, 1);
	КонецЕсли;
	
	ТекущийОбъект.ОрганизаторGApi = ТекущийОбъект.Ответственный;
	ТекущийОбъект.СторонниеЛица.Свернуть(
		"Партнер,КонтактноеЛицо,ПотенциальныйКлиент,Адрес,ПредставлениеАдреса,Принадлежность,Телефон,ПосетитМероприятие,АдресОфиса",
		"ОтправлятьСМС,ОтправлятьПоПочте"
	);
	
	// Периодичность
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПериодическоеСобытиеСпособИзмененияРяда",
		ПериодическоеСобытиеСпособИзмененияРяда
	);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ПризнакИзмененоРасписание И ТекущийОбъект.Периодическое Тогда
			МассивДатРасписания = Неопределено;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(
					ТекущийОбъект.РядСобытий.ДатаНачала,
					ТекущийОбъект.РядСобытий.ДатаОкончания,
					ТекущийОбъект.РядСобытий
				);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(
					ТекущийОбъект.ПлановаяДата,
					ТекущийОбъект.РядСобытий.ДатаОкончания,
					ТекущийОбъект.РядСобытий
				);
			КонецЕсли;
			
			Если МассивДатРасписания <> Неопределено И МассивДатРасписания.Количество() = 0 Тогда
				Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
						"ru='Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!';"
						"en='The schedule of periodic event are adjust incorrectly - to the specified period did not get any event!'"
					));
					
					Элементы.РядСобытийНаименование.Доступность	= (Объект.Периодическое
						 И ЗначениеЗаполнено(Объект.РядСобытий)
						 И Не Объект.ИзмененоВРяде);
					Элементы.РядСобытийНаименование.Видимость	= Объект.Периодическое;
					
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Признаки. по которым в дальнейшем после записи будем определять, надо ли	оповестить участников мероприятия.
	ЭтоНовыйОбъект				= ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоМероприятия	= ЭтоНовыйОбъект;
	
	Если Не ЭтоНовыйОбъект Тогда
		Если Не (ТекущийОбъект.ПлановаяДата = ТекущийОбъект.Ссылка.ПлановаяДата)
				Или Не (ТекущийОбъект.ПлановаяДатаЗавершение = ТекущийОбъект.Ссылка.ПлановаяДатаЗавершение) Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
		
		Если Не (ТекущийОбъект.Место = ТекущийОбъект.Ссылка.Место) Тогда
			ПризнакИзмененоМестоМероприятия = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не (Год(ТекущийОбъект.Дата) = Год(ТекущийОбъект.Ссылка.Дата)) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ПроверитьНаличиеНовыхУчастников(ТекущийОбъект);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
	
	Если ТекущийПользователь = Объект.Ответственный Или Не ПризнакНовогоМероприятия Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьОповещенияПоУмолчанию");
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	Если ЭтоВстречаЖурнала Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	CRM_ЖурналыВстреч.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ЖурналыВстреч КАК CRM_ЖурналыВстреч
		|ГДЕ
		|	CRM_ЖурналыВстреч.ДатаНачала = &ДатаНачала
		|	И CRM_ЖурналыВстреч.Ответственный = &Ответственный";
		
		Запрос.УстановитьПараметр("ДатаНачала",		НачалоНедели(ДатаНачала));
		Запрос.УстановитьПараметр("Ответственный",	Объект.Ответственный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущийЭлементЖурналаСсылка = Выборка.Ссылка;
		Иначе
			ТекущийЭлементЖурнала		= Справочники.CRM_ЖурналыВстреч.СоздатьЭлемент();
			ТекущийЭлементЖурналаСсылка	= Справочники.CRM_ЖурналыВстреч.ПолучитьСсылку();
			
			ТекущийЭлементЖурнала.УстановитьСсылкуНового(ТекущийЭлементЖурналаСсылка);
			
			ТекущийЭлементЖурнала.Наименование	= Строка(Объект.Ответственный) + "/" 
				+ Строка(НеделяГода(ДатаНачала)) 
				+ " неделя";
			ТекущийЭлементЖурнала.ДатаНачала	= НачалоНедели(ДатаНачала);
			ТекущийЭлементЖурнала.Ответственный	= Объект.Ответственный;
			
			ТекущийЭлементЖурнала.Записать();
		КонецЕсли;
		
		ТекущийОбъект.ДокументОснование = ТекущийЭлементЖурналаСсылка;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Объект.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде
			 И ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРяда) Тогда
			Если ПризнакИзмененоРасписание Тогда
				// Объект нужно разблокировать т.к. он будет изменяться программно.
				// BSLLS:MissingCodeTryCatchEx-off
				Попытка
					ТекущийОбъект.Разблокировать();
				Исключение
				КонецПопытки;
				// BSLLS:MissingCodeTryCatchEx-on
			КонецЕсли;
			
			ОбрабатываемыеЭлементы = Новый Массив;
			
			ОбрабатываемыйЭлемент = Новый Структура;
			ОбрабатываемыйЭлемент.Вставить("Источник",			ТекущийОбъект.Ссылка);
			ОбрабатываемыйЭлемент.Вставить("ПериодНачало",		ТекущийОбъект.ПлановаяДата);
			ОбрабатываемыйЭлемент.Вставить("ПериодОкончание",	ТекущийОбъект.ПлановаяДатаЗавершение);
			ОбрабатываемыйЭлемент.Вставить("ДатаНачалаТекущая",	ДатаНачалаСтарая);
			ОбрабатываемыйЭлемент.Вставить("РеквизитНачало",	"ПлановаяДата");
			ОбрабатываемыйЭлемент.Вставить("РеквизитОкончание",	"ПлановаяДатаЗавершение");
			
			ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
			
			РезультатПереноса = CRM_МероприятияСервер.ПереместитьМероприятияРяда(
				ОбрабатываемыеЭлементы,
				НачалоДня(ТекущийОбъект.ПлановаяДата),
				ПериодическоеСобытиеСпособИзмененияРяда
			);
			
			Если Не РезультатПереноса Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("en = 'The series events could not be rescheduled.'; ru = 'Не удалось перенести события ряда.'")
				);
			Иначе
				ФлагНеобходимостиОбновитьКешПредставленияРяда = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	ИмеетСтатусОтменено		= (Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено);
	ИмеетСтатусЗавершено	= (Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено);
	
	ОтменаИлиЗавершение = (ИмеетСтатусОтменено Или ИмеетСтатусЗавершено);
	
	// Оповещения
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(_ТаблицаОповещений, Тип("ТаблицаЗначений"));
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Новое",			ПризнакНовогоМероприятия);
	СтруктураИзменений.Вставить("ИзмененаДата",		ПризнакИзмененаДата);
	СтруктураИзменений.Вставить("ИзмененоМесто",	ПризнакИзмененоМестоМероприятия);
	СтруктураИзменений.Вставить("ИзмененСостав",	ИзмененСоставСтороннихУчастников);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений",					ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ОтменаИлиЗавершениеВзаимодействия",			ОтменаИлиЗавершение);
	СтруктураДанных.Вставить("НовыеУчастники",								НовыеУчастники);
	СтруктураДанных.Вставить("УдаленныеУчастники",							УдаленныеУчастники);
	СтруктураДанных.Вставить("ЭтоНовоеСобытие",								ПризнакНовогоМероприятия);
	СтруктураДанных.Вставить("ИзмененСоставУчастников",						ИзмененСоставУчастников);
	СтруктураДанных.Вставить("ПризнакПериодическоеСобытиеИнициализация",	Ложь);
	СтруктураДанных.Вставить("Пользователь",								ТекущийПользователь);
	СтруктураДанных.Вставить("Состояние",									СтруктураИзменений);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
	Если ПризнакИзмененыОповещения ИЛИ ИзмененСоставУчастников Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(
			ТекущийОбъект.Ссылка,
			АдресНастроек
		);
		
		ИзмененСоставУчастников		= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
	
	// Периодичность
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		ЭтоСпособУдалениеРяда = (ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда");
		
		Если ЭтоСпособУдалениеРяда Тогда
			ЗакрытьФормуПослеЗаписиСОповещением = Истина;
		КонецЕсли;
		
		Если ЭтоСпособУдалениеРяда Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
			// Объект нужно разблокировать т.к. он будет изменяться программно.
			// BSLLS:MissingCodeTryCatchEx-off
			Попытка
				ТекущийОбъект.Разблокировать();
			Исключение
			КонецПопытки;
			// BSLLS:MissingCodeTryCatchEx-on
			
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(
				ТекущийОбъект.Ссылка,
				ПериодическоеСобытиеСпособИзмененияРяда,
				ТекущийОбъект.ПлановаяДата, ,
				АдресНастроек
			);
		КонецЕсли;
		
		ПериодическоеСобытиеСпособИзмененияРяда	= "";
		ПризнакИзмененоРасписание				= Ложь;
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ХранилищеОбщихНастроек.Сохранить("Взаимодействия", "ТипКлиента", ТипКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Взаимодействие", Объект.Ссылка, Объект.ДокументОснование);
	Оповестить("ЛентаСобытий_Обновить", Объект.ДокументОснование);
	Оповестить("ОбновитьПланировщик", Объект.ДокументОснование);
	
	Заголовок = СформироватьЗаголовокФормы(Объект.Ссылка, Объект.Тема);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НеобходимостьПерепрочитатьДокумент = (ОткрытьФормуРасписанияПослеЗаписи
		 Или ФлагНеобходимостиОбновитьКешПредставленияРяда);
	
	Если ФлагНеобходимостиОбновитьКешПредставленияРяда Тогда
		// Сейчас в реквизите хранится старый ряд событий, его ссылку мы используем для сброса кеша представлений.
		ФлагНеобходимостиОбновитьКешПредставленияРяда = Ложь;
		ОповеститьОбИзменении(Объект.РядСобытий);
	КонецЕсли;
	
	Если НеобходимостьПерепрочитатьДокумент Тогда
		Прочитать();
	КонецЕсли;
	
	Если ОткрытьФормуРасписанияПослеЗаписи Тогда
		ОткрытьФормуРасписанияПослеЗаписи = Ложь;
		ОткрытьФормуРасписания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.Взаимодействие.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбработкаОтветаОЗавершении(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПосещениеПодтверждено = ДопПараметры.ПосещениеПодтверждено;
		Объект.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
		Элементы.Состояние.ЦветФона = ?(Объект.ПосещениеПодтверждено, WebЦвета.СветлоЗеленый, WebЦвета.ЛососьСветлый);
		Модифицированность = Истина;
	Иначе	
		Объект.СтатусВзаимодействия = ПоследнееСостояниеВзаимодействия;
		Элементы.Состояние.ЦветФона = WebЦвета.Белый;
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	Если Объект.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")
			И Не ЗначениеЗаполнено(Объект.Результат) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Результат"".'"), Объект.Ссылка, "Объект.Результат");
			Объект.СтатусВзаимодействия = ПоследнееСостояниеВзаимодействия;
			Элементы.Состояние.ЦветФона = WebЦвета.Белый;
			Возврат;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Выполнено", Истина);
		СтрокиЗавершено = Объект.ЧекЛист.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗавершено.Количество() = Объект.ЧекЛист.Количество() Тогда
			Объект.ПосещениеПодтверждено = Истина;
			Элементы.Состояние.ЦветФона = WebЦвета.СветлоЗеленый;
			ПоследнееСостояниеВзаимодействия = Объект.СтатусВзаимодействия;
		ИначеЕсли Объект.ЧекЛист.Количество() = 0 Тогда
			Элементы.Состояние.ЦветФона = ?(Объект.ПосещениеПодтверждено, WebЦвета.СветлоЗеленый, WebЦвета.ЛососьСветлый);
			ПоследнееСостояниеВзаимодействия = Объект.СтатусВзаимодействия;
		Иначе
			Если ПроверитьВозможностьЗавершения() Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗавершении", ЭтотОбъект,
					 Новый Структура("ПосещениеПодтверждено",
					 Ложь));
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Не все задачи по чек-листу выполнены. 
				|Завершить взаимодействие ?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				ОбработкаОтветаОЗавершении(КодВозвратаДиалога.Нет,  Новый Структура("ПосещениеПодтверждено", Ложь));	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.Состояние.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Заголовок = СформироватьЗаголовокФормы(Объект.Ссылка, Объект.Тема);
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "ЦветНачалоВыбора"
//
Процедура ЦветНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) И НЕ (Результат = КодВозвратаДиалога.Отмена) Тогда
		Объект.ИндексЦвета = Результат[0].Картинка;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ИндексЦветаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеНовое = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТекущийЦвет", Объект.ИндексЦвета);
	ФормаВыбораЦвета = ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыбораЦвета", ПараметрыФормы, Элемент, , , ,
		ОповещениеНовое, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
КонецПроцедуры // ЦветНачалоВыбора()

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаимодействияПриИзменении(Элемент)
	Если Объект.ЧекЛист.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОСменеВида", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Чек-лист будет очищен. Продолжить ?'"), РежимДиалогаВопрос.ДаНет);
	Иначе	
		ВидВзаимодействияПриИзмененииНаСервере();
		ПоследнийВидВзаимодействия = Объект.ВидВзаимодействия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОСменеВида(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ЧекЛист.Очистить();
		ВидВзаимодействияПриИзмененииНаСервере();
		ПоследнийВидВзаимодействия = Объект.ВидВзаимодействия;
		Модифицированность = Истина;
	Иначе	
		Объект.ВидВзаимодействия = ПоследнийВидВзаимодействия;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ЭтоВстречаЖурнала Тогда
		Если НЕ ПроверитьКорректностьДаты(ДатаНачала, "ДатаНачала") Тогда
			ДатаНачала = Объект.ПлановаяДата;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДлительностьИнтервала = Объект.ПлановаяДатаЗавершение - Объект.ПлановаяДата;
	ПересчитатьДатыВзаимодействияПоДлительности(ДлительностьИнтервала);
	
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;
	
	CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", ДатаНачала);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора_ОбъектАдресат",			Объект.Ссылка);
	ПараметрыОткрытия.Вставить("РежимВыбора_ДатаИВремяНачала",		Объект.ПлановаяДата);
	ПараметрыОткрытия.Вставить("РежимВыбора_ДатаИВремяЗавершения",	Объект.ПлановаяДатаЗавершение);
	ПараметрыОткрытия.Вставить("РежимВыбора_ВесьДень",				Объект.НаВесьДень);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе",				Ложь);
	
	ОткрытьФорму(
		"Обработка.CRM_КалендарьМенеджера.Форма",
		ПараметрыОткрытия,
		Элемент,
		Объект.Ссылка, , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка	= Ложь;
			
			ДатаИВремяНачала	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВыбранноеЗначение.Начало);
			ДатаИВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВыбранноеЗначение.Конец);
			
			ДатаНачала			= ДатаИВремяНачала.Дата;
			ВремяНачала			= ДатаИВремяНачала.Время;
			
			ДатаОкончанияПлан	= ДатаИВремяОкончания.Дата;
			ВремяОкончанияПлан	= ДатаИВремяОкончания.Время;
			
			Объект.ПлановаяДата				= ВыбранноеЗначение.Начало;
			Объект.ПлановаяДатаЗавершение	= ВыбранноеЗначение.Конец;
			
			ДатаНачалаПриИзменении(Элементы.ДатаНачала);
		КонецЕсли;		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		// Осуществляется перенос обеих дат на указанный интервал
		СтандартнаяОбработка	= Ложь;
		ДлительностьИнтервала	= Объект.ПлановаяДатаЗавершение - Объект.ПлановаяДата;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"ДатаНачалаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			БазоваяПлановаяДата				= CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(Объект.ПлановаяДата,
				 ВыбранноеЗначение);
			Объект.ПлановаяДата				= CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(БазоваяПлановаяДата, ВыбранноеЗначение);
			Объект.ПлановаяДатаЗавершение	= Объект.ПлановаяДата + ДлительностьИнтервала;
			
			СкорректироватьДатыВзаимодействия();
			
			Модифицированность = Истина;
		КонецЕсли;
		
		CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ПлановаяДата = Результат;
		Объект.ПлановаяДатаЗавершение = Объект.ПлановаяДата + ДополнительныеПараметры;
		
		СкорректироватьДатыВзаимодействия();
		
		Модифицированность = Истина;
		
		CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ДатаНачалаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	ДлительностьИнтервала = Объект.ПлановаяДатаЗавершение - Объект.ПлановаяДата;
	ПересчитатьДатыВзаимодействияПоДлительности(ДлительностьИнтервала);
	
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;
	
	CRM_ОповещенияКлиент.ПересчитатьДатыОповещений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачала, Элемент, , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбораЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяНачала = ВыбранноеВремя.Значение;
		ВремяНачалаПриИзменении(Элементы.ВремяНачала);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланПриИзменении(Элемент)
	
	Если ЭтоВстречаЖурнала Тогда
		Если НЕ ПроверитьКорректностьДаты(ДатаОкончанияПлан, "ДатаОкончания") Тогда
			ДатаОкончанияПлан = Объект.ПлановаяДатаЗавершение;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтараяДатаЗавершение			= Объект.ПлановаяДатаЗавершение; 
	ДлительностьИнтервала			= Объект.ПлановаяДатаЗавершение - Объект.ПлановаяДата;
	Объект.ПлановаяДатаЗавершение	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан,
		 ВремяОкончанияПлан);
	
	Если НачалоДня(ДатаНачала) > НачалоДня(ДатаОкончанияПлан) Тогда
		Если НачалоДня(СтараяДатаЗавершение) = ДатаНачала Тогда
			ДатаНачала = ДатаОкончанияПлан;
		Иначе	
			ДатаНачала = НачалоДня(ДатаОкончанияПлан - (СтараяДатаЗавершение - Объект.ПлановаяДата));
		КонецЕсли;
		Объект.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончанияПлан) И ВремяНачала > ВремяОкончанияПлан Тогда
		ПересчитатьДатыВзаимодействияПоДлительности(ДлительностьИнтервала);
	КонецЕсли;
	
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланПриИзменении(Элемент)
	СтароеВремяОкончания	= Дата('00010101') + (Объект.ПлановаяДатаЗавершение - НачалоДня(Объект.ПлановаяДатаЗавершение));
	Объект.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан,
		 ВремяОкончанияПлан);
	Если (ДатаНачала = ДатаОкончанияПлан) И (ВремяНачала > ВремяОкончанияПлан) Тогда
		ИнтервалВремени	= (СтароеВремяОкончания - ВремяНачала);
		ВремяНачала		= ВремяОкончанияПлан - ИнтервалВремени;
		Если ВремяНачала > ВремяОкончанияПлан Тогда
			ВремяНачала	= НачалоДня(ВремяОкончанияПлан);
		КонецЕсли;	
	КонецЕсли;
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяОкончанияПланЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончанияПлан, Элемент, , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяОкончанияПлан = ВыбранноеВремя.Значение;
		ВремяОкончанияПланПриИзменении(Элементы.ВремяОкончанияПлан);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодическоеПриИзменении(Элемент)
	
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключенаСинхронизацияКалендаря(Пользователь)
	Возврат CRM_СинхронизацияКалендарей.ВключенаСинхронизацияКалендаря(Пользователь);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦветКалендаря(Пользователь, ИндексЦвета)
	Возврат CRM_СинхронизацияКалендарей.ПолучитьЦветКалендаря(Пользователь, ИндексЦвета);
КонецФункции

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ДобавитьОтветственногоВУчастники();
	ВключенаСинхронизацияКалендаря	= ВключенаСинхронизацияКалендаря(Объект.Ответственный);
	ЦветФонаКалендаря 				= ПолучитьЦветКалендаря(Объект.Ответственный, Объект.ИндексЦвета);
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	Если Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы.Количество() > 0 Тогда 
														// Находится в режиме ввода Контакта из ПК
														// по существующему клиенту
		ЭлементСИдентификатором = Элементы.ГруппаКонтейнерФормРегистрации.ПодчиненныеЭлементы[0];
		CRM_ШаблоныЭлементовФормКлиент.ОбновитьЗначениеРеквизита(ШаблоныЭлементов_Формы[Прав(ЭлементСИдентификатором.Имя,
			 37)],
			"ПереданныйКлиент", Объект.Партнер);
		Возврат;
	КонецЕсли;
	ПартнерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	КонтактноеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПотенциальныйКлиентПриИзменении(Элемент)
	ПотенциальныйКлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	РезультатПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГостиМогутИзменятьМероприятиеПриИзменении(Элемент)
	Если Объект.ГостиМогутИзменятьМероприятие Тогда
		Объект.ГостиМогутПриглашатьДругихГостей = Истина;
		Объект.ГостиМогутВидетьСписокГостей = Истина;
	КонецЕсли;
	Элементы.ГостиМогутПриглашатьДругихГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
	Элементы.ГостиМогутВидетьСписокГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
КонецПроцедуры

&НаКлиенте
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораМеста	= Новый ОписаниеОповещения("ОбработкаВыбораМеста", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораМеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораМеста(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Место = СокрЛП(РезультатВыбора);
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
		Объект.Помещение					= РезультатВыбора;
		Элементы.Место.РедактированиеТекста	= Ложь;
	Иначе
		Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		Элементы.Место.РедактированиеТекста	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
КонецПроцедуры // МестоОчистка()

&НаКлиенте
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Массив = ВернутьПомещенияПоТексту(Текст);
	СписокПодбора = Новый СписокЗначений;
	Для Каждого Стр Из Массив Цикл
		СписокПодбора.Добавить(Стр);		
	КонецЦикла;
	ДанныеВыбора = СписокПодбора;
КонецПроцедуры // МестоАвтоПодбор()

&НаКлиенте
Процедура РядСобытийНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ТекстВопроса = (НСтр(
			"ru='Чтобы изменить расписания ряда событий нужно записать документ.';"
			"en='To change the schedules of a number of events, you need to write a document.'"
		));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписиДокументаПриОткрытииРядаСобытий",
			 ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		Иначе
			ОткрытьФормуРасписания();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВзаимодействияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		 И НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
		Элементы.ОбъектВзаимодействия.Заголовок			= НСтр("ru='Основание'");
		Элементы.ОбъектВзаимодействия.ТолькоПросмотр	= ЗначениеЗаполнено(Объект.ДокументОснование);
	Иначе
		Элементы.ОбъектВзаимодействия.Заголовок			= НСтр("ru='Интерес'");
		Элементы.ОбъектВзаимодействия.ТолькоПросмотр	= Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектВзаимодействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент,
			 УникальныйИдентификатор,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент,
			 УникальныйИдентификатор,
			 ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	
	НастроитьОтображениеКлиентаКонтакта();
	
КонецПроцедуры

#Область Оповещения

&НаКлиенте
// Динамически подключаемый обработчик изменения оповещения.
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	CRM_ОповещенияКлиент.ИзменитьОповещение(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_ОповещениеПриИзменении()

&НаКлиенте
// Динамически подключаемый обработчик удаления оповещения.
//
// Параметры:
//	Команда	- КомандаФормы 	- Команда формы.
//
Процедура Подключаемый_ДобавитьОповещение(Команда)
	CRM_ОповещенияКлиент.ДобавитьОповещение(ЭтотОбъект);
КонецПроцедуры //  Подключаемый_УдалитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик удаления оповещения.
//
// Параметры:
//	Команда	- КомандаФормы 	- Команда формы.
//
Процедура Подключаемый_УдалитьОповещение(Команда)
	CRM_ОповещенияКлиент.УдалитьОповещение(ЭтотОбъект, Команда.Имя);
КонецПроцедуры //  Подключаемый_УдалитьОповещение()

#КонецОбласти

#Область Тэги

&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий,
		 Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыборКатегорий",
		 Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	Объект.Категории.Очистить();
	Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
		НоваяСтрока = Объект.Категории.Добавить();
		НоваяСтрока.Категория = СтрокаКатегория.Значение;
	КонецЦикла;
	Объект.ОсновнаяКатегория	= Результат.ОсновнаяКатегория;
	Объект.ИндексЦвета		    = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ОсновнаяКатегория, "ЦветИндекс");
	Модифицированность			= Истина;
	ОтрисоватьКатегорииНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

 #Область ЧекЛисты

&НаКлиенте
Процедура ЧекЛистПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	ТекЭлемент = Элемент.ТекущийЭлемент;
	Если ТекСтрока <> Неопределено И ТекЭлемент <> Неопределено Тогда
		Если ТекСтрока.ЗаполненоИзШаблона Тогда
			Если ТекЭлемент.Имя = "ЧекЛистВыполнено" Тогда
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Запрещено редактировать эту строку чек-листа'");
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПередУдалением(Элемент, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ЗаполненоИзШаблона Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Запрещено удалять эту строку чек-листа'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СтруктураПоиска = Новый Структура("Выполнено", Истина);
    СтрокиЗавершено = Объект.ЧекЛист.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЗавершено.Количество() = Объект.ЧекЛист.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗавершении", ЭтотОбъект,
			 Новый Структура("ПосещениеПодтверждено",
			 Истина));
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Все задачи по чек-листу выполнены. 
		|Завершить взаимодействие ?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Объект.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		Объект.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
		Объект.ПосещениеПодтверждено = Ложь;
		Элементы.Состояние.ЦветФона = WebЦвета.Белый;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	НайденныеСтроки = Участники.НайтиСтроки(Новый Структура("Участник", ТекущийПользователь));
	ТекущийПользовательУчастник = (НайденныеСтроки.Количество() > 0) ИЛИ (ТекущийПользователь = Объект.Ответственный);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Участники.ТекущиеДанные = ТекущийУчастник Тогда
		Возврат;
	КонецЕсли;
	ТекущийУчастник = Элементы.Участники.ТекущиеДанные;
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаУчастников", 0.01, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Если ТД.Участник = Объект.Ответственный Тогда
			Отказ	= Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Если ТД.Участник = Объект.КонтактноеЛицо Тогда
			Отказ	= Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если ТД.Участник = Объект.Партнер Тогда
			Отказ	= Истина;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ТД.Участник = Объект.ПотенциальныйКлиент Тогда
			Отказ	= Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникПриИзменении(Элемент)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииЛица(ТД);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Возврат;
	КонецЕсли;
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект,
		 Новый Структура("ТекущаяСтрока",
		 ТекущиеДанные));
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ОбъектКонтактнойИнформации", ТекущиеДанные.Участник); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
		 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СписокАдресов.Количество() > 0 Тогда
		СписокАдресов.Удалить(0);
	КонецЕсли;	
	ПоказатьВыборИзСписка(ОповещениеЗавершения, СписокАдресов, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Позвонить(Команда)
	CRM_ВзаимодействияКлиент.CRM_Позвонить(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭлектронногоПисьма(СписокEmail)
	ПараметрыФормы = Новый Структура("Основание",	Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения",		Объект.Ссылка);
	ПараметрыФормы.Вставить("Кому", 				СписокEmail);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуЭлектронногоПисьма(ДополнительныеПараметры.СписокEmail);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОтправитьEmailКлиент(Команда)
	ЕстьОшибки	= Ложь;
	СписокEmail	= Новый СписокЗначений;
	НомерСтроки	= 0;
	Для Каждого СтрокаУчастника Из Участники Цикл
		НомерСтроки	= НомерСтроки + 1;
		Если ПустаяСтрока(СтрокаУчастника.Адрес) Тогда
			Если НомерСтроки = 1 Тогда
				ЕстьОшибки	= Истина;
				ТекстСообщения = НСтр("ru='Не выбран адрес ответственного.';
					|en='Is not specified the e-mail of responsible person.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			ИначеЕсли НомерСтроки = 2 Тогда
				ЕстьОшибки	= Истина;
				ТекстСообщения = НСтр("ru='Не выбран адрес клиента.';en='Is not specified the e-mail of client.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			Иначе
				ЕстьОшибки	= Истина;
				ТекстСообщения = НСтр("ru='Не выбран адрес участника ';en='Is not specified the e-mail of participant '") + "'" 
					+ СтрокаУчастника.Представление 
					+ "'";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;	
		Иначе
			СписокEmail.Добавить(СтрокаУчастника.Участник, СтрокаУчастника.Адрес);
		КонецЕсли;	
	КонецЦикла;
	Если ЕстьОшибки Тогда
		ОповещениеОтвета	= Новый ОписаниеОповещения("ОбработкаСозданияПисьма", ЭтотОбъект,
			 Новый Структура("СписокEmail",
			 СписокEmail));
		ТекстВопроса = НСтр("ru='Найдены незаполненные адреса участников. Продолжить?';
			|en='Empty addresses of participants found. Continue?'");
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ОткрытьФормуЭлектронногоПисьма(СписокEmail);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Контакт = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Объект.ПотенциальныйКлиент, Объект.КонтактноеЛицо);
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо), Объект.КонтактноеЛицо, Объект.Партнер);
	Иначе
		Контакт = Объект.ПотенциальныйКлиент;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(Контакт);
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		КИ	= ЭлементСписка.Значение;
		Прервать;
	КонецЦикла;
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	ИначеЕсли Не CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Контакт);
	Структура.Вставить("Телефон",	КИ);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.ДокументОснование);	
	Иначе
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);	
	КонецЕсли;
	ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМС()

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	ДанныеВзаимодействия = Новый Структура;
	ДанныеВзаимодействия.Вставить("Тема", Объект.Тема);
	ДанныеВзаимодействия.Вставить("Партнер", Объект.Партнер);
	ДанныеВзаимодействия.Вставить("ПотенциальныйКлиент", Объект.ПотенциальныйКлиент);
	ДанныеВзаимодействия.Вставить("КонтактноеЛицо", Объект.КонтактноеЛицо);
	ДанныеВзаимодействия.Вставить("Организация", Объект.Организация);
	ДанныеВзаимодействия.Вставить("ВидВзаимодействия", Объект.ВидВзаимодействия);
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
		ДанныеВзаимодействия.Вставить("ДокументОснование", Объект.ДокументОснование);
	КонецЕсли;
	ПараметрыФормы.Вставить("ДанныеВзаимодействия", ДанныеВзаимодействия);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ОчиститьСообщения();
		Если ПроверитьЗаполнение() Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	УдалитьВзаимодействиеИзКалендаря();
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	МассивКлиентовКонтактов = Новый Массив;
	Для каждого СторЛиц Из Объект.СторонниеЛица Цикл
		Если ЗначениеЗаполнено(СторЛиц.Партнер) Тогда
			МассивКлиентовКонтактов.Добавить(СторЛиц.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СторЛиц.КонтактноеЛицо) Тогда
			МассивКлиентовКонтактов.Добавить(СторЛиц.КонтактноеЛицо);
		КонецЕсли;
	КонецЦикла;
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач,
		 Новый Структура("Источник", ЭтотОбъект), ,
		 МассивКлиентовКонтактов);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМесто(Команда)
	ДополнительныеПараметры		= Новый Структура;
	ОписаниеПодбораМеста		= Новый ОписаниеОповещения("ОбработкаПодбораМеста", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Место",							Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачала + (ВремяНачала - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончанияПлан + (ВремяОкончанияПлан - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , ,
		 ОписаниеПодбораМеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМеста(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
			Если НЕ ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
				Продолжить;
			КонецЕсли;
			Если (МинимальнаяВыбраннаяДата = Неопределено)
				 ИЛИ (МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода) Тогда
				МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
			КонецЕсли;
			Если (МаксимальнаяВыбраннаяДата = Неопределено)
				 ИЛИ (МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода) Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
			КонецЕсли;
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				Объект.Место		= СокрЛП(ДобавляемоеПомещение.Помещение);
				Объект.Помещение	= ДобавляемоеПомещение.Помещение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
			ДатаНачала		= ДатаВремя.Дата;
			ДатаНачалаПриИзменении(Неопределено);
			ВремяНачала		= ДатаВремя.Время;
			ВремяНачалаПриИзменении(Неопределено);
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
			ДатаОкончанияПлан	= ДатаВремя.Дата;
			ДатаОкончанияПланПриИзменении(Неопределено);
			ВремяОкончанияПлан	= ДатаВремя.Время;
			ВремяОкончанияПланПриИзменении(Неопределено);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораМеста()

&НаКлиенте
Процедура ДобавитьУчастника(Команда)
	ПараметрыФормы = Новый Структура;
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораУчастника", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаВыбораКонтакта", ПараметрыФормы, ЭтотОбъект, ,
		 , , ОповещениеЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	ПараметрыФормы.Вставить("КонтактноеЛицо", Объект.КонтактноеЛицо);
	ПараметрыФормы.Вставить("РежимДоступа", 0);
	СкрываемыеПользователи = Новый СписокЗначений;
	СкрываемыеПользователи.Добавить(Объект.Ответственный);
	ПараметрыФормы.Вставить("СкрываемыеПользователи", СкрываемыеПользователи);
	ОповещениеЗавершения	= Новый ОписаниеОповещения("ОбработкаВыбораУчастника", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОповещениеЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораУчастника", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОписаниеВыбораФизЛица,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиСотрудниками(Команда)
	ОбработкаВыбора(Новый Структура, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	ПодразделенияСУчетомИерархии = Истина;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		Если Участники.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список участников?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если Участники.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список участников?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Участники.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;												
		КонецЕсли;
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда	
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Участники.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;												
		КонецЕсли;
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия")
		 Или ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда		
		мПользователи = ПолучитьПользователейПодразделения(ВыбранноеЗначение);
		Для Каждого Пользователь Из мПользователи Цикл
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель					= Участники.Добавить();
				СтрокаПолучатель.Участник 			= Пользователь;
				СтрокаПолучатель.Представление		= СтрокаПолучатель.Участник.Наименование;
				СтрокаПолучатель.ПосетитМероприятие = 2;
				СтруктураПоиска = Новый Структура("ОбъектКонтактнойИнформации", СтрокаПолучатель.Участник); 
				СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
				Если СписокАдресов.Количество() > 0 Тогда
					ЕстьДляОповещений = Ложь;
					Для Каждого ЭлементСписка Из СписокАдресов Цикл
						Если ЭлементСписка.Пометка Тогда
							Адрес = ЭлементСписка.Значение;
							Если Адрес.Количество() = 0 Тогда
								СтрокаПолучатель.Адрес	= "";
							Иначе	
								СтрокаПолучатель.Адрес	= Адрес.Представление;
							КонецЕсли;
							ЕстьДляОповещений = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЕстьДляОповещений Тогда
						Адрес = СписокАдресов[0].Значение;
						Если Адрес.Количество() = 0 Тогда
							СтрокаПолучатель.Адрес		= "";
						Иначе	
							СтрокаПолучатель.Адрес		= Адрес.Представление;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаПолучатель.Адрес				= "";
				КонецЕсли;
				ВыбранноеУчастие = "МожетБыть";
				ЭлементРодитель = Элементы.УчастникиПосещениеМероприятия;
				ПрефиксИмени = "Участники";
				Для Каждого ТекЭлемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
					ТекЭлемент.Пометка = (ТекЭлемент.Имя = (ПрефиксИмени + ВыбранноеУчастие));
				КонецЦикла;	
			КонецЕсли;				
		КонецЦикла;			
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователейПодразделения(Подразделение)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникПользователи.Ссылка КАК Ссылка,
	               |	СправочникПользователи.ПометкаУдаления КАК ПометкаУдаления,
	               |	СправочникПользователи.Предопределенный КАК Предопределенный,
	               |	СправочникПользователи.Наименование КАК Наименование,
	               |	СправочникПользователи.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Пользователи КАК СправочникПользователи
	               |ГДЕ
	               |	НЕ СправочникПользователи.ПометкаУдаления
	               |	И СправочникПользователи.Подразделение В(&Подразделение)
	               |	И НЕ СправочникПользователи.Недействителен
	               |	И НЕ СправочникПользователи.Служебный";	 
	Если ТипЗнч(Подразделение) = Тип("Структура") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СправочникПользователи.Подразделение В(&Подразделение)", "");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "В(&Подразделение)", "В ИЕРАРХИИ(&Подразделение)");
	КонецЕсли;	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораУчастника(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока					= Участники.Добавить();
	НоваяСтрока.Участник		= РезультатВыбора;
	НоваяСтрока.Представление	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Участник, "Наименование");
	Если ТипЗнч(НоваяСтрока.Участник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Владелец	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Участник, "Владелец");
		НоваяСтрока.Представление	= НоваяСтрока.Представление + " (" 
			+ CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Владелец, "Наименование") + ")";
	КонецЕсли;
	ПриИзмененииЛица(НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастиеВМероприятии(Команда)
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрНайти(Команда.Имя, "Да") Тогда
		ТекущиеДанные.ПосетитМероприятие = 1;
	ИначеЕсли СтрНайти(Команда.Имя, "МожетБыть") Тогда
		ТекущиеДанные.ПосетитМероприятие = 2;
	ИначеЕсли СтрНайти(Команда.Имя, "Нет") Тогда
		ТекущиеДанные.ПосетитМероприятие = 0;
	КонецЕсли;
	УстановитьПометкуУчастия();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	МассивУчастников			= ПолучитьМассивУчастников();
	ДополнительныеПараметры		= Новый Структура("МассивУчастников", МассивУчастников);
	ОписаниеПодбораУчастников	= Новый ОписаниеОповещения("ОбработкаПодбораУчастников", ЭтотОбъект,
		 ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",						МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачала + (ВремяНачала - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончанияПлан + (ВремяОкончанияПлан - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , ,
		 ОписаниеПодбораУчастников);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораУчастников(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если Не ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	МинимальнаяВыбраннаяДата	= Неопределено;
	МаксимальнаяВыбраннаяДата	= Неопределено;
	МассивВыбранныеПользователи	= Новый Массив();
	Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
		МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
		Если Участники.НайтиСтроки(Новый Структура("Участник", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
			НоваяСтрока = Участники.Добавить();
			НоваяСтрока.Участник		= ДобавляемыйПользователь.Пользователь;
			НоваяСтрока.Представление	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Участник,
				 "Наименование");
			ПриИзмененииЛица(НоваяСтрока);
		КонецЕсли;
		Если МинимальнаяВыбраннаяДата = Неопределено
			 Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
			МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
		КонецЕсли;
		Если МаксимальнаяВыбраннаяДата = Неопределено
			 Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
			МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйПользователь Из ДополнительныеПараметры.МассивУчастников Цикл
		Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
			НайденныеСтроки = Участники.НайтиСтроки(Новый Структура("Участник", УдаляемыйПользователь));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Участники.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
		ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
		ДатаНачало		= ДатаВремя.Дата;
		ВремяНачало		= ДатаВремя.Время;
		ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
		ДатаОкончание	= ДатаВремя.Дата;
		ВремяОкончание	= ДатаВремя.Время;
		ДатаНачалаПриИзменении(Неопределено);
		ВремяНачалаПриИзменении(Неопределено);
		ДатаОкончанияПланПриИзменении(Неопределено);
		ВремяОкончанияПланПриИзменении(Неопределено);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Создать_Клиента(Команда)
	// ШаблоныЭлементовФорм
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("Ответственный, ПотенциальныйКлиент", Объект.Ответственный, Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры
	
&НаКлиенте
Процедура Создать_Контакт(Команда)
	
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;
	Элементы.ГруппаКлиентКонтакт.Видимость = Истина; // отобразить поле выбора партнера
	Элементы.ГруппаКонтакт.Видимость = Ложь;
	Элементы.Партнер.АвтоОтметкаНезаполненного = Истина;
	
	// ШаблоныЭлементовФорм
	ОписаниеОповещения = Новый ОписаниеОповещения("СозданиеКлиентаЗавершение", ЭтотОбъект);
	ШаблоныЭлементов_СоздатьЭлементы("Обработка.CRM_СлужебнаяШаблоныЭлементовФорм.Форма.ШаблонСозданиеКлиентаИКонтакта",
		Новый Структура("ПотенциальныйКлиент, ТолькоКонтакт", Объект.ПотенциальныйКлиент), ОписаниеОповещения, "ГруппаКонтейнерФормРегистрации");
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияКалендарей

&НаКлиенте
Процедура ОткрытьВКалендаре(Команда)
	Если ЗначениеЗаполнено(ГиперссылкаВКалендаре) Тогда
		ПерейтиПоНавигационнойСсылке(ГиперссылкаВКалендаре);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьСкрытьУчастников(Команда)
	НастроитьОтображениеСпискаУчастников(ЭтотОбъект, Элементы.ГруппаУчастники.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьЧекЛист(Команда)
	НастроитьОтображениеЧекЛиста(ЭтотОбъект, Элементы.ГруппаЧекЛист.Видимость);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаОповещенияВопросОЗаписиДокументаПриОткрытииРядаСобытий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуРасписанияПослеЗаписи = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещенияВопросОЗаписиДокументаПриОткрытииРядаСобытий()

&НаСервереБезКонтекста
Функция ПолучитьСтарыеЗначенияРеквизитовДокумента(СсылкаНаДокумент)
	
	Возврат Новый Структура(
		"Тема, ПлановаяДата, ПлановаяДатаЗавершение",
		СсылкаНаДокумент.Тема,
		СсылкаНаДокумент.ПлановаяДата,
		СсылкаНаДокумент.ПлановаяДатаЗавершение
	);
	
КонецФункции // ПолучитьСтарыеЗначенияРеквизитовДокумента()

&НаКлиенте
Процедура ПодтвердитьПосещение(Команда)
	ОписаниеМетки = ПолучитьОписаниеМетки(Объект.АдресОфиса);
	Объект.ДолготаЗавершенияВстречи = ОписаниеМетки.Долгота;
	Объект.ШиротаЗавершенияВстречи = ОписаниеМетки.Широта;
	Объект.ПосещениеПодтверждено = Истина;
	Объект.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
	Элементы.Состояние.ЦветФона = WebЦвета.СветлоЗеленый;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьЗавершения()
	СтруктураПоиска = Новый Структура("Выполнено", Ложь);
	СтрокиНЕЗавершено = Объект.ЧекЛист.НайтиСтроки(СтруктураПоиска);
	МожноЗавершить = Истина;
	Для Каждого СтрокаЧЛ Из СтрокиНЕЗавершено Цикл
		Если СтрокаЧЛ.Обязательный Тогда
			МожноЗавершить = Ложь;
		КонецЕсли;	
	КонецЦикла;
	Если НЕ МожноЗавершить Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выполнены обязательные пункты чек-листа. 
		|Завершить взаимодействие невозможно'");
		Сообщение.Сообщить();
	КонецЕсли;	
	Возврат МожноЗавершить;
КонецФункции

&НаСервере
Функция ПроверитьКорректностьДаты(ДатаПроверки, ТипДаты)
	Если ТипДаты = "ДатаНачала" Тогда
		Если ДатаПроверки < Объект.ДокументОснование.ДатаНачала Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Дата начала должна входить в планируемый период ('") 
				+ ПредставлениеПериода(Объект.ДокументОснование.ДатаНачала, КонецНедели(Объект.ДокументОснование.ДатаНачала)) 
				+ ")";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	Если ТипДаты = "ДатаОкончания" Тогда
		Если ДатаПроверки > КонецНедели(Объект.ДокументОснование.ДатаНачала) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Дата окончания должна входить в планируемый период ('") 
				+ ПредставлениеПериода(Объект.ДокументОснование.ДатаНачала, КонецНедели(Объект.ДокументОснование.ДатаНачала)) 
				+ ")";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	Возврат Истина;
КонецФункции	

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.Партнер.МаксимальнаяШирина = 13;
	Иначе
		Элементы.Партнер.МаксимальнаяШирина = 36;
	КонецЕсли;
	
	ТипКлиента = CRM_КлиентыСервер.ПолучитьТипКлиента("БизнесПроцессы",
		Объект.Партнер, Объект.ПотенциальныйКлиент, CRM_ИспользоватьПотенциальныхКлиентов);
	
	ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДата);
	ДатаНачала = ДатаИВремя.Дата;
	ВремяНачала = ДатаИВремя.Время;
	ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
	ДатаОкончанияПлан = ДатаИВремя.Дата;
	ВремяОкончанияПлан = ДатаИВремя.Время;
	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	ТекущиеПользователи.ЗагрузитьЗначения(РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь));
	МассивРуководителей	= CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Объект.Ответственный);
	ЭтоПолноправныйПользователь = (РольДоступна("ПолныеПрава")
		 ИЛИ РольДоступна("CRM_ПросмотрЗадачДругихПользователейВКалендаре") 
		ИЛИ (ТекущиеПользователи.НайтиПоЗначению(Объект.Автор) <> Неопределено)
			 ИЛИ (ТекущиеПользователи.НайтиПоЗначению(Объект.Ответственный) <> Неопределено)
		ИЛИ НЕ (МассивРуководителей.Найти(ТекущийПользователь) = Неопределено));
	НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь));
	ТекущийПользовательУчастник = (НайденныеСтроки.Количество() > 0) ИЛИ (ТекущийПользователь = Объект.Ответственный);
	// Проверку доступности синхронизации производим по ответственному.
	ВключенаСинхронизацияКалендаря	= ВключенаСинхронизацияКалендаря(Объект.Ответственный);
	ЦветФонаКалендаря				= ПолучитьЦветКалендаря(Объект.Ответственный, Объект.ИндексЦвета);
	ИспользоватьКатегорииВзаимодействий	= Константы.CRM_ИспользоватьКатегорииВзаимодействий.Получить();
	Элементы.ГруппаКатегории.Видимость	= (ИспользоватьКатегорииВзаимодействий = Истина);
	ВключеныТеги						= ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги")
		 И (Константы.CRM_ИспользоватьТегиДляВзаимодействий.Получить() = Истина);
	Элементы.ОблакоТегов.Видимость		= ВключеныТеги;
	Если ВключеныТеги Тогда
		ОбновитьОблакоТегов();
	КонецЕсли;
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьДляСинхронизации");
	Если ЗначениеЗаполнено(Календарь) Тогда
		СервисКалендарей = Календарь.СервисКалендарей;
	Иначе
		СервисКалендарей = Неопределено;
	КонецЕсли;
	ДанныеЗаписиКалендаря = РегистрыСведений.CRM_СобытияКалендаря.ИдентификаторыПоСобытиюКалендаря(Объект.Ссылка,
		 ТекущийПользователь);
	ГиперссылкаВКалендаре = ДанныеЗаписиКалендаря.Гиперссылка;
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.ДатаРегистрации, "ДФ=d.MM.yyyy") + " " 
		+ НСтр("ru='в';en='in'") + " " + Формат(Объект.ДатаРегистрации,
		 "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		СтарыйКлиент	= Объект.КонтактноеЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		СтарыйКлиент	= Объект.Партнер;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		СтарыйКлиент	= Объект.ПотенциальныйКлиент;
	КонецЕсли;
	НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьИДоступностьФормы()
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		 И НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
		Элементы.ОбъектВзаимодействия.Заголовок			= НСтр("ru='Основание'");
		Элементы.ОбъектВзаимодействия.ТолькоПросмотр	= ЗначениеЗаполнено(Объект.ДокументОснование);
	Иначе
		Элементы.ОбъектВзаимодействия.Заголовок			= НСтр("ru='Интерес'");
		Элементы.ОбъектВзаимодействия.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
	Элементы.ВремяОкончанияПлан.Видимость = (НЕ Объект.НаВесьДень);
	Элементы.ВремяНачала.Видимость    = (НЕ Объект.НаВесьДень);
	Элементы.ВремяОкончанияПлан.Видимость = (НЕ Объект.НаВесьДень);
	// видимость расписания
	Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое И Не Объект.ИзмененоВРяде;
	Если Элементы.РядСобытийНаименование.Видимость Тогда
		Элементы.Периодическое.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое
			 И ЗначениеЗаполнено(Объект.РядСобытий)
			 И Не Объект.ИзмененоВРяде);
	КонецЕсли;
	
	НастроитьОтображениеКлиентаКонтакта();
	
	Элементы.ОблакоТегов.Видимость			= ВключеныТеги;
	Элементы.ГруппаДатаЗавершения.Видимость	= НЕ (Объект.ДатаЗавершенияВзаимодействия = Дата('00010101'));
	Элементы.ИндексЦвета.Видимость			= НЕ ВключенаСинхронизацияКалендаря;
	Элементы.ИндексЦвета.Доступность		= ЭтоПолноправныйПользователь;
	Элементы.ЦветФонаКалендаря.Видимость	= ВключенаСинхронизацияКалендаря;
	Элементы.ЦветФонаКалендаря.ЦветТекста	= ЦветФонаКалендаря;
	Элементы.УстановитьНовогоОтветственного.Доступность	= ЭтоПолноправныйПользователь;
	Элементы.ВложенияПредставление.Доступность			= ЭтоПолноправныйПользователь;
	Если НЕ (Элементы.Найти("ЗапуститьПроизвольныйБизнесПроцесс") = Неопределено) Тогда
		Элементы.ЗапуститьПроизвольныйБизнесПроцесс.Доступность	= ЭтоПолноправныйПользователь;
	КонецЕсли;	
	Элементы.ДекорацияВыбратьГруппу.Доступность				= ЭтоПолноправныйПользователь;
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование)
		 Или Не (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
		Элементы.ПринятьОбращение.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
		Элементы.ГруппаМесто.Видимость							= Истина;
		Элементы.ГруппаУчастники.Видимость						= Истина;
		Элементы.УчастникиОтправитьEmail.Видимость				= Истина;
		Элементы.УчастникиОткрытьВКалендаре.Видимость 			= ЗначениеЗаполнено(ГиперссылкаВКалендаре);
		Элементы.РассылатьУведомлениПриИзменении.Видимость		= Ложь;
		Элементы.РассылатьУведомлениПриИзменении.Доступность	= Ложь;
		Элементы.ДекорацияУчастникиМогут.Видимость				= Ложь;
		Элементы.ГруппаПраваГостей.Видимость					= Ложь;
		Элементы.ГостиМогутИзменятьМероприятие.Доступность		= Ложь;
		Элементы.ГостиМогутПриглашатьДругихГостей.Доступность	= Ложь;
		Элементы.ГостиМогутВидетьСписокГостей.Доступность		= Ложь;
		Элементы.УчастникиГруппаДобавить.Видимость				= Ложь;
		Элементы.УчастникиМенюДобавить.Видимость				= Ложь;
		Элементы.УчастникиПодобрать.Видимость					= Ложь;
		Элементы.УчастникиМенюПодобрать.Видимость				= Ложь;
		Элементы.ПодобратьМесто.Доступность						= Ложь;
		Если ЭтоПолноправныйПользователь Тогда	
			Элементы.РассылатьУведомлениПриИзменении.Видимость		= ВключенаСинхронизацияКалендаря;
			Элементы.РассылатьУведомлениПриИзменении.Доступность	= ВключенаСинхронизацияКалендаря;
			Элементы.ДекорацияУчастникиМогут.Видимость				= ВключенаСинхронизацияКалендаря;
			Элементы.ГруппаПраваГостей.Видимость					= ВключенаСинхронизацияКалендаря;
			Элементы.ГостиМогутИзменятьМероприятие.Доступность		= ВключенаСинхронизацияКалендаря;
			Элементы.ГостиМогутПриглашатьДругихГостей.Доступность	= ВключенаСинхронизацияКалендаря;
			Элементы.ГостиМогутВидетьСписокГостей.Доступность		= ВключенаСинхронизацияКалендаря;
			Элементы.УчастникиГруппаДобавить.Видимость			= Истина;
			Элементы.УчастникиМенюДобавить.Видимость			= Истина;
			Элементы.УчастникиПодобрать.Видимость				= Истина;
			Элементы.УчастникиМенюПодобрать.Видимость			= Истина;
			Элементы.ПодобратьМесто.Доступность					= Истина;
		ИначеЕсли ВключенаСинхронизацияКалендаря Тогда
			Элементы.РассылатьУведомлениПриИзменении.Видимость	= Истина;
			Элементы.ДекорацияУчастникиМогут.Видимость			= Истина;
			Элементы.ГруппаПраваГостей.Видимость				= Истина;
			Если Объект.ГостиМогутИзменятьМероприятие Тогда
				Элементы.УчастникиГруппаДобавить.Видимость		= Истина;
				Элементы.УчастникиМенюДобавить.Видимость		= Истина;
				Элементы.УчастникиПодобрать.Видимость			= Истина;
				Элементы.УчастникиМенюПодобрать.Видимость		= Истина;
			ИначеЕсли Объект.ГостиМогутПриглашатьДругихГостей Тогда
				Элементы.УчастникиГруппаДобавить.Видимость		= Истина;
				Элементы.УчастникиМенюДобавить.Видимость		= Истина;
				Элементы.УчастникиПодобрать.Видимость			= Истина;
				Элементы.УчастникиМенюПодобрать.Видимость		= Истина;
				Элементы.ГруппаФормаЛевая.ТолькоПросмотр		= Истина;
				Элементы.ГруппаЧекЛист.ТолькоПросмотр			= Истина;
			ИначеЕсли Объект.ГостиМогутВидетьСписокГостей Тогда
				Элементы.ГруппаШапка.ТолькоПросмотр				= Истина;
				Элементы.ГруппаФорма.ТолькоПросмотр				= Истина;
			Иначе	
				Элементы.ГруппаУчастники.Видимость				= Ложь;
				Элементы.ГруппаШапка.ТолькоПросмотр				= Истина;
				Элементы.ГруппаФорма.ТолькоПросмотр				= Истина;
			КонецЕсли;
		Иначе
			Элементы.РассылатьУведомлениПриИзменении.Видимость	= Ложь;
			Элементы.ДекорацияУчастникиМогут.Видимость			= Ложь;
			Элементы.ГруппаПраваГостей.Видимость				= Ложь;
			Элементы.ГруппаШапка.ТолькоПросмотр					= Истина;
			Элементы.ГруппаФорма.ТолькоПросмотр					= Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаМесто.Видимость			= Ложь;
		Элементы.ГруппаУчастники.Видимость		= Ложь;
		Если НЕ ЭтоПолноправныйПользователь Тогда
			ТолькоПросмотр						= Истина;
			Элементы.ГруппаШапка.ТолькоПросмотр	= Истина;
			Элементы.ГруппаФорма.ТолькоПросмотр	= Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // НастроитьВидимостьИДоступностьФормы()

&НаСервере
Процедура ВидВзаимодействияПриИзмененииНаСервере()
	
	Объект.Баллы = Объект.ВидВзаимодействия.Баллы;
	Объект.СостояниеИнтереса = Объект.ВидВзаимодействия.СостояниеИнтереса;
	
	Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = Объект.ВидВзаимодействия.Тема;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Содержание) Тогда
		Объект.Содержание = Объект.ВидВзаимодействия.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидВзаимодействия.ДлительностьВстречиПоУмолчанию) Тогда
		КоличествоСекундВМинуте = 60;
		
		Объект.ПлановаяДатаЗавершение = Объект.ПлановаяДата 
			+ Объект.ВидВзаимодействия.ДлительностьВстречиПоУмолчанию * КоличествоСекундВМинуте;
		
		ОкончаниеВзаимодействияДатаИВремя =
			CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
		
		ВремяОкончанияПлан	= ОкончаниеВзаимодействияДатаИВремя.Время;
		ДатаОкончанияПлан	= ОкончаниеВзаимодействияДатаИВремя.Дата;
	КонецЕсли;
	
	ЗаполнитьЧекЛистНаСервере();
	НастроитьВидимостьИДоступностьФормы();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьЧекЛистНаСервере()
	Если ЗначениеЗаполнено(Объект.ВидВзаимодействия.ШаблонЧекЛиста) Тогда
		ШаблонЧекЛиста = Объект.ВидВзаимодействия.ШаблонЧекЛиста;
		Объект.ЧекЛист.Очистить();
		Для Каждого Строка Из ШаблонЧекЛиста.ЧекЛист Цикл
			Стр = Объект.ЧекЛист.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Строка);
			Стр.ЗаполненоИзШаблона = Истина;
		КонецЦикла;	
	КонецЕсли;
	Элементы.ГруппаЧекЛист.Видимость = (Объект.ЧекЛист.Количество() > 0);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере(ПартнерТотЖе = Ложь)
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер,
		 "ГруппаКИКлиента",
		 СписокТиповКИ.ВыгрузитьЗначения());
		 
	ЗаменитьКонтактноеЛицо = Истина;
	Если ПартнерТотЖе И Объект.КонтактноеЛицо <> Объект.Партнер.CRM_ОсновноеКонтактноеЛицо Тогда
		КонтактныеЛицаПартнера = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Объект.Партнер);
		Если КонтактныеЛицаПартнера.Найти(Объект.КонтактноеЛицо) <> Неопределено Тогда
			ЗаменитьКонтактноеЛицо = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗаменитьКонтактноеЛицо Тогда
		Объект.КонтактноеЛицо = Объект.Партнер.CRM_ОсновноеКонтактноеЛицо;
		КонтактноеЛицоПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтветственногоВУчастники()
	Пользователей = 0;
	Для каждого Строка Из Участники Цикл
		Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			Пользователей = Пользователей + 1;
			Строка.Представление = Строка.Участник.Наименование;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Если Пользователей = 1 Тогда
			НоваяСтрока	= Участники[0];
		Иначе
			Строки = Участники.НайтиСтроки(Новый Структура("Участник", Объект.Ответственный));
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока	= Участники.Вставить(0);
			Иначе
				НоваяСтрока	= Строки[0];
			КонецЕсли;
		КонецЕсли;	
		НоваяСтрока.ПосетитМероприятие	= 1;
		НоваяСтрока.Участник			= Объект.Ответственный;
		НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование + " (ответственный)";
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект.Ответственный,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НоваяСтрока.Адрес	= КонтактнаяИнформация[0].Представление;
		Иначе	
			НоваяСтрока.Адрес	= "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ДобавитьКлиентаВУчастники()
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", Объект.КонтактноеЛицо));
		Если МассивСтрок.Количество() > 0 Тогда
			Участники.Удалить(МассивСтрок[0]);
		КонецЕсли;	
		Если Участники.Количество() > 1 Тогда
			НоваяСтрока	= Участники[1];
			Если НЕ (НоваяСтрока.Участник = СтарыйКлиент) Тогда
				НоваяСтрока	= Участники.Вставить(1);
			КонецЕсли;	
		Иначе
			НоваяСтрока	= Участники.Добавить();
		КонецЕсли;	
		НоваяСтрока.ПосетитМероприятие	= 1;
		НоваяСтрока.Участник		= Объект.КонтактноеЛицо;
		УстановитьПривилегированныйРежим(Истина);
		НоваяСтрока.Представление	= НоваяСтрока.Участник.Наименование + " (" 
			+ НоваяСтрока.Участник.Владелец.Наименование 
			+ ")";
		УстановитьПривилегированныйРежим(Ложь);
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект.КонтактноеЛицо,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НоваяСтрока.Адрес	= КонтактнаяИнформация[0].Представление;
		Иначе	
			НоваяСтрока.Адрес	= "";
		КонецЕсли;
		СтарыйКлиент	= НоваяСтрока.Участник;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", Объект.Партнер));
		Если МассивСтрок.Количество() > 0 Тогда
			Участники.Удалить(МассивСтрок[0]);
		КонецЕсли;	
		Если Участники.Количество() > 1 Тогда
			НоваяСтрока	= Участники[1];
			Если НЕ (НоваяСтрока.Участник = СтарыйКлиент) Тогда
				НоваяСтрока	= Участники.Вставить(1);
			КонецЕсли;	
		Иначе
			НоваяСтрока	= Участники.Добавить();
		КонецЕсли;	
		НоваяСтрока.ПосетитМероприятие	= 1;
		НоваяСтрока.Участник		= Объект.Партнер;
		УстановитьПривилегированныйРежим(Истина);
		НоваяСтрока.Представление	= НоваяСтрока.Участник.Наименование;
		УстановитьПривилегированныйРежим(Ложь);
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект.Партнер,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НоваяСтрока.Адрес	= КонтактнаяИнформация[0].Представление;
		Иначе	
			НоваяСтрока.Адрес	= "";
		КонецЕсли;
		СтарыйКлиент	= НоваяСтрока.Участник;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если Участники.Количество() > 1 Тогда
			НоваяСтрока	= Участники[1];
			Если НЕ (НоваяСтрока.Участник = СтарыйКлиент) Тогда
				НоваяСтрока	= Участники.Вставить(1);
			КонецЕсли;	
		Иначе
			НоваяСтрока	= Участники.Добавить();
		КонецЕсли;	
		НоваяСтрока.ПосетитМероприятие	= 1;
		НоваяСтрока.Участник			= Объект.ПотенциальныйКлиент;
		УстановитьПривилегированныйРежим(Истина);
		НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование;
		Если НЕ ПустаяСтрока(НоваяСтрока.Участник.Организация) Тогда
			НоваяСтрока.Представление		= НоваяСтрока.Представление + " (" + НоваяСтрока.Участник.Организация + ")";
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Объект.ПотенциальныйКлиент,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		Если КонтактнаяИнформация.Количество() > 0 Тогда
			НоваяСтрока.Адрес	= КонтактнаяИнформация[0].Представление;
		Иначе	
			НоваяСтрока.Адрес	= "";
		КонецЕсли;
		СтарыйКлиент	= НоваяСтрока.Участник;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьУчастников()
	Участники.Очистить();
	ДобавитьОтветственногоВУчастники();
	ДобавитьКлиентаВУчастники();
	Для Каждого СтрокаУчастника Из Объект.СвоиЛица Цикл
		Если ЗначениеЗаполнено(Объект.Ответственный) И (СтрокаУчастника.Лицо = Объект.Ответственный) Тогда
			Продолжить;
		КонецЕсли;	
		МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", СтрокаУчастника.Лицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока						= Участники.Добавить();
			НоваяСтрока.Участник			= СтрокаУчастника.Лицо;
			НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование;
			НоваяСтрока.Адрес				= СтрокаУчастника.Адрес;
			НоваяСтрока.ПосетитМероприятие	= СтрокаУчастника.ПосетитМероприятие;
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаУчастника Из Объект.СторонниеЛица Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.КонтактноеЛицо) Тогда
			Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И (СтрокаУчастника.КонтактноеЛицо = Объект.КонтактноеЛицо) Тогда
				Продолжить;
			КонецЕсли;	
			МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", СтрокаУчастника.КонтактноеЛицо));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока						= Участники.Добавить();
				НоваяСтрока.Участник			= СтрокаУчастника.КонтактноеЛицо;
				НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование + " (" 
					+ НоваяСтрока.Участник.Владелец.Наименование 
					+ ")";
				НоваяСтрока.Адрес				= СтрокаУчастника.Адрес;
				НоваяСтрока.ПосетитМероприятие	= СтрокаУчастника.ПосетитМероприятие;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаУчастника.Партнер) Тогда
			Если ЗначениеЗаполнено(Объект.Партнер) И (СтрокаУчастника.Партнер = Объект.Партнер) Тогда
				Продолжить;
			КонецЕсли;	
			МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", СтрокаУчастника.Партнер));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока						= Участники.Добавить();
				НоваяСтрока.Участник			= СтрокаУчастника.Партнер;
				НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование;
				НоваяСтрока.Адрес				= СтрокаУчастника.Адрес;
				НоваяСтрока.ПосетитМероприятие	= СтрокаУчастника.ПосетитМероприятие;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаУчастника.ПотенциальныйКлиент) Тогда
			Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент)
				 И (СтрокаУчастника.ПотенциальныйКлиент = Объект.ПотенциальныйКлиент) Тогда
				Продолжить;
			КонецЕсли;	
			МассивСтрок	= Участники.НайтиСтроки(Новый Структура("Участник", СтрокаУчастника.Партнер));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока						= Участники.Добавить();
				НоваяСтрока.Участник			= СтрокаУчастника.ПотенциальныйКлиент;
				НоваяСтрока.Представление		= НоваяСтрока.Участник.Наименование;
				НоваяСтрока.Адрес				= СтрокаУчастника.Адрес;
				НоваяСтрока.ПосетитМероприятие	= СтрокаУчастника.ПосетитМероприятие;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура СохранитьУчастников()
	Объект.СвоиЛица.Очистить();
	Объект.СторонниеЛица.Очистить();
	Для Каждого СтрокаУчастника Из Участники Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивСтрок	= Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", СтрокаУчастника.Участник));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока			= Объект.СвоиЛица.Добавить();
				НоваяСтрока.Лицо	= СтрокаУчастника.Участник;
			Иначе
				НоваяСтрока	= МассивСтрок[0];
			КонецЕсли;	
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивСтрок	= Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", СтрокаУчастника.Участник));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока			= Объект.СвоиЛица.Добавить();
				НоваяСтрока.Лицо	= СтрокаУчастника.Участник;
			Иначе
				НоваяСтрока	= МассивСтрок[0];
			КонецЕсли;	
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			МассивСтрок	= Объект.СторонниеЛица.НайтиСтроки(Новый Структура("КонтактноеЛицо", СтрокаУчастника.Участник));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока					= Объект.СторонниеЛица.Добавить();
				НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.Участник;
				УстановитьПривилегированныйРежим(Истина);
				НоваяСтрока.Партнер			= СтрокаУчастника.Участник.Владелец;
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				НоваяСтрока	= МассивСтрок[0];
			КонецЕсли;	
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Партнеры") Тогда
			МассивСтрок	= Объект.СторонниеЛица.НайтиСтроки(Новый Структура("Партнер", СтрокаУчастника.Участник));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока			= Объект.СторонниеЛица.Добавить();
				НоваяСтрока.Партнер	= СтрокаУчастника.Участник;
			Иначе
				НоваяСтрока	= МассивСтрок[0];
			КонецЕсли;	
		ИначеЕсли ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			МассивСтрок	= Объект.СторонниеЛица.НайтиСтроки(Новый Структура("ПотенциальныйКлиент", СтрокаУчастника.Участник));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока						= Объект.СторонниеЛица.Добавить();
				НоваяСтрока.ПотенциальныйКлиент	= СтрокаУчастника.Участник;
			Иначе
				НоваяСтрока	= МассивСтрок[0];
			КонецЕсли;	
		Иначе
			Продолжить;
		КонецЕсли;
		НоваяСтрока.Адрес				= СтрокаУчастника.Адрес;
		НоваяСтрока.ПосетитМероприятие	= СтрокаУчастника.ПосетитМероприятие;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура КонтактноеЛицоПриИзмененииНаСервере()
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
		 Объект.КонтактноеЛицо, "ГруппаКИКонтакта",
		 СписокТиповКИ.ВыгрузитьЗначения());
	ДобавитьКлиентаВУчастники();
КонецПроцедуры

&НаСервере
Процедура ПотенциальныйКлиентПриИзмененииНаСервере()
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект,
		 Объект.ПотенциальныйКлиент, "ГруппаКИПотенциальногоКлиента",
		 СписокТиповКИ.ВыгрузитьЗначения());
	ДобавитьКлиентаВУчастники();
КонецПроцедуры

&НаСервере
Процедура РезультатПриИзмененииНаСервере()
	Объект.ДатаЗавершенияВзаимодействия = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Объект.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	ТекущаяСтрока.ПосетитМероприятие = 2;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Участник) Тогда
		ТекущаяСтрока.Адрес = "";
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ОбъектКонтактнойИнформации", ТекущаяСтрока.Участник); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СписокАдресов.Количество() > 0 Тогда
		ЕстьДляОповещений = Ложь;
		Для Каждого ЭлементСписка Из СписокАдресов Цикл
			Если ЭлементСписка.Пометка Тогда
				Адрес = ЭлементСписка.Значение;
				Если Адрес.Количество() = 0 Тогда
					ТекущаяСтрока.Адрес	= "";
				Иначе	
					ТекущаяСтрока.Адрес	= Адрес.Представление;
				КонецЕсли;
				ЕстьДляОповещений = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьДляОповещений Тогда
			Адрес = СписокАдресов[0].Значение;
			Если Адрес.Количество() = 0 Тогда
				ТекущаяСтрока.Адрес		= "";
			Иначе	
				ТекущаяСтрока.Адрес		= Адрес.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Адрес				= "";
	КонецЕсли;
	УстановитьПометкуУчастия();
КонецПроцедуры // ПриИзмененииЛица()

&НаКлиенте
Процедура УстановитьПометкуУчастия()
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ПосетитМероприятие = 0 Тогда
		ВыбранноеУчастие = "Нет";
	ИначеЕсли ТекущиеДанные.ПосетитМероприятие = 1 Тогда
		ВыбранноеУчастие = "Да";
	Иначе
		ВыбранноеУчастие = "МожетБыть";
	КонецЕсли;
	ЭлементРодитель = Элементы.УчастникиПосещениеМероприятия;
	ПрефиксИмени = "Участники";
	Для Каждого ТекЭлемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Пометка = (ТекЭлемент.Имя = (ПрефиксИмени + ВыбранноеУчастие));
	КонецЦикла;	
	ЭлементРодитель = Элементы.УчастникиМенюПосещениеМероприятия;
	ПрефиксИмени = "УчастникиМеню";
	Для Каждого ТекЭлемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Пометка = (ТекЭлемент.Имя = (ПрефиксИмени + ВыбранноеУчастие));
	КонецЦикла;	
	ЭлементРодитель = Элементы.УчастникиГруппаПосещениеМероприятия;
	ПрефиксИмени = "УчастникиГруппа";
	Для Каждого ТекЭлемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Пометка = (ТекЭлемент.Имя = (ПрефиксИмени + ВыбранноеУчастие));
	КонецЦикла;	
КонецПроцедуры // УстановитьПометкуУчастия()

&НаКлиенте
Процедура УстановитьДоступностьУчастия()
	Элементы.УчастникиПосещениеМероприятия.Доступность		= Ложь;
	Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Ложь;
	Элементы.УчастникиМенюПосещениеМероприятия.Доступность	= Ложь;
	Элементы.УчастникиГруппаПосещениеМероприятия.Видимость	= Ложь;
	Элементы.УчастникиУдалить.Видимость						= Ложь;
	Элементы.УчастникиМенюУдалить.Видимость					= Ложь;
	Элементы.УчастникиПосетитМероприятие.Доступность		= Ложь;
	Элементы.УчастникиАдрес.Доступность						= Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Участник = Объект.Ответственный Тогда
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Элементы.УчастникиМенюДобавить.Видимость;
		Элементы.УчастникиАдрес.Доступность	= Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.КонтактноеЛицо) И (ТекущиеДанные.Участник = Объект.КонтактноеЛицо) Тогда
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Элементы.УчастникиМенюДобавить.Видимость;
		Элементы.УчастникиАдрес.Доступность	= Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) И (ТекущиеДанные.Участник = Объект.Партнер) Тогда
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Элементы.УчастникиМенюДобавить.Видимость;
		Элементы.УчастникиАдрес.Доступность	= Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент)
		 И (ТекущиеДанные.Участник = Объект.ПотенциальныйКлиент) Тогда
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Элементы.УчастникиМенюДобавить.Видимость;
		Элементы.УчастникиАдрес.Доступность	= Истина;
	ИначеЕсли ЭтоПолноправныйПользователь Тогда	
		Элементы.УчастникиПосещениеМероприятия.Доступность		= Истина;
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Истина;
		Элементы.УчастникиМенюПосещениеМероприятия.Доступность	= Истина;
		Элементы.УчастникиУдалить.Видимость						= Истина;
		Элементы.УчастникиМенюУдалить.Видимость					= Истина;
		Элементы.УчастникиПосетитМероприятие.Доступность		= Истина;
		Элементы.УчастникиАдрес.Доступность						= Истина;
	ИначеЕсли ТекущиеДанные.Участник = ТекущийПользователь Тогда
		Элементы.УчастникиПосещениеМероприятия.Доступность		= Истина;
		Если Элементы.УчастникиМенюДобавить.Видимость Тогда
			Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Истина;
			Элементы.УчастникиМенюПосещениеМероприятия.Доступность	= Истина;
		Иначе	
			Элементы.УчастникиГруппаПосещениеМероприятия.Видимость	= Истина;
		КонецЕсли;	
		Элементы.УчастникиПосетитМероприятие.Доступность		= Истина;
		Элементы.УчастникиАдрес.Доступность						= Истина;
	ИначеЕсли Элементы.УчастникиМенюДобавить.Видимость Тогда
		Элементы.УчастникиМенюПосещениеМероприятия.Видимость	= Истина;
		Элементы.УчастникиМенюПосещениеМероприятия.Доступность	= Ложь;
	КонецЕсли;
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ВернутьПомещенияПоТексту(Текст)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И (НЕ CRM_Помещения.ПометкаУдаления)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");                            
КонецФункции // ВернутьПомещенияПоТексту()

&НаСервере
Процедура УстановитьВремяНачалоВремяОкончание()
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,
			"ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,
			"ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	ВремяНачала		= ВремяНачалаРабочегоДня;
	ВремяОкончанияПлан = ВремяОкончанияРабочегоДня;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Участники Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Участник)
			 И ТипЗнч(СтрокаТаблицы.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивУчастников.Найти(СтрокаТаблицы.Участник) = Неопределено Тогда
				МассивУчастников.Добавить(СтрокаТаблицы.Участник);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУчастников;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораАдреса(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Адрес = РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Адрес = Адрес.Представление;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКлиентаЗавершение(Результат, Шаблон) Экспорт
	// ШаблоныЭлементовФорм
	ШаблоныЭлементов_УдалитьЭлементы(Результат.ИдентификаторФормыСтрокой);
	Если Результат.Свойство("Данные") Тогда
		Если ЗначениеЗаполнено(Результат.Данные.Клиент) Тогда
			Объект.Партнер = Результат.Данные.Клиент;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Данные.Контакт) Тогда
			Объект.КонтактноеЛицо = Результат.Данные.Контакт;
		КонецЕсли;
		Элементы.ГруппаКлиентКонтакт.Видимость = ЗначениеЗаполнено(Объект.Партнер);
		Элементы.ГруппаКонтакт.Видимость = Элементы.ГруппаКлиентКонтакт.Видимость;
		ПартнерПриИзменении(Неопределено);
		КонтактноеЛицоПриИзменении(Неопределено);
		Записать();
	Иначе
		
		// очистить и скрыть поле Партнера
		Объект.Партнер = Неопределено;
		Элементы.ГруппаКонтакт.Видимость = Истина;
		Элементы.ГруппаКлиентКонтакт.Видимость = Ложь;
		Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.ГруппаПотенциальныйКлиент.Видимость = (НЕ ЗначениеЗаполнено(Объект.Партнер)
			 И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатыВзаимодействия()
	
	ДатаИВремя			= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДата);
	ДатаНачала			= ДатаИВремя.Дата;
	ВремяНачала			= ДатаИВремя.Время;
	
	ДатаИВремя			= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
	ДатаОкончанияПлан	= ДатаИВремя.Дата;
	ВремяОкончанияПлан	= ДатаИВремя.Время;
	
КонецПроцедуры // СкорректироватьДатыВзаимодействия()

#Область ПривязкаДокументовКИнтересамКлиентов

&НаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(Ссылка, Тема)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат НСтр("ru='Взаимодействие (создание)'");
	Иначе
		СтрокаТемы	= СокрЛП(Тема);
		Если СтрДлина(СтрокаТемы) > 100 Тогда
			СтрокаТемы	= Лев(СтрокаТемы, 97) + "...";
		КонецЕсли;	
		Возврат НСтр("ru='Взаимодействие: '") + СтрокаТемы;
	КонецЕсли;	
КонецФункции	
	
#КонецОбласти

#Область Оповещения

&НаСервере
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Процедура ПроверитьНаличиеНовыхУчастников(ТекущийОбъект)
	НовыеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СвоиЛица Цикл
		Участник = СтрокаУчастника.Лицо;
		Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = ТекущийОбъект.Ссылка.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", Участник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовыеУчастники.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	ЕстьНовыеУчастники = НовыеУчастники.Количество() > 0;
	УдаленныеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.Ссылка.СвоиЛица Цикл
		Участник = СтрокаУчастника.Лицо;
		Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = ТекущийОбъект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", Участник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаленныеУчастники.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	ЕстьУдаленныеУчастники = УдаленныеУчастники.Количество() > 0;
	ИзмененСоставУчастников = ЕстьНовыеУчастники Или ЕстьУдаленныеУчастники;
КонецПроцедуры

#КонецОбласти

#Область Тэги

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура ОбновитьОблакоТегов()
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизита) Тогда
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория)
			 И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	МассивДобавляемыхРеквизитов = Новый Массив();
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	Для нИндекс = 1 По МассивКатегорий.Количество() Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Элемент = Элементы.Найти(УдаляемыйЭлемент);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		ЦветФона = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый,
			 ДобавляемаяКатегория.ЦветСиний);
		ЭлементыЗаголовка = Новый Массив;
		Если нИндекс = 1 Тогда
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " + ДобавляемаяКатегория.Наименование 
				+ " ", Новый Шрифт(, , Истина), CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		Иначе	
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " + ДобавляемаяКатегория.Наименование 
				+ " ", , CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		КонецЕсли;
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид = ВидДекорацииФормы.Надпись;
		ЭлементКатегория.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементКатегория.Подсказка = ДобавляемаяКатегория.Наименование;
		ЭлементКатегория.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементКатегория.АвтоМаксимальнаяШирина = Ложь;
		ЭлементКатегория.РастягиватьПоГоризонтали = Ложь;
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СинхронизацияКалендарей

&НаСервере
Процедура УдалитьВзаимодействиеИзКалендаря()
	CRM_СинхронизацияКалендарей.УдалитьВзаимодействиеИзКалендаря(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВыполнитьЗаписьДокументаССозданиемРяда()
	
	НовыйРядСобытийОбъект = Справочники.CRM_РядыСобытий.СоздатьЭлемент();
	НовыйРядСобытийСсылка = Справочники.CRM_РядыСобытий.ПолучитьСсылку();
	
	НовыйРядСобытийОбъект.УстановитьСсылкуНового(НовыйРядСобытийСсылка);
	
	НовыйРядСобытийОбъект.ДатаНачала	= ДатаНачала;
	НовыйРядСобытийОбъект.ДатаОкончания	= ДатаОкончанияПлан;
	
	ОбрабатываемоеРасписание = Новый РасписаниеРегламентногоЗадания;
	
	ЗаполнитьЗначенияСвойств(ОбрабатываемоеРасписание, НовыйРядСобытийОбъект);
	
	НовыйРядСобытийОбъект.Наименование	= Справочники.CRM_РядыСобытий.ПолучитьПредставлениеРасписания(ОбрабатываемоеРасписание, ,
		 150);
	НовыйРядСобытийОбъект.Расписание	= Новый ХранилищеЗначения(ОбрабатываемоеРасписание, Новый СжатиеДанных(9));
	
	Объект.РядСобытий = НовыйРядСобытийСсылка;
	
	Записать();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НовыйРядСобытийОбъект.Записать();
		
		НастроитьВидимостьИДоступностьФормы();
		
		Возврат Истина;
	Иначе
		Объект.РядСобытий = Справочники.CRM_РядыСобытий.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВыполнитьЗаписьДокументаССозданиемРяда()

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, Дополнительно) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПризнакЗакрытия = Истина Тогда
			Если Дополнительно.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ВремяНачало			= Параметры.ВремяНачала;
					ВремяОкончание		= Параметры.ВремяКонца;
					
					ПризнакИзмененоРасписание					= Ложь;
					Объект.ИзмененоВРяде						= Ложь;
					
					Записать();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			Иначе
				Если Параметры.ДанныеБылиИзменены Тогда
					ВремяНачало		 = Параметры.ВремяНачала;
					ВремяОкончание	 = Параметры.ВремяКонца;
					
					ПризнакИзмененоРасписание = Ложь;
					
					// Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НастроитьВидимостьИДоступностьФормы();
	Иначе
		Если Дополнительно.НовыйРяд Тогда
			Объект.Периодическое = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму расписания.
//
// Параметры:
//	Нет.
//
Процедура ОткрытьФормуРасписания()
	
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",			Объект.РядСобытий);
	ПараметрыФормы.Вставить("ВремяНачала",	ДатаВремяНачала.Время);
	ПараметрыФормы.Вставить("ВремяКонца",	ДатаВремяОкончания.Время);
	ПараметрыФормы.Вставить("ДатаНачала",	НачалоДня(Объект.Дата));
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаВремяОкончания.Дата);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно
	);
	
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры // ОткрытьФормуРасписания()

&НаКлиенте
// Процедура создает новый элемент ряда событий.
//
// Параметры:
//	Нет.
//
Процедура СоздатьНовыйЭлементРядСобытий()
	
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр("ru='Данные еще не записаны."
			"Установка признака периодичности возможна только после записи данных."
			"Данные будут записаны.';en='Data has not been written yet."
			"Installation of periodicity sign is possible only after writing data."
			"Data will be written.'")
		);
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписиПриСозданииРядаСобытий", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Если Не ВыполнитьЗаписьДокументаССозданиемРяда() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФормуРасписания();
	КонецЕсли;
	
КонецПроцедуры // СоздатьНовыйЭлементРядСобытий()

&НаКлиенте
// Процедура обработки ответа на вопрос о записи документа при создании ряда событий.
//
Процедура ОбработкаОповещенияВопросОЗаписиПриСозданииРядаСобытий(Результат, Дополнительно) Экспорт
	
	ДокументБылЗаписан = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ВыполнитьЗаписьДокументаССозданиемРяда();
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Не Результат Тогда
			ДокументБылЗаписан = Ложь;
		КонецЕсли;
	Иначе
		ДокументБылЗаписан = Ложь;
	КонецЕсли;
	
	Если Не ДокументБылЗаписан Тогда
		Объект.Периодическое = Ложь;
		НастроитьВидимостьИДоступностьФормы();
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаЯндексКарте(Команда)
	АдресОфисаТМП = Объект.АдресОфиса;
	Если НЕ АдресОфисаТМП.Пустая() Тогда
		ОписаниеМетки = ПолучитьОписаниеМетки(АдресОфисаТМП);
		ПараметрыОткрытия = Новый Структура("ОбъектСсылка, Широта, Долгота, Наименование, Режим",
		АдресОфисаТМП, ОписаниеМетки.Широта, ОписаниеМетки.Долгота, ОписаниеМетки.Наименование, "ДляПросмотра");
		ПараметрыОткрытия.Вставить("ОткрытаПоСценарию", Истина);
		ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ПросмотрКарты", ПараметрыОткрытия,
			 ЭтотОбъект,
			 УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеМетки(АдресСсылка)
	Возврат Справочники.CRM_АдресаОфисовКомпании.ПолучитьОписаниеМетки(АдресСсылка);
КонецФункции

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "УчастникиУчастник" Тогда
		СтандартнаяОбработка	= Ложь;
		ТД	= Элементы.Участники.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПоказатьЗначение(, ТД.Участник);
	ИначеЕсли Поле.Имя = "УчастникиПосетитМероприятие" Тогда
		СтандартнаяОбработка = Ложь;
		ТД = Элементы.Участники.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТД.ПосетитМероприятие = 1 Тогда	
			// Да -> Нет
			ТД.ПосетитМероприятие = 0;	
		ИначеЕсли ТД.ПосетитМероприятие = 2 Тогда	
			// Может быть -> Да
			ТД.ПосетитМероприятие = 1;	
		Иначе
			// -> Может быть
			ТД.ПосетитМероприятие = 2;	
		КонецЕсли;
		Модифицированность = Истина;
		УстановитьПометкуУчастия();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОфисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораадреса(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.АдресОфиса = Результат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдрес(Команда)
	ОП = Новый ОписаниеОповещения("ПослеВыбораадреса", ЭтотОбъект);
	СтруктураОтбора = Новый Структура("Владелец", Объект.Партнер);
	
	ОткрытьФорму("Справочник.CRM_АдресаОфисовКомпании.Форма.ФормаВыбора", Новый структура("Отбор",
		 СтруктураОтбора), ЭтотОбъект, , , ,
		 ОП);

КонецПроцедуры

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныЭлементовФорм

&НаКлиенте
Процедура ШаблоныЭлементов_СоздатьЭлементы(ИмяФормыШаблона, Параметры, ОписаниеОповещенияОЗакрытии ,
	 ИмяГруппыРазмещения)
	
	Если ШаблоныЭлементов_Формы = Неопределено Тогда
		ШаблоныЭлементов_Формы = Новый Структура;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы = CRM_ШаблоныЭлементовФормКлиент.ОписаниеФормы(ЭтотОбъект, ИмяФормыШаблона, Параметры);
	Если ШаблоныЭлементов_ОписаниеФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии;
	
	ШаблоныЭлементов_Формы.Вставить(ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона);
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(ШаблоныЭлементов_ОписаниеФормы.АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения,
		 ШаблоныЭлементов_ОписаниеФормы.ФормаШаблона.ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, ИмяГруппыРазмещения,
	 ИдентификаторШаблона,
	 ИмяГруппыОбновления = Неопределено)
	
	ОбновлениеГруппы = Элементы.Найти(ИмяГруппыОбновления);
	CRM_ШаблоныЭлементовФорм.СоздатьЭлементыФормыПоШаблону(ЭтотОбъект, АдресОписанияФормыШаблона,
		 ИмяГруппыРазмещения, ИдентификаторШаблона,
		 ОбновлениеГруппы); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_ОбновитьЭлементы(ИдентификаторШаблона, // АПК:78 - исключить из проверки.
	 ИмяГруппыОбновления) Экспорт
	
	ФормаШаблона = ШаблоныЭлементов_Формы[ИдентификаторШаблона];
	
	АдресОписанияФормыШаблона = ФормаШаблона.ОписаниеФормы(СтрЗаменить(ИмяГруппыОбновления, ИдентификаторШаблона, ""));
	ЭтотОбъект["ШаблоныЭлементов_АдресОписанияФормы" + ИдентификаторШаблона] = АдресОписанияФормыШаблона;
	
	ШаблоныЭлементов_СоздатьЭлементыНаСервере(АдресОписанияФормыШаблона, "", ИдентификаторШаблона, ИмяГруппыОбновления);
	
КонецПроцедуры	

&НаКлиенте
Процедура ШаблоныЭлементов_УдалитьЭлементы(ИдентификаторФормыСтрокой)
	
	ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой);
	ШаблоныЭлементов_Формы.Удалить(ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаСервере
Процедура ШаблоныЭлементов_УдалитьЭлементыНаСервере(ИдентификаторФормыСтрокой)
	
	CRM_ШаблоныЭлементовФорм.УдалитьЭлементыФормы(ЭтотОбъект, ИдентификаторФормыСтрокой);
	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ВыполнитьКоманду(Команда) 
	CRM_ШаблоныЭлементовФормКлиент.ВыполнитьКоманду(Команда, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Команда.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ПриИзменении(Элемент)
	CRM_ШаблоныЭлементовФормКлиент.ПриИзменении(Элемент, ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя, 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЭлементов_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_ШаблоныЭлементовФормКлиент.ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		 ЭтотОбъект, ШаблоныЭлементов_Формы[Прав(Элемент.Имя,
		 37)]);
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями_Взаимодействие

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	Вложения		= ПолучитьВложенияВзаимодействия();
	ВсегоВложений	= Вложения.Количество();
	Если ВсегоВложений = 0 Тогда
		ВложенияПредставление	= НСтр("ru='Файлы';en='Attachments'");
	Иначе	
		ВложенияПредставление	= НСтр("ru='Файлы';en='Attachments'") + " (" + Строка(ВсегоВложений) + ")";
	КонецЕсли;	
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаСервере
Функция ПолучитьВложенияВзаимодействия()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВзаимодействиеПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	CRM_ВзаимодействиеПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_ВзаимодействиеПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник.CRM_ВзаимодействиеПрисоединенныеФайлы КАК CRM_ВзаимодействиеПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ВзаимодействиеПрисоединенныеФайлы.ВладелецФайла = &Взаимодействие
	|	И НЕ CRM_ВзаимодействиеПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("Взаимодействие", Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Взаимодействие не записано. Добавление файлов невозможно!';
			|en='Lead is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	Если СтрНайти(Команда.Имя, "Кнопка") <> 0 Тогда
		ИмяВсплывающейГруппы		= СтрЗаменить(Команда.Имя, "Кнопка", "");
		ЭлементВсплывающейГруппы	= Элементы[ИмяВсплывающейГруппы];
		
		Если ЭлементВсплывающейГруппы <> Неопределено И ЭлементВсплывающейГруппы.Скрыта() Тогда
			ИмяПоследнейКомандыКонтактнойИнформации = Команда.Имя;
			ПодключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформация_Закрытие()
	
	Если ПустаяСтрока(ИмяПоследнейКомандыКонтактнойИнформации)
			Или СтрНайти(ИмяПоследнейКомандыКонтактнойИнформации, "КнопкаПодменю") <= 0 Тогда
		ОтключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие");
		Возврат;
	КонецЕсли;
	
	Если Элементы[СтрЗаменить(ИмяПоследнейКомандыКонтактнойИнформации, "Кнопка", "")].Скрыта() Тогда
		ТекущийЭлемент = Элементы[ИмяПоследнейКомандыКонтактнойИнформации];
		ОтключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие");
	Иначе
		ПодключитьОбработчикОжидания("КонтактнаяИнформация_Закрытие", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонПриИзменении(Элемент)
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	// Разложить строку телефона по полям
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
	Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, Элемент.Имя) Тогда
		ЭтотОбъект[Элемент.Имя] = Представление;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ЗаписатьКонтактнуюИнформацию(Представление, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонНачалоВыбора(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	// Разложить строку телефона по полям
	СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
	Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
	
	ЗначенияПолей = Новый Структура;
	ЗначенияПолей.Вставить("countryCode", СтруктураТелефона.КодСтраны);
	ЗначенияПолей.Вставить("areaCode", СтруктураТелефона.КодГорода);
	ЗначенияПолей.Вставить("number", СтруктураТелефона.НомерТелефона);
	ЗначенияПолей.Вставить("extNumber", СтруктураТелефона.Добавочный);
	ЗначенияПолей.Вставить("value", Представление);
	ЗначенияПолей.Вставить("comment", "");
	
	ЗначенияПолей = CRM_ОбщегоНазначенияСервер.СтруктураВСтрокуJSON(ЗначенияПолей);
	
	ВладелецКИ = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ВладелецКИ = Объект.Партнер;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		ВладелецКИ = Объект.ПотенциальныйКлиент;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", CRM_ВидКИПоУмолчанию(ВладелецКИ,
		 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")));
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", Представление);
	
	Оповещение = Новый ОписаниеОповещения("ТелефонНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент", Элемент);

	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, , Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция CRM_ВидКИПоУмолчанию(ВладелецКИ, ТипКИ)
	Возврат CRM_УправлениеКонтактнойИнформацией.CRM_ВидКИПоУмолчанию(ВладелецКИ, ТипКИ);
КонецФункции

&НаКлиенте
Процедура ТелефонНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ДополнительныеПараметры.Элемент.Имя;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизита) Тогда
		ЭтотОбъект[ИмяРеквизита] = Результат.Представление;
		ЗаписатьКонтактнуюИнформацию(Результат.Представление,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АдресЭППриИзменении(Элемент)
	
	Ошибка = Ложь;
	
	ЗначениеКИ = СокрЛП(Элемент.ТекстРедактирования);
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(ЗначениеКИ);
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя, , Ошибка);
	КонецЕсли;
	
	Если НЕ Ошибка Тогда
		ЗаписатьКонтактнуюИнформацию(ЗначениеКИ,
			 ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонтактнуюИнформацию(ЗначениеКИ, ТипКИ)
	
	ПартнерЗаполнен = ЗначениеЗаполнено(Объект.Партнер);
	ПКЗаполнен = ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	
	ЗаписатьКонтактнуюИнформациюНаСервере(ЗначениеКИ, ТипКИ, ПартнерЗаполнен, ПКЗаполнен);
	
	Если ПартнерЗаполнен Тогда
		Оповестить("ЗаписьПартнера", Объект.Партнер);
	ИначеЕсли ПКЗаполнен Тогда
		Оповестить("НовыйПотенциальныйКлиентЗаписан", Объект.ПотенциальныйКлиент);
	КонецЕсли;
	
	Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Оповестить("ПрозвонитьМессенджеры", ЗначениеКИ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтактнуюИнформациюНаСервере(ЗначениеКИ, ТипКИ, ПартнерЗаполнен, ПКЗаполнен)
	
	ЗаписываемыйОбъект = Неопределено;
	
	Если ПартнерЗаполнен Тогда
		ЗаписываемыйОбъект = Объект.Партнер.ПолучитьОбъект();
	ИначеЕсли ПКЗаполнен Тогда
		ЗаписываемыйОбъект = Объект.ПотенциальныйКлиент.ПолучитьОбъект();
	КонецЕсли;
	
	ВидКИ = CRM_УправлениеКонтактнойИнформацией.CRM_ВидКИПоУмолчанию(ЗаписываемыйОбъект.Ссылка, ТипКИ);
	
	Представление = ЗначениеКИ;
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		СтруктураТелефона = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
			 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
			 "");
	КонецЕсли;
	
	ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
		 ВидКИ, "");
	
	ДанныеПоПолям = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ДанныеКИ,
		 Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если Лев(ДанныеПоПолям.CountryCode, 1) <> "+" Тогда
			ДанныеПоПолям.CountryCode = "+" + ДанныеПоПолям.CountryCode;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеПоПолям);
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЗаписываемыйОбъект, ДанныеКИ, ВидКИ, ТипКИ);
	
	ЗаписываемыйОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеСпискаУчастников(Форма, ВидимостьВключена)
	
	Если ВидимостьВключена Тогда
		Форма.Элементы.ГруппаУчастники.Видимость = Ложь;
		Форма.Элементы.ПоказатьСкрытьУчастников.Заголовок = НСтр("ru='Показать участников'");
	Иначе
		Форма.Элементы.ГруппаУчастники.Видимость = Истина;
		Форма.Элементы.ПоказатьСкрытьУчастников.Заголовок = НСтр("ru='Скрыть участников'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеЧекЛиста(Форма, ВидимостьВключена)

	Если ВидимостьВключена Тогда
		Форма.Элементы.ГруппаЧекЛист.Видимость = Ложь;
		Форма.Элементы.ПоказатьСкрытьЧекЛист.Заголовок = НСтр("ru='Показать чек-лист'");
	Иначе
		Форма.Элементы.ГруппаЧекЛист.Видимость = Истина;
		Форма.Элементы.ПоказатьСкрытьЧекЛист.Заголовок = НСтр("ru='Скрыть чек-лист'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаУчастников()
	
	УстановитьПометкуУчастия();
	УстановитьДоступностьУчастия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатыВзаимодействияПоДлительности(ДлительностьИнтервала)
	
	НоваяПлановаяДата			= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	НоваяПлановаяДатаЗавершение	= НачалоМинуты(НоваяПлановаяДата + ДлительностьИнтервала);
	
	ОкончаниеВзаимодействияДатаИВремя =
		CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(НоваяПлановаяДатаЗавершение);
	
	ВремяОкончанияПлан	= ОкончаниеВзаимодействияДатаИВремя.Время;
	ДатаОкончанияПлан	= ОкончаниеВзаимодействияДатаИВремя.Дата;
	
	Объект.ПлановаяДата				= НоваяПлановаяДата;
	Объект.ПлановаяДатаЗавершение	= НоваяПлановаяДатаЗавершение;
	
КонецПроцедуры // ПересчитатьДатыВзаимодействияПоДлительности()

&НаСервере
Процедура НастроитьОтображениеКлиентаКонтакта()
	
	ТипКлиентаПартнер = (ТипКлиента = "Клиент");
	
	Элементы.Партнер.Видимость                   = ТипКлиентаПартнер;
	Элементы.ГруппаВыводаКИКлиента.Видимость     = ТипКлиентаПартнер;
	Элементы.ГруппаКонтакт.Видимость             = ТипКлиентаПартнер;
	Элементы.ПотенциальныйКлиент.Видимость       = Не ТипКлиентаПартнер;
	Элементы.ГруппаПотенциальныйКлиент.Видимость = Не ТипКлиентаПартнер;
	
	Элементы.ДекорацияПартнер.Видимость       = Не CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ДекорацияПартнерПустая.Видимость = CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ТипКлиента.Видимость             = CRM_ИспользоватьПотенциальныхКлиентов;
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
	Элементы.Декорация2.Видимость = Элементы.РаспознаваниеРечи.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
	Элементы.Декорация2.Видимость = Элементы.РаспознаваниеРечи.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачалаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекущийЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонцаЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачалаЗамера,
		ВремяКонцаЗамера);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Описание");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Результат");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи


#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели

#КонецОбласти
