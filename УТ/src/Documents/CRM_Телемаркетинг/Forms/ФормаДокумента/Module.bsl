
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму Телемаркетинга'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") Тогда
		КлючОткрываемойАктивности = Параметры.ПозиционироватьНаВзаимодействие;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "Участники");
	КонецЕсли;
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		Если Не Объект.Ссылка.Пустая() Тогда
			ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		КонецЕсли;
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Объект.ДатаНачала = ТекДата;
		Объект.ДатаОкончания = ТекДата;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыСервер();
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// Заполним анкеты
	
	ИспользоватьАнкетирование = Константы.ИспользоватьАнкетирование.Получить();
	
	Если ИспользоватьАнкетирование Тогда
		
		ЗаполнитьАнкетыУчастников(Ложь);
		
	КонецЕсли;	
	
	ВидимостьПанелиИнформации = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьЗаголовокФормы();
	
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);
	Элементы.ТекМаркетинговоеМероприятие.Видимость = ЗначениеЗаполнено(Объект.МаркетинговоеМероприятие);
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаОсновнаяИнформация;
	КонецЕсли;		
	
	ВычислитьОбщееЧислоУчастников();	
	СформироватьПредставлениеВложений();
	
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПриСозданииНаСервере(ЭтотОбъект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ВозможноСоздаватьОбращения = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку");
	Если ВозможноСоздаватьОбращения Тогда
		Элементы.УчастникиИнтерес.Заголовок = НСтр("ru='Интерес, Обращение'");
	КонецЕсли;
	
	ЗаполнитьДоступныеСценарииПродаж();
	ОбновитьСтатусыВзаимодействий();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ВыбранныйОбъектОтображения = "Партнер";
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	Элементы.УчастникиАнкета.Видимость = ИспользоватьАнкетирование И ЗначениеЗаполнено(Объект.Опрос);
	ОбновитьОбработаноНеДозвонились("Открытие");
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.ГруппаПраваяСторона.Видимость			= ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.ФормаСкрытьПоказатьПоКлиентам.Пометка	= ПометкаПоказатьСкрытьДопИнформацию;
	
	Если КлючОткрываемойАктивности <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПозиционироватьНаВзаимодействие", 0.2, Истина);
	КонецЕсли;
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Маркетинг.Телемаркетинг.ДлительностьСценариев.ВремяРаботыВФорме");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	Если КлючОткрываемойАктивности <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПозиционироватьНаВзаимодействие", 0.2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ПриСозданииИПриЧтенииНаСервере();
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// CRM_УправлениеДоступом
		МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
		Если МодульУправлениеДоступом <> Неопределено Тогда
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец CRM_УправлениеДоступом
	Иначе
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ПараметрыЗаписи.Свойство("ИзФормы") Тогда
		СтруктураОтбора = Новый Структура("Отказ, ПричинаОтказа", Истина,
			 Справочники.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка());
		МассивСтрок = ТекущийОбъект.Участники.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.CRM_Телемаркетинг"));
			УстановитьСоответствиеОбъектаИРеквизитаФормы(Документ, "Объект");
			Для Каждого СтрокаОшибка Из МассивСтрок Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='В строке '") + Формат(СтрокаОшибка.Номерстроки - 1, "ЧГ=") 
					+ НСтр("ru=' не указана причина отказа'");
				Сообщение.Поле = "Участники[" + Формат(СтрокаОшибка.Номерстроки - 1, "ЧГ=") + "].ПричинаОтказа";
				Сообщение.УстановитьДанные(Документ);
				Сообщение.Сообщить();
			КонецЦикла;
			Отказ = Истина;
			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Отказ", Истина);
	МассивСтрок = ТекущийОбъект.Участники.НайтиСтроки(СтруктураОтбора);
	КоличествоОтказ = МассивСтрок.Количество(); 
	
	СтруктураОтбора = Новый Структура("Обработан", Истина);
	МассивСтрок = ТекущийОбъект.Участники.НайтиСтроки(СтруктураОтбора);
	КоличествоОбработан = МассивСтрок.Количество();
	
	НезавершенныеВзаимодействия = ПолучитьСписокНезавершенныхВзаимодействийТМ(Объект.Ссылка);
	Если ТекущийОбъект.Участники.Количество() > 0
		И ТекущийОбъект.Участники.Количество() = (КоличествоОтказ + КоличествоОбработан)
		И НезавершенныеВзаимодействия.Количество() = 0 Тогда
		
		ТекущийОбъект.Завершен = Истина;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СтруктураВложений = Новый Структура;
	СценарийДокумент.ПолучитьHTML(ТекущийОбъект.Сценарий, СтруктураВложений);
	
	ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.Сценарий);
	
	// Используется для более быстрого поиска существующих вложений.
	СуществующиеВложения = Новый Соответствие;
	
	// Поиск для удаления.
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого ТекущаяСтрокаСоответствия Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		СуществующиеВложения.Вставить(ТекущаяСтрокаСоответствия.ИмяФайла, 0);
		
		Если СтруктураВложений.Свойство(ТекущаяСтрокаСоответствия.ИмяФайла) Тогда
			ТекущаяСтрокаСоответствия.Картинка = СтруктураВложений[ТекущаяСтрокаСоответствия.ИмяФайла];
		Иначе
			УдаленныеВложения.Добавить(ТекущаяСтрокаСоответствия.ИдентификаторФайлаДляHTML);
			МассивУдаляемыхСтрок.Добавить(ТекущаяСтрокаСоответствия);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем отмеченные строки.
	Для Каждого ТекущаяУдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ИндексСтроки = ТаблицаСоответствийИменВложенийИдентификаторам.Индекс(ТекущаяУдаляемаяСтрока);
		ТаблицаСоответствийИменВложенийИдентификаторам.Удалить(ИндексСтроки);
	КонецЦикла;
	
	// Поиск вложений на добавление.
	Для Каждого ТекущаяСтрокаВложения Из СтруктураВложений Цикл
		Если СуществующиеВложения.Получить(ТекущаяСтрокаВложения.Ключ) = Неопределено Тогда
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла					= ТекущаяСтрокаВложения.Ключ;
			НоваяСтрока.Картинка					= ТекущаяСтрокаВложения.Значение;
			НоваяСтрока.ИдентификаторФайлаДляHTML	= "cid:" + Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	// Если были вложения, то получаем записываем не просто текст форматированного документа, а сам текст HTML документа.
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.Сценарий);
		
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить()
		);
		
		ТекстHTML				= Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекущийОбъект.Сценарий	= ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML, " ");
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнениеСКД_ПередЗаписьюНаСервере(ТекущийОбъект, ЭтотОбъект);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Письмо = ТекущийОбъект.Ссылка;
	
	ДанныеПрисоединенныхФайловПисьма	= Взаимодействия.ДанныеПрисоединенныхФайловПисьма(Письмо);
	ИмяОбъектаМетаданных				= ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныхФайлов;
	ВладелецФайлов						= ДанныеПрисоединенныхФайловПисьма.ВладелецФайлов;
	
	// Получим объекты на удаление и удалим их.
	ВыборкаОбъектовНаУдаление = ПолучитьПрисоединенныеФайлыИзСписка(ВладелецФайлов, УдаленныеВложения);
	
	// Удаляем не использующиеся вложения.
	Пока ВыборкаОбъектовНаУдаление.Следующий() Цикл
		ОбъектВложение = ВыборкаОбъектовНаУдаление.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	// Формируем соответсвие по идентификаторам вложения для дальнейшего использования.
	АдресКартинокВХранилище = Новый Соответствие;
	Для Каждого ТекущаяСтрокаВложения Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		ДвоичныеДанныеКартинки				= ТекущаяСтрокаВложения.Картинка.ПолучитьДвоичныеДанные();
		АдресКартинкиВоВременномХранилище	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
		
		АдресКартинокВХранилище.Вставить(
			ТекущаяСтрокаВложения.ИдентификаторФайлаДляHTML,
			Новый Структура(
				"ДвоичныеДанныеКартинки,АдресКартинкиВоВременномХранилище,Расширение",
				ДвоичныеДанныеКартинки, АдресКартинкиВоВременномХранилище, ТекущаяСтрокаВложения.Картинка.Формат()
			)
		);
	КонецЦикла;
	
	// Получим присоединенные файлы на перезапись.
	// Обрабатываем запрос:
	//    - Если присоединенного файла есть, то перезаписываем данные.
	//    - Иначе записываем как новое вложение.
	ВыборкаФайловНаПерезапись = ПолучитьФайлыНаПерезапись(ВладелецФайлов);
	Пока ВыборкаФайловНаПерезапись.Следующий() Цикл
		АдресКартинкиИДанные = АдресКартинокВХранилище.Получить(ВыборкаФайловНаПерезапись.ИдентификаторФайлаДляHTML);
		
		Если ВыборкаФайловНаПерезапись.ПрисоединенныйФайл <> Неопределено Тогда
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресКартинкиИДанные.АдресКартинкиВоВременномХранилище);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", АдресКартинкиИДанные.АдресКартинкиВоВременномХранилище);
			
			РаботаСФайлами.ОбновитьФайл(
				ВыборкаФайловНаПерезапись.ПрисоединенныйФайл,
				ИнформацияОФайле
			);
		Иначе
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла",					ВыборкаФайловНаПерезапись.ИмяФайла + "." 
				+ АдресКартинкиИДанные.Расширение);
			ПараметрыВложения.Вставить("Размер",					АдресКартинкиИДанные.ДвоичныеДанныеКартинки.Размер());
			ПараметрыВложения.Вставить("ИДФайлаЭлектронногоПисьма",	ВыборкаФайловНаПерезапись.ИдентификаторФайлаДляHTML);
			
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, АдресКартинкиИДанные.АдресКартинкиВоВременномХранилище, ПараметрыВложения
			);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
		ПараметрыВложения.Вставить("Размер", Размер);
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
			МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.УправлениеДоступом
	КонецЕсли;
	
	Если ИспользоватьАнкетирование Тогда
		ЗаполнитьАнкетыУчастников(Ложь);
	КонецЕсли;
	ОбновитьСтатусыВзаимодействий();
	
	// ТекстПисьма = Взаимодействия.ОбработатьТекстHTML(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки.Получить("ВидимостьПанелиИнформации") = Неопределено Тогда
		ВидимостьПанелиИнформации = Настройки.Получить("ВидимостьПанелиИнформации");
	Иначе
		ВидимостьПанелиИнформации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// +СофтФон	
	Если ИмяСобытия = "СофтФон_ЗаписьИнтереса" Тогда
		Если Параметр.Свойство("Основание") И (Параметр.Основание = Объект.Ссылка) Тогда
			Если (ЗначениеЗаполнено(Параметр.Партнер) ИЛИ ЗначениеЗаполнено(Параметр.КонтактноеЛицо)) Тогда
				СтруктураПоиска = Новый Структура;
				Если ЗначениеЗаполнено(Параметр.Партнер) Тогда
					СтруктураПоиска.Вставить("Партнер", Параметр.Партнер);
				КонецЕсли;
				Если ЗначениеЗаполнено(Параметр.КонтактноеЛицо) Тогда
					СтруктураПоиска.Вставить("КонтактноеЛицо",	Параметр.КонтактноеЛицо);
				КонецЕсли;
				НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если Параметр.Свойство("Звонок") Тогда
						НайденнаяСтрока.Звонок = Параметр.Звонок;
					КонецЕсли;
					Если Параметр.Свойство("Интерес") Тогда
						НайденнаяСтрока.Интерес = Параметр.Интерес;
					КонецЕсли;
					НайденнаяСтрока.Обработан          = Истина;
					НайденнаяСтрока.НеДозвонились      = Ложь;
					НайденнаяСтрока.ПерезвонитьПозднее = Ложь;
					НайденнаяСтрока.Отказ              = Ложь;
					Прервать;
				КонецЦикла;
				ЗаполнитьДеревоТелефонныхЗвонковИВзаимодействий();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СофтФон_КонецРазговора" Тогда
		ОбработатьКонецРазговораНаСервере(Параметр);
		ЗаполнитьДеревоТелефонныхЗвонковИВзаимодействий();
		Модифицированность = Истина;
	// -СофтФон
	ИначеЕсли ИмяСобытия = "ОбновитьСтрокуВТелемаркетинге" Тогда
		Если ЗначениеЗаполнено(Параметр.ПартнерСтрокой) Тогда
			СтруктураПоиска = Новый Структура;
			СтрокаПоиска = СтрЗаменить(Параметр.ПартнерСтрокой, "[ ", "");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, " ]", "");
			СтруктураПоиска.Вставить("ПартнерСтрокой",	СтрокаПоиска);
			НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Интерес) Тогда
					НайденнаяСтрока.Обработан          = Истина;
					НайденнаяСтрока.НеДозвонились      = Ложь;
					НайденнаяСтрока.ПерезвонитьПозднее = Ложь;
					НайденнаяСтрока.Отказ              = Ложь;
					НайденнаяСтрока.Интерес            = Параметр.Интерес;
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Партнер) Тогда
						НайденнаяСтрока.Партнер        = ПолучитьЗначениеРеквизита(Параметр.Интерес, "Партнер");
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.КонтактноеЛицо) Тогда
						НайденнаяСтрока.КонтактноеЛицо = ПолучитьЗначениеРеквизита(Параметр.Интерес, "КонтактноеЛицо");
					КонецЕсли;
					ОбновитьОбработаноНеДозвонились("Открытие");
					Модифицированность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекДанные = Элементы.Участники.ТекущиеДанные;
			Если НЕ (ТекДанные = Неопределено) Тогда
				Если Не ЗначениеЗаполнено(ТекДанные.Интерес) Тогда
					ТекДанные.Интерес = Параметр.Интерес;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
					ТекДанные.Партнер = ПолучитьЗначениеРеквизита(Параметр.Интерес, "Партнер");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) Тогда
					ТекДанные.КонтактноеЛицо = ПолучитьЗначениеРеквизита(Параметр.Интерес, "КонтактноеЛицо");
				КонецЕсли;
				ТекДанные.Обработан          = Истина;
				ТекДанные.НеДозвонились      = Ложь;
				ТекДанные.ПерезвонитьПозднее = Ложь;
				ТекДанные.Отказ              = Ложь;
			КонецЕсли;
			ОбновитьОбработаноНеДозвонились("Открытие");
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПринятиеОбращения" И (Источник = ЭтотОбъект ИЛИ Источник = Объект.Ссылка) Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ТекДанные = Элементы.Участники.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекДанные.Интерес = Параметр;
				ТекДанные.Обработан = Истина;
				ТекДанные.НеДозвонились = Ложь;
				ТекДанные.ПерезвонитьПозднее = Ложь;
				Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
					ОчиститьЗакладкуТекущийАбонент();
					ИнициализироватьЗакладкуТекущийАбонент();
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Взаимодействие" И (Источник = ЭтотОбъект ИЛИ Источник = Объект.Ссылка) Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			
			ТекДанные = Элементы.Участники.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекВзаимодействие = Параметр;
				ОбновитьСвойстваДекорацииСоздатьВзаимодействие();
				ВыборВзаимодействияЗавершение(ТекВзаимодействие, Неопределено);
				Модифицированность = Истина;
			КонецЕсли;
			
			Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
				ОчиститьЗакладкуТекущийАбонент();
				ИнициализироватьЗакладкуТекущийАбонент();
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
				ОчиститьЗакладкуТекущийАбонент();
				ИнициализироватьЗакладкуТекущийАбонент();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Или ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
				ОчиститьЗакладкуТекущийАбонент();
				ИнициализироватьЗакладкуТекущийАбонент();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Интерес" Тогда
		Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
			ОчиститьЗакладкуТекущийАбонент();
			ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
	ДатаНачалаНовая			= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	ДатаОкончанияНовая		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Объект.ДатаНачала		= ДатаНачалаНовая;
	Объект.ДатаОкончания	= ДатаОкончанияНовая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь",
		 Объект.Ссылка, Параметры.ОбновлятьКалендарь),
		 ЭтотОбъект);
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Оповестить("ОбновитьПланировщик");
	ОбновитьЗаголовокФормы();	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Маркетинг.Телемаркетинг.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,
			 ВремяНачало, Истина,
			 ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, , , ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.Основание);
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенПриИзменении(Элемент)
	Если Объект.Завершен Тогда
		СтруктураПоиска = Новый Структура("Обработан,НеДозвонились,Отказ", Ложь, Ложь, Ложь);
		МассивСтрок = Объект.Участники.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОЗавершении", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Не все участники обработаны. Продолжить ?'"), РежимДиалогаВопрос.ДаНет);
		Иначе	
			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		КонецЕсли;	
	Иначе
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗавершении(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	Иначе
		Объект.Завершен = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОпросНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипРеспондентаПартнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ТипРеспондентаКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	
	ОтборПоТипуРеспондента = Новый СписокЗначений;
	ОтборПоТипуРеспондента.Добавить(ТипРеспондентаПартнер, ТипРеспондентаПартнер);
	ОтборПоТипуРеспондента.Добавить(ТипРеспондентаКонтактноеЛицо, ТипРеспондентаКонтактноеЛицо);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("ТипРеспондентов", ОтборПоТипуРеспондента));
	
	ОткрытьФорму("Документ.НазначениеОпросов.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпросПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Если ЕстьРеспонденты(Объект.Опрос) Тогда
			
			СписокКнопокОтветов = Новый СписокЗначений;
			СписокКнопокОтветов.Добавить("ПеренестиНеопрошенных", "Перенести  неопрошенных");
			СписокКнопокОтветов.Добавить("ПеренестиВсех", "Перенести всех");
			СписокКнопокОтветов.Добавить("Отмена", "Отмена");
			
			ОписаниеОповещения = Новый  ОписаниеОповещения("ОпросПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Перенести список анкетируемых из Опроса в состав участников?';
				|en='Transfer the list of questionnaires from the Questionnaire to the participants?'"),
				 СписокКнопокОтветов, ,
				 "ПеренестиНеопрошенных");
			Возврат;
		КонецЕсли;	
	
	КонецЕсли;	
	
	Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпросПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = "Отмена" Тогда
			
		ПереноситьВсех = (Ответ = "ПеренестиВсех");
		ЗаполнитьУчастниковПоОпросу(ПереноситьВсех);
				
	КонецЕсли; 
	
	Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Телемаркетинг не записан. Добавление файлов невозможно!';
			|en='Telemarketing is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеПрисоединенныхФайлов", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено, , ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ТекСценарийПриИзменении(Элемент)
	СценарийДокумент.ПолучитьHTML(Объект.Сценарий, Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьАнкетуНажатие(Элемент)
	
	// создаем анкету
	Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТекстСообщения = НСтр("ru='Не выбрано назначение опроса!';en='The poll assignment is not selected!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Опрос);
		
		Возврат;
		
	КонецЕсли;
	
	Партнер = ?(ЗначениеЗаполнено(ТекКлиент), ТекКлиент, ТекПотенциальныйКлиент);
	КонтактноеЛицо = ТекКонтактноеЛицо;
	
	ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
	
	Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Респондент = КонтактноеЛицо;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не выбрано контактное лицо';en='No contact has been selected'"));
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			Респондент = Партнер;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Не выбран клиент';en='No customer selected'"));
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(,
			 НСтр("ru='В телемаркетинге не может использоваться опрос с типом респондентов Пользователи';
			|en='In telemarketing,
			| a poll can not be used with the type of respondents. Users'"));
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения  = Новый Структура;
	
	ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
	ЗначенияЗаполнения.Вставить("Респондент", Респондент);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
	СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
	
	НовоеОповещение = Новый ОписаниеОповещения("СозданиеАнкетыЗавершение", ЭтотОбъект);
	РежимОткрытия   = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров, , , , , НовоеОповещение, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекРежимПоказаПриИзменении(Элемент)
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ИмяЭлемента", Элемент.Имя);
	Оповещение = Новый ОписаниеОповещения("ПолеСодержаниеПриНажатииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Поле отображения содержания.
	Если Элемент.Имя = "ТекСодержание" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
			 СтандартнаяОбработка,
			 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(), , Оповещение);
		
	ИначеЕсли Элемент.Имя = "ТекСодержание1" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
			 СтандартнаяОбработка,
			 НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели(), , Оповещение);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяЭлемента = "ТекСодержание" Тогда
		
		ЗаполнитьПанельИнформацииПоДаннымПартнера();
		
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ТекСодержание1" Тогда
		
		Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда
			ЗаполнитьПанельИнформацииПоДанным(Неопределено);
			Возврат;
		КонецЕсли;
		ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьИнтересНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не заполнен реквизит ""Вид взаимодействия!""';
			|en='Attribute ""Type of interaction"" is not filled!'"),
			 Объект.ВидВзаимодействия);
		Возврат;
	КонецЕсли;
	
	УчастникиИнтересНачалоВыбораЗавершение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаВкладкуИнтересыИКонтакты(Элемент)
	Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты;
	РазвернутьВсе("ДеревоПоиска");
	ИдентификаторСтроки = НайтиСтрокуКонтактногоЛицаВДереве(ТекКонтактноеЛицо, ДеревоПоиска.ПолучитьЭлементы());
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ДеревоПоиска.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоПоискаПриАктивизацииСтроки", 0.1, Истина);	
КонецПроцедуры	

&НаКлиенте
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент И НетУчастников 
	   И Объект.Участники.Количество() > 0 Тогда
		
		НетУчастников = Ложь;
		ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент И Объект.Участники.Количество() > 0 Тогда
		
		РассчитатьКоличествоКлиентовПоРежимамПоказа();
		
		ТекДанные = Элементы.Участники.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
			Возврат;
		КонецЕсли;
		
		ТекПозицияКурсора = ТекДанные.НомерСтроки - 1;
		Если ТекДанные.Обработан Тогда
			ТекРежимПоказа = "Обработаны";
		ИначеЕсли ТекДанные.НеДозвонились Тогда
			ТекРежимПоказа = "НеДозвонились";
		ИначеЕсли ТекДанные.Отказ Тогда
			ТекРежимПоказа = "Отказ";
		ИначеЕсли ТекДанные.ПерезвонитьПозднее Тогда
			ТекРежимПоказа = "ПерезвонитьПозднее";
		Иначе
			ТекРежимПоказа = "НеЗвонили";
		КонецЕсли;
		
		ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент Тогда
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУчастники И Объект.Участники.Количество() > 0 Тогда
		Элементы.Участники.ТекущаяСтрока = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Если ТекНеДозвонились Тогда
			Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
			ТекНеДозвонились = Ложь;
		КонецЕсли;
		Если ТекОтказ Тогда
			Элементы.Участники.ТекущиеДанные.Отказ = ТекОтказ;
			Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
			ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
			ТекОтказ = Ложь;
		КонецЕсли;
		Если ТекПерезвонитьПозднее Тогда
			Элементы.Участники.ТекущаяСтрока                    = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
			Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
			ТекПерезвонитьПозднее = Ложь;
			Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаОсновнаяИнформация"
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И Не Объект.Ссылка.Пустая() И ЭтотОбъект["ПараметрыСвойств"].Свойство("ВыполненаОтложеннаяИнициализация") Тогда
		Если Не ЭтотОбъект["ПараметрыСвойств"].ВыполненаОтложеннаяИнициализация Тогда
			СвойстваВыполнитьОтложеннуюИнициализацию();
			МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекАнкетаНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, ТекАнкета);
КонецПроцедуры

&НаКлиенте
Процедура ТекИнтересНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, ТекИнтерес);
КонецПроцедуры

&НаКлиенте
Процедура ТекКонтактноеЛицоНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, ТекКонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПанельТекАбонентПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты Тогда
		РазвернутьВсе("ДеревоПоиска");
		ИдентификаторСтроки = НайтиСтрокуКонтактногоЛицаВДереве(ТекКонтактноеЛицо, ДеревоПоиска.ПолучитьЭлементы());
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ДеревоПоиска.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаТелефонныеЗвонкиИВзаимодействия Тогда
		РазвернутьВсе("ДеревоТелефонныхЗвонковИВзаимодействий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекМаркетинговоеМероприятиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.МаркетинговоеМероприятие);
КонецПроцедуры

&НаКлиенте
Процедура ТипОбращенияПриИзменении(Элемент)
	ЗаполнитьДоступныеСценарииПродаж();
КонецПроцедуры

&НаКлиенте
Процедура ТипУслугиПриИзменении(Элемент)
	ЗаполнитьДоступныеСценарииПродаж();
КонецПроцедуры

&НаКлиенте
Процедура ТекПочта1ПриИзменении(Элемент)
	СохранитьПочтуКонтакта();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьВзаимодействиеНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекВзаимодействие = Результат;
	Элементы.ТекВзаимодействие.Видимость = Истина;
	Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйОбъектОтображенияПриИзменении(Элемент)
	
	ЗаполнитьПанельИнформацииПоДаннымПартнера();
	
КонецПроцедуры // ВыбранныйОбъектОтображенияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиОбработанПриИзменении(Элемент)
	УчастиникиПриИзмененииСтатусаОбработкиЗвонка("Обработан");
КонецПроцедуры

&НаКлиенте
Процедура УчастникиНеДозвонилисьПриИзменении(Элемент)
	УчастиникиПриИзмененииСтатусаОбработкиЗвонка("НеДозвонились");
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОтказПриИзменении(Элемент)
	УчастиникиПриИзмененииСтатусаОбработкиЗвонка("Отказ");
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПерезвонитьПозднееПриИзменении(Элемент)
	УчастиникиПриИзмененииСтатусаОбработкиЗвонка("ПерезвонитьПозднее");
КонецПроцедуры

&НаКлиенте
Процедура УчастиникиПриИзмененииСтатусаОбработкиЗвонка(ИмяРеквизитаИсточника)
	
	Если (Не ИмяРеквизитаИсточника = "ПерезвонитьПозднее" И Элементы.Участники.ТекущиеДанные[ИмяРеквизитаИсточника])
		Или (ИмяРеквизитаИсточника = "ПерезвонитьПозднее" И Не Элементы.Участники.ТекущиеДанные[ИмяРеквизитаИсточника]) Тогда
		
		ТекВзаимодействие = Элементы.Участники.ТекущиеДанные.Взаимодействие;
		СтатусВзаимодействия = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекВзаимодействие,
			 "СтатусВзаимодействия");
		Если ЗначениеЗаполнено(ТекВзаимодействие)
			И Не СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено")
			И Не СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено") Тогда
		
			ИмяДействия = "Завершить";
			Если ИмяРеквизитаИсточника = "Обработан" Тогда
				ТекстВопроса = НСтр("ru = 'Взаимодействие с клиентом будет завершено. Продолжить?'");
			Иначе
				ИмяДействия = "Отменить";
				ТекстВопроса = НСтр("ru = 'Взаимодействие с клиентом будет отменено. Продолжить?'");
			КонецЕсли;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяРеквизитаИсточника", ИмяРеквизитаИсточника);
			ДополнительныеПараметры.Вставить("Действие", ИмяДействия);
			Оповещение = Новый ОписаниеОповещения("ОменаВзаимодействияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УстановитьЗначенияЗависимыхРеквизитов(ИмяРеквизитаИсточника);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизитаИсточника = "ПерезвонитьПозднее" И Элементы.Участники.ТекущиеДанные[ИмяРеквизитаИсточника] Тогда
		
		УстановитьЗначенияЗависимыхРеквизитов(ИмяРеквизитаИсточника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОменаВзаимодействияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Элементы.Участники.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаИсточника] =
			Не Элементы.Участники.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизитаИсточника];
		Возврат;
	КонецЕсли;
	
	ЗавершитьВзаимодействиеНаСервере(Элементы.Участники.ТекущиеДанные.Взаимодействие, ДополнительныеПараметры.Действие);
	УстановитьЗначенияЗависимыхРеквизитов(ДополнительныеПараметры.ИмяРеквизитаИсточника);
	ОбновитьСтатусыВзаимодействий(Элементы.Участники.ТекущиеДанные.Взаимодействие);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВзаимодействиеНаСервере(Взаимодействие, Действие = "Завершить")
	
	ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	Если Действие = "Завершить" Тогда
		ВзаимодействиеОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
	Иначе
		ВзаимодействиеОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
	КонецЕсли;
	ВзаимодействиеОбъект.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
	ВзаимодействиеОбъект.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
	ВзаимодействиеОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияЗависимыхРеквизитов(ИмяРеквизитаИсточника)
	
	ИменаРеквизитовДляИзменения = Новый Массив;
	ИменаРеквизитовДляИзменения.Добавить("Обработан");
	ИменаРеквизитовДляИзменения.Добавить("НеДозвонились");
	ИменаРеквизитовДляИзменения.Добавить("Отказ");
	ИменаРеквизитовДляИзменения.Добавить("ПерезвонитьПозднее");
	
	Для Каждого ТекЭлемент Из ИменаРеквизитовДляИзменения Цикл
		Если ТекЭлемент = ИмяРеквизитаИсточника Тогда
			Продолжить;
		КонецЕсли;
		Элементы.Участники.ТекущиеДанные[ТекЭлемент] = Ложь;
	КонецЦикла;
	
	ОбновитьОбработаноНеДозвонились("ИзменениеНеДозвонились",
		 Элементы.Участники.ТекущиеДанные.НеДозвонились,
		 Элементы.Участники.ТекущиеДанные.Обработан);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьОбработаноНеДозвонились("Открытие");
	// ИнициализироватьЗакладкуТекущийАбонент();		
	ВычислитьОбщееЧислоУчастников();

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерПриИзменении(Элемент)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление;
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.Партнер)
		 И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер, Неопределено), ,
			 Истина);
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление;
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	Иначе
		ТекДанные.Телефон = "";
	КонецЕсли;
	
	ЗаполнитьАнкетуСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерОчистка(Элемент, СтандартнаяОбработка)
	Элементы.УчастникиПартнер.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.УчастникиПартнер.ВыбиратьТип Тогда
		СтандартнаяОбработка = Ложь;
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерНачалоВыбораПослеВыбораТипа", ЭтотОбъект);
		СписокВыбораТипов = Новый СписокЗначений;
		СписокВыбораТипов.Добавить(1, Нстр("ru='Клиент';en='Client'"));
		СписокВыбораТипов.Добавить(2, Нстр("ru='Потенциальный клиент';en='Potential Customer'"));
		СписокВыбораТипов.ПоказатьВыборЭлемента(НовоеОповещение,
			 НСтр("ru='Выбор типа данных';en='Select data type'"),
			 Элемент);
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура УчастникиПартнерНачалоВыбораПослеВыбораТипа(ЭлементСписка, Контекст) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСписка.Значение = 1 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерВыборИзПартнеров", ЭтотОбъект);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", , , , , , НовоеОповещение);
	ИначеЕсли ЭлементСписка.Значение = 2 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерВыборИзПотенциальныхКлиентов", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора", , , , , , НовоеОповещение);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерВыборИзПартнеров(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Участники.ТекущиеДанные.Партнер = Результат;	
	УчастникиПартнерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерВыборИзПотенциальныхКлиентов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Участники.ТекущиеДанные.Партнер = Результат;	
	УчастникиПартнерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление;
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАнкетуСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерСтрокойПриИзменении(Элемент)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Партнер) И Не ЗначениеЗаполнено(ТекДанные.ПартнерСтрокой) Тогда
		ТекДанные.Телефон = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонПриИзменении(Элемент)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураТелефона	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ТекДанные.Телефон);
	ТекДанные.Телефон	= УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
		 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, СтруктураТелефона.Добавочный,
		 "");
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиТелефонНачалоВыбораЗавершение", ЭтотОбъект);
		СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите телефон");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	 Ожидание,
	 СтандартнаяОбработка)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Партнер) Тогда	
		Элемент.КнопкаВыбора = Ложь;
	Иначе
		Элемент.КнопкаВыбора = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекТелефонНажатие(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Если ТекТелефон = "Нет телефона" Тогда
		ЭлементТелефон = Элементы.Найти("УчастникиТелефон");
		Если Не ЭлементТелефон = Неопределено Тогда
			ТекущийЭлемент = ЭлементТелефон;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
				 ТекДанные.Партнер,
				 ТекДанные.КонтактноеЛицо));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораТелефона", ЭтотОбъект);
			СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите телефон");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТелефона(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ЭлементСписка <> Неопределено Тогда
		ТелефонныйНомер = ЭлементСписка.Значение;
		Если Не ТелефонныйНомер.Количество() = 0 Тогда
			ТекДанные.Телефон = ТелефонныйНомер.Представление;
	        ТекТелефон = ТелефонныйНомер.Представление;

			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонНачалоВыбораЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ЭлементСписка <> Неопределено Тогда
		ТелефонныйНомер = ЭлементСписка.Значение;
		Если Не ТелефонныйНомер.Количество() = 0 Тогда
			ТекДанные.Телефон = ТелефонныйНомер.Представление;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	Если ВозможноСоздаватьОбращения Тогда
		ЭлСписка = Список.Добавить("Создать", Нстр("ru='Создать новый интерес или обращение'"));
	Иначе	
		ЭлСписка = Список.Добавить("Создать", Нстр("ru='Создать новый интерес';en='Create a new lead'"));
	КонецЕсли;	
	ЭлСписка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	ЭлСписка = Список.Добавить("Выбрать", Нстр("ru='Выбрать из списка ...';en='Choose from the list ...'"));
	ЭлСписка.Картинка  = БиблиотекаКартинок.Лупа;
	// ЭлСписка = Список.Добавить("Очистить", Нстр("ru='Очистить';en='Clear'"));
	// ЭлСписка.Картинка = БиблиотекаКартинок.Очистить;
	ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиИнтересНачалоВыбораПродолжение",
		 ЭтотОбъект,
		 Элементы.Участники);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбораПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаИнтереса = Неопределено;
	Если ВыбранныйЭлемент.Значение = "Создать" Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстВопроса = НСтр("ru='Данные еще не записаны."
"Создание нового интереса возможно только после записи данных."
"Данные будут записаны.';en='Data has not been written yet."
"Creation of new lead is possible only after writing data."
"Data will be written.'");
			//
			ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиИнтересНачалоВыбораЗавершение",
				 ЭтотОбъект,
				 ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УчастникиИнтересНачалоВыбораЗавершение(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ВыбранныйЭлемент.Значение = Нстр("ru='Выбрать'") Тогда
		Партнер			= Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо	= Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ПодборИзТелемаркетинга", Истина);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("Партнер", Партнер);
		ПараметрыФормы.Вставить("КонтактноеЛицо", КонтактноеЛицо);
		Если ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.Интерес) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Участники.ТекущиеДанные.Интерес);
		КонецЕсли;	
		СтруктураДанных = Новый Структура("Партнер, КонтактноеЛицо", Партнер, КонтактноеЛицо);
		НовоеОповещение = Новый ОписаниеОповещения("ВыборИнтересаЗавершение", ЭтотОбъект, СтруктураДанных);
		РежимОткрытияФормы = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Документ.CRM_Интерес.ФормаВыбора", ПараметрыФормы, , , , , НовоеОповещение, РежимОткрытияФормы);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Очистить" Тогда
		Элементы.Участники.ТекущиеДанные.Интерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
		Если Результат = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда 
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не заполнен реквизит ""Вид взаимодействия!""'"),
				 Объект.ВидВзаимодействия);
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры = Элементы.Участники Тогда
			ТекДанные = Элементы.Участники.ТекущиеДанные;
		Иначе
			ТекДанные = Объект.Участники[ТекПозицияКурсора];
		КонецЕсли;
		СтруктураПараметров = Новый Структура;
		Партнер = ТекДанные.Партнер;
		КонтактноеЛицо = ТекДанные.КонтактноеЛицо;
		Тема = Объект.Тема;
		ПартнерСтрокой = ТекДанные.ПартнерСтрокой;
		Телефон = ТекДанные.Телефон;
		
		ЗначенияЗаполнения = Новый Структура("КонтактноеЛицо,Тема, Офис", КонтактноеЛицо, Тема,
			 Объект.Подразделение,
			 ВернутьОфисПодразделения(Объект.Подразделение));
		Если ЗначениеЗаполнено(Партнер) И ТипЗнч(Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ЗначенияЗаполнения.Вставить("ПотенциальныйКлиент", Партнер);
		ИначеЕсли ЗначениеЗаполнено(Партнер) И ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗначенияЗаполнения.Вставить("Партнер", Партнер);
		ИначеЕсли ЗначениеЗаполнено(ПартнерСтрокой) Тогда
			НомерСпецСимвола = СтрНайти(ПартнерСтрокой, " / ");
			Если НомерСпецСимвола > 0 Тогда
				ПартнерСтрокой = СокрЛП(Лев(ПартнерСтрокой, НомерСпецСимвола - 1));
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("ТаблицаФормы") Тогда
			ЗначенияЗаполнения.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());
			ЗначенияЗаполнения.Вставить("КлиентСтрокой", ПартнерСтрокой);
			ЗначенияЗаполнения.Вставить("Телефон", Телефон);
		Иначе	
			ЗначенияЗаполнения.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());
			ЗначенияЗаполнения.Вставить("КлиентСтрокой", ТекКлиентСтрокой);
			ЗначенияЗаполнения.Вставить("Телефон", ТекТелефон);
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("Описание", "");
		ЗначенияЗаполнения.Вставить("ТипУслуги", ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПоставкаТоварыУслуги"));
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ЗначенияЗаполнения.Вставить("Организация", ЗначениеНастройки);
			Иначе
				ЗначенияЗаполнения.Вставить("Организация", CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию());
			КонецЕсли;
		Иначе
			МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
				ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
			Если МодульCRM_Модуль_МетодыМодулейОбъектовДокументов <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("Организация", Неопределено);
				МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ЗаполнитьОрганизацию(ЗначенияЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ЗначенияЗаполнения.Вставить("Ответственный", ЗначениеНастройки);
		Иначе
			ЗначенияЗаполнения.Вставить("Ответственный", CRM_ОбщегоНазначенияСервер.ТекущийПользователь());
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("ВидВзаимодействия", Объект.ВидВзаимодействия);
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("Телемаркетинг", Объект.Ссылка);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
		СтруктураПараметров.Вставить("СозданиеИзСтрокиТелемаркетинга", Истина);
		СтруктураПараметров.Вставить("Содержание", ПолучитьЗначениеРеквизита(Объект.ВидВзаимодействия, "Наименование"));
		
		Если ЗначениеЗаполнено(Объект.ТипОбращения) Тогда
			СтруктураПараметров.Вставить("ТипОбращения", Объект.ТипОбращения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
			СтруктураПараметров.Вставить("ТипУслуги", Объект.ТипУслуги);
			СтруктураПараметров.Вставить("НеОбновлятьТипУслуги", Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.СценарийПродажи) Тогда
			СтруктураПараметров.Вставить("Сценарий", Объект.СценарийПродажи);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(КонтактноеЛицо)
			 И ЗначениеЗаполнено(ТекДанные.ПартнерСтрокой) Тогда
			СтруктураПараметров.Вставить("ПоискКлиентНаименование", ТекДанные.ПартнерСтрокой);
		КонецЕсли;
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАнкетаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Анкета) Тогда
		
		// открываем анкету

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", ТекущиеДанные.Анкета);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
		
		АнкетаПроведена = ПолучитьЗначениеРеквизита(ТекущиеДанные.Анкета, "Проведен");
		
		Если АнкетаПроведена Тогда
			СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;

		ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров, Элемент);

	Иначе
		
		// создаем анкету
		
		Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='Не выбрано назначение опроса!'"));
			
			Возврат;			
		
		КонецЕсли; 
		
		Партнер = Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо = Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
				Респондент = КонтактноеЛицо;
				
			Иначе
				
				ПоказатьПредупреждение(, НСтр("ru='Не выбрано контактное лицо'"));
				
				Возврат;
			
			КонецЕсли;		
			
		ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				Респондент = Партнер;
				
			Иначе	
				
				ПоказатьПредупреждение(, НСтр("ru='Не выбран клиент'"));
				
				Возврат;
			
			КонецЕсли;	
			
		Иначе
				
			ПоказатьПредупреждение(,
				 НСтр("ru='В телемаркетинге не может использоваться опрос с типом респондентов Пользователи'"));
				
			Возврат;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения 	= Новый Структура;	
		
		ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
		ЗначенияЗаполнения.Вставить("Респондент", Респондент);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиАнкетаСозданиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров, , , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАнкетаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Анкета) Тогда
		
		Возврат;

	Иначе
		
		// создаем анкету
		
		Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='Не выбрано назначение опроса!'"));
			
			Возврат;			
		
		КонецЕсли; 
		
		Партнер = Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо = Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
				Респондент = КонтактноеЛицо;
				
			Иначе
				
				ПоказатьПредупреждение(, НСтр("ru='Не выбрано контактное лицо'"));
				
				Возврат;
			
			КонецЕсли;		
			
		ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				Респондент = Партнер;
				
			Иначе	
				
				ПоказатьПредупреждение(, НСтр("ru='Не выбран клиент'"));
				
				Возврат;
			
			КонецЕсли;	
			
		Иначе
				
			ПоказатьПредупреждение(,
				 НСтр("ru='В телемаркетинге не может использоваться опрос с типом респондентов Пользователи'"));
				
			Возврат;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения 	= Новый Структура;	
		
		ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
		ЗначенияЗаполнения.Вставить("Респондент", Респондент);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиАнкетаСозданиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров, , , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАнкетаСозданиеЗавершение(НоваяАнкета, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(НоваяАнкета) Тогда
		Элементы.Участники.ТекущиеДанные.Анкета = НоваяАнкета;
		АнкетаЗавершена = ПолучитьЗначениеРеквизита(НоваяАнкета, "Проведен");
		Элементы.Участники.ТекущиеДанные.Обработан = АнкетаЗавершена;
		Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		
		ВыбранноеЗначениеПартнер		= (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры"));
		ВыбранноеЗначениеКонтактноеЛицо = (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
		
		Если ВыбранноеЗначениеПартнер Или ВыбранноеЗначениеКонтактноеЛицо Тогда		
			
			// Не должно быть дублирования.
			
			СтруктураПоиска = Новый Структура();
			
			Если ВыбранноеЗначениеПартнер Тогда
				
				НовыйПартнер = ЭлементМассива;
				
				НовоеКонтактноеЛицо = ВернутьКЛПартнера(НовыйПартнер);
				
				СтруктураПоиска.Вставить("КонтактноеЛицо", НовоеКонтактноеЛицо);
				СтруктураПоиска.Вставить("Партнер", НовыйПартнер);
				
			Иначе
				
				НовоеКонтактноеЛицо = ЭлементМассива;
				
				НовыйПартнер = ПолучитьЗначениеРеквизита(ЭлементМассива, "Владелец");
				
				СтруктураПоиска.Вставить("КонтактноеЛицо", НовоеКонтактноеЛицо);
				
			КонецЕсли; 
			
			СтрокиУчастники = Объект.Участники.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиУчастники.Количество() = 0 Тогда
				
				НоваяСтрокаУчастники = Объект.Участники.Добавить();
				
				НоваяСтрокаУчастники.Партнер = НовыйПартнер;
				
				НоваяСтрокаУчастники.КонтактноеЛицо = НовоеКонтактноеЛицо;
				
				СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
					 НовыйПартнер,
					 НовоеКонтактноеЛицо));
				Если СписокТелефонов.Количество() > 0 Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
						НоваяСтрокаУчастники.Телефон = ТелефонныйНомер.Представление;
					Иначе
						НоваяСтрокаУчастники.Телефон = "";
					КонецЕсли;
				Иначе
					НоваяСтрокаУчастники.Телефон = "";
				КонецЕсли;
				ЗаполнитьАнкетуСтроки(НоваяСтрокаУчастники);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.УчастникиПартнер.ВыбиратьТип = Ложь;
		Модифицированность = Истина;
	КонецЕсли;	
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры   

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя = "УчастникиЗвонок" Тогда
		Если ЗначениеЗаполнено(ТД.Звонок) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТД.Звонок);
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВзаимодействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	
	ЭлСписка = Список.Добавить("Создать", Нстр("ru='Запланировать взаимодействие';en='Schedule new interaction'"));
	ЭлСписка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	ЭлСписка = Список.Добавить("Выбрать", Нстр("ru='Выбрать из списка ...';en='Choose from the list ...'"));
	ЭлСписка.Картинка  = БиблиотекаКартинок.Лупа;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиВзаимодействиеНачалоВыбораПродолжение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВзаимодействиеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	
	Элементы.Участники.ТекущиеДанные.Взаимодействие = ТекВзаимодействие;
	Элементы.Участники.ТекущиеДанные.СтатусВзаимодействия =
		ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ПустаяСсылка");
	Элементы.Участники.ТекущиеДанные.ВзаимодействиеПредставление = "";
	Элементы.Участники.ТекущиеДанные.ВзаимодействиеЗавершено = Ложь;
	Элементы.Участники.ТекущиеДанные.ВзаимодействиеПлановаяДата = Дата("39991231");
	Элементы.Участники.ТекущиеДанные.ВзаимодействиеДата = Дата("39991231");
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВзаимодействиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьТекущееВзаимодействие();
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВзаимодействиеНачалоВыбораПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаИнтереса = Неопределено;
	Если ВыбранныйЭлемент.Значение = "Создать" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТекстВопроса = НСтр("ru='Данные еще не записаны.
				|Создание нового взаимодействия возможно только после записи данных.
				|Данные будут записаны.';en='Data has not been written yet.
				|Creation of new interaction is possible only after writing data.
				|Data will be written.'");
			
			ТекстСообщения = НСтр("ru = 'Для планирования взаимодействия нужно записать документ.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиВзаимодействиеНачалоВыбораЗавершение",
				 ЭтотОбъект,
				 ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УчастникиВзаимодействиеНачалоВыбораЗавершение(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ВыбранныйЭлемент.Значение = Нстр("ru='Выбрать'") Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Партнер",            Элементы.Участники.ТекущиеДанные.Партнер);
		СтруктураОтбора.Вставить("КонтактноеЛицо",     Элементы.Участники.ТекущиеДанные.КонтактноеЛицо);
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("Партнер",           Элементы.Участники.ТекущиеДанные.Партнер);
		СтруктураЗаполнения.Вставить("КонтактноеЛицо",    Элементы.Участники.ТекущиеДанные.КонтактноеЛицо);
		СтруктураЗаполнения.Вставить("Тема",              Объект.Тема);
		СтруктураЗаполнения.Вставить("Примечание",        Элементы.Участники.ТекущиеДанные.Примечание);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",         Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",  Истина);
		ПараметрыФормы.Вставить("Отбор",               СтруктураОтбора);
		ПараметрыФормы.Вставить("СтруктураЗаполнения", СтруктураЗаполнения);
		Если ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.Взаимодействие) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Участники.ТекущиеДанные.Взаимодействие);
		КонецЕсли;
		
		РежимОткрытияФормы = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		НовоеОповещение = Новый ОписаниеОповещения("ВыборВзаимодействияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
			 НовоеОповещение,
			 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВзаимодействиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПлановаяДатаНачала = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПлановаяДатаЗавершение = ПлановаяДатаНачала + 1800;
	
	ВидВзаимодействия =
		CRM_МетодыМодулейМенеджеровДокументов.ПолучитьВидВзаимодействия(ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок"));
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",                   ОбщегоНазначенияКлиент.ДатаСеанса());
	ДанныеЗаполнения.Вставить("ВидВзаимодействия",      ВидВзаимодействия);
	ДанныеЗаполнения.Вставить("ДокументОснование",      Объект.Ссылка);
	ДанныеЗаполнения.Вставить("КонтактноеЛицо",         Элементы.Участники.ТекущиеДанные.КонтактноеЛицо);
	ДанныеЗаполнения.Вставить("ПлановаяДата",           ПлановаяДатаНачала);
	ДанныеЗаполнения.Вставить("ПлановаяДатаЗавершение", ПлановаяДатаЗавершение);
	ДанныеЗаполнения.Вставить("Тема",                   Объект.Тема);
	ДанныеЗаполнения.Вставить("Содержание",             Элементы.Участники.ТекущиеДанные.Примечание);
	
	Если ТипЗнч(Элементы.Участники.ТекущиеДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ДанныеЗаполнения.Вставить("Партнер",             Элементы.Участники.ТекущиеДанные.Партнер);
	Иначе
		ДанныеЗаполнения.Вставить("ПотенциальныйКлиент", Элементы.Участники.ТекущиеДанные.Партнер);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияСоздатьВзаимодействиеНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая", ПараметрыОткрытия,
		 ЭтотОбъект, , , ,
		 Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВзаимодействияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусВзаимодействияСтарый = Элементы.Участники.ТекущиеДанные.СтатусВзаимодействия;
	
	Элементы.Участники.ТекущиеДанные.Взаимодействие = Результат;
	Элементы.Участники.ТекущиеДанные.ПричинаОтказа =
		ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
	
	ОбновитьСтатусыВзаимодействий(Результат);
	
	СтатусВзаимодействия = Элементы.Участники.ТекущиеДанные.СтатусВзаимодействия;
	Если СтатусВзаимодействияСтарый <> СтатусВзаимодействия Тогда
		Если СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
			
			Элементы.Участники.ТекущиеДанные.Обработан = Истина;
			УстановитьЗначенияЗависимыхРеквизитов("Обработан");
			Элементы.Участники.ТекущиеДанные.ВзаимодействиеЗавершено = Истина;
			
			ТекВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
			
		ИначеЕсли СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ПустаяСсылка") Тогда
			
			Элементы.Участники.ТекущиеДанные.Обработан = ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.Звонок)
				 Или ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.Интерес);
			УстановитьЗначенияЗависимыхРеквизитов("Обработан");
			Элементы.Участники.ТекущиеДанные.Взаимодействие =
				ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
			ТекВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
			
		Иначе
			Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = Истина;
			УстановитьЗначенияЗависимыхРеквизитов("ПерезвонитьПозднее");
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
		ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
	КонецЕсли;
	
	ОбновитьОбработаноНеДозвонились("Открытие");
	Элементы.Участники.ТекущаяСтрока = 0;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗвонокНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборФормы = Новый Структура("ВзаимодействиеОснование", Объект.Ссылка);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборПоОтветственному", CRM_ОбщегоНазначенияСервер.ТекущийПользователь());
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПоиска

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ДеревоПоискаПриАктивизацииСтроки", 0.1, Истина);
		РазвернутьВсе("ДеревоПоиска");
	КонецЕсли;
	ВычислитьСсылкуТекущегоЭлементаДерева();
	// Если ЗначениеЗаполнено(НовыйИнтерес) Тогда
	//	Элементы.СоздатьИнтерес.Заголовок = Нстр("ru='Создать взаимодействие'");
	// Иначе		
	//	Элементы.СоздатьИнтерес.Заголовок = Нстр("ru='Создать взаимодействие';en='Create an interaction'");
	// КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоТелефонныхЗвонковИВзаимодействий

&НаКлиенте
Процедура ДеревоТелефонныхЗвонковИВзаимодействийПриАктивизацииСтроки(Элемент)
	РазвернутьВсе("ДеревоТелефонныхЗвонковИВзаимодействий");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТелефонныхЗвонковИВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ОткрытьТекущееВзаимодействие(Элемент.ТекущиеДанные.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	Иначе
		Элемент.Свернуть(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	МассивКлиентовКонтактов = Новый Массив;
	Для каждого Участник Из Объект.Участники Цикл
		Если ЗначениеЗаполнено(Участник.Партнер) И ТипЗнч(Участник.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			МассивКлиентовКонтактов.Добавить(Участник.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.КонтактноеЛицо) Тогда
			МассивКлиентовКонтактов.Добавить(Участник.КонтактноеЛицо);
		КонецЕсли;
	КонецЦикла;
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач,
		 Новый Структура("Источник", ЭтотОбъект), ,
		 МассивКлиентовКонтактов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегменту(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Участники.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаВыборСегмента", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		Сегмент							= Результат.Сегмент;
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРассылке(Команда)
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Завершена", Истина));
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Участники.Количество() > 0));
	ДопПараметры = Новый Структура();
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРассылкеЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаВыбораРассылки", ПараметрыФормы, ЭтотОбъект, ,
		 , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРассылкеЗавершение(ПараметрыВыбора, ДопПараметры) Экспорт
	Если ПараметрыВыбора <> Неопределено Тогда
		ЗаполнитьПоРассылкеСервер(ПараметрыВыбора, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРассылкеСервер(ПараметрыВыбора, ДопПараметры)
	
	Если ПараметрыВыбора.ОчищатьТЧ Тогда
		Объект.Участники.Очистить();
	КонецЕсли;
	Запрос = Новый Запрос;
	ВыбранныеСтатусы = Новый Массив;
	Для каждого Статус Из ПараметрыВыбора.Статусы Цикл
		Если Статус.Пометка Тогда
			ВыбранныеСтатусы.Добавить(Статус.Значение);
		КонецЕсли;
	КонецЦикла;
	НеЗаполнятьСПустымиТелефонами = Ложь;
	ПараметрыВыбора.Свойство("НеЗаполнятьСПустымиТелефонами", НеЗаполнятьСПустымиТелефонами);
	
	Запрос.УстановитьПараметр("Рассылка", ПараметрыВыбора.Рассылка);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", ВыбранныеСтатусы);
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_РассылкаЭлектронныхПисемПолучатели.Партнер КАК Партнер,
	               |	CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо КАК КонтактноеЛицо,
	               |	CRM_РассылкаЭлектронныхПисемПолучатели.ПартнерСтрокой КАК ПартнерСтрокой,
	               |	ЕСТЬNULL(CRM_СтатусыПисемEmailРассылки.Статус, ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма) КАК Статус
	               |ИЗ
	               |	Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК CRM_РассылкаЭлектронныхПисемПолучатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СтатусыПисемEmailРассылки КАК CRM_СтатусыПисемEmailРассылки
	               |				ПО (CRM_СтатусыПисемEmailРассылки.Письмо = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка)
	               |			ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
	               |				И (ПредметыПапкиВзаимодействий.Предмет = &Рассылка)
	               |		ПО (CRM_РассылкаЭлектронныхПисемПолучатели.Адрес = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Адрес)
	               |			И (CRM_РассылкаЭлектронныхПисемПолучатели.ПартнерСтрокой = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Представление
	               |				ИЛИ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер = ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт)
	               |			И (CRM_РассылкаЭлектронныхПисемПолучатели.Ссылка = &Рассылка)
	               |ГДЕ
	               |	ЕСТЬNULL(CRM_СтатусыПисемEmailРассылки.Статус, ПредметыПапкиВзаимодействий.Взаимодействие.СтатусПисьма) В (&ВыбранныеСтатусы)
	               |	И (CRM_РассылкаЭлектронныхПисемПолучатели.Партнер ССЫЛКА Справочник.Партнеры
	               |			ИЛИ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер ССЫЛКА Справочник.CRM_ПотенциальныеКлиенты)";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = Объект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 НовСтр.Партнер, НовСтр.КонтактноеЛицо),
													Неопределено, НовСтр.Партнер = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
		Если СписокТелефонов.Количество() > 0 Тогда
			НовСтр.Телефон = СписокТелефонов[0].Значение.Представление;
		ИначеЕсли НеЗаполнятьСПустымиТелефонами Тогда
			Объект.Участники.Удалить(НовСтр);
		КонецЕсли;
	КонецЦикла;
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчета(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Участники.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаВыбораРезультатаОтчета", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПартнеров";
	ДополнительныеДанные.ИмяСправочника = "Партнеры";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактнымиЛицами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляКонтактныхЛиц";
	ДополнительныеДанные.ИмяСправочника = "КонтактныеЛицаПартнеров";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПотенциальнымиКлиентами(Команда)
	
	ДополнительныеДанные = CRM_ОбщегоНазначенияКлиент.СтруктураДополнительныхДанных();
	ДополнительныеДанные.ИмяРеквизитаАдресОтбор = "CRM_АдресОтборДляПотенциальныхКлиентов";
	ДополнительныеДанные.ИмяСправочника = "CRM_ПотенциальныеКлиенты";
	ДополнительныеДанные.Оповещение = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКД", ЭтотОбъект);
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьОтборЗаполнения(ЭтотОбъект, ДополнительныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейПоСКД(Данные, ДополнительныеПараметры) Экспорт
	
	Если НЕ Данные.ОтборНастроен Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЗаписи = Объект.Участники.Количество() > 0;
	
	Если ЕстьЗаписи Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателейПоСКДЗавершение", ЭтотОбъект, Данные);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Табличная часть уже содержит записи. "
		"Очистить табличную часть?';en='Tabular section already contains records. "
		"Clear tabular section?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПолучателейПоСКДЗавершение(Неопределено, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателейПоСКДЗавершение(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Участники.Очистить();
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Форма") Тогда
		ДополнительныеПараметры.Удалить("Форма");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Оповещение") Тогда
		ДополнительныеПараметры.Удалить("Оповещение");
	КонецЕсли;
	
	ЭтоПартнеры = Ложь;
	Если ДополнительныеПараметры.Свойство("ИмяСправочника") Тогда
		ЭтоПартнеры = ДополнительныеПараметры.ИмяСправочника = "Партнеры";
	КонецЕсли;
	
	СписокСсылок = CRM_ОбщегоНазначенияКлиент.СписокПолучателей(ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Формирование списка заполнения'"), ,
		НСтр("ru = 'Список сформирован.'")
	);
		
	ВидКонтактнойИнформации       = ДополнительныеПараметры.ВидКонтактнойИнформации;
	НеЗаполнятьСПустымиТелефонами = ДополнительныеПараметры.НеЗаполнятьСПустымиАдресами;
	ТолькоОсновныеКонтактныеЛица  = ?(ДополнительныеПараметры.Свойство("ТолькоОсновныеКонтактныеЛица"),
	                                  ДополнительныеПараметры.ТолькоОсновныеКонтактныеЛица,
	                                  Ложь);
	Если ДополнительныеПараметры.Свойство("НеЗаполнятьОтписавшимисяОтРассылок") Тогда
		НеЗаполнятьОтписавшимисяОтРассылок = ДополнительныеПараметры.НеЗаполнятьОтписавшимисяОтРассылок;
	КонецЕсли;
	ЗаполнитьТЧПоРезультатуСКД(СписокСсылок, ЭтоПартнеры);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьПоМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, , , , ,
		 НовоеОповещение,
		 РежимОткрытия); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Участники.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'; en = 'Replace'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'; en = 'Add'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена';en='Cancel'"));
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеПоМаркетинговойКампанииПослеВопроса",
				 ЭтотОбъект,
				 ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеПоМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнениеПоМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Участники.Очистить();
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);		
	ИначеЕсли Результат = 2 Тогда
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастникамиМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьУчастникамиМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, , , , ,
		 НовоеОповещение,
		 РежимОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастникамиМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Участники.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'; en = 'Replace'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'; en = 'Add'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена';en='Cancel'"));
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеУчастникамиМаркетинговойКампанииПослеВопроса",
				 ЭтотОбъект,
				 ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеУчастникамиМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеУчастникамиМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Участники.Очистить();
		ЗаполнениеУчастникамиМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	ИначеЕсли Результат = 2 Тогда
		ЗаполнениеУчастникамиМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайла(Команда)
	
	Если CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть() Тогда
	
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
		НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаЗавершение", ЭтотОбъект);
		ПараметрыФормы  = Новый Структура("РежимЗагрузкиВДокумент, ЗагрузкаВДокумент", Истина, "Телемаркетинг");
		
		ОткрытьФорму("Обработка.CRM_ЗагрузкаДанныхИзФайла.Форма.ФормаИмпортаКлиентов", ПараметрыФормы, , , , ,
					 НовоеОповещение, РежимОткрытия);
	
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаКлиентовИзФайла()

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		Если Объект.Участники.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru='Табличная часть содержит записи. Заменить или дополнить?'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'; en = 'Replace'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'; en = 'Add'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена';en='Cancel'"));
			
			ПараметрыОповещения	= Новый Структура("МассивЭлементов", Результат);
			НовоеОповещение		= Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			
			ПоказатьВопрос(НовоеОповещение, ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗагрузкаКлиентовИзФайлаНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Участники.Очистить();
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);
	ИначеЕсли Результат = 2 Тогда
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаКлиентовИзФайлаНаСервере(МассивЭлементов)
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер					= ЭлементМассива.Партнер;
			НоваяСтрока.ПартнерСтрокой			= ЭлементМассива.ПартнерСтрокой;
			НоваяСтрока.КонтактноеЛицо			= ЭлементМассива.Контакт;
			НоваяСтрока.КонтактноеЛицоСтрокой	= ЭлементМассива.КонтактСтрокой;
			НоваяСтрока.ТелефонСтрокой			= ЭлементМассива.ТелефонСтрокой;
			
			СтруктураТелефона	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЭлементМассива.Телефон);
			НоваяСтрока.Телефон	= УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода,
				СтруктураТелефона.НомерТелефона,
				СтруктураТелефона.Добавочный,
				"");
		КонецЕсли;
	КонецЦикла;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	Если Объект.Участники.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТЧЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Табличная часть содержит записи. Продолжить?'"),
			 РежимДиалогаВопрос.ДаНет, ,
			 КодВозвратаДиалога.Да);
								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Участники.Очистить();
		ВычислитьОбщееЧислоУчастников();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуКлиенту(Команда)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = Нстр("ru='Не выбрана строка для перехода!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились 	= ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;	
	Если ТекОтказ Тогда
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.Отказ 	= ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа 	= ТекПричинаОтказа;
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
		ТекОтказ = Ложь;
	КонецЕсли;
	Если ТекПерезвонитьПозднее Тогда
		Элементы.Участники.ТекущаяСтрока                    = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
		ТекПерезвонитьПозднее = Ложь;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
	КонецЕсли;
	
	ТекПозицияКурсора = ТекДанные.НомерСтроки - 1;
	Если ТекДанные.Обработан Тогда
		ТекРежимПоказа = "Обработаны";
	ИначеЕсли ТекДанные.НеДозвонились Тогда
		ТекРежимПоказа = "НеДозвонились";
	ИначеЕсли ТекДанные.ПерезвонитьПозднее Тогда
		ТекРежимПоказа = "ПерезвонитьПозднее";
	Иначе
		ТекРежимПоказа = "НеЗвонили";
	КонецЕсли;
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
	Элементы.Панель.ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент;
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиУдалитьСОдинаковымиТелефонами(Команда)
	ТЧ = Объект.Участники;
	Индекс = 0;
	Пока Индекс <= ТЧ.Количество() - 1 Цикл
		Значение = ТЧ[Индекс].Телефон;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		МассивСтрок = ТЧ.НайтиСтроки(Новый Структура("Телефон", Значение));
		Если МассивСтрок.Количество() > 1 Тогда
			Для каждого Строка Из МассивСтрок Цикл
				ТЧ.Удалить(Строка);
				Модифицированность = Истина;
			КонецЦикла;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиВыделитьСОдинаковымиТелефонами(Команда)
	УстановитьОформлениеСОдинаковымиЗначениямиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиУдалитьБезТелефонов(Команда)
	ТЧ = Объект.Участники;
	Индекс = 0;
	Пока Индекс <= ТЧ.Количество() - 1 Цикл
		Если НЕ ЗначениеЗаполнено(ТЧ[Индекс].Телефон) Тогда
			ТЧ.Удалить(Индекс);
			Модифицированность = Истина;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	ВычислитьОбщееЧислоУчастников();	
КонецПроцедуры
 
&НаКлиенте
Процедура СоздатьОпрос(Команда)
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
	    ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросНачало", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru='Текущее назначение опроса будет заменено на новое! Продолжить?'"),
			 РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьОпросНачало(Неопределено, Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросНачало(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;			
	КонецЕсли; 
	
	// Заполним массив респондентов.
	
	МассивПартнеров = Новый Массив;
	
	МассивКонтактныхЛиц = Новый Массив;
	
	Для каждого СтрокаУчастники Из Объект.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастники.Партнер) Тогда
			
			НайденныйПартнер = МассивПартнеров.Найти(СтрокаУчастники.Партнер);
			
			Если НайденныйПартнер = Неопределено Тогда
				
				МассивПартнеров.Добавить(СтрокаУчастники.Партнер);	
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУчастники.КонтактноеЛицо) Тогда
			
			НайденноеКонтактноеЛицо = МассивКонтактныхЛиц.Найти(СтрокаУчастники.КонтактноеЛицо);
			
			Если НайденноеКонтактноеЛицо = Неопределено Тогда
		
				МассивКонтактныхЛиц.Добавить(СтрокаУчастники.КонтактноеЛицо);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивКонтактныхЛиц, МассивПартнеров",
		 МассивКонтактныхЛиц,
		 МассивПартнеров);
	Если МассивКонтактныхЛиц.Количество() > 0 Тогда
		
		// зададим вопрос
		СписокОтветов = Новый СписокЗначений;
		
		СписокОтветов.Добавить("Клиент", НСтр("ru='Клиент'"));
		СписокОтветов.Добавить("КонтактноеЛицо", НСтр("ru='Контакт'"));
		СписокОтветов.Добавить("Отмена", НСтр("ru='Клиент';en='Client'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Выберите тип респондентов нового опроса:'"), СписокОтветов);
		
	Иначе
		
		СоздатьОпросПродолжение(Неопределено, ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Если ДополнительныеПараметры.МассивКонтактныхЛиц.Количество() > 0 Тогда
		
		Если Ответ = "Клиент" Тогда
			
			СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивПартнеров);
		
		ИначеЕсли Ответ = "КонтактноеЛицо" Тогда
		
			СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивКонтактныхЛиц);
			
		Иначе
			
			Возврат;
		
		КонецЕсли;	
	
	Иначе
		
		СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивПартнеров);
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Тема) Тогда
	
		СтруктураПараметров.Вставить("Наименование", Объект.Тема);	
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.НазначениеОпросов.ФормаОбъекта", СтруктураПараметров, , , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросЗавершение(НовыйОпрос, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(НовыйОпрос) Тогда
		Объект.Опрос = НовыйОпрос;
		Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Если Элементы.Участники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Если ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.КонтактноеЛицо) Тогда
			Структура.Вставить("Ссылка", Элементы.Участники.ТекущиеДанные.КонтактноеЛицо);
		Иначе
			Структура.Вставить("Ссылка", Элементы.Участники.ТекущиеДанные.Партнер);
		КонецЕсли;	
		Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(Элементы.Участники.ТекущиеДанные.Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКлиентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие", Истина);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКонтактныхЛиц(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие", Истина);		
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАнкет(Команда)	
	
	ЗаполнитьАнкетыУчастников();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНазначениюОпроса(Команда)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Если ЕстьРеспонденты(Объект.Опрос) Тогда
			
			СписокКнопокОтветов = Новый СписокЗначений;
			СписокКнопокОтветов.Добавить("ПеренестиНеопрошенных", "Перенести  неопрошенных");
			СписокКнопокОтветов.Добавить("ПеренестиВсех", "Перенести всех");
			СписокКнопокОтветов.Добавить("Отмена", "Отмена");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоНазначениюОпросаЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения,
				 НСтр("ru='Перенести список анкетируемых из Опроса в состав участников?'"), СписокКнопокОтветов, ,
				 "ПеренестиНеопрошенных");
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Не выбрано назначение опроса!'"));
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНазначениюОпросаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = "Отмена" Тогда
		ПереноситьВсех = (Ответ = "ПеренестиВсех");
		ЗаполнитьУчастниковПоОпросу(ПереноситьВсех);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентОтправитьСМС(Команда)
	СтруктураДанных = Новый Структура("СМС, Звонок", Истина, Ложь);
	Если НерабочееВремя Тогда
		// значит попытка создания документа осуществляется в нерабочее время
		ТекстВопроса = Нстр("ru='У клиента сейчас нерабочее время. Продолжить?'");
		НовоеОповещение = Новый ОписаниеОповещения("ПослеВопросаОРабочемВремени", ЭтотОбъект, СтруктураДанных);
		ПоказатьВопрос(НовоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена); 
		Возврат;
	КонецЕсли;
	ТекущийАбонентОтправитьСМСИлиПозвонить(СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентВперёд(Команда)
	
	СкрытьВсплывающиеГруппы();
	
	//Записать(Новый Структура("ИзФормы", Истина));
	Если ТекОтказ И ТекПричинаОтказа.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана причина отказа'");
		Сообщение.Поле = "ТекПричинаОтказа";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока               = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;
	Если ТекОтказ Тогда
		Элементы.Участники.ТекущаяСтрока               = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.Отказ         = ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
		ТекОтказ = Ложь;
	КонецЕсли;
	Если ТекПерезвонитьПозднее Тогда
		Элементы.Участники.ТекущаяСтрока                    = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
		ТекПерезвонитьПозднее = Ложь;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
	КонецЕсли;
	
	ТекПочта1 = "";
	СписокАдресов.Очистить();
	СписокТелефонов.Очистить();
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(, Истина);
	РазвернутьВсе("ДеревоПоиска");
	РазвернутьВсе("ДеревоТелефонныхЗвонковИВзаимодействий");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентНазад(Команда)
	
	СкрытьВсплывающиеГруппы();
	
	//Записать(Новый Структура("ИзФормы", Истина));
	Если ТекОтказ И ТекПричинаОтказа.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не указана причина отказа'");
		Сообщение.Поле = "ТекПричинаОтказа";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока               = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;
	Если ТекОтказ Тогда
		Элементы.Участники.ТекущаяСтрока               = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.Отказ         = ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
		ТекОтказ = Ложь;
	КонецЕсли;
	Если ТекПерезвонитьПозднее Тогда
		Элементы.Участники.ТекущаяСтрока                    = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
		ТекПерезвонитьПозднее = Ложь;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
		ТекВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	КонецЕсли;
	
	ТекПочта1 = "";
	СписокАдресов.Очистить();
	СписокТелефонов.Очистить();
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(, , Истина);
	РазвернутьВсе("ДеревоПоиска");
	РазвернутьВсе("ДеревоТелефонныхЗвонковИВзаимодействий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка;
	ПоказатьЗначение(, ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнтерес(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не заполнен реквизит ""Вид взаимодействия!""'"),
			 Объект.ВидВзаимодействия);
		Возврат;
	КонецЕсли;		
	
	ВычислитьСсылкуТекущегоЭлементаДерева();
	
	// Если ЗначениеЗаполнено(НовыйИнтерес) Тогда
	//	ПараметрыФормы = Новый Структура("ДанныеЗаполнения, ВидВзаимодействия", НовыйИнтерес, Объект.ВидВзаимодействия);
	//	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	// Иначе
		
		УчастникиИнтересНачалоВыбораЗавершение(Неопределено, Неопределено);
		
	// КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнтересыТелемаркетингаНаСервере(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	CRM_Интерес.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	CRM_Интерес.ДокументОснование В
		|			(ВЫБРАТЬ
		|				CRM_Взаимодействие.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|			ГДЕ
		|				CRM_Взаимодействие.ДокументОснование = &ДокументОснование
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ТелефонныйЗвонок.Ссылка
		|			ИЗ
		|				Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|			ГДЕ
		|				ТелефонныйЗвонок.ВзаимодействиеОснование = &ДокументОснование
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				&ДокументОснование)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИнтересы(Команда)
	
	ИнтересыОтбор = ПолучитьИнтересыТелемаркетингаНаСервере(Объект.Ссылка);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", ИнтересыОтбор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьВзаимодействиеНажатие(Элемент)
	ВыбранныйЭлемент = Новый Структура("Значение", "Создать");
	УчастникиВзаимодействиеНачалоВыбораПродолжение(ВыбранныйЭлемент, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПоКлиентам(Команда)
	
	Элементы.ФормаСкрытьПоказатьПоКлиентам.Пометка	= Не Элементы.ФормаСкрытьПоказатьПоКлиентам.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию				= Элементы.ФормаСкрытьПоказатьПоКлиентам.Пометка;
	
	Элементы.ГруппаПраваяСторона.Видимость = ПометкаПоказатьСкрытьДопИнформацию;
	
КонецПроцедуры // СкрытьПоказатьПоКлиентам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НайтиСтрокуКонтактногоЛицаВДереве(КонтактноеЛицо, СтрокиДерева)
	
	Для Каждого Элемент Из СтрокиДерева Цикл
		Если Элемент.Ссылка = КонтактноеЛицо Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		Иначе
			ВложенныеСтроки = Элемент.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() > 0 Тогда
				НайтиСтрокуКонтактногоЛицаВДереве(КонтактноеЛицо, ВложенныеСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияТелефонНажатие(Команда)
	КонтактнаяИнформацияНажатиеТелефон(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНажатиеТелефон(Форма, Команда)
	
	Если СтрНайти(Команда.Имя, "КнопкаПодменю") > 0 Тогда
		Элементы[СтрЗаменить(Команда.Имя, "Кнопка", "")].Показать();
		ПодключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеТелефон_Закрыть", 0.1, Истина);
		Возврат;
	Иначе	
		ИндексСтрокой = СтрЗаменить(Команда.Имя, "ЭлементТипаКИТелефон", "");
		ИндексСтроки = Число(?(ИндексСтрокой = "", "0", ИндексСтрокой));
	КонецЕсли;
	Если Не Элементы.Найти("ПодменюТипаКИТелефон") = Неопределено
		И Не Элементы.ПодменюТипаКИТелефон.Скрыта() Тогда
		Элементы.ПодменюТипаКИТелефон.Скрыть();
	КонецЕсли;
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	ВыбранныйТелефон = СписокТелефонов[ИндексСтроки].Значение;
	Если НЕ ВыбранныйТелефон.Количество() = 0 Тогда
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
			Возврат;
		КонецЕсли;
		ДанныеЗаполнения	= Новый Структура;
		ДанныеЗаполнения.Вставить("Основание", Объект.Ссылка);
		ДополнительныеПараметры	= Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		ЗапомнитьПараметрыНачалаРазговора(ВыбранныйТелефон.Представление);
		
		Если ВыбранныйТелефон.ТипОбъекта = "Партнер" Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйТелефон.Представление, ТекКлиент, ДополнительныеПараметры);
		Иначе	
			сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйТелефон.Представление, ТекКонтактноеЛицо, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьПараметрыНачалаРазговора(Телефон)
	
	ПараметрыЗвонка = Новый Структура;
	// Время, в течение которго звонок считается сделанным из текущего документа, в секундах.
	ПараметрыЗвонка.Вставить("ВремяАктуальности", 60);
	ПараметрыЗвонка.Вставить("ДатаНачала", ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыЗвонка.Вставить("КлиентСтрокой", ТекКлиентСтрокой);
	ПараметрыЗвонка.Вставить("КонтактСтрокой", ТекКонтактноеЛицоСтрокой);
	
	ДополнитьПараметрыНачалаРазговораНаСервере(ПараметрыЗвонка, Телефон);
	
	ПараметрыПриложения.Вставить("ПараметрыЗвонкаИзТелемаркетинга", ПараметрыЗвонка);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыНачалаРазговораНаСервере(ПараметрыЗвонка, Телефон)
	
	СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	Телефон = сфпСофтФонПроСервер.сфпПреобразоватьНомерСУчетомПрефиксов(СтруктураНомера);
	
	ПараметрыЗвонка.Вставить("Номер", Телефон);
	ПараметрыЗвонка.Вставить("ДлинаНомераВнутр", Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить());
	ПараметрыЗвонка.Вставить("ДлинаНомераВнеш", Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПочтаНажатие(Команда)
	КонтактнаяИнформацияНажатиеПочта(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНажатиеПочта(Форма, Команда)
	
	Если СтрНайти(Команда.Имя, "КнопкаПодменю") > 0 Тогда
		Элементы[СтрЗаменить(Команда.Имя, "Кнопка", "")].Показать();
		ПодключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеПочта_Закрыть", 0.1, Истина);
		Возврат;
	Иначе	
		ИндексСтрокой = СтрЗаменить(Команда.Имя, "ЭлементТипаКИПочта", "");
		ИндексСтроки = Число(?(ИндексСтрокой = "", "0", ИндексСтрокой));
	КонецЕсли;
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Адрес =  СписокАдресов[ИндексСтроки].Значение;
	Если НЕ Адрес.Количество() = 0 Тогда
		ТекПочта					= Адрес.Представление;
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
		СписокАдресовОтправка = Новый СписокЗначений;
		Если Адрес.ТипОбъекта = "Партнер" И ЗначениеЗаполнено(ТекКлиент) Тогда
			СписокАдресовОтправка.Добавить(ТекКлиент, ТекПочта);
		ИначеЕсли Адрес.ТипОбъекта = "Партнер" Тогда
			СписокАдресовОтправка.Добавить(ТекПотенциальныйКлиент, ТекПочта);
		Иначе
			СписокАдресовОтправка.Добавить(ТекКонтактноеЛицо, ТекПочта);
		КонецЕсли;
		ПараметрыФормы.Вставить("Кому", СписокАдресовОтправка);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

	Иначе
		ТекПочта					= Нстр("ru='Нет адреса'");
		Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
		Элементы.ГруппаПочтаНет.Видимость = Истина;
	КонецЕсли;
	Если Не Элементы.Найти("ПодменюТипаКИПочта") = Неопределено
		И Не Элементы.ПодменюТипаКИПочта.Скрыта() Тогда
		Элементы.ПодменюТипаКИПочта.Скрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНажатиеТелефон_Закрыть()
	
	Если Элементы["ПодменюТипаКИТелефон"].Скрыта() Тогда
		ТекущийЭлемент = Элементы["КнопкаПодменюТипаКИТелефон"];
		ОтключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеТелефон_Закрыть");
	Иначе
		ПодключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеТелефон_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияНажатиеПочта_Закрыть()
	
	Если Элементы["ПодменюТипаКИПочта"].Скрыта() Тогда
		ТекущийЭлемент = Элементы["КнопкаПодменюТипаКИПочта"];
		ОтключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеПочта_Закрыть");
	Иначе
		ПодключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеПочта_Закрыть", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКонтактнуюИнформациюОбъектаПочта(СписокАдресов)
	ЭлементРазмещения = Элементы.ГруппаКИПочтаНовая;
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	ПанельКИОбъекта = Элементы.Добавить("ГруппаТипаКИПочта", Тип("ГруппаФормы"), ЭлементРазмещения);
	ПанельКИОбъекта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПанельКИОбъекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ПанельКИОбъекта.ОтображатьЗаголовок = Ложь;

	КоличествоКИ = СписокАдресов.Количество();
	Если КоличествоКИ > 0 Тогда
		Элементы.ГруппаПочтаЕсть.Видимость = Истина;
		Элементы.ГруппаПочтаНет.Видимость = Ложь;
		Адрес = СписокАдресов[0].Значение;
		Если Команды.Найти("ЭлементТипаКИПочта") = Неопределено Тогда
			Команда = Команды.Добавить("ЭлементТипаКИПочта");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияПочтаНажатие";
		КонецЕсли;
		
		ГруппуТипаКИ = Элементы.Добавить("ГруппаТипаКИПочтаОбщая", Тип("ГруппаФормы"), ПанельКИОбъекта);
		ГруппуТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппуТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппуТипаКИ.ОтображатьЗаголовок = Ложь;
		
		ГруппуЗначенияТипаКИ = Элементы.Добавить("ГруппаТипаКИПочтаВертикаль", Тип("ГруппаФормы"), ГруппуТипаКИ);
		ГруппуЗначенияТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппуЗначенияТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппуЗначенияТипаКИ.РастягиватьПоВертикали = Ложь;
		ГруппуЗначенияТипаКИ.ОтображатьЗаголовок = Ложь;
		ГруппуЗначенияТипаКИ.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ЭлементТипаКИ = Элементы.Добавить("ЭлементТипаКИПочта", Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
		ЭлементТипаКИ.Заголовок = Адрес.Представление;
		ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементТипаКИ.ИмяКоманды = "ЭлементТипаКИПочта";
		
		Если КоличествоКИ > 1 Тогда
			
			ЭлементТипаКИ.АвтомаксимальнаяШирина	= Ложь;
			Если СтрДлина(ЭлементТипаКИ.Заголовок) > 14 Тогда
				ЭлементТипаКИ.МаксимальнаяШирина	= 10;
			ИначеЕсли СтрДлина(ЭлементТипаКИ.Заголовок) > 10 Тогда
				ЭлементТипаКИ.МаксимальнаяШирина	= 8;
			Иначе
				ЭлементТипаКИ.МаксимальнаяШирина	= 6;
			КонецЕсли;	
			ЭлементТипаКИ.РастягиватьПоГоризонтали	= Истина;
			ЭлементТипаКИ.РастягиватьПоВертикали	= Ложь;
			
			Если Команды.Найти("КнопкаПодменюТипаКИПочта") = Неопределено Тогда
				Команда = Команды.Добавить("КнопкаПодменюТипаКИПочта");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияПочтаНажатие";
			КонецЕсли;
			
			КнопкаПодменюТипаКИ = Элементы.Добавить("КнопкаПодменюТипаКИПочта", Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
			КнопкаПодменюТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			КнопкаПодменюТипаКИ.Картинка = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
			КнопкаПодменюТипаКИ.Отображение = ОтображениеКнопки.Картинка;
			КнопкаПодменюТипаКИ.ИмяКоманды = "КнопкаПодменюТипаКИПочта";
			
			КнопкаПодменюТипаКИ.Ширина	= 3;
			КнопкаПодменюТипаКИ.Высота	= 1;
			КнопкаПодменюТипаКИ.РастягиватьПоГоризонтали	= Ложь;
			КнопкаПодменюТипаКИ.РастягиватьПоВертикали		= Ложь;
			
			ПодменюТипаКИ = Элементы.Добавить("ПодменюТипаКИПочта", Тип("ГруппаФормы"), ГруппуЗначенияТипаКИ);
			ПодменюТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ПодменюТипаКИ.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
			ПодменюТипаКИ.Заголовок = " ";
			ПодменюТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ПодменюТипаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ПодменюТипаКИ.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
			ПодменюТипаКИ.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			ПодменюТипаКИ.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
			ПодменюТипаКИ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			ГруппаТипаКИПочтаКонтакт = Элементы.Добавить("ГруппаТипаКИПочтаКонтакт", Тип("ГруппаФормы"), ПодменюТипаКИ);
			ГруппаТипаКИПочтаКонтакт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТипаКИПочтаКонтакт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТипаКИПочтаКонтакт.РастягиватьПоВертикали = Ложь;
			ГруппаТипаКИПочтаКонтакт.ОтображатьЗаголовок = Истина;
			ГруппаТипаКИПочтаКонтакт.Заголовок = Нстр("ru='Контакт'");
			ГруппаТипаКИПочтаКонтакт.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			ГруппаТипаКИПочтаКонтакт.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТипаКИПочтаКонтакт.ЦветТекстаЗаголовка = WebЦвета.Черный;
			ГруппаТипаКИПочтаКонтакт.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			
			ГруппаТипаКИПочтаПартнер = Элементы.Добавить("ГруппаТипаКИПочтаПартнер", Тип("ГруппаФормы"), ПодменюТипаКИ);
			ГруппаТипаКИПочтаПартнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТипаКИПочтаПартнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТипаКИПочтаПартнер.РастягиватьПоВертикали = Ложь;
			ГруппаТипаКИПочтаПартнер.ОтображатьЗаголовок = Истина;
			ГруппаТипаКИПочтаПартнер.Заголовок = Нстр("ru='Клиент'");
			ГруппаТипаКИПочтаПартнер.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			ГруппаТипаКИПочтаПартнер.ЦветТекстаЗаголовка = WebЦвета.Черный;
			ГруппаТипаКИПочтаПартнер.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			
			Для Н = 0 По КоличествоКИ - 1 Цикл
				ИмяРеквизита = "ЭлементТипаКИПочта" + Строка(Н);
				Если Команды.Найти(ИмяРеквизита) = Неопределено Тогда
					Команда = Команды.Добавить(ИмяРеквизита);
					Команда.Действие = "Подключаемый_КонтактнаяИнформацияПочтаНажатие";
				КонецЕсли;
				
				ЭлементТипаКИГруппа = Элементы.Добавить(ИмяРеквизита + "Группа", Тип("ГруппаФормы"),
					 ?(СписокАдресов[Н].Значение.ТипОбъекта = "Партнер", ГруппаТипаКИПочтаПартнер, ГруппаТипаКИПочтаКонтакт)); 
				ЭлементТипаКИГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЭлементТипаКИГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ЭлементТипаКИГруппа.ОтображатьЗаголовок = Ложь;
				ЭлементТипаКИГруппа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
				
				ЭлементТипаКИЗаголовок = Элементы.Добавить(ИмяРеквизита + "Заголовок", Тип("ДекорацияФормы"), ЭлементТипаКИГруппа);
				ЭлементТипаКИЗаголовок.Заголовок = СписокАдресов[Н].Значение.Вид;
				
				ЭлементТипаКИ = Элементы.Добавить(ИмяРеквизита, Тип("КнопкаФормы"), ЭлементТипаКИГруппа);
				ЭлементТипаКИ.Заголовок =  СписокАдресов[Н].Значение.Представление;
				ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				ЭлементТипаКИ.ИмяКоманды = ИмяРеквизита;
				ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				
			КонецЦикла;
		Иначе
			Декорация = Элементы.Добавить("ПустаяДекорацияТипаКИПочта", Тип("ДекорацияФормы"), ГруппуЗначенияТипаКИ);
			Декорация.Вид = ВидДекорацииФормы.Надпись;
			Декорация.Ширина = 2;
			Декорация.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
		Элементы.ГруппаПочтаНет.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВывестиКонтактнуюИнформациюОбъектаТелефон(СписокТелефонов)
	ЭлементРазмещения = Элементы.ГруппаКИТелефонНовая;
	Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	ПанельКИОбъекта = Элементы.Добавить("ГруппаТипаКИТелефон", Тип("ГруппаФормы"), ЭлементРазмещения);
	ПанельКИОбъекта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПанельКИОбъекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ПанельКИОбъекта.ОтображатьЗаголовок = Ложь;

	КоличествоКИ = СписокТелефонов.Количество();
	Если КоличествоКИ > 0 Тогда
		Элементы.ГруппаТелефонЕсть.Видимость = Истина;
		Адрес = СписокТелефонов[0].Значение;
		Если Команды.Найти("ЭлементТипаКИТелефон") = Неопределено Тогда
			Команда = Команды.Добавить("ЭлементТипаКИТелефон");
			Команда.Действие = "Подключаемый_КонтактнаяИнформацияТелефонНажатие";
		КонецЕсли;
		
		ГруппуТипаКИ = Элементы.Добавить("ГруппаТипаКИТелефонОбщая", Тип("ГруппаФормы"), ПанельКИОбъекта);
		ГруппуТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппуТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппуТипаКИ.ОтображатьЗаголовок = Ложь;
		
		ГруппуЗначенияТипаКИ = Элементы.Добавить("ГруппаТипаКИТелефонВертикаль", Тип("ГруппаФормы"), ГруппуТипаКИ);
		ГруппуЗначенияТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппуЗначенияТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппуЗначенияТипаКИ.РастягиватьПоВертикали = Ложь;
		ГруппуЗначенияТипаКИ.ОтображатьЗаголовок = Ложь;
		ГруппуЗначенияТипаКИ.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ТелефонЕстьВСписке = Ложь;
		Если Не ТекТелефон = Неопределено Тогда
			Для Каждого ТекЭлемент Из СписокТелефонов Цикл
				Если ТекТелефон = ТекЭлемент.Значение.Представление Тогда
					ТелефонЕстьВСписке = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ТелефонЕстьВСписке Тогда
			ЭлементТипаКИ = Элементы.Добавить("ЭлементТипаКИТелефон", Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
			ЭлементТипаКИ.Заголовок = Адрес.Представление;
			ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ЭлементТипаКИ.ИмяКоманды = "ЭлементТипаКИТелефон";
			
			ЭлементТипаКИ.АвтомаксимальнаяШирина	= Ложь;
			Если СтрДлина(ЭлементТипаКИ.Заголовок) > 14 Тогда
				ЭлементТипаКИ.МаксимальнаяШирина	= 10;
			ИначеЕсли СтрДлина(ЭлементТипаКИ.Заголовок) > 10 Тогда
				ЭлементТипаКИ.МаксимальнаяШирина	= 8;
			Иначе
				ЭлементТипаКИ.МаксимальнаяШирина	= 6;
			КонецЕсли;	
			ЭлементТипаКИ.РастягиватьПоГоризонтали	= Истина;
			ЭлементТипаКИ.РастягиватьПоВертикали	= Ложь;
		КонецЕсли;
		
		Если Не ТелефонЕстьВСписке Или КоличествоКИ > 1 Тогда
			
			Если Команды.Найти("КнопкаПодменюТипаКИТелефон") = Неопределено Тогда
				Команда = Команды.Добавить("КнопкаПодменюТипаКИТелефон");
				Команда.Действие = "Подключаемый_КонтактнаяИнформацияТелефонНажатие";
			КонецЕсли;
			
			КнопкаПодменюТипаКИ = Элементы.Добавить("КнопкаПодменюТипаКИТелефон", Тип("КнопкаФормы"), ГруппуЗначенияТипаКИ);
			КнопкаПодменюТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			КнопкаПодменюТипаКИ.Картинка = БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой;
			КнопкаПодменюТипаКИ.Отображение = ОтображениеКнопки.Картинка;
			КнопкаПодменюТипаКИ.ИмяКоманды = "КнопкаПодменюТипаКИТелефон";
			
			КнопкаПодменюТипаКИ.Ширина	= 3;
			КнопкаПодменюТипаКИ.Высота	= 1;
			КнопкаПодменюТипаКИ.РастягиватьПоГоризонтали	= Ложь;
			КнопкаПодменюТипаКИ.РастягиватьПоВертикали		= Ложь;
			
			ПодменюТипаКИ = Элементы.Добавить("ПодменюТипаКИТелефон", Тип("ГруппаФормы"), ГруппуЗначенияТипаКИ);
			ПодменюТипаКИ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ПодменюТипаКИ.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
			ПодменюТипаКИ.Заголовок = " ";
			ПодменюТипаКИ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ПодменюТипаКИ.Отображение = ОтображениеОбычнойГруппы.Нет;
			ПодменюТипаКИ.ЦветТекстаЗаголовка = ЦветаСтиля.CRM_СерыйДляПодложек;
			ПодменюТипаКИ.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			ПодменюТипаКИ.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
			ПодменюТипаКИ.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			ГруппаТипаКИТелефонКонтакт = Элементы.Добавить("ГруппаТипаКИТелефонКонтакт", Тип("ГруппаФормы"), ПодменюТипаКИ);
			ГруппаТипаКИТелефонКонтакт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТипаКИТелефонКонтакт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТипаКИТелефонКонтакт.РастягиватьПоВертикали = Ложь;
			ГруппаТипаКИТелефонКонтакт.ОтображатьЗаголовок = Истина;
			ГруппаТипаКИТелефонКонтакт.Заголовок = Нстр("ru='Контакт'");
			ГруппаТипаКИТелефонКонтакт.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			ГруппаТипаКИТелефонКонтакт.ЦветТекстаЗаголовка = WebЦвета.Черный;
			ГруппаТипаКИТелефонКонтакт.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			
			ГруппаТипаКИТелефонПартнер = Элементы.Добавить("ГруппаТипаКИТелефонПартнер", Тип("ГруппаФормы"), ПодменюТипаКИ);
			ГруппаТипаКИТелефонПартнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТипаКИТелефонПартнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТипаКИТелефонПартнер.РастягиватьПоВертикали = Ложь;
			ГруппаТипаКИТелефонПартнер.ОтображатьЗаголовок = Истина;
			ГруппаТипаКИТелефонПартнер.Заголовок = Нстр("ru='Клиент'");
			ГруппаТипаКИТелефонПартнер.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			ГруппаТипаКИТелефонПартнер.ЦветТекстаЗаголовка = WebЦвета.Черный;
			ГруппаТипаКИТелефонПартнер.ШрифтЗаголовка = Новый Шрифт(, , Истина);
			
			Для Н = 0 По КоличествоКИ - 1 Цикл
				ИмяРеквизита = "ЭлементТипаКИТелефон" + Строка(Н);
				Если Команды.Найти(ИмяРеквизита) = Неопределено Тогда
					Команда = Команды.Добавить(ИмяРеквизита);
					Команда.Действие = "Подключаемый_КонтактнаяИнформацияТелефонНажатие";
				КонецЕсли;
				
				ЭлементТипаКИГруппа = Элементы.Добавить(ИмяРеквизита + "Группа", Тип("ГруппаФормы"),
					 ?(СписокТелефонов[Н].Значение.ТипОбъекта = "Партнер", ГруппаТипаКИТелефонПартнер, ГруппаТипаКИТелефонКонтакт)); 
				ЭлементТипаКИГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЭлементТипаКИГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ЭлементТипаКИГруппа.ОтображатьЗаголовок = Ложь;
				ЭлементТипаКИГруппа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
				
				ЭлементТипаКИЗаголовок = Элементы.Добавить(ИмяРеквизита + "Заголовок", Тип("ДекорацияФормы"), ЭлементТипаКИГруппа);
				ЭлементТипаКИЗаголовок.Заголовок = СписокТелефонов[Н].Значение.Вид;
				
				ЭлементТипаКИ = Элементы.Добавить(ИмяРеквизита, Тип("КнопкаФормы"), ЭлементТипаКИГруппа);
				ЭлементТипаКИ.Заголовок =  СписокТелефонов[Н].Значение.Представление;
				ЭлементТипаКИ.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				ЭлементТипаКИ.ИмяКоманды = ИмяРеквизита;
				ЭлементТипаКИ.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				
			КонецЦикла;
		Иначе
			Декорация = Элементы.Добавить("ПустаяДекорацияТипаКИТелефон", Тип("ДекорацияФормы"), ГруппуЗначенияТипаКИ);
			Декорация.Вид = ВидДекорацииФормы.Надпись;
			Декорация.Ширина = 2;
			Декорация.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаТелефонЕсть.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Форма.Элементы.ГруппаПериодВремя.Видимость = (Не Форма.Объект.НаВесьДень);
	Если Форма.ТолькоПросмотр Тогда
		Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= Ложь;
		Форма.Элементы.ДатаНачало.Доступность										= Ложь;
		Форма.Элементы.ДатаОкончания.Доступность									= Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуСКД(СписокСсылок, ЭтоПартнеры = Ложь)
	
	Если ТолькоОсновныеКонтактныеЛица Тогда // список должен состоять из СправочникСсылка.Партнеры
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка КАК Партнер,
		|	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	НЕ Партнеры.ПометкаУдаления
		|	И НЕ Партнеры.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления
		|	И Партнеры.Ссылка В (&МассивПартнеров)
		|" + ?(НеЗаполнятьОтписавшимисяОтРассылок, "И (НЕ Партнеры.CRM_ОтписалсяОтEmailРассылок)", "");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
		ТабПартнеров = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаб Из ТабПартнеров Цикл
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				Если НеЗаполнятьОтписавшимисяОтРассылок
					 И СтрокаТаб.КонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок Тогда Продолжить; КонецЕсли;
			Иначе
				Если НеЗаполнятьОтписавшимисяОтРассылок
					 И СтрокаТаб.Партнер.CRM_ОтписалсяОтEmailРассылок Тогда Продолжить; КонецЕсли;
			КонецЕсли;
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
				 СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
			?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Телефон = СписокТелефонов[0].Значение.Представление;
			ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Партнер = СтрокаТаб.Партнер;
				Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // по алгоритму ЗаполнитьПоРезультатуОтчета	
		Если ЭтоПартнеры Тогда
			
			// Удалить из списка партнеров, отписавшихся от рассылок
			Если НеЗаполнятьОтписавшимисяОтРассылок Тогда
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Партнеры.Ссылка КАК Партнер
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	НЕ Партнеры.ПометкаУдаления
				|	И Партнеры.Ссылка В (&МассивПартнеров)
				|	И Партнеры.CRM_ОтписалсяОтEmailРассылок";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					НайденныйЭлемент = СписокСсылок.НайтиПоЗначению(Выборка.Партнер);
					СписокСсылок.Удалить(НайденныйЭлемент);
				КонецЦикла;
				
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
			|ПОМЕСТИТЬ тмпКЛ
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец В(&МассивПартнеров)
			|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
			|	" + ?(НеЗаполнятьОтписавшимисяОтРассылок, "И НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок
			                                               |	И НЕ КонтактныеЛицаПартнеров.Владелец.CRM_ОтписалсяОтEmailРассылок", "") + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	тмпКЛ.КонтактноеЛицо КАК КонтактноеЛицо,
			|	тмпКЛ.Партнер КАК Партнер
			|ИЗ
			|	тмпКЛ КАК тмпКЛ";
			
			Запрос = Новый Запрос;		
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());	
			
			ТабПартнеров = Запрос.Выполнить().Выгрузить();
			
			МассивКЛ = ТабПартнеров.ВыгрузитьКолонку("КонтактноеЛицо");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид",		ВидКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип",		Перечисления.ТипыКонтактнойИнформации.Телефон);
			Запрос.УстановитьПараметр("МассивПартнеров",		МассивКЛ);
			ТекстЗапроса = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК КонтактноеЛицо,
			|	КонтактнаяИнформация.Ссылка.Наименование КАК КонтактноеЛицоНаименование,
			|	КонтактнаяИнформация.Ссылка.Владелец КАК Партнер,
			|	КонтактнаяИнформация.Ссылка.Владелец.Наименование КАК ПартнерНаименование,
			|	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
			|	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Ссылка В (&МассивПартнеров)
			|	" + ?(ВидКонтактнойИнформации.Пустая(), "", "И КонтактнаяИнформация.Вид = &Вид") + "
			|	И КонтактнаяИнформация.Представление <> """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерНаименование,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
			|	ИспользоватьДляОповещений УБЫВ,
			|	ВидРеквизитДопУпорядочивания";
			
			Запрос.Текст = ТекстЗапроса;
			ТабАдресов = Запрос.Выполнить().Выгрузить();
			
			МассивПартнеровИсключать = ТабАдресов.ВыгрузитьКолонку("Партнер");
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Вид",		ВидКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип",		Перечисления.ТипыКонтактнойИнформации.Телефон);
			Запрос.УстановитьПараметр("МассивПартнеровИсключать",		МассивПартнеровИсключать);
			Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());
			ТекстЗапроса = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Ссылка КАК Партнер,
			|	КонтактнаяИнформация.Ссылка.Наименование КАК ПартнерНаименование,
			|	Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо,
			|	"""" КАК КонтактноеЛицоНаименование,
			|	КонтактнаяИнформация.Вид.CRM_ИспользоватьДляОповещений КАК ИспользоватьДляОповещений,
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи КАК CRM_ОсновнойДляСвязи,
			|	КонтактнаяИнформация.Вид.РеквизитДопУпорядочивания КАК ВидРеквизитДопУпорядочивания
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Тип = &Тип
			|	И КонтактнаяИнформация.Ссылка В (&МассивПартнеров)
			|	И НЕ КонтактнаяИнформация.Ссылка В (&МассивПартнеровИсключать)
			|	" + ?(ВидКонтактнойИнформации.Пустая(), "", "И КонтактнаяИнформация.Вид = &Вид") + "
			|	И КонтактнаяИнформация.Представление <> """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПартнерНаименование,
			|	КонтактнаяИнформация.CRM_ОсновнойДляСвязи УБЫВ,
			|	ИспользоватьДляОповещений УБЫВ,
			|	ВидРеквизитДопУпорядочивания";
			
			Запрос.Текст = ТекстЗапроса;
			ТабАдресовДоп = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаТаб Из ТабАдресовДоп Цикл
				СтрокаАдрес = ТабАдресов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАдрес, СтрокаТаб);
			КонецЦикла;
			
			Если НЕ НеЗаполнятьСПустымиТелефонами Тогда
				МассивПартнеровИсключать = ТабАдресов.ВыгрузитьКолонку("Партнер");
				МассивКЛИсключать = ТабАдресов.ВыгрузитьКолонку("КонтактноеЛицо");
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
				|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
				|ПОМЕСТИТЬ тмпКЛ
				|ИЗ
				|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
				|ГДЕ
				|	КонтактныеЛицаПартнеров.Владелец В(&МассивПартнеров)
				|	И НЕ КонтактныеЛицаПартнеров.Владелец В (&МассивПартнеровИсключать)
				|	И НЕ КонтактныеЛицаПартнеров.Ссылка В (&МассивКЛИсключать)
				|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Партнеры.Ссылка КАК Партнер,
				|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо
				|ПОМЕСТИТЬ тмпПартнеры
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	Партнеры.Ссылка В(&МассивПартнеров)
				|	И НЕ Партнеры.Ссылка В (&МассивПартнеровИсключать)
				|	И НЕ Партнеры.Ссылка В
				|				(ВЫБРАТЬ
				|					тмпКЛ.Партнер КАК Партнер
				|				ИЗ
				|					тмпКЛ КАК тмпКЛ)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВложенныйЗапрос.КонтактноеЛицо КАК КонтактноеЛицо,
				|	ВложенныйЗапрос.Партнер КАК Партнер
				|ИЗ
				|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		тмпКЛ.КонтактноеЛицо КАК КонтактноеЛицо,
				|		тмпКЛ.Партнер КАК Партнер
				|	ИЗ
				|		тмпКЛ КАК тмпКЛ
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		тмпПартнеры.КонтактноеЛицо,
				|		тмпПартнеры.Партнер
				|	ИЗ
				|		тмпПартнеры КАК тмпПартнеры) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.КонтактноеЛицо,
				|	ВложенныйЗапрос.Партнер";
				
				Запрос = Новый Запрос;		
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("МассивПартнеров", СписокСсылок.ВыгрузитьЗначения());	
				Запрос.УстановитьПараметр("МассивПартнеровИсключать", МассивПартнеровИсключать);	
				Запрос.УстановитьПараметр("МассивКЛИсключать", МассивКЛИсключать);	
				
				ТабПартнеров = Запрос.Выполнить().Выгрузить();
				
				Для Каждого СтрокаТаб Из ТабПартнеров Цикл
					СтрокаАдрес = ТабАдресов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаАдрес, СтрокаТаб);
				КонецЦикла;
			КонецЕсли;	
			
			СтарыйПартнер = "";
			СтароеКЛ = "";
			Для Каждого СтрокаТаб Из ТабАдресов Цикл
				СтруктураПоиска = Новый Структура("Партнер,КонтактноеЛицо", СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо);
				МассивСтрок = Объект.Участники.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				СтарыйПартнер = СтрокаТаб.Партнер;
				СтароеКЛ = СтрокаТаб.КонтактноеЛицо;
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Партнер        = СтрокаТаб.Партнер;
				НоваяСтрока.КонтактноеЛицо = СтрокаТаб.КонтактноеЛицо;
				НоваяСтрока.Телефон        = СтрокаТаб.Представление;
			КонецЦикла;
			Объект.Участники.Сортировать("Партнер, КонтактноеЛицо");
			
		Иначе
			Для Каждого ЭлементСписка Из СписокСсылок Цикл
				
				Если Не ЭлементСписка.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
					
					ТекПартнер = ЭлементСписка.Значение;
					
					Если ТекПартнер.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
						ТекКл = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
					Иначе
						ТекКл = ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
					
					ТекПартнер = ЭлементСписка.Значение;
					ТекКл      = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
					
				Иначе
					
					Если ЭлементСписка.Значение.ПометкаУдаления Тогда
						Продолжить;
					КонецЕсли;
					
					ТекКл      = ЭлементСписка.Значение;
					ТекПартнер = ТекКл.Владелец;
					
				КонецЕсли;
				
				СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, ТекКл),
				?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено), ТипЗнч(ТекПартнер) =
					Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока = Объект.Участники.Добавить();
					НоваяСтрока.Партнер			= ТекПартнер;
					НоваяСтрока.КонтактноеЛицо	= ТекКл;
					НоваяСтрока.Телефон			= СписокТелефонов[0].Значение.Представление;
				ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока = Объект.Участники.Добавить();
					НоваяСтрока.Партнер			= ТекПартнер;
					НоваяСтрока.КонтактноеЛицо	= ТекКл;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиСтрок()
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.Участники);						
КонецПроцедуры	

// Процедура формирует заголовок формы.
//
// Параметры:
//	Нет
//
&НаСервере
Процедура ОбновитьЗаголовокФормы()
	Тема = Объект.Тема;
	Заголовок = Нстр("ru='Телемаркетинг '") + ?(ЗначениеЗаполнено(Тема), ": " + Тема, "") 
		+ Нстр("ru=' от '") + Формат(Объект.Дата,
		 "ДЛФ = ДД");
КонецПроцедуры

// Процедура вычисляет общее количество участников
//
// Параметры:
//	Нет
//
&НаСервере
Процедура ВычислитьОбщееЧислоУчастников()
	КоличествоУчастников = Объект.Участники.Количество();
КонецПроцедуры

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Результат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
	Иначе
		Результат = Новый СписокЗначений;
		ПоследнийЭлемент = Неопределено;
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = СтрНайти(Стр, "=");
				Если Поз <> 0 Тогда
					ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз + 1), Лев(Стр, Поз - 1));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧПоСегменту()
	
	Запрос = Новый Запрос;
	Если Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически
		 ИЛИ Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		// Для периодически обновляемых сегментов всеравно получаем клиентов вручную - как и по динамическим - чтобы не
		// возникало вопросов о том, что сегмент в настоящий момент может быть не актуален.
		РеквизитыСКДСегмента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
			
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Сегмент,
				 РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла; // Подключить поля запроса списка.
			
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД, НастройкиСписка, , ,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе
		Запрос.УстановитьПараметр("Сегмент", Сегмент);
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент КАК Сегмент,
               |	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент КАК Сегмент,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабПартнеров Цикл
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
			?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
			НоваяСтрока.Телефон = СписокТелефонов[0].Значение.Представление;
		ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
			
			ТекПартнер = ЭлементСписка.Значение;
			
			Если ТекПартнер.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
				ТекКл = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			Иначе
				ТекКл = ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			
			ТекПартнер = ЭлементСписка.Значение;
			ТекКл      = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
		Иначе
			
			Если ЭлементСписка.Значение.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ТекКл      = ЭлементСписка.Значение;
			ТекПартнер = ТекКл.Владелец;
			
		КонецЕсли;
		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, ТекКл),
													?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено), ТипЗнч(ТекПартнер) =
														Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
			НоваяСтрока.Телефон			= СписокТелефонов[0].Значение.Представление;
		ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
		КонецЕсли;
	КонецЦикла;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокТелефонов(ТекущиеДанные, ВидКИ = Неопределено,
	 ПотенциальныеКлиенты = Ложь,
	 ТекТелефон = Неопределено)
	
	Если ТипЗНч(ТекущиеДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ПотенциальныеКлиенты = Истина;
	КонецЕсли;	
	
	Если НЕ ПотенциальныеКлиенты Тогда
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ТекущиеДанные.Партнер,
										?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо, Неопределено),
										Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКИ);
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные.Партнер,
			 Перечисления.ТипыКонтактнойИнформации.Телефон);									
	КонецЕсли;									
	
	СписокТелефонов = Новый СписокЗначений;
	
	Если НЕ Таб = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, СтрокаТаб.Ссылка);
			СтруктураНомера.Вставить("Вид"			, СтрокаТаб.Вид);
			СтруктураНомера.Вставить("ТипОбъекта"	,
				 ?(ТипЗнч(СтрокаТаб.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), "Контакт",
				 "Партнер"));
			СписокТелефонов.Добавить(СтруктураНомера, "   " + СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ТекТелефон = Неопределено И НЕ ПустаяСтрока(ТекТелефон) Тогда
		Если СписокТелефонов.Количество() = 0 И Не ЗначениеЗаполнено(ТекущиеДанные.Партнер)
			 И ТекущиеДанные.КонтактноеЛицо.Пустая() Тогда
			СтруктураНомера = Новый Структура;
			СтруктураНомера.Вставить("Представление"	, ТекТелефон);
			СтруктураНомера.Вставить("Объект"			, Неопределено);
			СтруктураНомера.Вставить("Вид"			, НСтр("ru='Партнер'"));
			СтруктураНомера.Вставить("ТипОбъекта"	, "Партнер");
			СписокТелефонов.Добавить(СтруктураНомера, "   " + СокрЛП(СтруктураНомера.Вид) + ": " + ТекТелефон);
		Иначе
			Индекс = 0;
			Для Каждого СтрокаТелефон Из СписокТелефонов Цикл
				
				СтруктураНомера = СтрокаТелефон.Значение;
				Если СтруктураНомера.Представление = ТекТелефон Тогда
					Прервать;
				КонецЕсли;	
				Индекс = Индекс + 1;
			КонецЦикла;	
			Если Индекс = СписокТелефонов.Количество() Тогда
				СтруктураНомера = Новый Структура;	
				СтруктураНомера.Вставить("Представление"	, ТекТелефон);
				СтруктураНомера.Вставить("Объект"			, Неопределено);
				СтруктураНомера.Вставить("Вид"			, НСтр("ru='Партнер'"));
				СтруктураНомера.Вставить("ТипОбъекта"	, "Партнер");
				СписокТелефонов.Добавить(СтруктураНомера, "   " + СокрЛП(СтруктураНомера.Вид) + ": " + ТекТелефон);
			КонецЕсли;	
			СписокТелефонов.Сдвинуть(Индекс, -Индекс);
		КонецЕсли;
	КонецЕсли;
	Возврат СписокТелефонов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	КЛПартнера = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	
	Если Не ТекПартнер.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
		КЛПартнера = ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	КонецЕсли;
	
	Возврат КЛПартнера;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаОкончания);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УдалитьОформленияСОдинаковымиЗначениямиТЧ(ИмяТаблицы = "Участники")
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя.
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если	ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных(ИмяТаблицы) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если	ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект." 
					+ ИмяТаблицы 
					+ ".ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСОдинаковымиЗначениямиТЧ(ИмяТаблицы = "Участники", ИмяРеквизита = "Телефон")
	
	УдалитьОформленияСОдинаковымиЗначениямиТЧ(ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216, 218, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 195, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 172, 154));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 156));
	МассивЦветов.Добавить(Новый Цвет(218, 154, 180));
	МассивЦветов.Добавить(Новый Цвет(196, 154, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 162, 218));
	МассивЦветов.Добавить(Новый Цвет(154, 192, 218));
	МассивЦветов.Добавить(Новый Цвет(148, 218, 228));
	
	УжеПроверенныеЗначения = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	ТЧ = Объект[ИмяТаблицы];
	Для Каждого СтрокаТаблицы Из ТЧ Цикл
		Значение = СтрокаТаблицы[ИмяРеквизита];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если УжеПроверенныеЗначения.Найти(Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УжеПроверенныеЗначения.Добавить(Значение);
		
		НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура(ИмяРеквизита, Значение));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			Если ТекущийИндексИдентификатораОформления > МассивЦветов.ВГраница() Тогда
				ТекущийИндексИдентификатораОформления = 0;
			КонецЕсли;
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
			НовоеПоле.Использование = Истина;
			
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				
				ИндексСтроки = ТЧ.Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					ТЧ.Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
	Если ДатаНачало > ДатаОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаОкончание = ДатаНачало;
		Иначе
			ДатаНачало = ДатаОкончание;
		КонецЕсли;
	КонецЕсли;
	Если ВремяНачало > ВремяОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяОкончание = ВремяНачало;
		Иначе
			ВремяНачало = ВремяОкончание;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачало) Тогда
		ВремяНачало = Дата("00010101");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончание) Тогда
		ВремяОкончание = Дата("00010101");
	КонецЕсли;
	
	Объект.ДатаНачала		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	Объект.ДатаОкончания	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработаноНеДозвонились(Тип, Текущий = Неопределено, Зависимый = Неопределено)
	
	КоличествоОбработано         = 0;
	КоличествоНеДозвонились      = 0;
	КоличествоОтказано           = 0;
	КоличествоПерезвонитьПозднее = 0;
	Для Каждого СтрокаТЧ Из Объект.Участники Цикл
		Если СтрокаТЧ.Обработан Тогда
			КоличествоОбработано 	= КоличествоОбработано + 1;
		КонецЕсли;
		Если СтрокаТЧ.НеДозвонились Тогда
			КоличествоНеДозвонились = КоличествоНеДозвонились + 1;
		КонецЕсли;
		Если СтрокаТЧ.Отказ Тогда
			КоличествоОтказано = КоличествоОтказано + 1;
		КонецЕсли;
		Если СтрокаТЧ.ПерезвонитьПозднее Тогда
			КоличествоПерезвонитьПозднее = КоличествоПерезвонитьПозднее + 1;
		КонецЕсли;
	КонецЦикла;
		
	ИтогоНеДозвонились	= "" + КоличествоНеДозвонились + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоНеДозвонились / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	ИтогоОбработано		= "" + КоличествоОбработано + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоОбработано / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	ИтогоОтказано		= "" + КоличествоОтказано + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоОтказано / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	ИтогоПерезвонитьПозднее = "" + КоличествоПерезвонитьПозднее + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоПерезвонитьПозднее / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла =
				ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОснованиеСтруктураВложений = Новый Структура;
			ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.Сценарий, ОснованиеСтруктураВложений);
				
			СценарийДокумент.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
			
		ИначеЕсли Параметры.Свойство("ТекстHTML") И Параметры.Свойство("Вложения") Тогда
			
			СценарийДокумент.УстановитьHTML(Параметры.ТекстHTML, Параметры.Вложения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер / 1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		СтруктураВложений = Новый Структура;
		
		Объект.Сценарий = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Объект.Ссылка, Объект.Сценарий, СтруктураВложений
		);
		
		СценарийДокумент.УстановитьHTML(Объект.Сценарий, СтруктураВложений);
		
		ТаблицаВложений = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Объект.Ссылка);
		
		Для Каждого ТекущаяСтрокаВложения Из ТаблицаВложений Цикл
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла					= ТекущаяСтрокаВложения.Наименование;
			НоваяСтрока.ИдентификаторФайлаДляHTML	= ТекущаяСтрокаВложения.ИДФайлаЭлектронногоПисьма;
			НоваяСтрока.Картинка					= ?(
				СтруктураВложений.Свойство(НоваяСтрока.ИмяФайла),
				СтруктураВложений[НоваяСтрока.ИмяФайла],
				Неопределено
			);
		КонецЦикла;
	КонецЕсли;
	Элементы.Сценарий.Доступность = Не ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоМаркетинговойКампании(Кампания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиПервичногоИнтереса.Партнер КАК Партнер
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса = &Кампания";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для Каждого СтрокаМассива Из Результат Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = СтрокаМассива;
			НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива);
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
				 НоваяСтрока.Партнер, НоваяСтрока.КонтактноеЛицо),
				 Неопределено);
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.Телефон	= СписокТелефонов[0].Значение.Представление;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда			
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = ?(ЗначениеЗаполнено(СтрокаМассива.Партнер), СтрокаМассива.Партнер, СтрокаМассива);
			Если ЗначениеЗаполнено(СтрокаМассива.Партнер) Тогда
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);				
			КонецЕсли;				
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
				 НоваяСтрока.Партнер, Неопределено), ,
				 Истина);			
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.Телефон	= СписокТелефонов[0].Значение.Представление;
			КонецЕсли;			
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;		
	
	Если Результат.Количество() > 0 Тогда
		УдалитьДублиСтрок();				
	КонецЕсли;		
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();	
	ВычислитьОбщееЧислоУчастников();	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнениеУчастникамиМаркетинговойКампании(Кампания)

	Для Каждого СтрокаМассива Из Кампания.ПартнерыИКонтактныеЛица Цикл
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.Партнер = СтрокаМассива.Партнер;
		НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива.Партнер);
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 НоваяСтрока.Партнер, НоваяСтрока.КонтактноеЛицо),
			 Неопределено);
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока.Телефон	= СписокТелефонов[0].Значение.Представление;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;
	
	Если Кампания.ПартнерыИКонтактныеЛица.Количество() > 0 Тогда
		УдалитьДублиСтрок();
	КонецЕсли;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();

КонецПроцедуры

// Пока не используется, тестовый вариант расчёта трудоёмкости
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		ВремяНачалоПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект, ОбъектЗначение, ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение, Объект);
	Объект.CRM_Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения", Новый Структура("Объект,ТипФормы", АдресВХранилище, "ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта", ПолучитьПараметрыДляВыгрузки(),
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАнкетыУчастников(ПроверятьЗавершенностьОпроса = Истина)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если НЕ ТипыРеспондентовОпроса.Пользователи Тогда
			
			ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Объект.Опрос);
				
			Для каждого СтрокаУчастники Из Объект.Участники Цикл
				
				СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(?(ТипыРеспондентовОпроса.Партнеры,
					 СтрокаУчастники.Партнер, СтрокаУчастники.КонтактноеЛицо),
					 "Респондент");
				
				Если СтрокаАнкетаРеспондента <> Неопределено Тогда
					
					СтрокаУчастники.Анкета = СтрокаАнкетаРеспондента.Анкета;
					
					Если ПроверятьЗавершенностьОпроса И СтрокаАнкетаРеспондента.ОпросЗавершен Тогда
						
						СтрокаУчастники.Обработан = Истина;
					
					КонецЕсли; 
				
				КонецЕсли;	
			
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры// ЗаполнитьАнкетыУчастников()

&НаКлиенте
Процедура ЗаполнитьАнкетуСтроки(ТекДанные)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.Партнеры Тогда
					
			Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
				
				СтруктураАнкеты = ПолучитьАнкетуРеспондента(Объект.Опрос, ТекДанные.Партнер);
				
				Если СтруктураАнкеты.ЕстьАнкета Тогда
					
					ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураАнкеты);
					
				КонецЕсли;
				
			Иначе
				
				ТекДанные.Анкета = ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");				
				
			КонецЕсли;	
			
		ИначеЕсли ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) Тогда
				
				СтруктураАнкеты = ПолучитьАнкетуРеспондента(Объект.Опрос, ТекДанные.КонтактноеЛицо);
				
				Если СтруктураАнкеты.ЕстьАнкета Тогда
					
					ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураАнкеты);
					
				КонецЕсли;
				
			Иначе
				
				ТекДанные.Анкета = ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");				
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАнкетуСтроки()

&НаСервереБезКонтекста
Функция ЕстьРеспонденты(НазначениеОпросаСсылка)

	Возврат НазначениеОпросаСсылка.Респонденты.Количество() > 0; 

КонецФункции // ЕстьРеспонденты()

&НаСервереБезКонтекста
Функция ПолучитьПоследниеАнкетыРеспондентов(Опрос, Респонденты = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	              |	МАКСИМУМ(Анкета.Дата) КАК Дата,
	              |	Анкета.Респондент КАК Респондент
	              |ПОМЕСТИТЬ ДатыПоследнихАнкет
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Анкета.Респондент
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Анкета.Дата КАК Дата,
	              |	Анкета.Респондент КАК Респондент,
	              |	Анкета.Ссылка КАК Анкета,
	              |	Анкета.Проведен КАК ОпросЗавершен
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПоследнихАнкет КАК ДатыПоследнихАнкет
	              |		ПО Анкета.Дата = ДатыПоследнихАнкет.Дата
	              |			И Анкета.Респондент = ДатыПоследнихАнкет.Респондент
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос";
				  
	Запрос.УстановитьПараметр("Опрос", Опрос);
	
	Если ЗначениеЗаполнено(Респонденты) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Анкета.Опрос = &Опрос",
			 "Анкета.Опрос = &Опрос И Анкета.Респондент В(&Респонденты)");  
		
		Запрос.УстановитьПараметр("Респонденты", Респонденты);
		
	КонецЕсли;
	
	ТаблицаАнкет = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаАнкет;
	
КонецФункции // ПолучитьПоследниеАнкетыРеспондентов()

&НаСервереБезКонтекста
// 
//
Функция ПолучитьТипыРеспондентовОпроса(Опрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураТипов = Новый Структура;
	
	СтруктураТипов.Вставить("Партнеры", ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.Партнеры"));
	СтруктураТипов.Вставить("КонтактныеЛица",
		 ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	СтруктураТипов.Вставить("Пользователи", ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.Пользователи"));	

	Возврат СтруктураТипов;

КонецФункции // ПолучитьТипыРеспондентовОпроса()

&НаСервереБезКонтекста
Функция ПолучитьАнкетуРеспондента(Опрос, Респондент)
	
	МассивРеспондентов = Новый Массив;
	
	МассивРеспондентов.Добавить(Респондент);
	
	ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Опрос, МассивРеспондентов);
	
	СтруктураАнкеты = Новый Структура("ЕстьАнкета");
	
	Если ТаблицаАнкет.Количество() > 0 Тогда
		
		СтруктураАнкеты.ЕстьАнкета = Истина;
		
		СтруктураАнкеты.Вставить("Анкета", ТаблицаАнкет[0].Анкета);
		
		СтруктураАнкеты.Вставить("Обработан", ТаблицаАнкет[0].ОпросЗавершен);
	
	Иначе
	
		СтруктураАнкеты.ЕстьАнкета = Ложь;		
	
	КонецЕсли;	
	
	Возврат	СтруктураАнкеты;
	
КонецФункции// ПолучитьАнкетуРеспондента()	

&НаСервере
Процедура ЗаполнитьУчастниковПоОпросу(ПереноситьВсех)
	
	Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
	
	Если ТипыРеспондентовОпроса.Пользователи Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Объект.Опрос);
	
	Респонденты = Объект.Опрос.Респонденты;
	
	Для Каждого РеспондентыСтрока Из Респонденты Цикл
		
		СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(РеспондентыСтрока.Респондент, "Респондент");
		
		// Проверим, опрошен ли респондент.
		
		РеспондентОпрошен = (НЕ СтрокаАнкетаРеспондента = Неопределено И СтрокаАнкетаРеспондента.ОпросЗавершен);
		
		Если ПереноситьВсех Или НЕ РеспондентОпрошен Тогда
			
			Если ТипыРеспондентовОпроса.Партнеры Тогда
				
				МассивСтрокРеспондента = Объект.Участники.НайтиСтроки(Новый Структура("Партнер", РеспондентыСтрока.Респондент));
				
				Если МассивСтрокРеспондента.Количество() > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаРеспондента = Объект.Участники.Добавить();
				
				СтрокаРеспондента.Партнер = РеспондентыСтрока.Респондент;
				
				Если РеспондентыСтрока.Респондент.CRM_ОсновноеКонтактноеЛицо.ПометкаУдаления Тогда
					СтрокаРеспондента.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
				Иначе
					СтрокаРеспондента.КонтактноеЛицо = РеспондентыСтрока.Респондент.CRM_ОсновноеКонтактноеЛицо;
				КонецЕсли;
				
			ИначеЕсли ТипыРеспондентовОпроса.КонтактныеЛица Тогда
				
				МассивСтрокРеспондента = Объект.Участники.НайтиСтроки(Новый Структура("КонтактноеЛицо",
					 РеспондентыСтрока.Респондент));
				
				Если МассивСтрокРеспондента.Количество() > 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаРеспондента = Объект.Участники.Добавить();
				
				СтрокаРеспондента.Партнер = РеспондентыСтрока.Респондент.Владелец;
				
				СтрокаРеспондента.КонтактноеЛицо = РеспондентыСтрока.Респондент;
				
			КонецЕсли;
			
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
				 СтрокаРеспондента.Партнер,
				 СтрокаРеспондента.КонтактноеЛицо));
			
			Если СписокТелефонов.Количество() > 0 Тогда
				
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					
					СтрокаРеспондента.Телефон = ТелефонныйНомер.Представление;
					
				КонецЕсли;
				
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним анкеты
	
	Для каждого СтрокаУчастники Из Объект.Участники Цикл
		
		СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(?(ТипыРеспондентовОпроса.Партнеры,
			 СтрокаУчастники.Партнер, СтрокаУчастники.КонтактноеЛицо),
			 "Респондент");
		
		Если СтрокаАнкетаРеспондента <> Неопределено Тогда
			
			СтрокаУчастники.Анкета = СтрокаАнкетаРеспондента.Анкета;
			
			Если СтрокаАнкетаРеспондента.ОпросЗавершен Тогда
				
				СтрокаУчастники.Обработан = Истина;
			
			КонецЕсли; 
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры// ЗаполнитьУчастниковПоОпросу() 

// +СофтФон

&НаКлиенте
// Процедура - обработчик оповещения для выполнения звонка
//
// Параметры:
//	ВыбранныйНомер			- ЭлементСпискаЗначений	- Контакт
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ПозвонитьПоНомеру(ВыбранныйНомер, ДополнительныеПараметры) Экспорт
	Если ВыбранныйНомер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйНомер.Значение, ДополнительныеПараметры.Партнер,
		 ДополнительныеПараметры.ДанныеЗаполнения);
КонецПроцедуры // ПозвонитьПоНомеру()

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить"
//
Процедура Позвонить(Команда)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеЗаполнения 		= Новый Структура;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо записать документ!'"));
		Возврат;
	КонецЕсли;	
	ДанныеЗаполнения.Вставить("Проект",		Объект.Проект); 
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	НомерТелефона	= ТД.Телефон;
	Если ПустаяСтрока(НомерТелефона) Тогда
		СписокОбъектов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ТД.Партнер) Тогда
			СписокОбъектов.Добавить(ТД.Партнер);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ТД.КонтактноеЛицо) Тогда
			СписокОбъектов.Добавить(ТД.КонтактноеЛицо);
		КонецЕсли;	
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ТД.КонтактноеЛицо) Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.КонтактноеЛицо, ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ТД.Партнер) Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.Партнер, ДанныеЗаполнения);
	Иначе
		ДанныеЗаполнения.Вставить("Описание",	ТД.ПартнерСтрокой);	
		СписокТелефонов = Новый СписокЗначений;
		СписокТелефонов.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерТелефона,	","));
		Если СписокТелефонов.Количество() = 1 Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.Партнер, ДанныеЗаполнения);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Партнер",					ТД.Партнер);
			ДополнительныеПараметры.Вставить("ДанныеЗаполнения",		ДанныеЗаполнения);
			ОписаниеВыбора = Новый ОписаниеОповещения("ПозвонитьПоНомеру", ЭтотОбъект, ДополнительныеПараметры); 
			СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выберите номер телефона'"), ЭтотОбъект);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // Позвонить()

// -СофтФон

// Вызывается после выбора пользователем интереса в ТЧ Участники
//
//  Параметры
//   ВыбранныйИнтерес - Неопределено/ДокументСсылка - Результат выбора интереса
//   ДополнительныеПараметры - Структура - Дополнительные параметры, переданные в процедуру
//
&НаКлиенте
Процедура ВыборИнтересаЗавершение(ВыбранныйИнтерес, ДополнительныеПараметры) Экспорт
	Если НЕ ВыбранныйИнтерес = Неопределено Тогда
		Партнер = ДополнительныеПараметры.Партнер;
		КонтактноеЛицо = ДополнительныеПараметры.КонтактноеЛицо;
		Элементы.Участники.ТекущиеДанные.Интерес = ВыбранныйИнтерес;
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Элементы.Участники.ТекущиеДанные.Партнер = ПолучитьЗначениеРеквизита(ВыбранныйИнтерес, "Партнер");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Элементы.Участники.ТекущиеДанные.КонтактноеЛицо = ПолучитьЗначениеРеквизита(ВыбранныйИнтерес, "КонтактноеЛицо");
		КонецЕсли;
		Элементы.Участники.ТекущиеДанные.Обработан		= Истина;
		Элементы.Участники.ТекущиеДанные.НеДозвонились	= Ложь;
		Если Элементы.Панель.ТекущаяСтраница.Имя = "ГруппаСтраницаТекущийАбонент" Тогда
			ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
		КонецЕсли;
	КонецЕсли;
	ОбновитьОбработаноНеДозвонились("Открытие");
	Модифицированность = Истина;
КонецПроцедуры	

#Область РаботаСВложениями_Телемаркетинг

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	ВложенияТелемаркетинга = ПолучитьВложенияТелемаркетинга();
	Для Каждого ЭлементТаблицы Из ВложенияТелемаркетинга Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер / 1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + " (" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияТелемаркетинга()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла = &Телемаркетинг
	|	И НЕ CRM_ТелемаркетингПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Телемаркетинг", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ЗакрытиеПрисоединенныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеВложений();
КонецПроцедуры

&НаСервере
Функция ПолучитьПрисоединенныеФайлыИзСписка(ВладелецФайлов, СписокИДФайлаЭлектронногоПисьма)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
	|	И НЕ CRM_ТелемаркетингПрисоединенныеФайлы.ПометкаУдаления
	|	И CRM_ТелемаркетингПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма В(&СписокИД)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	Запрос.УстановитьПараметр("СписокИД", СписокИДФайлаЭлектронногоПисьма);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВложенияПисьмаСНеПустымИД()

&НаСервере
Функция ПолучитьФайлыНаПерезапись(ВладелецФайлов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТекущиеФайлы.ИмяФайла КАК СТРОКА) КАК ИмяФайла,
	|	ВЫРАЗИТЬ(ТекущиеФайлы.ИдентификаторФайлаДляHTML КАК СТРОКА) КАК ИдентификаторФайлаДляHTML,
	|	ВЫРАЗИТЬ(ТекущиеФайлы.ИдентификаторФайлаДляHTML КАК СТРОКА(200)) КАК ИдентификаторФайлаДляHTMLДляСравнения
	|ПОМЕСТИТЬ втИсходныеФайлы
	|ИЗ
	|	&ТекущиеФайлы КАК ТекущиеФайлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеФайлы.ИмяФайла КАК ИмяФайла,
	|	втИсходныеФайлы.ИдентификаторФайлаДляHTML КАК ИдентификаторФайлаДляHTML,
	|	ЕСТЬNULL(CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПрисоединенныйФайл
	|ИЗ
	|	втИсходныеФайлы КАК втИсходныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|		ПО втИсходныеФайлы.ИдентификаторФайлаДляHTMLДляСравнения = CRM_ТелемаркетингПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|			И (НЕ CRM_ТелемаркетингПрисоединенныеФайлы.ПометкаУдаления)
	|			И (CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов)
	|			И (CRM_ТелемаркетингПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма <> &ПустаяСтрока)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	Запрос.УстановитьПараметр("ТекущиеФайлы", ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьФайлыНаПерезапись()

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции // НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()

&НаСервере
// Процедура заполняет данные закладки, 
// исходя из текущего состояния документа (открытие, переход к следующему/предыдущему элементу и пр.).
//
Процедура ИнициализироватьЗакладкуТекущийАбонент(ПриОткрытии = Ложь, СледующийКлиент = Ложь, ПредыдущийКлиент = Ложь)
	
	РассчитатьКоличествоКлиентовПоРежимамПоказа();
	НерабочееВремя = Ложь;
	ТекТелефон = "";
	ТекПочта = "";
	ТекПочта1 = "";
	СписокТелефонов.Очистить();
	СписокАдресов.Очистить();
	//Элементы.ТекОтказ.Видимость = Ложь;
	//Элементы.ТекПричинаОтказа.Видимость = Ложь;
	Если Объект.Участники.Количество() = 0 Тогда
		ОчиститьЗакладкуТекущийАбонент();
		НетУчастников = Истина;
		Возврат;
	КонецЕсли;
		
	Если Объект.Участники.Количество() = 1 Тогда
		Элементы.ТекАбонентВперёд.Доступность	= Ложь;
		Элементы.ТекАбонентНазад.Доступность	= Ложь;
	Иначе
		Элементы.ТекАбонентВперёд.Доступность	= Истина;
		Элементы.ТекАбонентНазад.Доступность	= Истина;
	КонецЕсли;
	
	КнопкаНазад = Неопределено;
	КнопкаВперёд = Неопределено;
	
	Если Элементы.ДекорацияНетЭлементов.Видимость Тогда
		Элементы.ДекорацияНетЭлементов.Видимость       = Ложь;
		Элементы.ТекМаркетинговоеМероприятие.Видимость = Истина;
		Элементы.ТекАбонентОтправитьСМС.Доступность    = Истина;
		Элементы.ТекСценарий.Видимость                 = Истина;
		Элементы.ПустойСценарий.Видимость              = Ложь;
		Элементы.ТекКлиент.Видимость                   = ЗначениеЗаполнено(ТекКлиент);
		Элементы.ТекПотенциальныйКлиент.Видимость      = ЗначениеЗаполнено(ТекПотенциальныйКлиент);
		Элементы.ТекКонтактноеЛицо.Видимость           = Истина;
		Элементы.ГруппаАнкета.Видимость                = Истина;
		Элементы.ГруппаИнтерес.Видимость               = Истина;
	КонецЕсли;
	
	Если ТекРежимПоказа = "НеЗвонили" Тогда
		Элементы.ТекНеДозвонились.Видимость = Истина;
		Элементы.ТекОтказ.Видимость = Истина;
		Элементы.ТекПричинаОтказа.Видимость = ТекОтказ;
		Элементы.ТекПерезвонитьПозднее.Видимость = Истина;
	ИначеЕсли ТекРежимПоказа = "НеДозвонились" Тогда
		Элементы.ТекНеДозвонились.Видимость = Истина;
		Элементы.ТекОтказ.Видимость = Ложь;
		Элементы.ТекПричинаОтказа.Видимость = Ложь;
		Элементы.ТекПерезвонитьПозднее.Видимость = Ложь;
	ИначеЕсли ТекРежимПоказа = "ПерезвонитьПозднее" Тогда
		Элементы.ТекНеДозвонились.Видимость = Ложь;
		Элементы.ТекОтказ.Видимость = Ложь;
		Элементы.ТекПричинаОтказа.Видимость = Ложь;
		Элементы.ТекПерезвонитьПозднее.Видимость = Истина;
	Иначе
		Элементы.ТекНеДозвонились.Видимость = Истина;
		Элементы.ТекОтказ.Видимость = Истина;
		Элементы.ТекПричинаОтказа.Видимость = ТекОтказ;
		Элементы.ТекПерезвонитьПозднее.Видимость = Истина;
	КонецЕсли;
	
	// Это открытие формы, просто показываем первого абонента в ТЧ "Участники".
	Если ПриОткрытии Тогда
		ТекПозицияКурсора = 0;
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			Элементы.ТекАбонентНазад.Доступность = Ложь;
		ИначеЕсли ТекРежимПоказа = "НеДозвонились" Тогда
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока НЕ ТекСтрока.НеДозвонились Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;
					ОчиститьЗакладкуТекущийАбонент();
					Возврат;
				КонецЕсли;
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
			КонецЦикла;
		ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока НЕ ТекСтрока.Обработан Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;
					ОчиститьЗакладкуТекущийАбонент();
					Возврат;
				КонецЕсли;
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
			КонецЦикла;	
		ИначеЕсли ТекРежимПоказа = "Отказ" Тогда
			Элементы.ТекОтказ.Видимость = Истина;
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока НЕ ТекСтрока.Отказ Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;
					ОчиститьЗакладкуТекущийАбонент();
					Возврат;
				КонецЕсли;
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
			КонецЦикла;
		ИначеЕсли ТекРежимПоказа = "ПерезвонитьПозднее" Тогда
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока Не ТекСтрока.ПерезвонитьПозднее Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;
					ОчиститьЗакладкуТекущийАбонент();
					Возврат;
				КонецЕсли;
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
			КонецЦикла;
		ИначеЕсли ТекРежимПоказа = "НеЗвонили" Тогда
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока ТекСтрока.НеДозвонились ИЛИ ТекСтрока.Обработан ИЛИ ТекСтрока.Отказ ИЛИ ТекСтрока.ПерезвонитьПозднее Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;
					ОчиститьЗакладкуТекущийАбонент();
					Возврат;
				КонецЕсли;
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
			КонецЦикла;
		КонецЕсли;
	//	Обрабатываем нажатие кнопки "Вперёд".
	ИначеЕсли СледующийКлиент Тогда
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			ТекПозицияКурсора = ТекПозицияКурсора  + 1;
			Если Объект.Участники.Количество() - 1 = ТекПозицияКурсора Тогда
				Элементы.ТекАбонентВперёд.Доступность = Ложь;
			КонецЕсли;
		Иначе
			ПозицияКурсораКэш = ТекПозицияКурсора;
			ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
			Если ТекРежимПоказа = "НеДозвонились" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.НеДозвонились Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1;
						КнопкаВперёд = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "Отказ" Тогда
				Элементы.ТекОтказ.Видимость = Истина;
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Отказ Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш + 1; 
						КнопкаВперёд = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1;
						КнопкаВперёд = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
						Возврат;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "ПерезвонитьПозднее" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.ПерезвонитьПозднее Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1;
						КнопкаВперёд = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
						Возврат;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "НеЗвонили" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока ТекСтрока.НеДозвонились ИЛИ ТекСтрока.Обработан ИЛИ ТекСтрока.Отказ ИЛИ ТекСтрока.ПерезвонитьПозднее Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1;
						КнопкаВперёд = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	//	Обрабатываем нажатие кнопки "Назад".
	ИначеЕсли ПредыдущийКлиент Тогда
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			ТекПозицияКурсора = ТекПозицияКурсора  - 1;
			Если ТекПозицияКурсора = 0 Тогда
				Элементы.ТекАбонентНазад.Доступность = Ложь;
			КонецЕсли;
		Иначе
			ПозицияКурсораКэш = ТекПозицияКурсора;
			ТекПозицияКурсора	= ТекПозицияКурсора  - 1;
			Если ТекРежимПоказа = "НеДозвонились" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.НеДозвонились Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1; 
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1;
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;	
			ИначеЕсли ТекРежимПоказа = "Отказ" Тогда
				Элементы.ТекОтказ.Видимость = Истина;
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Отказ Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1;
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "ПерезвонитьПозднее" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.ПерезвонитьПозднее Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1;
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			ИначеЕсли ТекРежимПоказа = "НеЗвонили"  Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока ТекСтрока.НеДозвонились Или ТекСтрока.Обработан Или ТекСтрока.Отказ Или ТекСтрока.ПерезвонитьПозднее Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1;
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();
						Прервать;
					КонецЕсли;
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекСтрока = Объект.Участники[ТекПозицияКурсора];
	Элементы.Участники.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
	
	Если ТекПозицияКурсора > 0 Тогда
		Если НЕ Элементы.ТекАбонентНазад.Доступность Тогда
			Элементы.ТекАбонентНазад.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ТекАбонентНазад.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекПозицияКурсора < Объект.Участники.Количество() - 1 Тогда
		Если НЕ Элементы.ТекАбонентВперёд.Доступность Тогда
			Элементы.ТекАбонентВперёд.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ТекАбонентВперёд.Доступность = Ложь;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РежимДляБлокированияКнопок) И СтрНайти(РежимДляБлокированияКнопок, ТекРежимПоказа) > 0 Тогда
		Элементы.ТекАбонентНазад.Доступность = Ложь;
		Элементы.ТекАбонентВперёд.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ (КнопкаНазад = Неопределено) И НЕ КнопкаНазад Тогда
		Элементы.ТекАбонентНазад.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ (КнопкаВперёд = Неопределено) И НЕ КнопкаВперёд Тогда
		Элементы.ТекАбонентВперёд.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ВзаимодействиеЗавершено =
		ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
	ТекНеДозвонились = ТекСтрока.НеДозвонились;
	ТекОтказ = ТекСтрока.Отказ;
	ТекПричинаОтказа =  ТекСтрока.ПричинаОтказа;
	ТекПерезвонитьПозднее = ТекСтрока.ПерезвонитьПозднее;
	ТекВзаимодействие = ?(ВзаимодействиеЗавершено,
		 ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка"),
		 ТекСтрока.Взаимодействие);
	
	Если ЗначениеЗаполнено(ТекСтрока.Партнер) Тогда
		Если ТипЗнч(ТекСтрока.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			ТекКлиент = ТекСтрока.Партнер;
			ТекПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
		Иначе
			ТекКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			ТекПотенциальныйКлиент = ТекСтрока.Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.КонтактноеЛицо) Тогда
			ТекКонтактноеЛицо = ТекСтрока.КонтактноеЛицо;
		Иначе
			ТекКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		КонецЕсли;
		ЗаполнитьПанельИнформацииПоДаннымПартнера();
		ТекКлиентСтрокой = "";
		ТекКонтактноеЛицоСтрокой = "";
	Иначе
		ТекКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТекПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
		ТекКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		ТекКлиентСтрокой = ТекСтрока.ПартнерСтрокой;
		ТекКонтактноеЛицоСтрокой = ТекСтрока.КонтактноеЛицоСтрокой;
		ТекСодержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	КонецЕсли;
	Если НЕ Элементы.ДекорацияНетЭлементов.Видимость Тогда
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекСтрока.Партнер, ТекСтрока.КонтактноеЛицо), , ,
			 ТекСтрока.Телефон);
		ТекТелефон = ТекСтрока.Телефон;
		Если ЗначениеЗаполнено(ТекТелефон) Тогда
			Элементы.ТекАбонентОтправитьСМС.Доступность = Истина;
			Элементы.ТекТелефон.Видимость = Ложь;
			Элементы.ГруппаТелефонЕсть.Видимость = Ложь;
			//ВывестиКонтактнуюИнформациюОбъектаТелефон(СписокТелефонов);
		Иначе
			Элементы.ТекАбонентОтправитьСМС.Доступность = Ложь;
			ТекТелефон									= Нстр("ru='Нет телефона'");
			Элементы.ТекТелефон.Видимость = Истина;
			Элементы.ГруппаТелефонЕсть.Видимость = Истина;
			ЭлементРазмещения = Элементы.ГруппаКИТелефонНовая;
			Пока ЭлементРазмещения.ПодчиненныеЭлементы.Количество() > 0 Цикл
				Элементы.Удалить(ЭлементРазмещения.ПодчиненныеЭлементы[0]);
			КонецЦикла;
			//ВывестиКонтактнуюИнформациюОбъектаТелефон(СписокТелефонов);
		КонецЕсли;
		ВывестиКонтактнуюИнформациюОбъектаТелефон(СписокТелефонов);
		
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекСтрока.Партнер,
			 ТекСтрока.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				Элементы.ГруппаПочтаЕсть.Видимость = Истина;
				Элементы.ГруппаПочтаНет.Видимость = Ложь;
			Иначе
				Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
				Элементы.ГруппаПочтаНет.Видимость = Истина;
			КонецЕсли;
		Иначе	
			Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
			Элементы.ГруппаПочтаНет.Видимость = Истина;
		КонецЕсли;
		ВывестиКонтактнуюИнформациюОбъектаПочта(СписокАдресов);
	Иначе
		Элементы.ГруппаПочтаНет.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекСтрока.Партнер) Тогда
		Элементы.ГруппаПочтаНет.Видимость = Ложь;
		Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
	КонецЕсли;
	ТекМаркетинговоеМероприятие = Объект.МаркетинговоеМероприятие;
	Если ЗначениеЗаполнено(ТекСтрока.Анкета) Тогда
		ТекАнкета = ТекСтрока.Анкета;
		Элементы.ГруппаДекорациияАнкета.Видимость = Ложь;
		Элементы.ТекАнкета.Видимость              = Истина;
	Иначе
		Элементы.ГруппаДекорациияАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
		Элементы.ТекАнкета.Видимость              = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтрока.Интерес) Тогда
		ТекИнтерес = ТекСтрока.Интерес;
		Элементы.ГруппаДекорацияИнтерес.Видимость          = Ложь;
		Элементы.ТекИнтерес.Видимость                      = Истина;
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
	Иначе
		Элементы.ГруппаДекорацияИнтерес.Видимость          = Истина;
		Элементы.ТекИнтерес.Видимость                      = Ложь;
		СформироватьДанныеПоКлиенту();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекКлиент) Тогда
		СформироватьСмещениеВремениТекущегоАбонента();
	Иначе
		Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;
		Элементы.ДекорацияСмещениеВремени.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты Тогда
		СформироватьДанныеПоКлиенту();
	КонецЕсли;
	
	ЗаполнитьДеревоТелефонныхЗвонковИВзаимодействий();
	
	Если Не ЗначениеЗаполнено(ТекКлиент) И Не ЗначениеЗаполнено(ТекПотенциальныйКлиент) Тогда
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru='Принять обращение'");
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");
		
	КонецЕсли;
	
	Элементы.ТекПричинаОтказа.Видимость = ТекОтказ;
	Элементы.ТекКлиентСтрокой.Видимость = Не ЗначениеЗаполнено(ТекСтрока.Партнер);
	Элементы.ТекКонтактноеЛицоСтрокой.Видимость = Не ЗначениеЗаполнено(ТекСтрока.КонтактноеЛицо);
	Элементы.ТекКлиент.Видимость = ЗначениеЗаполнено(ТекКлиент);
	Элементы.ТекПотенциальныйКлиент.Видимость = ЗначениеЗаполнено(ТекПотенциальныйКлиент);
	Элементы.ГруппаКонтактноеЛицо.Видимость = ЗначениеЗаполнено(ТекСтрока.КонтактноеЛицо);
	Элементы.ГруппаКИ.Видимость = Не Элементы.ДекорацияНетЭлементов.Видимость;
	
	Элементы.ТекНеДозвонились.Доступность = Не ЗначениеЗаполнено(ТекСтрока.Интерес);
	Элементы.ТекОтказ.Доступность = Не ЗначениеЗаполнено(ТекСтрока.Интерес);
	Элементы.ТекПричинаОтказа.Доступность = Не ЗначениеЗаполнено(ТекСтрока.Интерес);
	Элементы.ТекПерезвонитьПозднее.Доступность = Не ЗначениеЗаполнено(ТекСтрока.Интерес);
	Элементы.ДекорацияСоздатьВзаимодействие.Доступность = Не ЗначениеЗаполнено(ТекСтрока.Интерес);
	
	Элементы.ДекорацияСоздатьВзаимодействие.Видимость = ТекПерезвонитьПозднее;
	ОбновитьСвойстваДекорацииСоздатьВзаимодействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(ПриОткрытии = Ложь,
	 СледующийКлиент = Ложь,
	 ПредыдущийКлиент = Ложь)
	
	ИнициализироватьЗакладкуТекущийАбонент(ПриОткрытии, СледующийКлиент, ПредыдущийКлиент);
	
	Если НЕ ПриОткрытии Тогда
		ЗакладкаК = СценарийДокумент.ПолучитьЗакладкуКонца();
		ЗакладкаН = СценарийДокумент.ПолучитьЗакладкуПоПозиции(СценарийДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаК) - 1);
		Элементы.ТекСценарий.УстановитьГраницыВыделения(ЗакладкаН, ЗакладкаК);	
		Закладка = СценарийДокумент.ПолучитьЗакладкуНачала();
		Элементы.ТекСценарий.УстановитьГраницыВыделения(Закладка, Закладка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера()
	
	ТекСодержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	ТекВыбранныйКлиент = ?(ЗначениеЗаполнено(ТекКлиент), ТекКлиент, ТекПотенциальныйКлиент);
	
	ОбъектДляОтображения = ?(ВыбранныйОбъектОтображения = "Партнер", ТекВыбранныйКлиент, ТекКонтактноеЛицо);
	
	Если Не ЗначениеЗаполнено(ОбъектДляОтображения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
		ДополнительныеПараметры = Новый Структура("ИдентификаторФормы", УникальныйИдентификатор);
		
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
			ОбъектДляОтображения, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(), ДополнительныеПараметры);
		
		Если Содержание <> ТекСодержание Тогда
			ТекСодержание = Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСмещениеВремениТекущегоАбонента()
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ТекКлиент) Тогда
		БизнесРегион = ТекКлиент.БизнесРегион;
	Иначе
		БизнесРегион = ТекПотенциальныйКлиент.БизнесРегион;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(БизнесРегион) Тогда
		
		Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;
		Элементы.ДекорацияСмещениеВремени.Видимость = Ложь;
		
	Иначе
		
		СмещениеБизнесРегионаСтрока = Формат(БизнесРегион.CRM_ВремяПоГринвичу_GMT, "ЧЦ=2; ЧВН=; ЧО=1");
		
		Если Не ЗначениеЗаполнено(СмещениеБизнесРегионаСтрока) Тогда
			СмещениеБизнесРегионаСтрока = "00";
		КонецЕсли;
		
		Если БизнесРегион.CRM_ВремяПоГринвичу_GMT >= 0 Тогда
			СмещениеБизнесРегионаСтрока = "+" + СмещениеБизнесРегионаСтрока;
		КонецЕсли;
		
		ШаблонЧасовогоПояса = "GMT%1";
		ЧасовойПоясБизнесРегиона = СтрШаблон(ШаблонЧасовогоПояса, СмещениеБизнесРегионаСтрока);
		
		ВремяБизнесРегиона = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПоясБизнесРегиона);	
		
		Элементы.ДекорацияСмещениеВремени.Видимость = Истина;
		
		ТекущееВремяКлиента	= ВремяБизнесРегиона;
		НачалоДняКлиента 	= НачалоДня(ТекущееВремяКлиента) + 9 * 60 * 60;
		КонецДняКлиента		= НачалоДня(ТекущееВремяКлиента) + 19 * 60 * 60;
		Если ТекущееВремяКлиента >= НачалоДняКлиента И ТекущееВремяКлиента <= КонецДняКлиента Тогда
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;
		Иначе
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
		
		Если Час(ТекущееВремяКлиента) < 9 И Час(ТекущееВремяКлиента) > 5 Тогда
			ДобавочныйТекст = Нстр("ru=' (утро)'");
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) > 19 И Час(ТекущееВремяКлиента) <= 23 Тогда
			ДобавочныйТекст = Нстр("ru=' (вечер)'");
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) >= 0 И Час(ТекущееВремяКлиента) <= 5 Тогда
			ДобавочныйТекст = Нстр("ru=' (ночь)'");
			НерабочееВремя = Истина;
		Иначе
			ДобавочныйТекст = "";
		КонецЕсли;
				
		Элементы.ДекорацияСмещениеВремени.Заголовок = Нстр("ru='У клиента сейчас: '") 
			+ Формат(ТекущееВремяКлиента, "ДФ = Ч:мм") + ДобавочныйТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОРабочемВремени(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущийАбонентОтправитьСМСИлиПозвонить(ДополнительныеПараметры);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ТекущийАбонентОтправитьСМСИлиПозвонить(СтруктураКоманды)
	
	Если СтруктураКоманды.СМС Тогда
		Если CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
			Структура = Новый Структура();
			Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
				Структура.Вставить("Ссылка", ТекКонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(ТекКлиент) Тогда
				Структура.Вставить("Ссылка", ТекКлиент);
			Иначе
				Структура.Вставить("Ссылка", ТекПотенциальныйКлиент);
			КонецЕсли;
			Структура.Вставить("Телефон", SMS4B_ОтправкаSMS.ФорматироватьНомер(ТекТелефон));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли СтруктураКоманды.Звонок Тогда
		
		ДанныеЗаполнения 		= Новый Структура;
		ТелефонДляНабора = ТекТелефон;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо записать документ!'"));
			Возврат;
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Проект",		Объект.Проект);
		ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);
		Если ПустаяСтрока(ТелефонДляНабора) Тогда
			СписокОбъектов = Новый СписокЗначений;
			Если ЗначениеЗаполнено(ТекКлиент) Тогда
				СписокОбъектов.Добавить(ТекКлиент);
			ИначеЕсли ЗначениеЗаполнено(ТекПотенциальныйКлиент) Тогда
				СписокОбъектов.Добавить(ТекПотенциальныйКлиент);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
				СписокОбъектов.Добавить(ТекКонтактноеЛицо);
			КонецЕсли;
			сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКонтактноеЛицо, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(ТекКлиент) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКлиент, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(ТекПотенциальныйКлиент) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекПотенциальныйКлиент, ДанныеЗаполнения);
		Иначе
			ДанныеЗаполнения.Вставить("Описание",	ТекКлиентСтрокой);
			СписокТелефонов = Новый СписокЗначений;
			СписокТелефонов.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТелефонДляНабора,
					",
				|"));
			Если СписокТелефонов.Количество() = 1 И ЗначениеЗаполнено(ТекКлиент) Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКлиент, ДанныеЗаполнения);
			ИначеЕсли СписокТелефонов.Количество() = 1 Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекПотенциальныйКлиент, ДанныеЗаполнения);
			Иначе
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Партнер", ?(ЗначениеЗаполнено(ТекКлиент), ТекКлиент, ТекПотенциальныйКлиент));
				ДополнительныеПараметры.Вставить("ДанныеЗаполнения",		ДанныеЗаполнения);
				ОписаниеВыбора = Новый ОписаниеОповещения("ПозвонитьПоНомеру", ЭтотОбъект, ДополнительныеПараметры); 
				СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выберите номер телефона'"), ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СозданиеАнкетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат) Тогда
		текАнкета									= Результат;
		Элементы.Участники.ТекущаяСтрока			= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		АнкетаЗавершена								= ПолучитьЗначениеРеквизита(Результат, "Проведен");		
		Элементы.Участники.ТекущиеДанные.Анкета		= Результат;
		Элементы.Участники.ТекущиеДанные.Обработан	= АнкетаЗавершена;
		Элементы.ГруппаДекорациияАнкета.Видимость	= Ложь;
		Элементы.ТекАнкета.Видимость				= Истина;
		Модифицированность							= Истина;
	КонецЕсли;		
		
КонецПроцедуры	

&НаСервере
Функция ВернутьОфисПодразделения(Подразделение)
	Возврат Подразделение.CRM_Офис;
КонецФункции	

&НаСервере
Процедура ОчиститьЗакладкуТекущийАбонент()
	
	ТекАнкета										= ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");
	Элементы.ТекАнкета.Видимость 					= Истина;
	Элементы.ГруппаДекорациияАнкета.Видимость		= Ложь;
	ТекИнтерес										= ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	Элементы.ТекИнтерес.Видимость 					= Истина;
	Элементы.ГруппаДекорацияИнтерес.Видимость 		= Ложь;
	ТекКлиент										= ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ТекПотенциальныйКлиент							= ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	ТекКонтактноеЛицо								= ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	ТекКлиентСтрокой								= "";
	ТекКонтактноеЛицоСтрокой						= "";
	ТекСодержание 									=
		CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	ТекСодержание1 									=
		CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	ТекТелефон										= Нстр("ru='Нет телефона'");
	ТекПочта										= Нстр("ru='Нет адреса'");
	Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
	Элементы.ГруппаПочтаНет.Видимость = Ложь;
	Элементы.ГруппаТелефонЕсть.Видимость = Ложь;

	Элементы.ТекМаркетинговоеМероприятие.Видимость	= Ложь;
	Элементы.ДекорацияСмещениеВремени.Видимость 	= Ложь;
	Элементы.ДекорацияНетЭлементов.Видимость		= Истина;
	Элементы.ТекАбонентОтправитьСМС.Доступность		= Ложь;
	Элементы.ТекСценарий.Видимость					= Ложь;
	Элементы.ПустойСценарий.Видимость				= Истина;
	Элементы.ТекКлиент.Видимость					= Ложь;
	Элементы.ТекПотенциальныйКлиент.Видимость		= Ложь;
	Элементы.ТекКонтактноеЛицо.Видимость			= Ложь;
	Элементы.ГруппаАнкета.Видимость					= Ложь;
	Элементы.ГруппаИнтерес.Видимость				= Ложь;
	Элементы.ПанельТекАбонент.ТекущаяСтраница		= Элементы.СтраницаПанельСценарий;
	Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоКлиентовПоРежимамПоказа()
	
	КоличествоОбработано        = Объект.Участники.НайтиСтроки(Новый Структура("Обработан", Истина)).Количество();
	КоличествоНеДозвонились     = Объект.Участники.НайтиСтроки(Новый Структура("НеДозвонились", Истина)).Количество();
	КоличествоОтказано          = Объект.Участники.НайтиСтроки(Новый Структура("Отказ", Истина)).Количество();
	КоличествоНеЗвонили         = Объект.Участники.НайтиСтроки(Новый Структура("Обработан,
		| НеДозвонились, Отказ, ПерезвонитьПозднее", Ложь, Ложь, Ложь,
		 Ложь)).Количество();
	КоличествоПрезвонитьПозднее = Объект.Участники.НайтиСтроки(Новый Структура("ПерезвонитьПозднее", Истина)).Количество();
	
	Для Каждого ЭлементСписка Из Элементы.ТекРежимПоказа.СписокВыбора Цикл
		Если СтрНайти(ЭлементСписка.Представление, Нстр("ru='Не дозвонились'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru='Не дозвонились'") + " (" + КоличествоНеДозвонились + ")";
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru='Обработаны'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru='Обработаны'") + " (" + КоличествоОбработано + ")";
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru='Не звонили'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru='Не звонили'") + " (" + КоличествоНеЗвонили + ")";
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru='Отказ'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru='Отказ'") + " (" + КоличествоОтказано + ")";
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru='Перезвонить позднее'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru='Перезвонить позднее'") + " (" + КоличествоПрезвонитьПозднее + ")";
		КонецЕсли;
	КонецЦикла;	 
	
	// Для блокировок кнопок "Вперёд" и "Назад" считаем какое из чисел равно "Единице"
	РежимДляБлокированияКнопок = "";
	Если КоличествоОбработано = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru='Обработаны'");
	КонецЕсли;
	Если КоличествоНеДозвонились = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru='НеДозвонились'");
	КонецЕсли;
	Если КоличествоОтказано = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru='Отказ'");
	КонецЕсли;
	Если КоличествоНеЗвонили = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru='НеЗвонили'");
	КонецЕсли;
	Если КоличествоПрезвонитьПозднее = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru='ПерезвонитьПозднее'");
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Партнер, КонтактноеЛицоВыбрано)
	
	Если НЕ КонтактноеЛицоВыбрано Тогда
		ВеткаКорень						= ДеревоПоиска.ПолучитьЭлементы();
		СтрокаКлиент 					= ВеткаКорень.Добавить();
		СтрокаКлиент.Объект 			= Партнер.Наименование;
		СтрокаКлиент.Ссылка 			= Партнер;
		СтрокаКлиент.КорневойЭлемент 	= Истина;
		ВеткаКлиент 					= СтрокаКлиент.ПолучитьЭлементы();
	Иначе
		ВеткаКлиент = ДеревоПоиска.ПолучитьЭлементы();
	КонецЕсли;
	
	КоличествоИнтересов = 0;
	
	Пока ВыборкаКлиентов.Следующий() Цикл
		
		ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтактов.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаКонтактов.Контакт) Тогда
				СтрокаКонтакт 					= ВеткаКлиент.Добавить();
				СтрокаКонтакт.Объект 			= ВыборкаКонтактов.Контакт.Наименование;
				СтрокаКонтакт.Ссылка 			= ВыборкаКонтактов.Контакт;
				СтрокаКонтакт.КорневойЭлемент 	= Истина;
			Иначе	
				СтрокаКонтакт 					= ВеткаКлиент.Добавить();
				СтрокаКонтакт.Объект 			= НСтр("ru='<Без контакта>'");
				СтрокаКонтакт.Ссылка 			= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
				СтрокаКонтакт.КорневойЭлемент 	= Истина;
			КонецЕсли;				
			ВеткаИнтерес 					= СтрокаКонтакт.ПолучитьЭлементы();
			ВыборкаИнтересов 				= ВыборкаКонтактов.Выбрать();
			Пока ВыборкаИнтересов.Следующий() Цикл
				Если ВыборкаИнтересов.Интерес <> Null Тогда
					СтрокаИнтерес 			= ВеткаИнтерес.Добавить();
					СтрокаИнтерес.Объект 	= ВыборкаИнтересов.Интерес.Тема;
					СтрокаИнтерес.Ссылка 	= ВыборкаИнтересов.Интерес;
					КоличествоИнтересов 	= КоличествоИнтересов + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоИнтересов > 0 Тогда
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru='Принять обращение'")  
			+ Нстр("ru=' (Есть активные интересы - '") + Строка(КоличествоИнтересов) + ")";
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ПерейтиНаВкладкуИнтересыИКонтакты");
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Истина;
	Иначе
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru='Принять обращение';en='New Request '");
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
		ДеревоПоиска.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоКлиенту()
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	
	Если ЗначениеЗаполнено(ТекКлиент) Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Партнеры.Ссылка КАК Клиент,
			|	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК Контакт
			|ПОМЕСТИТЬ ВсеКонтакты
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
			|ГДЕ
			|	Партнеры.Ссылка = &Партнер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеКонтакты.Клиент КАК Клиент,
			|	ВсеКонтакты.Контакт КАК Контакт,
			|	CRM_Интерес.Ссылка КАК Интерес
			|ИЗ
			|	ВсеКонтакты КАК ВсеКонтакты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
			|		ПО ВсеКонтакты.Клиент = CRM_Интерес.Партнер
			|			И ВсеКонтакты.Контакт = CRM_Интерес.КонтактноеЛицо
			|			И (НЕ CRM_Интерес.Завершен)
			|			И (НЕ CRM_Интерес.ПометкаУдаления)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВсеКонтакты.Клиент,
			|	ВсеКонтакты.Контакт,
			|	CRM_Интерес.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Интерес УБЫВ
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
			|ПО
			|	Клиент,
			|	Контакт";
		
		Запрос.УстановитьПараметр("Партнер", ТекКлиент);
		Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", "ГДЕ CRM_Интерес.КонтактноеЛицо = &КЛ");
			Запрос.УстановитьПараметр("КЛ", ТекКонтактноеЛицо); 
			КЛВыбрано = Истина;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", "");
			КЛВыбрано = Ложь;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбработатьВыборкуЗапроса(ТаблицаКлиентов, ТекКлиент, КЛВыбрано);
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли ЗначениеЗаполнено(ТекПотенциальныйКлиент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_Интерес.ПотенциальныйКлиент КАК Клиент,
		|	CRM_Интерес.Ссылка КАК Интерес
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	НЕ CRM_Интерес.Завершен
		|	И НЕ CRM_Интерес.Завершен
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
		
		Запрос.УстановитьПараметр("ПотенциальныйКлиент", ТекПотенциальныйКлиент);
		РезультатЗапроса = Запрос.Выполнить();
		МассивИнтересов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Интерес");
		КоличествоИнтересов =  МассивИнтересов.Количество();
		
		Если КоличествоИнтересов > 0 Тогда
			
			ВеткаКорень						= ДеревоПоиска.ПолучитьЭлементы();
			СтрокаКлиент 					= ВеткаКорень.Добавить();
			СтрокаКлиент.Объект 			= ТекПотенциальныйКлиент.Наименование;
			СтрокаКлиент.Ссылка 			= ТекПотенциальныйКлиент;
			СтрокаКлиент.КорневойЭлемент 	= Истина;
			ВеткаИнтерес 					= СтрокаКлиент.ПолучитьЭлементы();
			
			Для Каждого ЭлементМассива Из МассивИнтересов Цикл
				
				СтрокаИнтерес 					= ВеткаИнтерес.Добавить();
				СтрокаИнтерес.Объект 			= ЭлементМассива.Тема;
				СтрокаИнтерес.Ссылка 			= ЭлементМассива;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоИнтересов > 0 Тогда
			Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru='Принять обращение'")
			+ Нстр("ru=' (Есть активные интересы - '") + Строка(КоличествоИнтересов) + ")";
			Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ПерейтиНаВкладкуИнтересыИКонтакты");
			Элементы.СтраницаПанельИнтересКонтакты.Доступность = Истина;
		Иначе
			Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru='Принять обращение';en='New Request '");
			Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");
			Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
			Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
			ДеревоПоиска.ПолучитьЭлементы().Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Процедура РазвернутьВсе(ИмяРеквизитаДерево)
	ЭлементыКлиенты = ЭтотОбъект[ИмяРеквизитаДерево].ПолучитьЭлементы();
	Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
		ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
		Элементы[ИмяРеквизитаДерево].Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПоискаПриАктивизацииСтроки()
	Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда
		ЗаполнитьПанельИнформацииПоДанным(Неопределено);
		Возврат;
	КонецЕсли;
	ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДанным(Ссылка)
	
	// Поле отображения содержания.
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры")  
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ДополнительныеПараметры = Новый Структура("ИдентификаторФормы", УникальныйИдентификатор);
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(
			Ссылка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели(), ДополнительныеПараметры);
		Если Содержание <> ТекСодержание1 Тогда
			ТекСодержание1 = Содержание;
		КонецЕсли;
	Иначе
		Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если Содержание <> ТекСодержание1 Тогда
			ТекСодержание1 = Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСсылкуТекущегоЭлементаДерева()
	
	ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		НовыйИнтерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		НовыйИнтерес = ТекДанные.Ссылка;
	Иначе
		НовыйИнтерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	КонецЕсли;		
		
КонецПроцедуры	

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Элементы.УчастникиПримечание1.Доступность = (ТекДанные <> Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПримечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПримечаниеКонецРедактирования", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаРедактирования", Новый Структура("Примечание",
		 Элементы.Участники.ТекущиеДанные.Примечание), , , , ,
		 ОписаниеОповещения); 
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеКонецРедактирования(Результат, Доппараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.Участники.ТекущиеДанные.Примечание = Результат;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеСценарииПродаж()
	
	СписокВыбора = Элементы.СценарийПродажи.СписокВыбора;
	
	ПараметрыСценариев = Новый Структура;
	ПараметрыСценариев.Вставить("ТипУслуги", Объект.ТипУслуги);
	ПараметрыСценариев.Вставить("ИспользоватьТипыУслуг", ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг"));
	ПараметрыСценариев.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыСценариев.Вставить("ДоступныКарты", Истина);
	ПараметрыСценариев.Вставить("ТипОбращения", Объект.ТипОбращения);
	ПараметрыСценариев.Вставить("ЭтоПоддержка", Объект.ТипОбращения <> Справочники.CRM_ТипыОбращений.Интерес);
	
	ДоступныеСценарии = Обработки.CRM_МастерРегистрацииОбращения.ПолучитьДоступныеСценарииПродаж(ПараметрыСценариев);
	
	СписокВыбора.Очистить();
	Для Каждого Элемент Из ДоступныеСценарии Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление, , Элемент.Картинка);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.СценарийПродажи) Тогда
		Если СписокВыбора.Количество() > 0 Тогда
			Объект.СценарийПродажи = СписокВыбора[0].Значение;
		КонецЕсли;
	Иначе
		Если СписокВыбора.Количество() > 0 Тогда
			Если СписокВыбора.Количество() = 1 Тогда
				Объект.СценарийПродажи = СписокВыбора[0].Значение;
			ИначеЕсли СписокВыбора.НайтиПоЗначению(Объект.СценарийПродажи) = Неопределено Тогда
				Объект.СценарийПродажи = СписокВыбора[0].Значение;
			КонецЕсли;
		Иначе
			Объект.СценарийПродажи = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекОтказПриИзменении(Элемент)
	Если ТекОтказ Тогда
		Элементы.ТекНеДозвонились.Видимость = Ложь;
		Элементы.ТекПерезвонитьПозднее.Видимость = Ложь;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
		ТекНеДозвонились = Ложь;
		ТекПерезвонитьПозднее = Ложь;
		//ТекРежимПоказа = "Отказ";
	Иначе
		//ТекРежимПоказа = "НеЗвонили";
		Элементы.ТекНеДозвонились.Видимость = Истина;
		Элементы.ТекПерезвонитьПозднее.Видимость = Истина;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = ТекПерезвонитьПозднее;
	КонецЕсли;
	
	Элементы.ТекПричинаОтказа.Видимость = ТекОтказ;
	Если НЕ ТекОтказ Тогда
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
	КонецЕсли;
	Если Не Элементы.Участники.ТекущиеДанные = Неопределено Тогда
		Элементы.Участники.ТекущиеДанные.Отказ = ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
		Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
		Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
	КонецЕсли;
	УстановитьЗначенияЗависимыхРеквизитов("Отказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекНеДозвонилисьПриИзменении(Элемент)
	Если Элементы.Участники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекНеДозвонились Тогда
		Элементы.ТекОтказ.Видимость = Ложь;
		Элементы.ТекПричинаОтказа.Видимость = Ложь;
		Элементы.ТекПерезвонитьПозднее.Видимость = Ложь;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = Ложь;
		ТекОтказ = Ложь;
		ТекПерезвонитьПозднее = Ложь;
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
		Элементы.Участники.ТекущиеДанные.Отказ = ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
		Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
		//ТекРежимПоказа = "НеДозвонились";
	Иначе
		//ТекРежимПоказа = "НеЗвонили";
		Элементы.ТекОтказ.Видимость = Истина;
		Элементы.ТекПерезвонитьПозднее.Видимость = Истина;
		Элементы.ДекорацияСоздатьВзаимодействие.Видимость = ТекПерезвонитьПозднее;
	КонецЕсли;
	Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
	УстановитьЗначенияЗависимыхРеквизитов("НеДозвонились");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекПричинаОтказаПриИзменении(Элемент)
	Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТекПерезвонитьПозднееПриИзменении(Элемент)
	
	Если ТекПерезвонитьПозднее Тогда
		Элементы.ТекОтказ.Видимость = Ложь;
		Элементы.ТекПричинаОтказа.Видимость = Ложь;
		Элементы.ТекНеДозвонились.Видимость = Ложь;
		ТекОтказ = Ложь;
		ТекПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказовПриОбзвоне.ПустаяСсылка");
		ТекНеДозвонились = Ложь;
		Элементы.Участники.ТекущиеДанные.Отказ = ТекОтказ;
		Элементы.Участники.ТекущиеДанные.ПричинаОтказа = ТекПричинаОтказа;
		Элементы.Участники.ТекущиеДанные.НеДозвонились = ТекНеДозвонились;
		//ТекРежимПоказа = "ПерезвонитьПозднее";
	Иначе
		//ТекРежимПоказа = "НеЗвонили";
		Элементы.ТекОтказ.Видимость = Истина;
		Элементы.ТекНеДозвонились.Видимость = Истина;
		
		// Отменить Взаимодействие
		УчастиникиПриИзмененииСтатусаОбработкиЗвонка("ПерезвонитьПозднее");
	КонецЕсли;
	
	Элементы.Участники.ТекущиеДанные.ПерезвонитьПозднее = ТекПерезвонитьПозднее;
	Элементы.ДекорацияСоздатьВзаимодействие.Видимость = ТекПерезвонитьПозднее;
	
	// Открыть форму ввода взаимодействия
	Если ТекПерезвонитьПозднее Тогда
		ВыбранныйЭлемент = Новый Структура("Значение", "Создать");
		УчастникиВзаимодействиеНачалоВыбораПродолжение(ВыбранныйЭлемент, Неопределено);
	КонецЕсли;
	
	УстановитьЗначенияЗависимыхРеквизитов("ПерезвонитьПозднее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекПочтаНажатие(Элемент, СтандартнаяОбработка)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",
			 ТекДанные.Партнер,
			 ТекДанные.КонтактноеЛицо));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПочты", ЭтотОбъект);
		СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите почту'"));
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПочты(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ЭлементСписка <> Неопределено Тогда
		Адрес = ЭлементСписка.Значение;
		Если НЕ Адрес.Количество() = 0 Тогда
			ТекПочта					= Адрес.Представление;
		Иначе
			ТекПочта					= Нстр("ru='Нет адреса'");
			Элементы.ГруппаПочтаЕсть.Видимость = Ложь;
			Элементы.ГруппаПочтаНет.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные, ВидКИ = Неопределено, ИспользоватьКИДляОповещений = Ложь)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
		Если ТипЗнч(ТекущиеДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные.Партнер,
				 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ВладелецКИ = ?(ЗначениеЗаполнено(ТекущиеДанные.Партнер) И НЕ ТекущиеДанные.Партнер.ЭтоГруппа
				 И НЕ ТекущиеДанные.Партнер.CRM_ОтписалсяОтEmailРассылок, ТекущиеДанные.Партнер, Неопределено);
			УстановитьПривилегированныйРежим(Ложь);
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ВладелецКИ,
											?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо, Неопределено),
											Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКИ);
		КонецЕсли;
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;	
	
	Если НЕ Таб = Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные) = Тип("Структура")
			 И ТипЗнч(ТекущиеДанные.Партнер) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			МассивСтрок = Таб;
			
			ПерваяСтрока = Неопределено;

		Иначе
			МассивСтрок = Таб;			
			ПерваяСтрока = Неопределено;
		КонецЕсли;
		
		СписокЗнач = Новый СписокЗначений;
		ТекСсылка = "";
		ПерваяСтрокаБыла = Ложь;
		
		Для Каждого СтрокаТаб Из МассивСтрок Цикл
			
			СтруктураАдреса = Новый Структура;
			
			СтруктураАдреса = Новый Структура;
			СтруктураАдреса.Вставить("Адрес"		, СокрЛП(СтрокаТаб.АдресЭП));
			СтруктураАдреса.Вставить("Представление", СокрЛП(СтрокаТаб.Представление));
			СтруктураАдреса.Вставить("Вид"			, СтрокаТаб.Вид);
			СтруктураАдреса.Вставить("ТипОбъекта"	,
				 ?(ТипЗнч(СтрокаТаб.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), "Контакт",
				 "Партнер"));
			СписокАдресов.Добавить(СтруктураАдреса, "   " + СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;	
		Если СписокАдресов.Количество() > 0 Тогда
			Возврат СписокАдресов;
		КонецЕсли;				
	КонецЕсли;	
	
	Возврат СписокАдресов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПочтуКонтакта()
	Если Пустаястрока(ТекПочта1) Тогда
		Возврат;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекПочта1, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	СохранитьПочтуНаСервере(ТекПочта1, ТекДанные.КонтактноеЛицо, ТекДанные.Партнер);
	ТекПочта = ТекПочта1;
	Элементы.ГруппаПочтаЕсть.Видимость = Истина;
	Элементы.ГруппаПочтаНет.Видимость = Ложь;
КонецПроцедуры

Процедура СохранитьПочтуНаСервере(ТекПочта1, КонтактноеЛицо, Партнер)
	Если НЕ КонтактноеЛицо.Пустая() Тогда
		КЛОбъект = КонтактноеЛицо.ПолучитьОбъект();
		ВидКИ = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ТекПочта1, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КЛОбъект, ДанныеКИ, ВидКИ, ТипКИ);
		КЛОбъект.Записать();
	ИначеЕсли Не Партнер.Пустая() Тогда
		ПартнерОбъект = Партнер.ПолучитьОбъект();
		ВидКИ = Константы.CRM_ОсновнойВидEmailКлиента.Получить();
		Если Не ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		КонецЕсли;
		Если ТипЗнч(Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		КонецЕсли;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ТекПочта1, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПартнерОбъект, ДанныеКИ, ВидКИ, ТипКИ);
		ПартнерОбъект.Записать();

	КонецЕсли;
	СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", Партнер, КонтактноеЛицо));
	ВывестиКонтактнуюИнформациюОбъектаПочта(СписокАдресов);

КонецПроцедуры	

// +CRM
#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
// -CRM

&НаКлиенте
Процедура КомандаОткрытьТекущееВзаимодействие()
	ОткрытьТекущееВзаимодействие();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущееВзаимодействие(ВзаимодействиеСсылка = Неопределено)
	
	Если ВзаимодействиеСсылка = Неопределено Тогда
		ВзаимодействиеСсылка = Элементы.Участники.ТекущиеДанные.Взаимодействие;
	КонецЕсли;
	
	Параметрыоткрытия = Новый Структура;
	Параметрыоткрытия.Вставить("Ключ", ВзаимодействиеСсылка);
	
	ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая", Параметрыоткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваДекорацииСоздатьВзаимодействие()
	
	Если ЗначениеЗаполнено(ТекВзаимодействие) Тогда
		Элементы.ДекорацияСоздатьВзаимодействие.Заголовок = ТекВзаимодействие;
		Элементы.ДекорацияСоздатьВзаимодействие.УстановитьДействие("Нажатие", "КомандаОткрытьТекущееВзаимодействие");
	Иначе
		Элементы.ДекорацияСоздатьВзаимодействие.Заголовок = "Запланировать взаимодействие";
		Элементы.ДекорацияСоздатьВзаимодействие.УстановитьДействие("Нажатие", "ДекорацияСоздатьВзаимодействиеНажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает краткую форму взаимодействия.
//
// Параметры:
//	Нет.
//
Процедура ПозиционироватьНаВзаимодействие()
	
	ПараметрыОтбора = Новый Структура("Взаимодействие", КлючОткрываемойАктивности);
	НайденныеСтроки = Объект.Участники.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.Участники.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ПерейтиКТекущемуКлиенту(Неопределено);
	
	ПараметрыАктивности = Новый Структура;
	ПараметрыАктивности.Вставить("Ключ", КлючОткрываемойАктивности);
	ОткрытьФорму("РегистрСведений.CRM_ЗапланированныеАктивности.ФормаЗаписи",
		ПараметрыАктивности, ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелефонныеЗвонкиИВзаимодействияДокумента(ДокументСсылка, Клиент, КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ВзаимодействиеСторонниеЛица.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ тчВзаимодействия
		|ИЗ
		|	Документ.CRM_Взаимодействие.СторонниеЛица КАК CRM_ВзаимодействиеСторонниеЛица
		|ГДЕ
		|	CRM_ВзаимодействиеСторонниеЛица.Ссылка.ДокументОснование = &ДокументОснование
		|	И CRM_ВзаимодействиеСторонниеЛица.Партнер = &Клиент
		|	И CRM_ВзаимодействиеСторонниеЛица.КонтактноеЛицо = &КонтактноеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ВзаимодействиеСторонниеЛица.Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие.СторонниеЛица КАК CRM_ВзаимодействиеСторонниеЛица
		|ГДЕ
		|	CRM_ВзаимодействиеСторонниеЛица.Ссылка.ДокументОснование = &ДокументОснование
		|	И CRM_ВзаимодействиеСторонниеЛица.ПотенциальныйКлиент = &Клиент
		|	И CRM_ВзаимодействиеСторонниеЛица.КонтактноеЛицо = &КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тчВзаимодействия.Ссылка КАК Ссылка,
		|	""Взаимодействия"" КАК ТипДокумента
		|ИЗ
		|	тчВзаимодействия КАК тчВзаимодействия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка,
		|	""Телефонные звонки""
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.ВзаимодействиеОснование = &ДокументОснование
		|	И ТелефонныйЗвонок.АбонентКонтакт = &Клиент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка,
		|	""Телефонные звонки""
		|ИЗ
		|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|ГДЕ
		|	ТелефонныйЗвонок.ВзаимодействиеОснование = &ДокументОснование
		|	И ТелефонныйЗвонок.АбонентКонтакт = &КонтактноеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка,
		|	""Телефонные звонки""
		|ИЗ
		|	тчВзаимодействия КАК тчВзаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|		ПО тчВзаимодействия.Ссылка = ТелефонныйЗвонок.ВзаимодействиеОснование
		|ГДЕ
		|	ТелефонныйЗвонок.АбонентКонтакт = &Клиент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТелефонныйЗвонок.Ссылка,
		|	""Телефонные звонки""
		|ИЗ
		|	тчВзаимодействия КАК тчВзаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
		|		ПО тчВзаимодействия.Ссылка = ТелефонныйЗвонок.ВзаимодействиеОснование
		|ГДЕ
		|	ТелефонныйЗвонок.АбонентКонтакт = &КонтактноеЛицо
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	ТипДокумента";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоТелефонныхЗвонковИВзаимодействий()
	
	ЭлементыДерева = ДеревоТелефонныхЗвонковИВзаимодействий.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если ЗначениеЗаполнено(ТекКлиент) Тогда
		РезультатЗапроса = ПолучитьТелефонныеЗвонкиИВзаимодействияДокумента(Объект.Ссылка, ТекКлиент, ТекКонтактноеЛицо);
	Иначе
		РезультатЗапроса = ПолучитьТелефонныеЗвонкиИВзаимодействияДокумента(Объект.Ссылка, ТекПотенциальныйКлиент, ТекКонтактноеЛицо);
	КонецЕсли;
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();
	ВыборкаТипДокумента = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТипДокумента.Следующий() Цикл
		
		НовыйЭлемент = ЭлементыДерева.Добавить();
		НовыйЭлемент.Объект = ВыборкаТипДокумента.ТипДокумента;
		НовыйЭлемент.КорневойЭлемент = Истина;
		
		ВыборкаДетальныеЗаписи = ВыборкаТипДокумента.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭлементыТипа = НовыйЭлемент.ПолучитьЭлементы();
			ЭлементДокумент = ЭлементыТипа.Добавить();
			ЭлементДокумент.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
				ЭлементДокумент.Объект = ПолучитьПредставлениеВзаимодействия(ВыборкаДетальныеЗаписи.Ссылка);
			Иначе
				ЭлементДокумент.Объект = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокНезавершенныхВзаимодействийТМ(ТелемаркетингСсылка)
	
	СтатусыВзаимодействия = Новый Массив;
	СтатусыВзаимодействия.Добавить(Справочники.CRM_СостоянияСобытий.Завершено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
		|	И НЕ CRM_Взаимодействие.СтатусВзаимодействия В(&СтатусыВзаимодействия)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ТелемаркетингСсылка);
	Запрос.УстановитьПараметр("СтатусыВзаимодействия", СтатусыВзаимодействия);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыВзаимодействий(Взаимодействие = Неопределено)
	
	Если Взаимодействие = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Участники Цикл
			Если ТекСтрока.Взаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Тогда
				ТекСтрока.Взаимодействие = Документы.CRM_Взаимодействие.ПустаяСсылка();
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Взаимодействие) Тогда
				ТекСтрока.СтатусВзаимодействия = ТекСтрока.Взаимодействие.СтатусВзаимодействия;
				ТекСтрока.ВзаимодействиеЗавершено = ТекСтрока.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
				ТекСтрока.ВзаимодействиеПредставление = ПолучитьПредставлениеВзаимодействия(ТекСтрока.Взаимодействие);
				ТекСтрока.ВзаимодействиеПлановаяДата = ТекСтрока.Взаимодействие.ПлановаяДата;
				ТекСтрока.ВзаимодействиеДата = ТекСтрока.Взаимодействие.Дата;
			Иначе
				ТекСтрока.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.ПустаяСсылка();
				ТекСтрока.ВзаимодействиеЗавершено = Ложь;
				ТекСтрока.ВзаимодействиеПредставление = "";
				ТекСтрока.ВзаимодействиеПлановаяДата = Дата("39991231");
				ТекСтрока.ВзаимодействиеДата = Дата("39991231");
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтруктураПоиска = Новый Структура("Взаимодействие", Взаимодействие);
		НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].Взаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Тогда
				НайденныеСтроки[0].Взаимодействие = Документы.CRM_Взаимодействие.ПустаяСсылка();
				НайденныеСтроки[0].СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.ПустаяСсылка();
				НайденныеСтроки[0].ВзаимодействиеЗавершено = Ложь;
				НайденныеСтроки[0].ВзаимодействиеПредставление = "";
				НайденныеСтроки[0].ВзаимодействиеПлановаяДата = Дата("39991231");
				НайденныеСтроки[0].ВзаимодействиеДата = Дата("39991231");
			Иначе
				НайденныеСтроки[0].СтатусВзаимодействия = НайденныеСтроки[0].Взаимодействие.СтатусВзаимодействия;
				НайденныеСтроки[0].ВзаимодействиеЗавершено =
					НайденныеСтроки[0].СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
				НайденныеСтроки[0].ВзаимодействиеПредставление =
					ПолучитьПредставлениеВзаимодействия(НайденныеСтроки[0].Взаимодействие);
				НайденныеСтроки[0].ВзаимодействиеПлановаяДата = НайденныеСтроки[0].Взаимодействие.ПлановаяДата;
				НайденныеСтроки[0].ВзаимодействиеДата = НайденныеСтроки[0].Взаимодействие.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Участники.Сортировать("ВзаимодействиеЗавершено, ВзаимодействиеПлановаяДата, ВзаимодействиеДата");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВсплывающиеГруппы()
	
	Если Не Элементы.Найти("ПодменюТипаКИТелефон") = Неопределено
		И Не Элементы.ПодменюТипаКИТелефон.Скрыта() Тогда
		
		Элементы.ПодменюТипаКИТелефон.Скрыть();
		ОтключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеТелефон_Закрыть");
	КонецЕсли;
	Если Не Элементы.Найти("ПодменюТипаКИПочта") = Неопределено
		И Не Элементы.ПодменюТипаКИПочта.Скрыта() Тогда
		
		Элементы.ПодменюТипаКИПочта.Скрыть();
		ОтключитьОбработчикОжидания("КонтактнаяИнформацияНажатиеПочта_Закрыть");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеВзаимодействия(ВзаимодействиеСсылка)
	
	Если ВзаимодействиеСсылка.Пустая() Тогда
		Результат = "";
	Иначе
		Результат = СтрШаблон("%1 %2 - %3", ВзаимодействиеСсылка.Тема,
		                                    Формат(ВзаимодействиеСсылка.ПлановаяДата, "ДФ='dd.MM.yyyy HH:mm'"),
		                                    Формат(ВзаимодействиеСсылка.ПлановаяДатаЗавершение, "ДФ='dd.MM.yyyy HH:mm'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьКонецРазговораНаСервере(ПараметрыЗвонка)
	
	Если ПараметрыЗвонка.Звонок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	АбонентКонтакт = ПараметрыЗвонка.Звонок.АбонентКонтакт;
	Если ЗначениеЗаполнено(АбонентКонтакт) И ТипЗнч(АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураПоиска.Вставить("Партнер", АбонентКонтакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(АбонентКонтакт) И ТипЗнч(АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		СтруктураПоиска.Вставить("КонтактноеЛицо", АбонентКонтакт);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Звонок = ПараметрыЗвонка.Звонок;
		Если ПараметрыЗвонка.Свойство("Интерес") Тогда
			НайденнаяСтрока.Интерес = ПараметрыЗвонка.Интерес;
		КонецЕсли;
		Если ПараметрыЗвонка.Звонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Отвеченный Тогда
			ТекНеДозвонились = Ложь;
			НайденнаяСтрока.НеДозвонились = Ложь;
			НайденнаяСтрока.Обработан = Не НайденнаяСтрока.НеДозвонились И Не НайденнаяСтрока.Отказ
				 И Не НайденнаяСтрока.ПерезвонитьПозднее;
		Иначе
			ТекОбработан = Ложь;
			НайденнаяСтрока.Обработан = Ложь;
			НайденнаяСтрока.НеДозвонились = Не НайденнаяСтрока.Обработан И Не НайденнаяСтрока.Отказ
				 И Не НайденнаяСтрока.ПерезвонитьПозднее;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Сценарий");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "УчастникиПримечание1");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#КонецОбласти
