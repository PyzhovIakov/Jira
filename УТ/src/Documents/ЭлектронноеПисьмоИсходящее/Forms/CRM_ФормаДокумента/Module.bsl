
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КонтекстВыбора;

&НаКлиенте
Перем ТекущаяПозицияHTML;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	ДоступныеУчетныеЗаписи = Новый СписокЗначений;
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеУчетныеЗаписи);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найдено доступных для отправки учетных записей.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
			Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			
			ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи.НайтиПоЗначению(ОсновнаяУчетнаяЗапись);
			
			Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) И ДанныеДоступнойУчетнойЗаписи <> Неопределено Тогда
				Объект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Объект.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
				Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
					ДанныеДоступнойУчетнойЗаписи = ДоступныеУчетныеЗаписи[0];
					Объект.УчетнаяЗапись = ДанныеДоступнойУчетнойЗаписи.Значение;
					Объект.ОтправительПредставление = ДанныеДоступнойУчетнойЗаписи.Представление;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяОтправителяПользователя = CRM_УправлениеЭлектроннойПочтой.ИмяОтправителяПользователя(Объект.УчетнаяЗапись,
																								ТекущийПользователь);
		Объект.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
			ИмяОтправителяПользователя, Объект.УчетнаяЗапись.АдресЭлектроннойПочты, "");
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ДоступныеУчетныеЗаписи Цикл
		ЗаполнитьЗначенияСвойств(Элементы.ОтправительПредставление.СписокВыбора.Добавить(), ЭлементСписка);
	КонецЦикла;
	
	ВключитьТолькоПросмотр = Ложь;
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Ответственному разрешено открывать письмо независимо от прочих проверок.
		Если Не ТекущийПользовательОтветственнный() Тогда
			
			// Проверим наличие доступа в учетной записи.
			Если Не Объект.УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись
				 И Не CRM_ОбщегоНазначенияСервер.НайтиПользователяВУчетнойЗаписи(Объект.УчетнаяЗапись,
				 	 Пользователи.ТекущийПользователь()) Тогда
				
				Если Не Объект.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям Тогда
					
					// Проверяем, открывается ли письмо из другого документа, задачи, БП и пр., если да, то письмо ставим в режим
					// "Только чтение".
					Если Параметры.Свойство("ОткрытиеИзФормы") И Параметры.ОткрытиеИзФормы Тогда
						ВключитьТолькоПросмотр = Истина;
					
					Иначе
						ТекстСообщения =
							CRM_ВзаимодействияКлиентСервер.ПолучитьТекстСообщенияОбОтсутствииПравДоступаКЭлектронномуПисьму(Объект.УчетнаяЗапись);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				
				Иначе
					ВключитьТолькоПросмотр = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ВключитьТолькоПросмотр Тогда
		ТолькоПросмотр = Истина;
		Элементы.КоманднаяПанельАтрибуты.Доступность = Ложь;
		Элементы.ГруппаИнтерес.Доступность = Ложь;
		Элементы.СкрытаяСтраница.Доступность = Ложь;
		Элементы.ГруппаПолучатели.Доступность = Ложь;
		Элементы.ГруппаПолучателиКопии.Доступность = Ложь;
		Элементы.ГруппаПолучателиСкрытыкКопии.Доступность = Ложь;
		Элементы.CRM_ГруппаСвязанныеОбъекты.Доступность = Ложь;
		Элементы.ГруппаШаблона.Доступность = Ложь;
		Элементы.СтраницыТекстПисьма.Доступность = Ложь;
		Элементы.ГруппаЗагрузкаВложений.Доступность = Ложь;
		
		Для Каждого ТекЭлемент Из Элементы.ОбластьНастроек.ПодчиненныеЭлементы Цикл
			Если ТекЭлемент.Имя = "ГруппаВложения" Тогда
				Продолжить;
			Иначе
				ТекЭлемент.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.бзГруппаБазаЗнаний.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	CRM_ОбъектИнтереса = Предмет;
	
	ТранслитерироватьИменаФайловПриДобавленииВложений = 
			ХранилищеОбщихНастроекЗагрузить("ТранслитерироватьИменаФайловПриДобавленииВложений", 
			"ТранслитерироватьИменаФайловПриДобавленииВложений", Ложь);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииИПриЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);		
		CRM_ОбъектИнтереса = Предмет;

		Если ЗначениеЗаполнено(Объект.ВзаимодействиеОснование) Тогда
			CRM_ОбъектИнтереса = Объект.ВзаимодействиеОснование;
		КонецЕсли;
		Если Параметры.ЗначенияЗаполнения.Свойство("ДанныеБыстрогоВвода") Тогда
			Предмет = Параметры.ЗначенияЗаполнения.ДокументОснование;
			CRM_ОбъектИнтереса = Предмет;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Предмет)
			И Параметры.Свойство("Основание")
			И CRM_ВзаимодействияСервер.ЯвляетсяПредметом(Параметры.Основание) Тогда
			Предмет = Параметры.Основание;
			CRM_ОбъектИнтереса = Предмет;
		КонецЕсли;
		
		// Для новых писем, созданных вручную на основании писем рассылки, предимет не должен быть установлен в документ рассылки.
		// При этом текст и файлы все равно требуется взять из рассылки, если только письмо рассылки не было изменено вручную.
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
			Если ЗначениеЗаполнено(Объект.ВзаимодействиеОснование)
				И ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				Предмет = Объект.ВзаимодействиеОснование;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Шаблон") Тогда
			Шаблон = Параметры.ЗначенияЗаполнения.Шаблон;
		КонецЕсли;
		
	Иначе
		
		Ошибка = РегистрыСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Выбрать(Новый Структура("Письмо",
			 Объект.Ссылка));
		Если Ошибка.Следующий() Тогда
			Элементы.ДекорацияОшибкаОтправки.Заголовок = Ошибка.ИнформацияООшибке;
			Элементы.ГруппаОшибкаОтправки.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим папку по учетной записи.
	Если Объект.Ссылка.Пустая() Тогда
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.УчетнаяЗапись, "Черновики");
	Иначе
		Папка = Взаимодействия.ПолучитьПапкуЭлектронногоПисьма(Объект.Ссылка);
	КонецЕсли;
	
	Если Папка <> CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.УчетнаяЗапись, "Черновики") Тогда
		Элементы.ГруппаОснование.ПодчиненныеЭлементы.ИзменитьОснование.Видимость = Ложь;
		Элементы.ГруппаОснование.ПодчиненныеЭлементы.ОчиститьОснование.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Предмет);
	Элементы.ИзменитьПредмет.Видимость = Истина;
	Элементы.ПредметИзменение.Видимость = Ложь;
	
	Заголовок = ПолучитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.Свойства.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГруппаЕще");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_Партнер = ОпределитьПартнера();
	
	Элементы.ГруппаТабПолучателей.Видимость				= Элементы.СкрытьПоказатьПолучателей.Пометка;
	Элементы.ГруппаТабПолучателейКопии.Видимость			= Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость	= Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	
	ПолучитьСписокПоследнихАдресов();
	
	// +БазаЗнаний
	// Создаем на форме элементы базы знаний.
	Если Константы.CRM_ИспользоватьБазуЗнаний.Получить() Тогда
		бзЗаполнитьИспользуемыеРешения();
	КонецЕсли;	
	// -БазаЗнаний
	CRM_МетодыФормДокументовСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, "ГруппаИнтерес");
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ШиринаТегов	= Элементы.ГруппаНастройкиПраваяКолонка.Ширина;
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.ОбластьНастроек;
	ОбновитьОблакоТегов();

	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.CRM_Проект.Видимость = ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме");
	
	Если ТолькоПросмотр Тогда
		Элементы.ТекстПисьмаHTML.Доступность = Ложь;
	КонецЕсли;
	
	// Показать/скрыть свойства по умолчанию	
	CRM_ПоказатьСкрытьСвойстваНаСервере(Истина);
	CRM_ОбновитьДатуПисьма();
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Создан';en='Created'") + " ", ,
		 ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.Дата, "ДФ=d.MM.yyyy") + " " + НСтр("ru='в';en='in'") 
		+ " " + Формат(Объект.Дата,
		 "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС);
	
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	// В случае, если это создание ответа - фокус на тексте письма.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ВзаимодействиеОснование) Тогда
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
			УстановитьФокусНаТекстеПисьма = Истина;
		Иначе
			ТекущийЭлемент = Элементы.ТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаДополнительное.Видимость = Ложь;
	
	// +Модели машинного обучения
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения") Тогда
		Помощник_Использовать = Помощник_ПроверитьИспользование();
		Если Помощник_Использовать Тогда
			Элементы.ГруппаПомощник.Видимость = Истина;
			Помощник_ОбновитьСостояние();
		КонецЕсли;
	КонецЕсли;
	// -Модели машинного обучения
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.СписокПолучателейПисьма.ТолькоПросмотр = Истина;
		Элементы.СписокПолучателейКопий.ТолькоПросмотр = Истина;
		Элементы.СписокПолучателейСкрытыхКопий.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_РаботаСЯзыковымиМоделямиСервер.ПриСозданииНаСервере(ЭтотОбъект, "ГруппаАссистент");

	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
	ПодключитьАвтосохранениеЧерновиков();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииИПриЧтенииНаСервере();
	
	ПараметрыТегов	= ПараметрыТегов();
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы, ПараметрыТегов);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// CRM_УправлениеДоступом
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступомУровниДоступа");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец CRM_УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	CRM_ТрудозатратыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если Не ЗначениеЗаполнено(CRM_СписокПолучателейПисьма) Тогда
		ТекущийЭлемент = Элементы.СписокПолучателейПисьма;
	КонецЕсли;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	Элементы.КнопкаУведомитьОДоставке.Пометка		= Объект.УведомитьОДоставке;
	Элементы.КнопкаУведомитьОПрочтении.Пометка		= Объект.УведомитьОПрочтении;
	
	УстановитьВидимостьПолучателейПисьма();
	ОбработкаВыбораКонтактаОтправителя();
	
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	// Заполнение по шаблону при открытии
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ЗаполнитьПоШаблону(ТекстВПолеHTML, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ОформлениеИзбранного();
	
	Если Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент Тогда
		CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
	#Иначе
		Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
			Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		КонецЕсли;
	#КонецЕсли
	
	Если ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		 ИЛИ ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ВзаимодействиеОснование = Объект.ВзаимодействиеОснование;
	Иначе
		ВзаимодействиеОснование = "<Связь не задана>";
		Элементы.ВзаимодействиеОснование.Гиперссылка = Ложь;
		Элементы.ВзаимодействиеОснование.ЦветТекста = Новый Цвет(51, 51, 51);
		ПредметИсходный = Предмет;
		ТемаИсходная = Объект.Тема;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ЗначениеЗаполнено(ВзаимодействиеОснование)
		И ТипЗнч(Предмет) <> Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") 
		И Вложения.Количество() > 0 Тогда
		
		СвязанныйИнтерес = СвязанныйИнтерес();
		ВходящееПисьмоВИнтересе = ВходящееПисьмоВИнтересе(СвязанныйИнтерес);
		
		Если ЗначениеЗаполнено(ВходящееПисьмоВИнтересе) Тогда
			СвязатьСПисьмом(ВходящееПисьмоВИнтересе, Новый Структура());
		КонецЕсли;
	КонецЕсли;
	
	Если ВладелецФормы <> Неопределено И 
		ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если Объект.Ссылка.Пустая() Тогда
			
			Если ВладелецФормы.ИмяФормы = "Обработка.CRM_МенеджерПочты.Форма.Форма" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.ОткрытиеВОдинКлик.СозданиеИзМенеджераПочты");
			ИначеЕсли ВладелецФормы.ИмяФормы = "ОбщаяФорма.CRM_СтруктураПодчиненности" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.ОткрытиеВОдинКлик.СозданиеИзФормыСвязанныеДокументы");
			ИначеЕсли (ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая"
				 Или ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаСписка" 
				Или ВладелецФормы.ИмяФормы = "Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаЭлемента"
					 Или ВладелецФормы.ИмяФормы = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлементаНовая" 
				Или ВладелецФормы.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая") Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.ОткрытиеВОдинКлик.СозданиеИзЛенты");
			КонецЕсли;
			
		Иначе
			
			Если ВладелецФормы.ИмяФормы = "Обработка.CRM_МенеджерПочты.Форма.Форма" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзМенеджераПочты");
			ИначеЕсли ВладелецФормы.ИмяФормы = "ОбщаяФорма.CRM_СтруктураПодчиненности" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзФормыСвязанныеДокументы");
			ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиДела.Форма.Форма" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзАРМаМоиДелаКолонкаВходящие");
			ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_МоиПродажи.Форма.Форма" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзАРМаМоиПродажиКолонкаОбращения");
			ИначеЕсли ВладелецФормы.ИмяФормы = "Обработка.CRM_АРМ_Поддержка.Форма.Форма" Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзАРМаПоддержкаКолонкаОбращения");
			ИначеЕсли (ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая"
				 Или ВладелецФормы.ИмяФормы = "Справочник.Партнеры.Форма.CRM_ФормаСписка" 
				Или ВладелецФормы.ИмяФормы = "Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаЭлемента"
					 Или ВладелецФормы.ИмяФормы = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлементаНовая" 
				Или ВладелецФормы.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокументаНовая") Тогда
				CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеИзЛенты");
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе
		Если Объект.Ссылка.Пустая() Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.ОткрытиеВОдинКлик.СозданиеБезКонтекста");
		Иначе
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ОткрытиеВОдинКлик.ОткрытиеБезКонтекста");
		КонецЕсли;
	КонецЕсли;
	
	CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ТекстПисьмаHTML);
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ДлительностьСценариев.ВремяРаботыВФорме");
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		ЕстьДанныеАвтосохранения  = ЕстьДанныеАвтосохранения(Объект.Ссылка, ТекущийПользователь);
		Если ЕстьДанныеАвтосохранения Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьДанныеАвтосохранения", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Восстановить данные автосохранения?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПодключитьОбработчикОжидания("ВыполнитьАвтосохранение", ПериодАвтосохраненияЧерновиков);
		КонецЕсли;
	КонецЕсли;
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ПриОткрытии(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
		И Модифицированность
		И Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		
		ЕстьРедактируемыеФайлы = Ложь;
		МассивРедактируемыхФайлов = Новый Массив;
		
		Для Каждого Вложение Из Вложения Цикл
			
			Если Вложение.Редактируется Тогда
				ЕстьРедактируемыеФайлы = Истина;
				МассивРедактируемыхФайлов.Добавить(Вложение.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРедактируемыеФайлы Тогда
			
			Отказ                = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='Данные были изменены, Записать?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивРедактируемыхФайлов", МассивРедактируемыхФайлов);
			ОповещениеПослеВопросаОЗакрытии = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытии", ЭтотОбъект,
				 ДополнительныеПараметры);
			
			ПоказатьВопрос(ОповещениеПослеВопросаОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
		УдалитьДанныеАвтосохранения(Объект.Ссылка, ТекущийПользователь);
		
	КонецЕсли;
	
	Если Не ЗавершениеРаботы
		И ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML")
		И Не ЗначениеЗаполнено(Объект.ДатаОтправления) Тогда
		
		HTMLДокумент = Элементы.ТекстПисьмаHTML.Документ;
		Если HTMLДокумент <> Неопределено И ТекстПисьмаПриОткрытии <> "" Тогда
			ТекстПисьмаПередЗакрытием = HTMLДокумент.body.innerHTML;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПередЗакрытием);
			Если ТекстПисьмаПередЗакрытием <> ТекстПисьмаПриОткрытии Тогда
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	// +CRM
	CRM_ТрудозатратыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ДлительностьСценариев.ВремяРаботыВФорме");
	
	CRM_ТрудозатратыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект") Тогда
		CRM_РаботаСHTMLКлиент.ВставитьСсылкуНаОбъект(Элементы.ТекстПисьмаHTML, ВыбранноеЗначение.Ссылка,
			ВыбранноеЗначение.ПредставлениеСсылки);
	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
			
	// +CRM	
	ИначеЕсли КонтекстВыбора = "ВыборПредмета" Тогда
		
		Предмет = ВыбранноеЗначение;
		Модифицированность = Истина;
		КонтекстВыбора = Неопределено;
		
		ПредметИзменениеПриИзменении(Элементы.ПредметИзменение);
	// -CRM	
	Иначе
		
		ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Создан новый партнер" Или ИмяСобытия = "Создано новое контактное лицо" Тогда
		Если Не ПустаяСтрока(ИмяЭлемента)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяЭлемента) Тогда
			ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
			Если ТекДанные <> Неопределено Тогда 
				ТекДанные.Контакт	= Параметр;
				ИмяЭлемента			= "";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбъектыПереопределеныСПК" Тогда
		
		Если ЗначениеЗаполнено(ИдентификаторСтрокиПолучателя) Тогда		
			ТекДанные = ПолучателиПисьма.НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
			Если ТекДанные <> Неопределено Тогда 
				// АПК:566-выкл использование синхронного вызова: "Прочитать".
				Прочитать();
				// АПК:566-вкл
				ИмяЭлемента			= "";
			КонецЕсли;
		КонецЕсли;
		
	// +БазаЗнаний
	ИначеЕсли ИмяСобытия = "ДобавитьТекстВопросаВТекстПисьма" ИЛИ ИмяСобытия = "ДобавитьТекстОтветаВТекстПисьма" Тогда
		// Перезаполняем текст текущего решения.
		// BSLLS:MissingCodeTryCatchEx-off
		Попытка
			ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
			ТекстHTML = ОбработатьВставкуИзБазыЗнаний(ТекстВПолеHTML, Параметр.Решение, Параметр.НомерОтвета);
			Если Вложения.Количество() > 0 Тогда
				ОбновитьОтображениеДанных();
				СформироватьСсылкиВложений();
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстHTML) Тогда
				CRM_ПоляВводаКлиент.ВставитьТекстПоКурсору(ЭтотОбъект, Элементы.ТекстПисьмаHTML, "ТекстПисьмаHTML", ТекстHTML);
				CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстПисьмаHTML, КартинкиДобавленные, УникальныйИдентификатор);
			КонецЕсли;
		Исключение
		КонецПопытки;
		// BSLLS:MissingCodeTryCatchEx-on
	// -БазаЗнаний
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоТегов" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоТегов();
	ИначеЕсли ИмяСобытия = "ПроверкаПравописания_ИзмененТекст" И Источник = ЭтотОбъект Тогда
		ТекстПисьмаHTML = Параметр.Текст;
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ПослеСозданияТега" И (Источник = Элементы.Тег) Тогда
		Тег = Параметр;
		CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элементы.Тег);
	ИначеЕсли ИмяСобытия = "АвтосохранениеЧерновиковПисем" Тогда
		Если Параметр Тогда
			ПодключитьАвтосохранениеЧерновиков();
		Иначе
			УдалитьВсеДанныеАвтосохраненияПользователя(ТекущийПользователь);
		КонецЕсли;
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Партнеры")
		 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
	ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Пользователи")
		 ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
			ТекДанные.Контакт	= НовыйОбъект;
			ИмяЭлемента			= "";
			
			Если ИмяЭлемента = "ПолучателиПисьма" Тогда
				НовыйПартнер = ОпределитьПартнера();
				Если НовыйПартнер <> CRM_Партнер Тогда
					CRM_Партнер = НовыйПартнер;
					ПриИзмененииПартнера();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениЗаписиВФорме(ЭтотОбъект, РежимЗаписи);
	
	Если Не ПроверитьКорректностьАдресов() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
						 , "Вложения", ,
						 Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	ПроверитьСкорректироватьПолучателейПисьма();
	
	Для Каждого Вложение Из Вложения Цикл
		
		Если Вложение.Расположение = 0 
			И Вложение.Редактируется Тогда
			
			ОписаниеОповещенияПомещенияФайла = Новый ОписаниеОповещения("ПослеПомещенияФайла", ЭтотОбъект);
			РаботаСФайламиКлиент.ПоместитьПрисоединенныйФайл(ОписаниеОповещенияПомещенияФайла,
				 Вложение.Ссылка,
				 УникальныйИдентификатор);
			
		КонецЕсли;

	КонецЦикла;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ТекстПисьмаHTML = CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ЗапомнитьПозициюHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	CRM_РаботаСHTMLКлиент.ЗаписатьHTML(Элементы.ТекстПисьмаHTML, КартинкиДобавленные,
		 УникальныйИдентификатор,
		 "blockquote");
	ТекстПисьмаHTMLПриЗаписи = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ТекстПисьмаHTMLПриЗаписи, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЭтоПисьмоРассылки
		Или (ЭтоПисьмоРассылки И Объект.CRM_РассылкаИзменена) Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			
			CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстПисьмаHTMLПриЗаписи,
				ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые);
			
			ТекущийОбъект.ТекстHTML = ТекстПисьмаHTMLПриЗаписи;
			ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		Иначе
			
			ТекущийОбъект.Текст = ТекстПисьма;
			
		КонецЕсли;
		
		Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			
			ТекущийОбъект.ПисьмаВложения.Очистить();
			ИндексСтроки = 1;
			Для Каждого Вложение Из Вложения Цикл
				
				Если Вложение.Расположение = 5 И ЗначениеЗаполнено(Вложение.Письмо) Тогда
					НоваяСтрока = ТекущийОбъект.ПисьмаВложения.Добавить();
					НоваяСтрока.Письмо                     = Вложение.Письмо;
					НоваяСтрока.ПорядковыйНомерВоВложениях = ИндексСтроки;
				КонецЕсли;
				
				ИндексСтроки =  ИндексСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			
			CRM_Взаимодействия.ОбработатьКартинкиHTMLПередЗаписью(ТекстПисьмаHTMLПриЗаписи,
				ИдентификаторыКартинокПисьма, КартинкиДобавленные, КартинкиУдаляемые);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка И ((ТекущийОбъект.ПолучателиКопий.Количество() = 0)
	И (ТекущийОбъект.ПолучателиПисьма.Количество() = 0)
	И (ТекущийОбъект.ПолучателиСкрытыхКопий.Количество() = 0)) Тогда
		
		ВыполняетсяОтправка	= Ложь;
		Отказ				= Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указано ни одного получателя.'"));
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка И Не ОтправлятьСообщенияСразу Тогда
		
		Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(ТекущийОбъект.УчетнаяЗапись, "Исходящие");
		ТекущийОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		
	КонецЕсли;
	
	ТекущийОбъект.Размер = ОценитьРазмерПисьма();
	
	ТекущийОбъект.СписокПолучателейПисьма = CRM_СписокПолучателейПисьма;
	ТекущийОбъект.СписокПолучателейКопий = CRM_СписокПолучателейКопий;
	ТекущийОбъект.СписокПолучателейСкрытыхКопий = CRM_СписокПолучателейСкрытыхКопий;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = ТекущийОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый")
		И ТекущийОбъект.ДополнительныеСвойства.ЭтоНовый;
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Возврат;
	КонецЕсли;
	
	Письмо = ТекущийОбъект.Ссылка;
	
	Для Каждого УдаленнаяКартинка Из КартинкиУдаляемые Цикл
		ОбъектВложение = УдаленнаяКартинка.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	КартинкиУдаляемые.Очистить();
	
	Если Не ЭтоПисьмоРассылки
		Или (ЭтоПисьмоРассылки И Объект.CRM_РассылкаИзменена) Тогда
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			Если ТипЗнч(УдаленноеВложение.Значение) = Тип("СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы") Тогда
				ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
				ОбъектВложение.Удалить();
			КонецЕсли;
		КонецЦикла;
		УдаленныеВложения.Очистить();
		
		// Создадим вложения для добавленных картинок.
		МассивДобавленныхКартинок = Новый Массив;
		Для Каждого Строка Из КартинкиДобавленные Цикл
			
			ПараметрыВложения = Строка.Значение;
			
			ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, ПараметрыВложения.АдресВоВременномХранилище, ПараметрыВложения);
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ПараметрыВложения.ИДФайлаЭлектронногоПисьма;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
			МассивДобавленныхКартинок.Добавить(ПараметрыВложения.ИДФайлаЭлектронногоПисьма);
			
		КонецЦикла;
		КартинкиДобавленные.Очистить();
		
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			
			Если ЭтоКопированиеПисьма Тогда
				Если МассивДобавленныхКартинок.Найти(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если Не СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = ""
					И Не СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "#" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Размер = 0;
			ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
			
			Если СтрокаТаблицыВложений.Расположение = 6 Тогда
				
				CRM_УправлениеЭлектроннойПочтой.CRM_ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
					Письмо,
					СтрокаТаблицыВложений.СсылкаКопирования,
					УникальныйИдентификатор,
					СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 4 Тогда
				
				ПараметрыВложения = Новый Структура;
				ПараметрыВложения.Вставить("ИмяФайла", ИмяФайла);
				ПараметрыВложения.Вставить("Размер", Размер);
				
				// из временного хранилища
				CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ПараметрыВложения);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
				// из файла на сервере
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
				
				Если ЭтоКопированиеПисьма Тогда
					CRM_УправлениеЭлектроннойПочтой.CRM_ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
						Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор, СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма);
				Иначе
					CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
						Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
				// перезаписать вложение
				// Если ЭтоПисьмоРассылки И Объект.CRM_РассылкаИзменена И МенялиФлагРедактирования Тогда
				//	СтрокаТаблицыВложений.Ссылка = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				//		Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
				//КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыВложений.Расположение = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СохранитьСписокСписокПоследнихАдресов();
	
	Если ЗначениеЗаполнено(Объект.ВзаимодействиеОснование)
		И ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЖурналДокументов.CRM_Интерес КАК Интерес
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
		|ГДЕ
		|	ЖурналДокументов.Объект = &Объект");
		
		Запрос.Параметры.Вставить("Объект", Объект.ВзаимодействиеОснование);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ОснованиеОбъект = Объект.ВзаимодействиеОснование.Получитьобъект();
			ОснованиеОбъект.CRM_СкрытьВАРМ = Истина;
			ОснованиеОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ВзаимодействиеОснованиеЗаполнено = ЗначениеЗаполнено(ТекущийОбъект.ВзаимодействиеОснование)
		И (ТипЗнч(ТекущийОбъект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(ТекущийОбъект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		
	Если Не ЗначениеЗаполнено(ТекущийОбъект.CRM_ТипОтвета)
		И ВзаимодействиеОснованиеЗаполнено Тогда
		
		ТекущийОбъект.CRM_ТипОтвета = Перечисления.CRM_ТипыОтвета.ОтветНаПисьмо;
	КонецЕсли;
	
	Если ЭтоНовый И ЗначениеЗаполнено(ТекущийОбъект.CRM_ТипОтвета) Тогда
		CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоКопированиеПисьма = Ложь;
	
	ЗаполнитьВложения();
	СформироватьСсылкиВложений();
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		
		CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка, Ложь, Ложь);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	КонецЕсли;
	
	Если ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена Тогда
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
			Предмет.ТекстHTML, Предмет, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		ЗаполнитьАвтотекст(ТекстПисьма);
		
	Иначе
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
			Объект.ТекстHTML, Объект.Ссылка, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЭтоНовый")
			И ТекущийОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
			СсылкаНаПисьмо = Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка();
		Иначе
			СсылкаНаПисьмо = Объект.Ссылка;
		КонецЕсли;
		УдалитьДанныеАвтосохранения(СсылкаНаПисьмо, ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML; 
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	КонецЕсли;
	
	// +CRM
	// оповестить взаимодействия о создании сделки.
	Оповестить("СозданПредметВзаимодействия", Объект.ВзаимодействиеОснование);
	// +БазаЗнаний
	
	// Сохраняем используемые решения.
	#Если НЕ ВебКлиент Тогда
	бзСохранитьИспользуемыеРешения();
	#КонецЕсли
	// -БазаЗнаний	
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	// -CRM
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект,
		Объект,
		ПараметрыЗаписи,
		"ЭлектронноеПисьмоИсходящее");
	
	ОбновитьОтображениеДанных();
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	ОбработкаВыбораКонтактаОтправителя();
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		ПроверяемыйТекст = Элементы.ТекстПисьмаHTML.Документ.documentElement.outerHTML;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// +CRM
	Если НЕ Настройки["CRM_ПоказатьСкрытьСвойства"] = Неопределено Тогда
		CRM_ПоказатьСкрытьСвойстваНаСервере(Настройки["CRM_ПоказатьСкрытьСвойства"]);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПолучателейПисьмаПриИзменении(Элемент)
	
	СписокПолучателейПисьмаПриИзмененииПродолжение(Элемент);
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
		НовыйЭлемент.ВидДанных = "СписокПолучателейПисьма";
		НовыйЭлемент.ОписаниеДанных = CRM_СписокПолучателейПисьма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаПриИзмененииПродолжение(Элемент)
	
	ТекстРедактирования = CRM_СписокПолучателейПисьма;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиПисьма.Очистить();
		
		НовыйПартнер = ОпределитьПартнера();
		Если НовыйПартнер <> CRM_Партнер Тогда
			CRM_Партнер = НовыйПартнер;
			ПриИзмененииПартнера();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, аа, КонецСтроки, фф);
	Элемент.УстановитьГраницыВыделения(1, фф, 1, фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейПисьма");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "ПолучателиПисьма";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись,
		 Результат,
		 СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);
	
	ОбновитьСписокСписокПоследнихАдресов();
	
	НовыйПартнер = ОпределитьПартнера();
	Если НовыйПартнер <> CRM_Партнер Тогда
		CRM_Партнер = НовыйПартнер;
		ЗаполнитьАвтотекст(ТекстПисьмаHTML);
		ЗаполнитьОтправительКонтакт();
		ОбработкаВыбораКонтактаОтправителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ПолучателиПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиПисьма");
	Если МассивПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если МассивПолучателей.Количество() = 1 Тогда
		ПоказатьЗначение(, МассивПолучателей[0].Контакт);	
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Список получателей письма (Кому)'"));
		ПараметрыФормы.Вставить("МассивПолучателей", МассивПолучателей);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокиПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоАвтоПодбор Тогда
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		аа = 0;
		фф = 0;
		
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, аа, КонецСтроки, фф);
		
		ТекстДоМаркера		= Лев(Элемент.ТекстРедактирования, фф - 1);
		ТекстПослеМаркера	= Сред(Элемент.ТекстРедактирования, фф);
		
		СборнаяСтрока = "";
		
		Если СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДоМаркера, ",");
			Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
				Если Индекс = (МассивПодстрок.Количество() - 1) Тогда
					Продолжить;
				КонецЕсли;
				СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + МассивПодстрок[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока = "", "", ",") + ВыбранноеЗначение;
		
		Если СтрНайти(ТекстПослеМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПослеМаркера, ",");
			Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
				СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		ВыбранноеЗначение = СборнаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиПолучателейПисьмаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЭтоАвтоПодбор = (НЕ Ожидание = 0);
	
	Если НЕ Ожидание = 0 Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		аа = 0;
		фф = 0;
		
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, аа, КонецСтроки, фф);
		
		ТекстДоМаркера		= Лев(Текст, фф - 1);
		ТекстПослеМаркера	= Сред(Текст, фф);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДоМаркера, ",");
			
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество() - 1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И СтрНайти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если НЕ ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = СписокПолучателейПисьмаАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли ИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из ИсторияАдресов Цикл
					Если СтрНайти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИсторияАдресов.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийПриИзменении(Элемент)
	
	СписокПолучателейКопийПриИзмененииПродолжение(Элемент);
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
		НовыйЭлемент.ВидДанных = "СписокПолучателейКопий";
		НовыйЭлемент.ОписаниеДанных = CRM_СписокПолучателейКопий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийПриИзмененииПродолжение(Элемент)
	
	ТекстРедактирования = CRM_СписокПолучателейКопий;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиКопий.Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, аа, КонецСтроки, фф);
	Элемент.УстановитьГраницыВыделения(1, фф, 1, фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейКопий");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "ПолучателиКопий";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись,
		 Результат,
		 СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);
	
	ОбновитьСписокСписокПоследнихАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.ПолучателиПисьма.Количество() = 0 Тогда
		МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиКопий");
		
		Если НЕ МассивПолучателей.Количество() = 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Список получателей письма (Копии)'"));
			ПараметрыФормы.Вставить("МассивПолучателей", МассивПолучателей);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийПриИзменении(Элемент)
	
	СписокПолучателейСкрытыхКопийПриИзмененииПродолжение(Элемент);
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
		НовыйЭлемент.ВидДанных = "СписокПолучателейСкрытыхКопий";
		НовыйЭлемент.ОписаниеДанных = CRM_СписокПолучателейСкрытыхКопий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийПриИзмененииПродолжение(Элемент)
	
	ТекстРедактирования = CRM_СписокПолучателейСкрытыхКопий;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиСкрытыхКопий.Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, аа, КонецСтроки, фф);
	Элемент.УстановитьГраницыВыделения(1, фф, 1, фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейСкрытыхКопий");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = "ПолучателиСкрытыхКопий";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись,
		 Результат,
		 СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);
	
	ОбновитьСписокСписокПоследнихАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.ПолучателиПисьма.Количество() = 0 Тогда
		МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиСкрытыхКопий");
		
		Если НЕ МассивПолучателей.Количество() = 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Список получателей письма (Скрытые копии)'"));
			ПараметрыФормы.Вставить("МассивПолучателей", МассивПолучателей);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактПриИзменении(Элемент)
	
	НовыйПартнер = ОпределитьПартнера();
	Если НовыйПартнер <> CRM_Партнер Тогда
		CRM_Партнер = НовыйПартнер;
		ПриИзмененииПартнера();
	КонецЕсли;
	
	ТД = Элементы.ПолучателиПисьма.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		ТД.Адрес			= ПолучитьАдресКонтакта(ТД.Контакт);
	Иначе	
		Если ЗначениеЗаполнено(ТД.Контакт) Тогда
			ЗадатьВопросОСохраненииКИ(ТД.Контакт, ТД.Адрес);
		КонецЕсли;
	КонецЕсли;
	ТД.Представление	= Строка(ТД.Контакт);
	СформироватьПредставленияКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактПриИзменении(Элемент)
	
	ТД = Элементы.ПолучателиКопий.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.Адрес			= ПолучитьАдресКонтакта(ТД.Контакт);
	ТД.Представление	= Строка(ТД.Контакт);
	СформироватьПредставленияКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактПриИзменении(Элемент)
	
	ТД = Элементы.ПолучателиСкрытыхКопий.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТД.Адрес			= ПолучитьАдресКонтакта(ТД.Контакт);
	ТД.Представление	= Строка(ТД.Контакт);
	СформироватьПредставленияКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	НовыйПартнер = ОпределитьПартнера();
	Если НовыйПартнер <> CRM_Партнер Тогда
		CRM_Партнер = НовыйПартнер;
		ПриИзмененииПартнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Физические лица");
	
	Если ИспользоватьПК Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, НСтр("ru = 'Потенциальные клиенты'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиСкрытыхКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиПисьма";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиПисьма.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиКопий";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиКопий.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
	 СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиСкрытыхКопий";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиСкрытыхКопий.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиСкрытыхКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	, ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора, "Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы,
			 ?(ВыбранноеЗначение.РежимВыбора, Элемент, ЭтотОбъект), , , , ,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИспользоватьДляОтправки = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,
		 "ИспользоватьДляОтправки");
	Если Не ИспользоватьДляОтправки Тогда
		ПоказатьПредупреждение(, Нстр("ru='В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		НайденныеЭлементы = Элементы.ТекстПисьмаHTML.Документ.querySelectorAll("body > div");
		Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
			Если СтрНайти(НайденныйЭлемент.className, "1crm-signup") > 0 Тогда
				НайденныйЭлемент.remove();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ИзменитьПодпись(ТекстВПолеHTML, ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.УчетнаяЗапись, "Черновики");
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПолучитьСписокПоследнихАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПоказатьЗначение(, Объект.УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоВыбораРеквизитаОтправитель");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоВыбораРеквизитаОтвественный");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	// откроем форму предмета
	СтандартнаяОбработка = Ложь;
	Доступ = ПроверитьДоступностьДокумента(Предмет);
	
	Если Доступ Тогда
		
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
				Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);
				
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда			
			ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
				Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);		
				
		Иначе			
			ПоказатьЗначение(, Предмет);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Данный пользователь не имеет прав на просмотр этого документа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
	Объект.CRM_Предмет = Предмет;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
			
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПредметИзменение.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоВыбораРеквизитаПроект");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоВыбораРеквизитаПроект");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		Если Элемент.Имя = "ПолучателиСсылкаКопия" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаКопия");
		ИначеЕсли Элемент.Имя = "КопияСсылкаСкрытая" Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаСкрытая");
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьПолучателейПисьма(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаЦепочка");
	
	// Откроем форму письма-основания
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
		Новый Структура("Ключ, ОткрытиеИзФормы", ВзаимодействиеОснование, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
		Новый Структура("Ключ, ОткрытиеИзФормы", ВзаимодействиеОснование, Истина), , , , , , РежимОткрытияОкнаФормы.Независимый);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоЗаполненияРеквизитаКомментарий");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоЗаполненияРеквизитаКомментарий");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомуНажатие(Элемент)
	
	ТекущийЭлемент = Элементы.СписокПолучателейПисьма;
	
	РедактироватьСписокПолучателей(Истина, "Кому");
	
	НовыйПартнер = ОпределитьПартнера();
	Если НовыйПартнер <> CRM_Партнер Тогда
		CRM_Партнер = НовыйПартнер;
		ПриИзмененииПартнера();
	КонецЕсли;
	
КонецПроцедуры // ДекорацияКомуНажатие()

&НаКлиенте
Процедура ДекорацияКопияНажатие(Элемент)
	
	ТекущийЭлемент = Элементы.СписокПолучателейКопий;
	
	РедактироватьСписокПолучателей(Истина, "Копии");
	
КонецПроцедуры // ДекорацияКопияНажатие()

&НаКлиенте
Процедура ДекорацияСкрытаяКопияНажатие(Элемент)
	
	ТекущийЭлемент = Элементы.СписокПолучателейСкрытыхКопий;
	
	РедактироватьСписокПолучателей(Истина, "Скрытые");
	
КонецПроцедуры // ДекорацияСкрытаяКопияНажатие()

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКомандуСписка(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИмяКоманды = Сред(Элемент.Имя, 8);
	
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды, ВыбранноеЗначение);
	
	ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLДокументСформирован(Элемент)
	
	Если ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		ТекстПисьмаПриОткрытии = Элементы.ТекстПисьмаHTML.Документ.body.innerHTML; 
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаПриОткрытии);
	КонецЕсли;
	
	ВключитьРедактирование = (Не ЭтоПисьмоРассылки) Или (ЭтоПисьмоРассылки И Объект.CRM_РассылкаИзменена);
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLДокументСформирован(ЭтотОбъект, Элемент, ВключитьРедактирование);
	CRM_РаботаСHTMLКлиент.ВосстановитьПоложениеHTML(Элементы.ТекстПисьмаHTML, ТекущаяПозицияHTML);
	
	Если УстановитьФокусНаТекстеПисьма Тогда
		Элементы.ТекстПисьмаHTML.Документ.Body.focus();
	КонецЕсли;
	
	УстановитьШрифтПисьмаИзНастроек();
	
	ОкноБраузераТекстаПисьма = Элементы.ТекстПисьмаHTML.Документ.defaultView;
	Если ОкноБраузераТекстаПисьма.referencePasteOnInit <> Неопределено Тогда
		ОкноБраузераТекстаПисьма.referencePasteOnInit();
	КонецЕсли;
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		ТекущийТекстПисьма = Элементы.ТекстПисьмаHTML.Документ.documentElement.outerHTML;
		ДанныеАвтосохраненияХешТекста = CRM_ОбщегоНазначенияКлиент.ВычислитьХешСтрокиПоАлгоритмуMD5(ТекущийТекстПисьма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВключитьРедактирование = (Не ЭтоПисьмоРассылки) Или (ЭтоПисьмоРассылки И Объект.CRM_РассылкаИзменена);
	Если Не ВключитьРедактирование Тогда
		Возврат;
	КонецЕсли;
	
	CRM_РаботаСHTMLКлиент.ПолеHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
	Если Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТекстПисьмаHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

#КонецОбласти

#Область РаботаСТегами

&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоВыбораРеквизитаТег");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоВыбораРеквизитаТег");
	КонецЕсли;
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийСписокВложенийСправа");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийСписокВложенийСправа");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваВложенияМеню.Доступность = (ТекущиеДанные.Расположение <> 5);
	Элементы.СвойстваВложения.Доступность                        = (ТекущиеДанные.Расположение <> 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		УдалитьВложениеВыполнить();
	КонецЕсли;
	
	ПроверитьОбъемВложенийНаПревышение();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ДобавитьВложенияПисьма(ПараметрыПеретаскивания.Значение);
			ПроверитьОбъемВложенийНаПревышение();
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьВложенияПисьма(ВыбранноеЗначение);
	Модифицированность = Истина;
	ПроверитьОбъемВложенийНаПревышение();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	ЕстьПревышение = Ложь;
	ПроверитьОбъемВложенийНаПревышение(ЕстьПревышение);
	Если ЕстьПревышение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОтправлятьСообщенияСразу Тогда
		ОтправлятьСообщенияСразу = (
			Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее"));
	КонецЕсли;
	
	ВыполняетсяОтправка = Истина;
	
	Если Объект.Ссылка.Пустая() 
		Или Модифицированность 
		Или Объект.ВключатьТелоИсходногоПисьма 
		Или (Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")) Тогда
		Записать();
	КонецЕсли;
	
	// +CRM
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаОтправить");
	КонецЕсли;
	// -CRM
		
	ВыполняетсяОтправка = Ложь;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьСообщенияСразу Тогда
		Результат = ВыполнитьОтправкуНаСервере();
	Иначе
		// +CRM
		Оповестить("ЛентаСобытий_Обновить");
		// -CRM
		Закрыть(Истина);
		Возврат;
	КонецЕсли;
	
	Если Результат.ПисьмоОтправлено И Результат.ТекстСообщения = "" Тогда
		// +CRM
		Оповестить("ЛентаСобытий_Обновить");
		// -CRM
		Закрыть(Истина);
		Возврат;
	КонецЕсли;

	Если Результат.ПисьмоОтправлено Тогда
		// АПК:566-выкл использование синхронного вызова: "Прочитать".
		Прочитать();
		// АПК:566-вкл
	КонецЕсли;
	
	Если Результат.Свойство("ОшибкаПодключения") 
		И Результат.ОшибкаПодключения Тогда
		РаботаСПочтовымиСообщениямиКлиент.СообщитьОбОшибкеПодключения(Объект.УчетнаяЗапись, 
			НСтр("ru = 'Письмо не отправлено';
				|en = 'The message is not sent'"), Результат.ТекстСообщения);
	Иначе
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаОтветить");
	
	СоздатьПисьмоНаОсновании("Ответить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаОтветитьВсем");
	
	СоздатьПисьмоНаОсновании("ОтветитьВсем");
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПереслать");
	
	СоздатьПисьмоНаОсновании("Переслать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПисьмо(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаЗаписать");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаЗаписать");
	КонецЕсли;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОДоставке(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаУведомить");
	КонецЕсли;
	Объект.УведомитьОДоставке = НЕ Объект.УведомитьОДоставке;
	Элементы.КнопкаУведомитьОДоставке.Пометка = Объект.УведомитьОДоставке;
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОПрочтении(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаУведомить");
	КонецЕсли;
	Объект.УведомитьОПрочтении = НЕ Объект.УведомитьОПрочтении;
	Элементы.КнопкаУведомитьОПрочтении.Пометка = Объект.УведомитьОПрочтении;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПринятьОбращение");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПринятьОбращение");
	КонецЕсли;
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПисьмоИсходящее", Объект.Ссылка);
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(Объект.CRM_ОтправительКонтакт) Тогда
		МассивСсылок.Добавить(Объект.CRM_ОтправительКонтакт);
	КонецЕсли;
	Если Не Элементы.Найти("CRM_ТаблицаИнтересов") = Неопределено Тогда
		Для Каждого СтрокаДанных Из ЭтотОбъект["CRM_ТаблицаИнтересов"] Цикл
			МассивСсылок.Добавить(СтрокаДанных.Ссылка);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("АдресЭП", Объект.CRM_ОтправительАдрес);
	ПараметрыФормы.Вставить("ТемаПисьма", Объект.Тема);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект,
		 Объект.CRM_ОтправительАдрес);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаОтклонитьОбращение");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаОтклонитьОбращение");
	КонецЕсли;
	CRM_ВыполнитьОтклонениеОбращения();
КонецПроцедуры

&НаКлиенте
Процедура БазаЗнаний(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаБазаЗнаний");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаБазаЗнаний");
	КонецЕсли;
	Если ТекущийЭлемент <> Элементы.ТекстПисьмаHTML Тогда
		ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияБазыЗнаний", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_АРМ_БазаЗнаний.Форма.АРМБазаЗнаний",
		 Новый Структура("ОткрытаИзДругойФормы", Истина), ЭтотОбъект, УникальныйИдентификатор, , ,
		 ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура CRM_Избранный(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаУстановитьПометкуЗвездочка");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаУстановитьПометкуЗвездочка");
	КонецЕсли;
	Объект.CRM_Избранный = НЕ Объект.CRM_Избранный;
	
	ОформлениеИзбранного();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПоказатьСкрытьСвойства(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПоказатьСкрытьСвойства");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПоказатьСкрытьСвойства");
	КонецЕсли;
	CRM_ПоказатьСкрытьСвойстваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПараметрыПисьма");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПараметрыПисьма");
	КонецЕсли;
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор основания:  " + Объект.ИдентификаторОснования);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификаторы оснований: " + 
		ПолучитьПредставлениеИдентификаторовОснований(Объект.ИдентификаторыОснований));
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправления);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоИсходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	СтруктураПараметры.Вставить("Папка", Папка);
	СтруктураПараметры.Вставить("Важность", Объект.Важность);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыПисьмаЗавершение", ЭтотОбъект);
	Результат = ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ПараметрыЭлектронногоПисьма",
		СтруктураПараметры, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьмаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		
		 	 И Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		Объект.УведомитьОДоставке          = Результат.УведомитьОДоставке;
		Объект.УведомитьОПрочтении         = Результат.УведомитьОПрочтении;
		
		Элементы.КнопкаУведомитьОДоставке.Пометка		= Объект.УведомитьОДоставке;
		Элементы.КнопкаУведомитьОПрочтении.Пометка		= Объект.УведомитьОПрочтении;		
		Папка = Результат.Папка;
		
		Если Объект.Кодировка <> Результат.Кодировка Тогда
			Объект.Кодировка = Результат.Кодировка;
		КонецЕсли;
		
		Объект.Важность = Результат.Важность;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаОткрытьНастройки");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаОткрытьНастройки");
	КонецЕсли;
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения("ОткрытьПерсональныеНастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АРМПочта");
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "ЭлектроннаяПочта");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияНастроек,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор", "#");
	КонецЕсли;
	
	СформироватьСсылкиВложений();
	
	ТранслитерироватьИменаФайловПриДобавленииВложений = 
			ХранилищеОбщихНастроекЗагрузить("ТранслитерироватьИменаФайловПриДобавленииВложений", 
			"ТранслитерироватьИменаФайловПриДобавленииВложений", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаИзменитьПредмет");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаИзменитьПредмет");
	КонецЕсли;
	Элементы.Предмет.Видимость = Ложь;
	Элементы.ПредметИзменение.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателей(Команда)
	
	Элементы.СкрытьПоказатьПолучателей.Пометка = НЕ Элементы.СкрытьПоказатьПолучателей.Пометка;
	Элементы.ГруппаТабПолучателей.Видимость = Элементы.СкрытьПоказатьПолучателей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейКопии(Команда)
	
	Элементы.СкрытьПоказатьПолучателейКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Элементы.ГруппаТабПолучателейКопии.Видимость = Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейСкрытыеКопии(Команда)
	
	Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость = Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПеренаправитьОтветственному");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПеренаправитьОтветственному");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("ОбщаяФорма.CRM_ФормированиеCсылкиНаОбъект", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Фильтр = НСтр("ru = 'Документ HTML (*.html;*.htm)|*.html;*.htm'");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = Фильтр;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеЗавершения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = Результат[0];
	
	РазделительПути = ПолучитьРазделительПути();
	
	Файл = Новый Файл(ПолноеИмяФайла);
	КаталогФайла = Файл.Путь;
	Если Не СтрЗаканчиваетсяНа(КаталогФайла, РазделительПути) Тогда
		КаталогФайла = КаталогФайла + РазделительПути;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПолноеИмяФайла, КодировкаТекста.UTF8);
	
	ТекстПисьмаHTML = ТекстовыйДокумент.ПолучитьТекст();
	ТекстПисьмаHTML = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстПисьмаHTML, " ");
	
	ПутиККартинкам = ПутиККартинкамHTML(ТекстПисьмаHTML);
	Для Каждого ТекущийПуть Из ПутиККартинкам Цикл
		
		ПутьККартинке = ТекущийПуть;
		ФайлКартинка = Новый Файл(ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ТекущийПуть);
		ДополнительныеПараметрыПроверки.Вставить("КаталогФайла", КаталогФайла);
		ДополнительныеПараметрыПроверки.Вставить("РазделительПути", РазделительПути);
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаПродолжение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЦикла;
	
	ЗаполнитьАвтотекст(ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		Если СтрНайти(ВРег(ДополнительныеПараметры.ПутьККартинке), ВРег("file://")) = 0 Тогда
			ТекстПисьмаHTML = СтрЗаменить(ТекстПисьмаHTML, ДополнительныеПараметры.ТекущийПуть, "file://" 
				+ ДополнительныеПараметры.ПутьККартинке);
		КонецЕсли;
		
	Иначе
		
		Если СтрНачинаетсяС(ДополнительныеПараметры.ПутьККартинке, ДополнительныеПараметры.РазделительПути) Тогда
			ДополнительныеПараметры.ПутьККартинке = Сред(ДополнительныеПараметры.ПутьККартинке, 2);
		КонецЕсли;
		
		ДополнительныеПараметры.ПутьККартинке = ДополнительныеПараметры.КаталогФайла + ДополнительныеПараметры.ПутьККартинке;
		ФайлКартинка = Новый Файл(ДополнительныеПараметры.ПутьККартинке);
		
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ПутьККартинке", ДополнительныеПараметры.ПутьККартинке);
		ДополнительныеПараметрыПроверки.Вставить("ТекущийПуть", ДополнительныеПараметры.ТекущийПуть);
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект,
			 ДополнительныеПараметрыПроверки);
		ФайлКартинка.НачатьПроверкуСуществования(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ТекстПисьмаHTML = СтрЗаменить(ТекстПисьмаHTML, ДополнительныеПараметры.ТекущийПуть, "file://" 
			+ ДополнительныеПараметры.ПутьККартинке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	
	Если Не Объект.CRM_РассылкаИзменена Тогда
		ТекстВопроса =
			НСтр("ru = 'Письмо было создано на основании рассылки. При последующих изменениях содержания рассылки эти изменения не будут перенесены в данное письмо. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Письмо было создано на основании рассылки. Содержание письма и вложения будут заполнены из рассылки. Продолжить?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.CRM_РассылкаИзменена = Не Объект.CRM_РассылкаИзменена;
	
	ТемпТекстHTML = ТекстПисьмаHTML;
	ПриИзмененииРежимаРедактирования();

	Если ТемпТекстHTML = ТекстПисьмаHTML Тогда
		ТекстПисьмаHTMLДокументСформирован(Элементы.ТекстПисьмаHTML);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСШаблонами

&НаКлиенте
Процедура ВыбратьШаблон(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаИзШаблона");
	
	Если ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ЗаполненТекстПисьма = ТекстПисьмаHTMLЗаполнен(ТекстВПолеHTML);
	Иначе
		ОбычныйТекстПисьма = СокрЛП(СтрЗаменить(ТекстПисьма, " ", ""));
		ОбычныйТекстПодписи = ТекстПодписиПользователя(Объект.УчетнаяЗапись, ТекущийПользователь);
		ОбычныйТекстПодписи = СокрЛП(СтрЗаменить(ОбычныйТекстПодписи, " ", ""));
		ЗаполненТекстПисьма = (ЗначениеЗаполнено(ОбычныйТекстПисьма) И ОбычныйТекстПисьма <> ОбычныйТекстПодписи);
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыбратьШаблонПродолжение", ЭтотОбъект);
	
	Если ЗаполненТекстПисьма Или Вложения.Количество() > 0 Тогда
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить("ЗаменитьТекстИВложения", "Заменить");
		КнопкиДиалогаВопрос.Добавить("ДополнитьТекстИВложения", "Дополнить");
		КнопкиДиалогаВопрос.Добавить("Отмена", "Отмена");
		
		ТекстВопроса = НСтр("ru='Как поступить с текущим текстом и вложениями?'");
		
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, КнопкиДиалогаВопрос, , , НСтр("ru='Заполнение из шаблона'"));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, "ЗаменитьТекстИВложения");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонПродолжение(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = "Отмена" Или Не ЗначениеЗаполнено(ОтветПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Действие", ОтветПользователя);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыбратьШаблонЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
		 ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьТекстИВложения = (ДополнительныеПараметры.Действие = "ЗаменитьТекстИВложения");
	
	// Если у письма установлен тип текста "Простой текст", то при заполнении шаблона текст шаблона мы не увидим, поэтому
	// мы должны изменить тип письма и включить видимость соответствующих элементов.
	Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") Тогда
		Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		ОпределитьСпособРедактированияПисьма();
	КонецЕсли;
	
	Шаблон = РезультатВыбора;
	ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
	ЗаполнитьПоШаблону(ТекстВПолеHTML, ЗаменитьТекстИВложения);
	
	Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
	ТекстПисьма = Объект.Текст;
	Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

#КонецОбласти

#Область РедакторHTML

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	Если ИмяКоманды = "Undo" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаОтменитьПоследнееДействие");
	ИначеЕсли ИмяКоманды = "Redo" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПовторитьСледующееДействие");
	ИначеЕсли ИмяКоманды = "InsertHorizontalRule" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаГоризонтальнаяЛиния");
	ИначеЕсли ИмяКоманды = "InsertHorizontalRule" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаГоризонтальнаяЛиния");
	ИначеЕсли ИмяКоманды = "Bold" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПолужирный");
	ИначеЕсли ИмяКоманды = "Italic" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаКурсив");
	ИначеЕсли ИмяКоманды = "Underline" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПодчеркнутый");
	ИначеЕсли ИмяКоманды = "JustifyLeft" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоЛевомуКраю");
	ИначеЕсли ИмяКоманды = "JustifyCenter" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоЦентру");
	ИначеЕсли ИмяКоманды = "JustifyRight" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоПравомуКраю");
	ИначеЕсли ИмяКоманды = "JustifyFull" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВыравниваниеПоШирине");
	КонецЕсли;
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзображение(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьИзображение");
	CRM_РаботаСHTMLКлиент.ВставитьИзображение(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитькартинкуИзБуфера");
	CRM_РаботаСHTMLКлиент.ВставитьКартинкуИзБуфера(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьГиперссылку");
	CRM_РаботаСHTMLКлиент.ВставитьГиперссылку(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаВставитьТаблицу");
	CRM_РаботаСHTMLКлиент.ВставитьТаблицу(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УвеличитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.УменьшитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШрифт(Команда)
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифт(ЭтотОбъект, Элементы.ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 8);
	CRM_РаботаСHTMLКлиент.ВыборЦвета(ЭтотОбъект, Элементы.ТекстПисьмаHTML, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопФорматирование(Команда)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаДополнительноеФорматирование");
	Элементы.ПоказатьДопФорматирование.Пометка = НЕ Элементы.ПоказатьДопФорматирование.Пометка;
	Элементы.ГруппаДополнительное.Видимость = Элементы.ПоказатьДопФорматирование.Пометка;
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура СохранитьВложение(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаСохранитьВложения");
	СохранитьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатйиКнопкаСвойстваВложений");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатйиКнопкаСвойстваВложений");
	КонецЕсли;

	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.Ссылка = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_Сохранить_СсылкаВложения_", "");
	СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_Удалить_СсылкаВложения_", "");
	УдалитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложения(Команда)
	
	ВыполнитьЗагрузкуВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДиск(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаСохранитьПисьмоНаДиск");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаСохранитьПисьмоНаДиск");
	КонецЕсли;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("CRM_СохранитьНаДискФрагмент", ЭтотОбъект);
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Данные будут записаны. Продолжить?';en='Data will be written. Continue?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДискФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_СохранитьНаДискПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru = 'Вложения письма были очищены. Перед сохранением письма вложения будут загруженны с сервера.
                                                |Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьПисьмоНаДиск(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДискПродолжение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("CRM_СохранитьНаДискЗавершение", ЭтотОбъект);
		CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(Объект.Ссылка, ЭтотОбъект, ОповещениеЗавершения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СохранитьНаДискЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера. Возможно,
			| письмо удалено на сервере.
                                                         |Сохранить письмо на диск не удалось.'"));
	Иначе
		ВзаимодействияКлиент.СохранитьПисьмоНаДиск(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаСохранитьВложения");
	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеВложениеВыполнить(Команда)
	УдалитьВложения();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмо(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаПодбора",
	             ПараметрыОткрытия,
	             Элементы.Вложения, , , , ,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ТекстПисьмаHTML, Команда.Имя)
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПравописания

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ТекстПисьмаHTML);
		ПроверяемыйТекст = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ТекстПисьмаHTML = ПроверяемыйТекст;
		CRM_ПроверкаПравописанияКлиент.ПоказатьОшибки(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
			 ТекстПисьмаHTML,
			 ПроверяемыйТекст);
	
	Иначе
		ВыделенныйТекст = Элементы.ТекстПисьмаHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И НомерТекущейОшибки < ЭтотОбъект["CRM_СписокОшибок"].Количество()
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ТекстПисьмаHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ТекстПисьмаHTML,
		 ПроверяемыйТекст,
		 Объект.ТипТекста);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура CRM_Печать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаПечать");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкаПечать");
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СтруктураОбхекта = Новый Структура;
		СтруктураОбхекта.Вставить("ОбъектСсылка",               Объект.Ссылка);
		СтруктураОбхекта.Вставить("ТекстПисьма",                "");
		СтруктураОбхекта.Вставить("ПредупреждениеБезопасности", Ложь);
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(СтруктураОбхекта);
		
		CRM_УправлениеПечатьюКлиент.CRM_Почта_ПечатьЭлектронноеПисьмоHTML(ОбъектыПечати);
		
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("CRM_Печать_Завершение", ЭтотОбъект, Новый Структура);
		CRM_ЛентаСобытийКлиент.ПоказатьВопросОЗаписиОбъекта(ЭтотОбъект, ОповещениеЗавершения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Печать_Завершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт

	Если ОбъектЗаписан Тогда
		
		СтруктураОбхекта = Новый Структура;
		СтруктураОбхекта.Вставить("ОбъектСсылка",               Объект.Ссылка);
		СтруктураОбхекта.Вставить("ТекстПисьма",                "");
		СтруктураОбхекта.Вставить("ПредупреждениеБезопасности", Ложь);
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(СтруктураОбхекта);
		
		CRM_УправлениеПечатьюКлиент.CRM_Почта_ПечатьЭлектронноеПисьмоHTML(ОбъектыПечати);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОснование(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаЦепочкаИзменить");
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	Для Каждого Строка Из ПолучателиПисьма Цикл
		СписокАдресов.Добавить(Строка.Адрес);
	КонецЦикла;
	
	Для Каждого Строка Из ПолучателиКопий Цикл
		СписокАдресов.Добавить(Строка.Адрес);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокАдресов, УчетнаяЗапись", СписокАдресов, Объект.УчетнаяЗапись);
	Если ТипЗнч(Объект.CRM_Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы.Вставить("СвязанныйИнтерес", Объект.CRM_Предмет);
	Иначе
		СвязанныйИнтерес = СвязанныйИнтерес();
		Если СвязанныйИнтерес <> Неопределено Тогда
			ПараметрыФормы.Вставить("СвязанныйИнтерес", СвязанныйИнтерес);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСПисьмом", ЭтотОбъект);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаВыбораДляОтвета", ПараметрыФормы,
		 ЭтотОбъект, , , ,
		 ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОснование(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаЦепочкаОчистить");
	КонецЕсли;
	
	Объект.ИдентификаторОснования  = "";
	Объект.ИдентификаторыОснований = "";
	
	Если НРег(Лев(Объект.Тема, 3)) = "re:" Тогда
		Объект.Тема  = ТемаИсходная;
	КонецЕсли;
	
	ВзаимодействиеОснование = "<Связь не задана>";
	Элементы.ВзаимодействиеОснование.Гиперссылка = Ложь;
	Элементы.ВзаимодействиеОснование.ЦветТекста = Новый Цвет(51, 51, 51);
	Объект.ВзаимодействиеОснование = Неопределено;
	
	Предмет = ПредметИсходный;
	
	ОчиститьОснованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОснованиеНаСервере()
	
	ТекстПисьмаHTML = CRM_Взаимодействия.УдалитьТекстИсходногоПисьма(ТекстПисьмаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ДобавитьФайлыИзИнтересов(Команда)
	
	Если ЭтотОбъект["CRM_ТаблицаИнтересов"].Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нет связанных интересов, из которых можно прикрепить вложения.';
				|en = 'There are no related interests from which attachments can be attached.'"));
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеОбъекты = Новый Массив;
	Для Каждого СтрокаТаблицыИнтересов Из ЭтотОбъект["CRM_ТаблицаИнтересов"] Цикл
		ОбрабатываемыеОбъекты.Добавить(СтрокаТаблицыИнтересов.Ссылка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбрабатываемыеОбъекты", ОбрабатываемыеОбъекты);
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
		"CRM_ДобавитьФайлыИзИнтересовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.CRM_ФормаВыбораВложенийОбъектов",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещенияОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // CRM_ДобавитьФайлыИзИнтересов()

&НаКлиенте
Процедура CRM_ДобавитьФайлыИзИнтересовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Если ТипЗнч(РезультатЗакрытия) <> Тип("Массив") Или РезультатЗакрытия.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		CRM_ДобавитьФайлыИзИнтересовНаСервере(РезультатЗакрытия);
		
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
		ПроверитьОбъемВложенийНаПревышение();
	КонецЕсли;
	
КонецПроцедуры // CRM_ДобавитьФайлыИзИнтересовЗавершение()

&НаКлиенте
Процедура ПерейтиВМенеджерПочты(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Папка", Папка);
	
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма");
	Оповестить("CRM_ПереходВМенеджерПочтыИзПисьма", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИсторииПереписки(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФормуИсторииПереписки();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗаписиДляПереходаКИсторииПереписки", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Для перехода к истории переписки письмо будет записано. Продолжить?'"),
		РежимДиалогаВопрос.ОКОтмена);
	
	КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтветИПересылка

&НаКлиенте
Процедура СоздатьПисьмоНаОсновании(ВидОснования)
	
	Записать();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидОснования", ВидОснования);
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииПослеВопроса",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если ВложенияОчищеныПоНастройке Тогда
		ТекстВопроса = НСтр("ru = 'Загрузить удаленные картинки и вложения?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуВложений(ОповещениеЗавершения);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВидОснования = ДополнительныеПараметры.ВидОснования;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНовогоПисьмаНаОсновании", ЭтотОбъект);
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, ВидОснования);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия, , , , ,
		ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНовогоПисьмаНаОсновании(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = Истина Тогда
		НастройкиХранилище = CRM_ВзаимодействияВызовСервера.ПолучитьНастройкуРаботаСПочтой();
		
		ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета = ?(
			НастройкиХранилище.Свойство("ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета"),
			НастройкиХранилище.ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета, Ложь);
		
		Если ЗакрыватьПисьмоОснованиеПослеОтправкиОтвета Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПослеЗакрытияФормыНовогоПисьмаНаОсновании()

#КонецОбласти

#Область ЗагрузкаВложений

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложений(ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуВложенийЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(Объект.Ссылка, ЭтотОбъект, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// АПК:566-выкл использование синхронного вызова: "Прочитать".
	Прочитать();
	// АПК:566-вкл
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера! Возможно письмо удалено на сервере.'"));
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
	Оповестить("ЗагруженыВложения");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьЗаголовокФормыДокумента()
	
	// Тема (Учетная запись, Название папки)
	
	ЧастиЗаголовка = Новый Массив;
	
	ВидПапки = Неопределено;
	
	ПредставлениеПапки = Строка(Папка);
	Если CRM_УправлениеЭлектроннойПочтой.ЭтоПредопределеннаяПапкаУчетнойЗаписи(Папка, ВидПапки) Тогда
		ПредставлениеПапки = Строка(ВидПапки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Новое письмо'"));
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru='<Без темы>'"));
	Иначе
		ЧастиЗаголовка.Добавить(Объект.Тема);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Если ЗначениеЗаполнено(Папка) Тогда
			ЧастиЗаголовка.Добавить("(" + Объект.УчетнаяЗапись + ",");
			ЧастиЗаголовка.Добавить(ПредставлениеПапки + ")");
		Иначе
			ЧастиЗаголовка.Добавить("(" + Объект.УчетнаяЗапись + ")");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Папка) Тогда
			ЧастиЗаголовка.Добавить("(" + ПредставлениеПапки + ")");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиЗаголовка, " ");
	
КонецФункции

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	// Заполняем массив с картинками расширений файлов
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2]);
	КонецЦикла;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Объект.Ссылка);
		ЭтоПисьмоРассылки = (ЗначениеЗаполнено(Предмет)
			 И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	КонецЕсли;
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	ЗаполнитьТаблицыПолучателей();
	
	Для Каждого ПолучательПисьма Из Объект.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(ПолучательПисьма.Контакт) Тогда
			СоответствияАдресовИКонтактов.Добавить(ПолучательПисьма.Контакт, ПолучательПисьма.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	ОтображатьТаблицуВложений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭлектронноеПисьмоИсходящее",
		"ОтображатьТаблицуВложений", Ложь);
	
	ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма(Параметры);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
	КонецЕсли;
	
	СтруктураСтатуса = CRM_ИнтеграцияССервисамиРассылок.ПолучитьСтатусПисьма(Объект.Ссылка);
	Если ЗначениеЗаполнено(СтруктураСтатуса.Статус) Тогда
		СтатусПисьмаEmailРассылки = СтруктураСтатуса.Статус;
		Элементы.СтатусПисьмаEmailРассылки.Подсказка = СтруктураСтатуса.РасшифровкаСтатуса;
		Элементы.ГруппаСтатусСервиса.Видимость = ЗначениеЗаполнено(СтатусПисьмаEmailРассылки);
		//Элементы.СтатусПисьма.Видимость = НЕ Элементы.ГруппаСтатусСервиса.Видимость;
	КонецЕсли;
	
	Элементы.CRM_ЗагрузитьВложения.Видимость = ВложенияОчищеныПоНастройке;
	Элементы.СохранитьВсеВложения.Доступность = Не ВложенияОчищеныПоНастройке;
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЭтоКопированиеПисьма = Истина;
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования,
				 Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если Стр.ОчищенПоНастройке Тогда
					Продолжить;
				КонецЕсли;
				// Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				//КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И (ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
			   ИЛИ ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))
			И Параметры.Основание.Свойство("Команда") 
			И (Параметры.Основание.Команда = "Переслать") > 0 Тогда
			
			ПисьмоВладелецФайлов = Объект.ВзаимодействиеОснование;
			Если ТипЗнч(ПисьмоВладелецФайлов) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				ПредметОснования = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоВладелецФайлов);
				Если ЗначениеЗаполнено(ПредметОснования)
					И ТипЗнч(ПредметОснования) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
					
					РассылкаИзменена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоВладелецФайлов, "CRM_РассылкаИзменена");
					Если Не РассылкаИзменена Тогда
						ПисьмоВладелецФайлов = ПредметОснования;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Заполнение вложений по пересылаемому письму.
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоВладелецФайлов, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если Стр.ОчищенПоНастройке Тогда
					Продолжить;
				КонецЕсли;
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И Параметры.Основание.Свойство("ВыделенныеПисьма") И ТипЗнч(Параметры.Основание.ВыделенныеПисьма) = Тип("Массив") 
			И (ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
			   ИЛИ ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))
			И Параметры.Основание.Свойство("Команда") 
			И (Параметры.Основание.Команда = "ПереслатьКакВложения") > 0 Тогда
			
			ТаблицаПисемВложений = Параметры.Основание.ВыделенныеПисьма;
			
			Для Каждого Строка Из ТаблицаПисемВложений Цикл
				
				ПисьмоВложение = Строка;
				ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоВложение.Тема, ПисьмоВложение.Дата);
				
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Письмо               = ПисьмоВложение.Ссылка;
				НоваяСтрока.ИмяФайла             = ПредставлениеПисьма + ".eml";
				НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла("eml");
				НоваяСтрока.ИмяФайлаНаКомпьютере = "";
				НоваяСтрока.ПодписанЭП           = Ложь;
				НоваяСтрока.Размер               = ПисьмоВложение.Размер;
				НоваяСтрока.РазмерПредставление  =
					CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
				НоваяСтрока.Расположение         = 5;
				НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
				НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
				
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение вложений по подписи.
		ПодписьДляНового = Истина;
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И (ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
			ИЛИ ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
			ПодписьДляНового = Ложь;
		КонецЕсли;
		ПодписьСсылка = CRM_Взаимодействия.ПолучитьПодписьПисьма(Объект.УчетнаяЗапись, ТекущийПользователь, ПодписьДляНового);
		Если ЗначениеЗаполнено(ПодписьСсылка) Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПодписьСсылка, Истина);
			Для Каждого Стр Из табВложения Цикл
				Если Стр.ОчищенПоНастройке Тогда
					Продолжить;
				КонецЕсли;
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
						новСтр.ИмяФайла							= СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
					Иначе
						новСтр.ИмяФайла							= Стр.ИмяФайла;
					КонецЕсли;
					новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Вложения.Очистить();
		
		Если ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет, Истина);
		Иначе
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		КонецЕсли;
		
		ВложенияОчищеныПоНастройке = Ложь;
		
		Для Каждого Стр Из табВложения Цикл
			
			// Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				Если ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена Тогда
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
					АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, "");
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер / 1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				
				Если Не ВложенияОчищеныПоНастройке И Стр.ОчищенПоНастройке Тогда
					ВложенияОчищеныПоНастройке = Истина;
				КонецЕсли;
				
			//КонецЕсли;
		КонецЦикла;
		
		ДобавитьПисьмаВложения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		УстановитьТекстПисьма();
		
		// Отправка прайса или печатной формы по почте тема.
		Если Параметры.Свойство("Тема") И ЗначениеЗаполнено(Параметры.Тема) Тогда
			Объект.Тема = Параметры.Тема;
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			Если Параметры.Основание.Свойство("Команда") 
				И (Параметры.Основание.Команда = "ПереслатьКакВложения") > 0 Тогда
				Объект.Тема = "";
				CRM_СписокПолучателейПисьма = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
			СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
		Иначе
			СозданИзЭтапаСделки = Ложь;
		КонецЕсли;
		
		// Заполним получателей, если список передан.
		Если Параметры.Свойство("СписокАдресов") Тогда
			Для Каждого АдресПолучателя Из Параметры.СписокАдресов Цикл
				МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", АдресПолучателя.Представление));
				Если МассивСтрок.Количество() = 0 Тогда
					ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
					ПолучателиНоваяСтрока.Адрес = АдресПолучателя.Представление;
					Контакт = ?(ТипЗнч(АдресПолучателя.Значение) = Тип("Структура"),
						 АдресПолучателя.Значение.Контакт,
						 АдресПолучателя.Значение);
					ПолучателиНоваяСтрока.Представление = Строка(Контакт);
					ПолучателиНоваяСтрока.Контакт = Контакт;
				КонецЕсли;	
			КонецЦикла;
			CRM_СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма,
				 Ложь);
		КонецЕсли;
		
		Если Параметры.Свойство("Взаимодействие") Тогда
			Взаимодействие	= Параметры.Взаимодействие;
		КонецЕсли;
		
		Если Параметры.Свойство("Кому") И (НЕ Параметры.Кому = Неопределено) Тогда
			
			Если (Параметры.Свойство("ОтправкаПечатнойФормы") И Параметры.ОтправкаПечатнойФормы)
				ИЛИ (Параметры.Свойство("ТолькоКому") И Параметры.ТолькоКому) Тогда
				Объект.ПолучателиПисьма.Очистить();
			КонецЕсли;
			
			Если ТипЗнч(Параметры.Кому) = Тип("Строка") И (Параметры.Основание = Неопределено) Тогда
				МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", Параметры.Кому));
				Если МассивСтрок.Количество() = 0 Тогда
					ПолучателиНоваяСтрока			= Объект.ПолучателиПисьма.Добавить();
					ПолучателиНоваяСтрока.Адрес		= Параметры.Кому;				
					CRM_СписокПолучателейПисьма	= ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма,
						 Ложь);
				КонецЕсли;	
			ИначеЕсли НЕ (ТипЗнч(Параметры.Кому) = Тип("Строка")) Тогда
				Объект.ПолучателиПисьма.Очистить();
				Для Каждого ЭлементМассива Из Параметры.Кому Цикл
					Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
						МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", ЭлементМассива.Представление));
						Если МассивСтрок.Количество() = 0 Тогда
							ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
							ПолучателиНоваяСтрока.Адрес = ЭлементМассива.Представление;
							ПолучателиНоваяСтрока.Представление = Строка(ЭлементМассива.Значение);
							ПолучателиНоваяСтрока.Контакт = ЭлементМассива.Значение;
						КонецЕсли;	
					ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
					
						МассивАдресов = СтрРазделить(ЭлементМассива.Адрес, ";");
						
						Для Каждого Адрес Из МассивАдресов Цикл
							Если ПустаяСтрока(Адрес) Тогда 
								Продолжить;
							КонецЕсли;
							
							МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", Адрес));
							Если МассивСтрок.Количество() = 0 Тогда
								ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
								ПолучателиНоваяСтрока.Адрес = СокрЛП(Адрес);
								ПолучателиНоваяСтрока.Представление	= ЭлементМассива.Представление;
								ПолучателиНоваяСтрока.Контакт		= ЭлементМассива.ИсточникКонтактнойИнформации;
							КонецЕсли;
						КонецЦикла;
					
					КонецЕсли;
				КонецЦикла;
				CRM_СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма,
					 Ложь);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним список вложений, если он передан  (отправка прайса или печатной формы по почте).
		Если Параметры.Свойство("Вложения") И Параметры.Вложения <> Неопределено Тогда
			
			ЭтоВебКлиент = ?(Параметры.Свойство("ЭтоВебКлиент"), Параметры.ЭтоВебКлиент, Ложь);
			
			Для Каждого ЭлементСпискаФайлов Из Параметры.Вложения Цикл
				
				// Если отправляем присоединенный к одному из объектов файл по почте , то
				// ЭлементСпискаФайлов - это структура, в противном случае это список значений				
				
				Если ТипЗнч(ЭлементСпискаФайлов) = Тип("Структура") Тогда
					ПредставлениеЭлемента	= ЭлементСпискаФайлов.Представление;
					ЗначениеЭлемента		= ЭлементСпискаФайлов.АдресВоВременномХранилище;
				Иначе
					ПредставлениеЭлемента	= ЭлементСпискаФайлов.Представление;
					ЗначениеЭлемента		= ЭлементСпискаФайлов.Значение;
				КонецЕсли;					
				
				новСтр = Вложения.Добавить();
				
				новСтр.Расположение	  = 4;
				Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
					новСтр.ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ПредставлениеЭлемента);
				Иначе
					новСтр.ИмяФайла = ПредставлениеЭлемента;
				КонецЕсли;
				Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(новСтр.ИмяФайла);
				новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
								
				Если ЭтоВебКлиент Тогда
					новСтр.ИмяФайлаНаКомпьютере = ЗначениеЭлемента;
				ИначеЕсли ЭтоАдресВременногоХранилища(ЗначениеЭлемента) Тогда
					новСтр.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ЗначениеЭлемента),
						 УникальныйИдентификатор);
					НовСтр.Размер = ПолучитьИзВременногоХранилища(новСтр.ИмяФайлаНаКомпьютере).Размер();
					РазмерВложения = Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				Иначе
					ДанныеФайла = Новый ДвоичныеДанные(ЗначениеЭлемента);
					новСтр.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла, "");
					новСтр.Размер = ДанныеФайла.Размер();
					РазмерВложения		  = Цел(новСтр.Размер / 1024);
					новСтр.РазмерСтрокой  = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПисьма()
	
	Если НЕ Параметры.Свойство("Текст") Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Параметры.Текст;
	
	Если ТипЗнч(Текст) = Тип("Структура") Тогда
		
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Текст.ТекстHTML, Текст.СтруктураВложений);
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
		Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		
		Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			МодульCRM_Взаимодействия = ОбщегоНазначения.ОбщийМодуль("CRM_Взаимодействия");
			МодульCRM_Взаимодействия.ДобавитьТекстФрорматированногоДокументаКТекстуПисьма(ТекстПисьмаФорматированныйДокумент,
				 Объект.ТекстHTML, Текст.СтруктураВложений, УникальныйИдентификатор,
				 ИдентификаторыКартинокПисьма);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Текст) = Тип("Строка") И Не ПустаяСтрока(Текст) Тогда
		
		Если СтрНачинаетсяС(НРег(Текст), НРег("<!DOCTYPE html")) Тогда
			Картинки = Новый Структура;
			Если ТипЗнч(Параметры.Вложения) = Тип("Массив") Тогда
				Для Индекс = -Параметры.Вложения.ВГраница() По 0 Цикл
					Вложение = Параметры.Вложения[ -Индекс];
					Если Вложение.Свойство("Идентификатор") И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
						КартинкаВложение = Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище));
						Картинки.Вставить(Вложение.Представление, КартинкаВложение);
						Если ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") Тогда
							Параметры.Вложения.Удалить(-Индекс);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Текст, Картинки);
			Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
			Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
			
			Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
				МодульCRM_Взаимодействия = ОбщегоНазначения.ОбщийМодуль("CRM_Взаимодействия");
				МодульCRM_Взаимодействия.ДобавитьТекстФрорматированногоДокументаКТекстуПисьма(ТекстПисьмаФорматированныйДокумент,
					 Объект.ТекстHTML, Картинки, УникальныйИдентификатор,
					 ИдентификаторыКартинокПисьма);
			КонецЕсли;
			
		Иначе
			Объект.Текст = Текст;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма(Параметры = Неопределено)
	
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаРаботаСВложениями.Видимость = Не ОтображатьТаблицуВложений;
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Если Вложения.Количество() > 0 Тогда
			Элементы.ДобавитьВложениеМеню.Доступность					= Ложь;
			Элементы.ДобавитьВложениеКоманда.Доступность				= Ложь;
			Элементы.УдалитьВложениеМеню.Доступность					= Ложь;
			Элементы.УдалитьВложениеКоманда.Доступность					= Ложь;
			Элементы.ДобавитьПисьмоМеню.Доступность						= Ложь;
			Элементы.CRM_ДобавитьФайлыИзИнтересовМеню.Доступность		= Ложь;
			Элементы.CRM_ДобавитьФайлыИзИнтересовКоманда.Доступность	= Ложь;
		Иначе
			Элементы.Вложения.Видимость					= Ложь;
			Элементы.ГруппаРаботаСВложениями.Видимость	= Ложь;
			Элементы.КомандыВложений.Видимость			= Ложь;
			Элементы.ГруппаЗагрузкаВложений.Видимость	= Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Элементы.ФормаОтветить.Видимость = Ложь;
		Элементы.ОтветитьВсем.Видимость = Ложь;
		Элементы.ФормаПереслать.Видимость = Ложь;
		
		НастроитьФормуПоРежимуРедактирования();
		
	Иначе
		Элементы.Отправить.Доступность								=
			(Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
			И Объект.УчетнаяЗапись.ИспользоватьДляОтправки;
		Элементы.ОтправительПредставление.ТолькоПросмотр			= Истина;
		Элементы.СписокПолучателейПисьма.РедактированиеТекста		= Ложь;
		Элементы.СписокПолучателейПисьма.КнопкаВыбора				= Ложь;
		Элементы.СписокПолучателейПисьма.КнопкаОткрытия				= Истина;
		Элементы.СписокПолучателейКопий.РедактированиеТекста		= Ложь;
		Элементы.СписокПолучателейКопий.КнопкаВыбора				= Ложь;
		Элементы.СписокПолучателейКопий.КнопкаОткрытия				= Истина;
		Элементы.СписокПолучателейСкрытыхКопий.РедактированиеТекста	= Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.КнопкаВыбора			= Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.КнопкаОткрытия		= Истина;
		
		Элементы.ДобавитьВложение.Доступность						= Ложь;
		Элементы.УдалитьВсеВложения.Доступность						= Ложь;
		
		Элементы.КнопкаУведомитьОДоставке.Доступность				= Ложь;
		Элементы.КнопкаУведомитьОПрочтении.Доступность				= Ложь;
		Элементы.ВыбратьШаблон.Видимость							= Ложь;
		Элементы.ГруппаШаблона.ТолькоПросмотр						= Истина;
		Элементы.КоманднаяПанельКнопок.Доступность					= Ложь;
		Элементы.ГруппаДополнительное.Доступность					= Ложь;
	КонецЕсли;
	
	Элементы.ТекстПисьмаКонтекстноеМенюЗагрузитьИзHTMLФайла.Видимость =
		НЕ (Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	Элементы.ТекстПисьмаМенюЗагрузитьИзHTMLФайла.Доступность =
		Элементы.ТекстПисьмаКонтекстноеМенюЗагрузитьИзHTMLФайла.Видимость;
	
	Элементы.ТекстПисьмаКонтекстноеМенюВставитьСсылкуНаОбъектИнформационнойБазы.Видимость =
		НЕ (Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	Элементы.ВставитьСсылкуНаОбъектИнформационнойБазы.Доступность =
		Элементы.ТекстПисьмаКонтекстноеМенюВставитьСсылкуНаОбъектИнформационнойБазы.Видимость;
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Или
			Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
			
			Если ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена Тогда
				
				ТекстПисьма = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
					Предмет.ТекстHTML, Предмет, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
				ЗаполнитьАвтотекст(ТекстПисьма);
				
			Иначе
				
				ТекстПисьма = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
					Объект.ТекстHTML, Объект.Ссылка, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
				
			КонецЕсли;
			
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
			
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
			ТекстПисьма = Объект.Текст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		
	Иначе
		
		ОпределитьСпособРедактированияПисьма(Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьСпособРедактированияПисьма(Параметры = Неопределено)

	Если Объект.ТипТекста.Пустая() Тогда
		
		ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		
		// Если тип текста не был заполнен, то может оказаться, что формат выбран некорректно, поэтому:
		// 1) Если текст заполнен, но не заполнен HTML - то формат сообщения исправляем на "текст".
		// 2) Если HTML заполнен, но не заполнен текст - то формат сообщения исправляем на "HTML".
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст 
			И СокрЛП(Объект.Текст) = "" И СокрЛП(Объект.ТекстHTML) <> "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		ИначеЕсли ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И СокрЛП(Объект.Текст) <> "" И СокрЛП(Объект.ТекстHTML) = "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПараметрыРаботыПользователя =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			Объект.УчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
		
		Объект.УведомитьОДоставке            = ПараметрыРаботыПользователя.УведомитьОДоставке;
		Объект.УведомитьОПрочтении           = ПараметрыРаботыПользователя.УведомитьОПрочтении;
		
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
			НастройкиХранилище = Взаимодействия.НастройкиРаботыСПочтой();
			ШрифтПоУмолчанию = ?(
				НастройкиХранилище.Свойство("ШрифтПоУмолчаниюВЭлектронномПисьме"),
				НастройкиХранилище.ШрифтПоУмолчаниюВЭлектронномПисьме,
				WindowsШрифты.ШрифтДиалоговИМеню);
			
			Если ШрифтПоУмолчанию = WindowsШрифты.ШрифтДиалоговИМеню Тогда
				ШрифтПоУмолчанию = Константы.CRM_ШрифтПисьмаПоУмолчанию.ПолучитьШрифт();
			КонецЕсли;
		КонецЕсли;
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Если Не Объект.Ссылка.Пустая() Или ЗначениеЗаполнено(Объект.ТекстHTML) Тогда
			
			Если ЭтоАдресВременногоХранилища(Объект.ТекстHTML) Тогда
				
				// TODO: понять, что это такое
				ТелоПисьмаHTML   = ПолучитьИзВременногоХранилища(Объект.ТекстHTML);
				Объект.ТекстHTML = ТелоПисьмаHTML.ТекстHTML;
				ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТелоПисьмаHTML.ТекстHTML, ТелоПисьмаHTML.СтруктураВложений);
				Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
				Объект.Текст     = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
				
			Иначе
				
				Если ЭтоПисьмоРассылки И Не Объект.CRM_РассылкаИзменена Тогда
					
					ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
						Предмет.ТекстHTML, Предмет, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
					ЗаполнитьАвтотекст(ТекстПисьмаHTML);
					
				Иначе
					
					СсылкаНаОбъект = Объект.Ссылка;
					
					Если Объект.Ссылка.Пустая()
						И Параметры <> Неопределено 		
						И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
						СсылкаНаОбъект = Параметры.ЗначениеКопирования;
					КонецЕсли;
					
					ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
						Объект.ТекстHTML, СсылкаНаОбъект, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
						
						Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда 
							Если Объект.Ссылка.Пустая() И СтрНайти(ТекстПисьмаHTML, "1crm-signup") = 0 Тогда // письмо по шаблону или из ленты
								ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
								ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, Истина);
							КонецЕсли;
						КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Объект.Ссылка.Пустая() Тогда
			
			ТекстПисьмаHTML = "<br>";
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьмаHTML);
			
			НастройкиХранилище = Взаимодействия.НастройкиРаботыСПочтой();
			ВключатьТелоИсходногоПисьма = ?(НастройкиХранилище.Свойство("ВключатьТелоИсходногоПисьма"),
				НастройкиХранилище.ВключатьТелоИсходногоПисьма, Ложь);
			
			Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И Параметры.Основание.Свойство("Команда") И (Параметры.Основание.Команда = "ПереслатьКакВложения") > 0 Тогда
				ВключатьТелоИсходногоПисьма = Ложь;
			КонецЕсли;
			
			ЭтоНовоеПисьмо = Истина;
			Если ВключатьТелоИсходногоПисьма И ЗначениеЗаполнено(Объект.ВзаимодействиеОснование) Тогда
				ЭтоНовоеПисьмо = Ложь;
			КонецЕсли;
			
			Если Не Объект.УчетнаяЗапись.CRM_ПодписьВнизуПисьма Тогда
				ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
					ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, ЭтоНовоеПисьмо);
			КонецЕсли;
			
			Если ВключатьТелоИсходногоПисьма И ЗначениеЗаполнено(Объект.ВзаимодействиеОснование) Тогда
				
				ПисьмоИсточникТекста = Объект.ВзаимодействиеОснование;
				Если ТипЗнч(ПисьмоИсточникТекста) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
					ПредметОснования = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоИсточникТекста);
					Если ЗначениеЗаполнено(ПредметОснования)
						И ТипЗнч(ПредметОснования) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
						
						РассылкаИзменена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоИсточникТекста, "CRM_РассылкаИзменена");
						Если Не РассылкаИзменена Тогда
							ПисьмоИсточникТекста = ПредметОснования;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				CRM_Взаимодействия.ДобавитьТекстИсходногоПисьма(ТекстПисьмаHTML, Объект.ВзаимодействиеОснование,
					 ПисьмоИсточникТекста);
				ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(ТекстПисьмаHTML,
					ПисьмоИсточникТекста, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
				
				ЭтоНовоеПисьмо = Ложь;
				
			КонецЕсли;
			
			Если Объект.УчетнаяЗапись.CRM_ПодписьВнизуПисьма Тогда
				ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
					ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, ЭтоНовоеПисьмо);
			КонецЕсли;
			
		КонецЕсли;
		
		//Если Объект.Ссылка.Пустая() Тогда
		//	
		//	Если НастройкиХранилище = Неопределено Тогда
		//		НастройкиХранилище = Взаимодействия.НастройкиРаботыСПочтой();
		//	КонецЕсли;
		//	
		//	ШрифтПоУмолчанию = ?(
		//	НастройкиХранилище.Свойство("ШрифтПоУмолчаниюВЭлектронномПисьме"),
		//	НастройкиХранилище.ШрифтПоУмолчаниюВЭлектронномПисьме,
		//	WindowsШрифты.ШрифтДиалоговИМеню);
		//	
		//	Если ШрифтПоУмолчанию = WindowsШрифты.ШрифтДиалоговИМеню Тогда
		//		ШрифтПоУмолчанию = Константы.CRM_ШрифтПисьмаПоУмолчанию.ПолучитьШрифт();
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		ТекстПисьма = Объект.Текст;
		Если Объект.Ссылка.Пустая() И ПараметрыРаботыПользователя.Подпись <> Неопределено Тогда
			
			ТекстПисьма = ТекстПисьма + ПараметрыРаботыПользователя.Подпись;
			
		КонецЕсли;
		Объект.Кодировка = "UTF-8";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОценитьРазмерПисьма()

	Размер = СтрДлина(Объект.Тема) * 2;
	Размер = Размер + ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
	                    СтрДлина(Объект.ТекстHTML),
	                    СтрДлина(Объект.Текст)) * 2;
	
	Для каждого Вложение Из Вложения Цикл
		Размер = Размер + Вложение.Размер * 1.5;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		Размер = Размер + СтрокаТаблицыСоответствий.Картинка.ПолучитьДвоичныеДанные().Размер() * 1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеИдентификаторовОснований(Знач Идентификаторы)

	Идентификаторы = СтрЗаменить(Идентификаторы, "<",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, ">",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, "  ", " ");
	Идентификаторы = СокрЛП(СтрЗаменить(Идентификаторы, "  ", " "));
	Идентификаторы = СтрЗаменить(Идентификаторы, " ", Символы.ПС + "                          ");
	
	Возврат Идентификаторы;

КонецФункции

&НаСервере
Функция ВыполнитьОтправкуНаСервере(Пароль = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ПисьмоОтправлено", Ложь);
	Результат.Вставить("ОшибкаПодключения", Ложь);
	
	Если Не Объект.Ссылка.Пустая()
		И (ЗначениеЗаполнено(Объект.Ссылка.ИдентификаторСообщения)
			Или РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ПисьмоОтправленоРанее(Объект.Ссылка)) Тогда
		Результат.ПисьмоОтправлено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
	// +CRM
	ПараметрыПисьма.Вставить("ИмяОтправителя",
		CRM_УправлениеЭлектроннойПочтой.ИмяОтправителяПользователя(Объект.УчетнаяЗапись, ТекущийПользователь));
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований")
		И Не ПустаяСтрока(ПараметрыПисьма.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.ИдентификаторыОснований = СтрЗаменить(ПараметрыПисьма.ИдентификаторыОснований, Символы.ВК, "");
	КонецЕсли;
	// -CRM
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, ПараметрыПисьма);
	Попытка
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, Письмо);
	Исключение
		ТекстОшибки = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
			ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ПисьмоОбъект.Ссылка, ТекстОшибки);
		
		Результат.ТекстСообщения = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ОшибкаПодключения = Истина;

		// +CRM
		Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
		И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
			// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
			CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(Объект.Ссылка,
				 ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		// -CRM
		
		Возврат Результат;
	КонецПопытки;
	
	ПараметрыОбработкиОшибки = УправлениеЭлектроннойПочтой.ПараметрыОбработкиОшибкиОтправки();
	ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ПисьмоОбъект;
	ПараметрыОбработкиОшибки.Ссылка                            = ПисьмоОбъект.Ссылка;
	ПараметрыОбработкиОшибки.ПредставлениеПисьма               = Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема,
		 ПисьмоОбъект.Дата);
	ПараметрыОбработкиОшибки.КоличествоПопыток                 = 0;
	ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Ложь;
	ПараметрыОбработкиОшибки.СообщатьПользователю              = Истина;
	
	Если ЗначениеЗаполнено(РезультатОтправки.ОшибочныеПолучатели) Тогда
		Результат = УправлениеЭлектроннойПочтой.ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки,
			 РезультатОтправки.ОшибочныеПолучатели);
		Если Не Результат.ПисьмоОтправлено Тогда
			ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ПисьмоОтправлено = Истина;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭлектронноеПисьмоИсходящее");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		РегистрыСведений.ПредметыПапкиВзаимодействий.ЗаблокироватьПредметыПапокВзаимодействий(Блокировка, Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Если НЕ ПисьмоОбъект.УдалятьПослеОтправки Тогда
			ПисьмоОбъект.СтатусПисьма                       = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			ПисьмоОбъект.ДатаОтправления                    = ТекущаяДатаСеанса();
			ПисьмоОбъект.ИдентификаторСообщения             = РезультатОтправки.ИдентификаторПисьмаSMTP;
			ПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = РезультатОтправки.ИдентификаторПисьмаIMAP;
			ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
			
			// +CRM
			//Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка,
				// Взаимодействия.ОпределитьПапкуДляПисьма(Объект.Ссылка));
			Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Объект.УчетнаяЗапись, "Отправленные");
			CRM_Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка, Ложь, Ложь);
			// -CRM

			ТекущийСтатусПисьма = Объект.СтатусПисьма;
		Иначе
			ПисьмоОбъект.Прочитать();
			ПисьмоОбъект.Удалить();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		// +CRM
		РегистрыСведений.CRM_ВременныеДанныеОтправленныхПисем.ЗарегистрироватьДанные(Объект.Ссылка,
			РезультатОтправки.ИдентификаторПисьмаSMTP,
			РезультатОтправки.ИдентификаторПисьмаIMAP,
			ТекущаяДатаСеанса());
		// -CRM
		ВызватьИсключение;
	КонецПопытки;	

	// +CRM
	// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
	// если есть, то удалим.
	CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(Объект.Ссылка);
	// -CRM
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКнопкиПоУмолчанию()
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.Отправить.Заголовок = Нстр("ru='Отправить'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее Тогда
		Элементы.Отправить.Заголовок = Нстр("ru='Отправить сейчас'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		// Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НастройкиРаботыСПочтой = Взаимодействия.НастройкиРаботыСПочтой();
			Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу")
				 И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
				ОтправлятьСообщенияСразу = Истина;
			КонецЕсли;
		//КонецЕсли;
		
		Элементы.Отправить.Заголовок = Нстр("ru='Отправить';en='Send'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзбранного()
	
	Если Объект.CRM_Избранный Тогда
		Элементы.CRM_Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
		Элементы.CRM_Избранный.Заголовок = НСтр("ru='Снять пометку'");
	Иначе
		Элементы.CRM_Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
		Элементы.CRM_Избранный.Заголовок = НСтр("ru='Установить пометку'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьАдресов()
	бЕстьОшибки = Ложь;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(CRM_СписокПолучателейПисьма, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейПисьма");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(CRM_СписокПолучателейКопий, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейКопий");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(CRM_СписокПолучателейСкрытыхКопий, , ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "CRM_СписокПолучателейСкрытыхКопий");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не бЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура CRM_ОбновитьДатуПисьма()
	
	Если Объект["СтатусПисьма"] = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда		
		Элементы.CRM_ДекорацияДата.Заголовок = Формат(Объект["ДатаОтправления"], "ДЛФ=DD") + ", " 
			+ Формат(Объект["ДатаОтправления"],
			 "ДФ=ЧЧ:мм");
		Элементы.CRM_ДекорацияДата.Видимость = Истина;	
	Иначе
		Элементы.CRM_ДекорацияДата.Заголовок	= "";
		Элементы.CRM_ДекорацияДата.Видимость	= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтправительКонтакт()
	Адрес	= "";
	Контакт	= Неопределено;
	Для Каждого СтрокаТаблицы Из ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Возврат;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если (Контакт.Владелец = СтрокаТаблицы.Контакт) Тогда
							Адрес	= СтрокаТаблицы.Адрес;
							Контакт	= СтрокаТаблицы.Контакт;	
						Иначе	
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат;
					КонецЕсли;	
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Если НЕ (Контакт = СтрокаТаблицы.Контакт.Владелец) Тогда
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если Контакт.Владелец = СтрокаТаблицы.Контакт.Владелец Тогда
							Контакт	= СтрокаТаблицы.Контакт.Владелец;
							КонтактнаяИнформация	= CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт,
								 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
							Если КонтактнаяИнформация.Количество() = 0 Тогда
								Адрес	= "";
							Иначе	
								Адрес	= КонтактнаяИнформация[0].Представление;
							КонецЕсли;
						Иначе	
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат;
					КонецЕсли;
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			Иначе
				Если ЗначениеЗаполнено(Контакт) Тогда
					Возврат;
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ПолучателиКопий Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Возврат;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если (Контакт.Владелец = СтрокаТаблицы.Контакт) Тогда
							Адрес	= СтрокаТаблицы.Адрес;
							Контакт	= СтрокаТаблицы.Контакт;	
						Иначе	
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат;
					КонецЕсли;	
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Если ЗначениеЗаполнено(Контакт) Тогда
					Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						Если НЕ (Контакт = СтрокаТаблицы.Контакт.Владелец) Тогда
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						Если Контакт.Владелец = СтрокаТаблицы.Контакт.Владелец Тогда
							Контакт	= СтрокаТаблицы.Контакт.Владелец;
							КонтактнаяИнформация	= CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт,
								 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
							Если КонтактнаяИнформация.Количество() = 0 Тогда
								Адрес	= "";
							Иначе	
								Адрес	= КонтактнаяИнформация[0].Представление;
							КонецЕсли;
						Иначе	
							Возврат;
						КонецЕсли;
					ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
						Возврат;
					КонецЕсли;
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			Иначе
				Если ЗначениеЗаполнено(Контакт) Тогда
					Возврат;
				Иначе	
					Адрес	= СтрокаТаблицы.Адрес;
					Контакт	= СтрокаТаблицы.Контакт;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.CRM_ОтправительАдрес		= Адрес;
		Объект.CRM_ОтправительКонтакт	= Контакт;
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтактаОтправителя()
	Если ТипЗнч(Объект.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ОтправительВладелец	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.CRM_ОтправительКонтакт, "Владелец");
		Элементы.ОтправительВладелец.Видимость = Истина;
	ИначеЕсли ТипЗнч(Объект.CRM_ОтправительКонтакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ОтправительВладелец	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.CRM_ОтправительКонтакт,
			 "Организация");
		Элементы.ОтправительВладелец.Видимость = Истина;
	Иначе
		ОтправительВладелец	= ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.ОтправительВладелец.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодпись(ТекстВПолеHTML, НоваяУчетнаяЗапись)
	
	ЭтоНовоеПисьмо = Не ЗначениеЗаполнено(Объект.ВзаимодействиеОснование)
		Или (ТипЗнч(Объект.ВзаимодействиеОснование) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И ТипЗнч(Объект.ВзаимодействиеОснование) <> Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
		ТекстВПолеHTML, НоваяУчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, ЭтоНовоеПисьмо);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПисьмаHTMLЗаполнен(Знач ТекстВПолеHTML)
	
	ТекстTHMLБезПодписи = CRM_Взаимодействия.УдалитьПодписьИзТекстаHTML(ТекстВПолеHTML);
	ОбычныйТекстБезПодписи = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекстTHMLБезПодписи);
	
	Возврат ЗначениеЗаполнено(ОбычныйТекстБезПодписи);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПодписиПользователя(УчетнаяЗапись, Пользователь)
	
	ПодписьСсылка = CRM_Взаимодействия.ПолучитьПодписьПисьма(УчетнаяЗапись, Пользователь);
	Если Не ЗначениеЗаполнено(ПодписьСсылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Взаимодействия.ПолучитьОбычныйТекстИзHTML(ПодписьСсылка.Текст);
	
КонецФункции

&НаСервере
Процедура CRM_ПоказатьСкрытьСвойстваНаСервере(НовоеЗначениеВидимость = Неопределено)
	
	Если НовоеЗначениеВидимость = Неопределено Тогда	
		НовоеЗначениеВидимость = НЕ Элементы.ГруппаНастройкиПраваяКолонка.Видимость;
	КонецЕсли;
		
	Элементы.ГруппаНастройкиПраваяКолонка.Видимость = НовоеЗначениеВидимость;
	
	CRM_ПоказатьСкрытьСвойства = Элементы.ГруппаНастройкиПраваяКолонка.Видимость;
	
	Если CRM_ПоказатьСкрытьСвойства Тогда
		Элементы.CRM_ПоказатьСкрытьСвойства.Заголовок = НСтр("ru = 'Скрыть свойства'; en = 'Hide properties'");
		Элементы.CRM_ПоказатьСкрытьСвойства.Картинка = БиблиотекаКартинок.CRM_СвойстваСкрыть;
	Иначе
		Элементы.CRM_ПоказатьСкрытьСвойства.Заголовок = НСтр("ru = 'Показать свойства'; en = 'Show properties'");
		Элементы.CRM_ПоказатьСкрытьСвойства.Картинка = БиблиотекаКартинок.CRM_СвойстваПоказать;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиПраваяКолонка.Ширина = ?(НовоеЗначениеВидимость, 40, 0);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаРедактирования()
	
	Если Объект.CRM_РассылкаИзменена Тогда
		РежимКартинок = "Копирование";
		УдаляемыеЭлементы = Новый Массив;
		Для Каждого ЭлементСписка Из ИдентификаторыКартинокПисьма Цикл
			ДанныеКартинки = ЭлементСписка.Значение;
			Если ДанныеКартинки.Режим = "Вставка" И ДанныеКартинки.Владелец = Предмет Тогда
				УдаляемыеЭлементы.Добавить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементСписка Из УдаляемыеЭлементы Цикл
			ИдентификаторыКартинокПисьма.Удалить(ЭлементСписка);
		КонецЦикла;
	Иначе
		РежимКартинок = "Вставка";
		Объект.ТекстHTML = "";
		Объект.Текст = "";
	КонецЕсли;
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
		Предмет.ТекстHTML, Предмет, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, РежимКартинок);
	ЗаполнитьАвтотекст(ТекстПисьмаHTML);
	
	ЗаполнитьВложения();
	СформироватьСсылкиВложений();
	
	НастроитьФормуПоРежимуРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоРежимуРедактирования()
	
	Если ЭтоПисьмоРассылки Тогда
		
		Элементы.ДобавитьВложение.Доступность				= Объект.CRM_РассылкаИзменена;
		Элементы.УдалитьВсеВложения.Доступность				= Объект.CRM_РассылкаИзменена;
		Элементы.КоманднаяПанельКнопок.Доступность			= Объект.CRM_РассылкаИзменена;
		Элементы.ГруппаДополнительное.Доступность			= Объект.CRM_РассылкаИзменена;
		
		Если Объект.CRM_РассылкаИзменена Тогда
			Элементы.ТекстРазрешитьРедактирование.Заголовок	= НСтр("ru = 'Отменить редактирование'");
		Иначе
			Элементы.ТекстРазрешитьРедактирование.Заголовок	= НСтр("ru = 'Разрешить редактирование'");
		КонецЕсли;
		
		Элементы.ТекстРазрешитьРедактирование.Пометка		= Объект.CRM_РассылкаИзменена;
		Элементы.ТекстРазрешитьРедактирование.Видимость		= Истина;
		
	Иначе
		
		Элементы.ДобавитьВложение.Доступность				= Истина;
		Элементы.УдалитьВсеВложения.Доступность				= Истина;
		Элементы.КоманднаяПанельКнопок.Доступность			= Истина;
		Элементы.ГруппаДополнительное.Доступность			= Истина;
		
		Элементы.ТекстРазрешитьРедактирование.Видимость		= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "",
	 ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено,
	 ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,
		 ЗначениеПоУмолчанию, ОписаниеНастроек,
		 ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	 ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено,
	 НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,
		 ОписаниеНастроек, ИмяПользователя,
		 НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаКлиенте
Процедура ПриИзмененииПартнера()
	
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ЗаполнитьАвтотекст(ТекстВПолеHTML);
		ТекстПисьмаHTML = ТекстВПолеHTML;
		
		ЗаполнитьОтправительКонтакт();
		
	КонецЕсли;
	
	ОбработкаВыбораКонтактаОтправителя();
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПартнера()
	
	Для Каждого СтрокаЧТ Из ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(СтрокаЧТ.Контакт) Тогда
			Если ТипЗнч(СтрокаЧТ.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Возврат СтрокаЧТ.Контакт;
			ИначеЕсли ТипЗнч(СтрокаЧТ.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Возврат СтрокаЧТ.Контакт.Владелец;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.Партнеры.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьДокумента(Ссылка)
	
	ПараметрыДоступа = ПараметрыДоступа("Просмотр", Ссылка.Метаданные(), "Ссылка");
	Возврат  ПараметрыДоступа.Доступность;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПутиККартинкамHTML(Знач Текст)
	
	ПутиККартинкам = Новый Массив;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	
	ЧтениеHTML.УстановитьСтроку(Текст);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		Путь = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src").Значение;
		ПутиККартинкам.Добавить(Путь);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПутиККартинкам);
	
КонецФункции

#Область РегистрацияОбращений

&НаСервереБезКонтекста
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка) 
		И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаСервере
Процедура CRM_ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	Если РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка)
		 И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
			 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
			 Комментарий); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтклонитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если (Результат = Неопределено) ИЛИ (Результат = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		CRM_ОтклонитьОбращениеНаСервере(ДополнительныеПараметры.Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		CRM_ОтклонитьОбращениеНаСервере(ДополнительныеПараметры.Ссылка, Неопределено, "");
	КонецЕсли;
	Рассмотрено = Истина;
	Объект.CRM_СкрытьВАРМ = Истина;
	Если Записать() Тогда
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВыполнитьОтклонениеОбращения(ДополнительныеПараметры = Неопределено)
	ТекущееСостояние = Неопределено;
	НельзяОтклонить = CRM_МетодыФормДокументовСервер.ОбращениеНельзяОтклонить(Объект.Ссылка, ТекущееСостояние);
	Если НельзяОтклонить Тогда
		CRM_МетодыФормДокументовКлиент.ПоказатьПредупреждениеОбращениеОбработано(ТекущееСостояние);
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
	Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ОтклонитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
			 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		CRM_ОтклонитьЗавершение(Истина, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Получатели

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора, ГруппаАдресов = "")
	
	// Получим список адресатов
	соотвТабЧастей = Новый Соответствие;
	соотвТабЧастей.Вставить("Кому",    ПолучателиПисьма);
	соотвТабЧастей.Вставить("Копии",   ПолучателиКопий);
	соотвТабЧастей.Вставить("Скрытые", ПолучателиСкрытыхКопий);
	соотвТабЧастей.Вставить("Ответ",   Объект.ПолучателиОтвета);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабЧасть.Значение), ТабЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",   Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", 		  Предмет);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", ?(ПустаяСтрока(ГруппаАдресов), НСтр("ru='Кому'"), ГруппаАдресов));
	
	Если ДляПодбора Тогда
		
		ПараметрыОткрытия.Вставить("ГруппаАдресов", ?(ПустаяСтрока(ГруппаАдресов), НСтр("ru='Кому'"), ГруппаАдресов));		
		
	КонецЕсли;
	
	// Откроем форму для редактирования списка адресатов.
	ИмяОбщейФормы = ?(ДляПодбора, "ОбщаяФорма.CRM_АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСписокПолучателейЗавершение",
		 ЭтотОбъект, Новый Структура("ДляПодбора, соотвТабЧастей", ДляПодбора,
		 соотвТабЧастей));
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия, , , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокПолучателейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;

	// Заполним адресатов
	Если ДополнительныеПараметры.ДляПодбора Тогда
		ЗаполнитьПодобранныхПолучателей(ДополнительныеПараметры.соотвТабЧастей, Результат);
	Иначе
		ЗаполнитьУточненныеКонтакты(ДополнительныеПараметры.соотвТабЧастей, Результат);
	КонецЕсли;

	// Сформируем представления контактов.
	СформироватьПредставленияКонтактов();
	
	ОбновитьСписокСписокПоследнихАдресов();
	
	УстановитьВидимостьПолучателейПисьма();
	
	// Установим признак модифицированности.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПолучателейПисьмаАвтоПодборНаСервере(СтрокаДляПоиска)
	
	СписокАдресов = Новый СписокЗначений;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Контакты.Ссылка КАК Контакт,
	|	Контакты.Владелец КАК Владелец,
	|	Контакты.Состояние КАК Состояние,
	|	ПРЕДСТАВЛЕНИЕ(Контакты.Ссылка) КАК Представление,
	|	Контакты.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ ВТВыборкаАдресов
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		"""" КАК Владелец,
	|		"""" КАК Состояние,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		КонтактнаяИнформация.Тип = &Тип
	|		И (КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
	|		ИЛИ КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление)
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		КонтактныеЛица.Ссылка,
	|		ПРЕДСТАВЛЕНИЕ(КонтактныеЛица.Владелец),
	|		ВЫБОР
	|			КОГДА КонтактныеЛица.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)
	|				ТОГДА """"
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(КонтактныеЛица.CRM_Состояние)
	|		КОНЕЦ,
	|		КонтактнаяИнформацияЛица.АдресЭП КАК АдресЭП
	|	ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформацияЛица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|		ПО КонтактнаяИнформацияЛица.Ссылка = КонтактныеЛица.Ссылка
	|ГДЕ
	|		КонтактнаяИнформацияЛица.Тип = &Тип
	|		И (КонтактнаяИнформацияЛица.АдресЭП ПОДОБНО &Представление
	|		ИЛИ КонтактныеЛица.Наименование ПОДОБНО &Представление)
	|		И (НЕ КонтактныеЛица.ПометкаУдаления)
	|";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Или ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка,
		|		"""",
		|		"""",
		|		КонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Или ЭлементМассиваОписания.Имя = "КонтактныеЛицаПартнеров" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|		КонтактнаяИнформация.Ссылка,
		|		"""",
		|		"""",
		|		КонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты";
	
	Запрос.УстановитьПараметр("Представление", "%" + СтрокаДляПоиска + "%");
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Выполнить();
	
	// Новый запрос из временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ 
	|	Контакт,
	|	Представление,
	|	АдресЭП,
	|	Состояние,
	|	Владелец
	|ИЗ
	|	ВТВыборкаАдресов
	|ИТОГИ ПО
	|	АдресЭП";
	
	ВыборкаАдреса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАдреса.Следующий() Цикл
		
		ВыборкаКонтакты = ВыборкаАдреса.Выбрать();
		Пока (ВыборкаКонтакты.Следующий()) Цикл
			
			ПредставлениеКонтакта = СокрЛП(СтрЗаменить(ВыборкаКонтакты.Представление, ",", ""));
			ПредставлениеВладельца = СокрЛП(СтрЗаменить(ВыборкаКонтакты.Владелец, ",", ""));
			
			СтрокаАдреса = ПредставлениеКонтакта + " <" + ВыборкаАдреса.АдресЭП + "> "
				+ ?(ЗначениеЗаполнено(ПредставлениеВладельца), "(" + ПредставлениеВладельца, "")
				+ ?(ЗначениеЗаполнено(ВыборкаКонтакты.Состояние), " / " + НРег(ВыборкаКонтакты.Состояние), "")
				+ ?(ЗначениеЗаполнено(ПредставлениеВладельца), ")", "");
				
			СписокАдресов.Добавить(СтрокаАдреса);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокАдресов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПолучателейПисьма(ИмяЭлемент = "")
	
	CRM_ИмяЭлемента = ИмяЭлемент;
	
	Если Объект.Ссылка.Пустая()
		 ИЛИ Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		Если НЕ ИмяЭлемент = "" Тогда
			Если ИмяЭлемент = "ПолучателиСсылкаКопия" Тогда
				Элементы.ГруппаПолучателиКопии.Видимость	= Истина;
				Элементы.ПолучателиСсылкаКопия.Видимость	= Ложь;
				Элементы.ПолучателиСсылкаСкрытая.Видимость	= Ложь;
				Элементы.КопияСсылкаСкрытая.Видимость		= Истина;
			КонецЕсли;
			
			Если ИмяЭлемент = "ПолучателиСсылкаСкрытая" Тогда
				Элементы.ГруппаПолучателиСкрытыкКопии.Видимость	= Истина;
				Элементы.ПолучателиСсылкаКопия.Видимость		= Ложь;
				Элементы.ПолучателиСсылкаСкрытая.Видимость		= Ложь;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Истина;
			КонецЕсли;
			
			Если ИмяЭлемент = "КопияСсылкаСкрытая" Тогда
				Элементы.ГруппаПолучателиСкрытыкКопии.Видимость	= Истина;
				Элементы.КопияСсылкаСкрытая.Видимость			= Ложь;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Ложь;
			КонецЕсли;
			
			Если ИмяЭлемент = "СкрытаяСсылкаКопия" Тогда
				Элементы.ГруппаПолучателиКопии.Видимость		= Истина;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Ложь;
				Элементы.КопияСсылкаСкрытая.Видимость			= Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПолучателиКопии.Видимость			= ЗначениеЗаполнено(CRM_СписокПолучателейКопий);
			Элементы.ГруппаПолучателиСкрытыкКопии.Видимость		= ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий);
			
			Элементы.ПолучателиСсылкаКопия.Видимость			= НЕ (ЗначениеЗаполнено(CRM_СписокПолучателейКопий)
				 ИЛИ ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий));
			Элементы.ПолучателиСсылкаСкрытая.Видимость			= НЕ (ЗначениеЗаполнено(CRM_СписокПолучателейКопий)
				 ИЛИ ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий));
			
			Элементы.КопияСсылкаСкрытая.Видимость				= ЗначениеЗаполнено(CRM_СписокПолучателейКопий)
				 И НЕ ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий);
			Элементы.СкрытаяСсылкаКопия.Видимость				= ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий)
				 И НЕ ЗначениеЗаполнено(CRM_СписокПолучателейКопий);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПолучателиКопии.Видимость			= ЗначениеЗаполнено(CRM_СписокПолучателейКопий);
		Элементы.ГруппаПолучателиСкрытыкКопии.Видимость		= ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий);
		
		Элементы.ПолучателиСсылкаКопия.Видимость			= Ложь;
		Элементы.ПолучателиСсылкаСкрытая.Видимость			= Ложь;
		
		Элементы.КопияСсылкаСкрытая.Видимость				= Ложь;
		Элементы.СкрытаяСсылкаКопия.Видимость				= Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(CRM_СписокПолучателейПисьма) Тогда
		Элементы.СкрытьПоказатьПолучателей.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателей.Видимость		= Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаПолучателиКопии.Видимость Тогда
		Элементы.СкрытьПоказатьПолучателейКопии.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателейКопии.Видимость	= Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаПолучателиКопии.Видимость Тогда
		Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость		= Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьФокус", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокус()
	
	Если НЕ CRM_ИмяЭлемента = "" Тогда
		
		Если CRM_ИмяЭлемента = "ПолучателиСсылкаКопия" ИЛИ CRM_ИмяЭлемента = "СкрытаяСсылкаКопия" Тогда
			ТекущийЭлемент = Элементы.СписокПолучателейКопий;
		КонецЕсли;
		
		Если CRM_ИмяЭлемента = "ПолучателиСсылкаСкрытая" ИЛИ CRM_ИмяЭлемента = "КопияСсылкаСкрытая" Тогда
			ТекущийЭлемент = Элементы.СписокПолучателейСкрытыхКопий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресКонтакта(Контакт)
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат "";
	КонецЕсли;
	КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(Контакт,
		 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат "";
	Иначе	
		Возврат КонтактнаяИнформация[0].Представление;
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура ОбновитьСписокСписокПоследнихАдресов()
	
	Если ЗначениеЗаполнено(CRM_СписокПолучателейПисьма)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(CRM_СписокПолучателейПисьма)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(CRM_СписокПолучателейПисьма), СокрЛП(CRM_СписокПолучателейПисьма));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_СписокПолучателейКопий)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(CRM_СписокПолучателейКопий)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(CRM_СписокПолучателейКопий), СокрЛП(CRM_СписокПолучателейКопий));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_СписокПолучателейСкрытыхКопий)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(CRM_СписокПолучателейСкрытыхКопий)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(CRM_СписокПолучателейСкрытыхКопий), СокрЛП(CRM_СписокПолучателейСкрытыхКопий));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокСписокПоследнихАдресов()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("СписокПоследнихАдресов", Строка(Объект.УчетнаяЗапись.УникальныйИдентификатор()), ИсторияАдресов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокПоследнихАдресов()
	
	// Элементы.СписокПолучателейПисьма.СписокВыбора.Очистить();
	// Элементы.СписокПолучателейКопий.СписокВыбора.Очистить();
	// Элементы.СписокПолучателейСкрытыхКопий.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ИсторияАдресов = ХранилищеОбщихНастроек.Загрузить("СписокПоследнихАдресов", Строка(Объект.УчетнаяЗапись.УникальныйИдентификатор()));
	КонецЕсли;
	
	//Если НЕ СписокПоследнихАдресов = Неопределено Тогда
	//	Для Каждого ЭлементСписка ИЗ СписокПоследнихАдресов Цикл
	//		Элементы.СписокПолучателейПисьма.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//		Элементы.СписокПолучателейКопий.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//		Элементы.СписокПолучателейСкрытыхКопий.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПолучателей()
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиПисьма Цикл
		НоваяСтрока = ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	Если ПолучателиПисьма.Количество() > 0 Тогда
		CRM_СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиПисьма, Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиКопий Цикл
		НоваяСтрока = ПолучателиКопий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	Если ПолучателиКопий.Количество() > 0 Тогда
		CRM_СписокПолучателейКопий = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиКопий, Ложь);
	КонецЕсли;
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиСкрытыхКопий Цикл
		НоваяСтрока = ПолучателиСкрытыхКопий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	Если ПолучателиСкрытыхКопий.Количество() > 0 Тогда
		CRM_СписокПолучателейСкрытыхКопий = 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиСкрытыхКопий, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(соотвТабЧастей, Результат)

	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		ТабЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабЧасть = соотвТабЧастей.Получить(Элемент.Группа);
		Если ТабЧасть = Неопределено Тогда
			ТабЧасть = ПолучателиПисьма;
		КонецЕсли;
		
		новСтр = ТабЧасть.Добавить();
		новСтр.Адрес = Элемент.Адрес;
		новСтр.Представление = ОбработанноеПредставлениеАдресата(Элемент.Представление);
		новСтр.Контакт = Элемент.Контакт;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУточненныеКонтакты(соотвТабЧастей, соотвКонтактов)
	
	ПолучателиПисьма.Очистить();
	ПолучателиКопий.Очистить();
	ПолучателиСкрытыхКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	
	Для каждого ЭлементМассива Из соотвКонтактов Цикл
		
		Если ЭлементМассива.Группа = "Кому" Тогда
			ТаблицаПолучателей = ПолучателиПисьма;
		ИначеЕсли ЭлементМассива.Группа = "Копии" Тогда
			ТаблицаПолучателей = ПолучателиКопий;
		ИначеЕсли ЭлементМассива.Группа = "Скрытые" Тогда
			ТаблицаПолучателей = ПолучателиСкрытыхКопий;
		Иначе
			ТаблицаПолучателей = Объект.ПолучателиОтвета;
		КонецЕсли;
		
		СтрокаПолучатели = ТаблицаПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, ЭлементМассива);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияКонтактов()
	
	CRM_СписокПолучателейПисьма		 = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиПисьма,
		       Ложь);
	CRM_СписокПолучателейКопий		 = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиКопий,
		        Ложь);
	CRM_СписокПолучателейСкрытыхКопий = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ПолучателиСкрытыхКопий,
		 Ложь);

КонецПроцедуры

&НаСервере
Процедура ПроверитьСкорректироватьПолучателейПисьма()
	
	// Если ПолучателиПисьма.Количество() > 0 Тогда
		Объект.ПолучателиПисьма.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиПисьма Цикл
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
			НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, "<" + НоваяСтрока.Адрес + ">", "");
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление);
		КонецЦикла;
	//КонецЕсли;
	
	// Если ПолучателиКопий.Количество() > 0 Тогда
		Объект.ПолучателиКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиКопий Цикл
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
			НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, "<" + НоваяСтрока.Адрес + ">", "");
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление);
		КонецЦикла;
	//КонецЕсли;
	
	// Если ПолучателиСкрытыхКопий.Количество() > 0 Тогда
		Объект.ПолучателиСкрытыхКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиСкрытыхКопий Цикл
			НоваяСтрока = Объект.ПолучателиСкрытыхКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
			НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, "<" + НоваяСтрока.Адрес + ">", "");
			НоваяСтрока.Представление = СокрЛП(НоваяСтрока.Представление);
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИ(Контакт, Адрес)
	
	ДополнительныеПараметры = Новый Структура("Контакт, Адрес", Контакт, Адрес);
	АдресСуществует = EMailКонтактаСуществует(Контакт, Адрес);
	Если АдресСуществует = Неопределено ИЛИ АдресСуществует = Истина Тогда
		ЗадатьВопросОСохраненииКИЗавершение(Неопределено, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ШаблонВопроса = НСтр("ru = 'Сохранить в карточке контакта email: %1?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, Адрес);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьВопросОСохраненииКИЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСохраненииКИЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ДобавитьEMailКонтакту(ДополнительныеПараметры.Контакт, ДополнительныеПараметры.Адрес) Тогда
			Сообщение =
				НСтр("ru='Для автоматического связывания писем с данным контактом укажите текущий email в его карточке'");
		Иначе
			Записать();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция EMailКонтактаСуществует(Контакт, EMail)
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСуществует = Ложь;
	
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			Продолжить;
		ИначеЕсли СтрокаКИ.Представление = EMail Тогда	
			АдресСуществует = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АдресСуществует;
	
КонецФункции

&НаСервере
// Функция добавляет адрес электронной почты выбранному контакту.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//	EMail	- Строка			- Адрес электронной почты.
//
// Возвращаемое значение:
//	Булево	- Результат добавления.
//
Функция ДобавитьEMailКонтакту(Контакт, EMail)
	
	АдресСуществует = EMailКонтактаСуществует(Контакт, EMail);
	
	Если АдресСуществует = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли АдресСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	НоваяСтрока.Представление	= EMail;
	НоваяСтрока.АдресЭП			= EMail;
	Поз = СтрНайти(EMail, "@");
	Если Поз > 0 Тогда
		НоваяСтрока.ДоменноеИмяСервера = Сред(EMail, Поз + 1);
	КонецЕсли;
	
	НоваяСтрока.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(EMail,
		 НоваяСтрока.Вид, "");
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(НоваяСтрока.Значение,
		 НоваяСтрока.Представление,
		 НоваяСтрока.Вид);
	
	АдресЗаписан = Истина;
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;	
	Возврат АдресЗаписан;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбработанноеПредставлениеАдресата(ПредставлениеАдресата)

	ПредставлениеАдресата = СтрЗаменить(ПредставлениеАдресата, ",", "");
	ПредставлениеАдресата = СтрЗаменить(ПредставлениеАдресата, ";", "");
	
	Возврат ПредставлениеАдресата;

КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьИменаПолучателей(ФормаИмяТаблицы, УчетнаяЗаписьЭП, МассивСтруктур, ФормаСоответствия)
	
	МассивСтруктурИтог = Новый Массив;
	
	ТабПолучателей = ФормаИмяТаблицы.Выгрузить();
	
	ФормаИмяТаблицы.Очистить();
	Для Каждого Стр Из МассивСтруктур Цикл
		новСтр = ФормаИмяТаблицы.Добавить();
		СтрокаТаблицы = ТабПолучателей.Найти(Стр.АдресЭП, "Адрес");
		Если Не СтрокаТаблицы = Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы.Контакт, "Владелец")
			И СокрЛП(Строка(СтрокаТаблицы.Контакт.Владелец)) = Стр.ИмяПартнера Тогда
			
			ЗаполнитьЗначенияСвойств(новСтр, СтрокаТаблицы);
		Иначе
			новСтр.Адрес = Стр.АдресЭП;
			новСтр.Представление = Стр.Представление;
			новСтр.Контакт = ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Стр.АдресЭП, Стр.Представление, ФормаСоответствия, Стр.ИмяПартнера);
		КонецЕсли;
		
		СтруктураПолучателя = Новый Структура("Адрес,Представление,Контакт");
		ЗаполнитьЗначенияСвойств(СтруктураПолучателя, новСтр);
		
		МассивСтруктурИтог.Добавить(СтруктураПолучателя);
		
	КонецЦикла;
	
	Возврат Новый Структура("Получатели, СоответствиеАдресов", МассивСтруктурИтог, ФормаСоответствия.ВыгрузитьЗначения()); 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Адрес, Знач Представление = Неопределено,
	 СоответствияАдресовИКонтактовР, ИмяПартнера)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактовР Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка КАК Ссылка,
	|	3 КАК Флаг,
	|	"""" КАК ПредставлениеПартнера
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И НЕ ОбъектСКонтактнойИнформацией.АдресЭП = &АдресУЗ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	2,
	|	""""
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	1,
	|	""""
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	0,
	|	ПРЕДСТАВЛЕНИЕ(ОбъектСКонтактнойИнформацией.Ссылка.Владелец)
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг";
	
	Запрос.УстановитьПараметр("АдресУЗ", УчетнаяЗаписьЭП.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Представление = Неопределено И Выборка.Следующий() Тогда
		Контакт = Выборка.Ссылка;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если СокрЛП(Строка(Выборка.Ссылка)) = Представление
				И СокрЛП(Выборка.ПредставлениеПартнера) = ИмяПартнера Тогда
				
				Контакт = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоответствияАдресовИКонтактовР.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПолучателей(ИмяТЧ)
	
	МассивПолучателей = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контакт) Тогда
			СтруктураПолучателя = Новый Структура("Адрес, Контакт"
												  , СтрокаТЧ.Адрес, СтрокаТЧ.Контакт);
			МассивПолучателей.Добавить(СтруктураПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

#КонецОбласти

#Область РаботаСШаблонами

&НаСервере
Процедура ЗаполнитьПоШаблону(ТекстВПолеHTML, ЗаменитьТекстИВложения)
	
	ТемаШаблона = Шаблон.Тема;
	Если ЗначениеЗаполнено(ТемаШаблона) Тогда
		ЗаполнитьАвтотекст(ТемаШаблона);
		Объект.Тема = ТемаШаблона;
	КонецЕсли;
	
	ТекстПисьмаHTML = CRM_Взаимодействия.ВставитьТекстВТекстПисьмаHTML(
		ТекстВПолеHTML, Шаблон.Текст, Шаблон, ЗаменитьТекстИВложения, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
	
	Если ЗаменитьТекстИВложения Тогда
		
		ТекстПисьмаHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстПисьмаHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
		
		Для Каждого ТекущееВложение Из Вложения Цикл
			Если ТекущееВложение.Расположение = 0 И Не ЗначениеЗаполнено(ТекущееВложение.ИДФайлаЭлектронногоПисьма) Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Вложения.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьАвтотекст(ТекстПисьмаHTML);
	
	// Заполнение вложений по шаблону.
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Шаблон, Истина);
	
	Для Каждого Стр Из табВложения Цикл
		Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
			новСтр = Вложения.Добавить();
			новСтр.Ссылка								= Стр.Ссылка;
			Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
				новСтр.ИмяФайла							= СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
			Иначе
				новСтр.ИмяФайла							= Стр.ИмяФайла;
			КонецЕсли;
			новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
			новСтр.Размер								= Стр.Размер;
			РазмерВложения								= Цел(новСтр.Размер / 1024);
			новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.РазмерПредставление					= Стр.РазмерПредставление;
			новСтр.Расположение							= 1;
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
			новСтр.ИДФайлаЭлектронногоПисьма	= "#";
		КонецЕсли;
	КонецЦикла;
	
	CRM_РаботаСHTML.УстановитьУбратьСкриптВставки(ТекстПисьмаHTML);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ПереключитьРежимРаботыСВложениями()
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкиВложенийСлева");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатийКнопкиВложенийСлева");
	КонецЕсли;
	
	ОтображатьТаблицуВложений = Не ОтображатьТаблицуВложений;
	CRM_ОбщегоНазначенияСервер.ХранилищеОбщихНастроекСохранить("ЭлектронноеПисьмоИсходящее",
		"ОтображатьТаблицуВложений", ОтображатьТаблицуВложений);
	
	Элементы.ГруппаВложения.Видимость = ОтображатьТаблицуВложений;
	Элементы.ГруппаРаботаСВложениями.Видимость = Не ОтображатьТаблицуВложений;
	
	Если ОтображатьТаблицуВложений И Не Элементы.ГруппаНастройкиПраваяКолонка.Видимость Тогда
		CRM_ПоказатьСкрытьСвойстваНаСервере(ОтображатьТаблицуВложений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатийКнопкаДобавитьВложения");
	КонецЕсли;
	ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФайлИзБуфераОбменаВыполнить()
	
	Если НЕ CRM_ПрисоединенныеФайлы.БуферЗаполненФайлами() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Вставка из буфера обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
										НСтр("ru = 'Буфер обмена пуст'"));
		Возврат;	
	КонецЕсли;
	
	МассивСсылокНаФайлы = CRM_ПрисоединенныеФайлы.МассивСсылокИзБуфера();
	
	ДобавленоФайлов = 0;
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(СсылкаНаФайл,, ПараметрыДанныхФайла);
		
		
		НоваяСтрока = Вложения.Добавить();
		
		НоваяСтрока.Расположение = 4;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			НаименованиеФайла	= СтроковыеФункцииКлиент.СтрокаЛатиницей(ДанныеФайла.Наименование);
		Иначе
			НаименованиеФайла	= ДанныеФайла.Наименование;
		КонецЕсли;
		НоваяСтрока.ИмяФайла	= НаименованиеФайла + "." + ДанныеФайла.Расширение;
		НоваяСтрока.Размер 		= ДанныеФайла.Размер;
		
		НоваяСтрока.ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ДанныеФайла.Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(ДанныеФайла.Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
	ПроверитьОбъемВложенийНаПревышение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложениеВыполнить(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Объект.Ссылка.Пустая() Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.СозданиеЭлектронногоПисьма.Удобство.КоличествоНажатйиКнопкаОткрытьВложения");
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.Удобство.КоличествоНажатйиКнопкаОткрытьВложения");
	КонецЕсли;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВложенияОчищеныПоНастройке Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыПисьмаВложения(), ЭтотОбъект);
			
		Иначе
			
			ДляРедактирования =
				Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик");
			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка,
			                                                  ЭтотОбъект,
			                                                  ДляРедактирования);
			
			Если ДляРедактирования Тогда
				ТекущиеДанные.Редактируется = Истина;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
			
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			Попытка
				
				Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				
				ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор), 
				                                           ПараметрыПисьмаВложения(),
				                                           ЭтотОбъект);
				
			Исключение
				ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
			КонецПопытки;
		Иначе
			ФайловаяСистемаКлиент.ОткрытьФайл(ПутьКФайлу);
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьФайл(ТекущиеДанные.ИмяФайлаНаКомпьютере, , ТекущиеДанные.ИмяФайла);
		
	ИначеЕсли ТекущиеДанные.Расположение = 5 Тогда
		
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
			 Объект.ДатаОтправления ,
			 Объект.Дата);
		ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
		
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо,
		                                           ПараметрыПисьмаВложения(),
		                                           ЭтотОбъект);
	ИначеЕсли ТекущиеДанные.Расположение = 6 Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(
			ТекущиеДанные.СсылкаКопирования, ЭтотОбъект, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленоФайлов = 0;
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(ВыбранныйФайл.Хранение);
		Размер = ДанныеФайла.Размер();
		Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранныйФайл.ИмяФайла);
		
		РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(ВыбранныйФайл.ИмяФайла,
			 Размер,
			 Расширение);
		Если РезультатПроверки.Ошибка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Вложения.Добавить();
		
		#Если ВебКлиент Тогда
			НоваяСтрока.Расположение = 4;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		#Иначе
			НоваяСтрока.Расположение = 2;
			НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл.ПолноеИмя;
		#КонецЕсли
		
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			НоваяСтрока.ИмяФайла = СтроковыеФункцииКлиент.СтрокаЛатиницей(ВыбранныйФайл.ИмяФайла);
		Иначе
			НоваяСтрока.ИмяФайла = ВыбранныйФайл.ИмяФайла;
		КонецЕсли;
		НоваяСтрока.Размер = Размер;
		
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
		НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
		
		Если ПериодАвтосохраненияЧерновиков > 0 Тогда
			ОписаниеДанных = 
				"ИДФайлаЭлектронногоПисьма:" + НоваяСтрока.ИДФайлаЭлектронногоПисьма
				+ "@ИмяФайла:" + НоваяСтрока.ИмяФайла
				+ "@ИмяФайлаНаКомпьютере:" + НоваяСтрока.ИмяФайлаНаКомпьютере
				+ "@Размер:" + НоваяСтрока.Размер;
			ХешСумма = CRM_ОбщегоНазначенияКлиент.ВычислитьХешСтрокиПоАлгоритмуMD5(ОписаниеДанных);
			НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
			НовыйЭлемент.ВидДанных = "Вложение";
			НовыйЭлемент.ХешСумма = ХешСумма;
			НовыйЭлемент.ОписаниеДанных = ОписаниеДанных;
			НовыйЭлемент.ИмяФайлаНаКомпьютере = НоваяСтрока.ИмяФайлаНаКомпьютере;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
		ОбновитьОтображениеДанных();
		СформироватьСсылкиВложений();
	КонецЕсли;
	
	ПроверитьОбъемВложенийНаПревышение();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВложениеВыполнить(ТекущиеДанные);
	
КонецПроцедуры

 &НаКлиенте
Процедура УдалитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ВыделенныеСтроки = Элементы.Вложения.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УдаляемыеВложения = ОбщегоНазначенияСлужебныйКлиент.СкопироватьМассив(ВыделенныеСтроки, Ложь);
	
		Для Каждого Строка Из УдаляемыеВложения Цикл
			
			ТекущееВложение = Вложения.НайтиПоИдентификатору(Строка);
			
			Если ТекущееВложение.Расположение = 0 Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
			
			Если ПериодАвтосохраненияЧерновиков > 0 Тогда
				УдалитьВложениеИзДанныхАвтосохранения(ТекущееВложение);
			КонецЕсли;
			
			Индекс = Вложения.Индекс(ТекущееВложение);
			Вложения.Удалить(Индекс);
			
		КонецЦикла;
		
	Иначе
		
		Если ТекущиеДанные.Расположение = 0 Тогда
			УдаленныеВложения.Добавить(ТекущиеДанные.Ссылка);
		КонецЕсли;
		
		Если ПериодАвтосохраненияЧерновиков > 0 Тогда
			УдалитьВложениеИзДанныхАвтосохранения(ТекущиеДанные);
		КонецЕсли;
		
		Индекс = Вложения.Индекс(ТекущиеДанные);
		Вложения.Удалить(Индекс);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.ВыбранныйФайл;
	Размер = Файл.Размер();
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Файл.Имя);
	
	РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(Файл.Имя, Размер, Расширение);
	Если РезультатПроверки.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Файл.ПолноеИмя;
	
	Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
		НоваяСтрока.ИмяФайла = СтроковыеФункцииКлиент.СтрокаЛатиницей(Файл.Имя);
	Иначе
		НоваяСтрока.ИмяФайла = Файл.Имя;
	КонецЕсли;
	НоваяСтрока.Размер = Размер;
	
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
	НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
	
	НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
	НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	ПроверитьОбъемВложенийНаПревышение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", НЕ ФайлДоступенДляРедактирования);
	РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.Ссылка,, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(ТекущиеДанные = Неопределено)
	
Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВложенияОчищеныПоНастройке Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(ТекущиеДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, ТекущиеДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);
	ИначеЕсли (ТекущиеДанные.Расположение = 5) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьПисьмоНаДиск(ТекущиеДанные.Письмо, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 6 Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.СсылкаКопирования, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьВложениеВыполнить(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСсылкиВложений()
	
	ГруппаСсылокВложений = Элементы.ГруппаСсылкиВложений;
	
	МаксимальнаяДлинаИмениВложения = 35;
	МаксимальнаяДлинаСтроки = 105;
	
	МассивЭкранов = ПолучитьИнформациюЭкрановКлиента();
	// Защита от Толстого клиента - в нем ПолучитьИнформациюЭкрановКлиента() возвращает Неопределено и падает ошибка
	Если МассивЭкранов <> Неопределено Тогда
		ШиринаЭкрана = ПолучитьИнформациюЭкрановКлиента()[0].Ширина;
	Иначе
		ШиринаЭкрана = 1440;
	КонецЕсли;
	МаксимальнаяДлинаСтроки = МаксимальнаяДлинаСтроки * (ШиринаЭкрана / 1920);
	
	// Удаление предыдущих элементов
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из ГруппаСсылокВложений.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если СтрЧислоВхождений(КомандаФормы.Имя, "Команда_Сохранить_СсылкаВложения_") > 0
			ИЛИ СтрЧислоВхождений(КомандаФормы.Имя, "Команда_Удалить_СсылкаВложения_") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КомандаФормы Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(КомандаФормы);
	КонецЦикла;
		
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		
		ПредставлениеСсылки = "";
		Если Не ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
		ИначеЕсли ВсеВложенияПометка Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчет длины текущей строки
		Если СтрДлина(ПредставлениеСсылки) > МаксимальнаяДлинаИмениВложения Тогда
			ПредставлениеСсылки = Лев(ПредставлениеСсылки, МаксимальнаяДлинаИмениВложения) + "...";
		КонецЕсли;
		ШиринаЭлемента = СтрДлина(ПредставлениеСсылки);
		Если ШиринаЭлемента > 8 Тогда 
			ШиринаЭлемента = ШиринаЭлемента * 0.8;
		КонецЕсли;
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ШиринаЭлемента;
		
		// Создание следующей горизонтальной группы
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеСсылки) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаСтрокаВложений = Элементы.Добавить("СтрокаВложений" + НомерСтрокиЭлементов,
				 Тип("ГруппаФормы"), ГруппаСсылокВложений);
			ГруппаСтрокаВложений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрокаВложений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСтрокаВложений.ОтображатьЗаголовок = Ложь;
			ГруппаСтрокаВложений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрокаВложений.РастягиватьПоВертикали = Ложь;
			ГруппаСтрокаВложений.Высота = 1;
			ГруппаСтрокаВложений.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			ГруппаСтрокаВложений.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		ИдентификаторСсылкиВложения = ЭлементТаблицы.ПолучитьИдентификатор();
		
		// Вывод иконки типа вложения
		ДекорацияИконкаВложения = Элементы.Добавить("ИконкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияИконкаВложения.Вид = ВидДекорацииФормы.Картинка;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.ИмяФайла);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		//ДекорацияИконкаВложения.Картинка = БиблиотекаКартинок["CRM_ИконкаТипаФайла_"+ИндексКартинки];
		ДекорацияИконкаВложения.Картинка = СписокИконокФайлов[ИндексКартинки / 2].Значение;
		
		// Создание элемента-вложения
		ДекорацияСсылкаВложения = Элементы.Добавить("СсылкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияСсылкаВложения.Заголовок = ПредставлениеСсылки;
		ДекорацияСсылкаВложения.Гиперссылка = Не ВложенияОчищеныПоНастройке;
		ДекорацияСсылкаВложения.ЦветТекста = ?(ВложенияОчищеныПоНастройке,
			 ЦветаСтиля.CRM_ЦветДополнительногоТекста,
			 ЦветаСтиля.CRM_ОсновнойГолубой);
		
		ДекорацияСсылкаВложения.УстановитьДействие("Нажатие", "ДекорацияСсылкаВложенияНажатие");
		
		// Формирование контекстного меню декорации:
		// Сохранить:
		ИмяЭлементаКнопки = "Сохранить_" + ДекорацияСсылкаВложения.Имя;
		КнопкаСохранитьВложение = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаСохранитьВложение = Неопределено Тогда
			
			КнопкаСохранитьВложение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
				 ДекорацияСсылкаВложения.КонтекстноеМеню);
			
			ИмяКоманды = "Команда_" + ИмяЭлементаКнопки;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='Сохранить';en='Save'");
			Команда.Подсказка = НСтр("ru='Сохранить';en='Save'");
			Команда.Картинка = БиблиотекаКартинок.CRM_СохранитьКак;
			Команда.Действие = "Подключаемый_СохранитьВложениеКонтекстноеМеню";
			Команда.ИзменяетСохраняемыеДанные = Ложь;
			
			КнопкаСохранитьВложение.ИмяКоманды = Команда.Имя;
			
		КонецЕсли;
		КнопкаСохранитьВложение.Видимость = Истина;
		
		НомерЭлемента = НомерЭлемента + 1;
		
		// Удалить:
		ИмяЭлементаКнопки = "Удалить_" + ДекорацияСсылкаВложения.Имя;
		КнопкаУдалитьВложение = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаУдалитьВложение = Неопределено Тогда
			
			КнопкаУдалитьВложение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
				 ДекорацияСсылкаВложения.КонтекстноеМеню);
			
			ИмяКоманды = "Команда_" + ИмяЭлементаКнопки;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='Удалить';en='Remove'");
			Команда.Подсказка = НСтр("ru='Удалить';en='Remove'");
			Команда.Картинка = БиблиотекаКартинок.CRM_УдалитьСерая;
			Команда.Действие = "Подключаемый_УдалитьВложениеКонтекстноеМеню";
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
			КнопкаУдалитьВложение.ИмяКоманды = Команда.Имя;
			
		КонецЕсли;
		КнопкаУдалитьВложение.Видимость = Истина;
		Если ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
			Если ЭтоПисьмоРассылки Тогда
				КнопкаУдалитьВложение.Доступность = Объект.CRM_РассылкаИзменена;
			Иначе
				КнопкаУдалитьВложение.Доступность =
					(Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
			КонецЕсли;
		Иначе
			КнопкаУдалитьВложение.Доступность = Ложь; // данной командой невозможно удалить изображения из текста письма
		КонецЕсли;
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если ГруппаСсылокВложений.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Элементы.СохранитьВсеВложения.Видимость = Ложь;
		Элементы.УдалитьВсеВложения.Видимость = Ложь;
	Иначе
		Элементы.СохранитьВсеВложения.Видимость = Истина;
		Элементы.УдалитьВсеВложения.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаВложенияНажатие(Элемент)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Элемент.Имя, "СсылкаВложения_", "");
	ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выполняется сохранение файла ""%1"" ...
		         |Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое, ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru='Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПисьмаВложения()

	ТаблицаПисемВложений = Взаимодействия.ДанныеХранимыхВБазеПисемВложений(Объект.Ссылка);
	
	Для Каждого ПисьмоВложение Из ТаблицаПисемВложений Цикл
			
		ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоВложение.Тема, ПисьмоВложение.Дата);
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Письмо               = ПисьмоВложение.Письмо;
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			НоваяСтрока.ИмяФайла         = СтроковыеФункции.СтрокаЛатиницей(ПредставлениеПисьма) + ".eml";
		Иначе
			НоваяСтрока.ИмяФайла         = ПредставлениеПисьма + ".eml";
		КонецЕсли;
		НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла("eml");
		НоваяСтрока.ИмяФайлаНаКомпьютере = "";
		НоваяСтрока.ПодписанЭП           = Ложь;
		НоваяСтрока.Размер               = ПисьмоВложение.Размер;
		НоваяСтрока.РазмерПредставление  =
			CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
		НоваяСтрока.Расположение         = 5;
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияПисьма(Письма)
	
	Для Каждого Письмо Из Письма Цикл
	
		Если Вложения.НайтиСтроки(Новый Структура("Письмо", Письмо)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизиты = "Размер, Тема";
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			СтрокаРеквизиты =  СтрокаРеквизиты + ", ДатаПолучения";
		ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			СтрокаРеквизиты =  СтрокаРеквизиты + ", Дата, ДатаОтправления";
		Иначе
			Возврат;
		КонецЕсли;
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, СтрокаРеквизиты);
		
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ДатаПисьма = РеквизитыПисьма.ДатаПолучения;
		Иначе
			ДатаПисьма = ?(ЗначениеЗаполнено(РеквизитыПисьма.ДатаОтправления),
			РеквизитыПисьма.ДатаОтправления,
			РеквизитыПисьма.Дата);
		КонецЕсли;
		
		ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(РеквизитыПисьма.Тема, ДатаПисьма);
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Письмо               = Письмо;
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			НоваяСтрока.ИмяФайла         = СтроковыеФункции.СтрокаЛатиницей(ПредставлениеПисьма);
		Иначе
			НоваяСтрока.ИмяФайла         = ПредставлениеПисьма;
		КонецЕсли;
		НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла("eml");
		НоваяСтрока.ИмяФайлаНаКомпьютере = "";
		НоваяСтрока.ПодписанЭП           = Ложь;
		НоваяСтрока.Размер               = РеквизитыПисьма.Размер;
		НоваяСтрока.РазмерПредставление  =
			CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
		НоваяСтрока.Расположение         = 5;
		НоваяСтрока.ИДФайлаЭлектронногоПисьма		= "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложения()
	
	ВыделенныеВложения = Новый Массив;
	
	ТекстВопроса = Нстр("ru='Удалить все вложения?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьВложенияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложенияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекВложение Из Вложения Цикл
		Если ТекВложение.Расположение = 0 Тогда
			УдаленныеВложения.Добавить(ТекВложение.Ссылка);
		КонецЕсли;
		
		Если ПериодАвтосохраненияЧерновиков > 0 Тогда
			УдалитьВложениеИзДанныхАвтосохранения(ТекВложение);
		КонецЕсли;
		
	КонецЦикла;			
	Вложения.Очистить();
	
	Модифицированность = Истина;
	
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПисьмаВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления),
		 Объект.ДатаОтправления ,
		 Объект.Дата);
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
	
	Возврат ПараметрыВложения;
	
КонецФункции

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ВызватьИсключение Результат.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПриЗакрытии(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписаноУспешно = Записать();
		Если ЗаписаноУспешно Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет 
		И ДополнительныеПараметры.МассивРедактируемыхФайлов.Количество() > 0 Тогда
		
		Если ПериодАвтосохраненияЧерновиков > 0 Тогда
			УдалитьДанныеАвтосохранения(Объект.Ссылка, ТекущийПользователь);
		КонецЕсли;
		
		РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайлы(ДополнительныеПараметры.МассивРедактируемыхФайлов);
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения()
	ВыделенныеВложения = Новый Массив;
	КоличествоВложений = Вложения.Количество();
	ТолькоВыделенные = Ложь;
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	
	Если Не ВсеВложенияПометка Тогда
		ТолькоВыделенные = Истина;
		Для Каждого Вложение Из Вложения Цикл 
			Если Вложение.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				Индекс = Вложения.Индекс(Вложение);
				ВыделенныеВложения.Добавить(Индекс);
			КонецЕсли;;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение.Ссылка,
						 УникальныйИдентификатор);
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда
				Если ТекущийНомерВложения = ДополнительныеПараметры.КоличествоВложений - 1 Тогда
					
					// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
					СписокИменФайлов = Новый СписокЗначений;
					Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
						ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
						Если ЭлементСписка = Неопределено Тогда
							СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
						Иначе
							Файл = Новый Файл(ПолучаемыйФайл.Имя);
							ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
							ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
						КонецЕсли;
					КонецЦикла;
					// Выполняем сохранение файлов.
					Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ДополнительныеПараметры.ВыборКаталога.Каталог, Ложь);
				Иначе
					ДополнительныеПараметры.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
					СохранитьВложенияПослеВыбораКаталога(ДополнительныеПараметры.ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если Не ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение.Письмо,
						 УникальныйИдентификатор);
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
			ИначеЕсли ТекущееВложение.Расположение = 5 Тогда
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);
				ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение.Письмо,
					 УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
				ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
			ИначеЕсли ТекущееВложение.Расположение = 6 Тогда
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.СсылкаКопирования, УникальныйИдентификатор);
				РасширениеВложения	= ВРег(СокрЛП(ДанныеФайла.Расширение));
				ПолноеИмяФайла		= КаталогСохранения + ТекущееВложение.ИмяФайла;
				ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
			КонецЕсли;
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
			Если РасширениеВложения = "EML" Тогда
				ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение.Ссылка,
					 УникальныйИдентификатор);
				ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
		КонецЕсли;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если Не ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
				Если РасширениеВложения = ".EML" Тогда
					ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение.Письмо,
						 УникальныйИдентификатор);
					ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
				Иначе
					ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);
				КонецЕсли;
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);						
				Возврат;
			ИначеЕсли ТекущееВложение.Расположение = 5 Тогда
				ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение.Письмо,
					 УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы", ВыбранныеФайлы);
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);						
				Возврат;
			ИначеЕсли ТекущееВложение.Расположение = 6 Тогда
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.СсылкаКопирования, УникальныйИдентификатор);
				РасширениеВложения	= ВРег(СокрЛП(ДанныеФайла.Расширение));
				ПолноеИмяФайла		= КаталогСохранения + ТекущееВложение.ИмяФайла;
				
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",	ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",		ДанныеФайла);
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",	ВыбранныеФайлы);
				
				Оповещение = Новый ОписаниеОповещения(
					"ФайлПроверитьПослеИнициализации",
					ЭтотОбъект,
					ДополнительныеПараметры);
				
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
				Возврат;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		Если РасширениеВложения = "EML" Тогда
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение.Ссылка,
				 УникальныйИдентификатор);
			ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Сохраняется файл ""%1"" (%2 Мб)"
"Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку), 1, НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ШаблонТекстаВопроса	= НСтр("ru='Файл %1 уже существует.%2Выберите действие для всех существующих файлов:'");
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса,
		 ПараметрыВложения.ПолноеИмяФайла,
		 Символы.ПС);
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьФайлыИзИнтересовНаСервере(ДобавляемыеСсылкиФайлов)
	
	Для Каждого ВыбранныйФайлСсылка Из ДобавляемыеСсылкиФайлов Цикл
		РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(
			ВыбранныйФайлСсылка.Размер);
		
		НоваяСтрока = Вложения.Добавить();
		
		НоваяСтрока.Размер				= ВыбранныйФайлСсылка.Размер;
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			НоваяСтрока.ИмяФайла		= СтроковыеФункции.СтрокаЛатиницей(ВыбранныйФайлСсылка.Наименование);
		Иначе
			НоваяСтрока.ИмяФайла		= ВыбранныйФайлСсылка.Наименование;
		КонецЕсли;
		НоваяСтрока.ИндексКартинки		= ВыбранныйФайлСсылка.ИндексКартинки;
		НоваяСтрока.СсылкаКопирования	= ВыбранныйФайлСсылка;
		НоваяСтрока.РазмерПредставление	= РазмерПредставление;
		
		НоваяСтрока.ИДФайлаЭлектронногоПисьма		= "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
		
		// Файл уже есть в одном из справочников.
		НоваяСтрока.Расположение = 6;
	КонецЦикла;
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры // CRM_ДобавитьФайлыИзИнтересовНаСервере()

#КонецОбласти

#Область ПодключаемыеКоманды

&НаСервере
// BSLLS:ServerSideExportFormMethod-off
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт // АПК:78 - исключить из проверки.
// BSLLS:ServerSideExportFormMethod-on
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область Автотекст

&НаСервере
Процедура ЗаполнитьАвтотекст(ТекстСТегами)
	
	// заполним автотекст
	СтруктураЗаполненияАвтотекста = Новый Структура;
	Для каждого Реквизит Из Метаданные.Документы.ЭлектронноеПисьмоИсходящее.Реквизиты Цикл
		СтруктураЗаполненияАвтотекста.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполненияАвтотекста, Объект);
	СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	СтруктураЗаполненияАвтотекста.Вставить("ПартнерСтрокой", "");
	
	Если ПолучателиПисьма.Количество() > 0 Тогда
		
		Клиент = ПолучателиПисьма[0].Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если ЗначениеЗаполнено(Клиент.ФизическоеЛицо) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Клиент.ФизическоеЛицо;
				Иначе					
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда

				Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
				
			Иначе
				
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Адрес));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста,
		 ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")));
	
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если СтрНайти(ТекстСТегами, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
			ТекстСТегами = СтрЗаменить(ТекстСТегами, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Шаблон) И Шаблон = Справочники.CRM_ШаблоныРассылки.ШаблонОценкиОбращения Тогда
		Если Элементы.Найти("CRM_ТаблицаИнтересов") = Неопределено
			 Или ЭтотОбъект["CRM_ТаблицаИнтересов"].Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектДействия = ЭтотОбъект["CRM_ТаблицаИнтересов"][0].Ссылка;
		
		Если СтрНайти(ТекстСТегами, "%АДРЕС_ОБРАТНОЙ_СВЯЗИ%") > 0 Тогда
			СсылкаДляОбратнойСвязи = CRM_РаботаСОбращениями.АдресСтраницыОбратнойСвязи();
			СсылкаДляОбратнойСвязи = СсылкаДляОбратнойСвязи + ?(Прав(СсылкаДляОбратнойСвязи, 1) = "/", "get", "/get");
			ТекстСТегами = СтрЗаменить(ТекстСТегами, "%АДРЕС_ОБРАТНОЙ_СВЯЗИ%", СсылкаДляОбратнойСвязи);
		КонецЕсли;
		
		Если СтрНайти(ТекстСТегами, "%КЛЮЧ_ОБРАТНОЙ_СВЯЗИ%") > 0 Тогда
			КлючДляОбратнойСвязи = CRM_РаботаСОбращениями.КлючОбратнойСвязиПоОбращению(ОбъектДействия.Ссылка);
			ТекстСТегами = СтрЗаменить(ТекстСТегами, "%КЛЮЧ_ОБРАТНОЙ_СВЯЗИ%", КлючДляОбратнойСвязи);
		КонецЕсли;
		
		ТемаОбращения		= "";
		НомерДатаОбращения	= "";
		
		Если ТипЗнч(ОбъектДействия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ТемаОбращения		= СокрЛП(ОбъектДействия.Тема);
			НомерДатаОбращения	= "№" + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ОбъектДействия.Номер) 
				+ " от " + Формат(ОбъектДействия.Дата,
				 "ДЛФ=D");
		КонецЕсли;
		
		ТекстСТегами = СтрЗаменить(ТекстСТегами, "%ТемаОбращения%", ТемаОбращения);
		ТекстСТегами = СтрЗаменить(ТекстСТегами, "%НомерДатаОбращения%", НомерДатаОбращения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	 НавигационнаяСсылка = Неопределено,
	 СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БазаЗнаний

&НаКлиенте
Процедура ПослеЗакрытияБазыЗнаний(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекстВПолеHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		ТекстHTML = ОбработатьВставкуИзБазыЗнаний(ТекстВПолеHTML, Результат.Решение, Результат.НомерОтвета);
		Если Вложения.Количество() > 0 Тогда
			ОбновитьОтображениеДанных();
			СформироватьСсылкиВложений();
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстHTML) Тогда
			CRM_ПоляВводаКлиент.ВставитьТекстПоКурсору(ЭтотОбъект, Элементы.ТекстПисьмаHTML, "ТекстПисьмаHTML", ТекстHTML);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ОбработатьВставкуИзБазыЗнаний(ТекстВПолеHTML, Решение, НомерОтвета)
	
	ТекстHTML = "";
	табВложения = Новый ТаблицаЗначений;
	СписокИдВложений = Новый СписокЗначений;
	
	табВложения = ПолучитьВложенияРешения(Решение);
	
	Если НомерОтвета = Неопределено Тогда
		
		ТекстHTML = Решение.ТекстВопросаHTML;
		
	ИначеЕсли НомерОтвета = "Все" Тогда
		
		Для Каждого ДанныеОтвета Из Решение.Ответы Цикл
			
			Если ДанныеОтвета.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело
				Или ДанныеОтвета.СтатусОтвета = Перечисления.CRM_СтатусыРешений.НаРассмотрении Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРешений = РешенияБазыЗнаний.Добавить();
			СтрокаРешений.Использовать		= Истина;
			СтрокаРешений.Решение			= Решение;
			СтрокаРешений.ИДСтроки			= ДанныеОтвета.ИДСтроки;
			СтрокаРешений.Пользователь		= ТекущийПользователь;
			СтрокаРешений.ВыбранныйОтвет	= ДанныеОтвета.НаименованиеОтвета;
			
			ТекстHTML = бзВставитьРешение(ТекстHTML, ДанныеОтвета.ВариантОтветаHTML, Решение);
			
			СписокИдВложений.Добавить(ДанныеОтвета.ИДСтроки);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеОтвета = Решение.Ответы[НомерОтвета - 1];
		
		Если ДанныеОтвета.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда
			Возврат ТекстHTML;
		КонецЕсли;
		
		СтрокаРешений = РешенияБазыЗнаний.Добавить();
		СтрокаРешений.Использовать		= Истина;
		СтрокаРешений.Решение			= Решение;
		СтрокаРешений.ИДСтроки			= ДанныеОтвета.ИДСтроки;
		СтрокаРешений.Пользователь		= ТекущийПользователь;
		СтрокаРешений.ВыбранныйОтвет	= ДанныеОтвета.НаименованиеОтвета;
		
		ТекстHTML = бзВставитьРешение(ТекстHTML, ДанныеОтвета.ВариантОтветаHTML, Решение);
		
		СписокИдВложений.Добавить(ДанныеОтвета.ИДСтроки);
		
	КонецЕсли;
	
	Для Каждого СтрокаВложения Из СписокИдВложений Цикл
		табВложенияРешения = ПолучитьВложения(Решение, СтрокаВложения.Значение);
		
		Если табВложенияРешения.Количество() > 0 Тогда
		
			Если табВложения.Количество() = 0 Тогда
				табВложения = табВложенияРешения.Скопировать();
			Иначе
				Для Каждого СтрокаТаблицыВложений Из ТабВложенияРешения Цикл
					ЗаполнитьЗначенияСвойств(ТабВложения.Добавить(), СтрокаТаблицыВложений);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТабВложения Цикл
		Если Вложения.НайтиСтроки(Новый Структура("Ссылка", Стр.Ссылка)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		новСтр = Вложения.Добавить();
		новСтр.Ссылка								= Стр.Ссылка;
		Если ТранслитерироватьИменаФайловПриДобавленииВложений Тогда
			новСтр.ИмяФайла							= СтроковыеФункции.СтрокаЛатиницей(Стр.ИмяФайла);
		Иначе
			новСтр.ИмяФайла							= Стр.ИмяФайла;
		КонецЕсли;
		новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		новСтр.Размер								= Стр.Размер;
		РазмерВложения								= Цел(новСтр.Размер / 1024);
		новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
		новСтр.РазмерПредставление					=
			CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Стр.Размер);
		новСтр.Расположение							= 1;
		новСтр.ИДФайлаЭлектронногоПисьмаОтбор		= "#";
		новСтр.ИДФайлаЭлектронногоПисьма			= "#";
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Возврат ТекстHTML;
	
КонецФункции

&НаСервере
Процедура бзЗаполнитьИспользуемыеРешения()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Использовать,
	|	CRM_ИспользуемыеРешения.Решение.Ссылка КАК Решение,
	|	CRM_ИспользуемыеРешения.ВыбранныйОтвет КАК ИДСтроки,
	|	CRM_ИспользуемыеРешения.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА CRM_ИспользуемыеРешения.ВыбранныйОтвет = """"
	|			ТОГДА """"
	|		ИНАЧЕ CRM_РешенияОтветы.НаименованиеОтвета
	|	КОНЕЦ КАК ВыбранныйОтвет
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Решения.Ответы КАК CRM_РешенияОтветы
	|		ПО CRM_ИспользуемыеРешения.Решение = CRM_РешенияОтветы.Ссылка
	|			И CRM_ИспользуемыеРешения.ВыбранныйОтвет = CRM_РешенияОтветы.ИДСтроки
	|ГДЕ
	|	CRM_ИспользуемыеРешения.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ИспользуемыеРешения.Решение.Наименование";
	
	РешенияБазыЗнаний.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура бзСохранитьИспользуемыеРешения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.CRM_ИспользоватьБазуЗнаний.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	
	ТаблицаРешений = РешенияБазыЗнаний.Выгрузить(, "Использовать,Решение,ИДСтроки,Пользователь");
	ТаблицаРешений.Свернуть("Использовать,Решение,ИДСтроки,Пользователь");
	
	Для Каждого Строка Из ТаблицаРешений Цикл
		
		Если Не Строка.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.Объект			= Объект.Ссылка;
		НоваяЗапись.Решение			= Строка.Решение;
		НоваяЗапись.ВыбранныйОтвет	= Строка.ИДСтроки;
		НоваяЗапись.Пользователь	= Строка.Пользователь;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Функция бзВставитьРешение(ТекстВПолеHTML, ТекстОтвета, Решение)
	
	СтруктураТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстВПолеHTML);
	ТекстРешенияHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
	ТекстОтвета, Решение, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
	СтруктураРешенияHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстРешенияHTML);
	
	ТекстHTML = СтруктураТекстаHTML.Тело
	+ СтруктураРешенияHTML.Тело
	+ ?(СтруктураРешенияHTML.Количество() > 1, "<br/>", "");
	
	Возврат ТекстHTML;
	
КонецФункции

&НаСервереБезКонтекста
// Функция получает все вложения варианта ответа.
//
// Параметры:
//	Ссылка		- СправочникСсылка	- Владелец вложений.
//	НомерСтроки	- Число				- НомерСтроки
//  КлючСтроки  - Строка (по умолчанию нет)	- Ключ строки, для которой нужно получить вложения.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица вложений.
//
Функция ПолучитьВложения(Ссылка, ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ИДФайлаЭлектронногоПисьма",	ИДФайлаЭлектронногоПисьма);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИндексКартинки КАК ИндексКартинки,
	|	Файлы.Размер КАК Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.ИДФайлаЭлектронногоПисьма = &ИДФайлаЭлектронногоПисьма";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложения()

&НаСервереБезКонтекста
Функция ПолучитьВложенияРешения(Решение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Решение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИндексКартинки КАК ИндексКартинки,
	|	Файлы.Размер КАК Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.ИДФайлаЭлектронногоПисьма = """"";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложенияРешения()

#КонецОбласти

#Область МоделиМашинногоОбучения

&НаСервере
Функция Помощник_ПроверитьИспользование()
	
	НастройкиМоделей = CRM_МоделиМашинногоОбучения.ПолучитьНастройкиМоделей();
	Если Не CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделейЗаполнены(НастройкиМоделей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НастройкиМоделей.ИспользоватьПоискРешений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = CRM_МоделиМашинногоОбучения.ПроверитьСостояние("ПоискРешений", НастройкиМоделей);
	Если РезультатПроверки.Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Помощник_ДобавитьОтвет(Команда)
	
	ДанныеОтветов = ДанныеОтветовСтатьиБазыЗнаний(Помощник_ТекущаяПодсказка);
	ОповещениеЗавершения = Новый ОписаниеОповещения("Помощник_ДобавитьОтветЗавершение", ЭтотОбъект);
	
	Если ДанныеОтветов.Количество() = 2 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ДанныеОтветов[0]);
	ИначеЕсли ДанныеОтветов.Количество() > 2 Тогда
		ПоказатьВыборИзМеню(ОповещениеЗавершения, ДанныеОтветов, Элементы.Помощник_ДобавитьОтвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ДобавитьОтветЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Решение", Помощник_ТекущаяПодсказка);
	ПараметрыОповещения.Вставить("НомерОтвета", ВыбранныйЭлемент.Значение);
	Оповестить("ДобавитьТекстВопросаВТекстПисьма", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ЗаголовокНажатие(Элемент)
	
	СервисДоступен = CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть();
	
	Если СервисДоступен Тогда
		Элементы.Помощник_Подсказки.Показать();
		ТекущийЭлемент = Элементы.Помощник_ИконкаБольшая;
		
		Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаСовет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ВсеПодсказкиНажатие(Элемент)
	Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаПодсказки;
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Помощник_Данные.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Помощник_ДанныеОценкаПлюс Тогда
		
		Если ТекущиеДанные.Оценка = 1 Тогда
			ОбновитьОценкуПодсказки(ТекущиеДанные, 0);
		Иначе
			ОбновитьОценкуПодсказки(ТекущиеДанные, 1);
		КонецЕсли;
		
		Если Помощник_ТекущаяПодсказка = ТекущиеДанные.Ссылка Тогда
			ОбновитьОценкуСовета(ТекущиеДанные.Оценка);
		КонецЕсли;
		
		CRM_МоделиМашинногоОбучения.ЗаписатьОценку("ПоискРешений",
			Помощник_ТекстПоиска, ТекущиеДанные.Ссылка, ТекущиеДанные.Оценка);
		
	ИначеЕсли Поле = Элементы.Помощник_ДанныеОценкаМинус Тогда
		
		Если ТекущиеДанные.Оценка = -1 Тогда
			ОбновитьОценкуПодсказки(ТекущиеДанные, 0);
		Иначе
			ОбновитьОценкуПодсказки(ТекущиеДанные, -1);
		КонецЕсли;
		
		Если Помощник_ТекущаяПодсказка = ТекущиеДанные.Ссылка Тогда
			ОбновитьОценкуСовета(ТекущиеДанные.Оценка);
		КонецЕсли;
		
		CRM_МоделиМашинногоОбучения.ЗаписатьОценку("ПоискРешений",
			Помощник_ТекстПоиска, ТекущиеДанные.Ссылка, ТекущиеДанные.Оценка);
		
	Иначе
		
		Если Помощник_ТекущаяПодсказка <> ТекущиеДанные.Ссылка Тогда
			Помощник_ТекущаяПодсказка = ТекущиеДанные.Ссылка;
			Помощник_ТекущаяОценка = ТекущиеДанные.Оценка;
			ТекстСовета = НСтр("ru = 'Уверен на %1, что подойдет ответ из статьи базы знаний:'");
			Элементы.Помощник_ТекстСовета.Заголовок = СтрШаблон(ТекстСовета, Формат(ТекущиеДанные.Уверенность, "ЧФ=Ч%"));
			Элементы.Помощник_ОценкаПоложительная.Картинка = ТекущиеДанные.ОценкаПлюс;
			Элементы.Помощник_ОценкаОтрицательная.Картинка = ТекущиеДанные.ОценкаМинус;
		КонецЕсли;
		Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаСовет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ОценкаПоложительная(Команда)
	
	Если Помощник_ТекущаяОценка = 1 Тогда
		ОбновитьОценкуСовета(0);
	Иначе
		ОбновитьОценкуСовета(1);
	КонецЕсли;
	
	НайденныеСтроки = Помощник_Данные.НайтиСтроки(Новый Структура("Ссылка", Помощник_ТекущаяПодсказка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		ОбновитьОценкуПодсказки(НайденнаяСтрока, Помощник_ТекущаяОценка);
	КонецЕсли;
	
	CRM_МоделиМашинногоОбучения.ЗаписатьОценку("ПоискРешений",
		Помощник_ТекстПоиска, Помощник_ТекущаяПодсказка, Помощник_ТекущаяОценка);
	
	Элементы.Помощник_Подсказки.Скрыть();
	Элементы.Помощник_Подсказки.Показать();
	ТекущийЭлемент = Элементы.Помощник_ИконкаБольшая;
	
	Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаСовет;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ОценкаОтрицательная(Команда)
	
	Если Помощник_ТекущаяОценка = -1 Тогда
		ОбновитьОценкуСовета(0);
	Иначе
		ОбновитьОценкуСовета(-1);
	КонецЕсли;
	
	НайденныеСтроки = Помощник_Данные.НайтиСтроки(Новый Структура("Ссылка", Помощник_ТекущаяПодсказка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		ОбновитьОценкуПодсказки(НайденнаяСтрока, Помощник_ТекущаяОценка);
	КонецЕсли;
	
	CRM_МоделиМашинногоОбучения.ЗаписатьОценку("ПоискРешений",
		Помощник_ТекстПоиска, Помощник_ТекущаяПодсказка, Помощник_ТекущаяОценка);
	
	Элементы.Помощник_Подсказки.Скрыть();
	Элементы.Помощник_Подсказки.Показать();
	ТекущийЭлемент = Элементы.Помощник_ИконкаБольшая;
	
	Элементы.Помощник_Страницы.ТекущаяСтраница = Элементы.Помощник_ГруппаСовет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОценкуСовета(Оценка)
	
	Помощник_ТекущаяОценка = Оценка;
	Если Оценка = 1 Тогда
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусСерыйБольшая;
	ИначеЕсли Оценка = -1 Тогда
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсСерыйБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусБольшая;
	Иначе
		Элементы.Помощник_ОценкаПоложительная.Картинка = Помощник_ВспомогательныеДанные.КартинкаПлюсСерыйБольшая;
		Элементы.Помощник_ОценкаОтрицательная.Картинка = Помощник_ВспомогательныеДанные.КартинкаМинусСерыйБольшая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОценкуПодсказки(СтрокаПодсказки, Оценка)
	
	СтрокаПодсказки.Оценка = Оценка;
	Если Оценка = 1 Тогда
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюс;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	ИначеЕсли Оценка = -1 Тогда
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинус;
	Иначе
		СтрокаПодсказки.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		СтрокаПодсказки.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Помощник_ОбновитьСостояние()
	
	// Проверки и формирование текста запроса.
	Помощник_ТекстПоиска = "";
	Если Параметры.Свойство("Основание") Тогда
		Если ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("Основание")
			И ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПисьмоОснование = Параметры.Основание.Основание;
			Помощник_ТекстПоиска = CRM_МоделиМашинногоОбученияКлиентСервер.ОбработатьТекст(ПисьмоОснование.Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Помощник_ТекстПоиска) Тогда
		Элементы.ГруппаПомощник.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Запрос данных.
	РезультатыПоиска = CRM_МоделиМашинногоОбучения.ПоискРешений(Помощник_ТекстПоиска);
	
	КоличествоПодсказок = РезультатыПоиска.Количество();
	Если КоличествоПодсказок = 0 Тогда
		Элементы.ГруппаПомощник.Видимость = Ложь;
		Возврат;
	ИначеЕсли КоличествоПодсказок = 1 Тогда
		Элементы.Помощник_ГруппаВсеПодсказки.Видимость = Ложь;
		Элементы.Помощник_ГруппаПодсказки.Видимость = Ложь;
	Иначе
		ЗаголовокВсеПодсказки = НСтр("ru = 'Все подсказки (%1)'");
		Элементы.Помощник_ВсеПодсказки.Заголовок = СтрШаблон(ЗаголовокВсеПодсказки, КоличествоПодсказок);
	КонецЕсли;
	
	// Вспомогательные данные.
	Помощник_ВспомогательныеДанные = Новый Структура;
	Помощник_ВспомогательныеДанные.Вставить("ФонПодсказки", ЦветаСтиля.CRM_ЦветФонаПодсказкиПомощника);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсСерый", БиблиотекаКартинок.CRM_ОценкаПлюсСерый);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюс", БиблиотекаКартинок.CRM_ОценкаПлюс);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусСерый", БиблиотекаКартинок.CRM_ОценкаМинусСерый);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинус", БиблиотекаКартинок.CRM_ОценкаМинус);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсСерыйБольшая", БиблиотекаКартинок.CRM_ОценкаПлюсСерый24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаПлюсБольшая", БиблиотекаКартинок.CRM_ОценкаПлюс24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусСерыйБольшая", БиблиотекаКартинок.CRM_ОценкаМинусСерый24);
	Помощник_ВспомогательныеДанные.Вставить("КартинкаМинусБольшая", БиблиотекаКартинок.CRM_ОценкаМинус24);
	
	// Заполнение.
	Помощник_ТекущаяОценка = 0;
	ПервыйРезультат = РезультатыПоиска[0];
	Помощник_ТекущаяПодсказка = ПервыйРезультат.Ссылка;
	
	ТекстСовета = НСтр("ru = 'Уверен на %1, что подойдет ответ из статьи базы знаний:'");
	Элементы.Помощник_ТекстСовета.Заголовок = СтрШаблон(ТекстСовета, Формат(ПервыйРезультат.Уверенность, "ЧФ=Ч%"));
	
	Для Каждого Результат Из РезультатыПоиска Цикл
		НоваяСтрока = Помощник_Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.Оценка = 0;
		НоваяСтрока.ОценкаПлюс = Помощник_ВспомогательныеДанные.КартинкаПлюсСерый;
		НоваяСтрока.ОценкаМинус = Помощник_ВспомогательныеДанные.КартинкаМинусСерый;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтветовСтатьиБазыЗнаний(Ссылка)
	
	ДанныеОтветов = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтветыБазыЗнаний.НомерСтроки КАК НомерСтроки,
	|	ОтветыБазыЗнаний.НаименованиеОтвета КАК НаименованиеОтвета
	|ИЗ
	|	Справочник.CRM_Решения.Ответы КАК ОтветыБазыЗнаний
	|ГДЕ
	|	ОтветыБазыЗнаний.Ссылка = &Ссылка
	|	И ОтветыБазыЗнаний.СтатусОтвета = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыРешений.Утверждено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ДанныеОтветов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеОтветов.Добавить(Выборка.НомерСтроки, Выборка.НаименованиеОтвета);
	КонецЦикла;
	
	ДанныеОтветов.Добавить("Все", НСтр("ru = 'Все ответы'"));
	
	Возврат ДанныеОтветов;
	
КонецФункции

#КонецОбласти

#Область УчетРабочегоВремени

&НаКлиенте
Процедура Подключаемый_Команда_CRM_УказатьТрудозатраты(Команда) Экспорт // АПК:78 процедура вызывается из общего модуля CRM_ТрудозатратыКлиент.
	
	Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере();
	CRM_ТрудозатратыКлиент.УказатьТрудозатраты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(Команда)
	
	Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_ВыполнитьДействиеНадТаблицейЗаписейТрудозатратыНаСервере(ИмяКоманды)
	
	CRM_ТрудозатратыСервер.ВыполнитьДействиеНадТаблицейЗаписейТрудозатраты(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Команда_CRM_УказатьТрудозатратыНаСервере()
	
	CRM_ТрудозатратыСервер.УказатьТрудозатратыНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ВывестиПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьПанельТрудозатрат()
	
	CRM_ТрудозатратыКлиент.ЗакрытьПанельТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзменении(Элемент)
	
	Отказ = Ложь;
	CRM_ТрудозатратыКлиент.РабочееВремяПользователейПриИзменении(ЭтотОбъект, Элемент, Отказ);
	
	Если НЕ Отказ Тогда
		Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПриИзмененииНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавления(Элемент, Отказ,
	 Копирование, Родитель, Группа,
	 Параметр)
	
	Отказ = Истина;
	Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_CRM_РабочееВремяПользователейПередНачаломДобавленияНаСервере()
	
	CRM_ТрудозатратыСервер.ТаблицаЗаписейПередНачаломДобавленияНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СвязьСИнтересами

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_МетодыФормДокументовСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, ,
		 ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка),
		 Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_МетодыФормДокументовСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьОблакоТегов()
	
	ПараметрыТегов	= ПараметрыТегов();
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект, ПараметрыТегов);

КонецПроцедуры

&НаСервере
Функция ПараметрыТегов()
	
	ШиринаТегов	= Элементы.ГруппаНастройкиПраваяКолонка.Ширина;
	ПараметрыТегов = Новый Структура;
	ПараметрыТегов.Вставить("МаксДлинаПервойСтроки", ШиринаТегов - Элементы.Тег.Ширина);
	ПараметрыТегов.Вставить("ДобавитьКСтроке", Элементы.Тег.Ширина);
	Возврат ПараметрыТегов;
	
КонецФункции

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	ТемаПриИзмененииПродолжение(Элемент);
	
	Если ПериодАвтосохраненияЧерновиков > 0 Тогда
		НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
		НовыйЭлемент.ВидДанных = "Тема";
		НовыйЭлемент.ОписаниеДанных = Объект.Тема;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзмененииПродолжение(Элемент)
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_МетодыФормДокументовКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечи");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.РаспознаваниеРечи);
	Контекст.Вставить("ИмяРеквизита",                     "РаспознаваниеРечи");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		ТекЭлемент,
		ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Тема");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстПисьма");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ТекстПисьмаHTML");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Комментарий");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

&НаКлиенте
Процедура СвязатьСПисьмом(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекстHTML = CRM_РаботаСHTMLКлиент.ТекстВПолеHTML(Элементы.ТекстПисьмаHTML);
		
		СвязатьСПисьмомНаСервере(Результат, ТекстHTML);
		УстановитьВидимостьПолучателейПисьма();
		
		СоответствияАдресовИКонтактов.Очистить();
		СписокПолучателейПисьмаПриИзменении(Элементы.СписокПолучателейПисьма);
		СписокПолучателейКопийПриИзменении(Элементы.СписокПолучателейКопий);
		СписокПолучателейСкрытыхКопийПриИзменении(Элементы.СписокПолучателейСкрытыхКопий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСПисьмомНаСервере(ВходящееПисьмо, ТекстHTML)
	
	Объект.ИдентификаторОснования       = ВходящееПисьмо.ИдентификаторСообщения;
	Объект.ИдентификаторыОснований      = СокрЛП(ВходящееПисьмо.ИдентификаторыОснований + " <" 
		+ Объект.ИдентификаторОснования 
		+ ">");
	Объект.Кодировка                    = ВходящееПисьмо.Кодировка;
	Объект.Тема                         = "Re: " + ВходящееПисьмо.Тема;
	
	Объект.ВзаимодействиеОснование      = ВходящееПисьмо.Ссылка;
	ВзаимодействиеОснование             = ВходящееПисьмо.Ссылка;
	Элементы.ВзаимодействиеОснование.Гиперссылка = Истина;
	Элементы.ВзаимодействиеОснование.ЦветТекста  = ЦветаСтиля.CRM_ОсновнойГолубой;
	
	Объект.ТипТекста                    = ВходящееПисьмо.ТипТекста;
	Если Не ЗначениеЗаполнено(Предмет)
		Или ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		Или ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Предмет = Взаимодействия.СтруктураРеквизитовВзаимодействия(ВходящееПисьмо).Предмет;
	КонецЕсли;
	
	СвязатьСПисьмомЗаполнитьПолучателейНаСервере(ВходящееПисьмо);
	
	ТекстHTML = CRM_Взаимодействия.УдалитьПодписьИзТекстаHTML(ТекстHTML);
	ТекстHTML = CRM_Взаимодействия.УдалитьТекстИсходногоПисьма(ТекстHTML);
	
	ПозицияПустойСтроки = СтрНайти(ТекстHTML, "<div> </div>", НаправлениеПоиска.СКонца);
	Если ПозицияПустойСтроки <> 0 Тогда
		ТекстHTML = Лев(ТекстHTML, ПозицияПустойСтроки - 1);
	КонецЕсли;
	
	ТекстHTML = CRM_Взаимодействия.ДобавитьПодписьКТекстуПисьма(
			ТекстHTML, Объект.УчетнаяЗапись, ТекущийПользователь, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			
	CRM_Взаимодействия.ДобавитьТекстИсходногоПисьма(ТекстHTML, ВходящееПисьмо, ВходящееПисьмо);
	
	ТекстПисьмаHTML = ТекстHTML;
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСПисьмомЗаполнитьПолучателейНаСервере(ВходящееПисьмо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ПОМЕСТИТЬ АдресТекущегоПолучателя
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка В
	|			(ВЫБРАТЬ
	|				ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись
	|			ИЗ
	|				Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|			ГДЕ
	|				ЭлектронноеПисьмоВходящее.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Представление КАК Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Контакт КАК Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоВходящееПолучателиПисьма
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиПисьма.Ссылка = &Ссылка
	|	И НЕ ЭлектронноеПисьмоВходящееПолучателиПисьма.Адрес В
	|				(ВЫБРАТЬ
	|					АдресТекущегоПолучателя.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|				ИЗ
	|					АдресТекущегоПолучателя КАК АдресТекущегоПолучателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Ссылка
	|	И НЕ ЭлектронноеПисьмоВходящее.ОтправительАдрес В
	|				(ВЫБРАТЬ
	|					АдресТекущегоПолучателя.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|				ИЗ
	|					АдресТекущегоПолучателя КАК АдресТекущегоПолучателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Адрес КАК Адрес,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Представление КАК Представление,
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Контакт КАК Контакт
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее.ПолучателиКопий КАК ЭлектронноеПисьмоВходящееПолучателиКопий
	|ГДЕ
	|	ЭлектронноеПисьмоВходящееПолучателиКопий.Ссылка = &Ссылка
	|	И НЕ ЭлектронноеПисьмоВходящееПолучателиКопий.Адрес В
	|				(ВЫБРАТЬ
	|					АдресТекущегоПолучателя.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|				ИЗ
	|					АдресТекущегоПолучателя КАК АдресТекущегоПолучателя)";
	
	Запрос.УстановитьПараметр("АдресОтправителяЭтогоПисьма", ВходящееПисьмо.УчетнаяЗапись.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Ссылка", ВходящееПисьмо);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		
		ВремПолучателиПисьма = ПолучателиПисьма.Выгрузить();
		ВремПолучателиПисьма.Очистить();
		
		ТаблицаПолучатели = РезультатЗапроса[1].Выгрузить();
		
		СвязанныйИнтерес = СвязанныйИнтерес();
		Для Каждого Строка Из ТаблицаПолучатели Цикл
			
			ДобавитьПолучателя = Ложь;
			
			Если ЗначениеЗаполнено(СвязанныйИнтерес) Тогда
			
				Если НЕ ЗначениеЗаполнено(Строка.Контакт) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвязанныйИнтерес.Партнер) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.Партнер Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СвязанныйИнтерес.ПотенциальныйКлиент) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.ПотенциальныйКлиент Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвязанныйИнтерес.КонтактноеЛицо) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.КонтактноеЛицо Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ДобавитьПолучателя = Истина;
			КонецЕсли;
			
			Если ДобавитьПолучателя Тогда
				НоваяСтрока = ВремПолучателиПисьма.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВремПолучателиПисьма.Количество() > 0 Тогда
			ПолучателиПисьма.Загрузить(ВремПолучателиПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если НЕ РезультатЗапроса[2].Пустой() Тогда
		
		ВремПолучателиКопий = ПолучателиКопий.Выгрузить();
		ВремПолучателиКопий.Очистить();
		
		ТаблицаКопии = РезультатЗапроса[2].Выгрузить();
		
		СвязанныйИнтерес = СвязанныйИнтерес();
		Для Каждого Строка Из ТаблицаКопии Цикл
			
			ДобавитьПолучателя = Ложь;
			
			Если ЗначениеЗаполнено(СвязанныйИнтерес) Тогда
			
				Если НЕ ЗначениеЗаполнено(Строка.Контакт) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвязанныйИнтерес.Партнер) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.Партнер Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СвязанныйИнтерес.ПотенциальныйКлиент) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.ПотенциальныйКлиент Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвязанныйИнтерес.КонтактноеЛицо) Тогда
					Если Строка.Контакт = СвязанныйИнтерес.КонтактноеЛицо Тогда
						ДобавитьПолучателя = Истина;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ДобавитьПолучателя = Истина;
			КонецЕсли;
			
			Если ДобавитьПолучателя Тогда
				НоваяСтрока = ВремПолучателиКопий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока = ТаблицаПолучатели.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		
		КонецЦикла;
		
		Если ВремПолучателиКопий.Количество() > 0 Тогда
			ПолучателиКопий.Загрузить(ВремПолучателиКопий);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТаблицаПолучатели = Неопределено Тогда
		CRM_СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ТаблицаПолучатели,
			Ложь);
		СформироватьПредставленияКонтактов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущийПользовательОтветственнный()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
	Результат = Ложь;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ИсполнительЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Исполнитель");
		Если ТипЗнч(ИсполнительЗадачи) = Тип("СправочникСсылка.Пользователи") Тогда
			Результат = (ТекущиеПользователи.Найти(ИсполнительЗадачи) <> Неопределено);
		ИначеЕсли ТипЗнч(ИсполнительЗадачи) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ИсполнительЗадачи);
			Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
				 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналДокументов.CRM_Интерес.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.Объект = &Объект
	|	И НЕ ЖурналДокументов.CRM_Интерес = ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналДокументов.ОсновнойИнтерес УБЫВ");
	
	Запрос.Параметры.Вставить("Объект", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ТекущиеПользователи.Найти(Выборка.Ответственный) <> Неопределено Тогда
				Результат = Истина;
			Иначе
				Руководители = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(Выборка.Ответственный);
				Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
					 Руководители).Количество() > 0);
			КонецЕсли;
        ИначеЕсли ТипЗнч(Выборка.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(Выборка.Ответственный);
			Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
				 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		Результат = (ТекущиеПользователи.Найти(Объект.Ответственный) <> Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВходящееПисьмоВИнтересе(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЖурналДокументов.Объект КАК ВходящееПисьмо
		|ИЗ
		|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО CRM_ЖурналДокументов.Объект = ЭлектронноеПисьмоВходящее.Ссылка
		|ГДЕ
		|	CRM_ЖурналДокументов.CRM_Интерес = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ЭлектронноеПисьмоВходящее)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда
		ТЗРезультатЗапроса = РезультатЗапроса.Выгрузить();
		Если ТЗРезультатЗапроса.Количество() = 1 Тогда
			Результат = ТЗРезультатЗапроса[0].ВходящееПисьмо;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СвязанныйИнтерес()
	
	Если ЗначениеЗаполнено(ПредметИсходный) 
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОснование", ПредметИсходный.Метаданные()) 
		И ТипЗнч(ПредметИсходный.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		Возврат ПредметИсходный.ДокументОснование;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_ТаблицаИнтересов")
		И ЭтотОбъект["CRM_ТаблицаИнтересов"].Количество() > 0 Тогда
		
		Возврат ЭтотОбъект["CRM_ТаблицаИнтересов"][0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьШрифтПисьмаИзНастроек()
	
	// Установка шрифта для HTML требует фокуса на элементе.
	ТекущийЭлементВременная = ТекущийЭлемент;
	ТекущийЭлемент = Элементы.ТекстПисьмаHTML;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",		ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПолеHTML",	Элементы.ТекстПисьмаHTML);
	
	CRM_РаботаСHTMLКлиент.ИзменитьШрифтЗавершение(ШрифтПоУмолчанию, ДополнительныеПараметры);
	
	ТекущийЭлемент = ТекущийЭлементВременная;
	
КонецПроцедуры // УстановитьШрифтПисьмаИзНастроек()

// Получает ограничение по объему вложений в электронное письмо, установленное для заданной учетной записи
//
&НаСервере
Процедура  ПолучитьОграничениеПоОбъемуВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ОграничениеПоОбъемуВложений КАК CRM_ОграничениеПоОбъемуВложений
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.CRM_ОграничениеПоОбъемуВложений = 0 Тогда
		CRM_ОграничениеПоОбъемуВложений = 9999999999;
	Иначе
		БайтВМегабайте = 1048576;
		CRM_ОграничениеПоОбъемуВложений = ВыборкаДетальныеЗаписи.CRM_ОграничениеПоОбъемуВложений * БайтВМегабайте;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие/отсутствие превышения установленного для учетной записи ограничения по объему вложений
//
// Параметры:
//  ЕстьПревышение  - Булево - Переменная, передаваемая для заполнения при отправке письма
//                 для отказа в отправке в случае наличия превышения
//
&НаКлиенте
Процедура ПроверитьОбъемВложенийНаПревышение(ЕстьПревышение = Неопределено)
	
	Если CRM_ОграничениеПоОбъемуВложений = 0 Тогда
		ПолучитьОграничениеПоОбъемуВложений();
	КонецЕсли;
	
	Превышение = Вложения.Итог("Размер") - CRM_ОграничениеПоОбъемуВложений;
	Если Превышение > 0 Тогда
		БайтВМегабайте = 1048576;
		ПревышениеВМб = Окр(Превышение / БайтВМегабайте, 1);
		ШаблонСообщения = НСтр("ru = 'Суммарный объем вложенных файлов превышает установленное для данной учетной записи "
			+ "ограничение на %1 Мб.'");
			Если ЕстьПревышение <> Неопределено Тогда
				ЕстьПревышение = Истина;
				ШаблонСообщения = ШаблонСообщения + НСтр("ru = ' Письмо не отправлено.'")
			КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщения, ПревышениеВМб));
		
	КонецЕсли;
	
КонецПроцедуры

#Область АвтосохранениеЧерновиков

// Включает актосохранение черновиком писемм согласно настройкам пользователя
//
&НаСервере
Процедура ПодключитьАвтосохранениеЧерновиков()
	
	ПериодАвтосохраненияЧерновиков = 0;
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		ИмяПользователяИБ = Неопределено;
		ПользовательИБ =
			ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
		Если ПользовательИБ <> Неопределено Тогда
			ИмяПользователяИБ = ПользовательИБ.Имя;
		КонецЕсли;
		ПериодАвтосохраненияЧерновиков = ХранилищеОбщихНастроекЗагрузить("ПериодАвтосохраненияЧерновиков", 
			"ПериодАвтосохраненияЧерновиков", 0, ИмяПользователяИБ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие изменений в тексте письма после предыдущего автосохранения
//
// Возвращаемое значение:
//   Булево   - изменения в тексте есть
//
&НаКлиенте
Функция ТекстПисьмаИзменен()
	
	ТекущийТекстПисьма = Элементы.ТекстПисьмаHTML.Документ.documentElement.outerHTML;
	ХешСумма = CRM_ОбщегоНазначенияКлиент.ВычислитьХешСтрокиПоАлгоритмуMD5(ТекущийТекстПисьма);
	Если ХешСумма = ДанныеАвтосохраненияХешТекста Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтарыеДанные = ДанныеАвтосохраненияДобавляемые.НайтиСтроки(Новый Структура("ВидДанных", "ТекстПисьма"));
	Если СтарыеДанные.Количество() <> 0 Тогда
		Индекс = ДанныеАвтосохраненияДобавляемые.Индекс(СтарыеДанные[0]);
		ДанныеАвтосохраненияДобавляемые.Удалить(Индекс);
	КонецЕсли;
	ДанныеАвтосохраненияХешТекста = ХешСумма;
	НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
	НовыйЭлемент.ВидДанных = "ТекстПисьма";
	НовыйЭлемент.ХешСумма = ХешСумма;
	НовыйЭлемент.ОписаниеДанных = ТекущийТекстПисьма;
	
	Возврат Истина;
	
КонецФункции

// Добавляет адреса картинок, вложенных в текст письма, в таблицу для следующего автосохранения
//
&НаКлиенте
Процедура ЗаписатьАдресаКартинок()
	
	НайденныеЭлементы = Элементы.ТекстПисьмаHTML.Документ.querySelectorAll("img");
	Для Каждого НайденныйЭлемент Из НайденныеЭлементы Цикл
		Если СтрНайти(НайденныйЭлемент.src, "file:///") > 0 Тогда
			НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
			НовыйЭлемент.ВидДанных = "Картинка";
			НовыйЭлемент.ИмяФайлаНаКомпьютере = СтрЗаменить(НайденныйЭлемент.src, "file:///", "");
		ИначеЕсли СтрНайти(НайденныйЭлемент.src, "e1cib/") > 0 Тогда
			НовыйЭлемент = ДанныеАвтосохраненияДобавляемые.Добавить();
			НовыйЭлемент.ВидДанных = "Картинка";
			ПозицияНачалаАдреса = СтрНайти(НайденныйЭлемент.src, "e1cib/");
			НовыйЭлемент.ИмяФайлаНаКомпьютере = Сред(НайденныйЭлемент.src, ПозицияНачалаАдреса);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет автосохранение черновика письма
//
&НаКлиенте
Процедура ВыполнитьАвтосохранение()
	
	ТекстПисьмаИзменен = ТекстПисьмаИзменен();
	Если ТекстПисьмаИзменен Тогда
		ЗаписатьАдресаКартинок();
	КонецЕсли;
	
	Если Не ТекстПисьмаИзменен 
		И Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеАвтосохраненияДобавляемые.Количество() = 0
		И ДанныеАвтосохраненияУдаляемые.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ВыполнитьАвтосохранениеВФонеНаСервере(ДанныеАвтосохраненияДобавляемые, 
		ДанныеАвтосохраненияУдаляемые);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ДанныеАвтосохраненияДобавляемые.Очистить();
		ДанныеАвтосохраненияУдаляемые.Очистить();
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьАвтосохранениеЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьАвтосохранениеВФонеНаСервере(Знач ДобавляемыеДанные, Знач УдаляемыеДанные)
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("Объект", Объект.Ссылка);
	ПараметрыПроцедуры.Вставить("Пользователь", ТекущийПользователь);
	ПараметрыПроцедуры.Вставить("ДобавляемыеДанные", ДобавляемыеДанные.Выгрузить());
	ПараметрыПроцедуры.Вставить("УдаляемыеДанные", УдаляемыеДанные.Выгрузить());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Автосохранение письма'") + " ";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"РегистрыСведений.CRM_ДанныеАвтосохранения.ВыполнитьАвтосохранениеЭлектронногоПисьма",
			ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьАвтосохранениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ДанныеАвтосохраненияДобавляемые.Очистить();
		ДанныеАвтосохраненияУдаляемые.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Удаляет данные автосохранения черновика текущего письма
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоИсходящее - ссылка на текущее письмо
//  Пользователь  - СправочникСсылка.Пользователи - Текущий пользователь
//
&НаСервереБезКонтекста
Процедура УдалитьДанныеАвтосохранения(СсылкаНаПисьмо, Пользователь)
	
	НаборЗаписей = РегистрыСведений.CRM_ДанныеАвтосохранения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаПисьмо);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	ДанныеАвтосохраненияХешТекста = "";
	
КонецПроцедуры

// Удаляет все данные автосохранения для текущего пользователя
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - Текущий пользователь
//
&НаСервереБезКонтекста
Процедура УдалитьВсеДанныеАвтосохраненияПользователя(Пользователь)
	
	НаборЗаписей = РегистрыСведений.CRM_ДанныеАвтосохранения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие данные автосохранения для текущего или нового письма и пользователя
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоИсходящее - ссылка на текущее письмо
//  Пользователь  - СправочникСсылка.Пользовтели - Текущий пользователь
//
// Возвращаемое значение:
//   Булево   - данные автосохранения есть
//
&НаСервере
Функция ЕстьДанныеАвтосохранения(СсылкаНаПисьмо, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДанныеАвтосохранения.ХешСумма КАК ХешСумма
		|ИЗ
		|	РегистрСведений.CRM_ДанныеАвтосохранения КАК CRM_ДанныеАвтосохранения
		|ГДЕ
		|	CRM_ДанныеАвтосохранения.Объект = &Объект
		|	И CRM_ДанныеАвтосохранения.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаПисьмо);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Удаляет неактуальную информацию о вложении из данных автосохранения
//
// Параметры:
//  Данные  - Структура - сведения о файле
//   * ИДФайлаЭлектронногоПисьма
//   * ИмяФайла
//   * Размер
//
&НаКлиенте
Процедура УдалитьВложениеИзДанныхАвтосохранения(Данные)
	
	ОписаниеДанных = 
		"ИДФайлаЭлектронногоПисьма:" + Данные.ИДФайлаЭлектронногоПисьма
		+ "@ИмяФайла:" + Данные.ИмяФайла
		+ "@ИмяФайлаНаКомпьютере:" + Данные.ИмяФайлаНаКомпьютере
		+ "@Размер:" + Данные.Размер;
	ХешСумма = CRM_ОбщегоНазначенияКлиент.ВычислитьХешСтрокиПоАлгоритмуMD5(ОписаниеДанных);
	НайденноеСовпадение = 
		ДанныеАвтосохраненияДобавляемые.НайтиСтроки(Новый Структура("ХешСумма", ХешСумма));
	Если НайденноеСовпадение.Количество() > 0 Тогда
		Индекс = ДанныеАвтосохраненияДобавляемые.Индекс(НайденноеСовпадение[0]);
		ДанныеАвтосохраненияДобавляемые.Удалить(Индекс);
	Иначе
		НовыйЭлемент = ДанныеАвтосохраненияУдаляемые.Добавить();
		НовыйЭлемент.ХешСумма = ХешСумма;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик ответа на вопрос о восстановлении данных автосохранения
//
// Параметры:
//  Результат  - Код возврата диалога
//  ДополнительныеПараметры  - Структура
//
&НаКлиенте
Процедура ВосстановитьДанныеАвтосохранения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекстПисьмаСохраненный = "";
		ИзменяемыеЭлементы = Новый Массив;
		ВосстановитьДанныеАвтосохраненияНаСервере(Объект.Ссылка, ТекущийПользователь,
			ТекстПисьмаСохраненный, ИзменяемыеЭлементы);
		Если ТекстПисьмаСохраненный <> "" Тогда
			ТекстПисьмаHTML = ТекстПисьмаСохраненный;
		КонецЕсли;
		Для Каждого ИмяЭлемента Из ИзменяемыеЭлементы Цикл
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы.Имя = "Тема" Тогда
				ТемаПриИзмененииПродолжение(ЭлементФормы);
			ИначеЕсли ЭлементФормы.Имя = "СписокПолучателейПисьма" Тогда
				СписокПолучателейПисьмаПриИзмененииПродолжение(ЭлементФормы);
			ИначеЕсли ЭлементФормы.Имя = "СписокПолучателейКопий" Тогда
				СписокПолучателейКопийПриИзмененииПродолжение(ЭлементФормы);
			ИначеЕсли ЭлементФормы.Имя = "СписокПолучателейСкрытыхКопий" Тогда
				СписокПолучателейСкрытыхКопийПриИзмененииПродолжение(ЭлементФормы);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УдалитьДанныеАвтосохранения(Объект.Ссылка, ТекущийПользователь);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьАвтосохранение", ПериодАвтосохраненияЧерновиков);
	
КонецПроцедуры

// Восстанавливает данные автосохранения черновика текущего письма
//
// Параметры:
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоИсходящее - ссылка на текущее письмо
//  Пользователь  - СправочникСсылка.Пользовтели - Текущий пользователь
//  ТекстПисьмаСохраненный - Строка - Переменная для передачи текущего текста
//  ИзменяемыеЭлементы - Массив - Переменная для передачи имен изменяемых элементов
//
&НаСервере
Процедура ВосстановитьДанныеАвтосохраненияНаСервере(СсылкаНаПисьмо, Пользователь, 
		ТекстПисьмаСохраненный, ИзменяемыеЭлементы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДанныеАвтосохранения.ВидДанных КАК ВидДанных,
		|	CRM_ДанныеАвтосохранения.Данные КАК Данные,
		|	CRM_ДанныеАвтосохранения.ОписаниеДанных КАК ОписаниеДанных,
		|	CRM_ДанныеАвтосохранения.ХешСумма КАК ХешСумма
		|ИЗ
		|	РегистрСведений.CRM_ДанныеАвтосохранения КАК CRM_ДанныеАвтосохранения
		|ГДЕ
		|	CRM_ДанныеАвтосохранения.Объект = &Объект
		|	И CRM_ДанныеАвтосохранения.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаПисьмо);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	// Сначала получаем текст письма, так как затем в нем будут меняться пути к картинкам.
	Если Выборка.НайтиСледующий(Новый Структура("ВидДанных", "ТекстПисьма")) Тогда
		ТекстПисьмаСохраненный = Выборка.Данные.Получить();
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		ПозицияПараметров = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");
		Если ПозицияПараметров > 0 Тогда
			НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияПараметров - 1);
		КонецЕсли;
	КонецЕсли;
	Выборка.Сбросить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидДанных = "ТекстПисьма" Тогда
			Продолжить;
		ИначеЕсли Выборка.ВидДанных = "Вложение" Тогда
			Данные = Выборка.Данные.Получить();
			ПозицияИмениНачало = СтрНайти(Выборка.ОписаниеДанных, "@ИмяФайла:") + СтрДлина("@ИмяФайла:");
			ПозицияИмениКонец = СтрНайти(Выборка.ОписаниеДанных, "@ИмяФайлаНаКомпьютере:");
			ИмяФайла = Сред(Выборка.ОписаниеДанных, ПозицияИмениНачало, ПозицияИмениКонец - ПозицияИмениНачало);
			ПозицияПутиНачало = СтрНайти(Выборка.ОписаниеДанных, "@ИмяФайлаНаКомпьютере:") + СтрДлина("@ИмяФайлаНаКомпьютере:");
			ПозицияПутиКонец = СтрНайти(Выборка.ОписаниеДанных, "@Размер");
			ПолноеИмя = Сред(Выборка.ОписаниеДанных, ПозицияПутиНачало, ПозицияПутиКонец - ПозицияПутиНачало);
			ДанныеФайла = Новый Структура("ИмяФайла, ПолноеИмя, Данные", ИмяФайла, ПолноеИмя, Данные);
			ВосстановитьВложение(ДанныеФайла);
		ИначеЕсли Выборка.ВидДанных = "Картинка" Тогда
			ФайлКартинки = Выборка.Данные.Получить();
			АдресФайлаКартинки = ПоместитьВоВременноеХранилище(ФайлКартинки, УникальныйИдентификатор);
			ТекстПисьмаСохраненный = СтрЗаменить(ТекстПисьмаСохраненный, "img src=""file://" + Выборка.ХешСумма, 
				"img src=""" + НавигационнаяСсылкаИнформационнойБазы + "/" + АдресФайлаКартинки);
			ТекстПисьмаСохраненный = СтрЗаменить(ТекстПисьмаСохраненный, Выборка.ХешСумма, АдресФайлаКартинки);
		ИначеЕсли СтрНачинаетсяС(Выборка.ВидДанных, "Список")Тогда
			ЭтотОбъект["CRM_" + Выборка.ВидДанных] = Выборка.ОписаниеДанных;
			ИзменяемыеЭлементы.Добавить(Выборка.ВидДанных);
		Иначе
			Объект[Выборка.ВидДанных] = Выборка.ОписаниеДанных;
			ИзменяемыеЭлементы.Добавить(Выборка.ВидДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает вложение из данных автосохранения
//
// Параметры:
//  ДанныеФайла  - Структура
//
&НаСервере
Процедура ВосстановитьВложение(ДанныеФайла)
	
	Размер = ДанныеФайла.Данные.Размер();
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ДанныеФайла.ИмяФайла);
	
	РезультатПроверки = CRM_ВзаимодействияВызовСервера.ПроверитьВозможностьЗагрузкиВложения(ДанныеФайла.ИмяФайла,
		Размер, Расширение);
	Если РезультатПроверки.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	
	#Если ВебКлиент Тогда
		НоваяСтрока.Расположение = 4;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	#Иначе
		НоваяСтрока.Расположение = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ДанныеФайла.ПолноеИмя;
	#КонецЕсли
	
	НоваяСтрока.ИмяФайла = ДанныеФайла.ИмяФайла;
	НоваяСтрока.Размер = Размер;
	
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Расширение);
	НоваяСтрока.РазмерПредставление = CRM_ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 
	
	НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
	НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаЗаписиДляПереходаКИсторииПереписки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	ОткрытьФормуИсторииПереписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсторииПереписки()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДокументСсылка", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаИсторииПереписки", ПараметрыОткрытия);
	
КонецПроцедуры


#Область ЯзыковыеМодели

&НаКлиенте
Процедура Подключаемый_ДоступностьМенюАссистент()
	
	CRM_РаботаСЯзыковымиМоделямиКлиент.ДоступностьМенюАссистент(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели

#КонецОбласти
