//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.УсловияРетроБонусовПоставщика") Тогда
		
		СсылкаНаДокумент = ДанныеЗаполнения; // ДокументСсылка.УсловияРетроБонусовПоставщика
		ЗаполнитьПоУсловиюРетроБонусовПоставщиков(СсылкаНаДокумент);
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; // Массив Из Строка
	
	Если ДокументУсловий.Пустая() Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("НачалоПериода");
		МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("Начисления");
		МассивНепроверяемыхРеквизитов.Добавить("Начисления.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Начисления.Характеристика");
		
	Иначе
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(ДокументУсловий);
		
		Если РеквизитыУсловий.Количество() > 0 Тогда
			
			ПроверитьФиксациюСоставаСегментовУРБ(Отказ, Ложь, РеквизитыУсловий);
			
			Если ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("Начисления.Покупатель");
				
			КонецЕсли;
			
			Если ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("НачалоПериода");
				МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
				
				ПараметрыПроверкиЗаполнения = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
				ПараметрыПроверкиЗаполнения.ИмяТЧ = Метаданные().ТабличныеЧасти.Начисления.Имя;
				
				НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
					ЭтотОбъект,
					МассивНепроверяемыхРеквизитов,
					Отказ,
					ПараметрыПроверкиЗаполнения);
				
			Иначе
				
				МассивНепроверяемыхРеквизитов.Добавить("Начисления.Номенклатура");
				МассивНепроверяемыхРеквизитов.Добавить("Начисления.Характеристика");
				
			КонецЕсли;
			
			Если РеквизитыУсловий.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
				
			КонецЕсли;
			
			КонтрольЗаполненияПериодаДействия(РеквизитыУсловий, Отказ);
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			МассивНепроверяемыхРеквизитов.Добавить("НачалоПериода");
			МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
			МассивНепроверяемыхРеквизитов.Добавить("Валюта");
			МассивНепроверяемыхРеквизитов.Добавить("Начисления");
			МассивНепроверяемыхРеквизитов.Добавить("Начисления.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Начисления.Характеристика");
			МассивНепроверяемыхРеквизитов.Добавить("Начисления.Покупатель");
			
		КонецЕсли;
		
		ПроверитьСуммыНачислений(Отказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Запрещено изменение документа в подчиненном узле обмена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	Если НЕ ДокументУсловий.Пустая() Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ПроверитьФиксациюСоставаСегментовУРБ(Отказ, Истина);
			ПроверитьСтатусАктуальногоУРБ(Отказ, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаНачисления.ДокументПриобретения)
		   И СтрокаНачисления.ДокументПриобретения <> Неопределено Тогда
			
			СтрокаНачисления.ДокументПриобретения = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаРасчетная = Начисления.Итог("СуммаБонусРасчетный");
	СуммаНачисленная = Начисления.Итог("СуммаБонусНачисленный");
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

// Параметры:
//  УсловиеРетроБонусов - ДокументСсылка.УсловияРетроБонусовПоставщика - Данные заполнения
//
Процедура ЗаполнитьПоУсловиюРетроБонусовПоставщиков(УсловиеРетроБонусов)
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(УсловиеРетроБонусов);
	
	ДокументУсловий = УсловиеРетроБонусов;
	Организация = РеквизитыУсловий.Организация;
	Контрагент = РеквизитыУсловий.Контрагент;
	Партнер = РеквизитыУсловий.Партнер;
	Договор = РеквизитыУсловий.Договор;
	Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
	НачалоПериода = РеквизитыУсловий.НачалоДействия;
	ОкончаниеПериода = РеквизитыУсловий.ОкончаниеДействия;
	Валюта = РеквизитыУсловий.Валюта;
	ТипБонуса = РеквизитыУсловий.ТипБонуса;
	
	Если НЕ ЗначениеЗаполнено(Валюта)
	   И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Валюта"". Возможно, в информационной базе не введено ни одной валюты
								   |Для настройки необходимо перейти в раздел ""НСИ и администрирование""-""Предприятие""-""Валюты"".'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыУсловий.БезРасчета
	   И РеквизитыУсловий.СуммаБонус <> 0 Тогда
		
		Начисления.Очистить();
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.СуммаБонусНачисленный = РеквизитыУсловий.СуммаБонус;
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.Партнер = Партнер;
		НоваяСтрока.Договор = Договор;
		
	КонецЕсли;
	
	Если РеквизитыУсловий.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		ДанныеПоставщика = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанныеПоставщика(УсловиеРетроБонусов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоставщика);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выполняется проверка на период действия.
// 
// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные
//  Отказ - Булево
//
Процедура КонтрольЗаполненияПериодаДействия(РеквизитыУсловий, Отказ)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если НачалоПериода = ПустаяДата
	 ИЛИ ОкончаниеПериода = ПустаяДата Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачалоДействияРетроБонуса = РеквизитыУсловий.НачалоДействия;
	ОкончаниеДействияРетроБонуса = РеквизитыУсловий.ОкончаниеДействия;
	ПериодичностьНачислений = РеквизитыУсловий.ПериодичностьНачислений;
	
	ЕстьНарушениеНачала = Ложь;
	ЕстьНарушениеОкончания = Ложь;
	
	Если НачалоПериода > ОкончаниеПериода Тогда
			
		ТекстОшибки = НСтр("ru = 'Начало периода не может быть больше его окончания'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "НачалоПериода", "Объект", Отказ);
		
	ИначеЕсли НачалоПериода > ОкончаниеДействияРетроБонуса
	 ИЛИ ОкончаниеПериода < НачалоДействияРетроБонуса Тогда
		
		ЕстьНарушениеНачала = Истина;
		ЕстьНарушениеОкончания = Истина;
		ТекстОшибки = НСтр("ru = 'Документ условия не действует в указанном периоде начисления'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
	КонецЕсли;
	
	РезультатПроверкиПериодичность = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
		ПериодичностьНачислений,
		НачалоПериода,
		ОкончаниеПериода,
		Истина);
		
	Если РезультатПроверкиПериодичность.ЕстьНарушениеНачала 
	   И НЕ ЕстьНарушениеНачала Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиПериодичность.ТекстОшибкиНачала,, "НачалоПериода", "Объект", Отказ);
		
	КонецЕсли;
	
	Если РезультатПроверкиПериодичность.ЕстьНарушениеОкончания
	   И НЕ ЕстьНарушениеОкончания Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиПериодичность.ТекстОшибкиОкончания,, "ОкончаниеПериода", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьФиксациюСоставаСегментовУРБ(Отказ, УстановитьБлокировку, Знач РеквизитыУсловий = Неопределено)
	
	ПредставлениеДокументаУсловий = ОбщегоНазначения.ПредметСтрокой(ДокументУсловий);
	
	Если УстановитьБлокировку Тогда
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыПоставщиковУсловия");
			ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ДокументУсловий);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку фиксации состава сегментов документа %1 по причине ""%2"".
								|Попробуйте позже'");
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ПредставлениеДокументаУсловий,
				ОписаниеОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(ДокументУсловий);
		
	ИначеЕсли РеквизитыУсловий = Неопределено Тогда
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(ДокументУсловий);
		
	КонецЕсли;
	
	ИспользуютсяСегменты = (РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
	
	Если ИспользуютсяСегменты
	   И НЕ РеквизитыУсловий.СегментыЗафиксированы Тогда
		
		ШаблонСообщения = НСтр("ru = 'В документе условий %1 используются сегменты, но состав сегментов не зафиксирован'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ПредставлениеДокументаУсловий);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется проверка на то, что документ УРБ согласован или если была корректировка УРБ, то она не в статусе на согласовании.
// 
// Параметры:
//  Отказ - Булево 
//  ВыполнитьСБлокировкой - Булево
// 
Процедура ПроверитьСтатусАктуальногоУРБ(Отказ, ВыполнитьСБлокировкой = Ложь)
	
	ДанныеДляКонтроля = Новый Структура;
	ДанныеДляКонтроля.Вставить("АктуальныйДокументУсловий", ДокументУсловий);
	ДанныеДляКонтроля.Вставить("СтатусКорректировки", Перечисления.СтатусыДокументовРетроБонусов.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	ПолноеИмя = Метаданные.Документы.УсловияРетроБонусовПоставщика.ПолноеИмя();
	Запрос.УстановитьПараметр("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя));
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Условия.РегистраторДвижения КАК АктуальныйДокументУсловий
	|ИЗ
	|	РегистрСведений.РетроБонусыПоставщиковУсловия КАК Условия
	|ГДЕ
	|	Условия.ДокументУсловий = &ДокументУсловий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК АктуальныйДокументУсловий,
	|	РеестрДокументов.Статус КАК СтатусКорректировки
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.ТипСсылки = &ТипСсылки
	|	И НЕ РеестрДокументов.ПометкаУдаления
	|	И РеестрДокументов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован)
	|	И РеестрДокументов.ИсправляемыйДокумент = &ДокументУсловий";
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатПоДаннымРегистра = Результат[0];
	РезультатПоДаннымДокументов = Результат[1];
	
	ДокументУсловийНеСогласован = РезультатПоДаннымРегистра.Пустой();
	ДокументКорректируется = НЕ РезультатПоДаннымДокументов.Пустой();
	
	Если ДокументКорректируется Тогда
		
		Выборка = РезультатПоДаннымДокументов.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДляКонтроля, Выборка);
		
	ИначеЕсли НЕ ДокументУсловийНеСогласован Тогда
		
		Выборка = РезультатПоДаннымРегистра.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДляКонтроля, Выборка);
		
	КонецЕсли;
	
	Если ВыполнитьСБлокировкой Тогда
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.УсловияРетроБонусовПоставщика");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеДляКонтроля.АктуальныйДокументУсловий);
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку статуса документа условий по причине: ""%1"".
								|Попробуйте позже'");
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, 
				ОписаниеОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДокументУсловийНеСогласован
	 ИЛИ ДанныеДляКонтроля.СтатусКорректировки = Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании Тогда
		
		Если ВыполнитьСБлокировкой Тогда
			
			Если ДокументУсловийНеСогласован Тогда
				
				ТекстСообщения = НСтр("ru = 'Документ условий не согласован. Проведение документа невозможно'");
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Для документа условий введена корректировка, которая находится на согласовании. Проведение документа невозможно'");
				
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСуммыНачислений(Отказ)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНенулевыеСуммы = Ложь;
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		
		Если СтрокаНачисления.СуммаБонусНачисленный <> 0 Тогда
			
			ЕстьНенулевыеСуммы = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьНенулевыеСуммы Тогда
		
		ТекстСообщения = НСтр("ru = 'В табличной части не указано ни одной суммы к начислению'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Начисления", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли