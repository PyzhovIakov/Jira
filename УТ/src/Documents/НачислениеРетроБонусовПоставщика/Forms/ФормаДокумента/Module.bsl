//@strict-types

#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ТекущийДокументУсловий = Объект.ДокументУсловий;
	ТекущийКонтрагент = Объект.Контрагент;
	ТекущийПартнер = Объект.Партнер;
	ТекущийДоговор = Объект.Договор;
	ТекущееНачалоПериода = Объект.НачалоПериода;
	ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
	ТекущаяВалюта = Объект.Валюта;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьЗаголовок();
	ОбновитьСвязиПараметровВыбораДокументаУсловий();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовок();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	ОбновитьВидимостьДоступностьФиксацииСегментов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУсловийПриИзменении(Элемент)
	
	Если Объект.ДокументУсловий.Пустая() Тогда
		
		ДокументУсловийОчисткаСервер();
		ОбновитьВидимостьДоступностьФиксацииСегментов();
		
	ИначеЕсли ТекущийДокументУсловий <> Объект.ДокументУсловий Тогда
		
		ТекущийДокументУсловий = Объект.ДокументУсловий;
		ДокументУсловийПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУсловийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументУсловийОчисткаСервер();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДоговорПриИзменении(Элемент)
	
	Если ТекущийДоговор <> Объект.Договор
	   И БезРасчета
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		ИзменитьДоговор = Ждать ТребуетсяИзменениеДоговораВШапке(СведенияНачислений);
		
		Если ИзменитьДоговор Тогда
			
			ОбработатьИзменениеДоговораВШапке();
			
		Иначе
			
			Объект.Договор = ТекущийДоговор;
			
		КонецЕсли;
		
	Иначе
		
		ОбработатьИзменениеДоговораВШапке();
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если ТекущееНачалоПериода <> Объект.НачалоПериода
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееНачалоПериода = Объект.НачалоПериода;
			
		КонецЕсли;
		
	Иначе
		
		ТекущееНачалоПериода = Объект.НачалоПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Если ТекущееОкончаниеПериода <> Объект.ОкончаниеПериода
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
			
		КонецЕсли;
		
	Иначе
		
		ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВалютаПриИзменении(Элемент)
	
	Если ТекущаяВалюта <> Объект.Валюта
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущаяВалюта = Объект.Валюта;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.Валюта = ТекущаяВалюта;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяВалюта = Объект.Валюта;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяВалюта = Объект.Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗафиксироватьСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "Зафиксировать";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ЗафиксироватьСоставСегментов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	СохранитьДанныеТекущейСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.ЗаполнениеПоРасчету = Ложь;
		
	ИначеЕсли НоваяСтрока Тогда
		
		ЗаполнитьСтрокуНачисленийПоДаннымШапки(ТекущиеДанные, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаБонусНачисленныйПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ПредыдущиеДанные = ДанныеСтрокиНачисления; // см. НовыеДанныеСтроки
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Контрагент <> ПредыдущиеДанные.Контрагент Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПриобретения) Тогда
			ТекущиеДанные.ДокументПриобретения = ДокументПриобретенияПоУмолчанию();
		КонецЕсли;
		
		ТекущиеДанные.Договор = Неопределено;
		
		СохранитьДанныеТекущейСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ПредыдущиеДанные = ДанныеСтрокиНачисления; // см. НовыеДанныеСтроки
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Партнер <> ПредыдущиеДанные.Партнер Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПриобретения) Тогда
			ТекущиеДанные.ДокументПриобретения = ДокументПриобретенияПоУмолчанию();
		КонецЕсли;
		
		ДоговорЕстьВНачислениях = ЗаполнятьДоговорВТЧ();
		
		Если ДоговорЕстьВНачислениях Тогда
			ТекущиеДанные.Договор = Неопределено;
		КонецЕсли;
		
		ТекущиеДанные.Соглашение = Неопределено;
		
		СохранитьДанныеТекущейСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ПредыдущиеДанные = ДанныеСтрокиНачисления; // см. НовыеДанныеСтроки
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Договор <> ПредыдущиеДанные.Договор Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
			
			ДанныеДоговора = ДанныеДоговораТЧ(ТекущиеДанные.Договор);
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
				ТекущиеДанные.Контрагент = ДанныеДоговора.Контрагент;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
				ТекущиеДанные.Партнер = ДанныеДоговора.Партнер;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущиеДанные.ДокументПриобретения = ДокументПриобретенияПоУмолчанию();
		
		СохранитьДанныеТекущейСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСоглашениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ПредыдущиеДанные = ДанныеСтрокиНачисления; // см. НовыеДанныеСтроки
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Соглашение <> ПредыдущиеДанные.Соглашение Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Соглашение) Тогда
			
			ДанныеСоглашения = ДанныеСоглашенияТЧ(ТекущиеДанные.Соглашение);
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
				ТекущиеДанные.Партнер = ДанныеСоглашения.Партнер;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПриобретения) Тогда
			ТекущиеДанные.ДокументПриобретения = ДокументПриобретенияПоУмолчанию();
		КонецЕсли;
		
		СохранитьДанныеТекущейСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура; 
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
		ТекущиеДанные,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	
	ПараметрыВыбораСоглашения = Новый Массив; // Массив из ПараметрВыбора
	Если ДанныеСтроки <> Неопределено
	   И НЕ ДанныеСтроки.Партнер.Пустая() Тогда
		
		НовыйОтбор = Новый ПараметрВыбора("Отбор.Партнер", ДанныеСтроки.Партнер);
		ПараметрыВыбораСоглашения.Добавить(НовыйОтбор);
		
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСоглашения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДокументПриобретенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = ПараметрыОтбораДокументаПриобретения();
	ИдентификаторыДокументов = ДопустимыеТипыДокументовПриобретения();
	ХозяйственныеОперации = ОперацииДокументовПриобретения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ОтборТипыДокументов", ИдентификаторыДокументов);
	ПараметрыФормы.Вставить("ОтборХозяйственныеОперации", ХозяйственныеОперации);
	
	СохранитьДанныеТекущейСтроки();
	
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыЗакупкиВыбор");
	ОткрытьФорму(
		"Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов",
		ПараметрыФормы,
		Элементы.НачисленияДокументПриобретения,
		КлючУникальности,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДокументПриобретенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ДанныеДокумента = ДанныеДокументаПриобретения(ТекущиеДанные.ДокументПриобретения);
	
	ПредыдущиеДанные = ДанныеСтрокиНачисления; // см. НовыеДанныеСтроки
	
	Если НЕ ЗначениеЗаполнено(ПредыдущиеДанные.Контрагент) Тогда
		ТекущиеДанные.Контрагент = ДанныеДокумента.Контрагент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредыдущиеДанные.Партнер) Тогда
		ТекущиеДанные.Партнер = ДанныеДокумента.Партнер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредыдущиеДанные.Договор) Тогда
		ТекущиеДанные.Договор = ДанныеДокумента.Договор;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПредыдущиеДанные.Соглашение) Тогда
		ТекущиеДанные.Соглашение = ДанныеДокумента.Соглашение;
	КонецЕсли;
	
	СохранитьДанныеТекущейСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДоговорНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	
	ПараметрыДоговора = ПараметрыВыбораДоговора(ДанныеСтроки);
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДоговора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("УстановитьИнтервалВыборЗначения", ЭтотОбъект);
	ПараметрыВыбораПериода = Новый Структура;
	ПараметрыВыбораПериода.Вставить("ДатаНачала", "НачалоПериода");
	ПараметрыВыбораПериода.Вставить("ДатаОкончания", "ОкончаниеПериода");
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект,
		ПараметрыВыбораПериода,
		ОповещениеПослеВыбора);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПоУсловиям(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		
		ПредставлениеПоля = НСтр("ru = 'Документ условий'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, ПредставлениеПоля);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	Иначе
		
		ПроверитьЗаполнениеШапкиДокумента(Отказ);
		
		Если Объект.ТипБонуса <> ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.Остатки") Тогда
			ПроверитьПериодыПоПериодичности(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПроверитьФиксациюСоставаСегментов(Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ
	   И Объект.Начисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица начислений будет очищена.
								  |Продолжить?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если БезРасчета Тогда
			
			ЗаполнитьНачисленияБезРасчета();
			
		Иначе
			
			ПараметрыРасчета = ПараметрыРасчетаРетроБонусов();
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьНачисленияПоУсловиямЗавершение", ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.НачисленияЗаполнитьПоУсловиям.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.РетроБонусыЗаПериодПоДокументамПриобретения(
				ПараметрыРасчета,
				ЭтотОбъект,
				ОповещениеОЗавершении);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОрганизацияУказана = НЕ Объект.Организация.Пустая();
	
	Если ОрганизацияУказана Тогда
		
		Если НЕ Объект.ДокументУсловий.Пустая() Тогда
			
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументУсловий, "Организация");
			Если ОрганизацияДокумента <> Объект.Организация Тогда
				
				Объект.ДокументУсловий = Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка();
				ТекущийДокументУсловий = Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка();
				ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ДокументУсловий = Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка();
		ТекущийДокументУсловий = Документы.УсловияРетроБонусовПоставщика.ПустаяСсылка();
		ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	ОбновитьСвязиПараметровВыбораДокументаУсловий();
	
КонецПроцедуры

&НаСервере
Процедура ДокументУсловийПриИзмененииСервер()
	
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
	Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ОбновитьФлагВозможностиИзмененияУРБ();
	ЗаполнитьДанныеПоследнейКорректировки();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументУсловий);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Объект.Начисления.Очистить();
	
	ОбновитьСвязиПараметровВыбораДокументаУсловий();
	ЗаполнитьСлужебныеРеквизитыФормыПоУсловию();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	
	НастроитьВидимостьДоступностьФормы();
	УстановитьЗаголовокКолонкиВыручка();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДокументУсловийОчисткаСервер()
	
	ТекущийДокументУсловий = ПредопределенноеЗначение("Документ.УсловияРетроБонусовПоставщика.ПустаяСсылка");
	Объект.ДокументУсловий = ПредопределенноеЗначение("Документ.УсловияРетроБонусовПоставщика.ПустаяСсылка");
	ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
	ОбновитьФлагВозможностиИзмененияУРБ();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	НастроитьВидимостьДоступностьФормы();
	УстановитьЗаголовокКолонкиВыручка();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьСоставСегментов()
	
	ОбновитьДанныеПередФиксациейСегментов();
	Если НЕ ЕстьКорректировкаНаСогласовании
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Зафиксировать состав сегментов документа условий?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗафиксироватьСоставСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияЗафиксироватьСегменты.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ЗафиксироватьСоставСегментов(
				Объект.ДокументУсловий,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
	
	Иначе
		
		Если ЕстьКорректировкаНаСогласовании Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно зафиксировать состав сегментов: введена корректировка в статусе ""На согласовании"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Состав сегментов уже зафиксирован.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект");
		НастроитьВидимостьДоступностьФормы();
		УстановитьЗаголовокКолонкиВыручка();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗафиксироватьСоставСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И Результат.Статус = "Ошибка" Тогда
		
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	ОбновитьДанныеПередФиксациейСегментов();
	НастроитьВидимостьДоступностьФормы();
	УстановитьЗаголовокКолонкиВыручка();
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполняютсяОперацииПоФиксацииСоставаСегментов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = НСтр("ru = 'По документу условий уже выполняются операции по фиксации состава сегментов. Попробуйте позже.'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	НастроитьВидимостьДоступностьФормы();
	УстановитьЗаголовокКолонкиВыручка();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПериодыПоПериодичности(Отказ)
	
	Если НЕ Отказ
	   И (Объект.НачалоПериода > ДатаОкончанияУсловия
	      ИЛИ Объект.ОкончаниеПериода < ДатаНачалаУсловия) Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ условия не действует в указанном периоде начисления'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		
		РезультатПроверки = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
			ПериодичностьНачислений,
			Объект.НачалоПериода,
			Объект.ОкончаниеПериода,
			Истина);
			
		Если РезультатПроверки.ЕстьНарушениеНачала Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиНачала,
				,
				"НачалоПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьНарушениеОкончания Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиОкончания,
				,
				"ОкончаниеПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОФиксацииСегментов()
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если РеквизитыУсловий.Количество() = 0 Тогда
		
		ДокументУсловийСогласован = Ложь;
		ИспользуютсяСегменты = Ложь;
		СоставСегментовЗафиксирован = Ложь;
		
	Иначе
		
		ДокументУсловийСогласован = Истина;
		
		ИспользуютсяСегменты =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ТребуетсяИзменениеДоговораВШапке(СведенияНачислений)
	
	ИзменитьДоговор = Ложь;
	ТекстВопроса = ТекстВопросаОбИзмененииДоговораВШапке(СведенияНачислений);
	
	Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
		
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ИзменитьДоговор = Истина;
		КонецЕсли;
		
	Иначе
		ИзменитьДоговор = Истина;
	КонецЕсли;
	
	Возврат ИзменитьДоговор;
	
КонецФункции

&НаКлиенте
Функция ТекстВопросаОбИзмененииДоговораВШапке(СведенияНачислений)
	
	ТекстВопроса = "";
	Если ТекущийДоговор.Пустая() Тогда
		
		Если СведенияНачислений.ЕстьДокументыПриобретенийНеПоДоговоруВШапке 
		   И СведенияНачислений.ЕстьДоговорНеРавныйПолюВШапке Тогда
			
			ТекстВопроса = НСтр("ru = 'Начисление будет произведено по выбранному договору. Документы приобретения по договорам, отличным от выбранного, будут очищены.
								|Продолжить?'");
		
		ИначеЕсли СведенияНачислений.ЕстьДоговорНеРавныйПолюВШапке Тогда
			
			ТекстВопроса = НСтр("ru = 'Начисление будет произведено по выбранному договору.
								|Продолжить?'");
			
		КонецЕсли;
		
	ИначеЕсли СведенияНачислений.ЕстьДокументыПриобретений
			И НЕ Объект.Договор.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Документы приобретения в таблице начислений будут очищены.
							|Продолжить?'");
		
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговораВШапке()
	
	ТекущийДоговор = Объект.Договор;
	Если НЕ БезРасчета
	 ИЛИ НЕ Объект.Договор.Пустая() Тогда
		
		Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
			
			Если СтрокаНачисления.Договор <> Объект.Договор Тогда
				СтрокаНачисления.ДокументПриобретения = Неопределено;
			КонецЕсли;
			
			СтрокаНачисления.Договор = Объект.Договор;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияВспомогательные

&НаСервереБезКонтекста
Функция ДанныеДокументаПриобретения(Знач ДокументПриобретения);
	
	ИменаРеквизитов = Новый Массив; // Массив из Строка
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Партнер");
	ИменаРеквизитов.Добавить("Договор");
	ИменаРеквизитов.Добавить("Соглашение");
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПриобретения, ИменаРеквизитов);
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеДоговораТЧ(Знач Договор);
	
	ИменаРеквизитов = Новый Массив; // Массив из Строка
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Партнер");
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаРеквизитов);
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеСоглашенияТЧ(Знач Соглашение);
	
	ИменаРеквизитов = Новый Массив; // Массив из Строка
	ИменаРеквизитов.Добавить("Партнер");
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, ИменаРеквизитов);
	Возврат ДанныеДокумента;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ОбновитьФлагВозможностиИзмененияУРБ();
	ЗаполнитьДанныеПоследнейКорректировки();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	
	ЗаполнитьСлужебныеРеквизитыФормыПоУсловию();
	
	НастроитьВидимостьДоступностьФормы();
	УстановитьЗаголовокКолонкиВыручка();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
	ТипыДоговоров = РетроБонусыКлиентСервер.ТипыДоговоровЗакупки();
	ПоддерживаемыеТипыДоговоров = Новый ФиксированныйМассив(ТипыДоговоров);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.Договор, "ТипДоговора", ПоддерживаемыеТипыДоговоров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = РетроБонусыСервер.ЗаголовокДокумента(
		Объект.Ссылка, Объект.Номер, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыПоУсловию()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(Объект.ДокументУсловий);
		
		БезРасчета = РеквизитыУсловий.БезРасчета;
		ПериодичностьНачислений = РеквизитыУсловий.ПериодичностьНачислений;
		БазаРасчета = РеквизитыУсловий.БазаРасчета;
		ПоказательТоваров = РеквизитыУсловий.ПоказательТоваров;
		ТекущееНачалоПериода = РеквизитыУсловий.НачалоДействия;
		ТекущееОкончаниеПериода = РеквизитыУсловий.ОкончаниеДействия;
		ДатаНачалаУсловия = РеквизитыУсловий.НачалоДействия;
		ДатаОкончанияУсловия = РеквизитыУсловий.ОкончаниеДействия;
		ДатаОстатков = РеквизитыУсловий.ДатаОстатков;
		ТекущаяВалюта = РеквизитыУсловий.Валюта;
		СуммаБонус = РеквизитыУсловий.СуммаБонус;
		
		Если ТекущаяВалюта = Справочники.Валюты.ПустаяСсылка() Тогда
			
			ТекущаяВалюта = Объект.Валюта;
			
		КонецЕсли;
		 
		ЕстьДоговорВДокументеУсловий = ЗначениеЗаполнено(РеквизитыУсловий.Договор);
		
		ИспользуютсяСегменты =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
	Иначе
		
		ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьФормы()
	
	ИменаЭлементовВидимостьВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Контрагент.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Партнер.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияКонтрагент.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияПартнер.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияДоговор.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияПокупатель.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияДокументПриобретения.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияНоменклатура.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияХарактеристика.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияРасчетнаяБаза.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Договор.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Соглашение.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияСоглашение.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияВыручка.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.УстановитьИнтервал.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДатаОстатков.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Валюта.Имя);
	
	ИменаЭлементовТолькоПросмотрВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.Валюта.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.Договор.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.Соглашение.Имя);
	
	ИменаЭлементовВидимых = Новый Массив; // Массив из Строка
	
	Если ИспользуютсяСегменты 
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
		
	КонецЕсли;
	
	ИменаЭлементовТолькоПросмотр = Новый Массив; // Массив из Строка
	Если ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.НачалоПериода.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ОкончаниеПериода.Имя);
		
	КонецЕсли;
	
	Если БазаРасчета <> Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиВзаиморасчеты
	 ИЛИ Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки
	 ИЛИ ПоказательТоваров = Перечисления.ЦелевыеПоказателиРетроБонусовПоТоварам.Сумма
	 ИЛИ БезРасчета Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Валюта.Имя);
		
	КонецЕсли;
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи
	   ИЛИ Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
	   ИЛИ БезРасчета Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.НачисленияВыручка.Имя);
		
	КонецЕсли;
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Договор.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Соглашение.Имя);
		
	ИначеЕсли ЕстьДоговорВДокументеУсловий Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Договор.Имя);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		
		ДанныеПоставщика = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанныеПоставщика(Объект.ДокументУсловий);
		
		ВидимостьКонтрагентаШапки = ЗаполнятьКонтрагентаВШапке(ДанныеПоставщика);
		ВидимостьПартнераШапки = ЗаполнятьПартнераВШапке(ДанныеПоставщика);
		ВидимостьДоговораШапки = ЗаполнятьДоговорВШапке(ДанныеПоставщика);
		ВидимостьСоглашенияШапки = ЗаполнятьСоглашениеВШапке(ДанныеПоставщика);
		ВидимостьДоговораТЧ = ЗаполнятьДоговорВТЧ();
		
		Если ВидимостьКонтрагентаШапки Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.Контрагент.Имя);
		КонецЕсли;
		
		Если ВидимостьПартнераШапки Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.Партнер.Имя);
		КонецЕсли;
		
		Если ВидимостьДоговораШапки Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.Договор.Имя);
		КонецЕсли;
		
		Если ВидимостьСоглашенияШапки Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.Соглашение.Имя);
		КонецЕсли;
		
		Если ВидимостьДоговораТЧ Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияДоговор.Имя);
		КонецЕсли;
		
		Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
			
			Если НЕ ВидимостьКонтрагентаШапки Тогда
				ИменаЭлементовВидимых.Добавить(Элементы.НачисленияКонтрагент.Имя);
			КонецЕсли;
			
			Если НЕ ВидимостьПартнераШапки Тогда
				ИменаЭлементовВидимых.Добавить(Элементы.НачисленияПартнер.Имя);
			КонецЕсли;
			
			Если НЕ ВидимостьСоглашенияШапки Тогда
				ИменаЭлементовВидимых.Добавить(Элементы.НачисленияСоглашение.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если БезРасчета
		 ИЛИ Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
			
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияДокументПриобретения.Имя);
			
		КонецЕсли;
		
		Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
			
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияПокупатель.Имя);
			
		КонецЕсли;
		
		Если БезРасчета Тогда
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияДокументПриобретения.Имя);
		КонецЕсли;
		
		Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
			
			ИменаЭлементовВидимых.Добавить(Элементы.ДатаОстатков.Имя);
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияНоменклатура.Имя);
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияХарактеристика.Имя);
			
		Иначе
			
			ИменаЭлементовВидимых.Добавить(Элементы.НачалоПериода.Имя);
			ИменаЭлементовВидимых.Добавить(Элементы.ОкончаниеПериода.Имя);
			ИменаЭлементовВидимых.Добавить(Элементы.НачисленияРасчетнаяБаза.Имя);
			Если ПериодичностьНачислений <> Перечисления.ПериодичностиРетроБонусов.Однократно Тогда
				ИменаЭлементовВидимых.Добавить(Элементы.УстановитьИнтервал.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		ИменаЭлементовВидимых.Добавить(Элементы.Валюта.Имя);
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Доступность = ЕстьПравоИзмененияУРБ;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы, ИменаЭлементовВидимостьВсе, ИменаЭлементовВидимых);
	
	РетроБонусыКлиентСервер.УстановитьТолькоПросмотрЭлементовПоМассиву(
		Элементы, ИменаЭлементовТолькоПросмотрВсе, ИменаЭлементовТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнятьДоговорВТЧ()
	
	Результат = ЗначениеЗаполнено(Объект.ДокументУсловий)
				И (Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
				   ИЛИ БезРасчета)
				И Объект.Договор.Пустая();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнятьСоглашениеВШапке(ДанныеПоставщика)
	
	Результат = ЗначениеЗаполнено(Объект.ДокументУсловий)
				И Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
				И НЕ ДанныеПоставщика.Соглашение.Пустая();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнятьДоговорВШапке(ДанныеПоставщика)
	
	Результат = ЗначениеЗаполнено(Объект.ДокументУсловий)
				И Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки
				ИЛИ НЕ ДанныеПоставщика.Договор.Пустая()
				ИЛИ БезРасчета;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнятьПартнераВШапке(ДанныеПоставщика)
	
	Результат = ЗначениеЗаполнено(Объект.ДокументУсловий)
				И Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки
				ИЛИ НЕ ДанныеПоставщика.Партнер.Пустая();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнятьКонтрагентаВШапке(ДанныеПоставщика)
	
	Результат = ЗначениеЗаполнено(Объект.ДокументУсловий)
				И Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Закупки
				ИЛИ НЕ ДанныеПоставщика.Контрагент.Пустая();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКолонкиВыручка()
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки
	 ИЛИ БезРасчета Тогда
		
		Элементы.НачисленияВыручка.Заголовок = НСтр("ru = 'Сумма закупки'");
		
	Иначе
		
		Элементы.НачисленияВыручка.Заголовок = НСтр("ru = 'Выручка'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПоУсловию(Форма)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Объект = Форма.Объект;
	
	Объект.НачалоПериода = ПустаяДата;
	Форма.ТекущееНачалоПериода = ПустаяДата;
	Форма.ДатаНачалаУсловия = ПустаяДата;
	Объект.ОкончаниеПериода = ПустаяДата;
	Форма.ТекущееОкончаниеПериода = ПустаяДата;
	Форма.ДатаОкончанияУсловия = ПустаяДата;
	Форма.ДатаОстатков = ПустаяДата;
	Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	Форма.ТекущаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Форма.ТекущийКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");;
	Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Форма.ТекущийПартнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Форма.ТекущийДоговор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	Форма.ЕстьДоговорВДокументеУсловий = Ложь;
	Объект.ТипБонуса = ПредопределенноеЗначение("Перечисление.ТипыРетроБонусовПоставщиков.ПустаяСсылка");
	Объект.Начисления.Очистить();
	
	Форма.БезРасчета = Ложь;
	Форма.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка");
	Форма.ИспользуютсяСегменты = Ложь;
	Форма.СоставСегментовЗафиксирован = Ложь;
	Форма.ЕстьКорректировкаНаСогласовании = Ложь;
	
	РассчитатьИтоговыеПоказателиДокумента(Форма);
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив из СвязьПараметраВыбора
//
&НаКлиентеНаСервереБезКонтекста
Функция СвязиПараметровВыбораДокументаУсловий(Организация)
	
	СвязиПараметровВыбора = Новый Массив(); // Массив из СвязьПараметраВыбора
	
	Если НЕ Организация.Пустая() Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(
			"Отбор.Организация",
			"Объект.Организация",
			РежимИзмененияСвязанногоЗначения.НеИзменять);
		СвязиПараметровВыбора.Добавить(НоваяСвязь);
		
	КонецЕсли;
	
	Возврат СвязиПараметровВыбора;
	
КонецФункции

&НаСервере
Процедура ОбновитьСвязиПараметровВыбораДокументаУсловий()
	
	СвязиПараметровВыбора = СвязиПараметровВыбораДокументаУсловий(Объект.Организация);
	Элементы.ДокументУсловий.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиДокумента(Форма);
	
	КоллекцияНачислений = Форма.Объект.Начисления;
	
	Форма.ИтогоБонусРасчетный = КоллекцияНачислений.Итог("СуммаБонусРасчетный");
	Форма.ИтогоБонусНачисленный = КоллекцияНачислений.Итог("СуммаБонусНачисленный");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОтбораДокументаПриобретения()
	
	ДанныеСтроки = Элементы.Начисления.ТекущиеДанные;
	
	ОтборДокументаПриобретения = Новый Структура();
	
	Если НЕ Объект.Организация.Пустая() Тогда
		ОтборДокументаПриобретения.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено
	   И НЕ ДанныеСтроки.Контрагент.Пустая() Тогда
		
		ОтборДокументаПриобретения.Вставить("Контрагент", ДанныеСтроки.Контрагент);
		
	ИначеЕсли НЕ Объект.Контрагент.Пустая() Тогда
		ОтборДокументаПриобретения.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено
	   И НЕ ДанныеСтроки.Партнер.Пустая() Тогда
		
		ОтборДокументаПриобретения.Вставить("Партнер", ДанныеСтроки.Партнер);
		
	ИначеЕсли НЕ Объект.Партнер.Пустая() Тогда
		ОтборДокументаПриобретения.Вставить("Партнер", Объект.Партнер);
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено
	   И НЕ ДанныеСтроки.Договор.Пустая() Тогда
		
		ОтборДокументаПриобретения.Вставить("Договор", ДанныеСтроки.Договор);
		
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено
	   И НЕ ДанныеСтроки.Соглашение.Пустая() Тогда
		
		ОтборДокументаПриобретения.Вставить("Соглашение", ДанныеСтроки.Соглашение);
		
	КонецЕсли;
	
	Возврат ОтборДокументаПриобретения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДопустимыеТипыДокументовПриобретения()
	
	ТипыДокументов = Новый Массив; // Массив из ОбъектМетаданныхДокумент
	ТипыДокументов.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	ТипыДокументов.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	ТипыДокументов.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику);
	ТипыДокументов.Добавить(Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров);
	
	ИдентификаторыДокументов = Новый Массив; // Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных
	
	ИдентификаторыДокументовПоТипам = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ТипыДокументов);
	Для Каждого КлючИЗначение Из ИдентификаторыДокументовПоТипам Цикл
		
		ИдентификаторыДокументов.Добавить(КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Возврат ИдентификаторыДокументов;
	
КонецФункции

&НаКлиенте
Функция ОперацииДокументовПриобретения()
	
	ИсключаемыеОперации = Новый Массив; // Массив из ПеречислениеСсылка.ХозяйственныеОперации
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыкупПринятыхНаХранениеТоваров"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ИсправлениеОшибок"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаДоВводаОстатков"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	ИсключаемыеОперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	Возврат ИсключаемыеОперации;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыбораДоговора(ДанныеСтроки)
	
	ПараметрыВыбораДоговора = Новый Массив(); // Массив из ПараметрВыбора
	
	ОтборТип = Новый ПараметрВыбора("Отбор.ТипДоговора", ПоддерживаемыеТипыДоговоров);
	ПараметрыВыбораДоговора.Добавить(ОтборТип);
	
	ОтборПометка = Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь);
	ПараметрыВыбораДоговора.Добавить(ОтборПометка);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
		
		НовыйОтбор = Новый ПараметрВыбора("Отбор.Контрагент", ДанныеСтроки.Контрагент);
		ПараметрыВыбораДоговора.Добавить(НовыйОтбор);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Партнер) Тогда
		
		НовыйОтбор = Новый ПараметрВыбора("Партнер", ДанныеСтроки.Партнер);
		ПараметрыВыбораДоговора.Добавить(НовыйОтбор);
		
	КонецЕсли;
	
	Возврат ПараметрыВыбораДоговора;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Признаки начислений:
// * ЕстьНачисленияПоРасчету - Булево - 
// * ЕстьДокументыПриобретений - Булево - 
// * ЕстьДоговоры - Булево - 
// * ЕстьДоговорНеРавныйПолюВШапке - Булево - 
// * ЕстьДокументыПриобретенийНеПоДоговоруВШапке - Булево - 
&НаКлиенте
Функция ПризнакиНачислений()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНачисленияПоРасчету", Ложь);
	Результат.Вставить("ЕстьДокументыПриобретений", Ложь);
	Результат.Вставить("ЕстьДоговоры", Ложь);
	Результат.Вставить("ЕстьДоговорНеРавныйПолюВШапке", Ложь);
	Результат.Вставить("ЕстьДокументыПриобретенийНеПоДоговоруВШапке", Ложь);
	
	Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаНачисления.ДокументПриобретения) Тогда
			
			Результат.ЕстьДокументыПриобретений = Истина;
			
			Если СтрокаНачисления.Договор <> Объект.Договор Тогда
			
				Результат.ЕстьДокументыПриобретенийНеПоДоговоруВШапке = Истина;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Договор) Тогда
			
			Результат.ЕстьДоговоры = Истина;
			
		КонецЕсли;
		
		Если СтрокаНачисления.ЗаполнениеПоРасчету Тогда
			
			Результат.ЕстьНачисленияПоРасчету = Истина;
			
		КонецЕсли;
		
		Если СтрокаНачисления.Договор <> Объект.Договор Тогда
			
			Результат.ЕстьДоговорНеРавныйПолюВШапке = Истина;
			
		КонецЕсли;
		
		Если Результат.ЕстьНачисленияПоРасчету
		   И Результат.ЕстьДокументыПриобретений
		   И Результат.ЕстьДоговоры
		   И Результат.ЕстьДоговорНеРавныйПолюВШапке
		   И Результат.ЕстьДокументыПриобретенийНеПоДоговоруВШапке Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьНачисленияПоУсловиямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			ЗаполнитьНачисленияПоУсловиямСервер(Результат.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.НачисленияЗаполнитьПоУсловиям.Имя,
		"Доступность",
		Истина);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Период - СтандартныйПериод -
//	ДополнительныеПараметры - Произвольный - 
//
&НаКлиенте
Асинх Процедура УстановитьИнтервалВыборЗначения(Период, ДополнительныеПараметры) Экспорт
	
	Если Объект.Начисления.Количество() > 0 
	   И (ТекущееНачалоПериода <> Объект.НачалоПериода
		  ИЛИ ТекущееОкончаниеПериода <> Объект.ОкончаниеПериода) Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееНачалоПериода = Объект.НачалоПериода;
			ТекущееОкончаниеПериода = Объект.ОкончаниеПериода
			
		КонецЕсли;
		
	Иначе
		
		ТекущееНачалоПериода = Объект.НачалоПериода;
		ТекущееОкончаниеПериода = Объект.ОкончаниеПериода
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоУсловиямСервер(Знач АдресРезультата)
	
	Если Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Продажи Тогда
		ЗаполнитьНачисленияПоПродажам(АдресРезультата);
	ИначеЕсли Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Закупки Тогда
		ЗаполнитьНачисленияПоЗакупкам(АдресРезультата);
	ИначеЕсли Объект.ТипБонуса = Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		ЗаполнитьНачисленияПоОстаткам(АдресРезультата);
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	
	СтруктураДействий = Новый Структура; 
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ПараметрыЗаполнения);
	
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Начисления, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоПродажам(АдресРезультата)
	
	ТаблицаБонусов = РетроБонусыПоДокументамПродажи(АдресРезультата);
	
	ИмяКолонкиВыручка = "";
	УсловияРБ = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаУпрУчет
	 ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаРеглУчет
	 ИЛИ БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаВзаиморасчеты Тогда
		
		Если УсловияРБ.УчитыватьНДС Тогда
			ИмяКолонкиВыручка = "СуммаОборотСНДС";
		Иначе
			ИмяКолонкиВыручка = "СуммаОборотБезНДС";
		КонецЕсли;
		
	ИначеЕсли БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.ВыручкаБазовыеЦены Тогда
		
		ИмяКолонкиВыручка = "СуммаВБазовыхЦенах";
		
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	Для Каждого СтрокаБонуса Из ТаблицаБонусов Цикл
		
		СтрокаНачисления = Объект.Начисления.Добавить();
		
		ЗаполнитьСтрокуНачисленийПоДаннымШапки(СтрокаНачисления, Объект);
		СтрокаНачисления.Покупатель = СтрокаБонуса.КонтрагентПокупатель;
		Если НЕ ПустаяСтрока(ИмяКолонкиВыручка) Тогда
			
			ВыручкаПоСтроке = СтрокаБонуса[ИмяКолонкиВыручка]; // ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
			СтрокаНачисления.Выручка = ВыручкаПоСтроке;
			
		КонецЕсли;
		СтрокаНачисления.РасчетнаяБаза = СтрокаБонуса.РасчетнаяБаза;
		СтрокаНачисления.СуммаБонусРасчетный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.СуммаБонусНачисленный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.ЗаполнениеПоРасчету = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоЗакупкам(АдресРезультата)
	
	ТаблицаБонусов = РетроБонусыПоДокументамПриобретения(АдресРезультата);
	СортироватьТаблицуРетроБонусов(ТаблицаБонусов);
	
	ИмяКолонкиВыручка = "";
	УсловияРБ = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если БазаРасчета = Перечисления.БазыРасчетаРетроБонусов.СуммаЗакупкиБазовыеЦены Тогда
		
		ИмяКолонкиВыручка = "СуммаВБазовыхЦенах";
		
	Иначе
		
		Если УсловияРБ.УчитыватьНДС Тогда
			ИмяКолонкиВыручка = "СуммаОборотСНДС";
		Иначе
			ИмяКолонкиВыручка = "СуммаОборотБезНДС";
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	Для Каждого СтрокаБонуса Из ТаблицаБонусов Цикл
		
		СтрокаНачисления = Объект.Начисления.Добавить();
		
		ЗаполнитьСтрокуНачисленийПоДаннымШапки(СтрокаНачисления, Объект);
		ЗаполнитьСтрокуНачисленийПоДаннымБонусов(СтрокаНачисления, СтрокаБонуса);
		СтрокаНачисления.Покупатель = СтрокаБонуса.КонтрагентПоставщик;
		СтрокаНачисления.ДокументПриобретения = СтрокаБонуса.ДокументРегистратор;
		Если НЕ ПустаяСтрока(ИмяКолонкиВыручка) Тогда
			
			ВыручкаПоСтроке = СтрокаБонуса[ИмяКолонкиВыручка]; // ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
			СтрокаНачисления.Выручка = ВыручкаПоСтроке;
			
		КонецЕсли;
		СтрокаНачисления.РасчетнаяБаза = СтрокаБонуса.РасчетнаяБаза;
		СтрокаНачисления.СуммаБонусРасчетный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.СуммаБонусНачисленный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.ЗаполнениеПоРасчету = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоОстаткам(АдресРезультата)
	
	ТаблицаБонусов = РетроБонусыПоОстаткам(АдресРезультата);
	
	Объект.Начисления.Очистить();
	Для Каждого СтрокаБонуса Из ТаблицаБонусов Цикл
		
		СтрокаНачисления = Объект.Начисления.Добавить();
		
		ЗаполнитьСтрокуНачисленийПоДаннымШапки(СтрокаНачисления, Объект);
		СтрокаНачисления.Номенклатура = СтрокаБонуса.Номенклатура;
		СтрокаНачисления.Характеристика = СтрокаБонуса.Характеристика;
		СтрокаНачисления.СуммаБонусРасчетный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.СуммаБонусНачисленный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.ЗаполнениеПоРасчету = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияБезРасчета()
	
	Объект.Начисления.Очистить();
	ЗаполнитьСлужебныеРеквизитыФормыПоУсловию();
	
	СтрокаНачисления = Объект.Начисления.Добавить();
	СтрокаНачисления.Контрагент = Объект.Контрагент;
	СтрокаНачисления.Партнер = Объект.Партнер;
	СтрокаНачисления.Соглашение = Объект.Соглашение;
	СтрокаНачисления.Договор = Объект.Договор;
	СтрокаНачисления.СуммаБонусРасчетный = СуммаБонус;
	СтрокаНачисления.СуммаБонусНачисленный = СуммаБонус;
	СтрокаНачисления.ЗаполнениеПоРасчету = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаРетроБонусов()
	
	ПараметрыРасчета = Отчеты.РасчетРетроБонусовПоставщиков.ПараметрыРасчетаРетроБонусов();
	ПараметрыРасчета.ДокументУсловий = Объект.ДокументУсловий;
	ПараметрыРасчета.ДатаНачала = Объект.НачалоПериода;
	ПараметрыРасчета.ДатаОкончания = КонецДня(Объект.ОкончаниеПериода);
	ПараметрыРасчета.ДатаОстатков = КонецДня(ДатаОстатков);
	ПараметрыРасчета.Валюта = Объект.Валюта;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Параметры:
//  АдресРезультата - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Валюта - СправочникСсылка.Валюты
//  * КонтрагентПокупатель - СправочникСсылка.Контрагенты
//  * Организация - СправочникСсылка.Организации
//  * РасчетнаяБаза - Число
//  * СуммаБонус - Число
//  * СуммаВБазовыхЦенах - Число
//  * СуммаОборотБезНДС - Число
//  * СуммаОборотСНДС - Число
//  * СуммаПлан - Число
//
&НаСервереБезКонтекста
Функция РетроБонусыПоДокументамПродажи(АдресРезультата)
	
	ТаблицаБонусов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат ТаблицаБонусов;
	
КонецФункции

// Параметры:
//  АдресРезультата - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Валюта - СправочникСсылка.Валюты
//  * КонтрагентПоставщик - СправочникСсылка.Контрагенты
//  * ПартнерПоставщик - СправочникСсылка.Партнеры
//  * ДоговорПоставщика - СправочникСсылка.ДоговорыКонтрагентов
//  * СоглашениеПоставщика - СправочникСсылка.СоглашенияСПоставщиками
//  * ДокументРегистратор - ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.КорректировкаПриобретения, ДокументСсылка.ВозвратТоваровПоставщику, ДокументСсылка.ВыкупПринятыхНаХранениеТоваров -
//  * Организация - СправочникСсылка.Организации
//  * РасчетнаяБаза - Число
//  * СуммаБонус - Число
//  * СуммаВБазовыхЦенах - Число
//  * СуммаОборотБезНДС - Число
//  * СуммаОборотСНДС - Число
//  * СуммаПлан - Число
//
&НаСервереБезКонтекста
Функция РетроБонусыПоДокументамПриобретения(АдресРезультата)
	
	ТаблицаБонусов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат ТаблицаБонусов;
	
КонецФункции

// Параметры:
//  АдресРезультата - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Номенклатура - СправочникСсылка.Номенклатура
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  * СуммаБонус - Число
//
&НаСервереБезКонтекста
Функция РетроБонусыПоОстаткам(АдресРезультата)
	
	ТаблицаБонусов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат ТаблицаБонусов;
	
КонецФункции

// Параметры:
//  Таблица - см. РетроБонусыПоДокументамПриобретения
//
&НаСервереБезКонтекста
Процедура СортироватьТаблицуРетроБонусов(Таблица)
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	
	Таблица.Колонки.Добавить("Дата", ОписаниеТипаДата);
	
	ДокументыПриобретения = Таблица.ВыгрузитьКолонку("ДокументРегистратор");
	ДатыПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыПриобретения, "Дата");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.Дата = ДатыПоДокументам[СтрокаТаблицы.ДокументРегистратор];
		
	КонецЦикла;
	
	Таблица.Сортировать("Дата");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеШапкиДокумента(Отказ)
	
	СписокПроверяемыхРеквизитов = Новый СписокЗначений; // СписокЗначений из Строка
	СписокПроверяемыхРеквизитов.Добавить(Элементы.Организация.Имя);
	СписокПроверяемыхРеквизитов.Добавить(Элементы.Валюта.Имя);
	
	Если Объект.ТипБонуса <> Перечисления.ТипыРетроБонусовПоставщиков.Остатки Тогда
		
		СписокПроверяемыхРеквизитов.Добавить(Элементы.НачалоПериода.Имя);
		СписокПроверяемыхРеквизитов.Добавить(Элементы.ОкончаниеПериода.Имя);
		
	КонецЕсли;
	
	ДанныеПоставщика = Документы.УсловияРетроБонусовПоставщика.АктуальныеДанныеПоставщика(Объект.ДокументУсловий);
	ПроверятьКонтрагента = ЗаполнятьКонтрагентаВШапке(ДанныеПоставщика);
	ПроверятьПартнера = ЗаполнятьПартнераВШапке(ДанныеПоставщика);
	
	Если ПроверятьКонтрагента Тогда
		СписокПроверяемыхРеквизитов.Добавить(Элементы.Контрагент.Имя);
	КонецЕсли;
	
	Если ПроверятьПартнера Тогда
		
		ПартнерПредставление = НСтр("ru = 'Поставщик'");
		СписокПроверяемыхРеквизитов.Добавить(Элементы.Партнер.Имя, ПартнерПредставление);
		
	КонецЕсли;
	
	Для Каждого ДанныеРеквизита Из СписокПроверяемыхРеквизитов Цикл
		
		ИмяРеквизита = ДанныеРеквизита.Значение; // Строка
		Если ЗначениеЗаполнено(ДанныеРеквизита.Представление) Тогда
			СинонимРеквизита = ДанныеРеквизита.Представление;
		Иначе
			СинонимРеквизита = ИмяРеквизита;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, СинонимРеквизита);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ИмяРеквизита, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФиксациюСоставаСегментов(Отказ)
	
	ОбновитьДанныеОФиксацииСегментов();
	НужноЗафиксироватьСоставСегментов = (ИспользуютсяСегменты И НЕ СоставСегментовЗафиксирован);
	
	Если НЕ ДокументУсловийСогласован Тогда
		
		ТекстСообщения = НСтр("ru = 'Документ условий не согласован'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	ИначеЕсли НужноЗафиксироватьСоставСегментов Тогда
		
		ТекстСообщения = НСтр("ru = 'Не зафиксирован состав сегментов документа условий'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагВозможностиИзмененияУРБ()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(Объект.ДокументУсловий);
	Иначе
		ЕстьПравоИзмененияУРБ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьФиксацииСегментов()
	
	Элементы.ДекорацияЗафиксироватьСегменты.Доступность = ЕстьПравоИзмененияУРБ;
	Элементы.ДекорацияЗафиксироватьСегменты.Видимость = (ИспользуютсяСегменты И НЕ СоставСегментовЗафиксирован);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДекорацииФиксацииСегментов()
	
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		ТекстЗафиксировать = НСтр("ru = 'Введена корректировка в статусе ""На согласовании"", фиксация состава сегментов запрещена'");
		
	Иначе
		
		ШаблонЗафиксировать = НСтр("ru = 'Состав сегментов не зафиксирован. <a href=""%1"">Зафиксировать</a>.'");
		ТекстЗафиксировать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗафиксировать, "Зафиксировать");
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗафиксировать);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоследнейКорректировки()
	
	ЕстьКорректировкаНаСогласовании = Ложь;
	Если НЕ Объект.ДокументУсловий.Пустая() Тогда
		
		ЕстьКорректировкаНаСогласовании = РетроБонусыСервер.ЕстьКорректировкаНаСогласовании(Объект.ДокументУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередФиксациейСегментов()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		УстановитьЗаголовокДекорацииФиксацииСегментов();
		
	КонецЕсли;
	
	ОбновитьДанныеОФиксацииСегментов();
	
КонецПроцедуры
//
//#КонецОбласти

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Начисления, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеТекущейСтроки()
	
	ДанныеСтроки = НовыеДанныеСтроки();
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		
	КонецЕсли;
	
	ДанныеСтрокиНачисления = Новый ФиксированнаяСтруктура(ДанныеСтроки);
	
КонецПроцедуры

// Новые данные строки.
// 
// Возвращаемое значение:
//  Структура - Новые данные строки:
// * Контрагент - СправочникСсылка.Контрагенты - 
// * Партнер - СправочникСсылка.Партнеры - 
// * Договор - СправочникСсылка.ДоговорыКонтрагентов - 
// * Соглашение - СправочникСсылка.СоглашенияСПоставщиками - 
// * ДокументПриобретения - Неопределено -
//                        - см. Документ.НачислениеРетроБонусовПоставщика.Начисления.ДокументПриобретения
//
&НаКлиенте
Функция НовыеДанныеСтроки()
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ДанныеСтроки.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ДанныеСтроки.Вставить("Договор", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	ДанныеСтроки.Вставить("Соглашение", ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка"));
	ДанныеСтроки.Вставить("ДокументПриобретения", Неопределено);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуНачисленийПоДаннымШапки(ДанныеСтроки, Объект)
	
	ДанныеСтроки.Контрагент = Объект.Контрагент;
	ДанныеСтроки.Партнер = Объект.Партнер;
	ДанныеСтроки.Договор = Объект.Договор;
	ДанныеСтроки.Соглашение = Объект.Соглашение;
	ДанныеСтроки.ДокументПриобретения = ДокументПриобретенияПоУмолчанию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуНачисленийПоДаннымБонусов(ДанныеСтроки, ДанныеБонусов)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Контрагент) Тогда
		ДанныеСтроки.Контрагент = ДанныеБонусов.КонтрагентПоставщик;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партнер) Тогда
		ДанныеСтроки.Партнер = ДанныеБонусов.ПартнерПоставщик;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Договор) Тогда
		ДанныеСтроки.Договор = ДанныеБонусов.ДоговорПоставщика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Соглашение) Тогда
		ДанныеСтроки.Соглашение = ДанныеБонусов.СоглашениеПоставщика;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеСтрокПоРасчету();
	УстановитьУсловноеОформлениеПроизвольныхСтрок();
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"НачисленияХарактеристика",
		"Объект.Начисления.ХарактеристикиИспользуются");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСтрокПоРасчету()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияКонтрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияПокупатель.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияДоговор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСоглашение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияДокументПриобретения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияВыручка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияРасчетнаяБаза.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСуммаБонусРасчетный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ЗаполнениеПоРасчету");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПроизвольныхСтрок()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСуммаБонусРасчетный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ЗаполнениеПоРасчету");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Без расчета>'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументПриобретенияПоУмолчанию()
	
	Возврат ПредопределенноеЗначение("Документ.ПриобретениеТоваровУслуг.ПустаяСсылка");
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method - неявный вызов из УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти