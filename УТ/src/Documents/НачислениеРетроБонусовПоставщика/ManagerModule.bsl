//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РетроБонусы");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка.НачислениеРетроБонусовПоставщика, ДокументОбъект.НачислениеРетроБонусовПоставщика - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачислениеРетроБонусовПоставщика") Тогда
		
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
		
	Иначе
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений; // СписокЗначений из Строка
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ТекстЗапросаТаблицаРетроБонусыПоставщиков(ТекстыЗапроса, Регистры, ДокументОбъект);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.СписаниеРетроБонусовПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры);
	Документы.АктПремииПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Начисление ретро-бонусов поставщика".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Результат = Неопределено;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеРетроБонусовПоставщика) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НачислениеРетроБонусовПоставщика.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = 
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачислениеРетроБонусовПоставщика);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Результат = КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.РасчетРетроБонусовПоставщиков.ДобавитьКомандуРасчетРетроБонусовПоставщиков(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		
		КомандаОтчет.Представление = НСтр("ru = 'Расшифровка расчета ретро-бонусов'");
		КомандаОтчет.РежимЗаписи = "Записывать";
		
	КонецЕсли;
	
КонецПроцедуры

// Описание логики ограничений прав доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
		
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Если ПолучитьФункциональнуюОпцию("ВыводитьПолныеНаименованияРетроБонусовПоставщиков") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
КонецПроцедуры

// Параметры:
//  Данные - Структура - Данные документа:
//  * Ссылка - ДокументСсылка.НачислениеРетроБонусовПоставщика
//  * Номер - Строка -
//  * Дата - Дата
//  Представление - Строка - Представление
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВыводитьПолныеНаименованияРетроБонусовПоставщиков") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.Ссылка <> Неопределено Тогда
		
		Представление = РетроБонусыВызовСервера.ЗаголовокДокумента(
			Данные.Ссылка,
			Данные.Номер,
			Данные.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область УсловноеОформление

// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных
//  Элементы - ВсеЭлементыФормы
//
Процедура УстановитьУсловноеОформлениеСписокПериодДействия(УсловноеОформление, Элементы) Экспорт
	
	ТекстНеИспользуется = НСтр("ru = '<не используется>'");
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоПериода.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОкончаниеПериода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТипБонуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРетроБонусовПоставщиков.Остатки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеИспользуется);
	
КонецПроцедуры

// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных
//  Элементы - ВсеЭлементыФормы
//
Процедура УстановитьУсловноеОформлениеСписокКонтрагент(УсловноеОформление, Элементы) Экспорт
	
	ТекстНесколько = НСтр("ru = '<несколько>'");
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТипБонуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРетроБонусовПоставщиков.Закупки;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНесколько);
	
КонецПроцедуры

// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных
//  Элементы - ВсеЭлементыФормы
//
Процедура УстановитьУсловноеОформлениеСписокПартнер(УсловноеОформление, Элементы) Экспорт
	
	ТекстНесколько = НСтр("ru = '<несколько>'");
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Партнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ТипБонуса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРетроБонусовПоставщиков.Закупки;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНесколько);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Параметры:
//  ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовПоставщика
// 
// Возвращаемое значение:
//  Структура - Данные документа начисления:
// * Шапка - ВыборкаИзРезультатаЗапроса:
//   ** Организация - СправочникСсылка.Организации
//   ** Контрагент- СправочникСсылка.Контрагенты
//   ** Партнер- СправочникСсылка.Партнеры
//   ** Договор - СправочникСсылка.ДоговорыКонтрагентов
//   ** ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов
//   ** НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности
//   ** Валюта - СправочникСсылка.Валюты
//   ** ТипБонуса - ПеречислениеСсылка.ТипыРетроБонусовПоставщиков
// * ДанныеСтрок - ВыборкаИзРезультатаЗапроса:
//   ** Партнер - СправочникСсылка.Партнеры
//   ** Договор - СправочникСсылка.ДоговорыКонтрагентов
//   ** Сумма - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//   ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовПоставщика
//   ** НачалоПериода - Дата
//   ** ОкончаниеПериода - Дата
// * Контрагенты - ВыборкаИзРезультатаЗапроса:
//   ** Контрагент - СправочникСсылка.Контрагенты
//
Функция ДанныеДокументаНачисления(ДокументНачисления) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Начисления.Партнер КАК Партнер,
	|	Начисления.Контрагент КАК Контрагент,
	|	Начисления.Договор КАК Договор,
	|	Начисления.СуммаБонусНачисленный КАК Сумма
	|ПОМЕСТИТЬ ВТ_ДанныеТаблицыНачисления
	|ИЗ
	|	Документ.НачислениеРетроБонусовПоставщика.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеТаблицыНачисления.Контрагент) КАК Контрагент,
	|	МАКСИМУМ(ДанныеТаблицыНачисления.Контрагент.Партнер) КАК ПартнерКонтрагента
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	ВТ_ДанныеТаблицыНачисления КАК ДанныеТаблицыНачисления
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТаблицыНачисления.Контрагент) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеРетроБонусовПоставщика.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НачислениеРетроБонусовПоставщика.ТипБонуса = ЗНАЧЕНИЕ(Перечисление.ТипыРетроБонусовПоставщиков.Закупки)
	|			ТОГДА ЕСТЬNULL(Контрагенты.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ НачислениеРетроБонусовПоставщика.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НачислениеРетроБонусовПоставщика.ТипБонуса = ЗНАЧЕНИЕ(Перечисление.ТипыРетроБонусовПоставщиков.Закупки)
	|			ТОГДА ЕСТЬNULL(Контрагенты.ПартнерКонтрагента, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|		ИНАЧЕ НачислениеРетроБонусовПоставщика.Контрагент.Партнер
	|	КОНЕЦ КАК ПартнерКонтрагента,
	|	НачислениеРетроБонусовПоставщика.Валюта КАК Валюта,
	|	НачислениеРетроБонусовПоставщика.ДокументУсловий КАК ДокументУсловий,
	|	НачислениеРетроБонусовПоставщика.НачалоПериода КАК НачалоПериода,
	|	НачислениеРетроБонусовПоставщика.ОкончаниеПериода КАК ОкончаниеПериода,
	|	НачислениеРетроБонусовПоставщика.ТипБонуса КАК ТипБонуса
	|ПОМЕСТИТЬ ВТ_ДанныеШапки
	|ИЗ
	|	Документ.НачислениеРетроБонусовПоставщика КАК НачислениеРетроБонусовПоставщика
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК Контрагенты
	|		ПО НачислениеРетроБонусовПоставщика.ТипБонуса = ЗНАЧЕНИЕ(Перечисление.ТипыРетроБонусовПоставщиков.Закупки)
	|ГДЕ
	|	НачислениеРетроБонусовПоставщика.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Контрагент КАК Контрагент,
	|	ДанныеШапки.ПартнерКонтрагента КАК Партнер,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	МАКСИМУМ(Договоры.Ссылка) КАК Договор,
	|	МАКСИМУМ(Договоры.ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчета,
	|	МАКСИМУМ(Договоры.НаправлениеДеятельности) КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТ_ДоговорыКонтрагентов
	|ИЗ
	|	ВТ_ДанныеШапки КАК ДанныеШапки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО ДанныеШапки.Организация = Договоры.Организация
	|		 И ДанныеШапки.Контрагент = Договоры.Контрагент
	|		 И ДанныеШапки.ПартнерКонтрагента = Договоры.Партнер
	|		 И ДанныеШапки.Валюта = Договоры.ВалютаВзаиморасчетов
	|		 И Договоры.ТипДоговора В (&ТипыДоговоров)
	|		 И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		 И НЕ Договоры.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШапки.Организация,
	|	ДанныеШапки.Контрагент,
	|	ДанныеШапки.ПартнерКонтрагента,
	|	ДанныеШапки.Валюта
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Договоры.Ссылка) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеТаблицыНачисления.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_ДанныеТаблицыНачисления КАК ДанныеТаблицыНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицыНачисления.Партнер КАК Партнер,
	|	ДанныеТаблицыНачисления.Договор КАК Договор,
	|	СУММА(ДанныеТаблицыНачисления.Сумма) КАК Сумма,
	|	ЕСТЬNULL(ДанныеШапки.ДокументУсловий, ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовПоставщика.ПустаяСсылка)) КАК ДокументУсловий,
	|	ЕСТЬNULL(ДанныеШапки.НачалоПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоПериода,
	|	ЕСТЬNULL(ДанныеШапки.ОкончаниеПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеПериода
	|ИЗ
	|	ВТ_ДанныеТаблицыНачисления КАК ДанныеТаблицыНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеШапки КАК ДанныеШапки
	|		ПО ИСТИНА
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТаблицыНачисления.Партнер,
	|	ДанныеТаблицыНачисления.Договор,
	|	ЕСТЬNULL(ДанныеШапки.ДокументУсловий, ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовПоставщика.ПустаяСсылка)),
	|	ЕСТЬNULL(ДанныеШапки.ПартнерКонтрагента, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
	|	ЕСТЬNULL(ДанныеШапки.НачалоПериода, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ДанныеШапки.ОкончаниеПериода, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Контрагент КАК Контрагент,
	|	ДанныеШапки.ПартнерКонтрагента КАК Партнер,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК ГруппаФинансовогоУчета,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	ДанныеШапки.ТипБонуса КАК ТипБонуса
	|ИЗ
	|	ВТ_ДанныеШапки КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДанныеШапки.Организация = ДоговорыКонтрагентов.Организация
	|		 И ДанныеШапки.Контрагент = ДоговорыКонтрагентов.Контрагент
	|		 И ДанныеШапки.ПартнерКонтрагента = ДоговорыКонтрагентов.Партнер
	|		 И ДанныеШапки.Валюта = ДоговорыКонтрагентов.Валюта";
	
	ТипыДоговоров = Новый Массив; // Массив из ПеречислениеСсылка.ТипыДоговоров
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.Импорт);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.ВвозИзЕАЭС);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоклажедателем);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументНачисления);
	Запрос.УстановитьПараметр("ТипыДоговоров", ТипыДоговоров);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = РезультатыЗапроса.ВГраница();
	РезультатШапка = РезультатыЗапроса[КоличествоРезультатов].Выбрать();
	РезультатДанныеСтрок = РезультатыЗапроса[КоличествоРезультатов - 1].Выбрать();
	РезультатКонтрагенты = РезультатыЗапроса[КоличествоРезультатов - 2].Выбрать();
	
	Результат = Новый Структура;
	Результат.Вставить("Шапка", РезультатШапка);
	Результат.Вставить("ДанныеСтрок", РезультатДанныеСтрок);
	Результат.Вставить("Контрагенты", РезультатКонтрагенты);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ТекстЗапросаТаблицаРетроБонусыПоставщиков(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход) КАК ВидДвиженияРегистра,
	|	Шапка.Дата КАК Период,
	|	Шапка.Организация КАК Организация,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	Шапка.НачалоПериода КАК НачалоПериода,
	|	Шапка.ОкончаниеПериода КАК ОкончаниеПериода,
	|	Шапка.ДокументУсловий КАК ДокументУсловий,
	|	Шапка.Валюта КАК Валюта,
	|	СУММА(ДанныеТаблицы.СуммаБонусНачисленный) КАК Начислено,
	|	СУММА(0) КАК Актировано,
	|	СУММА(0) КАК Списано,
	|	СУММА(0) КАК КСписанию
	|ИЗ
	|	ДанныеДокументаТаблицаНачисления КАК ДанныеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК Шапка
	|		ПО ДанныеТаблицы.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	Шапка.Дата,
	|	Шапка.Организация,
	|	ДанныеТаблицы.Контрагент,
	|	ДанныеТаблицы.Партнер,
	|	ДанныеТаблицы.Договор,
	|	Шапка.НачалоПериода,
	|	Шапка.ОкончаниеПериода,
	|	Шапка.ДокументУсловий,
	|	Шапка.Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход)
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеТаблицы.СуммаБонусНачисленный) <> 0";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДанныеДокументаТаблицаНачисления",
			"Документ.НачислениеРетроБонусовПоставщика.Начисления");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДанныеДокумента

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)
	
	СписокЗапросов = Новый Массив; // Массив из Строка
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаНачисления(СписокЗапросов);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеДокумента.Валюта КАК Валюта
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.НачислениеРетроБонусовПоставщика КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаНачисления(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.Договор КАК Договор,
	|	ТаблицаДанных.Выручка КАК Выручка,
	|	ТаблицаДанных.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ТаблицаДанных.СуммаБонусРасчетный КАК СуммаБонусРасчетный,
	|	ТаблицаДанных.СуммаБонусНачисленный КАК СуммаБонусНачисленный
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаНачисления
	|ИЗ
	|	Документ.НачислениеРетроБонусовПоставщика.Начисления КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|	И ТаблицаДанных.СуммаБонусНачисленный <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Возвращаемое значение:
//  Строка
//
Функция ШаблонЗаголовкаДокумента() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВыводитьПолныеНаименованияРетроБонусовПоставщиков") Тогда
		
		ШаблонЗаголовкаДокумента = НСтр("ru = 'Начисление ретро-бонусов поставщика %1'");
		
	Иначе
		
		ШаблонЗаголовкаДокумента = НСтр("ru = 'Начисление РБ поставщика %1'");
		
	КонецЕсли;
	
	Возврат ШаблонЗаголовкаДокумента;
	
КонецФункции

#КонецОбласти
	
#КонецОбласти

#КонецЕсли