#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквзитыФормыИзПараметров(Параметры);
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ВыполняетсяЗакрытие И НЕ ВыполненаКомандаЗакрыть И Модифицированность Тогда
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Данные были изменены,
			| внесенные изменения будут отменены. Отменить и закрыть?'"),
			 РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.ОК Тогда
		Модифицированность	= Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры // ПередЗакрытиемЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ВыполненаКомандаЗакрыть = Истина;
	
	Если ТипПисьма = "ЭлектронноеПисьмоИсходящее" И ОтправленоПолучено = Дата(1, 1, 1) И Модифицированность Тогда
		Результат = Новый Структура("УведомитьОДоставке,УведомитьОПрочтении,Папка,Кодировка,Важность");
		ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект);
		Закрыть(Результат);
	ИначеЕсли ТипПисьма = "ЭлектронноеПисьмоВходящее" И Модифицированность Тогда
		Закрыть(Новый Структура("Кодировка", Кодировка));
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	СписокКодировок = СписокКодировок();
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКодировкуЗавершение", ЭтотОбъект);
	СписокКодировок.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите кодировку",
		 СписокКодировок.НайтиПоЗначению(НРег(Кодировка)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировкуЗавершение(ВыбраннаяКодировка, ДопПараметры) Экспорт
	
	Если ВыбраннаяКодировка <> Неопределено Тогда
		Кодировка = ВыбраннаяКодировка.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СписокКодировок()
	
	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",
		       НСтр("en='ibm852 (Central European DOS)';ru='ibm852 (Центральноевропейская DOS)'"));
	СписокКодировок.Добавить("ibm866",       НСтр("en='ibm866 (Cyrillic DOS)';ru='ibm866 (Кириллица DOS)'"));
	СписокКодировок.Добавить("iso-8859-1",
		   НСтр("en='iso-8859-1 (Western European ISO)';ru='iso-8859-1 (Западноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-2",
		   НСтр("en='iso-8859-2 (Central European ISO)';ru='iso-8859-2 (Центральноевропейская ISO)'"));
	СписокКодировок.Добавить("iso-8859-3",   НСтр("en='iso-8859-3 (Latin 3 ISO)';ru='iso-8859-3 (Латиница 3 ISO)'"));
	СписокКодировок.Добавить("iso-8859-4",   НСтр("en='iso-8859-4 (Baltic ISO)';ru='iso-8859-4 (Балтийская ISO)'"));
	СписокКодировок.Добавить("iso-8859-5",   НСтр("en='iso-8859-5 (Cyrillic ISO)';ru='iso-8859-5 (Кириллица ISO)'"));
	СписокКодировок.Добавить("iso-8859-7",   НСтр("en='iso-8859-7 (Greek ISO)';ru='iso-8859-7 (Греческая ISO)'"));
	СписокКодировок.Добавить("iso-8859-9",   НСтр("en='iso-8859-9 (Turkish ISO)';ru='iso-8859-9 (Турецкая ISO)'"));
	СписокКодировок.Добавить("iso-8859-15",  НСтр("en='iso-8859-15 (Latin 9 ISO)';ru='iso-8859-15 (Латиница 9 ISO)'"));
	СписокКодировок.Добавить("koi8-r",       НСтр("en='koi8-r (Cyrillic KOI8-R)';ru='koi8-r (Кириллица KOI8-R)'"));
	СписокКодировок.Добавить("koi8-u",       НСтр("en='koi8-u (Cyrillic KOI8-U)';ru='koi8-u (Кириллица KOI8-U)'"));
	СписокКодировок.Добавить("us-ascii",     НСтр("en='us-ascii USA';ru='us-ascii США'"));
	СписокКодировок.Добавить("utf-8",        НСтр("en='utf-8 (Unicode UTF-8)';ru='utf-8 (Юникод UTF-8)'"));
	СписокКодировок.Добавить("windows-1250",
		 НСтр("en='windows-1250 (Central European Windows)';ru='windows-1250 (Центральноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1251",
		 НСтр("en='windows-1251 (Cyrillic Windows)';ru='windows-1251 (Кириллица Windows)'"));
	СписокКодировок.Добавить("windows-1252",
		 НСтр("en='windows-1252 (Western European Windows)';ru='windows-1252 (Западноевропейская Windows)'"));
	СписокКодировок.Добавить("windows-1253",
		 НСтр("en='windows-1253 (Greek Windows)';ru='windows-1253 (Греческая Windows)'"));
	СписокКодировок.Добавить("windows-1254",
		 НСтр("en='windows-1254 (Turkish Windows)';ru='windows-1254 (Турецкая Windows)'"));
	СписокКодировок.Добавить("windows-1257",
		 НСтр("en='windows-1257 (Baltic Windows)';ru='windows-1257 (Балтийская Windows)'"));
	
	Возврат СписокКодировок;

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитФормыИзПараметра(Параметры, ИмяПараметра, ИмяРеквизита = "")

	Если Параметры.Свойство(ИмяПараметра) Тогда
		
		ЭтотОбъект[?(ПустаяСтрока(ИмяРеквизита), ИмяПараметра, ИмяРеквизита)] = Параметры[ИмяПараметра];
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквзитыФормыИзПараметров(Параметры)

	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "ВнутреннийНомер");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "ЗаголовкиИнтернета");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Создано");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Получено", "ОтправленоПолучено");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Отправлено", "ОтправленоПолучено");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "УведомитьОДоставке");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "УведомитьОПрочтении");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Письмо");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "ТипПисьма");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "УчетнаяЗапись");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Папка");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Кодировка");
	ЗаполнитьРеквизитФормыИзПараметра(Параметры, "Важность");
	
	// Папка = Письмо.CRM_Папка;
	ТекущаяПапка = Папка;

КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()

	Если ТипПисьма = "ЭлектронноеПисьмоИсходящее" Тогда
		Элементы.Заголовки.Заголовок = НСтр("ru='Идентификаторы';en='IDs'");
		Если ОтправленоПолучено = Дата(1, 1, 1) Тогда
			Элементы.УведомитьОДоставке.ТолькоПросмотр          = Ложь;
			Элементы.УведомитьОПрочтении.ТолькоПросмотр         = Ложь;
			Элементы.Важность.ТолькоПросмотр                    = Ложь;
		Иначе
			Элементы.Кодировка.ТолькоПросмотр = Истина;
			Элементы.ИзменитьКодировку.Доступность = Ложь;
			Элементы.Важность.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Элементы.ОтправленоПолучено.Заголовок = НСтр("ru='Получено';en='Received'");
		Элементы.Важность.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Папка.Доступность = ЗначениеЗаполнено(УчетнаяЗапись);
	
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
