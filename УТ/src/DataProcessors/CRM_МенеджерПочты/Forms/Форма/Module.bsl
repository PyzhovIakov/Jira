
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

&НаКлиенте
Перем ПринудительнаяАктивизацияСтроки;

&НаКлиенте
Перем ВыбраннаяПапка;

&НаКлиенте
Перем ПризнакОткрытияФормы;

// Переменная для команды контекстного меню по копированию гиперссылки в буфер обмена, 
// показывает, что нужно не обрабатывать клик для текущего обрабатываемого элемента HTML
&НаКлиенте
Перем НеОбрабатыватьКлик;

&НаКлиенте
Перем МоиДелаЭлементыОтбораСохраненные;

&НаКлиенте
Перем ПараметрыОткрытия;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	// Лицензирование
	Попытка
		Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
			CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'Почтовый клиент'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Работа почтового клиента в этом режиме не поддерживается!';
			|en='The operation of the mail customer in this mode is not supported!'"));
		Отказ = Истина;
		Возврат;
		
	КонецПопытки;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект,
		 Отказ,
		 СтандартнаяОбработка);
	
	// Доступ
	МодульУправлениеДоступом = CRM_ОбщегоНазначенияСервер.ОбщийМодуль("CRM_УправлениеДоступом");
	Если МодульУправлениеДоступом <> Неопределено Тогда
		МодульУправлениеДоступом.ОграничитьВыводКлиентскойБазы(ЭтотОбъект, "СписокПисем");
	КонецЕсли;
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	ЕстьПравоДобавленияУчетныхЗаписей = ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
	
	ПоказыватьМоиДела = ХранилищеОбщихНастроекЗагрузить("ПоказыватьМоиДела", "ПоказыватьМоиДела", Ложь);
	ПоказыватьМоиДелаТолькоПереданныеВручную =  ХранилищеОбщихНастроекЗагрузить(
		"ПоказыватьМоиДелаТолькоПереданныеВручную", "ПоказыватьМоиДелаТолькоПереданныеВручную", Ложь);
	
	// Оформление списка
	ЗаполнитьДеревоУчетныхЗаписей();
	
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка		= ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость								= ПоказатьСкрытьПисьмоПометка;
	УстановитьКартинкуЭлементаПоказатьСкрытьПисьмо();
	
	// Показать/Скрыть список учетных записей
	ПоказатьСписокУчетныхЗаписей = ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "СписокУчетныхЗаписей");
	Если ПоказатьСписокУчетныхЗаписей = Неопределено Тогда
		Элементы.ПанельУправления.Видимость = Истина;
		ХранилищеОбщихНастроекСохранить(ИмяФормы, "СписокУчетныхЗаписей", Истина);
	Иначе
		Элементы.ПанельУправления.Видимость = ПоказатьСписокУчетныхЗаписей;
	КонецЕсли;
	Если Элементы.ПанельУправления.Видимость Тогда
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Скрыть список учетных записей';
			|en='Hide Account List'");
	Иначе
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Показать список учетных записей';
			|en='Show Account List'");
	КонецЕсли;
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьЗаявки")
		 И (Пользователи.ЭтоПолноправныйПользователь()
		 Или РольДоступна("CRM_ДобавлениеИзменениеЗаявок"));
	
	Элементы.ПанельУправленияКонтекстноеМенюРедактироватьПапку.Видимость	= ЕстьПравоДобавленияУчетныхЗаписей;
	
	Элементы.ОткрытьНастройкиУчетныхЗаписей.Видимость = РольДоступна("ПолныеПрава")
		Или РольДоступна("CRM_ДобавлениеИзменениеБазовойНСИ")
		Или РольДоступна("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Задание =
			РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ПолучениеИОтправкаЭлектронныхПисем);
		Если Задание.Использование Тогда
			ПериодОтправкиПисем = Задание.Расписание.ПериодПовтораВТечениеДня;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаймаутОтметкиОПрочтении = ХранилищеОбщихНастроекЗагрузить("ТаймаутОтметкиОПрочтении", "ТаймаутОтметкиОПрочтении", 5);
	
	СформироватьHTMLОтображенияТекстаПисьма();
	
	// 0 - стандартный, 1 - горизонтальный, 2 - вертикальный
	РежимОтображения = ХранилищеОбщихНастроекЗагрузить("CRM_МенеджерПочты.РежимОтображения", "АРМПочта", 0);
	РасположитьОкнаСогласноРежимуОтображения(Ложь);
	
	CRM_СмещениеДатыТекущегоСеанса = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	СписокПисем.Параметры.УстановитьЗначениеПараметра("CRM_СмещениеДатыТекущегоСеанса", CRM_СмещениеДатыТекущегоСеанса);
	
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	
	НеОтображатьКартинкиПометка = ХранилищеОбщихНастроекЗагрузить("НеОтображатьКартинки", "НеОтображатьКартинки", Ложь);
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +Доступные пользователи
	МассивЭлементовОтбора = Новый Массив;
	МассивЭлементовОтбора.Добавить("Ответственный_Роль");
	УстановитьОтборВСпискеПоДоступнымпользователям(СписокПисем, МассивЭлементовОтбора, , Истина);
	// -Доступные пользователи
	
	УстановитьУО();
	
	// Заполняем массив с картинками расширений файлов
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2]);
	КонецЦикла;
	
	СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяПапка", Неопределено);
	
	АвтофокусВСпискеПисем = ХранилищеОбщихНастроекЗагрузить("АвтофокусВСпискеПисем", "АвтофокусВСпискеПисем", 0);
	Если АвтофокусВСпискеПисем = 0 Тогда
		Элементы.СписокПисем.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Начало;
	Иначе
		Элементы.СписокПисем.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	КонецЕсли;
	
	ЗапрещеноОтображениеНебезопасногоСодержимого = Взаимодействия.ЗапрещеноОтображениеНебезопасногоСодержимогоВПисьмах();
	
	Если Параметры.Свойство("CRM_КонтекстВызова") Тогда
		Если Параметры.CRM_КонтекстВызова = "УниверсальныйРабочийСтол" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.ОткрытиеВОдинКлик.ОткрытиеИзУниверсальногоРабочегоСтола");
		ИначеЕсли Параметры.CRM_КонтекстВызова = "Органайзер" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.ОткрытиеВОдинКлик.ОткрытиеИзРазделаОрганайзер");
		ИначеЕсли Параметры.CRM_КонтекстВызова = "Главное" Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.ОткрытиеВОдинКлик.ОткрытиеИзРазделаГлавное");
		КонецЕсли;
	Иначе
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_ЛоготипРабочегоСтола") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.ОткрытиеВОдинКлик.ОткрытиеБезКонтекста");
		КонецЕсли;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ТекущийПользователь  = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	МоиДелаИзменитьРежимОтображения(ПоказыватьМоиДела);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ПринудительнаяАктивизацияСтроки = Ложь;
	
	Если ДанныеУчетныхЗаписей.Количество() = 0 Тогда
		Если ЕстьПравоДобавленияУчетныхЗаписей Тогда
			ОповещениеВопрос = Новый ОписаниеОповещения("ПриОткрытииПродолжить", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Нет доступных учетных записей. Подключить новую?';en='No available accounts. Add new?'");
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекстСообщения = НСтр("ru='Нет доступных учетных записей. Для добавления обратитесь к администратору.';
				|en='No available accounts. Contact to administrator to add.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокПисем.АвтоОбновление Тогда
		ПодключитьОбработчикОжидания("ОбновитьКоличествоНовыхПисемВПапках", Элементы.СписокПисем.ПериодАвтоОбновления);
	КонецЕсли;
	
	Если ПоказыватьМоиДела И Элементы.МоиДелаСписокЗадач.АвтоОбновление Тогда
		ПодключитьОбработчикОжидания("МоиДелаОбновитьКоличествоПисем", Элементы.МоиДелаСписокЗадач.ПериодАвтоОбновления);
		ПодключитьОбработчикОжидания("Подключаемый_МоиДелаУстановитьНадписьДатыЗагрузки", 60, Ложь);
	КонецЕсли;
	
	Если ПоказыватьМоиДела Тогда
		МоиДелаУстановитьНадписьДатыЗагрузки();
	КонецЕсли;
	
	ВосстановитьСостояниеУзловДереваУчетныхЗаписей();
	
	ПризнакОткрытияФормы = Истина;
	
	Если ПериодОтправкиПисем > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьНадписьДатыЗагрузки", ПериодОтправкиПисем, Ложь);
	КонецЕсли;
	
	ПереместитьВ_ЗаполнитьСписокКоманд();
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) И ЗначениеЗаполнено(ВидПапкиВыбранный) Тогда
		УстановитьПапкуУчетнойЗаписи(УчетнаяЗаписьВыбранная, ВидПапкиВыбранный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ПомощникНастройкиУчетнойЗаписи",
			 , , , , ,
			 ОписаниеОповещенияОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		
		ОбновитьСоставПапок();
		
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ЗаписьВыполнена =
				CRM_НачалоРаботыСПрограммойВызовСервера.ЗаписатьНастроенныйРазделРешения(ПредопределенноеЗначение("Перечисление.CRM_РазделыНастройкиРешения.ПочтовыйКлиент"));
			Если ЗаписьВыполнена Тогда
				Оповестить("ОбновитьНастроенныеРазделы");
				CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент("Обработка.CRM_МенеджерПочты.Форма.Форма");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненаОтправкаПолучениеПисем" Тогда
		
		УстановитьНадписьДатыЗагрузки();
		ОбновитьКоличествоНовыхПисемВПапках();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "CRM_ПисьмоПеремещеноВПапку" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленФлагОбработано" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленНовыйОтветственный" ИЛИ ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		Если ПоказыватьМоиДела И ТипЗнч(Параметр) = Тип("Массив")
			И Параметр.Найти(МоиДелаТекущийПользователь) <> Неопределено Тогда
			МоиДелаУстановитьНадписьДатыЗагрузки();
			МоиДелаОбновитьКоличествоЗадач();
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МоиДелаСписокЗадач);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПолученыНовыеЭлектронныеПисьма" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "СохраненаЛичнаяЗадача"
		 И ТипЗнч(Параметр) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
		Если ПоказыватьМоиДела Тогда
			МоиДелаОбновитьКоличествоЗадач();
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МоиДелаСписокЗадач);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_УчетнаяЗаписьЭлектроннойПочты"
		 ИЛИ ИмяСобытия = "ИзмененыНастройкиСинхронизацииПапок" Тогда
		ОбновитьСоставПапок();
		Если ПоказыватьМоиДела Тогда
			МоиДелаОбновитьКоличествоЗадач();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагруженыВложения" Тогда
		
		ПринудительнаяАктивизацияСтроки = Истина;
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "ПринятиеОбращения" Тогда
		
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		
	ИначеЕсли ИмяСобытия = "ВключеноНебезопасноеСодержимое" Тогда
		
		ЭтоТекущееПисьмо = (ТекущееПисьмо = Параметр);
		ТекущееПисьмоВМассиве = ТипЗнч(Параметр) = Тип("Массив") 
			И Параметр.Найти(ТекущееПисьмо) <> Неопределено;
			
		Если ЭтоТекущееПисьмо Или ТекущееПисьмоВМассиве Тогда
			ПринудительнаяАктивизацияСтроки = Истина;
			ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагруженаИсторияПисем" Тогда
		
		УстановитьНадписьДатыЗагрузки();
		ОбновитьКоличествоНовыхПисемВПапках();
		
	ИначеЕсли ИмяСобытия = "ПослеЗаписиТега" Тогда
		
		ОбновитьУО(Параметр);
		
	ИначеЕсли ИмяСобытия = "CRM_ПереходВМенеджерПочтыИзПисьма" Тогда
		
		ПараметрыОткрытия = Параметр;
		СпозиционироватьсяНаПисьме();
		
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("ПолученыНовыеЭлектронныеПисьма") Тогда
		УстановитьНадписьДатыЗагрузки();
		ОбновитьКоличествоНовыхПисемВПапках();
		ПоказатьОповещениеПользователя(, , НСтр("ru='Почта получена ...';en='Mail received ...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	ПриЗакрытииНаСервере();
	СохранитьСостояниеУзловДереваУчетныхЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
	// Сохранение сортировки списка.
	//CRM_ОбщегоНазначенияСервер.СохранитьСортировкуСписка(СписокПисем, "Обработка.CRM_МенеджерПочты.СписокПисем");
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПоказатьСкрытьПисьмоПометка"] = Неопределено Тогда
		ПоказатьСкрытьПисьмоПометка	= Настройки["ПоказатьСкрытьПисьмоПометка"];
	Иначе
		ПоказатьСкрытьПисьмоПометка	= Истина;
	КонецЕсли;
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка	= ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость							= ПоказатьСкрытьПисьмоПометка;
	УстановитьКартинкуЭлементаПоказатьСкрытьПисьмо();
	
	Если ДанныеУчетныхЗаписей.Количество() > 0 Тогда
		НайденныеСтроки = ДанныеУчетныхЗаписей.НайтиСтроки(Новый Структура("Ссылка", УчетнаяЗаписьВыбранная));
		Если НайденныеСтроки.Количество() = 0 Тогда
			УчетнаяЗаписьВыбранная = ДеревоУчетныхЗаписей.ПолучитьЭлементы()[0].УчетнаяЗапись;
		КонецЕсли;
	Иначе
		УчетнаяЗаписьВыбранная = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено
		 ИЛИ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено Тогда
		ХранениеШириныКолонокРежимов	= Новый Структура;
	Иначе
		ХранениеШириныКолонокРежимов	= Настройки["ХранениеШириныКолонокРежимов"];
	КонецЕсли;
	
	ПоследнееАктивноеПисьмоВСписке = Настройки.Получить("ТекущееПисьмо");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПолученияПисемНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(УчетнаяЗаписьВыбранная);
		
		ОтправитьПолучитьПисьмаУчетныхЗаписей(МассивУчетныхЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПисьмаHTMLДокументСформирован(Элемент)
	
	Если Элементы.ОписаниеПисьмаHTML.Документ.links.length = 0 Тогда
		Возврат;
	КонецЕсли;
	
	CRM_БуферОбмена = " ";
	
	Элемент = Элементы.ОписаниеПисьмаHTML.Документ.getElementsByTagName("body")[0];
	Элемент.setAttribute("onmouseup", "if (event.button === 2) { event.preventDefault(); " 
		+ "this.setAttribute('class', 'rightClick'); this.click(); }");
	
	ВсеЭлементыСсылок = Элементы.ОписаниеПисьмаHTML.Документ.querySelectorAll("a");
	
	Для Каждого ТекущийЭлементСсылки Из ВсеЭлементыСсылок Цикл
		ТекущийЭлементСсылки.setAttribute("onmouseup", "if (event.button === 2) { event.preventDefault(); " 
			+ "this.setAttribute('class', 'rightClick'); this.click(); }");
		КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПисем

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоИспользованияПоляПоиск");
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	ОтобратьСписок(СтрокаПоиска, "Везде");

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	РаспознаваниеРечи();
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПриИзменении(Элемент)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиDel");
	ОбновитьКоличествоНовыхПисемВПапках();
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		Элементы.СписокПисемПринятьОбращение.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюПринятьОбращение.Видимость = Ложь;
		
		Элементы.СписокПисемОтклонитьОбращение.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюОтклонитьОбращение.Видимость = Ложь;
		
		Элементы.СписокПисемКонтекстноеМенюСтруктураПодчиненности.Доступность = Ложь;
		
		Элементы.СписокПисемСнятьУстановитьОтметкуОПрочтении.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюСнятьУстановитьОтметкуОПрочтении.Видимость = Ложь;
		
		Элементы.СписокПисемПеренаправить.Видимость = Ложь;
		Элементы.СписокПисемПеренаправитьНаРоль.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюГруппаПеренаправить.Видимость = Ложь;
		
		Если ИспользоватьЗаявки Тогда
			Элементы.СписокПисемДокументCRM_ЗаявкаСоздатьНаОсновании.Видимость = Ложь;
			Элементы.СписокПисемКонтекстноеМенюДокументCRM_ЗаявкаСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ПредупреждениеБезопасности.Видимость = Ложь;
		
		Элементы.СписокПисем.КонтекстноеМеню.Доступность = Ложь;
		Элементы.ГруппаКоманднаяПанельСписокПисем.Доступность = Ложь;
		
		Если ПоказатьСкрытьПисьмоПометка Тогда
			ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПисемПриАктивизацииСтроки", 0.25, Истина);
		Иначе
			ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.СписокПисем.КонтекстноеМеню.Доступность = Истина;
	Элементы.ГруппаКоманднаяПанельСписокПисем.Доступность = Истина;
	
	Элементы.СписокПисемКонтекстноеМенюСтруктураПодчиненности.Доступность = Истина;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Ложь;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветить.Доступность = Истина;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветитьВсем.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветить.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветитьВсем.Доступность = Истина;
		
		Элементы.СписокПисемПринятьОбращение.Видимость = Истина;
		Элементы.СписокПисемКонтекстноеМенюПринятьОбращение.Видимость = Истина;
		
		Элементы.СписокПисемОтклонитьОбращение.Видимость =
											(Элемент.ТекущиеДанные.СостояниеЛида = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый"));
		Элементы.СписокПисемКонтекстноеМенюОтклонитьОбращение.Видимость =
											(Элемент.ТекущиеДанные.СостояниеЛида = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый"));
		
		Элементы.СписокПисемСнятьУстановитьОтметкуОПрочтении.Видимость = Истина;
		Элементы.СписокПисемКонтекстноеМенюСнятьУстановитьОтметкуОПрочтении.Видимость = Истина;
		
		Элементы.СписокПисемПеренаправить.Видимость = Истина;
		Элементы.СписокПисемПеренаправитьНаРоль.Видимость = Истина;
		Элементы.СписокПисемКонтекстноеМенюГруппаПеренаправить.Видимость = Истина;
		
		Если ИспользоватьЗаявки Тогда
			Элементы.СписокПисемДокументCRM_ЗаявкаСоздатьНаОсновании.Доступность = Не УчетнаяЗаписьЯвляетсяИсточникомЛидов;
			Элементы.СписокПисемКонтекстноеМенюДокументCRM_ЗаявкаСоздатьНаОсновании.Доступность =
				Не УчетнаяЗаписьЯвляетсяИсточникомЛидов;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Истина;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветить.Доступность = Истина;
		Элементы.СписокПисемДокументЭлектронноеПисьмоВходящееОтветитьВсем.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветить.Доступность = Истина;
		Элементы.КонтекстноеМенюСписокПисемОтветитьВсем.Доступность = Истина;
		
		Элементы.СписокПисемПринятьОбращение.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюПринятьОбращение.Видимость = Ложь;
		
		Элементы.СписокПисемОтклонитьОбращение.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюОтклонитьОбращение.Видимость = Ложь;
		
		Элементы.СписокПисемСнятьУстановитьОтметкуОПрочтении.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюСнятьУстановитьОтметкуОПрочтении.Видимость = Ложь;
		
		Элементы.СписокПисемПеренаправить.Видимость = Ложь;
		Элементы.СписокПисемПеренаправитьНаРоль.Видимость = Ложь;
		Элементы.СписокПисемКонтекстноеМенюГруппаПеренаправить.Видимость = Ложь;
		
		Если ИспользоватьЗаявки Тогда
			Элементы.СписокПисемДокументCRM_ЗаявкаСоздатьНаОсновании.Видимость = Ложь;
			Элементы.СписокПисемКонтекстноеМенюДокументCRM_ЗаявкаСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ПредупреждениеБезопасности.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ПоказатьСкрытьПисьмоПометка Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПисемПриАктивизацииСтроки", 0.25, Истина);
	Иначе
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
	КонецЕсли;
	
	Если ТаймаутОтметкиОПрочтении > 0 Тогда
		ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", ТаймаутОтметкиОПрочтении, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		ПараметрыОткрытия = Новый Структура("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	Иначе
		ПараметрыОткрытия = Новый Структура("УчетнаяЗапись", Элемент.ТекущиеДанные.УчетнаяЗапись);
	КонецЕсли;
		
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда Возврат; КонецЕсли;
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(ТекущиеДанные.Ссылка);
	
	Если Поле.Имя = "СписокПисемИзбранный" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьСостояниеИзбранности(МассивПисем, НЕ ТекущиеДанные.Избранный);
		
	ИначеЕсли Поле.Имя = "СписокПисемРассмотрено" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИзменитьСостояниеПрочтенности(МассивПисем, НЕ ТекущиеДанные.Рассмотрено);
		
	ИначеЕсли СтрНайти(Поле.Имя, "Тег") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Владелец", ТекущееПодразделение);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные[Поле.Имя]);
		ДополнительныеПараметры = Новый Структура("Ссылка, Ячейка", ТекущиеДанные.Ссылка, Поле.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТегаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.CRM_Теги.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, КлючУникальности, , , 
			ОписаниеОповещения);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоВходящее.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
				"CRM_Статистика.Взаимодействия.ЭлектронноеПисьмоОтправленное.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");
		АвтоустановкаРассмотренностиПисьма();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМоиДелаСписокЗадач

&НаКлиенте
Процедура МоиДелаСписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МоиДелаСписокЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МоиДелаСписокЗадачПредметЗадачи" 
		И ЗначениеЗаполнено(ТекущиеДанные.ПредметЗадачи) Тогда
		
		Письмо = ТекущиеДанные.ПредметЗадачи;
		ПараметрыФормы = Новый Структура("Ключ", Письмо);
		
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы);
		Иначе 
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		
		ПоказатьЗначение(, ТекущиеДанные.Объект);
		ОтключитьОбработчикОжидания("МоиДелаАвтоустановкаРассмотренностиПисьма");
		МоиДелаАвтоустановкаРассмотренностиПисьма();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Главное

&НаКлиенте
Процедура Создать(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиНаписать");
	СоздатьОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучитьПисьма(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиОбновитьСлева");
	
	ТекущаяУчетнаяЗапись = Неопределено;
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ТекущаяУчетнаяЗапись);
		ОтправитьПолучитьПисьмаУчетныхЗаписей(МассивУчетныхЗаписей);
	Иначе
		МоиДелаОбновитьКоличествоЗадач();
		МоиДелаУстановитьНадписьДатыЗагрузки();
		Элементы.МоиДелаСписокЗадач.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиФильтр");
	
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	СтруктураФильтра = Новый Структура;
	
	СтруктураФильтра.Вставить("Период", ФильтрПериод);
	СтруктураФильтра.Вставить("Отправитель", ФильтрОтправитель);
	СтруктураФильтра.Вставить("Получатель", ФильтрПолучатель);
	СтруктураФильтра.Вставить("Тема", ФильтрТема);
	СтруктураФильтра.Вставить("ТекстПисьма", ФильтрТекстПисьма);
	СтруктураФильтра.Вставить("Ответственный", ФильтрОтветственный);
	СтруктураФильтра.Вставить("ПоказатьТолькоНепрочитанные", ФильтрПоказатьТолькоНепрочитанные);
	СтруктураФильтра.Вставить("НастройкиКомпоновки", ФильтрНастройкиКомпоновки);
	СтруктураФильтра.Вставить("ОтборТеги", ФильтрОтборТеги);
	
	ПараметрыОткрытия.Вставить("СтруктураФильтра", СтруктураФильтра);
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияФильтра,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтрЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьФильтр(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	
	УстановитьФильтр(ПустаяСтруктураФильтра());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПисьмо(Команда)
	
	ПоказатьСкрытьПисьмоНаСервере(НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка);
	
	УстановитьКартинкуЭлементаПоказатьСкрытьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРежимОтображения(Команда)

	Список = Новый СписокЗначений;
	Список.Добавить(0, НСтр("ru = 'Обычный'"), (РежимОтображения = 0), БиблиотекаКартинок.CRM_ПросмотрПисьмаСтандартный16);
	Список.Добавить(1, НСтр("ru = 'Горизонтальный'"), (РежимОтображения = 1),
		 БиблиотекаКартинок.CRM_ПросмотрПисьмаВоВсюШирину16);
	Список.Добавить(2, НСтр("ru = 'Вертикальный'"), (РежимОтображения = 2),
		 БиблиотекаКартинок.CRM_ПросмотрПисьмаВоВсюВысоту16);

	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюРежимОтображения", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.СписокПисемВыбратьРежимОтображения);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюРежимОтображения(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	
	РежимОтображения = ВыбранныйЭлемент.Значение;
	РасположитьОкнаСогласноРежимуОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройки(Команда)
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения("ОткрытьПерсональныеНастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АРМПочта");
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "ЭлектроннаяПочта");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещенияНастроек,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	
	ТаймаутОтметкиОПрочтении = ХранилищеОбщихНастроекЗагрузить("ТаймаутОтметкиОПрочтении", "ТаймаутОтметкиОПрочтении", 5);
	
	ВсеВложенияПометка = ХранилищеОбщихНастроекЗагрузить("ПоказыватьВсеВложения", "ПоказыватьВсеВложения", Ложь);
	УстановитьВложенияВHTML();
	
	Если ПоказыватьМоиДелаТолькоПереданныеВручную <> ХранилищеОбщихНастроекЗагрузить(
			"ПоказыватьМоиДелаТолькоПереданныеВручную", "ПоказыватьМоиДелаТолькоПереданныеВручную", Ложь) Тогда
		ПоказыватьМоиДелаТолькоПереданныеВручную = Не ПоказыватьМоиДелаТолькоПереданныеВручную;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			МоиДелаСписокЗадач,
			"ПереданВручную",
			Истина, , , ПоказыватьМоиДелаТолькоПереданныеВручную);
			МоиДелаОбновитьКоличествоЗадач();
	КонецЕсли;
	
	Если ПоказыватьМоиДела <> ХранилищеОбщихНастроекЗагрузить("ПоказыватьМоиДела", "ПоказыватьМоиДела", Ложь) Тогда
		ПоказыватьМоиДела = Не ПоказыватьМоиДела;
		ЗаполнитьДеревоУчетныхЗаписей(Ложь);
		МоиДелаИзменитьРежимОтображения(ПоказыватьМоиДела);
		Если ДанныеУчетныхЗаписей.Количество() > 0 Тогда
			ВосстановитьСостояниеУзловДереваУчетныхЗаписей();
		КонецЕсли;
	КонецЕсли;
	
	АвтофокусВСпискеПисем = ХранилищеОбщихНастроекЗагрузить("АвтофокусВСпискеПисем", "АвтофокусВСпискеПисем", Ложь);
	Если АвтофокусВСпискеПисем = 0 Тогда
		Элементы.СписокПисем.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Начало;
	Иначе
		Элементы.СписокПисем.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
	КонецЕсли;
	
	НеОтображатьКартинкиПометка = ХранилищеОбщихНастроекЗагрузить("НеОтображатьКартинки", "НеОтображатьКартинки", Ложь);
	ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМПочта"));
КонецПроцедуры

&НаКлиенте
Процедура Справка2(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("НастойкаУчетныхЗаписейПочты"));
КонецПроцедуры

&НаКлиенте
Процедура Справка3(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМПочтаВидео"));
КонецПроцедуры

&НаКлиенте
Процедура Справка4(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ШаблоныПисемВидео"));
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ВосстанавливатьФормуПриОткрытии",
		 Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюСоздать");
	СоздатьОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаОткрытьФильтрЗадач(Команда)
	
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("МоиДелаОткрытьФильтрЗадачЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборВключен", МоиДелаОтборВключен);
	СтруктураФильтра.Вставить("ВариантПериода", МоиДелаВариантПериода);
	СтруктураФильтра.Вставить("ТекущийПользователь", МоиДелаТекущийПользователь);
	СтруктураФильтра.Вставить("ТекущаяРоль", МоиДелаТекущаяРоль);
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", МоиДелаОтборПоРолиУстановлен);
	ПараметрыОткрытия.Вставить("СтруктураФильтра", СтруктураФильтра);
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.МоиДелаФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещенияФильтра, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаОткрытьФильтрЗадачЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		МоиДелаУстановитьФильтрЗадачНаСервере(Результат);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
		МоиДелаУстановитьНадписьДатыЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаПерейтиКЗадачам(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Отбор по предмету: %1'");
	Элементы.МоиДелаЗаголовокОтбораПоПисьму.Заголовок = СтрШаблон(ТекстЗаголовка, ТекущиеДанные.Ссылка);
	МоиДелаОтборПоПредметуУстановлен = Истина;
	
	МоиДелаЭлементыОтбораСохраненные = Новый Массив;
	Для Каждого Элемент Из МоиДелаСписокЗадач.Отбор.Элементы Цикл
		НовыйЭлемент = Новый Структура("Представление, Использование", 
			Элемент.Представление, Элемент.Использование);
		МоиДелаЭлементыОтбораСохраненные.Добавить(НовыйЭлемент);
		Элемент.Использование = Ложь;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ИзмерениеАРМ", "Мои дела");
	СтрокаМоиДела = МоиДелаИдентификаторыПапок.НайтиСтроки(ПараметрыОтбора)[0].Идентификатор;
	Элементы.ПанельУправления.ТекущаяСтрока = СтрокаМоиДела;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(МоиДелаСписокЗадач, "ПредметЗадачи", 
		ТекущиеДанные.Ссылка, ВидСравненияКомпоновкиДанных.Равно, "Отбор по предмету", Истина);
		
	МоиДелаОбновитьКоличествоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИсторииПереписки(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		Возврат; 
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДокументСсылка", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаИсторииПереписки", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ПанельУправления

&НаКлиенте
Процедура НастройкаСинхронизацииПапок(Команда)
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСинхронизацииПапок", 
		Новый Структура("УчетнаяЗапись", УчетнаяЗаписьВыбранная), ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПочтовуюПапку(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураТекущейУЗ = ПолучитьТекущуюУЗ();
	ПараметрыЗаполнения = Новый Структура("Владелец", СтруктураТекущейУЗ.Ключ);
	ПараметрыЗаполнения.Вставить("Родитель", ТекущиеДанные.Папка);
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ОписаниеОповещенияОкончание = Новый ОписаниеОповещения("РедактироватьПочтовыеПапкиОкончание", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаЭлемента", ПараметрыОткрытия,
		 ЭтотОбъект, , , ,
		 ОписаниеОповещенияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПочтовуюПапку(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураТекущейУЗ = ПолучитьТекущуюУЗ();	
	ПараметрыЗаполнения = Новый Структура("Владелец", СтруктураТекущейУЗ.Ключ);
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Папка);
	ОписаниеОповещенияОкончание = Новый ОписаниеОповещения("РедактироватьПочтовыеПапкиОкончание", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаЭлемента", ПараметрыОткрытия,
		 ЭтотОбъект, , , ,
		 ОписаниеОповещенияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПочтовыеПапки(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураТекущейУЗ = ПолучитьТекущуюУЗ();
	СтруктураОтбора = Новый Структура("Владелец", СтруктураТекущейУЗ.Ключ);
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОписаниеОповещенияОкончание = Новый ОписаниеОповещения("РедактироватьПочтовыеПапкиОкончание", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПапкиЭлектронныхПисем.Форма.CRM_ФормаСписка", ПараметрыОткрытия,
		 ЭтотОбъект, , , ,
		 ОписаниеОповещенияОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПочтовыеПапкиОкончание(Параметры, Дополнительно) Экспорт
	
	ОбновитьСоставПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработки(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураТекущейУЗ = ПолучитьТекущуюУЗ();
	СтруктураОтбора = Новый Структура("Владелец", СтруктураТекущейУЗ.Ключ);
	ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.ПравилаОбработкиЭлектроннойПочты.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПравилаОбработки(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", ТекущиеДанные.УчетнаяЗапись);
	ФормаФильтра = ПолучитьФорму("Справочник.ПравилаОбработкиЭлектроннойПочты.Форма.ПрименениеПравил", ПараметрыФормы);
	Если ФормаФильтра = Неопределено Тогда Возврат; КонецЕсли;	
	ФормаФильтра.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваУчетнойЗаписи(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиНастройкаУчетнойЗаписиВДеревеСлева");
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьТекущуюУЗ();
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставПапок()
	
	ЗаполнитьДеревоУчетныхЗаписей(Ложь);
	
	Если ДанныеУчетныхЗаписей.Количество() > 0 Тогда
		ВосстановитьСостояниеУзловДереваУчетныхЗаписей();
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУчетнуюЗаписьВверх(Команда)
	ПереместитьУчетнуюЗапись(-1);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУчетнуюЗаписьВниз(Команда)
	ПереместитьУчетнуюЗапись(1);
КонецПроцедуры

#КонецОбласти

#Область СписокПисем

&НаКлиенте
Процедура Ответить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиОтветить");
	СоздатьПисьмоНаОсновании("Ответить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиОтветитьВсем");
	СоздатьПисьмоНаОсновании("ОтветитьВсем");
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиПереслать");
	СоздатьПисьмоНаОсновании("Переслать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиПринятьОбращение");
	ПринятьОбращениеОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(ТекущиеДанные.Ссылка);
	
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках(МассивПисем, Ложь);
	ЕстьЛидыСУказаниемПричиныОтклонения = ЕстьЛидыВВыбранныхСтроках(МассивПисем, Истина);
	
	Если ЕстьЛиды Тогда
		Если ЕстьЛидыСУказаниемПричиныОтклонения Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, Истина);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
				 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
				ЗадатьВопросПриПереносеВОбработанные();
			Иначе
				ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет обращений для отклонения.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(Результат);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, Результат);
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПереместитьВПапку(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиПереместитьВПапку");
	Оповещение = Новый ОписаниеОповещения("ВыбратьПереместитьВПапкуЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокПереместитьВПапку(), Элементы.СписокПисемПереместитьВПапку);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПереместитьВПапкуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	
	СсылкаНаПапку = ВыбранныйЭлемент.Значение;
	Если Не ЗначениеЗаполнено(СсылкаНаПапку) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокПисем.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// действие
	МассивПеремещаемыхПисем = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокПисем.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПеремещаемыхПисем.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
		
	ПодготовитьПеремещениеПисем(СтруктураПапки(СсылкаНаПапку), МассивПеремещаемыхПисем);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиПеренаправитьДругомуОтветственному");
	ПеренаправитьОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРоль(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиПеренаправитьНаРоль");
	ПеренаправитьНаРольОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура Избранный(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиУстановитьСнятьПометкуЗвездочка");
	
	ЕстьИзбранныеПисьма = Ложь;
	ЕстьНеизбранныеПисьма = Ложь;
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисем = Новый Массив;
	Для Каждого Строка Из ВыделенныеПисьма Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПисем.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Для Каждого Строка Из ВыделенныеПисьма Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Избранный Тогда
			ЕстьИзбранныеПисьма = Истина;
		Иначе
			ЕстьНеизбранныеПисьма = Истина;
		КонецЕсли;
		
		Если ЕстьИзбранныеПисьма И ЕстьНеизбранныеПисьма Тогда
			ИзменитьСостояниеИзбранности(МассивПисем, Истина);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьИзбранный = ЕстьНеизбранныеПисьма;
	ИзменитьСостояниеИзбранности(МассивПисем, УстановитьИзбранный);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьОтметкуОПрочтении(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиУстановитьСнятьПометкуОПрочтении");
	
	ВыделенныеСтроки = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитанныеПисьма = Новый Массив;
	НепрочитанныеПисьма = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Рассмотрено Тогда
			ПрочитанныеПисьма.Добавить(ДанныеСтроки.Ссылка);
		Иначе
			НепрочитанныеПисьма.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочитанныеПисьма.Количество() > 0 Тогда
		ИзменитьСостояниеПрочтенности(НепрочитанныеПисьма, Истина);
	Иначе
		ИзменитьСостояниеПрочтенности(ПрочитанныеПисьма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Печать(Команда)
	
	ВыделенныеСтроки = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбъектыПечати = СформироватьМассивДанныхПисемДляПечати(ВыделенныеСтроки);
	
	CRM_УправлениеПечатьюКлиент.CRM_Почта_ПечатьЭлектронноеПисьмоHTML(ОбъектыПечати);

КонецПроцедуры

&НаКлиенте
Процедура ПереслатьКакВложенияКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюОтветить");
	СоздатьПисьмоНаОсновании("ПереслатьКакВложения");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакВложенияКонтекстноеМеню(Команда)
	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;
	ПроверкаСуществованияФайлов = Истина;
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеПисьма = Новый Массив;
	ВыделенныеСтроки = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ВыделенныеПисьма.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	ВыделенныеПисьма = CRM_УправлениеЭлектроннойПочтой.ИсключитьПисьмаСОчищеннымиВложениями(ВыделенныеПисьма);
	
	КоличествоВложений = ВыделенныеПисьма.Количество();
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеПисьма, КоличествоВложений, Ложь);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПисьмаПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПисьмаПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПисьмаПослеВыбораКаталога", ЭтотОбъект,
			 ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
		Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				ТекущееВложение = Вложения[НомерВложения];
				ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение.Ссылка,
					 УникальныйИдентификатор);
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПисьмаПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловПисемНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда
		ТекущееВложение = ВыделенныеВложения[ТекущийНомерВложения];
		ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение,
			 УникальныйИдентификатор);
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
		ДополнительныеПараметры.Вставить("СохранениеПисем", Истина);
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловПисемНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда
		ТекущееВложение = ВыделенныеВложения[ТекущийНомерВложения];
		//ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекущееВложение, УникальныйИдентификатор);
		ДанныеФайла = CRM_УправлениеЭлектроннойПочтой.ДанныеПисьмаДляСохраненияКакФайл(ТекущееВложение,
			 УникальныйИдентификатор);
		ПолноеИмяФайла = КаталогСохранения + ДанныеФайла.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);
		ДополнительныеПараметры.Вставить("СохранениеПисем", Истина);
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПисьмаПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюОтветить");
	СоздатьПисьмоНаОсновании("Ответить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсемКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюОтветитьВсем");
	СоздатьПисьмоНаОсновании("ОтветитьВсем");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюПереслать");
	СоздатьПисьмоНаОсновании("Переслать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюПринятьОбращение");
	ПринятьОбращениеОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюПеренаправить");
	ПеренаправитьОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРольКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюПеренаправитьНаРоль");
	ПеренаправитьНаРольОбщая();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьОтметкуОПрочтенииКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюУстановитьСнятьПометкуОПрочтении");
	
	ВыделенныеСтроки = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитанныеПисьма = Новый Массив;
	НепрочитанныеПисьма = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Рассмотрено Тогда
			ПрочитанныеПисьма.Добавить(ДанныеСтроки.Ссылка);
		Иначе
			НепрочитанныеПисьма.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочитанныеПисьма.Количество() > 0 Тогда
		ИзменитьСостояниеПрочтенности(НепрочитанныеПисьма, Истина);
	Иначе
		ИзменитьСостояниеПрочтенности(ПрочитанныеПисьма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранныйКонтекстноеМеню(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиКонтекстноеМенюУстановитьСнятьПометкуЗвездочка");
	
	ЕстьИзбранныеПисьма = Ложь;
	ЕстьНеизбранныеПисьма = Ложь;
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	Если ВыделенныеПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПисем = Новый Массив;
	Для Каждого Строка Из ВыделенныеПисьма Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПисем.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Для Каждого Строка Из ВыделенныеПисьма Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.Избранный Тогда
			ЕстьИзбранныеПисьма = Истина;
		Иначе
			ЕстьНеизбранныеПисьма = Истина;
		КонецЕсли;
		
		Если ЕстьИзбранныеПисьма И ЕстьНеизбранныеПисьма Тогда
			ИзменитьСостояниеИзбранности(МассивПисем, Истина);
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьИзбранный = ЕстьНеизбранныеПисьма;
	ИзменитьСостояниеИзбранности(МассивПисем, УстановитьИзбранный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКакСпам(Команда)
	
	МассивПеремещаемыхПисем = Новый Массив;
	ПапкаНежелательнаяПочта = ПапкаНежелательнаяПочтаУчетнойЗаписи(УчетнаяЗаписьВыбранная);
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокПисем.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПеремещаемыхПисем.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	ПодготовитьПеремещениеПисем(СтруктураПапки(ПапкаНежелательнаяПочта), МассивПеремещаемыхПисем);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьПолучитьПисьмаВсехУчетныхЗаписей()
	
	МассивУчетныхЗаписей = Новый Массив;
	
	КоллекцияЭлементовДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУчетныхЗаписей.Добавить(СтрокаДерева.УчетнаяЗапись);
		
	КонецЦикла;
	
	ОтправитьПолучитьПисьмаУчетныхЗаписей(МассивУчетныхЗаписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучитьПисьмаУчетныхЗаписей(УчетныеЗаписиПользователя)
	
	ОчиститьСообщения();
	
	Результат = ПолучитьПочту(УчетныеЗаписиПользователя);
	
	Если Результат = "" Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.ОтправитьЗагрузитьПочтуПользователя(
			УникальныйИдентификатор, ЭтотОбъект, Элементы.СписокПисем, Ложь, УчетныеЗаписиПользователя);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУчетныхЗаписей(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийКнопкиНастройкаУчетнойЗаписиВДеревеСлева");
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗагрузитьПисьма(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Взаимодействия.НастройкаУчетнойЗаписи.Удобство.КоличествоНажатийГиперссылкиЗагрузкаПочтыЗаПериод");
	
	ПараметрыФормы = ПолучитьТекущуюУЗ();
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ФормаЗагрузкиИсторииПисем", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

// Открывает форму контакта/клиента из текущей строки с фильтром по электронным письмам, 
// либо отбирает письма в списке по адресу отправителя при отсутствии контакта/клиента
// 
// Параметры:
//  Команда  - Обрабатываемая команда
//
&НаКлиенте
Процедура ПоказатьВсеПисьмаОтправителя(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контакт) 
		И ТипЗнч(ТекущиеДанные.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Ключ = ТекущиеДанные.Контакт;
		ИмяОткрываемойФормы = "Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаЭлементаНовая";
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда
		Ключ = ТекущиеДанные.Клиент;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			ИмяОткрываемойФормы = "Справочник.Партнеры.Форма.CRM_ФормаЭлементаНовая";
		Иначе
			ИмяОткрываемойФормы = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагентаНовая";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Контакт) 
		И ТипЗнч(ТекущиеДанные.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Ключ = ТекущиеДанные.Контакт;
		ИмяОткрываемойФормы = "Справочник.CRM_ПотенциальныеКлиенты.Форма.ФормаЭлемента";
	Иначе
		Ключ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ключ) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Письма", Истина);
		ПараметрыОтбора.Вставить("ВходящиеПисьма", Истина);
		ПараметрыОтбора.Вставить("ИсходящиеПисьма", Истина);
		ПараметрыОткрытия = Новый Структура ("Ключ, ПараметрыОтбора", Ключ, ПараметрыОтбора);
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия);
	Иначе
		ОтобратьСписок(ТекущиеДанные.АдресОтправителя, "Адрес");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКорзину(Команда)
	
	ОчиститьКорзинуНаСервере(Элементы.ПанельУправления.ТекущиеДанные.УчетнаяЗапись);
	Элементы.СписокПисем.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКорзинуНаСервере(УчетнаяЗапись)
	
	Дерево = РеквизитФормыВЗначение("ДеревоУчетныхЗаписей", Тип("ДеревоЗначений"));
	МассивСтрокПапокУчетнойЗаписи = Дерево.Строки.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗапись), Истина);
	ПапкиКорзины = Новый Массив;
	Для Каждого Строка Из МассивСтрокПапокУчетнойЗаписи Цикл
		Если Строка.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
			ПапкиКорзины.Добавить(Строка.Папка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Почта.Ссылка КАК Письмо,
		|	CRM_СкрытыеПисьма.Письмо КАК СкрытоеПисьмо
		|ИЗ
		|	ЖурналДокументов.CRM_Почта КАК CRM_Почта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиВзаимодействий КАК CRM_ПапкиВзаимодействий
		|		ПО CRM_Почта.Ссылка = CRM_ПапкиВзаимодействий.Взаимодействие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СкрытыеПисьма КАК CRM_СкрытыеПисьма
		|		ПО CRM_Почта.УчетнаяЗапись = CRM_СкрытыеПисьма.УчетнаяЗапись
		|			И CRM_Почта.Ссылка = CRM_СкрытыеПисьма.Письмо
		|ГДЕ
		|	CRM_ПапкиВзаимодействий.ПапкаЭлектронногоПисьма В(&ПапкиКорзины)
		|	И CRM_СкрытыеПисьма.Письмо ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ПапкиКорзины", ПапкиКорзины);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_СкрытыеПисьма.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
		МенеджерЗаписи.Письмо = ВыборкаДетальныеЗаписи.Письмо;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытыеПисьма(Команда)
	
	Элементы.СписокПисемПоказатьСкрытыеПисьма.Пометка = Не Элементы.СписокПисемПоказатьСкрытыеПисьма.Пометка;
	НастроитьОтборПоСкрытымПисьмам(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаСнятьУстановитьОтметкуОПрочтении(Команда)
	
	ВыделенныеСтроки = Элементы.МоиДелаСписокЗадач.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитанныеПисьма = Новый Массив;
	НепрочитанныеПисьма = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.МоиДелаСписокЗадач.ДанныеСтроки(Строка);
		
		Если ДанныеСтроки.Рассмотрено Тогда
			ПрочитанныеПисьма.Добавить(ДанныеСтроки.Объект);
		Иначе
			НепрочитанныеПисьма.Добавить(ДанныеСтроки.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочитанныеПисьма.Количество() > 0 Тогда
		МоиДелаИзменитьСостояниеПрочтенности(НепрочитанныеПисьма, Истина);
	Иначе
		МоиДелаИзменитьСостояниеПрочтенности(ПрочитанныеПисьма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаОчиститьФильтрЗадач(Команда)
	МоиДелаОчиститьФильтрЗадачНаСервере();
	МоиДелаУстановитьНадписьДатыЗагрузки();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Главное

&НаКлиенте
Процедура УстановитьФильтр(Результат)
	
	// Сброс и блокировка строки поиска
	СтрокаПоиска = "";
	Элементы.СтрокаПоиска.Доступность = Ложь;
	
	Для Каждого ЭлементСтруктуры Из Результат Цикл
		ЭтотОбъект["Фильтр" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	// Установка/сброс фильтров:
	
	// Используем "ДобавитьЭлементКомпоновки" вместо "УстановитьЭлементОтбора", потому что в группе 2 поля с одним именем.
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокПисем, "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокПисем, , "Отбор по тегам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокПисем.Отбор, "Дата",
		 ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
															ФильтрПериод.ДатаНачала, , ЗначениеЗаполнено(ФильтрПериод.ДатаНачала));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(СписокПисем.Отбор, "Дата",
		 ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
															КонецДня(ФильтрПериод.ДатаОкончания), , ЗначениеЗаполнено(ФильтрПериод.ДатаОкончания));
	
	ОтобратьСписок("", "Везде", Истина);
	
	ПоказатьТолькоНепрочитанные(ФильтрПоказатьТолькоНепрочитанные);
	
	Теги = Новый Массив;
	Для Каждого ЭлементТегов Из ФильтрОтборТеги Цикл
		Теги.Добавить(ЭлементТегов.Значение);
	КонецЦикла;
	
	Если Теги.Количество() > 0 Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокПисем.Отбор, "Отбор по тегам", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Тег1", 
			ВидСравненияКомпоновкиДанных.ВСписке, Теги, "Отбор по тегу1", Истина);
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Тег2", 
			ВидСравненияКомпоновкиДанных.ВСписке, Теги, "Отбор по тегу2", Истина);
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Тег3", 
			ВидСравненияКомпоновкиДанных.ВСписке, Теги, "Отбор по тегу3", Истина);
	КонецЕсли;
	
	УстановитьФильтрНаСервере();
	
	// Разблокирование строки поиска
	Если КоличествоФильтров = 0 Тогда
		Элементы.СтрокаПоиска.Доступность = Истина;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере()
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ФильтрОтветственный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем,
		"Ответственный_Роль", ФильтрОтветственный, ВидСравненияКомпоновкиДанных.Равно, ,
		ИспользоватьОтбор);
	
	Если Константы.CRM_ИспользоватьДоступныхПользователей.Получить() Тогда
		// +Доступные пользователи
		МассивЭлементовОтбора = Новый Массив;
		МассивЭлементовОтбора.Добавить("Ответственный_Роль");
		
		МассивДоступныхПользователей = Неопределено;
		Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
			МассивДоступныхПользователей = Новый Массив;
			МассивДоступныхПользователей.Добавить(ФильтрОтветственный);
		Иначе
			МассивДоступныхПользователей = Новый Массив;
		КонецЕсли;
		
		УстановитьОтборВСпискеПоДоступнымпользователям(СписокПисем, МассивЭлементовОтбора,
			МассивДоступныхПользователей, Истина);
		// -Доступные пользователи
	КонецЕсли;
	
	// Оформление команды Фильтр
	КоличествоФильтров = 0;
	ПустойФильтр = ПустаяСтруктураФильтра();
	СтрокаФильтр = "Фильтр";
	Для Каждого ЭлементСтруктуры Из ПустойФильтр Цикл
		Если ЭтотОбъект[СтрокаФильтр + ЭлементСтруктуры.Ключ] <> ЭлементСтруктуры.Значение Тогда
			КоличествоФильтровНеИзменилось = (ЭлементСтруктуры.Ключ = "Ответственный_Роль"
				И ЭтотОбъект[СтрокаФильтр + ЭлементСтруктуры.Ключ] = Неопределено)
				Или (ЭлементСтруктуры.Ключ = "ОтборТеги" И ЭтотОбъект[СтрокаФильтр + ЭлементСтруктуры.Ключ].Количество() = 0);
			Если КоличествоФильтровНеИзменилось Тогда
				Продолжить;
			КонецЕсли;
			КоличествоФильтров = КоличествоФильтров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ОткрытьФильтр.Заголовок = ?(КоличествоФильтров > 0, НСтр("ru='Фильтр: ';en='Filter: '") 
		+ КоличествоФильтров,
		 НСтр("ru='Фильтр';en='Filter'"));
	Элементы.ОткрытьФильтр.Картинка = ?(КоличествоФильтров > 0, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.ОткрытьФильтр.ЦветТекста = ?(КоличествоФильтров > 0, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураФильтра()
	
	СтруктураФильтра = Новый Структура;
	
	СтруктураФильтра.Вставить("Период", Новый СтандартныйПериод);
	СтруктураФильтра.Вставить("Отправитель", "");
	СтруктураФильтра.Вставить("Получатель", "");
	СтруктураФильтра.Вставить("Тема", "");
	СтруктураФильтра.Вставить("ТекстПисьма", "");
	СтруктураФильтра.Вставить("Ответственный", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	СтруктураФильтра.Вставить("ПоказатьТолькоНепрочитанные", Ложь);
	СтруктураФильтра.Вставить("НастройкиКомпоновки", Неопределено);
	СтруктураФильтра.Вставить("ОтборТеги", Новый СписокЗначений);
	
	Возврат СтруктураФильтра;
	
КонецФункции

&НаСервере
Процедура РасположитьОкнаСогласноРежимуОтображения(ВключатьОтображениеПисьма = Истина)
		
	// Включение отображения письма
	Если ВключатьОтображениеПисьма И НЕ ПоказатьСкрытьПисьмоПометка Тогда
		ПоказатьСкрытьПисьмоНаСервере(Истина);
	КонецЕсли;

	ХранилищеОбщихНастроекСохранить("CRM_МенеджерПочты.РежимОтображения", "АРМПочта", РежимОтображения);
	
	Если РежимОтображения = 0 Тогда // Стандартный вид
		Элементы.ГруппаПисьма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ТелоВложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Элементы.Переместить(Элементы.Описание, Элементы.ГруппаПисьмаОписание);
	ИначеЕсли РежимОтображения = 1 Тогда // Горизонтальный вид
		Элементы.ГруппаПисьма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ТелоВложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		Элементы.Переместить(Элементы.Описание, Элементы.ГруппаПодвал);
	ИначеЕсли РежимОтображения = 2 Тогда // Вертикальный вид
		Элементы.ГруппаПисьма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ТелоВложения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.Переместить(Элементы.Описание, Элементы.ГруппаГоризонтальная2);
	КонецЕсли;
	
	УстановитьКартинкуЭлементаПоказатьСкрытьПисьмо();
	
	УстановитьВложенияВHTMLНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ПанельУправления

&НаСервере
Процедура ЗаполнитьДеревоУчетныхЗаписей(ОбновлятьУчетныеЗаписи = Истина, ОбновлятьПапки = Истина)
	
	ПоказыватьПодменюВыбораУчетнойЗаписи = Ложь;
	ДоступныеДляОтправкиУчетныеЗаписи = Новый СписокЗначений;
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(ДоступныеДляОтправкиУчетныеЗаписи);
	
	// Данные учетных записей
	ДанныеУчетныхЗаписей.Очистить();
	УчетныеЗаписи = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписи.Ссылка КАК Ссылка,
		|	УчетныеЗаписи.Наименование КАК Наименование,
		|	УчетныеЗаписи.CRM_СинхронизироватьПапкиСПочтовымСервером КАК СинхронизироватьПапки,
		|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписи.Ссылка) КАК Представление,
		|	УчетныеЗаписи.ИспользоватьДляПолучения КАК ИспользоватьДляПолучения
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК НастройкиУчетныхЗаписей
		|		ПО (НастройкиУчетныхЗаписей.УчетнаяЗапись = УчетныеЗаписи.Ссылка)
		|			И НастройкиУчетныхЗаписей.Пользователь В(&Пользователь)
		|ГДЕ
		|	НЕ УчетныеЗаписи.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УчетныеЗаписи.Ссылка,
		|	УчетныеЗаписи.Наименование,
		|	УчетныеЗаписи.CRM_СинхронизироватьПапкиСПочтовымСервером,
		|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписи.Ссылка),
		|	УчетныеЗаписи.ИспользоватьДляПолучения
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
		|ГДЕ
		|	УчетныеЗаписи.CRM_ЭтоОбщаяУчетнаяЗапись
		|	И НЕ УчетныеЗаписи.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	Запрос.УстановитьПараметр("Пользователь", РолиПользователя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеУчетныхЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ДоступныеДляОтправкиУчетныеЗаписи.НайтиПоЗначению(Выборка.Ссылка) <> Неопределено Тогда
			НоваяСтрока.ОтправкаРазрешена = Истина;
		КонецЕсли;
		
		УчетныеЗаписи.Добавить(Выборка.Ссылка);
		
		Если Не ПоказыватьПодменюВыбораУчетнойЗаписи И НоваяСтрока.ИспользоватьДляПолучения Тогда
			ПоказыватьПодменюВыбораУчетнойЗаписи = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Данные папок
	ДанныеПапок.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
	|	ПапкиЭлектронныхПисем.Родитель КАК Родитель,
	|	ПапкиЭлектронныхПисем.Владелец КАК УчетнаяЗапись,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ПапкиУчетныхЗаписей.ВидПапки, ПапкиЭлектронныхПисем.Ссылка)) КАК Представление,
	|	ЕСТЬNULL(ПапкиУчетныхЗаписей.ВидПапки, ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка)) КАК ВидПапки,
	|	УчетныеЗаписи.ИспользоватьДляПолучения КАК ИспользоватьДляПолучения
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
	|		ПО (УчетныеЗаписи.Ссылка = ПапкиЭлектронныхПисем.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
	|		ПО (ПапкиУчетныхЗаписей.Папка = ПапкиЭлектронныхПисем.Ссылка)
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
	|	И НЕ ПапкиЭлектронныхПисем.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА УчетныеЗаписи.CRM_ОтображатьТолькоПодписанныеПапки
	|				ТОГДА ПапкиЭлектронныхПисем.CRM_Подписаться
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ

	|УПОРЯДОЧИТЬ ПО
	|	ПапкиЭлектронныхПисем.Владелец.Наименование,
	|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
	|");
	
	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетныеЗаписи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеПапок.Добавить(), Выборка);
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеПапок Цикл
		НайденныеСтроки = ДанныеПапок.НайтиСтроки(Новый Структура("Ссылка", Строка.Родитель));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Строка.Родитель = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Иерархия
	ЭлементыДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если ПоказыватьМоиДела Тогда
		МоиДелаДобавитьПапки();
	КонецЕсли;
	
	Для Каждого ДанныеУчетнойЗаписи Из ДанныеУчетныхЗаписей Цикл
		
		НоваяУчетнаяЗапись = ЭлементыДерева.Добавить();
		НоваяУчетнаяЗапись.Картинка					= -1;
		НоваяУчетнаяЗапись.Наименование				= ДанныеУчетнойЗаписи.Представление;
		НоваяУчетнаяЗапись.УчетнаяЗапись			= ДанныеУчетнойЗаписи.Ссылка;
		НоваяУчетнаяЗапись.СинхронизироватьПапки	= ДанныеУчетнойЗаписи.СинхронизироватьПапки;
		НоваяУчетнаяЗапись.ИспользоватьДляПолучения	= ДанныеУчетнойЗаписи.ИспользоватьДляПолучения;
		
		ДанныеОтбора = Новый Структура("УчетнаяЗапись,Родитель",
			ДанныеУчетнойЗаписи.Ссылка, Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка());
		
		НайденныеСтроки = ДанныеПапок.НайтиСтроки(ДанныеОтбора);
		Для Каждого ДанныеПапки Из НайденныеСтроки Цикл
			ДобавитьСтрокуВДеревоПапок(ДанныеПапки, НоваяУчетнаяЗапись.ПолучитьЭлементы(), ДанныеПапок);
		КонецЦикла;
		
	КонецЦикла;
	
	// Количество новых писем
	ОбновитьКоличествоНепрочитанных(ЭтотОбъект);
	
	Элементы.ОтправитьПолучитьПисьма_ВыбратьУчетнуюЗапись.Видимость = ПоказыватьПодменюВыбораУчетнойЗаписи;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВДеревоПапок(ДанныеПапки, Коллекция, ВсеДанныеПапок, ВидПапки = Неопределено)
	
	НоваяСтрока = Коллекция.Добавить();
	ДанныеПапки.ИдентификаторВДереве = НоваяСтрока.ПолучитьИдентификатор();
	
	НоваяСтрока.Наименование	= ДанныеПапки.Представление;
	НоваяСтрока.УчетнаяЗапись	= ДанныеПапки.УчетнаяЗапись;
	НоваяСтрока.Папка			= ДанныеПапки.Ссылка;
	НоваяСтрока.ИспользоватьДляПолучения = ДанныеПапки.ИспользоватьДляПолучения;
	Если ВидПапки = Неопределено Тогда
		ВидПапки = ДанныеПапки.ВидПапки;
	КонецЕсли;
	НоваяСтрока.ВидПапки		= ВидПапки;
	
	Если ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
		НоваяСтрока.Картинка	= 0;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
		НоваяСтрока.Картинка	= 1;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные Тогда
		НоваяСтрока.Картинка	= 2;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики Тогда
		НоваяСтрока.Картинка	= 3;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
		НоваяСтрока.Картинка	= 4;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные Тогда
		НоваяСтрока.Картинка	= 6;
	ИначеЕсли ДанныеПапки.ВидПапки = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
		НоваяСтрока.Картинка	= 7;
	Иначе
		НоваяСтрока.Картинка	= 8;
	КонецЕсли;
	
	ДанныеОтбора = Новый Структура("УчетнаяЗапись,Родитель",
		ДанныеПапки.УчетнаяЗапись, ДанныеПапки.Ссылка);
	
	НайденныеСтроки = ВсеДанныеПапок.НайтиСтроки(ДанныеОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДобавитьСтрокуВДеревоПапок(НайденнаяСтрока, НоваяСтрока.ПолучитьЭлементы(), ВсеДанныеПапок, ВидПапки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНепрочитанных(Форма)
	
	Папки = Новый Массив;
	Для Каждого Строка Из Форма.ДанныеПапок Цикл
		Папки.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	ДанныеКоличества = ПолучитьКоличествоНовыхПисемВПапках(Папки);
	
	Для Каждого Строка Из Форма.ДанныеПапок Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторВДереве) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекКоличество = ДанныеКоличества.Получить(Строка.Ссылка);
		Если ТекКоличество = Неопределено Тогда
			Непрочитанных = 0;
			ОшибокОтправки = 0;
		Иначе	
			Непрочитанных = ТекКоличество.Непрочитанных;
			ОшибокОтправки = ТекКоличество.Ошибок;
		КонецЕсли;
		СтрокаДерева = Форма.ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка.ИдентификаторВДереве);
		СтрокаДерева.Наименование = Строка.Представление + ?(Непрочитанных = 0, "", "(" + Строка(Непрочитанных) + ")")
			+ ?(ОшибокОтправки = 0, "", "(" + Строка(ОшибокОтправки) + ")");
		СтрокаДерева.НепрочитанныхПисем = Непрочитанных;
		СтрокаДерева.ОшибокОтправки = ОшибокОтправки;
		
	КонецЦикла;
	
	ВсегоНепрочитанных = 0;
	Для Каждого СтрокаУчетнойЗаписи Из Форма.ДеревоУчетныхЗаписей.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаКорневойПапки Из СтрокаУчетнойЗаписи.ПолучитьЭлементы() Цикл
			ВсегоНепрочитанных = ВсегоНепрочитанных + СтрокаКорневойПапки.НепрочитанныхПисем;
		КонецЦикла;
	КонецЦикла;
	
	Если ВсегоНепрочитанных = 0 Тогда
		Форма.Заголовок = НСтр("ru = 'Почта'; en = 'Mail'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Почта %1 %2'");
		НовоеНовых = ?(ВсегоНепрочитанных <> 11 И (ВсегоНепрочитанных - 1) % 10 = 0, НСтр("ru = 'новое'"),
			 НСтр("ru = 'новых'"));
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
			 ВсегоНепрочитанных,
			 НовоеНовых);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоНовыхПисемВПапках(Папки)
	
	Результат = Новый Соответствие;
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиПисем.ПапкаЭлектронногоПисьма КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НепрочитанныеПисьма.Письмо) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо) КАК КоличествоОшибок
	|ИЗ
	|	РегистрСведений.CRM_ПапкиВзаимодействий КАК ПапкиПисем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НепрочитанныеЭлектронныеПисьма КАК НепрочитанныеПисьма
	|		ПО ПапкиПисем.Взаимодействие = НепрочитанныеПисьма.Письмо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма КАК НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма
	|		ПО ПапкиПисем.Взаимодействие = НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо
	|			И НЕ НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо.ПометкаУдаления
	|ГДЕ
	|	ПапкиПисем.ПапкаЭлектронногоПисьма В(&Папки)
	|	И НЕ НепрочитанныеПисьма.Письмо ЕСТЬ NULL
	|		ИЛИ НЕ НепринятыеКОбработкеПочтовымСерверомИсходящиеПисьма.Письмо ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ПапкиПисем.ПапкаЭлектронногоПисьма
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоОшибок)
	|ПО
	|	Ссылка ИЕРАРХИЯ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("Папки", Папки);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Результат.Получить(Выборка.Ссылка) = Неопределено Тогда
			Результат.Вставить(Выборка.Ссылка,
				Новый Структура("Непрочитанных, Ошибок", Выборка.Количество, Выборка.КоличествоОшибок));
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКоличествоНовыхПисемВПапках()
	
	ОбновитьКоличествоНепрочитанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПапкуУчетнойЗаписи(УчетнаяЗапись, ВидПапки) Экспорт // АПК:78 - исключить из проверки.
	
	УчетнаяЗаписьВыбранная = УчетнаяЗапись;
	
	ПапкаСсылка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗапись, ВидПапки);
	Если ЗначениеЗаполнено(ПапкаСсылка) Тогда
		НайденныеСтроки = ДанныеПапок.НайтиСтроки(Новый Структура("Ссылка", ПапкаСсылка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ПанельУправления.ТекущаяСтрока = НайденныеСтроки[0].ИдентификаторВДереве;
		Иначе
			Элементы.ПанельУправления.ТекущаяСтрока = 0;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
		Элементы.ПанельУправления.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляИнформационнойПанели(УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляИнформационнойПанели = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ЭлектронноеПисьмоВходящее.Ссылка) КАК ВсегоВходящих
	               |ПОМЕСТИТЬ Входящие
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	               |ГДЕ
	               |	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ВсегоИсходящих
	               |ПОМЕСТИТЬ Исходящие
	               |ИЗ
	               |	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |ГДЕ
	               |	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = &УчетнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Входящие.ВсегоВходящих + Исходящие.ВсегоИсходящих КАК ВсегоПисем
	               |ИЗ
	               |	Входящие КАК Входящие,
	               |	Исходящие КАК Исходящие";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеДляИнформационнойПанели.Вставить("ВсегоПисем", Выборка.ВсегоПисем);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	                |	КОЛИЧЕСТВО(ПравилаОбработкиЭлектроннойПочты.Ссылка) КАК ВсегоПравилОбработки
	                |ИЗ
	                |	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	                |ГДЕ
	                |	ПравилаОбработкиЭлектроннойПочты.Владелец = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеДляИнформационнойПанели.Вставить("ВсегоПравилОбработки", Выборка.ВсегоПравилОбработки);
	
	Возврат ДанныеДляИнформационнойПанели;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеИнформационнойПанели(УчетнаяЗапись)
	
	ДанныеДляИнформационнойПанели = ПолучитьДанныеДляИнформационнойПанели(УчетнаяЗапись);
	
	ПисемВЯщикеЧисло = ДанныеДляИнформационнойПанели.ВсегоПисем;
	Если Элементы.ПисемВЯщикеРазмер.Видимость Тогда
		РазмерВБайтах = ПолучитьРазмерПисемУчетнойЗаписи(УчетнаяЗапись);
		ПисемВЯщикеРазмер = ПолучитьСтроковоеПредставлениеРазмераФайла(РазмерВБайтах);
	КонецЕсли;
	
	Элементы.ДекорацияУчетнаяЗапись.Заголовок = НСтр("ru = 'Учетная запись <'") + УчетнаяЗапись + ">";
	
	Элементы.ПравилаОбработки.Заголовок = НСтр("ru = 'Правила сортировки ('") 
		+ ДанныеДляИнформационнойПанели.ВсегоПравилОбработки 
		+ ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ПоказыватьМоиДела И ЗначениеЗаполнено(ТекущиеДанные.ПапкаМоиДела) Тогда
		
		МассивИзмеренийАРМ = Новый Массив;
		Если ТекущиеДанные.ПапкаМоиДела = "Мои дела" Тогда
			МассивИзмеренийАРМ.Добавить("Входящие");
			МассивИзмеренийАРМ.Добавить("Текущие");
			МассивИзмеренийАРМ.Добавить("Отложенные");
			МассивИзмеренийАРМ.Добавить("Завершенные");
		Иначе
			МассивИзмеренийАРМ.Добавить(ТекущиеДанные.ПапкаМоиДела);
		КонецЕсли;
		
		Элементы.СписокПисемСтраницы.ТекущаяСтраница = Элементы.СписокПисемСтраницаМоиДела;
		МоиДелаСписокЗадач.Параметры.УстановитьЗначениеПараметра("МассивИзмеренийАРМ", МассивИзмеренийАРМ);
		Элементы.МоиДелаОткрытьФильтрЗадач.Видимость = Не МоиДелаОтборПоПредметуУстановлен;
		Элементы.МоиДелаОчиститьФильтрЗадач.Видимость = Не МоиДелаОтборПоПредметуУстановлен;
		Элементы.ОткрытьФильтр.Видимость = Ложь;
		Элементы.ОчиститьФильтр.Видимость = Ложь;
		Элементы.МоиДелаЗаголовокОтбораПоПисьму.Видимость = МоиДелаОтборПоПредметуУстановлен;
		
		МоиДелаОбновитьКоличествоЗадач();
		
		Если ТекущиеДанные.ПапкаМоиДела = "Мои дела"
			Или ТекущиеДанные.ПапкаМоиДела = "Входящие"
			Или ТекущиеДанные.ПапкаМоиДела = "Завершенные" Тогда
			ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементПорядкаДинамическогоСписка(МоиДелаСписокЗадач,
			"ДатаДляСортировки", ТипУпорядочивания, , РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
		Элементы.МоиДелаДатаОбновления.Видимость = Истина;
		Элементы.ДатаПолученияПисем.Видимость = Ложь;
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Доступность = Ложь;
		
	Иначе
		
		// Выход из отбора задач Мои дела по предмету задачи (письму)
		// и восстановление предыдущих признаков использования элементов отбора задач
		Если ПоказыватьМоиДела И ЗначениеЗаполнено(МоиДелаЭлементыОтбораСохраненные) Тогда
			
			Для Каждого СохраненноеЗначение Из МоиДелаЭлементыОтбораСохраненные Цикл
				Для Каждого Элемент Из МоиДелаСписокЗадач.Отбор.Элементы Цикл
					Если Элемент.Представление = СохраненноеЗначение.Представление Тогда
						Элемент.Использование = СохраненноеЗначение.Использование;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			МоиДелаЭлементыОтбораСохраненные.Очистить();
			Элементы.МоиДелаЗаголовокОтбораПоПисьму.Заголовок = "";
			Элементы.МоиДелаОткрытьФильтрЗадач.Видимость = Истина;
			Элементы.МоиДелаОчиститьФильтрЗадач.Видимость = Истина;
			МоиДелаОтборПоПредметуУстановлен = Ложь;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(МоиДелаСписокЗадач, "ПредметЗадачи", 
				Неопределено, ВидСравненияКомпоновкиДанных.Равно, "Отбор по предмету", Ложь);
			МоиДелаОбновитьКоличествоЗадач();
			
		КонецЕсли;
		
		ОписаниеПисьма = СформироватьПустоеОписание();
		
		СтрОтправитель = "";
		СтрКому = "";
		СтрТема = "";
		
		Вложения.Очистить();
		
		Если ТекущиеДанные = Неопределено Или ДанныеУчетныхЗаписей.Количество() = 0 Тогда
			СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяПапка", Неопределено);
			Элементы.СписокПисемСтраницы.ТекущаяСтраница = Элементы.СписокПисемСтраницаИнформационнаяПанель;
			Возврат;
		КонецЕсли;
		
		Элементы.МоиДелаОткрытьФильтрЗадач.Видимость = Ложь;
		Элементы.МоиДелаОчиститьФильтрЗадач.Видимость = Ложь;
		Элементы.ОткрытьФильтр.Видимость = Истина;
		Элементы.ОчиститьФильтр.Видимость = Истина;
		
		УчетнаяЗаписьВыбранная = ТекущиеДанные.УчетнаяЗапись;
		
		УстановитьНадписьДатыЗагрузки(УчетнаяЗаписьВыбранная);
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяПапка", Неопределено);
			Элементы.СписокПисемСтраницы.ТекущаяСтраница = Элементы.СписокПисемСтраницаИнформационнаяПанель;
			Элементы.СписокПисемСтраницаИнформационнаяПанель.ВертикальнаяПрокруткаПриСжатии = Ложь;
			ОбновитьДанныеИнформационнойПанели(УчетнаяЗаписьВыбранная);
			ВосстановитьПоследнееАктивноеПисьмоВСписке();
			Возврат;
		Иначе
			СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяПапка", ТекущиеДанные.Папка);
			Элементы.СписокПисемСтраницы.ТекущаяСтраница = Элементы.СписокПисемСтраницаПисьма;
			Элементы.СписокПисемСтраницаИнформационнаяПанель.ВертикальнаяПрокруткаПриСжатии = Истина;
			ВосстановитьПоследнееАктивноеПисьмоВСписке();
		КонецЕсли;
		
		УчетнаяЗаписьЯвляетсяИсточникомЛидов = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьВыбранная,
			 "CRM_ИсточникЛидов");
		
		Если ИспользоватьЗаявки Тогда
			Элементы.СписокПисемДокументCRM_ЗаявкаСоздатьНаОсновании.Доступность = Не УчетнаяЗаписьЯвляетсяИсточникомЛидов;
			Элементы.СписокПисемКонтекстноеМенюДокументCRM_ЗаявкаСоздатьНаОсновании.Доступность =
				Не УчетнаяЗаписьЯвляетсяИсточникомЛидов;
		КонецЕсли;
		
		ИдентификаторУчетнойЗаписиНормализованный = СтрЗаменить(УчетнаяЗаписьВыбранная.УникальныйИдентификатор(), "-", "_");
		УчетнаяЗаписьСтрока = Строка(УчетнаяЗаписьВыбранная);
		Для Каждого ЭлементКМ Из Элементы.СписокПисемКонтекстноеМенюГруппаПереместитьВ.ПодчиненныеЭлементы Цикл
			ЭлементКМ.Видимость = (СтрНайти(ЭлементКМ.Имя, ИдентификаторУчетнойЗаписиНормализованный) > 0
				Или СтрНайти(ЭлементКМ.Имя, УчетнаяЗаписьСтрока) > 0);
		КонецЦикла;
		
		Элементы.ДатаПолученияПисем.Видимость = Истина;
		Элементы.МоиДелаДатаОбновления.Видимость = Ложь;
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерПисемУчетнойЗаписи(Знач УчетнаяЗапись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(РАЗМЕРХРАНИМЫХДАННЫХ(ЭлектронноеПисьмоВходящее.Тема) +
	|			РАЗМЕРХРАНИМЫХДАННЫХ(ЭлектронноеПисьмоВходящее.Текст) +
	|			РАЗМЕРХРАНИМЫХДАННЫХ(ЭлектронноеПисьмоВходящее.ТекстHTML) +
	|			РАЗМЕРХРАНИМЫХДАННЫХ(ЭлектронноеПисьмоВходящее.ВнутреннийЗаголовок)) КАК Размер
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПрисоединенныеФайлы.Размер)
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронноеПисьмоВходящее.Ссылка
	|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ПрисоединенныеФайлы.Размер)
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = ЭлектронноеПисьмоВходящее.Ссылка
	|			И (ЭлектронноеПисьмоВходящее.УчетнаяЗапись = &УчетнаяЗапись)");
	
	Запрос.Параметры.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	РазмерПисем = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Размер) Тогда
			РазмерПисем = РазмерПисем + Выборка.Размер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазмерПисем;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтроковоеПредставлениеРазмераФайла(РазмерВБайтах)
	
	Если РазмерВБайтах < 1024 Тогда
		
		Размер = РазмерВБайтах;
		ФорматнаяСтрока = "ЧДЦ=0; ЧН=0; ЧФ='Ч Б'";
		
	ИначеЕсли РазмерВБайтах < 1024 * 1024 Тогда
		
		Размер = Окр(РазмерВБайтах / 1024, 0);
		ФорматнаяСтрока = "ЧДЦ=0; ЧН=0; ЧФ='Ч Кб'";
		
	ИначеЕсли РазмерВБайтах < 1024 * 1024 * 1024 Тогда
		
		Размер = Окр(РазмерВБайтах / (1024 * 1024), 1);
		ФорматнаяСтрока = "ЧДЦ=1; ЧН=0; ЧФ='Ч Мб'";
		
	Иначе
		
		Размер = Окр(РазмерВБайтах / (1024 * 1024 * 1024), 1);
		ФорматнаяСтрока = "ЧДЦ=1; ЧН=0; ЧФ='Ч Гб'";
		
	КонецЕсли;
	
	Возврат Формат(Размер, ФорматнаяСтрока);
	
КонецФункции

#КонецОбласти

#Область СписокПисем

&НаКлиенте
Процедура СоздатьПисьмоНаОсновании(ВидОснования)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидОснования", ВидОснования);
	ДополнительныеПараметры.Вставить("ТекущееПисьмо", ТекущиеДанные.Ссылка);
	
	ВыделенныеПисьма = Новый Массив;
	Если ВидОснования = "ПереслатьКакВложения" Тогда
		ВыделенныеСтроки = Элементы.СписокПисем.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(Строка);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыделенныеПисьма.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ВыделенныеПисьма", ВыделенныеПисьма);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииПослеВопроса",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если ВложенияОчищеныПоНастройке И Не ВидОснования = "ПереслатьКакВложения" Тогда
			ТекстВопроса = НСтр("ru = 'Загрузить удаленные картинки и вложения?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СоздатьПисьмоНаОснованииЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуВложений(ОповещениеЗавершения);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоНаОснованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВидОснования = ДополнительныеПараметры.ВидОснования;
	ТекущееПисьмо = ДополнительныеПараметры.ТекущееПисьмо;
	ВыделенныеПисьма = ДополнительныеПараметры.ВыделенныеПисьма;
	
	Основание = Новый Структура("Основание, Команда, ВыделенныеПисьма", ТекущееПисьмо, ВидОснования, ВыделенныеПисьма);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСписокПисемПриАктивизацииСтроки()
	
	Если Элементы.СписокПисем.ТекущаяСтрока = Неопределено
		 Или ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ОписаниеПисьма = СформироватьПустоеОписание();
		ТекущееПисьмо = Неопределено;
		
		СписокПисемТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
		Если СписокПисемТекущиеДанные <> Неопределено Тогда
			СтрОтправитель = СписокПисемТекущиеДанные.Отправитель;
			СтрКому = СписокПисемТекущиеДанные.Получатель;
			СтрТема = СписокПисемТекущиеДанные.Тема;
		Иначе
			СтрОтправитель = "";
			СтрКому = "";
			СтрТема = "";
		КонецЕсли;
		
		УстановитьВложенияВHTML();
		
		Возврат;
	КонецЕсли;
	
	Если ПринудительнаяАктивизацияСтроки = Истина Тогда
		ПринудительнаяАктивизацияСтроки = Ложь;
	Иначе
		Если ТекущееПисьмо = Элементы.СписокПисем.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущееПисьмо = Элементы.СписокПисем.ТекущаяСтрока;
	
	Если ТекущееПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказатьСкрытьПисьмоПометка Тогда
		СтруктураОписанияПисьма = СформироватьОписаниеТекущегоПисьма(ТекущееПисьмо);
		
		Если СтруктураОписанияПисьма = Неопределено Тогда
			ОписаниеПисьма = СформироватьПустоеОписание();
			СтрОтправитель = "";
			СтрКому = "";
			СтрТема = "";
		Иначе
			ТекстПисьма = СтруктураОписанияПисьма.Тело;
			CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(ТекстПисьма);
			ОписаниеПисьма = ТекстПисьма;
			
			СтрОтправитель = СтруктураОписанияПисьма.От;
			СтрКому = СтруктураОписанияПисьма.Кому;
			СтрТема = СтруктураОписанияПисьма.Тема;
		КонецЕсли;
		
		Элементы.ПредупреждениеБезопасности.Видимость = Не ЗапрещеноОтображениеНебезопасногоСодержимого
			И ЕстьНебезопасноеСодержимое И Не ВключитьНебезопасноеСодержимое;
		
		УстановитьВложенияВHTML();
		
		Если Элементы.СписокПисем.ТекущиеДанные <> Неопределено
			 И ЗначениеЗаполнено(Элементы.СписокПисем.ТекущиеДанные.ИнформацияООшибке) Тогда
			Элементы.ГруппаОшибкаОтправки.Видимость = Истина;
			Элементы.ДекорацияОшибкаОтправки.Заголовок = Элементы.СписокПисем.ТекущиеДанные.ИнформацияООшибке;
		ИначеЕсли Элементы.ГруппаОшибкаОтправки.Видимость Тогда
			Элементы.ГруппаОшибкаОтправки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеПрочтенности(МассивПисем, Прочитаны)
	
	Если НЕ Прочитаны Тогда
		ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");
	КонецЕсли;
	
	УстановитьСнятьПометкуОПрочтении(МассивПисем, Прочитаны);
	
	// Проверим напоминания о входящих письмах.
	Если Прочитаны Тогда
		ПроверитьНапоминанияОВходящихПисьмах(МассивПисем);
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры


&НаКлиенте
Процедура МоиДелаИзменитьСостояниеПрочтенности(МассивПисем, Прочитаны)
	
	Если Не Прочитаны Тогда
		ОтключитьОбработчикОжидания("МоиДелаАвтоустановкаРассмотренностиПисьма");
	КонецЕсли;
	
	МоиДелаУстановитьСнятьПометкуОПрочтении(МассивПисем, Прочитаны);
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МоиДелаСписокЗадач);
	МоиДелаОбновитьКоличествоЗадач("Входящие");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуОПрочтении(МассивПисем, УстановитьПометку = Ложь)
	
	CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(МассивПисем, УстановитьПометку);
	
КонецПроцедуры	

&НаСервере
Процедура МоиДелаУстановитьСнятьПометкуОПрочтении(МассивПисем, УстановитьПометку)
	
	РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьмаМоиДела.УстановитьСнятьПометкуОПрочтении(МассивПисем, 
		ТекущийПользователь, УстановитьПометку);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЕстьЛидыВВыбранныхСтроках(МассивСсылок, СУказаниемПричиныОтклонения = Истина)
	
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, СУказаниемПричиныОтклонения);
	
КонецФункции

&НаСервере
Процедура ИзменитьСостояниеИзбранности(МассивПисем, Избранный)
	
	Для Каждого ПисьмоСсылка Из МассивПисем Цикл
		ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
		ПисьмоОбъект.CRM_Избранный = Избранный;
		
		Попытка
			ПисьмоОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	УказанаПричинаОтказа = (ДополнительныеПараметры <> Неопределено);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ПапкаОбработанные = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(УчетнаяЗаписьВыбранная, "Обработанные");
	ДополнительныеПараметры.Вставить("Папка", ПапкаОбработанные);
	ДополнительныеПараметры.Вставить("ВидПапки",
		 ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные"));
	ДополнительныеПараметры.Вставить("МассивСсылок", Новый Массив);
	ДополнительныеПараметры.Вставить("ПереноситьПисьмаВОбработанные", ПереноситьПисьмаВОбработанные);
	
	СообщениеОФильтрацииМассива = НСтр("ru = 'Операция отклонения недоступна для письма с темой ""%1"".'");
	ДополнительныеПараметры.МассивСсылок = ПолучитьИзМассиваОбращенияСостояния(Элементы.СписокПисем.ВыделенныеСтроки,
																			ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый"),
																			СообщениеОФильтрацииМассива);
	Если ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УказанаПричинаОтказа Тогда
		ОбработатьИзменениеПапки(ДополнительныеПараметры, ДополнительныеПараметры);
	Иначе
		ОбработатьИзменениеПапки(Истина, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку Обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаСервере
Функция НеобходимоЗадатьВопросПриПереносеВОбработанные()
		
	Для Каждого ТекСтрока Из Элементы.СписокПисем.ВыделенныеСтроки Цикл
		Если ТекСтрока <> Неопределено Тогда
			Если ТипЗнч(ТекСтрока.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				УчетнаяЗапись = ТекСтрока.Ссылка.УчетнаяЗапись;
				Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
					
КонецФункции

&НаКлиенте
Процедура ПереместитьВ_ЗаполнитьСписокКоманд()
	
	ИсключаемыеВидыПапок = Новый Массив;
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики"));
	
	МассивПапокСИерархией = Новый Массив;
	ДеревоПапок = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	Для Каждого СтрокаДереваПапок Из ДеревоПапок Цикл
		МассивПапокУчетнойЗаписиСИерархией(СтрокаДереваПапок.ПолучитьЭлементы(), МассивПапокСИерархией,
			 ИсключаемыеВидыПапок, ,
			 Истина);
	КонецЦикла;
	
	ПереместитьВ_ЗаполнитьСписокКомандНаСервере(МассивПапокСИерархией);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВ_ЗаполнитьСписокКомандНаСервере(МассивПапокСИерархией)
	
	МассивУдаляемыхЭлементов = Новый Массив;
	
	Для Каждого ЭлементГруппы Из Элементы.СписокПисемКонтекстноеМенюГруппаПереместитьВ.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда Продолжить; КонецЕсли;
		МассивУдаляемыхЭлементов.Добавить(ЭлементГруппы);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктура Из МассивПапокСИерархией Цикл
		
		Если ЭлементСтруктура.ВнизСписка Тогда Продолжить; КонецЕсли;
		
		ИдентификаторЭлемента = ЭлементСтруктура.Ссылка;
		ИдентификаторЭлементаНормализованный = СтрЗаменить(ИдентификаторЭлемента, "-", "_");
		
		ИдентификаторУчетнойЗаписи = ЭлементСтруктура.УчетнаяЗапись;
		ИдентификаторУчетнойЗаписиНормализованный = СтрЗаменить(ИдентификаторУчетнойЗаписи, "-", "_");
		
		ИмяКомандыФормы = "ПереместитьВ_" + ИдентификаторЭлементаНормализованный + "_"
			+ ИдентификаторУчетнойЗаписиНормализованный;
		
		ИмяЭлементаФормы = "ПереместитьВКМ_" + ИдентификаторЭлементаНормализованный + "_"
			+ ИдентификаторУчетнойЗаписиНормализованный;
		СоздатьКнопкуПереместитьВ(ИмяКомандыФормы, ИмяЭлементаФормы, ЭлементСтруктура.Имя,
			 Элементы.СписокПисемКонтекстноеМенюГруппаПереместитьВ,
			 Ложь);
		
	КонецЦикла;
	
	// Корзина, Спам
	Для Каждого ЭлементСтруктура Из МассивПапокСИерархией Цикл
		
		Если НЕ ЭлементСтруктура.ВнизСписка Тогда Продолжить; КонецЕсли;
		
		ИдентификаторЭлемента = ЭлементСтруктура.Ссылка;
		ИдентификаторЭлементаНормализованный = СтрЗаменить(ИдентификаторЭлемента, "-", "_");
		
		ИдентификаторУчетнойЗаписи = ЭлементСтруктура.УчетнаяЗапись;
		ИдентификаторУчетнойЗаписиНормализованный = СтрЗаменить(ИдентификаторУчетнойЗаписи, "-", "_");
		
		ИмяКомандыФормы = "ПереместитьВ_" + ИдентификаторЭлементаНормализованный + "_"
			+ ИдентификаторУчетнойЗаписиНормализованный;
		
		ИмяЭлементаФормы = "ПереместитьВКМ_" + ИдентификаторЭлементаНормализованный + "_"
			+ ИдентификаторУчетнойЗаписиНормализованный;
		СоздатьКнопкуПереместитьВ(ИмяКомандыФормы, ИмяЭлементаФормы, ЭлементСтруктура.Имя,
			 Элементы.СписокПисемКонтекстноеМенюГруппаПереместитьВ,
			 Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МассивПапокУчетнойЗаписиСИерархией(ЭлементыДерева, МассивПапок,
	 ИсключаемыеВидыПапок = Неопределено, Иерархия = "",
	 ПолучатьГУИД = Ложь)
	
	Для Каждого Папка Из ЭлементыДерева Цикл
		
		Если ТипЗнч(ИсключаемыеВидыПапок) = Тип("Массив") Тогда
			
			ПапкаИсключена = Ложь;
			
			Для Каждого ВидПапкиКИсключение Из ИсключаемыеВидыПапок Цикл
				Если Папка.ВидПапки = ВидПапкиКИсключение Тогда
					ПапкаИсключена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПапкаИсключена Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныеСтроки = ДанныеПапок.НайтиСтроки(Новый Структура("Ссылка", Папка.Папка));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПапки = НайденныеСтроки[0];
		
		СтруктураЭлемента = Новый Структура;
		СтруктураЭлемента.Вставить("Имя", Иерархия + ДанныеПапки.Представление);
		
		Если ПолучатьГУИД Тогда
			СтруктураЭлемента.Вставить("Ссылка", Папка.Папка.УникальныйИдентификатор());
			СтруктураЭлемента.Вставить("УчетнаяЗапись", Папка.УчетнаяЗапись.УникальныйИдентификатор());
		Иначе
			СтруктураЭлемента.Вставить("Ссылка", Папка.Папка);
			СтруктураЭлемента.Вставить("УчетнаяЗапись", Папка.УчетнаяЗапись);
		КонецЕсли;
		
		Если Папка.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта")
			ИЛИ Папка.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
			СтруктураЭлемента.Вставить("ВнизСписка", Истина);
		Иначе
			СтруктураЭлемента.Вставить("ВнизСписка", Ложь);
		КонецЕсли;
		
		МассивПапок.Добавить(СтруктураЭлемента);
		
		МассивПапокУчетнойЗаписиСИерархией(Папка.ПолучитьЭлементы(), МассивПапок, ИсключаемыеВидыПапок, Иерархия + "  ",
			 ПолучатьГУИД);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращениеОбщая()
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтправительАдрес = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка, "ОтправительАдрес");
	ОтправительКонтакт = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Ссылка, "ОтправительКонтакт");
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПисьмоВходящее", ТекущиеДанные.Ссылка);
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(ОтправительКонтакт) Тогда
		МассивСсылок.Добавить(ОтправительКонтакт);
	КонецЕсли;
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("АдресЭП", ОтправительАдрес);
	ПараметрыФормы.Вставить("ТемаПисьма", ТекущиеДанные.Тема);
	
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, ОтправительАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщая()
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Результат = "";
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьПисьмо(ТекущиеДанные.УчетнаяЗапись);
	
	Если Результат = "" Тогда
		
		СсылкаНового = ПолучитьСсылкуНовогоДокумента();
		ПараметрыОткрытия = Новый Структура("УчетнаяЗапись, Ключ", ТекущиеДанные.УчетнаяЗапись,
			 ПолучитьСсылкуНовогоДокумента());
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОбщая()
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя перенаправлять исходящее письмо.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ТекущиеДанные.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(
		МассивЗадач, Новый Структура("Источник", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьНаРольОбщая()
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя перенаправлять исходящее письмо.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ТекущиеДанные.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(
		МассивЗадач, Новый Структура("Источник", ЭтотОбъект), Тип("СправочникСсылка.РолиИсполнителей"));

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоследнееАктивноеПисьмоВСписке()
	
	Если ПоследнееАктивноеПисьмоВСписке <> Неопределено Тогда
		Элементы.СписокПисем.ТекущаяСтрока = ПоследнееАктивноеПисьмоВСписке;
		ПоследнееАктивноеПисьмоВСписке = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьПоследнееАктивноеПисьмоВСписке()

#КонецОбласти

#Область ЗагрузкаВложений

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложений(ОповещениеЗавершения = Неопределено)
	
	ТекущаяСтрока = Элементы.СписокПисем.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуВложенийЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьВложения(ТекущаяСтрока, ЭтотОбъект, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуВложенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПринудительнаяАктивизацияСтроки = Истина;
	ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
	
	Если ВложенияОчищеныПоНастройке Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось загрузить вложения с почтового сервера! Возможно письмо удалено на сервере.'"));
	КонецЕсли;
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьКартинкуЭлементаПоказатьСкрытьПисьмо()
	
	НайденнаяКоманда = Команды.Найти("ПоказатьСкрытьПисьмо");
	ПодсказкаКоманды = "";
	
	Если ПоказатьСкрытьПисьмоПометка Тогда
		
		Если РежимОтображения = 0 Тогда // Стандартный вид
			Элементы.СписокПисемПоказатьСкрытьПисьмо.Картинка = БиблиотекаКартинок.CRM_ПросмотрПисьмаСтандартный24;
		ИначеЕсли РежимОтображения = 1 Тогда // Горизонтальный вид
			Элементы.СписокПисемПоказатьСкрытьПисьмо.Картинка = БиблиотекаКартинок.CRM_ПросмотрПисьмаВоВсюШирину24;
		ИначеЕсли РежимОтображения = 2 Тогда // Вертикальный вид
			Элементы.СписокПисемПоказатьСкрытьПисьмо.Картинка = БиблиотекаКартинок.CRM_ПросмотрПисьмаВоВсюВысоту24;
		КонецЕсли;
		
		ПодсказкаКоманды = НСтр("ru = 'Просмотр письма включен'");
		
	Иначе		
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Картинка = БиблиотекаКартинок.CRM_ПросмотрПисьмаОтключен24;
		ПодсказкаКоманды = НСтр("ru = 'Просмотр письма отключен'");
	КонецЕсли;

	Если НайденнаяКоманда <> Неопределено Тогда
		НайденнаяКоманда.Подсказка = ПодсказкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоиска(КоллекцияЭлементовОтбора)
	
	Для Каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Получатель")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Отправитель")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тема")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Текст") Тогда
				
				КоллекцияЭлементовОтбора.Удалить(ЭлементОтбора);
				
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.Представление = "Адрес"
				ИЛИ ЭлементОтбора.Представление = "ПоискВезде" Тогда
				
				КоллекцияЭлементовОтбора.Удалить(ЭлементОтбора);
				
			КонецЕсли;
		
	    КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСписок(ЗначениеПоиска, ПараметрПоиска, ЭтоФильтр = Ложь)
	
	ОчиститьОтборПоиска(СписокПисем.Отбор.Элементы);
	ОчиститьОтборПоиска(СписокПисем.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы);
	
	Если ПоказыватьМоиДела Тогда
		ГруппаОтборСтрокаПоиска =
			ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭтотОбъект["МоиДелаСписокЗадач"].Отбор.Элементы, 
			"ОтборСтрокаПоиска", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заголовок");
		ЭлементОтбора = ГруппаОтборСтрокаПоиска.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекстОснования");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект["МоиДелаСписокЗадач"], 
			"Заголовок", "%" + СтрокаПоиска + "%", ВидСравненияКомпоновкиДанных.Подобно, , 
		ЗначениеЗаполнено(СтрокаПоиска), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект["МоиДелаСписокЗадач"], 
			"ТекстОснования", "%" + СтрокаПоиска + "%", ВидСравненияКомпоновкиДанных.Подобно, , 
		ЗначениеЗаполнено(СтрокаПоиска), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначениеПоиска) И НЕ ЭтоФильтр Тогда Возврат; КонецЕсли;

	Если ПараметрПоиска = "Адрес" Тогда 
		ГруппаАдрес = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокПисем.Отбор.Элементы,
			 "Адрес",
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаАдрес, "Получатель", ЗначениеПоиска,
			 ВидСравненияКомпоновкиДанных.Содержит, ,
			 ЗначениеЗаполнено(ЗначениеПоиска));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаАдрес, "Отправитель", ЗначениеПоиска,
			 ВидСравненияКомпоновкиДанных.Содержит, ,
			 ЗначениеЗаполнено(ЗначениеПоиска));
	ИначеЕсли ПараметрПоиска = "Тема"  Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Тема",
			 ЗначениеПоиска, ВидСравненияКомпоновкиДанных.Содержит, ,
			 ЗначениеЗаполнено(ЗначениеПоиска));
	ИначеЕсли ПараметрПоиска = "Текст письма"  Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Текст",
			 ЗначениеПоиска, ВидСравненияКомпоновкиДанных.Содержит, ,
			 ЗначениеЗаполнено(ЗначениеПоиска));
	ИначеЕсли ПараметрПоиска = "Везде" Тогда
		
		ГруппаВезде = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокПисем.Отбор.Элементы,
			 "ПоискВезде",
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		Если ЭтоФильтр Тогда
			Если ФильтрНастройкиКомпоновки = Неопределено Тогда
				Если ЗначениеЗаполнено(ФильтрПолучатель) Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Получатель",
						 ФильтрПолучатель, ВидСравненияКомпоновкиДанных.Содержит, ,
						 Истина);
				КонецЕсли;
				Если ЗначениеЗаполнено(ФильтрОтправитель) Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Отправитель",
						 ФильтрОтправитель, ВидСравненияКомпоновкиДанных.Содержит, ,
						 Истина);
				КонецЕсли;
				Если ЗначениеЗаполнено(ФильтрТема) Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Тема", ФильтрТема,
						 ВидСравненияКомпоновкиДанных.Содержит, ,
						 Истина);
				КонецЕсли;
				Если ЗначениеЗаполнено(ФильтрТекстПисьма) Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Текст", ФильтрТекстПисьма,
						 ВидСравненияКомпоновкиДанных.Содержит, ,
						 Истина);
				КонецЕсли;
			Иначе
				ГруппаВезде.ТипГруппы = ФильтрНастройкиКомпоновки.Отбор.Элементы[0].ТипГруппы;
				Для каждого ЭлементОтбора Из ФильтрНастройкиКомпоновки.Отбор.Элементы[0].Элементы Цикл
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде,
						 ?(Строка(ЭлементОтбора.ЛевоеЗначение) = "ТекстПисьма", "Текст",
						 Строка(ЭлементОтбора.ЛевоеЗначение)),
						ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, , ЭлементОтбора.Использование);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Получатель", ЗначениеПоиска,
				 ВидСравненияКомпоновкиДанных.Содержит, ,
				 ЗначениеЗаполнено(ЗначениеПоиска));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Отправитель", ЗначениеПоиска,
				 ВидСравненияКомпоновкиДанных.Содержит, ,
				 ЗначениеЗаполнено(ЗначениеПоиска));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Тема", ЗначениеПоиска,
				 ВидСравненияКомпоновкиДанных.Содержит, ,
				 ЗначениеЗаполнено(ЗначениеПоиска));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Текст", ЗначениеПоиска,
				 ВидСравненияКомпоновкиДанных.Содержит, ,
				 ЗначениеЗаполнено(ЗначениеПоиска));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВезде, "Контакт.Наименование", ЗначениеПоиска,
				 ВидСравненияКомпоновкиДанных.Содержит, ,
				 ЗначениеЗаполнено(ЗначениеПоиска));
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Ссылка",
			 ПредопределенноеЗначение("Документ.ЭлектронноеПисьмоВходящее.ПустаяСсылка"),
			 ВидСравненияКомпоновкиДанных.Равно);	
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьНадписьДатыЗагрузки()
	
	Если Элементы.СписокПисем.АвтоОбновление Тогда
		УстановитьНадписьДатыЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьДатыЗагрузки(УчетнаяЗапись = Неопределено)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	Если УчетнаяЗапись = Неопределено Тогда
		
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат; 
		КонецЕсли;
		УчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) 
		Или ЗначениеЗаполнено(ТекущиеДанные.ПапкаМоиДела) Тогда
		Элементы.ДатаПолученияПисем.Видимость = Ложь;
	КонецЕсли;
	
	Сведения = ПолучитьСведенияПоУчетнойЗаписи(УчетнаяЗапись);
	Если Сведения.ПротоколВходящейПочты = "IMAP" Тогда
	
		ШаблонДекорацияДатаПолученияПисем = НСтр("ru = 'обновлено: %1'");
		
		Если ЗначениеЗаполнено(Сведения.ДатаЗагрузкиПисем) Тогда		
			ФорматДаты = "ДФ='dd.MM.yy HH:mm'";
			Если НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) = НачалоДня(Сведения.ДатаЗагрузкиПисем) Тогда
				ФорматДаты = "ДФ='HH:mm'";
			КонецЕсли;
			ДатаПолученияПисем = Формат(Сведения.ДатаЗагрузкиПисем, ФорматДаты);		
		Иначе		
			ДатаПолученияПисем = НСтр("ru = 'никогда'");
		КонецЕсли;
		
		Элементы.ДатаПолученияПисем.Видимость = Истина;
		ДатаПолученияПисем = СтрШаблон(ШаблонДекорацияДатаПолученияПисем, ДатаПолученияПисем);
		
	Иначе
		Элементы.ДатаПолученияПисем.Видимость = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МоиДелаУстановитьНадписьДатыЗагрузки()
	
	Если Элементы.МоиДелаСписокЗадач.АвтоОбновление Тогда
		МоиДелаУстановитьНадписьДатыЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаУстановитьНадписьДатыЗагрузки()
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	МоиДелаДатаОбновленияДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ШаблонДекорацияМоиДелаДатаОбновления = НСтр("ru = 'обновлено: %1'");
	
	Если ЗначениеЗаполнено(МоиДелаДатаОбновленияДата) Тогда		
		ФорматДаты = "ДФ='dd.MM.yy HH:mm'";
		Если НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) = НачалоДня(МоиДелаДатаОбновленияДата) Тогда
			ФорматДаты = "ДФ='HH:mm'";
		КонецЕсли;
		МоиДелаДатаОбновленияДата = Формат(МоиДелаДатаОбновленияДата, ФорматДаты);
	Иначе
		МоиДелаДатаОбновленияДата = НСтр("ru = 'никогда'");
	КонецЕсли;
	
	МоиДелаДатаОбновления = СтрШаблон(ШаблонДекорацияМоиДелаДатаОбновления, МоиДелаДатаОбновленияДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСостояниеУзловДереваУчетныхЗаписей()
	
	Если Не Элементы.ПанельУправления.Видимость Тогда 
		Возврат; 
	КонецЕсли;
	
	СостояниеУзловДерева = ХранилищеОбщихНастроекЗагрузить(ЭтотОбъект.ИмяФормы, "СостояниеУзловДерева", Новый Массив);
	
	КоллекцияЭлементовДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	
	ИндексЭлемента = 0;
	
	Для Каждого Элемент Из СостояниеУзловДерева Цикл
		
		Если Элемент.Свойство("Папка") И ЗначениеЗаполнено(Элемент.Папка) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтроки = 0;
		Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
			
			Если Элемент.УчетнаяЗапись = СтрокаДерева.УчетнаяЗапись И ИндексЭлемента <> ИндексСтроки Тогда
				Смещение = ИндексЭлемента - ИндексСтроки;
				Если ИндексСтроки + Смещение > (КоллекцияЭлементовДерева.Количество() - 1) Тогда
					Смещение = КоллекцияЭлементовДерева.Количество() - 1 - ИндексСтроки;
				КонецЕсли;
				КоллекцияЭлементовДерева.Сдвинуть(ИндексСтроки, Смещение);
			КонецЕсли;
			
		ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		
	ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	ИндексСтроки = 0;
	ИндексСтрокиМоиДела = 0;
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		Если СтрокаДерева.ПапкаМоиДела = "Мои дела" Тогда
			ИндексСтрокиМоиДела = ИндексСтроки;
			Прервать;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Если ИндексСтрокиМоиДела <> 0 Тогда
		КоллекцияЭлементовДерева.Сдвинуть(ИндексСтрокиМоиДела, -ИндексСтрокиМоиДела);
	КонецЕсли;
	
	ВосстановитьПоложениеДереваУчетныхЗаписей(ДеревоУчетныхЗаписей, СостояниеУзловДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСостояниеУзловДереваУчетныхЗаписей()
	
	МассивРазвернутыхЭлементов = Новый Массив;
	ЗаполнитьМассивРазвернутыхЭлементов(ДеревоУчетныхЗаписей, МассивРазвернутыхЭлементов);
	
	СостояниеУзловДерева = Новый Массив;
	КоллекцияЭлементовДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		ИдСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		СостояниеУзловДерева.Добавить(Новый Структура("УчетнаяЗапись, Папка, Развернут",
		СтрокаДерева.УчетнаяЗапись,
		СтрокаДерева.Папка,
		Элементы.ПанельУправления.Развернут(ИдСтроки)));
		
	КонецЦикла;
	
	// Дополнить массив состояний узлов дерева состояниями дочерних узлов
	Для Каждого ТекЭлемент Из МассивРазвернутыхЭлементов Цикл
		
		Для Каждого СтрокаДерева Из СостояниеУзловДерева Цикл
			Если ТекЭлемент.УчетнаяЗапись = СтрокаДерева.УчетнаяЗапись
				И ТекЭлемент.Папка <> СтрокаДерева.Папка
				И Не ЗначениеЗаполнено(СтрокаДерева.Папка) Тогда
					СостояниеУзловДерева.Добавить(Новый Структура("УчетнаяЗапись, Папка, Развернут",
					                                              ТекЭлемент.УчетнаяЗапись,
					                                              ТекЭлемент.Папка,
					                                              Истина));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ХранилищеОбщихНастроекСохранить(ИмяФормы, "СостояниеУзловДерева", СостояниеУзловДерева);

КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкуПереместитьВ(ИмяКомандыФормы, ИмяЭлементаФормы, ЗаголовокЭлемента,
	 РодительЭлемента,
	 ЭтоКоманднаяПанель)
	
	Если Элементы.СписокПисемКонтекстноеМенюГруппаПереместитьВ.ПодчиненныеЭлементы.Найти(ИмяЭлементаФормы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйПунктМеню = Элементы.Добавить(ИмяЭлементаФормы, Тип("КнопкаФормы"), РодительЭлемента);
	НовыйПунктМеню.Отображение = ОтображениеКнопки.Авто;
	
	Если ЭтоКоманднаяПанель Тогда
		НовыйПунктМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйПунктМеню.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		НовыйПунктМеню.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	КонецЕсли;
	
	Если Команды.Найти(ИмяКомандыФормы) = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить(ИмяКомандыФормы);
		НоваяКомандаФормы.Заголовок					= ЗаголовокЭлемента;
		НоваяКомандаФормы.Действие					= "Подключаемый_ПереместитьВ";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Ложь;
	КонецЕсли;
	
	НовыйПунктМеню.ИмяКоманды = ИмяКомандыФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьВ(Команда)
	
	ИдентификаторПапки = СтрЗаменить(Команда.Имя, "ПереместитьВ_", "");
	ИдентификаторПапки = СтрЗаменить(ИдентификаторПапки, "_", "-");
	СсылкаНаПапку = ПолучитьСсылкуСправочникаПоИдентификатору("ПапкиЭлектронныхПисем", ИдентификаторПапки);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПапку) Тогда Возврат; КонецЕсли;
	
	// действие
	МассивПеремещаемыхПисем = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокПисем.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокПисем.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПеремещаемыхПисем.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
		
	ПодготовитьПеремещениеПисем(СтруктураПапки(СсылкаНаПапку), МассивПеремещаемыхПисем);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПапки(СсылкаНаПапку)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Папка", СсылкаНаПапку);
	СтруктураРезультат.Вставить("УчетнаяЗапись", СсылкаНаПапку.Владелец);
	Если СсылкаНаПапку.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ПапкиУчетныхЗаписей.ВидПапки, ЗНАЧЕНИЕ(Перечисление.CRM_ВидыПапокЭлектроннойПочты.ПустаяСсылка)) КАК ВидПапки
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
		|		ПО (УчетныеЗаписи.Ссылка = ПапкиЭлектронныхПисем.Владелец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|		ПО (ПапкиУчетныхЗаписей.Папка = ПапкиЭлектронныхПисем.Ссылка)
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи) И ПапкиЭлектронныхПисем.Ссылка = &Папка
		|");
	
		Запрос.УстановитьПараметр("УчетныеЗаписи", СсылкаНаПапку.Владелец);
		Запрос.УстановитьПараметр("Папка", СсылкаНаПапку);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураРезультат.Вставить("ВидПапки", Выборка.ВидПапки);
		КонецЦикла;
	Иначе
		СтруктураРезультат.Вставить("ВидПапки", СсылкаНаПапку.CRM_Вид);
	КонецЕсли;
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура АвтоустановкаРассмотренностиПисьма()
	Если Элементы.СписокПисем.ТекущаяСтрока <> Неопределено
		 И ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено 
		И ТекущиеДанные.Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И Не ТекущиеДанные.Рассмотрено Тогда
			ВыделенныеПисьма = Новый Массив;
			ВыделенныеПисьма.Добавить(ТекущиеДанные.Ссылка);
			Если ФильтрПоказатьТолькоНепрочитанные Тогда
				СписокНеПрочитанные.Добавить(ТекущиеДанные.Ссылка);
				ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(СписокПисем.Отбор, , "Непрочитанные")[0];
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка",
					 СписокНеПрочитанные, ВидСравненияКомпоновкиДанных.ВСписке, ,
					 Истина);
			КонецЕсли;
			УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
			ПроверитьНапоминанияОВходящихПисьмах(ВыделенныеПисьма);
			ОбновитьКоличествоНовыхПисемВПапках();
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры// АвтоустановкаРассмотренностиПисьма()

&НаКлиенте
Процедура МоиДелаАвтоустановкаРассмотренностиПисьма()
	Если Элементы.МоиДелаСписокЗадач.ТекущаяСтрока <> Неопределено
		 И ТипЗнч(Элементы.МоиДелаСписокЗадач.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Элементы.МоиДелаСписокЗадач.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено 
		И ТипЗнч(ТекущиеДанные.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И Не ТекущиеДанные.Рассмотрено Тогда
			ВыделенныеПисьма = Новый Массив;
			ВыделенныеПисьма.Добавить(ТекущиеДанные.Объект);
			МоиДелаУстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
			МоиДелаОбновитьКоличествоЗадач("Входящие");
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.МоиДелаСписокЗадач);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(МассивФайловИлиФайл,
	 УчетнаяЗаписьЭлектронногоПисьма = Неопределено)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектронногоПисьма) Тогда
		УчетнаяЗаписьЭлектронногоПисьма = УчетнаяЗаписьВыбранная;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			// это файл
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя),
				 УникальныйИдентификатор),
				 Файл.Имя);
			
		Иначе
			// Это элемент справочника *ПрисоединенныеФайлы.
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("Вложения", СписокВложений);
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗаписьЭлектронногоПисьма);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,
		 Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл")
			 И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
			 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл")
			 И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)
	
	ОбновитьНапоминанияОВходящихПисьмах = Ложь;
	
	Для Каждого Письмо Из МассивПисем Цикл
		
		ОбновитьНапоминанияОВходящихПисьмах = ОбновитьНапоминанияОВходящихПисьмах
			 ИЛИ CRM_НапоминанияСервер.CRM_УдалитьНапоминанияОПисьме(Письмо);
		
	КонецЦикла;
	
	Если ОбновитьНапоминанияОВходящихПисьмах Тогда
				
		Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", Истина));
				
	КонецЕсли;
	
КонецПроцедуры//  ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренестиПисьмаВПапку(Письма, Папка)
	
	Для Каждого Письмо Из Письма Цикл
		Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Письмо, Папка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаСервереБезКонтекста
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "",
	 ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено,
	 ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек,
		 ЗначениеПоУмолчанию, ОписаниеНастроек,
		 ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	 ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено,
	 НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,
		 ОписаниеНастроек, ИмяПользователя,
		 НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
Функция ПолучитьТекущуюУЗ()

	мТекСтр = Элементы.ПанельУправления.ТекущаяСтрока;
	ЭлементДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(мТекСтр);
	Если ЭлементДерева <> Неопределено Тогда
	
		ПараметрыФормы = Новый Структура("Ключ", ЭлементДерева.УчетнаяЗапись);
	Иначе
		ПустаяСсылка = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		ПараметрыФормы = Новый Структура("Ключ", ПустаяСсылка);
	
	КонецЕсли; 
	
	Возврат ПараметрыФормы;
КонецФункции // ПолучитьСсылкуВыделеннойУЗ()

&НаСервере
Функция СоздатьПисьмо(УчетнаяЗаписьСсылка) 
	
	Результат = "";
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Результат = НСтр("ru='Учетная запись не предназначена для отправки писем';
			|en='Login account is not intended for sending of letters'");
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПочту(МассивУчетныхЗаписей)
	
	Результат = "";
	
	Если МассивУчетныхЗаписей.Количество() = 1 И Не МассивУчетныхЗаписей[0].ИспользоватьДляПолучения Тогда
		Результат = НСтр("ru = 'Получение почты для данной учетной зписи недоступно.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПустоеОписание()
	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<body scroll=""auto"">
	|</body>
	|</html>";
КонецФункции

&НаСервере
Функция СформироватьОписаниеТекущегоПисьма(ПисьмоСсылка)
	
	ВложенияОчищеныПоНастройке = Ложь;
	
	СтруктураОписания = Новый Структура;
	
	// Проверим доступность письма по RLS.
	Попытка
		СсылкаДоступна = ПисьмоСсылка.Дата;
	Исключение
	    // письмо недоступно
		
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = НСтр("ru = 'Письмо недоступно из-за ограничения прав доступа'");
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
		
		СтруктураОписания.Вставить("Тело", Текст);
		СтруктураОписания.Вставить("От",   "");
		СтруктураОписания.Вставить("Кому", "");
		СтруктураОписания.Вставить("Тема", "");
		
		Возврат СтруктураОписания;
		
	КонецПопытки;
	
	Если ПисьмоСсылка = Неопределено Или ТипЗнч(ПисьмоСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоСсылка);
	ЭтоПисьмоРассылки = (ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
						И ЗначениеЗаполнено(Предмет)
						И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	
	Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Для Каждого УдаленноеВложение Из ПисьмоСсылка.НепринятыеВложения Цикл
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			НовоеВложение.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьНебезопасноеСодержимое = Ложь;
	ВключитьНебезопасноеСодержимое = Истина;
	
	Если ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		Текст = СтрЗаменить(ПисьмоСсылка.Текст, Символы.ПС, "<br>");
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(Текст);
	Иначе
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		ПозицияПараметров = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");		
		Если ПозицияПараметров > 0 Тогда
			НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияПараметров - 1);
		КонецЕсли;
		Для Каждого ЭлементСписка Из ИдентификаторыКартинокПисьма Цикл
			НавигационнаяСсылка = СтрЗаменить(ЭлементСписка.Значение.НавигационнаяСсылка, НавигационнаяСсылкаИнформационнойБазы 
				+ "/",
				 "");
			Если ЭтоАдресВременногоХранилища(НавигационнаяСсылка) Тогда
				УдалитьИзВременногоХранилища(НавигационнаяСсылка);
			КонецЕсли;
		КонецЦикла;
		ИдентификаторыКартинокПисьма.Очистить();
		Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(Предмет.ТекстHTML, Предмет);
			CRM_Взаимодействия.ЗаполнитьАвтотекстПоПисьму(Текст, ПисьмоСсылка);
			
		Иначе
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTMLBase64(ПисьмоСсылка.ТекстHTML, ПисьмоСсылка);
			
		КонецЕсли;
		
		Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Если ПисьмоСсылка.CRM_ВключитьНебезопасноеСодержимое Тогда
				
				ВключитьНебезопасноеСодержимое = Не ЗапрещеноОтображениеНебезопасногоСодержимого;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИСТИНА
				|ИЗ
				|	РегистрСведений.CRM_ДоверенныеАдресаЭлектроннойПочты КАК ДоверенныеАдреса
				|ГДЕ
				|	ДоверенныеАдреса.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
				
				Запрос.УстановитьПараметр("АдресЭлектроннойПочты", ПисьмоСсылка.ОтправительАдрес);
				РезультатЗапроса = Запрос.Выполнить();
				
				ВключитьНебезопасноеСодержимое = Не ЗапрещеноОтображениеНебезопасногоСодержимого И Не РезультатЗапроса.Пустой();
				
			КонецЕсли;
			
			// Коррекция ошибочного HTML.
			ПозицияЗакрывающегоТега = СтрНайти(Текст, "</html>", НаправлениеПоиска.СКонца);
			Если ПозицияЗакрывающегоТега > 0 Тогда
				Текст = Лев(Текст, ПозицияЗакрывающегоТега + СтрДлина("</html>"));
			КонецЕсли;
			
			Взаимодействия.ОтфильтроватьСодержимоеТекстаHTML(
				Текст, ПисьмоСсылка.Кодировка, Не ВключитьНебезопасноеСодержимое, ЕстьНебезопасноеСодержимое);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет);
	Иначе
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка);
	КонецЕсли;
	
	Вложения.Очистить();
	Для Каждого Стр Из табВложения Цикл
		НовСтр 										= Вложения.Добавить();
		НовСтр.Ссылка         						= Стр.Ссылка;
		НовСтр.ИмяФайла       						= Стр.ИмяФайла;
		НовСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		НовСтр.Размер        						= Стр.Размер;
		РазмерВложения								= Цел(Стр.Размер / 1024);
		НовСтр.РазмерСтрокой   						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		НовСтр.Расположение  						= 0;
		// НовСтр.ИДФайлаЭлектронногоПисьмаОтбор	= Стр.ИДФайлаЭлектронногоПисьмаОтбор;
		НовСтр.ИДФайлаЭлектронногоПисьмаОтбор = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		НовСтр.ИДФайлаЭлектронногоПисьма = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		
		Если Не ВложенияОчищеныПоНастройке И Стр.ОчищенПоНастройке Тогда
			ВложенияОчищеныПоНастройке = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПисьмаВложения(ПисьмоСсылка);
	
	Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
	
	Описание = "";
	//
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПисьмоСсылка));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НеОтображатьКартинкиПометка И (ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
		ИЛИ ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками) Тогда
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Текст);
		НайденныеУзлы = ДокументHTML.ПолучитьЭлементыПоИмени("img");
		Для Каждого Узел Из НайденныеУзлы Цикл
			Узел.Источник = "";
		КонецЦикла;
		Текст = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", Текст);
	СтруктураОписания.Вставить("От", ПисьмоСсылка.ОтправительПредставление);
	СтруктураОписания.Вставить("Кому", ПисьмоСсылка.СписокПолучателейПисьма);
	СтруктураОписания.Вставить("Тема", ПисьмоСсылка.Тема);
	
	Возврат СтруктураОписания;
	
КонецФункции

&НаСервере
Процедура ОбновитьУО(ТегСсылка)
	
	ЭлементНайден = Ложь;
	
	Если Не ЗначениеЗаполнено(ТегСсылка.ЦветПредставление) Тогда
		ЦветТега = Неопределено;
		ЦветТекстаТега = WebЦвета.Черный;
	Иначе
		// BSLLS:StyleElementConstructors-off
		ЦветТега = Новый Цвет(ТегСсылка.ЦветКрасный, ТегСсылка.ЦветЗеленый, ТегСсылка.ЦветСиний);
		// BSLLS:StyleElementConstructors-on
		ЦветТекстаТега = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветТега);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из УсловноеОформление.Элементы Цикл
		Для Каждого ТекЭлементОтбора Из ТекЭлемент.Отбор.Элементы Цикл
			Если ТипЗнч(ТекЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ТекЭлементОтбора.ПравоеЗначение = ТегСсылка Тогда
				
				ЭлементНайден = Истина;
				
				ТекЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветТега);
				ТекЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаТега);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЭлементНайден Тогда
		ДобавитьОформлениеТега(ТегСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУО()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Теги.Ссылка КАК Ссылка,
	               |	CRM_Теги.ЦветКрасный КАК ЦветКрасный,
	               |	CRM_Теги.ЦветЗеленый КАК ЦветЗеленый,
	               |	CRM_Теги.ЦветСиний КАК ЦветСиний,
	               |	CRM_Теги.ЦветПредставление КАК ЦветПредставление
	               |ИЗ
	               |	Справочник.CRM_Теги КАК CRM_Теги";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьОформлениеТега(Выборка);
		
	КонецЦикла;
	
	УсловноеОформлениеКД = СписокПисем.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Выделять непрочтенные письма жирным шрифтом и цветом фона
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные письма жирным шрифтом и цветом фона (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Рассмотрено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	// Выделять помеченные на удаления сообщения зачеркнутым шрифтом
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента =
		НСтр("ru = 'Выделять помеченные на удаления сообщения зачеркнутым шрифтом (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	// Выделять красным цветом письма с ошибками отправки
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять красным цветом письма с ошибками отправки (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнформацияООшибке");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ЦветОсобогоТекста;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Мои дела в почте: Выделять непрочтенные письма жирным шрифтом
	УсловноеОформлениеКД = МоиДелаСписокЗадач.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПредставлениеЭлемента = НСтр("ru = 'Выделять непрочтенные письма жирным шрифтом и цветом фона (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Рассмотрено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОформлениеТега(Тег)
	
	ЭлементОформления1 = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления1.Использование = Истина;
	
	ЭлементОтбораТег1 = ЭлементОформления1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбораТег1.Использование = Истина;
	ЭлементОтбораТег1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег1");
	ЭлементОтбораТег1.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораТег1.ПравоеЗначение = Тег.Ссылка;
	
	Элемент1 = ЭлементОформления1.Оформление.Элементы[0];
	
	Если Не ЗначениеЗаполнено(Тег.ЦветПредставление) Тогда
		ЦветТега = Неопределено;
		ЦветТекстаТега = WebЦвета.Черный;
	Иначе
		// BSLLS:StyleElementConstructors-off
		ЦветТега = Новый Цвет(Тег.ЦветКрасный, Тег.ЦветЗеленый, Тег.ЦветСиний);
		// BSLLS:StyleElementConstructors-on
		ЦветТекстаТега = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветТега);
	КонецЕсли;
	
	ИмяПараметраЦветФона = "ЦветФона";
	ИмяПараметраЦветТекста = "ЦветТекста";
	
	ЭлементОформления1.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветФона, ЦветТега);
	ЭлементОформления1.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветТекста, ЦветТекстаТега);
	Элемент1.Использование = Истина;
	
	ПолеОформления1 = ЭлементОформления1.Поля.Элементы.Добавить();
	ПолеОформления1.Поле = Новый ПолеКомпоновкиДанных("Тег1");
	ПолеОформления1.Использование = Истина;
	
	ЭлементОформления2 = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораТег2 = ЭлементОформления2.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбораТег2.Использование = Истина;
	ЭлементОтбораТег2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег2");
	ЭлементОтбораТег2.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораТег2.ПравоеЗначение = Тег.Ссылка;
	
	Элемент2 = ЭлементОформления2.Оформление.Элементы[0];
	
	ЭлементОформления2.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветФона, ЦветТега);
	ЭлементОформления2.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветТекста, ЦветТекстаТега);
	Элемент2.Использование = Истина;
	
	ПолеОформления2 = ЭлементОформления2.Поля.Элементы.Добавить();
	ПолеОформления2.Поле = Новый ПолеКомпоновкиДанных("Тег2");
	ПолеОформления2.Использование = Истина;
	
	ЭлементОформления3 = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораТег3 = ЭлементОформления3.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбораТег3.Использование = Истина;
	ЭлементОтбораТег3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПисем.Тег3");
	ЭлементОтбораТег3.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораТег3.ПравоеЗначение = Тег.Ссылка;
	
	Элемент3 = ЭлементОформления3.Оформление.Элементы[0];
	
	ЭлементОформления3.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветФона, ЦветТега);
	ЭлементОформления3.Оформление.УстановитьЗначениеПараметра(ИмяПараметраЦветТекста, ЦветТекстаТега);
	Элемент3.Использование = Истина;
	
	ПолеОформления3 = ЭлементОформления3.Поля.Элементы.Добавить();
	ПолеОформления3.Поле = Новый ПолеКомпоновкиДанных("Тег3");
	ПолеОформления3.Использование = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуСправочникаПоИдентификатору(ИмяСправочника, Идентификатор)
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
КонецФункции

&НаКлиенте
Процедура ПанельУправленияПриАктивизацииСтроки(Элемент)
	
	Если ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока Тогда
		Возврат;
	Иначе
		ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока;
	КонецЕсли;
	
	СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяПапка", Неопределено);
	
	ТекущееПисьмо = Неопределено;
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяПапка = Неопределено;
	Иначе
		ТекущаяПапка = ТекущиеДанные.Папка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка) И Не ВыбраннаяПапка = ТекущаяПапка Тогда
		ВыбраннаяПапка = ТекущаяПапка;
		
		Если ПризнакОткрытияФормы <> Неопределено Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоНажатийВыборЗначенияПапкиВДеревеСлева");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
	
		Элементы.ПанельУправленияКонтекстноеМенюНастройкаСинхронизацииПапок.Видимость = ТекущиеДанные.СинхронизироватьПапки;
		Элементы.ПанельУправленияКонтекстноеМенюРедактироватьПапку.Видимость = ЗначениеЗаполнено(ТекущиеДанные.Папка)
																				И НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидПапки);
		
		ЭтоПапкаУдаленные = 
			(ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные"));
		Элементы.ПанельУправленияКонтекстноеМенюОчиститьКорзину.Видимость = ЭтоПапкаУдаленные;
		Элементы.СписокПисемПоказатьСкрытыеПисьма.Видимость = ЭтоПапкаУдаленные;
		НастроитьОтборПоСкрытымПисьмам(ЭтоПапкаУдаленные);
		
		ЭтоПапкаНежелательнаяПочта = 
			(ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта"));
		Элементы.СписокПисемОтметитьКакСпам.Доступность = Не ЭтоПапкаНежелательнаяПочта;
		Элементы.СписокПисемКонтекстноеМенюОтметитьКакСпам.Доступность = Не ЭтоПапкаНежелательнаяПочта;
		
		Элементы.ПанельУправления.КонтекстноеМеню.Видимость = Не ЗначениеЗаполнено(ТекущиеДанные.ПапкаМоиДела);
		
	КонецЕсли;
	
	Элементы.Описание.Видимость = ЗначениеЗаполнено(ТекущаяПапка) И ПоказатьСкрытьПисьмоПометка;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельУправленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;    
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		 И Не ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	Иначе	
		
		СтрокаНазначение = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
		
		ИсходнаяПапкаМоиДела = Элемент.ТекущиеДанные.ПапкаМоиДела;
		ПапкаНазначенияМоиДела = СтрокаНазначение.ПапкаМоиДела;
		ЭтоПеретаскиваниеЗадачиВЗадачи = ЗначениеЗаполнено(ИсходнаяПапкаМоиДела)
			И ЗначениеЗаполнено(ПапкаНазначенияМоиДела);
		ЭтоПеретаскиваниеПисьмаВЗадачи = Не ЗначениеЗаполнено(ИсходнаяПапкаМоиДела)
			И ЗначениеЗаполнено(ПапкаНазначенияМоиДела);
		ПеретаскиваниеЗапрещено = Ложь;
			
		Если ЭтоПеретаскиваниеЗадачиВЗадачи Тогда
			
			ПеретаскиваниеЗапрещено =
				ИсходнаяПапкаМоиДела = "Мои дела" 
				Или ИсходнаяПапкаМоиДела = "Завершенные" 
				Или ПапкаНазначенияМоиДела = "Мои дела"
				Или ПапкаНазначенияМоиДела = "Входящие";
		
		ИначеЕсли ЭтоПеретаскиваниеПисьмаВЗадачи Тогда
			
			ПеретаскиваниеЗапрещено =
				ПапкаНазначенияМоиДела = "Мои дела"
				Или ПапкаНазначенияМоиДела = "Входящие";
				
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНазначение.Папка) Тогда
			ПеретаскиваниеЗапрещено = Истина;
		КонецЕсли;
		
		Если ПеретаскиваниеЗапрещено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		Если СтрокаНазначение.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие") 
			Или СтрокаНазначение.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные") Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельУправленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЭтоПеретаскиваетсяФайл = ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение);
	
	Если ЭтоПеретаскиваетсяФайл = Истина Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
		Если Строка <> Неопределено Тогда
			// Создание нового письма с присоедненным файлом.
			СтрокаПеретаскивания = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			Если СтрокаПеретаскивания <> Неопределено Тогда
				СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, СтрокаПеретаскивания.УчетнаяЗапись);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
			СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, УчетнаяЗаписьВыбранная);
		КонецЕсли;
		
	ИначеЕсли ЭтоПеретаскиваетсяФайл = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			 И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			 
			ПапкаНазначения = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			ЭтоПеретаскиваниеПисьма = 
				ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
			ЭтоПеретаскиваниеЗадачи = 
				ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ")
				И ЗначениеЗаполнено(ПапкаНазначения.ПапкаМоиДела);
			
			Если Не ЭтоПеретаскиваниеПисьма И Не ЭтоПеретаскиваниеЗадачи Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПапкаНазначения.ПапкаМоиДела) Тогда
				ТекущееИзмерениеАРМ = Элемент.ТекущиеДанные.ПапкаМоиДела;
				НовоеИзмерениеАРМ = ПапкаНазначения.ПапкаМоиДела;
				Если ЭтоПеретаскиваниеПисьма Тогда
					ОбъектПеретаскивания = ПараметрыПеретаскивания.Значение[0];
				Иначе
					ОбъектПеретаскивания = МоиДелаОбъектПеретаскивания(ПараметрыПеретаскивания.Значение[0]);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекущееИзмерениеАРМ) 
					И ТипЗнч(ОбъектПеретаскивания) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					МоиДелаИзменитьСтатусЗадачи(ОбъектПеретаскивания, НовоеИзмерениеАРМ);
					ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
				Иначе
					МоиДелаСоздатьЗадачуВФоне(ОбъектПеретаскивания, НовоеИзмерениеАРМ);
					МоиДелаОбновитьКоличествоЗадач();
					Если ТекущееИзмерениеАРМ = "Входящие" Тогда
						Элементы.МоиДелаСписокЗадач.Обновить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПодготовитьПеремещениеПисем(ПапкаНазначения, ПараметрыПеретаскивания.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПеремещениеПисем(ПапкаНазначения, МассивПисем)
	
	ТекущийПользовательРазрешенаЗапись = CRM_УправлениеЭлектроннойПочтой.ТекущийПользовательПолучитьПравоУчетнойЗаписи(ПапкаНазначения.УчетнаяЗапись,
		 "Запись");
	Если ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие")
		
		 	 Или ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные") Тогда
		Возврат;
	ИначеЕсли ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
		СообщениеОФильтрацииМассива = НСтр("ru = 'Перемещение в Черновики невозможно для входящего письма с темой ""%1""'");
		МассивПисем = УдалитьИзМассиваОбъектыТипа(МассивПисем,
			 Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"),
			 СообщениеОФильтрацииМассива);
		Если МассивПисем.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
		СообщениеОФильтрацииМассива =
			НСтр("ru = 'Перемещение во Входящие невозможно для не входящего письма с темой ""%1""'");
		МассивПисем = ПолучитьИзМассиваОбъектыТипа(МассивПисем,
			 Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"),
			 СообщениеОФильтрацииМассива);
		Если МассивПисем.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийПользовательРазрешенаЗапись Тогда
		
		УчетнаяЗаписьПисьма = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(МассивПисем[0], "УчетнаяЗапись");
		Если УчетнаяЗаписьПисьма <> ПапкаНазначения.УчетнаяЗапись Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Перетаскивать письма можно только в рамках одной учетной записи!';
				|en='You can only drag and drop emails within the same account!'"));
			Возврат;
		КонецЕсли;
		
		ЕстьЛидыСУказаниемПричиныОтклонения = ЕстьЛидыВВыбранныхСтроках(МассивПисем, Истина);
		
		ПараметрыОбработкиПеремещения = Новый Структура;
		ПараметрыОбработкиПеремещения.Вставить("МассивСсылок", МассивПисем);
		ПараметрыОбработкиПеремещения.Вставить("Папка", ПапкаНазначения.Папка);
		ПараметрыОбработкиПеремещения.Вставить("ВидПапки", ПапкаНазначения.ВидПапки);
		
		Если (ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные") 
			Или ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") 
			Или ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта")) Тогда
			
			Если ЕстьЛидыСУказаниемПричиныОтклонения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПанельУправленияПеретаскиваниеЗавершение",
					 ЭтотОбъект,
					 ПараметрыОбработкиПеремещения);
				ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", ,
					 ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе	
				ПанельУправленияПеретаскиваниеЗавершение(Истина, ПараметрыОбработкиПеремещения);
			КонецЕсли;
		Иначе
			ПанельУправленияПеретаскиваниеЗавершение(Ложь, ПараметрыОбработкиПеремещения);
		КонецЕсли;
		
		Если ПапкаНазначения.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
			CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.Взаимодействия.МенеджерПочты.Удобство.КоличествоПеретаскиванийВКорзину");
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав для работы с письмами данной учетной записи!"
"Для текущего пользователя должно быть установлено право ""Отправка""';en='Insufficient rights to work with emails to this account!"
"For current user must be set right ""Send""'"));
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИзМассиваОбъектыТипа(МассивОбъектов, Тип, ШаблонСообщения = "")
	
	ОставленныеОбъекты = Новый Массив;
	
	Для Каждого ЭлементОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ЭлементОбъект) = Тип Тогда
			ОставленныеОбъекты.Добавить(ЭлементОбъект);
		Иначе
			Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементОбъект.Тема);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОставленныеОбъекты;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьИзМассиваОбъектыТипа(МассивОбъектов, Тип, ШаблонСообщения = "")
	
	ОставленныеОбъекты = Новый Массив;
	
	Для Каждого ЭлементОбъект Из МассивОбъектов Цикл
		Если ТипЗнч(ЭлементОбъект) = Тип Тогда
			Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементОбъект.Тема);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		Иначе
			ОставленныеОбъекты.Добавить(ЭлементОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОставленныеОбъекты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзМассиваОбращенияСостояния(Знач МассивОбъектов, Состояние, ШаблонСообщения = "")
	
	СостоянияЛидов = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛидов(МассивОбъектов);
	
	ОставленныеОбъекты = Новый Массив;
	
	Для Каждого ЭлементОбъект Из МассивОбъектов Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Лид", ЭлементОбъект);
		
		Строки = СостоянияЛидов.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			
			Если Строки[0].Состояние = Состояние Тогда
				
				ОставленныеОбъекты.Добавить(ЭлементОбъект);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементОбъект.Тема);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОставленныеОбъекты;
	
КонецФункции

&НаКлиенте
Процедура ПанельУправленияПеретаскиваниеЗавершение(Результат, ДопПараметры) Экспорт
	
	ОбработатьИзменениеПапки(Результат, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПапки(Результат, ДопПараметры)
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		ОтклонитьОбращениеНаСервере(ДопПараметры.МассивСсылок, Результат.ПричинаОтказа, Результат.Комментарий);
	ИначеЕсли Результат Тогда
		ОтклонитьОбращениеНаСервере(ДопПараметры.МассивСсылок, Неопределено, "");
	КонецЕсли;
	
	// Флаг не передан, либо он равен Истина:
	Если НЕ ДопПараметры.Свойство("ПереноситьПисьмаВОбработанные") ИЛИ ДопПараметры.ПереноситьПисьмаВОбработанные Тогда
		ПеренестиПисьмаВПапку(ДопПараметры.МассивСсылок, ДопПараметры.Папка);
	КонецЕсли;
		
	МассивВходящихПисем = ПолучитьИзМассиваОбъектыТипа(ДопПараметры.МассивСсылок,
		 Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));				
	
	Если ДопПараметры.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные") 
			Или ДопПараметры.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") 
			Или ДопПараметры.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта") Тогда
		УстановитьСнятьПометкуОПрочтении(МассивВходящихПисем, Истина);
	КонецЕсли;
	
	Если ДопПараметры.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
		УстановитьПометкуУдаления(ДопПараметры.МассивСсылок);
	КонецЕсли;
	
	ПроверитьНапоминанияОВходящихПисьмах(МассивВходящихПисем);
	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.СписокПисем);
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(МассивСсылок, ПричинаОтказа, Комментарий)
	МассивЛидов = ПолучитьИзМассиваОбращенияСостояния(МассивСсылок,
		 ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый"));
	Для каждого Ссылка Из МассивСсылок Цикл
		Если МассивЛидов.Найти(Ссылка) <> Неопределено Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка,
				 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
				 Комментарий);
		КонецЕсли;
		Об = Ссылка.ПолучитьОбъект();
		Об.CRM_СкрытьВАРМ = Истина;
		Об.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выполняется сохранение файла ""%1"" ...
		         |Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое, ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru='Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения()
	ВыделенныеВложения = Новый Массив;
	КоличествоВложений = Вложения.Количество();
	ТолькоВыделенные = Ложь;
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	
	Если Не ВсеВложенияПометка Тогда
		ТолькоВыделенные = Истина;
		Для Каждого Вложение Из Вложения Цикл 
			Если Вложение.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				Индекс = Вложения.Индекс(Вложение);
				ВыделенныеВложения.Добавить(Индекс);
			КонецЕсли;;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),
		 ДополнительныеПараметры.ПерезаписатьВсе,
		 Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),
		 ДополнительныеПараметры.ПереименоватьВсе,
		 Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда
				Если ТекущийНомерВложения = ДополнительныеПараметры.КоличествоВложений - 1 Тогда
					
					// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
					СписокИменФайлов = Новый СписокЗначений;
					Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
						ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
						Если ЭлементСписка = Неопределено Тогда
							СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
						Иначе
							Файл = Новый Файл(ПолучаемыйФайл.Имя);
							ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
							ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
						КонецЕсли;
					КонецЦикла;
					// Выполняем сохранение файлов.
					Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ДополнительныеПараметры.ВыборКаталога.Каталог, Ложь);
				Иначе
					ДополнительныеПараметры.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
					СохранитьВложенияПослеВыбораКаталога(ДополнительныеПараметры.ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
					+ ТекущееВложение.ИмяФайла 
					+ НСтр("ru=' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьПисьмаВложения(ПисьмоСсылка)

	ТаблицаПисемВложений = Взаимодействия.ДанныеХранимыхВБазеПисемВложений(ПисьмоСсылка);
	
	Для Каждого ПисьмоВложение Из ТаблицаПисемВложений Цикл
		
		ПредставлениеПисьма = Взаимодействия.ПредставлениеПисьма(ПисьмоВложение.Тема, ПисьмоВложение.Дата);
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Письмо = ПисьмоВложение.Письмо;
		НоваяСтрока.ИмяФайла = ПредставлениеПисьма + ".eml";
		НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла("eml");
		НоваяСтрока.ИмяФайлаНаКомпьютере = "";
		НоваяСтрока.Размер = ПисьмоВложение.Размер;
		РазмерВложения = Цел(ПисьмоВложение.Размер / 1024);
		НоваяСтрока.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ПисьмоВложение.Размер) 
			+ " байт");
		НоваяСтрока.Расположение = 5;
		НоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		НоваяСтрока.ИДФайлаЭлектронногоПисьма = "#";
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вложение '") 
						+ ТекущееВложение.ИмяФайла 
						+ НСтр("ru=' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		// Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			ПроверитьНаличиеФайловПисемНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Сохраняется файл ""%1"" (%2 Мб)"
"Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПредставлениеРазмераФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
			СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		Иначе
			СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение, ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку), 1, НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru='Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ШаблонТекстаВопроса	= НСтр("ru='Файл %1 уже существует.%2Выберите действие для всех существующих файлов:'");
	ТекстВопроса	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВопроса,
		 ПараметрыВложения.ПолноеИмяФайла,
		 Символы.ПС);
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	Если ПараметрыВложения.Свойство("СохранениеПисем") Тогда
		СохранитьВложенияПисьмаПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПисьмоНаСервере(Показать = Истина)
	
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка = Показать;
	ПоказатьСкрытьПисьмоПометка	= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	Элементы.Описание.Видимость	= ПоказатьСкрытьПисьмоПометка;
	Если ПоказатьСкрытьПисьмоПометка Тогда
		Элементы.ОписаниеПисьмаHTML.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьДеревоУчетныхЗаписей(Команда)
	Элементы.ПанельУправления.Видимость = НЕ Элементы.ПанельУправления.Видимость;
	Если Элементы.ПанельУправления.Видимость Тогда
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Скрыть список учетных записей'");
	Иначе
		Элементы.ПоказатьСкрытьДеревоУчетныхЗаписей.Заголовок = НСтр("ru='Показать список учетных записей'");
	КонецЕсли;
	ХранилищеОбщихНастроекСохранить(ИмяФормы, "СписокУчетныхЗаписей", Элементы.ПанельУправления.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Element.className = "rightClick" Тогда
		Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
			CRM_БуферОбмена = ДанныеСобытия.Href;
			НастроитьКомандуКопированияВБуферОбменаВКМ(Истина);
			НеОбрабатыватьКлик = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(НеОбрабатыватьКлик) Или Не НеОбрабатыватьКлик Тогда
			НастроитьКомандуКопированияВБуферОбменаВКМ(Ложь);
		Иначе
			НеОбрабатыватьКлик = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);

КонецПроцедуры

&НаКлиенте
Процедура ВложенияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		// Сохраненить вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "Сохранить_СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("Сохранить_СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
			Возврат;
		КонецЕсли;
		
		// Скопировать вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "Скопировать_СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("Скопировать_СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			
			ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ТекущиеДанные.Ссылка);
			CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
			Возврат;
		КонецЕсли;
		
		// Открыть вложение.
		
		ИндексСсылкиВложения = СтрНайти(ДанныеСобытия.Href, "СсылкаВложения_");
		
		Если ИндексСсылкиВложения > 0 Тогда
			НачинаяСИндекса = ИндексСсылкиВложения + СтрДлина("СсылкаВложения_");
			ИдентификаторСсылкиВложения = Сред(ДанныеСобытия.Href, НачинаяСИндекса);
			ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
			Возврат;
		КонецЕсли;
		
		// Групповые действия.
		
		Если СтрНайти(ДанныеСобытия.Href, "CRM_ЗагрузитьВложения") > 0 Тогда
			ВыполнитьЗагрузкуВложений();
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "СохранитьВсеВложения") > 0 Тогда
			ПолучаемыеФайлы = Новый Массив;
			ПолученныеФайлы = Новый Массив;
			
			ПроверкаСуществованияФайлов = Истина;
			
			СохранитьВложения();
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "СкопироватьВсеВложения") > 0 Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Вложение Из Вложения Цикл
				МассивСсылок.Добавить(Вложение.Ссылка);
			КонецЦикла;
			
			CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер обмена'"), Окно.ПолучитьНавигационнуюСсылку(), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
		Иначе
			CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(
				ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВложенияHTMLПриНажатии()

&НаКлиенте
Процедура ПроверкаИИсправлениеВходящихПисем(Команда)
	
	ОткрытьФорму("Обработка.CRM_ПроверкаВходящихПисем.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторПапки(СтрокаДерева, Папка)

	СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Подстрока Из СтрокиДерева Цикл
		Если Подстрока.Папка = Папка Тогда
		
			Возврат Подстрока.ПолучитьИдентификатор();
		Иначе
			ИД = ПолучитьИдентификаторПапки(Подстрока, Папка);
			Если ЗначениеЗаполнено(ИД) Тогда
			
				Возврат ИД;
			
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ПолучитьИдентификаторПапки()

&НаКлиенте
Процедура ПоказатьТолькоНепрочитанные(ТолькоНепрочитанные)
	
	Если ТолькоНепрочитанные Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокПисем.Отбор.Элементы,
			 "Непрочитанные",
			 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Рассмотрено", Ложь,
			 ВидСравненияКомпоновкиДанных.Равно, ,
			 Истина);
	Иначе
		СписокНеПрочитанные.Очистить();
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокПисем, , "Непрочитанные");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСсылкиВложений(Знач Вложения, Знач ВсеВложенияПометка, Знач ВложенияОчищеныПоНастройке)
	
	// Параметр %1 - Идентификатор вложения - для открытия.
	// Параметр %2 - Количество пикселей смещения внутри БиблиотекаКартинок.КоллекцияПиктограммФайлов20.
	// Параметр %3 - Имя файла.
	// Параметр %4 - Идентификатор вложения - для скачивания.
	HTMLШаблонФайла =
	"<div class=""files-item " + ?(ВложенияОчищеныПоНастройке, "files-item__disabled", "") + """>
	|	<a class=""files-item-name-container"" href=""%1"" title=""%3"">
	|		<div class=""files-item-icon"" style=""background-position-x: -%2px""></div>
	|		<p class=""files-item-name"">%3</p>
	|	</a>
	|	<a class=""files-item-button file-button-icon-small file-button-icon__save-all"" href=""%4"" title=""Сохранить на диск""></a>
	|	<a class=""files-item-button file-button-icon-small file-button-icon__copy"" href=""%5"" title=""Копировать в буфер обмена""></a>
	|</div>";
	
	КоличествоВложений       = 0;
	ВсеВложенияВФорматеHTML  = "";
	РазмерыКартинкиВПикселях = 20;
	
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		// Получение представления.
		Если (Не ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#")
				Или ВсеВложенияПометка Тогда
			ПредставлениеСсылки = ЭлементТаблицы.ИмяФайла;
			КоличествоВложений = КоличествоВложений + 1;
		Иначе
			ПредставлениеСсылки = "";
		КонецЕсли;
		
		// Если нет представления ссылки на файл, тогда такое вложение пропускаем.
		Если ПустаяСтрока(ПредставлениеСсылки) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение смещения для картинки для вставки в HTML.
		РасширениеФайла	= ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.ИмяФайла);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		
		// Вычисляем смещения внутки большой картинки пиктограмм файлов.
		// Каждая картинка по 20 пикселей в высоту и ширину.
		СмещениеКартинки = ИндексКартинки * РазмерыКартинкиВПикселях;
		СмещениеКартинки = Формат(СмещениеКартинки, "ЧН=0; ЧГ=");
		
		// Сформируем идентфикаторы вложения.
		Если ВложенияОчищеныПоНастройке Тогда
			ИдентификаторВложенияСсылкаОткрытие		= "";
			ИдентификаторВложенияСсылкаСкачивание	= "";
			ИдентификаторВложенияСсылкаКопирование	= "";
		Иначе
			ИдентификаторСсылкиВложения = Формат(ЭлементТаблицы.ПолучитьИдентификатор(), "ЧН=0; ЧГ=");
			ИдентификаторВложенияСсылкаОткрытие		= "СсылкаВложения_" + ИдентификаторСсылкиВложения;
			ИдентификаторВложенияСсылкаСкачивание	= "Сохранить_СсылкаВложения_" + ИдентификаторСсылкиВложения;
			ИдентификаторВложенияСсылкаКопирование	= "Скопировать_СсылкаВложения_" + ИдентификаторСсылкиВложения;
		КонецЕсли;
		
		// Заполним шаблон.
		ВсеВложенияВФорматеHTML = ВсеВложенияВФорматеHTML + СтрШаблон(
			HTMLШаблонФайла,
			ИдентификаторВложенияСсылкаОткрытие,		// %1
			СмещениеКартинки,							// %2
			ПредставлениеСсылки,						// %3
			ИдентификаторВложенияСсылкаСкачивание,		// %4
			ИдентификаторВложенияСсылкаКопирование);	// %5
	КонецЦикла;
	
	HTMLИтоговаяВерстка = "<h1>Вложения (" + Строка(КоличествоВложений) + ")</h1>";
	
	Если ПустаяСтрока(ВсеВложенияВФорматеHTML) Тогда
		Возврат "";
	КонецЕсли;
	
	HTMLИтоговаяВерстка = HTMLИтоговаяВерстка + "<div id=""files-items"">" + ВсеВложенияВФорматеHTML + "</div>";
	
	Если ВложенияОчищеныПоНастройке Тогда
			ПодсказкаСсылки = "Для автозагрузки всех вложений у входящих писем требуется указать "
				+ "'Загружать вложения при получении писем' в учетной записи электронной почты";
			
			HTMLИтоговаяВерстка = HTMLИтоговаяВерстка
				+ "<div id=""file-buttons-container"">
				|	<a class=""file-button"" href=""CRM_ЗагрузитьВложения"" title=""" + ПодсказкаСсылки + """>
				|	<div class=""file-button-icon-big file-button-icon__download-removed""></div>
				|	<p class=""file-button-name"">Загрузить удаленные картинки и вложения</p></a></div>";
		Иначе
			HTMLИтоговаяВерстка = HTMLИтоговаяВерстка
				+ "<div id=""file-buttons-container"">
				|	<a class=""file-button"" href=""СохранитьВсеВложения"" title=""Сохранить все вложения"">
				|	<div class=""file-button-icon-big file-button-icon__save-all""></div>
				|	<p class=""file-button-name"">Сохранить все</p></a>
				|	<a class=""file-button"" href=""СкопироватьВсеВложения"" title=""Копировать все вложения в буфер обмена"">
				|	<div class=""file-button-icon-big file-button-icon__copy""></div>
				|	<p class=""file-button-name"">Копировать все</p></a></div>";
	КонецЕсли;
	
	Возврат HTMLИтоговаяВерстка;
	
КонецФункции // СформироватьСсылкиВложений()

&НаСервере
Процедура СформироватьHTMLОтображенияТекстаПисьма()
	
	Макет = Обработки.CRM_МенеджерПочты.ПолучитьМакет("ВложенияHTML");
	ВложенияHTMLШаблон = Макет.ПолучитьТекст();
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_КоллекцияПиктограммФайлов20, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<FILE_ICONS_PATH>", ПутьККартинке);
	
	// Картинки сохранения.
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СохранитьКак, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_DOWNLOAD>", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ЗагрузитьУдаленныеВложения, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_DOWNLOAD_REMOVED>", ПутьККартинке);
	
	// Картинки копирования в буфер обмена.
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.СкопироватьВБуферОбмена, УникальныйИдентификатор);
	ВложенияHTMLШаблон = СтрЗаменить(ВложенияHTMLШаблон, "<BUTTON_ICON_COPY>", ПутьККартинке);
	
КонецПроцедуры // СформироватьHTMLОтображенияТекстаПисьма()

&НаКлиенте
Процедура УстановитьВложенияВHTML()
	
	ВерсткаВложений = СформироватьСсылкиВложений(
		Вложения, ВсеВложенияПометка, ВложенияОчищеныПоНастройке);
	
	Если ПустаяСтрока(ВерсткаВложений) Тогда
		Элементы.ВложенияHTML.Видимость = Ложь;
	Иначе
		Элементы.ВложенияHTML.Видимость = Истина;
		
		ВложенияHTML = СтрЗаменить(
			ВложенияHTMLШаблон, "<INNER_FILES_HTML>", ВерсткаВложений);
	КонецЕсли;
	
КонецПроцедуры // УстановитьHTMLВКонтейнер()

&НаСервере
Процедура УстановитьВложенияВHTMLНаСервере()
	
	ВерсткаВложений = СформироватьСсылкиВложений(
		Вложения, ВсеВложенияПометка, ВложенияОчищеныПоНастройке);
	
	Если ПустаяСтрока(ВерсткаВложений) Тогда
		Элементы.ВложенияHTML.Видимость = Ложь;
	Иначе
		Элементы.ВложенияHTML.Видимость = Истина;
		
		ВложенияHTML = СтрЗаменить(
			ВложенияHTMLШаблон, "<INNER_FILES_HTML>", ВерсткаВложений);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВложенияВHTMLНаСервере()

&НаКлиенте
Процедура ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанныеПисьма = Элементы.СписокПисем.ТекущиеДанные;
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
		ПараметрыВложения = ВзаимодействияКлиент.ПараметрыПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ТекущиеДанныеПисьма.Дата;
		ПараметрыВложения.ПисьмоОснование     = ТекущиеДанныеПисьма.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = ТекущиеДанныеПисьма.Тема;
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо, ПараметрыВложения, ЭтотОбъект);
		
	Иначе
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_Сохранить_СсылкаВложения_", "");
	СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	// +CRM
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(ТекущиеДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение,
			 Прав(ФайлВложения.Расширение,
			 СтрДлина(ФайлВложения.Расширение) - 1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, ТекущиеДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	ИначеЕсли (ТекущиеДанные.Расположение = 5) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьПисьмоНаДиск(ТекущиеДанные.Письмо, УникальныйИдентификатор);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура ОтправитьПолучитьПисьма_ВыбратьУчетнуюЗапись(Команда)
	
	ПустаяСсылка = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка");
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПустаяСсылка, НСтр("ru = 'Все новые сообщения'"), , БиблиотекаКартинок.CRM_Обновить);
	
	КоллекцияЭлементовДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
		
		Если Не СтрокаДерева.ИспользоватьДляПолучения Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.УчетнаяЗапись) Тогда
			Продолжить;
		КонецЕсли;
		
		Список.Добавить(СтрокаДерева.УчетнаяЗапись, СтрокаДерева.УчетнаяЗапись, , БиблиотекаКартинок.CRM_Обновить);
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюВыбратьУчетнуюЗапись", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.ОтправитьПолучитьПисьма_ВыбратьУчетнуюЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюВыбратьУчетнуюЗапись(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка") Тогда
		ОтправитьПолучитьПисьмаВсехУчетныхЗаписей();
	Иначе
		МассивУчетныхЗаписей = Новый Массив;
		МассивУчетныхЗаписей.Добавить(ВыбранныйЭлемент.Значение);
	
		ОтправитьПолучитьПисьмаУчетныхЗаписей(МассивУчетныхЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СписокПереместитьВПапку()
	
	ИсключаемыеВидыПапок = Новый Массив;
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Исходящие"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Отправленные"));
	ИсключаемыеВидыПапок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики"));
	
	МассивПапокСИерархией = Новый Массив;
	ДеревоПапок = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	Для Каждого СтрокаДереваПапок Из ДеревоПапок Цикл
		
		Если СтрокаДереваПапок.УчетнаяЗапись <> УчетнаяЗаписьВыбранная Тогда Продолжить; КонецЕсли;
		МассивПапокУчетнойЗаписиСИерархией(СтрокаДереваПапок.ПолучитьЭлементы(), МассивПапокСИерархией, ИсключаемыеВидыПапок);
		
	КонецЦикла;
	
	Возврат СписокПереместитьВПапкуНаСервере(МассивПапокСИерархией);
	
КонецФункции

&НаСервере
Функция СписокПереместитьВПапкуНаСервере(МассивПапокСИерархией)
	
	Список = Новый СписокЗначений;	
	
	Для Каждого ЭлементСтуктура Из МассивПапокСИерархией Цикл
		
		Если ЭлементСтуктура.ВнизСписка Тогда Продолжить; КонецЕсли;
		
		Список.Добавить(ЭлементСтуктура.Ссылка, ЭлементСтуктура.Имя);
		
	КонецЦикла;
	
	Для Каждого ЭлементСтуктура Из МассивПапокСИерархией Цикл
		
		Если НЕ ЭлементСтуктура.ВнизСписка Тогда Продолжить; КонецЕсли;
		
		Список.Добавить(ЭлементСтуктура.Ссылка, ЭлементСтуктура.Имя);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияПоУчетнойЗаписи(УчетнаяЗапись)
	
	Результат = Новый Структура;
	Результат.Вставить("ПротоколВходящейПочты", УчетнаяЗапись.ПротоколВходящейПочты);
	
	МенеджерЗаписи = РегистрыСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Прочитать();
	Результат.Вставить("ДатаЗагрузкиПисем", МенеджерЗаписи.ДатаЗагрузкиПисем);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПочтуТекущегоЯщика(Команда)
	МассивУчетныхЗаписей = Новый Массив;
	МассивУчетныхЗаписей.Добавить(УчетнаяЗаписьВыбранная);
	ОтправитьПолучитьПисьмаУчетныхЗаписей(МассивУчетныхЗаписей);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивРазвернутыхЭлементов(ДеревоЭлементов, МассивРазвернутых)
	
	Для Каждого Элемент Из ДеревоЭлементов.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		Если Элементы.ПанельУправления.Развернут(Идентификатор) = Истина Тогда
			МассивРазвернутых.Добавить(Элемент);
		КонецЕсли;
		ЗаполнитьМассивРазвернутыхЭлементов(Элемент, МассивРазвернутых);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПоложениеДереваУчетныхЗаписей(ДеревоЭлементов, МассивРазвернутых)
	
	Для Каждого Элемент Из ДеревоЭлементов.ПолучитьЭлементы() Цикл
		
		Идентификатор = Элемент.ПолучитьИдентификатор();
		РазвернутьСтроку = Ложь;
		
		Для Каждого ЭлементМассива Из МассивРазвернутых Цикл
			
			ЭлементМассиваПапка = ?(ЭлементМассива.Свойство("Папка"), ЭлементМассива.Папка,
				 ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка"));
			Если Элемент.УчетнаяЗапись = ЭлементМассива.УчетнаяЗапись
				И Элемент.Папка = ЭлементМассиваПапка
				И ЗначениеЗаполнено(ЭлементМассива.Развернут) Тогда
				
				РазвернутьСтроку = ЭлементМассива.Развернут;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазвернутьСтроку Тогда
			Элементы.ПанельУправления.Развернуть(Идентификатор);
		Иначе
			Элементы.ПанельУправления.Свернуть(Идентификатор);
		КонецЕсли;
		
		Если Элемент.УчетнаяЗапись = УчетнаяЗаписьВыбранная И Элемент.Папка = ТекущаяПапка Тогда
			Элементы.ПанельУправления.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
		ВосстановитьПоложениеДереваУчетныхЗаписей(Элемент, МассивРазвернутых);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУчетнуюЗапись(Направление)

	НомерСтроки = Элементы.ПанельУправления.ТекущаяСтрока;
	Если НомерСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаУчетнойЗаписи = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(НомерСтроки);
	Если СтрокаУчетнойЗаписи = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РодительСтрокаУчетнойЗаписи = СтрокаУчетнойЗаписи.ПолучитьРодителя();
	Если РодительСтрокаУчетнойЗаписи <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	ИндексУчетнойЗаписи = СтрокиДерева.Индекс(СтрокаУчетнойЗаписи);
	КоличествоЭлементов = СтрокиДерева.Количество();
	Если КоличествоЭлементов < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиДерева[0].ПапкаМоиДела = "Мои дела" 
		И (ИндексУчетнойЗаписи = 1 И Направление < 0) Тогда
		Возврат;
	КонецЕсли;
	
	Если (Направление > 0) И (ИндексУчетнойЗаписи < КоличествоЭлементов - 1) Тогда
		СтрокиДерева.Сдвинуть(ИндексУчетнойЗаписи, 1);
	ИначеЕсли (Направление < 0) И (ИндексУчетнойЗаписи > 0) Тогда 
		СтрокиДерева.Сдвинуть(ИндексУчетнойЗаписи, -1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьНебезопасноеСодержимое" Тогда
		СтандартнаяОбработка = Ложь;
		ВключитьНебезопасноеСодержимое = Истина;
		ЗаписатьПризнакВключитьНебезопасноеСодержимое(Элементы.СписокПисем.ТекущаяСтрока);
		ПринудительнаяАктивизацияСтроки = Истина;
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПризнакВключитьНебезопасноеСодержимое(ПисьмоСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	ПисьмоОбъект.CRM_ВключитьНебезопасноеСодержимое = Истина;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСодержимоеДляВсехПисемОтправителяОбработкаНавигационнойСсылки(Элемент,
	 НавигационнаяСсылкаФорматированнойСтроки,
	 СтандартнаяОбработка)
	
	ПредупреждениеОНебезопасномСодержимомОбработкаНавигационнойСсылки(Элемент,
		 НавигационнаяСсылкаФорматированнойСтроки,
		 СтандартнаяОбработка);
	ДобавитьВДоверенныеАдреса(Элементы.СписокПисем.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВДоверенныеАдреса(ПисьмоСсылка)
	
	НоваяЗапись = РегистрыСведений.CRM_ДоверенныеАдресаЭлектроннойПочты.СоздатьМенеджерЗаписи();
	НоваяЗапись.АдресЭлектроннойПочты = ПисьмоСсылка.ОтправительАдрес;
	НоваяЗапись.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТегаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыборТегаЗавершениеНаСервере(Результат, ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.Ячейка);
	Элементы.СписокПисем.Обновить();
	ОбновитьУО(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыборТегаЗавершениеНаСервере(ВыбранныйТег, ПисьмоСсылка, ИмяЯчейки)
	
	ИндексТега = СтрЗаменить(ИмяЯчейки, "Тег", "");
	ИндексТега = Строка(ИндексТега) - 1;
	
	ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
	Теги = ПисьмоОбъект.CRM_Теги;
	Если Теги.Найти(ВыбранныйТег) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоТегов = Теги.Количество();
	Если КоличествоТегов = 0 Или ИндексТега > (КоличествоТегов - 1) Тогда
		НовыйТег = Теги.Добавить();
		НовыйТег.Тег = ВыбранныйТег;
	ИначеЕсли ИндексТега = 0 И КоличествоТегов >= 0 Тогда
		Теги[0].Тег = ВыбранныйТег;
	ИначеЕсли ИндексТега = 1 И КоличествоТегов >= 1 Тогда
		Теги[1].Тег = ВыбранныйТег;
	ИначеЕсли ИндексТега = 2 И КоличествоТегов >= 2 Тогда
		Теги[2].Тег = ВыбранныйТег;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

// Устанавливает пометку удаления для электронных писем
// 
// Параметры:
//  МассивПисем  - Массив - массив ссылок на электронные письма
//
&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаления(МассивПисем)
	
	Для Каждого Письмо Из МассивПисем Цикл
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		ПисьмоОбъект.ПометкаУдаления = Истина;
		ПисьмоОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Создает и добавляет в контекстное меню либо удаляет команду копирования гиперссылки в буфер обмена
//
// Параметры:
//  ЭтоДобавлениеКоманды  - Булево - при значении Истина команда добавляется, при значении Ложь удаляется
//
&НаСервере
Процедура НастроитьКомандуКопированияВБуферОбменаВКМ(ЭтоДобавлениеКоманды)
	
	ИмяКоманды = "СкопироватьГиперссылку";
	
	Если ЭтоДобавлениеКоманды Тогда
		
		Если Команды.Найти(ИмяКоманды) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = "Подключаемый_" + ИмяКоманды;
		ПунктМеню = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ОписаниеПисьмаHTML.КонтекстноеМеню);
		// BSLLS:Typo-off
		ПунктМеню.Заголовок = НСтр("ru = 'Скопировать гиперссылку'");
		// BSLLS:Typo-on
		ПунктМеню.ИмяКоманды = ИмяКоманды;
		
	Иначе
		
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Команда = Команды.Найти(ИмяКоманды);
		Команды.Удалить(Команда);
		ПунктМеню = Элементы.Найти(ИмяКоманды);
		Элементы.Удалить(ПунктМеню);
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует гиперссылку из электронного письма в буфер обмена
//
&НаКлиенте
Процедура Подключаемый_СкопироватьГиперссылку()
	
	CRM_БуферОбмена = 
		СтрШаблон("<!DOCTYPE html>
		|<html>
		|	<body onload = 'copy()'>
		|		<input id = 'input' type = 'text'>
		|		<script>
		|			function copy() {
		|				var copyText = document.getElementById('input');
		|				copyText.value = '%1';
		|				copyText.select();
		|				document.execCommand('copy');
		|			}
		|		</script>
		|	</body>
		|</html>", CRM_БуферОбмена);
	
	НастроитьКомандуКопированияВБуферОбменаВКМ(Ложь);
	
КонецПроцедуры

// Формирует массив из структур данных писем для передачи в процедуру массовой печати
//
// Параметры:
//  ВыделенныеСтроки  - Массив - выделенные строки в списке писем
//
// Возвращаемое значение:
//   МассивПисем  - Массив   - массив структур с данными писем
//
&НаСервере
Функция СформироватьМассивДанныхПисемДляПечати(ВыделенныеСтроки)
	
	МассивПисем = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Строка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			МассивАдресов.Добавить(Строка.ОтправительАдрес);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДоверенныеАдресаЭлектроннойПочты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
		|ИЗ
		|	РегистрСведений.CRM_ДоверенныеАдресаЭлектроннойПочты КАК CRM_ДоверенныеАдресаЭлектроннойПочты
		|ГДЕ
		|	CRM_ДоверенныеАдресаЭлектроннойПочты.АдресЭлектроннойПочты В (&МассивАдресов)";
	
	Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
	
	ДоверенныеАдреса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		СтруктураДанныхПисьма = Новый Структура;
		СтруктураДанныхПисьма.Вставить("ОбъектСсылка", Строка);
		СтрокаПредупреждениеБезопасности = "ПредупреждениеБезопасности";
		
		Если Строка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			СтруктураДанныхПисьма.Вставить("ТекстПисьма", Строка.Текст);
			СтруктураДанныхПисьма.Вставить(СтрокаПредупреждениеБезопасности, Ложь);
		Иначе
			СтруктураДанныхПисьма.Вставить("ТекстПисьма", Строка.ТекстHTML);
			Если ТипЗнч(Строка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				ЭтоДоверенныйАдрес = (ДоверенныеАдреса.Найти(Строка.ОтправительАдрес) <> Неопределено);
				СтруктураДанныхПисьма.Вставить(СтрокаПредупреждениеБезопасности, 
					Не Строка.CRM_ВключитьНебезопасноеСодержимое И Не ЭтоДоверенныйАдрес);
			Иначе
				СтруктураДанныхПисьма.Вставить(СтрокаПредупреждениеБезопасности, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		МассивПисем.Добавить(СтруктураДанныхПисьма);
		
	КонецЦикла;
	
	Возврат МассивПисем;
	
КонецФункции

// Включает и отключает отображение в корзине писем, скрытых после ее очистки
//
// Параметры:
//  Использование  - Булево - признак использования или неиспользования элемента отбора
//
&НаКлиенте
Процедура НастроитьОтборПоСкрытымПисьмам(Использование)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем,
		 "ПисьмоСкрыто", Ложь, ВидСравненияКомпоновкиДанных.Равно, , 
		Использование И Не Элементы.СписокПисемПоказатьСкрытыеПисьма.Пометка);
	
КонецПроцедуры

// Возвращает ссылку на папку учетной записи, имеющую вид Нежелательная почта
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//
// Возвращаемое значение:
//   СсылкаНаПапку   - СправочникСсылка.ПапкиЭлектронныхПисем
//
&НаСервереБезКонтекста
Функция ПапкаНежелательнаяПочтаУчетнойЗаписи(УчетнаяЗапись)
	
	СсылкаНаПапку = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ПапкиУчетныхЗаписей.Папка КАК Папка
		|ИЗ
		|	РегистрСведений.CRM_ПапкиУчетныхЗаписей КАК CRM_ПапкиУчетныхЗаписей
		|ГДЕ
		|	CRM_ПапкиУчетныхЗаписей.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_ПапкиУчетныхЗаписей.ВидПапки = &ВидПапки";
	
	Запрос.УстановитьПараметр("ВидПапки", Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаПапку = Выборка.Папка;
	КонецЕсли;
	
	Возврат СсылкаНаПапку;
	
КонецФункции

#Область МоиДела

// Включает и отключает отображение папок Мои дела
//
// Параметры:
//  Включить  - Булево - признак включения (Истина), либо выключения (Ложь)
// 				отображения папок Мои дела
//
&НаСервере
Процедура МоиДелаИзменитьРежимОтображения(Включить)
	
	Если Включить Тогда
	
		МоиДелаСписокПериодов.Добавить("ПроизвольныйПериод", НСтр("ru='Произвольный период';en='Custom Period'"));
		МоиДелаСписокПериодов.Добавить("Сегодня", НСтр("ru='Сегодня';en='Today'"));
		МоиДелаСписокПериодов.Добавить("3 дня", НСтр("ru='3 дня';en='3 days'"));
		МоиДелаСписокПериодов.Добавить("Неделя", НСтр("ru='Неделя';en='Week'"));
		МоиДелаСписокПериодов.Добавить("Месяц", НСтр("ru='Месяц';en='Month'"));
		
		МоиДелаТекущийПользователь = ТекущийПользователь;
		МоиДелаТекущаяРоль = Справочники.РолиИсполнителей.ПустаяСсылка();
		МоиДелаОтборПоРолиУстановлен = Истина;
		МоиДелаОтборПоПредметуУстановлен = Ложь;
		
		CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
		
		КлючОбъекта = "Обработка.CRM_МенеджерПочты.Форма.Форма/ТекущиеДанные";
		Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "", Новый Соответствие);
		
		Если Настройки.Количество() > 0 Тогда
			
			МоиДелаВариантПериода = Настройки.Получить("МоиДелаВариантПериода");
			МоиДелаПериодОтбора =  Настройки.Получить("МоиДелаПериодОтбора");
			Если ОтборСозданы.НайтиПоЗначению(МоиДелаПериодОтбора) = Неопределено Тогда
				ОтборСозданы[0].Значение = МоиДелаПериодОтбора;
			КонецЕсли;
			
		Иначе
			
			МоиДелаВариантПериода = "Месяц";
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МоиДелаСписокЗадач, 
				"МассивИзмеренийАРМ", Новый Массив, Истина);
		
		Если ПоказыватьМоиДелаТолькоПереданныеВручную Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				МоиДелаСписокЗадач,
				"ПереданВручную",
				Истина);
		КонецЕсли;
		
		МоиДелаСформироватьПредставлениеПериода();
		МоиДелаОбновитьОтборыНаСервере();
		МоиДелаОбновитьКоличествоЗадач();
		
	КонецЕсли;
	
	Элементы.МоиДелаПерейтиКЗадачам.Видимость = Включить;
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаДобавитьПапки()
	
	МоиДелаИдентификаторыПапок.Очистить();
	
	ЭлементыДерева = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	
	ВеткаМоиДела = ЭлементыДерева.Добавить();
	ВеткаМоиДела.ПапкаМоиДела 	= "Мои дела";
	ВеткаМоиДела.Картинка			= -1;
	НоваяСтрока = МоиДелаИдентификаторыПапок.Добавить();
	НоваяСтрока.ИзмерениеАРМ 		= "Мои дела";
	НоваяСтрока.Идентификатор 		= ВеткаМоиДела.ПолучитьИдентификатор();
	НоваяСтрока.Наименование 		= НСтр("ru='Мои дела';en='My Affairs'");
	
	ЭлементыМоиДела = ВеткаМоиДела.ПолучитьЭлементы();
	
	НовыйЭлемент = ЭлементыМоиДела.Добавить();
	НовыйЭлемент.ПапкаМоиДела 	= "Входящие";
	НовыйЭлемент.Картинка			= 1;
	НоваяСтрока = МоиДелаИдентификаторыПапок.Добавить();
	НоваяСтрока.ИзмерениеАРМ 		= "Входящие";
	НоваяСтрока.Идентификатор 		= НовыйЭлемент.ПолучитьИдентификатор();
	НоваяСтрока.Наименование 		= НСтр("ru='Входящие';en='Incoming'");
	
	НовыйЭлемент = ЭлементыМоиДела.Добавить();
	НовыйЭлемент.ПапкаМоиДела 	= "Текущие";
	НовыйЭлемент.Картинка			= 2;
	НоваяСтрока = МоиДелаИдентификаторыПапок.Добавить();
	НоваяСтрока.ИзмерениеАРМ 		= "Текущие";
	НоваяСтрока.Идентификатор 		= НовыйЭлемент.ПолучитьИдентификатор();
	НоваяСтрока.Наименование 		= НСтр("ru='Текущие';en='Current'");
	
	НовыйЭлемент = ЭлементыМоиДела.Добавить();
	НовыйЭлемент.ПапкаМоиДела 	= "Отложенные";
	НовыйЭлемент.Картинка			= 8;
	НоваяСтрока = МоиДелаИдентификаторыПапок.Добавить();
	НоваяСтрока.ИзмерениеАРМ 		= "Отложенные";
	НоваяСтрока.Идентификатор 		= НовыйЭлемент.ПолучитьИдентификатор();
	НоваяСтрока.Наименование 		= НСтр("ru='Отложенные';en='Deferred'");
	
	НовыйЭлемент = ЭлементыМоиДела.Добавить();
	НовыйЭлемент.ПапкаМоиДела 	= "Завершенные";
	НовыйЭлемент.Картинка			= 6;
	НоваяСтрока = МоиДелаИдентификаторыПапок.Добавить();
	НоваяСтрока.ИзмерениеАРМ 		= "Завершенные";
	НоваяСтрока.Идентификатор 		= НовыйЭлемент.ПолучитьИдентификатор();
	НоваяСтрока.Наименование 		= НСтр("ru='Завершенные';en='Completed'");
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаОбновитьКоличествоЗадач(ИзмерениеАРМ = Неопределено)
	
	ТаблицаСписка = Элементы.МоиДелаСписокЗадач;
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	МассивИзмеренийАРМ = Новый Массив;
	
	СхемаКомпоновкиДанных = ТаблицаСписка.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = ТаблицаСписка.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ПараметрМассивИзмеренийАРМ = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти("МассивИзмеренийАРМ");
	
	Для Каждого Элемент Из МоиДелаИдентификаторыПапок Цикл
		
		Измерение = Элемент.ИзмерениеАРМ;
		Если ЗначениеЗаполнено(ИзмерениеАРМ) И (Измерение <> ИзмерениеАРМ) Тогда
			Продолжить;
		КонецЕсли;
		
		ПапкаДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Элемент.Идентификатор);
		РезультатКомпоновки.Очистить();
		МассивИзмеренийАРМ.Очистить();
		
		Если Измерение = "Мои дела" Тогда
			МассивИзмеренийАРМ.Добавить("Входящие");
			МассивИзмеренийАРМ.Добавить("Текущие");
			МассивИзмеренийАРМ.Добавить("Отложенные");
			МассивИзмеренийАРМ.Добавить("Завершенные");
		Иначе
			МассивИзмеренийАРМ.Добавить(Элемент.ИзмерениеАРМ);
		КонецЕсли;
		
		ПараметрМассивИзмеренийАРМ.Значение = МассивИзмеренийАРМ;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		КоличествоОбъектов = РезультатКомпоновки.Количество();
		
		КоличествоНепрочитанных = 0;
		Если Измерение = "Входящие" Тогда
			ПараметрыОтбора = Новый Структура("Рассмотрено", Ложь);
			СтрокиНепрочитанных = РезультатКомпоновки.НайтиСтроки(ПараметрыОтбора);
			КоличествоНепрочитанных = СтрокиНепрочитанных.Количество();
			ПапкаДерева.НепрочитанныхПисем = КоличествоНепрочитанных;
		КонецЕсли;
		
		Если КоличествоОбъектов > 0 Тогда
			ПапкаДерева.Наименование = Элемент.Наименование 
				+ " (" + КоличествоОбъектов 
				+ ?(Измерение = "Входящие", "/" + КоличествоНепрочитанных, "")
				+ ")";
		Иначе	
			ПапкаДерева.Наименование = Элемент.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаУстановитьФильтрЗадачНаСервере(Результат)
	
	Для Каждого ЭлементСтруктуры Из Результат Цикл
		ЭтотОбъект["МоиДела" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
	КонецЦикла;
	МоиДелаСформироватьПредставлениеПериода();
	
	МоиДелаОбновитьОтборыНаСервере();
	МоиДелаОбновитьКоличествоЗадач();
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаСформироватьПредставлениеПериода()
	
	Если МоиДелаВариантПериода = "" Тогда
		МоиДелаПериодОтбора = Новый СтандартныйПериод;
		ОтборСозданы[0].Значение = МоиДелаПериодОтбора;
		МоиДелаПредставлениеПериода = ПредставлениеПериода(МоиДелаПериодОтбора.ДатаНачала, МоиДелаПериодОтбора.ДатаОкончания);
	Иначе
		Если МоиДелаВариантПериода = "ПроизвольныйПериод" Тогда
			НомерПериода = 0;
		ИначеЕсли МоиДелаВариантПериода = "Сегодня" Тогда
			НомерПериода = 1;
		ИначеЕсли МоиДелаВариантПериода = "3 дня" Тогда
			НомерПериода = 2;
		ИначеЕсли МоиДелаВариантПериода = "Неделя" Тогда
			НомерПериода = 3;
		ИначеЕсли МоиДелаВариантПериода = "Месяц" Тогда
			НомерПериода = 4;
		КонецЕсли;
		
		Период = ОтборСозданы[НомерПериода];
		МоиДелаПериодОтбора = ОтборСозданы[НомерПериода].Значение;
		ЗначениеПериода = МоиДелаСписокПериодов.НайтиПоЗначению(МоиДелаВариантПериода);
		Если ЗначениеПериода <> Неопределено Тогда
			МоиДелаПредставлениеПериода = ЗначениеПериода.Представление;
		КонецЕсли;
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаОбновитьОтборыНаСервере()
	
	ОтборыУстановлены = Ложь;
	КоличествоФильтров = 0;
	Если ЗначениеЗаполнено(МоиДелаПоискПодразделение) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Если МоиДелаТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Если Не МоиДелаОтборПоРолиУстановлен Или ЗначениеЗаполнено(МоиДелаТекущаяРоль) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	// Роли для отбора
	РолиПользователя = Новый СписокЗначений;
	Если ЗначениеЗаполнено(МоиДелаТекущаяРоль) Тогда
		РолиПользователя.Добавить(МоиДелаТекущаяРоль);
	ИначеЕсли МоиДелаОтборПоРолиУстановлен Тогда
		РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(МоиДелаТекущийПользователь);
	КонецЕсли;
	ОтборПоРолиЗаполнен = (РолиПользователя.Количество() > 0);
	
	// Ответственные для отбора
	ПользователиОтбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(МоиДелаТекущийПользователь) Тогда
		ПользователиОтбора.ЗагрузитьЗначения(РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(
			МоиДелаТекущийПользователь));
	Иначе
		ПользователиОтбора = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(МоиДелаТекущаяРоль);
	КонецЕсли;
	ОтборПоПользователюУстановлен = (ПользователиОтбора.Количество() > 0);
	
	ТекущаяДатаВремя = ТекущаяДатаСеанса();
	
	ИмяТаблицы = "МоиДелаСписокЗадач";
	
	Период = ОтборСозданы.НайтиПоЗначению(МоиДелаПериодОтбора);

	ГруппаОтборКрайнегоСрока = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтотОбъект[ИмяТаблицы].Отбор.Элементы, "ОтборКрайнийСрок", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборКрайнегоСрока,
		"КрайнийСрокОкончание",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Период.Значение.ДатаОкончания, ,
		Период.Пометка,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Тогда
		Если МоиДелаВариантПериода = "Сегодня" Тогда
			ПериодНачалаОтбора = МоиДелаПериодОтбора.ДатаНачала;
		Иначе
			ДлительностьПериодаОтбора	= Период.Значение.ДатаОкончания - Период.Значение.ДатаНачала;
			ПериодНачалаОтбора			= НачалоДня(Период.Значение.ДатаНачала - ДлительностьПериодаОтбора);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтборКрайнегоСрока,
			"КрайнийСрокОкончание",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			ПериодНачалаОтбора, ,
			Период.Пометка,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
		 "ПустаяДата", Дата('00010101'), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
		 "ПериодПросроченных", ТекущаяДатаВремя, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
		 "МоиДелаТекущийПользователь", МоиДелаТекущийПользователь, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
		 "РолиПользователя", РолиПользователя, Истина);
	
	Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(ЭтотОбъект[ИмяТаблицы]);
	ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
		 НСтр("ru = 'Отбор по ответственному'; en = 'Filter by Responsible'"),
		 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ, "Пользователь",
		 ВидСравненияКомпоновкиДанных.ВСписке, ПользователиОтбора, , ОтборПоПользователюУстановлен,
		 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ, "Пользователь",
		 ВидСравненияКомпоновкиДанных.ВСписке, РолиПользователя, , ОтборПоРолиЗаполнен,
		 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы],
		 "Подразделение", МоиДелаПоискПодразделение, ВидСравненияКомпоновкиДанных.Равно, "Отбор по подразделению",
		 ЗначениеЗаполнено(МоиДелаПоискПодразделение));
		 
	Элементы.МоиДелаОткрытьФильтрЗадач.Заголовок = ?(ОтборыУстановлены, НСтр("ru='Фильтр задач: '") + КоличествоФильтров,
		 НСтр("ru='Фильтр задач'"));
	Элементы.МоиДелаОткрытьФильтрЗадач.Картинка = ?(ОтборыУстановлены, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.МоиДелаОткрытьФильтрЗадач.ЦветТекста = ?(ОтборыУстановлены, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
	
КонецПроцедуры

&НаСервере
Функция МоиДелаОбъектПеретаскивания(Запись)
	Возврат Запись.Объект;
КонецФункции

&НаСервере
Процедура МоиДелаИзменитьСтатусЗадачи(Задача, НовоеИзмерениеАРМ)
	
	Если НовоеИзмерениеАРМ = "Завершенные" Тогда
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Выполнена = Истина;
		ЗадачаОбъект.ДатаИсполнения = ТекущаяДатаСеанса();
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НаименованиеАРМ.Установить("МоиДела");
	НаборЗаписей.Отбор.Пользователь.Установить(МоиДелаТекущийПользователь);
	НаборЗаписей.Отбор.Объект.Установить(Задача);
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].ИзмерениеАРМ = НовоеИзмерениеАРМ;
	НаборЗаписей.Записать();
	
	МоиДелаОбновитьКоличествоЗадач();
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаОчиститьФильтрЗадачНаСервере()
	
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборВключен", Ложь);
	СтруктураФильтра.Вставить("ВариантПериода", "");
	СтруктураФильтра.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	СтруктураФильтра.Вставить("ТекущаяРоль", Справочники.РолиИсполнителей.ПустаяСсылка());
	СтруктураФильтра.Вставить("ОтборПоРолиУстановлен", Истина);
	СтруктураФильтра.Вставить("ПоискПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	МоиДелаУстановитьФильтрЗадачНаСервере(СтруктураФильтра);
	
КонецПроцедуры

&НаСервере
Процедура МоиДелаСоздатьЗадачуВФоне(Письмо, ИзмерениеАРМ)
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ДанныеПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "Тема, ОтправительКонтакт");
	Иначе
		ДанныеПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "Тема");
	КонецЕсли;
	
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор				= ТекущийПользователь;
	ОбъектЗадача.Исполнитель		= ОбъектЗадача.Автор;
	ОбъектЗадача.ПринятаКИсполнению	= Истина;
	ОбъектЗадача.Наименование		= ДанныеПисьма.Тема;
	ОбъектЗадача.Дата				= ТекущаяДатаСеанса();
	ОбъектЗадача.ДатаНачала			= ТекущаяДатаСеанса();
	Если ИзмерениеАРМ = "Завершенные" Тогда
		ОбъектЗадача.Выполнена 		= Истина;
	Иначе
		ОбъектЗадача.Выполнена 		= Ложь;
	КонецЕсли;
	ОбъектЗадача.ДатаИсполнения		= ТекущаяДатаСеанса();
	ОбъектЗадача.СрокИсполнения		= ТекущаяДатаСеанса();
	ОбъектЗадача.CRM_Личная			= Истина;
	ОбъектЗадача.Предмет			= Письмо;
	ОбъектЗадача.ПредметСтрокой		= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(Письмо);
	ОбъектЗадача.Описание = "Тема: " + ДанныеПисьма.Тема + " | Введено на основании: " + Письмо;
	Если ДанныеПисьма.Свойство("ОтправительКонтакт") И ЗначениеЗаполнено(ДанныеПисьма.ОтправительКонтакт)	Тогда
		Если ТипЗнч(ДанныеПисьма.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ОбъектЗадача.CRM_КонтактноеЛицо		= ДанныеПисьма.ОтправительКонтакт;
			ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
		ИначеЕсли ТипЗнч(ДанныеПисьма.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			ОбъектЗадача.CRM_Партнер			= ДанныеПисьма.ОтправительКонтакт;
			ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектЗадача.Записать();
	
	Менеджер = РегистрыСведений.CRM_ОбъектыАРМ.СоздатьМенеджерЗаписи();
	Менеджер.Объект = ОбъектЗадача.Ссылка;
	Менеджер.НаименованиеАРМ = "МоиДела";
	Менеджер.ИзмерениеАРМ = "Текущие";
	Менеджер.Пользователь = ТекущийПользователь;
	Менеджер.Прочитать();
	Менеджер.ИзмерениеАРМ = ИзмерениеАРМ;
	Менеджер.Записать(Истина);
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ПисьмоОбъект.CRM_СкрытьВАРМ = Истина;
	ПисьмоОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	Если Не ЗначениеЗаполнено(ПисьмоОбъект.Ответственный) Тогда
		ПисьмоОбъект.Ответственный = ТекущийПользователь;
	КонецЕсли;
	ПисьмоОбъект.Записать();
	
	РегистрыСведений.CRM_НепрочитанныеЭлектронныеПисьмаМоиДела.УстановитьПометкуОПрочтенииВсемПользователям(Письмо);
	
КонецПроцедуры

&НаКлиенте
Процедура МоиДелаСписокЗадачПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.МоиДелаСписокЗадачКонтекстноеМеню.Видимость = Ложь;
	Иначе
		Элементы.МоиДелаСписокЗадачКонтекстноеМеню.Видимость = (ТекущиеДанные.Этап = "Входящие");
	КонецЕсли;
	
	Если ТаймаутОтметкиОПрочтении > 0 Тогда
		ПодключитьОбработчикОжидания("МоиДелаАвтоустановкаРассмотренностиПисьма", ТаймаутОтметкиОПрочтении, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // МоиДела

// При открытии менеджера почты из формы письма
// выполняет позиционирование на этом письме
//
&НаКлиенте
Процедура СпозиционироватьсяНаПисьме()
	
	НайденныеСтроки = ДанныеПапок.НайтиСтроки(Новый Структура("Ссылка", ПараметрыОткрытия.Папка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.ПанельУправления.ТекущаяСтрока = НайденныеСтроки[0].ИдентификаторВДереве;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПисемПозиционированиеНаПисьме", 0.1, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует доступ к учетной записи почты.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Отложенное позиционирование на письме
//
&НаКлиенте
Процедура ОбработчикОжиданияСписокПисемПозиционированиеНаПисьме()
	Элементы.СписокПисем.ТекущаяСтрока = ПараметрыОткрытия.Ссылка;
КонецПроцедуры

#КонецОбласти