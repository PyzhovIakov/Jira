#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя КАК ID_Пользователя,
	                      |	CRM_СообщениеМессенджера.ID_Сообщения КАК ID_Сообщения,
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата
	                      |ПОМЕСТИТЬ Сообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Сообщения.ID_Пользователя КАК ID_Пользователя,
	                      |	МАКСИМУМ(Сообщения.Дата) КАК Дата
	                      |ПОМЕСТИТЬ МаксДаты
	                      |ИЗ
	                      |	Сообщения КАК Сообщения
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Сообщения.ID_Пользователя
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(Сообщения.ID_Сообщения) КАК ID_Сообщения
	                      |ИЗ
	                      |	Сообщения КАК Сообщения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксДаты КАК МаксДаты
	                      |		ПО Сообщения.Дата = МаксДаты.Дата
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Сообщения.ID_Пользователя КАК ID_Пользователя,
	                      |	МАКСИМУМ(Сообщения.ID_Сообщения) КАК ID_Сообщения
	                      |ИЗ
	                      |	Сообщения КАК Сообщения
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксДаты КАК МаксДаты
	                      |		ПО Сообщения.ID_Пользователя = МаксДаты.ID_Пользователя
	                      |			И Сообщения.Дата = МаксДаты.Дата
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Сообщения.ID_Пользователя");
	Запрос.УстановитьПараметр("Группа", СтруктураПараметровДоступа.IDГруппы);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[2].Выбрать();
	Ресурс = "/method/messages.getConversations?v=5.131&count=200&extended=1&access_token=" 
		+ СтруктураПараметровДоступа.ТокенГруппы;
	
	МассивСообщений = Новый Массив;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", Ресурс,
		СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	ИначеЕсли СтруктураОтвета.response.count > 0 Тогда
		Выборка = МассивРезультатов[3].Выбрать();
		Для каждого Диалог Из СтруктураОтвета.response.items Цикл
			Выборка.Сбросить();
			user_id = Формат(Диалог.last_message.peer_id, "ЧГ=");
			Если Выборка.НайтиСледующий(user_id, "ID_Пользователя") Тогда
				Если Формат(Диалог.last_message.id, "ЧГ=") <> Выборка.ID_Сообщения Тогда
					РесурсИсторияДиалога = "/method/messages.getHistory?v=5.131&count=200&offset=-200&user_id=" 
						+ user_id + "&start_message_id=" + Выборка.ID_Сообщения + "&access_token=" 
						+ СтруктураПараметровДоступа.ТокенГруппы;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				РесурсИсторияДиалога = "/method/messages.getHistory?v=5.131&count=200&user_id=" + user_id 
					+ "&start_message_id=" + Формат(Диалог.last_message.id, "ЧГ=") + "&access_token=" 
					+ СтруктураПараметровДоступа.ТокенГруппы;
			КонецЕсли;
			МассивСообщенийДиалога = ПолучитьСообщенияVK(РесурсИсторияДиалога, УчетнаяЗапись,
				 СтруктураПараметровДоступа.IDГруппы, СтруктураПараметровДоступа.ТокенГруппы,
				 СтруктураПараметровДоступа.ПараметрыПрокси);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщений, МассивСообщенийДиалога);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Токен = СтруктураПараметровДоступа.ТокенГруппы;
	IDГруппы = СтруктураПараметровДоступа.IDГруппы;
	
	Ресурс = "/method/messages.getLongPollServer?v=5.131&lp_version=2&need_pts=0&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", Ресурс,
		 СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Позиция = СтрНайти(СтруктураОтвета.response.server, "/");
		Сервер = Лев(СтруктураОтвета.response.server, Позиция - 1);
		Путь = Сред(СтруктураОтвета.response.server, Позиция);
		ts = СтруктураОтвета.response.ts;
		Ресурс = Путь + "?act=a_check&key=" + СтруктураОтвета.response.key + "&ts={$ts}&wait=25&mode=2&version=2";
	КонецЕсли;
	Ошибок = 0;
	Пока Ошибок < 5 Цикл
		Ресурс1 = СтрЗаменить(Ресурс, "{$ts}", Формат(ts, "ЧГ="));
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Сервер,
			 "", Ресурс1,
			 СтруктураПараметровДоступа.ПараметрыПрокси));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		ИначеЕсли СтруктураОтвета.Свойство("failed") Тогда
			Ошибок = Ошибок + 1;
			Если СтруктураОтвета.Свойство("ts") Тогда
				ts = СтруктураОтвета.ts;
			КонецЕсли;
		Иначе
			ts = СтруктураОтвета.ts;
			МассивСообщений = Новый Массив;
			Для каждого Событие Из СтруктураОтвета.updates Цикл
				Если Событие[0] = 4 Тогда
					ID_Сообщения = Формат(Событие[1], "ЧГ=");
					РесурсСообщение = "/method/messages.getById?v=5.131&message_ids=" + ID_Сообщения + "&access_token=" + Токен;
					МассивСообщений = ПолучитьСообщенияVK(РесурсСообщение, УчетнаяЗапись, IDГруппы, Токен,
						 СтруктураПараметровДоступа.ПараметрыПрокси);
				ИначеЕсли Событие[0] = 7 Тогда
					ID_Пользователя = Формат(Событие[1], "ЧГ=");
					CRM_РаботаСМессенджерамиСервер.ПометитьИсходящиеКакПрочтенные(УчетнаяЗапись, IDГруппы, ID_Пользователя);
					CRM_РаботаСМессенджерамиСервер.ЗаписатьСобытиеМессенджера(Перечисления.CRM_СобытияМессенджеров.ПрочитаныСообщения,
						 УчетнаяЗапись,
						 ID_Пользователя);
				КонецЕсли;
			КонецЦикла;
			CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "ВКонтакте";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://vk.com/id";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат "https://vk.com/gim" + Структура.Группа + "?sel=" + Структура.ID_Пользователя;
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат НачалоАдресаСтраницыПользователя() + ID_Пользователя;
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Истина; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Истина; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Возврат Неопределено; 
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт

	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЧатов = Новый Массив;
	Для каждого Сообщение Из МассивСообщений Цикл
		Если МассивЧатов.Найти(Сообщение.ID_Пользователя) = Неопределено Тогда
			МассивЧатов.Добавить(Сообщение.ID_Пользователя);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Чат Из МассивЧатов Цикл
		РесурсПрочтение = "/method/messages.markAsRead?v=5.131&access_token=" 
			+ СтруктураПараметровДоступа.ТокенГруппы + "&peer_id=" 
			+ Чат;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
			 "", РесурсПрочтение,
			 СтруктураПараметровДоступа.ПараметрыПрокси));
		Если СтруктураОтвета.Свойство("error") Тогда
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПользовательДоступен(УчетнаяЗапись, ДополнительныеДанные) Экспорт
	
	Возврат Новый Структура("Доступен, Описание", Ложь, "");
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
	ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ПолучитьСписокГруппПользователя(Токен, ПараметрыПрокси) Экспорт
	Ресурс = "/method/groups.get?v=5.131&extended=1&filter=admin&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.error_msg);
	Иначе
		СписокГрупп = Новый СписокЗначений;
		Для каждого Группа Из СтруктураОтвета.response.items Цикл
			СписокГрупп.Добавить(Формат(Группа.id, "ЧГ="), Группа.name);
		КонецЦикла;
		Возврат СписокГрупп;
	КонецЕсли;
КонецФункции

Процедура CRM_ПолучитьФайл(Сервер, Ресурс, ИмяФайла, Прокси) Экспорт  
	
	Если Прокси <> Неопределено Тогда
		HTTPПрокси = Новый ИнтернетПрокси;	
		HTTPПрокси.Установить("https", Прокси.Сервер, Прокси.Порт, Прокси.Пользователь, Прокси.Пароль, Ложь); 
	Иначе
		HTTPПрокси = Неопределено;
	КонецЕсли;
	HTTP =  Новый HTTPСоединение(Сервер, , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTP.Получить(Ресурс, ИмяФайла);
	ПутьКФайлу = HTTPОтвет.Заголовки.Получить("Location");
	Если ПутьКФайлу <> Неопределено Тогда
		КопироватьФайл(ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСообщенияVK(РесурсИсторияДиалога, УчетнаяЗапись, IDГруппы, Токен, ПараметрыПрокси)
	
	МассивСообщений = Новый Массив;
	СтруктураОтветаДиалог = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", РесурсИсторияДиалога,
		 ПараметрыПрокси));
	Если СтруктураОтветаДиалог.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтветаДиалог.error.error_msg;
	ИначеЕсли СтруктураОтветаДиалог.response.count > 0 Тогда
		Для каждого ТекСообщение Из СтруктураОтветаДиалог.response.items Цикл
			user_id = ?(ТекСообщение.out = 0, Формат(ТекСообщение.from_id, "ЧГ="), Формат(ТекСообщение.peer_id, "ЧГ="));
			Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
				 УчетнаяЗапись,
				 Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
			ИмяПользователя = ПолучитьИмяПользователя(user_id, Токен, ПараметрыПрокси);
			Дата = МестноеВремя(Дата(1970, 1, 1) + ТекСообщение.date);
			Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
			Сообщение.Дата = Дата;
			Сообщение.ID_Сообщения = Формат(ТекСообщение.id, "ЧГ=");
			Сообщение.ТекстСообщения = СтрЗаменить(ТекСообщение.text, "<br>", Символы.ПС);
			Сообщение.ВидСообщения = ?(ТекСообщение.out = 0, "Входящее", "Исходящее");
			Сообщение.ID_Пользователя = user_id;
			Если ЗначениеЗаполнено(Контакт) Тогда
				Сообщение.Контакт = Контакт;
			КонецЕсли;
			Сообщение.КонтактПредставление = ИмяПользователя;
			Сообщение.Группа = IDГруппы;
			ТекСообщение.Свойство("read_state", Сообщение.Прочитано);
			Если ТекСообщение.Свойство("reply_message") Тогда
				Сообщение.ID_СообщенияОснования = Формат(ТекСообщение.reply_message.id, "ЧГ=");
			КонецЕсли;
			Если ТекСообщение.Свойство("attachments") Тогда
				КаталогВременныхФайлов = КаталогВременныхФайлов();
				Для каждого Вложение Из ТекСообщение.attachments Цикл
					Если Вложение.type = "doc" Тогда
						ПутьКФайлу = Вложение.doc.url;
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
						CRM_ПолучитьФайл("vk.com", СтрЗаменить(ПутьКФайлу, "https://vk.com", ""), ИмяВременногоФайла,
							 ПараметрыПрокси);
						Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
						АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
						ПараметрыФайла = Новый Структура;
						ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
						ПараметрыФайла.Вставить("Автор", Неопределено);
						ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Вложение.doc.title, СтрНайти(Вложение.doc.title, ".") - 1));
						ПараметрыФайла.Вставить("РасширениеБезТочки", Вложение.doc.ext);
						ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
						ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
						Сообщение.Вложения.Добавить(ПараметрыФайла);
						Попытка
							УдалитьФайлы(ИмяВременногоФайла);
						Исключение
							ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Информация,
								,
								,
								ИнформацияОбОшибке().Описание);
						КонецПопытки;
					ИначеЕсли Вложение.type = "photo" Тогда
						ПутьКФайлу = "";
						ТекРазмер = 0;
						Для каждого Свойство Из Вложение.photo.sizes Цикл
							Если Свойство.height > ТекРазмер Тогда
								ТекРазмер = Свойство.height;
								ПутьКФайлу = Свойство.url;
							КонецЕсли;
						КонецЦикла;
						Если ПутьКФайлу <> "" Тогда
							МассивПодстрок = СтрРазделить(ПутьКФайлу, "/", Ложь);
							ИмяФайла = МассивПодстрок[МассивПодстрок.Количество() - 1];
							Если СтрНайти(ИмяФайла, "?") > 1 Тогда
								ИмяФайла = Лев(ИмяФайла, СтрНайти(ИмяФайла, "?") - 1);
							КонецЕсли;
							КопироватьФайл(ПутьКФайлу, КаталогВременныхФайлов + ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							Попытка
								УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
							Исключение
								ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ИнформацияОбОшибке().Описание);
							КонецПопытки;
						КонецЕсли;
					ИначеЕсли Вложение.type = "market" Тогда
						Сообщение.ТекстСообщения = НСтр("ru = 'Товар'") + ": " + Вложение.market.title + "; " 
							+ НСтр("ru = 'Цена'") + ": " + Вложение.market.price.text + "; " +
							"https://vk.com/im?sel=-" + IDГруппы + "&w=product-" + IDГруппы + "_" + Формат(Вложение.market.id, "ЧГ=")
							+ Символы.ПС + Сообщение.ТекстСообщения;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			МассивСообщений.Добавить(Сообщение);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивСообщений;

КонецФункции
	
Функция ПолучитьИмяПользователя(IDПользователя = "", Токен = "", ПараметрыПрокси) Экспорт
	Если ЗначениеЗаполнено(IDПользователя) Тогда
		Ресурс = "/method/users.get?v=5.131&fields=id,name&user_ids=" + IDПользователя + "&access_token=" + Токен;
	Иначе
		Ресурс = "/method/users.get?v=5.131&fields=id,name&access_token=" + Токен;
	КонецЕсли;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Для каждого Пользователь Из СтруктураОтвета.response Цикл
			Возврат Пользователь.first_name + " " + Пользователь.last_name;
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ДанныеГруппы(Токен, ПараметрыПрокси) Экспорт
	Ресурс = "/method/users.get?v=5.131&fields=id,name&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Для каждого Пользователь Из СтруктураОтвета.response Цикл
			Возврат Пользователь.first_name + " " + Пользователь.last_name;
		КонецЦикла;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
