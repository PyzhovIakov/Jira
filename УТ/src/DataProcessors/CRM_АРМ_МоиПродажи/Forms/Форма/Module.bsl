
#Область ОписаниеПеременных

&НаКлиенте
Перем АктивнаяТаблица;

&НаКлиенте
Перем ТекущаяСтрока;

&НаКлиенте
Перем НеОбрабатыватьАктивизацию;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Мои продажи""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(
		ЭтотОбъект,
		Отказ,
		СтандартнаяОбработка);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВалютаПредставление = ПолучитьПредставлениеВалюты();
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	РазмерПорцииСтрок = 20;
	ЦветГолубой = ЦветаСтиля.CRM_ОсновнойГолубой;
	ЦветСерый = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
	СписокЦветов = Новый ФиксированноеСоответствие(
		CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов());
	
	ПрочитатьДоступныеСценарииПродаж();
	ПрочитатьНастройки();
	
	СценарийПродажПриИзмененииНаСервере(Ложь);
	ФильтрПриИзмененииНаСервере();
	
	Элементы.ГруппаНеРазобрано.Видимость = НЕ Фильтр.СкрытьКолонкуОбращения;
	НеРазобраноСводныеДанные_Видимость();
	Если НеРазобраноСводныеДанные_ПериодОбновления = 0 Тогда
		НеРазобраноСводныеДанные_ПериодОбновления = 1;
	КонецЕсли;
	
	Если ВидАРМ = "Канбан" Тогда
		Элементы.СтраницыАРМ.ТекущаяСтраница = Элементы.СтраницаВоронка;
	Иначе
		Элементы.СтраницыАРМ.ТекущаяСтраница = Элементы.СтраницаСписок;
	КонецЕсли;
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ПриСозданииНаСервере(ЭтотОбъект);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	// +Виджеты
	НастроитьВиджеты();
	// -Виджеты
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	// +CRM_РаботаСВнешнимиБиблиотеками
	ПриПолученииВнешнихБиблиотек = Новый ОписаниеОповещения(
		"Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета", ЭтотОбъект);
	
	CRM_РаботаСВнешнимиБиблиотекамиКлиент.ПриОткрытииФормы(ЭтотОбъект, ПриПолученииВнешнихБиблиотек);
	// -CRM_РаботаСВнешнимиБиблиотеками
	
	// +Виджеты
	Если ПоказыватьВиджеты Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	КонецЕсли;
	// -Виджеты
	
	НастроитьКонтекстноеМенюТаблиц();
	НастроитьКнопкиПросроченные();
	НастроитьКнопкиВидАРМ();
	
	СформироватьЗаголовок(ЭтотОбъект);
	
	НеРазобраноСводныеДанные_ПериодОбновления = Макс(1, НеРазобраноСводныеДанные_ПериодОбновления);
	Если Не Фильтр.СкрытьКолонкуОбращения Тогда
		ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", НеРазобраноСводныеДанные_ПериодОбновления*60, Ложь);
	КонецЕсли;
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки(Фильтр);
	КонецЕсли;
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
		И Источник.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		
		ОбновитьВсеВиджеты();
		
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" Тогда
		
		ОбновитьКолонки(Параметр);
		
	ИначеЕсли ИмяСобытия = "УстановленНовыйОтветственный"
		Или ИмяСобытия = "СтартованНовыйНезависимыйБП" Тогда
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_Интерес")
			Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметр, "СостояниеИнтереса") Тогда
			Возврат;
		КонецЕсли;
		
		СостояниеИнтереса = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "СостояниеИнтереса");
		
		ОбновитьКолонки(СостояниеИнтереса);
		
	ИначеЕсли ИмяСобытия = "ИзмененоСостояниеИнтереса" Тогда
		
		Если Не ТипЗнч(Параметр) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Ссылка", Параметр));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденныйЭлемент = ДоступныеСценарииПродаж.НайтиПоЗначению(СценарийПродаж);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбновитьПринудительно", Истина);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, НайденныйЭлемент);
		
	ИначеЕсли ИмяСобытия = "ИзмененСценарийИнтереса" Тогда
		
		НайденныйЭлемент = ДоступныеСценарииПродаж.НайтиПоЗначению(Параметр);
		Если НайденныйЭлемент = Неопределено Тогда
			НайденныйЭлемент = ДоступныеСценарииПродаж.Добавить(Параметр, Строка(Параметр));
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбновитьПринудительно", Истина);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, НайденныйЭлемент);
		
	ИначеЕсли ИмяСобытия = "УдаленСценарийИнтереса" Тогда
		
		НайденныйЭлемент = ДоступныеСценарииПродаж.НайтиПоЗначению(Параметр);
		Если НайденныйЭлемент <> Неопределено Тогда
			ДоступныеСценарииПродаж.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		Если ДоступныеСценарииПродаж.Количество() > 0 Тогда
			ПервыйЭлемент = ДоступныеСценарииПродаж[0];
			ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект, Новый Структура);
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ПервыйЭлемент);
		Иначе
			СценарийПродаж = Неопределено;
			Элементы.ВыборСценария.Заголовок = "";
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененоОтображениеОтмеченныхВручнуюОбращений" Тогда
		
		ПоказыватьОтмеченныеВручнуюОбращения = Параметр;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано,
			"ПоказыватьОтмеченныеВручнуюОбращения", ПоказыватьОтмеченныеВручнуюОбращения, Истина);
		
		ОбновитьКолонки("Этап_Неразобрано");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	НастроитьОтборыДинамическихСписков("СтрокаПоиска");
	ОбновитьПредставлениеФильтра("СтрокаПоиска");
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаКолонокКанбанПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИзменитьШиринуКолонокКанбан", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура АнализОбращенийНажатие(Элемент)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ОткрытиеОтчетаАнализОбращенийИзАРММоиПродажи");
	
	ПараметрыОтчета = Новый Структура();
	ОткрытьФорму("Отчет.CRM_АнализОбращений.ФормаОбъекта", ПараметрыОтчета);
	
КонецПроцедуры

#Область СводныеДанные

&НаКлиенте
Процедура НеРазобраноСводныеДанные_ПериодОбновленияПриИзменении(Элемент)
	Фильтр.НеРазобраноСводныеДанные_ПериодОбновления = НеРазобраноСводныеДанные_ПериодОбновления;
	ОтключитьОбработчикОжидания("ПериодическоеОбновлениеСписков");
	ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", НеРазобраноСводныеДанные_ПериодОбновления*60, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноСводныеДанные_ИзменениеРежима(Элемент)
	
	Если Элемент.Родитель = Элементы.ГруппаСводныеДанныеВсего Тогда
		Фильтр.НеРазобраноСводныеДанные_ТекРежим = "Всего";
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ГруппировкаВсего");
	ИначеЕсли Элемент.Родитель = Элементы.ГруппаСводныеДанныеВОжидании Тогда
		Фильтр.НеРазобраноСводныеДанные_ТекРежим = "ВОжидании";
	ИначеЕсли Элемент.Родитель = Элементы.ГруппаСводныеДанныеСегодня Тогда
		Фильтр.НеРазобраноСводныеДанные_ТекРежим = "Сегодня";
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ГруппировкаОбработатьСегодня");
	ИначеЕсли Элемент.Родитель = Элементы.ГруппаСводныеДанныеПросрочено Тогда
		Фильтр.НеРазобраноСводныеДанные_ТекРежим = "Просрочено";
	КонецЕсли;
	НеРазобраноСводныеДанные_ИзменениеРежимаСервер(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Виджеты

&НаКлиенте
Процедура ДобавитьВиджет(Элемент)
	
	CRM_РаботаСВиджетамиКлиент.ОткрытьВыборВариантаВиджета(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьВиджет()

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(ВыбранныйВариантВиджета, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариантВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВиджетНаФорму(ВыбранныйВариантВиджета);
	
КонецПроцедуры // ДобавитьВиджетЗавершение()

&НаКлиенте
Процедура Подключаемый_HTMLВиджетаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	ДанныеВиджета = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьДанныеВиджета(
		ЭтотОбъект, Элемент.Имя);
	
	Если ДанныеВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	Если СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
			"CRM_Статистика.Показатели.Виджеты.Удобства.КоличествоНажатийЗнакОбновить");
		
		ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		
		ОписаниеОповещенияОИзмененииНастроек = Новый ОписаниеОповещения(
			"ПриИзмененииНастроекВариантаВиджета", ЭтотОбъект);
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьНастройкиВиджета(
			ЭтотОбъект, ДанныеВиджета, ОписаниеОповещенияОИзмененииНастроек);
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "СкрытьВиджет") Тогда
		
		УдалитьВиджетНаФорме(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьРасшифровкуВиджета(ЭтотОбъект, ДанныеВиджета);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_HTMLВиджетаПриНажатии()

&НаКлиенте
Процедура ПриИзмененииНастроекВариантаВиджета(ДанныеВиджета, ДополнительныеПараметры) Экспорт
	
	ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
	
КонецПроцедуры // ПриИзмененииНастроекВариантаВиджета()

#КонецОбласти

#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти(Поле.Имя, "Гиперссылка") > 0 Тогда
		НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Имя", Элемент.Имя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
			Строка.Количество = Строка.Количество + РазмерПорцииСтрок;
			ОбновитьКолонки(Элемент.Имя);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ТипЗнч(ДанныеСтроки.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		
		ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаМессенджера",
			Новый Структура("Ключ", ДанныеСтроки.Объект));
		
	ИначеЕсли ТипЗнч(ДанныеСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",
			Новый Структура("Ключ", ДанныеСтроки.Объект), ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ДанныеСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента",
			Новый Структура("Ключ", ДанныеСтроки.Объект), ЭтотОбъект);
		 
	Иначе
		
		ПоказатьЗначение(, ДанныеСтроки.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриАктивизацииСтроки(Элемент)
	
	//АктивнаяТаблица = Элемент.Имя; 
	//ПодключитьОбработчикОжидания("ОбработкаАктивизацииСтрокиКанбан", 0.1, Истина);
	
	Если НеОбрабатыватьАктивизацию = Истина Тогда
		Возврат;
	Иначе
		АктивнаяТаблица = Элемент.Имя;
		ПодключитьОбработчикОжидания("ОбработкаАктивизацииСтрокиКанбан", 0.1, Истина);
		//Если АктивнаяТаблица <> Элемент.Имя Тогда
		//	Элемент.ВыделенныеСтроки.Очистить();
		//	Элемент.ТекущаяСтрока = Неопределено;
		//КонецЕсли;
		//Возврат;
	КонецЕсли;
	
	//Для Каждого ИмяТаблицы Из ИменаТаблиц(ТаблицаЭтапы, "Канбан", ЕстьСкрытыеЭтапы) Цикл
	//	Если АктивнаяТаблица = ИмяТаблицы Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
	//	Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
	//КонецЦикла;
	
	ТекущиеДанные = Элементы[АктивнаяТаблица].ТекущиеДанные;
	Если АктивнаяТаблица <> "Этап_НеРазобрано" И ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрока = ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
	Если АктивнаяТаблица = "Этап_НеРазобрано" Тогда
		НастроитьКонтекстноеМенюНеРазобрано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если Элемент.Имя = "Этап_НеРазобрано" Тогда
		
		Если Значение.Количество() = 0 Или Значение.Количество() > 1 Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(Значение[0]);
		
		ТекущееСостояние = "Этап_НеРазобрано";
		
	Иначе
		
		Если Значение = Неопределено Тогда
			Значение = Элемент.ТекущаяСтрока;
		КонецЕсли;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ПараметрыПеретаскивания.Значение);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Гиперссылка) Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Имя", Элемент.Имя));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
		ТекущееСостояние = НайденныеСтроки[0].Ссылка;
		
	КонецЕсли;
	
	ЗначениеПеретаскивания = Новый Структура;
	ЗначениеПеретаскивания.Вставить("Состояние", ТекущееСостояние);
	ЗначениеПеретаскивания.Вставить("Ссылка", ДанныеСтроки.Объект);
	
	ПараметрыПеретаскивания.Значение = ЗначениеПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если ЗначениеПеретаскивания = Неопределено Или ТипЗнч(ЗначениеПеретаскивания) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Имя", Элемент.Имя));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОписаниеНовогоСостояния = НайденныеСтроки[0];
	
	НовоеСостояние = ОписаниеНовогоСостояния.Ссылка;
	ТекущееСостояние = ЗначениеПеретаскивания.Состояние;
	
	Если ОписаниеНовогоСостояния.Завершено И ТекущееСостояние = "Этап_НеРазобрано" Тогда
		Возврат;
	КонецЕсли;
	
	Если НовоеСостояние = ТекущееСостояние Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееСостояние = "Этап_НеРазобрано" Тогда
		
		ЗапуститьРегистрациюОбращения(ЗначениеПеретаскивания.Ссылка);
		
	Иначе
		
		ПараметрыПереноса = ПараметрыПереносаИнтереса(
			ЗначениеПеретаскивания.Ссылка, ТекущееСостояние, НовоеСостояние);
		
		Если Не ПараметрыПереноса.ПереносВозможен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Переход интереса на этап невозможен.'"));
			Возврат;
		КонецЕсли;
		
		ЗапуститьПереносИнтереса(ЗначениеПеретаскивания.Ссылка, ПараметрыПереноса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОсновныеКоманды

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий", СценарийПродаж);
	ПараметрыФормы.Вставить("ДоступноОбращение", Ложь);
	ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценария(Команда)
	ОповещениеЗавершения = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, ДоступныеСценарииПродаж, Элементы.ВыборСценария);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценарияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПринудительно = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьПринудительно") Тогда
		ОбновитьПринудительно = ДополнительныеПараметры.ОбновитьПринудительно;
	КонецЕсли;
	
	Если Не ОбновитьПринудительно Тогда
		Если СценарийПродаж = ВыбранныйЭлемент.Значение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из ДоступныеСценарииПродаж Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	ВыбранныйЭлемент.Пометка = Истина;
	
	СценарийПродаж = ВыбранныйЭлемент.Значение;
	Элементы.ВыборСценария.Заголовок = ВыбранныйЭлемент.Представление;
	
	Фильтр.СценарийПродаж = СценарийПродаж;
	
	Элементы.ГруппаСоставКолонок.Видимость = Ложь;
	
	СценарийПродажПриИзмененииНаСервере();
	
	СформироватьЗаголовок(ЭтотОбъект);
	НастроитьКонтекстноеМенюТаблиц();
	
	ОбновитьКолонки();
	
	Элементы.ГруппаСоставКолонок.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуСценария(Команда)
	ПараметрыОткрытия = Новый Структура("Сценарий", СценарийПродаж);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПутьКлиента(Команда)
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("CRM_КонтекстВызова", "МоиПродажи");
	ПараметрыОтчета.Вставить("Сценарий", СценарийПродаж);
	ОткрытьФорму("Отчет.CRM_ПутьКлиента.Форма.ФормаОтчета", ПараметрыОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктураФильтра", Фильтр);
	
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаФильтра",
		ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияФильтра, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтрЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТемпСкрытьКолонкуОбращения = Фильтр.СкрытьКолонкуОбращения;
	
	ЗаполнитьЗначенияСвойств(Фильтр, Результат);
	
	ФильтрПриИзмененииНаСервере();
	//НастроитьКонтекстноеМенюТаблиц();
	
	ОбновитьКолонки();
	
	Если Фильтр.СкрытьКолонкуОбращения <> ТемпСкрытьКолонкуОбращения Тогда
		Если Фильтр.СкрытьКолонкуОбращения Тогда
			ОтключитьОбработчикОжидания("ПериодическоеОбновлениеСписков");
		Иначе
			ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", НеРазобраноСводныеДанные_ПериодОбновления*60, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	
	ДанныеФильтра = ДанныеФильтраПоУмолчанию();
	
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияФильтра, ДанныеФильтра);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВнизу(Команда)
	
	Фильтр.ПорядокПросроченных = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	НастроитьКнопкиПросроченные();
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВверху(Команда)
	
	Фильтр.ПорядокПросроченных = НаправлениеСортировкиКомпоновкиДанных.Возр;
	НастроитьКнопкиПросроченные();
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКанбан(Команда)
	
	ВидАРМ = "Канбан";
	Фильтр.ВидАРМ = ВидАРМ;
	Элементы.СтраницыАРМ.ТекущаяСтраница = Элементы.СтраницаВоронка;
	НастроитьКнопкиВидАРМ();
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСписок(Команда)
	
	ВидАРМ = "Список";
	Фильтр.ВидАРМ = ВидАРМ;
	Элементы.СтраницыАРМ.ТекущаяСтраница = Элементы.СтраницаСписок;
	НастроитьКнопкиВидАРМ();
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.АРММоиПродажи.ДлительностьСценариев.ВремяОбновленияАРМ");
	
	ОбновитьКолонки();
	
	CRM_ЦентрМониторингаКлиент.ЗавершитьЗамерОперацииБизнесСтатистики(
		"CRM_Статистика.АРММоиПродажи.ДлительностьСценариев.ВремяОбновленияАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонок(Команда)
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Анализ(Команда)
	ОткрытьФорму("Отчет.CRM_ВоронкаПродаж.Форма.Форма", Новый Структура("Воронка", СценарийПродаж));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройки(Команда)
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения("ОткрытьПерсональныеНастройкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АРММоиПродажи");
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "НастройкиКолонокАРМ");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещенияНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПерсональныеНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	
	СкрытыеКолонкиНов = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ");
	
	Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СкрытыеКолонки, СкрытыеКолонкиНов, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СкрытыеКолонки = СкрытыеКолонкиНов;
	
	ПерсональныеНастройкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРММоиПродажи"));
КонецПроцедуры

#КонецОбласти

#Область ДействияСОбъектами

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого Строка Из Элементы.Этап_НеРазобрано.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Этап_НеРазобрано.ДанныеСтроки(Строка);
		МассивСсылок.Добавить(ДанныеСтроки.Объект);
	КонецЦикла;
	ПараметрыОбработки = ПараметрыОбработкиЛидов(МассивСсылок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	ДополнительныеПараметры.Вставить("ЗадатьВопросОПереносеВОбработаные",
		ПараметрыОбработки.ЗадатьВопросОПереносеВОбработаные);
	ДополнительныеПараметры.Вставить("ПричинаОтказа", Неопределено);
	ДополнительныеПараметры.Вставить("Комментарий", "");
	
	Если ПараметрыОбработки.ЕстьЛиды Тогда
		
		ОповещениеЗавершения = Новый ОписаниеОповещения(
			"ОтклонитьОбращениеПродолжить", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения",,
			ЭтотОбъект,,,, ОповещениеЗавершения);
		
	Иначе
		
		ОповещениеЗавершения = Новый ОписаниеОповещения(
			"ОтклонитьОбращениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ПараметрыОбработки.ЗадатьВопросОПереносеВОбработаные Тогда
			ВопросОПереносеВОбработанные(ОповещениеЗавершения);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеПродолжить(ДанныеДляОтклонения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеДляОтклонения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ДанныеДляОтклонения);
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(
		"ОтклонитьОбращениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
	Если ДополнительныеПараметры.ЗадатьВопросОПереносеВОбработаные Тогда
		ВопросОПереносеВОбработанные(ОповещениеЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	ПереноситьПисьмаВОбработанные = (ОтветПользователя = КодВозвратаДиалога.Да);
	
	СкрытьОбъектыИзАРМНаСервере(
				ДополнительныеПараметры.МассивСсылок,
				ДополнительныеПараметры.ПричинаОтказа,
				ДополнительныеПараметры.Комментарий,
				ПереноситьПисьмаВОбработанные);
	
	ОбновитьКолонки("Этап_НеРазобрано");
	Оповестить("ОбновитьКонтактыДиалогов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОбработанным(Команда)
	
	МассивСсылок = Новый Массив;
	Для Каждого Строка Из Элементы.Этап_НеРазобрано.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Этап_НеРазобрано.ДанныеСтроки(Строка);
		МассивСсылок.Добавить(ДанныеСтроки.Объект);
	КонецЦикла;
	ПараметрыОбработки = ПараметрыОбработкиЛидов(МассивСсылок);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(
		"ОтметитьОбработаннымЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ПараметрыОбработки.ЗадатьВопросОПереносеВОбработаные Тогда
		ВопросОПереносеВОбработанные(ОповещениеЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОбработаннымЗавершение(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	ПереноситьПисьмаВОбработанные = (ОтветПользователя = КодВозвратаДиалога.Да);
	
	ОтметитьОбъектыОбработаннымНаСервере(ДополнительныеПараметры.МассивСсылок, ПереноситьПисьмаВОбработанные);
	
	ОбновитьКолонки("Этап_НеРазобрано");
	Оповестить("ОбновитьКонтактыДиалогов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	ПеренаправитьОбъект(ПользователиКлиент.АвторизованныйПользователь(), , Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьОтветственного(Команда)

	ПеренаправитьОбъект();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРоли(Команда)

	ПеренаправитьОбъект(, Тип("СправочникСсылка.РолиИсполнителей"));
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭтап(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРММоиПродажи.Удобство.СменаЭтаповИнтересаЧерезКонтекстноеМеню");
	
	Если Не СтрНачинаетсяС(Команда.Имя, "Х_СменитьЭтап_На_") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементЭтапа = ТекущийЭлемент;
	
	Если ТекущийЭлементЭтапа = Неопределено
			Или Не СтрНачинаетсяС(ТекущийЭлементЭтапа.Имя, "Этап_") Тогда
		Возврат;
	КонецЕсли;
	
	СрезИдентификатораПриемника = Сред(Команда.Имя, 1, СтрНайти(Команда.Имя, "_С_") - 1);
	СрезИдентификатораПриемника = СтрЗаменить(СрезИдентификатораПриемника, "Х_СменитьЭтап_На_", "");
	
	// Программная имитация начала перетаскивания.
	
	ПеретаскиваемыйОбъект = ТекущийЭлементЭтапа.ТекущиеДанные.Объект;
	
	ПараметрыПеретаскивания = Новый Структура;
	ПараметрыПеретаскивания.Вставить("Действие",			ДействиеПеретаскивания.Копирование);
	ПараметрыПеретаскивания.Вставить("ДопустимыеДействия",	ДопустимыеДействияПеретаскивания.Копирование);
	ПараметрыПеретаскивания.Вставить("Значение",			ПеретаскиваемыйОбъект);
	
	ФлагВыполнения = Истина;
	
	ТаблицаНачалоПеретаскивания(ТекущийЭлементЭтапа, ПараметрыПеретаскивания, ФлагВыполнения);
	
	Если Не ФлагВыполнения Тогда
		СообщениеОшибки =
			НСтр("en = 'The element stage change could not be performed.'; ru = 'Не удалось выполнить смену этапа элемента.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
		Возврат;
	КонецЕсли;
	
	// Программная имитация перетаскивания.
	
	ЭлементПриемникПеретаскивания = Элементы.Найти("Этап_" + СрезИдентификатораПриемника);
	
	Если ЭлементПриемникПеретаскивания = Неопределено Тогда
		СообщениеОшибки =
			НСтр("en = 'The element stage change could not be performed.'; ru = 'Не удалось выполнить смену этапа элемента.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаОбработкаПеретаскивания(
		ЭлементПриемникПеретаскивания,
		ПараметрыПеретаскивания,
		Истина,
		Неопределено,
		Неопределено);
	
КонецПроцедуры // СменитьЭтап()

#КонецОбласти

#Область ДействияСКолонками

&НаКлиенте
Процедура СвернутьУспешно(Команда)
	
	ЭтапУспешноРазвернут = Ложь;
	Элементы.Группа_Этап_Успешно.Видимость = ЭтапУспешноРазвернут;
	Элементы.ГруппаТаблица_Этап_Успешно_Свернуто.Видимость = Не ЭтапУспешноРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУспешно(Команда)
	
	ЭтапУспешноРазвернут = Истина;
	Элементы.Группа_Этап_Успешно.Видимость = ЭтапУспешноРазвернут;
	Элементы.ГруппаТаблица_Этап_Успешно_Свернуто.Видимость = Не ЭтапУспешноРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьНеудачно(Команда)
	
	ЭтапНеудачноРазвернут = Ложь;
	Элементы.Группа_Этап_Неудачно.Видимость = ЭтапНеудачноРазвернут;
	Элементы.ГруппаТаблица_Этап_Неудачно_Свернуто.Видимость = Не ЭтапНеудачноРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьНеудачно(Команда)
	
	ЭтапНеудачноРазвернут = Истина;
	Элементы.Группа_Этап_Неудачно.Видимость = ЭтапНеудачноРазвернут;
	Элементы.ГруппаТаблица_Этап_Неудачно_Свернуто.Видимость = Не ЭтапНеудачноРазвернут;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСкрытыеКолонки(Команда)
	
	ВидимостьСкрытыхЭтапов = Истина;
	НастроитьВидимостьЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСкрытыеКолонки(Команда)
	
	ВидимостьСкрытыхЭтапов = Ложь;
	НастроитьВидимостьЭтапов();
	
КонецПроцедуры

#КонецОбласти

#Область СводныеДанные

&НаКлиенте
Процедура НеРазобраноСводныеДанные_СкрытьПоказать(Команда)
	Фильтр.НеРазобраноСводныеДанные_Показать = Не Фильтр.НеРазобраноСводныеДанные_Показать;
	Если Фильтр.НеРазобраноСводныеДанные_Показать Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.ПоказатьСводныеДанные");
		Фильтр.НеРазобраноСводныеДанные_ТекРежим = "Всего";
	Иначе
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.УправлениеСрокомОбработкиОбращений.Удобство.СвернутьСводныеДанные");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Этап_НеРазобрано, "Светофор", 
			Фильтр.НеРазобраноСводныеДанные_ТекРежим, ВидСравненияКомпоновкиДанных.Равно, "Отбор по светофору", Ложь);
	КонецЕсли;
	НеРазобраноСводныеДанные_Видимость();
	ОбновитьКолонки("Этап_НеРазобрано");
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноСводныеДанные_Обновить(Команда)
	
	ОбновитьКолонки("Этап_НеРазобрано");
	
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноСводныеДанные_Настройка(Команда)
	
	Если Элементы.ГруппаСводныеДанные_Настройка.Скрыта() Тогда
		Элементы.ГруппаСводныеДанные_Настройка.Показать();
		ПодключитьОбработчикОжидания("НеРазобраноСводныеДанные_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Виджеты

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.Показатели.Виджеты.ОткрытиеВОдинКлик.ОткрытиеИзРазделаМоиПродажи");
	
	ПоказыватьВиджеты = Не ПоказыватьВиджеты;
	Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджеты;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяФормы, "ПоказыватьПанельВиджетов", ПоказыватьВиджеты);
	
	Если ПоказыватьВиджеты Тогда
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВариантыВиджетовФормы") Тогда
			ИнициализироватьМеханизмВиджетов();
		Иначе
			ОбновитьВсеВиджеты();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов");
	КонецЕсли;
	
КонецПроцедуры // СкрытьОтобразитьВиджеты()

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

&НаСервере
Процедура ПрочитатьНастройки()
	
	Фильтр = ДанныеФильтраПоУмолчанию();
	
	КлючОбъекта = "Обработка.CRM_АРМ_МоиПродажи.Форма.Форма/ТекущиеДанные";
	НастройкиСоответствие = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "", Новый Соответствие);
	НастройкиСтруктура = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиСтруктура, НастройкиСоответствие);
	ЗаполнитьЗначенияСвойств(Фильтр, НастройкиСтруктура);
	
#Область ДляСовместимости
	
	ЗначениеНастройки = НастройкиСоответствие.Получить("ВоронкаПродаж");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		СценарийВоронки = ЗначениеНастройки.СценарийИнтереса;
		Если ЗначениеЗаполнено(СценарийВоронки) Тогда
			Фильтр.СценарийПродаж = СценарийВоронки;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеНастройки = НастройкиСоответствие.Получить("ОтображатьПисьма");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Фильтр.СкрытьЭлектронныеПисьма = ЗначениеНастройки;
	КонецЕсли;
	
	ЗначениеНастройки = НастройкиСоответствие.Получить("ОтборВключатьПросроченные");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если ЗначениеНастройки = 1 Тогда
			Фильтр.ПорядокПросроченных = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			Фильтр.ПорядокПросроченных = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти
	
	ЗначениеНастройки = НастройкиСоответствие.Получить("ВидАРМ");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		ВидАРМ = ЗначениеНастройки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.СценарийПродаж) Тогда
		НайденныйСценарий = ДоступныеСценарииПродаж.НайтиПоЗначению(Фильтр.СценарийПродаж);
		Если НайденныйСценарий <> Неопределено Тогда
			Для Каждого Элемент Из ДоступныеСценарииПродаж Цикл
				Элемент.Пометка = Ложь;
			КонецЦикла;
			НайденныйСценарий.Пометка = Истина;
			СценарийПродаж = НайденныйСценарий.Значение;
			Элементы.ВыборСценария.Заголовок = НайденныйСценарий.Представление;
		КонецЕсли;
	КонецЕсли;
	
	НеРазобраноСводныеДанные_ПериодОбновления = Фильтр.НеРазобраноСводныеДанные_ПериодОбновления;
	
	СкрытыеКолонки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиКолонокАРМ", "СкрытыеКолонкиАРМ", Новый СписокЗначений);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройки(Фильтр)
	
	КлючОбъекта = "Обработка.CRM_АРМ_МоиПродажи.Форма.Форма/ТекущиеДанные";
	НастройкиСоответствие = Новый Соответствие;
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(НастройкиСоответствие, Фильтр);
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(КлючОбъекта, "", НастройкиСоответствие);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиШириныКолонокКанбан()
	
	НастройкиШирины = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МоиПродажиНастройкиШириныКолонок", "");
	Если НастройкиШирины = Неопределено Тогда
		ШиринаКолонокКанбан = 30;
	Иначе
		НастройкиШирины.Свойство("Ширина"+СтрЗаменить(Строка(СценарийПродаж.УникальныйИдентификатор()),
			 "-", ""), ШиринаКолонокКанбан);
		Если ШиринаКолонокКанбан = 0 Тогда
			НастройкиШирины.Свойство("ОбщаяНастройка", ШиринаКолонокКанбан);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФильтрПриИзмененииНаСервере(ПоместитьДинамическиеСписки = Истина)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Фильтр.ВариантПериода = "Сегодня" Тогда
		
		Фильтр.ПредставлениеПериода = НСтр("ru = 'Сегодня'");
		Фильтр.ЗначениеПериода.Вариант = ВариантСтандартногоПериода.Сегодня;
		
	ИначеЕсли Фильтр.ВариантПериода = "3 дня" Тогда
		
		Фильтр.ПредставлениеПериода = НСтр("ru = '3 дня'");
		Фильтр.ЗначениеПериода.ДатаНачала = НачалоДня(ТекущаяДата);
		Фильтр.ЗначениеПериода.Датаокончания = КонецДня(ТекущаяДата) + 2 * 24 * 3600;
		
	ИначеЕсли Фильтр.ВариантПериода = "Неделя" Тогда
		
		Фильтр.ПредставлениеПериода = НСтр("ru = 'Неделя'");
		Фильтр.ЗначениеПериода.Вариант = ВариантСтандартногоПериода.Следующие7Дней;
		
	ИначеЕсли Фильтр.ВариантПериода = "Месяц" Тогда
		
		Фильтр.ПредставлениеПериода = НСтр("ru = 'Месяц'");
		Фильтр.ЗначениеПериода.Вариант = ВариантСтандартногоПериода.СледующийМесяцДоТакойЖеДаты;
		Фильтр.ЗначениеПериода.ДатаНачала = НачалоДня(ТекущаяДата);
		
	Иначе
		
		Фильтр.ВариантПериода = "Неделя";
		Фильтр.ПредставлениеПериода = НСтр("ru = 'Неделя'");
		Фильтр.ЗначениеПериода.Вариант = ВариантСтандартногоПериода.Следующие7Дней;
		
	КонецЕсли;
	
	ТекущийПользователь = Фильтр.ТекущийПользователь;
	
	СсылкиНаОбъектыСтегами.Очистить();
	Если Фильтр.ОтборТеги.Количество() > 0 Тогда
		ОтборТегиМассив = Фильтр.ОтборТеги.ВыгрузитьЗначения();
		СсылкиНаОбъектыСтегамиМассив = CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам("Документ.CRM_Интерес", ОтборТегиМассив);
		Если СсылкиНаОбъектыСтегамиМассив.Количество() > 0 Тогда
			СсылкиНаОбъектыСтегами.ЗагрузитьЗначения(СсылкиНаОбъектыСтегамиМассив);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаНеРазобрано.Видимость = Не Фильтр.СкрытьКолонкуОбращения;
	
	НастроитьПорядокДинамическихСписков();
	НастроитьОтборыДинамическихСписков();
	
	Если ПоместитьДинамическиеСписки Тогда
		ПоместитьНастройкиДинамическихСписковВХранилище();
	КонецЕсли;
	
	ОбновитьПредставлениеФильтра();
	СформироватьЗаголовок(ЭтотОбъект);
	
	ОбновитьВсеВиджеты();
	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьПредставлениеФильтра(ВидОтборов = "Все", Колонки = Неопределено)
	
	КоличествоФильтров = 0;
	
	Если Фильтр.ОтборТеги.Количество() > 0 Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Фильтр.ПоискКлиент) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ПоискПроект) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ПоискТипУслуги) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ПоискЗначениеИсточникаПривлечения) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ПоискИсточникПривлечения) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если Не Фильтр.ОтборПоРолиУстановлен Или ЗначениеЗаполнено(Фильтр.ТекущаяРоль) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ТекущийАвтор) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фильтр.ПоискПодразделение) Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	//ОтборПоОтветственному = ЗначенияОтбораПоОтветственному(ТекущийПользователь, Фильтр.ТекущаяРоль, Фильтр.ОтборПоРолиУстановлен);
	//ОтборПоОтветственномуЗаполнен = (ОтборПоОтветственному.Количество() > 1);
	
	ОтборыУстановлены = (КоличествоФильтров > 0);
	Элементы.ОткрытьФильтр.Заголовок = ?(ОтборыУстановлены, НСтр("ru='Фильтр: ';en='Filter: '")
		+КоличествоФильтров,
		 НСтр("ru='Фильтр';en='Filter'"));
	Элементы.ОткрытьФильтр.Картинка = ?(ОтборыУстановлены, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.ОткрытьФильтр.ЦветТекста = ?(ОтборыУстановлены, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФильтраПоУмолчанию()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("СценарийПродаж", Неопределено);
	
	СтруктураНастроек.Вставить("СкрытьПропущенныеТелефонныеЗвонки", Ложь);
	СтруктураНастроек.Вставить("СкрытьОтвеченныеТелефонныеЗвонки", Ложь);
	СтруктураНастроек.Вставить("СкрытьЗаявки", Ложь);
	СтруктураНастроек.Вставить("СкрытьСообщения", Ложь);
	СтруктураНастроек.Вставить("СкрытьЭлектронныеПисьма", Ложь);
	СтруктураНастроек.Вставить("СкрытьПовторныеОбращения", Ложь);
	СтруктураНастроек.Вставить("СкрытьКолонкуОбращения", Ложь);
	
	СтруктураНастроек.Вставить("ТекущийПОльзователь", Пользователи.ТекущийПользователь());
	СтруктураНастроек.Вставить("ТекущаяРоль", Справочники.РолиИсполнителей.ПустаяСсылка());
	СтруктураНастроек.Вставить("ТекущийАвтор", Справочники.Пользователи.ПустаяСсылка());
	СтруктураНастроек.Вставить("ПоискПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	СтруктураНастроек.Вставить("ОтборПоРолиУстановлен", Истина);
	
	СтруктураНастроек.Вставить("ПоискКлиент", Справочники.Партнеры.ПустаяСсылка());
	СтруктураНастроек.Вставить("ПоискТипУслуги", Справочники.CRM_ТипУслуги.ПустаяСсылка());
	СтруктураНастроек.Вставить("ПоискПроект", Справочники.Проекты.ПустаяСсылка());
	СтруктураНастроек.Вставить("ПоискИсточникПривлечения",
		ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка());
	СтруктураНастроек.Вставить("ПоискЗначениеИсточникаПривлечения", Неопределено);
	СтруктураНастроек.Вставить("ОтборТеги", Новый СписокЗначений);
	
	СтруктураНастроек.Вставить("ВариантПериода", "Неделя");
	СтруктураНастроек.Вставить("ЗначениеПериода", Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней));
	СтруктураНастроек.Вставить("ПредставлениеПериода", НСтр("ru = 'Неделя'"));
	
	СтруктураНастроек.Вставить("ПорядокПросроченных", НаправлениеСортировкиКомпоновкиДанных.Возр);
	
	СтруктураНастроек.Вставить("НеРазобраноСводныеДанные_Показать", Ложь);
	СтруктураНастроек.Вставить("НеРазобраноСводныеДанные_ТекРежим", "Всего");
	СтруктураНастроек.Вставить("НеРазобраноСводныеДанные_ПериодОбновления", 1);
	
	СтруктураНастроек.Вставить("ВидАРМ", "Канбан");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияОтбораПоОтветственному(ТекущийПользователь, ТекущаяРоль, ОтборПоРолиУстановлен)
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) И ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		// Отбор по "Все роли"
		Если НЕ ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь).ВыгрузитьЗначения();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, РолиПользователя, Истина);
		КонецЕсли;
		
		ЗамещаемыеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЗамещаемыеПользователи, Истина);
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
			ИсполнителиПоРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(ТекущаяРоль).ВыгрузитьЗначения();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ИсполнителиПоРоли, Истина);
		Иначе
			// Все доступные пользователи и роли
			Если Константы.CRM_ИспользоватьДоступныхПользователей.Получить() Тогда
				Результат = ПолучитьДоступныхМенеджеровИРоли();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяРоль) И ОтборПоРолиУстановлен Тогда
		Результат.Добавить(ТекущаяРоль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Результат.Добавить(ТекущийПользователь);
	КонецЕсли;

	Результат.Добавить(Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДействияСОбъектами

&НаКлиенте
Процедура ПеренаправитьОбъект(Ответственный = Неопределено, ТипОтветственного = Неопределено, ИмяКоманды="")
	
	Если ВидАРМ = "Канбан" Тогда
		ТекущиеДанные = Элементы[АктивнаяТаблица].ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаСписок.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.Свойство("Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееОбращение = ТекущиеДанные.Объект;
	
	Если ТипЗнч(ТекущееОбращение) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ТекущийОтветственный = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееОбращение, "Ответственный");
	ИначеЕсли ТипЗнч(ТекущееОбращение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		// Для сообщения мессенджера текущим объектом устанавливается диалог, так как ответственного требуется установить в обоих объекта
		ТекущееОбращение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееОбращение, "Диалог");
		ТекущийОтветственный = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущееОбращение, "Ответственный");
		
		Если ИмяКоманды = "ПринятьВРаботу" Тогда
			// В ситуации, когда диалог перенаправлен пользователю, ответственный уже установлен, а сам диалог в работу еще не принят
			// поэтому сравнивать ответственного нет смысла. Нужно принять диалог.
			CRM_РаботаСМессенджерамиСервер.ПринятьДиалог(ТекущееОбращение);
			Возврат;
		КонецЕсли;
		
	Иначе
		ТекущийОтветственный = ТекущиеДанные.Ответственный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОтветственный) И ТекущийОтветственный = Ответственный Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОтветственного) Тогда
		ТипОтветственного = Тип("СправочникСсылка.Пользователи");
	КонецЕсли;
	Если (ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей"))
		 И (ТипЗнч(ТекущееОбращение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переадресация исходящих писем на роль исполнителя не поддерживается'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущееОбращение", ТекущееОбращение);
	ДополнительныеПараметры.Вставить("ТекущийОтветственный", ТекущийОтветственный);
	ДополнительныеПараметры.Вставить("ТипОтветственного", ТипОтветственного);
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПеренаправитьОбъектЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если Ответственный = Неопределено Тогда
		Если ТипОтветственного = Тип("СправочникСсылка.Пользователи") Тогда
			ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект,,,, ОповещениеЗавершения);
		ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора",,ЭтотОбъект,,,, ОповещениеЗавершения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОбъектЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = ДополнительныеПараметры.ТипОтветственного Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ДополнительныеПараметры.ТекущийОтветственный Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеОбращений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ТекущееОбращение);
	ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ДанныеОбращений, Результат);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ОбновитьКолонки(АктивнаяТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРегистрациюОбращения(ОбращениеСсылка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий", СценарийПродаж);
	
	Если ТипЗнч(ОбращениеСсылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		
		ПараметрыФормы.Вставить("ТелефонныйЗвонок", ОбращениеСсылка);
		ПараметрыФормы.Вставить("МассивСсылок", Новый Массив);
		ПараметрыФормы.Вставить("НомерТелефона",
			CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ОбращениеСсылка,
			"АбонентКакСвязаться"));
		
	ИначеЕсли ТипЗнч(ОбращениеСсылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		
		ПараметрыФормы.Вставить("СообщениеМессенджера", ОбращениеСсылка);
		
	ИначеЕсли ТипЗнч(ОбращениеСсылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		
		ПараметрыФормы.Вставить("Заявка", ОбращениеСсылка);
		
	ИначеЕсли ТипЗнч(ОбращениеСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ПараметрыФормы.Вставить("ПисьмоИсходящее", ОбращениеСсылка);
		ПараметрыФормы.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
		
	ИначеЕсли ТипЗнч(ОбращениеСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ПараметрыФормы.Вставить("ПисьмоВходящее", ОбращениеСсылка);
		ПараметрыФормы.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
		
	ИначеЕсли ТипЗнч(ОбращениеСсылка) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		
		ПараметрыФормы.Вставить("Диалог", ОбращениеСсылка);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", ОбращениеСсылка);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма",
		ПараметрыФормы, ЭтотОбъект,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПереносИнтереса(ИнтересСсылка, ПараметрыПереноса)
	
		Если ПараметрыПереноса.ОткрыватьФорму Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка", ИнтересСсылка);
			
			ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МоиПродажи", Истина);
			ПараметрыФормы.Вставить("Интерес", ИнтересСсылка);
			ПараметрыФормы.Вставить("Задача", ПараметрыПереноса.Задача);
			ПараметрыФормы.Вставить("НовоеСостояние", ПараметрыПереноса.НовоеСостояние);
			ПараметрыФормы.Вставить("Этап", ПараметрыПереноса.Этап);
			ПараметрыФормы.Вставить("ВариантВыполнения", ПараметрыПереноса.ВариантВыполнения);
			ПараметрыФормы.Вставить("ЭтоПереход", ПараметрыПереноса.ЭтоПереход);
			
			ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса",
				ПараметрыФормы, ЭтотОбъект,,,, ОповещениеЗавершения);
			
		Иначе
			
			ПеренестиИнтересНаСервере(ИнтересСсылка, ПараметрыПереноса);
			
			КолонкиАРМ = Новый Массив;
			КолонкиАРМ.Добавить(ПараметрыПереноса.ТекущееСостояние);
			КолонкиАРМ.Добавить(ПараметрыПереноса.НовоеСостояние);
			ОбновитьКолонки(КолонкиАРМ);
			
		КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПереносаИнтереса(Интерес, ТекущееСостояние, НовоеСостояние)
	
	ПараметрыПереноса = Новый Структура;
	ПараметрыПереноса.Вставить("ПереносВозможен", Истина);
	ПараметрыПереноса.Вставить("ОткрыватьФорму", Ложь);
	ПараметрыПереноса.Вставить("ТекущееСостояние", ТекущееСостояние);
	ПараметрыПереноса.Вставить("НовоеСостояние", НовоеСостояние);
	ПараметрыПереноса.Вставить("Задача", Неопределено);
	ПараметрыПереноса.Вставить("Этап", Неопределено);
	ПараметрыПереноса.Вставить("ВариантВыполнения", Неопределено);
	ПараметрыПереноса.Вставить("ЭтоПереход", Ложь);
	ПараметрыПереноса.Вставить("МассивОшибок", Новый Массив);
	ПараметрыПереноса.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Задача = ПолучитьТекущуюЗадачуИнтереса(Интерес, ТекущееСостояние);
	ПараметрыПереноса.Задача = Задача;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		ЭтоЧужаяЗадача = ЭтоЧужаяЗадача(Задача, Интерес);
		Если ЭтоЧужаяЗадача Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Перенос интереса на этап доступен только исполнителю задачи ""%1"".'"),
				Задача);
			ПараметрыПереноса.МассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;
		
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Задача, , Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыПереноса.МассивОшибок, МассивОшибок);
		
	КонецЕсли;
	
	Если ПараметрыПереноса.МассивОшибок.Количество() > 0 Тогда
		ПараметрыПереноса.ПереносВозможен = Ложь;
	КонецЕсли;
	
	Если Не ПроверитьЧекЛист(Интерес) Тогда
		ТекстОшибки = НСтр("ru = 'Для изменения состояния необходимо выполнить все задачи чек-листа в Интересе.'");
		ПараметрыПереноса.МассивОшибок.Добавить(ТекстОшибки);
		ПараметрыПереноса.ПереносВозможен = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		СписокСостояний = ДоступныеДляПереходаСостояния(Интерес, Задача);
		Если СписокСостояний.Количество() = 0 Тогда
			ПараметрыПереноса.ПереносВозможен = Ложь;
		КонецЕсли;
		
		НовоеСостояниеНайденоВСписке = Ложь;
		Для Каждого Элемент Из СписокСостояний Цикл
			ДанныеСостояния = Элемент.Значение;
			Если ДанныеСостояния.Состояние = НовоеСостояние Тогда
				ПараметрыПереноса.Этап = ДанныеСостояния.Этап;
				ПараметрыПереноса.ВариантВыполнения = ДанныеСостояния.ВариантВыполнения;
				ПараметрыПереноса.ЭтоПереход = ДанныеСостояния.ЭтоПереход;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не НовоеСостояниеНайденоВСписке Тогда
			ПараметрыПереноса.ПереносВозможен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыПереноса.ПереносВозможен Тогда
		Возврат ПараметрыПереноса;
	КонецЕсли;
	
	ОткрыватьФорму = ОткрыватьФормуПереносаИнтереса(НовоеСостояние, Интерес, Задача);
	ПараметрыПереноса.ОткрыватьФорму = ОткрыватьФорму;
	
	Возврат ПараметрыПереноса;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренестиИнтересНаСервере(Интерес, ПараметрыПереноса)
	
	НовоеСостояние = ПараметрыПереноса.НовоеСостояние;
	Задача = ПараметрыПереноса.Задача;
	
	// обработка интереса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("Интерес", Интерес);
	ВыбранныеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
	
	НачатьТранзакцию();
	
	Попытка
		
		СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Задача) И ВыбранныеЗадачи.Найти(Задача) <> Неопределено Тогда
			ВариантВыполнения = ПараметрыПереноса.ВариантВыполнения;
			Этап = ПараметрыПереноса.Этап;
			Если ПараметрыПереноса.ЭтоПереход Тогда
				Если (НовоеСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
					 И Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
					ИЛИ Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
					
					ПараметрыДосрочногоЗавершения = Новый Структура();
					ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
					ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,
						Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
					ПараметрыДосрочногоЗавершения.Вставить("Задача"							,Задача);
					
					Если Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
						ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Задача.CRM_ТочкаМаршрута);
						ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,
							Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
					Иначе
						ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Этап);
						ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Этап.ВариантЗавершения);
					КонецЕсли;
					
					CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
				Иначе
					CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(Задача.БизнесПроцесс, Этап);
				КонецЕсли;
			Иначе
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				ЗадачаОбъект.CRM_ВариантВыполнения = ВариантВыполнения;
				Попытка
					ЗадачаОбъект.CRM_ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
					ВариантВыполнения,
					ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
				Исключение
					ЗадачаОбъект.CRM_ВариантВыполненияСтрокой = "";
				КонецПопытки;
				ЗадачаОбъект.Записать();
				
				CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача,,Неопределено);
			КонецЕсли;
			
			Если НЕ Задача.БизнесПроцесс.Завершен Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Интерес",Интерес);
				Запрос.УстановитьПараметр("CRM_СостояниеИнтереса", НовоеСостояние);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка КАК Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
				|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
				|	И НЕ ЗадачаИсполнителя.Выполнена";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СсылкаНаЗадачу = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Интерес.СостояниеИнтереса <> НовоеСостояние Тогда
			РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Интерес,
				НовоеСостояние);
		
			CRM_ИнтересыСервер.СоздатьАвтоВзаимодействияПоИнтересу(Интерес, НовоеСостояние, ПараметрыПереноса.ТекущийПользователь);
			
			Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
				ИнтересОбъект = Интерес.ПолучитьОбъект();
				ИнтересОбъект.СостояниеИнтереса = НовоеСостояние;
				ИнтересОбъект.Завершен = НовоеСостояние.Завершено;
				ИнтересОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
				ИнтересОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = "";
		ПроверятьПланированиеАктивности = Истина;
		Если Пользователи.ЭтоПолноправныйПользователь()
			И Не ИнтересОбъект.СостояниеИнтереса.ИнтерактивноеПланированиеАктивностей Тогда
			ПроверятьПланированиеАктивности = Ложь;
		КонецЕсли;
		Если ПроверятьПланированиеАктивности
			И Не РегистрыСведений.CRM_ЗапланированныеАктивности.ПроверитьОбязательноеПланированиеАктивности(Интерес,
			НовоеСостояние, ТекстСообщения) Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюЗадачуИнтереса(Интерес, Состояние)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Интерес);
	Запрос.УстановитьПараметр("СостояниеИнтереса", Состояние);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &СостояниеИнтереса
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЧужаяЗадача(Задача, Интерес)
	
	ЭтоЧужаяЗадача = Ложь;
	
	МассивЗадачПоОбъекту = CRM_БизнесПроцессыСервер.ПолучитьНеВыполненныеЗадачи(Интерес, Истина);
	Если МассивЗадачПоОбъекту.Количество() = 0 Тогда
		ЭтоЧужаяЗадача = Истина;
	КонецЕсли;
	
	Если Не ЭтоЧужаяЗадача
		 И Задача.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
		
		ЭтоЧужаяЗадача = Истина;
	КонецЕсли;
	
	Возврат ЭтоЧужаяЗадача;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЧекЛист(Интерес)
	
	НетПроверкаВыполнения = Не Интерес.СостояниеИнтереса.ИспользоватьЧекЛист
		Или Не Интерес.СостояниеИнтереса.ПроверкаВыполненияЧекЛиста;
	
	ВсеПунктыВыполнены = Ложь;
	СтруктураОтбора = Новый Структура("СостояниеИнтереса, Выполнено", Интерес.СостояниеИнтереса, Ложь);
	Если Интерес.ЧекЛист.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
		ВсеПунктыВыполнены = Истина;
	КонецЕсли;
	
	Возврат НетПроверкаВыполнения Или ВсеПунктыВыполнены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеДляПереходаСостояния(Интерес, Задача)
	
	СписокСостояний = Новый СписокЗначений;
		
	РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
	РазрешеноДосрочноеЗавершение	= Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
	
	НеФормируемЗадачи = Ложь;
	CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
	
	СоответствиеЭтаповВариантам = Новый Соответствие;
	
	СписокЭтапов = Новый СписокЗначений;
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
	
	МассивТочекЗавершения = Новый Массив;
	
	Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
		
		СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			ВариантВыполнения = 0;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
				 Задача.CRM_ТочкаМаршрута,,,
				ВариантВыполнения);
			Для Каждого СтруктураИсхточки Из МассивИсходящихТочек Цикл
				СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
				МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
					МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				ВариантВыполнения = ЭлементСписка.Значение;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
					 Задача.CRM_ТочкаМаршрута,,,
					ВариантВыполнения);
				Для Каждого СтруктураИсхточки Из МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Интерес);
	Запрос.УстановитьПараметр("МассивЭтапов",МассивЭтапов);
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
	|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
	|ПОМЕСТИТЬ НастройкиЭтапов
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	|ГДЕ
	|	CRM_БизнесПроцесс.Интерес = &Интерес
	|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
	Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
	|	CRM_СостоянияИнтересов.Наименование КАК Наименование,
	|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
	|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
	|ГДЕ
	|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
	|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
	|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВероятностьСделки";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Этап) Тогда
			
			Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
				ВариантВыполнения=Неопределено;
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",
					Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),
					Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "
					+ Выборка.Этап);
			Иначе
				ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",
					Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),
					(НеФормируемЗадачи
					 И РазрешеноПеремещатьЭтап));
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "
					+ Выборка.Этап);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНеудачныйВариант = Ложь;
	Для Каждого ТочкаЗавершения Из МассивТочекЗавершения Цикл
		ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
		Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель),
			Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель));
		СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,
			ТочкаЗавершения, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), (НеФормируемЗадачи
			 И РазрешеноПеремещатьЭтап));
		СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "
			+ ТочкаЗавершения);
		Если НЕ ЕстьНеудачныйВариант Тогда
			ЕстьНеудачныйВариант =
				(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
		КонецЕсли;
	КонецЦикла;
	
	Если РазрешеноПеремещатьЭтап Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Задача.БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии", Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("МассивЭтапов", МассивТочекЗавершения);
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
		|ГДЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
		Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВариантВыполнения	=Неопределено;
			Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель),
			Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель));
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,
				Выборка.ТочкаМаршрута, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),
				 Истина);
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "
				+ Выборка.ТочкаМаршрута);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант =
					(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
		ВариантВыполнения	=Неопределено;
		Состояние			= Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель);
		СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,
			 Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения=Неопределено,0,
			ВариантВыполнения),
			 Истина);
		СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%),
			| Досрочное завершение");
	КонецЕсли;
	
	Возврат СписокСостояний;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрыватьФормуПереносаИнтереса(СостояниеИнтереса, Интерес, Задача)
	
	УказыватьДостигнутыйРезультат = Ложь;
	Если ЗначениеЗаполнено(Задача) Тогда
		НастройкиЭтапа = CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьНастройкиЭтапа(Задача);
		УказыватьДостигнутыйРезультат = НастройкиЭтапа.ЗапрашиватьРезультатВыполненияПриЗавершении;
	ИначеЕсли СостояниеИнтереса.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Интерес,
				 ТипАктивности,
				 СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(СостояниеИнтереса);
	
	ОграничитьОтветственного = ЗначениеЗаполнено(СостояниеИнтереса) И НЕ СостояниеИнтереса.РазрешитьРолевуюАдресацию
								И ТипЗнч(Интерес.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей");
	
	Возврат УказыватьДостигнутыйРезультат 
				ИЛИ СостояниеИнтереса.ИнтерактивноеПланированиеАктивностей
				ИЛИ НеобходимоЗаполнитьРеквизиты(СостояниеИнтереса, ПроверяемыеРеквизитыИнтереса, Интерес)
				ИЛИ ОграничитьОтветственного;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеобходимоЗаполнитьРеквизиты(Состояние, ПроверяемыеРеквизитыИнтереса, Интерес)
	НеобходимоЗаполнитьРеквизиты = Ложь;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыИнтереса Цикл
			Если ТипЗнч(ПроверяемыйРеквизит) = Тип("Строка") Тогда 
				Если НЕ ЗначениеЗаполнено(Интерес[ПроверяемыйРеквизит]) Тогда
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				СтрДопРек = Интерес.ДополнительныеРеквизиты.Найти(Новый Структура("Свойство", ПроверяемыйРеквизит));
				Если СтрДопРек<>Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрДопРек.Значение) Тогда
						НеобходимоЗаполнитьРеквизиты = Истина;
						Прервать;
					КонецЕсли;
				Иначе
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ ЗначениеЗаполнено(Интерес.Партнер) Тогда
			НеобходимоЗаполнитьРеквизиты = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат НеобходимоЗаполнитьРеквизиты;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОбработкиЛидов(МассивСсылок)
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ЕстьЛиды", Ложь);
	ПараметрыОбработки.Вставить("ЗадатьВопросОПереносеВОбработаные", Ложь);
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина)
			И РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Ссылка) Тогда
				ПараметрыОбработки.ЕстьЛиды = Истина;
				Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			УчетнаяЗапись = Ссылка.УчетнаяЗапись;
			Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
				ПараметрыОбработки.ЗадатьВопросОПереносеВОбработаные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Состояние") И Результат.Свойство("НовоеСостояние") Тогда
		//ОбработатьПараметрыОбновления(Результат);
		КолонкиАРМ = Новый Массив;
		КолонкиАРМ.Добавить(Результат.Состояние);
		КолонкиАРМ.Добавить(Результат.НовоеСостояние);
		ОбновитьКолонки(КолонкиАРМ);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			Или ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			Или ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
			СкрытьОбъектВАРМ(ДополнительныеПараметры.Ссылка);
			ОбновитьКолонки("Этап_НеРазобрано");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкрытьОбъектВАРМ(Ссылка)
	
	Если Ссылка.Пустая() Или Ссылка.CRM_СкрытьВАРМ Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	ДокументОбъект.CRM_СкрытьВАРМ = Истина;
	ДокументОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПереносеВОбработанные(ОповещениеЗавершения)
	
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкрытьОбъектыИзАРМНаСервере(Объекты, ПричинаОтказа = Неопределено, Комментарий = "", ПереноситьПисьмаВОбработанные = Истина)
	
	ТипыОбъектовОбращений = Метаданные.ОпределяемыеТипы.CRM_Обращения.Тип.Типы();
	
	Для Каждого Объект Из Объекты Цикл
		
		Если ТипыОбъектовОбращений.Найти(ТипЗнч(Объект)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект) Тогда
			
			СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект);
			
			Если РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(Объект) Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект,
					 Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа,
					 Комментарий); 
			ИначеЕсли СостояниеЛида <> Неопределено И СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Повторный Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект,
																			Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный,
																			СостояниеЛида.СконвертированВОбъект); 
			Иначе
				РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(Объект); 
			КонецЕсли;
			
		КонецЕсли;
		
		Об = ?(
			ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера"),
			Объект.Диалог.ПолучитьОбъект(),
			Объект.ПолучитьОбъект()
		);
		Об.CRM_СкрытьВАРМ = Истина;
		Об.Записать();
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
			// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
			Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
				Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
				Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
				
				ПрочитанныеПисьма = Новый Массив;
				ПрочитанныеПисьма.Добавить(Об.Ссылка);
				CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			CRM_РаботаСМессенджерамиСервер.ЗавершитьДиалог(Об.Ссылка);
			CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
				Об.УчетнаяЗапись,
				Об.Группа,
				Об.ID_Пользователя,
				Пользователи.ТекущийПользователь()
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьОбъектыОбработаннымНаСервере(Объекты, ПереноситьПисьмаВОбработанные = Истина)
	
	ТипыОбъектовОбращений = Метаданные.ОпределяемыеТипы.CRM_Обращения.Тип.Типы();
	
	Для Каждого Объект Из Объекты Цикл
		
		Если ТипыОбъектовОбращений.Найти(ТипЗнч(Объект)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Об = Объект.ПолучитьОбъект();
		Об.CRM_СкрытьВАРМ = Истина;
		Об.Записать();
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
			// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
			Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
				Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
				Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
				
				ПрочитанныеПисьма = Новый Массив;
				ПрочитанныеПисьма.Добавить(Об.Ссылка);
				CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСКолонками

&НаСервере
Процедура ПрочитатьДоступныеСценарииПродаж()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка,
	|	СостоянияИнтересов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК СостоянияИнтересовПодразделения
	|		ПО СостоянияИнтересов.Ссылка = СостоянияИнтересовПодразделения.Ссылка
	|ГДЕ
	|	СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ЭтоПоддержка
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияИнтересов.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияИнтересовПодразделения.Подразделение) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка,
	|	СостоянияИнтересов.Наименование
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК СостоянияИнтересовПодразделения
	|		ПО СостоянияИнтересов.Ссылка = СостоянияИнтересовПодразделения.Ссылка
	|ГДЕ
	|	СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ЭтоПоддержка
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|	И СостоянияИнтересовПодразделения.Подразделение В ИЕРАРХИИ(&Подразделение)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияИнтересов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Подразделение", ТекущийПользователь.Подразделение);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеСценарииПродаж.Добавить(Выборка.Ссылка, Выборка.Наименование); 
	КонецЦикла;
	
	Если ДоступныеСценарииПродаж.Количество() = 0 Тогда
		// Отказ от открытия формы.
	КонецЕсли;
	
	ПервыйСценарий = ДоступныеСценарииПродаж[0];
	ПервыйСценарий.Пометка = Истина;
	СценарийПродаж = ПервыйСценарий.Значение;
	Элементы.ВыборСценария.Заголовок = ПервыйСценарий.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиКанбан()
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц(ТаблицаЭтапы, "Канбан", ЕстьСкрытыеЭтапы) Цикл
		Если АктивнаяТаблица = ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
		Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СценарийПродажПриИзмененииНаСервере(ПоместитьДинамическиеСписки = Истина)
	
	ПоказыватьОтмеченныеВручнуюОбращения =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МоиПродажиПоказыватьОтмеченныеВручнуюОбращения", СценарийПродаж, Ложь);
	
	КомандаВыборСценария = Команды.Найти("ВыборСценария");
	КомандаВыборСценария.Подсказка = СценарийПродаж.Наименование;
	
	УдалитьЭтапыВоронкиНаСервере();
	
	ТаблицаЭтапы.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка,
	|	СостоянияИнтересов.Завершено КАК Завершено,
	|	ВЫБОР
	|		КОГДА СостоянияИнтересов.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершеноУспешно,
	|	ВЫБОР
	|		КОГДА СостоянияИнтересов.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗавершеноНеудачно,
	|	СостоянияИнтересов.Наименование КАК Наименование,
	|	СостоянияИнтересов.ИндексЦвета КАК ИндексЦвета,
	|	СостоянияИнтересов.РазрешитьРолевуюАдресацию КАК РазрешитьРолевуюАдресацию
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	СостоянияИнтересов.Родитель = &Сценарий
	|	И СостоянияИнтересов.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияИнтересов.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("Сценарий", СценарийПродаж);
	
	ЕстьСкрытыеЭтапы = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаЭтапы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Если НоваяСтрока.ЗавершеноУспешно Тогда
			НоваяСтрока.Имя = "Этап_Успешно";
			НоваяСтрока.ПорядокДат = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ИначеЕсли НоваяСтрока.ЗавершеноНеудачно Тогда
			НоваяСтрока.Имя = "Этап_Неудачно";
			НоваяСтрока.ПорядокДат = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			НоваяСтрока.Имя = "Этап_" + СтрЗаменить(НоваяСтрока.Идентификатор, "-", "_");
			НоваяСтрока.ПорядокДат = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		
		НоваяСтрока.Количество = РазмерПорцииСтрок;
		
		Если СкрытыеКолонки.НайтиПоЗначению(НоваяСтрока.Ссылка) <> Неопределено Тогда
			НоваяСтрока.Скрыто = Истина;
			Если Не ЕстьСкрытыеЭтапы Тогда
				ЕстьСкрытыеЭтапы = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЭтапыВоронкиНаСервере();
	НастроитьВидимостьЭтапов();
	
	НастроитьОформлениеДинамическихСписков();
	НастроитьПараметрыДинамическихСписков();
	
	Если ПоместитьДинамическиеСписки Тогда
		ПоместитьНастройкиДинамическихСписковВХранилище();
	КонецЕсли;
	
	ПрочитатьНастройкиШириныКолонокКанбан();
	УстановитьШиринуКолонокКанбан(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПерсональныеНастройкиПриИзмененииНаСервере()
	
	ЕстьСкрытыеЭтапы = Ложь;
	Для Каждого ОписаниеЭтапа Из ТаблицаЭтапы Цикл
		
		Если СкрытыеКолонки.НайтиПоЗначению(ОписаниеЭтапа.Ссылка) = Неопределено Тогда
			ОписаниеЭтапа.Скрыто = Ложь;
		Иначе
			ОписаниеЭтапа.Скрыто = Истина;
			Если Не ЕстьСкрытыеЭтапы Тогда
				ЕстьСкрытыеЭтапы = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСкрытыеЭтапы Тогда
		ДобавитьТаблицуСкрытыхЭтапов();
	КонецЕсли;
	
	НастроитьВидимостьЭтапов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаТаблиц(ТаблицаЭтапы, Режим = "Все", ЕстьСкрытые = Ложь)
	
	ИменаТаблиц = Новый Массив;
	
	Если Режим = "Все" Или Режим = "Канбан" Или Режим = "Динамические" Тогда
		ИменаТаблиц.Добавить("Этап_НеРазобрано");
	КонецЕсли;
	
	Если Режим = "Все" Или Режим = "Канбан" Тогда
		ИменаТаблиц.Добавить("Этап_Неудачно");
		ИменаТаблиц.Добавить("Этап_Успешно");
		ИменаТаблиц.Добавить("Этап_Неудачно_Свернуто");
		ИменаТаблиц.Добавить("Этап_Успешно_Свернуто");
		Если ЕстьСкрытые Тогда
			ИменаТаблиц.Добавить("ТаблицаЭтапыСвернуто");
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = "Все" Или Режим = "Канбан" Или Режим = "ДобавленыПрограммно" Тогда
		Для Каждого Строка Из ТаблицаЭтапы Цикл
			Если Не Строка.Завершено Тогда
				ИменаТаблиц.Добавить(Строка.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Режим = "Все" Или Режим = "Динамические" Тогда
		ИменаТаблиц.Добавить("ТаблицаСписок");
	КонецЕсли;
	
	Возврат ИменаТаблиц;
	
КонецФункции

&НаСервере
Процедура УдалитьЭтапыВоронкиНаСервере()
	
	ИменаТаблиц = ИменаТаблиц(ТаблицаЭтапы, "ДобавленыПрограммно");
	
	МассивРеквизитов = Новый Массив;
	Для Каждого Имя Из ИменаТаблиц Цикл
		МассивРеквизитов.Добавить(Имя);
		Элемент = Элементы.Найти("Группа_" + Имя);
		Если Элемент <> Неопределено Тогда
			 Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ИмяРеквизита = "ТаблицаЭтапыСвернуто";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизита) Тогда
		МассивРеквизитов.Добавить(ИмяРеквизита);
	КонецЕсли;
	Элемент = Элементы.Найти("Группа_"+ИмяРеквизита);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;
	
	ИмяРеквизита = "ТаблицаУспешноСвернуто";
	Элемент = Элементы.Найти("ГруппаТаблица_"+ИмяРеквизита);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;
	
	ИмяРеквизита = "ТаблицаНеудачноСвернуто";
	Элемент = Элементы.Найти("ГруппаТаблица_"+ИмяРеквизита);
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;

	Элементы.Группа_Этап_Неудачно.Видимость = Ложь;
	Элементы.Группа_Этап_Успешно.Видимость = Ложь;
	
	ИзменитьРеквизиты(,МассивРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭтапыВоронкиНаСервере()
	
	МассивРеквизитов = Новый Массив;
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		ИмяРеквизита = Строка.Имя;
		Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			ДобавитьРеквизитыКолонки(ИмяРеквизита, МассивРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		ИмяРеквизита = Строка.Имя;
		Если Строка.Завершено Тогда
			
			ДобавитьУсловноеОформлениеКолонкиЗавершено(ИмяРеквизита, УсловноеОформление.Элементы);
			
		Иначе
			
			Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
				ДобавитьУсловноеОформлениеКолонки(ИмяРеквизита, УсловноеОформление.Элементы);
				ДобавитьЭлементыКолонки(ИмяРеквизита, Строка.Наименование, Строка.ИндексЦвета);
				СформироватьКонтекстноеМеню(ИмяРеквизита, Строка.РазрешитьРолевуюАдресацию);
			Иначе
				Элемент = Элементы.Найти("Группа_" + ИмяРеквизита);
				Элемент.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//КонтейнерКолонокЗавершено = Элементы.ГруппаСоставКолонок;
	//Если ТаблицаЭтапы.Количество() > 0 Тогда
	//	ПараметрыОтбора = Новый Структура;
	//	ПараметрыОтбора.Вставить("Завершено", Ложь);
	//	Если ЕстьСкрытыеЭтапы И Не ВидимостьСкрытыхЭтапов Тогда
	//		ПараметрыОтбора.Вставить("Скрыто", Ложь);
	//	КонецЕсли;
	//	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(ПараметрыОтбора);
	//	Если НайденныеСтроки.Количество() > 0 Тогда
	//		ОписаниеЭтапа = НайденныеСтроки[НайденныеСтроки.ВГраница()];
	//		КонтейнерКолонокЗавершено = Элементы["Группа_" + ОписаниеЭтапа.Имя];
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьСвернутуюКолонкуУспешно(Элементы.ГруппаСоставКолонок);
	ДобавитьСвернутуюКолонкуНеудачно(Элементы.ГруппаСоставКолонок);
	
	Если ЕстьСкрытыеЭтапы Тогда
		ДобавитьТаблицуСкрытыхЭтапов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыКолонки(ИмяКолонки, МассивРеквизитов)
	
	НовыйРеквизит = Новый РеквизитФормы(
		ИмяКолонки, Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Объект", Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес"), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"КонтактноеЛицо", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры,СправочникСсылка.CRM_ПотенциальныеКлиенты"), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ПартнерНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(150), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"СостояниеИнтереса", Новый ОписаниеТипов("СправочникСсылка.CRM_СостоянияИнтересов"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Заголовок", ОбщегоНазначения.ОписаниеТипаСтрока(200), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Просрочено", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ПросроченоДляСортировки", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ДатаДляСортировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"День", ОбщегоНазначения.ОписаниеТипаСтрока(20), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"Время", ОбщегоНазначения.ОписаниеТипаСтрока(50), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Избранный", Новый ОписаниеТипов("Булево"), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ОписаниеИнтереса", ОбщегоНазначения.ОписаниеТипаСтрока(300), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"ПустаяЯчейка", ОбщегоНазначения.ОписаниеТипаСтрока(1), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ТипУслуги", Новый ОписаниеТипов("СправочникСсылка.CRM_ТипУслуги"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"КрайнийСрок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"КрайнийСрокОкончание", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Картинка", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	//
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ИндексЦвета", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Соисполнение", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"СрокНаЭтапе", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"СрокНаЭтапеСветофор", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"Гиперссылка", ОбщегоНазначения.ОписаниеТипаСтрока(20), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы(
		"НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0), ИмяКолонки);
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	//НовыйРеквизит = Новый РеквизитФормы(
	//	"ОжидаемаяВыручка", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2), ИмяРеквизита);
	//МассивРеквизитов.Добавить(НовыйРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеКолонки(ИмяКолонки, ЭлементыОформления)
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 211, 194));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 1; // красный
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 211, 194));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 1; // красный
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 2; // желтый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоЗолотистый);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 2; // желтый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191, 238, 191));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 3; // зеленый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(191, 238, 191));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 3; // зеленый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧФ='""Срок на этапе: ""Ч"" дн.""'");
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".СрокНаЭтапе");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементУсловия.ПравоеЗначение = 0; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".СрокНаЭтапе");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(229, 249, 238));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".СрокНаЭтапеСветофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 0; // зеленый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 255, 220));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".СрокНаЭтапеСветофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 1; // желтый
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 238, 233));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".СрокНаЭтапеСветофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 2; // красный
	
	// Поля в строке с гиперссылкой
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Гиперссылка" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Соисполнение" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Партнер" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ОписаниеИнтереса" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("СрокНаЭтапе" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Ячейка" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	//ЭлементУО = ЭлементыОформления.Добавить();
	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	//ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	//ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок" + ИмяКолонки);
	//ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".Гиперссылка");
	//ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеКолонкиЗавершено(ИмяКолонки, ЭлементыОформления)
	
	ЭлементУО = ЭлементыОформления.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧФ='Ч " + ВалютаПредставление + "'");
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ОжидаемаяВыручка" + ИмяКолонки);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки + ".ОжидаемаяВыручка");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементУсловия.ПравоеЗначение = 0;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыКолонки(ИмяКолонки, ЗаголовокКолонки, ИндексЦветаКолонки)

	ГруппаЭлемент = Элементы.Добавить("Группа_"+ИмяКолонки, Тип("ГруппаФормы"), Элементы.ГруппаСоставКолонок);
	ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
	ГруппаЭлемент.РастягиватьПоГоризонтали = Ложь;
	ГруппаЭлемент.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Авто;
	
	ДекорацияНазвание = Элементы.Добавить("Декорация_"+ИмяКолонки, Тип("ДекорацияФормы"), ГруппаЭлемент);
	ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияНазвание.Заголовок = ЗаголовокКолонки;
	ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияНазвание.Подсказка = ЗаголовокКолонки;
	ДекорацияНазвание.РастягиватьПоГоризонтали = Истина;
	ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
	ДекорацияНазвание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,13,Ложь);
	
	ИмяРеквизитаСумма = "Декорация_"+ИмяКолонки+"_Сумма";
	ДекорацияСумма = Элементы.Добавить(ИмяРеквизитаСумма, Тип("ДекорацияФормы"), ГруппаЭлемент);
	ДекорацияСумма.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияСумма.Заголовок = "";
	ДекорацияСумма.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияСумма.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияСумма.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Ложь);
	
	ГруппаТаблица = Элементы.Добавить("ГруппаТаблица_"+ИмяКолонки, Тип("ГруппаФормы"), ГруппаЭлемент);
	ГруппаТаблица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблица.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТаблица.ОтображатьЗаголовок = Ложь;
	ГруппаТаблица.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_"+ИмяКолонки, Тип("ДекорацияФормы"), ГруппаТаблица);
	ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЦвет.Заголовок = "";
	ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияЦвет.РастягиватьПоГоризонтали = Ложь;
	ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Истина);
	ДекорацияЦвет.ЦветФона = СписокЦветов.Получить(ИндексЦветаКолонки).Цвет;
	
	Элемент = Элементы.Добавить(ИмяКолонки, Тип("ТаблицаФормы"), ГруппаТаблица);
	Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
	Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Элемент.РежимВыбора = Истина;
	Элемент.ОтображениеСостоянияПросмотра.Видимость = Истина;
	Элемент.ОтображениеСтрокиПоиска.Видимость = Истина;
	Элемент.КоманднаяПанель.Видимость = Ложь;
	Элемент.ПутьКДанным = ИмяКолонки;
	Элемент.ПутьКДаннымКартинкиСтроки  = ИмяКолонки + ".Картинка";
	Элемент.КартинкаСтрок  = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
	Элемент.ИзменятьПорядокСтрок = Ложь;
	Элемент.РазрешитьПеретаскивание = Истина;
	Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ЧередованиеЦветовСтрок = Ложь;
	Элемент.Видимость = Истина;
	Элемент.Шапка = Ложь;
	Элемент.ГоризонтальныеЛинии = Истина;
	Элемент.ВертикальныеЛинии = Ложь;
	Элемент.УстановитьДействие("Выбор", "ТаблицаВыбор");
	Элемент.УстановитьДействие("ПриАктивизацииСтроки", "ТаблицаПриАктивизацииСтроки");
	Элемент.УстановитьДействие("ПередНачаломДобавления", "ТаблицаПередНачаломДобавления");
	Элемент.УстановитьДействие("ПередУдалением", "ТаблицаПередУдалением");
	Элемент.УстановитьДействие("НачалоПеретаскивания", "ТаблицаНачалоПеретаскивания");
	Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТаблицаПроверкаПеретаскивания");
	Элемент.УстановитьДействие("Перетаскивание", "ТаблицаОбработкаПеретаскивания");
	Элемент.Заголовок = ЗаголовокКолонки;
	//Элемент.КонтекстноеМеню.Видимость = Ложь;
	Для Каждого ЭлементМеню Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		ЭлементМеню.Видимость = Ложь;
	КонецЦикла;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Высота = 4;
	Элемент.РастягиватьПоВертикали = Истина;
	Элемент.АвтоМаксимальнаяВысота = Ложь;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
	
	ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяКолонки,
		 Тип("ГруппаФормы"), Элементы[ИмяКолонки]);
	ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
	
	ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяКолонки, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
	ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаСтрока.ОтображатьЗаголовок = Ложь;
	
	ГруппаКолонок = Элементы.Добавить("ГруппаКолонок_" + ИмяКолонки, Тип("ГруппаФормы"), ГруппаСтрока);
	ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКолонок.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаКолонок.ОтображатьЗаголовок = Ложь;
	
	ГруппаЗаголовок = Элементы.Добавить("ГруппаЗаголовок_" + ИмяКолонки, Тип("ГруппаФормы"), ГруппаКолонок);
	ГруппаЗаголовок.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаЗаголовок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаЗаголовок.ОтображатьЗаголовок = Ложь;
 	ГруппаЗаголовок.РастягиватьПоГоризонтали = Ложь;

	КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяКолонки, Тип("ПолеФормы"), ГруппаЗаголовок);
	КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаНаименование.ПутьКДанным = ИмяКолонки + ".Заголовок";
	КолонкаНаименование.ЦветФона = Новый Цвет(245, 245, 245);
	КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,Ложь,Ложь);
	КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
	
	КолонкаСоисполнение = Элементы.Добавить("Соисполнение" + ИмяКолонки, Тип("ПолеФормы"), ГруппаЗаголовок);
	КолонкаСоисполнение.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаСоисполнение.ПутьКДанным = ИмяКолонки + ".Соисполнение";
	КолонкаСоисполнение.КартинкаЗначений = БиблиотекаКартинок.CRM_СоисполнениеКоллекция;
	КолонкаСоисполнение.Ширина = 1;
	КолонкаСоисполнение.ОтображатьВШапке = Ложь;
	КолонкаСоисполнение.Подсказка = НСтр("ru = 'В соисполнении'");
	
	КолонкаПартнер = Элементы.Добавить("Партнер" + ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонок);
	КолонкаПартнер.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаПартнер.ПутьКДанным = ИмяКолонки + ".Партнер";
	КолонкаПартнер.ОтображатьВШапке = Ложь;
	КолонкаПартнер.ЦветФона = Новый Цвет(245, 245, 245);
	КолонкаПартнер.РастягиватьПоГоризонтали = Ложь;
	
	КолонкаОписание = Элементы.Добавить("ОписаниеИнтереса" + ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонок);
	КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаОписание.ПутьКДанным = ИмяКолонки + ".ОписаниеИнтереса";
	КолонкаОписание.ОтображатьВШапке = Ложь;
	КолонкаОписание.ЦветФона = Новый Цвет(245, 245, 245);
	КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
	
	КолонкаОписание = Элементы.Добавить("СрокНаЭтапе" + ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонок);
	КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаОписание.ПутьКДанным = ИмяКолонки + ".СрокНаЭтапе";
	КолонкаОписание.ОтображатьВШапке = Ложь;
	КолонкаОписание.ЦветФона = Новый Цвет(245, 245, 245);
	КолонкаОписание.Ширина = 1;
	КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
	КолонкаОписание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
	КолонкаПросрочено = Элементы.Добавить("Просрочено" + ИмяКолонки, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаПросрочено.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаПросрочено.ПутьКДанным = ИмяКолонки + ".Просрочено";
	КолонкаПросрочено.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Ложь,Ложь,Ложь);
	КолонкаПросрочено.ОтображатьВШапке = Ложь;
	КолонкаПросрочено.Ширина = 1;
	КолонкаПросрочено.РастягиватьПоГоризонтали = Ложь;
	
	//КолонкаСумма = Элементы.Добавить("ОжидаемаяВыручка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	//КолонкаСумма.Вид = ВидПоляФормы.ПолеВвода;
	//КолонкаСумма.ПутьКДанным = ИмяРеквизита + ".ОжидаемаяВыручка";
	//КолонкаСумма.Видимость = Ложь;
	
	КолонкаГиперссылка = Элементы.Добавить("Гиперссылка" + ИмяКолонки, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
	КолонкаГиперссылка.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаГиперссылка.ГиперссылкаЯчейки = Истина;
	КолонкаГиперссылка.ПутьКДанным = ИмяКолонки + ".Гиперссылка";
	КолонкаГиперссылка.ОтображатьВШапке = Ложь;
	КолонкаГиперссылка.ЦветФона = Новый Цвет(245, 245, 245);
	КолонкаГиперссылка.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
	КолонкаГиперссылка.РастягиватьПоГоризонтали = Ложь;
	КолонкаГиперссылка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	
	КолонкаРазделитель = Элементы.Добавить("Ячейка" + ИмяКолонки, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
	КолонкаРазделитель.Вид = ВидПоляФормы.ПолеНадписи;
	КолонкаРазделитель.ПутьКДанным = ИмяКолонки + ".ПустаяЯчейка";
	КолонкаРазделитель.ОтображатьВШапке = Ложь;
	КолонкаРазделитель.ЦветФона = Новый Цвет(255, 255, 255);
	КолонкаРазделитель.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Ложь,Ложь,Истина);
	КолонкаРазделитель.Высота = 1;
	КолонкаРазделитель.РастягиватьПоГоризонтали = Ложь;
	КолонкаРазделитель.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуСкрытыхЭтапов()
	
	Если Не ЕстьСкрытыеЭтапы Или Элементы.Найти("ГруппаНеРазобраноТаблица") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = "ТаблицаЭтапыСвернуто";
	Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаНеРазобранных = Элементы.Найти("ГруппаНеРазобрано");
	ГруппаДобавленияСкрытых = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаНеРазобранных);
	ГруппаДобавленияСкрытых.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДобавленияСкрытых.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаДобавленияСкрытых.ОтображатьЗаголовок = Ложь;
	ГруппаДобавленияСкрытых.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;

	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Заголовок", Новый ОписаниеТипов("Строка"), НовыйРеквизит.Имя));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Сумма", Новый ОписаниеТипов("Строка"), НовыйРеквизит.Имя));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПустаяЯчейка", Новый ОписаниеТипов("Картинка"), НовыйРеквизит.Имя));
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаДобавленияСкрытых);
	ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияЦвет.РастягиватьПоГоризонтали = Истина;
	ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
	ДекорацияЦвет.ЦветФона = WebЦвета.Черный;
	
	Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаДобавленияСкрытых);
	Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
	Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Элемент.РежимВыбора = Истина;
	Элемент.ОтображениеСостоянияПросмотра.Видимость = Истина;
	Элемент.ОтображениеСтрокиПоиска.Видимость = Истина;
	Элемент.КоманднаяПанель.Видимость = Ложь;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита+".Заголовок";
	Элемент.РазрешитьПеретаскивание = Истина;
	Элемент.РазрешитьНачалоПеретаскивания = Ложь;
	Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ЧередованиеЦветовСтрок = Ложь;
	Элемент.Видимость = Истина;
	Элемент.Шапка = Ложь;
	Элемент.ГоризонтальныеЛинии = Ложь;
	Элемент.ВертикальныеЛинии = Ложь;
	Элемент.УстановитьДействие("Выбор", "РазвернутьСкрытыеКолонки");
	Элемент.Заголовок = "";
	Элемент.КонтекстноеМеню.Видимость = Истина;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Высота = 2;
	Элемент.Ширина = Элементы["Этап_НеРазобрано"].Ширина;
	Элемент.АвтоМаксимальнаяВысота = Ложь;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
	
	ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяРеквизита, Тип("ГруппаФормы"),
		Элементы[ИмяРеквизита]);
	ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
	
	КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
	КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
	КолонкаНаименование.ОтображатьВШапке = Ложь;
	КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина, Ложь, Ложь);
	КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
	КолонкаНаименование.АвтоМаксимальнаяШирина = Ложь;
	
	ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
	ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаСтрока.ОтображатьЗаголовок = Ложь;
	
	КолонкаОписание = Элементы.Добавить("Сумма" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаОписание.ПутьКДанным = ИмяРеквизита + ".Сумма";
	КолонкаОписание.ОтображатьВШапке = Ложь;
	КолонкаОписание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
	КолонкаОписание.АвтоМаксимальнаяШирина = Ложь;
	
	КолонкаКнопка = Элементы.Добавить("Ячейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаКнопка.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаКнопка.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
	КолонкаКнопка.Ширина = 1;
	КолонкаКнопка.ОтображатьВШапке = Ложь;
	КолонкаКнопка.ГиперссылкаЯчейки = Истина;
	КолонкаКнопка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	КолонкаКнопка.РастягиватьПоГоризонтали = Ложь;
	КолонкаКнопка.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");
	
	Для Каждого ОписаниеЭтапа Из ТаблицаЭтапы Цикл
		Если ОписаниеЭтапа.Скрыто Тогда
			Элементы["Группа_" + ОписаниеЭтапа.Имя].Видимость = Ложь;
			Если ОписаниеЭтапа.ЗавершеноУспешно Тогда
				Элементы.ГруппаТаблица_Этап_Успешно_Свернуто.Видимость = Ложь;
			ИначеЕсли ОписаниеЭтапа.ЗавершеноНеудачно Тогда
				Элементы.ГруппаТаблица_Этап_Неудачно_Свернуто.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвернутуюКолонкуУспешно(ГруппаДобавления)
	
	ИмяРеквизита = "Этап_Успешно_Свернуто";
	Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ГруппаТаблица = Элементы.Добавить("ГруппаТаблица_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаДобавления);
	ГруппаТаблица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблица.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТаблица.ОтображатьЗаголовок = Ложь;
	ГруппаТаблица.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаТаблица);
	ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЦвет.Заголовок = "";
	ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияЦвет.РастягиватьПоГоризонтали = Ложь;
	ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Истина);
	ДекорацияЦвет.ЦветФона = Новый Цвет(0, 200, 83);
	
	Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаТаблица);
	Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
	Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Элемент.РежимВыбора = Истина;
	Элемент.ОтображениеСостоянияПросмотра.Видимость = Истина;
	Элемент.ОтображениеСтрокиПоиска.Видимость = Истина;
	Элемент.КоманднаяПанель.Видимость = Ложь;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита+".Заголовок";
	Элемент.РазрешитьПеретаскивание = Истина;
	Элемент.РазрешитьНачалоПеретаскивания = Ложь;
	Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ЧередованиеЦветовСтрок = Ложь;
	Элемент.Видимость = Истина;
	Элемент.Шапка = Ложь;
	Элемент.ГоризонтальныеЛинии = Ложь;
	Элемент.ВертикальныеЛинии = Ложь;
	Элемент.УстановитьДействие("Выбор", "РазвернутьУспешно");
	Элемент.УстановитьДействие("ПриАктивизацииСтроки", "ТаблицаПриАктивизацииСтроки");
	Элемент.УстановитьДействие("ПередНачаломДобавления", "ТаблицаПередНачаломДобавления");
	Элемент.УстановитьДействие("Перетаскивание", "ТаблицаУспешноПеретаскивание");
	Элемент.УстановитьДействие("ПередУдалением", "ТаблицаПередУдалением");
	//Элемент.УстановитьДействие("НачалоПеретаскивания", "ТаблицаОбработкаНачалоПеретаскивания");
	Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТаблицаПроверкаПеретаскивания");
	Элемент.Заголовок = "";
	Элемент.КонтекстноеМеню.Видимость = Истина;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Высота = 2;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ЦветФона = Новый Цвет(229, 249, 238);
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;

	ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяРеквизита, Тип("ГруппаФормы"),
		 Элементы[ИмяРеквизита]);
	ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
	
	КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
	КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
	КолонкаНаименование.ОтображатьВШапке = Ложь;
	КолонкаНаименование.ЦветФона = Новый Цвет(229, 249, 238);
	КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,Ложь,Ложь);
	КолонкаНаименование.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
	КолонкаНаименование.АвтоМаксимальнаяШирина = Ложь;
	
	ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
	ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаСтрока.ОтображатьЗаголовок = Ложь;

	КолонкаОписание = Элементы.Добавить("Сумма" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаОписание.ПутьКДанным = ИмяРеквизита + ".Сумма";
	КолонкаОписание.ОтображатьВШапке = Ложь;
	КолонкаОписание.ЦветФона = Новый Цвет(229, 249, 238);
	КолонкаОписание.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
	
	КолонкаКнопка = Элементы.Добавить("Ячейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаКнопка.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаКнопка.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
	КолонкаКнопка.Ширина = 1;
	КолонкаКнопка.ОтображатьВШапке = Ложь;
	КолонкаКнопка.ГиперссылкаЯчейки = Истина;
	КолонкаКнопка.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Право;
	КолонкаКнопка.РастягиватьПоГоризонтали = Ложь;
	КолонкаКнопка.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");

КонецПроцедуры

&НаСервере
Процедура ДобавитьСвернутуюКолонкуНеудачно(ГруппаДобавления)
	
	ИмяРеквизита = "Этап_Неудачно_Свернуто";
	Если Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаТаблица = Элементы.Добавить("ГруппаТаблица_"+ИмяРеквизита, Тип("ГруппаФормы"), ГруппаДобавления);
	ГруппаТаблица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТаблица.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТаблица.ОтображатьЗаголовок = Ложь;
	ГруппаТаблица.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_"+ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаТаблица);
	ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияЦвет.Заголовок = "";
	ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияЦвет.РастягиватьПоГоризонтали = Ложь;
	ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
	ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,1,Истина);
	ДекорацияЦвет.ЦветФона = Новый Цвет(255, 87, 34);
	
	Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаТаблица);
	Элемент.РежимВыделенияСтроки =РежимВыделенияСтрокиТаблицы.Строка;
	Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Элемент.РежимВыбора = Истина;
	Элемент.ОтображениеСостоянияПросмотра.Видимость = Истина;
	Элемент.ОтображениеСтрокиПоиска.Видимость = Истина;
	Элемент.КоманднаяПанель.Видимость = Ложь;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита+".Заголовок";
	Элемент.РазрешитьПеретаскивание = Истина;
	Элемент.РазрешитьНачалоПеретаскивания = Ложь;
	Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	Элемент.ЧередованиеЦветовСтрок = Ложь;
	Элемент.Видимость = Истина;
	Элемент.Шапка = Ложь;
	Элемент.ГоризонтальныеЛинии = Ложь;
	Элемент.ВертикальныеЛинии = Ложь;
	Элемент.УстановитьДействие("Выбор", "РазвернутьНеудачно");
	Элемент.УстановитьДействие("ПриАктивизацииСтроки", "ТаблицаПриАктивизацииСтроки");
	Элемент.УстановитьДействие("ПередНачаломДобавления", "ТаблицаПередНачаломДобавления");
	Элемент.УстановитьДействие("Перетаскивание", "ТаблицаНеудачноПеретаскивание");
	Элемент.УстановитьДействие("ПередУдалением", "ТаблицаПередУдалением");
	//Элемент.УстановитьДействие("НачалоПеретаскивания", "ТаблицаОбработкаНачалоПеретаскивания");
	Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТаблицаПроверкаПеретаскивания");
	Элемент.Заголовок = "";
	Элемент.КонтекстноеМеню.Видимость = Истина;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.Высота = 2;
	Элемент.АвтоМаксимальнаяВысота = Ложь;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.ЦветФона = Новый Цвет(255, 238, 233);
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
	
	ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяРеквизита, Тип("ГруппаФормы"),
		 Элементы[ИмяРеквизита]);
	ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
	
	КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
	КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
	КолонкаНаименование.ОтображатьВШапке = Ложь;
	КолонкаНаименование.ЦветФона = Новый Цвет(255, 238, 233);
	КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,Ложь,Ложь);
	КолонкаНаименование.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
	КолонкаНаименование.АвтоМаксимальнаяШирина = Ложь;
	
	ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
	ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаСтрока.ОтображатьЗаголовок = Ложь;

	КолонкаОписание = Элементы.Добавить("Сумма" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаОписание.ПутьКДанным = ИмяРеквизита + ".Сумма";
	КолонкаОписание.ОтображатьВШапке = Ложь;
	КолонкаОписание.ЦветФона = Новый Цвет(255, 238, 233);
	КолонкаОписание.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
	
	КолонкаКнопка = Элементы.Добавить("Ячейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
	КолонкаКнопка.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаКнопка.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
	КолонкаКнопка.Ширина = 1;
	КолонкаКнопка.ОтображатьВШапке = Ложь;
	КолонкаКнопка.ГиперссылкаЯчейки = Истина;
	КолонкаКнопка.ГоризонтальноеПоложение=ГоризонтальноеПоложениеЭлемента.Право;
	КолонкаКнопка.РастягиватьПоГоризонтали = Ложь;
	КолонкаКнопка.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭтапов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СвернутьСкрытыеКолонки", "Видимость", ЕстьСкрытыеЭтапы И ВидимостьСкрытыхЭтапов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "Группа_ТаблицаЭтапыСвернуто", "Видимость", ЕстьСкрытыеЭтапы И Не ВидимостьСкрытыхЭтапов);
	
	Для Каждого ОписаниеЭтапа Из ТаблицаЭтапы Цикл
		Если ОписаниеЭтапа.Скрыто Тогда
			
			Если ОписаниеЭтапа.ЗавершеноУспешно Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_Этап_Успешно", "Видимость", ЭтапУспешноРазвернут И ВидимостьСкрытыхЭтапов);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "ГруппаТаблица_Этап_Успешно_Свернуто", "Видимость", Не ЭтапУспешноРазвернут И ВидимостьСкрытыхЭтапов);
				
			ИначеЕсли ОписаниеЭтапа.ЗавершеноНеудачно Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_Этап_Неудачно", "Видимость", ЭтапНеудачноРазвернут И ВидимостьСкрытыхЭтапов);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "ГруппаТаблица_Этап_Неудачно_Свернуто", "Видимость", Не ЭтапНеудачноРазвернут И ВидимостьСкрытыхЭтапов);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_" + ОписаниеЭтапа.Имя, "Видимость", ВидимостьСкрытыхЭтапов);
				
			КонецЕсли;
			
		Иначе
			
			Если ОписаниеЭтапа.ЗавершеноУспешно Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_Этап_Успешно", "Видимость", ЭтапУспешноРазвернут);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "ГруппаТаблица_Этап_Успешно_Свернуто", "Видимость", Не ЭтапУспешноРазвернут);
				
			ИначеЕсли ОписаниеЭтапа.ЗавершеноНеудачно Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_Этап_Неудачно", "Видимость", ЭтапНеудачноРазвернут );
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "ГруппаТаблица_Этап_Неудачно_Свернуто", "Видимость", Не ЭтапНеудачноРазвернут);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, "Группа_" + ОписаниеЭтапа.Имя, "Видимость", Истина);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	КонтейнерКолонокЗавершено = Элементы.ГруппаСоставКолонок;
	Если ТаблицаЭтапы.Количество() > 0 Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Завершено", Ложь);
		Если ЕстьСкрытыеЭтапы И Не ВидимостьСкрытыхЭтапов Тогда
			ПараметрыОтбора.Вставить("Скрыто", Ложь);
		КонецЕсли;
		НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОписаниеЭтапа = НайденныеСтроки[НайденныеСтроки.ВГраница()];
			КонтейнерКолонокЗавершено = Элементы["Группа_" + ОписаниеЭтапа.Имя];
		КонецЕсли;
	КонецЕсли;
	
	ЭлементУспешно = Элементы.ГруппаТаблица_Этап_Успешно_Свернуто;
	Если ЭлементУспешно.Родитель <> КонтейнерКолонокЗавершено Тогда 
		Элементы.Переместить(ЭлементУспешно, КонтейнерКолонокЗавершено);
	КонецЕсли;
	
	ЭлементНеудачно = Элементы.ГруппаТаблица_Этап_Неудачно_Свернуто;
	Если ЭлементНеудачно.Родитель <> КонтейнерКолонокЗавершено Тогда 
		Элементы.Переместить(ЭлементНеудачно, КонтейнерКолонокЗавершено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекстноеМеню(ИмяТаблицы, РазрешитьРолевуюАдресацию)
	
	ИмяЭлементаКнопки = "Х_ПринятьВРаботу_" + ИмяТаблицы;
	КнопкаПринятьВРаботу = Элементы.Найти(ИмяЭлементаКнопки);
	Если КнопкаПринятьВРаботу = Неопределено Тогда
		КнопкаПринятьВРаботу = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элементы[ИмяТаблицы].КонтекстноеМеню);
		КнопкаПринятьВРаботу.ИмяКоманды = "ПринятьВРаботу";
	КонецЕсли;
	КнопкаПринятьВРаботу.Видимость = Истина;
	
	ИмяЭлементаКнопки = "Х_ПередатьИсполнителю_" + ИмяТаблицы;
	КнопкаПередатьИсполнителю = Элементы.Найти(ИмяЭлементаКнопки);
	Если КнопкаПередатьИсполнителю = Неопределено Тогда
		КнопкаПередатьИсполнителю = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
			 Элементы[ИмяТаблицы].КонтекстноеМеню);
		КнопкаПередатьИсполнителю.ИмяКоманды = "СменитьОтветственного";
	КонецЕсли;
	КнопкаПередатьИсполнителю.Видимость = Истина;
	
	Если РазрешитьРолевуюАдресацию Тогда
		ИмяЭлементаКнопки = "Х_ПередатьРоли_" + ИмяТаблицы;
		КнопкаПередатьРоли = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаПередатьРоли = Неопределено Тогда
			КнопкаПередатьРоли = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элементы[ИмяТаблицы].КонтекстноеМеню);
			КнопкаПередатьРоли.ИмяКоманды = "ПередатьРоли";
		КонецЕсли;
		КнопкаПередатьРоли.Видимость = Истина;
	КонецЕсли;
	
	// Смена этапа
	
	ИмяЭлементаГруппыКнопок	= "Х_СменитьЭтапГруппаКнопок_" + ИмяТаблицы;
	ИмяЭлементаПодменю		= "Х_СменитьЭтапПодменю_" + ИмяТаблицы;
	
	ГруппаКнопокСменитьЭтап = Элементы.Найти(ИмяЭлементаГруппыКнопок);
	Если ГруппаКнопокСменитьЭтап = Неопределено Тогда
		ГруппаКнопокСменитьЭтап = Элементы.Добавить(ИмяЭлементаГруппыКнопок, Тип("ГруппаФормы"),
			 Элементы[ИмяТаблицы].КонтекстноеМеню);
		ГруппаКнопокСменитьЭтап.Вид = ВидГруппыФормы.ГруппаКнопок;
		
		ПодменюСменитьЭтап = Элементы.Добавить(ИмяЭлементаПодменю, Тип("ГруппаФормы"), ГруппаКнопокСменитьЭтап);
		ПодменюСменитьЭтап.Заголовок	= "Сменить этап";
		ПодменюСменитьЭтап.Вид			= ВидГруппыФормы.Подменю;
		
		ИдентификаторИсточника = СтрЗаменить(ИмяТаблицы, "Этап_", "");
		
		Для Каждого ТекущаяТаблицаЭтапа Из ТаблицаЭтапы Цикл
			ИдентификаторЭтапаПриемника	= СтрЗаменить(Строка(ТекущаяТаблицаЭтапа.Ссылка.УникальныйИдентификатор()), "-", "_");
			ИмяРеквизитаЭтапаПриемника	= "Этап_" + ИдентификаторЭтапаПриемника;
			
			ИмяЭлементаКнопкиСменитьЭтап	= "Х_СменитьЭтап_На_" + ИдентификаторЭтапаПриемника + "_Из_" + ИдентификаторИсточника;
			КнопкаСменитьЭтап				= Элементы.Добавить(ИмяЭлементаКнопкиСменитьЭтап, Тип("КнопкаФормы"), ПодменюСменитьЭтап);
			
			Если ИмяРеквизитаЭтапаПриемника = ИмяТаблицы Тогда
				КнопкаСменитьЭтап.Доступность	= Ложь;
				КнопкаСменитьЭтап.Картинка		= БиблиотекаКартинок.ОформлениеФлагЗеленый;
				КнопкаСменитьЭтап.Отображение	= ОтображениеКнопки.КартинкаИТекст;
				КнопкаСменитьЭтап.ИмяКоманды	= "СменитьЭтап";
			Иначе
				КомандаПоиска		= "Х_СменитьЭтап_На_" + ИдентификаторЭтапаПриемника;
				КомандаСменыЭтапа	= Команды.Найти(КомандаПоиска);
				
				Если КомандаСменыЭтапа = Неопределено Тогда
					КомандаСменыЭтапа = Команды.Добавить(КомандаПоиска);
				КонецЕсли;
				
				КомандаСменыЭтапа.Действие = "СменитьЭтап";
				КнопкаСменитьЭтап.ИмяКоманды = КомандаПоиска;
			КонецЕсли;
			
			КнопкаСменитьЭтап.Заголовок = ТекущаяТаблицаЭтапа.Ссылка.Наименование;
			КнопкаСменитьЭтап.Видимость = Истина;
		КонецЦикла;
		
		ПодменюСменитьЭтап.Видимость = Истина;
	КонецЕсли;
	ГруппаКнопокСменитьЭтап.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКонтекстноеМенюТаблиц()
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц(ТаблицаЭтапы, "ДобавленыПрограммно") Цикл
		КонтекстноеМенюЭтапа = Элементы[ИмяТаблицы].КонтекстноеМеню;
		Для Каждого ПодчиненныйЭлемент Из КонтекстноеМенюЭтапа.ПодчиненныеЭлементы Цикл
			Если Лев(ПодчиненныйЭлемент.Имя, 2) = "Х_" Тогда
				Продолжить;
			КонецЕсли;
			ПодчиненныйЭлемент.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	КонтекстноеМенюЭтапа = Элементы["Этап_Успешно_Свернуто"].КонтекстноеМеню;
	Для Каждого ПодчиненныйЭлемент Из КонтекстноеМенюЭтапа.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = Ложь;
	КонецЦикла;
	КонтекстноеМенюЭтапа = Элементы["Этап_Неудачно_Свернуто"].КонтекстноеМеню;
	Для Каждого ПодчиненныйЭлемент Из КонтекстноеМенюЭтапа.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКолонки(Знач Колонки = Неопределено)
	
	Если ВидАРМ = "Список" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.ТаблицаСписок);
		Возврат;
	КонецЕсли;
	
	Если Колонки = Неопределено Тогда
		
		Колонки = ИменаТаблиц(ТаблицаЭтапы, "Канбан");
		
	ИначеЕсли ТипЗнч(Колонки) = Тип("Строка") Тогда
		
		Колонки = СтрРазделить(Колонки, ",", Ложь);
		
	ИначеЕсли ТипЗнч(Колонки) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
		
		НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Ссылка", Колонки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Колонки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НайденныеСтроки[0].Имя);
		
	ИначеЕсли ТипЗнч(Колонки) = Тип("Массив") Тогда
		
		Если Колонки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		КолонкиДляОбновления = Новый Массив;
		Для Каждого Элемент Из Колонки Цикл
			
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
				НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("Ссылка", Элемент));
				Если НайденныеСтроки.Количество() > 0 Тогда
					КолонкиДляОбновления.Добавить(НайденныеСтроки[0].Имя);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
				КолонкиДляОбновления.Добавить(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		Колонки = КолонкиДляОбновления;
		
	КонецЕсли;
		
	Если ТипЗнч(Колонки) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИндексНеРазобрано = Колонки.Найти("Этап_НеРазобрано");
	Если ИндексНеРазобрано <> Неопределено Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Этап_НеРазобрано);
		Колонки.Удалить(ИндексНеРазобрано);
	КонецЕсли;
	
	ИндексНеРазобрано = Колонки.Найти("НеРазобрано");
	Если ИндексНеРазобрано <> Неопределено Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Этап_НеРазобрано);
		Колонки.Удалить(ИндексНеРазобрано);
	КонецЕсли;
	
	Если Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗапуститьОбновлениеКолонокВФоне(Колонки, УникальныйИдентификатор);
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбновитьКолонкиЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьКолонкиЗавершение",
			 ЭтотОбъект,
			 ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьОбновлениеКолонокВФоне(Колонки, УникальныйИдентификатор)
	
	Состояния = Новый Массив;
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		
		Если Колонки.Найти(Строка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеСостояния = Новый Структура;
		ОписаниеСостояния.Вставить("ИмяКолонки", Строка.Имя);
		ОписаниеСостояния.Вставить("Состояние", Строка.Ссылка);
		ОписаниеСостояния.Вставить("Количество", Строка.Количество);
		ОписаниеСостояния.Вставить("Завершено", Строка.Завершено);
		ОписаниеСостояния.Вставить("Скрыто", Строка.Скрыто);
		ОписаниеСостояния.Вставить("ПорядокДат", Строка.ПорядокДат);
		ОписаниеСостояния.Вставить("ПорядокПросроченных", Фильтр.ПорядокПросроченных);
		
		ПериодОтбораНачало = '00010101';
		Если Строка.Завершено Тогда
			Если Фильтр.ВариантПериода = "Сегодня" Тогда
				ПериодОтбораНачало = Фильтр.ЗначениеПериода.ДатаНачала;
			Иначе
				ДлительностьПериодаОтбора = Фильтр.ЗначениеПериода.ДатаОкончания - Фильтр.ЗначениеПериода.ДатаНачала;
				ПериодОтбораНачало = НачалоДня(Фильтр.ЗначениеПериода.ДатаНачала - ДлительностьПериодаОтбора);
			КонецЕсли;
		КонецЕсли;
		ОписаниеСостояния.Вставить("ПериодОтбораНачало", ПериодОтбораНачало);
		ОписаниеСостояния.Вставить("ПериодОтбораОкончание", Фильтр.ЗначениеПериода.ДатаОкончания);
		
		Состояния.Добавить(ОписаниеСостояния);
		
	КонецЦикла;
	
	Для Каждого Настройка Из НастройкиДинамическихСписков Цикл
		
		ОписаниеСостояния = Новый Структура;
		ОписаниеСостояния.Вставить("ИмяКолонки", Настройка.Ключ);
		ОписаниеСостояния.Вставить("Состояние", Неопределено);
		ОписаниеСостояния.Вставить("СхемаКомпоновкиДанных",
			ПолучитьИзВременногоХранилища(Настройка.Значение.СхемаКомпоновкиДанных));
		ОписаниеСостояния.Вставить("НастройкиКомпоновкиДанных",
			ПолучитьИзВременногоХранилища(Настройка.Значение.НастройкиКомпоновкиДанных));
		Состояния.Добавить(ОписаниеСостояния);
		
	КонецЦикла;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ДнейПоКалендарюНаСегодня = CRM_ОбщегоНазначенияСервер.КоличествоДнейСНачалаГодаПоКалендарю(
		Календарь, ТекущаяДата);
	
	ОтборПоОтветственному = ЗначенияОтбораПоОтветственному(ТекущийПользователь, Фильтр.ТекущаяРоль, Фильтр.ОтборПоРолиУстановлен);
	ОтборПоОтветственномуЗаполнен = (ОтборПоОтветственному.Количество() > 1);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("ПериодПросроченных", НачалоДня(ТекущаяДата));
	ОбщиеПараметры.Вставить("ПериодТекущих", КонецДня(ТекущаяДата));
	ОбщиеПараметры.Вставить("Пользователь", ОтборПоОтветственному);
	ОбщиеПараметры.Вставить("ПользовательЗаполнен", ОтборПоОтветственномуЗаполнен);
	ОбщиеПараметры.Вставить("ДнейПоКалендарюНаСегодня", ДнейПоКалендарюНаСегодня);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("СтрокаПоиска", СтрокаПоискаОтбор);
	ЗначенияОтбора.Вставить("Автор", Фильтр.ТекущийАвтор);
	ЗначенияОтбора.Вставить("Подразделение", Фильтр.ПоискПодразделение);
	ЗначенияОтбора.Вставить("Проект", Фильтр.ПоискПроект);
	ЗначенияОтбора.Вставить("ОбъектыСТегами", СсылкиНаОбъектыСтегами);
	ЗначенияОтбора.Вставить("Клиент", Фильтр.ПоискКлиент);
	ЗначенияОтбора.Вставить("ТипУслуги", Фильтр.ПоискТипУслуги);
	ЗначенияОтбора.Вставить("ЗначениеИсточникаПривлечения", Фильтр.ПоискЗначениеИсточникаПривлечения);
	ЗначенияОтбора.Вставить("ИсточникПривлечения", Фильтр.ПоискИсточникПривлечения);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Валюта", ВалютаПредставление);
	ПараметрыПроцедуры.Вставить("Состояния", Состояния);
	ПараметрыПроцедуры.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	ПараметрыПроцедуры.Вставить("ЗначенияОтбора", ЗначенияОтбора);
	ПараметрыПроцедуры.Вставить("ЕстьСкрытыеЭтапы", ЕстьСкрытыеЭтапы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление колонок АРМ Мои продажи'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Обработки.CRM_АРМ_МоиПродажи.ПолучитьДанныеКолонок",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ЗаполнитьКолонки(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаАктивнойТаблице()
	
	Если Не ЗначениеЗаполнено(АктивнаяТаблица) Тогда
		НеОбрабатыватьАктивизацию = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы[АктивнаяТаблица];
	
	Если АктивнаяТаблица <> "Этап_НеРазобрано" Тогда
		ПараметрыОтбора = Новый Структура("НомерСтроки", ТекущаяСтрока);
		НайденныеСтроки = ЭтотОбъект[АктивнаяТаблица].НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Идентификатор = НайденныеСтроки[0].ПолучитьИдентификатор();
			Элементы[АктивнаяТаблица].ТекущаяСтрока = Идентификатор;
			Элементы[АктивнаяТаблица].ВыделенныеСтроки.Добавить(Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	НеОбрабатыватьАктивизацию = Ложь;
	ТаблицаПриАктивизацииСтроки(ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонки(ДанныеЗаполнения)
	
	НеОбрабатыватьАктивизацию = Истина;
	
	ДанныеСостояния = ДанныеЗаполнения.Получить("Этап_НеРазобрано");
	Если ДанныеСостояния <> Неопределено Тогда
		Элементы.Декорация_Этап_НеРазобрано_Сумма.Заголовок = ДанныеСостояния.ЗаголовокФорматированный;
	КонецЕсли;
	
	ДанныеСостояния = ДанныеЗаполнения.Получить("Этап_НеРазобрано_СводныеДанные");
	Если ДанныеСостояния <> Неопределено Тогда
		Элементы.НадписьВсего.Заголовок = ДанныеСостояния.НадписьВсего;
		Элементы.НадписьВОжидании.Заголовок = ДанныеСостояния.НадписьВОжидании;
		Элементы.НадписьПросрочено.Заголовок = ДанныеСостояния.НадписьПросрочено;
		Элементы.НадписьСегодня.Заголовок = ДанныеСостояния.НадписьСегодня;
	КонецЕсли;
	
	Если ЕстьСкрытыеЭтапы Тогда
		ДанныеСостояния = ДанныеЗаполнения.Получить("СкрытыеЭтапы");
		Если ДанныеСостояния <> Неопределено Тогда
			Таблица = ЭтотОбъект["ТаблицаЭтапыСвернуто"];
			Таблица.Очистить();
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Заголовок = ДанныеСостояния.ЗаголовокЗтапы;
			НоваяСтрока.Сумма = ДанныеСостояния.ЗаголовокИнтересы;
			НоваяСтрока.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеЭтапа Из ТаблицаЭтапы Цикл
		
		ИмяКолонки = ОписаниеЭтапа.Имя;
		
		//Если ОписаниеЭтапа.Скрыто Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ДанныеСостояния = ДанныеЗаполнения.Получить(ИмяКолонки);
		Если ДанныеСостояния = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьКолонку(ИмяКолонки, ДанныеСостояния);
		
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("СпозиционироватьсяНаАктивнойТаблице", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКолонку(ИмяКолонки, ДанныеСостояния)

	КолонкаСостояния = ЭтотОбъект[ИмяКолонки];
	КолонкаСостояния.Очистить();
	
	НомерСтроки = 1;
	Для Каждого Строка Из ДанныеСостояния.Записи Цикл
		НоваяСтрока = КолонкаСостояния.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Если КолонкаСостояния.Количество() > 0 Тогда
		ДобавитьГиперссылкуЕще(КолонкаСостояния, ДанныеСостояния.Количество, НомерСтроки + 1);
	КонецЕсли;
	
	ИмяЭлемента = "Декорация_" + ИмяКолонки + "_Сумма";
	НайденныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Заголовок = ДанныеСостояния.ЗаголовокФорматированный;
	КонецЕсли;
	
	Если ИмяКолонки = "Этап_Успешно" Тогда
		Этап_Успешно_Свернуто.Очистить();
		НоваяСтрока = Этап_Успешно_Свернуто.Добавить();
		НоваяСтрока.Заголовок = НСтр("ru = 'Завершено успешно'");
		НоваяСтрока.Сумма = ДанныеСостояния.ЗаголовокОбычный;
		НоваяСтрока.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
	КонецЕсли;
	
	Если ИмяКолонки = "Этап_Неудачно" Тогда
		Этап_Неудачно_Свернуто.Очистить();
		НоваяСтрока = Этап_Неудачно_Свернуто.Добавить();
		НоваяСтрока.Заголовок = НСтр("ru = 'Завершено неудачно'");
		НоваяСтрока.Сумма = ДанныеСостояния.ЗаголовокОбычный;
		НоваяСтрока.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГиперссылкуЕще(Колонка, ВсегоСтрок, НомерСтроки)
	
	НеВыведенокСтрок = ВсегоСтрок - Колонка.Количество();
	
	ВывестиСтрок = 0;
	Если НеВыведенокСтрок > 0 Тогда
		Если НеВыведенокСтрок >= РазмерПорцииСтрок Тогда
			ВывестиСтрок = РазмерПорцииСтрок;
		Иначе
			ВывестиСтрок = НеВыведенокСтрок;
		КонецЕсли;
	КонецЕсли;
	
	Если ВывестиСтрок > 0 Тогда
		НоваяСтрока = Колонка.Добавить();
		НоваяСтрока.Картинка = 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.Гиперссылка = НСтр("ru = 'Показать еще'") + " " + Формат(ВывестиСтрок, "ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКонтекстноеМенюНеРазобрано()
	
	СкрытьОтметитьОбработанным = Ложь;
	Если Элементы.Этап_НеРазобрано.ВыделенныеСтроки.Количество() > 0 Тогда
	
		Для Каждого ТекСтрока Из Элементы.Этап_НеРазобрано.ВыделенныеСтроки Цикл
			
			Если ТекСтрока <> Неопределено Тогда
				
				ТекСтрокаДанные = Элементы.Этап_НеРазобрано.ДанныеСтроки(ТекСтрока);
				
				Если ТекСтрокаДанные.СостояниеОбращения = ПредопределенноеЗначение("Справочник.CRM_СостоянияЛидов.Новый") Тогда
					СкрытьОтметитьОбработанным = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Элементы.НеРазобраноКонтекстноеМенюОтметитьОбработанным.Видимость = НЕ СкрытьОтметитьОбработанным;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическиеСписки

&НаКлиенте
Процедура ПериодическоеОбновлениеСписков()
	
	Если ВводДоступен() Тогда
		Если ОбновитьОбращенияПриАктивации Тогда
			ОбновитьОбращенияПриАктивации = Ложь;
			ОтключитьОбработчикОжидания("ПериодическоеОбновлениеСписков");
			ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", Фильтр.НеРазобраноСводныеДанные_ПериодОбновления*60, Ложь);
		КонецЕсли;
	Иначе
		Если Не ОбновитьОбращенияПриАктивации Тогда
			ОбновитьОбращенияПриАктивации = Истина;
			ОтключитьОбработчикОжидания("ПериодическоеОбновлениеСписков");
			ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", 3, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ТекущаяДата", ТекущаяДата, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано,
		 "ПериодПросроченных", НачалоДня(ТекущаяДата),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПериодТекущих",
		 КонецДня(ТекущаяДата),
		 Истина);
	
	ОбновитьКолонки("Этап_НеРазобрано");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПараметрыДинамическихСписков()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "СценарийПродаж",
		СценарийПродаж, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПериодТекущих",
		КонецДня(ТекущаяДата), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПериодПросроченных",
		НачалоДня(ТекущаяДата), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок, "ПустаяДата",
		Дата('00010101'), Истина);
	
	// +Отбор по папкам-источникам обращений
	МассивСценариев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СценарийПродаж);
	ДанныеУчетныеЗаписиИПапки = CRM_Взаимодействия.УчетныеЗаписиИПапкиИсточникиОбращений(МассивСценариев);
	
	Если ТипЗнч(ДанныеУчетныеЗаписиИПапки) = Тип("Структура") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "БезПапокИсточниковЛидов",
			ДанныеУчетныеЗаписиИПапки.УчетныеЗаписи.Количество() = 0, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "УчетныеЗаписиСПапкамиИсточникамиЛидов",
			ДанныеУчетныеЗаписиИПапки.УчетныеЗаписи, Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПапкиИсточникиЛидов",
			ДанныеУчетныеЗаписиИПапки.Папки, Истина);
		
	КонецЕсли;
	// -Отбор по папкам-источникам обращений
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ИсточникиЛидов",
		Справочники.CRM_ИсточникиПолученияЛидов.ИсточникиЛидовСценария(СценарийПродаж), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано,
		"ПоказыватьОтмеченныеВручнуюОбращения", ПоказыватьОтмеченныеВручнуюОбращения, Истина);
	
	СтрокаТелефонныйЗвонок = НСтр("ru = 'Телефонный звонок'");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано,
		"СтрокаТелефонныйЗвонок", СтрокаТелефонныйЗвонок, Истина);
	
	СтрокаПропущенныйТелефонныйЗвонок = НСтр("ru = 'Пропущенный телефонный звонок'");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано,
		"СтрокаПропущенныйТелефонныйЗвонок", СтрокаПропущенныйТелефонныйЗвонок, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПериодПросроченных",
		НачалоДня(ТекущаяДата), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПериодТекущих",
		КонецДня(ТекущаяДата), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПериодПросроченных",
		НачалоДня(ТекущаяДата), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ТекущаяДата",
		ТекущаяДата, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ПустаяДата",
		Дата('00010101'),  Истина);
	
	ТекстФайл = НСтр("ru = 'Файл...'; en = 'File...'");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "ТекстФайл",
		ТекстФайл, Истина);
	
	СмещениеДаты = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Этап_НеРазобрано, "CRM_СмещениеДатыТекущегоСеанса",
		 СмещениеДаты, Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПорядокДинамическихСписков()
	
	ЭлементыНастроек = ТаблицаСписок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыНастроек Цикл
		Если ТипЗнч(Элемент) = Тип("ПорядокКомпоновкиДанных") Тогда
			
			Элемент.Элементы.Очистить();
			
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Использование = Истина;
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ПросроченоДляСортировки");
			УсловиеСортировки.ТипУпорядочивания = Фильтр.ПорядокПросроченных;
			
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Использование = Истина;
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыНастроек = Этап_НеРазобрано.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыНастроек Цикл
		Если ТипЗнч(Элемент) = Тип("ПорядокКомпоновкиДанных") Тогда
			
			Элемент.Элементы.Очистить();
			
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Использование = Истина;
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
			УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборыДинамическихСписков(ВидОтборов = "Все")
	
	ПоискВключен = ЗначениеЗаполнено(СтрокаПоискаОтбор);
	УсловиеПоиска = "%"+СтрокаПоискаОтбор+"%";
	
	ОтборПоОтветственному = ЗначенияОтбораПоОтветственному(ТекущийПользователь, Фильтр.ТекущаяРоль, Фильтр.ОтборПоРолиУстановлен);
	ОтборПоОтветственномуЗаполнен = (ОтборПоОтветственному.Количество() > 1);
	
	ИменаТаблиц = ИменаТаблиц(ТаблицаЭтапы, "Динамические");
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Таблица = ЭтотОбъект[ИмяТаблицы];
		Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(Таблица);
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Отбор.Элементы,
			НСтр("ru='Отбор по строке поиска'"),
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Заголовок",
			ВидСравненияКомпоновкиДанных.Подобно, УсловиеПоиска, , ПоискВключен);
		
		Если ИмяТаблицы = "Этап_НеРазобрано" Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ТекстОснования",
				ВидСравненияКомпоновкиДанных.Подобно, УсловиеПоиска, , ПоискВключен);
		ИначеЕсли ИмяТаблицы = "ТаблицаСписок" Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ПартнерНаименование",
				ВидСравненияКомпоновкиДанных.Подобно, УсловиеПоиска, , ПоискВключен);
		КонецЕсли;
		
		Если ВидОтборов = "СтрокаПоиска" Тогда
			// При отборе по строке поиска остальное переустанавливать не нужно.
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "Пользователь",
			ОтборПоОтветственному, ОтборПоОтветственномуЗаполнен);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "КрайнийСрокНачало",
			Дата('00010101'));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "КрайнийСрокКонец",
			Фильтр.ЗначениеПериода.ДатаОкончания);
		
		Если ИмяТаблицы = "Этап_НеРазобрано" Тогда
			
			ВидыКаналов = Новый Массив;
			Если Не Фильтр.СкрытьЗаявки Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.Заявка);
			КонецЕсли;
			Если Не Фильтр.СкрытьСообщения Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.Диалоги);
			КонецЕсли;
			Если Не Фильтр.СкрытьЭлектронныеПисьма Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.ЭлектроннаяПочта);
			КонецЕсли;
			Если Справочники.CRM_ИсточникиПолученияЛидов.ПроверитьОтборПоСценариюТелефония(СценарийПродаж) Тогда
				ВидыКаналов.Добавить(Перечисления.CRM_ВидыКаналовПоступленияОбращений.ТелефонныйЗвонок);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "ВидыКаналов",
				ВидыКаналов, Истина);
			
			СкрываемыеЗвонки = Новый Массив;
			Если Фильтр.СкрытьПропущенныеТелефонныеЗвонки Тогда
				СкрываемыеЗвонки.Добавить(Перечисления.сфпСостоянияЗвонков.Пропущенный);
			КонецЕсли;
			Если Фильтр.СкрытьОтвеченныеТелефонныеЗвонки Тогда
				СкрываемыеЗвонки.Добавить(Перечисления.сфпСостоянияЗвонков.Отвеченный);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "СкрываемыеЗвонки",
				СкрываемыеЗвонки, СкрываемыеЗвонки.Количество()>0);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Таблица, "СостояниеЛидов",
				Справочники.CRM_СостоянияЛидов.Новый, Фильтр.СкрытьПовторныеОбращения);
			
		КонецЕсли;
		
		Если ИмяТаблицы = "ТаблицаСписок" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "Объект",
				СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, , СсылкиНаОбъектыСтегами.Количество()>0);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "Партнер",
				Фильтр.ПоискКлиент, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Фильтр.ПоискКлиент));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "ТипУслуги",
				Фильтр.ПоискТипУслуги, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Фильтр.ПоискТипУслуги));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "ИсточникПервичногоИнтереса",
				Фильтр.ПоискЗначениеИсточникаПривлечения, ВидСравненияКомпоновкиДанных.Равно, ,
				ЗначениеЗаполнено(Фильтр.ПоискЗначениеИсточникаПривлечения));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "КаналПервичногоИнтереса",
				Фильтр.ПоискИсточникПривлечения, ВидСравненияКомпоновкиДанных.Равно, ,
				ЗначениеЗаполнено(Фильтр.ПоискИсточникПривлечения));
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "Автор",
				Фильтр.ТекущийАвтор, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Фильтр.ТекущийАвтор));
		
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "Подразделение",
				Фильтр.ПоискПодразделение, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Фильтр.ПоискПодразделение));
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Таблица, "Проект",
				Фильтр.ПоискПроект, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(Фильтр.ПоискПроект));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеДинамическихСписков()
	
	УО = Этап_НеРазобрано.УсловноеОформление.Элементы;
	УО.Очистить();
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Избранный");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина; // Жирный
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 211, 194));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "Просрочено"; // красный
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 211, 194));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "Просрочено"; // красный
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "Сегодня"; // желтый
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоЗолотистый);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "Сегодня"; // желтый
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191, 238, 191));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "ВОжидании"; // зеленый
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(191, 238, 191));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Светофор");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = "ВОжидании"; // зеленый
	
КонецПроцедуры	

&НаСервере
Процедура ПоместитьНастройкиДинамическихСписковВХранилище()
	
	НастройкиСписков = Новый Структура;
	
	Адреса = ПоместитьНастройкиКолонкиНеРазобраноВХранилище();
	НастройкиСписков.Вставить("Этап_НеРазобрано", Адреса);
	
	Адреса = ПоместитьНастройкиСводныхДанныхКолонкиНеРазобраноВХранилище();
	НастройкиСписков.Вставить("Этап_НеРазобрано_СводныеДанные", Адреса);
	
	НастройкиДинамическихСписков = Новый ФиксированнаяСтруктура(НастройкиСписков);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьНастройкиКолонкиНеРазобраноВХранилище()
	
	СхемаКомпоновкиДанных = Элементы.Этап_НеРазобрано.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = Элементы.Этап_НеРазобрано.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Результат = Новый Структура;
	Результат.Вставить("СхемаКомпоновкиДанных",
		ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,
		УникальныйИдентификатор));
	Результат.Вставить("НастройкиКомпоновкиДанных",
		ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных,
		УникальныйИдентификатор));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьНастройкиСводныхДанныхКолонкиНеРазобраноВХранилище()
	
	СхемаКомпоновкиДанных = Элементы.Этап_НеРазобрано.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = Элементы.Этап_НеРазобрано.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеРесурса.ПутьКДанным = "Количество";
	ПолеРесурса.Выражение   = "Сумма(Количество)";
	
	ГруппировкаКомпоновкиДанных = НастройкиКомпоновкиДанных.Структура[0];
	
	ПолеГруппировки =
		ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Светофор");
	
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Очистить();
	
	ПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.ДоступныеПоляВыбора.Элементы.Найти("Светофор").Поле;
	ВыбранноеПолеКомпоновкиДанных =
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
	ВыбранноеПолеКомпоновкиДанных.Поле = ПолеКомпоновкиДанных;
	ПолеКомпоновкиДанных = ГруппировкаКомпоновкиДанных.Выбор.ДоступныеПоляВыбора.Элементы.Найти("Количество").Поле;
	ВыбранноеПолеКомпоновкиДанных =
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
	ВыбранноеПолеКомпоновкиДанных.Поле = ПолеКомпоновкиДанных;
	
	Для каждого ЭлементОтбора Из НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Отбор по светофору" Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("СхемаКомпоновкиДанных",
		ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,
		УникальныйИдентификатор));
	Результат.Вставить("НастройкиКомпоновкиДанных",
		ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных,
		УникальныйИдентификатор));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СводныеДанные

&НаСервере
Процедура НеРазобраноСводныеДанные_Видимость()
	
	ПоказатьСводныеДанные = Фильтр.НеРазобраноСводныеДанные_Показать;
	Элементы.ГруппаНеРазобраноСводныеДанные.Видимость = ПоказатьСводныеДанные;
	Элементы.ДекорацияОтступНеРазобрано.Видимость = ПоказатьСводныеДанные;
	Элементы.НеРазобраноСводныеДанные_Показать.Видимость = Не ПоказатьСводныеДанные;
	Элементы.НеРазобраноСводныеДанные_Свернуть.Видимость = ПоказатьСводныеДанные;
	Элементы.Декорация_Этап_НеРазобрано_Сумма.Видимость = Не ПоказатьСводныеДанные;
	Элементы.ГруппаАнализОбращений.Видимость = ПоказатьСводныеДанные;
	
	Если ПоказатьСводныеДанные Тогда
		НеРазобраноСводныеДанные_ИзменениеРежимаСервер(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НеРазобраноСводныеДанные_ИзменениеРежимаСервер(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НадписьВсего.Шрифт = Новый Шрифт(Элементы.НадписьВсего.Шрифт,,,Ложь);
	Элементы.НадписьВОжидании.Шрифт = Новый Шрифт(Элементы.НадписьВОжидании.Шрифт,,,Ложь);
	Элементы.НадписьСегодня.Шрифт = Новый Шрифт(Элементы.НадписьСегодня.Шрифт,,,Ложь);
	Элементы.НадписьПросрочено.Шрифт = Новый Шрифт(Элементы.НадписьПросрочено.Шрифт,,,Ложь);

	ИмяЭлемента = "Надпись" + Форма.Фильтр.НеРазобраноСводныеДанные_ТекРежим;
	Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Элементы[ИмяЭлемента].Шрифт = Новый Шрифт(Элементы[ИмяЭлемента].Шрифт,,, Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Этап_НеРазобрано, "Светофор", 
		Форма.Фильтр.НеРазобраноСводныеДанные_ТекРежим, ВидСравненияКомпоновкиДанных.Равно, "Отбор по светофору", Форма.Фильтр.НеРазобраноСводныеДанные_ТекРежим <> "Всего");
	
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноСводныеДанные_ЗакрытьНастройку()
	
	Если Элементы.ГруппаСводныеДанные_Настройка.Скрыта() Тогда
		ТекущийЭлемент = Элементы.НеРазобраноСводныеДанные_Настройка;
		ОтключитьОбработчикОжидания("НеРазобраноСводныеДанные_ЗакрытьНастройку");
	Иначе
		ПодключитьОбработчикОжидания("НеРазобраноСводныеДанные_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Виджеты

&НаСервере
Процедура НастроитьВиджеты()
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоказатели") Тогда
		ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
		ПоказыватьВиджеты = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
		Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджеты;
		Элементы.СкрытьОтобразитьВиджеты.Пометка = ПоказыватьВиджеты;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Истина;
	Иначе
		ВидимостьВиджетов = Ложь;
		ПоказыватьВиджеты = Ложь;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Ложь;
		Элементы.ГруппаВиджеты.Видимость = Ложь;
	КонецЕсли;
	
	Если ПоказыватьВиджеты Тогда
		CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВиджетНаФорму(ВариантВиджета)
	
	CRM_РаботаСВиджетамиСервер.ДобавитьВиджет(
		ЭтотОбъект, ВариантВиджета, "ГруппаЭлементыВиджетов");
	
КонецПроцедуры // ДобавитьВиджетНаФорму()

&НаСервере
Процедура УдалитьВиджетНаФорме(ИдентификаторСтрокиДанных)
	
	CRM_РаботаСВиджетамиСервер.УдалитьВиджет(
		ЭтотОбъект, ИдентификаторСтрокиДанных);
	
КонецПроцедуры // УдалитьВиджетНаФорме()

&НаСервере
Процедура ОбновитьВиджет(ИдентификаторСтрокиДанных)
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВиджет(ЭтотОбъект, ИдентификаторСтрокиДанных);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВиджет()

&НаСервере
Процедура ОбновитьВсеВиджеты()
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВсеВиджеты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВсеВиджеты()

&НаСервере
Процедура ИнициализироватьМеханизмВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	
КонецПроцедуры // ИнициализироватьМеханизмВиджетов()

&НаСервере
Процедура Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета(ИсточникиВнешнихБиблиотек, ДополнительныеПараметры) Экспорт
	
	Если ИсточникиВнешнихБиблиотек.Количество() = 0 Или Не ПоказыватьВиджеты Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийВиджетФормы Из ЭтотОбъект.ВариантыВиджетовФормы Цикл
		
		Если ТекущийВиджетФормы.Переопределяемый Тогда
			
			ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных] = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
				ИсточникиВнешнихБиблиотек, ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных]);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета()

&НаКлиенте
Процедура Подключаемый_ОбработчикАвтообновленияВиджетов() Экспорт
	
	// Обновление реквизитов - обновление виджетов.
	ОбработчикАвтообновленияВиджетов();
	
КонецПроцедуры //Подключаемый_ОбработчикАвтообновленияВиджетов()

&НаСервере
Функция ОбработчикАвтообновленияВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ОбработатьАвтообновлениеВиджетов(ЭтотОбъект);
	
КонецФункции // ОбработчикАвтообновленияВиджетов()

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область Прочее

&НаКлиенте
Процедура ИзменитьШиринуКолонокКанбан()
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ИзменитьШиринуКолонокКанбанНаСервере();
	Иначе	
		УстановитьШиринуКолонокКанбан(ЭтотОбъект);
		ТекущийЭлемент = Элементы.ШиринаКолонокКанбан;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьШиринуКолонокКанбанНаСервере()
	
	УстановитьШиринуКолонокКанбан(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьШиринуКолонокКанбан(Форма)
	
	Элементы = Форма.Элементы;
	ШиринаКолонокКанбан = Форма.ШиринаКолонокКанбан;
	
	ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	
	ИменаТаблиц = ИменаТаблиц(Форма.ТаблицаЭтапы, "Канбан", Форма.ЕстьСкрытыеЭтапы);
	
	Если Элементы.Найти("ТаблицаЭтапыСвернуто") <> Неопределено Тогда
		ИменаТаблиц.Добавить("ТаблицаЭтапыСвернуто");
	КонецЕсли;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		Элементы[ИмяТаблицы].Ширина   = ШиринаКолонокКанбан;
		
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_Этап_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет<>Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет<>Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;

		Если Элементы.Найти("ГруппаЗаголовок_" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["ГруппаЗаголовок_" + ИмяТаблицы].Ширина = ШиринаЭлемента-2;
		КонецЕсли;
		Если Элементы.Найти("Заголовок" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["Заголовок" + ИмяТаблицы].Ширина = ШиринаЭлемента-4;
		КонецЕсли;
		Если Элементы.Найти("Партнер" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["Партнер" + ИмяТаблицы].Ширина = ШиринаЭлемента-2;
		КонецЕсли;
		Если Элементы.Найти("ОписаниеИнтереса" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["ОписаниеИнтереса" + ИмяТаблицы].Ширина = ШиринаЭлемента-2;
		КонецЕсли;
		Если Элементы.Найти("Сумма" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["Сумма" + ИмяТаблицы].Ширина = ШиринаЭлемента-1;
		КонецЕсли;
		Если Элементы.Найти("СрокНаЭтапе" + ИмяТаблицы)<>Неопределено Тогда
			Элементы["СрокНаЭтапе" + ИмяТаблицы].Ширина = ШиринаЭлемента-2;
		КонецЕсли;
		
	КонецЦикла;
	Элементы.ДекорацияЦвет_Этап_Успешно.Ширина   = ШиринаКолонокКанбан;
	Элементы.ДекорацияЦвет_Этап_Неудачно.Ширина   = ШиринаКолонокКанбан;
	Элементы.НеРазобраноЗаголовок.Ширина = ШиринаЭлемента+2;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, СценарийПродаж);
		ТекущийЭлемент = Элементы.НастроитьШиринуКолонок;
	Иначе
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ВоронкаПродаж)
	НастройкиШирины = ХранилищеОбщихНастроек.Загрузить("МоиПродажиНастройкиШириныКолонок");
	Если НастройкиШирины = Неопределено Тогда
		НастройкиШирины = Новый Структура();
	КонецЕсли;
	НастройкиШирины.Вставить("Ширина"+СтрЗаменить(Строка(ВоронкаПродаж.УникальныйИдентификатор()), "-",
		 ""), ШиринаКолонокКанбан);
	Если НастройкиШирины.Количество() < 3 Тогда
		НастройкиШирины.Вставить("ОбщаяНастройка", ШиринаКолонокКанбан);
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("МоиПродажиНастройкиШириныКолонок",, НастройкиШирины);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовок(Форма)
	
	Форма.Заголовок = НСтр("ru = 'Мои продажи'")
		+ " / " + Строка(Форма.СценарийПродаж)
		+ " / " + Форма.ТекущийПользователь 
		+ " / " + Форма.Фильтр.ПредставлениеПериода;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВалюты()
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		Если ВалютаУправленческогоУчета.Код = "643" Тогда
			// Рубль
			ВалютаПредставление = Символ("8381");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "978" Тогда
			// Евро
			ВалютаПредставление = Символ("8364");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "840" Тогда
			// Доллар
			ВалютаПредставление = Символ("36");
		Иначе
			ВалютаПредставление = ВалютаУправленческогоУчета.Наименование;
		КонецЕсли;
	Иначе
		ВалютаПредставление = "";
	КонецЕсли;
	
	Возврат ВалютаПредставление;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКнопкиПросроченные()
	
	ПросроченныеВнизу = (Фильтр.ПорядокПросроченных = НаправлениеСортировкиКомпоновкиДанных.Убыв);
	
	ВключеннаяКнопка = ?(ПросроченныеВнизу, Элементы.ПросроченныеВнизу, Элементы.ПросроченныеВверху);
	ВключеннаяКнопка.Пометка = Истина;
	ВключеннаяКнопка.ЦветФона = ЦветГолубой;
	ВключеннаяКнопка.ЦветРамки = ЦветГолубой;
	
	ВыключеннаяКнопка = ?(ПросроченныеВнизу, Элементы.ПросроченныеВверху, Элементы.ПросроченныеВнизу);;
	ВыключеннаяКнопка.Пометка = Ложь;
	ВыключеннаяКнопка.ЦветФона = ЦветСерый;
	ВыключеннаяКнопка.ЦветРамки = ЦветСерый;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиВидАРМ()
	
	ВключеннаяКнопка = ?(ВидАРМ = "Канбан", Элементы.ВидКанбан, Элементы.ВидСписок);
	ВключеннаяКнопка.Пометка = Истина;
	ВключеннаяКнопка.ЦветФона = ЦветГолубой;
	ВключеннаяКнопка.ЦветРамки = ЦветГолубой;
	
	ВыключеннаяКнопка = ?(ВидАРМ = "Канбан", Элементы.ВидСписок, Элементы.ВидКанбан);;
	ВыключеннаяКнопка.Пометка = Ложь;
	ВыключеннаяКнопка.ЦветФона = ЦветСерый;
	ВыключеннаяКнопка.ЦветРамки = ЦветСерый;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

