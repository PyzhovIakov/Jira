
#Область ОписаниеПеременных

&НаКлиенте
Перем ВремяТемп;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияСервер.СбросНастроекПоложенияОкна(ЭтотОбъект);
		
	Если Параметры.Свойство("Задача") И ЗначениеЗаполнено(Параметры.Задача) Тогда
		Задача = Параметры.Задача;
		Интерес = Задача.БизнесПроцесс.Интерес;
	Иначе	
		Интерес = Параметры.Интерес;
	КонецЕсли;
	
	Параметры.Свойство("ОткрытиеИзИнтереса", ОткрытиеИзИнтереса);
	
	Если Параметры.Свойство("МоиПродажи") Тогда
		СостояниеИнтересаУстановить		= Параметры.НовоеСостояние;
		СостояниеИнтересаПредставление	= Строка(Параметры.НовоеСостояние);
		Если ЗначениеЗаполнено(Задача) Тогда
			Этап							= Параметры.Этап;
			ВариантВыполнения				= Параметры.ВариантВыполнения;
			ЭтоПереход						= Параметры.ЭтоПереход;
		КонецЕсли;
		СписокСостояний.Добавить(СостояниеИнтересаУстановить, СостояниеИнтересаПредставление);
	ИначеЕсли Параметры.Свойство("ДанныеВыбранногоСостоянияИнтереса") Тогда	
		Если ТипЗнч(Параметры.ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура") Тогда
			СостояниеИнтересаУстановить		= Параметры.ДанныеВыбранногоСостоянияИнтереса.Состояние;
			Если Параметры.ДанныеВыбранногоСостоянияИнтереса.Свойство("Представление") Тогда
				СостояниеИнтересаПредставление	= Параметры.ДанныеВыбранногоСостоянияИнтереса.Представление;
			КонецЕсли;
			Этап							= Параметры.ДанныеВыбранногоСостоянияИнтереса.Этап;
			ВариантВыполнения				= Параметры.ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения;
			ЭтоПереход						= Параметры.ДанныеВыбранногоСостоянияИнтереса.ЭтоПереход;
		Иначе
			СостояниеИнтересаУстановить		= Параметры.ДанныеВыбранногоСостоянияИнтереса;
			СостояниеИнтересаПредставление	= Строка(Параметры.ДанныеВыбранногоСостоянияИнтереса);
		КонецЕсли;
		СписокСостояний.Добавить(СостояниеИнтересаУстановить, СостояниеИнтересаПредставление);	
	ИначеЕсли Параметры.Свойство("Задача") И Параметры.Свойство("ПредставлениеВариантаВыполнения") Тогда	
		Если НЕ Параметры.Свойство("ОткрытиеИзАРМа") Тогда
			ОткрытиеПриВыполненииЗадачи = Истина;
		КонецЕсли;
		Если Параметры.Свойство("ДосрочноеЗавершение") И Параметры.ДосрочноеЗавершение Тогда
			ДосрочноеЗавершение = Истина;
			СостояниеИнтересаУстановить = Задача.БизнесПроцесс.КартаМаршрута.СостояниеДосрочногоЗавершения;
			Если НЕ ЗначениеЗаполнено(СостояниеИнтересаУстановить) Тогда
				СостояниеИнтересаУстановить =
					CRM_БизнесПроцессыСервер.ПолучитьСостояниеОбъектаБППриНеудачномЗавершении(Параметры.Задача);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СостояниеИнтересаУстановить) Тогда
				СостояниеИнтересаУстановить =
					Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель);
			КонецЕсли;
		Иначе
			СостояниеИнтересаУстановить = CRM_БизнесПроцессыСервер.ПолучитьСледующееСостояниеОбъектаБП(Параметры.Задача,
				 Параметры.ПредставлениеВариантаВыполнения);
		КонецЕсли;
		СостояниеИнтересаПредставление	= Строка(СостояниеИнтересаУстановить);
		//Этап							= Параметры.ДанныеВыбранногоСостоянияИнтереса.Этап;
		ВариантВыполнения				= Параметры.ПредставлениеВариантаВыполнения;
		//ЭтоПереход						= Параметры.ДанныеВыбранногоСостоянияИнтереса.ЭтоПереход;
		СписокСостояний.Добавить(СостояниеИнтересаУстановить, СостояниеИнтересаПредставление);
		
		Элементы.ГруппаРеквизитов.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("ЭтоПоддержка") Тогда
		
		СостояниеИнтересаУстановить = Параметры.НовоеСостояние;
		СостояниеИнтересаПредставление = Строка(Параметры.НовоеСостояние);
		СписокСостояний = Параметры.СписокСостояний;
		
	КонецЕсли;
	
	Сценарий = СостояниеИнтересаУстановить.Родитель;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		НастройкиЭтапа = CRM_БизнесПроцессыСервер.ПолучитьНастройкиЭтапа(Параметры.Задача);
		
		Элементы.ГруппаОписание.Видимость = НЕ ДосрочноеЗавершение
			 И НастройкиЭтапа.ЗапрашиватьРезультатВыполненияПриЗавершении;
		УказыватьДостигнутыйРезультат = НЕ ДосрочноеЗавершение И НастройкиЭтапа.ОбязательноФиксироватьРезультат;
		Элементы.РезультатТекущегоВзаимодействия.АвтоОтметкаНезаполненного = УказыватьДостигнутыйРезультат;
		
	КонецЕсли;
	
	Если СписокСостояний.Количество() > 1 Тогда
		Заголовок = НСтр("ru='Изменение состояния интереса';en='Change state'");
	Иначе
		Элементы.СостояниеИнтересаПредставление.Видимость = Ложь;
		Заголовок = НСтр("ru='Новое состояние: ';en='New state: '") 
			+ ?(ЗначениеЗаполнено(СписокСостояний[0].Представление), СписокСостояний[0].Представление,
			 Строка(СписокСостояний[0].Значение));
	КонецЕсли;
	
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	
	ОжидаемаяВыручкаУстановить = Интерес.ОжидаемаяВыручка;
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Если Параметры.Свойство("ИнтересОбъект") Тогда
		ИнтересОбъектЗначение = РеквизитФормыВЗначение("ИнтересОбъект");
		ЗаполнитьЗначенияСвойств(ИнтересОбъектЗначение, Параметры.ИнтересОбъект, , "CRM_Теги,
			| ДополнительныеРеквизиты, Контакты, ЧекЛист, " + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "Товары",
			 "Товары,
			| СкидкиНаценки"));
		ЗначениеВРеквизитФормы(ИнтересОбъектЗначение, "ИнтересОбъект");
	Иначе
		ЗначениеВРеквизитФормы(Интерес.ПолучитьОбъект(), "ИнтересОбъект");
	КонецЕсли;
	
	ОжидаемаяВыручкаУстановить = ИнтересОбъект.ОжидаемаяВыручка; 
	ПричинаОтказаУстановить = ИнтересОбъект.ПричинаОтказа;
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если Параметры.Свойство("СтруктураПервичногоИнтереса") Тогда
		КаналПервичногоИнтереса = Параметры.СтруктураПервичногоИнтереса.КаналПервичногоИнтереса;
		ИсточникПервичногоИнтереса = Параметры.СтруктураПервичногоИнтереса.ИсточникПервичногоИнтереса;
	КонецЕсли;
	
	ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДопРеквизитыИнтереса");
		ДополнительныеПараметры.Вставить("Объект", ИнтересОбъект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент <> Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОграничитьОтветственного = ЗначениеЗаполнено(СостояниеИнтересаУстановить)
		 И НЕ СостояниеИнтересаУстановить.РазрешитьРолевуюАдресацию
								И ТипЗнч(ИнтересОбъект.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей");
	
	ОбработкаВыбораСостоянияИнтересаСервер();
	
	НовоеВзаимодействие.Дата = ТекущаяДатаСеанса();
	НовоеВзаимодействие.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(НовоеВзаимодействие.Дата, 30);
	НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 1800;
	НовоеВзаимодействие.Автор = ТекущийПользователь;
	НовоеВзаимодействие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано;
	CRM_ОбщегоНазначенияСервер.ОбработкаЗаполнения(НовоеВзаимодействие, Интерес);
	НовоеВзаимодействие.ДокументОснование	= Интерес;
	НовоеВзаимодействие.КонтактноеЛицо		= Интерес.КонтактноеЛицо;
	НовоеВзаимодействие.ОжидаемаяВыручка	= Интерес.ОжидаемаяВыручка;
	НовоеВзаимодействие.Ответственный		= Интерес.Ответственный;
	НовоеВзаимодействие.Партнер				= Интерес.Партнер;
	НовоеВзаимодействие.Подразделение		= Интерес.Подразделение;
	НовоеВзаимодействие.ПотенциальныйКлиент	= Интерес.ПотенциальныйКлиент;
	НовоеВзаимодействие.Организация			= Интерес.Организация;
	Элементы.КонтактноеЛицо.Видимость = ЗначениеЗаполнено(Интерес.Партнер);
	
	ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
	НоваяЗадача.ДатаНачала = ТекущаяДатаСеанса();
	НоваяЗадача.СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(НоваяЗадача.ДатаНачала, 30) 
		+ 24 * 60 * 60;
	НоваяЗадача.Автор = ТекущийПользователь;
	НоваяЗадача.Исполнитель = ТекущийПользователь;
	НоваяЗадача.CRM_Партнер				= Интерес.Партнер;
	НоваяЗадача.CRM_КонтактноеЛицо		= Интерес.КонтактноеЛицо;
	НоваяЗадача.CRM_Личная = Истина;
	НоваяЗадача.Предмет	= Интерес;
	
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.ПлановаяДата);
	CRM_ОбщегоНазначенияПовтИсп.ЗаполнитьСписокВыбораВариантовСроков(Элементы.ДатаОкончание);
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(СостояниеИнтересаУстановить);
	ДополнитьПроверяемыеРеквизитыИнтереса();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				ИнтересОбъект.Партнер = Параметр;
				ИнтересОбъект.КонтактноеЛицо	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Партнер,
					 "CRM_ОсновноеКонтактноеЛицо");
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ИнтересОбъект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ИнтересОбъект.КонтактноеЛицо	= Параметр;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				НовоеВзаимодействие.КонтактноеЛицо = ИнтересОбъект.КонтактноеЛицо;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				НовоеВзаимодействие.Партнер = ИнтересОбъект.Партнер;
			КонецЕсли;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;			
			Если Элементы.Найти("РеквизитИнтереса_Партнер") <> Неопределено Тогда
				Элементы["РеквизитИнтереса_Партнер"].Видимость = Истина;
			КонецЕсли;
			Если Элементы.Найти("РеквизитИнтереса_КонтактноеЛицо") <> Неопределено Тогда
				Элементы["РеквизитИнтереса_КонтактноеЛицо"].Видимость = Истина;
			КонецЕсли;
			Элементы.КонтактноеЛицо.Видимость = Истина;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ЗаполнитьСписокВыбораВидВзаимодействий();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);

	Если ЗначениеЗаполнено(НовоеВзаимодействие.Тема) Тогда
		Если НЕ ЗначениеЗаполнено(НовоеВзаимодействие.ВидВзаимодействия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен вид взаимодействия!';
				|en='The form of interaction is not filled!'"), , "ВидВзаимодействия", ,
				 Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НовоеВзаимодействие.ПлановаяДата) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена плановая дата взаимодействия!';
				|en='Scheduled date of interaction is not filled!'"), , "ПлановаяДата", ,
				 Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.СрокИсполнения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан срок исполнения планируемой задачи!';
				|en='The deadline for the planned task is not specified!'"), , "ДатаОкончание", ,
				 Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.Исполнитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан исполнитель планируемой задачи!';
				|en='The executor of the planned task is not specified!'"), , "Исполнитель", ,
				 Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена тема планируемой задачи!';
				|en='The topic of the planned task is not filled!'"), , "Наименование", ,
				 Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПричинаОтказаУстановить) И ПричинаОтказаУстановить.ТребуетсяКомментарий Тогда
		ПроверяемыеРеквизиты.Добавить("ПричинаОтказаКомментарий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	ДокументЗаписан = Ложь;
	
	Если Не ИнтересОбъект.Завершен Тогда
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыИнтереса Цикл
			Если ТипЗнч(ПроверяемыйРеквизит) = Тип("Строка") Тогда
				Если НЕ ЗначениеПроверяемогоРеквизитаЗаполнено(ПроверяемыйРеквизит) И НЕ ПропуститьПроверкуВЗависимостиОтФО(ПроверяемыйРеквизит) Тогда
					ПереходНеВозможен = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнен реквизит ""%1"". Запись документа невозможна!'"), ПроверяемыйРеквизит), ИнтересОбъект.Ссылка, "Объект." + ПроверяемыйРеквизит, , Отказ);
				КонецЕсли;
			Иначе
				СтрДопРеквизита = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
					 ПроверяемыйРеквизит));
				Если СтрДопРеквизита.Количество() = 0
					 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект[СтрДопРеквизита[0].ИмяРеквизитаЗначение]) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнен дополнительный реквизит ""%1"". Запись документа невозможна!'"), Строка(ПроверяемыйРеквизит)),
					ИнтересОбъект.Ссылка, , , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Ответственный,
			 "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			ИнтересОбъект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru='У текущего пользователя не заполнено подразделение!';
				|en='The current user does not have a department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;						
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			ИнтересОбъект.Офис	= ОфисПодразделения;
		Иначе				
			ТекстСообщения = Нстр("ru='У подразделения пользователя не заполнен офис!';
				|en='Office is not filled in user department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Подразделение);
			Отказ = Истина;				
			Возврат;
		КонецЕсли;									
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса,
			 "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект,
				 ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				 И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса,
					 "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, ,
				 ВариантОткрытияОкна.ОтдельноеОкно, ,
				 ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИнтересаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОП = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияИнтереса", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оп, СписокСостояний, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаУстановитьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Не Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСписка = ПолучитьКодыЗавершения();
	Если ТаблицаСписка.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ТаблицаСписка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаУстановитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
		СтандартнаяОбработка = Ложь;
		ПараметрыФормыВыбора = Новый Структура("Сценарий,ТипОбращения", Сценарий, ИнтересОбъект.ТипОбращения);
		
		Если ЗначениеЗаполнено(СостояниеИнтересаУстановить) И ЯвляетсяНеудачнымЗавершением(СостояниеИнтересаУстановить) Тогда
			ИсключаемыеПричины = Новый Массив;
			ИсключаемыеПричины.Добавить(ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказаПоИнтересам.Выполнено"));
			ПараметрыФормыВыбора.Вставить("ИсключаемыеПричины", ИсключаемыеПричины);
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПричинаОтказаУстановитьЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ПричиныОтказаПоИнтересам.ФормаВыбора", ПараметрыФормыВыбора,
			 ЭтотОбъект, , , ,
			 Обработчик);
		
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаУстановитьЗавершениеВыбора(Результат, ПараметрыВыполнения) Экспорт
	Если Результат <> Неопределено Тогда
		ПричинаОтказаУстановить = Результат;
	КонецЕсли;
	
	Если ПричинаОтказаТребуетсяКомментарий(ПричинаОтказаУстановить) Тогда
		Элементы.ПричинаОтказаКомментарий.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ПричинаОтказаКомментарий.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПричинаОтказаТребуетсяКомментарий(ПричинаОтказа)
	
	Если НЕ ЗначениеЗаполнено(ПричинаОтказа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПричинаОтказа) <> Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПричинаОтказа.ТребуетсяКомментарий;
	
КонецФункции

&НаКлиенте
Процедура НеПланировать(Команда)
	УстановитьЦветаТиповАктивности("НеПланировать");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗадачи(Команда)
	УстановитьЦветаТиповАктивности("ВыборЗадачи");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВзаимодействия(Команда)
	УстановитьЦветаТиповАктивности("ВыборВзаимодействия");	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидаемаяДатаПродажиПриИзменении(Элемент)
	
	ОжидаемаяДатаПродажиПриИзмененииНаСервере();
	
КонецПроцедуры

#Область НовоеВзаимодействие

&НаСервере
Процедура ВидВзаимодействияПриИзмененииНаСервере()
	НовоеВзаимодействие.Тема = НовоеВзаимодействие.ВидВзаимодействия.Тема;
	НовоеВзаимодействие.Содержание = НовоеВзаимодействие.ВидВзаимодействия.Описание;
	НовоеВзаимодействие.Баллы = НовоеВзаимодействие.ВидВзаимодействия.Баллы;
	Если ЗначениеЗаполнено(НовоеВзаимодействие.ВидВзаимодействия.ПлановыйСрокДней) Тогда
		НовоеВзаимодействие.ПлановаяДата = ТекущаяДатаСеанса() 
			+ НовоеВзаимодействие.ВидВзаимодействия.ПлановыйСрокДней * 60 * 60 * 24;
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 3600;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидВзаимодействияПриИзменении(Элемент)
	ВидВзаимодействияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЭтоРезультатРаботыСКалендарем") Тогда
			СтандартнаяОбработка = Ложь;
			
			НовоеВзаимодействие.ПлановаяДата = ВыбранноеЗначение.Начало;
			НовоеВзаимодействие.ПлановаяДатаЗавершение = ВыбранноеЗначение.Конец;
			
			ПлановаяДатаПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		ДлительностьИнтервала = НовоеВзаимодействие.ПлановаяДатаЗавершение - НовоеВзаимодействие.ПлановаяДата;
		
		СтандартнаяОбработка = Ложь;
		
		// Осуществляется перенос обеих дат на указанный интервал
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезДень")
			Или ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезТриДня")
			Или ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезНеделю")
			Или ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели")
			Или ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезМесяц")
			Или ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца") Тогда
		
			НовоеВзаимодействие.ПлановаяДата = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(НовоеВзаимодействие.ПлановаяДата, ВыбранноеЗначение),
				ВыбранноеЗначение);
			
			НовоеВзаимодействие.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(НовоеВзаимодействие.ПлановаяДатаЗавершение,
					 ВыбранноеЗначение),
				ВыбранноеЗначение,
				ДлительностьИнтервала);
			
			ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;
		ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения(
				"ПлановаяДатаОбработкаВыбораЗавершение", ЭтотОбъект, ДлительностьИнтервала);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПлановаяДатаНовая = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ОбщегоНазначенияКлиент.ДатаСеанса(), 30);
			ПлановаяДатаЗавершениеНовая = ПлановаяДатаНовая + 1800;
			
			НовоеВзаимодействие.ПлановаяДата = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(ПлановаяДатаНовая,
				 ВыбранноеЗначение);
			НовоеВзаимодействие.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(ПлановаяДатаЗавершениеНовая,
				 ВыбранноеЗначение,
				 ДлительностьИнтервала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НовоеВзаимодействие.ПлановаяДата = Результат;
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + ДополнительныеПараметры;
		
		ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;
	КонецЕсли;
	
КонецПроцедуры // ПлановаяДатаОбработкаВыбораЗавершение()

&НаКлиенте
Процедура ПлановаяДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура();
	Если ЗначениеЗаполнено(НовоеВзаимодействие.ПлановаяДата) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", НовоеВзаимодействие.ПлановаяДата);
	КонецЕсли;
	ВремяТемп = НовоеВзаимодействие.ПлановаяДата - НачалоДня(НовоеВзаимодействие.ПлановаяДата);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(НовоеВзаимодействие, Элемент, ДанныеВыбора,
		 СтандартнаяОбработка, СтруктураПараметров,
		 РежимОткрытияОкна);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаПриИзменении(Элемент)
	Если НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата)
		 И ЗначениеЗаполнено(ВремяТемп) Тогда
		НовоеВзаимодействие.ПлановаяДата = НовоеВзаимодействие.ПлановаяДата + ВремяТемп;
		ВремяТемп = Неопределено;
	КонецЕсли;
	Если НачалоДня(ПлановаяДатаНачала) = НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение) Тогда
		ВремяЗавершения = НовоеВзаимодействие.ПлановаяДатаЗавершение - НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение);
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НачалоДня(НовоеВзаимодействие.ПлановаяДата) + ВремяЗавершения;
	КонецЕсли;		
	Если НовоеВзаимодействие.ПлановаяДата > НовоеВзаимодействие.ПлановаяДатаЗавершение Тогда
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НовоеВзаимодействие.ПлановаяДата + 3600;
	КонецЕсли;
	ПлановаяДатаНачала = НовоеВзаимодействие.ПлановаяДата;
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПлановаяДатаВремяНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НовоеВзаимодействие.ПлановаяДата,
		Элемент, НовоеВзаимодействие.ПлановаяДата, , ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаВремяНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НовоеВзаимодействие.ПлановаяДата = ВыбранноеВремя.Значение;
		ПлановаяДатаПриИзменении(Элементы.ПлановаяДата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаЗавершениеВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПлановаяДатаЗавершениеВремяНачалоВыбораЗавершение",
		 ЭтотОбъект,
		 Элемент);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НовоеВзаимодействие.ПлановаяДатаЗавершение,
		Элемент, НовоеВзаимодействие.ПлановаяДата, Истина, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаЗавершениеВремяНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НовоеВзаимодействие.ПлановаяДатаЗавершение = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НовоеВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	Элементы.ПлановаяДатаВремя.Видимость = НЕ НовоеВзаимодействие.НаВесьДень;
	Элементы.ПлановаяДатаЗавершениеВремя.Видимость = НЕ НовоеВзаимодействие.НаВесьДень;
	
	Если НовоеВзаимодействие.НаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата) 
			+ (ПараметрыДня.ВремяНачала - Дата('00010101'));
		НовоеВзаимодействие.ПлановаяДатаЗавершение = НачалоДня(НовоеВзаимодействие.ПлановаяДатаЗавершение) 
			+ (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НоваяЗадача

// не используется
&НаКлиенте
Процедура ВариантВыбораПериодаПриИзменении(Элемент)
	ПолучитьСрокОповещенияПоВарианту(ВариантСрока);
КонецПроцедуры

&НаСервере
Процедура ПолучитьСрокОповещенияПоВарианту(ВариантСрока)

	ТекущаяДатадляСрока = ТекущаяДатаСеанса();
	
	Если ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 900;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 3600;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 14400;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 28800;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 86400;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 259200;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 604800;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда	
		
		НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока + 1209600;
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда	
		
		НоваяЗадача.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока, 1);
		
	ИначеЕсли ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда	
		
		НоваяЗадача.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока, 3);
		
	Иначе // Если Объект.ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Вручную Тогда	
		
		Если НоваяЗадача.СрокИсполнения = Дата(1, 1, 1) Тогда
		
			НоваяЗадача.СрокИсполнения	= ТекущаяДатадляСрока;	
		
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьСрокОповещенияПоВарианту()

&НаКлиенте
Процедура ДатаОкончаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.CRM_ВариантыУстановкиДаты") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.Вручную") Тогда
			ОписаниеОповещения	= Новый ОписаниеОповещения("ДатаОкончаниеОбработкаВыбораЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаРучногоПереносаВремени", , ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			НоваяЗадача.СрокИсполнения = CRM_ОбщегоНазначенияСервер.ДатаПоВариантуИнтервала(
				CRM_ОбщегоНазначенияСервер.БазоваяДатаПоВариантуИнтервала(НоваяЗадача.СрокИсполнения, ВыбранноеЗначение),
				ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончаниеОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НоваяЗадача.СрокИсполнения = Результат;
	КонецЕсли;
	
КонецПроцедуры // ДатаОкончаниеОбработкаВыбораЗавершение()

&НаКлиенте
Процедура ДатаОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВремяТемп = НоваяЗадача.СрокИсполнения - НачалоДня(НоваяЗадача.СрокИсполнения);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончаниеПриИзменении(Элемент)
	Если НоваяЗадача.СрокИсполнения = НачалоДня(НоваяЗадача.СрокИсполнения) И ЗначениеЗаполнено(ВремяТемп) Тогда
		НоваяЗадача.СрокИсполнения = НоваяЗадача.СрокИсполнения + ВремяТемп;
		ВремяТемп = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяОкончаниеНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, НоваяЗадача.СрокИсполнения,
		Элемент, НоваяЗадача.СрокИсполнения, , ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбораЗавершение(ВыбранноеВремя, Элемент) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		НоваяЗадача.СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обработать(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписью(Отказ);
	Если НЕ Отказ Тогда
		Результат = ОбработатьИнтересНаСервере();
		Если Результат <> Неопределено И Результат.Успех Тогда
			Закрыть(Результат);
			КолонкиАРМ = Новый Массив;
			КолонкиАРМ.Добавить(Результат.Состояние);
			КолонкиАРМ.Добавить(Результат.НовоеСостояние);
			Оповестить("ОбновитьАРМ", КолонкиАРМ, ЭтотОбъект);
		ИначеЕсли Результат <> Неопределено И НЕ Результат.Успех Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", ИнтересОбъект.ПотенциальныйКлиент);
	ПараметрыФормы.Вставить("ТекущийИнтерес", ИнтересОбъект.Ссылка);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВидВзаимодействий()
	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(СостояниеИнтересаУстановить);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление",
		 Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса",
		 Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела",
		 Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.ВидВзаимодействия.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
КонецПроцедуры

&НаСервере
Функция ОбработатьИнтересНаСервере()
	
	НачатьТранзакцию();
	ТекстСообщения = "";
	Попытка
		
		Результат = Новый Структура("Успех, Сообщение, Взаимодействие, Состояние, НовоеСостояние");
		// обработка интереса
		
		Результат.Вставить("Состояние", ИнтересОбъект.Ссылка.СостояниеИнтереса);
		Результат.Вставить("НовоеСостояние", СостояниеИнтересаУстановить);
		
		Если ИнтересОбъект.Ссылка.СостояниеИнтереса <> СостояниеИнтересаУстановить  Тогда
			РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Интерес,
				СостояниеИнтересаУстановить);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовоеВзаимодействие.Тема) Тогда
			РеквизитФормыВЗначение("НовоеВзаимодействие").Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяЗадача.Наименование) Тогда
			НоваяЗадача.Дата = ТекущаяДатаСеанса();
			РеквизитФормыВЗначение("НоваяЗадача").Записать();
		КонецЕсли;
		
		Если ОткрытиеПриВыполненииЗадачи ИЛИ ДосрочноеЗавершение Тогда
			ИзмененныеРеквизитыОбъекта = Новый Структура;
			ИзмененныеРеквизитыОбъекта.Вставить("ПричинаОтказа", ПричинаОтказаУстановить);
			Результат.Вставить("ИзмененныеРеквизитыОбъекта", ИзмененныеРеквизитыОбъекта);
			Результат.Вставить("РезультатВыполнения", РезультатТекущегоВзаимодействия);
			Результат.Вставить("Отказ", Ложь);
			Результат.Вставить("ОтложитьНаДату", Дата(1, 1, 1));
			Если ДосрочноеЗавершение Тогда
				Результат.Вставить("ЗавершенДосрочно", Истина);
				Результат.Вставить("ВариантЗавершения",
					 ПредопределенноеЗначение("Справочник.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно"));
				Результат.Вставить("ПричинаДосрочногоЗавершения", ПричинаОтказаУстановить);
				Результат.Вставить("ПричинаДосрочногоЗавершенияКомментарий", ПричинаОтказаКомментарий);
			ИначеЕсли СостояниеИнтересаУстановить.ВидСостояния = ПредопределенноеЗначение("Перечисление.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение") Тогда
				Результат.Вставить("ПричинаДосрочногоЗавершения", ПричинаОтказаУстановить);
				Результат.Вставить("ПричинаДосрочногоЗавершенияКомментарий", ПричинаОтказаКомментарий);
			КонецЕсли;
			Если НЕ ОткрытиеПриВыполненииЗадачи И ЗначениеЗаполнено(Задача) Тогда
				Результат.Вставить("Задача", Задача);
				Результат.Вставить("ЭтапДосрочногоЗавершения"	,
					 ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
				CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
				// Выполним задачу
				CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача);
			КонецЕсли;
		Иначе
			ИнтересОбъект.ПричинаОтказа = ПричинаОтказаУстановить;
			ИнтересОбъект.ПричинаОтказаКомментарий = ПричинаОтказаКомментарий;
			ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
			ИнтересОбъект.Завершен = СостояниеИнтересаУстановить.Завершено;
			ИнтересОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
			
			Если ОткрытиеИзИнтереса Тогда
				Результат.Вставить("ИнтересОбъект", ИнтересОбъект);
				Результат.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
				Результат.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			Иначе
				
				ОбъектИнтерес = РеквизитФормыВЗначение("ИнтересОбъект", Тип("ДокументОбъект.CRM_Интерес")); 
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
					Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] И ЭтотОбъект["Свойства_ИспользоватьДопРеквизиты"] Тогда
						CRM_УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(ЭтотОбъект, ОбъектИнтерес);
					КонецЕсли;
				КонецЕсли;
				
				ОбъектИнтерес.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОткрытиеИзИнтереса И Не ОткрытиеПриВыполненииЗадачи Тогда
			
			ЗаписатьПервичныйИнтерес();
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка КАК Задача
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
			|	И НЕ ЗадачаИсполнителя.Выполнена";
			
			Запрос.УстановитьПараметр("Интерес", Интерес);
			
			ВыбранныеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
			
			СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(Задача) И ВыбранныеЗадачи.Найти(Задача) <> Неопределено Тогда
				
				Если ЭтоПереход Тогда
					
					Если (СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
						 И Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
						ИЛИ Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						
						ПараметрыДосрочногоЗавершения = Новый Структура();
						ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно",                       Истина);
						ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения",
							            Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
						ПараметрыДосрочногоЗавершения.Вставить("Задача",                                 Задача);
						ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершенияКомментарий", РезультатТекущегоВзаимодействия);
						
						Если Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
							ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения",           Задача.CRM_ТочкаМаршрута);
							ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения",
								                  Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
						Иначе
							ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения",           Этап);
							ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения",                  Этап.ВариантЗавершения);
						КонецЕсли;
						
						CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
					Иначе
						CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(Задача.БизнесПроцесс, Этап);
					КонецЕсли;
				Иначе
					ПараметрыВыполнения = Новый Структура;
					ПараметрыВыполнения.Вставить("ВариантВыполнения"		, ВариантВыполнения);
					ПараметрыВыполнения.Вставить("ВариантВыполненияСтрокой"	,
						 CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Задача.CRM_ТочкаМаршрута,
																				ВариантВыполнения,
																				Задача.БизнесПроцесс.НомерВерсииКартыМаршрута));
					
					РезультатЗадачи = Новый Структура("РезультатВыполнения", РезультатТекущегоВзаимодействия);
					Если CRM_БизнесПроцессыСервер.ЗафиксироватьРезультатВыполненияЗадачи(Задача, РезультатЗадачи,
						 ПараметрыВыполнения) Тогда
						CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, , Неопределено);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ Задача.БизнесПроцесс.Завершен Тогда
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Интерес", Интерес);
					Запрос.УстановитьПараметр("CRM_СостояниеИнтереса", СостояниеИнтересаУстановить);
					Запрос.Текст = "ВЫБРАТЬ
					|	ЗадачаИсполнителя.Ссылка КАК Ссылка
					|ИЗ
					|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|ГДЕ
					|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
					|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
					|	И НЕ ЗадачаИсполнителя.Выполнена";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						СсылкаНаЗадачу = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсключаемыеВидыВзаимодействия = Новый Массив;
		Если ЗначениеЗаполнено(НовоеВзаимодействие.ВидВзаимодействия) Тогда
			ИсключаемыеВидыВзаимодействия.Добавить(НовоеВзаимодействие.ВидВзаимодействия);
		КонецЕсли;
		CRM_ИнтересыСервер.СоздатьАвтоВзаимодействияПоИнтересу(Интерес, СостояниеИнтересаУстановить,
			ТекущийПользователь, ИсключаемыеВидыВзаимодействия);
		
		ТекстСообщения = "";
		ПроверятьПланированиеАктивности = Истина;
		Если Пользователи.ЭтоПолноправныйПользователь() И Не Элементы.ГруппаЗакладки.Видимость Тогда
			ПроверятьПланированиеАктивности = Ложь;
		КонецЕсли;
		Если НЕ ОткрытиеИзИнтереса
			И ПроверятьПланированиеАктивности
			И Не РегистрыСведений.CRM_ЗапланированныеАктивности.ПроверитьОбязательноеПланированиеАктивности(Интерес,
			СостояниеИнтересаУстановить, ТекстСообщения) Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если ПустаяСтрока(ТекстСообщения) Тогда
			
			Результат.Взаимодействие = Неопределено;
			Результат.Успех = Ложь;
			Результат.Сообщение = НСтр("ru = 'Не удалось записать Интерес (подробнее см. в Журнале регистрации).'");
			
			ЗаписьЖурналаРегистрации("Запись Интереса", УровеньЖурналаРегистрации.Ошибка, , ,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат Результат;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
	Результат.Взаимодействие = Интерес;
	Результат.Успех = Истина;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЯвляетсяНеудачнымЗавершением(СостояниеИнтереса)
	Возврат СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение;
КонецФункции

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Иначе 
		ПредыдущийИсточник	= Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Если НЕ УказыватьДостигнутыйРезультат Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"РезультатТекущегоВзаимодействия");
	КонецЕсли;
	Если НЕ (СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение)
		И НЕ (СостояниеИнтересаУстановить.Родитель.ЭтоПоддержка И СостояниеИнтересаУстановить.Завершено) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ПричинаОтказаУстановить");
	КонецЕсли;
	
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаСервере
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Иначе 
		ПредыдущийИсточник	= Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
			 И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		 И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, , ИнтересОбъект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, ,
			 ИнтересОбъект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, ИнтересПервичный);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= ИнтересПервичный.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= ИнтересПервичный.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) 
			И ТипЗнч(ИнтересПервичный.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(ИнтересПервичный.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность =
					ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(ИнтересОбъект.Дата);
				ДатаАктуальности = ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	Если РезультатЗакрытия <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	КонецЕсли;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы,
		 ДополнительныеПараметры.Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ИнтересОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ИнтересОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ИнтересОбъект.Ссылка);
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ИнтересОбъект.Ссылка;
					Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ИнтересОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ИнтересОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ИнтересОбъект.Дата;
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запись.Партнер					= ИнтересОбъект.Партнер;
				Иначе
					Запись.Партнер					= ИнтересОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ИнтересОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если НЕ ИнтересОбъект.Ссылка.Пустая() Тогда
		 	ИнтересПервичный = Неопределено;
			Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата,
					 ИнтересОбъект.Ссылка,
					 ИнтересОбъект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата,
					 ИнтересОбъект.Ссылка,
					 ИнтересОбъект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИнтересПервичный) Тогда
				// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = ИнтересПервичный.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = ИнтересПервичный.ИсточникПервичногоИнтереса;
				//КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ИнтересОбъект.Завершен Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			//Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
			//	Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;
			//	Элементы.ИнтересОбъектКонтактноеЛицо.АвтоОтметкаНезаполненного = Истина;
			//	Элементы.ИнтересОбъектКонтактноеЛицо.ОтметкаНезаполненного = Истина;
			//КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
			Элементы.ИнтересОбъектПотенциальныйКлиент.Видимость = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.АвтоОтметкаНезаполненного = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.ОтметкаНезаполненного = Истина;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Элементы.ГруппаПотенциальныйКлиент.ТолькоПросмотр = Ложь;
			Элементы.СоздатьНовогоКлиента.Видимость = Ложь;
		Иначе
			Элементы.ГруппаПотенциальныйКлиент.Видимость = ИнтересОбъект.ЭтоПоддержка;
		КонецЕсли;
		Если ПроверяемыеРеквизитыИнтереса.Найти("Партнер") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Иначе
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Если Элементы.Найти("РеквизитИнтереса_Партнер") <> Неопределено Тогда
						Элементы["РеквизитИнтереса_Партнер"].Видимость = Истина;
						Элементы["РеквизитИнтереса_Партнер"].АвтоОтметкаНезаполненного = Истина;
						Элементы["РеквизитИнтереса_Партнер"].ОтметкаНезаполненного = Истина;
					КонецЕсли;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
					Если Элементы.Найти("РеквизитИнтереса_КонтактноеЛицо") <> Неопределено Тогда
						Элементы["РеквизитИнтереса_КонтактноеЛицо"].Видимость = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПолучитьПредыдущийПервичныйИнтересПоПартнеру(Дата(1, 1, 1));			
		Актуальность = Ложь;
		Если ПервичныйИнтерес.Количество() > 0 Тогда
			ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
		Иначе
			ПредыдущийИсточник = Неопределено;
		КонецЕсли;
		Если ПредыдущийИсточник <> Неопределено Тогда
			
			Актуальность = ПредыдущийИсточник.Актуальность;
			
		КонецЕсли;
		Если НЕ Актуальность Тогда
			Если НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Элементы.КаналПервичногоИнтереса.Видимость = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				 И НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса)
				 И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))) Тогда
				Элементы.ИсточникПервичногоИнтереса.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбораСостоянияИнтереса(Результат, Дополнительно) Экспорт
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			СостояниеИнтересаПредставление	= Результат.Представление;
			СостояниеИнтересаУстановить		= Результат.Значение.Состояние;
			Этап							= Результат.Значение.Этап;
			ВариантВыполнения				= Результат.Значение.ВариантВыполнения;
			ЭтоПереход						= Результат.Значение.ЭтоПереход;
		Иначе
			СостояниеИнтересаПредставление	= Строка(Результат.Значение);
			СостояниеИнтересаУстановить		= Результат.Значение;
		КонецЕсли;
		
		ВидНовогоВзаимодействия = Неопределено;
		ОбработкаВыбораСостоянияИнтересаСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСостоянияИнтересаСервер()
	ЗаполнитьСписокВыбораВидВзаимодействий();
	
	ИзменитьСоставРеквизитов();
	
	Элементы.ГруппаПричинаОтказа.Видимость = (СостояниеИнтересаУстановить.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение)
		Или (СостояниеИнтересаУстановить.Родитель.ЭтоПоддержка И СостояниеИнтересаУстановить.Завершено);
	Если НЕ ЗначениеЗаполнено(Задача) Тогда
		Если НЕ УказыватьДостигнутыйРезультат Тогда
			Если СостояниеИнтересаУстановить.УказыватьДостигнутыйРезультат Тогда
				Если ЗначениеЗаполнено(СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности) Тогда
					Если СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
						ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
					ИначеЕсли СостояниеИнтересаУстановить.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
						ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
					Иначе
						ТипАктивности = Неопределено;
					КонецЕсли;
					УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Интерес,
						 ТипАктивности,
						 СостояниеИнтересаУстановить.ОтборЗавершаемыхАктивностей);
					Элементы.ГруппаОписание.Видимость = УказыватьДостигнутыйРезультат;
				КонецЕсли;
			Иначе	
				Если НЕ ЗначениеЗаполнено(Задача) Тогда
					РезультатТекущегоВзаимодействия = "";
					Элементы.ГруппаОписание.Видимость = Ложь;
					УказыватьДостигнутыйРезультат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТипПланируемойАктивности = СостояниеИнтересаУстановить.ОбязательноеПланированиеАктивности;
	Если НЕ СостояниеИнтересаУстановить.ИнтерактивноеПланированиеАктивностей Тогда
		АктивныйЭлементТипаАктивности = "НеПланировать";
	ИначеЕсли ТипПланируемойАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Задача Тогда
		АктивныйЭлементТипаАктивности = "ВыборЗадачи";
	Иначе
		АктивныйЭлементТипаАктивности = "ВыборВзаимодействия";
	КонецЕсли;
	УстановитьЦветаТиповАктивности(АктивныйЭлементТипаАктивности);	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, ИнтересОбъект);
	КонецЕсли;
	
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(СостояниеИнтересаУстановить);
	ДополнитьПроверяемыеРеквизитыИнтереса();
	
	Для каждого Элемент Из Элементы.ГруппаРеквизитыИнтереса.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
		Для каждого ДопРеквизит Из ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
			ДопЭлемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ДопРеквизит);
			Если ДопЭлемент <> Неопределено Тогда
				ДопЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого НастройкаЭлемента Из ПроверяемыеРеквизитыИнтереса Цикл
		Если ТипЗнч(НастройкаЭлемента) = Тип("Строка") Тогда
			Если ЗначениеЗаполнено(ИнтересОбъект[НастройкаЭлемента]) Тогда
				Продолжить;
			КонецЕсли;
			Если ПропуститьПроверкуВЗависимостиОтФО(НастройкаЭлемента) Тогда
				Продолжить;
			КонецЕсли;
			Элемент = Элементы.Найти(НастройкаЭлемента);
			Если Элемент = Неопределено Тогда
				Элемент = Элементы.Добавить("РеквизитИнтереса_" + НастройкаЭлемента, Тип("ПолеФормы"),
					 Элементы.ГруппаРеквизитыИнтереса);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = "ИнтересОбъект." + НастройкаЭлемента;
				Если НастройкаЭлемента = "Описание" Тогда
					Элемент.МногострочныйРежим = Истина;
				КонецЕсли;
				Если НастройкаЭлемента = "ОжидаемаяДатаПродажи" Тогда
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОжидаемаяДатаПродажиПриИзменении");
				КонецЕсли;
				РеквизитМД = Метаданные.Документы.CRM_Интерес.Реквизиты.Найти(НастройкаЭлемента);
				Если РеквизитМД <> Неопределено И РеквизитМД.СвязиПараметровВыбора.Количество() > 0 Тогда
					МассивСвязей = Новый Массив();
					Для каждого Связь Из РеквизитМД.СвязиПараметровВыбора Цикл
						НоваяСвязь = Новый СвязьПараметраВыбора(Связь.Имя, "ИнтересОбъект." + Связь.ПутьКДанным);
						МассивСвязей.Добавить(НоваяСвязь);
					КонецЦикла;
					Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
				 И ЭтотОбъект["Свойства_ИспользоватьСвойства"] Тогда
				ОписанияДР = ЭтотОбъект["Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство",
					 НастройкаЭлемента));
				Если ОписанияДР.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ЭтотОбъект[ОписанияДР[0].ИмяРеквизитаЗначение]) Тогда
						Продолжить;
					КонецЕсли;
					Элемент = CRM_УправлениеСвойствами.ЭлементДопРеквизита(ЭтотОбъект, ОписанияДР[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элемент <> Неопределено Тогда
			Если НастройкаЭлемента = "Партнер" Тогда
				Элемент.Видимость = Ложь;
			Иначе
				Элемент.Видимость = Истина;
			КонецЕсли;
			Элемент.ОтметкаНезаполненного = Истина;
			Элемент.АвтоОтметкаНезаполненного = Истина;
			
			Если НастройкаЭлемента = "Ответственный" И ОграничитьОтветственного Тогда
				
				МассивТиповОтветственного = Новый Массив;
				МассивТиповОтветственного.Добавить(Тип("СправочникСсылка.Пользователи"));
				Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОтветственного);
				
			ИначеЕсли НастройкаЭлемента = "Соглашение" Тогда
				
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_СоглашениеНачалоВыбора");
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СоглашениеПриИзменении");
				
				ЭлементДоговор = Элементы.Найти("РеквизитИнтереса_Договор");
				Если ЭлементДоговор <> Неопределено Тогда
					Элементы.Переместить(Элемент, Элементы.ГруппаРеквизитыИнтереса, ЭлементДоговор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПроверяемыеРеквизитыИнтереса()
	
	Если ОграничитьОтветственного Тогда
		
		ИнтересОбъект.Ответственный = Неопределено;
		
		ПроверяемыеРеквизитыИнтересаРасширенный = Новый Массив();
		Для Каждого ЭлМассива Из ПроверяемыеРеквизитыИнтереса Цикл
			ПроверяемыеРеквизитыИнтересаРасширенный.Добавить(ЭлМассива);
		КонецЦикла;
		ПроверяемыеРеквизитыИнтересаРасширенный.Добавить("Ответственный");
		
		ПроверяемыеРеквизитыИнтереса = Новый ФиксированныйМассив(ПроверяемыеРеквизитыИнтересаРасширенный);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаТиповАктивности(ИмяЭлементаТипаАктивности)
	АктивныйЭлементТипаАктивности = Элементы[ИмяЭлементаТипаАктивности];
	Если АктивныйЭлементТипаАктивности = Элементы.НеПланировать Тогда
		Элементы.ГруппаЗакладки.Видимость = Ложь;
	ИначеЕсли АктивныйЭлементТипаАктивности = Элементы.ВыборЗадачи Тогда
		Элементы.ГруппаЗакладки.Видимость = Истина;
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапланироватьЛичнуюЗадачу;
	Иначе
		Элементы.ГруппаЗакладки.Видимость = Истина;
		Элементы.ГруппаЗакладки.ТекущаяСтраница = Элементы.ГруппаЗапланироватьВзаимодействие;
	КонецЕсли;
	Если АктивныйЭлементТипаАктивности.ЦветФона <> ЦветаСтиля.CRM_ОсновнойГолубой Тогда
		Для каждого Элемент Из Элементы.ГруппаВидАктивности.ПодчиненныеЭлементы Цикл
			Если Элемент = АктивныйЭлементТипаАктивности Тогда
				Элемент.ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
				Элемент.ЦветРамки = ЦветаСтиля.CRM_ОсновнойГолубой;
			Иначе
				Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
				Элемент.ЦветРамки = ЦветаСтиля.CRM_СерыйДляВторостепенныхФункций;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОжидаемаяДатаПродажиПриИзмененииНаСервере()
	
	ИнтересОбъект.РучнойВводДатыПродажи = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКодыЗавершения()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка КАК Ссылка,
	|	ПричиныЗавершения.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеПричины
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = &ТипОбращения
	|	И ПричиныЗавершения.Сценарий = &Сценарий
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = &ТипОбращения
	|	И ПричиныЗавершения.Сценарий = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.ПустаяСсылка)
	|	И ПричиныЗавершения.Сценарий = &Сценарий
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПричиныЗавершения.Ссылка,
	|	ПричиныЗавершения.Наименование
	|ИЗ
	|	Справочник.CRM_ПричиныОтказаПоИнтересам КАК ПричиныЗавершения
	|ГДЕ
	|	НЕ ПричиныЗавершения.ПометкаУдаления
	|	И ПричиныЗавершения.ТипОбращения = ЗНАЧЕНИЕ(Справочник.CRM_ТипыОбращений.ПустаяСсылка)
	|	И ПричиныЗавершения.Сценарий = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ПричиныЗавершения.ЭтоГруппа
	|	И ПричиныЗавершения.ОтображатьПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеПричины.Ссылка КАК Ссылка,
	|	ДоступныеПричины.Наименование КАК Наименование
	|ИЗ
	|	ДоступныеПричины КАК ДоступныеПричины
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоступныеПричины.Наименование");
	
	Запрос.Параметры.Вставить("ТипОбращения", ИнтересОбъект.ТипОбращения);
	Запрос.Параметры.Вставить("Сценарий", Сценарий);
	КодыЗавершения = Новый СписокЗначений;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КодыЗавершения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КодыЗавершения.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат КодыЗавершения;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРеквизитов

&НаСервере
Функция ИспользоватьСоглашенияСКлиентами()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФО = "ИспользоватьСоглашенияСКлиентами";
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервере
Функция ИспользоватьДоговорыСКлиентами()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяФО = "ИспользоватьДоговорыСКлиентами";
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервере
Функция ВСоглашенииОтключеныДоговорыКонтрагентов()
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоСоглашениюИспользуютсяДоговорыКонтрагентов = Истина;
	
	Если ЗначениеЗаполнено(ИнтересОбъект["Соглашение"])
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнтересОбъект["Соглашение"], "ИспользуютсяДоговорыКонтрагентов") Тогда
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ИнтересОбъект["Соглашение"].ИспользуютсяДоговорыКонтрагентов;
	КонецЕсли;
	
	Возврат НЕ ПоСоглашениюИспользуютсяДоговорыКонтрагентов;
	
КонецФункции

&НаСервере
Функция ПропуститьПроверкуВЗависимостиОтФО(Реквизит)
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Реквизит = "Соглашение" И НЕ ИспользоватьСоглашенияСКлиентами() Тогда
		Возврат Истина;
	КонецЕсли;
	Если Реквизит = "Договор" И НЕ ИспользоватьДоговорыСКлиентами() Тогда
		Возврат Истина;
	КонецЕсли;
	Если Реквизит = "Договор" И ИспользоватьСоглашенияСКлиентами()
		И ВСоглашенииОтключеныДоговорыКонтрагентов() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗначениеПроверяемогоРеквизитаЗаполнено(Реквизит)
	
	Результат = Истина;
	
	РеквизитМД = Метаданные.Документы.CRM_Интерес.Реквизиты.Найти(Реквизит);
	ТабличнаяЧастьМД = Метаданные.Документы.CRM_Интерес.ТабличныеЧасти.Найти(Реквизит);
	
	Если РеквизитМД <> Неопределено Тогда
		Результат = ЗначениеЗаполнено(ИнтересОбъект[Реквизит]);
	ИначеЕсли ТабличнаяЧастьМД <> Неопределено Тогда
		Результат = CRM_ОбщегоНазначенияСервер.ТЧИнтересаЗаполнена(ИнтересОбъект, Реквизит);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// +CRM_Модуль
#Область CRM_Модуль

&НаКлиенте
Процедура Подключаемый_СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент              = Элемент;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		ПараметрыВыбораСоглашения.Партнер = ИнтересОбъект.Партнер;
		ПараметрыВыбораСоглашения.ДанныеФормыСтруктура = ИнтересОбъект;
	Иначе
		ПараметрыВыбораСоглашения.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
	КонецЕсли;
	ПараметрыВыбораСоглашения.Документ             = ИнтересОбъект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента        = ИнтересОбъект.Дата;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоглашениеПриИзменении(Элемент)
	
	ПодключаемыйСоглашениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемыйСоглашениеПриИзмененииНаСервере()
	
	ДокументПродажи = РеквизитФормыВЗначение("ИнтересОбъект");
	CRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьУсловияПродажПоСоглашению(ДокументПродажи);
	ЗначениеВРеквизитФормы(ДокументПродажи, "ИнтересОбъект");
	
КонецПроцедуры

#КонецОбласти
// -CRM_Модуль

