
#Область ОписаниеПеременных

&НаКлиенте
Перем ВременныеПараметрыОткрытияФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Мои продажи""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Попытка
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Исключение
	//	Отказ = Истина;
	//	Возврат;
	//КонецПопытки;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// Справочник из нескольких записей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпПустыеПодраздеоения
	|ИЗ
	|	(ВЫБРАТЬ
	|		CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СостоянияИнтересовПодразделения.Ссылка) КАК Ссылка1
	|	ИЗ
	|		Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
	|			ПО CRM_СостоянияИнтересов.Ссылка = CRM_СостоянияИнтересовПодразделения.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		CRM_СостоянияИнтересов.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.Ссылка1, 0) = 0
	|	И ВложенныйЗапрос.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияИнтересовПодразделения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпДоступныеПоПодразделению
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов.Подразделения КАК CRM_СостоянияИнтересовПодразделения
	|ГДЕ
	|	CRM_СостоянияИнтересовПодразделения.Подразделение В ИЕРАРХИИ(&Подразделение)
	|	И CRM_СостоянияИнтересовПодразделения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.Пустаяссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тмпПустыеПодраздеоения.Ссылка
	|ИЗ
	|	тмпПустыеПодраздеоения КАК тмпПустыеПодраздеоения
	|
	|СГРУППИРОВАТЬ ПО
	|	тмпПустыеПодраздеоения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель КАК Воронка
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	|ГДЕ
	|	CRM_ВоронкиПродажСостав.ТочкаМаршрута ССЫЛКА Справочник.CRM_СостоянияИнтересов
	|	И НЕ CRM_ВоронкиПродажСостав.Ссылка.ПометкаУдаления
	|	И (CRM_ВоронкиПродажСостав.Ссылка.Родитель.СценарийИнтереса В
	|				(ВЫБРАТЬ
	|					тмпДоступныеПоПодразделению.Ссылка КАК Ссылка
	|				ИЗ
	|					тмпДоступныеПоПодразделению КАК тмпДоступныеПоПодразделению)
	|			ИЛИ CRM_ВоронкиПродажСостав.Ссылка.Родитель.СценарийИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка))
	|	И НЕ ЕСТЬNULL(CRM_ВоронкиПродажСостав.Ссылка.Родитель.СценарийИнтереса.ЭтоПоддержка, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель.Наименование";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Запрос.УстановитьПараметр("Подразделение", ТекущийПользователь.Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВоронок.Добавить(ВыборкаДетальныеЗаписи.Воронка); 
	КонецЦикла;
	ВоронкаИнтересы = СписокВоронок.НайтиПоЗначению(Справочники.CRM_ВоронкиПродаж.Интересы);
	Если ВоронкаИнтересы <> Неопределено Тогда
		ВоронкаПродаж = ВоронкаИнтересы.Значение;
	Иначе
		ВоронкаПродаж = ?(СписокВоронок.Количество() <> 0, СписокВоронок[0].Значение, Неопределено);
	КонецЕсли;
	Элементы.ВыборСценария.Заголовок = ВоронкаПродаж;	
	ВидАРМ = "Канбан";
	
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект, Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Элементы.ОтборТеги.Видимость = Ложь;
		Элементы.ЗначенияОтбораТеги.Видимость = Ложь;
	Иначе
		ОтборПодразделениеДляТегов = Пользователи.АвторизованныйПользователь().Подразделение;
		СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов,
			 Истина));
		
		//ОбновитьЗначенияОтбораТегов();
	КонецЕсли; 
	ОтбиратьОбъектыБезТегов = Ложь;
	
	ОбязательноВводитьРезультат = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПустаяДата", Дата('00010101'),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПустаяДата", Дата('00010101'),
		 Истина);
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +Виджеты
	ПоказыватьВиджетыПриОткрытии = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоказатели") Тогда
		ВидимостьВиджетов = ХранилищеОбщихНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПанельВиджетов");
		ПоказыватьВиджетыПриОткрытии = ?(ВидимостьВиджетов <> Неопределено, ВидимостьВиджетов, Ложь);
		Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
		Элементы.СкрытьОтобразитьВиджеты.Пометка = ПоказыватьВиджетыПриОткрытии;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Ложь;
	Иначе
		ВидимостьВиджетов = Ложь;
		ПоказыватьВиджетыПриОткрытии = Ложь;
		Элементы.СкрытьОтобразитьВиджеты.Видимость = Ложь;
		Элементы.ГруппаВиджеты.Видимость = Ложь;
	КонецЕсли;
	
	Если ПоказыватьВиджетыПриОткрытии Тогда
		CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	КонецЕсли;
	// -Виджеты
	
	СоздатьКнопиОтборПросроченные();
	СоздатьКнопкиВидАРМ();
	
	СписокПериодов.Добавить("ПроизвольныйПериод", НСтр("ru='Произвольный период';en='Custom Period'"));
	СписокПериодов.Добавить("Сегодня", НСтр("ru='Сегодня';en='Today'"));
	СписокПериодов.Добавить("3 дня", НСтр("ru='3 дня';en='3 days'"));
	СписокПериодов.Добавить("Неделя", НСтр("ru='Неделя';en='Week'"));
	СписокПериодов.Добавить("Месяц", НСтр("ru='Месяц';en='Month'"));
	
	КлючОбъекта = "Обработка.CRM_АРМ_МоиПродажи.Форма.Форма/ТекущиеДанные";
	Настройки = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "", Новый Соответствие);
	
	Если Настройки.Количество() > 0 Тогда
		ПоискКлиент = Настройки.Получить("ПоискКлиент");
		
		ПоискИсточникПривлечения = Настройки.Получить("ПоискИсточникПривлечения");
		Если ЗначениеЗаполнено(ПоискИсточникПривлечения)
			 И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
			Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
			Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
		КонецЕсли;
		
		ПоискЗначениеИсточникаПривлечения = Настройки.Получить("ПоискЗначениеИсточникаПривлечения");
		
		ПоискТипУслуги = Настройки.Получить("ПоискТипУслуги");
		ВоронкаПродаж = Настройки.Получить("ВоронкаПродаж");
		
		ВариантПериода = Настройки.Получить("ВариантПериода");
		ПериодОтбора =  Настройки.Получить("ПериодОтбора");
		ОтборСозданы[0].Значение = ПериодОтбора;
		
		ОтборВключатьПросроченные = Настройки.Получить("ОтборВключатьПросроченные");
		Если НЕ ЗначениеЗаполнено(ОтборВключатьПросроченные) Тогда
			ОтборВключатьПросроченные = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если ВоронкаПродаж.Пустая() ИЛИ ВоронкаПродаж.ПометкаУдаления Тогда
		ВоронкаПродаж = Справочники.CRM_ВоронкиПродаж.Интересы;
		Настройки.Вставить("ВоронкаПродаж", ВоронкаПродаж);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "", Настройки);
	КонецЕсли;	
	Элементы.ВыборСценария.Заголовок = ВоронкаПродаж;

	ПокраситьКнопкиПросроченныеНаСервере();
	
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	ВыборВариантаОтбора(ЭтотОбъект, Элементы.БыстрыеОтборы);
	БыстрыйОтборИзменение(ЭтотОбъект, ПоискКлиент, ПоискТипУслуги, ПоискИсточникПривлечения,
		 ПоискЗначениеИсточникаПривлечения);
	
	Если НЕ ЗначениеЗаполнено(ВариантПериода) Тогда
		ВариантПериода = "Неделя";
		ПериодОтбора = Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней);
		ОтборСозданы[0].Значение = ПериодОтбора;
	КонецЕсли;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	Элемент = 1;
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	Если Элемент <> Неопределено Тогда
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Не Период.Пометка;
		КонецЕсли;
		
		// Вариант периода может быть выбран только один.
		Для Индекс = 0 По ОтборСозданы.Количество() - 1 Цикл
			
			ЭлементСпискаПериодов = ОтборСозданы[Индекс];
			Если ЭлементСпискаПериодов <> Период Тогда
				ЭлементСпискаПериодов.Пометка = Ложь;
			КонецЕсли;
			
			Если Индекс = 0 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
				Если НЕ ЭлементСпискаПериодов.Пометка Тогда
					ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
				КонецЕсли;
			ИначеЕсли Индекс = 1 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
			ИначеЕсли Индекс = 2 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
			ИначеЕсли Индекс = 3 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
			ИначеЕсли Индекс = 4 Тогда
				ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементСпискаПериодов.Пометка Тогда
				Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
					ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
				КонецЕсли;
			Иначе
				ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
		
	КонецЕсли;
	ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
	Если ЗначениеПериода <> Неопределено Тогда
		ПредставлениеПериода = ЗначениеПериода.Представление;
	КонецЕсли;
	ВоронкаПродажПриИзмененииНаСервере();
	ОбновитьОтборы();
	ОбновитьТаблицы();
	УстановитьПодсказкуКомандыВыбораСценария();
	УстановитьШиринуЭлементовКоманднойПанели();
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиВидАРМ()
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаГруппаВидАРМ");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаВидАРМ");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаВидАРМ");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Канбан';en='Kanban'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ВидКанбан");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	СтруктураКнопка.Вставить("Пометка", Истина);

	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Список';en='List'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ВидСписок");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопиОтборПросроченные()
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаОтборВключатьПросроченные");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаОтборПросроченные");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаОтборВключатьПросроченные");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Внизу';en='Down'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВнизу");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Вверху';en='Up'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ПросроченныеВверху");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	// +Виджеты
	Если ПоказыватьВиджетыПриОткрытии Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	КонецЕсли;
	// -Виджеты
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		КонтекстноеМенюЭтапа = Элементы[ИмяТаблицы].КонтекстноеМеню;
		Для Каждого ПодчиненныйЭлемент Из КонтекстноеМенюЭтапа.ПодчиненныеЭлементы Цикл
			ПодчиненныйЭлемент.Видимость = Ложь;
		КонецЦикла;
		СформироватьКонтекстноеМеню(ИмяТаблицы);
	КонецЦикла;
	
	СформироватьЗаголовок(ЭтотОбъект);
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ПериодическоеОбновлениеСписков", 60, Ложь);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьВиджеты" Тогда
		ОбновитьВсеВиджеты();
	ИначеЕсли ИмяСобытия = "ОбновитьАРМ" Тогда
		ОбновитьТаблицы();
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" Тогда
		ОбновитьТаблицы();
	ИначеЕсли ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		ОбновитьТаблицы();
	ИначеЕсли ИмяСобытия = "ПослеЗаписиТега" Или ИмяСобытия = "ПослеЗаписиСегмента" Тогда
		ОбновитьЗначенияОтбораТегов();
	ИначеЕсли ИмяСобытия = "ИзмененоСостояниеИнтереса"
		 И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр,
		 	 "Родитель") = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВоронкаПродаж, "СценарийИнтереса") Тогда
		ВоронкаПродажПриИзменении(Неопределено);
	ИначеЕсли ИмяСобытия = "ИзмененСценарийИнтереса" Тогда
		ВыбратьВоронкуПродажПоСценарию(Параметр);
		ВоронкаПродажПриИзменении(Неопределено);
		ОбновитьТаблицы();
	ИначеЕсли ИмяСобытия = "УдаленСценарийИнтереса" Тогда
		УдаленнаяВоронка = ПолучитьВоронкуПродажПоСценарию(Параметр);
		ЭлементСписка = СписокВоронок.НайтиПоЗначению(УдаленнаяВоронка);
		Если ЭлементСписка <> Неопределено Тогда
			СписокВоронок.Удалить(ЭлементСписка);
		КонецЕсли;
		Если СписокВоронок.Количество() > 0 Тогда
			ВоронкаПродаж = СписокВоронок[0].Значение;
			Элементы.ВыборСценария.Заголовок = ВоронкаПродаж;
		Иначе
			ВоронкаПродаж = Неопределено;
			Элементы.ВыборСценария.Заголовок = "";
		КонецЕсли;
		ВоронкаПродажПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПериодОчиститьНажатие(Элемент)
	ВариантПериода = "";
	
	Для Индекс = 0 По ОтборСозданы.Количество() - 1 Цикл
		
		ЭлементСпискаПериодов = ОтборСозданы[Индекс];
		ЭлементСпискаПериодов.Пометка = Ложь;
		
		Если Индекс = 0 Тогда
			ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
			ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
		ИначеЕсли Индекс = 1 Тогда
			ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
		ИначеЕсли Индекс = 2 Тогда
			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
		ИначеЕсли Индекс = 3 Тогда
			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
		ИначеЕсли Индекс = 4 Тогда
			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСпискаПериодов.Пометка Тогда
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220);
		Иначе
			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	Период = ОтборСозданы[0];
	ПериодОтбора = ОтборСозданы[0].Значение;
	ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
	ОбновитьОтборы();
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборы(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериод(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТеги(Элемент)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыСегодняНажатие(Элемент)
	ВариантПериода = "Сегодня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	ВариантПериода = "3 дня";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	
	ВариантПериода = "Неделя";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	
	ВариантПериода = "Месяц";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	
	ВариантПериода = "ПроизвольныйПериод";
	ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентПриИзменении(Элемент)
	ОбновитьОтборы("Клиент");	
КонецПроцедуры

&НаКлиенте
Процедура ПоискТипУслугиПриИзменении(Элемент)
	ОбновитьОтборы("ТипУслуги");
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ОбновитьОтборы("СтрокаПоиска");
КонецПроцедуры

&НаКлиенте
Процедура ПоискИсточникПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискИсточникПривлечения);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискИсточникПривлеченияПриИзменении(Элемент)
	ПоискЗначениеИсточникаПривлечения = Неопределено;
	Элементы.ПоискЗначениеИсточникаПривлечения.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискИсточникПривлечения,
		 "ТипЗначения"));
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения)
		 И НЕ (ТипПВХ(ПоискИсточникПривлечения) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Истина;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Ложь;
	Иначе
		Элементы.ПоискЗначениеИсточникаПривлечения.Доступность		= Ложь;
		Элементы.ПоискЗначениеИсточникаПривлечения.ТолькоПросмотр	= Истина;
	КонецЕсли;
	ОбновитьОтборы("Канал");
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеИсточникаПривлеченияПриИзменении(Элемент)
	ОбновитьОтборы("Источник");
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеДляТеговПриИзменении(Элемент)
	ОтборПодразделениеДляТеговПриИзмененииНаСервере();
	ОбновитьЗначенияОтбораТегов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУспешноПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ВоронкаПродажПриИзменении(Элемент)
	//Элементы.ГруппаСоставКолонок.Видимость = Ложь;
	ВоронкаПродажПриИзмененииНаСервере();
	ОбновитьОтборы();
	//Элементы.ГруппаСоставКолонок.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураСтроки = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаМессенджера", Новый Структура("Ключ", СтруктураСтроки.Объект)); //, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	Иначе	
		ПоказатьЗначение(, СтруктураСтроки.Объект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда 
		Если ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
			Выполнение = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Если СтрНайти(Элемент.Имя, "НеРазобрано") > 0 Тогда               
		ТекущийЭтап = "НеРазобрано";
	Иначе 
		ИДЭтапа = Элемент.Имя;
		ИДЭтапа = СтрЗаменить(ИДЭтапа, "Этап_", ""); 
		ИДЭтапа = СтрЗаменить(ИДЭтапа, "_", "-");
		ТекущийЭтап = ИДЭтапа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ПараметрыПеретаскивания.Значение = Неопределено
		 ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда Возврат; КонецЕсли;
	Если СтрНайти(Элемент.Имя, "НеРазобрано") > 0 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение[0];
		Если ОбрабатываемаяЗапись = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение;
	КонецЕсли;	
	ИДЭтапа = Элемент.Имя;
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "Этап_", ""); 
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "_", "-"); 
	Если ТекущийЭтап = "НеРазобрано" Тогда
		СписокСостояний = ПолучитьСостоянияИнтересаПоВоронке(ПолучитьЭтапВоронки(ИДЭтапа));
		ДополнительныеПараметры = Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение,
			| НачалоПериода", ПолучитьОбъектЗаписи(ОбрабатываемаяЗапись), "Не разобрано",
			 ПолучитьЭтапВоронки(ИДЭтапа),
			 ОбщегоНазначенияКлиент.ДатаСеанса());
		ВыборСостоянияЗавершение(ДополнительныеПараметры); 
		Возврат;
	Иначе	
		СтруктураЭтап = ПолучитьСруктуруПереноса(ИДЭтапа, ОбрабатываемаяЗапись);
		Задача = ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап);
		Если ИДЭтапа <> ТекущийЭтап Тогда
			Если ЗначениеЗаполнено(Задача) Тогда
				МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Задача, , Истина);
				Если МассивОшибок.Количество() > 0 Тогда
					Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
					КонецЦикла;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ЭтапВоронки = ПолучитьЭтапВоронки(ИДЭтапа);
			СписокСостояний = ?(ЗначениеЗаполнено(Задача),
				 ПолучитьСписокСостоянийСервер(СтруктураЭтап.Объект, Задача, ЭтапВоронки),
				 ПолучитьСостоянияИнтересаПоВоронке(ЭтапВоронки,
				 СтруктураЭтап.СостояниеИнтереса));
			ДополнительныеПараметры = Новый Структура("Ссылка, Задача", ПолучитьОбъектЗаписи(ОбрабатываемаяЗапись), Задача);
			Если СписокСостояний.Количество() > 1 Тогда
				ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект,
					 Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, Период", СтруктураЭтап.Объект,
					 ПолучитьЭтапВоронки(ТекущийЭтап), ПолучитьЭтапВоронки(ИДЭтапа),
					 ОбщегоНазначенияКлиент.ДатаСеанса()));
				ПараметрыФормы = Новый Структура("Интерес, ЭтапВоронки, Задача, СписокСостояний",
					 СтруктураЭтап.Объект, ПолучитьЭтапВоронки(ИДЭтапа), Задача,
					 СписокСостояний);
				ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
					 ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ПереносИнтересаЗавершение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли СписокСостояний.Количество() = 1 Тогда
				Если ОткрыватьФормуПереносаИнтереса(СписокСостояний[0].Значение, СтруктураЭтап.Объект, Задача) Тогда
					ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект,
						 Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, Период", СтруктураЭтап.Объект,
						 ПолучитьЭтапВоронки(ТекущийЭтап), ПолучитьЭтапВоронки(ИДЭтапа),
						 ОбщегоНазначенияКлиент.ДатаСеанса()));
					ПараметрыФормы = Новый Структура("Интерес, ЭтапВоронки, Задача, СписокСостояний",
						 СтруктураЭтап.Объект, ПолучитьЭтапВоронки(ИДЭтапа), Задача,
						 СписокСостояний);
					ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы,
						 ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ПереносИнтересаЗавершение,
						 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Иначе
					ОбработатьИнтересНаКлиенте(Новый Структура("Состояние", СписокСостояний[0].Значение), ДополнительныеПараметры);
				КонецЕсли;
			Иначе
				Если СписокСостояний.Количество() = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход интереса на данный этап невозможен!';
						|en='Transition of lead at this stage is impossible!'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУспешноПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТекущийЭтап = "НеРазобрано" Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение[0];
	Иначе
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение;
	КонецЕсли;	
	СтруктураЭтап = ПолучитьСруктуруПереноса("", ОбрабатываемаяЗапись);
	Задача = ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап);
	СтатусЗакрыт = ПолучитьСостояниеИнтересаИнтересЗакрыт(СтруктураЭтап.Объект);
	Если ЗначениеЗаполнено(Задача) Тогда
		СписокСостояний = ?(ЗначениеЗаполнено(Задача), ПолучитьСписокСостоянийСервер(СтруктураЭтап.Объект,
			 Задача),
			 Неопределено);
		ЭтапНайден = Ложь;
		Для Каждого ЭлементСписокаСостояний Из СписокСостояний Цикл
			Если ЭлементСписокаСостояний.Значение.Состояние = СтатусЗакрыт Тогда
				ЭтапНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтапНайден Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход интереса на данный этап невозможен!';
				|en='Transition of lead at this stage is impossible!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Ссылка, Задача", ПолучитьОбъектЗаписи(ОбрабатываемаяЗапись), Задача);
	Если ОткрыватьФормуПереносаИнтереса(СтатусЗакрыт, СтруктураЭтап.Объект, Задача) Тогда
		ФормаОбработки = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса";
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект);
		Если ЗначениеЗаполнено(Задача) Тогда
			ПараметрыФормы = Новый Структура("Интерес, Задача, ДанныеВыбранногоСостоянияИнтереса",
				 СтруктураЭтап.Объект, Задача,
				 ЭлементСписокаСостояний.Значение);
		Иначе
			ПараметрыФормы = Новый Структура("Интерес, Задача, ДанныеВыбранногоСостоянияИнтереса",
				 СтруктураЭтап.Объект, Задача,
				 СтатусЗакрыт);
		КонецЕсли;
		ОткрытьФорму(ФормаОбработки, ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, ,
			 ПереносИнтересаЗавершение,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ЗначениеЗаполнено(Задача) Тогда
			ОбработатьИнтересНаКлиенте(Новый Структура("Состояние", ЭлементСписокаСостояний.Значение), ДополнительныеПараметры);
		Иначе
			ОбработатьИнтересНаКлиенте(Новый Структура("Состояние", СтатусЗакрыт), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНеудачноПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНеудачноПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТекущийЭтап = "НеРазобрано" Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение[0];
	Иначе
		ОбрабатываемаяЗапись = ПараметрыПеретаскивания.Значение;
	КонецЕсли;	
	СтруктураЭтап = ПолучитьСруктуруПереноса("", ОбрабатываемаяЗапись);
	Задача = ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап);
	
	СтатусЗакрыт = ПолучитьСостояниеИнтересаИнтересПотерян(СтруктураЭтап.Объект);
	Если ЗначениеЗаполнено(Задача) Тогда
		СписокСостояний = ?(ЗначениеЗаполнено(Задача), ПолучитьСписокСостоянийСервер(СтруктураЭтап.Объект,
			 Задача),
			 Неопределено);
		ЭтапНайден = Ложь;
		Для Каждого ЭлементСписокаСостояний Из СписокСостояний Цикл
			Если ЭлементСписокаСостояний.Значение.Состояние = СтатусЗакрыт Тогда
				ЭтапНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтапНайден Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Переход интереса на данный этап невозможен!';
				|en='Transition of lead at this stage is impossible!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОбработки = "Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса";
	ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(Задача) Тогда
		Если ЗначениеЗаполнено(ЭлементСписокаСостояний.Значение.ВариантВыполнения) Тогда
			ПараметрыФормы = Новый Структура("ОткрытиеИзАРМа, Интерес, Задача,
				| ПредставлениеВариантаВыполнения", Истина, СтруктураЭтап.Объект, Задача,
				 ЭлементСписокаСостояний.Значение.ВариантВыполнения);
		Иначе
			ПараметрыФормы = Новый Структура("ОткрытиеИзАРМа, Интерес, Задача,
				| ПредставлениеВариантаВыполнения, ДосрочноеЗавершение", Истина, СтруктураЭтап.Объект, Задача, 0,
				 Истина);
		КонецЕсли;
	Иначе
		ПараметрыФормы = Новый Структура("ОткрытиеИзАРМа, Интерес, Задача,
			| ДанныеВыбранногоСостоянияИнтереса", Истина, СтруктураЭтап.Объект, Задача,
			 ПолучитьСостояниеИнтересаИнтересПотерян(СтруктураЭтап.Объект));
	КонецЕсли;
	ОткрытьФорму(ФормаОбработки, ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, ,
		 ПереносИнтересаЗавершение,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура НеРазобраноПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяТаблица = Элемент.Имя; 
	ПодключитьОбработчикОжидания("АРМПриАктивизацииСтрокиОбработка", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АРМПриАктивизацииСтрокиОбработка()
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок");
	//МассивТаблиц.Добавить("ТаблицаНеудачноСвернуто");
	//МассивТаблиц.Добавить("ТаблицаУспешноСвернуто");

	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивТаблиц.Добавить(ИмяРеквизита);
	КонецЦикла;
	//МассивТаблиц.Удалить(МассивТаблиц.Найти(Элемент.Имя));
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Если АктивнаяТаблица = ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;	
		Элементы[ИмяТаблицы].ВыделенныеСтроки.Очистить();
		Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПисьмаПриИзменении(Элемент)
	ОбновитьОтборыНаСервере("Все");
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗвонкиПриИзменении(Элемент)
	ОбновитьОтборыНаСервере("Все");
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискЗначениеИсточникаПривлеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		Если ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ПоискЗначениеИсточникаПривлечения);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения)
				 И (ТипЗнч(ПоискЗначениеИсточникаПривлечения) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока",
					 CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ПоискЗначениеИсточникаПривлечения,
					 "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, ,
				 ВариантОткрытияОкна.ОтдельноеОкно);
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Партнеры") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ПараметрыФормы			= Новый Структура;
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);	
		ИначеЕсли ТипПВХ(ПоискИсточникПривлечения) = Тип("СправочникСсылка.Пользователи") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ПараметрыФормы			= Новый Структура;
			ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОтборНажатие(Элемент, СтандартнаяОбработка)
	
	ЭлементДляОчистки = Элементы.Найти("Тег_Очистить");	
	
	ЭлементДляОтбораБезТегов = Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы.Найти("Тег_Нет");
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ОтбиратьОбъектыБезТегов = НЕ ОтбиратьОбъектыБезТегов;	
	КонецЕсли; 	
	
	Пометка = ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, СтандартнаяОбработка);	

	// Поведение при нажатии на кнопку очистки отборов по тегам.
	Если Элемент = ЭлементДляОчистки Тогда
		ОбновитьЗначенияОтбораТегов();
		ОбновитьОтборы();
		Возврат;
	КонецЕсли; 
	
	// Поведение при нажатии на кнопку отбора [нет тегов].
	Если Элемент = ЭлементДляОтбораБезТегов Тогда
		ИзменитьЦветЭлементаСервер(ОтбиратьОбъектыБезТегов, ЭлементДляОтбораБезТегов.Имя);
		Если ОтбиратьОбъектыБезТегов Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 	
	
	Если НЕ Пометка = Неопределено И Элемент <> ЭлементДляОтбораБезТегов  Тогда
		ИзменитьЦветЭлементаСервер(Пометка, Элемент.Имя);
		Если Пометка Тогда			
			Если ЭлементДляОчистки <> Неопределено Тогда
				ЭлементДляОчистки.Видимость = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	ОбновитьОтборы("Тег");
		
КонецПроцедуры

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область Виджеты

&НаКлиенте
Процедура ДобавитьВиджет(Элемент)
	
	CRM_РаботаСВиджетамиКлиент.ОткрытьВыборВариантаВиджета(ЭтотОбъект);
	
КонецПроцедуры // ДобавитьВиджет()

&НаКлиенте
Процедура ДобавитьВиджетЗавершение(ВыбранныйВариантВиджета, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариантВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВиджетНаФорму(ВыбранныйВариантВиджета);
	
КонецПроцедуры // ДобавитьВиджетЗавершение()

&НаКлиенте
Процедура Подключаемый_HTMLВиджетаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	ДанныеВиджета = CRM_РаботаСВиджетамиКлиентСервер.ПолучитьДанныеВиджета(
		ЭтотОбъект, Элемент.Имя);
	
	Если ДанныеВиджета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// --------------
	
	Если СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Обновить") Тогда
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
			"CRM_Статистика.Показатели.Виджеты.Удобства.КоличествоНажатийЗнакОбновить");
		
		ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "НастройкаВиджета") Тогда
		
		ОписаниеОповещенияОИзмененииНастроек = Новый ОписаниеОповещения(
			"ПриИзмененииНастроекВариантаВиджета", ЭтотОбъект);
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьНастройкиВиджета(
			ЭтотОбъект, ДанныеВиджета, ОписаниеОповещенияОИзмененииНастроек);
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "СкрытьВиджет") Тогда
		
		УдалитьВиджетНаФорме(ДанныеВиджета.ПолучитьИдентификатор());
		
	ИначеЕсли СтрЗаканчиваетсяНа(ДанныеСобытия.Href, "Расшифровать") Тогда
		
		CRM_РаботаСВиджетамиКлиент.ОткрытьРасшифровкуВиджета(ЭтотОбъект, ДанныеВиджета);
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_HTMLВиджетаПриНажатии()

&НаКлиенте
Процедура ПриИзмененииНастроекВариантаВиджета(ДанныеВиджета, ДополнительныеПараметры) Экспорт
	
	ОбновитьВиджет(ДанныеВиджета.ПолучитьИдентификатор());
	
КонецПроцедуры // ПриИзмененииНастроекВариантаВиджета()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВид(Команда)
	Если ВидАРМ = "Канбан" Тогда
		Элементы.ГруппаВоронка.Видимость = Истина;
		Элементы.ГруппаСписок.Видимость = Ложь;
	Иначе
		Элементы.ГруппаВоронка.Видимость = Ложь;
		Элементы.ГруппаСписок.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуСценария(Команда)
	ПараметрыОткрытия = Новый Структура("Сценарий",
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВоронкаПродаж,
		 "СценарийИнтереса"));
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьВиджеты(Команда)
	
	ПоказыватьВиджетыПриОткрытии = НЕ ПоказыватьВиджетыПриОткрытии;
	Элементы.ГруппаВиджеты.Видимость = ПоказыватьВиджетыПриОткрытии;
	СохранитьНастройкуПоказыватьВиджеты(ИмяФормы, ПоказыватьВиджетыПриОткрытии);
	
	Если ПоказыватьВиджетыПриОткрытии Тогда
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВариантыВиджетовФормы") Тогда
			ИнициализироватьМеханизмВиджетов();
		Иначе
			ОбновитьВсеВиджеты();
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов", 60);
	Иначе
		ОтключитьОбработчикОжидания("Подключаемый_ОбработчикАвтообновленияВиджетов");
	КонецЕсли;
	
КонецПроцедуры // СкрытьОтобразитьВиджеты()

&НаКлиенте
Процедура ПерезаполнитьАРМ(Команда)
	ПерезаполнитьАРМНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура Анализ(Команда)
	ОткрытьФорму("Отчет.CRM_ВоронкаПродаж.Форма.Форма", Новый Структура("Воронка", ВоронкаПродаж));
КонецПроцедуры

&НаКлиенте
Процедура ТегОтборОчистить(Команда)
	Элемент = Элементы.Найти("Тег_Очистить");
	Пометка = ТегОтборНажатие("Документ.CRM_Интерес", ЭтотОбъект, "Список", Элемент, Истина);	
	ОбновитьЗначенияОтбораТегов();
	ОбновитьОтборы("Тег");
КонецПроцедуры

&НаКлиенте
Процедура НазначитьМне(Команда)
	
	ПеренаправитьОбращение(ПользователиКлиент.АвторизованныйПользователь());
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьИсполнителю(Команда)

	ПеренаправитьОбращение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьРоли(Команда)

	ПеренаправитьОбращение(, Тип("СправочникСсылка.РолиИсполнителей"));
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМПланировщик(Команда)
	ЕстьЛиды = ЕстьЛидыВВыбранныхСтроках();
	Если ЕстьЛиды Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьПисьмоИзАРМЗавершение", ЭтотОбъект, ЕстьЛиды);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,
			 , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные();
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПисьмоИзАРМЗавершение(Результат, ЕстьЛиды) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
			
		Если НеобходимоЗадатьВопросПриПереносеВОбработанные() Тогда
			ЗадатьВопросПриПереносеВОбработанные(Результат);
		Иначе
			ВопросПриПереносеВОбработанныеЗавершение(КодВозвратаДиалога.Да, Результат);
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРММоиПродажи"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПеренаправитьОбращение(Ответственный = Неопределено, ТипОтветственного = Неопределено)
	
	Если ВидАРМ = "Канбан" Тогда
		//Если АктивнаяТаблица = "НеРазобрано" Тогда
		//	Возврат;
		//КонецЕсли;
		ТекущиеДанные = Элементы[АктивнаяТаблица].ТекущиеДанные;
		ТекущаяСтрока = Элементы[АктивнаяТаблица].ТекущаяСтрока;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаСписок.ТекущиеДанные;
		ТекущаяСтрока = Элементы.ТаблицаСписок.ТекущаяСтрока;
	КонецЕсли;
	
	ТекущееОбращение = ПолучитьОбъектЗаписи(ТекущаяСтрока);
	ТекущийОтветственный = ТекущиеДанные.Пользователь;
	Если ТекущийОтветственный = Ответственный Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОтветственного) Тогда
		ТипОтветственного = Тип("СправочникСсылка.Пользователи");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущееОбращение", ТекущееОбращение);
	ДополнительныеПараметры.Вставить("ТекущийОтветственный", ТекущийОтветственный);
	ДополнительныеПараметры.Вставить("ТипОтветственного", ТипОтветственного);
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПеренаправитьОбращениеЗавершение", ЭтотОбъект,
		 ДополнительныеПараметры);
	Если Ответственный = Неопределено Тогда
		Если ТипОтветственного = Тип("СправочникСсылка.Пользователи") Тогда
			ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", , ЭтотОбъект, , , , ОповещениеЗавершения);
		ИначеЕсли ТипОтветственного = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ОткрытьФорму("Справочник.РолиИсполнителей.ФормаВыбора", , ЭтотОбъект, , , , ОповещениеЗавершения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОбращениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = ДополнительныеПараметры.ТипОтветственного Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ДополнительныеПараметры.ТекущийОтветственный Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = ПредопределенноеЗначение("Справочник.РолиИсполнителей.CRM_ДинамическаяАдресация") Тогда
		ТекстОшибки = НСтр("ru='Это служебная роль. Переадресация на нее не предусмотрена.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеОбращений = Новый Массив;
	ДанныеОбращений.Добавить(ДополнительныеПараметры.ТекущееОбращение);
	ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(ДанныеОбращений, Результат);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовки(СписокКолонок = Неопределено)
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		Если ВалютаУправленческогоУчета.Код = "643" Тогда
			// Рубль
			ВалютаПредставление = Символ("8381");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "978" Тогда
			// Евро
			ВалютаПредставление = Символ("8364");
		ИначеЕсли ВалютаУправленческогоУчета.Код = "840" Тогда
			// Доллар
			ВалютаПредставление = Символ("36");
		Иначе
			ВалютаПредставление = ВалютаУправленческогоУчета.Наименование;
		КонецЕсли;
	Иначе
		ВалютаПредставление = "";
	КонецЕсли;
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияОтбораПоОтветственному", ЗначенияОтбораПоОтветственному(ТекущийПользователь));
	Запрос.УстановитьПараметр("ВоронкаПродаж", ВоронкаПродаж);
	Запрос.УстановитьПараметр("ЕстьПериод", Период.Пометка);
	Запрос.УстановитьПараметр("ЕстьКанал", ЗначениеЗаполнено(ПоискИсточникПривлечения));

	Запрос.УстановитьПараметр("ДатаНачала", ПериодОтбора.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодОтбора.ДатаОкончания);
	Запрос.УстановитьПараметр("Партнер", ПоискКлиент);
	
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	РолиПользователя.Добавить(ТекущийПользователь);
	РолиПользователя.Добавить(Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	
	Запрос.УстановитьПараметр("ТипУслуги", ПоискТипУслуги);
	Запрос.УстановитьПараметр("ОтборТегиВключен", ОтборВключен);
	Запрос.УстановитьПараметр("СсылкиНаОбъектыСтегами", СсылкиНаОбъектыСтегами);
	Запрос.УстановитьПараметр("СтрокаПоискаОтбор", "%" + СтрокаПоискаОтбор + "%");
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыАРМ.Объект) КАК Количество,
	|	СУММА(CRM_ОбъектыАРМ.Объект.ОжидаемаяВыручка) КАК Сумма
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
	|ГДЕ
	|	CRM_ОбъектыАРМ.НаименованиеАРМ = ""МоиПродажи""
	|	И CRM_ОбъектыАРМ.СостояниеИнтереса В(&СостояниеИнтереса)
	|	И ВЫБОР КОГДА &ЭтоОбращения ТОГДА CRM_ОбъектыАРМ.Пользователь В (&РолиПользователя) ИНАЧЕ CRM_ОбъектыАРМ.Пользователь В (&ЗначенияОтбораПоОтветственному) КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ОтображатьПисьма
	|				ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	//ДопОтборСтрока
	|	//ДопОтбор
	|	И ВЫБОР
	|			КОГДА НЕ &ОтображатьЗвонки
	|				ТОГДА НЕ CRM_ОбъектыАРМ.Объект ССЫЛКА Документ.ТелефонныйЗвонок
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборТегиВключен
	|				ТОГДА CRM_ОбъектыАРМ.Объект В (&СсылкиНаОбъектыСтегами)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ЕстьПериод
	|				ТОГДА CRM_ОбъектыАРМ.КрайнийСрок <= &ДатаОкончания
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	СтруктураОбновления = Новый Структура;
	Запрос.УстановитьПараметр("ОтображатьЗвонки", НЕ ОтображатьЗвонки);
	Запрос.УстановитьПараметр("ОтображатьПисьма", НЕ ОтображатьПисьма);
	Если ТипЗнч(СписокКолонок) = Тип("СписокЗначений") Тогда
		Для Каждого ЗначениеКолонки Из СписокКолонок Цикл
			СтрокаДопОтборов = "";
			Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
				СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Заголовок Подобно &СтрокаПоискаОтбор
				|";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборСтрока", СтрокаДопОтборов);
			Если ЗначениеКолонки.Значение = "НеРазобрано" Тогда
				СостояниеИнтереса = Новый СписокЗначений;
				СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
				Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
				Запрос.УстановитьПараметр("ЭтоОбращения", Истина);
				
				//Выборка = Запрос.Выполнить().Выбрать();
				КоличествоОбращений = КоличествоСтрокВСписке("НеРазобрано");
				СтруктураКолонки = Новый Структура;
				Если КоличествоОбращений <> 0 Тогда
					//ДекорацияНеРазобрано1 = "Не разобрано ("+Выборка.Количество+")";
					//СтруктураКолонки.Вставить("Название", "Не разобрано");
					СтрокаКоличествоСделок = Формат(КоличествоОбращений, "ЧДЦ=; ЧН=0; ЧГ=");
					ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
					Если КоличествоОбращений = 0 Тогда
						СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No requests'"));
					Иначе	
						СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
							+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
							| м'"));
					СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") + ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса,
						| интересов,
						| м'"));
					СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
					СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
					СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
						СтруктураКолонки.Вставить("Сумма", "" + СтрокаКоличествоСделок);
					КонецЕсли;	
					//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано ("+Выборка.Количество+")";
				Иначе
					//СтруктураКолонки.Вставить("Название", "Не разобрано");
					СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No requests'"));
					//Элементы.ДекорацияНеРазобрано.Заголовок = "Не разобрано (0)";
				КонецЕсли;
				СтруктураОбновления.Вставить("Этап_НеРазобрано", СтруктураКолонки);
			КонецЕсли;	
			Запрос.УстановитьПараметр("ЭтоОбращения", Ложь);
			СтрокаДопОтборов = "";
			Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
				Запрос.УстановитьПараметр("КаналПервичногоИнтереса", ПоискИсточникПривлечения);
				СтрокаДопОтборов = СтрокаДопОтборов + " ГДЕ
				|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса = &КаналПервичногоИнтереса
				|";
			КонецЕсли;	
			Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
				Запрос.УстановитьПараметр("ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения);
				СтрокаДопОтборов = СтрокаДопОтборов 
					+ " И ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса = &ИсточникПервичногоИнтереса
				|";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборКанал", СтрокаДопОтборов);	
			СтрокаДопОтборов = "";
			Если НЕ ПоискКлиент.Пустая() Тогда
				СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Объект.Партнер = &Партнер
				|";
			КонецЕсли;	
			Если НЕ ПоискТипУслуги.Пустая() Тогда
				СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Объект.ТипУслуги = &ТипУслуги
				|";
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор", СтрокаДопОтборов);

			Если ЗначениеКолонки.Значение <> "НеРазобрано" И ЗначениеКолонки.Значение <> "ТаблицаНеудачно"
				 И ЗначениеКолонки.Значение <> "ТаблицаУспешно" Тогда
				СтруктураКолонки = Новый Структура;
				Этап = ПолучитьЭтапВоронки(ЗначениеКолонки.Значение);
				ИдентификаторЭтапа = СтрЗаменить(Строка(Этап.УникальныйИдентификатор()), "-", "_");
			
				//ИдентификаторЭтапа = "Этап_"+ИдентификаторЭтапа;
				
				ИмяРеквизита = "Декорация_Этап_" + ИдентификаторЭтапа;
				ДекорацияНазвание = Элементы.Найти("Декорация_Этап_" + ИдентификаторЭтапа); 
				ДекорацияСумма = Элементы.Найти("ДекорацияСумма_Этап_" + ИдентификаторЭтапа); 
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Ссылка", Этап);
				Строка = ТаблицаЭтапы.НайтиСтроки(ПараметрыПоиска);
				
				Запрос.УстановитьПараметр("СостояниеИнтереса", Строка[0].СписокСостояний);
				
				// BSLLS:CreateQueryInCycle-off
				Выборка = Запрос.Выполнить().Выбрать();
				// BSLLS:CreateQueryInCycle-on
				Если Выборка.Следующий() Тогда
					СтруктураКолонки.Вставить("Название", Этап.Наименование);
					
					СтрокаКоличествоСделок = Формат(Выборка.Количество, "ЧДЦ=; ЧН=0; ЧГ=");
					ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
					Если Выборка.Количество = 0 Тогда
						СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
						СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
					Иначе
						СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
							+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
							| м'"));
						СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") + ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса,
							| интересов,
							| м'"));
						СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
						СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
						СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
						СтруктураКолонки.Вставить("Сумма", СтрокаЗаголовка + ":");
						СтруктураКолонки.Вставить("Сумма1", ?(Выборка.Сумма = NULL, "0", Формат(Выборка.Сумма,
							 "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " 
							+ ВалютаПредставление));
						
					КонецЕсли;	
					
					//СтруктураКолонки.Вставить("Сумма", ?(Выборка.Сумма = NULL, "Нет интересов",
					//	Формат(Выборка.Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " + ВалютаПредставление)+" ("+Выборка.Количество
					//	+")");
				Иначе
					СтруктураКолонки.Вставить("Название", Этап.Наименование);
					СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
					СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
				КонецЕсли;
				СтруктураОбновления.Вставить("Этап_" + ИдентификаторЭтапа, СтруктураКолонки);
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
		СостояниеИнтереса = Новый СписокЗначений;
		СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
		Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтереса);
		
		СтрокаДопОтборов = "";
		Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
			СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Заголовок Подобно &СтрокаПоискаОтбор
			|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборСтрока", СтрокаДопОтборов);
		Запрос.УстановитьПараметр("ЭтоОбращения", Истина);
		//Выборка = Запрос.Выполнить().Выбрать();		
		КоличествоОбращений = КоличествоСтрокВСписке("НеРазобрано");
		СтруктураКолонки = Новый Структура;
		Если КоличествоОбращений <> 0 Тогда
			СтруктураКолонки.Вставить("Название", НСтр("ru='Не разобрано';en='Not parsed'"));
			СтрокаКоличествоСделок = Формат(КоличествоОбращений, "ЧДЦ=; ЧН=0; ЧГ=");
			ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
			Если КоличествоОбращений = 0 Тогда
				СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No requests'"));
			Иначе	
				СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь", НСтр("ru='обращение, обращения, обращений,
					| с'"));
				СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь;НП=Ложь", НСтр("ru='обращение, обращения, обращений,
					| с'"));
				СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
				СтруктураКолонки.Вставить("Сумма", "" + СтрокаКоличествоСделок);
			КонецЕсли;
		Иначе
			СтруктураКолонки.Вставить("Название", НСтр("ru='Не разобрано';en='Not parsed'"));
			СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No requests'"));
		КонецЕсли;
		СтруктураОбновления.Вставить("Этап_НеРазобрано", СтруктураКолонки);
		СтрокаДопОтборов = "";
		Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
			Запрос.УстановитьПараметр("КаналПервичногоИнтереса", ПоискИсточникПривлечения);
			СтрокаДопОтборов = СтрокаДопОтборов + " ГДЕ
			|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса = &КаналПервичногоИнтереса
			|";
		КонецЕсли;	
		Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
			Запрос.УстановитьПараметр("ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения);
			СтрокаДопОтборов = СтрокаДопОтборов 
				+ " И ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса = &ИсточникПервичногоИнтереса
			|";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтборКанал", СтрокаДопОтборов);	
		СтрокаДопОтборов = "";
		Если НЕ ПоискКлиент.Пустая() Тогда
			СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Объект.Партнер = &Партнер
			|";
		КонецЕсли;	
		Если НЕ ПоискТипУслуги.Пустая() Тогда
			СтрокаДопОтборов = СтрокаДопОтборов + " И CRM_ОбъектыАРМ.Объект.ТипУслуги = &ТипУслуги
			|";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДопОтбор", СтрокаДопОтборов);
		Для Каждого Строка Из ТаблицаЭтапы Цикл
			СтруктураКолонки = Новый Структура;
			ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
			
			ИмяРеквизита = "Декорация_Этап_" + ИдентификаторЭтапа;
			ДекорацияНазвание = Элементы.Найти("Декорация_Этап_" + ИдентификаторЭтапа); 
			ДекорацияСумма = Элементы.Найти("ДекорацияСумма_Этап_" + ИдентификаторЭтапа); 
			
			Запрос.УстановитьПараметр("ЭтоОбращения", Ложь);
			Запрос.УстановитьПараметр("СостояниеИнтереса", Строка.СписокСостояний);
			
			// BSLLS:CreateQueryInCycle-off
			Выборка = Запрос.Выполнить().Выбрать();
			// BSLLS:CreateQueryInCycle-on
			Если Выборка.Следующий() Тогда
				СтруктураКолонки.Вставить("Название", Строка.Ссылка.Наименование);
				СтрокаКоличествоСделок = Формат(Выборка.Количество, "ЧДЦ=; ЧН=0; ЧГ=");
				ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
				Если Выборка.Количество = 0 Тогда
					СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
					СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
				Иначе
					СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
						+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
						| м'"));
					СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") + ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса,
						| интересов,
						| м'"));
					СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
					СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
					СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
					СтруктураКолонки.Вставить("Сумма", "" + СтрокаКоличествоСделок);
					СтруктураКолонки.Вставить("Сумма1", ?(Выборка.Сумма = NULL, "0", Формат(Выборка.Сумма,
						 "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " 
						+ ВалютаПредставление));
				КонецЕсли;
			Иначе
				СтруктураКолонки.Вставить("Название", Строка.Ссылка.Наименование);
				СтруктураКолонки.Вставить("Сумма", НСтр("ru='Нет интересов';en='No Lead'"));
				СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
			КонецЕсли;	
			СтруктураОбновления.Вставить("Этап_" + ИдентификаторЭтапа, СтруктураКолонки);
		КонецЦикла;	
		
		СтруктураКолонки = Новый Структура;
		//ТаблицаНеудачноСвернуто.Очистить();
		Запрос.УстановитьПараметр("СостояниеИнтереса", НеудачноеЗавершениеСценария(ВоронкаПродаж));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураКолонки.Вставить("Название", НСтр("ru='Неудачно';en='Unsuccessfully'"));
			СтрокаКоличествоСделок = Формат(Выборка.Количество, "ЧДЦ=; ЧН=0; ЧГ=");
			ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
			Если Выборка.Количество = 0 Тогда
				СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
				СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
			Иначе
				СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
					| м'"));
				СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса, интересов,
					| м'"));
				СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
				СтруктураКолонки.Вставить("Сумма", "" + СтрокаКоличествоСделок);
				СтруктураКолонки.Вставить("Сумма1", ?(Выборка.Сумма = NULL, "0", Формат(Выборка.Сумма,
					 "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " 
					+ ВалютаПредставление));
			КонецЕсли;
		Иначе
			СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
			СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
		КонецЕсли;	
		//СтрокаТаблицыСвернуто = ТаблицаНеудачноСвернуто.Добавить();
		//СтрокаТаблицыСвернуто.Заголовок = НСтр("ru='Завершено неудачно';en='Completed Unsuccessfully'");
		//СтрокаТаблицыСвернуто.Сумма = СтруктураКолонки.Сумма+" "+СтруктураКолонки.Сумма1;
		//СтрокаТаблицыСвернуто.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
		СтруктураОбновления.Вставить("Этап_Неудачно", СтруктураКолонки);
		
		СтруктураКолонки = Новый Структура;
		//ТаблицаУспешноСвернуто.Очистить();
		Запрос.УстановитьПараметр("СостояниеИнтереса", УспешноеЗавершениеСценария(ВоронкаПродаж));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураКолонки.Вставить("Название", НСтр("ru='Успешно';en='Done'"));
			СтрокаКоличествоСделок = Формат(Выборка.Количество, "ЧДЦ=; ЧН=0; ЧГ=");
			ПоследняяЦифра = Прав(СтрокаКоличествоСделок, 1);
			Если Выборка.Количество = 0 Тогда
				СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
				СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
			Иначе
				СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
					| м'"));
				СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
					+ ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса, интересов,
					| м'"));
				СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
				СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, Строка(СтрокаКоличествоСделок)));
				СтруктураКолонки.Вставить("Сумма", СтрокаЗаголовка + ":");
				СтруктураКолонки.Вставить("Сумма1", ?(Выборка.Сумма = NULL, "0", Формат(Выборка.Сумма,
					 "ЧДЦ=; ЧН=0; ЧГ=3,0") + " " 
					+ ВалютаПредставление));
			КонецЕсли;
		Иначе
			СтруктураКолонки.Вставить("Название", НСтр("ru='Успешно';en='Done'"));
			СтруктураКолонки.Вставить("Сумма", НСтр("ru='0';en='No Lead'"));
			СтруктураКолонки.Вставить("Сумма1", "0 " + ВалютаПредставление);
		КонецЕсли;	
		//СтрокаТаблицыСвернуто = ТаблицаУспешноСвернуто.Добавить();
		//СтрокаТаблицыСвернуто.Заголовок = НСтр("ru='Завершено успешно';en='Completed Successfully'");
		//СтрокаТаблицыСвернуто.Сумма = СтруктураКолонки.Сумма+" "+СтруктураКолонки.Сумма1;
		//СтрокаТаблицыСвернуто.ПустаяЯчейка = БиблиотекаКартинок.CRM_КнопкаРазвернуть;
		СтруктураОбновления.Вставить("Этап_Успешно", СтруктураКолонки);
	КонецЕсли;	
	
	СтруктураОбновленияКолонок = СтруктураОбновления; 
	Для Каждого ЭлементСтруктуры Из СтруктураОбновления Цикл
		СтруктураЗаголовка = ЭлементСтруктуры.Значение;
		НазваниеЭтапа = ЭлементСтруктуры.Ключ;
		Попытка
			// Если СтруктураЗаголовка.Свойство("Сумма1") Тогда
			//	Элементы["ГруппаСтраница_"+НазваниеЭтапа].Заголовок = СтруктураЗаголовка.Название+"; "
				//+СтруктураЗаголовка.Сумма+"; "
				//+СтруктураЗаголовка.Сумма1;
			// Иначе
				Элементы["ГруппаСтраница_" + НазваниеЭтапа].Заголовок = СтруктураЗаголовка.Название + "; " 
					+ СтруктураЗаголовка.Сумма;
			//КонецЕсли;
		Исключение
			НазваниеЭтапа = СтрЗаменить(НазваниеЭтапа, "Этап_", "");
			// Если СтруктураЗаголовка.Свойство("Сумма1") Тогда
			//	Элементы["ГруппаСтраница_"+НазваниеЭтапа].Заголовок = СтруктураЗаголовка.Название+"; "
				//+СтруктураЗаголовка.Сумма+"; "
				//+СтруктураЗаголовка.Сумма1;
			// Иначе
				Элементы["ГруппаСтраница_" + НазваниеЭтапа].Заголовок = СтруктураЗаголовка.Название + "; " 
					+ СтруктураЗаголовка.Сумма;
			//КонецЕсли;
		КонецПопытки;
		Для Каждого ЭлементСтруктурыНадписи Из СтруктураЗаголовка Цикл
			Если Элементы.Найти("Декорация_" + ЭлементСтруктуры.Ключ + "_" 
				+ ЭлементСтруктурыНадписи.Ключ) = Неопределено Тогда Продолжить; КонецЕсли;
			Элементы["Декорация_" + ЭлементСтруктуры.Ключ + "_" 
				+ ЭлементСтруктурыНадписи.Ключ].Заголовок = ЭлементСтруктурыНадписи.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьЭтапыВоронкиНаСервере()
	МассивРеквизитов = Новый Массив;
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивРеквизитов.Добавить(ИмяРеквизита);
		
	КонецЦикла;
	
	МасиивКУдалению = Новый Массив;
	Для Каждого СтарыйЭлемент Из Элементы.ГруппаСтраницыМобильныйКлиент.ПодчиненныеЭлементы Цикл
		Если СтарыйЭлемент.Имя = "ГруппаСтраница_НеРазобрано" Или
			СтарыйЭлемент.Имя = "ГруппаСтраница_Успешно" Или
			СтарыйЭлемент.Имя = "ГруппаСтраница_Неудачно" Тогда
			Продолжить;
		КонецЕсли;	
		МасиивКУдалению.Добавить(СтарыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтарыйЭлемент Из МасиивКУдалению Цикл
		Элементы.Удалить(СтарыйЭлемент);
	КонецЦикла;	
	
	ИзменитьРеквизиты(, МассивРеквизитов);
	// если реквизит создан ранее меняем его видимость на форме
КонецПроцедуры

&НаСервере
Процедура ВоронкаПродажПриИзмененииНаСервере()
	
	Элементы.ОткрытьНастройкуСценария.Видимость = РольДоступна("ПолныеПрава")
		 И ЗначениеЗаполнено(ВоронкаПродаж.СценарийИнтереса);
	
	УдалитьЭтапыВоронкиНаСервере();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_ВоронкиПродажСостав.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Выведено
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	|ГДЕ
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель = &ВоронкаПродаж
	|	И CRM_ВоронкиПродажСостав.ТочкаМаршрута ССЫЛКА Справочник.CRM_СостоянияИнтересов
	|	И НЕ CRM_ВоронкиПродажСостав.Ссылка.ПометкаУдаления
	|	И НЕ CRM_ВоронкиПродажСостав.ТочкаМаршрута.ПометкаУдаления
	|	И НЕ CRM_ВоронкиПродажСостав.ТочкаМаршрута.Завершено
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ВоронкиПродажСостав.Ссылка.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("ВоронкаПродаж", ВоронкаПродаж);
	ТаблицаЭтапы.Очистить();
	ТабВоронка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементВоронки Из ТабВоронка Цикл
		Стр = ТаблицаЭтапы.Добавить();
		Стр.Ссылка = ЭлементВоронки.Ссылка;
		Стр.Выведено = ЭлементВоронки.Выведено;
		Спс = Новый СписокЗначений;
		Для Каждого Строка Из ЭлементВоронки.Ссылка.Состав Цикл
			Спс.Добавить(Строка.ТочкаМаршрута);	
		КонецЦикла;	
		Стр.СписокСостояний = Спс;
	КонецЦикла;	
	ДобавитьЭтапыВоронкиНаСервере();
	
	НастройкиШирины = ХранилищеОбщихНастроек.Загрузить("МоиПродажиНастройкиШириныКолонок");
	Если НастройкиШирины = Неопределено Тогда
		ШиринаКолонокКанбан = 30;
	Иначе
		НастройкиШирины.Свойство("Ширина" + СтрЗаменить(Строка(ВоронкаПродаж.УникальныйИдентификатор()),
			 "-", ""), ШиринаКолонокКанбан);
		Если ШиринаКолонокКанбан = 0 Тогда
			НастройкиШирины.Свойство("ОбщаяНастройка", ШиринаКолонокКанбан);
		КонецЕсли;
	КонецЕсли;
	УстановитьШиринуКолонокКанбанСервер();
	ИзменитьКонтекстноеМенюЭтапов();
	//Элементы.НастройкаСценария.Видимость = НЕ ВоронкаПродаж.СценарийИнтереса.Пустая();
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока)
	
	ЭтоCRM_ОбъектыАРМ = ТипЗнч(ВыбраннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.CRM_ОбъектыАРМ");
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Объект", ?(ЭтоCRM_ОбъектыАРМ, ВыбраннаяСтрока.Объект, ВыбраннаяСтрока.Ссылка));
	
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаСервере
Функция ПолучитьЭтапВоронки(ИДЭтапа)
	Возврат Справочники.CRM_ВоронкиПродаж.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДЭтапа));
КонецФункции

&НаСервере
Функция ПолучитьОбъектЗаписи(ВыбраннаяСтрока)
	
	СтруктураОбъекта = ПолучитьСтруктуруОбъекта(ВыбраннаяСтрока);
	Возврат СтруктураОбъекта.Объект;
	
КонецФункции

&НаСервере
Функция ПолучитьСруктуруПереноса(ИДЭтапа, ВыбраннаяСтрока)
	СтруктураОбъекта = Новый Структура;
	Если ИДЭтапа <> "" Тогда
		СтруктураОбъекта.Вставить("Этап", ПолучитьЭтапВоронки(ИДЭтапа));
	КонецЕсли;
	СтруктураОбъекта.Вставить("Объект", ПолучитьОбъектЗаписи(ВыбраннаяСтрока));
	СтруктураОбъекта.Вставить("СостояниеИнтереса", ВыбраннаяСтрока.СостояниеИнтереса);
	Возврат СтруктураОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСостоянияИнтересаПоВоронке(ЭтапВоронки, СостояниеИнтереса = Неопределено)
	СписокСостояний = Новый СписокЗначений;
	Для Каждого СтрокаТЧ Из ЭтапВоронки.Состав Цикл
		Если ТипЗнч(СтрокаТЧ.ТочкаМаршрута) = Тип("СправочникСсылка.CRM_СостоянияИнтересов")
				И (НЕ ЗначениеЗаполнено(СостояниеИнтереса) ИЛИ СтрокаТЧ.ТочкаМаршрута.Родитель = СостояниеИнтереса.Родитель) Тогда
			СписокСостояний.Добавить(СтрокаТЧ.ТочкаМаршрута);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокСостояний;
КонецФункции

&НаСервере
Функция ОткрыватьФормуПереносаИнтереса(Состояние, Интерес, Задача)
	
	СостояниеИнтереса = ?(ТипЗнч(Состояние) = Тип("Структура"), Состояние.Состояние, Состояние);
	
	УказыватьДостигнутыйРезультат = Ложь;
	Если ЗначениеЗаполнено(Задача) Тогда
		НастройкиЭтапа = CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьНастройкиЭтапа(Задача);
		УказыватьДостигнутыйРезультат = НастройкиЭтапа.ЗапрашиватьРезультатВыполненияПриЗавершении;
	ИначеЕсли СостояниеИнтереса.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Интерес,
				 ТипАктивности,
				 СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
	КонецЕсли;
	
	ПроверяемыеРеквизитыИнтереса =
		CRM_КонтрольЗаполненностиРеквизитовОбъектовПовтИсп.ПроверяемыеРеквизитыИнтересаВСостоянии(СостояниеИнтереса);
	
	ОграничитьОтветственного = ЗначениеЗаполнено(СостояниеИнтереса) И НЕ СостояниеИнтереса.РазрешитьРолевуюАдресацию
								И ТипЗнч(Интерес.Ответственный) = Тип("СправочникСсылка.РолиИсполнителей");
	
	Возврат УказыватьДостигнутыйРезультат 
				ИЛИ СостояниеИнтереса.ИнтерактивноеПланированиеАктивностей
				ИЛИ НеобходимоЗаполнитьРеквизиты(СостояниеИнтереса, ПроверяемыеРеквизитыИнтереса, Интерес)
				ИЛИ ОграничитьОтветственного;
	
КонецФункции

&НаСервере
Функция НеобходимоЗаполнитьРеквизиты(Состояние, ПроверяемыеРеквизитыИнтереса, Интерес)
	НеобходимоЗаполнитьРеквизиты = Ложь;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизитыИнтереса Цикл
			Если ТипЗнч(ПроверяемыйРеквизит) = Тип("Строка") Тогда 
				Если НЕ ЗначениеЗаполнено(Интерес[ПроверяемыйРеквизит]) Тогда
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			Иначе
				СтрДопРек = Интерес.ДополнительныеРеквизиты.Найти(Новый Структура("Свойство", ПроверяемыйРеквизит));
				Если СтрДопРек <> Неопределено Тогда
					Если НЕ ЗначениеЗаполнено(СтрДопРек.Значение) Тогда
						НеобходимоЗаполнитьРеквизиты = Истина;
						Прервать;
					КонецЕсли;
				Иначе
					НеобходимоЗаполнитьРеквизиты = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ ЗначениеЗаполнено(Интерес.Партнер) Тогда
			НеобходимоЗаполнитьРеквизиты = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат НеобходимоЗаполнитьРеквизиты;
КонецФункции

&НаСервере
Функция ПолучитьТекущуюЗадачуИнтереса(СтруктураЭтап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес", СтруктураЭтап.Объект);
	Запрос.УстановитьПараметр("CRM_СостояниеИнтереса", СтруктураЭтап.СостояниеИнтереса);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкрытьОбъектВАРМ(Ссылка)
	Если Ссылка.Пустая() ИЛИ Ссылка.CRM_СкрытьВАРМ Тогда
		Возврат;
	КонецЕсли;
	Об = Ссылка.ПолучитьОбъект();
	Об.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер", Истина);
	Об.CRM_СкрытьВАРМ = Истина;
	Об.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Успех Тогда
			Если ДополнительныеПараметры <> Неопределено Тогда
				Если ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					 ИЛИ ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок")
					ИЛИ ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					СкрытьОбъектВАРМ(ДополнительныеПараметры.Ссылка);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТаблицы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИнтересНаКлиенте(Результат, ДопПараметры)
	Если Результат <> Неопределено Тогда
		ОбработатьИнтересНаСервере(Результат, ДопПараметры);
		ОбновитьТаблицы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуМастераРегистрацииОбращения()
	ПараметрыФормы = Новый Структура("Обращение, Сценарий", "МоиПродажи",
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВоронкаПродаж,
		 "СценарийИнтереса"));
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма",
		 ВременныеПараметрыОткрытияФормы.ПараметрыФормы, ЭтотОбъект, , , ,
		 ВременныеПараметрыОткрытияФормы.ПереносИнтересаЗавершение);
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеИнтересаИнтересЗакрыт(Интерес)
	Возврат Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель);
КонецФункции

&НаСервере
Функция ПолучитьСостояниеИнтересаИнтересПотерян(Интерес)
	Возврат Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель);
КонецФункции

&НаСервере
Процедура ПерезаполнитьАРМНаСервере()
	CRM_РаботаАРМСервер.ПервоначальноеЗаполнениеАРМ();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияОтбораТегов()
	ОбновитьЗначенияОтбораТеговСервер(ОтборПодразделениеДляТегов, СписокВышестоящихПодразделений.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаСервере
Процедура ОбновитьОтборы(ВидОтборов = "Все")
	ОбновитьОтборыНаСервере(ВидОтборов);
	СформироватьЗаголовки();  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок(ЭтотОбъект);
КонецПроцедуры	

&НаСервере
Процедура ОтборПодразделениеДляТеговПриИзмененииНаСервере()
	СписокВышестоящихПодразделений.ЗагрузитьЗначения(CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ОтборПодразделениеДляТегов,
		 Истина));	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЭлементаСервер(Пометка, ИмяЭлемента)
	CRM_Теги.ИзменитьЦветЭлементаОтбора(ЭтотОбъект, Пометка, ИмяЭлемента);
КонецПроцедуры

&НаСервере
Процедура СкрытьПисьмоИзАРМНаСервере(ПричинаОтказа = Неопределено, Комментарий = "",
	 ПереноситьПисьмаВОбработанные = Истина)
	
	Если Элементы.НеРазобрано.ВыделенныеСтроки.Количество() > 0 Тогда
		
		Для Каждого  ТекСтрока Из Элементы.НеРазобрано.ВыделенныеСтроки Цикл
			Если ТекСтрока <> Неопределено Тогда
				СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
				Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ТелефонныйЗвонок")
					 ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
					ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера")
						 ИЛИ ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.CRM_Заявка") Тогда
					
					Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(СтруктураСтроки.Объект) Тогда
						
						СостояниеЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(СтруктураСтроки.Объект);
						
						Если РегистрыСведений.CRM_СостоянияЛидов.ЭтоТекущийЛид(СтруктураСтроки.Объект) Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(СтруктураСтроки.Объект,
								 Справочники.CRM_СостоянияЛидов.Отклонен, , ПричинаОтказа,
								 Комментарий); 
						ИначеЕсли СостояниеЛида <> Неопределено И СостояниеЛида.Состояние = Справочники.CRM_СостоянияЛидов.Повторный Тогда
							РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(СтруктураСтроки.Объект,
																						Справочники.CRM_СостоянияЛидов.ПовторныйОбработанный,
																						СостояниеЛида.СконвертированВОбъект); 
						Иначе
							РегистрыСведений.CRM_СостоянияЛидов.УдалитьСостояниеЛида(СтруктураСтроки.Объект); 
						КонецЕсли;
						
					КонецЕсли;
					
					Об = СтруктураСтроки.Объект.ПолучитьОбъект();
					Об.CRM_СкрытьВАРМ = Истина;
					Об.Записать();
					
					Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
						
						// Перенос в обработанные осуществляется, если учетная запись конкретного письма разрешает данное действие,
						// а при наличии необходимости задавать вопрос о переносе - на него был дан утвердительный ответ ранее на стороне Клиента:
						Если Об.УчетнаяЗапись.CRM_ПереноситьВОбработанные И ПереноситьПисьмаВОбработанные Тогда						
							Папка = CRM_УправлениеЭлектроннойПочтой.ПапкаУчетнойЗаписи(Об.УчетнаяЗапись, "Обработанные");
							Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Об.Ссылка, Папка);
							
							ПрочитанныеПисьма = Новый Массив;
							ПрочитанныеПисьма.Добавить(Об.Ссылка);
							CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(ПрочитанныеПисьма, Истина);
						КонецЕсли;
						
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЛидыВВыбранныхСтроках()
	МассивСсылок = Новый Массив;
	Для Каждого  ТекСтрока Из Элементы.НеРазобрано.ВыделенныеСтроки Цикл
		СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
		МассивСсылок.Добавить(СтруктураСтроки.Объект);
	КонецЦикла;
	Возврат РегистрыСведений.CRM_СостоянияЛидов.ЕстьЛидыВМассивеСсылок(МассивСсылок, Истина);
КонецФункции

&НаКлиенте
Процедура ВопросПриПереносеВОбработанныеЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереноситьПисьмаВОбработанные = (Результат = КодВозвратаДиалога.Да);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		СкрытьПисьмоИзАРМНаСервере(ДополнительныеПараметры.ПричинаОтказа,
			 ДополнительныеПараметры.Комментарий,
			 ПереноситьПисьмаВОбработанные);
	Иначе
		СкрытьПисьмоИзАРМНаСервере(, , ПереноситьПисьмаВОбработанные);
	КонецЕсли;
	
	Оповестить("ОбновитьАРМ", "НеРазобрано", ЭтотОбъект);
	ОбновитьТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПриПереносеВОбработанные(ДополнительныеПараметры = Неопределено)
	ТекстВопроса = НСтр("ru = 'Перенести письмо в папку обработанные?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриПереносеВОбработанныеЗавершение",
		 ЭтотОбъект,
		 ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаСервере
Функция НеобходимоЗадатьВопросПриПереносеВОбработанные()
		
	Для Каждого ТекСтрока Из Элементы.НеРазобрано.ВыделенныеСтроки Цикл
		Если ТекСтрока <> Неопределено Тогда
			СтруктураСтроки = ПолучитьСтруктуруОбъекта(ТекСтрока);
			Если ТипЗнч(СтруктураСтроки.Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				УчетнаяЗапись = СтруктураСтроки.Объект.УчетнаяЗапись;
				Если УчетнаяЗапись.CRM_ЗадаватьВопросПриПереносеВОбработанные Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
					
КонецФункции

&НаСервере
Процедура ВыбратьВоронкуПродажПоСценарию(Сценарий)
	ВоронкаПродаж = ПолучитьВоронкуПродажПоСценарию(Сценарий);
	Элементы.ВыборСценария.Заголовок = ВоронкаПродаж;
	ЭлементСписка = СписокВоронок.НайтиПоЗначению(ВоронкаПродаж);
	Если ЭлементСписка = Неопределено Тогда
		СписокВоронок.Добавить(ВоронкаПродаж);
	Иначе
		ЭлементСписка.Представление = Строка(ВоронкаПродаж);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВоронкуПродажПоСценарию(Сценарий)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ВоронкиПродаж.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_ВоронкиПродаж КАК CRM_ВоронкиПродаж
	                      |ГДЕ
	                      |	CRM_ВоронкиПродаж.Родитель = Значение(Справочник.CRM_ВоронкиПродаж.ПустаяСсылка)
	                      |	И CRM_ВоронкиПродаж.СценарийИнтереса = &СценарийИнтереса");
	Запрос.УстановитьПараметр("СценарийИнтереса", Сценарий);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДобавитьТаблицуНеРазобрано()
	ИмяРеквизита = "НеРазобрано";
	УО = ЭтотОбъект[ИмяРеквизита].УсловноеОформление.Элементы;
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Избранный");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина; // Жирный
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 211, 194));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 1; // красный
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 2; // желтый
	
	ЭлементУО = УО.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191, 238, 191));
	ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
	ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = 3; // зеленый
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЭтапыВоронкиНаСервере()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСписок,
		 "ПустаяДата", Дата('00010101'),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ПустаяДата", Дата('00010101'),
		 Истина);
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	
	ДобавитьТаблицуНеРазобрано();
	
	ИменаТаблицМассив = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		ИндексЦвета = Строка.Ссылка.ИндексЦвета;
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		Элемент = Элементы.Найти(ИмяРеквизита);
		
		ИменаТаблицМассив.Добавить(ИмяРеквизита);
		
		Если Элемент = Неопределено Тогда
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита,
				 Новый ОписаниеТипов("ДинамическийСписок"), ,
				 "Поле таблицы"));
			ИзменитьРеквизиты(МассивРеквизитов);
			
			ЭтотОбъект[ИмяРеквизита].ТекстЗапроса = "ВЫБРАТЬ
			|	CRM_ОбъектыАРМ.Объект КАК Объект,
			|	CRM_ОбъектыАРМ.Объект.КонтактноеЛицо КАК КонтактноеЛицо,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.Объект.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|			ТОГДА CRM_ОбъектыАРМ.Объект.ПотенциальныйКлиент
			|		ИНАЧЕ CRM_ОбъектыАРМ.Объект.Партнер
			|	КОНЕЦ КАК Партнер,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.Объект.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|			ТОГДА CRM_ОбъектыАРМ.Объект.ПотенциальныйКлиент.Наименование
			|		ИНАЧЕ CRM_ОбъектыАРМ.Объект.Партнер.Наименование
			|	КОНЕЦ КАК ПартнерНаименование,
			|	CRM_ОбъектыАРМ.НаименованиеАРМ КАК НаименованиеАРМ,
			|	CRM_ОбъектыАРМ.ИзмерениеАРМ КАК ИзмерениеАРМ,
			|	CRM_ОбъектыАРМ.СостояниеИнтереса КАК СостояниеИнтереса,
			|	CRM_ОбъектыАРМ.Пользователь КАК Пользователь,
			|	CRM_ОбъектыАРМ.Заголовок КАК Заголовок,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных
			|				И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|			ТОГДА 1
			|		КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодТекущих
			|				И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|			ТОГДА 2
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Просрочено,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных
			|				И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПросроченоДляСортировки,
			|	CRM_ОбъектыАРМ.ДатаДляСортировки КАК ДатаДляСортировки,
			|	CRM_ОбъектыАРМ.День КАК День,
			|	CRM_ОбъектыАРМ.Время КАК Время,
			|	CRM_ОбъектыАРМ.Избранный КАК Избранный,
			|	CRM_ОбъектыАРМ.ОписаниеИнтереса КАК ОписаниеИнтереса,
			|	"""" КАК ПустаяЯчейка,
			|	CRM_ОбъектыАРМ.Объект.ТипУслуги КАК ТипУслуги,
			|	CRM_ОбъектыАРМ.КрайнийСрок КАК КрайнийСрок,
			|	CRM_ОбъектыАРМ.КрайнийСрок КАК КрайнийСрокОкончание,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.Избранный
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Картинка,
			|	CRM_ОбъектыАРМ.Объект.Проект КАК Проект,
			|	CRM_ОбъектыАРМ.СостояниеИнтереса.ИндексЦвета КАК ИндексЦвета
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ";
			ЭтотОбъект[ИмяРеквизита].ОсновнаяТаблица = "РегистрСведений.CRM_ОбъектыАРМ";
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПустаяДата", Дата('00010101'),
				 Истина);
			
			ЭтотОбъект[ИмяРеквизита].УстановитьОбязательноеИспользование("Объект", Истина);
			ЭтотОбъект[ИмяРеквизита].УстановитьОбязательноеИспользование("Пользователь", Истина);
			
			УО = ЭтотОбъект[ИмяРеквизита].УсловноеОформление.Элементы;
			
			//ЭлементУО = УО.Добавить();
			//ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			//ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			//ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Заголовок");
			//ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Избранный");
			//ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			//ЭлементУсловия.ПравоеЗначение = Истина; //Жирный
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 211, 194));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 1; // красный
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 211, 194));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 1; // красный

			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 2; // желтый
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоЗолотистый);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 2; // желтый
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191, 238, 191));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 3; // зеленый
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(191, 238, 191));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочено");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = 3; // зеленый
			
			ГруппаСтраница = Элементы.Вставить("ГруппаСтраница_" + ИмяРеквизита, Тип("ГруппаФормы"),
				 Элементы.ГруппаСтраницыМобильныйКлиент, Элементы.ГруппаСтраница_Успешно);
			ГруппаСтраница.Вид = ВидГруппыФормы.Страница;
			ГруппаСтраница.Заголовок = Строка.Ссылка.Наименование;
			ГруппаСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаСтраница.РастягиватьПоГоризонтали = Истина;
			
			ГруппаЭлемент = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтраница);
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
			ГруппаЭлемент.РастягиватьПоГоризонтали = Истина;
			ГруппаЭлемент.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Авто;
						
			ДекорацияНазвание = Элементы.Добавить("Декорация_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлемент);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Заголовок = Строка.Ссылка.Наименование;
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ДекорацияНазвание.Подсказка = Строка.Ссылка.Наименование;
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.РастягиватьПоГоризонтали = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 13, Ложь);
			
			ГруппаНадписи = Элементы.Добавить("Группа_" + ИмяРеквизита + "_Надписи", Тип("ГруппаФормы"), ГруппаЭлемент);
			ГруппаНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаНадписи.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ГруппаНадписи.РастягиватьПоГоризонтали = Истина;
			ГруппаНадписи.ОтображатьЗаголовок = Ложь;
			ГруппаНадписи.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;			
			
			ДекорацияСумма = Элементы.Добавить("Декорация_" + ИмяРеквизита + "_Сумма", Тип("ДекорацияФормы"), ГруппаНадписи);
			ДекорацияСумма.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияСумма.Заголовок = Строка.Ссылка.Наименование;
			ДекорацияСумма.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			ДекорацияСумма.РастягиватьПоГоризонтали = Истина;
			ДекорацияСумма.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Ложь);
			
			ДекорацияСумма = Элементы.Добавить("Декорация_" + ИмяРеквизита + "_Сумма1", Тип("ДекорацияФормы"), ГруппаНадписи);
			ДекорацияСумма.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияСумма.Заголовок = Строка.Ссылка.Наименование;
			ДекорацияСумма.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ДекорацияСумма.РастягиватьПоГоризонтали = Истина;
	      	ДекорацияСумма.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
			
			ГруппаТаблица = Элементы.Добавить("ГруппаТаблица_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
			ГруппаТаблица.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТаблица.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТаблица.ОтображатьЗаголовок = Ложь;
			ГруппаТаблица.РастягиватьПоГоризонтали = Истина;
			ГруппаТаблица.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ДекорацияЦвет = Элементы.Добавить("ДекорацияЦвет_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаТаблица);
			ДекорацияЦвет.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияЦвет.Заголовок = "";
			ДекорацияЦвет.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
			ДекорацияЦвет.РастягиватьПоГоризонтали = Истина;
			ДекорацияЦвет.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияЦвет.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Истина);
			ДекорацияЦвет.ЦветФона = СписокЦветов.Получить(ИндексЦвета).Цвет;
			
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаТаблица);
			Элемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
			Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			Элемент.РежимВыбора = Истина;
			Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
			Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
			Элемент.КоманднаяПанель.Видимость = Ложь;
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита + ".Картинка";
			Элемент.КартинкаСтрок  = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
			Элемент.РазрешитьПеретаскивание = Истина;
			Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ЧередованиеЦветовСтрок = Ложь;
			Элемент.Видимость = Истина;
			Элемент.Шапка = Ложь;
			Элемент.ГоризонтальныеЛинии = Истина;
			Элемент.ВертикальныеЛинии = Ложь;
			Элемент.УстановитьДействие("Выбор", "ТаблицаОбработкаВыбор");
			Элемент.УстановитьДействие("Перетаскивание", "ТаблицаОбработкаПеретаскивание");
			Элемент.УстановитьДействие("ПередУдалением", "ТаблицаОбработкаПередУдалением");
			Элемент.УстановитьДействие("НачалоПеретаскивания", "ТаблицаОбработкаНачалоПеретаскивания");
			Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТаблицаОбработкаПроверкаПеретаскивания");
			Элемент.УстановитьДействие("ПередНачаломДобавления", "НеРазобраноПередНачаломДобавления");
			Элемент.УстановитьДействие("ПриАктивизацииСтроки", "НеРазобраноПриАктивизацииСтроки");
			Элемент.Заголовок = Строка.Ссылка.Наименование;
			Элемент.КонтекстноеМеню.Видимость = Ложь;
			Для Каждого ЭлементМеню Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				ЭлементМеню.Видимость = Ложь;
			КонецЦикла;
			СформироватьКонтекстноеМеню(Элемент.Имя);
			Элемент.ТолькоПросмотр = Истина;
			Элемент.Высота = 4;
			Элемент.РастягиватьПоВертикали = Истина;
			Элемент.АвтоМаксимальнаяВысота = Ложь;
			Элемент.АвтоМаксимальнаяШирина = Ложь;
			Элемент.РастягиватьПоГоризонтали = Истина;
			Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
			
			ГруппаСтрокаГлавная = Элементы.Добавить("ГруппаСтрокаГлавная_" + ИмяРеквизита,
				 Тип("ГруппаФормы"), Элементы[ИмяРеквизита]);
			ГруппаСтрокаГлавная.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаСтрокаГлавная.Группировка = ГруппировкаКолонок.Вертикальная;
			ГруппаСтрокаГлавная.РастягиватьПоГоризонтали = Истина;
			ГруппаСтрокаГлавная.ОтображатьЗаголовок = Ложь;
			
			ГруппаСтрока = Элементы.Добавить("ГруппаСтрока_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрокаГлавная);
			ГруппаСтрока.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаСтрока.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаСтрока.РастягиватьПоГоризонтали = Истина;
			ГруппаСтрока.ОтображатьЗаголовок = Ложь;
			
			ГруппаКолонок = Элементы.Добавить("ГруппаКолонок_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаСтрока);
			ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Группировка = ГруппировкаКолонок.Вертикальная;
			ГруппаКолонок.РастягиватьПоГоризонтали = Истина;
			ГруппаКолонок.ОтображатьЗаголовок = Ложь;
			
			КолонкаНаименование = Элементы.Добавить("Заголовок" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Заголовок";
			КолонкаНаименование.ЦветФона = Новый Цвет(245, 245, 245);
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина, Ложь, Ложь);
			КолонкаНаименование.РастягиватьПоГоризонтали = Истина;
			
			ГруппаКолонок1 = Элементы.Добавить("ГруппаКолонок1_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонок);
			ГруппаКолонок1.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок1.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаКолонок1.РастягиватьПоГоризонтали = Истина;
			ГруппаКолонок1.ОтображатьЗаголовок = Ложь;
			
			КолонкаПартнер = Элементы.Добавить("Партнер" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок1);
			КолонкаПартнер.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаПартнер.ПутьКДанным = ИмяРеквизита + ".Партнер";
			КолонкаПартнер.ОтображатьВШапке = Ложь;
			КолонкаПартнер.ЦветФона = Новый Цвет(245, 245, 245);
			КолонкаПартнер.РастягиватьПоГоризонтали = Истина;
			//
			КолонкаОписание = Элементы.Добавить("ОписаниеИнтереса" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок1);
			КолонкаОписание.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаОписание.ПутьКДанным = ИмяРеквизита + ".ОписаниеИнтереса";
			КолонкаОписание.ОтображатьВШапке = Ложь;
			КолонкаОписание.ЦветФона = Новый Цвет(245, 245, 245);
			КолонкаОписание.РастягиватьПоГоризонтали = Ложь;
			
			КолонкаПросрочено = Элементы.Добавить("Просрочено" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрока);
			КолонкаПросрочено.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаПросрочено.ПутьКДанным = ИмяРеквизита + ".Просрочено";
			КолонкаПросрочено.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Ложь, Ложь, Ложь);
			КолонкаПросрочено.ОтображатьВШапке = Ложь;
			КолонкаПросрочено.Ширина = 1;
			КолонкаПросрочено.РастягиватьПоГоризонтали = Ложь;
			
			КолонкаРазделитель = Элементы.Добавить("Ячейка" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаСтрокаГлавная);
			КолонкаРазделитель.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаРазделитель.ПутьКДанным = ИмяРеквизита + ".ПустаяЯчейка";
			КолонкаРазделитель.ОтображатьВШапке = Ложь;
			КолонкаРазделитель.ЦветФона = Новый Цвет(255, 255, 255);
			КолонкаРазделитель.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 1, Ложь, Ложь, Истина);
			КолонкаРазделитель.Высота = 1;
			КолонкаРазделитель.РастягиватьПоГоризонтали = Истина;
			КолонкаРазделитель.Заголовок = НСтр("ru = 'Разделитель (пустая ячейка)'");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "Пользователь", ТекущийПользователь,
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПериодТекущих", КонецДня(ТекущаяДатаСеанса()),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПустаяДата", Дата('00010101'),
				 Истина);
			Элемент = Элементы.Найти("Группа_" + ИмяРеквизита);
			Элемент.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИменаТаблиц = Новый ФиксированныйМассив(ИменаТаблицМассив);
	
	// Если ТаблицаЭтапы.Количество() > 0 Тогда
	//	ПоследняяСтрока = ТаблицаЭтапы[ТаблицаЭтапы.Количество()-1];
	//	ИдентификаторЭтапа = СтрЗаменить(Строка(ПоследняяСтрока.Ссылка.УникальныйИдентификатор()),"-","_");
	//	ИмяРеквизита = "Этап_"+ИдентификаторЭтапа;
	//	ДобавитьСвернутыеТаблицы(Элементы["Группа_"+ИмяРеквизита]);
	// Иначе
	//	ДобавитьСвернутыеТаблицы(Элементы.ГруппаСоставКолонок);
	//КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно");
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивТаблиц.Добавить(ИмяРеквизита);
	КонецЦикла;
	//ФиксированнаяШирина = (МассивТаблиц.Количество() > 6);
	// Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
	//	Если ФиксированнаяШирина тогда
	//		Элементы[ИмяТаблицы].РастягиватьПоГоризонтали = Ложь;
	//	Иначе
	//		Элементы[ИмяТаблицы].РастягиватьПоГоризонтали = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["НеРазобрано"],
		 "Пользователь", ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["ТаблицаНеудачно"],
		 "Пользователь", ТекущийПользователь,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект["ТаблицаУспешно"],
		 "Пользователь", ТекущийПользователь,
		 Истина);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСостоянийСервер(Интерес, Задача, ЭтапВоронки = Неопределено)
	
	СписокСостояний = Новый СписокЗначений;
		
	РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
	РазрешеноДосрочноеЗавершение	= Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
	
	НеФормируемЗадачи = Ложь;
	CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
	
	СоответствиеЭтаповВариантам = Новый Соответствие;
	
	СписокЭтапов = Новый СписокЗначений;
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
	
	МассивТочекЗавершения = Новый Массив;
	
	Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
		
		СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			ВариантВыполнения = 0;
			МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
				 Задача.CRM_ТочкаМаршрута, , ,
				 ВариантВыполнения);
			Для Каждого СтруктураИсхточки Из МассивИсходящихТочек Цикл
				СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка, ВариантВыполнения);
				МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
					МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				ВариантВыполнения = ЭлементСписка.Значение;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс,
					 Задача.CRM_ТочкаМаршрута, , ,
					 ВариантВыполнения);
				Для Каждого СтруктураИсхточки Из МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка, ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес", Интерес);
	Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	ТекстЗапроса = "ВЫБРАТЬ
	|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
	|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
	|ПОМЕСТИТЬ НастройкиЭтапов
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	|ГДЕ
	|	CRM_БизнесПроцесс.Интерес = &Интерес
	|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
	Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
	|	CRM_СостоянияИнтересов.Наименование КАК Наименование,
	|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
	|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
	|ГДЕ
	|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
	|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
	|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВероятностьСделки";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Этап) Тогда
			
			Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
				ВариантВыполнения = Неопределено;
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",
					 Выборка.Ссылка, Выборка.Этап, ?(ВариантВыполнения = Неопределено, 0, ВариантВыполнения),
					 Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), " 
					+ Выборка.Этап);
			Иначе
				ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
				СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",
					 Выборка.Ссылка, Выборка.Этап, ?(ВариантВыполнения = Неопределено, 0, ВариантВыполнения),
					 (НеФормируемЗадачи
					 И РазрешеноПеремещатьЭтап));
				СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), " 
					+ Выборка.Этап);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНеудачныйВариант = Ложь;
	Для Каждого ТочкаЗавершения Из МассивТочекЗавершения Цикл
		ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
		Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель),
			Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель));
		СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход", Состояние,
			 ТочкаЗавершения, ?(ВариантВыполнения = Неопределено, 0, ВариантВыполнения), (НеФормируемЗадачи
			 И РазрешеноПеремещатьЭтап));
		СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), " 
			+ ТочкаЗавершения);
		Если НЕ ЕстьНеудачныйВариант Тогда
			ЕстьНеудачныйВариант =
				(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
		КонецЕсли;
	КонецЦикла;
	
	Если РазрешеноПеремещатьЭтап Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Задача.БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии", Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("МассивЭтапов", МассивТочекЗавершения);
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута КАК ТочкаМаршрута
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
		|ГДЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
		Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВариантВыполнения	= Неопределено;
			Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель),
			Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель));
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход", Состояние,
				 Выборка.ТочкаМаршрута, ?(ВариантВыполнения = Неопределено, 0, ВариантВыполнения),
				 Истина);
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), " 
				+ Выборка.ТочкаМаршрута);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант =
					(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
		ВариантВыполнения	= Неопределено;
		Состояние			= Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(Интерес.СостояниеИнтереса.Родитель);
		СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход", Состояние,
			 Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения = Неопределено, 0,
			 ВариантВыполнения),
			 Истина);
		СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%),
			| Досрочное завершение");
	КонецЕсли;
	
	Если ЭтапВоронки <> Неопределено Тогда
		СписокСостоянийОтбор = Новый СписокЗначений;
		Для Каждого ЭлементСписокаСостояний Из СписокСостояний Цикл
			Если НЕ ЭтапВоронки.Состав.Найти(ЭлементСписокаСостояний.Значение.Состояние, "ТочкаМаршрута") = Неопределено Тогда
				СписокСостоянийОтбор.Добавить(ЭлементСписокаСостояний.Значение, ЭлементСписокаСостояний.Представление);
			КонецЕсли;
		КонецЦикла;
		Возврат СписокСостоянийОтбор;
	Иначе		
		Возврат СписокСостояний;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборСостоянияЗавершение(ДополнительныеПараметры)
	ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект,
		 Новый Структура("Ссылка, ТекущееИзмерение, НовоеИзмерение, Период", ДополнительныеПараметры.Ссылка,
		 ДополнительныеПараметры.ТекущееИзмерение, ДополнительныеПараметры.НовоеИзмерение,
		 ДополнительныеПараметры.НачалоПериода));
	ПараметрыФормы = Новый Структура;
	Если ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ПараметрыФормы.Вставить("ТелефонныйЗвонок", ДополнительныеПараметры.Ссылка);
		МассивСсылок = Новый Массив;
		ПараметрыФормы.Вставить("МассивСсылок",	МассивСсылок);		
		ПараметрыФормы.Вставить("НомерТелефона",
			 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ДополнительныеПараметры.Ссылка,
			 "АбонентКакСвязаться"));
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СообщениеМессенджера", ДополнительныеПараметры.Ссылка);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.Ссылка) = Тип("ДокументСсылка.CRM_Заявка") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заявка", ДополнительныеПараметры.Ссылка);	
	Иначе
		ПараметрыФормы.Вставить("ПисьмоВходящее", ДополнительныеПараметры.Ссылка);
		ПараметрыФормы.Вставить("ПереданаТолькоСсылкаПисьма", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Сценарий",
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВоронкаПродаж,
		 "СценарийИнтереса"));
	ВременныеПараметрыОткрытияФормы = Новый Структура("ПараметрыФормы, ПереносИнтересаЗавершение",
		 ПараметрыФормы,
		 ПереносИнтересаЗавершение);
	ПодключитьОбработчикОжидания("ОткрытьФормуМастераРегистрацииОбращения", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтересНаСервере(Результат, ДопПараметры)
	
	// обработка интереса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	Интерес = ДопПараметры.Ссылка;
	Запрос.УстановитьПараметр("Интерес", Интерес);
	ВыбранныеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
	
	НачатьТранзакцию();
	
	Попытка
		СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		Состояние = Результат.Состояние;
		СостояниеИнтереса = ?(ТипЗнч(Состояние) = Тип("Структура"), Состояние.Состояние, Состояние);
		
		Задача = ДопПараметры.Задача;
		Если ЗначениеЗаполнено(Задача) И ВыбранныеЗадачи.Найти(Задача) <> Неопределено Тогда
			ВариантВыполнения = Состояние.ВариантВыполнения;
			Этап = Состояние.Этап;
			Если Состояние.ЭтоПереход Тогда
				Если (СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
					 И Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
					ИЛИ Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
					
					ПараметрыДосрочногоЗавершения = Новый Структура();
					ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				, Истина);
					ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,
						 Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
					ПараметрыДосрочногоЗавершения.Вставить("Задача"							, Задача);
					
					Если Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
						ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	, Задача.CRM_ТочкаМаршрута);
						ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,
							 Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
					Иначе
						ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	, Этап);
						ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			, Этап.ВариантЗавершения);
					КонецЕсли;
					
					CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
				Иначе
					CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(Задача.БизнесПроцесс, Этап);
				КонецЕсли;
			Иначе
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				ЗадачаОбъект.CRM_ВариантВыполнения = ВариантВыполнения;
				Попытка
					ЗадачаОбъект.CRM_ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
					ВариантВыполнения,
					ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
				Исключение
					ЗадачаОбъект.CRM_ВариантВыполненияСтрокой = "";
				КонецПопытки;
				ЗадачаОбъект.Записать();
				
				CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Задача, , Неопределено);
			КонецЕсли;
			
			Если НЕ Задача.БизнесПроцесс.Завершен Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Интерес", Интерес);
				Запрос.УстановитьПараметр("CRM_СостояниеИнтереса", СостояниеИнтереса);
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка КАК Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
				|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
				|	И НЕ ЗадачаИсполнителя.Выполнена";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СсылкаНаЗадачу = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Интерес.СостояниеИнтереса <> СостояниеИнтереса Тогда
			РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивностиИнтересаПоНастройкамСостояния(Интерес,
				СостояниеИнтереса);
		
			CRM_ИнтересыСервер.СоздатьАвтоВзаимодействияПоИнтересу(Интерес, СостояниеИнтереса,
				ТекущийПользователь);
			
			Если Не ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
				ИнтересОбъект = Интерес.ПолучитьОбъект();
				ИнтересОбъект.СостояниеИнтереса = СостояниеИнтереса;
				ИнтересОбъект.Завершен = СостояниеИнтереса.Завершено;
				ИнтересОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
				Если Результат.Свойство("Партнер") Тогда
					ИнтересОбъект.Партнер = Результат.Партнер;
					ИнтересОбъект.КонтактноеЛицо = Результат.КонтактноеЛицо;
				КонецЕсли;
				ИнтересОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если Не РегистрыСведений.CRM_ЗапланированныеАктивности.ПроверитьОбязательноеПланированиеАктивности(Интерес,
			СостояниеИнтереса, ТекстСообщения) Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение	
		ОтменитьТранзакцию();
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуПериодаОтбора(ВариантПериода, Элемент)
	Результат = Ложь;
	
	Если ВариантПериода = "ПроизвольныйПериод" Тогда
		НомерПериода = 0;
	ИначеЕсли ВариантПериода = "Сегодня" Тогда
		НомерПериода = 1;
	ИначеЕсли ВариантПериода = "3 дня" Тогда
		НомерПериода = 2;
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		НомерПериода = 3;
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		НомерПериода = 4;
	КонецЕсли;
	
	Период = ОтборСозданы[НомерПериода];
	ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
	// Если Элемент<>Неопределено Тогда
	//	Если НомерПериода = 0 Тогда
	//		Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
	//			Период.Пометка = Истина;
	//		Иначе
	//			Период.Пометка = Ложь;
	//		КонецЕсли;
	//	Иначе
	//		Период.Пометка = Не Период.Пометка;
	//	КонецЕсли;
	//	
	//	// Вариант периода может быть выбран только один.
	//	Для Индекс = 0 По ОтборСозданы.Количество()-1 Цикл
	//		
	//		ЭлементСпискаПериодов = ОтборСозданы[Индекс];
	//		Если ЭлементСпискаПериодов <> Период Тогда
	//			ЭлементСпискаПериодов.Пометка = Ложь;
	//		КонецЕсли;
	//		
	//		Если Индекс = 0 Тогда
	//			ЭлементОтображенияПериода = Элементы.ОтборСозданыПроизвольныйПериод;
	//			Если НЕ ЭлементСпискаПериодов.Пометка Тогда
	//				ЭлементСпискаПериодов.Значение = Новый СтандартныйПериод;
	//			КонецЕсли;
	//		ИначеЕсли Индекс = 1 Тогда
	//			ЭлементОтображенияПериода = Элементы.ОтборСозданыСегодня;
	//		ИначеЕсли Индекс = 2 Тогда
	//			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗа3Дня;
	//		ИначеЕсли Индекс = 3 Тогда
	//			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаНеделю;
	//		ИначеЕсли Индекс = 4 Тогда
	//			ЭлементОтображенияПериода = Элементы.ОтборСозданыЗаМесяц;
	//		Иначе
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЭлементСпискаПериодов.Пометка Тогда
	//			Если ТипЗнч(ЭлементОтображенияПериода) <> Тип("ПолеФормы") Тогда
	//				ЭлементОтображенияПериода.ЦветФона = Новый Цвет(220, 220, 220);
	//			КонецЕсли;
	//		Иначе
	//			ЭлементОтображенияПериода.ЦветФона = Новый Цвет;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Элементы.ОтборПериод, 0);
	//	
	//КонецЕсли;
	ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
	Если ЗначениеПериода <> Неопределено Тогда
		ПредставлениеПериода = ЗначениеПериода.Представление;
	КонецЕсли;
	ОбновитьОтборы("Период");
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицы(ВидОтборов = "Все", СписокКолонок = Неопределено)
	Если ТипЗнч(СписокКолонок) = Тип("СписокЗначений") Тогда
		МассивТаблиц = Новый Массив;
		Для Каждого СтрЭтапа Из СписокКолонок Цикл
			Если СтрЭтапа.Значение = "НеРазобрано" ИЛИ СтрЭтапа.Значение = "ТаблицаНеудачно"
				 ИЛИ СтрЭтапа.Значение = "ТаблицаУспешно" Тогда
				МассивТаблиц.Добавить(СтрЭтапа.Значение);
			Иначе
				ИдентификаторЭтапа = СтрЗаменить(СтрЭтапа.Значение, "-", "_");
				
				ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
				МассивТаблиц.Добавить(ИмяРеквизита);
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить("НеРазобрано");
		МассивТаблиц.Добавить("ТаблицаНеудачно");
		МассивТаблиц.Добавить("ТаблицаУспешно");
		МассивТаблиц.Добавить("ТаблицаСписок");
		
		Для Каждого Строка Из ТаблицаЭтапы Цикл
			ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
			
			ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
			МассивТаблиц.Добавить(ИмяРеквизита);
		КонецЦикла;
	КонецЕсли;
	Если ВидОтборов = "Просроченные" ИЛИ ВидОтборов = "Все" Тогда
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ЭлементыПользовательскихНастроек = ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
			Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
				Если ТипЗнч(Элемент) = ТипЗнч(ЭтотОбъект[ИмяТаблицы].КомпоновщикНастроек.Настройки.Порядок) Тогда
					Элемент.Элементы.Очистить();
					Если ИмяТаблицы <> "НеРазобрано" И ИмяТаблицы <> "ТаблицаНеудачно" И ИмяТаблицы <> "ТаблицаУспешно" Тогда
						УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Просрочено");
						УсловиеСортировки.ТипУпорядочивания = ?(ОтборВключатьПросроченные = 2,
							 НаправлениеСортировкиКомпоновкиДанных.Возр,
							 НаправлениеСортировкиКомпоновкиДанных.Убыв);
						УсловиеСортировки.Использование = Истина;
					КонецЕсли;
					УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
					УсловиеСортировки.Использование = Истина;
					УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
					Если ИмяТаблицы = "НеРазобрано" ИЛИ ИмяТаблицы = "ТаблицаУспешно" ИЛИ ИмяТаблицы = "ТаблицаНеудачно" Тогда
						УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
					Иначе
						УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
					КонецЕсли;	
				КонецЕсли;    
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	СформироватьЗаголовки(СписокКолонок);  
	ОбновитьКолонкиНаКлиенте(СтруктураОбновленияКолонок);
	СформироватьЗаголовок(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПериодическоеОбновлениеСписков()
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("НеРазобрано");
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Обновить();
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКолонкиНаКлиенте(СтруктураОбновления)
	Для Каждого ЭлементСтруктуры Из СтруктураОбновления Цикл
		Для Каждого ЭлементСтруктурыНадписи Из ЭлементСтруктуры.Значение Цикл
			Если Элементы.Найти("Декорация_" + ЭлементСтруктуры.Ключ + "_" 
				+ ЭлементСтруктурыНадписи.Ключ) = Неопределено Тогда Продолжить; КонецЕсли;
			Элементы["Декорация_" + ЭлементСтруктуры.Ключ + "_" 
				+ ЭлементСтруктурыНадписи.Ключ].Заголовок = ЭлементСтруктурыНадписи.Значение;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьОтборыНаСервере(ВидОтборов)
	
	ОтборыУстановлены = Ложь;
	
	КоличествоФильтров = 0;
	
	МассивТаблиц = Новый СписокЗначений;
	МассивТаблиц.Добавить("НеРазобрано", "НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно", "ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно", "ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок", "ТаблицаСписок");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "СкрытьПропущенныеТелефонныеЗвонки", СкрытьПропущенныеТелефонныеЗвонки,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "СкрытьОтвеченныеТелефонныеЗвонки", СкрытьОтвеченныеТелефонныеЗвонки,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "СкрытьЗаявки", СкрытьЗаявки,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "СкрытьСообщения", СкрытьСообщения,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
		 "ОтображатьПисьма", НЕ ОтображатьПисьма,
		 Истина);
	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивТаблиц.Добавить(Строка.СписокСостояний, ИмяРеквизита);
	КонецЦикла;
	Период = ОтборСозданы.НайтиПоЗначению(ПериодОтбора);
	Если Период = Неопределено Тогда
		Период = ОтборСозданы.Добавить(ПериодОтбора);
	КонецЕсли;
	
	Если ОтборВключен Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПоискКлиент) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискПроект) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискТипУслуги) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискИсточникПривлечения) Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
				
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Если ВидОтборов = "СтрокаПоиска" ИЛИ ВидОтборов = "Все" Тогда
			Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление]);
			ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
				 НСтр("ru='Отбор по строке поиска'"),
				 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Заголовок",
					 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
					+ "%");
			КонецЕсли;	
			
			Если ИмяТаблицы.Представление = "НеРазобрано" Тогда
				Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ТекстОснования",
						 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
						+ "%");
				КонецЕсли;
			ИначеЕсли ИмяТаблицы.Представление = "ТаблицаНеудачно" ИЛИ ИмяТаблицы.Представление = "ТаблицаУспешно" Тогда	
				Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ПартнерНаименование",
						 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
						+ "%");
				КонецЕсли;
			ИначеЕсли ИмяТаблицы.Представление <> "ТаблицаСписок" Тогда	
				Если ЗначениеЗаполнено(СтрокаПоискаОтбор) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ОписаниеИнтереса",
						 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
						+ "%");
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ПартнерНаименование",
						 ВидСравненияКомпоновкиДанных.Подобно, "%" + СтрокаПоискаОтбор 
						+ "%");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		Если ВидОтборов = "Период" ИЛИ ВидОтборов = "Все" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
				 "КрайнийСрокОкончание", ПериодОтбора.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ,
				 Период.Пометка,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		КонецЕсли;	
		Если ИмяТаблицы.Представление = "НеРазобрано" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
				 "CRM_СкрытьВАРМ", Ложь,
																						ВидСравненияКомпоновкиДанных.Равно, , Истина,
																						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
																				"СтрокаТелефонныйЗвонок",
																				НСтр("ru = 'Телефонный звонок'"), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
																				"СтрокаПропущенныйТелефонныйЗвонок",
																				НСтр("ru = 'Пропущенный телефонный звонок'"), Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НеРазобрано,
				 "СкрытьПовторныеОбращения", СкрытьПовторныеОбращения,
				 Истина);
			
			// Отбор по пользователям, ролям и учетным записям накладывается "каскадом":
			// если заполнен ответственный - применяется отбор по этому полю,
			// если не заполнен ответственный, применяется отбор по роли,
			// если не заполнен отбор по ответственному и роли - обращение доступно всем
			Отбор = ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление]);
			ГруппаОтбораИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
				 НСтр("ru = 'Отбор по ответственному'; en = 'Filter by Responsible'"),
				 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			ПользователиАРМ = Новый СписокЗначений;
			ПользователиАРМ.Добавить(ТекущийПользователь);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИЛИ, "Пользователь",
				 ВидСравненияКомпоновкиДанных.ВСписке, ПользователиАРМ, , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			ГруппаОтбораРоли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораИЛИ ,
				 НСтр("ru = 'Отбор по роли'; en = 'Filter by Role'"),
				 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораРоли, "Пользователь",
				 ВидСравненияКомпоновкиДанных.Равно, Справочники.Пользователи.ПустаяСсылка(), , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораРоли,
				 "CRM_РольОтветственного", ВидСравненияКомпоновкиДанных.ВСписке, РолиПользователя, , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			ГруппаОтбораДоступноВсем = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораИЛИ ,
				 НСтр("ru='Отбор Доступно всем';en='Filter Available for All'"),
				 ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораДоступноВсем, "Пользователь",
				 ВидСравненияКомпоновкиДанных.Равно, Справочники.Пользователи.ПустаяСсылка(), , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораДоступноВсем,
				 "CRM_РольОтветственного", ВидСравненияКомпоновкиДанных.Равно,
				 Справочники.РолиИсполнителей.ПустаяСсылка(), , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
				 "Пользователь", ЗначенияОтбораПоОтветственному(ТекущийПользователь),
				 ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		КонецЕсли;
		Если ИмяТаблицы.Представление <> "НеРазобрано" И ИмяТаблицы.Представление <> "ТаблицаНеудачно"
			 И ИмяТаблицы.Представление <> "ТаблицаУспешно"
			 И ИмяТаблицы.Представление <> "ТаблицаСписок" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
				 "СостояниеИнтереса", ИмяТаблицы.Значение, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
				 "Проект", ПоискПроект, ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ПоискПроект),
				 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		ИначеЕсли ЗначениеЗаполнено(ВоронкаПродаж.СценарийИнтереса) Тогда
			Если ИмяТаблицы.Представление = "ТаблицаНеудачно" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаНеудачно, "СостояниеИнтереса",
					НеудачноеЗавершениеСценария(ВоронкаПродаж), ВидСравненияКомпоновкиДанных.ВСписке,
					, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			ИначеЕсли ИмяТаблицы.Представление = "ТаблицаУспешно" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаУспешно, "СостояниеИнтереса",
					УспешноеЗавершениеСценария(ВоронкаПродаж), ВидСравненияКомпоновкиДанных.ВСписке,
					, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			ИначеЕсли ИмяТаблицы.Представление = "ТаблицаСписок" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТаблицаСписок, "СостояниеИнтереса",
					Справочники.CRM_СостоянияИнтересов.МассивСостоянийПоСценарию(ВоронкаПродаж.СценарийИнтереса), ВидСравненияКомпоновкиДанных.ВСписке,
					, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;
		КонецЕсли;
		Если ИмяТаблицы.Представление <> "НеРазобрано" Тогда
			Если ВидОтборов = "Тег" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
					 "Объект", СсылкиНаОбъектыСтегами, ВидСравненияКомпоновкиДанных.ВСписке, ,  ОтборВключен,
					 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
			КонецЕсли;		
			Если ВидОтборов = "Клиент" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
					 "Партнер", ПоискКлиент, ВидСравненияКомпоновкиДанных.Равно, ,  ЗначениеЗаполнено(ПоискКлиент),
					 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	  
			КонецЕсли;	
			Если ВидОтборов = "ТипУслуги" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
					 "ТипУслуги", ПоискТипУслуги, ВидСравненияКомпоновкиДанных.Равно, ,
					 ЗначениеЗаполнено(ПоискТипУслуги),
					 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;	
			Если ВидОтборов = "Источник" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
					 "ИсточникПервичногоИнтереса", ПоискЗначениеИсточникаПривлечения,
					 ВидСравненияКомпоновкиДанных.Равно, , ЗначениеЗаполнено(ПоискЗначениеИсточникаПривлечения),
					 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;	
			Если ВидОтборов = "Канал" ИЛИ ВидОтборов = "Все" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтотОбъект[ИмяТаблицы.Представление],
					 "КаналПервичногоИнтереса", ПоискИсточникПривлечения, ВидСравненияКомпоновкиДанных.Равно, ,
					 ЗначениеЗаполнено(ПоискИсточникПривлечения),
					 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
		ОтборыУстановлены = Истина;
		КоличествоФильтров = КоличествоФильтров + 1;
	КонецЕсли;
	Элементы.ОткрытьФильтр.Заголовок = ?(ОтборыУстановлены, НСтр("ru='Фильтр: ';en='Filter: '") 
		+ КоличествоФильтров,
		 НСтр("ru='Фильтр';en='Filter'"));
	Элементы.ОткрытьФильтр.Картинка = ?(ОтборыУстановлены, БиблиотекаКартинок.CRM_ФильтрАктивный,
		 БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	Элементы.ОткрытьФильтр.ЦветТекста = ?(ОтборыУстановлены, ЦветаСтиля.CRM_ОсновнойГолубой, Новый Цвет(77, 77, 77));
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеудачноеЗавершениеСценария(ВоронкаПродаж)
	СостояниеИнтереса = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ВоронкаПродаж.СценарийИнтереса) Тогда
		СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ВоронкаПродаж.СценарийИнтереса));
	Иначе
		ЗапросСостояний = Новый Запрос;
		ЗапросСостояний.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
		                        |ИЗ
		                        |	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
		                        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		                        |		ПО CRM_ВоронкиПродажСостав.КартаМаршрута = CRM_СостоянияИнтересов.Родитель
		                        |			И (CRM_СостоянияИнтересов.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение))
		                        |ГДЕ
		                        |	CRM_ВоронкиПродажСостав.Ссылка.Родитель = &Воронка";
		ЗапросСостояний.УстановитьПараметр("Воронка", ВоронкаПродаж);
		ВыборкаСостояний = ЗапросСостояний.Выполнить().Выбрать();
		Пока ВыборкаСостояний.Следующий() Цикл
			СостояниеИнтереса.Добавить(ВыборкаСостояний.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	Возврат СостояниеИнтереса;
КонецФункции

&НаСервереБезКонтекста
Функция УспешноеЗавершениеСценария(ВоронкаПродаж)
	СостояниеИнтереса = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ВоронкаПродаж.СценарийИнтереса) Тогда
		СостояниеИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(ВоронкаПродаж.СценарийИнтереса));
	Иначе
		ЗапросСостояний = Новый Запрос;
		ЗапросСостояний.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                        |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
		                        |ИЗ
		                        |	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
		                        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		                        |		ПО CRM_ВоронкиПродажСостав.КартаМаршрута = CRM_СостоянияИнтересов.Родитель
		                        |			И (CRM_СостоянияИнтересов.ВидСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение))
		                        |ГДЕ
		                        |	CRM_ВоронкиПродажСостав.Ссылка.Родитель = &Воронка";
		ЗапросСостояний.УстановитьПараметр("Воронка", ВоронкаПродаж);
		ВыборкаСостояний = ЗапросСостояний.Выполнить().Выбрать();
		Пока ВыборкаСостояний.Следующий() Цикл
			СостояниеИнтереса.Добавить(ВыборкаСостояний.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	Возврат СостояниеИнтереса;
КонецФункции

&НаСервере
Процедура ОбновитьЗначенияОтбораТеговСервер(Подразделение = Неопределено,
	 СписокВышестоящийхПодразделений = Неопределено,
	 ИспользоватьТегНет = Ложь)
	
	ОтборТеги.Очистить();
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы Цикл
		Если Лев(Элемент.Имя, 4) = "Тег_" Или Лев(Элемент.Имя, 11) = "СтрокаТегов" Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Теги.Ссылка КАК Ссылка,
		|	Теги.Представление КАК Представление,
		|	ВЫБОР
		|		КОГДА Теги.Владелец = &ПодразделениеПользователя
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.CRM_Теги КАК Теги
		|ГДЕ
		|	Теги.ПометкаУдаления = ЛОЖЬ
		|	И Теги.Владелец В(&СписокВышестоящийхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	Представление";
		
	Запрос.УстановитьПараметр("ПодразделениеПользователя", Подразделение);
	Запрос.УстановитьПараметр("СписокВышестоящийхПодразделений", СписокВышестоящийхПодразделений);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрДлина(Выборка.Представление) > 15 Тогда
			ПредставлениеТега = Лев(Выборка.Представление, 15) + "...";
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + 15 + 2;
		Иначе
			ПредставлениеТега = Выборка.Представление;
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + СтрДлина(ПредставлениеТега) + 2;
		КонецЕсли;
		
		СтрокаОтбораТегов = ОтборТеги.Добавить(Выборка.Ссылка, ПредставлениеТега);
		
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > 85 Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеТега) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов" + НомерСтрокиЭлементов, Тип("ГруппаФормы"),
				 Элементы.ЗначенияОтбораТеги);
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		ЭлементТег = Элементы.Добавить("Тег_" + СтрокаОтбораТегов.ПолучитьИдентификатор(), Тип("ПолеФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидПоляФормы.ПолеНадписи;
		ЭлементТег.ПутьКДанным = "ОтборТеги[" + НомерЭлемента + "].Представление";
		ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТег.Подсказка = Выборка.Представление;
		ЭлементТег.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = СтрДлина(ПредставлениеТега);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если ИспользоватьТегНет И НомерЭлемента > 0 Тогда
		ЭлементДляОтбораБезТегов = Элементы.Добавить("Тег_Нет", Тип("ДекорацияФормы"), Элементы.ЗначенияОтбораТеги);
		ЭлементДляОтбораБезТегов.Вид = ВидДекорацииФормы.Надпись;
		ЭлементДляОтбораБезТегов.Гиперссылка = Истина;
		ЭлементДляОтбораБезТегов.Заголовок = "[нет тегов]";
		ЭлементДляОтбораБезТегов.Видимость = Истина;
		ЭлементДляОтбораБезТегов.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементДляОтбораБезТегов.Ширина = 12;
		ЭлементДляОтбораБезТегов.Высота = 1;
		ЭлементДляОтбораБезТегов.РастягиватьПоГоризонтали = Ложь;	
		ЭлементДляОтбораБезТегов.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");	
	КонецЕсли; 
	
	ЭлементДляОчистки = Элементы.Добавить("Тег_Очистить", Тип("КнопкаФормы"), Элементы.ЗначенияОтбораТеги);
	ЭлементДляОчистки.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементДляОчистки.Картинка = БиблиотекаКартинок.Очистить;
	ЭлементДляОчистки.Отображение 	= ОтображениеКнопки.Картинка;
	ЭлементДляОчистки.ИмяКоманды = "ТегОтборОчистить";
	ЭлементДляОчистки.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаКлиенте
Функция ТегОтборНажатие(ОбъектМетаданных, Форма, ИмяСписка, Элемент = Неопределено, СтандартнаяОбработка,
		ЗаписатьСсылкиВСписок = Ложь, СписокОбъектов = Неопределено, ОтбиратьПоТегам = Ложь,
		ОтбиратьОбъектыБезТегов = Ложь, СписокВышестоящихПодразделений = Неопределено)
	
	Если Элемент <> Неопределено Тогда	
		Если Лев(Элемент.Имя, 4) <> "Тег_" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	   	Если Элемент.Имя = "Тег_Очистить" Тогда
			Теги  = Новый Массив;
			
			// Не имеет значения ЭлементСписка для тега очистки, поэтому берем первый.
			//ЭлементСписка = Форма.ОтборТеги[0];
			ЭлементСписка = Неопределено;
			
			Элемент.Видимость = Ложь;
			
		// тег для отбора объектов без тега
		ИначеЕсли Элемент.Имя = "Тег_Нет" Тогда
			
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);		
			
			// не имеет значения ЭлементСписка для тега очистки, поэтому берем первый
			ЭлементСписка = Форма.ОтборТеги[0];
			
		// остальные теги	
		Иначе
			ТегИД = Сред(Элемент.Имя, 5);
			ЭлементСписка = Форма.ОтборТеги.НайтиПоИдентификатору(ТегИД);
			ЭлементСписка.Пометка = НЕ ЭлементСписка.Пометка;
			Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
		КонецЕсли; 
	Иначе
		Теги = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Форма.ОтборТеги);
	КонецЕсли;
	
	Объекты = Новый Массив;
	Если Теги.Количество() > 0 ИЛИ ОтбиратьОбъектыБезТегов Тогда
		Если ЗаписатьСсылкиВСписок Тогда
			СписокОбъектов.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных,
				 Теги, ОтбиратьОбъектыБезТегов,
				 СписокВышестоящихПодразделений));
		Иначе
			СсылкиНаОбъектыСтегами.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам(ОбъектМетаданных, Теги));
		КонецЕсли;
		ОтборВключен = Истина;
	Иначе
		СсылкиНаОбъектыСтегами.Очистить();
		ОтборВключен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗаписатьСсылкиВСписок Тогда
		CRM_ТегиКлиент.СформироватьЗаголовокВариантаОтбора(Форма.Элементы.ОтборТеги, Теги.Количество());
	Иначе
		ОтбиратьПоТегам = ОтборВключен;
	КонецЕсли;
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЭлементСписка.Пометка;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовок(Форма)
	Форма.Заголовок = НСтр("ru='Мои продажи';en='My Sales'") + " / " + Строка(Форма.ВоронкаПродаж) + " / " + Форма.ТекущийПользователь 
		+ " / " 
		+ Форма.ПредставлениеПериода; 
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокВСписке(ИмяТаблицыСписка)
	
	Возврат CRM_ОбщегоНазначенияСервер.ВернутьКоличествоЭлементовВДинамическомСписке(ЭтотОбъект, ИмяТаблицыСписка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияОтбораПоОтветственному(ТекущийПользователь)
	
	// Роли пользователя и сам пользователь:
	ЗначенияОтбораПоОтветственному = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	ЗначенияОтбораПоОтветственному.Добавить(ТекущийПользователь);
	
	Возврат ЗначенияОтбораПоОтветственному;
	
КонецФункции

#Область Виджеты

&НаСервере
Процедура ДобавитьВиджетНаФорму(ВариантВиджета)
	
	CRM_РаботаСВиджетамиСервер.ДобавитьВиджет(
		ЭтотОбъект, ВариантВиджета, "ГруппаЭлементыВиджетов");
	
КонецПроцедуры // ДобавитьВиджетНаФорму()

&НаСервере
Процедура УдалитьВиджетНаФорме(ИдентификаторСтрокиДанных)
	
	CRM_РаботаСВиджетамиСервер.УдалитьВиджет(
		ЭтотОбъект, ИдентификаторСтрокиДанных);
	
КонецПроцедуры // УдалитьВиджетНаФорме()

&НаСервере
Процедура ОбновитьВиджет(ИдентификаторСтрокиДанных)
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВиджет(ЭтотОбъект, ИдентификаторСтрокиДанных);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВиджет()

&НаСервере
Процедура ОбновитьВсеВиджеты()
	
	Если Элементы.ГруппаВиджеты.Видимость Тогда
		CRM_РаботаСВиджетамиСервер.ОбновитьВсеВиджеты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьВсеВиджеты()

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьВиджеты(КлючОбъекта, Настройка)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ПоказыватьПанельВиджетов", Настройка);
	
КонецПроцедуры // СохранитьНастройкуПоказыватьВиджеты()

&НаСервере
Процедура ИнициализироватьМеханизмВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ПриСозданииНаСервере(ЭтотОбъект, "РабочийСтол");
	
КонецПроцедуры // ИнициализироватьМеханизмВиджетов()

&НаСервере
Процедура Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета(ИсточникиВнешнихБиблиотек, ДополнительныеПараметры) Экспорт
	
	Если ИсточникиВнешнихБиблиотек.Количество() = 0 Или Не ПоказыватьВиджетыПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущийВиджетФормы Из ЭтотОбъект.ВариантыВиджетовФормы Цикл
		
		Если ТекущийВиджетФормы.Переопределяемый Тогда
			
			ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных] = CRM_РаботаСВнешнимиБиблиотекамиВызовСервера.ЗаменитьПутиВызоваБиблиотек(
				ИсточникиВнешнихБиблиотек, ЭтотОбъект[ТекущийВиджетФормы.ИмяДанных]);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ПриПолученииВнешнейБиблиотекиВиджета()

&НаКлиенте
Процедура Подключаемый_ОбработчикАвтообновленияВиджетов() Экспорт
	
	// Обновление реквизитов - обновление виджетов.
	ОбработчикАвтообновленияВиджетов();
	
КонецПроцедуры //Подключаемый_ОбработчикАвтообновленияВиджетов()

&НаСервере
Функция ОбработчикАвтообновленияВиджетов()
	
	CRM_РаботаСВиджетамиСервер.ОбработатьАвтообновлениеВиджетов(ЭтотОбъект);
	
КонецФункции // ОбработчикАвтообновленияВиджетов()

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	ОписаниеОповещенияФильтра = Новый ОписаниеОповещения("ОткрытьФильтрЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый структура;
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("СкрытьПропущенныеТелефонныеЗвонки", СкрытьПропущенныеТелефонныеЗвонки);
	СтруктураФильтра.Вставить("СкрытьОтвеченныеТелефонныеЗвонки", СкрытьОтвеченныеТелефонныеЗвонки);
	СтруктураФильтра.Вставить("СкрытьЗаявки", СкрытьЗаявки);
	СтруктураФильтра.Вставить("СкрытьСообщения", СкрытьСообщения);
	СтруктураФильтра.Вставить("ОтборВключен", ОтборВключен);
	СтруктураФильтра.Вставить("ОтборТеги", ОтборТеги);
    СтруктураФильтра.Вставить("ОтображатьПисьма", ОтображатьПисьма);
	СтруктураФильтра.Вставить("СкрытьКолонкуОбращения", СкрытьКолонкуОбращения);
	СтруктураФильтра.Вставить("СкрытьПовторныеОбращения", СкрытьПовторныеОбращения);
	СтруктураФильтра.Вставить("ВариантПериода", ВариантПериода);
	СтруктураФильтра.Вставить("ПоискКлиент", ПоискКлиент);
	СтруктураФильтра.Вставить("ПоискТипУслуги", ПоискТипУслуги);
	СтруктураФильтра.Вставить("ПоискПроект", ПоискПроект);
	СтруктураФильтра.Вставить("ТекущийПользователь", ТекущийПользователь);
	СтруктураФильтра.Вставить("ПоискИсточникПривлечения", ПоискИсточникПривлечения);
	СтруктураФильтра.Вставить("ПоискЗначениеИсточникаПривлечения", ПоискЗначениеИсточникаПривлечения);
	ПараметрыОткрытия.Вставить("СтруктураФильтра", СтруктураФильтра);
	ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , ,
		 , ОписаниеОповещенияФильтра,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрНаСервере(Результат)
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		РезультатСтруктура = Новый Структура;
		Для Каждого КлючИЗначение Из Результат Цикл
			Если ТипЗнч(КлючИЗначение.Ключ) = Тип("Строка") Тогда
				РезультатСтруктура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатСтруктура);
		КонецЦикла;
	КонецЕсли;
	Если ВариантПериода = "" Тогда
		Период = ОтборСозданы[0];
		ПериодОтбора = ОтборСозданы[0].Значение;
		ПредставлениеПериода = ПредставлениеПериода(ПериодОтбора.ДатаНачала, ПериодОтбора.ДатаОкончания);
	Иначе
		Если ВариантПериода = "ПроизвольныйПериод" Тогда
			НомерПериода = 0;
		ИначеЕсли ВариантПериода = "Сегодня" Тогда
			НомерПериода = 1;
		ИначеЕсли ВариантПериода = "3 дня" Тогда
			НомерПериода = 2;
		ИначеЕсли ВариантПериода = "Неделя" Тогда
			НомерПериода = 3;
		ИначеЕсли ВариантПериода = "Месяц" Тогда
			НомерПериода = 4;
		КонецЕсли;
		
		Период = ОтборСозданы[НомерПериода];
		ПериодОтбора = ОтборСозданы[НомерПериода].Значение;
		ЗначениеПериода = СписокПериодов.НайтиПоЗначению(ВариантПериода);
		Если ЗначениеПериода <> Неопределено Тогда
			ПредставлениеПериода = ЗначениеПериода.Представление;
		КонецЕсли;
		Если НомерПериода = 0 Тогда
			Если ЗначениеЗаполнено(Период.Значение.ДатаНачала) Или ЗначениеЗаполнено(Период.Значение.ДатаОкончания) Тогда
				Период.Пометка = Истина;
			Иначе
				Период.Пометка = Ложь;
			КонецЕсли;
		Иначе
			Период.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;	
	Теги = Новый Массив;
	Для Каждого ЭлементТегов Из ОтборТеги Цикл
		Теги.Добавить(ЭлементТегов.Значение);	
	КонецЦикла;	
	ОтборВключен = Теги.Количество() > 0;
	СсылкиНаОбъектыСтегами.ЗагрузитьЗначения(CRM_ТегиВызовСервера.ОбъектыПоТегамПоВсемОтборам("Документ.CRM_Интерес",
		 Теги));
	
	ОбновитьОтборыНаСервере("Все");
	ОбновитьВсеВиджеты();
	СформироватьЗаголовки();
	Заголовок = НСтр("ru='Мои продажи';en='My Sales'") + " / " + Строка(ВоронкаПродаж) + " / " 
		+ ТекущийПользователь + " / " 
		+ ПредставлениеПериода;
	
	Элементы.ГруппаНеРазобрано.Видимость = НЕ СкрытьКолонкуОбращения;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФильтрЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УстановитьФильтрНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценария(Команда)
	ОписаниеОповещенияВыбора = Новый ОписаниеОповещения("ПослеВыбораВоронки", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещенияВыбора, СписокВоронок, Элементы.ВыборСценария);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВоронки(ВыбранныйЭлемент, СписокПараметров) Экспорт
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВоронкаПродаж = ВыбранныйЭлемент.Значение;
		Элементы.ВыборСценария.Заголовок = ВоронкаПродаж;
		Элементы.ГруппаСоставКолонок.Видимость = Ложь;
		ВоронкаПродажПриИзмененииНаСервере();
		ОбновитьОтборы();
		ОбновитьТаблицы();
		Элементы.ГруппаСоставКолонок.Видимость = Истина;
		УстановитьПодсказкуКомандыВыбораСценария();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуКомандыВыбораСценария()
	КомандаВыборСценария	= Команды.Найти("ВыборСценария");
	Если ЗначениеЗаполнено(ВоронкаПродаж.СценарийИнтереса) Тогда
		КомандаВыборСценария.Подсказка	= ВоронкаПродаж.СценарийИнтереса.Наименование;
	Иначе
		КомандаВыборСценария.Подсказка	= НСтр("ru='Выбор сценария'");
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура СвернутьУспешно(Команда)
	Элементы.ГруппаУспешно.Видимость = Ложь;
	Элементы.ГруппаТаблица_ТаблицаУспешноСвернуто.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьНеудачно(Команда)
	Элементы.ГруппаНеудачно.Видимость = Ложь;
	Элементы.ГруппаТаблица_ТаблицаНеудачноСвернуто.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУспешно(Команда)
	Элементы.ГруппаУспешно.Видимость = Истина;
	Элементы.ГруппаТаблица_ТаблицаУспешноСвернуто.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьНеудачно(Команда)
	Элементы.ГруппаНеудачно.Видимость = Истина;
	Элементы.ГруппаТаблица_ТаблицаНеудачноСвернуто.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сценарий",
		 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ВоронкаПродаж,
		 "СценарийИнтереса"));
	ПараметрыФормы.Вставить("ДоступноОбращение", Ложь);
	ПараметрыФормы.Вставить("ИсточникОткрытияМастера", CRM_МетодыФормОбработокСервер.МастерОткрытИзПродаж());
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаНовая", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	ОтборТеги.Очистить();
	СтруктураФильтра = Новый Структура;
	СтруктураФильтра.Вставить("ОтборВключен", Ложь);
	СтруктураФильтра.Вставить("ОтборТеги", ОтборТеги);
	СтруктураФильтра.Вставить("ВариантПериода", "");
	СтруктураФильтра.Вставить("ПоискКлиент", Справочники.Партнеры.ПустаяСсылка());
	СтруктураФильтра.Вставить("ПоискТипУслуги", Справочники.CRM_ТипУслуги.ПустаяСсылка());
	СтруктураФильтра.Вставить("ПоискПроект", Справочники.Проекты.ПустаяСсылка());
	СтруктураФильтра.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	СтруктураФильтра.Вставить("ПоискИсточникПривлечения",
		 ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка());
	СтруктураФильтра.Вставить("ПоискЗначениеИсточникаПривлечения", Неопределено);
	СтруктураФильтра.Вставить("ПоискПроект", Справочники.Проекты.ПустаяСсылка());
	УстановитьФильтрНаСервере(СтруктураФильтра);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	ОчиститьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтекстноеМенюЭтапов()
	Для каждого Этап Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Этап.Ссылка.УникальныйИдентификатор()), "-", "_");
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		Для каждого ЭлементМеню Из Элементы[ИмяРеквизита].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			ЭлементМеню.Видимость = Ложь;
		КонецЦикла;
		СформироватьКонтекстноеМеню(ИмяРеквизита);
	КонецЦикла;
	// Для каждого ЭлементМеню Из Элементы["ТаблицаУспешноСвернуто"].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
	//	ЭлементМеню.Видимость = Ложь;
	//КонецЦикла;
	// Для каждого ЭлементМеню Из Элементы["ТаблицаНеудачноСвернуто"].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
	//	ЭлементМеню.Видимость = Ложь;
	//КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекстноеМеню(ИмяТаблицы)
	
	Если СтрНайти(ИмяТаблицы, "НеРазобрано") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаКнопки = "ПринятьВРаботу_" + ИмяТаблицы;
	КнопкаПринятьВРаботу = Элементы.Найти(ИмяЭлементаКнопки);
	Если КнопкаПринятьВРаботу = Неопределено Тогда
		КнопкаПринятьВРаботу = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элементы[ИмяТаблицы].КонтекстноеМеню);
    	КнопкаПринятьВРаботу.ИмяКоманды = "ПринятьВРаботу";
	КонецЕсли;
	КнопкаПринятьВРаботу.Видимость = Истина;
	
	ИмяЭлементаКнопки = "ПередатьИсполнителю_" + ИмяТаблицы;
	КнопкаПередатьИсполнителю = Элементы.Найти(ИмяЭлементаКнопки);
	Если КнопкаПередатьИсполнителю = Неопределено Тогда
		КнопкаПередатьИсполнителю = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"),
			 Элементы[ИмяТаблицы].КонтекстноеМеню);
    	КнопкаПередатьИсполнителю.ИмяКоманды = "ПередатьИсполнителю";
	КонецЕсли;
	КнопкаПередатьИсполнителю.Видимость = Истина;

	ИДЭтапа = ИмяТаблицы;
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "Этап_", ""); 
	ИДЭтапа = СтрЗаменить(ИДЭтапа, "_", "-"); 
	СостоянияЭтапа = ПолучитьСостоянияИнтересаПоВоронке(ПолучитьЭтапВоронки(ИДЭтапа));
	Если НЕ (СостоянияЭтапа.Количество() > 0
		 И НЕ СостоянияЭтапа[0].Значение.РазрешитьРолевуюАдресацию) Тогда // Истина, если нет состояний, 
																									// либо для первого состояния ролевая адресация разрешена
		ИмяЭлементаКнопки = "ПередатьРоли_" + ИмяТаблицы;
		КнопкаПередатьРоли = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаПередатьРоли = Неопределено Тогда
			КнопкаПередатьРоли = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), Элементы[ИмяТаблицы].КонтекстноеМеню);
	    	КнопкаПередатьРоли.ИмяКоманды = "ПередатьРоли";
		КонецЕсли;
		КнопкаПередатьРоли.Видимость = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиПросроченныеНаСервере()
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВнизу";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборВключатьПросроченные = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ПросроченныеВверху";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборВключатьПросроченные = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВнизу(Команда)
	ОтборВключатьПросроченные = 1;
	ОбновитьТаблицы("Просроченные");
	ПокраситьКнопкиПросроченныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросроченныеВверху(Команда)
	ОтборВключатьПросроченные = 2;
	ОбновитьТаблицы("Просроченные");
	ПокраситьКнопкиПросроченныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиВидАРМНаСервере(ВидАрм)
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидКанбан";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ВидСписок";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ВидАрм = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКанбан(Команда)
	Элементы.ГруппаВоронка.Видимость = Истина;
	Элементы.ГруппаСписок.Видимость = Ложь;
	ПокраситьКнопкиВидАРМНаСервере(1);
КонецПроцедуры

&НаКлиенте
Процедура ВидСписок(Команда)
	Элементы.ГруппаВоронка.Видимость = Ложь;
	Элементы.ГруппаСписок.Видимость = Истина;
	Элементы.ДекорацияРазделительРегулировки.Видимость	= Ложь;
	ПокраситьКнопкиВидАРМНаСервере(2);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура БыстрыйОтборИзменение(Форма, Отбор1 = "", Отбор2 = "", Отбор3 = "", Отбор4 = "",
	 Отбор5 = "", Отбор6 = "", Отбор7 = "", Отбор8 = "", Отбор9 = "", Отбор10 = "",
	 ИмяЭлемента = "")
	
	КоличествоОтборов = 0;
	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор1), 1, 0);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор2), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор3), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор4), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор5), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор6), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор7), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор8), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор9), КоличествоОтборов + 1, КоличествоОтборов);
	КоличествоОтборов = ?(ЗначениеЗаполнено(Отбор10), КоличествоОтборов + 1, КоличествоОтборов);
	
	Если НЕ ЗначениеЗаполнено(ИмяЭлемента) Тогда
		ИмяЭлемента = "БыстрыеОтборы";
	КонецЕсли;
	СформироватьЗаголовокВариантаОтбора(Форма.Элементы[ИмяЭлемента], КоличествоОтборов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаголовокВариантаОтбора(ЭлементВариантОтбора, УстановленоОтборов)
	
	ПозицияНачало = СтрНайти(ЭлементВариантОтбора.Заголовок, " (");
	Если ПозицияНачало <> 0 Тогда
		ЭлементВариантОтбора.Заголовок = Лев(ЭлементВариантОтбора.Заголовок, ПозицияНачало - 1);
	КонецЕсли;
	
	Если УстановленоОтборов <> 0 Тогда
		ЭлементВариантОтбора.Заголовок = ЭлементВариантОтбора.Заголовок + " (" + УстановленоОтборов + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыборВариантаОтбора(Форма, Команда)
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = "ОтборПериод" Тогда
		ИмяСтраницы = "ЗначенияОтбораПериод";
	ИначеЕсли Команда.Имя = "ОтборТеги" Тогда
		ИмяСтраницы = "ЗначенияОтбораТеги";
	ИначеЕсли Команда.Имя = "ОтборСегменты" Тогда
		ИмяСтраницы = "ЗначенияОтбораСегменты";
	ИначеЕсли Команда.Имя = "БыстрыеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораБыстрыеОтборы";
	ИначеЕсли Команда.Имя = "ОсновныеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораОсновныеОтборы";
	ИначеЕсли Команда.Имя = "ПрочиеОтборы" Тогда
		ИмяСтраницы = "ЗначенияОтбораПрочиеОтборы";
	Иначе
		Возврат;
	КонецЕсли;
	
	СтраницаКОтображению = Элементы.Найти(ИмяСтраницы);
	Если СтраницаКОтображению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельЗначенийОтбора.Видимость
		 И Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению Тогда
		Элементы.ПанельЗначенийОтбора.Видимость = Ложь;
		Элементы[Команда.Имя].ЦветФона   = Новый Цвет;
		Элементы[Команда.Имя].ЦветТекста = WebЦвета.Черный;
	Иначе
		Элементы.ПанельЗначенийОтбора.Видимость = Истина;
		Элементы.ПанельЗначенийОтбора.ТекущаяСтраница = СтраницаКОтображению;
		Если Элементы.Найти("ОтборПериод") <> Неопределено Тогда
			Элементы.ОтборПериод.ЦветФона   = Новый Цвет;
			Элементы.ОтборПериод.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ОтборТеги") <> Неопределено Тогда
			Элементы.ОтборТеги.ЦветФона   = Новый Цвет;
			Элементы.ОтборТеги.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("БыстрыеОтборы") <> Неопределено Тогда
			Элементы.БыстрыеОтборы.ЦветФона   = Новый Цвет;
			Элементы.БыстрыеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ОсновныеОтборы") <> Неопределено Тогда
			Элементы.ОсновныеОтборы.ЦветФона   = Новый Цвет;
			Элементы.ОсновныеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		Если Элементы.Найти("ПрочиеОтборы") <> Неопределено Тогда
			Элементы.ПрочиеОтборы.ЦветФона   = Новый Цвет;
			Элементы.ПрочиеОтборы.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
		
		//Элементы[Команда.Имя].ЦветФона = Новый Цвет(220, 220, 220); //Новый Цвет(255, 215, 40);
		Элементы[Команда.Имя].ЦветФона = ЦветаСтиля.CRM_ОсновнойГолубой;
		Элементы[Команда.Имя].ЦветТекста = WebЦвета.Белый;
		СтраницаКОтображению.Видимость = Истина;
		Для каждого СтраницаЗначенийОтбора Из Элементы.ПанельЗначенийОтбора.ПодчиненныеЭлементы Цикл
			Если СтраницаЗначенийОтбора <> СтраницаКОтображению Тогда
				СтраницаЗначенийОтбора.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаШириныКолонок

&НаКлиенте
Процедура УстановитьШиринуКолонокКанбан()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ШиринаЭлемента = ШиринаКолонокКанбан - 3;
	Иначе
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок");
	//МассивТаблиц.Добавить("ТаблицаНеудачноСвернуто");
	//МассивТаблиц.Добавить("ТаблицаУспешноСвернуто");

	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивТаблиц.Добавить(ИмяРеквизита);
	КонецЦикла;
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Ширина   = ШиринаКолонокКанбан;
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_Этап_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет <> Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет <> Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		Элементы.ДекорацияЦвет_Этап_Успешно.Ширина   = ШиринаКолонокКанбан;
		Элементы.ДекорацияЦвет_Этап_Неудачно.Ширина   = ШиринаКолонокКанбан;

		Если Элементы.Найти("Заголовок" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Заголовок" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("Партнер" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Партнер" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("ОписаниеИнтереса" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["ОписаниеИнтереса" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("Сумма" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Сумма" + ИмяТаблицы].Ширина = ШиринаЭлемента - 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийЭлемент = Элементы.ШиринаКолонокКанбан;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШиринуКолонокКанбанСервер(Изменение = Ложь)
	
	Если Изменение Тогда
		СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ВоронкаПродаж);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ШиринаЭлемента = ШиринаКолонокКанбан - 3;
	Иначе
		ШиринаЭлемента = ШиринаКолонокКанбан - 8;
	КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	
	МассивТаблиц.Добавить("НеРазобрано");
	МассивТаблиц.Добавить("ТаблицаНеудачно");
	МассивТаблиц.Добавить("ТаблицаУспешно");
	МассивТаблиц.Добавить("ТаблицаСписок");
	//МассивТаблиц.Добавить("ТаблицаНеудачноСвернуто");
	//МассивТаблиц.Добавить("ТаблицаУспешноСвернуто");

	Для Каждого Строка Из ТаблицаЭтапы Цикл
		ИдентификаторЭтапа = СтрЗаменить(Строка(Строка.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		МассивТаблиц.Добавить(ИмяРеквизита);
	КонецЦикла;
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		Элементы[ИмяТаблицы].Ширина   = ШиринаКолонокКанбан;
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_Этап_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет <> Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		ЭлементДекорацияЦвет = Элементы.Найти("ДекорацияЦвет_" + ИмяТаблицы);
		Если ЭлементДекорацияЦвет <> Неопределено Тогда
			ЭлементДекорацияЦвет.Ширина   = ШиринаКолонокКанбан;
		КонецЕсли;
		Элементы.ДекорацияЦвет_Этап_Успешно.Ширина   = ШиринаКолонокКанбан;
		Элементы.ДекорацияЦвет_Этап_Неудачно.Ширина   = ШиринаКолонокКанбан;

		Если Элементы.Найти("Заголовок" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Заголовок" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("Партнер" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Партнер" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("ОписаниеИнтереса" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["ОписаниеИнтереса" + ИмяТаблицы].Ширина = ШиринаЭлемента - 2;
		КонецЕсли;
		Если Элементы.Найти("Сумма" + ИмяТаблицы) <> Неопределено Тогда
			Элементы["Сумма" + ИмяТаблицы].Ширина = ШиринаЭлемента - 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийЭлемент = Элементы.ШиринаКолонокКанбан;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаКолонокКанбанПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИзменениеШириныКолонокКанбан", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеШириныКолонокКанбан()
	УстановитьШиринуКолонокКанбан();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонок(Команда)
	
	Если НЕ Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость Тогда
		Элементы.ДекорацияРазделительРегулировки.Видимость	= Ложь;
		Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВывестиПанельРегулирования", 0.1, Истина);
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПанельРегулирования()
	Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Если Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость Тогда
			Элементы.ДекорацияРазделительРегулировки.Видимость 		= Истина;
			Элементы.ГруппаПолосаРегулированияВсплывающая.Видимость = Ложь;
			ОтключитьОбработчикОжидания("ЗакрытьПанельРегулирования");
			#Если ВебКлиент Тогда
				ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
			#Иначе
				СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ВоронкаПродаж);
			#КонецЕсли
		Иначе	
			ШиринаКолонокКанбан = ШиринаКолонокКанбан - 1;
			УстановитьШиринуКолонокКанбан();
			ШиринаКолонокКанбан = ШиринаКолонокКанбан + 1;
			УстановитьШиринуКолонокКанбанСервер(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиШириныКолонок(ШиринаКолонокКанбан, ВоронкаПродаж)
	НастройкиШирины = ХранилищеОбщихНастроек.Загрузить("МоиПродажиНастройкиШириныКолонок");
	Если НастройкиШирины = Неопределено Тогда
		НастройкиШирины = Новый Структура();
	КонецЕсли;
	НастройкиШирины.Вставить("Ширина" + СтрЗаменить(Строка(ВоронкаПродаж.УникальныйИдентификатор()),
		 "-", ""), ШиринаКолонокКанбан);
	Если НастройкиШирины.Количество() < 3 Тогда
		НастройкиШирины.Вставить("ОбщаяНастройка", ШиринаКолонокКанбан);
	КонецЕсли;
	ХранилищеОбщихНастроек.Сохранить("МоиПродажиНастройкиШириныКолонок", , НастройкиШирины);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	УстановитьФильтрНаСервере(Настройки);
КонецПроцедуры

&НаСервере
Процедура УстановитьШиринуЭлементовКоманднойПанели()
	МассивЭкранов	= ПолучитьИнформациюЭкрановКлиента();
	ШиринаЭкрана	= МассивЭкранов[0].Ширина;
	Для Каждого ЭлементМассива Из МассивЭкранов Цикл
		Если ЭлементМассива.Ширина < ШиринаЭкрана Тогда
			ШиринаЭкрана	= ЭлементМассива.Ширина;
		КонецЕсли;	
	КонецЦикла;	
	Если ШиринаЭкрана < 1600 Тогда
		Элементы.ВыборСценария.Ширина				= 11;
		Элементы.НастройкаСценария.Ширина			= 3;
		Элементы.СтрокаПоиска.МаксимальнаяШирина	= 14;			
		Элементы.ГруппаЕщеКП.Ширина					= 7;
		Элементы.ДекорацияРазделительРегулировки.Видимость	= Ложь;			
	Иначе
		Элементы.ВыборСценария.Ширина				= 16;
		Элементы.НастройкаСценария.Ширина			= 4;
		Элементы.СтрокаПоиска.МаксимальнаяШирина	= 20;			
		Элементы.ГруппаЕщеКП.Ширина					= 14;
		Элементы.ДекорацияРазделительРегулировки.Видимость	= Истина;			
	КонецЕсли;	
КонецПроцедуры
#КонецОбласти
