
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьДанныеКолонок(ПараметрыВыполнения, АдресХранилища) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ОписаниеСостояния Из ПараметрыВыполнения.Состояния Цикл
		
		Если ОписаниеСостояния.ИмяКолонки = "Этап_НеРазобрано" Тогда
			Данные = ДанныеКолонкиНеРазобрано(ОписаниеСостояния, ПараметрыВыполнения)
		ИначеЕсли ОписаниеСостояния.ИмяКолонки = "Этап_НеРазобрано_СводныеДанные" Тогда
			Данные = СводныеДанныеКолонкиНеРазобрано(ОписаниеСостояния);
		Иначе
			Данные = ДанныеКолонки(ОписаниеСостояния, ПараметрыВыполнения);
		КонецЕсли;
		
		Результат.Вставить(ОписаниеСостояния.ИмяКолонки, Данные);
		
	КонецЦикла;
	
	Если ПараметрыВыполнения.ЕстьСкрытыеЭтапы Тогда
		ДополнитьДаннымиСкрытыхКолонок(Результат, ПараметрыВыполнения);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ДанныеКолонки(ОписаниеСостояния, ПараметрыВыполнения)
	
	ДанныеКолонки = Новый Структура;
	ДанныеКолонки.Вставить("Количество", 0);
	ДанныеКолонки.Вставить("Сумма", 0);
	ДанныеКолонки.Вставить("Записи", Новый Массив);
	ДанныеКолонки.Вставить("ЗаголовокОбычный", Неопределено);
	ДанныеКолонки.Вставить("ЗаголовокФорматированный", Неопределено);
	
	ИмяМакета = "ДанныеКолонки";
	Если ОписаниеСостояния.Завершено Тогда
		ИмяМакета = "ДанныеКолонкиЗавершено";
	КонецЕсли;
	СхемаКомпоновкиДанных = Обработки.CRM_АРМ_МоиПродажи.ПолучитьМакет(ИмяМакета);
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НастроитьПараметрыСостояния(ОписаниеСостояния, СхемаКомпоновкиДанных);
	НастроитьОбщиеПараметры(ПараметрыВыполнения.ОбщиеПараметры, СхемаКомпоновкиДанных);
	НастроитьОтбор(ПараметрыВыполнения.ЗначенияОтбора, НастройкиКомпоновкиДанных.Отбор);
	
	// Итоговые значения
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	Процессорвывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеКолонки.Количество = РезультатКомпоновки.Количество();
	ДанныеКолонки.Сумма = РезультатКомпоновки.Итог("ОжидаемаяВыручка");
	
	// Заголовок
	Заголовок = ЗаголовокКолонки(ОписаниеСостояния.ИмяКолонки,
		ДанныеКолонки.Количество, ДанныеКолонки.Сумма, ПараметрыВыполнения.Валюта);
	ЗаполнитьЗначенияСвойств(ДанныеКолонки, Заголовок);
	
	// Записи колонки
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	ТекстКоличестваЗаписей = "ПЕРВЫЕ " + СтрЗаменить(ОписаниеСостояния.Количество, Символы.НПП, "");
	НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "//{КОЛИЧЕСТВО_ЗАПИСЕЙ}", ТекстКоличестваЗаписей);
	
	НастроитьПорядок(ОписаниеСостояния, НастройкиКомпоновкиДанных.Порядок);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	Процессорвывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеКолонки.Записи = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатКомпоновки);
	
	Возврат ДанныеКолонки;
	
КонецФункции

Функция ДанныеКолонкиНеРазобрано(ОписаниеСостояния, ПараметрыВыполнения)
	
	ДанныеКолонки = Новый Структура;
	ДанныеКолонки.Вставить("Количество", 0);
	ДанныеКолонки.Вставить("Сумма", 0);
	ДанныеКолонки.Вставить("Записи", Новый Массив);
	ДанныеКолонки.Вставить("ЗаголовокОбычный", Неопределено);
	ДанныеКолонки.Вставить("ЗаголовокФорматированный", Неопределено);
	
	СхемаКомпоновкиДанных = ОписаниеСостояния.СхемаКомпоновкиДанных;
	НастройкиКомпоновкиДанных = ОписаниеСостояния.НастройкиКомпоновкиДанных;
	
	РезультатКомпоновки = РезультатКомпоновкиДинамическогоСписка(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	ДанныеКолонки.Количество = РезультатКомпоновки.Количество();
	
	Заголовок = ЗаголовокКолонки(ОписаниеСостояния.ИмяКолонки,
		ДанныеКолонки.Количество, ДанныеКолонки.Сумма, ПараметрыВыполнения.Валюта);
	ЗаполнитьЗначенияСвойств(ДанныеКолонки, Заголовок);
	
	Возврат ДанныеКолонки;
	
КонецФункции

Функция СводныеДанныеКолонкиНеРазобрано(ОписаниеСостояния)
	
	СхемаКомпоновкиДанных = ОписаниеСостояния.СхемаКомпоновкиДанных;
	НастройкиКомпоновкиДанных = ОписаниеСостояния.НастройкиКомпоновкиДанных;
	
	РезультатКомпоновки = РезультатКомпоновкиДинамическогоСписка(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	ДанныеКолонки = Новый Структура;
	
	Всего = 0;
	ВОжидании = 0;
	Просрочено = 0;
	Сегодня = 0;
	
	Для Каждого Строка Из РезультатКомпоновки Цикл
		
		Если ЗначениеЗаполнено(Строка.Светофор) Тогда
			Всего = Всего + Строка.Количество;
		КонецЕсли;
		
		Если Строка.Светофор = "ВОжидании" Тогда
			ВОжидании = ВОжидании + Строка.Количество;
		КонецЕсли;
		
		Если Строка.Светофор = "Просрочено" Тогда
			Просрочено = Просрочено + Строка.Количество;
		КонецЕсли;
		
		Если Строка.Светофор = "Сегодня" Тогда
			Сегодня = Сегодня + Строка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	Заголовок = НСтр("ru = 'В ожидании'") + " ("+Формат(ВОжидании, "ЧН=0")+")";
	ДанныеКолонки.Вставить("НадписьВОжидании", Заголовок);
	
	Заголовок = НСтр("ru = 'Просрочено'") + " ("+Формат(Просрочено, "ЧН=0")+")";
	ДанныеКолонки.Вставить("НадписьПросрочено", Заголовок);
	
	Заголовок = НСтр("ru = 'Обработать сегодня'") + " ("+Формат(Сегодня, "ЧН=0")+")";
	ДанныеКолонки.Вставить("НадписьСегодня", Заголовок);
	
	Заголовок = НСтр("ru = 'Всего'") + " ("+Формат(Всего, "ЧН=0")+")";
	ДанныеКолонки.Вставить("НадписьВсего", Заголовок);
	
	Возврат ДанныеКолонки;
	
КонецФункции

Процедура ДополнитьДаннымиСкрытыхКолонок(Результат, ПараметрыВыполнения)
	
	ИмяКолонки = "СкрытыеЭтапы";
	
	ДанныеКолонок = Новый Структура;
	ДанныеКолонок.Вставить("ЗаголовокЗтапы", "");
	ДанныеКолонок.Вставить("ЗаголовокИнтересы", "");
	
	КоличествоКолонок = 0;
	КоличествоИнтересов = 0;
	СуммаИнтересов = 0;
	
	Для Каждого ОписаниеСостояния Из ПараметрыВыполнения.Состояния Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеСостояния.Состояние) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОписаниеСостояния.Скрыто Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКолонки = Результат[ОписаниеСостояния.ИмяКолонки];
		
		КоличествоКолонок = КоличествоКолонок + 1;
		
		КоличествоИнтересов = КоличествоИнтересов + ДанныеКолонки.Количество;
		СуммаИнтересов = СуммаИнтересов + ДанныеКолонки.Сумма;
		
	КонецЦикла;
	
	ДанныеКолонок.ЗаголовокЗтапы = НСтр("ru = 'Скрыто колонок'")
		+ ": " + Формат(КоличествоКолонок, "ЧДЦ=; ЧН=0; ЧГ=");
	
	Заголовок = ЗаголовокКолонки(ИмяКолонки,
		КоличествоИнтересов, СуммаИнтересов, ПараметрыВыполнения.Валюта);
	ДанныеКолонок.ЗаголовокИнтересы = Заголовок.ЗаголовокОбычный;
	
	Результат.Вставить(ИмяКолонки, ДанныеКолонок);
	
КонецПроцедуры

Процедура НастроитьПараметрыСостояния(ОписаниеСостояния, СхемаКомпоновкиДанных)
	
	CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
		"СостояниеИнтереса",
		ОписаниеСостояния.Состояние);
	
	CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
		"ПериодОтбораНачало",
		ОписаниеСостояния.ПериодОтбораНачало);
	
	CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
		"ПериодОтбораОкончание",
		ОписаниеСостояния.ПериодОтбораОкончание);
	
КонецПроцедуры

Процедура НастроитьОбщиеПараметры(ДанныеПараметров, СхемаКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(ДанныеПараметров.ПериодПросроченных) Тогда
		CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
			"ПериодПросроченных",
			ДанныеПараметров.ПериодПросроченных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПараметров.ПериодТекущих) Тогда
		CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
			"ПериодТекущих",
			ДанныеПараметров.ПериодТекущих);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПараметров.ДнейПоКалендарюНаСегодня) Тогда
		CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
			"ДнейПоКалендарюНаСегодня",
			ДанныеПараметров.ДнейПоКалендарюНаСегодня);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПараметров.Пользователь) Тогда
		CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
			"Пользователь",
			ДанныеПараметров.Пользователь);
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.УстановитьПараметрСКД(СхемаКомпоновкиДанных,
		"ПользовательЗаполнен",
		ДанныеПараметров.ПользовательЗаполнен);
	
КонецПроцедуры

Процедура НастроитьОтбор(ДанныеОтбора, Отбор)
	
	Если ЗначениеЗаполнено(ДанныеОтбора.СтрокаПоиска) Тогда
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы,
			НСтр("ru='Отбор по строке поиска'"),
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "Заголовок", ВидСравненияКомпоновкиДанных.Подобно, "%"+ДанныеОтбора.СтрокаПоиска+"%");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "ОписаниеИнтереса", ВидСравненияКомпоновкиДанных.Подобно, "%"+ДанныеОтбора.СтрокаПоиска+"%");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "ПартнерНаименование", ВидСравненияКомпоновкиДанных.Подобно, "%"+ДанныеОтбора.СтрокаПоиска+"%");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Автор) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "Автор", ВидСравненияКомпоновкиДанных.Равно, ДанныеОтбора.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.Равно, ДанныеОтбора.Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Проект) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "Проект", ВидСравненияКомпоновкиДанных.Равно, ДанныеОтбора.Проект);
	КонецЕсли;
	
	Если ДанныеОтбора.ОбъектыСТегами.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "Объект", ВидСравненияКомпоновкиДанных.ВСписке, ДанныеОтбора.ОбъектыСтегами);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Клиент) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "Партнер", ВидСравненияКомпоновкиДанных.Равно, ДанныеОтбора.Клиент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.ТипУслуги) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "ТипУслуги", ВидСравненияКомпоновкиДанных.Равно, ДанныеОтбора.ТипУслуги);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.ЗначениеИсточникаПривлечения) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "ИсточникПервичногоИнтереса", ВидСравненияКомпоновкиДанных.Равно,
			ДанныеОтбора.ЗначениеИсточникаПривлечения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОтбора.ИсточникПривлечения) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор, "КаналПервичногоИнтереса", ВидСравненияКомпоновкиДанных.Равно,
			ДанныеОтбора.ИсточникПривлечения,);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПорядок(ОписаниеСостояния, Порядок)
	
	Если ЗначениеЗаполнено(ОписаниеСостояния.ПорядокПросроченных) Тогда
		НоваяСтрока = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле = Новый ПолеКомпоновкиДанных("ПросроченоДляСортировки");
		НоваяСтрока.ТипУпорядочивания = ОписаниеСостояния.ПорядокПросроченных;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеСостояния.ПорядокДат) Тогда
		НоваяСтрока = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле = Новый ПолеКомпоновкиДанных("ДатаДляСортировки");
		НоваяСтрока.ТипУпорядочивания = ОписаниеСостояния.ПорядокДат;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатКомпоновкиДинамическогоСписка(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	РезультатКомпоновки = Новый ТаблицаЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
	Процессорвывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат РезультатКомпоновки;
	
КонецФункции

Функция ЗаголовокКолонки(ИмяКолонки, Количество, Сумма, Валюта)
	
	Заголовок = Новый Структура;
	
	Если Количество = 0 Тогда
		Если ИмяКолонки = "Этап_НеРазобрано" Тогда
			ЗаголовокКоличество = НСтр("ru = 'Нет обращений'");
			ЗаголовокСумма = "0";
		Иначе
			ЗаголовокКоличество = НСтр("ru = 'Нет интересов'");
			ЗаголовокСумма = "0";
		КонецЕсли;
	Иначе
		СтрокаКоличествоСделок = Формат(Количество, "ЧДЦ=; ЧН=0; ЧГ=");
		Если ИмяКолонки = "Этап_НеРазобрано" Тогда
			СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
				+ ";НД=Ложь", НСтр("ru='обращение, обращения, обращений,
				| с'"));
			СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
				+ ";НД=Ложь;НП=Ложь", НСтр("ru='обращение, обращения, обращений,
				| с'"));
		Иначе
			СтрокаЗаголовка = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
				+ ";НД=Ложь", НСтр("ru='интерес, интереса, интересов,
				| м'"));
			СтрокаЗаголовкаТМП = ЧислоПрописью(СтрокаКоличествоСделок, "Л=" + НСтр("ru='ru_RU';en='en_US'") 
				+ ";НД=Ложь;НП=Ложь", НСтр("ru='интерес, интереса, интересов,
				| м'"));
		КонецЕсли;
		СтрокаЗаголовкаТМП = СокрЛП(СтрЗаменить(СтрокаЗаголовкаТМП, "00", ""));
		СтрокаЗаголовка = СокрЛП(СтрЗаменить(СтрокаЗаголовка, "00", ""));
		ЗаголовокКоличество = СокрЛП(СтрЗаменить(СтрокаЗаголовка, СтрокаЗаголовкаТМП, СтрокаКоличествоСделок));
		ЗаголовокСумма = ?(Сумма = 0, "0", Формат(Сумма, "ЧДЦ=; ЧН=0; ЧГ=3,0"));
	КонецЕсли;
	
	Если ИмяКолонки = "Этап_НеРазобрано" Тогда
		ЗаголовокОбычный = ЗаголовокКоличество;
		ЗаголовокФорматированный = Новый ФорматированнаяСтрока(ЗаголовокКоличество);
	Иначе
		ЗаголовокОбычный = ЗаголовокКоличество + ": " + ЗаголовокСумма + " " + Валюта;
		ЗаголовокСумма = Новый ФорматированнаяСтрока(ЗаголовокСумма + " " + Валюта, Новый Шрифт(,10,Истина));
		ЗаголовокФорматированный = Новый ФорматированнаяСтрока(ЗаголовокКоличество, ": ", ЗаголовокСумма);
	КонецЕсли;
	
	Заголовок.Вставить("ЗаголовокОбычный", ЗаголовокОбычный);
	Заголовок.Вставить("ЗаголовокФорматированный", ЗаголовокФорматированный);
	
	Возврат Заголовок;
	
КонецФункции

#КонецОбласти

#КонецЕсли
