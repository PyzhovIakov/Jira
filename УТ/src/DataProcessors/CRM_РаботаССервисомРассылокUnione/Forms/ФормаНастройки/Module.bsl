
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Готово(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПараметрыДоступа = Новый Структура;
		ПараметрыДоступа.Вставить("КлючДоступа", Объект.КлючДоступа);
		ПараметрыДоступа.Вставить("Сервер", Объект.Сервер);
		ПараметрыДоступа.Вставить("АдресHTTPСервиса", Объект.АдресHTTPСервиса);
		Закрыть(ПараметрыДоступа);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_КлючДоступаПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура CRM_КлючДоступаПриИзменении(Элемент)
	
	CRM_КлючДоступаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере()
	СпискиКонтактов = Обработки.CRM_РаботаССервисомРассылокUnione.СписокДоменовUnione(Объект.Сервер, Объект.КлючДоступа);
	Если ТипЗнч(СпискиКонтактов) = Тип("СписокЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Подключение к UniOne прошло успешно.';
			|en='Connection to UniOne was successful.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	ПроверитьПодключениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписание(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияUnione"));
	
КонецПроцедуры

&НаСервере
Процедура СгенерироватьDKIMКлючНаСервере()
	
	Ресурс = "/ru/transactional/api/v1/domain/get-dns-records.json";
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", Объект.КлючДоступа);
	ДанныеЗапроса.Вставить("domain", Домен);
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(Объект.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета.Получить("message"));
	Иначе
		verification_record = СтруктураОтвета["verification-record"];
		dkim = СтруктураОтвета["dkim"];
		Элементы.dkim.Видимость = Истина;
		Элементы.verification_record.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьDKIMКлюч(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Домен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан домен!'"), , "Домен");
		Возврат;
	КонецЕсли;
	СгенерироватьDKIMКлючНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьDKIMНаСервере()
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", Объект.КлючДоступа);
	ДанныеЗапроса.Вставить("domain", Домен);
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	ЕстьОшибки = Ложь;
	
	Ресурс = "/ru/transactional/api/v1/domain/validate-dkim.json";
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(Объект.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета["message"]);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Ресурс = "/ru/transactional/api/v1/domain/validate-verification-record.json";
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(Объект.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета["message"]);
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Проверка прошла успешно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьDKIM(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Домен) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан домен!'"), , "Домен");
		Возврат;
	КонецЕсли;
	ПроверитьDKIMНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьWebhookНаСервере()
	Ресурс = "/ru/transactional/api/v1/webhook/set.json";
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", Объект.КлючДоступа);
	ДанныеЗапроса.Вставить("url", Объект.АдресHTTPСервиса + ?(Прав(СокрЛП(Объект.АдресHTTPСервиса),
		 1) = "/", "", "/") 
		+ "UniOne");
	ДанныеЗапроса.Вставить("event_format", "json_post");
	ДанныеЗапроса.Вставить("delivery_info", 1);
	ДанныеЗапроса.Вставить("single_event", 0);
	ДанныеЗапроса.Вставить("max_parallel", 10);
	
	email_status = Новый Массив;
	email_status.Добавить("sent");
	email_status.Добавить("delivered");
	email_status.Добавить("opened");
	email_status.Добавить("hard_bounced");
	email_status.Добавить("soft_bounced");
	email_status.Добавить("spam");
	email_status.Добавить("clicked");
	email_status.Добавить("unsubscribed");
	
	spam_block = Новый Массив;
	spam_block.Добавить("*");
	
	ДанныеЗапроса.Вставить("events", Новый Структура("email_status, spam_block", email_status, spam_block));

	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(Объект.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета["message"]);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Webhook установлен'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьWebhook(Команда)
	УстановитьWebhookНаСервере();
КонецПроцедуры
