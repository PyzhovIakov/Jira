#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

// Отправить письмо.
//
// Параметры:
//  ПараметрыПисьма	 - Структура - Параметры письма. 
//  api_key			 - Строка - Ключ API.
//  СписокРассылки	 - Строка - Список рассылки. 
//  Отправитель		 - Строка - Отправитель. 
//  EmailОтправителя - Строка - Email отправителя.  
//  ИдРассылки		 - Строка - ИД рассылки.
//  ТекстОтвета		 - Строка - Текст ответа. 
// 
// Возвращаемое значение:
//  Структура - Структура ответа. 
//
Функция ВыполнитьОтправкуПисьма(Объект, ПараметрыПисьма, НастройкиСервиса, ТекстОтвета) Экспорт
	
	Отправитель = Объект.УчетнаяЗапись.ИмяПользователя;
	EmailОтправителя = Объект.УчетнаяЗапись.АдресЭлектроннойПочты;
	Тело = ПараметрыПисьма.Тело;
	
	Ресурс = "/ru/transactional/api/v1/email/send.json";
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", НастройкиСервиса.КлючДоступа);
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("template_engine", "simple");
	СтруктураПисьма.Вставить("subject", ПараметрыПисьма.Тема);
	СтруктураПисьма.Вставить("from_email", EmailОтправителя);
	СтруктураПисьма.Вставить("from_name", ?(ЗначениеЗаполнено(Отправитель), Отправитель, EmailОтправителя));
	СтруктураПисьма.Вставить("reply_to", EmailОтправителя);
	СтруктураПисьма.Вставить("track_links", 0);
	СтруктураПисьма.Вставить("track_read", 0);
	
	Получатели = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыПисьма.Кому Цикл 
		Получатели.Добавить(Новый Структура("email", СтрокаТаблицы.Адрес));
	КонецЦикла;
	СтруктураПисьма.Вставить("recipients", Получатели);
	
	Вложения = Новый Массив;
	ВложенияВТексте = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыПисьма.Вложения Цикл 
		
		Расширение = НРег(Сред(СтрокаТаблицы.Представление, СтрНайти(СтрокаТаблицы.Представление, ".",
			 НаправлениеПоиска.СКонца) 
			+ 1));
		ТипMIME = CRM_РаботаСМессенджерамиСерверПовтИсп.ТипMIMEПоРасширениюФайла(Расширение);
		СтруктураВложения = Новый Структура;
		СтруктураВложения.Вставить("type", ТипMIME);
		Если ТипЗнч(СтрокаТаблицы.АдресВоВременномХранилище) = Тип("ДвоичныеДанные") Тогда
			ДанныеФайла = Base64Строка(СтрокаТаблицы.АдресВоВременномХранилище);
		ИначеЕсли ТипЗнч(СтрокаТаблицы.АдресВоВременномХранилище) = Тип("Структура") Тогда
			ДанныеФайла = Base64Строка(СтрокаТаблицы.Значение.ДвоичныеДанные);
		КонецЕсли;
		СтруктураВложения.Вставить("content", ДанныеФайла);
		
		Если СтрокаТаблицы.Свойство("Идентификатор") Тогда
			СтруктураВложения.Вставить("name", СтрЗаменить(СтрокаТаблицы.Идентификатор, "-", ""));
			Тело = СтрЗаменить(Тело, СтрокаТаблицы.Идентификатор, СтрЗаменить(СтрокаТаблицы.Идентификатор, "-", ""));
			ВложенияВТексте.Добавить(СтруктураВложения);
		Иначе
			СтруктураВложения.Вставить("name", СтрокаТаблицы.Представление);
			Вложения.Добавить(СтруктураВложения);
		КонецЕсли;
		
	КонецЦикла;
	СтруктураПисьма.Вставить("attachments", Вложения);
	СтруктураПисьма.Вставить("inline_attachments", ВложенияВТексте);
	
	СтруктураПисьма.Вставить("body", Новый Структура("html", Тело));
	ДанныеЗапроса.Вставить("message", СтруктураПисьма);
	
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(НастройкиСервиса.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ТекстОтвета = СтруктураОтвета["message"];
		Возврат Неопределено;
	Иначе
		Возврат СтрЗаменить(Строка(СтруктураОтвета["job_id"]), Символы.НПП, "");
	КонецЕсли;
	
КонецФункции

// Массив шаблонов uni sender
// 
// Возвращаемое значение:
//  Структура - Структура ответа. 
//
Функция МассивШаблоновСервиса(НастройкиСервиса) Экспорт
	Возврат Неопределено;
КонецФункции

// Шаблон uni sender
//
// Параметры:
//  Шаблон	 - Строка - ИД шаблона. 
// 
// Возвращаемое значение:
//  Структура - Структура ответа.
//
Функция ШаблонСервиса(НастройкиСервиса, Шаблон) Экспорт
	Возврат Неопределено;
КонецФункции

// Функция - проверить адрес учетной записи
//
// Параметры:
//  email	 - Строка - Строка с email адресом.
// 
// Возвращаемое значение:
//  Булево - Существование адреса. 
//
Функция ПроверитьАдресУчетнойЗаписи(НастройкиСервиса, email) Экспорт
	
	СписокДоменов = СписокДоменовUnione(НастройкиСервиса.Сервер, НастройкиСервиса.КлючДоступа);
	Если СписокДоменов.НайтиПоЗначению(Сред(email, СтрНайти(email, "@") + 1)) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выбранная учетная запись не была подтверждена в UniOne.';
			|en='The selected account was not confirmed in UniOne.'"));
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ПодписатьАдресНаРассылки(НастройкиСервиса, email) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ОтписатьАдресОтРассылки(НастройкиСервиса, email) Экспорт
	
	Ресурс = "/ru/transactional/api/v1/unsubscribed/set.json";
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", НастройкиСервиса.КлючДоступа);
	ДанныеЗапроса.Вставить("address", email);
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(НастройкиСервиса.Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета["message"]);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтатусыEmailРассылок(НастройкиСервиса, ТаблицаПисем) Экспорт
	
КонецПроцедуры

Функция ИспользуетсяОбновлениеСтатусов() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

// Функция - Списки контактов uni sender
//
// Параметры:
//  api_key	 - Строка - Ключ API. 
// 
// Возвращаемое значение:
//  СписокЗначений - Список контактов.
//
Функция СписокДоменовUnione(Сервер, КлючДоступа) Экспорт
	
	Ресурс = "/ru/transactional/api/v1/domain/list.json";
	ДанныеЗапроса = Новый Структура();
	ДанныеЗапроса.Вставить("api_key", КлючДоступа);
	Запрос = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ДанныеЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(СтрЗаменить(Сервер, "https://", ""), Запрос, Ресурс), Истина);
	
	СписокДоменов = Новый СписокЗначений;
	Если СтруктураОтвета["status"] = "error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения данных с UniOne';en='Error getting data from UniOne'") 
			+ ": " 
			+ СтруктураОтвета["message"]);
		Возврат СписокДоменов;
	Иначе
		Для Каждого Домен Из СтруктураОтвета["domains"] Цикл
			СписокДоменов.Добавить(Домен["domain"]);
		КонецЦикла;
		Возврат СписокДоменов;
	КонецЕсли;

КонецФункции

Функция ОбработатьWebHook(Запрос) Экспорт
	СтруктураХука = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(Запрос.ПолучитьТелоКакСтроку(), Истина);
	Для каждого СобытиеПользователя Из СтруктураХука["events_by_user"] Цикл
		
		Для каждого Событие Из СобытиеПользователя["events"] Цикл
			Если Событие["event_name"] = "transactional_email_status" Тогда
				ДанныеСобытия = Событие["event_data"];
				Статус = ДанныеСобытия["status"];
				Письмо = Документы.ЭлектронноеПисьмоИсходящее.НайтиПоРеквизиту("ИдентификаторСообщения", ДанныеСобытия["job_id"]);
				Если НЕ Письмо.Пустая() Тогда 
					ЗаписьРегистра = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Письмо = Письмо;
					ЗаписьРегистра.Статус = СоответствиеСтатусаUniOne(Статус);
					ЗаписьРегистра.СтатусСтрокой = Статус;
					ЗаписьРегистра.Записать();
					Если ЗаписьРегистра.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки Тогда
						МассивАдресов = Новый Массив;
						Для каждого Получатель Из Письмо.ПолучателиПисьма Цикл
							МассивАдресов.Добавить(Получатель.Адрес);
						КонецЦикла;
						СоответствиеАдресов =
							CRM_ИнтеграцияССервисамиРассылок.НайтиАдресаЭлектроннойПочтыВКонтактнойИнформации(МассивАдресов);
						Для каждого ОбъектКИ Из СоответствиеАдресов Цикл
							Если ЗначениеЗаполнено(ОбъектКИ.Ключ) Тогда
								Объект = ОбъектКИ.Ключ.ПолучитьОбъект();
								Объект.CRM_ОтписалсяОтEmailРассылок = Истина;
								Объект.Записать();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеСтатусаUniOne(СтатусСтрокой)
	Если СтатусСтрокой = "opened" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Прочитано;
	ИначеЕсли СтатусСтрокой = "delivered" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Доставлено;
	ИначеЕсли СтатусСтрокой = "sent" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.Отправлено;
	ИначеЕсли СтатусСтрокой = "clicked" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.ПереходПоСсылке;
	ИначеЕсли СтатусСтрокой = "unsubscribed" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.ПолучательОтписалсяОтРассылки;
	ИначеЕсли СтатусСтрокой = "soft_bounced" ИЛИ СтатусСтрокой = "hard_bounced" ИЛИ СтатусСтрокой = "spam" Тогда
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.НеДоставлено;
	Иначе
		Возврат Перечисления.CRM_СтатусыПисемEmailРассылки.НеДоставлено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли
