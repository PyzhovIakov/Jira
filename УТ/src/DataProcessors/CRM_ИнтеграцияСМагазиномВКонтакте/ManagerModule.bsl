#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Процедура ВыполнитьОбмен(Настройки) Экспорт
	
	Если Настройки.Свойство("ЗагружатьДанные") И Настройки.ЗагружатьДанные Тогда
		//ЗагрузитьНоменклатуру(Настройки);
		ЗагрузитьЗаказы(Настройки);
		ОбщегоНазначенияБТС.Пауза(2);
	КонецЕсли;
	
	Если Настройки.Свойство("ВыгружатьДанные") И Настройки.ВыгружатьДанные Тогда
		ВыгрузитьХарактеристики(Настройки);
		ОбщегоНазначенияБТС.Пауза(2);
		ВызватьВыгрузкуПовторно = Ложь;
		ВыгрузитьНоменклатуру(Настройки, ВызватьВыгрузкуПовторно);
		Если ВызватьВыгрузкуПовторно Тогда
			ОбщегоНазначенияБТС.Пауза(2);
			ВыгрузитьНоменклатуру(Настройки, ВызватьВыгрузкуПовторно);
		КонецЕсли;
		ОбщегоНазначенияБТС.Пауза(2);
		ВыгрузитьСтатусыЗаказов(Настройки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачальнаяРегистрацияДанных(Настройки) Экспорт
	ЗарегистрироватьНоменклатуру(Настройки);
КонецПроцедуры

#КонецОбласти

Процедура ЗагрузитьНоменклатуру(НастройкиИнтеграции) Экспорт
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	ВсеПолучены = Ложь;
	ДатаСеанса = ТекущаяДатаСеанса();
	Смещение = 0;
	Пока НЕ ВсеПолучены Цикл
		Ресурс = "/method/market.get?v=5.199&count=100&extended=1&access_token=" + НастройкиИнтеграции.Токен +
			"&owner_id=-" + НастройкиИнтеграции.IDГруппы + "&offset=" + Формат(Смещение, "ЧГ=");
		
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
			 "",
			 Ресурс));
		Если СтруктураОтвета.Свойство("error") Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка номенклатуры'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , НастройкиИнтеграции.Магазин, СтруктураОтвета.error.error_msg);
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		ИначеЕсли СтруктураОтвета.response.count > 0 Тогда
			
			ТаблицаИдентификаторов = Новый ТаблицаЗначений;
			ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
						
			Для каждого Элемент Из СтруктураОтвета.response.Items Цикл
				НовСтр = ТаблицаИдентификаторов.Добавить();
				НовСтр.Идентификатор = Формат(Элемент.id, "ЧГ=0");
			КонецЦикла;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТЗИдентификаторы.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
			|ПОМЕСТИТЬ Идентификаторы
			|ИЗ
			|	&ТЗИдентификаторы КАК ТЗИдентификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Идентификаторы.Идентификатор КАК Идентификатор,
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Ссылка,
			|	СоответствияОбъектовИнформационныхБазФайлы.УникальныйИдентификаторПриемника КАК ИдентификаторФайла,
			|	0 КАК Цена
			|ИЗ
			|	Идентификаторы КАК Идентификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБазФайлы
			|			ПО СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = СоответствияОбъектовИнформационныхБазФайлы.УникальныйИдентификаторИсточника.ВладелецФайла";
			Если ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ВидЦен) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК Цена", "ЦеныНоменклатурыСрезПоследних.Цена КАК Цена");
				ТекстЗапроса = ТекстЗапроса + "
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
				|			ПО СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = ЦеныНоменклатурыСрезПоследних.Номенклатура
				|				И ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦен";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|		ПО Идентификаторы.Идентификатор = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника
			|			И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
			|			И (СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника ССЫЛКА Справочник.Номенклатура)
			|ИТОГИ
			|	МАКСИМУМ(Ссылка),
			|	МАКСИМУМ(Цена)
			|ПО
			|	Идентификатор";
			
			Запрос.Текст = ТекстЗапроса;
			
			Запрос.УстановитьПараметр("Магазин", НастройкиИнтеграции.Магазин);
			Запрос.УстановитьПараметр("ТЗИдентификаторы", ТаблицаИдентификаторов);
			Запрос.УстановитьПараметр("ВидЦен", НастройкиИнтеграции.НастройкиВыгрузки.ВидЦен);
			
			СоответствиеИдентификаторов = Новый Соответствие;
			Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					МассиыФото = Новый Массив;
					ВыборкаФото = Выборка.Выбрать();
					Пока ВыборкаФото.Следующий() Цикл
						МассиыФото.Добавить(ВыборкаФото.ИдентификаторФайла);
					КонецЦикла;
					СоответствиеИдентификаторов.Вставить(СокрЛП(Выборка.Идентификатор), Новый Структура("Ссылка,
						| Цена, МассиыФото", Выборка.Ссылка, Выборка.Цена,
						 МассиыФото));
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент Из СтруктураОтвета.response.Items Цикл
				
				НачатьТранзакцию();
				
				Попытка
					СтруктураНоменклатура = СоответствиеИдентификаторов.Получить(Формат(Элемент.id, "ЧГ=0"));
					Если СтруктураНоменклатура = Неопределено Тогда
						НомОбъект = Справочники.Номенклатура.СоздатьЭлемент();
						Номенклатура = Справочники.Номенклатура.ПолучитьСсылку();
						НомОбъект.УстановитьСсылкуНового(Номенклатура);
						НомОбъект.УстановитьНовыйКод();
						ТекЦена = 0;
					Иначе
						Номенклатура = СтруктураНоменклатура.Ссылка;
						НомОбъект = Номенклатура.ПолучитьОбъект();
						ТекЦена = СтруктураНоменклатура.Цена;
					КонецЕсли;
					
					НомОбъект.Наименование = Элемент.title;
					НомОбъект.НаименованиеПолное = Элемент.description;
					
					Элемент.Свойство("sku", НомОбъект.Артикул);
					
					НомОбъект.Родитель = НастройкиИнтеграции.НастройкиЗагрузки.ГруппаНоменклатуры;
					
					НоменклатурнаяГруппа = НастройкиИнтеграции.НастройкиЗагрузки.НоменклатурнаяГруппа;
					Для каждого СоответствиеКатегории Из НастройкиИнтеграции.НастройкиВыгрузки.СоответствиеКатегорий Цикл
						Если СоответствиеКатегории.ИдентификаторКатегории = Элемент.category.id Тогда
							НоменклатурнаяГруппа = СоответствиеКатегории.НоменклатурнаяГруппа;
						КонецЕсли;
					КонецЦикла;
					НомОбъект.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
					
					НомОбъект.ТипНоменклатуры = НастройкиИнтеграции.НастройкиЗагрузки.ТипНоменклатуры;
					НомОбъект.ЕдиницаИзмерения = НастройкиИнтеграции.НастройкиЗагрузки.ЕдиницаИзмерения;
					
					Фотки = "";
					Для каждого Фото Из Элемент.photos Цикл
						Фотки = Фотки + "," + Формат(Фото.owner_id, "ЧГ=0") + "_" + Формат(Фото.id, "ЧГ=0") + "_" + Фото.access_key;
					КонецЦикла;
					
					РесурсФото = "/method/photos.getById?v=5.199&photos=" + Сред(Фотки, 2) 
						+ "&extended=0&photo_sizes=0&access_token=" 
						+ НастройкиИнтеграции.Токен;
					СтруктураОтветаФото = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
						 "",
						 РесурсФото));
					Если СтруктураОтветаФото.Свойство("error") Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка номенклатуры'",
							 ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка, , НастройкиИнтеграции.Магазин, СтруктураОтвета.error.error_msg);
						Продолжить;	
					ИначеЕсли СтруктураОтветаФото.response.Количество() > 0 Тогда
						Обложка = Неопределено;
						Для каждого Фото Из СтруктураОтветаФото.response Цикл
							
							ИдентификаторФайла = Формат(Фото.id, "ЧГ=0");
							Если СтруктураНоменклатура <> Неопределено 
								И СтруктураНоменклатура.МассиыФото.Найти(ИдентификаторФайла) <> Неопределено Тогда
								Обложка = "";
								Продолжить;
							КонецЕсли;
							
							МаксРазмер = 0;
							ТекИндекс = 0;
							Для каждого Размер Из Фото.sizes Цикл
								Если Размер.height > МаксРазмер Тогда
									Индекс = ТекИндекс;
								КонецЕсли;
								ТекИндекс = ТекИндекс + 1;
							КонецЦикла;
							
							ПутьКФайлу = Фото.sizes[Индекс].url;
							
							ИмяФайла = Сред(ПутьКФайлу, СтрНайти(ПутьКФайлу, "/", НаправлениеПоиска.СКонца) + 1);
							КопироватьФайл(ПутьКФайлу, КаталогВременныхФайлов + ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							
							ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
							ПараметрыФайла.ВладелецФайлов = Номенклатура;
							ПараметрыФайла.ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1);
							ПараметрыФайла.РасширениеБезТочки = Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1);

							Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
							Если Обложка = Неопределено Тогда
								Обложка = Файл;
							КонецЕсли;

							УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
							
							СтруктураЗаписи = Новый Структура;
							СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
							СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", Файл);
							СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", ИдентификаторФайла);
							СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
								
							РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
							
						КонецЦикла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Обложка) Тогда
						НомОбъект.ФайлКартинки = Обложка;
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
						Если Элемент.Свойство("dimensions") Тогда
							Если ЗначениеЗаполнено(Элемент.dimensions.width) 
								И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыШирина) Тогда
								СтрДР = НомОбъект.ДополнительныеРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыШирина,
									 "Свойство");
								Если СтрДР = Неопределено Тогда
									СтрДР = НомОбъект.ДополнительныеРеквизиты.Добавить();
									СтрДР.Свойство = НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыШирина;
								КонецЕсли;
								СтрДР.Значение = Элемент.dimensions.width;
							КонецЕсли;
							Если ЗначениеЗаполнено(Элемент.dimensions.height) 
								И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВысота) Тогда
								СтрДР = НомОбъект.ДополнительныеРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВысота,
									 "Свойство");
								Если СтрДР = Неопределено Тогда
									СтрДР = НомОбъект.ДополнительныеРеквизиты.Добавить();
									СтрДР.Свойство = НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВысота;
								КонецЕсли;
								СтрДР.Значение = Элемент.dimensions.height;
							КонецЕсли;
							Если ЗначениеЗаполнено(Элемент.dimensions.length) 
								И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыГлубина) Тогда
								СтрДР = НомОбъект.ДополнительныеРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыГлубина,
									 "Свойство");
								Если СтрДР = Неопределено Тогда
									СтрДР = НомОбъект.ДополнительныеРеквизиты.Добавить();
									СтрДР.Свойство = НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыГлубина;
								КонецЕсли;
								СтрДР.Значение = Элемент.dimensions.length;
							КонецЕсли;
						КонецЕсли;
						Если Элемент.Свойство("weight") И ЗначениеЗаполнено(Элемент.weight) 
							И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВес) Тогда
							СтрДР = НомОбъект.ДополнительныеРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВес, "Свойство");
							Если СтрДР = Неопределено Тогда
								СтрДР = НомОбъект.ДополнительныеРеквизиты.Добавить();
								СтрДР.Свойство = НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВес;
							КонецЕсли;
							СтрДР.Значение = Элемент.weight;
						КонецЕсли;
					КонецЕсли;
					
					НомОбъект.ОбменДанными.Загрузка = Истина;
					НомОбъект.Записать();
					
					Если ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.ВидЦен) Тогда
						Цена = Число(Элемент.price.amount) / 100;
						Если ЗначениеЗаполнено(Цена) И Цена <> ТекЦена Тогда
							Записи = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
							Запись = Записи.Добавить();
							Запись.Период = ДатаСеанса;
							Запись.ВидЦен = НастройкиИнтеграции.НастройкиВыгрузки.ВидЦен;
							Запись.Номенклатура = Номенклатура;
							Запись.Актуальность = Истина;
							Запись.Цена = Цена;
							Запись.Автор = Пользователи.ТекущийПользователь();
							
							Записи.ОбменДанными.Загрузка = Истина;
							Записи.Записать();
						КонецЕсли;
					КонецЕсли;
					
					Если СтруктураНоменклатура = Неопределено Тогда
						СтруктураЗаписи = Новый Структура;
						СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
						СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", НомОбъект.Ссылка);
						СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", Формат(Элемент.id, "ЧГ=0"));
						СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
							
						РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка номенклатуры'",
						 ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Информация, , НастройкиИнтеграции.Магазин, ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
			
			Если СтруктураОтвета.response.count < 100 Тогда
				ВсеПолучены = Истина;
			Иначе
				Смещение = Смещение + 100;
			КонецЕсли;
			
		Иначе
			ВсеПолучены = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КатегорииТоваров(Токен) Экспорт
	Ресурс = "/method/market.getCategories?v=5.122&count=1000&access_token=" + Токен;
		
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Возврат СтруктураОтвета.response.items;
	КонецЕсли;
КонецФункции

Функция ПодборкиТоваров(НастройкиИнтеграции) Экспорт
	Ресурс = "/method/market.getAlbums?v=5.122&count=100&owner_id=-" + НастройкиИнтеграции.IDГруппы 
		+ "&access_token=" 
		+ НастройкиИнтеграции.Токен;
		
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Возврат СтруктураОтвета.response.items;
	КонецЕсли;
КонецФункции

Функция ВыгружатьНоменклатуру(Настройки, Номенклатура) Экспорт
	СхемаКД = Новый СхемаКомпоновкиДанных;

	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ Справочник.Номенклатура";
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	НастройкиСКД = Настройки.НастройкиВыгрузки.НастройкиОтбораНоменклатуры;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	НастройкиСКД = КомпоновщикНастроек.Настройки;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	ВыбранныеПоляДетальнаяГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ЭлементОтбора = НайтиОтборРекурсивно(НастройкиСКД.Отбор.Элементы, Новый ПолеКомпоновкиДанных("Ссылка"));
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Номенклатура;
			
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиСКД, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат (ТаблицаРезультат.Количество() > 0);
	
КонецФункции

Процедура ЗарегистрироватьНоменклатуру(Настройки) Экспорт
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Настройки.Магазин, Метаданные.Справочники.Номенклатура);
	
	СхемаКД = Новый СхемаКомпоновкиДанных;

	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ Справочник.Номенклатура";
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	НастройкиСКД = Настройки.НастройкиВыгрузки.НастройкиОтбораНоменклатуры;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	НастройкиСКД = КомпоновщикНастроек.Настройки;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	ВыбранныеПоляДетальнаяГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных("Ссылка");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиСКД, , ,
		 Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Для каждого СтрТаб Из ТаблицаРезультат Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(Настройки.Магазин, СтрТаб.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ПолучитьСписокГруппПользователя(Токен) Экспорт
	Ресурс = "/method/groups.get?v=5.199&extended=1&filter=admin&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.error_msg);
	Иначе
		СписокГрупп = Новый СписокЗначений;
		Для каждого Группа Из СтруктураОтвета.response.items Цикл
			СписокГрупп.Добавить(Формат(Группа.id, "ЧГ="), Группа.name);
		КонецЦикла;
		Возврат СписокГрупп;
	КонецЕсли;
КонецФункции

Функция ДанныеГруппы(Токен) Экспорт
	Ресурс = "/method/users.get?v=5.199&fields=id,name&access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		Для каждого Пользователь Из СтруктураОтвета.response Цикл
			Возврат Пользователь.first_name + " " + Пользователь.last_name;
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ЗагрузитьФайлНаСерверВКонтакте(НастройкиИнтеграции, Файл, Вызовов)
	
    ПроверитьКоличествоВызовов(Вызовов);
	Ресурс = "/method/market.getProductPhotoUploadServer?v=5.199&group_id=" + НастройкиИнтеграции.IDГруппы
		+ "&access_token=" + НастройкиИнтеграции.Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		Возврат Неопределено;
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	Иначе
		СерверЗагрузки = СтрЗаменить(СтруктураОтвета.response.upload_url, "https://", "");
	КонецЕсли;
	
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");

	Тело         = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело, КодировкаТекста.ANSI);
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" 
	+ Файл.Наименование + "." + Файл.Расширение 
	+ """");
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.Записать(РаботаСФайлами.ДвоичныеДанныеФайла(Файл));
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Boundary);
	
	ДвоичныеДанныеДляОтправки = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	ЗаголовокHTTP = Новый Соответствие;
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	ЗаголовокHTTP.Вставить("Content-Length", XMLСтрока(ДвоичныеДанныеДляОтправки.Размер()));
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(СерверЗагрузки, , , , Прокси, 180, Новый ЗащищенноеСоединениеOpenSSL);
	
	ЗапросHTTP      = Новый HTTPЗапрос("", ЗаголовокHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеДляОтправки);
	
	Ответ = Соединение.ОтправитьДляОбработки(ЗапросHTTP);
	
    ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(ТекстОтвета);
	Если СтруктураОтвета.Свойство("error") Тогда
		Если СтруктураОтвета.error = "wrong_file" Тогда
			Возврат Неопределено;
			ВызватьИсключение НСтр("ru = 'Не удалось загрузить файл. Файл не должен быть исполняемым,
				| а его размер не должен превышать 1 ГБ.';
				| en = 'wrong_file'");
		Иначе
			Возврат Неопределено;
			ВызватьИсключение СтруктураОтвета.error;
		КонецЕсли;	
	Иначе
	    ПроверитьКоличествоВызовов(Вызовов);
		Ресурс = "/method/market.saveProductPhoto?v=5.199"
			+ "&upload_response=" + ТекстОтвета 
			+ "&access_token=" + НастройкиИнтеграции.Токен;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
			 "",
			 Ресурс));
		Если СтруктураОтвета.Свойство("error") Тогда
			Возврат Неопределено;
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		КонецЕсли;
		Ответ = СтруктураОтвета.response;
		idФото = Формат(Ответ.photo_id, "ЧГ=");
	КонецЕсли;
	
	Возврат idФото;
	
КонецФункции

Функция НайтиОтборРекурсивно(КоллекцияЭлементов, ЗначениеПоиска)
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		Иначе
			ЭлементОтбора = НайтиОтборРекурсивно(ЭлементОтбора.Элементы, ЗначениеПоиска);
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

Процедура ВыгрузитьХарактеристики(НастройкиИнтеграции)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") 
		И НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ВыгрузкаИспользоватьХарактеристики")
		И НастройкиИнтеграции.НастройкиВыгрузки.ВыгрузкаИспользоватьХарактеристики
		И НастройкиИнтеграции.НастройкиВыгрузки.СписокХарактеристик.Количество() > 0 Тогда

		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		                      |	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК УИПХарактеристика,
		                      |	ХарактеристикиНоменклатуры.Заголовок КАК Заголовок,
		                      |	ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеХарактеристики,
		                      |	ЗначенияСвойствОбъектов.Наименование КАК НаименованиеХарактеристики,
		                      |	СоответствияОбъектовИнформационныхБаз2.УникальныйИдентификаторПриемника КАК УИПЗначение
		                      |ИЗ
		                      |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ХарактеристикиНоменклатуры
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		                      |		ПО ХарактеристикиНоменклатуры.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		                      |			И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз2
		                      |			ПО ЗначенияСвойствОбъектов.Ссылка = СоответствияОбъектовИнформационныхБаз2.УникальныйИдентификаторИсточника
		                      |				И (СоответствияОбъектовИнформационныхБаз2.УзелИнформационнойБазы = &Магазин)
		                      |		ПО ХарактеристикиНоменклатуры.Ссылка = ЗначенияСвойствОбъектов.Владелец
		                      |ГДЕ
		                      |	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристик)
		                      |ИТОГИ
		                      |	МАКСИМУМ(УИПХарактеристика)
		                      |ПО
		                      |	Характеристика");
		
		Запрос.УстановитьПараметр("Магазин", НастройкиИнтеграции.Магазин);
		Запрос.УстановитьПараметр("СписокХарактеристик", НастройкиИнтеграции.НастройкиВыгрузки.СписокХарактеристик);
	
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивХарактеристик = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Характеристика = Новый Структура;
			Характеристика.Вставить("title", Выборка.Заголовок);
			Если НЕ ЗначениеЗаполнено(Выборка.УИПХарактеристика) Тогда
				Характеристика.Вставить("guid", Строка(Выборка.Характеристика.УникальныйИдентификатор()));
				Характеристика.Вставить("id", 0);
			Иначе	
				Характеристика.Вставить("id", Число(Выборка.УИПХарактеристика));
			КонецЕсли;
			МассивЗначений = Новый Массив;
			ВыборкаЗначения = Выборка.Выбрать();
			Пока ВыборкаЗначения.Следующий() Цикл
				Значение = Новый Структура;
				Значение.Вставить("title", ВыборкаЗначения.НаименованиеХарактеристики);
				Если НЕ ЗначениеЗаполнено(ВыборкаЗначения.УИПЗначение) Тогда
					Значение.Вставить("guid", Строка(ВыборкаЗначения.ЗначениеХарактеристики.УникальныйИдентификатор()));
					Значение.Вставить("id", 0);
				Иначе	
					Значение.Вставить("id", Число(ВыборкаЗначения.УИПЗначение));
				КонецЕсли;
				МассивЗначений.Добавить(Значение);
			КонецЦикла;
			Характеристика.Вставить("variants", МассивЗначений);
			МассивХарактеристик.Добавить(Характеристика);
		КонецЦикла;
		
		КодЗапроса = ПолучитьМакет("МетодВыгрузкиХарактеристик").ПолучитьТекст();
		КодЗапроса = СтрЗаменить(КодЗапроса, "&group_id", НастройкиИнтеграции.IDГруппы);
		КодЗапроса = СтрЗаменить(КодЗапроса, "&properties",
			 CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(МассивХарактеристик,
			 Истина));
		Ресурс = "/method/execute?v=5.199&access_token=" + НастройкиИнтеграции.Токен;
		СтрЗапрос = "code=" + КодЗапроса;
		
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
				CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com", СтрЗапрос, Ресурс, , "x-www-form-urlencoded", , Истина));
		Если СтруктураОтвета.Свойство("error") Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка характеристик'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация, , Выборка.Ссылка, СтруктураОтвета.error.error_msg);
			ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
		ИначеЕсли ТипЗнч(СтруктураОтвета.response) = Тип("Массив") Тогда
			Для каждого СозданныйОбъект Из СтруктураОтвета.response Цикл
				Если СозданныйОбъект.type = "variant" Тогда
					СсылкаНаЭлемент =
						Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор(СозданныйОбъект.guid));
				Иначе
					СсылкаНаЭлемент =
						ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(СозданныйОбъект.guid));
				КонецЕсли;
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
				СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", СсылкаНаЭлемент);
				market_item_id = Формат(СозданныйОбъект.id, "ЧГ=");
				СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", market_item_id);
				СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
					
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьНоменклатуру(НастройкиИнтеграции, ВызватьВыгрузкуПовторно)
	
	Вызовов = 0;
	ВыгружатьХарактеристики = (ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") 
		И НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ВыгрузкаИспользоватьХарактеристики")
		И НастройкиИнтеграции.НастройкиВыгрузки.ВыгрузкаИспользоватьХарактеристики
		И НастройкиИнтеграции.НастройкиВыгрузки.СписокХарактеристик.Количество() > 0);
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		МассивДопРеквизитов = Новый Массив;
		
		ДопРеквизит = Неопределено;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ДоступностьВМагазине", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ГабаритыВес", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ГабаритыВысота", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ГабаритыГлубина", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("ГабаритыШирина", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
		Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("НедоступностьВМагазине", ДопРеквизит)
			И ЗначениеЗаполнено(ДопРеквизит) Тогда
			МассивДопРеквизитов.Добавить(ДопРеквизит);
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	НоменклатураИзменения.Ссылка КАК Ссылка,
	                      |	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК УникальныйИдентификаторПриемника,
	                      |	НоменклатураИзменения.Ссылка.Наименование КАК Наименование,
	                      |	ВЫРАЗИТЬ(НоменклатураИзменения.Ссылка.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеПолное,
	                      |	НоменклатураИзменения.Ссылка.Артикул КАК Артикул,
	                      |	НоменклатураИзменения.Ссылка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                      |	НоменклатураИзменения.Ссылка.Родитель КАК Группа,
	                      |	НоменклатураИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	                      |	НоменклатураИзменения.Ссылка.ФайлКартинки КАК Обложка,
	                      |	НоменклатураИзменения.Ссылка.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	                      |	НоменклатураПрисоединенныеФайлы.Ссылка КАК Файл,
	                      |	СоответствияОбъектовИнформационныхБазФайлы.УникальныйИдентификаторПриемника КАК УИПФайла,
	                      |	ВЫБОР
	                      |		КОГДА СоответствияОбъектовИнформационныхБазФайлы.УникальныйИдентификаторПриемника ЕСТЬ NULL
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК ЗагруженоФайлов
	                      |ИЗ
	                      |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	                      |		ПО НоменклатураИзменения.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	                      |			И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБазФайлы
	                      |			ПО НоменклатураПрисоединенныеФайлы.Ссылка = СоответствияОбъектовИнформационныхБазФайлы.УникальныйИдентификаторИсточника
	                      |				И (СоответствияОбъектовИнформационныхБазФайлы.УзелИнформационнойБазы = &Магазин)
	                      |		ПО НоменклатураИзменения.Ссылка = НоменклатураПрисоединенныеФайлы.ВладелецФайла
	                      |			И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	                      |			И НЕ НоменклатураПрисоединенныеФайлы.ЭтоГруппа
	                      |ГДЕ
	                      |	НоменклатураИзменения.Узел = &Магазин
	                      |ИТОГИ
	                      |	МАКСИМУМ(УникальныйИдентификаторПриемника),
	                      |	МАКСИМУМ(Наименование),
	                      |	МАКСИМУМ(НаименованиеПолное),
	                      |	МАКСИМУМ(Артикул),
	                      |	МАКСИМУМ(НоменклатурнаяГруппа),
	                      |	МАКСИМУМ(ПометкаУдаления),
	                      |	МАКСИМУМ(Обложка),
	                      |	МАКСИМУМ(ИспользоватьХарактеристики),
	                      |	СУММА(ЗагруженоФайлов)
	                      |ПО
	                      |	Ссылка");
	
	Запрос.УстановитьПараметр("Магазин", НастройкиИнтеграции.Магазин);
	
	ВидЦен = НастройкиИнтеграции.НастройкиВыгрузки.ВидЦен;
	СтараяЦена = Неопределено;
	Если НастройкиИнтеграции.НастройкиВыгрузки.Свойство("СтараяЦена") 
		И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиВыгрузки.СтараяЦена) Тогда
		
		СтараяЦена = НастройкиИнтеграции.НастройкиВыгрузки.СтараяЦена;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока Выборка.Следующий() Цикл
		Группировка_ID = 0;
		СоответствиеФайлов = Новый Соответствие;
		МассивХарактеристикИЦен = Новый Массив;
		МассивХарактеристикВК = Новый Массив;
		Если ВыгружатьХарактеристики И Выборка.ИспользоватьХарактеристики Тогда
			СписокХарактеристик = НастройкиИнтеграции.НастройкиВыгрузки.СписокХарактеристик;
			Если ЗначениеЗаполнено(Выборка.УникальныйИдентификаторПриемника) Тогда
				МассивХарактеристикВК = ПолучитьМассивХарактеристикВК(НастройкиИнтеграции,
					 Выборка.УникальныйИдентификаторПриемника,
					 Группировка_ID);
			КонецЕсли;
		Иначе	
			СписокХарактеристик = Новый СписокЗначений;
		КонецЕсли;
		МассивХарактеристикИЦен = ХарактеристикиИЦеныНоменклатуры(Выборка.Ссылка, СписокХарактеристик,
			НастройкиИнтеграции.Магазин, ВидЦен, СтараяЦена, МассивХарактеристикВК);
		Если МассивХарактеристикИЦен.Количество() = 0 Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка номенклатуры'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация, , Выборка.Ссылка, "Не установлена цена!");
			ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ВыборкаФайлы = Выборка.Выбрать();
		Если ВыборкаФайлы.Количество() = 1 И ВыборкаФайлы.Следующий() И Не ЗначениеЗаполнено(ВыборкаФайлы.Файл) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка номенклатуры'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация, , Выборка.Ссылка, "Нет изображения товара!");
			ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ЗагруженоФайлов = Выборка.ЗагруженоФайлов;
		Обложка = "";
		Фотографии = "";
		Для каждого Вариант Из МассивХарактеристикИЦен Цикл
			ЗагруженоФайлов = ?(Вариант.Свойство("item_id"), Выборка.ЗагруженоФайлов, 0);
			Обложка = "";
			Фотографии = "";
			ВыборкаФайлы.Сбросить();
			Пока ВыборкаФайлы.Следующий() И ЗагруженоФайлов < 4 Цикл
				Если СтрНайти("*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf",
					 ВыборкаФайлы.Файл.Расширение) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ВыборкаФайлы.Файл.Размер / 1024 / 1024 > 50 Тогда
					Возврат;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ВыборкаФайлы.УИПФайла) ИЛИ (СписокХарактеристик.Количество() > 0
					 И НЕ Вариант.Свойство("item_id")) Тогда

					idФайла = ЗагрузитьФайлНаСерверВКонтакте(НастройкиИнтеграции, ВыборкаФайлы.Файл, Вызовов);
				Иначе
					idФайла = Неопределено;
				КонецЕсли;
				Если idФайла = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗагруженоФайлов = ЗагруженоФайлов + 1;
				Если ВыборкаФайлы.Обложка = ВыборкаФайлы.Файл Тогда
					Обложка = idФайла;
				Иначе
					Фотографии = Фотографии + ?(Фотографии = "", "", ",") + idФайла;
				КонецЕсли;
				
				Если Не РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ВыборкаФайлы.Файл,
					 НастройкиИнтеграции.Магазин) Тогда
				
					СтруктураЗаписи = Новый Структура;
					СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ВыборкаФайлы.Файл);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", idФайла);
					СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
						
					РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);

				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Обложка) Тогда
				Вариант.Вставить("main_photo_id", Число(Обложка));
			КонецЕсли;
			Если Фотографии <> "" Тогда
				Вариант.Вставить("photo_ids", Фотографии);
			КонецЕсли;
		КонецЦикла;
		
		Категория = Неопределено;
		Для каждого СоответствиеКатегори Из НастройкиИнтеграции.НастройкиВыгрузки.СоответствиеКатегорий Цикл
			Если СоответствиеКатегори.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа Тогда
				Категория = СоответствиеКатегори.ИдентификаторКатегории;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Категория = Неопределено Тогда
			Категория = НастройкиИнтеграции.НастройкиВыгрузки.ИдентификаторКатегорииПоУмолчанию;
		КонецЕсли;
		
		Подборка = 0;
		ПараметрыЗапроса = Новый Структура;
		Если ЗначениеЗаполнено(Выборка.УникальныйИдентификаторПриемника) Тогда
			ПараметрыЗапроса.Вставить("item_id", Число(Выборка.УникальныйИдентификаторПриемника));
		Иначе
			Для каждого СоответствиеПодборки Из НастройкиИнтеграции.НастройкиВыгрузки.СоответствиеПодборок Цикл
				Если СоответствиеПодборки.Отбор = Выборка.НоменклатурнаяГруппа ИЛИ СоответствиеПодборки.Отбор = Выборка.Группа Тогда
					Подборка = СоответствиеПодборки.ИдентификаторПодборки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПараметрыЗапроса.Вставить("owner_id", Число("-" + НастройкиИнтеграции.IDГруппы));
		ПараметрыЗапроса.Вставить("name", Выборка.Наименование);
		ПараметрыЗапроса.Вставить("description", Выборка.НаименованиеПолное);
		ПараметрыЗапроса.Вставить("category_id", Категория);
		Если ЗначениеЗаполнено(Выборка.Артикул) Тогда
			ПараметрыЗапроса.Вставить("sku", Выборка.Артикул);
		КонецЕсли;
		
		НеДоступен = Ложь;
		Если МассивДопРеквизитов.Количество() > 0 Тогда
			ДопРеквизиты = УправлениеСвойствами.ЗначенияСвойств(Выборка.Ссылка, Истина, Ложь, МассивДопРеквизитов); 
			СтрДР = ДопРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыШирина);
			Если СтрДР <> Неопределено И ЗначениеЗаполнено(СтрДР.Значение) Тогда
				ПараметрыЗапроса.Вставить("dimension_width", СтрДР.Значение);
			КонецЕсли;
			СтрДР = ДопРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВысота);
			Если СтрДР <> Неопределено И ЗначениеЗаполнено(СтрДР.Значение) Тогда
				ПараметрыЗапроса.Вставить("dimension_height", СтрДР.Значение);
			КонецЕсли;
			СтрДР = ДопРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыГлубина);
			Если СтрДР <> Неопределено И ЗначениеЗаполнено(СтрДР.Значение) Тогда
				ПараметрыЗапроса.Вставить("dimension_length", СтрДР.Значение);
			КонецЕсли;
			СтрДР = ДопРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.ГабаритыВес);
			Если СтрДР <> Неопределено И ЗначениеЗаполнено(СтрДР.Значение) Тогда
				ПараметрыЗапроса.Вставить("weight", СтрДР.Значение);
			КонецЕсли;
			СтрДР = ДопРеквизиты.Найти(НастройкиИнтеграции.НастройкиВыгрузки.НедоступностьВМагазине);
			Если СтрДР <> Неопределено  Тогда
				НеДоступен = СтрДР.Значение;
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗапроса.Вставить("deleted", Число(Выборка.ПометкаУдаления ИЛИ НеДоступен));
		
		КодЗапроса = ПолучитьМакет("МетодВыгрузкиНоменклатуры").ПолучитьТекст();
		КодЗапроса = СтрЗаменить(КодЗапроса, "&param",
			 CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(ПараметрыЗапроса,
			 Истина));
		КодЗапроса = СтрЗаменить(КодЗапроса, "&prices_properties",
			 CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(МассивХарактеристикИЦен,
			 Истина));
		КодЗапроса = СтрЗаменить(КодЗапроса, "&album", Подборка);
		КодЗапроса = СтрЗаменить(КодЗапроса, "&item_group_id", Формат(Группировка_ID, "ЧН=0; ЧГ=0"));
		КодЗапроса = СтрЗаменить(КодЗапроса, "&group_id", НастройкиИнтеграции.IDГруппы);
		Ресурс = "/method/execute?v=5.199&access_token=" + НастройкиИнтеграции.Токен;
		СтрЗапрос = "code=" + КодЗапроса;
		
		ПроверитьКоличествоВызовов(Вызовов);
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
			CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com", СтрЗапрос, Ресурс, , "x-www-form-urlencoded", , Истина));
		Если СтруктураОтвета.Свойство("error") Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка номенклатуры'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация, , Выборка.Ссылка, СтруктураОтвета.error.error_msg);
			ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
			Если СтруктураОтвета.error.Свойство("error_code") И СтруктураОтвета.error.error_code = 14 Тогда
				// Проверка капчи, завершим текущий цикл, сделаем паузу
				Возврат;
			КонецЕсли;
			Продолжить;
		ИначеЕсли СтруктураОтвета.Свойство("execute_errors") Тогда
			Для каждого ОшибкаВыполнения Из СтруктураОтвета.execute_errors Цикл
				ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка номенклатуры'",
					 ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Информация, , Выборка.Ссылка,
					?(ОшибкаВыполнения.Свойство("error_text"), ОшибкаВыполнения.error_text, ОшибкаВыполнения.error_msg));
			КонецЦикла;
		КонецЕсли;	
		Если СтруктураОтвета.Свойство("response") Тогда
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", Выборка.Ссылка);
			Если СтруктураОтвета.response.Свойство("result") 
				И ТипЗнч(СтруктураОтвета.response.result) = Тип("Структура")	
				И СтруктураОтвета.response.result.Свойство("market_item_id") Тогда

				market_item_id = Формат(СтруктураОтвета.response.result.market_item_id, "ЧГ=");
				СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", market_item_id);
				СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
					
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			КонецЕсли;
			Если СтруктураОтвета.response.Свойство("elements_not_found")
				И СтруктураОтвета.response.elements_not_found.Количество() > 0 Тогда
				
				Для Каждого Идентификатор Из СтруктураОтвета.response.elements_not_found Цикл
					СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", Формат(Идентификатор, "ЧГ="));
					РегистрыСведений.СоответствияОбъектовИнформационныхБаз.УдалитьЗапись(СтруктураЗаписи);
					ВыборкаФайлы.Сбросить();
					Пока ВыборкаФайлы.Следующий() Цикл
						Если ЗначениеЗаполнено(ВыборкаФайлы.УИПФайла) Тогда
							СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ВыборкаФайлы.Файл);
							СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", ВыборкаФайлы.УИПФайла);
							РегистрыСведений.СоответствияОбъектовИнформационныхБаз.УдалитьЗапись(СтруктураЗаписи);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				ВызватьВыгрузкуПовторно = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКоличествоВызовов(Вызовов)
	Если Вызовов > 5 Тогда
		Вызовов = 0;
		ОбщегоНазначенияБТС.Пауза(2);
	Иначе
		Вызовов = Вызовов + 1;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМассивХарактеристикВК(НастройкиИнтеграции, ТоварID, Группировка_ID)
	
	МассивХарактеристикВК = Новый Массив;
	
	Ресурс = "/method/market.getById?v=5.199&extended=1&access_token=" + НастройкиИнтеграции.Токен + "&item_ids=-"
		+ НастройкиИнтеграции.IDГруппы + "_" + ТоварID;
		
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com",
		 "",
		 Ресурс));
	Если СтруктураОтвета.Свойство("error") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка номенклатуры'",
			 ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , НастройкиИнтеграции.Магазин, СтруктураОтвета.error.error_msg);
		ВызватьИсключение СтруктураОтвета.error.error_msg;
	ИначеЕсли СтруктураОтвета.response.count > 0 Тогда
		ОписаниеТовара = СтруктураОтвета.response.items[0];
		Если ОписаниеТовара.Свойство("variants") Тогда
			Для каждого Вариант Из ОписаниеТовара.variants Цикл
				МассивХарактеристикВК.Добавить(Вариант);
			КонецЦикла;
		Иначе 
			МассивВариантов = Новый Массив;
			Если ОписаниеТовара.Свойство("property_values") Тогда
				Для Каждого ЗначениеСвойства Из ОписаниеТовара.property_values Цикл
					МассивВариантов.Добавить(ЗначениеСвойства.variant_id);
				КонецЦикла;
			КонецЕсли;
			МассивХарактеристикВК.Добавить(Новый Структура("item_id, variant_ids", Число(ТоварID), МассивВариантов));
		КонецЕсли;
		Если ОписаниеТовара.Свойство("variants_grouping_id") Тогда
			Группировка_ID = ОписаниеТовара.variants_grouping_id;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивХарактеристикВК;
	
КонецФункции

Функция ХарактеристикиИЦеныНоменклатуры(Номенклатура, СписокХарактеристик, Магазин, ВидЦен,
	 ВидЦенСтарый,
	 МассивХарактеристикВК)
	МассивХарактеристикИЦен = Новый Массив;
	СХарактеристиками = (СписокХарактеристик.Количество() > 0);
	Если СХарактеристиками Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатурыСтарые.Цена КАК ЦенаСтарая,
		|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК УИПЗначение
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|			ПО ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
		|				И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
		|		ПО ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
		|			И (ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство В (&СписокХарактеристик))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСтарые
		|		ПО ЦеныНоменклатуры.Номенклатура = ЦеныНоменклатурыСтарые.Номенклатура
		|			И ЦеныНоменклатуры.Характеристика = ЦеныНоменклатурыСтарые.Характеристика
		|			И ЦеныНоменклатурыСтарые.ВидЦен = &ВидЦенСтарый
		|ГДЕ
		|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатуры.ВидЦен = &ВидЦен
		|	И ЦеныНоменклатуры.Цена > 0
		|ИТОГИ
		|	МАКСИМУМ(Цена)
		|ПО
		|	Характеристика");
		Запрос.УстановитьПараметр("СписокХарактеристик", СписокХарактеристик);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатурыСтарые.Цена КАК ЦенаСтарая
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСтарые
		|		ПО ЦеныНоменклатуры.Номенклатура = ЦеныНоменклатурыСтарые.Номенклатура
		|			И ЦеныНоменклатуры.Характеристика = ЦеныНоменклатурыСтарые.Характеристика
		|			И ЦеныНоменклатурыСтарые.ВидЦен = &ВидЦенСтарый
		|ГДЕ
		|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатуры.ВидЦен = &ВидЦен
		|	И ЦеныНоменклатуры.Характеристика = &Характеристика
		|	И ЦеныНоменклатуры.Цена > 0");
		Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	Запрос.УстановитьПараметр("ВидЦенСтарый", ВидЦенСтарый);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтруктураХарактеристики = Новый Структура("price, old_price", Выборка.Цена,
			 ?(ЗначениеЗаполнено(Выборка.ЦенаСтарая), Выборка.ЦенаСтарая,
			 0));
		Если СХарактеристиками Тогда
			ВыборкаЗначений = Выборка.Выбрать();
			МассивХарактеристик = Новый Массив;
			Ном = 2;
			Пока ВыборкаЗначений.Следующий() И Ном > 0 Цикл
				МассивХарактеристик.Добавить(Число(ВыборкаЗначений.УИПЗначение));
				Ном = Ном - 1;
			КонецЦикла;
			СтруктураХарактеристики.Вставить("properties", МассивХарактеристик);
			Для каждого ХарактеристикаВК Из МассивХарактеристикВК Цикл
				Если CRM_ОбщегоНазначенияКлиентСервер.ИсключающееИЛИ(МассивХарактеристик,
					 ХарактеристикаВК.variant_ids).Количество() = 0 Тогда
					СтруктураХарактеристики.Вставить("item_id", ХарактеристикаВК.item_id);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		МассивХарактеристикИЦен.Добавить(СтруктураХарактеристики);
	КонецЦикла;
	Возврат МассивХарактеристикИЦен;
КонецФункции

Процедура ЗагрузитьЗаказы(НастройкиИнтеграции)
	ВсеПолучены = Ложь;
	Смещение = 0;
	Дата = УниверсальноеВремя(НастройкиИнтеграции.Магазин.ДатаПоследнегоОбмена) - Дата(1970, 1, 1) - 300;
	Вызовов = 0;
			
	СоответствиеСостояний = Новый Соответствие;
	Для каждого Состояние Из НастройкиИнтеграции.НастройкиЗагрузки.СоответствиеСостояний Цикл
		СоответствиеСостояний.Вставить(Состояние.ИдентификаторСтатуса, Состояние.Состояние);
	КонецЦикла;
	
	Пока НЕ ВсеПолучены Цикл
		КодЗапроса = ПолучитьМакет("МетодПолученияЗаказов").ПолучитьТекст();
		КодЗапроса = СтрЗаменить(КодЗапроса, "&group_id", НастройкиИнтеграции.IDГруппы);
		КодЗапроса = СтрЗаменить(КодЗапроса, "&offset", Формат(Смещение, "ЧН=; ЧГ="));
		КодЗапроса = СтрЗаменить(КодЗапроса, "&date", Формат(Дата, "ЧГ="));
		Ресурс = "/method/execute?v=5.199&access_token=" + НастройкиИнтеграции.Токен;
		СтрЗапрос = "code=" + КодЗапроса;
		
		ПроверитьКоличествоВызовов(Вызовов);
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
				CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com", СтрЗапрос, Ресурс, , "x-www-form-urlencoded", , Истина));
		Если СтруктураОтвета.Свойство("error") Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка заказов'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , НастройкиИнтеграции.Магазин, СтруктураОтвета.error.error_msg);
			ВызватьИсключение СтруктураОтвета.error.error_msg;
		ИначеЕсли СтруктураОтвета.response.count > 0 Тогда
			
			ТаблицаИдентификаторов = Новый ТаблицаЗначений;
			ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
						
			Для каждого Элемент Из СтруктураОтвета.response.orders Цикл
				НовСтр = ТаблицаИдентификаторов.Добавить();
				НовСтр.Идентификатор = Элемент.order.display_order_id;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТЗИдентификаторы.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
			|ПОМЕСТИТЬ Идентификаторы
			|ИЗ
			|	&ТЗИдентификаторы КАК ТЗИдентификаторы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Идентификаторы.Идентификатор КАК Идентификатор,
			|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Ссылка
			|ИЗ
			|	Идентификаторы КАК Идентификаторы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
			|		ПО Идентификаторы.Идентификатор = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника
			|			И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
			|			И (СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника ССЫЛКА Документ.CRM_Интерес)";
			
			Запрос.Текст = ТекстЗапроса;
			
			Запрос.УстановитьПараметр("Магазин", НастройкиИнтеграции.Магазин);
			Запрос.УстановитьПараметр("ТЗИдентификаторы", ТаблицаИдентификаторов);
			
			СоответствиеИдентификаторов = Новый Соответствие;
			Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					СоответствиеИдентификаторов.Вставить(СокрЛП(Выборка.Идентификатор), Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ССЫЛКА Документ.CRM_Интерес", "ССЫЛКА Справочник.Номенклатура");
			
			Для каждого Элемент Из СтруктураОтвета.response.orders Цикл
				
				user_id_стр = Формат(Элемент.order.user_id, "ЧГ="); 
				КИ_ВК = Обработки.CRM_РаботаСМессенджеромВКонтакте.ПредставлениеКонтактнойИнформацииПользователя(user_id_стр);
				Интерес = СоответствиеИдентификаторов.Получить(Элемент.order.display_order_id);
				Если Интерес = Неопределено Тогда
					ИнтересОбъект = Документы.CRM_Интерес.СоздатьДокумент();
					Ответственный = НастройкиИнтеграции.НастройкиЗагрузки.Ответственный;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(КИ_ВК, ,
					 Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
				Если НЕ ЗначениеЗаполнено(Контакт) И ЗначениеЗаполнено(Элемент.order.recipient.phone) Тогда
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(
						Обработки.CRM_РаботаСМессенджеромВКонтакте.ПредставлениеКонтактнойИнформацииПользователя(Элемент.order.recipient.phone), ,
						Перечисления.ТипыКонтактнойИнформации.Телефон);
				КонецЕсли;
				Если Контакт = Неопределено Тогда
					НовПК = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
					НовПК.Наименование = Элемент.order.recipient.name;
					НовПК.ДатаРегистрации = ТекущаяДатаСеанса();
					НовПК.ОсновнойМенеджер = Ответственный;
					
					ВидКИ =
						Обработки.CRM_РаботаСМессенджеромВКонтакте.ПолучитьВидКИМессенджера(Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка());
					ТипКИ = ВидКИ.Тип;
					СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
					ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, КИ_ВК, ВидКИ);
					УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовПК, ДанныеКИ, ВидКИ, ТипКИ);
					
					Если ЗначениеЗаполнено(Элемент.order.recipient.phone) Тогда
						ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
						ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
						СтруктураТелефона =
							сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Элемент.order.recipient.phone);
						Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны,
							 СтруктураТелефона.КодГорода, СтруктураТелефона.НомерТелефона, "",
							 "");
						ДанныеКИ = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление,
							 ВидКИ, "");
						УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовПК, ДанныеКИ, ВидКИ, ТипКИ);
					КонецЕсли;
					
					НовПК.Записать();
					Контакт = НовПК.Ссылка;
				ИначеЕсли НастройкиИнтеграции.НастройкиЗагрузки.Свойство("АдресоватьОтветственному")
					И НастройкиИнтеграции.НастройкиЗагрузки.АдресоватьОтветственному Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контакт, "ОсновнойМенеджер") Тогда
						Если ЗначениеЗаполнено(Контакт.ОсновнойМенеджер) Тогда
							Ответственный = Контакт.ОсновнойМенеджер;
						КонецЕсли;
					Иначе
						Ответственный = Контакт.Владелец.ОсновнойМенеджер;
					КонецЕсли;
				КонецЕсли;
				
				ТипКонтакта = ТипЗнч(Контакт);
				Если ТипКонтакта = Тип("СправочникСсылка.Партнеры") Тогда
					ИнтересОбъект.Партнер = Контакт;
				ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ИнтересОбъект.КонтактноеЛицо = Контакт;
					ИнтересОбъект.Партнер = Контакт.Владелец;
				Иначе
					ИнтересОбъект.ПотенциальныйКлиент = Контакт;
				КонецЕсли;
				
				ИнтересОбъект.Дата = МестноеВремя(Дата(1970, 1, 1) + Элемент.order.date);
				ИнтересОбъект.Тема = "Заказ №" + Элемент.order.display_order_id;
				Если Элемент.order.Свойство("comment") И ЗначениеЗаполнено(Элемент.order.comment) Тогда 
					ИнтересОбъект.Описание = НСтр("ru = 'Комментарий покупателя:'") + " " + Элемент.order.comment;
				КонецЕсли;
				
				Если Элемент.order.Свойство("delivery") Тогда
					Если Элемент.order.delivery.Свойство("type") И ЗначениеЗаполнено(Элемент.order.delivery.type) Тогда
						ИнтересОбъект.Описание = ИнтересОбъект.Описание + Символы.ПС + НСтр("ru = 'Тип доставки:'") 
							+ " " 
							+ Элемент.order.delivery.type;
					КонецЕсли;
					Если Элемент.order.delivery.Свойство("address") И ЗначениеЗаполнено(Элемент.order.delivery.address) Тогда
						ИнтересОбъект.Описание = ИнтересОбъект.Описание + Символы.ПС + НСтр("ru = 'Адрес доставки:'") 
							+ " " 
							+ Элемент.order.delivery.address;
					КонецЕсли;
					Если Элемент.order.delivery.Свойство("track_number") И ЗначениеЗаполнено(Элемент.order.delivery.track_number) Тогда
						ИнтересОбъект.Описание = ИнтересОбъект.Описание + Символы.ПС 
							+ НСтр("ru = 'Трек-номер для отслеживания заказа'") + " " 
							+ Элемент.order.delivery.track_number;
					КонецЕсли;
					Если Элемент.order.delivery.Свойство("track_link") И ЗначениеЗаполнено(Элемент.order.delivery.track_link) Тогда
						ИнтересОбъект.Описание = ИнтересОбъект.Описание + Символы.ПС 
							+ НСтр("ru = 'Ссылка для отслеживания заказа по трек-номеру:'") + " " 
							+ Элемент.order.delivery.track_link;
					КонецЕсли;
					Если Элемент.order.delivery.Свойство("delivery_point")
						 И ЗначениеЗаполнено(Элемент.order.delivery.delivery_point) Тогда
						ИнтересОбъект.Описание = ИнтересОбъект.Описание + Символы.ПС 
							+ НСтр("ru = 'Информация о пункте выдачи:'") + " " 
							+ Элемент.order.delivery.delivery_point;
					КонецЕсли;
				КонецЕсли;
				
				ИнтересОбъект.ТипУслуги	= НастройкиИнтеграции.НастройкиЗагрузки.ТипУслуги;
				ИнтересОбъект.СостояниеИнтереса = СоответствиеСостояний.Получить(Элемент.order.status);
				ИнтересОбъект.Организация = НастройкиИнтеграции.НастройкиЗагрузки.Организация;
				ИнтересОбъект.Ответственный = Ответственный;
				Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
					ИнтересОбъект.Подразделение = Ответственный.Подразделение;
					ИнтересОбъект.Офис = Ответственный.Подразделение.CRM_Офис;
				КонецЕсли;
				
				Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
					Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
						Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(ИнтересОбъект.Партнер, ИнтересОбъект.Организация);
						Если ЗначениеЗаполнено(Договор) Тогда
							ИнтересОбъект["Договор"] = Договор;
							ИнтересОбъект.Валюта = Договор.ВалютаРасчетов;
							ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ИнтересОбъект.Дата,
								 Новый Структура("Валюта",
								 Договор.ВалютаРасчетов));
							ИнтересОбъект["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
							ИнтересОбъект["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
								 ВалютаРасчетовКурсКратность.Кратность);
							ИнтересОбъект["ВидСкидкиНаценки"] = Договор.ВидСкидкиНаценки;
							ВидЦен = Договор.ВидЦен;
							ИнтересОбъект["ВидЦен"] = ВидЦен;
							ИнтересОбъект["ЦенаВключаетНДС"] = ВидЦен.ЦенаВключаетНДС;
						КонецЕсли;
					Иначе
						ИнтересОбъект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
						ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ИнтересОбъект.Дата,
							 Новый Структура("Валюта",
							 ИнтересОбъект.Валюта));
						ИнтересОбъект["Курс"]      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
						ИнтересОбъект["Кратность"] = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1,
							 ВалютаРасчетовКурсКратность.Кратность);
						ВидЦен = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный,
							 "ОсновнойВидЦенПродажи"); 
						ИнтересОбъект["ВидЦен"] = ВидЦен;
						ИнтересОбъект["ЦенаВключаетНДС"] = ВидЦен.ЦенаВключаетНДС;
					КонецЕсли;
				Иначе
					МодульCRM_Модуль_МетодыМодулейОбъектовДокументов =
						ОбщегоНазначения.ОбщийМодуль("CRM_Модуль_МетодыМодулейОбъектовДокументов");
					МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьРеквизитыДокумента(ИнтересОбъект);
					Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
						ИмяФО = "ИспользоватьСоглашенияСКлиентами";
						Если ПолучитьФункциональнуюОпцию(ИмяФО) Тогда
							ИнтересОбъект.Соглашение =
								МодульCRM_Модуль_МетодыМодулейОбъектовДокументов.ВернутьПоследнееСоглашение(ИнтересОбъект.Партнер);
							ИнтересОбъект.ЦенаВключаетНДС = ?(ИнтересОбъект.Соглашение.Пустая(), Истина,
								 ИнтересОбъект.Соглашение.ЦенаВключаетНДС);
						КонецЕсли;
					Иначе
						ИнтересОбъект.ЦенаВключаетНДС = Истина;
					КонецЕсли;
					ИнтересОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
				КонецЕсли;
				
				ТаблицаИдентификаторов.Очистить();
				Для каждого Товар Из Элемент.goods Цикл
					НовСтр = ТаблицаИдентификаторов.Добавить();
					НовСтр.Идентификатор = Формат(Товар.main_item_id, "ЧГ=0");
				КонецЦикла;
				
				Запрос.УстановитьПараметр("ТЗИдентификаторы", ТаблицаИдентификаторов);
				
				СоответствиеИдентификаторовТоваров = Новый Соответствие;
				Выборка = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос).Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
						СоответствиеИдентификаторовТоваров.Вставить(СокрЛП(Выборка.Идентификатор), Выборка.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Товар Из Элемент.goods Цикл
					
					Номенклатура = СоответствиеИдентификаторовТоваров.Получить(Формат(Товар.main_item_id, "ЧГ=0"));
					Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
						Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(Товар.item.item.title);
					КонецЕсли;
					
					Характеристика = Неопределено;
					СтрТовар = ИнтересОбъект.Товары.Добавить();
					Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
						СтрТовар.Содержание = Товар.item.item.title + "; ";
					Иначе	
						СтрТовар.Номенклатура = Номенклатура;
					КонецЕсли;
					СтрТовар.Количество = Товар.item.quantity;
					СтрТовар.Цена = Товар.item.price.amount / 100;
					СтрТовар.Сумма = СтрТовар.Количество * СтрТовар.Цена;
					СтрТовар.Всего = СтрТовар.Сумма;
					СтрТовар.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Номенклатура.ЕдиницаИзмерения), Номенклатура.ЕдиницаИзмерения,
						НастройкиИнтеграции.НастройкиЗагрузки.ЕдиницаИзмерения);
					Если Товар.item.item.Свойство("property_values") Тогда
						Если ЗначениеЗаполнено(Номенклатура) И Номенклатура.ИспользоватьХарактеристики Тогда
							Характеристика = ПолучитьХарактеристику(НастройкиИнтеграции.Магазин, Товар.item.item.property_values);
						КонецЕсли;
						Если ЗначениеЗаполнено(Характеристика) Тогда
							СтрТовар.Характеристика = Характеристика;
						Иначе
							Для каждого Вариант Из Товар.item.item.property_values Цикл
								СтрТовар.Содержание = СтрТовар.Содержание + Вариант.property_name + " - " + Вариант.variant_name + "; ";
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрТовар.Содержание) Тогда
						СтрТовар.Содержание = Лев(СтрТовар.Содержание, СтрДлина(СтрТовар.Содержание) - 2);
					КонецЕсли;
					
					Если Не CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(ИнтересОбъект.Организация) Тогда
						Если ИнтересОбъект.Организация["СтавкаНДСПоУмолчанию"].НеОблагается Тогда
							СтрТовар.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
						Иначе
							СтрТовар.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(Номенклатура.СтавкаНДС) Тогда
						СтрТовар.СтавкаНДС = Номенклатура.СтавкаНДС;
					ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СтрТовар.СтавкаНДС = ИнтересОбъект.Организация["СтавкаНДСПоУмолчанию"];
					КонецЕсли;
				КонецЦикла;
				
				СтоимостьДоставки = Число(Элемент.order.total_price.amount) / 100 - ИнтересОбъект.Товары.Итог("Сумма");
				Если СтоимостьДоставки > 0 И ЗначениеЗаполнено(НастройкиИнтеграции.НастройкиЗагрузки.УслугаДоставки) Тогда
					СтрТовар = ИнтересОбъект.Товары.Добавить();
					СтрТовар.Номенклатура = НастройкиИнтеграции.НастройкиЗагрузки.УслугаДоставки;
					СтрТовар.Количество = 1;
					СтрТовар.Цена = СтоимостьДоставки;
					СтрТовар.Сумма = СтоимостьДоставки;
					СтрТовар.Всего = СтоимостьДоставки;
					СтрТовар.ЕдиницаИзмерения = СтрТовар.Номенклатура.ЕдиницаИзмерения;
					
					Если Не CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(ИнтересОбъект.Организация) Тогда
						Если ИнтересОбъект.Организация["СтавкаНДСПоУмолчанию"].НеОблагается Тогда
							СтрТовар.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
						Иначе
							СтрТовар.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(СтрТовар.Номенклатура) И ЗначениеЗаполнено(СтрТовар.Номенклатура.СтавкаНДС) Тогда
						СтрТовар.СтавкаНДС = СтрТовар.Номенклатура.СтавкаНДС;
					ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СтрТовар.СтавкаНДС = ИнтересОбъект.Организация["СтавкаНДСПоУмолчанию"];
					КонецЕсли;
				КонецЕсли;
				
				ИнтересОбъект.ОжидаемаяВыручка = ИнтересОбъект.Товары.Итог("Сумма");
				
				НачатьТранзакцию();
								
				Попытка
					
					ИнтересОбъект.Записать();
					
					Если Интерес = Неопределено Тогда
						СтруктураЗаписи = Новый Структура;
						СтруктураЗаписи.Вставить("УзелИнформационнойБазы", НастройкиИнтеграции.Магазин);
						СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", ИнтересОбъект.Ссылка);
						СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", Элемент.order.display_order_id);
						СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
							
						РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					ТекстОшибки = ОписаниеОшибки();
					ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Загрузка заказов'",
						 ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Информация, , НастройкиИнтеграции.Магазин, ТекстОшибки);
				КонецПопытки;
			КонецЦикла;
			
			Если СтруктураОтвета.response.count < 100 Тогда
				ВсеПолучены = Истина;
			Иначе
				Смещение = Смещение + 100;
			КонецЕсли;
			
		Иначе
			ВсеПолучены = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьХарактеристику(Магазин, property_values)
	
	МассивСвойств = Новый Массив;
	Для каждого property Из property_values Цикл
		МассивСвойств.Добавить(Формат(property.variant_id, "ЧГ=0"));
	КонецЦикла;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Ссылка,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение) КАК Количество
	                      |ПОМЕСТИТЬ ВременнаяТаблица
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	                      |		ПО ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	                      |			И (СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника В (&МассивСвойств))
	                      |			И (СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &Магазин)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВременнаяТаблица.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ВременнаяТаблица КАК ВременнаяТаблица
	                      |ГДЕ
	                      |	ВременнаяТаблица.Количество = &Количество");
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("МассивСвойств", МассивСвойств);
	Запрос.УстановитьПараметр("Количество", МассивСвойств.Количество());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура ВыгрузитьСтатусыЗаказов(НастройкиИнтеграции)
	
	Вызовов = 0;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ИнтересИзменения.Ссылка КАК Ссылка,
	                      |	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК УникальныйИдентификаторПриемника,
	                      |	CRM_ИнтересИзменения.Ссылка.СостояниеИнтереса КАК СостояниеИнтереса
	                      |ИЗ
	                      |	Документ.CRM_Интерес.Изменения КАК CRM_ИнтересИзменения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	                      |		ПО CRM_ИнтересИзменения.Ссылка = СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника
	                      |ГДЕ
	                      |	CRM_ИнтересИзменения.Узел = &Магазин");
	
	Запрос.УстановитьПараметр("Магазин", НастройкиИнтеграции.Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Ресурс = "/method/market.editOrder?v=5.199&user_id=%1&order_id=%2&status=%3&access_token=%4";
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.УникальныйИдентификаторПриемника) Тогда
			Идентификаторы = СтрРазделить(Выборка.УникальныйИдентификаторПриемника, "-_");
			
			Статус = Неопределено;
			Для каждого СоответствиеСостояния Из НастройкиИнтеграции.НастройкиЗагрузки.СоответствиеСостояний Цикл
				Если Выборка.СостояниеИнтереса = СоответствиеСостояния.Состояние Тогда
					Статус = СоответствиеСостояния.ИдентификаторСтатуса;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Статус <> Неопределено Тогда
				ПроверитьКоличествоВызовов(Вызовов);
				СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
					CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.vk.com", "", СтрШаблон(Ресурс, Идентификаторы[0],
						Идентификаторы[1], Статус, НастройкиИнтеграции.Токен)));
				Если СтруктураОтвета.Свойство("error") Тогда
					ЗаписьЖурналаРегистрации(НСтр("ru='Обмен с интернет-магазином.Выгрузка статусов заказов'",
						 ОбщегоНазначения.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка, , НастройкиИнтеграции.Магазин, СтруктураОтвета.error.error_msg);
					Продолжить;
				ИначеЕсли СтруктураОтвета = 1 Тогда
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(НастройкиИнтеграции.Магазин, Выборка.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
