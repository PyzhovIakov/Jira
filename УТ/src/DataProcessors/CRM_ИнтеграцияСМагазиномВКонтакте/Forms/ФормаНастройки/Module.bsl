
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Элементы.ГруппаВебКлиент.Видимость = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	Элементы.ГруппаТонкийКлиент.Видимость = НЕ Элементы.ГруппаВебКлиент.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Токен) Тогда
		ЗаполнитьСписокГрупп();
	Иначе
		ДанныеАккаунта = НСтр("ru='Авторизуйтесь на сайте ВКонтакте.';en='Log on to site Vkontakte.'");
	КонецЕсли;
	
	НастройкиСКД = Неопределено;
	Если Параметры.Свойство("НастройкиВыгрузки") Тогда
		Параметры.НастройкиВыгрузки.Свойство("ВариантОтбора", ВыгрузкаВариантОтбора);
		Параметры.НастройкиВыгрузки.Свойство("ИдентификаторКатегорииПоУмолчанию", ВыгрузкаИдентификаторКатегорииПоУмолчанию);
		Параметры.НастройкиВыгрузки.Свойство("КатегорияПоУмолчанию", ВыгрузкаКатегорияПоУмолчанию);
		Параметры.НастройкиВыгрузки.Свойство("ВидЦен", ВыгрузкаВидЦен);
		Параметры.НастройкиВыгрузки.Свойство("СтараяЦена", ВыгрузкаСтараяЦена);
		Параметры.НастройкиВыгрузки.Свойство("НедоступностьВМагазине", ВыгрузкаНедоступностьВМагазине);
		Параметры.НастройкиВыгрузки.Свойство("ВыгрузкаИспользоватьХарактеристики", ВыгрузкаИспользоватьХарактеристики);
		Параметры.НастройкиВыгрузки.Свойство("СписокХарактеристик", СписокХарактеристик);
		Параметры.НастройкиВыгрузки.Свойство("ГабаритыВес", ГабаритыВес);
		Параметры.НастройкиВыгрузки.Свойство("ГабаритыВысота", ГабаритыВысота);
		Параметры.НастройкиВыгрузки.Свойство("ГабаритыГлубина", ГабаритыГлубина);
		Параметры.НастройкиВыгрузки.Свойство("ГабаритыШирина", ГабаритыШирина);
		Для каждого Соответствие из Параметры.НастройкиВыгрузки.СоответствиеКатегорий Цикл
			НовСтр = ВыгрузкаСоответствиеКатегорий.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Соответствие);
		КонецЦикла;
		Для каждого Соответствие из Параметры.НастройкиВыгрузки.СоответствиеПодборок Цикл
			НовСтр = ВыгрузкаСоответствиеПодборок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Соответствие);
		КонецЦикла;
		Если Параметры.НастройкиВыгрузки.Свойство("СписокХарактеристик") Тогда
			СписокХарактеристик.ЗагрузитьЗначения(Параметры.НастройкиВыгрузки.СписокХарактеристик.ВыгрузитьЗначения());
		КонецЕсли;
		Параметры.НастройкиВыгрузки.Свойство("НастройкиОтбораНоменклатуры", НастройкиСКД);
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиЗагрузки") Тогда
		Параметры.НастройкиЗагрузки.Свойство("ГруппаНоменклатуры", ЗагрузкаГруппаНоменклатуры);
		Параметры.НастройкиЗагрузки.Свойство("НоменклатурнаяГруппа", ЗагрузкаНоменклатурнаяГруппа);
		Параметры.НастройкиЗагрузки.Свойство("Ответственный", Ответственный);
		Параметры.НастройкиЗагрузки.Свойство("АдресоватьОтветственному", ЗагрузкаАдресоватьОтветственному);
		Параметры.НастройкиЗагрузки.Свойство("Сценарий", ЗагрузкаСценарий);
		Параметры.НастройкиЗагрузки.Свойство("Организация", ЗагрузкаОрганизация);
		Параметры.НастройкиЗагрузки.Свойство("ТипНоменклатуры", ЗагрузкаТипНоменклатуры);
		Параметры.НастройкиЗагрузки.Свойство("ТипУслуги", ЗагрузкаТипУслуги);
		Параметры.НастройкиЗагрузки.Свойство("ЕдиницаИзмерения", ЗагрузкаЕдиницаИзмерения);
		Параметры.НастройкиЗагрузки.Свойство("УслугаДоставки", ЗагрузкаУслугаДоставки);
		Параметры.НастройкиЗагрузки.Свойство("ВидНоменклатуры", ЗагрузкаВидНоменклатуры);
		Для каждого Соответствие из Параметры.НастройкиЗагрузки.СоответствиеСостояний Цикл
			НовСтр = ЗагрузкаСоответствиеСостояний.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	СгенерироватьСКДОтбора(НастройкиСКД);
	
	Элементы.ГруппаГабариты.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	Элементы.СписокХарактеристик.Видимость = ВыгрузкаИспользоватьХарактеристики; 
	
	НовыеПараметрыВыбора = Новый Массив;
	НаборыСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Справочники.Номенклатура.ПустаяСсылка());
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	Если НаборыСвойств.Количество() = 1 Тогда
		НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.НаборСвойств", НаборыСвойств[0].Набор));
	КонецЕсли;
	Элементы.ГабаритыВес.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	Элементы.ГабаритыВысота.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	Элементы.ГабаритыШирина.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	Элементы.ГабаритыГлубина.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	Элементы.ВыгрузкаДоступностьВМагазине.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ЗарегистрироватьНоменклатуруКОбмену.Видимость = ЗначениеЗаполнено(ЭтотОбъект.ВладелецФормы.Объект.Ссылка);
	ВыгрузкаУчитыватьНаличиеТовараПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.IDГруппы) И ВыгрузкаСоответствиеПодборок.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ПодборкиОбновитьБезПараметров", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Токен) Тогда
		ЗаполнитьСписокГрупп();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьКатегорииВК()
	КатегорииВК = Новый ФиксированныйМассив(Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.КатегорииТоваров(Объект.Токен));
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если КатегорииВК = Неопределено Тогда
		ПолучитьКатегорииВК();
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("Категории", КатегорииВК);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКатегории", ЭтотОбъект, Элемент);
	ОткрытьФорму("Обработка.CRM_ИнтеграцияСМагазиномВКонтакте.Форма.ФормаВыбораКатегории",
		 ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКатегории(Категория, Элемент) Экспорт
	
	Если Категория <> Неопределено Тогда
		Если Элемент.Имя = "ВыгрузкаКатегорияПоУмолчанию" Тогда
			ВыгрузкаКатегорияПоУмолчанию = Категория.Категория;
			ВыгрузкаИдентификаторКатегорииПоУмолчанию = Категория.Идентификатор;
		Иначе
			Элементы.ВыгрузкаСоответствиеКатегорий.ТекущиеДанные.Категория = Категория.Категория;
			Элементы.ВыгрузкаСоответствиеКатегорий.ТекущиеДанные.ИдентификаторКатегории = Категория.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаУчитыватьНаличиеТовараПриИзменении(Элемент)
	Элементы.ВыгрузкаСписокСкладовЗначение.Видимость = ВыгрузкаУчитыватьНаличиеТовара;
КонецПроцедуры

&НаКлиенте
Процедура СписокХарактеристикЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ОповещениеВыбораРеквизита	= Новый ОписаниеОповещения("ОбработкаВыбораХарактеристики",
		// ЭтотОбъект,
		// ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("ОтображаемыеНаборыСвойств", МассивОтображаемыхСвойств());
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	//ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора",
		// ПараметрыФормы, Элемент, , , ,
		// ОповещениеВыбораРеквизита);
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", ПараметрыФормы, Элемент, , , , );
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивОтображаемыхСвойств()
	
	Результат =
		УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
			Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()).ВыгрузитьКолонку("Набор");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	Если ПроверитьЗаполнение() Тогда
		НастройкиИнтеграции = НастройкиИнтеграции();
		
		Закрыть(НастройкиИнтеграции);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НастройкиИнтеграции()
	НастройкиИнтеграции = Новый Структура;
	НастройкиИнтеграции.Вставить("Токен", Объект.Токен);
	НастройкиИнтеграции.Вставить("IDГруппы", Объект.IDГруппы);
	
	НастройкиИнтеграции.Вставить("ВыгружатьДанные", Истина);
	НастройкиИнтеграции.Вставить("ЗагружатьДанные", Истина);
	
	НастройкиВыгрузки = Новый Структура;
	НастройкиВыгрузки.Вставить("ВариантОтбора", ВыгрузкаВариантОтбора);
	НастройкиВыгрузки.Вставить("ИдентификаторКатегорииПоУмолчанию", ВыгрузкаИдентификаторКатегорииПоУмолчанию);
	НастройкиВыгрузки.Вставить("КатегорияПоУмолчанию", ВыгрузкаКатегорияПоУмолчанию);
	НастройкиВыгрузки.Вставить("ВидЦен", ВыгрузкаВидЦен);
	НастройкиВыгрузки.Вставить("СтараяЦена", ВыгрузкаСтараяЦена);
	НастройкиВыгрузки.Вставить("НедоступностьВМагазине", ВыгрузкаНедоступностьВМагазине);
	НастройкиВыгрузки.Вставить("ГабаритыВес", ГабаритыВес);
	НастройкиВыгрузки.Вставить("ГабаритыВысота", ГабаритыВысота);
	НастройкиВыгрузки.Вставить("ГабаритыГлубина", ГабаритыГлубина);
	НастройкиВыгрузки.Вставить("ГабаритыШирина", ГабаритыШирина);
	НастройкиВыгрузки.Вставить("СоответствиеКатегорий", 
		CRM_РабочийСтолСервер.ТаблицаВМассивСтруктур(РеквизитФормыВЗначение("ВыгрузкаСоответствиеКатегорий")));
	НастройкиВыгрузки.Вставить("СоответствиеПодборок", 
		CRM_РабочийСтолСервер.ТаблицаВМассивСтруктур(РеквизитФормыВЗначение("ВыгрузкаСоответствиеПодборок")));
	НастройкиВыгрузки.Вставить("НастройкиОтбораНоменклатуры", СКД_КомпановщикНастроекУсловий.Настройки);
	НастройкиВыгрузки.Вставить("УчитыватьНаличиеТовара", ВыгрузкаУчитыватьНаличиеТовара);
	НастройкиВыгрузки.Вставить("СписокСкладов", ВыгрузкаСписокСкладов);
	НастройкиВыгрузки.Вставить("ВыгрузкаИспользоватьХарактеристики", ВыгрузкаИспользоватьХарактеристики);
	НастройкиВыгрузки.Вставить("СписокХарактеристик", СписокХарактеристик);
	НастройкиИнтеграции.Вставить("НастройкиВыгрузки", НастройкиВыгрузки);
	
	НастройкиЗагрузки = Новый Структура;
	НастройкиЗагрузки.Вставить("ГруппаНоменклатуры", ЗагрузкаГруппаНоменклатуры);
	НастройкиЗагрузки.Вставить("НоменклатурнаяГруппа", ЗагрузкаНоменклатурнаяГруппа);
	НастройкиЗагрузки.Вставить("Ответственный", Ответственный);
	НастройкиЗагрузки.Вставить("АдресоватьОтветственному", ЗагрузкаАдресоватьОтветственному);
	НастройкиЗагрузки.Вставить("Сценарий", ЗагрузкаСценарий);
	НастройкиЗагрузки.Вставить("Организация", ЗагрузкаОрганизация);
	НастройкиЗагрузки.Вставить("ТипНоменклатуры", ЗагрузкаТипНоменклатуры);
	НастройкиЗагрузки.Вставить("ТипУслуги", ЗагрузкаТипУслуги);
	НастройкиЗагрузки.Вставить("ЕдиницаИзмерения", ЗагрузкаЕдиницаИзмерения);
	НастройкиЗагрузки.Вставить("УслугаДоставки", ЗагрузкаУслугаДоставки);
	НастройкиЗагрузки.Вставить("СоответствиеСостояний", 
		CRM_РабочийСтолСервер.ТаблицаВМассивСтруктур(РеквизитФормыВЗначение("ЗагрузкаСоответствиеСостояний")));
	НастройкиЗагрузки.Вставить("ВидНоменклатуры", ЗагрузкаВидНоменклатуры);
	НастройкиИнтеграции.Вставить("НастройкиЗагрузки", НастройкиЗагрузки);
	
	Возврат НастройкиИнтеграции;
КонецФункции

&НаКлиенте
Процедура Вход(Команда)
	ПутьКСтраницеАвторизации = "https://oauth.vk.com/authorize?v=5.131&client_id=6086563&scope=groups,market,photos,offline&redirect_uri=http://oauth.vk.com/blank.html&display=page&response_type=token";
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		//Оповещение = Новый ОписаниеОповещения("ОбработкаПредупрежденияПродолжение", ЭтотОбъект, ПутьКСтраницеАвторизации);
		//ПоказатьПредупреждение(Оповещение, НСтр("ru = 'Будет выполнен переход на сайт авторизации ВКонтакте.
		//|После авторизации необходимо скопировать полученный токен (в адресной строке, между access_token= и &expires_in) в поле ""Токен""'"));
		ОбработкаПредупрежденияПродолжение(ПутьКСтраницеАвторизации);
	Иначе
		ПараметрыАвторизации = Новый Структура("АвторизацияПользователя, ПутьКСтраницеАвторизации",
			 Истина,
			 ПутьКСтраницеАвторизации);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВходЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.CRM_ИнтеграцияСМагазиномВКонтакте.Форма.ФормаАвторизации",
			 ПараметрыАвторизации, , , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ВКонтакте"));

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Попытка
		Если ЗначениеЗаполнено(Объект.IDГруппы) Тогда
			ПроверитьПодключениеСервер();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Подключение прошло успешно.';
				|en='Connection was successful.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбрана группа!';en='Group is not selected!'"));
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = ?(Инфо.Причина = Неопределено, Инфо.Описание, Инфо.Причина.Описание);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Описание);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенВК(Команда)
	Если ЗначениеЗаполнено(СсылкаАвторизацииВК) Тогда
		СтрокаНачалаТокена = "access_token=";
		Позиция = СтрНайти(СсылкаАвторизацииВК, СтрокаНачалаТокена);
		Если Позиция > 0 Тогда
			Объект.Токен = Сред(СсылкаАвторизацииВК, Позиция + СтрДлина(СтрокаНачалаТокена),
				  СтрНайти(СсылкаАвторизацииВК, "&expires_in=") - (Позиция 
				+ 13));
			ТокенПриИзменении(Неопределено);
		Иначе
			
		КонецЕсли;	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не заполнена ссылка авторизации!';
			|en='Authorization reference is not completed!'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СгенерироватьСКДОтбора(НастройкиСКД)
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ Ссылка КАК Ссылка ИЗ Справочник.Номенклатура";
	НаборДанных.Имя = "Запрос";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКД, УникальныйИдентификатор);
	
	СКД_КомпановщикНастроекУсловий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	Если НастройкиСКД = Неопределено Тогда 
		СКД_КомпановщикНастроекУсловий.ЗагрузитьНастройки(СхемаКД.НастройкиПоУмолчанию);
		НастройкиСКД = СКД_КомпановщикНастроекУсловий.Настройки;
	Иначе
		СКД_КомпановщикНастроекУсловий.ЗагрузитьНастройки(НастройкиСКД);
	КонецЕсли;
	ВыгрузкаПредставлениеНастроекОтбора = Строка(НастройкиСКД.Отбор);
	Если ВыгрузкаПредставлениеНастроекОтбора = "" Тогда
		ВыгрузкаПредставлениеНастроекОтбора = НСтр("ru = 'Без условий'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПредупрежденияПродолжение(Результат)
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Новый ОписаниеОповещения("ОбработкаКомандыПродолжение",
		 ЭтотОбъект, Результат),
		 НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';en='To continue,
		| install the file operation extension.'"));	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПродолжение(Результат, ДопПараметры) Экспорт
	// НачатьЗапускПриложения (Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект,
		// Новый Структура),
		// ДопПараметры);
	ПерейтиПоНавигационнойСсылке(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершение(Результат, ДопПараметры) Экспорт
	РезультирующаяСтрока = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВходЗавершение(ТокенСтруктура, ДопПараметры) Экспорт
	Если ТокенСтруктура <> Неопределено Тогда
		ВходЗавершениеНаСервере(ТокенСтруктура);
		Если НЕ ЗначениеЗаполнено(Объект.IDГруппы) И Элементы.Группа.СписокВыбора.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораГруппы", ЭтотОбъект);
			ПоказатьВыборИзСписка(ОписаниеОповещения, Элементы.Группа.СписокВыбора, Элементы.Группа);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВходЗавершениеНаСервере(ТокенСтруктура)
	ВходЗавершениеВКонтакте(ТокенСтруктура);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокГрупп()
	Попытка
		ДанныеАккаунта = НСтр("ru='Запись авторизована под пользователем';en='Record logged as user'") + ": " +
			Обработки.CRM_РаботаСМессенджеромВКонтакте.ДанныеГруппы(Объект.Токен, Неопределено);
		Элементы.ДанныеАккаунта.ЦветТекста = WebЦвета.ТемноЗеленый;
		Элементы.ДанныеАккаунта1.ЦветТекста = WebЦвета.ТемноЗеленый;
		Элементы.Вход.Картинка = БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
	Исключение
		ДанныеАккаунта = НСтр("ru='Авторизуйтесь на сайте ВКонтакте.';en='Log on to site Vkontakte.'");
	КонецПопытки;
	СписокГрупп = Обработки.CRM_РаботаСМессенджеромВКонтакте.ПолучитьСписокГруппПользователя(Объект.Токен, Неопределено);
	Элементы.Группа.СписокВыбора.Очистить();
	Элементы.Группа2.СписокВыбора.Очистить();
	Если СписокГрупп <> Неопределено Тогда
		Для каждого Группа Из СписокГрупп Цикл
			Элементы.Группа.СписокВыбора.Добавить(Группа.Значение, Группа.Представление);
			Элементы.Группа2.СписокВыбора.Добавить(Группа.Значение, Группа.Представление);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВходЗавершениеВКонтакте(ТокенСтруктура)
	Объект.Токен = ТокенСтруктура.Токен;
	ЗаполнитьСписокГрупп();
	ТекущийЭлемент = ?(Элементы.ГруппаВебКлиент.Видимость, Элементы.Группа2, Элементы.Группа);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораГруппы(ВыбранныйЭлемент, ДопПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.IDГруппы = ВыбранныйЭлемент.Значение;
		ГруппаПриИзменении(Элементы.Группа);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеСервер()
	ДанныеГруппы = Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.ДанныеГруппы(Объект.Токен);
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСценарийПриИзмененииНаСервере()
	
	ЗагрузкаСоответствиеСостояний.Очистить();
	Если ЗначениеЗаполнено(ЗагрузкаСценарий) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
		                      |	CRM_СостоянияИнтересов.ВидСостояния КАК ВидСостояния
		                      |ИЗ
		                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		                      |ГДЕ
		                      |	CRM_СостоянияИнтересов.Родитель = &Родитель
		                      |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
		                      |	И CRM_СостоянияИнтересов.Используется
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
		Запрос.УстановитьПараметр("Родитель", ЗагрузкаСценарий);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Статус = "";
			Статус_id = 0;
			Если Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое Тогда
				Статус = "Новый";
				Статус_id = 0;
			ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
				Статус = "Выполнен";
				Статус_id = 4;
			ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
				Статус = "Отменен";
				Статус_id = 5;
			КонецЕсли;
			
			НовСтр = ЗагрузкаСоответствиеСостояний.Добавить();
			НовСтр.Состояние = Выборка.Ссылка;
			НовСтр.Статус = Статус;
			НовСтр.ИдентификаторСтатуса = Статус_id;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСценарийПриИзменении(Элемент)
	ЗагрузкаСценарийПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСоответствиеСостоянийСтатусПредставлениеОбработкаВыбора(Элемент,
	 ВыбранноеЗначение,
	 СтандартнаяОбработка)
	Список = Элементы.ЗагрузкаСоответствиеСостоянийСтатус.СписокВыбора;
	Элементы.ЗагрузкаСоответствиеСостояний.ТекущиеДанные.ИдентификаторСтатуса = 
		Список.Индекс(Список.НайтиПоЗначению(ВыбранноеЗначение));
КонецПроцедуры

&НаСервере
Процедура ПодборкиОбновитьНаСервере()
	МассивПодборок = Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.ПодборкиТоваров(Новый Структура("Токен,
		| IDГруппы", Объект.Токен,
		 Объект.IDГруппы));
	
	ТекПодборки = РеквизитФормыВЗначение("ВыгрузкаСоответствиеПодборок");
	
	Для каждого Подборка из МассивПодборок Цикл
		СтрПодборки = ВыгрузкаСоответствиеПодборок.НайтиСтроки(Новый Структура("ИдентификаторПодборки", Подборка.id));
		Если СтрПодборки.Количество() = 0 Тогда
			НовСтр = ВыгрузкаСоответствиеПодборок.Добавить();
			НовСтр.ИдентификаторПодборки = Подборка.id;
			НовСтр.Подборка = Подборка.title;
		ИначеЕсли СтрПодборки[0].Подборка <> Подборка.title Тогда
			СтрПодборки[0].Подборка = Подборка.title;
		КонецЕсли;
		ТекПодборка = ТекПодборки.Найти(Подборка.id, "ИдентификаторПодборки");
		Если ТекПодборка <> Неопределено Тогда
			ТекПодборки.Удалить(ТекПодборка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого УдаляемаяПодборка из ТекПодборки Цикл
		СтрПодборки = ВыгрузкаСоответствиеПодборок.НайтиСтроки(Новый Структура("ИдентификаторПодборки",
			 УдаляемаяПодборка.ИдентификаторПодборки));
		Если СтрПодборки.Количество() > 0 Тогда
			ВыгрузкаСоответствиеПодборок.Удалить(ВыгрузкаСоответствиеПодборок.Индекс(СтрПодборки[0]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборкиОбновить(Команда = Неопределено)
	ПодборкиОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборкиОбновитьБезПараметров()
	ПодборкиОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНоменклатуруНаСервере(Магазин)
	Настройки = НастройкиИнтеграции();
	Настройки.Вставить("Магазин", Магазин);
	Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.ЗагрузитьНоменклатуру(Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНоменклатуру(Команда)
	Если ЗначениеЗаполнено(ЭтотОбъект.ВладелецФормы.Объект.Ссылка) Тогда
		Если ПроверитьЗаполнение() Тогда
			ЗагрузитьНоменклатуруНаСервере(ЭтотОбъект.ВладелецФормы.Объект.Ссылка);
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Загрузка завершена.'"));
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выполнять обмен можно только после сохранения данных.'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНоменклатуруКОбменуНаСервере(Магазин)
	Настройки = НастройкиИнтеграции();
	Настройки.Вставить("Магазин", Магазин);
	Обработки.CRM_ИнтеграцияСМагазиномВКонтакте.ЗарегистрироватьНоменклатуру(Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНоменклатуруКОбмену(Команда)
	Если ЗначениеЗаполнено(ЭтотОбъект.ВладелецФормы.Объект.Ссылка) Тогда
		ЗарегистрироватьНоменклатуруКОбменуНаСервере(ЭтотОбъект.ВладелецФормы.Объект.Ссылка);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выполнять обмен можно только после сохранения данных.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаПредставлениеНастроекОтбораНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияЗавершения = Новый ОписаниеОповещения("НастроитьУсловияЗавершениеСКД", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("НастройкиСКД", СКД_КомпановщикНастроекУсловий.Настройки);
	ОткрытьФорму("Справочник.CRM_Триггеры.Форма.ФормаРедактированияСКД", ПараметрыОткрытия, ЭтаФорма, ,
		 , , ОписаниеОповещенияЗавершения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУсловияЗавершениеСКД(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		АдресНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
		ОбновитьНастройкиСКД();
		ВыгрузкаПредставлениеНастроекОтбора = Строка(Результат.Отбор);
		Элементы.ВыгрузкаПредставлениеНастроекОтбора.Высота = СтрЧислоСтрок(ВыгрузкаПредставлениеНастроекОтбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиСКД()
	СКД_КомпановщикНастроекУсловий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	СКД_КомпановщикНастроекУсловий.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	СКД_КомпановщикНастроекУсловий.Восстановить();
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузкаИспользоватьХарактеристикиПриИзменении(Элемент)
	Элементы.СписокХарактеристик.Видимость = ВыгрузкаИспользоватьХарактеристики; 
КонецПроцедуры

#КонецОбласти
