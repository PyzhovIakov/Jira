#Область ОписаниеПеременных

&НаКлиенте
Перем НачальноеЗначениеНастройкиТелефония;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистратор = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("сфпУправлениеМаршрутизацией");
	Отказ = НЕ ЭтоАдминистратор;
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Недостаточно прав для настройки телефонии!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ЭтоКонфигурацияCRM = CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM();
	
	ИспользуетсяРазделениеПоОбластямДанных = РаботаВМоделиСервиса.РазделениеВключено();
	
	сфпИспользоватьСофтФон = Константы.сфпИспользоватьСофтФон.Получить();
	Элементы.сфпИспользоватьСофтФон.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.ВерсияСофтФон.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.сфпСправка.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	
	сфпИспользоватьСофтФон = Константы.сфпИспользоватьСофтФон.Получить();
	сфпИспользоватьСпрут7 = Константы.сфпИспользоватьСпрут7.Получить();
	сфпИспользоватьCLON = Константы.сфпИспользоватьCLON.Получить();
	сфпCLONType = Константы.сфпCLONType.Получить();
	сфпCLONServerIP = Константы.сфпCLONServerIP.Получить();
	сфпCLONServerPort = Константы.сфпCLONServerPort.Получить();
	сфпCLONServerLogin = Константы.сфпCLONServerLogin.Получить();
	сфпCLONServerPassword = Константы.сфпCLONServerPassword.Получить();
	сфпИспользоватьCoMagic = Константы.сфпИспользоватьCoMagic.Получить();
	сфпЛогинCoMagic = Константы.сфпЛогинCoMagic.Получить();
	сфпПарольCoMagic = Константы.сфпПарольCoMagic.Получить();
	сфпОператорКоллтрекинга = Константы.сфпОператорКоллтрекинга.Получить();
	сфпИспользоватьSMS = Константы.сфпИспользоватьSMS.Получить();
	сфпИспользоватьИсториюЗвонков = Константы.сфпИспользоватьИсториюЗвонков.Получить();
	сфпОповещатьОПропущенныхЗвонках = Константы.сфпОповещатьОПропущенныхЗвонках.Получить();
	сфпНеЗагружатьЗвонкиДлительностьюМенее = Константы.сфпНеЗагружатьЗвонкиДлительностьюМенее.Получить();
	сфпЗагружатьВнутренниеЗвонки = Константы.сфпЗагружатьВнутренниеЗвонки.Получить();
	сфпИспользоватьМаршрутизацию = Константы.сфпИспользоватьМаршрутизацию.Получить();
	сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков =
		Константы.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков.Получить();
	сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг =
		Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Получить();
	сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков = Константы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Получить();
	сфпДатаИсторииЗвонков = Константы.сфпДатаИсторииЗвонков.Получить();
	сфпПользовательДляОповещений = Константы.сфпПользовательДляОповещений.Получить();
	сфпКоличествоВзаимодействийДляМаршрутизации = Константы.сфпКоличествоВзаимодействийДляМаршрутизации.Получить();
	сфпИспользоватьВнутреннийНомерИзКИПользователя = Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Получить();
	сфпОграничениеНаПросмотрТелефонныхЗвонков = Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Получить();
	сфпВнутренниеНомераИнформационнойБазы = Константы.сфпВнутренниеНомераИнформационнойБазы.Получить();
	сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков =
		Константы.сфпИспользоватьОчисткуСообщенийЖурналаЗвонков.Получить();
	сфпСрокЖизниСообщенияЖурналаЗвонков = Константы.сфпСрокЖизниСообщенияЖурналаЗвонков.Получить();
	сфпИспользоватьРечевуюАналитику = Константы.сфпИспользоватьРечевуюАналитику.Получить();
	сфпДатаРечевойАналитики = Константы.сфпДатаРечевойАналитики.Получить();
	сфпИспользоватьПрефиксыИсходящихВызов = Константы.сфпИспользоватьПрефиксыИсходящихВызов.Получить();
	
	ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
	Если НЕ ЗначениеЗаполнено(ВерсияСофтФон) Тогда
		ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф;
	КонецЕсли;
	
	Если ИспользуетсяРазделениеПоОбластямДанных И ВерсияСофтФон <> Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
		ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO;
	КонецЕсли;
		
	ДоступныеАТС = Перечисления.сфпДоступныеАТС.СсылкиНаСтатьи();
	Для Каждого ТекЭлемент Из ДоступныеАТС Цикл
		Если ТипЗнч(ТекЭлемент.Значение) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Если ТекЭлемент.Значение = Перечисления.сфпДоступныеАТС.МТТ Тогда
			Продолжить;
		КонецЕсли;
		
		ТекПеречисление =
			Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ТекЭлемент.Значение));
		
		НоваяСтрока = ТаблицаОператоров.Добавить();
		НоваяСтрока.Идентификатор = ТекПеречисление.Имя;
		НоваяСтрока.Представление = ТекПеречисление.Синоним;
		НоваяСтрока.Ссылка = ТекЭлемент.Представление;
	КонецЦикла;	
	
	УниверсальныеАТС = Перечисления.сфпДоступныеАТС.ДоступныеАТСУниверсальногоВиджетаItoolabs();
	Для Каждого ТекСтрока Из УниверсальныеАТС Цикл
		НоваяСтрока = ТаблицаОператоров.Добавить();
		НоваяСтрока.Идентификатор = ТекСтрока.Идентификатор;
		НоваяСтрока.Представление = ТекСтрока.Представление;
		НоваяСтрока.Ссылка = ТекСтрока.Ссылка;
	КонецЦикла;
	
	ПрочитатьЗначенияНастроек();
	ПриВыбореАТС(Ложь);
	
	СсылкиНаСтатьи = Перечисления.сфпДоступныеАТС.СсылкиНаСтатьи();
	
	сфпОграничениеНаПросмотрТелефонныхЗвонков = Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Получить();	
	сфпКодСтраны = Константы.сфпКодСтраны.Получить();
	Если НЕ ЗначениеЗаполнено(сфпКодСтраны) Тогда
		сфпКодСтраны = "+7";
		ЗаписатьЗначениеКонстанты("сфпКодСтраны", сфпКодСтраны);
	КонецЕсли;
	
	сфпКодГорода = Константы.сфпКодГорода.Получить();
	Если НЕ ЗначениеЗаполнено(сфпКодГорода) Тогда
		сфпКодГорода = "495";
		ЗаписатьЗначениеКонстанты("сфпКодГорода", сфпКодГорода);
	КонецЕсли;
	
	сфпПоследниеЦифрыТелефонногоНомера = Константы.сфпПоследниеЦифрыТелефонногоНомера.Получить();
	Если сфпПоследниеЦифрыТелефонногоНомера = 0 Тогда
		сфпПоследниеЦифрыТелефонногоНомера = 10;
		ЗаписатьЗначениеКонстанты("сфпПоследниеЦифрыТелефонногоНомера", сфпПоследниеЦифрыТелефонногоНомера);
	КонецЕсли;
	
	сфпМаксимальнаяДлинаВнутреннихНомеров = Константы.сфпМаксимальнаяДлинаВнутреннихНомеров.Получить();
	Если сфпМаксимальнаяДлинаВнутреннихНомеров = 0 Тогда
		сфпМаксимальнаяДлинаВнутреннихНомеров = 4;
		ЗаписатьЗначениеКонстанты("сфпМаксимальнаяДлинаВнутреннихНомеров", сфпМаксимальнаяДлинаВнутреннихНомеров);
	КонецЕсли;
	
	МассивДействийЗвонка = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ТекДействие Из МассивДействийЗвонка Цикл
		Элементы.ДействиеВходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
		Элементы.ДействиеИсходящийЗвонок.СписокВыбора.Добавить(ТекДействие.Наименование, ТекДействие.Наименование);
				
		Если ПустаяСтрока(ТекДействие.Действие) ИЛИ ТекДействие.Действие = "сфпОткрытьПанельЗвонка" Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияПоЗвонку.Добавить(ТекДействие.Действие, ТекДействие.Наименование);
	КонецЦикла;	
	
	сфпСофтФонПроСервер.ОбновитьКонтактыПанелиЗвонка(ЭтотОбъект);

	ТекущееДействие = "Настройка";
			
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		Успешно = ПроверитьПодпискуНаСобытия();
		Если Успешно Тогда
			РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПроверкаСтатуса");
			Успешно = РезультатЗапроса.Успешно;
		КонецЕсли;	
		
		Если Успешно Тогда
			Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
				  ТекущееДействие = "Уведомления";
			Иначе ТекущееДействие = "Перейти";
			КонецЕсли;	
		КонецЕсли;
		
		Элементы.КартинкаСтатусОнлайн.Видимость = Успешно;
		Элементы.КартинкаСтатусОффлайн.Видимость = НЕ Успешно;
		
		Если НЕ Успешно И РезультатЗапроса <> Неопределено Тогда
			Элементы.ДекорацияСтатусПодключения.Подсказка = РезультатЗапроса.Ошибка;
			Элементы.КартинкаСтатусОффлайн.Подсказка = РезультатЗапроса.Ошибка;

		Иначе
			Элементы.ДекорацияСтатусПодключения.Подсказка = "";
			Элементы.КартинкаСтатусОффлайн.Подсказка = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если Элементы.КартинкаСтатусОнлайн.Видимость Тогда
		Элементы.КоманднаяПанельПользователи.Видимость = Истина;
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;

	Иначе
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
	КонецЕсли;
	
	ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
		
	НастройкиТелефонии = Константы.сфпОбщиеНастройкиТелефонии.Получить();
	Если ЗначениеЗаполнено(НастройкиТелефонии) И ТипЗнч(НастройкиТелефонии) = Тип("Строка") Тогда
		НастройкиТелефонии = ЗначениеИзСтрокиВнутр(НастройкиТелефонии);
		Если ТипЗнч(НастройкиТелефонии) = Тип("Структура") Тогда
			НастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации", сфпАдресСервераПубликацииСервисовТелефонии);
			НастройкиТелефонии.Свойство("АдресРесурсаОсновнойПубликации", сфпИмяПубликацииСервисовТелефонии);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ НомерТелефона
	|ИЗ РегистрСведений.сфпРеестрНецелевыхНомеров");
	НецелевыеНомера.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// +CRM
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.сфпАдресСервераПубликацииСервисовТелефонии)
			 ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.сфпИмяПубликацииСервисовТелефонии) Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
	    КонецЕсли;
	КонецЕсли;	
	
	Элементы.сфпАдресОбратногоВызова.КнопкаВыбора = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.сфпСтрокаАвторизацииVRDФайла.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.ПланНумерации.Видимость = НЕ ИспользуетсяРазделениеПоОбластямДанных;
		
	Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
		сфпСтрокаАвторизацииVRDФайла = сфпСофтФонПроСервер.СлужебныйПользовательТелефонииАвторизацияВСтрокеПодключения();
		сфпПланНумерацииАвтоопределениеБизнесРегиона = Константы.сфпПланНумерацииАвтоопределениеБизнесРегиона.Получить();
		Элементы.сфпНастройкаРасписанияЗагрузкаПланаНумерации.Видимость = сфпПланНумерацииАвтоопределениеБизнесРегиона;
	КонецЕсли;
	
	CRM_ОбязательноУказыватьПричинуПотериЗвонков = Константы["CRM_ОбязательноУказыватьПричинуПотериЗвонков"].Получить();
	
	НастройкиСозданияКлиентов = Константы.CRM_НастройкиСозданияКлиентовПриЗвонке.Получить().Получить();
	Если НастройкиСозданияКлиентов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиСозданияКлиентов);
	КонецЕсли;

	CRM_ИспользоватьПотенциальныхКлиентов = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	НастройкиСрока = Константы.CRM_СрокОбработкиЗвонков.Получить().Получить();
	Если НастройкиСрока <> Неопределено Тогда
		НастройкиСрока.Свойство("CRM_СрокОбработкиДней", CRM_СрокОбработкиДней);
		НастройкиСрока.Свойство("CRM_СрокОбработкиЧасов", CRM_СрокОбработкиЧасов);
		НастройкиСрока.Свойство("CRM_СрокОбработкиМинут", CRM_СрокОбработкиМинут);
	КонецЕсли;
	CRM_СрокЖизниОбращения = Константы.CRM_СрокЖизниЗвонков.Получить();
	Если Элементы.CRM_СрокЖизниОбращения.СписокВыбора.НайтиПоЗначению(CRM_СрокЖизниОбращения) = Неопределено Тогда
		Элементы.CRM_СрокЖизниОбращения.РежимВыбораИзСписка = Ложь;
		Элементы.CRM_СрокЖизниОбращения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
	
	ПравилаОбработки = Константы.сфпНастройкиТелефонии_ПравилаОбработки.Получить().Получить();
	Если ПравилаОбработки <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ПравилаОбработки, "Телефония_ПравилаОбработки");
	КонецЕсли;
	
	CRM_ОбрабатыватьОбращения = Константы.сфпНастройкиТелефонии_ПрименитьПравилаОбработки.Получить();
	
	ЗаполнитьИспользуемыеСценарии();
	ИзменитьПараметрыВыбораПравилаОбработки();
	
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриСозданииНаСервере(ЭтотОбъект,
		 "Телефония",
		 "ГруппаОбщихНастроек");
	
	ПараметрыВыбораВида = Новый Массив;
	СписокВариантов = Новый Массив;
	СписокВариантов.Добавить(Перечисления.CRM_ВариантыОбработкиОбращения.НеОбрабатывать);
	СписокВариантов.Добавить(Перечисления.CRM_ВариантыОбработкиОбращения.ОтклонитьОбращение);
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВариантОбработки",
		 Новый ФиксированныйМассив(СписокВариантов)));
	Элементы.ПолеПравилоОбработки.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Если Параметры.Свойство("ПоказатьГруппуОбщихНастроек") Тогда
		Элементы.ГруппаОбщихНастроек.Показать();
	КонецЕсли;

	// -CRM
	
	СтарыеЗначенияДляСтатистики = Новый Структура("ИспользоватьСофтФон, Версия", сфпИспользоватьСофтФон, ВерсияСофтФон);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	
	сфпИспользоватьСофтФонПриИзменении();
	ВерсияСофтФонПриИзменении();
	ВидимостьПравилОбработки();
	
	НачальноеЗначениеНастройкиТелефония = сфпИспользоватьСофтФон;
	
	// +CRM
	CRM_ИсточникЛидовПриИзменении(Неопределено);
	ИспользуемыеСценарииПометкаПриИзменении(Неопределено);
	// -CRM
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// +CRM_РабочийСтол
	Если ЭтоКонфигурацияCRM Тогда
		Если ск_глСтекФормРабочегоСтола <> Неопределено 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "CRM_НастройкиРабочегоСтола") Тогда
			СтруктураПоиска = Новый Структура("ИмяФормы", ЭтотОбъект.ИмяФормы);
			ЭлементыРС = ЭтотОбъект["CRM_НастройкиРабочегоСтола"].НайтиСтроки(СтруктураПоиска);
			Если ЭлементыРС.Количество() > 0 
				И ск_глСтекФормРабочегоСтола.Получить(ЭлементыРС[0].Идентификатор) <> Неопределено Тогда
				ск_глСтекФормРабочегоСтола.Удалить(ЭлементыРС[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -CRM_РабочийСтол
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "сфпОбновленыИспользуемыеСценарии" Тогда
		ЗаполнитьИспользуемыеСценарии();
		ИспользуемыеСценарииПометкаПриИзменении();
		CRM_ИсточникЛидовПриИзменении();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбщиеОбработчики

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Константы.сфпНастройкиТелефонии_ПравилаОбработки.Установить(Новый ХранилищеЗначения(РеквизитФормыВЗначение("Телефония_ПравилаОбработки")));
	Константы.сфпНастройкиТелефонии_СценарииОбработки.Установить(Новый ХранилищеЗначения(РеквизитФормыВЗначение("Телефония_СценарииОбработки")));
	
КонецПроцедуры

&НаКлиенте
Процедура сфпИспользоватьСофтФонПриИзменении(Элемент = Неопределено)
	
	Элементы.сфпИспользоватьСофтФон.Заголовок = "Использовать СофтФон" + ?(сфпИспользоватьСофтФон, ", версии:", "");
	Элементы.ВерсияСофтФон.Видимость = сфпИспользоватьСофтФон И НЕ ИспользуетсяРазделениеПоОбластямДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияСофтФонПриИзменении(Элемент = Неопределено)
	
	сфпИспользоватьОблачнуюТелефонию =
		(ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO"));
	
	Если сфпИспользоватьОблачнуюТелефонию Тогда
		УстановитьТекущееДействие(ТекущееДействие);
		ОбновитьИнформациюПоЛицензиям();
		ПриИзмененииСостоянияПодключенияОбсуждений();
		
		сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонковПриИзменении(Элементы.сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков);
		сфпСрокЖизниСообщенияЖурналаЗвонковПриИзменении(Неопределено);
		
		сфпИспользоватьCoMagicПриИзменении(Элементы.сфпИспользоватьCoMagic);
		сфпИспользоватьРечевуюАналитикуПриИзменении();

		Элементы.СтраницыВерсии.ТекущаяСтраница = Элементы.ГруппаНастройкиОблачныйСофтФон;
		
	Иначе
		сфпКоличествоВзаимодействийДляМаршрутизацииПриИзменении(Элементы.сфпКоличествоВзаимодействийДляМаршрутизации);
		сфпИспользоватьСпрут7ПриИзменении(Элементы.сфпИспользоватьСпрут7);
		сфпИспользоватьCLONПриИзменении(Элементы.сфпИспользоватьCLON);
		сфпИспользоватьМаршрутизациюПриИзменении(сфпИспользоватьМаршрутизацию);
		сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении(Элементы.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков);
		сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении(Элементы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг);
		сфпИспользоватьCoMagicПриИзменении(Элементы.сфпИспользоватьCoMagic);
		сфпПланНумерацииАвтоопределениеБизнесРегионаПриИзменении(Элементы.сфпПланНумерацииАвтоопределениеБизнесРегиона);
		
		Элементы.СтраницыВерсии.ТекущаяСтраница = Элементы.ГруппаНастройкиОбычныйСофтФон;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияТелефонныеКнигиСофтФон"
//
Процедура сфпДекорацияТелефонныеКнигиСофтФонНажатие(Элемент)
	ИспользоватьСофтФон = сфпСофтФонПроСервер.сфпИспользоватьСофтФон();
	Если ИспользоватьСофтФон Тогда
		ОткрытьФорму("Справочник.сфпТелефонныеКниги.ФормаСписка");	
	ИначеЕсли сфпИспользоватьСофтФон Тогда
		ДополнительныеПараметры = Новый Структура;
		ОповещениеОтвета = Новый ОписаниеОповещения("сфпОткрытьТелефонныеКниги", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Перед открытием телефонных книг необходимо записать настройки. Записать?';
			|en='Before opening the phone book,
			| you need to save the settings. Write down?'");
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	КонецЕсли; 
КонецПроцедуры // сфпДекорацияТелефонныеКнигиСофтФонНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияПерезаполнитьРегистрПоискаПоНомерам"
//
Процедура сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие(Элемент)
	сфпСофтФонПроКлиент.сфпПерезаполнитьРегистрПоискаПоНомерам();
КонецПроцедуры // сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие()

&НаКлиенте
Процедура сфпДекорацияДополнительнаяИнформацияКонтактовНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.сфпВыборДополнительнойИнформацииКонтактов", , , , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура сфпНастройкаРасписанияЗагрузкаПланаНумерацииНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпЗагрузкаПланаНумерации");
КонецПроцедуры

&НаКлиенте
Процедура сфпПланНумерацииАвтоопределениеБизнесРегионаПриИзменении(Элемент)
	
	ЗаписатьЗначениеКонстанты("сфпПланНумерацииАвтоопределениеБизнесРегиона",
		 сфпПланНумерацииАвтоопределениеБизнесРегиона);
	
	Элементы.сфпНастройкаРасписанияЗагрузкаПланаНумерации.Видимость = сфпПланНумерацииАвтоопределениеБизнесРегиона;
	Элементы.сфпНастройкаРасписанияЗагрузкаПланаНумерации1.Видимость = сфпПланНумерацииАвтоопределениеБизнесРегиона;
	
КонецПроцедуры

&НаКлиенте
Процедура сфпСправка(Команда)
	ПерейтиПоНавигационнойСсылке("http://telefon.1crm.ru");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияУсловиеОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, ИсточникОткрытияТелефония", ТекущаяСтрока.УсловиеОбработки, Истина);

	ОткрытьФорму("Справочник.CRM_УсловияОбработкиОбращений.Форма.ФормаЭлемента", ПараметрыВвода,
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловия(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные.УсловиеОбработки = Результат;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияУсловиеОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияТелефония, ПометкаУдаления",
		 ТекущаяСтрока.УсловиеОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораУсловия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_УсловияОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияПравилоОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные;
	
	ПараметрыВвода = Новый Структура("Ключ, РежимВыбора, ИсточникОткрытияТелефония, ПометкаУдаления",
		 ТекущаяСтрока.ПравилоОбработки, Истина, Истина,
		 Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравила", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.Форма.ФормаВыбора", ПараметрыВвода, Элемент,
		 , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПравила(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные.ПравилоОбработки = Результат;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиТелефонияПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.CRM_ПравилаОбработкиТелефония.ТекущиеДанные;
	
	ОткрытьПравилоОбработки(Элемент, ТекущаяСтрока.ПравилоОбработки);
	
	ПараметрыВвода = Новый Структура("Ключ, ИсточникОткрытияТелефония", ТекущаяСтрока.ПравилоОбработки, Истина);

	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.Форма.ФормаЭлемента", ПараметрыВвода,
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбычнаяТелефония

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура сфпДекорацияКонтролируемыеПользователиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.сфпДоступныеДляПрослушиванияПользователи.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура сфпИспользоватьСпрут7ПриИзменении(Элемент)
	сфпИспользоватьЗаписьПереговоров = (сфпИспользоватьCLON ИЛИ сфпИспользоватьСпрут7);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьCLON"
//
Процедура сфпИспользоватьCLONПриИзменении(Элемент)
	
	Элементы.сфпCLONType.Видимость = сфпИспользоватьCLON;
	Элементы.сфпПодключитьCLON.Видимость = сфпИспользоватьCLON;
	Элементы.сфпГруппаНастроекCLON.Видимость = сфпИспользоватьCLON;
	
	сфпИспользоватьЗаписьПереговоров = (сфпИспользоватьCLON ИЛИ сфпИспользоватьСпрут7);
	
КонецПроцедуры // сфпИспользоватьCLONПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьМаршрутизацию"
//
Процедура сфпИспользоватьМаршрутизациюПриИзменении(Элемент)
	Элементы.сфпДекорацияИспользованиеМаршрутизации.Видимость = НЕ сфпИспользоватьМаршрутизацию;	
	Элементы.ДекорацияКоличествоВзаимодействийДляМаршрутизации.Видимость = сфпИспользоватьМаршрутизацию;
	Элементы.сфпКоличествоВзаимодействийДляМаршрутизации.Видимость = сфпИспользоватьМаршрутизацию;
	Элементы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Видимость = сфпИспользоватьМаршрутизацию;		
КонецПроцедуры // сфпИспользоватьМаршрутизациюПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияМастерНастройкиAgatUX"
//
Процедура сфпДекорацияМастерНастройкиAgatUXНажатие(Элемент)
	сфпСофтФонПроКлиент.сфпЗапуститьМастерНастройкиAgatUX();
КонецПроцедуры // сфпДекорацияМастерНастройкиAgatUXНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг"
//
Процедура сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении(Элемент)
	Элементы.сфпНастройкаРасписанияТелефонныхКниг.Видимость = сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг;	
КонецПроцедуры // сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпНастройкаРасписанияТелефонныхКниг"
//
Процедура сфпНастройкаРасписанияТелефонныхКнигНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпОбновлениеТелефонныхКниг");
КонецПроцедуры // сфпНастройкаРасписанияТелефонныхКнигНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков"
//
Процедура сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении(Элемент)
	
	ИспользоватьЗаданиеИсторииЗвонков = сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;

	Элементы.сфпНастройкаРасписанияИсторииЗвонков.Видимость = ИспользоватьЗаданиеИсторииЗвонков;
    Элементы.ГруппаДатаИстории.Видимость = ИспользоватьЗаданиеИсторииЗвонков;
	Элементы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Видимость = ИспользоватьЗаданиеИсторииЗвонков;
	Элементы.ГруппаЗагружатьВнутренние.Видимость = ИспользоватьЗаданиеИсторииЗвонков;
	Элементы.сфпВнутренниеНомераИнформационнойБазы.Видимость = ИспользоватьЗаданиеИсторииЗвонков;
	
	Если ИспользоватьЗаданиеИсторииЗвонков И НЕ ЗначениеЗаполнено(сфпДатаИсторииЗвонков) Тогда
		сфпДатаИсторииЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
	КонецЕсли;

	Если НЕ ИспользоватьЗаданиеИсторииЗвонков Тогда
		сфпОповещатьОПропущенныхЗвонках = Ложь;
		сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков =
			ПредопределенноеЗначение("Перечисление.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПродолжитьВыполнение");
	КонецЕсли;
	
	сфпОповещатьОПропущенныхЗвонкахПриИзменении(Элемент);

КонецПроцедуры // сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпНастройкаРасписанияИсторииЗвонков"
//
Процедура сфпНастройкаРасписанияИсторииЗвонковНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпПолучитьИсториюЗвонков");
КонецПроцедуры // сфпНастройкаРасписанияИсторииЗвонковНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпОповещатьОПропущенныхЗвонках"
//
Процедура сфпОповещатьОПропущенныхЗвонкахПриИзменении(Элемент)
	Элементы.сфпПользовательДляОповещений.Доступность = сфпОповещатьОПропущенныхЗвонках;
КонецПроцедуры // сфпОповещатьОПропущенныхЗвонкахПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьCoMagic"
//
Процедура сфпИспользоватьCoMagicПриИзменении(Элемент)
	
	Элементы.сфпГруппаОператорКоллтрекинга.Видимость = сфпИспользоватьCoMagic;
	Элементы.сфпОператорКоллтрекингаОблачныйСофтфон.Видимость = сфпИспользоватьCoMagic;
	Элементы.сфпОператорКоллтрекинга.Видимость = сфпИспользоватьCoMagic;
	
	сфпОператорКоллтрекингаПриИзменении();
	
КонецПроцедуры  // сфпИспользоватьCoMagicПриИзменении()

&НаКлиенте
Процедура сфпОператорКоллтрекингаПриИзменении(Элемент = Неопределено)
	
	ВидимостьComagicUIS = сфпИспользоватьCoMagic
		 И (сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic")
		ИЛИ сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS"));
	Элементы.ГруппаЛогинПарольКоллтрекингаОбычнаяАТС.Видимость = ВидимостьComagicUIS;
	Элементы.ГруппаЛогинПарольКоллтрекинга.Видимость = ВидимостьComagicUIS;
	
	ВидимостьВебхука = сфпИспользоватьCoMagic
		И сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat");
	Элементы.сфпАдресОбработкиВебхуковКоллтрекингаОбычнаяАТС.Видимость = ВидимостьВебхука;
	Элементы.сфпАдресОбработкиВебхуковКоллтрекинга.Видимость = ВидимостьВебхука;
	
КонецПроцедуры	//	сфпОператорКоллтрекингаПриИзменении()

&НаКлиенте
Процедура сфпКоличествоВзаимодействийДляМаршрутизацииПриИзменении(Элемент)
	
	ТекЗаголовок = "звонков";
	
	КоличествоГудков = сфпКоличествоВзаимодействийДляМаршрутизации;
	Если КоличествоГудков = 1 Тогда
		ТекЗаголовок = "звонка";
	КонецЕсли;
		
	Элементы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Заголовок = ТекЗаголовок + " на номер пользователя";
	
КонецПроцедуры

&НаКлиенте
Процедура сфпДекорацияПрефиксыИсходящихВызововНажатие(Элемент)
	ОткрытьФорму("Справочник.сфпПрефиксыИсходящихВызовов.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "ПодключитьCLON"
//
Процедура сфпПодключитьCLON(Команда)
	сфпЗаписатьНастройкиCLON();
	сфпСофтФонПроКлиент.сфпПодключитьCLON();
	Если НЕ (сфпObjCLON = Неопределено) Тогда
		Состояние(НСтр("ru = 'Подключение к системе записи разговоров CLON выполнено успешно!'"));
	КонецЕсли;
КонецПроцедуры // сфпПодключитьCLON()

&НаКлиенте
Процедура сфпКомандаОписаниеCoMagic(Команда)
	
	Если сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Comagic") ИЛИ
		 сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.UIS") Тогда
		ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияCoMagic"));
		
	ИначеЕсли сфпОператорКоллтрекинга = ПредопределенноеЗначение("Перечисление.CRM_CallTrakingСценарии.Roistat") Тогда
		ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияRoistatКоллтрекинг"));
	КонецЕсли;

КонецПроцедуры // сфпКомандаОписаниеCoMagic()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Процедура сохраняет настройки подключения к системе CLON
//
// Параметры:
//	Нет.
//
Процедура сфпЗаписатьНастройкиCLON()
	Константы.сфпCLONServerIP.Установить(сфпCLONServerIP);
	Константы.сфпCLONServerPort.Установить(сфпCLONServerPort);
	Константы.сфпCLONType.Установить(сфпCLONType);
	Константы.сфпCLONServerLogin.Установить(сфпCLONServerLogin);
	Константы.сфпCLONServerPassword.Установить(сфпCLONServerPassword);
КонецПроцедуры // сфпЗаписатьНастройкиCLON()

&НаСервере
// Процедура устанавливает использование регламентных заданий
//
// Параметры:
//	Нет.
//
Процедура сфпУстановитьИспользованиеРегламентныхЗаданий()
	
	сфпСофтФонПроСервер.УстановитьИспользованиеРегламентногоЗадания("сфпПолучитьИсториюЗвонков",
		 сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков);
	сфпСофтФонПроСервер.УстановитьИспользованиеРегламентногоЗадания("сфпОбновлениеТелефонныхКниг",
		 сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг);
	сфпСофтФонПроСервер.УстановитьИспользованиеРегламентногоЗадания("сфпЗагрузкаПланаНумерации",
		 сфпПланНумерацииАвтоопределениеБизнесРегиона);

КонецПроцедуры // сфпУстановитьИспользованиеРегламентныхЗаданий()

&НаКлиенте
// Процедура - обработчик открытия телефонных книг
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпОткрытьТелефонныеКниги(Ответ, ДополнительныеПараметры) Экспорт
	ОткрытьФорму("Справочник.сфпТелефонныеКниги.ФормаСписка");	
КонецПроцедуры // сфпОткрытьТелефонныеКниги()

&НаСервере
Процедура ИзменитьПараметрыВыбораПравилаОбработки()
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.CRM_ВариантыОбработкиОбращения.НеОбрабатывать);
	Список.Добавить(Перечисления.CRM_ВариантыОбработкиОбращения.ОтклонитьОбращение);
	
	НовыйМассив = Новый Массив();
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВариантОбработки", Список);
	НовыйМассив.Добавить(ПараметрВыбора);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.CRM_ПравилаОбработкиТелефонияПравилоОбработки.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОблачнаяТелефония

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура сфпИмяПубликацииСервисовТелефонииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	сфпИмяПубликацииСервисовТелефонии = Элемент.ТекстРедактирования;
	
	Если ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии)
		 И ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		сфпСофтФонПроСервер.СохранитьНастройкиПубликацииСервисовТелефонии(сфпАдресСервераПубликацииСервисовТелефонии,
			 сфпИмяПубликацииСервисовТелефонии);
		
		АдресВебхуковКоллтрекинга = "";
		сфпАдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС,
			 АдресВебхуковКоллтрекинга);
		сфпАдресОбработкиВебхуковКоллтрекинга = сфпСофтФонПроСервер.АдресВебхуковКоллтрекинга(ИспользуемаяАТС);
		
		Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Ложь;
		Элементы.ГруппаРедактированиеАдресаПубликацииОбычнаяАТС.Видимость = Ложь;
		Элементы.сфпАдресОбратногоВызова.Видимость = Истина;
		Элементы.сфпАдресОбработкиВебхуковКоллтрекингаОбычнаяАТС.Видимость = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указан адрес сервера публикации";
		Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
		Сообщение.Сообщить();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указано имя публикации";
		Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
		Сообщение.Сообщить();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура сфпАдресОбратногоВызоваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
	Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовГруппаДоступныеАТС

&НаКлиенте
Процедура АТС_Нажатие(Элемент)
	Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНастроекТелефонии

&НаКлиенте
Процедура ПриИзмененииПараметровАТС(ИмяТаблицыНастройки, Индекс)
	
	ЗаписатьЗначениеНастройкиИнтеграцииАТС(ИмяТаблицыНастройки, Индекс);
	ПроверитьСтатусПодключения();
	
КонецПроцедуры

// СофтФонWebModule
&НаКлиенте
Процедура АТС_СофтФонWebModule_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 1);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_СофтФонWebModule_vpbx_api_keyПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 2);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_СофтФонWebModule_vpbx_api_saltПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_СофтФонWebModule", 3);	
КонецПроцедуры

// MangoOffice
&НаКлиенте
Процедура АТС_MangoOffice_vpbx_api_keyПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_MangoOffice", 1);
КонецПроцедуры

&НаКлиенте
Процедура АТС_MangoOffice_vpbx_api_saltПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_MangoOffice", 2);	
КонецПроцедуры

// Яндекс
&НаКлиенте
Процедура АТС_Яндекс_КлючДляАвторизацииПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Яндекс", 1);	
КонецПроцедуры

// Билайн
&НаКлиенте
Процедура АТС_Билайн_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Билайн", 1);	
КонецПроцедуры

// Itoolabs
&НаКлиенте
Процедура АТС_Itoolabs_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Itoolabs", 0);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Itoolabs", 1);	
КонецПроцедуры

// МТТ
&НаКлиенте
Процедура АТС_МТТ_АдресОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_МТТ", 0);
КонецПроцедуры

&НаКлиенте
Процедура АТС_МТТ_КлючДляАвторизацииВОблачнойАТСПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_МТТ", 1);
КонецПроцедуры

// UIS
&НаКлиенте
Процедура АТС_UIS_КлючДляАвторизацииПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_UIS", 1);
КонецПроцедуры

// Ростелеком
&НаКлиенте
Процедура АТС_Ростелеком_vpbx_api_keyПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Ростелеком", 1);
КонецПроцедуры

&НаКлиенте
Процедура АТС_Ростелеком_vpbx_api_saltПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Ростелеком", 2);	
КонецПроцедуры

&НаКлиенте
Процедура АТС_Ростелеком_DomainПриИзменении(Элемент)
	ПриИзмененииПараметровАТС("НастройкиАТС_Ростелеком", 3);
КонецПроцедуры

&НаСервере
Функция ПроверитьПодпискуНаСобытия()
	
	Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.Билайн Тогда
		Если ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПолучитьДанныеПодпискиНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("errorCode") Тогда
					НастройкиАТС_Билайн[2].Значение = "";
					ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					
				ИначеЕсли jsonСтруктура.Свойство("expires") Тогда
					Если jsonСтруктура.expires = 0 Тогда
						НастройкиАТС_Билайн[2].Значение = "";
						ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					КонецЕсли;	
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПодпискаНаСобытия");
			Если РезультатЗапроса.Успешно Тогда
				json = Новый ЧтениеJSON();
				json.УстановитьСтроку(РезультатЗапроса.Результат);
				jsonСтруктура = ПрочитатьJSON(json);
				json.Закрыть();
				
				Если jsonСтруктура.Свойство("subscriptionId") Тогда
					НастройкиАТС_Билайн[2].Значение = jsonСтруктура.subscriptionId;
					ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_Билайн", 2);
					
					сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
				КонецЕсли;				
			КонецЕсли;
			
		Иначе
			сфпСофтФонПроСервер.ПодключитьОбновлениеПодпискиНаСобытияОблачнойАТС();
		КонецЕсли;	
		
		Возврат ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение);
		
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ДействиеВходящийЗвонокПриИзменении(Элемент)
	
	ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеВходящегоЗвонка", ДействиеВходящийЗвонок);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИсходящийЗвонокПриИзменении(Элемент)
	
	ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеИсходящегоЗвонка", ДействиеИсходящийЗвонок);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура сфпКонстантаПриИзменении(Элемент)
	
	сфпКонстантаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура сфпКонстантаПриИзмененииСервер(ИмяЭлемента)
	
	НайденныйЭлемент = Элементы.Найти(ИмяЭлемента);
	Если НайденныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗначениеКонстанты(НайденныйЭлемент.ПутьКДанным, ЭтотОбъект[НайденныйЭлемент.ПутьКДанным]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЛицензийНажатие(Элемент)
	ПоказатьПредупреждение(, Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоЛицензиям()
	
	ИнформацияПоЛицензиям = сфпЛицензированиеЭкспортныеМетоды.ОбновитьИнформациюПоЛицензиям();
	
	Элементы.ДекорацияСостояниеЛицензий.Заголовок = ИнформацияПоЛицензиям.Заголовок;
	Элементы.ДекорацияСостояниеЛицензий.Подсказка = ИнформацияПоЛицензиям.Подсказка;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтатусаПодключения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "ОбновитьСтатус" Тогда
			ПроверитьСтатусПодключения();
			
		Иначе	
			ВключитьОтключитьСофтФон(ВыбранныйЭлемент.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКартинкиЛогоОператора(ИспользуемаяАТС)
	
	Если ТипЗнч(ИспользуемаяАТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС") Тогда
		ТекИндекс = Перечисления.сфпДоступныеАТС.Индекс(ИспользуемаяАТС);
		ТекЗначение = Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(ТекИндекс);
		Возврат ТекЗначение.Имя;
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВключитьОтключитьСофтФон(Действие)
	
	Если Действие = "Включить" Тогда
		Элементы.КоманднаяПанельПользователи.Видимость = Истина;
		
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаНастройки;

	Иначе
		ПредставлениеОператора = "";
		
		Элементы.ЛогоОператора.Картинка = БиблиотекаКартинок.сфпАТС_УниверсальныйIToolLabs;
		Элементы.КоманднаяПанельПользователи.Видимость = Ложь;
		
		Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаВыборОператора;
		
		УстановитьТекущееДействие("Настройка");

		ИспользуемаяАТС = "";
		ИспользуемаяАТСДополнительно = "";
		
		ПриВыбореАТС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОператораНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.УниверсальныйItoolabs") Тогда
		  ИдентификаторОператора = ИспользуемаяАТСДополнительно;
	Иначе ИдентификаторОператора = ИдентификаторПеречисления(ИспользуемаяАТС);
	КонецЕсли;

	СтруктураПоиска = Новый Структура("Идентификатор", ИдентификаторОператора);
	НайденныеСтроки = ТаблицаОператоров.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СсылкаОператора = НайденныеСтроки[0].Ссылка;
		ПерейтиПоСсылке(СсылкаОператора);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПриАктивизацииСтроки(Элемент)
	
	ДоступноУдалениеСтроки = Ложь;
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.НомерОтсутствует
			 ИЛИ ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
			ДоступноУдалениеСтроки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьУдаленияВнутреннегоНомера(ДоступноУдалениеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПередУдалением(Элемент, Отказ)
	УдалитьВнутреннийНомер();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтатусПодключенияНажатие(Элемент)
	
	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить("ОбновитьСтатус", "Обновить статус");
	СписокВыбора.Добавить("Отключить", "Отключить интеграцию с АТС");
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореСтатусаПодключения", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ДекорацияСтатусПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыАТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыбратьОператора();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков"
//
Процедура сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонковПриИзменении(Элемент)
	
	ИспользоватьЗаданиеОчисткаСообщенийЖурналаЗвонков = сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков;

	Элементы.сфпНастройкаРасписанияОчисткиСообщенийЖурналаЗвонков.Видимость = ИспользоватьЗаданиеОчисткаСообщенийЖурналаЗвонков
																			И НЕ ИспользуетсяРазделениеПоОбластямДанных;
	Элементы.ГруппаДатаОчисткиСообщенийЖурналаЗвонков.Видимость = ИспользоватьЗаданиеОчисткаСообщенийЖурналаЗвонков;
		
	Если ИспользоватьЗаданиеОчисткаСообщенийЖурналаЗвонков
		 И НЕ ЗначениеЗаполнено(сфпСрокЖизниСообщенияЖурналаЗвонков) Тогда
		сфпСрокЖизниСообщенияЖурналаЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
	КонецЕсли;

КонецПроцедуры // сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонковПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпНастройкаРасписанияОчисткиСообщенийЖурналаЗвонков"
//
Процедура сфпНастройкаРасписанияОчисткиСообщенийЖурналаЗвонковНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпОчисткаСообщенийЖурналаЗвонков");
КонецПроцедуры // сфпНастройкаРасписанияОчисткиСообщенийЖурналаЗвонковНажатие()

&НаКлиенте
Процедура сфпСрокЖизниСообщенияЖурналаЗвонковПриИзменении(Элемент)
	
	ШаблонПодсказки = НСтр("ru = 'Будут удалены сообщения журнала звонков Системы взаимодействия,
		| созданные более %1 дней назад'");
	Элементы.сфпСрокЖизниСообщенияЖурналаЗвонков.Подсказка = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, сфпСрокЖизниСообщенияЖурналаЗвонков);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователиТелефонии

&НаКлиенте
Процедура ПользователиТелефонииВнутреннийНомерПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер) Тогда
		ПолучатьИсходящиеНомера = (ИсходящиеНомера.Количество() = 0);
		ДанныеАбонента = сфпЛицензированиеЭкспортныеМетоды.ПолучитьДанныеАбонентаОблачнойАТС(ТекДанные.ВнутреннийНомер,
			 ПолучатьИсходящиеНомера);
		ТекДанные.ДанныеАТС = ДанныеАбонента.ДанныеАТС;
		
		Если ПолучатьИсходящиеНомера И ДанныеАбонента.Свойство("ИсходящиеНомера") Тогда
			ИсходящиеНомера.ЗагрузитьЗначения(ДанныеАбонента.ИсходящиеНомера);
			
			Элементы.ПользователиТелефонииИсходящийНомер.СписокВыбора.ЗагрузитьЗначения(ДанныеАбонента.ИсходящиеНомера);
		КонецЕсли;
		
		Если ИсходящиеНомера.Количество() > 0 И НЕ ЗначениеЗаполнено(ТекДанные.ИсходящийНомер) Тогда
			ТекДанные.ИсходящийНомер = ИсходящиеНомера[0].Значение;	
		КонецЕсли;	
		
		ПользователиТелефонииПользовательПриИзменении(Неопределено);
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииИсходящийНомерПриИзменении(Элемент)
	ПользователиТелефонииПользовательПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонииПользовательПриИзменении(Элемент)
	
	МассивАбонентов = Новый Массив();
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) И ЗначениеЗаполнено(ТекДанные.ВнутреннийНомер) Тогда
		ТекДанные.ПользовательРегистра = ТекДанные.Пользователь;
		
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент,Логин,ИсходящийНомер,ДанныеАТС",
			 ТекДанные.ВнутреннийНомер, ТекДанные.Пользователь, ТекДанные.Логин, ТекДанные.ИсходящийНомер,
			 ТекДанные.ДанныеАТС);
		МассивАбонентов.Добавить(ДанныеАбонента);
		сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать");
		
		НастроитьИспользованиеСофтФонаПользователям(МассивАбонентов, Истина, ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок);
		
		УстановитьТекущееДействие("Перейти");

	Иначе
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент,Логин,ИсходящийНомер,ДанныеАТС",
			 ТекДанные.ВнутреннийНомер, ТекДанные.ПользовательРегистра, ТекДанные.Логин,
			 ТекДанные.ИсходящийНомер,
			 ТекДанные.ДанныеАТС);
		МассивАбонентов.Добавить(ДанныеАбонента);
		сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");	
		
		НастроитьИспользованиеСофтФонаПользователям(МассивАбонентов, Ложь, ДействиеВходящийЗвонок,
			 ДействиеИсходящийЗвонок,
			 НЕ ЗначениеЗаполнено(ТекДанные.Пользователь));
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьОтключитьОбсуждения(Команда)
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		ПерейтиПоНавигационнойСсылке("e1cib/command/Обработка.сфпПодключениеСистемыВзаимодействия.Команда.Отключение");

	Иначе 
		ПерейтиПоНавигационнойСсылке("e1cib/app/Обработка.сфпПодключениеСистемыВзаимодействия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЛицензии(Команда)
	ОбновитьИнформациюПоЛицензиям();
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЛицензию(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.ПользователиТелефонии.ВыделенныеСтроки Цикл
		СтрокаАбонента = ПользователиТелефонии.НайтиПоИдентификатору(ТекСтрока);
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер,
			 СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛицензию(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого ТекСтрока Из Элементы.ПользователиТелефонии.ВыделенныеСтроки Цикл
		СтрокаАбонента = ПользователиТелефонии.НайтиПоИдентификатору(ТекСтрока);
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер,
			 СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	Если НЕ сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать") Тогда
		ТекстОтсутствияЛицензий = НСтр("en='No free licenses';ru='Отсутствуют свободные лицензии'");
		ПоказатьПредупреждение(, ТекстОтсутствияЛицензий);
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВсеЛицензии(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого СтрокаАбонента Из ПользователиТелефонии Цикл
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер,
			 СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
		
	Если НЕ сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Использовать") Тогда
		ТекстОтсутствияЛицензий = НСтр("en='No free licenses';ru='Отсутствуют свободные лицензии'");
		ПоказатьПредупреждение(, ТекстОтсутствияЛицензий);
	КонецЕсли;
	
	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();

КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсеЛицензии(Команда)
	
	МассивАбонентов = Новый Массив();
	Для Каждого СтрокаАбонента Из ПользователиТелефонии Цикл
		ДанныеАбонента = Новый Структура("ВнутреннийНомер,Абонент", СтрокаАбонента.ВнутреннийНомер,
			 СтрокаАбонента.Пользователь);
		МассивАбонентов.Добавить(ДанныеАбонента);
	КонецЦикла;
	
	сфпЛицензированиеЭкспортныеМетоды.ЗаписатьИнформациюОЛицензии(МассивАбонентов, "Освободить");

	ОбновитьАбонентовАТС();
	ОбновитьИнформациюПоЛицензиям();
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВнутреннийНомер(Команда = Неопределено)
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.НомерОтсутствует
			 ИЛИ ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
			УдалитьВнутреннийНомерНаСервере(ТекДанные.Пользователь, ТекДанные.ВнутреннийНомер);
			ПользователиТелефонии.Удалить(ПользователиТелефонии.Индекс(ТекДанные));
			ОбновитьИнформациюПоЛицензиям();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСНастройками

&НаСервере
Процедура ПрочитатьЗначенияНастроек()
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.сфпИспользоватьОблачнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = Константы.сфпИспользуемаяАТС.Получить();
		ИспользуемаяАТСДополнительно = Константы.сфпИспользуемаяАТСДополнительно.Получить();

	ИначеЕсли Константы.сфпИспользоватьМобильнуюТелефонию.Получить() Тогда
		ИспользуемаяАТС = "МобильнаяТелефония";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиТелефонии = сфпСофтФонПроСервер.ПолучитьНастройкиТелефонии();
	
	НастройкиАТС = Новый ТаблицаЗначений();
	НастройкиАТС.Колонки.Добавить("Ключ");
	НастройкиАТС.Колонки.Добавить("Значение");
	
	// СофтФонWebModule
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.СофтФонWebModule);
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_key";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_key;
	
	НоваяНастройка = НастройкиАТС_СофтФонWebModule.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_salt";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_salt;
	
	// MangoOffice
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.MangoOffice);
	
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_key";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_key;
	
	НоваяНастройка = НастройкиАТС_MangoOffice.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_salt";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_salt;
	
	// Яндекс
	НоваяНастройка = НастройкиАТС_Яндекс.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.Яндекс);
	
	НоваяНастройка = НастройкиАТС_Яндекс.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииАТСЯндекс";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииАТСЯндекс;
	
	// Билайн
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.Билайн);
	
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_Билайн.Добавить();
	НоваяНастройка.Ключ = "КлючПодпискиНаСобытия";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючПодпискиНаСобытия;
	
	// ITooLabs
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs);
	
	НоваяНастройка = НастройкиАТС_ITooLabs.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВИБ";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВИБ;
	
	// МТТ
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "АдресОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.АдресОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВОблачнойАТС";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВОблачнойАТС;
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.МТТ);
	
	НоваяНастройка = НастройкиАТС_МТТ.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииВИБ";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииВИБ;
	
	// UIS
	НоваяНастройка = НастройкиАТС_UIS.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.UIS);
	
	НоваяНастройка = НастройкиАТС_UIS.Добавить();
	НоваяНастройка.Ключ = "КлючДляАвторизацииАТСUIS";
	НоваяНастройка.Значение = НастройкиТелефонии.КлючДляАвторизацииАТСUIS;
	
	// Ростелеком
	НоваяНастройка = НастройкиАТС_Ростелеком.Добавить();
	НоваяНастройка.Ключ = "URL";
	НоваяНастройка.Значение =
		сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(Перечисления.сфпДоступныеАТС.Ростелеком);
	
	НоваяНастройка = НастройкиАТС_Ростелеком.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_key";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_key;
	
	НоваяНастройка = НастройкиАТС_Ростелеком.Добавить();
	НоваяНастройка.Ключ = "vpbx_api_salt";
	НоваяНастройка.Значение = НастройкиТелефонии.vpbx_api_salt;
	
	НоваяНастройка = НастройкиАТС_Ростелеком.Добавить();
	НоваяНастройка.Ключ = "Domain";
	НоваяНастройка.Значение = НастройкиТелефонии.Domain;
	
	АдресВебхуковКоллтрекинга = "";
	сфпАдресОбратногоВызова = сфпСофтФонПроСервер.АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС,
		 АдресВебхуковКоллтрекинга);
	сфпАдресОбработкиВебхуковКоллтрекинга = сфпСофтФонПроСервер.АдресВебхуковКоллтрекинга(ИспользуемаяАТС);
	
	// Обработка звонка
	ДействиеВходящийЗвонок = НастройкиТелефонии.ДействиеВходящегоЗвонка;
	Если НЕ ЗначениеЗаполнено(ДействиеВходящийЗвонок) Тогда
		ДействиеВходящийЗвонок = "Регистрация обращения";
		ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеВходящегоЗвонка", ДействиеВходящийЗвонок);
	КонецЕсли;
	
	ДействиеИсходящийЗвонок = НастройкиТелефонии.ДействиеИсходящегоЗвонка;
	Если НЕ ЗначениеЗаполнено(ДействиеИсходящийЗвонок) Тогда
		ДействиеИсходящийЗвонок = "Открыть Телефонный звонок";
		ЗаписатьЗначениеОбщейНастройкиТелефонии("ДействиеИсходящегоЗвонка", ДействиеИсходящийЗвонок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеНастройкиИнтеграцииАТС(ТаблицаНастроек, Индекс)
	
	Настройка = ЭтотОбъект[ТаблицаНастроек][Индекс];
	сфпСофтФонПроСервер.сфпУдалитьСлужебныеСимволы(Настройка.Значение);
	сфпСофтФонПроСервер.УстановитьНастройкуТелефонии(Настройка.Ключ, Настройка.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначениеОбщейНастройкиТелефонии(Ключ, НовоеЗначение)
	
	сфпСофтФонПроСервер.УстановитьНастройкуТелефонии(Ключ, НовоеЗначение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьКонстантыСофтФон()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		ИспользуетсяОблачнаяАТС = Ложь;
		
		Если ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
			Если НЕ ИспользуетсяРазделениеПоОбластямДанных Тогда
				Константы.сфпИспользоватьСофтФон.Установить(сфпИспользоватьСофтФон);
			
				Константы.сфпИспользуемаяВерсияСофтФон.Установить(Перечисления["сфпВерсииСофтФон"].СофтФотPROSTO);
				Константы.сфпИспользоватьCLON.Установить(Ложь);
				Константы.сфпИспользоватьSMS.Установить(Ложь);
				Константы.сфпИспользоватьЗаписьПереговоров.Установить(сфпИспользоватьСофтФон);
				Константы.сфпИспользоватьИсториюЗвонков.Установить(Ложь);
				Константы.сфпОповещатьОПропущенныхЗвонках.Установить(Ложь);
				Константы.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков.Установить(Ложь);
				Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Установить(Ложь);
				Константы.сфпИспользоватьСпрут7.Установить(Ложь);
			КонецЕсли;

			Если сфпИспользоватьСофтФон Тогда
				ИспользуетсяОблачнаяАТС = ЭтоОблачнаяАТС(ИспользуемаяАТС);
			КонецЕсли;
			
			Если ИспользуетсяОблачнаяАТС Тогда
				сфпСофтФонПроСервер.СоздатьИзменитьСлужебногоПользователяТелефонии(ИспользуетсяОблачнаяАТС);
			КонецЕсли;	
			
		ИначеЕсли ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотПроф") Тогда
			ИспользуемаяАТС = "";
			
			Константы.сфпИспользоватьСофтФон.Установить(сфпИспользоватьСофтФон);
			Константы.сфпИспользуемаяВерсияСофтФон.Установить(Перечисления["сфпВерсииСофтФон"].СофтФотПроф);
			Константы.сфпИспользоватьЗаписьПереговоров.Установить(сфпИспользоватьCLON ИЛИ сфпИспользоватьСпрут7);
			
			сфпУстановитьИспользованиеРегламентныхЗаданий();
		КонецЕсли;	

		Если ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO")
			 ИЛИ НЕ сфпИспользоватьСофтФон Тогда
			сфпИспользоватьCLON = Ложь;
			сфпИспользоватьSMS = Ложь;
			сфпИспользоватьИсториюЗвонков = Ложь;
			сфпОповещатьОПропущенныхЗвонках = Ложь;
			сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков = Ложь;
			сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг = Ложь;
			сфпИспользоватьСпрут7 = Ложь;
			
		Иначе
			сфпИспользоватьИсториюЗвонков = сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
		КонецЕсли;
		
		сфпИспользоватьРечевуюАналитику = сфпИспользоватьРечевуюАналитику И ИспользуетсяОблачнаяАТС
			 И (ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.MangoOffice);
		
		сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков = сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков
																			И ИспользуетсяОблачнаяАТС;
																			
		Константы.сфпИспользоватьОблачнуюТелефонию.Установить(ИспользуетсяОблачнаяАТС);
		Константы.сфпИспользуемаяАТС.Установить(?(ИспользуетсяОблачнаяАТС, ИспользуемаяАТС,
			 Перечисления.сфпДоступныеАТС.ПустаяСсылка()));
		Константы.сфпИспользуемаяАТСДополнительно.Установить(?(ИспользуетсяОблачнаяАТС, ИспользуемаяАТСДополнительно, ""));
		Константы.сфпИспользоватьМобильнуюТелефонию.Установить(ЭтоМобильнаяТелефония(ИспользуемаяАТС));
		Константы.сфпИспользоватьСпрут7.Установить(сфпИспользоватьСпрут7);
		Константы.сфпИспользоватьCLON.Установить(сфпИспользоватьCLON);
		Константы.сфпCLONType.Установить(сфпCLONType);
		Константы.сфпCLONServerIP.Установить(сфпCLONServerIP);
		Константы.сфпCLONServerPort.Установить(сфпCLONServerPort);
		Константы.сфпCLONServerLogin.Установить(сфпCLONServerLogin);
		Константы.сфпCLONServerPassword.Установить(сфпCLONServerPassword);
		Константы.сфпИспользоватьCoMagic.Установить(сфпИспользоватьCoMagic);
		Константы.сфпЛогинCoMagic.Установить(сфпЛогинCoMagic);
		Константы.сфпПарольCoMagic.Установить(сфпПарольCoMagic);
		Константы.сфпОператорКоллтрекинга.Установить(сфпОператорКоллтрекинга);
		Константы.сфпИспользоватьSMS.Установить(сфпИспользоватьSMS);
		Константы.сфпИспользоватьИсториюЗвонков.Установить(сфпИспользоватьИсториюЗвонков);
		Константы.сфпОповещатьОПропущенныхЗвонках.Установить(сфпОповещатьОПропущенныхЗвонках);
		Константы.сфпНеЗагружатьЗвонкиДлительностьюМенее.Установить(сфпНеЗагружатьЗвонкиДлительностьюМенее);
		Константы.сфпЗагружатьВнутренниеЗвонки.Установить(сфпЗагружатьВнутренниеЗвонки);
		Константы.сфпИспользоватьМаршрутизацию.Установить(сфпИспользоватьМаршрутизацию);
		Константы.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков.Установить(сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков);
		Константы.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг.Установить(сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг);
		Константы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Установить(сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков);
		Константы.сфпПользовательДляОповещений.Установить(сфпПользовательДляОповещений);
		Константы.сфпКоличествоВзаимодействийДляМаршрутизации.Установить(сфпКоличествоВзаимодействийДляМаршрутизации);
		Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Установить(сфпИспользоватьВнутреннийНомерИзКИПользователя);
		Константы.сфпОграничениеНаПросмотрТелефонныхЗвонков.Установить(сфпОграничениеНаПросмотрТелефонныхЗвонков);
		Константы.сфпВнутренниеНомераИнформационнойБазы.Установить(сфпВнутренниеНомераИнформационнойБазы);
		Константы.сфпИспользоватьОчисткуСообщенийЖурналаЗвонков.Установить(сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков);
		Константы.сфпИспользоватьРечевуюАналитику.Установить(сфпИспользоватьРечевуюАналитику);
		Константы.сфпИспользоватьПрефиксыИсходящихВызов.Установить(сфпИспользоватьПрефиксыИсходящихВызов);
		
		Если сфпИспользоватьРечевуюАналитику И НЕ ЗначениеЗаполнено(сфпДатаРечевойАналитики) Тогда
			сфпДатаРечевойАналитики = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
		КонецЕсли;
		Константы.сфпДатаРечевойАналитики.Установить(сфпДатаРечевойАналитики);
				
		Если сфпИспользоватьИсториюЗвонков И НЕ ЗначениеЗаполнено(сфпДатаИсторииЗвонков) Тогда
			сфпДатаИсторииЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
		КонецЕсли;
		Константы.сфпДатаИсторииЗвонков.Установить(сфпДатаИсторииЗвонков);
		
		Если сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков
			 И НЕ ЗначениеЗаполнено(сфпСрокЖизниСообщенияЖурналаЗвонков) Тогда
			сфпСрокЖизниСообщенияЖурналаЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
		КонецЕсли;
		Константы.сфпСрокЖизниСообщенияЖурналаЗвонков.Установить(сфпСрокЖизниСообщенияЖурналаЗвонков);
		
		// сфпСофтФонПроСервер.УстановитьИспользованиеРегламентногоЗадания("сфпОчисткаСообщенийЖурналаЗвонков",
		//	 сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков);
		РегламентныеЗаданияСервер.УстановитьПараметрыРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.сфпОчисткаСообщенийЖурналаЗвонков,
			Новый Структура("Использование", сфпИспользоватьРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков));
			
		НаборЗаписейНецелевыхНомеров = РегистрыСведений.сфпРеестрНецелевыхНомеров.СоздатьНаборЗаписей();
		НаборЗаписейНецелевыхНомеров.Загрузить(НецелевыеНомера.Выгрузить());
		НаборЗаписейНецелевыхНомеров.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытияЖурнала = "Телефония.Сохранение настроек";
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурнала, УровеньЖурналаРегистрации.Ошибка, , ,
			 ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если (сфпИспользоватьСофтФон И Не СтарыеЗначенияДляСтатистики.ИспользоватьСофтФон)
		ИЛИ (сфпИспользоватьСофтФон И (ВерсияСофтФон <> СтарыеЗначенияДляСтатистики.Версия)) Тогда
		
		Если ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотПроф") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ИнтеграцияСТелефонией.Включение");
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.КоличествоБесплатныхЛицензий",
				 -3);
		ИначеЕсли ВерсияСофтФон = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.Включение");
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.КоличествоБесплатныхЛицензий",
				 3);
		КонецЕсли;
		
	ИначеЕсли Не сфпИспользоватьСофтФон И СтарыеЗначенияДляСтатистики.ИспользоватьСофтФон 
			И СтарыеЗначенияДляСтатистики.Версия = ПредопределенноеЗначение("Перечисление.сфпВерсииСофтФон.СофтФотPROSTO") Тогда
			CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.СофтФон.ОблачныеАТС.КоличествоБесплатныхЛицензий",
				 -3);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПриВыбореАТС(УстановитьКонстанты = Истина)
	
	ПредставлениеОператора = "";
	ЛогоОператора = БиблиотекаКартинок.сфпАТС_УниверсальныйIToolLabs;
	
	Если ТипЗнч(ИспользуемаяАТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС") И ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		Если ИспользуемаяАТС = Перечисления.сфпДоступныеАТС.УниверсальныйItoolabs Тогда
			СтруктураПоиска = Новый Структура("Идентификатор", ИспользуемаяАТСДополнительно);
			НайденныеСтроки = ТаблицаОператоров.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ПредставлениеОператора = НайденныеСтроки[0].Представление;
			КонецЕсли;

		Иначе
			ТекПеречисление =
				Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ИспользуемаяАТС));
			ПредставлениеОператора = ТекПеречисление.Синоним;
			
			ИмяЛого = "сфпАТС_" + ПолучитьИмяКартинкиЛогоОператора(ИспользуемаяАТС);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(БиблиотекаКартинок, ИмяЛого) Тогда
				ЛогоОператора = БиблиотекаКартинок[ИмяЛого];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ЛогоОператора.Картинка = ЛогоОператора;

	//сфпИспользоватьСофтФон = Истина;
	
	Если УстановитьКонстанты Тогда
		УстановитьКонстантыСофтФон();
	КонецЕсли;
		
	ЗаполнитьАбонентовОблачнойАТС();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ИспользоватьАТС_Яндекс = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс"));
	ИспользоватьАТС_Mango = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice"));
	ИспользоватьАТС_Билайн = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн"));
	ИспользоватьАТС_СофтФонWebModule =
		(ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule"));
	ИспользоватьАТС_UIS = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.UIS"));
	ИспользоватьАТС_Ростелеком = (ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Ростелеком"));
	ИспользоватьАТС_ITooLabs = сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаITooLabs(ИспользуемаяАТС);
	
	Элементы.ГруппаНастройкиАТС_СофтФонWebModule.Видимость = ИспользоватьАТС_СофтФонWebModule;
	Элементы.ГруппаНастройкиАТС_MangoOffice.Видимость =
		ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice");
	Элементы.ГруппаНастройкиАТС_Яндекс.Видимость = ИспользоватьАТС_Яндекс;
	Элементы.ГруппаНастройкиАТС_Билайн.Видимость =
		ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн");
	Элементы.ГруппаНастройкиАТС_МТТ.Видимость =
		ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.МТТ");
	Элементы.ГруппаНастройкиАТС_UIS.Видимость =
		ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.UIS");
	Элементы.ГруппаНастройкиАТС_ITooLabs.Видимость = ИспользоватьАТС_ITooLabs;
	Элементы.ГруппаНастройкиАТС_Ростелеком.Видимость =
		ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Ростелеком");
	Элементы.АТС_Itoolabs_АдресОблачнойАТС.КнопкаВыбора =
		(ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител"));
			
	Элементы.НастройкаИнтеграции.Видимость = ЭтоОблачнаяАТС(ИспользуемаяАТС);
	Элементы.сфпИспользоватьМаршрутизацию.Видимость = (ИспользоватьАТС_ITooLabs
		 ИЛИ ИспользоватьАТС_Mango ИЛИ ИспользоватьАТС_Билайн
		 ИЛИ ИспользоватьАТС_СофтФонWebModule);
	Элементы.ПользователиТелефонииОбновитьАбонентовАТС.Видимость = НЕ ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииВнутреннийНомер.ТолькоПросмотр = НЕ ИспользоватьАТС_Яндекс;
	Элементы.ПользователиТелефонииИсходящийНомер.Видимость = ИспользоватьАТС_Яндекс ИЛИ ИспользоватьАТС_UIS;
	Элементы.ПользователиТелефонииКнопкаДобавить.Видимость = ИспользоватьАТС_Яндекс;
	
	Элементы.ПользователиТелефонии.ИзменятьСоставСтрок = ИспользоватьАТС_Яндекс;
	
	сфпЛицензированиеЭкспортныеМетоды.УстановитьВидимостьЭлементовЛицензирования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(Ссылка)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Особенность платформы: ПерейтиПоНавигационнойСсылке не доступен в толстом клиенте обычного приложения.
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", сфпСофтФонПроКлиент);	
		НачатьЗапускПриложения(ОписаниеОповещения, Ссылка);
	#Иначе
		ПерейтиПоНавигационнойСсылке(Ссылка);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОблачнаяАТС(АТС)
	
	Возврат ТипЗнч(АТС) = Тип("ПеречислениеСсылка.сфпДоступныеАТС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоМобильнаяТелефония(АТС)
	
	Возврат АТС = "МобильнаяТелефония";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяЗаполнениеПользователей()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(НезаполненныеПользователи, 0)) КАК НезаполненныеПользователи,
	|	СУММА(ЕСТЬNULL(ЗаполненныеПользователи, 0)) КАК ЗаполненныеПользователи,
	|	СУММА(ЕСТЬNULL(ВсегоАбонентов, 0)) КАК ВсегоАбонентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА Объект = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК НезаполненныеПользователи,
	|		ВЫБОР КОГДА Объект = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЗаполненныеПользователи,
	|		1 КАК ВсегоАбонентов
	|	ИЗ
	|		РегистрСведений.сфпКонтактыТелефонии
	|	ГДЕ
	|		ВнутреннийНомерАТС <> """") КАК Подзапрос");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пустышки = ?(Выборка.НезаполненныеПользователи = Null, 0, Выборка.НезаполненныеПользователи);
		Заполненные = ?(Выборка.ЗаполненныеПользователи = Null, 0, Выборка.ЗаполненныеПользователи);
		Всего = ?(Выборка.ВсегоАбонентов = Null, 0, Выборка.ВсегоАбонентов);
		
	Иначе
	    Пустышки = 0;
		Заполненные = 0;
		Всего = 0;
	КонецЕсли;
	
	Если Пустышки > 0 Тогда
		Если Заполненные > 0 Тогда
			  Возврат 0;
		Иначе Возврат 2;
		КонецЕсли;
		
	ИначеЕсли Заполненные = 0 Тогда
		Возврат 2;
		
	ИначеЕсли Заполненные = Всего Тогда
		Возврат 0;
		
	Иначе	
		Возврат 1;
	КонецЕсли;
	
КонецФункции	
	
&НаКлиенте
Процедура ПроверитьСтатусПодключения()
	
	Успешно = Истина;
	
	Если НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
		Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
		КонецЕсли;

		ТекстСообщения = "Не указан Адрес публикации 1С";
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
				
		Успешно = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
		КонецЕсли;
		
		ТекстСообщения = "Не указано Имя публикации 1С";
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
				
		Успешно = Ложь;
	КонецЕсли;
	
	Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.MangoOffice") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_MangoOffice[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_MangoOffice_vpbx_api_key.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_MangoOffice_vpbx_api_key";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_MangoOffice[2].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_MangoOffice_vpbx_api_salt.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_MangoOffice_vpbx_api_salt";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Билайн") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Билайн_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Билайн_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Билайн[2].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Билайн_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Билайн_КлючПодпискиНаСобытия";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.МТТ") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[0].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_МТТ_АдресОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_АдресОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_МТТ_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_МТТ[3].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_МТТ_КлючДляАвторизацииВИБ.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_МТТ_КлючДляАвторизацииВИБ";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Яндекс") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Яндекс[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Яндекс_КлючДляАвторизации.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Яндекс_КлючДляАвторизации";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.UIS") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_UIS[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_UIS_КлючДляАвторизации";
			Сообщение.Текст = "Не указан " + Элементы.АТС_UIS_КлючДляАвторизации.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;	

	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.СофтФонWebModule") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_СофтФонWebModule_АдресОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_АдресОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[2].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_СофтФонWebModule_vpbx_api_key.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_vpbx_api_key";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_СофтФонWebModule[3].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_СофтФонWebModule_vpbx_api_salt.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_СофтФонWebModule_vpbx_api_salt";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Ростелеком") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Ростелеком[1].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Ростелеком_vpbx_api_key";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Ростелеком_vpbx_api_key.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Ростелеком[2].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Ростелеком_vpbx_api_salt";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Ростелеком_vpbx_api_salt.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Ростелеком[3].Значение) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Ростелеком_Domain";
			Сообщение.Текст = "Не указан " + Элементы.АТС_Ростелеком_Domain.Заголовок;
			Сообщение.Сообщить();
			
			Успешно = Ложь;
		КонецЕсли;	

	ИначеЕсли сфпСофтФонПроСерверПереопределяемый.ЭтоПлатформаItoolabs(ИспользуемаяАТС) Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[0].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Itoolabs_АдресОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_АдресОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[1].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТС.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_КлючДляАвторизацииВОблачнойАТС";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НастройкиАТС_Itoolabs[3].Значение) Тогда
			ТекстСообщения = "Не указан " + Элементы.АТС_Itoolabs_КлючДляАвторизацииВИБ.Заголовок;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Поле = "АТС_Itoolabs_КлючДляАвторизацииВИБ";
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
						
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	Если Успешно Тогда
    	Успешно = ПроверитьПодпискуНаСобытия();
		Если Успешно Тогда
			РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("ПроверкаСтатуса");
			Успешно = РезультатЗапроса.Успешно;
		КонецЕсли;
	КонецЕсли;	
	
	Элементы.КартинкаСтатусОнлайн.Видимость = Успешно;
	Элементы.КартинкаСтатусОффлайн.Видимость = НЕ Успешно;
	
	Если НЕ Успешно И РезультатЗапроса <> Неопределено Тогда
		Элементы.ДекорацияСтатусПодключения.Подсказка = РезультатЗапроса.Ошибка;
		Элементы.КартинкаСтатусОффлайн.Подсказка = РезультатЗапроса.Ошибка;

	Иначе
		Элементы.ДекорацияСтатусПодключения.Подсказка = "";
		Элементы.КартинкаСтатусОффлайн.Подсказка = "";
	КонецЕсли;
	
	СтатусТекущегоДействия = "Настройка";
	Если Успешно Тогда
		Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
			СтатусТекущегоДействия = "Уведомления";

		Иначе
			ЗаполнениеПользователей = ТребуетсяЗаполнениеПользователей();
			Если ЗаполнениеПользователей = 0 Тогда
				  СтатусТекущегоДействия = "Перейти";
			Иначе СтатусТекущегоДействия = "Номера";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущееДействие(СтатусТекущегоДействия);

КонецПроцедуры	

// +CRM_РабочийСтол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	РезультатВычисления = Вычислить("CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда)");
КонецПроцедуры	//	Подключаемый_ВыполнитьПереопределяемуюКоманду()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РезультатВычисления = Вычислить("CRM_РабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма,
		| Элемент, ДанныеСобытия,
		| СтандартнаяОбработка)");
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РезультатВычисления = Вычислить("CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма,
		| Элемент, ДанныеСобытия,
		| СтандартнаяОбработка)");
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// +CRM_РабочийСтол

&НаКлиенте
Процедура ОбновитьАбонентовАТС(Команда = Неопределено)
	
	ТекВнутреннийНомер = "";
	
	ТекДанные = Элементы.ПользователиТелефонии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекВнутреннийНомер = ТекДанные.ВнутреннийНомер;
	КонецЕсли;	
	
	УстановитьДоступностьУдаленияВнутреннегоНомера(Ложь);
	ЗаполнитьАбонентовОблачнойАТС();
	
	ПроверитьСтатусПодключения();

	Если ЗначениеЗаполнено(ТекВнутреннийНомер) Тогда
		СтруктураПоиска = Новый Структура("ВнутреннийНомер", ТекВнутреннийНомер);
		НайденныеСтроки = ПользователиТелефонии.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			Если Элементы.ПользователиТелефонии.ТекущаяСтрока <> ТекСтрока Тогда
				Элементы.ПользователиТелефонии.ТекущаяСтрока = ТекСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееДействие(СтатусНастройки)
	
	Если СтатусНастройки = "Перейти" Тогда
		ТекущееДействие = "";
		Элементы.ТекущееДействие.ЦветТекста = Новый Цвет();

	Иначе
		Если СтатусНастройки = "Уведомления" Тогда
			ТекущееДействие = НСтр("en='Connect notifications phone calls';ru='Подключите уведомления о телефонных звонках'");
			
		ИначеЕсли СтатусНастройки = "Номера" Тогда
			ТекущееДействие = НСтр("en='Assign the internal number of the PBX users';
				|ru='Назначьте внутренние номера АТС пользователям'");

		Иначе
			ТекущееДействие = НСтр("en='Configure the integration';ru='Выполните настройку интеграции'");
		КонецЕсли;
		
		Элементы.ТекущееДействие.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьИспользованиеСофтФонаПользователям(МассивПользователей, ИспользоватьСофтФон,
	 ДействиеВходящийЗвонок, ДействиеИсходящийЗвонок,
	 ОчиститьАбонента = Ложь)
	
	Если Метаданные.РегистрыСведений.Найти("CRM_НастройкиПользователей") <> Неопределено Тогда
		ИмяРегистраНастроек = "CRM_НастройкиПользователей";
		ИмяПВХНастроек = "CRM_НастройкиПользователей";

	Иначе
		ИмяРегистраНастроек = "сфпНастройкиПользователей";
		ИмяПВХНастроек = "сфпНастройкиПользователей";
	КонецЕсли;
		
	Для Каждого ТекПользователь Из МассивПользователей Цикл
		Если ЗначениеЗаполнено(ТекПользователь.Абонент) Тогда
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпИспользоватьСофтФон;
			КонецЕсли;
			Если МенеджерЗаписи.Значение <> ИспользоватьСофтФон Тогда
				МенеджерЗаписи.Значение = ИспользоватьСофтФон;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриВходящемЗвонке;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Значение) И МенеджерЗаписи.Значение <> ДействиеВходящийЗвонок Тогда
				МенеджерЗаписи.Значение = ДействиеВходящийЗвонок;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений[ИмяРегистраНастроек].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
			МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = ТекПользователь.Абонент;
				МенеджерЗаписи.Настройка = ПланыВидовХарактеристик[ИмяПВХНастроек].сфпДействиеПриИсходящемЗвонке;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Значение) И МенеджерЗаписи.Значение <> ДействиеИсходящийЗвонок Тогда
				МенеджерЗаписи.Значение = ДействиеИсходящийЗвонок;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = ТекПользователь.Абонент;
		МенеджерЗаписи.ВнутреннийНомерАТС = ТекПользователь.ВнутреннийНомер;
		МенеджерЗаписи.Прочитать();
		
		ЗаписатьМенеджер = Ложь;
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Объект = ТекПользователь.Абонент;
			МенеджерЗаписи.ВнутреннийНомерАТС = ТекПользователь.ВнутреннийНомер;
			
			ЗаписатьМенеджер = Истина;
		КонецЕсли;
		
		Если ОчиститьАбонента И ЗначениеЗаполнено(МенеджерЗаписи.Объект) Тогда
			МенеджерЗаписи.Объект = "";
			ЗаписатьМенеджер = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекПользователь.Логин) И МенеджерЗаписи.ЛогинАТС <> ТекПользователь.Логин Тогда
			МенеджерЗаписи.ЛогинАТС = ТекПользователь.Логин;
			ЗаписатьМенеджер = Истина;
		КонецЕсли;
		Если МенеджерЗаписи.ИсходящийНомерАТС <> ТекПользователь.ИсходящийНомер Тогда
			МенеджерЗаписи.ИсходящийНомерАТС = ТекПользователь.ИсходящийНомер;
			ЗаписатьМенеджер = Истина;
		КонецЕсли;
		Если МенеджерЗаписи.ДанныеАТС <> ТекПользователь.ДанныеАТС Тогда
			МенеджерЗаписи.ДанныеАТС = ТекПользователь.ДанныеАТС;
			ЗаписатьМенеджер = Истина;
		КонецЕсли;

		Если ИспользоватьСофтФон Тогда
			ИдентификаторПользователя =
				сфпСофтФонПроСерверПовтИсп.ИдентификаторПользователяСистемыВзаимодействия(МенеджерЗаписи.Объект);
			Если "" + МенеджерЗаписи.ИдентификаторПользователяСистемыВзаимодействия <> ИдентификаторПользователя Тогда
				МенеджерЗаписи.ИдентификаторПользователяСистемыВзаимодействия = ИдентификаторПользователя;
				ЗаписатьМенеджер = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьМенеджер Тогда
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАбонентовОблачнойАТС()
	сфпЛицензированиеЭкспортныеМетоды.ЗаполнитьАбонентовОблачнойАТС(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЗначениеКонстанты(ИмяКонстанты, ЗначениеКонстанты)
	
	УстановитьПривилегированныйРежим(Истина);
	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостоянияПодключенияОбсуждений(ОбсужденияПодключены = Неопределено)

	БазаЗарегистрированаВСистемеВзаимодействий = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	
	Если БазаЗарегистрированаВСистемеВзаимодействий Тогда
		  Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("en='Disable notifications about phone calls';
		  	|ru='Отключить уведомления о телефонных звонках'");
	Иначе Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("en='Connect';
		|ru='Подключить уведомления о телефонных звонках'");
	КонецЕсли;
	
	Элементы.ГруппаРегламентноеЗаданиеОчисткаСообщенийЖурналаЗвонков.Видимость =
		БазаЗарегистрированаВСистемеВзаимодействий;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВнутреннийНомерНаСервере(Абонент, ВнутреннийНомер)
	
	МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Абонент;
	МенеджерЗаписи.ВнутреннийНомерАТС = ВнутреннийНомер;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПеречисления(ЗначениеПеречисления)
	
	ТекПеречисление =
		Метаданные.Перечисления.сфпДоступныеАТС.ЗначенияПеречисления.Получить(Перечисления.сфпДоступныеАТС.Индекс(ЗначениеПеречисления));
	Возврат ТекПеречисление.Имя;
		
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьУдаленияВнутреннегоНомера(Доступность)
	
	Элементы.УдалитьВнутреннийНомер.Доступность = Доступность;
	Элементы.ПользователиТелефонииКонтекстноеМенюУдалитьВнутреннийНомер.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОператора(Команда = Неопределено)
	
	ТекДанные = Элементы.ТаблицаОператоров.ТекущиеДанные;
	
	Если Элементы.ТаблицаОператоров.ТекущийЭлемент.Имя = "ТаблицаОператоровСсылка" Тогда
		ПерейтиПоСсылке(ТекДанные.Ссылка);
		
	Иначе
		ИспользуемаяАТСДополнительно = "";
		
		Если ТекДанные.Идентификатор = "МобильнаяТелефония" Тогда
			ИспользуемаяАТС = ТекДанные.Идентификатор;
		
		Иначе
			ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС." + ТекДанные.Идентификатор);
			Если НЕ ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
				ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.УниверсальныйItoolabs");
				ИспользуемаяАТСДополнительно = ТекДанные.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		ПриВыбореАТС();
		
		ПрочитатьЗначенияНастроек();
		ПроверитьСтатусПодключения();
		ОбновитьАбонентовАТС();
		
		ВключитьОтключитьСофтФон("Включить");
		
		Если ИспользуемаяАТС = ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител") Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[0].Значение) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[1].Значение) ИЛИ
				 НЕ ЗначениеЗаполнено(НастройкиАТС_ITooLabs[3].Значение) Тогда
				Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Ложь;
				Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	УстановитьКонстантыСофтФон();
	
	ОбновитьИспользуемыеСценарии();
	СохранитьНастройкиФормы();
	
	Оповестить("ОбновитьПравилаОбработкиОбращений");
	
	Если Не НачальноеЗначениеНастройкиТелефония Тогда
		ПроверитьНеобходимостьДобавитьНастройкуНаРабочийСтол();
	КонецЕсли;
	
	// +CRM_РабочийСтол
	// Пометка о настройке телефонии в форме Настроек
	Если ЭтоКонфигурацияCRM И НЕ сфпСофтФонПроСервер.сфпТребуетсяНастройкаОблачнойТелефонии() Тогда
		ИмяЗначения = "Перечисление.CRM_РазделыНастройкиРешения.Телефония";
		ТекЗначение = ПредопределенноеЗначение(ИмяЗначения);
		
		РезультатВычисления = Вычислить("CRM_НачалоРаботыСПрограммойВызовСервера.ЗаписатьНастроенныйРазделРешения(ТекЗначение)");
		Если РезультатВычисления Тогда
			Оповестить("ОбновитьНастроенныеРазделы");
			РезультатВычисления =
				Вычислить("CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент(""Обработка.сфпАРМ_Телефония.Форма.Форма"")");
		КонецЕсли;
	КонецЕсли;
	// -CRM_РабочийСтол
	// +CRM
	ГотовоСервер();
	// -CRM
	
	Если Открыта() Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

// +CRM
Процедура ГотовоСервер()
	
	НастройкиСозданияКлиентов = Новый Структура;
	НастройкиСозданияКлиентов.Вставить("CRM_ВариантАвтосозданияКлиентов", CRM_ВариантАвтосозданияКлиентов);
	НастройкиСозданияКлиентов.Вставить("CRM_ПартнерСтатусРаботы", CRM_ПартнерСтатусРаботы);
	НастройкиСозданияКлиентов.Вставить("CRM_ПартнерГруппа", CRM_ПартнерГруппа);
	Константы.CRM_НастройкиСозданияКлиентовПриЗвонке.Установить(Новый ХранилищеЗначения(НастройкиСозданияКлиентов));

	НастройкиСрока = Новый Структура;
	НастройкиСрока.Вставить("CRM_СрокОбработкиДней", CRM_СрокОбработкиДней);
	НастройкиСрока.Вставить("CRM_СрокОбработкиЧасов", CRM_СрокОбработкиЧасов);
	НастройкиСрока.Вставить("CRM_СрокОбработкиМинут", CRM_СрокОбработкиМинут);
	Константы.CRM_СрокОбработкиЗвонков.Установить(Новый ХранилищеЗначения(НастройкиСрока));
	Константы.CRM_СрокЖизниЗвонков.Установить(CRM_СрокЖизниОбращения);
	
	// +CRM
	РегистрыСведений.CRM_НастройкиСвязиОбращенийСИнтересами.ФормаИсточникаПриЗаписи(ЭтотОбъект, "Телефония");
	// -CRM
	
	Константы.сфпНастройкиТелефонии_ПрименитьПравилаОбработки.Установить(CRM_ОбрабатыватьОбращения);
	Константы.сфпНастройкиТелефонии_ИсточникЛидов.Установить(CRM_ИсточникЛидов);
	
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура ТекстПоискаОператораПриИзменении(Элемент)
	
	Для Каждого ТекСтрока Из ТаблицаОператоров Цикл
		ТекСтрока.УдовлетворяетСтрокаПоиска = Ложь;
		
		Если НЕ ПустаяСтрока(ТекстПоискаОператора) Тогда
			Если СтрНайти(ВРЕГ(ТекСтрока.Представление), ВРЕГ(ТекстПоискаОператора)) > 0
				 ИЛИ СтрНайти(ВРЕГ(ТекСтрока.Ссылка),
				 ВРЕГ(ТекстПоискаОператора)) > 0 Тогда
				ТекСтрока.УдовлетворяетСтрокаПоиска = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ПустаяСтрока(ТекстПоискаОператора) Тогда
		Элементы.ТаблицаОператоров.ОтборСтрок = Неопределено;

	Иначе
		СтруктураОтбора = Новый Структура("УдовлетворяетСтрокаПоиска", Истина);
		Элементы.ТаблицаОператоров.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АТС_Itoolabs_АдресОблачнойАТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользуемаяАТС <> ПредопределенноеЗначение("Перечисление.сфпДоступныеАТС.Гравител") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Ложь;
	Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподключениеITooLabs(Команда)
	
	ПродолжатьПодключение = Истина;
	
	Если НЕ ЗначениеЗаполнено(сфпАдресСервераПубликацииСервисовТелефонии) Тогда
		Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "сфпАдресСервераПубликацииСервисовТелефонии";
		Сообщение.Текст = "Не указан Адрес публикации 1С";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(сфпИмяПубликацииСервисовТелефонии) Тогда
		Если НЕ Элементы.ГруппаРедактированиеАдресаПубликации.Видимость Тогда
			Элементы.ГруппаРедактированиеАдресаПубликации.Видимость = Истина;
			Элементы.сфпАдресОбратногоВызова.Видимость = Ложь;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "сфпИмяПубликацииСервисовТелефонии";
		Сообщение.Текст = "Не указано Имя публикации 1С";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АвтоподпискаНаименование) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаНаименование";
		Сообщение.Текст = "Не указано наименование организации или контактного лица";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АвтоподпискаТелефон) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаТелефон";
		Сообщение.Текст = "Не указан контактный телефон";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АвтоподпискаЭлектронныйАдрес) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "АвтоподпискаЭлектронныйАдрес";
		Сообщение.Текст = "Не указан адрес электронной почты";
		Сообщение.Сообщить();
		
		ПродолжатьПодключение = Ложь;
	КонецЕсли;
	
	Если НЕ ПродолжатьПодключение Тогда
		Возврат;
	КонецЕсли;
	
	ТокенАвторизации = "" + Новый УникальныйИдентификатор();
	ПараметрыАвтоподписки = Новый Структура("Наименование,Телефон,ЭлектроннаяПочта,Токен",
		 АвтоподпискаНаименование, АвтоподпискаТелефон, АвтоподпискаЭлектронныйАдрес,
		 ТокенАвторизации);
	
	РезультатЗапроса = сфпЛицензированиеЭкспортныеМетоды.ВыполнитьЗапросОблачнойАТС("Автоподписка", , ,
		 , , ,
		 ПараметрыАвтоподписки);
	Если РезультатЗапроса.Успешно И ЗначениеЗаполнено(РезультатЗапроса.РезультатJSON) Тогда
		Если РезультатЗапроса.РезультатJSON.Свойство("url") И РезультатЗапроса.РезультатJSON.Свойство("token") Тогда
			НастройкиАТС_ITooLabs[0].Значение = РезультатЗапроса.РезультатJSON.url;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 0);
			
			НастройкиАТС_ITooLabs[1].Значение = РезультатЗапроса.РезультатJSON.token;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 1);
			
			НастройкиАТС_ITooLabs[3].Значение = ПараметрыАвтоподписки.Токен;
			ЗаписатьЗначениеНастройкиИнтеграцииАТС("НастройкиАТС_ITooLabs", 3);
			
			ПроверитьСтатусПодключения();
			
			Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Истина;
			Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподключениеITooLabs_Отмена(Команда)
	
	Элементы.ГруппаНастройкиАТС_ITooLabs_Параметры.Видимость = Истина;
	Элементы.ГруппаАвтоНастройкиАТС_ITooLabs.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенеджерСЛК(Команда)
	
	ОткрытьФорму("Обработка.слкМенеджерЛицензий.Форма.МенеджерЛицензийСЛК");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеиспользуемыеЛинииНаСервере()
	
	СтруктураПоиска = Новый Структура("НомерОтсутствует", Истина);
	НайденныеСтроки = ПользователиТелефонии.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.ВнутреннийНомер) Тогда
			МенеджерЗаписи = РегистрыСведений.сфпКонтактыТелефонии.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = НайденнаяСтрока.Пользователь;
			МенеджерЗаписи.ВнутреннийНомерАТС = НайденнаяСтрока.ВнутреннийНомер;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
				
			ИначеЕсли НЕ ЗначениеЗаполнено(НайденнаяСтрока.Пользователь) Тогда
				МенеджерЗаписи.Объект = Неопределено;
				МенеджерЗаписи.ВнутреннийНомерАТС = НайденнаяСтрока.ВнутреннийНомер;
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеиспользуемыеЛинииПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьНеиспользуемыеЛинииНаСервере();

	ОбновитьАбонентовАТС();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеиспользуемыеЛинии(Команда)
	
	Если ПользователиТелефонии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("УдалитьНеиспользуемыеЛинииПродолжить", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Несуществующие номера будут удалены! Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена, "ВНИМАНИЕ!");

КонецПроцедуры

&НаКлиенте
Процедура сфпИспользоватьРечевуюАналитикуПриИзменении(Элемент = Неопределено)
	
	ЗаписатьЗначениеКонстанты("сфпИспользоватьРечевуюАналитику", сфпИспользоватьРечевуюАналитику);
	Элементы.сфпНастройкаРасписанияОбновленияРечевойАналитики.Видимость = сфпИспользоватьРечевуюАналитику;
	Элементы.ГруппаДатаРечевойАналитики.Видимость = сфпИспользоватьРечевуюАналитику;

КонецПроцедуры

&НаКлиенте
Процедура сфпНастройкаРасписанияОбновленияРечевойАналитикиНажатие(Элемент)
	сфпСофтФонПроКлиент.ПоказатьРасписаниеРегламентногоЗадания("сфпОбновлениеРечевойАналитики");
КонецПроцедуры

&НаКлиенте
Процедура сфпАдресОбработкиВебхуковКоллтрекингаОбычнаяАТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.ГруппаРедактированиеАдресаПубликацииОбычнаяАТС.Видимость = Истина;
	Элементы.сфпАдресОбработкиВебхуковКоллтрекингаОбычнаяАТС.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаршрутизацию(Команда)
	ЗаполнитьМаршрутизациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутизациюНаСервере()
	
	ВерсияСофтФон = Константы.сфпИспользуемаяВерсияСофтФон.Получить();
	
	Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотPROSTO Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Объект КАК Пользователь,
		|	ВнутреннийНомерАТС КАК Номер,
		|	ВЫБОР КОГДА ВнутреннийНомерАТС = ОсновнойНомерТелефона ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.сфпКонтактыТелефонии
		|ГДЕ
		|	Объект ССЫЛКА Справочник.Пользователи
		|	И Объект <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутреннийНомерАТС <> """"
		|УПОРЯДОЧИТЬ ПО
		|	Объект,
		|	Порядок");

	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Пользователь,
		|	Значение КАК Номер
		|ИЗ
		|	РегистрСведений.CRM_НастройкиПользователей
		|ГДЕ
		|	Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер)");
	КонецЕсли;
	
	ВнутренниеНомера = Запрос.Выполнить().Выгрузить();
	
	Результат = "";
	
	Для Каждого ТекТип Из Метаданные.ОпределяемыеТипы.сфпКонтактВзаимодействия.Тип.Типы() Цикл
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТекТип);
		ТекОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		ТекСсылка = ТекОписаниеТипа.ПривестиЗначение(Неопределено);
		ТекИмя = ТекСсылка.Метаданные().Имя;
		ТекРеквизиты = Метаданные.Справочники[ТекИмя].Реквизиты;
		
		Если ТекРеквизиты.Найти("сфпПользовательДляПереключенияЗвонков") <> Неопределено Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Ссылка,
			|	сфпПользовательДляПереключенияЗвонков," + ?(ТекИмя = "КонтактныеЛицаПартнеров", "
			|	Владелец.ОсновнойМенеджер", "
			|	ОсновнойМенеджер") + " КАК ОсновнойМенеджер
			|ИЗ
			|	Справочник." + ТекИмя + "
			|ГДЕ
			|	НЕ ПометкаУдаления
			|	И сфпПользовательДляПереключенияЗвонков = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)" 
				+ ?(ТекИмя = "КонтактныеЛицаПартнеров", "
			|	И Владелец.ОсновнойМенеджер", "
			|	И ОсновнойМенеджер") + " <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|ИТОГИ ПО
			|	ОсновнойМенеджер");
			
			Сч = 0;
			
			// BSLLS:CreateQueryInCycle-off
			// Запрос вполняется только 2 раза, для справочников Партнеры и КонтактныеЛица
			ВыборкаМенеджеров = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			// BSLLS:CreateQueryInCycle-on
			Пока ВыборкаМенеджеров.Следующий() Цикл
				СтруктураПоиска = Новый Структура("Пользователь", ВыборкаМенеджеров.ОсновнойМенеджер);
				НайденныеСтроки = ВнутренниеНомера.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВнутреннийНомер = НайденныеСтроки[0].Номер;
				
				Выборка = ВыборкаМенеджеров.Выбрать();
				Пока Выборка.Следующий() Цикл
					ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ТекОбъект.сфпПользовательДляПереключенияЗвонков = ВыборкаМенеджеров.ОсновнойМенеджер;
					ТекОбъект.ОбменДанными.Загрузка = Истина;
					ТекОбъект.Записать();
					
					НаборЗаписей = РегистрыСведений.сфпНомераТелефоновДляПоиска.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
					НаборЗаписей.Прочитать();
					
					ЗаписатьНабор = Ложь;
					
					Для Каждого ТекЗапись Из НаборЗаписей Цикл
						Если ТекЗапись.Пользователь <> ВыборкаМенеджеров.ОсновнойМенеджер Тогда
							ТекЗапись.Пользователь = ВыборкаМенеджеров.ОсновнойМенеджер;
							ЗаписатьНабор = Истина;
						КонецЕсли;
						Если ТекЗапись.ВнутреннийНомер <> ВнутреннийНомер Тогда
							ТекЗапись.ВнутреннийНомер = ВнутреннийНомер;
							ЗаписатьНабор = Истина;
						КонецЕсли;
					КонецЦикла;	
					
					Если ЗаписатьНабор Тогда
						НаборЗаписей.Записать();
					КонецЕсли;
					
					Сч = Сч + 1;
				КонецЦикла;
			КонецЦикла;
			
			Результат = Результат + ?(Результат = "", "", "
			|") + "Обработано " + Сч + " эл. справочника " + ТекИмя;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ВерсияСофтФон = Перечисления.сфпВерсииСофтФон.СофтФотПроф Тогда
		Если Константы.сфпИспользоватьМаршрутизацию.Получить() Тогда
			СтарыйНабор = Новый Массив();
			НовыйНабор = сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации();
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпЗаменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьДобавитьНастройкуНаРабочийСтол()
	
	Если сфпИспользоватьСофтФон Тогда
		
		сфпСофтФонПроСервер.ДобавитьНастройкуТелефонииНаРабочийСтол();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// +CRM
#Область ПравилаОбработки

&НаКлиенте
Процедура ВидимостьПравилОбработки()
	
	Если CRM_ОбрабатыватьОбращения Тогда
		Если Телефония_ПравилаОбработки.Количество() = 1 
			И Телефония_ПравилаОбработки[0].УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия") Тогда
			Элементы.ПолеПравилоОбработки.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Расширенная настройка'");
		Иначе
			Элементы.ПолеПравилоОбработки.Видимость = Ложь;
			Элементы.ГруппаСписокПравил.Видимость = Истина;
			Элементы.ГруппаСписокПравил.Заголовок = НСтр("ru = 'Правила обработки'") + " (" 
				+ Телефония_ПравилаОбработки.Количество() 
				+ ")";
		КонецЕсли;
	Иначе
		Элементы.ПолеПравилоОбработки.Видимость = Ложь;
		Элементы.ГруппаСписокПравил.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбрабатыватьОбращенияПриИзменении(Элемент)
	Если CRM_ОбрабатыватьОбращения Тогда
		Если Телефония_ПравилаОбработки.Количество() = 0 Тогда
			НовПравило = Телефония_ПравилаОбработки.Добавить();
			НовПравило.УсловиеОбработки = ПредопределенноеЗначение("Справочник.CRM_УсловияОбработкиОбращений.БезУсловия");
		КонецЕсли;
	Иначе
		Телефония_ПравилаОбработки.Очистить();
	КонецЕсли;
	ВидимостьПравилОбработки();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПравилаОбработкиПриИзменении(Элемент)
	
	Если Телефония_ПравилаОбработки.Количество() = 0 Тогда
		CRM_ОбрабатыватьОбращения = Ложь;
	КонецЕсли;
	ВидимостьПравилОбработки();
		
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИсточникЛидовПриИзменении(Элемент = Неопределено)
	Элементы.ГруппаИспользуемыеСценарии.Видимость = CRM_ИсточникЛидов;
	Элементы.ГруппаСрокОбработки.Видимость = CRM_ИсточникЛидов;
	Элементы.ГруппаСрокЖизни.Видимость = CRM_ИсточникЛидов;
	Если Элемент <> Неопределено 
		И CRM_ИсточникЛидов 
		И Не ЗначениеЗаполнено(CRM_СрокЖизниОбращения) Тогда
		CRM_СрокЖизниОбращения = 30;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеСценарииПометкаПриИзменении(Элемент = Неопределено)
	КолвоСценариев = 0;
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			КолвоСценариев = КолвоСценариев + 1;
		КонецЕсли;
	КонецЦикла;
	Элементы.ГруппаИспользуемыеСценарии.Заголовок = НСтр("ru = 'Используемые сценарии'") + " (" + КолвоСценариев + ")";
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользуемыеСценарии()
	
	ИспользуемыеСценарии.Очистить();
	сфпСценарииОбработкиПоУмолчанию = Ложь;
	СценарииОбработки = Константы.сфпНастройкиТелефонии_СценарииОбработки.Получить().Получить();
	Если СценарииОбработки = Неопределено Тогда
		сфпСценарииОбработкиПоУмолчанию = Истина;
	Иначе
		ЗначениеВРеквизитФормы(СценарииОбработки, "Телефония_СценарииОбработки");
	КонецЕсли;
	
	CRM_ИсточникЛидовПоУмолчанию = ?(Телефония_СценарииОбработки.Количество() > 0, Истина,
		Константы.сфпНастройкиТелефонии_ИсточникЛидов.Получить());
	
	CRM_ИсточникЛидов = ?(сфпСценарииОбработкиПоУмолчанию, Истина,
		 CRM_ИсточникЛидовПоУмолчанию);
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.Ссылка В (&Используемые) КАК Пометка,
	                      |	CRM_СостоянияИнтересов.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	                      |	И (НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |			ИЛИ CRM_СостоянияИнтересов.Ссылка В (&Используемые))
	                      |	И ВЫБОР
	                      |			КОГДА &ИспользоватьПоддержку
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ НЕ CRM_СостоянияИнтересов.ЭтоПоддержка
	                      |		КОНЕЦ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("Используемые", Телефония_СценарииОбработки.Выгрузить().ВыгрузитьКолонку("Сценарий"));
	Запрос.УстановитьПараметр("ИспользоватьПоддержку", ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку"));
	ПометкаВыбора = сфпСценарииОбработкиПоУмолчанию;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИспользуемыеСценарии.Добавить(Выборка.Ссылка, , ?(ПометкаВыбора, ПометкаВыбора, Выборка.Пометка),
			 ?(Выборка.ПометкаУдаления, БиблиотекаКартинок.ПометитьНаУдаление,
			 Неопределено));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИспользуемыеСценарии()
	Телефония_СценарииОбработки.Очистить();
	Для каждого Элемент Из ИспользуемыеСценарии Цикл
		Если Элемент.Пометка Тогда
			НовСтр = Телефония_СценарииОбработки.Добавить();
			НовСтр.Сценарий = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для Сч = Элемент.МинимальноеЗначение  По мин(Элемент.МаксимальноеЗначение, 59) Цикл
		Элемент.СписокВыбора.Добавить(Сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияПриИзменении(Элемент)
	Если Элемент.СписокВыбора.НайтиПоЗначению(CRM_СрокЖизниОбращения) <> Неопределено Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_СрокЖизниОбращенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
	 ПараметрыПолученияДанных,
	 СтандартнаяОбработка)
	Если Элемент.РежимВыбораИзСписка 
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		CRM_СрокЖизниОбращения = Число(Текст);
		Если Элемент.СписокВыбора.НайтиПоЗначению(CRM_СрокЖизниОбращения) = Неопределено Тогда
			Элемент.РежимВыбораИзСписка = Ложь;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область АвтосозданиеКлиентов

&НаКлиенте
Процедура CRM_СоздаватьПК(Команда)
	
	CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздаватьКлиента(Команда)
	
	CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НеСоздаватьКлиента(Команда)
	
	CRM_ВариантАвтосозданияКлиентов =
		ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать");
	CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере();
	
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура CRM_НастроитьКнопкиСоздаватьКлиентаНаСервере()
	
	// Установить видимость
	
	Элементы.CRM_СоздаватьПК.Видимость = CRM_ИспользоватьПотенциальныхКлиентов;
	Элементы.ГруппаНастройкиСозданияПартнера.Видимость =
		(CRM_ВариантАвтосозданияКлиентов = Перечисления.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента);
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		Элементы.ДекорацияНадписьСозданиеПартнера.Подсказка = НСтр("ru = 'При обращении от неизвестного контакта,
			| создавать потенциального клиента,
                                                        |клиента, либо не сохранять контакт.'");
	КонецЕсли;
	
	// Покрасить кнопки
	
	НомерКнопки = ?(CRM_ИспользоватьПотенциальныхКлиентов, 1, 2);
	
	Если CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьПК") Тогда
		НомерКнопки = 1;
	ИначеЕсли CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.СоздаватьКлиента") Тогда
		НомерКнопки = 2;
	ИначеЕсли CRM_ВариантАвтосозданияКлиентов = ПредопределенноеЗначение("Перечисление.CRM_ВариантыАвтосозданияКлиентов.НеСоздавать") Тогда
		НомерКнопки = 3;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	Если CRM_ИспользоватьПотенциальныхКлиентов Тогда
		
		СтруктураКнопка = Новый Структура;
		ИмяОписания = "CRM_СоздаватьПК";
		СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
		СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
		
		СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
		
	КонецЕсли;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_СоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_НеСоздаватьКлиента";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 3, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПравилоОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоОбработки(Элемент, Телефония_ПравилаОбработки[0].ПравилоОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоОбработки(Элемент, ПравилоОбработки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ПравилоОбработки);
	ПараметрыФормы.Вставить("АккаунтВладелец", "Телефония");
	ПараметрыФормы.Вставить("ИсточникОткрытияТелефония", Истина);
	ОткрытьФорму("Справочник.CRM_ПравилаОбработкиОбращений.ФормаОбъекта", ПараметрыФормы, Элемент, , , , ,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// -CRM
