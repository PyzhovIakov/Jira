#Область ОписаниеПеременных

&НаКлиенте
Перем Контекст;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СпособПомещенияФайла = Параметры.СпособПомещенияФайла;
	
	ЗаголовокДиалога = "";
	Если Параметры.Свойство("ЗаголовокДиалога", ЗаголовокДиалога) И ЗначениеЗаполнено(ЗаголовокДиалога) Тогда
		ЭтотОбъект.Заголовок = ЗаголовокДиалога;
		ЭтотОбъект.АвтоЗаголовок = Ложь;
	КонецЕсли;

	Параметры.Свойство("ИмяФайлаИлиАдрес", ИмяФайлаИлиАдрес);
	СвойстваФайла = ФайлыБТС.СвойстваФайлаВременногоХранилища(ИмяФайлаИлиАдрес);
	Если СвойстваФайла.Зарегистрирован Тогда
		ПутьФайлаWindows = СвойстваФайла.ПутьWindows;
		ПутьФайлаLinux = СвойстваФайла.ПутьLinux;
	Иначе
		Параметры.Свойство("ПутьФайлаWindows", ПутьФайлаWindows);
		Параметры.Свойство("ПутьФайлаLinux", ПутьФайлаLinux);
	КонецЕсли;

	Параметры.Свойство("ИмяФайлаНаКлиенте", ИмяФайлаНаКлиенте);
	Параметры.Свойство("РазмерФайла", РазмерФайла);

	ПредставлениеФайла = "";
	Параметры.Свойство("ПредставлениеФайла", ПредставлениеФайла);

	Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = СтрШаблон(НСтр("ru = 'Загрузка файла %1'"),
		ПредставлениеФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("НачатьЗагрузкуФайла", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗагрузкаЗавершена Тогда
		Отказ = Истина;
		ОтменаЗагрузки = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьЗагрузкуФайла()
	
	Оповещение = Новый ОписаниеОповещения("ПослеОткрытияПотока", ЭтотОбъект, , "ПриОшибке", ЭтотОбъект);
	ФайловыеПотоки.НачатьОткрытие(Оповещение, ИмяФайлаНаКлиенте, РежимОткрытияФайла.Открыть, ДоступКФайлу.Чтение);
	
КонецПроцедуры

// После открытия потока.
// 
// Параметры:
//  Поток - ФайловыйПоток
//  ДополнительныеПараметры - Структура
&НаКлиенте
Асинх Процедура ПослеОткрытияПотока(Поток, ДополнительныеПараметры) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Поток", Поток);
	Контекст.Вставить("Буфер", Новый БуферДвоичныхДанных(ФайлыБТСКлиентСервер.РазмерПорцииОбработки(
		РазмерФайла, СпособПомещенияФайла = "ЗагрузкаВСервис")));
	
	Если СпособПомещенияФайла = "ЗагрузкаВСервис" Тогда
		Попытка
			Ждать ИнициализироватьЗагрузкуВСервис();
		Исключение
			ЗагрузкаЗавершена = Истина;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ПрочитатьОчереднуюПорцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьОчереднуюПорцию()
	
	Оповещение = Новый ОписаниеОповещения("ОчереднаяЧастьПрочитана", ЭтотОбъект, , "ПриОшибке",
		ЭтотОбъект);
	Контекст.Поток.НачатьЧтение(Оповещение, Контекст.Буфер, 0,
		Контекст.Буфер.Размер);

КонецПроцедуры

// Очередная часть прочитана.
// 
// Параметры:
//  Количество -Число
// 	ДополнительныеПараметры - Структура:
// * Поток - ФайловыйПоток
// * Буфер - БуферДвоичныхДанных
&НаКлиенте
Процедура ОчереднаяЧастьПрочитана(Количество, ДополнительныеПараметры) Экспорт
	
	Позиция = Контекст.Поток.ТекущаяПозиция();
	
	Буфер = ?(Контекст.Буфер.Размер = Количество, Контекст.Буфер,
		Контекст.Буфер.Прочитать(0, Количество));
	Контекст.Вставить("ИдетОтправкаПорции", Истина);
	ОтправитьОчереднуюПорцию(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер), Позиция - Количество, Позиция);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОтправки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОбработчикОжиданияОтправки() Экспорт
	
	Если Контекст.ИдетОтправкаПорции Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОтправки", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ОтменаЗагрузки Тогда
		ОтменитьЗагрузку();
		Возврат;
	КонецЕсли;
	
	Позиция = Контекст.Поток.ТекущаяПозиция();
	Если Позиция = РазмерФайла Тогда
		Ждать ЗавершитьЗагрузку();
		Возврат;
	КонецЕсли;
	
	ПрочитатьОчереднуюПорцию();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтправитьОчереднуюПорцию(ДвоичныеДанные, Начало, Конец)
	
	Попытка
		
		Прогресс = 100 * Начало / РазмерФайла;
		Если СпособПомещенияФайла = "ФайлНаСервере" Тогда
			ОтправитьОчереднуюПорциюНаСервере(ИмяФайлаИлиАдрес, ПутьФайлаWindows, ПутьФайлаLinux, ДвоичныеДанные, Начало);
		ИначеЕсли СпособПомещенияФайла = "ЗагрузкаВСервис" Тогда
			Ждать ОтправитьПорциюВСервис(ДвоичныеДанные, Начало, Конец);
		КонецЕсли;
		
		Контекст.Вставить("ИдетОтправкаПорции", Ложь);
	Исключение
		Контекст.Вставить("ИдетОтправкаПорции", Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьОчереднуюПорциюНаСервере(ИмяФайлаИлиАдрес, ПутьФайлаWindows, ПутьФайлаLinux, Знач ДвоичныеДанные,
	Знач Начало)

	Если Начало = 0 Тогда
		РежимОткрытия = РежимОткрытияФайла.Создать;
	Иначе
		РежимОткрытия = РежимОткрытияФайла.Дописать;
	КонецЕсли;

	ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВСеансе(ИмяФайлаИлиАдрес, ПутьФайлаWindows, ПутьФайлаLinux);
	ПотокЗаписи = ФайловыеПотоки.Открыть(ИмяФайлаНаСервере, РежимОткрытия, ДоступКФайлу.Запись);
	РазмерЗаписанногоФрагмента = ПотокЗаписи.Размер();
	Если РазмерЗаписанногоФрагмента <> Начало Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Размер файла %1 не соответствует ожидаемому %2'"),
			РазмерЗаписанногоФрагмента, Начало);
	КонецЕсли;

	ПотокДанных = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ПотокДанных.КопироватьВ(ПотокЗаписи);
	ПотокЗаписи.Закрыть();
	ПотокДанных.Закрыть();
	ПотокЗаписи = Неопределено;
	ПотокДанных = Неопределено;

КонецПроцедуры

#Область ВызовыHTTP

&НаКлиенте
Функция Соединение(Адрес, Таймаут = 60)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	
	Если НРег(СтруктураURI.Схема) = "https" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Неопределено, Таймаут,
		ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

&НаКлиенте
Функция СтрокаИзСтруктурыJSON(Данные)
	
	#Если ВебКлиент Тогда
		Возврат СтрокаИзСтруктурыJSONНаСервере(Данные);
	#Иначе
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные);
		Возврат ЗаписьJSON.Закрыть();
		
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаИзСтруктурыJSONНаСервере(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные, , "ПреобразованиеЗначенийJSON", РаботаВМоделиСервисаБТС);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаКлиенте
Функция СтруктураИзСтрокиJSON(Строка)
	
	#Если ВебКлиент Тогда
		Возврат СтруктураИзСтрокиJSONНаСервере(Строка);
	#Иначе
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Строка);
		Ответ = ПрочитатьJSON(ЧтениеJSON); 
		Возврат Ответ;
		
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураИзСтрокиJSONНаСервере(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Ответ = ПрочитатьJSON(ЧтениеJSON);
	Если ТипЗнч(Ответ) = Тип("Структура")
		И Ответ.Свойство("url") Тогда
		Ответ.url = РаскодироватьСтроку(Ответ.url, СпособКодированияСтроки.URLВКодировкеURL);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьДанныеВМенеджерСервиса(ПараметрыСоединения, ДанныеЗапроса, ТипИнтерфейса, Метод) Экспорт
	
	Соединение = Неопределено;
	Если Не ПараметрыСоединения.Свойство("Соединение", Соединение) Тогда
		Соединение = Соединение(ПараметрыСоединения.Адрес);
		ПараметрыСоединения.Вставить("Соединение", Соединение);
	КонецЕсли;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыСоединения.Адрес);
	ЗапросHTTP = Новый HTTPЗапрос(СтрШаблон("%1/execute/%2/%3", СтруктураURI.ПутьНаСервере, ТипИнтерфейса, Метод));
	ЗапросHTTP.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенДоступа(ПараметрыСоединения.Аутентификация)));
	ЗапросHTTP.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаИзСтруктурыJSON(ДанныеЗапроса));
	
	Ответ = Ждать Соединение.ВызватьHTTPМетодАсинх("POST", ЗапросHTTP);
	
	Результат = Неопределено;
	Если Ответ.КодСостояния = 200 Тогда
		
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
		Результат = СтруктураИзСтрокиJSON(СтрокаОтвета);
		КодОтвета = Результат.general.response;
		Если Не (КодОтвета = 10200 Или КодОтвета = 10201 Или КодОтвета = 10202 Или КодОтвета = 10240) Тогда
			ВызватьИсключение Результат.general.message;
		КонецЕсли;
		
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка вызова программного интерфейса. Код состояния: %1'"),
			Ответ.КодСостояния);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыСоединенияМенеджераСервиса()
	
	Результат = Новый Структура;
	
	ВнешнийАдресМенеджераСервиса = ПрограммныйИнтерфейсСервиса.СвойстваВерсииИнтерфейса().ВнешнийАдресМенеджераСервиса;
	Результат.Вставить("Адрес", ВнешнийАдресМенеджераСервиса);
	Результат.Вставить("КодАбонента", ПрограммныйИнтерфейсСервиса.КодАбонента());
	Результат.Вставить("Аутентификация", Аутентификация());
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Аутентификация()
	
	СвойстваОтвета = Неопределено;
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", ПрограммныйИнтерфейсСервиса.ДействующийТокенДоступа(, , СвойстваОтвета));
	Результат.Вставить("ВремяЖизни", СвойстваОтвета.ВремяЖизни);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТокенДоступа(Аутентификация)
	
	Если Аутентификация.ВремяЖизни <= ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		Аутентификация = Аутентификация();
	КонецЕсли;
	
	Возврат Аутентификация.ТокенДоступа;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаВСервис

&НаКлиенте
Асинх Функция ИнициализироватьЗагрузкуВСервис()
	
	ПараметрыМС = ПараметрыСоединенияМенеджераСервиса();
	
	Файл = Новый Файл(ИмяФайлаНаКлиенте);
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("name", Файл.Имя);
	ДанныеЗапроса.Вставить("size", РазмерФайла);
	ДанныеЗапроса.Вставить("type", "new_data_dump");
	ДанныеЗапроса.Вставить("owner", ПараметрыМС.КодАбонента);
	РезультатЗапроса = Ждать ОтправитьДанныеВМенеджерСервиса(ПараметрыМС, ДанныеЗапроса, "srv", "files/new_multipart");
	
	Контекст.Вставить("ПараметрыМС", ПараметрыМС);
	
	ПараметрыЗагрузки = Новый Структура;
	АдресДляОтправки = РезультатЗапроса.url;
	ПараметрыЗагрузки.Вставить("ИдентификаторФайла", РезультатЗапроса.file_id);
	ПараметрыЗагрузки.Вставить("ТипАдреса", РезультатЗапроса.type);
	ПараметрыЗагрузки.Вставить("АдресДляОтправки", АдресДляОтправки);
	ПараметрыЗагрузки.Вставить("Части", Новый Массив);
	ПараметрыЗагрузки.Вставить("Соединение", Соединение(АдресДляОтправки));
	Если РезультатЗапроса.type = "s3" Тогда
		ПараметрыЗагрузки.Вставить("ЗаголовкиЗапроса", РезультатЗапроса.headers);
	КонецЕсли;
	
	Контекст.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	
КонецФункции

&НаКлиенте
Асинх Функция ОтправитьПорциюВСервис(ДвоичныеДанные, Начало, Конец)
	
	ПараметрыЗагрузки = Контекст.ПараметрыЗагрузки;
	ПараметрыМС = Контекст.ПараметрыМС;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыЗагрузки.АдресДляОтправки);
	Если ПараметрыЗагрузки.ТипАдреса = "s3" Тогда
		
		Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
		Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		Для Каждого ЗаголовокЗапроса Из ПараметрыЗагрузки.ЗаголовкиЗапроса Цикл
			КлючЗначение = СтрРазделить(ЗаголовокЗапроса, ":");
			Запрос.Заголовки.Вставить(КлючЗначение[0], КлючЗначение[1]);
		КонецЦикла;
		
		Ответ = Ждать ПараметрыЗагрузки.Соединение.ВызватьHTTPМетодАсинх("PUT", Запрос);
		Если Ответ.КодСостояния <> 200 Тогда
			
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось отправить часть файла, код ответа: %1'"), 
				Ответ.КодСостояния);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		ПараметрыЗагрузки.Части.Добавить(СтрЗаменить(ОбщегоНазначенияБТСКлиентСервер.ЗаголовокHTTP(Ответ, "ETag"), """", ""));
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("file_id", ПараметрыЗагрузки.ИдентификаторФайла);
		ДанныеЗапроса.Вставить("part_number", ПараметрыЗагрузки.Части.Количество() + 1);
		
		РезультатЗапросаНового = Ждать ОтправитьДанныеВМенеджерСервиса(ПараметрыМС, ДанныеЗапроса, "srv", "files/new_part");
		ПараметрыЗагрузки.Вставить("АдресДляОтправки", РезультатЗапросаНового.url);
		ПараметрыЗагрузки.Вставить("ЗаголовкиЗапроса", РезультатЗапросаНового.headers);
		
	Иначе
		
		Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
		Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		Запрос.Заголовки.Вставить("Content-Range",
			СтрШаблон("bytes %1-%2/%3", 
			Формат(Начало, "ЧН=0; ЧГ=0"), 
			Формат(Конец - 1, "ЧН=0; ЧГ=0"), 
			Формат(РазмерФайла - ?(Конец = РазмерФайла, 0, 0), "ЧН=0; ЧГ=0")));
		Ответ = Ждать ПараметрыЗагрузки.Соединение.ВызватьHTTPМетодАсинх("PUT", Запрос);
		Если Ответ.КодСостояния <> 201 И Ответ.КодСостояния <> 202 Тогда
			
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось отправить часть файла, код ответа: %1%2%3'"), 
				Ответ.КодСостояния, Символы.ПС, Ответ.ПолучитьТелоКакСтроку());
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Асинх Функция ЗавершитьЗагрузкуВСервис()
	
	ПараметрыЗагрузки = Контекст.ПараметрыЗагрузки;
	ПараметрыМС = Контекст.ПараметрыМС;
	Если ПараметрыЗагрузки.ТипАдреса = "s3" Тогда
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("file_id", ПараметрыЗагрузки.ИдентификаторФайла);
		ДанныеЗапроса.Вставить("parts", ПараметрыЗагрузки.Части);
		Ждать ОтправитьДанныеВМенеджерСервиса(ПараметрыМС, ДанныеЗапроса, "srv", "files/complete_multipart");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьЗагрузкуВСервис()
	
	ПараметрыЗагрузки = Контекст.ПараметрыЗагрузки;
	ПараметрыМС = Контекст.ПараметрыМС;
	
	Если ПараметрыЗагрузки.ТипАдреса = "s3" Тогда
		
		ДанныеЗапроса = Новый Структура;
		ДанныеЗапроса.Вставить("file_id", ПараметрыЗагрузки.ИдентификаторФайла);
		ОтправитьДанныеВМенеджерСервиса(ПараметрыМС, ДанныеЗапроса, "srv", "files/abort_multipart");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Асинх Функция ЗавершитьЗагрузку()
	
	Результат = Новый Структура;
	
	Если СпособПомещенияФайла = "ЗагрузкаВСервис" Тогда
		Ждать ЗавершитьЗагрузкуВСервис();
		Результат.Вставить("ИдентификаторФайла", Контекст.ПараметрыЗагрузки.ИдентификаторФайла);
	КонецЕсли;
	
	Прогресс = 100;
	Состояние(НСтр("ru = 'Файл помещен'"));
	ЗагрузкаЗавершена = Истина;
	
	Результат.Вставить("ИмяФайлаИлиАдрес", ИмяФайлаИлиАдрес);
	Результат.Вставить("ИмяФайлаНаКлиенте", ИмяФайлаНаКлиенте);
	
	Закрыть(Результат);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьЗагрузку()
	
	//@skip-check empty-except-statement
	Попытка
		
		Если СпособПомещенияФайла = "ЗагрузкаВСервис" Тогда
			ОтменитьЗагрузкуВСервис();
		Иначе
			ОтменитьЗагрузкуНаСервере();
		КонецЕсли;
	Исключение
		// При отмене загрузки не вызываем исключений, т.к. необходимо закрыть форму.
	КонецПопытки;
	
	ЗагрузкаЗавершена = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗагрузкуНаСервере()
	
	СвойстваФайла = ФайлыБТС.СвойстваФайлаВременногоХранилища(ИмяФайлаИлиАдрес);
	Если СвойстваФайла.Зарегистрирован Тогда
		ФайлыБТС.УдалитьФайлВременногоХранилища(ИмяФайлаИлиАдрес);
	Иначе
		ИмяФайлаНаСервере = ФайлыБТС.ПолноеИмяФайлаВСеансе(ИмяФайлаИлиАдрес, ПутьФайлаWindows, ПутьФайлаLinux);
		// @skip-check module-nstr-camelcase - ошибка проверки
		ИмяСобытияЖР = НСтр("ru = 'Удаление файла.Отмена загрузки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ФайлыБТС.УдалитьФайлыВПопытке(ИмяФайлаНаСервере, ИмяСобытияЖР);
	КонецЕсли;
	
КонецПроцедуры

// При ошибке.
// 
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  СтандартнаяОбработка - Булево
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПриОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	ОтменитьЗагрузку();
КонецПроцедуры

#КонецОбласти
