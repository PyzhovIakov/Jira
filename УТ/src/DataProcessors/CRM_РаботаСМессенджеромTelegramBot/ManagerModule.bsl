#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Токен = СтруктураПараметровДоступа.Токен;
	Ресурс = "/bot" + Токен + "/getUpdates";
	
	Если СтруктураПараметровДоступа.Свойство("НастройкиБота") Тогда
		МассивСтруктур =
			CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(СтруктураПараметровДоступа.НастройкиБота);
		НастройкиБота = Новый ДеревоЗначений;
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(НастройкиБота, МассивСтруктур);
		Если НастройкиБота.Строки.Количество() > 0 И (ЗначениеЗаполнено(НастройкиБота.Строки[0].Ответ)
			 ИЛИ НастройкиБота.Строки[0].Строки.Количество() > 0) Тогда
			ИспользуетсяАвтоБот = Истина;
		Иначе
			ИспользуетсяАвтоБот = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяАвтоБот = Ложь;
	КонецЕсли;

	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
		 "",
		Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси));
	
	МассивСообщений = Новый Массив;
	ПолученоПустое = Ложь;
	Пока Не ПолученоПустое Цикл
		Если НЕ СтруктураОтвета.ok Тогда
			ВызватьИсключение СтруктураОтвета.description;
		Иначе
			Если СтруктураОтвета.result.Количество() = 0 Тогда
				ПолученоПустое = Истина;
				Продолжить;
			КонецЕсли;
			Для каждого Обновление Из СтруктураОтвета.result Цикл
				Если Обновление.Свойство("message") Тогда
					user_id = Формат(Обновление.message.from.id, "ЧГ=");
					Если Обновление.message.Свойство("text") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.text, "<br>", Символы.ПС);
					ИначеЕсли Обновление.message.Свойство("caption") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.caption, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = МестноеВремя(Дата(1970, 1, 1) + Обновление.message.date);
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
						УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.message.from.first_name 
						+ ?(Обновление.message.from.Свойство("last_name"), " " + Обновление.message.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.message.message_id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = ТекстСообщения;
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					Если Обновление.message.Свойство("reply_to_message") Тогда
						Сообщение.ID_СообщенияОснования = Формат(Обновление.message.reply_to_message.message_id, "ЧГ=");
					КонецЕсли;
					Если Обновление.message.Свойство("document") Тогда
						Документ = Обновление.message.document;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot" + Токен + "/getFile?file_id=" + Документ.file_id;
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.ПараметрыПрокси <> Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.ПараметрыПрокси.Сервер,
									 СтруктураПараметровДоступа.ПараметрыПрокси.Порт,
									СтруктураПараметровДоступа.ПараметрыПрокси.Пользователь, СтруктураПараметровДоступа.ПараметрыПрокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							Соединение = Новый HTTPСоединение("api.telegram.org", , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
							Соединение.Получить("/file/bot" + Токен + "/" + ПутьКФайлу, КаталогВременныхФайлов + Документ.file_name);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + Документ.file_name);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Документ.file_name, СтрНайти(Документ.file_name, ".") - 1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Документ.file_name, СтрНайти(Документ.file_name, ".") + 1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов + Документ.file_name);
						КонецЕсли;
					КонецЕсли;
					Если Обновление.message.Свойство("photo") Тогда
						file_id = Обновление.message.photo[Обновление.message.photo.Количество() - 1].file_id;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot" + Токен + "/getFile?file_id=" + file_id;
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.ПараметрыПрокси <> Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.ПараметрыПрокси.Сервер,
									 СтруктураПараметровДоступа.ПараметрыПрокси.Порт,
									СтруктураПараметровДоступа.ПараметрыПрокси.Пользователь, СтруктураПараметровДоступа.ПараметрыПрокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;
							
							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ИмяФайла = Сред(СтруктураОтвета.result.file_path, СтрНайти(СтруктураОтвета.result.file_path, "/") + 1);
							Соединение = Новый HTTPСоединение("api.telegram.org", , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
							Соединение.Получить("/file/bot" + Токен + "/" + ПутьКФайлу, КаталогВременныхФайлов + ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
						КонецЕсли;
					КонецЕсли;
					Если Обновление.message.Свойство("video") Тогда
						ДобавитьВложениеКПолученномуСообщению(Обновление, Сообщение, Токен, СтруктураПараметровДоступа, "video");
					КонецЕсли;
					Если Обновление.message.Свойство("voice") Тогда
						ДобавитьВложениеКПолученномуСообщению(Обновление, Сообщение, Токен, СтруктураПараметровДоступа, "voice");
					КонецЕсли;
					Если Обновление.message.Свойство("audio") Тогда
						ДобавитьВложениеКПолученномуСообщению(Обновление, Сообщение, Токен, СтруктураПараметровДоступа, "audio");
					КонецЕсли;
					
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						ОбработатьДействиеБота(УчетнаяЗапись, Сообщение, НастройкиБота, МассивСообщений);
					Иначе	
						МассивСообщений.Добавить(Сообщение);
					КонецЕсли;
				ИначеЕсли Обновление.Свойство("callback_query") Тогда
					user_id = Формат(Обновление.callback_query.from.id, "ЧГ=");
					Если Обновление.callback_query.Свойство("data") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = ТекущаяДатаСеанса();
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
						УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.callback_query.from.first_name 
						+ ?(Обновление.callback_query.from.Свойство("last_name"), " " + Обновление.callback_query.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.callback_query.id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						РесурсЗагрузкиФайла = "/bot" + Токен + "/EditMessageReplyMarkup?chat_id=" 
							+ Формат(Обновление.callback_query.message.chat.id, "ЧГ=") + "&message_id=" 
								+ Формат(Обновление.callback_query.message.message_id,
								 "ЧГ=");
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						ОбработатьДействиеБота(УчетнаяЗапись, Сообщение, НастройкиБота, МассивСообщений);
					Иначе	
						МассивСообщений.Добавить(Сообщение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
			 "",
			Ресурс + "?offset=" + Формат(Обновление.update_id + 1, "ЧГ="), СтруктураПараметровДоступа.ПараметрыПрокси));
	КонецЦикла;	
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись, ОднаИтерация = Ложь) Экспорт
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Токен = СтруктураПараметровДоступа.Токен;
	Ресурс = "/bot" + Токен + "/getUpdates";
	
	Если СтруктураПараметровДоступа.Свойство("НастройкиБота") Тогда
		МассивСтруктур =
			CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(СтруктураПараметровДоступа.НастройкиБота);
		НастройкиБота = Новый ДеревоЗначений;
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(НастройкиБота, МассивСтруктур);
		Если НастройкиБота.Строки.Количество() > 0 И (ЗначениеЗаполнено(НастройкиБота.Строки[0].Ответ)
			 ИЛИ НастройкиБота.Строки[0].Строки.Количество() > 0) Тогда
			ИспользуетсяАвтоБот = Истина;
		Иначе
			ИспользуетсяАвтоБот = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяАвтоБот = Ложь;
	КонецЕсли;
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
		 "",
		Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси));
	
	Пока Истина Цикл
		Если НЕ СтруктураОтвета.ok Тогда
			ВызватьИсключение СтруктураОтвета.description;
		Иначе
			МассивСообщений = Новый Массив;
			Для каждого Обновление Из СтруктураОтвета.result Цикл
				Если Обновление.Свойство("message") Тогда
					user_id = Формат(Обновление.message.from.id, "ЧГ=");
					Если Обновление.message.Свойство("text") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.text, "<br>", Символы.ПС);
					ИначеЕсли Обновление.message.Свойство("caption") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.message.caption, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = МестноеВремя(Дата(1970, 1, 1) + Обновление.message.date);
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
						УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.message.from.first_name 
						+ ?(Обновление.message.from.Свойство("last_name"), " " + Обновление.message.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.message.message_id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = ТекстСообщения;
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					Если Обновление.message.Свойство("reply_to_message") Тогда
						Сообщение.ID_СообщенияОснования = Формат(Обновление.message.reply_to_message.message_id, "ЧГ=");
					КонецЕсли;
					Если Обновление.message.Свойство("document") Тогда
						Документ = Обновление.message.document;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot" + Токен + "/getFile?file_id=" + Документ.file_id;
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.ПараметрыПрокси <> Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.ПараметрыПрокси.Сервер,
									 СтруктураПараметровДоступа.ПараметрыПрокси.Порт,
									СтруктураПараметровДоступа.ПараметрыПрокси.Пользователь, СтруктураПараметровДоступа.ПараметрыПрокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							Соединение = Новый HTTPСоединение("api.telegram.org", , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
							Соединение.Получить("/file/bot" + Токен + "/" + ПутьКФайлу, КаталогВременныхФайлов + Документ.file_name);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу,
								// КаталогВременныхФайлов
								//+Документ.file_name);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + Документ.file_name);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(Документ.file_name, СтрНайти(Документ.file_name, ".") - 1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(Документ.file_name, СтрНайти(Документ.file_name, ".") + 1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов + Документ.file_name);
						КонецЕсли;
					КонецЕсли;
					Если Обновление.message.Свойство("photo") Тогда
						file_id = Обновление.message.photo[Обновление.message.photo.Количество() - 1].file_id;
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						РесурсЗагрузкиФайла = "/bot" + Токен + "/getFile?file_id=" + file_id;
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						Если НЕ СтруктураОтвета.ok Тогда
							ВызватьИсключение СтруктураОтвета.description;
						Иначе
							Если СтруктураПараметровДоступа.ПараметрыПрокси <> Неопределено Тогда
								HTTPПрокси = Новый ИнтернетПрокси;	
								HTTPПрокси.Установить("https", СтруктураПараметровДоступа.ПараметрыПрокси.Сервер,
									 СтруктураПараметровДоступа.ПараметрыПрокси.Порт,
									СтруктураПараметровДоступа.ПараметрыПрокси.Пользователь, СтруктураПараметровДоступа.ПараметрыПрокси.Пароль, Ложь); 
							Иначе
								HTTPПрокси = Неопределено;
							КонецЕсли;

							ПутьКФайлу = СтруктураОтвета.result.file_path;
							ИмяФайла = Сред(СтруктураОтвета.result.file_path, СтрНайти(СтруктураОтвета.result.file_path, "/") + 1);
							Соединение = Новый HTTPСоединение("api.telegram.org", , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
							Соединение.Получить("/file/bot" + Токен + "/" + ПутьКФайлу, КаталогВременныхФайлов + ИмяФайла);
							//КопироватьФайл("https://api.telegram.org/file/bot"+Токен+"/"+ПутьКФайлу, КаталогВременныхФайлов+ИмяФайла);
							Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
							АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
							ПараметрыФайла = Новый Структура;
							ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
							ПараметрыФайла.Вставить("Автор", Неопределено);
							ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
							ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
							ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
							ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
							Сообщение.Вложения.Добавить(ПараметрыФайла);
							УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
						КонецЕсли;
					КонецЕсли;
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						ОбработатьДействиеБота(УчетнаяЗапись, Сообщение, НастройкиБота, МассивСообщений);
					Иначе
						МассивСообщений.Добавить(Сообщение);
					КонецЕсли;
				ИначеЕсли Обновление.Свойство("callback_query") Тогда
					user_id = Формат(Обновление.callback_query.from.id, "ЧГ=");
					Если Обновление.callback_query.Свойство("data") Тогда
						ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Дата = ТекущаяДатаСеанса();
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации(ПредставлениеКонтактнойИнформацииПользователя(user_id),
						УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					ИмяПользователя = Обновление.callback_query.from.first_name 
						+ ?(Обновление.callback_query.from.Свойство("last_name"), " " + Обновление.callback_query.from.last_name, "");
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = Формат(Обновление.callback_query.id, "ЧГ=");
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						Сообщение.ТекстСообщения = СтрЗаменить(Обновление.callback_query.data, "<br>", Символы.ПС);
					КонецЕсли;
					Сообщение.ВидСообщения = "Входящее";
					Сообщение.ID_Пользователя = user_id;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ИмяПользователя;
					Если ИспользуетсяАвтоБот И ЗначениеЗаполнено(ТекстСообщения) Тогда
						РесурсЗагрузкиФайла = "/bot" + Токен + "/EditMessageReplyMarkup?chat_id=" 
							+ Формат(Обновление.callback_query.message.chat.id, "ЧГ=") + "&message_id=" 
								+ Формат(Обновление.callback_query.message.message_id,
								 "ЧГ=");
						СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
							 "",
							РесурсЗагрузкиФайла, СтруктураПараметровДоступа.ПараметрыПрокси));
						ОбработатьДействиеБота(УчетнаяЗапись, Сообщение, НастройкиБота, МассивСообщений);
					Иначе	
						МассивСообщений.Добавить(Сообщение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивСообщений);
		КонецЕсли;
		
		Если ОднаИтерация Тогда
			Прервать;
		КонецЕсли;
		
		Если СтруктураОтвета.result.Количество() > 0 Тогда
			Оффсет = "&offset=" + Формат(Обновление.update_id + 1, "ЧГ=");
		Иначе
			Оффсет = "";
		КонецЕсли;
		
		СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
			 "",
			Ресурс + "?timeout=20" + Оффсет, СтруктураПараметровДоступа.ПараметрыПрокси));
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "Telegram";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://t.me/";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат Неопределено;
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат НачалоАдресаСтраницыПользователя() + ID_Пользователя;
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Истина; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Истина; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Возврат Неопределено; 
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт
	
КонецПроцедуры

Функция ПользовательДоступен(УчетнаяЗапись, ДополнительныеДанные) Экспорт
	
	Возврат Новый Структура("Доступен, Описание", Ложь, "");
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
	ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ДанныеБотаTelegram(Токен, Прокси) Экспорт
	Ресурс = "/bot" + Токен + "/getMe";
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org",
		 "", Ресурс,
		 Прокси));
	Если НЕ СтруктураОтвета.ok Тогда
		ВызватьИсключение СтруктураОтвета.description;
	Иначе
		СтруктураРезультата = Новый Структура("Наименование, ИмяПользователя, id");
		СтруктураРезультата.Наименование = СтруктураОтвета.result.first_name;
		СтруктураРезультата.ИмяПользователя = СтруктураОтвета.result.username;
		СтруктураРезультата.id = СтруктураОтвета.result.id;
		Возврат СтруктураРезультата;
	КонецЕсли;
КонецФункции

Процедура ОбработатьДействиеБота(УчетнаяЗапись, Сообщение, НастройкиБота, МассивСообщений)
		
	Строка = НастройкиБота.Строки.Найти(Сообщение.ТекстСообщения, "callback_data", Истина);
	Если Строка <> Неопределено Тогда
		МассивИзОдногоСообщения = Новый Массив;
		МассивИзОдногоСообщения.Добавить(Сообщение);
		CRM_РаботаСМессенджерамиСервер.СоздатьСообщенияИзПолученныхДанных(УчетнаяЗапись, МассивИзОдногоСообщения);
		
		ТекстОтвета = Строка.Ответ;
		МассивКнопок = СтрокиДереваЗначенийВМассивСтруктур(Строка.Строки, "text, callback_data");
		КлавиатураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(Новый Структура("inline_keyboard",
			 МассивКнопок),
			 Истина);	
		ДопПараметры = Новый Структура("reply_markup", КлавиатураОтвета);
		CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(ТекстОтвета, МассивИзОдногоСообщения[0].Диалог, , , ДопПараметры);
	Иначе
		МассивСообщений.Добавить(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиДереваЗначенийВМассивСтруктур(Строки, ИменаКолонок = "")
	Результат = Новый Массив;
	
	Для Каждого Строка Из Строки Цикл
		МассивКнопок = Новый Массив;
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		МассивКнопок.Добавить(СтруктураСтроки);
		Результат.Добавить(МассивКнопок);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДеревоЗначенийИзМассиваСтруктур(Дерево, МассивСтруктур) 
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда 
		СтруктураКолонок = МассивСтруктур[0];
		Для Каждого Поле Из СтруктураКолонок Цикл
			Если Поле.Ключ = "Строки" Тогда
				Продолжить;
			КонецЕсли;
			Если Дерево.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
				Дерево.Колонки.Добавить(Поле.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Для Каждого Строка Из МассивСтруктур Цикл
		СтрокаДЗ = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДЗ, Строка);
		ЗаполнитьДеревоЗначенийИзМассиваСтруктур(СтрокаДЗ, Строка.Строки);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВложениеКПолученномуСообщению(Обновление, Сообщение, Токен, СтруктураПараметровДоступа, ТипСообщения)
	
	file_id = Обновление.message[ТипСообщения].file_id;
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	РесурсЗагрузкиФайла = "/bot" + Токен + "/getFile?file_id=" + file_id;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("api.telegram.org", "", РесурсЗагрузкиФайла,
			СтруктураПараметровДоступа.ПараметрыПрокси));
	Если НЕ СтруктураОтвета.ok Тогда
		ВызватьИсключение СтруктураОтвета.description;
	Иначе
		Если СтруктураПараметровДоступа.ПараметрыПрокси <> Неопределено Тогда
			HTTPПрокси = Новый ИнтернетПрокси;	
			HTTPПрокси.Установить("https", СтруктураПараметровДоступа.ПараметрыПрокси.Сервер,
			СтруктураПараметровДоступа.ПараметрыПрокси.Порт,
			СтруктураПараметровДоступа.ПараметрыПрокси.Пользователь, СтруктураПараметровДоступа.ПараметрыПрокси.Пароль, Ложь); 
		Иначе
			HTTPПрокси = Неопределено;
		КонецЕсли;
		
		ПутьКФайлу = СтруктураОтвета.result.file_path;
		ИмяФайла = Сред(СтруктураОтвета.result.file_path, СтрНайти(СтруктураОтвета.result.file_path, "/") + 1);
		Соединение = Новый HTTPСоединение("api.telegram.org", , , , HTTPПрокси, 20, Новый ЗащищенноеСоединениеOpenSSL);
		Соединение.Получить("/file/bot" + Токен + "/" + ПутьКФайлу, КаталогВременныхФайлов + ИмяФайла);
		Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
		ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
		Сообщение.Вложения.Добавить(ПараметрыФайла);
		УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВложениеКПолученномуСообщению()

#КонецОбласти

#Область ОбновлениеПрограммы

Процедура ЗаменитьТипМессенджера() Экспорт

	СтарыйТип = "Telegram";
	НовыйТип = "TelegramBot";
	
	// Проверим выполнялась ли замена ранее
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера КАК ТипМессенджера
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_ВидыКонтактнойИнформацииМессенджеров.ТипМессенджера
	                      |ИЗ
	                      |	РегистрСведений.CRM_ВидыКонтактнойИнформацииМессенджеров КАК CRM_ВидыКонтактнойИнформацииМессенджеров
	                      |ГДЕ
	                      |	CRM_ВидыКонтактнойИнформацииМессенджеров.ТипМессенджера = &ТипМессенджера");
	
	Запрос.УстановитьПараметр("ТипМессенджера", НовыйТип);
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |ГДЕ
	                      |	CRM_УчетныеЗаписиМессенджеров.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("ТипМессенджера", СтарыйТип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УЗО = Выборка.Ссылка.ПолучитьОбъект();
		УЗО.ТипМессенджера = НовыйТип;
		УЗО.Записать();
	КонецЦикла;
	
	МЗ = РегистрыСведений.CRM_ВидыКонтактнойИнформацииМессенджеров.СоздатьМенеджерЗаписи();
	МЗ.ТипМессенджера = СтарыйТип;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		МЗ.ТипМессенджера = НовыйТип;
		МЗ.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
