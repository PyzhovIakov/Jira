
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	Элементы.ГруппаОчисткаВложений.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Если НЕ ЭтоРазделенныйРежимРаботы Тогда
		Элементы.CRM_РасписаниеОчистки.Заголовок = ТекущееРасписание();
	КонецЕсли;
	
	Если Не ЭтоРазделенныйРежимРаботы Тогда
		ЗащищенныйОбъект = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку();
		ЗащищенныйОбъект.ПанельАдминистрированияCRM_ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	НастройкиБазыЗаний = Константы.CRM_НастройкиБазыЗнаний.Получить().Получить();
	Если НастройкиБазыЗаний <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиБазыЗаний);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_РольОтветственного) Тогда
		РолеваяАдресация = 1;
	КонецЕсли;
	Элементы.ОтветственныйЗаОбработкуБазыЗнаний.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	
	ШрифтПисьмаПоУмолчанию = Константы.CRM_ШрифтПисьмаПоУмолчанию.ПолучитьШрифт();
	
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	
	ОтключениеСтатусовОтветовБазыЗнанийПриИзмененииНаСервере();
	
	ОтключениеВидимостиНастроекБазыЗнанийНаСервере();
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // Такие событие не обрабатываются.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

#Область БазаЗнаний

&НаКлиенте
Процедура CRM_ИспользоватьБазуЗнанийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОтключениеВидимостиНастроекБазыЗнанийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтключениеСтатусовОтветовБазыЗнанийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОтключениеСтатусовОтветовБазыЗнанийПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтключениеСтатусовОтветовБазыЗнанийПриИзмененииНаСервере()
	
	СостояниеДоступно = Не Константы.CRM_ИспользоватьСтатусыОтветовБазыЗнаний.Получить();
	Элементы.ГруппаНастройкиРаботыСБазойЗнаний1.Видимость = Не СостояниеДоступно;
	Элементы.ГруппаОтветственный.Видимость = Не СостояниеДоступно;
	Элементы.ДекорацияОписаниеНастройкиОтветственный.Видимость = Не СостояниеДоступно;
	
КонецПроцедуры

&НаСервере
Процедура ОтключениеВидимостиНастроекБазыЗнанийНаСервере()
	
	CRM_ИспользоватьБазуЗнанийНастройка = Не Константы.CRM_ИспользоватьБазуЗнаний.Получить();
	Элементы.ГруппаНастройкиРаботыСБазойЗнанийОбщая.Видимость = Не CRM_ИспользоватьБазуЗнанийНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждатьОтветСразуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтключениеВариантовОтветовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_Ответственный(Команда)
	
	РолеваяАдресация = 0;
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	
	РолеваяАдресацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_Роль(Команда)
	
	РолеваяАдресация = 1;
	CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере();
	
	РолеваяАдресацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура CRM_ПокраситьКнопкиРолеваяАдресацияНаСервере()
	
	НомерКнопки = 1;
	
	Если РолеваяАдресация = 0 Тогда
		НомерКнопки = 1;
	ИначеЕсли РолеваяАдресация = 1 Тогда
		НомерКнопки = 2;
	КонецЕсли;
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_Ответственный";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "CRM_Роль";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(НомерКнопки = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	CRM_ОбщегоНазначенияСервер.ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура РолеваяАдресацияПриИзмененииСервер()
	Элементы.ОтветственныйЗаОбработкуБазыЗнаний.Видимость = НЕ РолеваяАдресация;
	Элементы.CRM_РольОтветственного.Видимость = РолеваяАдресация;
	Если РолеваяАдресация = 0 Тогда
		CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка();
	Иначе
		CRM_Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиБазыЗнаний()
	
	НастройкиСозданияКлиентов = Новый Структура;
	НастройкиСозданияКлиентов.Вставить("CRM_Ответственный", CRM_Ответственный);
	НастройкиСозданияКлиентов.Вставить("CRM_РольОтветственного", CRM_РольОтветственного);
	Константы.CRM_НастройкиБазыЗнаний.Установить(Новый ХранилищеЗначения(НастройкиСозданияКлиентов));
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_РольОтветственногоПриИзменении(Элемент)
	ЗаписатьНастройкиБазыЗнаний();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаОбработкуБазыЗнанийПриИзменении(Элемент)
	ЗаписатьНастройкиБазыЗнаний();
КонецПроцедуры

#КонецОбласти // База знаний

#Область Взаимодействия

&НаКлиенте
Процедура ОткрытьВидыВзаимодействий(Команда)
	ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКатегорииВзаимодействийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВидВзаимодействияПоУмолчаниюПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ВидВзаимодействияПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
	ПараметрыФормы			= Новый Структура;
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("ВидДела", ПредопределенноеЗначение("Справочник.CRM_ВидыДелВзаимодействий.ПрочиеДокументы"));
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаВыбора", ПараметрыФормы, Элемент, ,
		 ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТегиДляВзаимодействийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЦветСобытияВКалендареПоУмолчаниюНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеНовое = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТекущийЦвет", НаборКонстант.CRM_ЦветСобытияВКалендареПоУмолчанию);
	ФормаВыбораЦвета = ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыбораЦвета", ПараметрыФормы, Элемент, , , ,
		ОповещениеНовое, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "ЦветСобытияВКалендареПоУмолчаниюНажатие"
//
Процедура ЦветНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) И НЕ (Результат = КодВозвратаДиалога.Отмена) Тогда
		НаборКонстант.CRM_ЦветСобытияВКалендареПоУмолчанию = Результат[0].Картинка;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ЦветСобытияВКалендареПоУмолчанию);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьШаблоныЧекЛистов(Команда)
	ОткрытьФорму("Справочник.CRM_ШаблоныЧекЛистаВзаимодействий.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // Взаимодействия

#Область Почта

&НаКлиенте
Процедура CRM_ОчищатьВложенияЭлектронныхПисемПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	Если НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем
		И НаборКонстант.CRM_ПериодОчисткиВложенийЭлектронныхПисем = 0 Тогда
		НаборКонстант.CRM_ПериодОчисткиВложенийЭлектронныхПисем = 180;
		Подключаемый_ПриИзмененииРеквизита(Элементы.CRM_ПериодОчисткиВложенийЭлектронныхПисем, Ложь);
	КонецЕсли;
	УстановитьПараметрРегламентногоЗадания("CRM_ОчисткаВложенийЭлектронныхПисем", 
		"Использование", НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОчищатьТолькоВложенияВходящихПисемПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПериодОчисткиВложенийЭлектронныхПисемПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастроитьРасписаниеОчистки(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущееРасписание());
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_НастроитьРасписаниеОчисткиЗавершение", ЭтотОбъект);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_НастроитьРасписаниеОчисткиЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрРегламентногоЗадания("CRM_ОчисткаВложенийЭлектронныхПисем", "Расписание", Расписание);
	Элементы.CRM_РасписаниеОчистки.Заголовок = Расписание;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьОтображениеНебезопасногоСодержимогоВПисьмахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаСервере
Функция ТекущееРасписание()
	Возврат ПолучитьПараметрРегламентногоЗадания("Расписание", Новый РасписаниеРегламентногоЗадания);
КонецФункции

&НаСервере
Процедура УстановитьПараметрРегламентногоЗадания(ИмяРегламентногоЗадания, ИмяПараметра, ЗначениеПараметра)
	
	РегламентноеЗаданиеМетаданные = Метаданные.РегламентныеЗадания.Найти(ИмяРегламентногоЗадания);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗаданиеМетаданные);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", РегламентноеЗаданиеМетаданные.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяПараметра, ЗначениеПоУмолчанию)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_ОчисткаВложенийЭлектронныхПисем);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.CRM_ОчисткаВложенийЭлектронныхПисем.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Для Каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяПараметра];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура CRM_ИспользоватьПотокиДоставкиЭлектроннойПочтыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПотокиДоставки(Команда)
	ОткрытьФорму("РегистрСведений.CRM_ПотокиДоставкиПочты.Форма.НастройкаПотоков", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ШрифтПисьмаПоУмолчаниюПриИзменении(Элемент)
	
	ШрифтПисьмаПоУмолчаниюПриИзмененииНаСервере(ШрифтПисьмаПоУмолчанию);
	
КонецПроцедуры // ШрифтПисьмаПоУмолчаниюПриИзменении()

&НаКлиенте
Процедура ШрифтПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ШрифтПисьмаПоУмолчанию = Новый Шрифт("Times New Roman", 12);
	ШрифтПисьмаПоУмолчаниюПриИзмененииНаСервере(ШрифтПисьмаПоУмолчанию);
	
КонецПроцедуры // ШрифтПоУмолчаниюОчистка()

&НаСервереБезКонтекста
Процедура ШрифтПисьмаПоУмолчаниюПриИзмененииНаСервере(УстанавливаемыйШрифт)
	
	Константы.CRM_ШрифтПисьмаПоУмолчанию.УстановитьШрифтВКонстанту(УстанавливаемыйШрифт);
	
КонецПроцедуры // ШрифтПисьмаПоУмолчаниюПриИзмененииНаСервере()

#КонецОбласти // Почта

#Область Задачи

&НаКлиенте
Процедура НастроитьУсловияВажностиИСрочностиЗадач(Команда)
	ОткрытьФорму("РегистрСведений.CRM_НастройкиРаспределенияЗадач.Форма.ФормаНастроек");
КонецПроцедуры

&НаКлиенте
Процедура CRM_РассчитыватьВажностьИСрочностьЗадачПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	УстановитьПараметрРегламентногоЗадания("CRM_РасчетВажностиИСрочностиЗадач",
		"Использование", НаборКонстант.CRM_РассчитыватьВажностьИСрочностьЗадачАвтоматически);
КонецПроцедуры

#КонецОбласти // Задачи

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")

	Если (РеквизитПутьКДанным = "НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем" Или РеквизитПутьКДанным = "") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "CRM_ОчищатьТолькоВложенияВходящихПисем",
			"Видимость", НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "CRM_ПериодОчисткиВложенийЭлектронныхПисем",
			"Видимость", НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "CRM_НастроитьРасписаниеОчистки",
			"Видимость", НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "CRM_РасписаниеОчистки",
			"Видимость", НаборКонстант.CRM_ОчищатьВложенияЭлектронныхПисем);
		
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты"
		 Или РеквизитПутьКДанным = "") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьПотокиДоставки",
			"Видимость", НаборКонстант.CRM_ИспользоватьПотокиДоставкиЭлектроннойПочты);
		
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.CRM_РассчитыватьВажностьИСрочностьЗадачАвтоматически"
		 Или РеквизитПутьКДанным = "") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "НастроитьУсловияВажностиИСрочностиЗадач",
			"Видимость", НаборКонстант.CRM_РассчитыватьВажностьИСрочностьЗадачАвтоматически);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ЦветСобытияВКалендареПоУмолчанию",
			"Доступность", ПравоДоступа("Изменение", Метаданные.Константы.CRM_ЦветСобытияВКалендареПоУмолчанию));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
