
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму настройки'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗащищенныйОбъект = CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку();
	ЗащищенныйОбъект.ПанельАдминистрированияCRM_ПриСозданииНаСервере(ЭтотОбъект);

	ВариантПоставкиПользователяКОРП = CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиКОРП();
	ВариантПоставкиСтартИлиСтандарт = CRM_ЛицензированиеЭкспортныеМетоды.ВариантПоставкиСтартИлиСтандарт();
	
	Элементы.CRM_ИспользоватьОбменСOutlook.Доступность	  = ВариантПоставкиПользователяКОРП;
	Элементы.CRM_ИспользоватьОбменСMSExchange.Доступность = ВариантПоставкиПользователяКОРП;
	Если Не ВариантПоставкиПользователяКОРП Тогда
		Элементы.CRM_ИспользоватьОбменСMSExchange.РасширеннаяПодсказка.Заголовок =
			Элементы.CRM_ИспользоватьОбменСMSExchange.РасширеннаяПодсказка.Заголовок  + Символы.ПС
			+ НСтр("ru='Доступно только для ""КОРП"" версии конфигурации!';
				   |en='Available only for ""CORP"" configuration version!'");
	КонецЕсли;
	
	Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Доступность = ВариантПоставкиПользователяКОРП;
	
	Элементы.CRM_ИспользоватьСервисРаспознаванияЛиц.Доступность = Не ВариантПоставкиСтартИлиСтандарт;
	Элементы.CRM_ОбновлятьФото.Видимость = Не ВариантПоставкиСтартИлиСтандарт;
	Элементы.СправочникCRM_КамерыКамеры.Видимость = Не ВариантПоставкиСтартИлиСтандарт;
	Элементы.СправочникCRM_УчетныеЗаписиСервисаИдентификацииУчетныеЗаписиСервисаИдентификации.Видимость = 
		Не ВариантПоставкиСтартИлиСтандарт;
	
	Если ВариантПоставкиСтартИлиСтандарт Тогда
		Элементы.ДекорацияРаспознавание.Заголовок =
			Элементы.ДекорацияРаспознавание.Заголовок + Символы.ПС
			+ НСтр("ru='Доступно только для ""ПРОФ"" и ""КОРП"" версий конфигурации!';
				   |en='Is only available for ""PROF"" and ""CORP"" configurations versions!'");
	КонецЕсли;
	
	УстановитьДоступностьИВидимость();
	
	Если НаборКонстант.CRM_АдресПубликацииiCRM = "" Тогда
		Элементы.ГруппаПубликацияМобильного.Видимость = Истина;
		Элементы.CRM_АдресПубликацииiCRM.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаНстройкиОграниченияВыгрузки.Видимость = Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ДействияПриЗакрытииНаСервере();
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // Такие событие не обрабатываются.
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Серверный обработчик события формы "ПриЗакрытии".
//
Процедура ДействияПриЗакрытииНаСервере()
	// Если отключен обмен с MS Exchange - проверяем, используется ли регламентное задание, если да - отключаем его.
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		Если Не Константы.CRM_ИспользоватьОбменСMSExchange.Получить() Тогда
			Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
			Если Задание.Использование Тогда
				Задание.Использование = Ложь;
				Задание.Записать();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИспользоватьОбменСMSExchange = Константы.CRM_ИспользоватьОбменСMSExchange.Получить();
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания["CRM_ОбменДаннымиСMSExchange"].ИмяМетода);
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
		
		Для Каждого Задание Из СписокЗаданий Цикл
			
			ПараметрыЗадания = Новый Структура("Использование", ИспользоватьОбменСMSExchange);
			
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПриложения(Результат, ДопПараметры) Экспорт
	// Процедура заглушка, т.к. НачатьЗапускПриложения требуется наличие обработчика оповещения.
КонецПроцедуры

#КонецОбласти // Клиент

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступностьИВидимость(РеквизитПутьКДанным);
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьОбменB2BПортал" Тогда
		Если НаборКонстант.CRM_ИспользоватьОбменB2BПортал Тогда
			CRM_ОбменB2BПортал.ДействияПриВключенииОбмена();
		Иначе
			CRM_ОбменB2BПортал.ДействияПриВыключенииОбмена();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти // ВызовСервера

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИВидимость(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьОбменСMSExchange" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Видимость = НаборКонстант.CRM_ИспользоватьОбменСMSExchange;
	КонецЕсли;
	
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	ЭтоПлатныйТариф = Константы.CRM_ПлатныйТарифДоступен.Получить();
	
	Элементы.ГруппаМобильныйСРМ.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаГруппаОбменCMSExchange.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаМодульТоргов.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	Элементы.ГруппаИнтеграцияСИнтернетМагазинами.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	
	Если ЭтоРазделенныйРежимРаботы Тогда
		Элементы.ГруппаРаспознаваниеЛиц.Видимость = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ДекорацияУчетныеЗаписиМессенджеров.Видимость = НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграцииСИнтернетМагазинами"
		 ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ДекорацияИнтеграцииСИнтернетМагазинами.Видимость =
			НаборКонстант.CRM_ИспользоватьИнтеграцииСИнтернетМагазинами;
	КонецЕсли;
	
	Элементы.МоделиМашинногоОбучения.Видимость = НЕ ЭтоРазделенныйРежимРаботы;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьМоделиМашинногоОбучения" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкаМоделей.Видимость = НаборКонстант.CRM_ИспользоватьМоделиМашинногоОбучения;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.АКАМ_ИспользоватьМодульТоргов" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.СформироватьПисьмо.Видимость = НаборКонстант.АКАМ_ИспользоватьМодульТоргов;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользуетсяОбменСiCRM" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаНастройкиСинхронизацииiCRM.Видимость = НаборКонстант.CRM_ИспользуетсяОбменСiCRM;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьОбменB2BПортал" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкаОбменаCB2Bпорталом.Видимость = НаборКонстант.CRM_ИспользоватьОбменB2BПортал;
	КонецЕсли;

	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьСервисыЯзыковыхМоделей" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаЯзыковыеМоделиКоманды.Видимость = НаборКонстант.CRM_ИспользоватьСервисыЯзыковыхМоделей;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Сервер

#Область НастройкиОбменаСOutlook

&НаКлиенте
Процедура CRM_ИспользоватьОбменСOutlookПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // НастройкиОбменаСOutlook

#Область НастройкиОбменаСMSExchange

&НаКлиенте
Процедура CRM_ИспользоватьОбменСMSExchangeПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСерверыMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_СерверыMSExchange.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиПользователейMSExchange.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодключенияКMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ПодключенияКMSExchange.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиОбменаСMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_НастройкиОбменаСMSExchange.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
	Возврат Задание.УникальныйИдентификатор;
КонецФункции

&НаКлиенте
Процедура ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchangeНажатие(Элемент)
	ИдентификаторРегламентногоЗадания = ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",	ИдентификаторРегламентногоЗадания);
	ПараметрыФормы.Вставить("Действие",			"Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, , ,
		 , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеExchange(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияMSExchange"));

КонецПроцедуры

#КонецОбласти // НастройкиОбменаСMSExchange

#Область НастройкиРаботы_iCRM

&НаКлиенте
Процедура CRM_ИспользоватьМобильныйКлиентCRMПриИзменении(Элемент)
	
	CRM_АвтоматическаяСинхронизация_iCRM = НаборКонстант.CRM_ИспользуетсяОбменСiCRM;
	Если CRM_ОбщегоНазначенияСервер.РаботаВМоделиСервисаНЕРазделенныйСеанс() Тогда
		CRM_СинхронизацияСiCRMНовый.УстановитьРежимАвтоматическойСинхронизации(CRM_АвтоматическаяСинхронизация_iCRM);
	КонецЕсли;	
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	CRM_ИспользоватьМобильныйКлиентCRMПриИзмененииНаСервере();
	Если НаборКонстант.CRM_ИспользуетсяОбменСiCRM Тогда
		НаборКонстант.CRM_ПользовательСинхронизацииiCRM = "iCRMExchange";
		Подключаемый_ПриИзмененииРеквизита(Элементы.CRM_ПользовательСинхронизацииiCRM);
		НаборКонстант.CRM_ПарольПользователяСинхронизацииiCRM = "I23cR34_m45";
		Подключаемый_ПриИзмененииРеквизита(Элементы.CRM_ПарольПользователяСинхронизацииiCRM);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура CRM_ИспользоватьМобильныйКлиентCRMПриИзмененииНаСервере()
	Если НЕ Константы.CRM_ИспользуетсяОбменСiCRM.Получить() Тогда 
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.CRM_СинхронизацияС_iCRM);
	Иначе
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.CRM_СинхронизацияС_iCRM);
		ПараметрыЗадания.Вставить("Использование", Истина);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		CRM_СинхронизацияСiCRMНовый.СоздатьИзменитьСлужебногоПользователяiCRM();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеiCRM(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияIcrm"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПродолжение(Результат, ДопПараметры) Экспорт
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцияIcrm"));
КонецПроцедуры

&НаКлиенте
Процедура CRM_МаксимальныйПериодБезСинхронизацииiCRMПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуНастроекЛицензированияiCRMНажатие(Элемент)
	ОткрытьФорму("Обработка.CRM_НастройкаСинхронизацииПользователейiCRM.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура CRM_АдресПубликацииiCRMПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_АдресПубликацииiCRMНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.ГруппаПубликацияМобильного.Видимость = Истина;
	Элементы.CRM_АдресПубликацииiCRM.Видимость = Ложь;
КонецПроцедуры

#КонецОбласти // НастройкиРаботы_iCRM

#Область НастройкиСинхронизацииКалендарей

&НаСервереБезКонтекста
Процедура СервисыКалендарейПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = CRM_СинхронизацияКалендарей.КартинкаСервисаКалендарей(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // НастройкиСинхронизацииКалендарей

#Область ИнтеграцияСМессенджерами

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиМессенджеровНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграциюСМессенджерамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	CRM_РаботаСМессенджерамиСервер.ИзменитьИспользованиеЗаданияОтправкиОтложенныхСообщений(
		НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами);
	
КонецПроцедуры // CRM_ИспользоватьИнтеграциюСМессенджерамиПриИзменении()

&НаКлиенте
Процедура ИнтеграцияСМессенджерами(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМДиалоги"));
	
КонецПроцедуры

#КонецОбласти // ИнтеграцияСМессенджерами

#Область ИнтеграцияСИнтернетМагазинами

&НаКлиенте
Процедура ДекорацияИнтеграцииСИнтернетМагазинамиНажатие(Элемент)
	ОткрытьФорму("ПланОбмена.CRM_ИнтеграцииСИнтернетМагазинами.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграцииСИнтернетМагазинамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцииСИнтернетМагазинами(Команда)
	
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("ИнтеграцииСИнтернетМагазинами"));
	
КонецПроцедуры

#КонецОбласти // ИнтеграцияСИнтернетМагазинами

#Область РаспознованиеЛиц

&НаКлиенте
Процедура CRM_ИспользоватьСервисРаспознаванияЛицПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОбновлятьФотоПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // РаспознованиеЛиц

#Область АКАМТорги

&НаКлиенте
Процедура СформироватьПисьмоНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.АКАМ_СформироватьПисьмо");
КонецПроцедуры

&НаКлиенте
Процедура АКАМ_ИспользоватьМодульТорговПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеТорги(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("Торги"));
КонецПроцедуры

&НаКлиенте
Процедура ИмяПубликацииМобильногоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИмяПубликацииМобильного = Элемент.ТекстРедактирования;
	
	Если ЗначениеЗаполнено(АдресСервераПубликацииМобильного) И ЗначениеЗаполнено(ИмяПубликацииМобильного) Тогда
	   	Элементы.ГруппаПубликацияМобильного.Видимость = Ложь;
		Элементы.CRM_АдресПубликацииiCRM.Видимость = Истина;
		НаборКонстант.CRM_АдресПубликацииiCRM = АдресСервераПубликацииМобильного + "/" 
			+ ИмяПубликацииМобильного 
			+ "/ws/CRM_MobileAppExchange?wsdl";
		Подключаемый_ПриИзмененииРеквизита(Элементы.CRM_АдресПубликацииiCRM);
	ИначеЕсли НЕ ЗначениеЗаполнено(АдресСервераПубликацииМобильного) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указан адрес сервера публикации";
		Сообщение.Поле = "АдресСервераПубликацииМобильного";
		Сообщение.Сообщить();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяПубликацииМобильного) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указано имя публикации";
		Сообщение.Поле = "ИмяПубликацииМобильного";
		Сообщение.Сообщить();	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // АКАМТорги

#Область МоделиМашинногоОбучения

&НаКлиенте
Процедура ИспользоватьМоделиМашинногоОбученияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМоделей(Команда)
	CRM_МоделиМашинногоОбученияКлиент.ОткрытьНастройкиМоделей();
КонецПроцедуры

&НаСервере
Процедура CRM_iCRMИспользоватьОграниченияВыгрузкиПриИзмененииНаСервере()
	Элементы.ГруппаНстройкиОграниченияВыгрузки.Видимость = Константы.CRM_iCRMИспользоватьОграниченияВыгрузки.Получить();
КонецПроцедуры

&НаКлиенте
Процедура CRM_iCRMИспользоватьОграниченияВыгрузкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	CRM_iCRMИспользоватьОграниченияВыгрузкиПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти // МоделиМашинногоОбучения

#Область B2BПортал

&НаКлиенте
Процедура CRM_ИспользоватьОбменB2BПорталПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбменаCB2Bпорталом(Команда)
	
	ОткрытьФорму("РегистрСведений.CRM_НастройкиОбменаСB2BПорталом.Форма.Настройка");
	
КонецПроцедуры

#КонецОбласти // B2BПортал


#Область ЯзыковыеМодели

&НаКлиенте
Процедура CRM_ИспользоватьСервисыЯзыковыхМоделейПриИзменении(Элемент)
	Если НаборКонстант.CRM_ИспользоватьСервисыЯзыковыхМоделей Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОповещениеПродолжения = Новый ОписаниеОповещения("ЯМ_ПродолжитьПослеВопроса", ЭтотОбъект,
			ДополнительныеПараметры);
		ТекстВопроса = 
			CRM_РаботаСЯзыковымиМоделямиВызовСервера.ТекстПредупреждения("ПредупреждениеПередВключениемАссистента");
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", "Продолжить", Истина);
		Кнопки.Добавить("Отмена", "Отмена", Ложь);
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("ТекстHTML", ТекстВопроса);
		ПараметрыВопроса.Вставить("Заголовок",НСтр("ru = 'Использование языковых моделей'"));
		ПараметрыВопроса.Вставить("Кнопки", Кнопки);
		ПараметрыВопроса.Вставить("Размер", Новый Структура("Высота, Ширина", 30, 80));
		
		ОткрытьФорму("ОбщаяФорма.CRM_ВыводHTMLДокумента", ПараметрыВопроса, , , , ,
			ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЯМ_ПродолжитьПослеВопроса(Ответ, ДопПараметры) Экспорт
	Если Ответ <> Неопределено И Ответ = "Продолжить" Тогда
		Подключаемый_ПриИзмененииРеквизита(ДопПараметры.Элемент);
	Иначе
		НаборКонстант.CRM_ИспользоватьСервисыЯзыковыхМоделей = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисыЯзыковыхМоделейНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_СервисыЯзыковыхМоделей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДействияЯзыковыхМоделейНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ДействияЯзыковыхМоделей.ФормаСписка");
КонецПроцедуры

#КонецОбласти // ЯзыковыеМодели

#КонецОбласти // СлужебныеПроцедурыИФункции
