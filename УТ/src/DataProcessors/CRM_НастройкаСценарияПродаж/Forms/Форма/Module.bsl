
#Область ОписаниеПеременных

&НаКлиенте
Перем ПеретаскиваемыйРеквизит, УстанавливаемыйТекущийЭлемент, КопированиеТриггера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПоддержка = Ложь;
	Если Параметры.Свойство("ЭтоПоддержка") Тогда
		ЭтоПоддержка = Параметры.ЭтоПоддержка;
	КонецЕсли;
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьЗаявки");
	ИспользоватьМессенджеры = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьИнтеграциюСМессенджерами");
	
	ИдентификаторМетаданныхИнтерес = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.CRM_Интерес);
	СписокСценариев = ПолучитьСписокСценариев();
	СформироватьМенюСценариев(СписокСценариев);
	
	Если Параметры.Свойство("Сценарий") Тогда
		Сценарий = Параметры.Сценарий;
	ИначеЕсли СписокСценариев.Количество() > 0 Тогда
		Сценарий = СписокСценариев[0].Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		ЭтоПоддержка = Сценарий.ЭтоПоддержка;
	КонецЕсли;
	
	Если ЭтоПоддержка Тогда
		Заголовок = НСтр("ru = 'Настройка сценария поддержки'");
	КонецЕсли;
	ПараметрыВыбораТипа = Новый Массив;
	ПараметрыВыбораТипа.Добавить(Новый ПараметрВыбора("ТолькоПоддержка", Истина));
	Элементы.СписокТиповОбращений.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораТипа);
	Элементы.СписокТиповОбращений.Видимость = ЭтоПоддержка;
	
	ШиринаКолонок = 30;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.16") = 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ФормулаДельтыШирины = "ШиринаКолонок";
		Иначе
			ВыводитьСостояниеСтрокой = Истина;
			ДельтаШирины = 10;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.14.1") >= 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ФормулаДельтыШирины = "ШиринаКолонок";
		Иначе
			ДельтаШирины = 11;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			ВыводитьСостояниеСтрокой = Истина;
			ФормулаДельтыШирины = "(50 - ШиринаКолонок)/3 - 2";
		Иначе
			ФормулаДельтыШирины = "(50 - ШиринаКолонок)/3";
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьТелефонию = Ложь;
	
	СценарииОбработки = Константы.сфпНастройкиТелефонии_СценарииОбработки.Получить().Получить();
	Если СценарииОбработки <> Неопределено Тогда
		ЗначениеВРеквизитФормы(СценарииОбработки, "Телефония_СценарииОбработки");
	КонецЕсли;
	Для Каждого СтрокаСценарий Из Телефония_СценарииОбработки Цикл
		Если СтрокаСценарий.Сценарий = Сценарий Тогда
			ИспользоватьТелефонию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		НаименованиеСценария = Сценарий.Наименование;
		Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
		СценарийПриИзмененииСервер();
		СоздатьЭлементыТриггеров();
		ИзменитьКонтекстноеМенюТриггеров();
	КонецЕсли;
	Элементы.СписокТиповУслуг.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТипыУслуг");
	
	Элементы.Подразделение.Видимость = ИспользоватьПодразделения;
	//Элементы.ИзменитьФорму.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	ПоказыватьОтмеченныеВручнуюОбращения = 
		ХранилищеОбщихНастроек.Загрузить("МоиПродажиПоказыватьОтмеченныеВручнуюОбращения", Сценарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИзменитьКонтекстноеМенюТриггеров();
	УстановитьШиринуКолонок();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененоСостояниеИнтереса" Тогда
		ОбновитьЗаголовокСостоянияИнтереса(Параметр);
	ИначеЕсли ИмяСобытия = "ЗаписанТриггер"	Тогда
		Если Параметр <> Неопределено Тогда
			Идентификатор = "Этап_" + СтрЗаменить(Строка(Параметр.УникальныйИдентификатор()), "-", "_");
			Элемент = Элементы.Найти(Идентификатор);
			Если Элемент <> Неопределено Тогда
				CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоПоддержка Тогда
		ПроверяемыеРеквизиты.Добавить("СписокТиповОбращений");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	ЕстьСсылкаНаОбработчик = Истина;
	// Если ЗначениеЗаполнено(НаименованиеСценария) Тогда
	//	Если ЗначениеЗаполнено(Сценарий) Тогда
	//		ИзменитьНаименованиеСценария();
	//		Оповестить("ИзмененСценарийИнтереса", Сценарий);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Сценарий.ТекстРедактирования) Тогда
		Если ЗначениеЗаполнено(Сценарий) Тогда
			НаименованиеСценария = Элементы.Сценарий.ТекстРедактирования;
			ИзменитьНаименованиеСценария();
			Элементы.ГруппаСценарийРедактирование.Видимость = Ложь;
			Элементы.ГруппаСценарий.Видимость = Истина;
			Оповестить("ИзмененСценарийИнтереса", Сценарий);
			ОтобразитьИзменениеДанных(Сценарий, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСценарийНажатие(Элемент)
	Если ЕстьИнтересыПоСценарию() Тогда
		CRM_ОбщегоНазначенияКлиент.ПоказатьНашеПредупреждение(НСтр("ru='Невозможно удалить сценарий,
			| т.к. он используется в Интересах клиентов';
			|en='Failed to delete script because it is used in customers Leads'"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеСценарияПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			 СтрШаблон(НСтр("ru='Действительно удалить сценарий ""%1""?';
			|en='Are you sure to delete script ""%1""?'"),
			 CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Сценарий, "Наименование")),
			 РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПередНачаломДобавленияЗавершение(Действие, ИдентификаторСостояния) Экспорт
	Если Действие <> Неопределено Тогда
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.CRM_ДействияТриггеров") Тогда
			ФормаТриггера = ПолучитьФорму("Справочник.CRM_Триггеры.ФормаОбъекта",
				 ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие),
				 ЭтотОбъект);
			ФормаТриггера.УсловиеСрабатыванияПриИзменении(ФормаТриггера.Элементы.УсловиеСрабатывания);
			ФормаТриггера.ДействиеПриИзменении(ФормаТриггера.Элементы.Действие);
		ИначеЕсли ТипЗнч(Действие.Значение) = Тип("СправочникСсылка.CRM_ДействияТриггеров") Тогда
			ФормаТриггера = ПолучитьФорму("Справочник.CRM_Триггеры.ФормаОбъекта",
				 ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие.Значение),
				 ЭтотОбъект);
			ФормаТриггера.УсловиеСрабатыванияПриИзменении(ФормаТриггера.Элементы.УсловиеСрабатывания);
			ФормаТриггера.ДействиеПриИзменении(ФормаТриггера.Элементы.Действие);
		Иначе
			ВыбратьТриггерВФорме(ИдентификаторСостояния);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекСсылка = Элемент.ТекущиеДанные.Ссылка;
	Если ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.CRM_Триггеры") Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СостояниеИнтереса) Тогда
			ПараметрыПеретаскивания.Значение = ТекСсылка;
		Иначе
		Выполнение = Ложь;
		КонецЕсли;
	Иначе
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Картинка") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("Переместить", НСтр("ru='Переместить';en='Move'"), , БиблиотекаКартинок.ПеренестиЭлемент);
	СписокКоманд.Добавить("Копировать", НСтр("ru='Копировать';en='Copy'"), , БиблиотекаКартинок.СкопироватьЭлементСписка);
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыОбработкаПеретаскиваниеЗавершение", ЭтотОбъект, 
		Новый Структура("Триггер, ИдентификаторСостояния", ПараметрыПеретаскивания.Значение, ИдентификаторСостояния));
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаПеретаскиваниеЗавершение(Команда, ДопПараметры) Экспорт
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда.Значение = "Переместить" Тогда
		ПеренестиТриггерВДругоеСостояние(ДопПараметры.Триггер, ДопПараметры.ИдентификаторСостояния);
	ИначеЕсли Команда.Значение = "Копировать" Тогда
		СкопироватьТриггерВДругоеСостояние(ДопПараметры.Триггер, ДопПараметры.ИдентификаторСостояния);
	КонецЕсли;
	ОповещениеОЗакрытии();
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ТриггерыПриАктивизацииСтрокиОбработка", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыПриАктивизацииСтрокиОбработка()
	Для Каждого Таблица Из СписокЭлементовТриггеров Цикл
		Элементы[Таблица.Значение].ВыделенныеСтроки.Очистить();
		Элементы[Таблица.Значение].ТекущаяСтрока = Неопределено;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТриггерыОбработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	Если ТипЗнч(Элемент.ТекущиеДанные.Ссылка) <> Тип("СправочникСсылка.CRM_Триггеры") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеРедактированияНастроек", ЭтотОбъект,
			 Новый Структура("Элемент, Ссылка", Элемент,
			 Элемент.ТекущиеДанные.Ссылка));
		ПараметрыОткрытия = Новый Структура("Ссылка", Элемент.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.CRM_СостоянияИнтересов.Форма.ФормаНастройкиСостояния", ПараметрыОткрытия,
			 ЭтотОбъект, , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрНайти(Поле.Имя, "НастроитьТриггер") = 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОЗакрытии", ЭтотОбъект, Элемент);
		
		CRM_ЦентрМониторингаКлиент.НачатьЗамерОперацииБизнесСтатистики(
			"CRM_Статистика.Триггеры.Триггер.ДлительностьСценариев.ВремяОткрытияФормы", Истина);
		
		ОткрытьФорму("Справочник.CRM_Триггеры.ФормаОбъекта",
			 ПолучитьПараметрыОткрытияТриггера(ИдентификаторСостояния, Элемент.ТекущиеДанные.Ссылка),
			 ЭтотОбъект, , , ,
			 ОписаниеОповещения);
	ИначеЕсли СтрНайти(Поле.Имя, "УдалитьТриггер") = 1 Тогда
		ПометитьТриггерНаУдаление(Элемент.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СостояниеИнтереса) Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элемент);
		Иначе
			ОбновитьВсеСостояния();
		КонецЕсли;
	ИначеЕсли СтрНайти(Поле.Имя, "СостояниеТриггера") = 1 Тогда
		ИзменитьТриггерДействует(Элемент.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СостояниеИнтереса) Тогда
			CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элемент);
		Иначе
			ОбновитьВсеСостояния();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСостояниеИнтересаНажатие(Элемент)
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "СкрытьСостояниеИнтереса_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ДопПараметры = Новый Структура("ИдентификаторСостояния, ЭлементИмя", ИдентификаторСостояния, Элемент.Имя);
	Если ЕстьИнтересыВСостоянии(ИдентификаторСостояния) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкрытьСостояниеИнтересаПродолжение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения,
			 НСтр("ru='Есть активные интересы в данном состоянии! Продолжить удаление?';
			|en='There are active leads in this state! Continue deletion?'"), РежимДиалогаВопрос.ДаНет, ,
			 КодВозвратаДиалога.Нет);
	Иначе
		СкрытьСостояниеИнтересаПродолжение(КодВозвратаДиалога.Да, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоменятьСостоянияМестами(Элемент)
	Смещение = -1;
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ПоменятьСостоянияМестами", "Декорация");
	Индекс = Элементы.ГруппаТриггеры.ПодчиненныеЭлементы.Индекс(Элементы[СтрЗаменить(ИмяЭлемента, "Декорация", "Группа")]);
	ЭлементыФормыПереместить(ИмяЭлемента, СтрЗаменить(Элементы.ГруппаТриггеры.ПодчиненныеЭлементы.Получить(Индекс + Смещение).Имя,
		 "Группа",
		 "Декорация"));
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактироватьСостояниеИнереса(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "ПолеВводаНаименованияСостояния_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	НовоеНаименование = Элемент.ТекстРедактирования;
	Состояние = ИзменитьСостояниеИнтереса(ИдентификаторСостояния, Новый Структура("Наименование", НовоеНаименование));
	Идентификатор = СтрЗаменить(Элемент.Имя, "ПолеВводаНаименованияСостояния_", "");
	ЭтотОбъект["Наименование_" + Идентификатор] = НовоеНаименование;
	Элементы["Группа_Надписи_Редактирование_" + Идентификатор].Видимость = Ложь;
	Элементы["Группа_Надписи_" + Идентификатор].Видимость = Истина;
	Элементы["Декорация_" + Идентификатор].Заголовок = Состояние.Представление;
	
	#Если Не ВебКлиент Тогда
		Оповестить("ИзмененоСостояниеИнтереса", Состояние.Ссылка);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТриггер(Элемент)
	ИдентификаторСостояния = СтрЗаменить(Элемент.Имя, "ДобавитьТриггер_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере(СписокПодразделений, Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповУслугПриИзменении(Элемент)
	СписокТиповУслугПриИзмененииНаСервере(СписокТиповУслуг, Сценарий);
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповОбращенийПриИзменении(Элемент)
	
	УникальныеЗначения = Новый Массив;
	ЭлементыКУдалению = Новый Массив;
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		Если УникальныеЗначения.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			УникальныеЗначения.Добавить(ЭлементСписка.Значение);
		Иначе
			ЭлементыКУдалению.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ЭлементыКУдалению Цикл
		СписокТиповОбращений.Удалить(ЭлементСписка);
	КонецЦикла;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СписокТиповОбращенийПриИзмененииНаСервере(СписокТиповОбращений, Сценарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУсловияНажатие(Элемент)
	Элементы.ГруппаУсловия.Видимость = Не Элементы.ГруппаУсловия.Видимость;
	// Если Элементы.ГруппаУсловия.Видимость Тогда
	//	Элемент.ЦветФона = Новый Цвет(220, 220, 220);
	// Иначе
	//	Элемент.ЦветФона = Новый Цвет;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИндексЦветаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Идентификатор = СтрЗаменить(Элемент.Имя, "ИндексЦветаСостояния_", "");
	ОповещениеНовое = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект, Элемент.Имя);
	ПараметрыФормы = Новый Структура("ТекущийЦвет", ЭтотОбъект["ИндексЦвета_" + Идентификатор]);
	ФормаВыбораЦвета = ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыбораЦвета", ПараметрыФормы, Элемент, , , ,
		ОповещениеНовое, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
КонецПроцедуры // ЦветНачалоВыбора()

&НаКлиенте
Процедура ШиринаКолонокПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ИзменениеШириныКолонокКанбан", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеШириныКолонокКанбан()
	УстановитьШиринуКолонок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПричиныОтказов(Команда)
	ОткрытьФорму("Справочник.CRM_ПричиныОтказаПоИнтересам.ФормаСписка", Новый Структура(), ЭтотОбъект,
		 УникальныйИдентификатор, , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСостояниеИнтереса(Команда)
	ИдентификаторСостояния = СтрЗаменить(Команда.Имя, "ДобавитьСостояние_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	СкрытыеСостояния = ПолучитьСкрытыеСостояния(ИдентификаторСостояния);
	Если СкрытыеСостояния.Количество() = 0 Тогда
		КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния);
	Иначе
		СкрытыеСостояния.Добавить("НовоеСостояние",
			 НСтр("ru='Новое состояние интереса';en='New lead state'"), ,
			 БиблиотекаКартинок.CRM_Плюс_серый);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСкрытыхСостояний", ЭтотОбъект, ИдентификаторСостояния);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СкрытыеСостояния);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйСценарий(Команда)
	Сценарий = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка");
	НаименованиеСценария = НСтр("ru='Новый сценарий';en='New Script'");
	СоздатьСценарий();
	ИзменитьСценарий(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСценарий(Команда)
	СкопироватьСценарийНаСервере();
	УстановитьШиринуКолонок();
	ИзменитьСценарий(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСценария(Команда)
	ИдентификаторСценария = СтрЗаменить(Команда.Имя, "ВыбратьСценарий", "");
	ИдентификаторСценария = СтрЗаменить(ИдентификаторСценария, "_", "-");
	Сценарий = СостояниеИнтересаПоИдентификатору(ИдентификаторСценария);
	НаименованиеСценария = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Сценарий, "Наименование");
	Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
	ВыборСценарияСервер();
	УстановитьШиринуКолонок();
КонецПроцедуры

&НаСервере
Процедура ВыборСценарияСервер()
	СценарийПриИзмененииСервер();
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСценарий(Команда)
	Элементы.ГруппаСценарий.Видимость = Ложь;
	Элементы.ГруппаСценарийРедактирование.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Если ЭтоПоддержка Тогда
		Если ПроверитьЗаполнениеЭтаповПоддержки() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		ЗаписьВыполнена =
			CRM_НачалоРаботыСПрограммойВызовСервера.ЗаписатьНастроенныйРазделРешения(ПредопределенноеЗначение("Перечисление.CRM_РазделыНастройкиРешения.СценарииПродаж"));
		Если ЗаписьВыполнена Тогда
			Оповестить("ОбновитьНастроенныеРазделы");
			CRM_РабочийСтолКлиент.ПереинициализироватьРабочийСтолКлиент("Обработка.CRM_АРМ_МоиПродажи.Форма.Форма");
		КонецЕсли;
	КонецЕсли; 
	Если ЭтоПоддержка Тогда
		Оповестить("ИзмененСценарийПоддержки", Сценарий);
	Иначе
		Оповестить("ИзмененСценарийИнтереса", Сценарий);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьШиринуКолонок(Команда)
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		Элементы.ГруппаПолосаРегулированияВсплывающая.Показать();
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельРегулирования()
	
	Если Элементы.ГруппаПолосаРегулированияВсплывающая.Скрыта() Тогда
		ТекущийЭлемент = Элементы.ИзменитьШиринуКолонок;
		ОтключитьОбработчикОжидания("ЗакрытьПанельРегулирования");
	Иначе
		ПодключитьОбработчикОжидания("ЗакрытьПанельРегулирования", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СквознойЧекЛист(Команда)
	Если ЗначениеЗаполнено(Сценарий) Тогда
		ПараметрыОткрытия = Новый Структура("Сценарий", Сценарий);
		ОткрытьФорму("Справочник.CRM_СостоянияИнтересов.Форма.ФормаСквознойЧекЛист", ПараметрыОткрытия,
			 ЭтотОбъект, , , , ,
			 РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СкопироватьТриггер".
//
Процедура СкопироватьТриггер(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму копирования Триггера'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьТриггерПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТриггерПродолжение(Результат, ДопПараметр) Экспорт
	
	КопированиеТриггера = Истина;
	ТекСостояние = ТекущийЭлемент.Имя;
	ПараметрыОткрытия = Новый Структура("ТекСостояние, Сценарий, КопированиеТриггера", ТекСостояние, Сценарий, Истина);

	ОписаниеЗакрытия = Новый ОписаниеОповещения("ВыборСостояния", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.ФормаВыбораСостояния", ПараметрыОткрытия,
		 ЭтотОбъект, , , , ОписаниеЗакрытия,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПереместитьТриггер".
//
Процедура ПереместитьТриггер(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'форму переноса Триггера'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереместитьТриггерПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьТриггерПродолжение(Результат, ДопПараметр) Экспорт
	
	КопированиеТриггера = Ложь;
	ТекСостояние = ТекущийЭлемент.Имя;
	ПараметрыОткрытия = Новый Структура("ТекСостояние, Сценарий, КопированиеТриггера", ТекСостояние, Сценарий, Ложь);
	
	ОписаниеЗакрытия = Новый ОписаниеОповещения("ВыборСостояния", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.ФормаВыбораСостояния", ПараметрыОткрытия,
		 ЭтотОбъект, , , , ОписаниеЗакрытия,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСостояния(РезультатВыбора, ДопПараметы) Экспорт
	
	ТипМассив = Тип("Массив");
	Если Не ТипЗнч(РезультатВыбора) = ТипМассив Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеДанные = ТекущийЭлемент.ТекущиеДанные;
	ТекСсылка = ВыбранныеДанные.Ссылка;
	Если ТипЗнч(ТекСсылка) <> Тип("СправочникСсылка.CRM_Триггеры") Тогда
		Возврат;
	КонецЕсли;
	
	ТриггерСкопирован = Ложь;
	
	Для Каждого ЭлементМассива Из РезультатВыбора Цикл
		
		РодительСостояния = ЭлементМассива.РодительСостояния;
		ВыбранноеСостояние = ЭлементМассива.Ссылка;
		
		ИдентификаторСостояния = Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор());
		
		СкопироватьТриггерВДругоеСостояние(ТекСсылка , ИдентификаторСостояния);
		ТриггерСкопирован = Истина;
		
	КонецЦикла;
	
	Если Не КопированиеТриггера Тогда
		ПометитьТриггерНаУдаление(ТекСсылка);
	КонецЕсли;
	
	Если ТриггерСкопирован Тогда
		ОбновитьВсеСостояния();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказыватьОтмеченныеВручнуюОбращенияПриИзменении()
	
	СохранитьНастройкуПоказыватьОтмеченныеВручнуюОбращения(ПоказыватьОтмеченныеВручнуюОбращения, Сценарий);
	Оповестить("ИзмененоОтображениеОтмеченныхВручнуюОбращений", ПоказыватьОтмеченныеВручнуюОбращения, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПроверитьЗаполнениеЭтаповПоддержки()
	ЕстьОшибки = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	|	CRM_СостоянияИнтересов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Родитель = &Родитель
	|	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	|	И CRM_СостоянияИнтересов.Используется
	|	И CRM_СостоянияИнтересов.КатегорияСостояния = ЗНАЧЕНИЕ(Перечисление.CRM_КатегорииСостоянийПоддержки.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	ВыборкаСостояний = Запрос.Выполнить().Выбрать();
	Если ВыборкаСостояний.Количество() > 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнена категория у следующих этапов:'");
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЕсли;	
	Пока ВыборкаСостояний.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = " - " + ВыборкаСостояний.Наименование;
		Сообщение.Сообщить();
	КонецЦикла;	
	Возврат ЕстьОшибки;
КонецФункции	

&НаСервере
Процедура СценарийПриИзмененииСервер()
	Если ЗначениеЗаполнено(Сценарий) Тогда
		Подразделение = Сценарий.Подразделение;
		СписокТиповУслуг.ЗагрузитьЗначения(Сценарий.ТипыУслуг.Выгрузить(, "ТипУслуги").ВыгрузитьКолонку("ТипУслуги"));
		СписокПодразделений.ЗагрузитьЗначения(Сценарий.Подразделения.Выгрузить(,
			 "Подразделение").ВыгрузитьКолонку("Подразделение"));
		СписокТиповОбращений.Очистить();
		ТипыОбращений = Сценарий.ТипыОбращений;
		Для Каждого Строка Из ТипыОбращений Цикл
			СписокТиповОбращений.Добавить(Строка.ТипОбращения, , , БиблиотекаКартинок["CRM_ТипОбращения" 
				+ Строка.ТипОбращения.ИндексКартинки]);
		КонецЦикла;
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		СписокТиповУслуг.Очистить();
		СписокПодразделений.Очистить();
		СписокТиповОбращений.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалениеСценарияПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьСценарийНаУдаление(Сценарий);
		Оповестить("УдаленСценарийИнтереса", Сценарий);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьСценарийНаУдаление(Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.УстановитьПометкуУдаления(Не СценарийОбъект.ПометкаУдаления);
КонецПроцедуры

&НаСервере
Процедура СформироватьМенюСценариев(СписокСценариев)
	Для каждого ТекСценарий Из СписокСценариев Цикл
		Идентификатор = СтрЗаменить(Строка(ТекСценарий.Значение.УникальныйИдентификатор()), "-", "_");
		Команда = Команды.Добавить("ВыбратьСценарий" + Идентификатор);
		Команда.Заголовок = Строка(ТекСценарий.Значение);
		Команда.Действие = "ВыборСценария";
		
		Кнопка = Элементы.Добавить("ВыбратьСценарий" + Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = Кнопка.Имя;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьСценарий()
	НовыйСценарийИнтереса = Справочники.CRM_СостоянияИнтересов.СоздатьЭлемент();
	НовыйСценарийИнтереса.Наименование = НаименованиеСценария;
	НовыйСценарийИнтереса.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	НовыйСценарийИнтереса.ЭтоПоддержка = ЭтоПоддержка;
	НовыйСценарийИнтереса.Записать();
	Сценарий = НовыйСценарийИнтереса.Ссылка;
	
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "_");
	Команда = Команды.Добавить("ВыбратьСценарий" + Идентификатор);
	Команда.Заголовок = Строка(Сценарий);
	Команда.Действие = "ВыборСценария";
		
	Кнопка = Элементы.Добавить("ВыбратьСценарий" + Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.ИмяКоманды = Кнопка.Имя;
	
	Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
	СценарийПриИзмененииСервер();
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСценарийНаСервере()
	
	НовСценарий = Справочники.CRM_СостоянияИнтересов.СкопироватьСценарий(Сценарий);
	Если НовСценарий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сценарий = НовСценарий;
	НаименованиеСценария = Сценарий.Наименование;
	
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "_");
	Команда = Команды.Добавить("ВыбратьСценарий" + Идентификатор);
	Команда.Заголовок = Строка(Сценарий);
	Команда.Действие = "ВыборСценария";
		
	Кнопка = Элементы.Добавить("ВыбратьСценарий" + Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Кнопка.ИмяКоманды = Кнопка.Имя;
	
	Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
	ВыборСценарияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьИсточникИнтереса(Команда)
	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("Почта", "Электронная почта");
	Если ИспользоватьМессенджеры Тогда
		СписокМеню.Добавить("Мессенджер", "Диалоги");
	КонецЕсли;
	Если ИспользоватьЗаявки Тогда
		СписокМеню.Добавить("Источник", "Заявки");
	КонецЕсли;
	Если Не ИспользоватьТелефонию Тогда
		СписокМеню.Добавить("Телефония", "Телефония");
	КонецЕсли;
	ОписаниеВыбора = Новый ОписаниеОповещения("ВыборВариантаДобавления", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОписаниеВыбора, СписокМеню, Элементы.ДобавитьИсточник_Этап_Элемент_Источников);
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаДобавления(РезультатВыбора, ДопПараметы) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		Если РезультатВыбора.Значение = "Телефония" Тогда
			ИспользоватьТелефонию = Истина;
			УстановитьЗначениеТелефонии(Ложь);
			Оповестить("сфпОбновленыИспользуемыеСценарии");
			Возврат;
		КонецЕсли;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Источник", РезультатВыбора.Значение);	
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ВыборЛида", ЭтотОбъект, Новый Структура);
		ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.ФормаДобавленияЛида", ПараметрыОткрытия,
			 ЭтотОбъект, , , , ОписаниеЗакрытия,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеТелефонии(УдалитьСтроку = Истина)
	Если УдалитьСтроку Тогда
		НайденныеСтроки = Телефония_СценарииОбработки.НайтиСтроки(Новый Структура("Сценарий", Сценарий));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого Строка Из НайденныеСтроки Цикл
				Телефония_СценарииОбработки.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	Иначе
		НовСтр = Телефония_СценарииОбработки.Добавить();
		НовСтр.Сценарий = Сценарий;
		Если Элементы.Найти("Телефония") <> Неопределено Тогда
			Элементы.Телефония.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	Константы.сфпНастройкиТелефонии_СценарииОбработки.Установить(Новый ХранилищеЗначения(РеквизитФормыВЗначение("Телефония_СценарииОбработки")));
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбработкаВыборТелефония(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтрНайти(Поле.Имя, "ОтключитьИсточникТелефония") = 1 Тогда
		ИспользоватьТелефонию = Ложь;
		Если Элементы.Найти("Телефония") <> Неопределено Тогда
			Элементы.Телефония.Видимость = Ложь;
		КонецЕсли;
		УстановитьЗначениеТелефонии();
		Оповестить("сфпОбновленыИспользуемыеСценарии");
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЛида(РезультатВыбора, ДопПараметы) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		ОтключитьВключитьИсточники(РезультатВыбора, Истина);
	КонецЕсли;	
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Этап_Элемент_Источников);
КонецПроцедуры

&НаСервере
Процедура ОтключитьВключитьИсточники(МассивИсточников, Флаг)
	Для каждого ИсточникСсылка Из МассивИсточников Цикл
		ИсточникОбъект = ИсточникСсылка.ПолучитьОбъект();
		Если Флаг Тогда
			Если Не ИсточникОбъект.CRM_ИсточникЛидов Тогда
				ИсточникОбъект.CRM_ИсточникЛидов = Флаг;
			КонецЕсли;
			Если ИсточникОбъект.CRM_Сценарии.Найти(Сценарий, "Сценарий") = Неопределено Тогда
				НовСтр = ИсточникОбъект.CRM_Сценарии.Добавить();
				НовСтр.Сценарий = Сценарий;
			КонецЕсли;
		Иначе
			УдаляемыеСтроки = ИсточникОбъект.CRM_Сценарии.НайтиСтроки(Новый Структура("Сценарий", Сценарий));
			Для Каждого Стр Из УдаляемыеСтроки Цикл
				ИсточникОбъект.CRM_Сценарии.Удалить(Стр);
			КонецЦикла;
		КонецЕсли;
		ИсточникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ИсточникОбработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтрНайти(Поле.Имя, "ОтключитьИсточник") = 1 И Элемент.ТекущиеДанные.Ссылка <> Неопределено Тогда
		МассивИсточников = Новый Массив;
		МассивИсточников.Добавить(Элемент.ТекущиеДанные.Ссылка);
		ОтключитьВключитьИсточники(МассивИсточников, Ложь);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элемент);
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементИсточников(СписокЭлементовТриггеров)
	МассивРеквизитов = Новый Массив;
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	ИдентификаторЭтапа = "Элемент_Источников";
	
	ИмяРеквизита = "Этап_Элемент_Источников";
	ИмяРеквизитаТелефония = "Телефония";
	
	ЦветЭтапа = ЦветаСтиля.CRM_СерыйДляПодложек;
	СписокЭлементовТриггеров.Добавить(ИмяРеквизита, "Источники обращений");
	Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Наименование_" + ИмяРеквизита, Новый ОписаниеТипов("Строка")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексЦвета_" + ИмяРеквизита, Новый ОписаниеТипов("Число")));
	КонецЕсли;
	Если Элементы.Найти(ИмяРеквизитаТелефония) = Неопределено Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаТелефония, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КомандаОтключить", Новый ОписаниеТипов("Строка"),
			 ИмяРеквизитаТелефония));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Наименование", Новый ОписаниеТипов("Строка"), ИмяРеквизитаТелефония));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексКартинки", Новый ОписаниеТипов("Число"), ИмяРеквизитаТелефония));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексЦвета_" + ИмяРеквизитаТелефония, Новый ОписаниеТипов("Число")));
	КонецЕсли;
	Если МассивРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивРеквизитов);
	КонецЕсли;
		
	Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка.Наименование КАК Наименование,
		|	1 КАК ИндексКартинки,
		|	""Отключить"" КАК КомандаОтключить,
		|	1 КАК ИндексСортировки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.CRM_Сценарии КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка.CRM_ИсточникЛидов И НЕ УчетныеЗаписиЭлектроннойПочты.Ссылка.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.Сценарий = &Сценарий
		|
		|СГРУППИРОВАТЬ ПО
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|";
		Если ИспользоватьМессенджеры Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	CRM_УчетныеЗаписиМессенджеров.Ссылка,
			|	CRM_УчетныеЗаписиМессенджеров.Ссылка.Наименование,
			|	0,
			|	""Отключить"",
			|	2
			|ИЗ
			|	Справочник.CRM_УчетныеЗаписиМессенджеров.CRM_Сценарии КАК CRM_УчетныеЗаписиМессенджеров
			|ГДЕ
			|	CRM_УчетныеЗаписиМессенджеров.Ссылка.CRM_ИсточникЛидов И НЕ CRM_УчетныеЗаписиМессенджеров.Ссылка.ПометкаУдаления
			|	И CRM_УчетныеЗаписиМессенджеров.Сценарий = &Сценарий
			|";
		КонецЕсли;
		Если ИспользоватьЗаявки Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	CRM_ИсточникиПолученияЛидов.Ссылка,
			|	CRM_ИсточникиПолученияЛидов.Ссылка.Наименование,
			|	2,
			|	""Отключить"",
			|	3
			|ИЗ
			|	Справочник.CRM_ИсточникиПолученияЛидов.CRM_Сценарии КАК CRM_ИсточникиПолученияЛидов
			|ГДЕ
			|	CRM_ИсточникиПолученияЛидов.Ссылка.CRM_ИсточникЛидов И НЕ CRM_ИсточникиПолученияЛидов.Ссылка.ПометкаУдаления
			|	И CRM_ИсточникиПолученияЛидов.Сценарий = &Сценарий";
		КонецЕсли;
		ЭтотОбъект[ИмяРеквизита].ТекстЗапроса = ТекстЗапроса;		
		ГруппаЭлемент = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"), Элементы.ГруппаТриггеры);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
		ГруппаЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		ГруппаЭлемент1 = Элементы.Добавить("Группа1_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
		ГруппаЭлемент1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент1.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаЭлемент1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЭлемент1.ОтображатьЗаголовок = Ложь;
		ГруппаЭлемент1.РастягиватьПоГоризонтали = Ложь;
		
		// ////// Заголовок колонки состояния интереса
		
		// / Элементы заголовка по умолчанию
		ГруппаЭлементНадписи = Элементы.Добавить("Группа_Надписи_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
		ГруппаЭлементНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементНадписи.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементНадписи.РастягиватьПоГоризонтали = Истина;
		
		ДекорацияНазвание = Элементы.Добавить("Декорация_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
		ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияНазвание.Заголовок = "Источники обращений";
		ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
		ДекорацияНазвание.КонтекстноеМеню.Видимость = Ложь;
		ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		ДекорацияНазвание.Высота = 1;
		ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
		
		ДекорацияНазвание = Элементы.Добавить("ДобавитьИсточник_Этап_Элемент_Источников",
			 Тип("ДекорацияФормы"),
			 ГруппаЭлементНадписи);
		ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ДекорацияНазвание.Заголовок = НСтр("ru='+ источник';en='+ source'");
		ДекорацияНазвание.Подсказка = НСтр("ru='Добавить источник';en='Add source'");
		ДекорацияНазвание.Высота = 1;
		ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ДекорацияНазвание.Гиперссылка = Истина;
		ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
		ДекорацияНазвание.УстановитьДействие("Нажатие", "КомандаДобавитьИсточникИнтереса");
		
		// ////////// Динамический список колонки состояния
		ГруппаЭлементСписок = Элементы.Добавить("Группа_Список_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
		ГруппаЭлементСписок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЭлементСписок.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементСписок.РастягиватьПоГоризонтали = Истина;
		ГруппаЭлементСписок.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		ДекорацияНазвание = Элементы.Добавить("Декорация_Цвет_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементСписок);
		ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияНазвание.Шрифт = Новый Шрифт(, 1);
		ДекорацияНазвание.Высота = 1;
		ДекорацияНазвание.ЦветФона = ЦветЭтапа;
		ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
		ДекорацияНазвание.АвтоМаксимальнаяШирина = Ложь;
		ДекорацияНазвание.РастягиватьПоГоризонтали = Ложь;
		ДекорацияНазвание.Ширина = 30;
		
		НоваяСтрока = ЭтотОбъект[ИмяРеквизитаТелефония].Добавить();
		НоваяСтрока.КомандаОтключить = "Отключить";
		НоваяСтрока.Наименование = "Телефония";
		
		Элемент = Элементы.Добавить(ИмяРеквизитаТелефония, Тип("ТаблицаФормы"), ГруппаЭлементСписок);
		Элемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
		Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
		Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
		Элемент.КоманднаяПанель.Видимость = Ложь;
		Элемент.ПутьКДанным = ИмяРеквизитаТелефония;
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
			ИЛИ ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.16") <> 0 Тогда
			Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизитаТелефония + ".ИндексКартинки";
			Элемент.КартинкаСтрок = БиблиотекаКартинок.CRM_ТелефонныйЗвонок;
		КонецЕсли;
		Элемент.РазрешитьПеретаскивание = Ложь;
		Элемент.РазрешитьНачалоПеретаскивания = Ложь;
		Элемент.Видимость = ИспользоватьТелефонию;
		Элемент.Шапка = Ложь;
		Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ГоризонтальныеЛинии = Истина;
		Элемент.ВертикальныеЛинии = Ложь;
		Элемент.КонтекстноеМеню.Видимость = Ложь;
		Элемент.КонтекстноеМеню.Доступность = Ложь;
		Элемент.ЧередованиеЦветовСтрок = Ложь;
		Элемент.Высота = 2;
		Элемент.Ширина = ШиринаКолонок;
		Элемент.РастягиватьПоВертикали = Ложь;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
		Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
		Элемент.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
		Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
		Элемент.УстановитьДействие("Выбор", "ИсточникОбработкаВыборТелефония");
		
		ГруппаКолонокОбщая = Элементы.Добавить("ГруппаКолонокОбщая_" + ИмяРеквизитаТелефония,
			 Тип("ГруппаФормы"), Элементы[ИмяРеквизитаТелефония]);
		ГруппаКолонокОбщая.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонокОбщая.ОтображатьЗаголовок = Ложь;
		ГруппаКолонокОбщая.Группировка = ГруппировкаКолонок.Вертикальная;
		
		ГруппаКолонокГоризонт = Элементы.Добавить("ГруппаКолонокГоризонт_" + ИмяРеквизитаТелефония,
			 Тип("ГруппаФормы"), ГруппаКолонокОбщая);
		ГруппаКолонокГоризонт.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонокГоризонт.ОтображатьЗаголовок = Ложь;
		ГруппаКолонокГоризонт.Группировка = ГруппировкаКолонок.Горизонтальная;
		
		КолонкаНаименование = Элементы.Добавить("НаименованиеИсточника" + ИмяРеквизитаТелефония,
			 Тип("ПолеФормы"), ГруппаКолонокГоризонт);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизитаТелефония + ".Наименование";
		КолонкаНаименование.АвтоВысотаЯчейки = Истина;
		КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
		
		КолонкаНаименование = Элементы.Добавить("ОтключитьИсточник" + ИмяРеквизитаТелефония,
			 Тип("ПолеФормы"), ГруппаКолонокОбщая);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизитаТелефония + ".КомандаОтключить";
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, Ложь, Ложь, Истина);
		КолонкаНаименование.ОтображатьВШапке = Ложь;
		КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		КолонкаНаименование.ГиперссылкаЯчейки = Истина;
		КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		КолонкаНаименование.АвтоВысотаЯчейки = Истина;
		КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
		
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаЭлементСписок);
		
		Элемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
		Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
		Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
		Элемент.КоманднаяПанель.Видимость = Ложь;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
			ИЛИ ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.16") <> 0 Тогда
			Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита + ".ИндексКартинки";
			Элемент.КартинкаСтрок = БиблиотекаКартинок.CRM_Источники;
		КонецЕсли;
		Элемент.РазрешитьПеретаскивание = Ложь;
		Элемент.РазрешитьНачалоПеретаскивания = Ложь;
		Элемент.Видимость = Истина;
		Элемент.Шапка = Ложь;
		Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
		Элемент.ГоризонтальныеЛинии = Истина;
		Элемент.ВертикальныеЛинии = Ложь;
		Элемент.КонтекстноеМеню.Видимость = Ложь;
		Элемент.ЧередованиеЦветовСтрок = Ложь;
		Элемент.Высота = 4;
		Элемент.Ширина = ШиринаКолонок;
		Элемент.РастягиватьПоВертикали = Истина;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
		Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
		Элемент.УстановитьДействие("Выбор", "ИсточникОбработкаВыбор");
		
		ГруппаКолонокОбщая = Элементы.Добавить("ГруппаКолонокОбщая_" + ИмяРеквизита, Тип("ГруппаФормы"),
			 Элементы[ИмяРеквизита]);
		ГруппаКолонокОбщая.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонокОбщая.ОтображатьЗаголовок = Ложь;
		ГруппаКолонокОбщая.Группировка = ГруппировкаКолонок.Вертикальная;
		
		ГруппаКолонокГоризонт = Элементы.Добавить("ГруппаКолонокГоризонт_" + ИмяРеквизита,
			 Тип("ГруппаФормы"), ГруппаКолонокОбщая);
		ГруппаКолонокГоризонт.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонокГоризонт.ОтображатьЗаголовок = Ложь;
		ГруппаКолонокГоризонт.Группировка = ГруппировкаКолонок.Горизонтальная;
		
		КолонкаНаименование = Элементы.Добавить("НаименованиеИсточника" + ИмяРеквизита, Тип("ПолеФормы"),
			 ГруппаКолонокГоризонт);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Наименование";
		КолонкаНаименование.АвтоВысотаЯчейки = Истина;
		КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
		
		КолонкаНаименование = Элементы.Добавить("СсылкаИсточника" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокГоризонт);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Ссылка";
		КолонкаНаименование.АвтоВысотаЯчейки = Истина;
		КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
		
		КолонкаНаименование = Элементы.Добавить("ОтключитьИсточник" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокОбщая);
		КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".КомандаОтключить";
		КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, Ложь, Ложь, Истина);
		КолонкаНаименование.ОтображатьВШапке = Ложь;
		КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		КолонкаНаименование.ГиперссылкаЯчейки = Истина;
		КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		КолонкаНаименование.АвтоВысотаЯчейки = Истина;
		КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
	Иначе
		Элементы["Группа_" + ИмяРеквизита].Видимость = Истина;
		Элементы[ИмяРеквизитаТелефония].Видимость = ИспользоватьТелефонию;
	КонецЕсли;
	
	Если Элементы.Найти("ПоказыватьОтмеченныеВручнуюОбращения") = Неопределено Тогда
		НовыйЭлемент = Элементы.Добавить("ПоказыватьОтмеченныеВручнуюОбращения", Тип("ПолеФормы"), ГруппаЭлементСписок);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "ПоказыватьОтмеченныеВручнуюОбращения";
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		// Не разбивать строку подсказки  на несколько частей!
		ТекстПодсказки = НСтр("ru = 
			|'Включает отображение документов, отмеченных вручную как обращения (лиды). Отметка вручную возможна, если при создании документа состояние обращения не было установлено автоматически.'");
		
		НовыйЭлемент.Подсказка = ТекстПодсказки;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПоказыватьОтмеченныеВручнуюОбращенияПриИзменении");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
		 "Сценарий", Сценарий,
		 Истина);
	
	ЭтотОбъект["ИндексЦвета_" + ИмяРеквизита] = 0;
	ЭтотОбъект["ИндексЦвета_" + ИмяРеквизитаТелефония] = 0;
КонецПроцедуры	

&НаСервере
Процедура СоздатьЭлементыТриггеров()
	
	ИдентификаторСценария = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "_");
	Для каждого ЭлементТриггера Из Элементы.ГруппаТриггеры.ПодчиненныеЭлементы Цикл
		ЭлементТриггера.Видимость = Ложь;
	КонецЦикла;
	
	СписокЭлементовТриггеров.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.ВидСостояния КАК ВидСостояния,
	                      |	CRM_СостоянияИнтересов.Представление КАК Представление,
	                      |	CRM_СостоянияИнтересов.Завершено КАК Завершено,
	                      |	CRM_СостоянияИнтересов.Наименование КАК Наименование,
	                      |	CRM_СостоянияИнтересов.ИндексЦвета КАК ИндексЦвета
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |	И НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |	И CRM_СостоянияИнтересов.Используется
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	ВыборкаСостояний = Запрос.Выполнить().Выбрать();
	ВыборкаСостоянийТемп = Запрос.Выполнить().Выбрать();
	СостояниеПред = Неопределено;
	СоздатьЭлементИсточников(СписокЭлементовТриггеров);
	Пока ВыборкаСостояний.Следующий() Цикл
		МассивРеквизитов = Новый Массив;
		ИдентификаторЭтапа = СтрЗаменить(Строка(ВыборкаСостояний.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		
		ЦветЭтапа = СписокЦветов[ВыборкаСостояний.ИндексЦвета].Цвет;
		СписокЭлементовТриггеров.Добавить(ИмяРеквизита, ВыборкаСостояний.Наименование);
		Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Наименование_" + ИмяРеквизита, Новый ОписаниеТипов("Строка")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок")));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ИндексЦвета_" + ИмяРеквизита, Новый ОписаниеТипов("Число")));
			ИзменитьРеквизиты(МассивРеквизитов);
			
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
			// Справочник из нескольких записей.
			ЭтотОбъект[ИмяРеквизита].ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИСТИНА КАК Действует,
			|	ВЫРАЗИТЬ(&НастройкиТекст КАК СТРОКА(150)) КАК Условие,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА CRM_СостоянияИнтересов.ПроверяемыеРеквизитыИнтересаПредставление <> """"
			|					ИЛИ CRM_СостоянияИнтересов.БлокируемыеРеквизитыИнтересаПредставление <> """"
			|					ИЛИ РазрешитьРолевуюАдресацию
			|					ИЛИ CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|				ТОГДА ВЫБОР
			|						КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			|								ИЛИ CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|							ТОГДА ВЫБОР
			|									КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			|										ТОГДА &ПланироватьДелаПриПереходе + &ПереносСтроки
			|									ИНАЧЕ """"
			|								КОНЕЦ + ВЫБОР
			|									КОГДА CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|										ТОГДА &ЗавершатьЗапланированныеДела + &ПереносСтроки
			|									ИНАЧЕ """"
			|								КОНЕЦ + ВЫБОР
			|									КОГДА CRM_СостоянияИнтересов.УказыватьДостигнутыйРезультат
			|										ТОГДА &УказыватьРезультатПриЗавершении
			|									ИНАЧЕ """"
			|								КОНЕЦ
			|						ИНАЧЕ """"
			|					КОНЕЦ
			|			ИНАЧЕ """"
			|		КОНЕЦ КАК СТРОКА(500)) КАК Действие,
			|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
			|	CRM_СостоянияИнтересов.Ссылка КАК СостояниеИнтереса,
			|	"""" КАК ПустаяЯчейка,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА CRM_СостоянияИнтересов.ПроверяемыеРеквизитыИнтересаПредставление <> """"
			|					ИЛИ CRM_СостоянияИнтересов.БлокируемыеРеквизитыИнтересаПредставление <> """"
			|					ИЛИ CRM_СостоянияИнтересов.РазрешитьРолевуюАдресацию
			|					ИЛИ CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|				ТОГДА ВЫБОР
			|						КОГДА CRM_СостоянияИнтересов.ПроверяемыеРеквизитыИнтересаПредставление <> """"
			|							ТОГДА &ОбязательныеРеквизиты + "": "" + CRM_СостоянияИнтересов.ПроверяемыеРеквизитыИнтересаПредставление + &ПереносСтроки
			|						ИНАЧЕ """"
			|					КОНЕЦ + ВЫБОР
			|						КОГДА CRM_СостоянияИнтересов.БлокируемыеРеквизитыИнтересаПредставление <> """"
			|							ТОГДА &БлокируемыеРеквизиты + "": "" + CRM_СостоянияИнтересов.БлокируемыеРеквизитыИнтересаПредставление + &ПереносСтроки
			|						ИНАЧЕ """"
			|					КОНЕЦ + ВЫБОР
			|						КОГДА CRM_СостоянияИнтересов.РазрешитьРолевуюАдресацию
			|							ТОГДА &РазрешитьРолевуюАдресацию + &ПереносСтроки
			|						ИНАЧЕ """"
			|					КОНЕЦ + ВЫБОР
			|						КОГДА CRM_СостоянияИнтересов.ОбязательноеПланированиеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ПланируемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|							ТОГДА &ОбязательноПланироватьДела
			|						ИНАЧЕ """"
			|					КОНЕЦ
			|			ИНАЧЕ ВЫБОР
			|					КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			|							ИЛИ CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|						ТОГДА ВЫБОР
			|								КОГДА CRM_СостоянияИнтересов.ИнтерактивноеПланированиеАктивностей
			|									ТОГДА &ИнтерактивноеПланированиеАктивностей + &ПереносСтроки
			|								ИНАЧЕ """"
			|							КОНЕЦ + ВЫБОР
			|								КОГДА CRM_СостоянияИнтересов.ЗавершатьЗапланированныеАктивности <> ЗНАЧЕНИЕ(Перечисление.CRM_ЗавершаемыеТипыАктивности.ПУСТАЯССЫЛКА)
			|									ТОГДА &ЗавершатьЗапланированныеДела + &ПереносСтроки
			|								ИНАЧЕ """"
			|							КОНЕЦ + ВЫБОР
			|								КОГДА CRM_СостоянияИнтересов.УказыватьДостигнутыйРезультат
			|									ТОГДА &УказыватьРезультатПриЗавершении
			|								ИНАЧЕ """"
			|							КОНЕЦ
			|					ИНАЧЕ &НастройкиНеЗаданы
			|				КОНЕЦ
			|		КОНЕЦ КАК СТРОКА(500)) КАК ПредставлениеНастроекУсловия,
			|	"""" КАК ПредставлениеНастроекДействия,
			|	-1 КАК ИндексЦвета,
			|	""          "" КАК Настроить,
			|	""          "" КАК Удалить,
			|	2 КАК СостояниеТриггера,
			|	"""" КАК СостояниеТриггераСтр,
			|	0 КАК Картинка
			|ИЗ
			|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
			|ГДЕ
			|	CRM_СостоянияИнтересов.Ссылка = &СостояниеИнтереса
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	CRM_Триггеры.Действует,
			|	CRM_Триггеры.УсловиеСрабатывания,
			|	CRM_Триггеры.Действие,
			|	CRM_Триггеры.Ссылка,
			|	CRM_Триггеры.СостояниеИнтереса,
			|	"""",
			|	CRM_Триггеры.ПредставлениеНастроекУсловия,
			|	CRM_Триггеры.ПредставлениеНастроекДействия,
			|	CRM_Триггеры.Действие.ИндексЦвета,
			|	&Настроить,
			|	&Удалить,
			|	ВЫБОР
			|		КОГДА CRM_Триггеры.Действует
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА CRM_Триггеры.Действует
			|			ТОГДА ""►""
			|		ИНАЧЕ ""■""
			|	КОНЕЦ,
			|	0
			|ИЗ
			|	Справочник.CRM_Триггеры КАК CRM_Триггеры
			|ГДЕ
			|	(CRM_Триггеры.СостояниеИнтереса = &СостояниеИнтереса
			|			ИЛИ CRM_Триггеры.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
			|				И CRM_Триггеры.СценарийКарта = &Сценарий)
			|	И НЕ CRM_Триггеры.ПометкаУдаления";
			// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
			
			Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
				ЭтотОбъект[ИмяРеквизита].ТекстЗапроса = СтрЗаменить(ЭтотОбъект[ИмяРеквизита].ТекстЗапроса,
					 """          "" КАК Настроить",
					 "&Настроить КАК Настроить");
			КонецЕсли;

			//ЭтотОбъект[ИмяРеквизита].ОсновнаяТаблица = "Справочник.CRM_Триггеры";
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "СостояниеИнтереса", ВыборкаСостояний.Ссылка,
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "Сценарий", Сценарий,
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПереносСтроки", Символы.ПС,
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "Настроить", НСтр("ru='Настроить';en='Customize'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "Удалить", НСтр("ru='Удалить';en='Delete'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "НастройкиНеЗаданы", НСтр("ru='Настройки не заданы';en='Settings not set'"),
				 Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "НастройкиТекст", НСтр("ru='Настройки';en='Settings'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ПланироватьДелаПриПереходе",
				 НСтр("ru='- Планировать дела при переходе в состояние';
				|en='- Plan Activities at Transition to State'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ЗавершатьЗапланированныеДела",
				 НСтр("ru='- Завершать запланированные дела';en='- Complete Scheduled Tasks'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "УказыватьРезультатПриЗавершении",
				 НСтр("ru='- Указывать достигнутый результат при завершение дел';
				|en='- Indicate Achieved Result at Task Сompleting'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ОбязательныеРеквизиты",
				 НСтр("ru='- Обязательное заполнение полей';"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "БлокируемыеРеквизиты",
				 НСтр("ru='- Запретить редактирование полей';"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ОбязательноПланироватьДела",
				 НСтр("ru='- Обязательное планирование дел';en='- Mandatory Planning'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ИнтерактивноеПланированиеАктивностей",
				 НСтр("ru='- Интерактивное планирование активностей';en='- Interactive Activities Planning'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "ЗавершатьЗапланированныеДела",
				 НСтр("ru='- Завершать запланированные дела';en='- Complete Scheduled Tasks'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "УказыватьРезультатПриЗавершении",
				 НСтр("ru='- Указывать достигнутый результат при завершение дел';
				|en='- Indicate Achieved Result at Task Сompleting'"),
				 Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭтотОбъект[ИмяРеквизита],
				 "РазрешитьРолевуюАдресацию",
				 НСтр("ru='- Разрешена ролевая адресация';en='- '"),
				 Истина);
			
			ЭтотОбъект[ИмяРеквизита].УстановитьОбязательноеИспользование("Ссылка", Истина);
			ЭтотОбъект[ИмяРеквизита].УстановитьОбязательноеИспользование("СостояниеИнтереса", Истина);
			УО = ЭтотОбъект[ИмяРеквизита].УсловноеОформление.Элементы;
			
			// Для настройки триггера
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
				 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина, Ложь, Ложь,
				 Ложь));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Условие");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = -1;
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
				 Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, ,
				 Истина));
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Действие");
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекУсловия");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = -1; 
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекДействия");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеНастроекДействия");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Действие");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Действие");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Настроить");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настроить");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			ЭлементУО = УО.Добавить();
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
			ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("Удалить");
			ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Удалить");
			ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементУсловия.ПравоеЗначение = ""; // Для настройки триггера
			
			Для каждого Цвет Из СписокЦветов Цикл
				ЭлементУО = УО.Добавить();
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);
				ПолеУсловия = ЭлементУО.Поля.Элементы.Добавить();
				ПолеУсловия.Поле = Новый ПолеКомпоновкиДанных("ИндексЦвета");
				ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексЦвета");
				ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементУсловия.ПравоеЗначение = Цвет.Ключ;
			КонецЦикла;
			
			ВыборкаСостоянийТемп.Сбросить();
			ВыборкаСостоянийТемп.НайтиСледующий(Новый Структура("Ссылка", ВыборкаСостояний.Ссылка));
			ГруппаЗавершено = Неопределено;
			ГруппаЗавершеноГоризонт = Неопределено;
			ГруппаЗавершеноКнопки = Неопределено;
			Если ВыборкаСостояний.Завершено Тогда
				ГруппаЗавершено = Элементы.Найти("Завершено_" + ИдентификаторСценария);
				Если ГруппаЗавершено = Неопределено Тогда
					ГруппаЗавершеноГоризонт = Элементы.Добавить("ЗавершеноГоризонт_" + ИдентификаторСценария,
						 Тип("ГруппаФормы"), Элементы.ГруппаТриггеры);
					ГруппаЗавершеноГоризонт.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершеноГоризонт.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ГруппаЗавершеноГоризонт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					ГруппаЗавершеноГоризонт.ОтображатьЗаголовок = Ложь;
					
					ГруппаЗавершеноКнопки = Элементы.Добавить("ГруппаЗавершеноКнопки_" + ИдентификаторСценария,
						 Тип("ГруппаФормы"), ГруппаЗавершеноГоризонт);
					ГруппаЗавершеноКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершеноКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаЗавершеноКнопки.ОтображатьЗаголовок = Ложь;
					ГруппаЗавершеноКнопки.РастягиватьПоВертикали = Истина;
					
					ГруппаЗавершено = Элементы.Добавить("Завершено_" + ИдентификаторСценария, Тип("ГруппаФормы"),
						 ГруппаЗавершеноГоризонт);
					ГруппаЗавершено.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЗавершено.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
					ГруппаЗавершено.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаЗавершено.ОтображатьЗаголовок = Ложь;
					ГруппаЗавершено.РастягиватьПоГоризонтали = Ложь;
				Иначе
					ГруппаЗавершеноГоризонт = ГруппаЗавершено.Родитель;
				КонецЕсли;
			КонецЕсли;
			Если ВыборкаСостоянийТемп.Следующий() Тогда
		        ИмяРеквизитаСлед = "Этап_" 
		        	+ СтрЗаменить(Строка(ВыборкаСостоянийТемп.Ссылка.УникальныйИдентификатор()), "-", "_");
				ГруппаЭлементСлед = Элементы.Найти("Группа_" + ИмяРеквизитаСлед);
				Если ГруппаЭлементСлед = Неопределено Тогда
					ГруппаЭлемент = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"),
						 ?(ГруппаЗавершено = Неопределено, Элементы.ГруппаТриггеры, ГруппаЗавершено));
				Иначе
					ГруппаЭлемент = Элементы.Вставить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"),
						 Элементы.ГруппаТриггеры, ?(ВыборкаСостоянийТемп.Завершено, Элементы.Найти("ЗавершеноГоризонт_" + ИдентификаторСценария), ГруппаЭлементСлед));
				КонецЕсли;
			Иначе
				ГруппаЭлемент = Элементы.Добавить("Группа_" + ИмяРеквизита, Тип("ГруппаФормы"),
					 ?(ГруппаЗавершено = Неопределено, Элементы.ГруппаТриггеры, ГруппаЗавершено));
			КонецЕсли;
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			ГруппаЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
			ГруппаЭлемент.РастягиватьПоГоризонтали = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния) Тогда
				ГруппаЭлементКнопки = Элементы.Добавить("ГруппаЭлементКнопки_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
				ГруппаЭлементКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЭлементКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ГруппаЭлементКнопки.ОтображатьЗаголовок = Ложь;
				ГруппаЭлементКнопки.РастягиватьПоВертикали = Истина;
			КонецЕсли;
			
			Если НЕ (ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое
				ИЛИ ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение) Тогда
				
				Если ГруппаЗавершено = Неопределено Тогда
					Кнопка = Элементы.Добавить("ДобавитьСостояние_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементКнопки);
				Иначе
					Кнопка = Элементы.Вставить("ДобавитьСостояние_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЗавершеноКнопки);
				КонецЕсли;
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Картинка = БиблиотекаКартинок.CRM_ПлюсГолубой;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Подсказка = НСтр("ru='Добавить состояние интереса';en='Add a state of lead'");
				Кнопка.УстановитьДействие("Нажатие", "КомандаДобавитьСостояниеИнтереса");
				Кнопка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
				Кнопка.Высота = 3;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния)  Тогда
				
				Кнопка = Элементы.Добавить("ПоменятьСостоянияМестами_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементКнопки);
				Кнопка.Вид = ВидДекорацииФормы.Картинка;
				Кнопка.Картинка = БиблиотекаКартинок.CRM_ПоменятьМестами;
				Кнопка.Гиперссылка = Истина;
				Кнопка.Подсказка = НСтр("ru='Поменять этапы местами';en='Reverse stages'");
				Кнопка.УстановитьДействие("Нажатие", "КомандаПоменятьСостоянияМестами");
				Кнопка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				Кнопка.РастягиватьПоВертикали = Истина;
				Кнопка.Видимость = ЗначениеЗаполнено(СостояниеПред) И НЕ ЗначениеЗаполнено(СостояниеПред.ВидСостояния);
				
			КонецЕсли;
			
			ГруппаЭлемент1 = Элементы.Добавить("Группа1_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент);
			ГруппаЭлемент1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент1.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			ГруппаЭлемент1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлемент1.ОтображатьЗаголовок = Ложь;
			ГруппаЭлемент1.РастягиватьПоГоризонтали = Ложь;
			
			// ////// Заголовок колонки состояния интереса
			
			// / Элементы заголовка по умолчанию
			ГруппаЭлементНадписи = Элементы.Добавить("Группа_Надписи_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементНадписи.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементНадписи.РастягиватьПоГоризонтали = Истина;
			
			ДекорацияНазвание = Элементы.Добавить("Декорация_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Заголовок = ВыборкаСостояний.Представление;
			ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ДекорацияНазвание.КонтекстноеМеню.Видимость = Ложь;
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ДекорацияНазвание.Высота = 1;
			//ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			//ДекорацияНазвание.УстановитьДействие("Нажатие", "ТриггерыНаименованиеНажатие");
			//ДекорацияНазвание.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,10,Истина,, Истина);
			
			ДекорацияНазвание = Элементы.Добавить("ДекорацияРедактировать_" + ИмяРеквизита,
				 Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.Картинка = БиблиотекаКартинок.CRM_Изменить;
			ДекорацияНазвание.УстановитьДействие("Нажатие", "РедактироватьСостояниеИнереса");
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			
			ДекорацияНазвание = Элементы.Добавить("ДобавитьТриггер_" + ИмяРеквизита, Тип("ДекорацияФормы"),
				 ГруппаЭлементНадписи);
			ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
			ДекорацияНазвание.Заголовок = НСтр("ru='+ триггер';en='+ trigger'");
			ДекорацияНазвание.Подсказка = НСтр("ru='Добавить триггер';en='Add trigger'");
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ДекорацияНазвание.Гиперссылка = Истина;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.УстановитьДействие("Нажатие", "КомандаДобавитьТриггер");
			
			// / Элементы заголовка при редактировании
			ГруппаЭлементНадписи = Элементы.Добавить("Группа_Надписи_Редактирование_" + ИмяРеквизита,
				 Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементНадписи.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементНадписи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЭлементНадписи.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементНадписи.РастягиватьПоГоризонтали = Истина;
			ГруппаЭлементНадписи.Видимость = Ложь;
			
			ПолеВводаНазвание = Элементы.Добавить("ПолеВводаНаименованияСостояния_" + ИмяРеквизита,
				 Тип("ПолеФормы"), ГруппаЭлементНадписи);
			ПолеВводаНазвание.Вид = ВидПоляФормы.ПолеВвода;
			ПолеВводаНазвание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВводаНазвание.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			ПолеВводаНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
			ПолеВводаНазвание.ПутьКДанным = "Наименование_" + ИмяРеквизита;
			ПолеВводаНазвание.КнопкаВыбора = Истина;
			ПолеВводаНазвание.КартинкаКнопкиВыбора = БиблиотекаКартинок.CRM_Выполнено;
			ПолеВводаНазвание.Высота = 1;
			ПолеВводаНазвание.РастягиватьПоВертикали = Ложь;
			ПолеВводаНазвание.УстановитьДействие("НачалоВыбора", "ЗавершитьРедактироватьСостояниеИнереса");

			Если НЕ ВыборкаСостояний.Завершено Тогда
				ДекорацияИндексЦвета = Элементы.Добавить("ИндексЦветаСостояния_" + ИмяРеквизита,
					 Тип("ПолеФормы"), ГруппаЭлементНадписи);
				ДекорацияИндексЦвета.Вид = ВидПоляФормы.ПолеКартинки;
				ДекорацияИндексЦвета.ПутьКДанным = "ИндексЦвета_" + ИмяРеквизита;
				ДекорацияИндексЦвета.КартинкаЗначений = БиблиотекаКартинок.CRM_ЦветаКатегорий;
				ДекорацияИндексЦвета.Гиперссылка = Истина;
				ДекорацияИндексЦвета.Высота = 1;
				ДекорацияИндексЦвета.Ширина = 2;
				ДекорацияИндексЦвета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ДекорацияИндексЦвета.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
				ДекорацияИндексЦвета.РастягиватьПоГоризонтали = Ложь;
				ДекорацияИндексЦвета.РастягиватьПоВертикали = Ложь;
				ДекорацияИндексЦвета.УстановитьДействие("Нажатие", "ИндексЦветаНажатие");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСостояний.ВидСостояния) Тогда
				ДекорацияНазвание = Элементы.Добавить("СкрытьСостояниеИнтереса_" + ИмяРеквизита,
					 Тип("ДекорацияФормы"), ГруппаЭлементНадписи);
				ДекорацияНазвание.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
				ДекорацияНазвание.Заголовок = НСтр("ru='Удалить этап';en='Delete stage'");
				ДекорацияНазвание.Подсказка = НСтр("ru='Удалить этап';en='Delete stage'");
				ДекорацияНазвание.Высота = 1;
				ДекорацияНазвание.ЦветТекста = WebЦвета.Оранжевый;
				ДекорацияНазвание.Гиперссылка = Истина;
				ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
				ДекорацияНазвание.УстановитьДействие("Нажатие", "СкрытьСостояниеИнтересаНажатие");
			КонецЕсли;
			
			// ////////// Динамический список колонки состояния
			ГруппаЭлементСписок = Элементы.Добавить("Группа_Список_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаЭлемент1);
			ГруппаЭлементСписок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлементСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаЭлементСписок.ОтображатьЗаголовок = Ложь;
			ГруппаЭлементСписок.РастягиватьПоГоризонтали = Истина;
			ГруппаЭлементСписок.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ДекорацияНазвание = Элементы.Добавить("Декорация_Цвет_" + ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаЭлементСписок);
			ДекорацияНазвание.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияНазвание.Шрифт = Новый Шрифт(, 1);
			ДекорацияНазвание.Высота = 1;
			ДекорацияНазвание.ЦветФона = ЦветЭтапа;
			ДекорацияНазвание.РастягиватьПоВертикали = Ложь;
			ДекорацияНазвание.АвтоМаксимальнаяШирина = Ложь;
			ДекорацияНазвание.РастягиватьПоГоризонтали = Ложь;
			ДекорацияНазвание.Ширина = 30;
			
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), ГруппаЭлементСписок);
			
			Элемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
			Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			Элемент.ОтображениеСостоянияПросмотра.Видимость = Ложь;
			Элемент.ОтображениеСтрокиПоиска.Видимость = Ложь;
			Элемент.КоманднаяПанель.Видимость = Ложь;
			Элемент.ПутьКДанным = ИмяРеквизита;
			Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
				ИЛИ ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.16") <> 0 Тогда
				Элемент.ПутьКДаннымКартинкиСтроки  = ИмяРеквизита + ".Картинка";
			КонецЕсли;
			Элемент.РазрешитьПеретаскивание = Истина;
			Элемент.Видимость = Истина;
			Элемент.Шапка = Ложь;
			Элемент.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
			Элемент.ГоризонтальныеЛинии = Истина;
			Элемент.ВертикальныеЛинии = Ложь;
			Элемент.КонтекстноеМеню.Видимость = Ложь;
			Элемент.ЧередованиеЦветовСтрок = Ложь;
			Элемент.Высота = 4;
			Элемент.Ширина = ШиринаКолонок;
			Элемент.РастягиватьПоВертикали = Истина;
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.CRM_СерыйДляПодложек;
			Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаПоля;
			Элемент.УстановитьДействие("Выбор", "ТриггерыОбработкаВыбор");
			Элемент.УстановитьДействие("Перетаскивание", "ТриггерыОбработкаПеретаскивание");
			Элемент.УстановитьДействие("ПередУдалением", "ТриггерыОбработкаПередУдалением");
			Элемент.УстановитьДействие("НачалоПеретаскивания", "ТриггерыОбработкаНачалоПеретаскивания");
			Элемент.УстановитьДействие("ПроверкаПеретаскивания", "ТриггерыОбработкаПроверкаПеретаскивания");
			Элемент.УстановитьДействие("ПередНачаломДобавления", "ТриггерыПередНачаломДобавления");
			Элемент.УстановитьДействие("ПриАктивизацииСтроки", "ТриггерыПриАктивизацииСтроки");
			Если ВыборкаСостояний.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое Тогда
				Элемент.АктивизироватьПоУмолчанию = Истина;
			КонецЕсли;
			
			НоваяКнопка = Элементы.Добавить(ИмяРеквизита + "СкопироватьТриггер", Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
			НоваяКнопка.ИмяКоманды = "СкопироватьТриггер";
			НоваяКнопка.Картинка = БиблиотекаКартинок.СкопироватьЭлементСписка;
			
			НоваяКнопка = Элементы.Добавить(ИмяРеквизита + "ПереместитьТриггер", Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
			НоваяКнопка.ИмяКоманды = "ПереместитьТриггер";
			НоваяКнопка.Картинка = БиблиотекаКартинок.ПеренестиЭлемент;
			
			ГруппаКолонокОбщая = Элементы.Добавить("ГруппаКолонокОбщая_" + ИмяРеквизита, Тип("ГруппаФормы"),
				 Элементы[ИмяРеквизита]);
			ГруппаКолонокОбщая.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокОбщая.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокОбщая.Группировка = ГруппировкаКолонок.Вертикальная;
			
			ГруппаКолонокГоризонт = Элементы.Добавить("ГруппаКолонокГоризонт_" + ИмяРеквизита,
				 Тип("ГруппаФормы"), ГруппаКолонокОбщая);
			ГруппаКолонокГоризонт.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокГоризонт.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокГоризонт.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ГруппаКолонок = Элементы.Добавить("ГруппаКолонок_" + ИмяРеквизита, Тип("ГруппаФормы"), ГруппаКолонокГоризонт);
			ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.ОтображатьЗаголовок = Ложь;
			
			ГруппаКолонокНаименование = Элементы.Добавить("ГруппаКолонокНаименование_" + ИмяРеквизита,
				 Тип("ГруппаФормы"), ГруппаКолонок);
			ГруппаКолонокНаименование.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокНаименование.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокНаименование.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаКолонокНаименование.РастягиватьПоГоризонтали = Ложь;
			
			КолонкаНаименование = Элементы.Добавить("Условие" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокНаименование);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Условие";
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
			
			КолонкаНаименование = Элементы.Добавить("СостояниеТриггера" + ИмяРеквизита, Тип("ПолеФормы"),
				 ГруппаКолонокНаименование);
			Если ВыводитьСостояниеСтрокой Тогда
				КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
				КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".СостояниеТриггераСтр";
				КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				КолонкаНаименование.Ширина = 2;
			Иначе
				КолонкаНаименование.Вид = ВидПоляФормы.ПолеКартинки;
				КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".СостояниеТриггера";
				КолонкаНаименование.КартинкаЗначений = БиблиотекаКартинок.CRM_СтартПауза;
			КонецЕсли;
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			
			КолонкаНаименование = Элементы.Добавить("ПредставлениеНастроекУсловия" + ИмяРеквизита,
				 Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПредставлениеНастроекУсловия";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, , Истина);
			
			КолонкаНаименование = Элементы.Добавить("Действие" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Действие";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 10, Истина);
			
			КолонкаНаименование = Элементы.Добавить("ПредставлениеНастроекДействия" + ИмяРеквизита,
				 Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеВвода;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ПредставлениеНастроекДействия";
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, , Истина);
			
			ГруппаКолонокУправление = Элементы.Добавить("ГруппаКолонокУправление_" + ИмяРеквизита,
				 Тип("ГруппаФормы"), ГруппаКолонок);
			ГруппаКолонокУправление.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонокУправление.ОтображатьЗаголовок = Ложь;
			ГруппаКолонокУправление.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			КолонкаНаименование = Элементы.Добавить("НастроитьТриггер" + ИмяРеквизита, Тип("ПолеФормы"),
				 ГруппаКолонокУправление);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Настроить";
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, Ложь, Ложь, Истина);
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
			
			КолонкаНаименование = Элементы.Добавить("УдалитьТриггер" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокУправление);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".Удалить";
			КолонкаНаименование.Шрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 8, Ложь, Ложь, Истина);
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			КолонкаНаименование.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			КолонкаНаименование.ГиперссылкаЯчейки = Истина;
			КолонкаНаименование.ЦветТекста = ЦветаСтиля.CRM_ЦветДополнительногоТекста;
			КолонкаНаименование.АвтоВысотаЯчейки = Истина;
			КолонкаНаименование.РастягиватьПоГоризонтали = Ложь;
			
			КолонкаНаименование = Элементы.Добавить("ИндексЦвета" + ИмяРеквизита, Тип("ПолеФормы"), ГруппаКолонокГоризонт);
			КолонкаНаименование.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаНаименование.ПутьКДанным = ИмяРеквизита + ".ИндексЦвета";
			КолонкаНаименование.РастягиватьПоВертикали = Истина;
			КолонкаНаименование.ОтображатьВШапке = Ложь;
			
		Иначе
			Элементы["Группа_" + ИмяРеквизита].Видимость = Истина;
			ЭлементПоменятьСостоянияМестами = Элементы.Найти("ПоменятьСостоянияМестами_" + ИмяРеквизита);
			Если ЭлементПоменятьСостоянияМестами <> Неопределено Тогда
				ЭлементПоменятьСостоянияМестами.Видимость = ЗначениеЗаполнено(СостояниеПред)
					 И НЕ ЗначениеЗаполнено(СостояниеПред.ВидСостояния);
			КонецЕсли;

			Если ВыборкаСостояний.Завершено Тогда
				ГруппаЗавершеноГоризонт = Элементы.Найти("ЗавершеноГоризонт_" + ИдентификаторСценария);
				Если ГруппаЗавершеноГоризонт <> Неопределено Тогда
					ГруппаЗавершеноГоризонт.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СостояниеПред = ВыборкаСостояний.Ссылка;
		
		ЭтотОбъект["ИндексЦвета_" + ИмяРеквизита] = ВыборкаСостояний.ИндексЦвета;
	КонецЦикла;
	
	Если ГруппаЗавершено <> Неопределено И Элементы.Найти("ЭлементПричиныОтказов" + ИмяРеквизита) = Неопределено Тогда
		ЭлементПричиныОтказов =  Элементы.Добавить("ЭлементПричиныОтказов" + ИмяРеквизита,
			 Тип("КнопкаФормы"), ГруппаЗавершено);
		ЭлементПричиныОтказов.Шрифт = Новый Шрифт( , 10, Истина);
		ЭлементПричиныОтказов.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементПричиныОтказов.ИмяКоманды = "ОткрытьПричиныОтказов";
		ЭлементПричиныОтказов.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ЭлементПричиныОтказов.Ширина = 30;
		ЭлементПричиныОтказов.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШиринуКолонок()
	
	Если ЗначениеЗаполнено(ФормулаДельтыШирины) Тогда
		ДельтаШирины = Вычислить(ФормулаДельтыШирины);
	КонецЕсли;
	Для Каждого ИмяТаблицы Из СписокЭлементовТриггеров Цикл
		ШиринаЭлемента = ШиринаКолонок - ДельтаШирины;
		Если ИмяТаблицы.Значение <> "Этап_Элемент_Источников" Тогда
			Элементы[ИмяТаблицы.Значение].Ширина   = ШиринаКолонок;
			Элементы["Декорация_Цвет_" + ИмяТаблицы.Значение].Ширина = ШиринаКолонок;
			Элементы["ГруппаКолонокНаименование_" + ИмяТаблицы.Значение].Ширина = ШиринаЭлемента;
			Элементы["Условие" + ИмяТаблицы.Значение].Ширина = ШиринаЭлемента;
			Элементы["ПредставлениеНастроекУсловия" + ИмяТаблицы.Значение].Ширина = ШиринаЭлемента;
			Элементы["Действие" + ИмяТаблицы.Значение].Ширина = ШиринаЭлемента;
			Элементы["ПредставлениеНастроекДействия" + ИмяТаблицы.Значение].Ширина = ШиринаЭлемента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыСозданияТриггера(ИдентификаторСостояния, Действие)
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("УсловиеСрабатывания",
		 ПредопределенноеЗначение("Справочник.CRM_УсловияСрабатыванияТриггеров.ПриВыбореНовогоСостоянияИнтереса"));
	ПараметрыСоздания.Вставить("Действие", Действие);
	ПараметрыСоздания.Вставить("СостояниеИнтереса",
		 Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния)));
	ПараметрыСоздания.Вставить("ФильтрОбъектДействия", ИдентификаторМетаданныхИнтерес);
	Возврат ПараметрыСоздания;
КонецФункции

&НаСервере
Процедура ПеренестиТриггерВДругоеСостояние(Триггер, ИдентификаторСостояния)
	СостояниеИнтереса =
		Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.СостояниеИнтереса = СостояниеИнтереса;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура СкопироватьТриггерВДругоеСостояние(Триггер, ИдентификаторСостояния)
	СостояниеИнтереса =
		Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
	ТриггерОбъект = Триггер.Скопировать();
	ТриггерОбъект.СостояниеИнтереса = СостояниеИнтереса;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния)
	Возврат Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния));
КонецФункции

&НаКлиенте
Процедура СкрытьСостояниеИнтересаПродолжение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СкрытьСостояниеИнтереса(ДопПараметры.ИдентификаторСостояния);
		Идентификатор = СтрЗаменить(ДопПараметры.ЭлементИмя, "СкрытьСостояниеИнтереса_", "");
		Элементы["Группа_Надписи_Редактирование_" + Идентификатор].Видимость = Ложь;
		Элементы["Группа_Надписи_" + Идентификатор].Видимость = Истина;
		Элементы["Группа_" + Идентификатор].Видимость = Ложь;
		#Если Не ВебКлиент Тогда
			Оповестить("ИзмененСценарийИнтереса", Сценарий);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьСостояниеИнтереса(ИдентификаторСостояния, Используется = Ложь)
	Если ТипЗнч(ИдентификаторСостояния) = Тип("Строка") Тогда
		Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Иначе
		Состояние = ИдентификаторСостояния;
	КонецЕсли;
	СостояниеОбъект = Состояние.ПолучитьОбъект();
	СостояниеОбъект.Используется = Используется;
	СостояниеОбъект.Записать();
КонецПроцедуры

&НаСервере
Функция ЕстьИнтересыВСостоянии(ИдентификаторСостояния)
	Если ТипЗнч(ИдентификаторСостояния) = Тип("Строка") Тогда
		Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Иначе
		Состояние = ИдентификаторСостояния;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_Интерес.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Интерес КАК CRM_Интерес
	                      |ГДЕ
	                      |	CRM_Интерес.СостояниеИнтереса = &СостояниеИнтереса");
	Запрос.УстановитьПараметр("СостояниеИнтереса", Состояние);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ЕстьИнтересыПоСценарию()
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_Интерес.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_Интерес КАК CRM_Интерес
	                      |ГДЕ
	                      |	CRM_Интерес.СостояниеИнтереса.Родитель = &Сценарий");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Функция ПолучитьСкрытыеСостояния(ИдентификаторСостояния)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СостоянияИнтересов.РеквизитДопУпорядочивания) КАК Левый
	                      |ПОМЕСТИТЬ ЛевоеСостояние
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.Используется
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Правый
	                      |	И CRM_СостоянияИнтересов.Родитель = &Сценарий
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов,
	                      |	ЛевоеСостояние КАК ЛевоеСостояние
	                      |ГДЕ
	                      |	НЕ CRM_СостоянияИнтересов.ПометкаУдаления
	                      |	И НЕ CRM_СостоянияИнтересов.Используется
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания МЕЖДУ ЛевоеСостояние.Левый И &Правый
	                      |	И CRM_СостоянияИнтересов.Родитель = &Сценарий");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Правый", Состояние.РеквизитДопУпорядочивания);
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыборСкрытыхСостояний(ВыбранныйЭлемент, ИдентификаторСостояния) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = "НовоеСостояние" Тогда
			КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния);
		Иначе
			СкрытьСостояниеИнтереса(ВыбранныйЭлемент.Значение, Истина);			
			СоздатьЭлементыТриггеров();
			ИзменитьКонтекстноеМенюТриггеров();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСостояниеИнтересаПродолжение(ИдентификаторСостояния)
	Состояние = СоздатьСостояниеИнтереса(НСтр("ru='Новое состояние';en='New state'"), ИдентификаторСостояния);
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
	Идентификатор = СтрЗаменить(Строка(Состояние.УникальныйИдентификатор()), "-", "_");
	РедактироватьСостояниеИнереса(Элементы["ДекорацияРедактировать_Этап_" + Идентификатор]);
	
	#Если Не ВебКлиент Тогда
		Оповестить("ИзмененСценарийИнтереса", Сценарий);
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СоздатьСостояниеИнтереса(Наименование, ИдентификаторСостояния)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	НовоеСостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.СоздатьЭлемент();
	НовоеСостояниеИнтереса.Родитель = Сценарий;
	НовоеСостояниеИнтереса.Наименование = Наименование;
	НовоеСостояниеИнтереса.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
	НовоеСостояниеИнтереса.Используется = Истина;
	НовоеСостояниеИнтереса.ОбязательноеПланированиеАктивности =
		Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИлиЗадача;
	НовоеСостояниеИнтереса.Записать();
	ЭлементыСправочникаПереместить(НовоеСостояниеИнтереса.Ссылка, Состояние);
	
	Возврат НовоеСостояниеИнтереса.Ссылка;
КонецФункции

&НаСервере
Функция ИзменитьСостояниеИнтереса(ИдентификаторСостояния, СтруктураРеквизитов)
	Состояние = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	СостояниеОбъект = Состояние.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(СостояниеОбъект, СтруктураРеквизитов);
	СостояниеОбъект.Записать();
	Возврат Новый Структура("Ссылка, Представление", Состояние, Строка(Состояние));
КонецФункции

&НаКлиенте
Процедура РедактироватьСостояниеИнереса(Элемент)
	Идентификатор = СтрЗаменить(Элемент.Имя, "ДекорацияРедактировать_", "");
	Если ПустаяСтрока(ЭтотОбъект["Наименование_" + Идентификатор]) Тогда
		ЭтотОбъект["Наименование_" + Идентификатор] = СписокЭлементовТриггеров.НайтиПоЗначению(Идентификатор).Представление;
	КонецЕсли;
	Элементы["Группа_Надписи_Редактирование_" + Идентификатор].Видимость = Истина;
	Элементы["Группа_Надписи_" + Идентификатор].Видимость = Ложь;
	УстанавливаемыйТекущийЭлемент = "ПолеВводаНаименованияСостояния_" + Идентификатор;
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеСостояния()
	Для Каждого Элемент Из СписокЭлементовТриггеров Цикл
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы[Элемент.Значение]);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент()
	ТекущийЭлемент = Элементы[УстанавливаемыйТекущийЭлемент];
КонецПроцедуры

&НаСервере
Процедура ИзменитьТриггерДействует(Триггер)
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.Действует = Не ТриггерОбъект.Действует;
	ТриггерОбъект.Записать();
КонецПроцедуры

&НаСервере
Процедура ПометитьТриггерНаУдаление(Триггер)
	ТриггерОбъект = Триггер.ПолучитьОбъект();
	ТриггерОбъект.УстановитьПометкуУдаления(Не ТриггерОбъект.ПометкаУдаления);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТриггерИзМеню(ИдентификаторСостояния, Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыПередНачаломДобавленияЗавершение",
		 ЭтотОбъект,
		 ИдентификаторСостояния);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДействийТриггера(), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТриггерВФорме(ИдентификаторСостояния)
	ОписаниеОповещения = Новый ОписаниеОповещения("ТриггерыПередНачаломДобавленияЗавершение",
		 ЭтотОбъект,
		 ИдентификаторСостояния);
	ОткрытьФорму("Справочник.CRM_ДействияТриггеров.ФормаВыбора", Новый Структура("УсловиеСрабатывания",
		 ПредопределенноеЗначение("Справочник.CRM_УсловияСрабатыванияТриггеров.ПриВыбореНовогоСостоянияИнтереса")),
		 ЭтотОбъект, , , ,
		 ОписаниеОповещения);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияТриггера(ИдентификаторСостояния, ВыбраннаяСтрока)
	ПараметрыСоздания = Новый Структура("ФильтрОбъектДействия, Ключ", ИдентификаторМетаданныхИнтерес, ВыбраннаяСтрока);
	ПараметрыСоздания.Вставить("СостояниеИнтереса",
		 Справочники.CRM_СостоянияИнтересов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСостояния)));
	Возврат ПараметрыСоздания;
КонецФункции

&НаСервере
Функция ПолучитьСписокДействийТриггера()
	СписокДействий = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ДействияТриггеров.Ссылка КАК Ссылка,
	                      |	CRM_ДействияТриггеров.ОписаниеТипов КАК ОписаниеТипов
	                      |ИЗ
	                      |	Справочник.CRM_ДействияТриггеров КАК CRM_ДействияТриггеров
	                      |ГДЕ
	                      |	НЕ CRM_ДействияТриггеров.ПометкаУдаления
	                      |	И НЕ CRM_ДействияТриггеров.Ссылка В (&ИсключаемыеДействия)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_ДействияТриггеров.Наименование");
	
	ИсключаемыеДействия = Справочники.CRM_ДействияТриггеров.МассивИсключаемыхПоФОПредопределенных();
	Запрос.УстановитьПараметр("ИсключаемыеДействия", ИсключаемыеДействия);
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		ОписаниеТипов = Выборка.ОписаниеТипов.Получить();
		Если ОписаниеТипов <> Неопределено И (ОписаниеТипов.Типы().Количество() = 0
			 ИЛИ ОписаниеТипов.СодержитТип(Тип("ДокументОбъект.CRM_Интерес"))) Тогда
			Счетчик = Счетчик + 1;
			Если Счетчик > 15 Тогда
				СписокДействий.Добавить("ОткрытьФормуВыбора", НСтр("ru='Показать все...';en='Show All...'"));
				Прервать;
			КонецЕсли;
			СписокДействий.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДействий;
КонецФункции

&НаКлиенте
Процедура ОповещениеОЗакрытии(Результат = Неопределено, Элемент = Неопределено) Экспорт
	ОбновитьВсеСостояния();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияНастроек(Настройки, ДопПараметры) Экспорт
	
	Если Настройки <> Неопределено Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(ДопПараметры.Элемент);
		Если ТипЗнч(ДопПараметры.Ссылка) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
			ПредставлениеСостояния = Строка(ДопПараметры.Ссылка);
			Если Элементы["Декорация_" + ДопПараметры.Элемент.Имя].Заголовок <> ПредставлениеСостояния Тогда
				Элементы["Декорация_" + ДопПараметры.Элемент.Имя].Заголовок = ПредставлениеСостояния;
			КонецЕсли;
			ЭлементЗаголовок = Элементы.Найти("Декорация_Цвет_" + ДопПараметры.Элемент.Имя);
			СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
			Если ЭлементЗаголовок.ЦветФона <> СписокЦветов[Настройки.ИндексЦвета].Цвет Тогда
				ЭлементЗаголовок.ЦветФона = СписокЦветов[Настройки.ИндексЦвета].Цвет;
			КонецЕсли;
		КонецЕсли;
		Оповестить("ИзмененоСостояниеИнтереса", ДопПараметры.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыФормыПереместить(ПеретаскиваемыйРеквизит, Элемент)
	
	ИдентификаторСостояния = СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	Перетаскиваемый = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	ИдентификаторСостояния = СтрЗаменить(Элемент, "Декорация_Этап_", "");
	ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
	ПередЭлементом = СостояниеИнтересаПоИдентификатору(ИдентификаторСостояния);
	
	Если ПередЭлементом.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.Первое 
		ИЛИ ПередЭлементом.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
		
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы["Группа_" + СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_", "")],
		 Элементы.ГруппаТриггеры, Элементы["Группа_" + СтрЗаменить(Элемент, "Декорация_", "")]);
	ИдентификаторСостояния = СтрЗаменить(Элемент, "Декорация_Этап_", "");
	
	ВидимостьТемп = Элементы["ПоменятьСостоянияМестами_" + СтрЗаменить(ПеретаскиваемыйРеквизит,
		 "Декорация_", "")].Видимость;
	Элементы["ПоменятьСостоянияМестами_" + СтрЗаменить(ПеретаскиваемыйРеквизит, "Декорация_",
		 "")].Видимость = Элементы["ПоменятьСостоянияМестами_" + СтрЗаменить(Элемент, "Декорация_",
		 "")].Видимость;
	Элементы["ПоменятьСостоянияМестами_" + СтрЗаменить(Элемент, "Декорация_", "")].Видимость = ВидимостьТемп;
	
	ЭлементыСправочникаПереместить(Перетаскиваемый, ПередЭлементом);
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыСправочникаПереместить(Перетаскиваемый, ПередЭлементом)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(CRM_СостоянияИнтересов.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
	                      |ПОМЕСТИТЬ Максимальный
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Порядок
	                      |	И CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК Порядок,
	                      |	Максимальный.РеквизитДопУпорядочивания КАК МаксПорядок
	                      |ИЗ
	                      |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
	                      |		ПО (ИСТИНА)
	                      |ГДЕ
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания >= &Порядок1
	                      |	И CRM_СостоянияИнтересов.РеквизитДопУпорядочивания < &Порядок2
	                      |	И CRM_СостоянияИнтересов.Родитель = &Родитель
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания");
	Запрос.УстановитьПараметр("Родитель", Сценарий);
	Запрос.УстановитьПараметр("Порядок", ПередЭлементом.РеквизитДопУпорядочивания);
	Если Перетаскиваемый.РеквизитДопУпорядочивания < ПередЭлементом.РеквизитДопУпорядочивания Тогда
		Запрос.УстановитьПараметр("Порядок1", Перетаскиваемый.РеквизитДопУпорядочивания);
		Запрос.УстановитьПараметр("Порядок2", ПередЭлементом.РеквизитДопУпорядочивания);
		Дельта = -1;
	Иначе
		Запрос.УстановитьПараметр("Порядок2", Перетаскиваемый.РеквизитДопУпорядочивания);
		Запрос.УстановитьПараметр("Порядок1", ПередЭлементом.РеквизитДопУпорядочивания);
		Дельта = 1;
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макс = 1;
	Если Выборка.Следующий() Тогда
		Макс = Выборка.МаксПорядок;
	КонецЕсли;
	СостояниеОбъект = Перетаскиваемый.ПолучитьОбъект();
	СостояниеОбъект.РеквизитДопУпорядочивания = Макс + 1;
	СостояниеОбъект.ДополнительныеСвойства.Вставить("РеквизитаУпорядочиванияУстановлен", Истина);
	СостояниеОбъект.Записать();
	Если Макс + 1 = ПередЭлементом.РеквизитДопУпорядочивания Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			СостояниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СостояниеОбъект.РеквизитДопУпорядочивания = СостояниеОбъект.РеквизитДопУпорядочивания + Дельта;
			СостояниеОбъект.ДополнительныеСвойства.Вставить("РеквизитаУпорядочиванияУстановлен", Истина);
			СостояниеОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНаименованиеСценария()
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.Наименование = НаименованиеСценария;
	СценарийОбъект.Записать();
	Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "_");
	Команда = Команды.Найти("ВыбратьСценарий" + Идентификатор);
	Команда.Заголовок = Строка(Сценарий);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСценариев()
	
	СписокСценариев = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияИнтересов.Ссылка КАК Ссылка,
	|	СостоянияИнтересов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК СостоянияИнтересов
	|ГДЕ
	|	СостоянияИнтересов.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	|	И НЕ СостоянияИнтересов.ПометкаУдаления
	|	И СостоянияИнтересов.ЭтоПоддержка = &ЭтоПоддержка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияИнтересов.РеквизитДопУпорядочивания");
	
	Запрос.Параметры.Вставить("ЭтоПоддержка", ЭтоПоддержка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСценариев.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат СписокСценариев;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокСостоянияИнтереса(СценарийСсылка)
	
	Если Сценарий = СценарийСсылка.Родитель Тогда
		ИдентификаторЭтапа = СтрЗаменить(Строка(СценарийСсылка.УникальныйИдентификатор()), "-", "_");
		ИмяРеквизита = "Этап_" + ИдентификаторЭтапа;
		ЭлементГруппа = Элементы.Найти("Группа_" + ИмяРеквизита);
		Если ЭлементГруппа <> Неопределено Тогда
			ЭлементГруппа.Видимость = СценарийСсылка.Используется;
		КонецЕсли;
		ЭлементЗаголовок = Элементы.Найти("Декорация_" + ИмяРеквизита);
		Если ЭлементЗаголовок <> Неопределено Тогда
			ЭлементЗаголовок.Заголовок = Строка(СценарийСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодразделениеПриИзмененииНаСервере(СписокПодразделений, Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.Подразделения.Очистить();
	Для каждого ЭлементСписка Из СписокПодразделений Цикл
		НовТип = СценарийОбъект.Подразделения.Добавить();
		НовТип.Подразделение = ЭлементСписка.Значение;
	КонецЦикла;
	СценарийОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТиповУслугПриИзмененииНаСервере(СписокТиповУслуг, Сценарий)
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.ТипыУслуг.Очистить();
	Для каждого ЭлементСписка Из СписокТиповУслуг Цикл
		НовТип = СценарийОбъект.ТипыУслуг.Добавить();
		НовТип.ТипУслуги = ЭлементСписка.Значение;
	КонецЦикла;
	СценарийОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТиповОбращенийПриИзмененииНаСервере(СписокТиповОбращений, Сценарий)
	
	СценарийОбъект = Сценарий.ПолучитьОбъект();
	СценарийОбъект.ТипыОбращений.Очистить();
	
	Для Каждого ЭлементСписка Из СписокТиповОбращений Цикл
		НоваяСтрока = СценарийОбъект.ТипыОбращений.Добавить();
		НоваяСтрока.ТипОбращения = ЭлементСписка.Значение;
	КонецЦикла;
	
	СценарийОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "ЦветНачалоВыбора"
//
Процедура ЦветНачалоВыбораЗавершение(Результат, ЭлементИмя) Экспорт
	Если НЕ (Результат = Неопределено) И НЕ (Результат = КодВозвратаДиалога.Отмена) Тогда
		СтандартнаяОбработка = Ложь;
		ИдентификаторСостояния = СтрЗаменить(ЭлементИмя, "ИндексЦветаСостояния_Этап_", "");
		ИдентификаторСостояния = СтрЗаменить(ИдентификаторСостояния, "_", "-");
		Состояние = ИзменитьСостояниеИнтереса(ИдентификаторСостояния, Новый Структура("ИндексЦвета", Результат[0].Картинка));
		Идентификатор = СтрЗаменить(ЭлементИмя, "ИндексЦветаСостояния_", "");
		ЭтотОбъект["ИндексЦвета_" + Идентификатор] = Результат[0].Картинка;
		Элементы["Декорация_Цвет_" + Идентификатор].ЦветФона = Новый Цвет(Результат[0].Красный,
			 Результат[0].Зеленый, Результат[0].Синий);
		#Если Не ВебКлиент Тогда
			Оповестить("ИзмененоСостояниеИнтереса", Состояние.Ссылка);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтекстноеМенюТриггеров()
	Для каждого ЭлементТриггера Из СписокЭлементовТриггеров Цикл
		Для каждого ЭлементМеню Из Элементы[ЭлементТриггера.Значение].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			Если СтрНайти(ЭлементМеню.Имя, "СкопироватьТриггер") > 0 Или СтрНайти(ЭлементМеню.Имя,
				 "ПереместитьТриггер") > 0 Тогда
				Продолжить;
			КонецЕсли;
			ЭлементМеню.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСценариев 

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	РасширениеПодключено = Подключено;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСценарий(Команда)
	
	Если РасширениеПодключено Тогда
		
		Расширение = "xml";
		
		// Выбираем путь к файлу на диске.
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = Строка(Сценарий) + ".xml";
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Все файлы (*.%1)|*.%1';en='All files (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект);
		ВыборФайла.Показать(ОписаниеОповещения);
		
	Иначе  // веб клиент
		ПоказатьПредупреждение(,
			 НСтр("ru='В Веб-клиенте без установленного расширения работы с файлами данная функция не поддерживается.';
			|en='In Web client without installed extension to work with files,
			| this function is not supported.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПодготовитьИСохранитьXMLСценарий();
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СохранитьВФайлПослеСохранения", ЭтотОбъект);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ВыбранныеФайлы[0], АдресВХранилище));
	НачатьПолучениеФайлов(ОповещениеЗавершения, ПолучаемыеФайлы, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлПослеСохранения(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолученныеФайлы[0].Имя;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Сценарий сохранен в файл ';en='Script saved in file'") 
		+ ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьИСохранитьXMLСценарий()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ДополнительныеДанные = Новый ТаблицаЗначений;
	ДополнительныеДанные.Колонки.Добавить("Тип");
	ДополнительныеДанные.Колонки.Добавить("Ссылка");
	ДополнительныеДанные.Колонки.Добавить("Реквизит");
	ДополнительныеДанные.Колонки.Добавить("Значение");
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла); 
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Конфигурация");
	ЗаписьXML.ЗаписатьАтрибут("Имя", xmlстрока(Метаданные.Имя));
	ЗаписьXML.ЗаписатьАтрибут("Версия", xmlстрока(Метаданные.Версия));
	
	// Выгрузка справочника CRM_ВидыДелВзаимодействий
	ЗаписатьСправочник(ЗаписьXML, "CRM_ВидыДелВзаимодействий", ДополнительныеДанные);
	// Выгрузка справочника CRM_ТипУслуги
	ЗаписатьСправочник(ЗаписьXML, "CRM_ТипУслуги", ДополнительныеДанные);
	// Выгрузка справочника CRM_ОфисыКомпании
	ЗаписатьСправочник(ЗаписьXML, "CRM_ОфисыКомпании", ДополнительныеДанные);
	
	// Выгрузка справочника СтруктураПредприятия
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	CRM_СостоянияИнтересов.Подразделение КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Ссылка = &Сценарий
	|	И CRM_СостоянияИнтересов.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписатьПоПорядку(ЗаписьXML, Выборка.Ссылка, "СтруктураПредприятия", ДополнительныеДанные);
	КонецЦикла;		
	
	// Выгрузка справочника CRM_ВидыВзаимодействий
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// Справочник из нескольких записей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	CRM_ВидыВзаимодействий.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
	               |ГДЕ
	               |	(CRM_ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка)
	               |			ИЛИ CRM_ВидыВзаимодействий.СостояниеИнтереса В ИЕРАРХИИ (&Сценарий))";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	Запрос.УстановитьПараметр("Сценарий", Сценарий);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_ВидыВзаимодействий");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_ВидыВзаимодействий", Выборка.Ссылка, ДополнительныеДанные);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;		

	// Выгрузка справочника CRM_СостоянияИнтересов
	ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
	ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_СостоянияИнтересов");
	ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_СостоянияИнтересов", Сценарий, ДополнительныеДанные);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для Каждого ЭлТЧ Из Сценарий.ТипыУслуг Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		ЗаписатьРеквизитыТабличнойЧастиЭлемента(ЗаписьXML, "CRM_СостоянияИнтересов", "ТипыУслуг", ЭлТЧ, Сценарий);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	Выборка = Справочники.CRM_СостоянияИнтересов.Выбрать(Сценарий);
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_СостоянияИнтересов");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_СостоянияИнтересов", Выборка.Ссылка, ДополнительныеДанные); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Для Каждого ЭлТЧ Из Выборка.Ссылка.ТипыУслуг Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
			ЗаписатьРеквизитыТабличнойЧастиЭлемента(ЗаписьXML, "CRM_СостоянияИнтересов", "ТипыУслуг", ЭлТЧ, Выборка.Ссылка);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;	
	КонецЦикла;	
	
	// Выгрузка справочника CRM_ДействияТриггеров
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Действие КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.СостояниеИнтереса В ИЕРАРХИИ(&Сценарий)";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_ДействияТриггеров");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_ДействияТриггеров", Выборка.Ссылка, ДополнительныеДанные); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	// Выгрузка справочника ИдентификаторыОбъектовМетаданных
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.УсловиеСрабатывания КАК УсловиеСрабатывания
	|ПОМЕСТИТЬ Условия
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.СостояниеИнтереса В ИЕРАРХИИ(&Сценарий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.ОбъектОбработки КАК Ссылка
	|ИЗ
	|	Справочник.CRM_УсловияСрабатыванияТриггеров.ОбъектыОбработки КАК CRM_УсловияСрабатыванияТриггеровОбъектыОбработки
	|ГДЕ
	|	CRM_УсловияСрабатыванияТриггеровОбъектыОбработки.Ссылка В
	|			(ВЫБРАТЬ
	|				Условия.УсловиеСрабатывания КАК УсловиеСрабатывания
	|			ИЗ
	|				Условия КАК Условия)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_УсловияСрабатыванияТриггеров.ОбъектДействия
	|ИЗ
	|	Справочник.CRM_УсловияСрабатыванияТриггеров КАК CRM_УсловияСрабатыванияТриггеров
	|ГДЕ
	|	CRM_УсловияСрабатыванияТриггеров.Ссылка В
	|			(ВЫБРАТЬ
	|				Условия.УсловиеСрабатывания КАК УсловиеСрабатывания
	|			ИЗ
	|				Условия КАК Условия)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписатьПоПорядку(ЗаписьXML, Выборка.Ссылка, "ИдентификаторыОбъектовМетаданных", ДополнительныеДанные);
	КонецЦикла;
	
	// Выгрузка справочника CRM_УсловияСрабатыванияТриггеров
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.УсловиеСрабатывания КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.СостояниеИнтереса В ИЕРАРХИИ(&Сценарий)";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_УсловияСрабатыванияТриггеров");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_УсловияСрабатыванияТриггеров", Выборка.Ссылка, ДополнительныеДанные);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Для Каждого ЭлТЧ Из Выборка.Ссылка.ОбъектыОбработки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
			ЗаписатьРеквизитыТабличнойЧастиЭлемента(ЗаписьXML, "CRM_УсловияСрабатыванияТриггеров",
				 "ОбъектыОбработки", ЭлТЧ,
				 Выборка.Ссылка);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;	
	КонецЦикла;	
	
	// Выгрузка справочника CRM_Триггеры
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Триггеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.СостояниеИнтереса В ИЕРАРХИИ(&Сценарий)";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);			   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_Триггеры");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_Триггеры", Выборка.Ссылка, ДополнительныеДанные); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
	// Выгрузка справочника CRM_ВоронкиПродаж
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВоронкиПродаж.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж КАК CRM_ВоронкиПродаж
	|ГДЕ
	|	CRM_ВоронкиПродаж.СценарийИнтереса = &Сценарий
	|	И CRM_ВоронкиПродаж.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВоронкиПродаж.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Воронка = Выборка.Ссылка;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_ВоронкиПродаж");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_ВоронкиПродаж", Воронка, ДополнительныеДанные);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Выборка = Справочники.CRM_ВоронкиПродаж.Выбрать(Воронка);
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", "CRM_ВоронкиПродаж");
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, "CRM_ВоронкиПродаж", Выборка.Ссылка, ДополнительныеДанные); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Для Каждого ЭлТЧ Из Выборка.Ссылка.Состав Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
			ЗаписатьРеквизитыТабличнойЧастиЭлемента(ЗаписьXML, "CRM_ВоронкиПродаж", "Состав", ЭлТЧ, Выборка.Ссылка);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;	
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДополнительныеДанные");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(ДополнительныеДанные));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере 
Процедура ЗаписатьРеквизитыЭлемента(ЗаписьXML, ИмяСправочника, Эл, ДополнительныеДанные)
	Для Каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].СтандартныеРеквизиты Цикл
		ЗаписьXML.ЗаписатьАтрибут(Реквизит.Имя, xmlстрока(Эл[Реквизит.Имя]));
	КонецЦикла;
	Для Каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].Реквизиты Цикл
		Если ТипРеквизита(Реквизит) = "ХранилищеЗначения" Тогда
			ДанныеРеквизита = Эл[Реквизит.Имя].Получить();
			Если НЕ Эл.ЭтоГруппа И ДанныеРеквизита <> Неопределено Тогда
				
				Если ДанныеРеквизита <> Неопределено Тогда	
					ДобавитьДополнительныеДанные(ИмяСправочника, Эл.Ссылка, Реквизит.Имя, Эл[Реквизит.Имя], ДополнительныеДанные);	
				КонецЕсли;	
				
			КонецЕсли;
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(Реквизит.Имя, XMLСтрока(Эл[Реквизит.Имя]));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаСервере 
Процедура ЗаписатьРеквизитыТабличнойЧастиЭлемента(ЗаписьXML, ИмяСправочника, ИмяТЧ, ЭлТЧ, ЭлОбъект)
	ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", ИмяСправочника);
	ЗаписьXML.ЗаписатьАтрибут("ИмяТабличнойЧасти", ИмяТЧ);
	ЗаписьXML.ЗаписатьАтрибут("Ссылка", xmlстрока(ЭлОбъект));
	ТЧ = Метаданные.Справочники[ИмяСправочника].ТабличныеЧасти.Найти(ИмяТЧ);
	Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
		ЗаписьXML.ЗаписатьАтрибут(Реквизит.Имя, xmlстрока(ЭлТЧ[Реквизит.Имя]));
		Если ИмяСправочника = "CRM_ВоронкиПродаж" И ИмяТЧ = "Состав" И Реквизит.Имя = "КартаМаршрута" Тогда
				ЗаписьXML.ЗаписатьАтрибут(строка(Реквизит.Имя) + "_ТочныйТип", xmlстрока(Строка(ТипЗнч(ЭлТЧ[Реквизит.Имя]))));
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

&НаСервере 
Процедура ЗаписатьСправочник(ЗаписьXML, ИмяСправочника, ДополнительныеДанные)
	Выборка = Справочники[ИмяСправочника].Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", xmlстрока(ИмяСправочника));
		Для Каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].СтандартныеРеквизиты Цикл
			ЗаписьXML.ЗаписатьАтрибут(Реквизит.Имя, xmlстрока(Выборка.Ссылка[Реквизит.Имя]));
		КонецЦикла;
		Для Каждого Реквизит Из Метаданные.Справочники[ИмяСправочника].Реквизиты Цикл
			Если ТипРеквизита(Реквизит) = "ХранилищеЗначения" Тогда
				ДанныеРеквизита = Выборка.Ссылка[Реквизит.Имя].Получить();
				Если ДанныеРеквизита <> Неопределено Тогда	
					ДобавитьДополнительныеДанные(ИмяСправочника, Выборка.Ссылка, Реквизит.Имя,
						 Выборка.Ссылка[Реквизит.Имя],
						 ДополнительныеДанные);	
				КонецЕсли;	
			Иначе
				ЗаписьXML.ЗаписатьАтрибут(Реквизит.Имя, XMLСтрока(Выборка.Ссылка[Реквизит.Имя]));
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПрочитатьИВосстановитьXMLСценарий(Адрес)
	
	ДанныеСценария = ПолучитьИзВременногоХранилища(Адрес);
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла();
	ДанныеСценария.Записать(ВременноеИмяФайла);
	СсылкаНаСценарий = Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
	
	ТаблицаЗаменыСсылок = Новый ТаблицаЗначений;
	ТаблицаЗаменыСсылок.Колонки.Добавить("ГУИД_Файл");
	ТаблицаЗаменыСсылок.Колонки.Добавить("ГУИД_База");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременноеИмяФайла); 
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда		
			Если ЧтениеXML.Имя = "Конфигурация" Тогда
				СтруктураАтрибутов = Новый Структура;
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						СтруктураАтрибутов.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);		
					КонецЦикла;
				КонецЕсли;
				Если Метаданные.Имя = "CRM" Тогда
					Если СтруктураАтрибутов.Имя <> "CRM" Тогда
						Возврат Неопределено;
					КонецЕсли;
				ИначеЕсли СтруктураАтрибутов.Имя = "CRM" Тогда
					Возврат Неопределено;
				КонецЕсли;	
			КонецЕсли;
			Если ЧтениеXML.Имя = "Справочник" Тогда
				Об = ЗагрузитьСправочник(ЧтениеXML, ТаблицаЗаменыСсылок);
				Если ТипЗнч(Об) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") И Об.Уровень() = 0 Тогда
					СсылкаНаСценарий = Об;
					Выборка = Справочники.CRM_СостоянияИнтересов.Выбрать(Об);
					Пока Выборка.Следующий() Цикл
						ЭтапСценария = Выборка.Ссылка.ПолучитьОбъект();
						Если ЭтапСценария.ИдентификаторПредопределенногоЭлемента = ""
							 И ЭтапСценария.ВидСостояния <> Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
							 И ЭтапСценария.ВидСостояния <> Перечисления.CRM_ВидыСостоянияИнтереса.Первое 
							 И ЭтапСценария.ВидСостояния <> Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
							ЭтапСценария.УстановитьПометкуУдаления(Истина);
							ЭтапСценария.Записать();
							ПометитьЭтапыВоронки(Об, Выборка.Ссылка);
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			Если ЧтениеXML.Имя = "ТабличнаяЧасть" Тогда
				ЗагрузитьТабличнуюЧасть(ЧтениеXML, ТаблицаЗаменыСсылок);
			КонецЕсли;	
			Если ЧтениеXML.Имя = "ValueStorage" Тогда
				Если СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Тогда 
					ДополнительныеДанные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML).Получить();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	ЧтениеXML.Закрыть();
	ВосстановитьДополнительныеДанные(ДополнительныеДанные, ТаблицаЗаменыСсылок);
	УдалитьФайлы(ВременноеИмяФайла);
	Возврат СсылкаНаСценарий;

КонецФункции

&НаСервере
Функция ЗагрузитьСправочник(ЧтениеXML, ТаблицаЗаменыСсылок)
	
	НовыйЭлемент = Ложь;
	
	СтруктураАтрибутов = Новый Структура;
	Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			СтруктураАтрибутов.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураАтрибутов.Свойство("ИмяМетаданных")
		 И СтруктураАтрибутов.ИмяМетаданных = "ИдентификаторыОбъектовМетаданных" Тогда
		 РодительВБазе = ТаблицаЗаменыСсылок.Найти(СтруктураАтрибутов.Родитель, "ГУИД_Файл");
		 Если РодительВБазе = Неопределено Тогда
			 РодительВБазе = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
		 Иначе
			 РодительВБазе =
			 	Справочники[СтруктураАтрибутов.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(РодительВБазе.ГУИД_База));
		 КонецЕсли;	 
         СсылкаНаОбъект = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(СтруктураАтрибутов.Наименование,
         	 Истина,
         	 РодительВБазе);
		 НС = ТаблицаЗаменыСсылок.Добавить();
		 НС.ГУИД_Файл = СтруктураАтрибутов.Ссылка;
		 НС.ГУИД_База = xmlстрока(СсылкаНаОбъект);
		 Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	ЗаменаСсылок = ТаблицаЗаменыСсылок.Найти(СтруктураАтрибутов.Ссылка, "ГУИД_Файл");
	Если ЗаменаСсылок = Неопределено Тогда
		
		Если СтруктураАтрибутов.Свойство("Предопределенный") И СтруктураАтрибутов.Предопределенный = "true" Тогда
			СсылкаНаОбъект = НайтиПредопределенныйЭлемент(СтруктураАтрибутов.ИмяМетаданных,
				 СтруктураАтрибутов.ИмяПредопределенныхДанных);
			НС = ТаблицаЗаменыСсылок.Добавить();
			НС.ГУИД_Файл = СтруктураАтрибутов.Ссылка;
			НС.ГУИД_База = xmlстрока(СсылкаНаОбъект);
		КонецЕсли;
		
	Иначе
		
		СтруктураАтрибутов.Ссылка = ЗаменаСсылок.ГУИД_База;
		СсылкаНаОбъект = Неопределено;
		
	КонецЕсли;   
	
	Если СтруктураАтрибутов.Свойство("Родитель") Тогда
		
		ЗаменаСсылок = ТаблицаЗаменыСсылок.Найти(СтруктураАтрибутов.Родитель, "ГУИД_Файл");
		Если ЗаменаСсылок <> Неопределено Тогда
			
			СтруктураАтрибутов.Родитель = ЗаменаСсылок.ГУИД_База;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		
		СсылкаНаОбъект =
			Справочники[СтруктураАтрибутов.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураАтрибутов.Ссылка));
		Если СтруктураАтрибутов.Свойство("Родитель") Тогда
			СсылкаНаРодитель =
				Справочники[СтруктураАтрибутов.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураАтрибутов.Родитель));
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СтрНайти(Строка(СсылкаНаОбъект), "Объект не найден") <> 0 Тогда
		Об = Справочники[СтруктураАтрибутов.ИмяМетаданных].СоздатьЭлемент();
		Об.УстановитьСсылкуНового(СсылкаНаОбъект);
		НовыйЭлемент = Истина;
	Иначе
		Об = СсылкаНаОбъект.ПолучитьОбъект();
	КонецЕсли;
	
	Если МожноИзменятьЭлемент(Об.Ссылка) Тогда
		
		Если СтруктураАтрибутов.Свойство("Родитель") Тогда
			Об.Родитель = СсылкаНаРодитель;
		КонецЕсли;
		
		Если СтруктураАтрибутов.Свойство("Родитель") Тогда
			ЗаполнитьЗначенияСвойств(Об, СтруктураАтрибутов, , "Ссылка,Родитель");
		Иначе
			ЗаполнитьЗначенияСвойств(Об, СтруктураАтрибутов, , "Ссылка");
		КонецЕсли;
		
		Для Каждого Реквизит Из Метаданные.Справочники[СтруктураАтрибутов.ИмяМетаданных].Реквизиты Цикл
			Если СтруктураАтрибутов.Свойство(Реквизит.Имя) Тогда
				ОпределенныйТип = ТипРеквизита(Реквизит);
				Если ОпределенныйТип <> "Простой тип" И ОпределенныйТип <> "ХранилищеЗначения"
					 И СтруктураАтрибутов[Реквизит.Имя] <> "" Тогда
					Об[Реквизит.Имя] = НайтиОбъект(ОпределенныйТип, СтруктураАтрибутов[Реквизит.Имя], ТаблицаЗаменыСсылок);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого МетаТЧ Из Метаданные.Справочники[СтруктураАтрибутов.ИмяМетаданных].ТабличныеЧасти Цикл
			Если ТипЗнч(Об) <> Тип("СправочникОбъект.CRM_ВоронкиПродаж") Тогда
				Об[МетаТЧ.Имя].Очистить();
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	Об.ОбменДанными.Загрузка = Истина;
	Об.Записать();
	
	Возврат Об.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧасть(ЧтениеXML, ТаблицаЗаменыСсылок)
	
	СтруктураАтрибутов = Новый Структура;
	Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			СтруктураАтрибутов.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗаменаСсылок = ТаблицаЗаменыСсылок.Найти(СтруктураАтрибутов.Ссылка, "ГУИД_Файл");
	Если ЗаменаСсылок <> Неопределено Тогда
		
		СтруктураАтрибутов.Ссылка = ЗаменаСсылок.ГУИД_База;
		
	КонецЕсли;
	
	СсылкаНаОбъект =
		Справочники[СтруктураАтрибутов.ИмяМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураАтрибутов.Ссылка));
	
	СтруктураСтрока = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Справочники[СтруктураАтрибутов.ИмяМетаданных].ТабличныеЧасти[СтруктураАтрибутов.ИмяТабличнойЧасти].Реквизиты Цикл
		СтруктураСтрока.Вставить(Строка(Реквизит.Имя));
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураСтрока, СтруктураАтрибутов);
	
	Для Каждого Реквизит Из Метаданные.Справочники[СтруктураАтрибутов.ИмяМетаданных].ТабличныеЧасти[СтруктураАтрибутов.ИмяТабличнойЧасти].Реквизиты Цикл
		Если СтруктураАтрибутов.Свойство(Реквизит.Имя) Тогда
			Если СтруктураАтрибутов.Свойство(Строка(Реквизит.Имя) + "_ТочныйТип") Тогда
				 ТочныйТип = СтруктураАтрибутов[Строка(Реквизит.Имя) + "_ТочныйТип"];
				 Если ТочныйТип = "Строка" Тогда
					 ОпределенныйТип = "Простой тип";
				 КонецЕсли;	 
			Иначе
			ОпределенныйТип = ТипРеквизита(Реквизит);
			КонецЕсли;
			Если ОпределенныйТип <> "Простой тип" И СтруктураАтрибутов[Реквизит.Имя] <> "" Тогда
				СтруктураСтрока[Реквизит.Имя] = НайтиОбъект(ОпределенныйТип, СтруктураАтрибутов[Реквизит.Имя], ТаблицаЗаменыСсылок);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Об = СсылкаНаОбъект.ПолучитьОбъект();
	НетСтроки = Истина;
	
	Для Каждого СтрТаб Из Об[СтруктураАтрибутов.ИмяТабличнойЧасти] Цикл
		ВсеРеквизитыСовпали = Истина;
		Для Каждого Рек Из  Метаданные.Справочники[СтруктураАтрибутов.ИмяМетаданных].ТабличныеЧасти[СтруктураАтрибутов.ИмяТабличнойЧасти].Реквизиты Цикл
			Если СтруктураСтрока.Свойство(Реквизит.Имя) Тогда
				Если ТипЗнч(СтрТаб[Рек.Имя]) = Тип("Число") И ТипЗнч(СтруктураСтрока[Рек.Имя]) <> Тип("Число") Тогда
					СтруктураСтрока[Реквизит.Имя] = Число(СтруктураСтрока[Реквизит.Имя]);
				КонецЕсли;	
				Если СтрТаб[Рек.Имя] <> СтруктураСтрока[Рек.Имя] Тогда
					   ВсеРеквизитыСовпали = Ложь;
				КонецЕсли;
            КонецЕсли;
		КонецЦикла;
		Если ВсеРеквизитыСовпали Тогда
			НетСтроки = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если НетСтроки Тогда
		НС = Об[СтруктураАтрибутов.ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтруктураСтрока);
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаписатьПоПорядку(ЗаписьXML, Знач Эл, ИмяСправочника, ДополнительныеДанные)
	
	Массив = Новый Массив;
	Пока Эл.Родитель <> Справочники[ИмяСправочника].ПустаяСсылка() Цикл
		Массив.Вставить(0, Эл);
		Эл = Эл.Родитель;
	КонецЦикла;	
	Массив.Вставить(0, Эл);
	
	Для ПЦ = 0 По Массив.ВГраница() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Справочник");
		ЗаписьXML.ЗаписатьАтрибут("ИмяМетаданных", ИмяСправочника);
		ЗаписатьРеквизитыЭлемента(ЗаписьXML, ИмяСправочника, Массив[ПЦ], ДополнительныеДанные);  	
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;	
	
КонецПроцедуры	

Функция ТипРеквизита(Реквизит)
	
	Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_ВидыДелВзаимодействий")) Тогда
		Возврат "Справочник.CRM_ВидыДелВзаимодействий";
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_СостоянияИнтересов")) Тогда
		Возврат "Справочник.CRM_СостоянияИнтересов";	  
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
		Возврат "Справочник.СтруктураПредприятия";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_ОфисыКомпании")) Тогда
		Возврат "Справочник.CRM_ОфисыКомпании";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_ТипУслуги")) Тогда
		Возврат "Справочник.CRM_ТипУслуги";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_ДействияТриггеров")) Тогда
		Возврат "Справочник.CRM_ДействияТриггеров";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.CRM_УсловияСрабатыванияТриггеров")) Тогда
		Возврат "Справочник.CRM_УсловияСрабатыванияТриггеров";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")) Тогда
		Возврат "Справочник.ИдентификаторыОбъектовМетаданных";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ВидыСостоянияИнтереса")) Тогда
		Возврат "Перечисление.CRM_ВидыСостоянияИнтереса";
    ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ВидыСобытий")) Тогда
		Возврат "Перечисление.CRM_ВидыСобытий";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ВходящееИсходящееСобытие")) Тогда
		Возврат "Перечисление.CRM_ВходящееИсходящееСобытие";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ПланируемыеТипыАктивности")) Тогда
		Возврат "Перечисление.CRM_ПланируемыеТипыАктивности";
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ЗавершаемыеТипыАктивности")) Тогда
		Возврат "Перечисление.CRM_ЗавершаемыеТипыАктивности";
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ОтборыЗавершаемыхАктивностей")) Тогда
		Возврат "Перечисление.CRM_ОтборыЗавершаемыхАктивностей";
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_СобытияТриггеров")) Тогда
		Возврат "Перечисление.CRM_СобытияТриггеров";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ПериодичностьОповещений")) Тогда
		Возврат "Перечисление.CRM_ПериодичностьОповещений";	
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ПеречислениеСсылка.CRM_ВидыЭтаповВоронкиПродаж")) Тогда
		Возврат "Перечисление.CRM_ВидыЭтаповВоронкиПродаж";	   
	ИначеЕсли Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
		Возврат "ХранилищеЗначения";
	КонецЕсли;
	
	Возврат "Простой тип";
КонецФункции	

Функция НайтиОбъект(ОпределенныйТип, Идентификатор, ТаблицаЗаменыСсылок)
	Если СтрНайти(ОпределенныйТип, "Справочник.") <> 0 Тогда
		Попытка
			
			ЗаменаСсылок = ТаблицаЗаменыСсылок.Найти(Идентификатор, "ГУИД_Файл");
			Если ЗаменаСсылок <> Неопределено Тогда
				
				Идентификатор = ЗаменаСсылок.ГУИД_База;
				
			КонецЕсли;
			
			Ссылка = Справочники[СтрЗаменить(ОпределенныйТип, "Справочник.",
				 "")].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		Исключение
			ШаблонСообщенияПользователю = НСтр("ru='Не удалось найти элемент объекта %1 %2';
				|en='Failed to find object item %1 %2'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПользователю,
																											ОпределенныйТип, Идентификатор));
		КонецПопытки;
	ИначеЕсли СтрНайти(ОпределенныйТип, "Перечисление.") <> 0 Тогда
		Ссылка = Перечисления[СтрЗаменить(ОпределенныйТип, "Перечисление.", "")][Идентификатор];		
	КонецЕсли;	
	Возврат Ссылка;	
КонецФункции

Процедура ДобавитьДополнительныеДанные(Тип, Ссылка, Реквизит, Значение, ДополнительныеДанные)
	НС = ДополнительныеДанные.Добавить();
	НС.Тип = Тип;
	НС.Ссылка = xmlстрока(Ссылка);
	НС.Реквизит = Реквизит;
	НС.Значение = Значение;
КонецПроцедуры	

Процедура ВосстановитьДополнительныеДанные(ДополнительныеДанные, ТаблицаЗаменыСсылок)
	Для каждого СтрДопДанных Из ДополнительныеДанные Цикл
		
		Ссылка = НайтиОбъект("Справочник." + СтрДопДанных.Тип, СтрДопДанных.Ссылка, ТаблицаЗаменыСсылок);
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Об = Ссылка.ПолучитьОбъект();
			Об[СтрДопДанных.Реквизит] = СтрДопДанных.Значение;
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Функция НайтиПредопределенныйЭлемент(ИмяМетаданных, ИмяПредопределенныхДанных)
	Запрос = Новый Запрос;
	Запрос.Текст =     "ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Спр
	|ГДЕ
	|	Спр.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
	|	И Спр.Предопределенный = Истина" ;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьСценарий(Команда)
	
	// Создание из файла
	ИмяФайла = "";
	Расширение = "xml";
	
	Если РасширениеПодключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru='Выбор файла';en='Select file'");
		ВыборФайла.Фильтр =
			НСтр("ru='Схема с настройками (.xml) (*.xml)|*.xml';en='Schema with settings (.xml) (* .xml) | * .xml'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаНаДискеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, , ВыборФайла, Истина, УникальныйИдентификатор);
	Иначе 
		ПоказатьПредупреждение(,
			 НСтр("ru='В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.';
			|en='The adding files is not supported in the Web client without an installed extension to work with files.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаДискеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы <> Неопределено Тогда
		ВосстановленныйСценарий = ПрочитатьИВосстановитьXMLСценарий(ПомещенныеФайлы[0].Хранение);
		Если ВосстановленныйСценарий <> Неопределено Тогда
			ОбновитьФормуНаСервере(ВосстановленныйСценарий);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Файл не предназначен для загрузки в данную конфигурацию.';
				|en='File is not intended for import to this configuration.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбновитьФормуНаСервере(ВосстановленныйСценарий)
	
	Сценарий = ВосстановленныйСценарий;		
	
	Идентификатор = СтрЗаменить(Строка(Сценарий.УникальныйИдентификатор()), "-", "_");
	Команда = Команды.Найти("ВыбратьСценарий" + Идентификатор);
	Если Команда = Неопределено Тогда
		Команда = Команды.Добавить("ВыбратьСценарий" + Идентификатор);
		Команда.Заголовок = Строка(Сценарий);
		Команда.Действие = "ВыборСценария";
	КонецЕсли;
	
	Кнопка = Элементы.Найти("ВыбратьСценарий" + Идентификатор);
	Если Кнопка = Неопределено Тогда
		Кнопка = Элементы.Добавить("ВыбратьСценарий" + Идентификатор, Тип("КнопкаФормы"), Элементы.ГруппаСписокСценариев);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = Кнопка.Имя;
	КонецЕсли;
	НаименованиеСценария = Сценарий.Наименование;
	Элементы.ГруппаТекущийСценарий.Заголовок = "   " + НаименованиеСценария + "   ";
	СценарийПриИзмененииСервер();
	СоздатьЭлементыТриггеров();
	ИзменитьКонтекстноеМенюТриггеров();
	
КонецПроцедуры

&НаСервере
Функция МожноИзменятьЭлемент(СсылкаНаЭлемент)
	МожноИзменять = Истина;
	Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.СтруктураПредприятия") ИЛИ 
		ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		МожноИзменять = Ложь;
	КонецЕсли;	
	Возврат МожноИзменять;
КонецФункции

&НаСервере 
Процедура ПометитьЭтапыВоронки(Сценарий, Этап)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	CRM_ВоронкиПродажСостав.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	               |ГДЕ
	               |	CRM_ВоронкиПродажСостав.КартаМаршрута = &Сценарий
	               |	И CRM_ВоронкиПродажСостав.ТочкаМаршрута = &Этап";
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", Этап);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		   Об = Выборка.Ссылка.ПолучитьОбъект();
		   Если Об.Состав.Количество() = 1 Тогда
			   Об.УстановитьПометкуУдаления(Истина);
		   КонецЕсли;
		   МассивСтрок = Новый Массив;
		   Для Каждого Стр Из Об.Состав Цикл
			   Если Стр.КартаМаршрута = Сценарий И Стр.ТочкаМаршрута = Этап Тогда
				   МассивСтрок.Добавить(Стр);
			   КонецЕсли;	   
		   КонецЦикла; 
		   Для Каждого УдЭл Из МассивСтрок Цикл
			   Об.Состав.Удалить(УдЭл);
		   КонецЦикла;   
		   Об.Записать();
	КонецЦикла;	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПоказыватьОтмеченныеВручнуюОбращения(ПоказыватьОтмеченныеВручнуюОбращения, Сценарий)
	ХранилищеОбщихНастроек.Сохранить("МоиПродажиПоказыватьОтмеченныеВручнуюОбращения", Сценарий, 
		ПоказыватьОтмеченныеВручнуюОбращения);
КонецПроцедуры
	
#КонецОбласти
