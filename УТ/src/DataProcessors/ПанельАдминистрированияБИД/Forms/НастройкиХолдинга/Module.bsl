#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
	МодульИнтеграцияС1СДокументооборот3.УстановитьУсловноеОформлениеУзловХолдинга(ЭтотОбъект);
	
	АдресЦентральногоУзла = Параметры.АдресЦентральногоУзла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьПодключение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПодключениеКЦентральномуУзлу", Истина);
	
	ОткрытьФорму(
		ИмяФормыПараметров,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗаполнитьУзлыИПользователей();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУзлыКОД

&НаКлиенте
Процедура УзлыКОДПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.УзлыКОД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ПользователиУзлов.ОтборСтрок = Неопределено;
		Возврат;
	КонецЕсли;
	
	Элементы.ПользователиУзлов.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"ИдентификаторУзла", ТекущиеДанные.ИдентификаторУзла);
	
	МожноАктивировать = Ложь;
	МожноДеактивировать = Ложь;
	Если Не ТекущиеДанные.ЦентральныйУзел И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторУзла) Тогда
		МожноАктивировать = (ТекущиеДанные.Активен = 1);
		МожноДеактивировать = Не МожноАктивировать;
	КонецЕсли;
	Элементы.УзлыКОДАктивировать.Доступность = МожноАктивировать;
	Элементы.УзлыКОДДеактивировать.Доступность = МожноДеактивировать;
	
	Элементы.УзлыКОДКонтекстноеМенюАдресХостаВнешнихНавигационныхСсылок.Доступность =
		Не ПустаяСтрока(ТекущиеДанные.АдресВебСервиса);
	Элементы.УзлыКОДКонтекстноеМенюОткрытьУзел.Доступность = Не ПустаяСтрока(ТекущиеДанные.АдресВебСервиса);
	Элементы.УзлыКОДКонтекстноеМенюИзменитьУзел.Доступность = Не ТекущиеДанные.ЦентральныйУзел
		И Не ПустаяСтрока(ТекущиеДанные.АдресВебСервиса);
	
	Элементы.ПользователиСменитьУзел.Доступность = ТекущиеДанные.ЦентральныйУзел
		Или Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторУзла)
		Или МожноДеактивировать;
	Элементы.ПользователиУзловКонтекстноеМенюГруппаУзел.Доступность = Элементы.ПользователиСменитьУзел.Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыКОДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.АдресВебСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьОбъектДО(
		"e1cib/command/Обработка.ПанельАдминистрированияБесшовнойИнтеграции.Команда.НастройкиИнтеграции",
		ТекущиеДанные.АдресВебСервиса);
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыКОДПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
			Или ПараметрыПеретаскивания.Значение.Количество() = 0
			Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = УзлыКОД.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.АдресВебСервиса) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыКОДПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = УзлыКОД.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователей = Новый Массив;
	Для Каждого СтрокаПользователиУзлов Из ПараметрыПеретаскивания.Значение Цикл
		СтруктураДляЗаполнения = Новый Структура("Пользователь");
		Если ТипЗнч(СтрокаПользователиУзлов) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДляЗаполнения, СтрокаПользователиУзлов);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураДляЗаполнения.Пользователь) Тогда
			Возврат;
		КонецЕсли;
		МассивПользователей.Добавить(СтруктураДляЗаполнения.Пользователь);
	КонецЦикла;
	
	УстановитьУзелПользователей(МассивПользователей, ТекущиеДанные.ИдентификаторУзла);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура УзлыКОДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.УзлыКОДКонтекстноеМенюИзменитьУзел.Доступность Тогда
		АктивироватьТекущийУзел();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователиУзлов

&НаКлиенте
Процедура ПользователиУзловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПользователиУзловПользователь" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Пользователь);
		
	ИначеЕсли Поле.Имя = "ПользователиУзловИмяУзла" Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"ИдентификаторУзла",
			ИдентификаторСтроки,
			УзлыКОД.ПолучитьЭлементы(),
			ТекущиеДанные.ИдентификаторУзла,
			Ложь);
		Элементы.УзлыКОД.ТекущаяСтрока = ИдентификаторСтроки;
		
	ИначеЕсли Поле.Имя = "ПользователиУзловФиксирован" Тогда
		Если ТекущиеДанные.Фиксирован = 0 Тогда
			БылиИзменения = ОткрепитьУзелНаСервере();
		Иначе
			БылиИзменения = ЗакрепитьУзелНаСервере();
		КонецЕсли;
		Если БылиИзменения Тогда
			ОбновитьДанные();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АдресХостаВнешнихНавигационныхСсылок(Команда)
	
	ТекущиеДанные = Элементы.УзлыКОД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.АдресВебСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЦентральныйУзел Тогда
		ИдентификаторУзла = "";
	Иначе
		ИдентификаторУзла = ТекущиеДанные.ИдентификаторУзла;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"АдресХостаВнешнихНавигационныхСсылокПриИзменении",
		ЭтотОбъект,
		ИдентификаторУзла);
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБИД.Форма.АдресХостаВнешнихНавигационныхСсылок",
		ДанныеУзла(ИдентификаторУзла),,,,,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресХостаВнешнихНавигационныхСсылокПриИзменении(Результат, ИдентификаторУзла) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУзла = ДанныеУзла(ИдентификаторУзла);
	ДанныеУзла.АдресХостаВнешнихНавигационныхСсылок = Результат.АдресХостаВнешнихНавигационныхСсылок;
	ДанныеУзла.ТипРасположенияХостаВнешнихНавигационныхСсылок = Результат.ТипРасположенияХостаВнешнихНавигационныхСсылок;
	
	УстановитьДанныеУзла(ИдентификаторУзла, ДанныеУзла);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьУзел(Команда)
	
	АктивироватьТекущийУзел();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеактивироватьУзел(Команда)
	
	ТекущиеДанные = Элементы.УзлыКОД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеактивироватьУзелНаСервере(ТекущиеДанные.ИдентификаторУзла);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрепитьУзел(Команда)
	
	Если ЗакрепитьУзелНаСервере() Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрепитьУзел(Команда)
	
	Если ОткрепитьУзелНаСервере() Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУзел(Команда)
	
	ТекущиеДанные = Элементы.УзлыКОД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.АдресВебСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот3Клиент.ОткрытьОбъектДО(
		"e1cib/command/Обработка.ПанельАдминистрированияБесшовнойИнтеграции.Команда.НастройкиИнтеграции",
		ТекущиеДанные.АдресВебСервиса);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьУзел(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СменитьУзелЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБИД.Форма.ВыборУзла",
		Новый Структура("УзлыКОД", УзлыКОД),
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АктивироватьТекущийУзел()
	
	ТекущиеДанные = Элементы.УзлыКОД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("АктивироватьТекущийУзелЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ИдентификаторУзла, АдресВебСервиса, ИмяУзла",
		ТекущиеДанные.ИдентификаторУзла, ТекущиеДанные.АдресВебСервиса, ТекущиеДанные.ИмяУзла);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБИД.Форма.ПодключениеКУзлу",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьТекущийУзелЗавершение(ДанныеУзла, ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеУзла) Или ДанныеУзла = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеУзла(Знач ИдентификаторУзла)
	
	Возврат РегистрыСведений.ДанныеУзлов1СДокументооборота.ДанныеУзла(ИдентификаторУзла);
	
КонецФункции

&НаСервере
Процедура ДеактивироватьУзелНаСервере(Знач ИдентификаторУзла)
	
	РегистрыСведений.ДанныеУзлов1СДокументооборота.ДеактивироватьУзел(ИдентификаторУзла);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуУзла(СтрокаДеревоУзлыКОД, СтрокаДанныеУзловКОД, АдресВебСервиса)
	
	СтрокаДанныеУзловКОД.ИмяУзла = СтрокаДеревоУзлыКОД.ИмяУзла;
	СтрокаДанныеУзловКОД.ИдентификаторУзла = СтрокаДеревоУзлыКОД.ИдентификаторУзла;
	
	Если ПустаяСтрока(АдресВебСервиса) Тогда
		СтрокаДеревоУзлыКОД.Активен = 1;
		СтрокаДеревоУзлыКОД.ПредставлениеУзла = СтрокаДеревоУзлыКОД.ИмяУзла;
	Иначе
		СтрокаДанныеУзловКОД.АдресВебСервиса = АдресВебСервиса;
		
		СтрокаДеревоУзлыКОД.Активен = 2;
		СтрокаДеревоУзлыКОД.АдресВебСервиса = АдресВебСервиса;
		СтрокаДеревоУзлыКОД.ПредставлениеУзла = СтрШаблон("%1 (%2)", СтрокаДеревоУзлыКОД.ИмяУзла, АдресВебСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзлыИПользователей()
	
	Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотДоступен;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси(
		Ложь,
		АдресЦентральногоУзла);
	Если Прокси = Неопределено Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
		Возврат;
	КонецЕсли;
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "getAllData";
	Условие.value = Истина;
	УсловияОтбора.Добавить(Условие);
	
	ОтветСписокОбъектов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		"DMDataExchangeNode",
		СписокУсловий);
	УзлыXDTO = ОтветСписокОбъектов.items; // СписокXDTO
	
	ПерезаполнитьДеревоУзлыКОД(УзлыXDTO);
	
	СоответствиеПользователиУзлов = Новый Соответствие;
	
	КоличествоСтрок = УзлыXDTO.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		СтрокаДерева = УзлыXDTO[КоличествоСтрок - НомерСтроки];
		УзелXDTO = СтрокаДерева.object;
		Для Каждого ПользовательДО Из УзелXDTO.users Цикл
			ПользовательИС =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаОбъектаИСПоЗначениюДляЗаполнения(
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипПользователи(),
					ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеДляЗаполненияРеквизитаОбъектаИС(ПользовательДО),,
					Ложь);
			Если ЗначениеЗаполнено(ПользовательИС) Тогда
				Если СоответствиеПользователиУзлов[ПользовательИС] = Неопределено Тогда
					СоответствиеПользователиУзлов[ПользовательИС] = Новый Массив;
					СоответствиеПользователиУзлов[ПользовательИС].Добавить(УзелXDTO);
				Иначе
					СоответствиеПользователиУзлов[ПользовательИС].Добавить(УзелXDTO);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Подразделение КАК Подразделение,
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Служебный
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование");
	Выборка = Запрос.Выполнить().Выбрать();
	
	МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
	
	ПользователиУзлов.Очистить();
	
	НазначенныеУзлы = РегистрыСведений.СоответствиеПользователейУзлам1СДокументооборота.УзлыПользователей();
	
	Пока Выборка.Следующий() Цикл
		СтрокаПользователиУзлов = ПользователиУзлов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПользователиУзлов, Выборка, "Пользователь, Подразделение");
		
		УзелПользователя = Неопределено;
		
		СтрокаПользователиУзлов.Фиксирован = 1;
		ИдентификаторНазначенногоУзла = НазначенныеУзлы[Выборка.Пользователь];
		Если ИдентификаторНазначенногоУзла <> Неопределено Тогда
			НайденныеСтроки = ДанныеУзловКОД.НайтиСтроки(Новый Структура("ИдентификаторУзла", ИдентификаторНазначенногоУзла));
			Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].АдресВебСервиса) Тогда
				СтрокаПользователиУзлов.Фиксирован = 0;
				УзелПользователя = НайденныеСтроки[0];
			Иначе
				// Если фиксированный узел не активен или его в холдинге вообще нет - удалим устаревшую запись РС.
				РегистрыСведений.СоответствиеПользователейУзлам1СДокументооборота.ОчиститьПривязку(Выборка.Пользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если УзелПользователя = Неопределено Тогда
			УзлыXDTOПользователя = СоответствиеПользователиУзлов[Выборка.Пользователь];
			Если УзлыXDTOПользователя = Неопределено Тогда
				УзелПользователя = ДанныеУзловКОД[0]; // Центральный узел.
			Иначе
				ПриоритетныйУзел = МодульИнтеграцияС1СДокументооборот3.ПриоритетныйУзел(
					Выборка.Пользователь,
					УзлыXDTOПользователя);
				Если ПриоритетныйУзел = "" Тогда
					УзелПользователя = ДанныеУзловКОД[0]; // Центральный узел.
				Иначе
					НайденныеСтроки = ДанныеУзловКОД.НайтиСтроки(Новый Структура("ИдентификаторУзла", ПриоритетныйУзел));
					УзелПользователя = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПользователиУзлов.ИмяУзла = УзелПользователя.ИмяУзла;
		СтрокаПользователиУзлов.ИдентификаторУзла = УзелПользователя.ИдентификаторУзла;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(ПользователиУзлов, "Пользователь", "НомерКартинки");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоУзлыКОД(УзлыXDTO)
	
	ДанныеУзловКОД.Очистить();
	
	ДанныеУзлов = РегистрыСведений.ДанныеУзлов1СДокументооборота.ДанныеУзлов();
	
	СтрокаЦентральныйУзелXDTO = Неопределено;
	НеВыведенныеСтроки = Новый Массив;
	КоличествоСтрок = УзлыXDTO.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		СтрокаДерева = УзлыXDTO[КоличествоСтрок - НомерСтроки];
		Если СтрокаДерева.object.isCentral Тогда
			СтрокаЦентральныйУзелXDTO = СтрокаДерева;
		Иначе
			НеВыведенныеСтроки.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	ДеревоУзлыКОД = РеквизитФормыВЗначение("УзлыКОД");
	
	ДеревоУзлыКОД.Строки.Очистить();
	ДеревоУзлыКОД.Строки.Добавить().ПредставлениеУзла = НСтр("ru = 'Все пользователи'");
	
	СтрокаДеревоУзлыКОД = ДеревоУзлыКОД.Строки.Добавить();
	СтрокаДеревоУзлыКОД.ИмяУзла = СтрокаЦентральныйУзелXDTO.object.name;
	СтрокаДеревоУзлыКОД.ИдентификаторУзла = СтрокаЦентральныйУзелXDTO.object.objectID.ID;
	СтрокаДеревоУзлыКОД.ЦентральныйУзел = Истина;
	ЗаполнитьСтрокуУзла(СтрокаДеревоУзлыКОД, ДанныеУзловКОД.Добавить(), АдресЦентральногоУзла);
	
	Пока НеВыведенныеСтроки.Количество() > 0 Цикл
		КоличествоСтрок = НеВыведенныеСтроки.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Индекс = КоличествоСтрок - НомерСтроки;
			СтрокаДерева = НеВыведенныеСтроки[Индекс];
			ПараметрыОтбора = Новый Структура("ИдентификаторУзла", СтрокаДерева.parentID.ID);
			НайденныеСтроки = ДеревоУзлыКОД.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаРодитель = НайденныеСтроки[0];
			Иначе
				Продолжить;
			КонецЕсли;
			СтрокаДеревоУзлыКОД = СтрокаРодитель.Строки.Добавить();
			УзелXDTO = СтрокаДерева.object;
			СтрокаДеревоУзлыКОД.ИмяУзла = УзелXDTO.name;
			СтрокаДеревоУзлыКОД.ИдентификаторУзла = УзелXDTO.objectID.ID;
			АдресВебСервиса = "";
			ДанныеУзла = ДанныеУзлов[СтрокаДеревоУзлыКОД.ИдентификаторУзла];
			Если ДанныеУзла <> Неопределено Тогда
				АдресВебСервиса = ДанныеУзла.АдресВебСервиса;
			КонецЕсли;
			ЗаполнитьСтрокуУзла(СтрокаДеревоУзлыКОД, ДанныеУзловКОД.Добавить(), АдресВебСервиса);
			НеВыведенныеСтроки.Удалить(Индекс);
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоУзлыКОД, "УзлыКОД");
	
КонецПроцедуры

// Проверяет подключение к ДО, выводя окно авторизации, если необходимо, и изменяя форму согласно результату.
//
&НаКлиенте
Процедура ПроверитьПодключение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,
		ЭтотОбъект,,
		Ложь,
		Истина,
		АдресЦентральногоУзла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗаполнитьУзлыИПользователей();
	Иначе // Не удалось подключиться к ДО.
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаДокументооборотНедоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗакрепитьУзелНаСервере()
	
	БылиИзменения = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ИдентификаторСтроки Из Элементы.ПользователиУзлов.ВыделенныеСтроки Цикл
			Строка = ПользователиУзлов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Строка = Неопределено Или Строка.Фиксирован <> 1 Тогда
				Продолжить;
			КонецЕсли;
			
			БылиИзменения = Истина;
			РегистрыСведений.СоответствиеПользователейУзлам1СДокументооборота.УстановитьУзелПользователя(
				Строка.Пользователь,
				Строка.ИдентификаторУзла)
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат БылиИзменения;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные()
	
	ТекущийПользователь = Неопределено;
	Если Элементы.ПользователиУзлов.ТекущиеДанные <> Неопределено Тогда
		ТекущийПользователь = Элементы.ПользователиУзлов.ТекущиеДанные.Пользователь;
	КонецЕсли;
	
	ТипДерева = ИнтеграцияС1СДокументооборот3Клиент.ТипДерева();
	ТипДерева.ЭтоДеревоУзлыКОД = Истина;
	СостояниеДереваУзлыКОД = ИнтеграцияС1СДокументооборот3Клиент.ТекущееСостояниеДерева(
		ТипДерева,
		УзлыКОД.ПолучитьЭлементы(),
		Элементы.УзлыКОД);
	
	ЗаполнитьУзлыИПользователей();
	
	ИнтеграцияС1СДокументооборот3Клиент.РазвернутьДерево(
		ТипДерева,
		УзлыКОД.ПолучитьЭлементы(),
		Элементы.УзлыКОД,
		СостояниеДереваУзлыКОД);
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ПользователиУзловОтбор = Новый Структура("Пользователь", ТекущийПользователь);
		Если Не ПустаяСтрока(Элементы.ПользователиУзлов.ОтборСтрок.ИдентификаторУзла) Тогда
			ПользователиУзловОтбор.Вставить("ИдентификаторУзла", Элементы.ПользователиУзлов.ОтборСтрок.ИдентификаторУзла);
		КонецЕсли;
		НайденныеСтроки = ПользователиУзлов.НайтиСтроки(ПользователиУзловОтбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ПользователиУзлов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрепитьУзелНаСервере()
	
	БылиИзменения = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ИдентификаторСтроки Из Элементы.ПользователиУзлов.ВыделенныеСтроки Цикл
			Строка = ПользователиУзлов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Строка = Неопределено Или Строка.Фиксирован <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			БылиИзменения = Истина;
			РегистрыСведений.СоответствиеПользователейУзлам1СДокументооборота.ОчиститьПривязку(Строка.Пользователь);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат БылиИзменения;
	
КонецФункции

&НаКлиенте
Процедура СменитьУзелЗавершение(ВыбранныйУзел, ПараметрыОповещения) Экспорт
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВыбранныйУзел) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователей = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ПользователиУзлов.ВыделенныеСтроки Цикл
		Строка = ПользователиУзлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПользователей.Добавить(Строка.Пользователь);
	КонецЦикла;
	
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУзелПользователей(МассивПользователей, ВыбранныйУзел);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДанныеУзла(Знач ИдентификаторУзла, Знач ДанныеУзла)
	
	РегистрыСведений.ДанныеУзлов1СДокументооборота.УстановитьДанныеУзла(ИдентификаторУзла, ДанныеУзла);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУзелПользователей(МассивПользователей, ИдентификаторУзла)
	
	УстановитьУзелПользователейНаСервере(МассивПользователей, ИдентификаторУзла);
	
	СтрокиДанныеУзловКОД = ДанныеУзловКОД.НайтиСтроки(Новый Структура("ИдентификаторУзла", ИдентификаторУзла));
	ИмяУзла = СтрокиДанныеУзловКОД[0].ИмяУзла;
	
	Если МассивПользователей.Количество() = 1 Тогда
		Пояснение = СтрШаблон(
			НСтр("ru = 'Пользователь ""%1"" перемещен в узел ""%2""'"),
			МассивПользователей[0],
			ИмяУзла);
	Иначе
		Пояснение = СтрШаблон(
			НСтр("ru = 'Пользователи перемещены в узел ""%1""'"),
			ИмяУзла);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Узел закреплен'"),, Пояснение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьУзелПользователейНаСервере(Знач МассивПользователей, Знач ИдентификаторУзла)
	
	РегистрыСведений.СоответствиеПользователейУзлам1СДокументооборота.УстановитьУзелПользователей(
		МассивПользователей,
		ИдентификаторУзла);
	
КонецПроцедуры

#КонецОбласти