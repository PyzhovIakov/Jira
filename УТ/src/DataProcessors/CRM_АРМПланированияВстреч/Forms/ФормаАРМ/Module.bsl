
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМ_ЖурналВстреч"));
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	НоваяДатаЖурнала = Объект.ДатаНачала;
	МассивПользователей = ПолучитьМассивПользователейДляОтбора();
	НовыйЖурнал = ПолучитьЖурналПоДате(НоваяДатаЖурнала, МассивПользователей[0]);
	ПереоткрытьФорму(НовыйЖурнал);

КонецПроцедуры

&НаКлиенте
Процедура Статус1ПриИзменении(Элемент)
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиФормы();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ОткрытыеОкна = ПолучитьОкна(); // получим список открытых окон для проверки.
	Если ОткрытыеОкна = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		Для Каждого ОткрытаяФорма Из ОткрытоеОкно.Содержимое Цикл
			#Если ВебКлиент Тогда
				Если ОткрытаяФорма.ИмяФормы = "Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ" Тогда
					ОткрытаяФорма.Закрыть();	
				КонецЕсли;	
			#Иначе
				Если ОткрытаяФорма.ИмяФормы = "Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ" Тогда
					ОткрытаяФорма.Закрыть();	
				КонецЕсли;
			#КонецЕсли
		КонецЦикла;	
	КонецЦикла;
	Заголовок =  "Журнал встреч/" + Объект.Наименование;
	//Элементы.Статус.Видимость = Элементы.ГруппаБизнесПроцессаОбъекта.Видимость;
	//Элементы.Статус1.Видимость = НЕ Элементы.ГруппаБизнесПроцессаОбъекта.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИтоговПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ДеревоИтогов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТипЗнч(ТекСтрока.Показатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ТекСтрока.Показатель <> Объект.Ответственный Тогда
				НовыйЖурнал = ПолучитьЖурналПоДате(Объект.ДатаНачала, ТекСтрока.Показатель);
				ПереоткрытьФорму(НовыйЖурнал, Истина);
			КонецЕсли;
		Иначе
			СтрокаОтветственный = ТекСтрока.ПолучитьРодителя();
			Если СтрокаОтветственный.Показатель <> Объект.Ответственный Тогда
				НовыйЖурнал = ПолучитьЖурналПоДате(Объект.ДатаНачала, СтрокаОтветственный.Показатель);
				ПереоткрытьФорму(НовыйЖурнал, Истина);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	CRM_СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Неопределено);
	ПроверитьДоступностьРедактированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТекущегоЭлементаПланировщика(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)    
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть АРМ ""Планирование встреч"" на мобильном устройстве.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//Записать();
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'АРМ ""Планирование встреч""'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	Если Параметры.Свойство("CRM_НастройкиРабочегоСтола") Тогда
		ОткрытаИзРабочегоСтола = Истина;
	КонецЕсли;
	
	ДоступныеПользователи = CRM_УправлениеЦелевымиПоказателямиСервер.ДоступныеПользователи(Ложь);
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Руководитель = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо",
			 Объект.Ответственный.Подразделение.ТекущийРуководитель);
	Иначе
		Руководитель = Объект.Ответственный.Подразделение.ТекущийРуководитель;
	КонецЕсли;
	ЭтоРуководитель = (ДоступныеПользователи.Найти(Руководитель)  <> Неопределено);
	
	ДатаНачала = Объект.ДатаНачала;
	
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	
	СпособПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.СпособПоиска",
		 "СправочникПартнеры",
		 1);
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ВосстановитьНастройкиФормы();
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	ЗагрузитьНастройкиКалендаря();
	ЗаполнитьКалендарь();
	
	КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонтактыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Владелец");
	КонтактыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	КонтактыОтборПоКлиенту.Использование	= Истина;
	КонтактыОтборПоКлиенту.ПравоеЗначение	= Справочники.Партнеры.ПустаяСсылка();
	
	Если Параметры.Свойство("ИзДереваИтогов") И Параметры.ИзДереваИтогов Тогда
		Элементы.СтраницыЛево.ТекущаяСтраница = Элементы.ГруппаСтраницаИтоги;
	КонецЕсли;
	
	ЗапрещеноИзменение = (Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Действует)
		 ИЛИ (Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Отменено);
	
	Если Объект.Ответственный <> ТекущийПользователь Тогда
		Элементы.Планировщик.ТолькоПросмотр = НЕ (ЭтоРуководитель);
		Элементы.Планировщик.РазрешитьПеретаскивание = ЭтоРуководитель;
		Элементы.ГруппаБизнесПроцессаОбъекта.Видимость = ЭтоРуководитель;
	КонецЕсли;
	
	Элементы.ПодразделениеОтбор.Видимость = ИспользоватьПодразделения;
	
	Заголовок = Объект.Наименование;
	
	СписокОтборовКлиента.Добавить("ОтборНеделя", НСтр("ru='Неделю'"));
	СписокОтборовКлиента.Добавить("ОтборМесяц", НСтр("ru='Месяц'"));
	СписокОтборовКлиента.Добавить("ОтборКвартал", НСтр("ru='Квартал'"));
	СписокОтборовКлиента.Добавить("ОтборГод", НСтр("ru='Год'"));
	СписокОтборовКлиента.Добавить("ОтборОтключить", НСтр("ru='Не скрывать'"));
	
	ТекЭлементСпискаОтбора = СписокОтборовКлиента.НайтиПоЗначению(ПериодДляОтбораКлиентов);
	Если ТекЭлементСпискаОтбора = Неопределено Тогда
		ПериодДляОтбораКлиентов = "ОтборОтключить";
		ТекЭлементСпискаОтбора = СписокОтборовКлиента.НайтиПоЗначению(ПериодДляОтбораКлиентов);
	КонецЕсли;
	Элементы.ДекорацияИмяОтбора.Заголовок = ТекЭлементСпискаОтбора.Представление;
	УстановитьОтборКлиентов();
	//СоздатьКнопиОтборПериод();
	//ПокраситьКнопкиОтборПериодНаСервере();
	ПроверитьДоступностьРедактированияНаСервере();
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НовыйЭлемент Тогда
		
		Если ЗапрещеноИзменение Тогда
			Возврат;
		КонецЕсли;
		
		Партнер = Элементы.СписокКлиентов.ТекущаяСтрока;
		Контакт = Элементы.Контакты.ТекущаяСтрока;
		СтруктураКонтактов = ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		ВидВзаимодействия);
		
		ЗначенияЗаполнения.Вставить("Дата",						ОбщегоНазначенияКлиент.ДатаСеанса());
		ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(Элемент.ВыделенныеЭлементы[0].Начало));
		ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",
				СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(Элемент.ВыделенныеЭлементы[0].Конец)));
		ЗначенияЗаполнения.Вставить("Тема",						Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
		ЗначенияЗаполнения.Вставить("ДокументОснование",		Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Партнер",		СтруктураКонтактов.Партнер);
		ЗначенияЗаполнения.Вставить("КонтактноеЛицо",		СтруктураКонтактов.Контакт);
		ЗначенияЗаполнения.Вставить("АдресОфиса",
					CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтруктураКонтактов.Партнер,
			 "CRM_ОсновнойАдрес"));
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
		
		ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент, , , ,
			 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
			 ЭтотОбъект));
		
	Иначе
		
		ОткрытьФормуТекущегоЭлементаПланировщика(Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	Если ЗапрещеноИзменение Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	Если НовыйЭлемент Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата",						Элемент.ВыделенныеЭлементы[0].Начало);
		ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(Элемент.ВыделенныеЭлементы[0].Начало));
		ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",
				СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(Элемент.ВыделенныеЭлементы[0].Конец)));
		ЗначенияЗаполнения.Вставить("Тема",						Элемент.ВыделенныеЭлементы[0].Текст);
		ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
		
		ПараметрыМероприятия = СоздатьНовоеМероприятие(ЗначенияЗаполнения);
		
		Элемент.ВыделенныеЭлементы[0].Значение = ПараметрыМероприятия.Ссылка;
		Элемент.ВыделенныеЭлементы[0].Текст = ПараметрыМероприятия.Текст;
		
	Иначе
		ОбрабатываемыеЭлементы = Новый Массив;
		
		Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
			Если НЕ (ВыделенныйЭлемент.Значение = Неопределено) Тогда
				ОбрабатываемыйЭлемент = Новый Структура;
				ОбрабатываемыйЭлемент.Вставить("Источник",			ВыделенныйЭлемент.Значение);
				ОбрабатываемыйЭлемент.Вставить("ПериодНачало",		ОкруглитьЗначениеДаты(ВыделенныйЭлемент.Начало));
				ОбрабатываемыйЭлемент.Вставить("ПериодОкончание",	ОкруглитьЗначениеДаты(ВыделенныйЭлемент.Конец));
				
				ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
		
	КонецЕсли;
	ЗаполнитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СпособыПоиска = Новый СписокЗначений;
	СпособыПоиска.Добавить(0, НСтр("ru = 'По началу строки'"));
	СпособыПоиска.Добавить(1, НСтр("ru = 'По части строки'"));
	СпособыПоиска.Добавить(2, НСтр("ru = 'По точному совпадению'"));
	
	НайденныйЭлемент = СпособыПоиска.НайтиПоЗначению(СпособПоиска);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Пометка = Истина;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОповещениеЗавершения, СпособыПоиска, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоиска <> ВыбранныйЭлемент.Значение Тогда
		СпособПоиска = ВыбранныйЭлемент.Значение;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.СпособПоиска",
			 "СправочникПартнеры",
			 СпособПоиска);
		ВыполнитьПоиск(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	ВыполнитьПоиск(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
	Если ЗапрещеноИзменение Тогда
		Возврат;
	КонецЕсли;
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнер = ПараметрыПеретаскивания.Значение[0];
			Контакт = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Партнер, "CRM_ОсновноеКонтактноеЛицо");
			СтруктураКонтактов = ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт);
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		ВидВзаимодействия);
			
			ЗначенияЗаполнения.Вставить("Дата",						ОбщегоНазначенияКлиент.ДатаСеанса());
			ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(Дата));
			ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",	СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(Дата + 1800)));
			ЗначенияЗаполнения.Вставить("Тема",						"Встреча с " + Строка(Партнер));
			ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
			ЗначенияЗаполнения.Вставить("ДокументОснование",		Объект.Ссылка);
			ЗначенияЗаполнения.Вставить("Партнер",		СтруктураКонтактов.Партнер);
			ЗначенияЗаполнения.Вставить("КонтактноеЛицо",		СтруктураКонтактов.Контакт);
			ЗначенияЗаполнения.Вставить("АдресОфиса",
						CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтруктураКонтактов.Партнер,
				 "CRM_ОсновнойАдрес"));
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
			
			ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент, , , ,
				 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
				 ЭтотОбъект));
		ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Контакт = ПараметрыПеретаскивания.Значение[0];
			Партнер = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Контакт, "Владелец");
			СтруктураКонтактов = ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт);
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		ВидВзаимодействия);
			
			ЗначенияЗаполнения.Вставить("Дата",						ОбщегоНазначенияКлиент.ДатаСеанса());
			ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(Дата));
			ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",	СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(Дата + 1800)));
			ЗначенияЗаполнения.Вставить("Тема",						"Встреча с " + Строка(Партнер));
			ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
			ЗначенияЗаполнения.Вставить("ДокументОснование",		Объект.Ссылка);
			ЗначенияЗаполнения.Вставить("Партнер",		СтруктураКонтактов.Партнер);
			ЗначенияЗаполнения.Вставить("КонтактноеЛицо",		СтруктураКонтактов.Контакт);
			ЗначенияЗаполнения.Вставить("АдресОфиса",
						CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтруктураКонтактов.Партнер,
				 "CRM_ОсновнойАдрес"));
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
			
			ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент, , , ,
				 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
				 ЭтотОбъект));
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокКлиентовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗапрещеноИзменение Тогда
		Возврат;
	КонецЕсли;	
	
	Партнер = Элементы.СписокКлиентов.ТекущаяСтрока;
	Контакт = Элементы.Контакты.ТекущаяСтрока;
	
	СтруктураКонтактов = ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		ВидВзаимодействия);
	
	ЗначенияЗаполнения.Вставить("Дата",						ОбщегоНазначенияКлиент.ДатаСеанса());
	ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(Начало));
	ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",	СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(Конец)));
	ЗначенияЗаполнения.Вставить("Тема",						"Встреча с " + Строка(Партнер));
	ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("ДокументОснование",		Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Партнер",		СтруктураКонтактов.Партнер);
	ЗначенияЗаполнения.Вставить("КонтактноеЛицо",		СтруктураКонтактов.Контакт);
	ЗначенияЗаполнения.Вставить("АдресОфиса",
				CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтруктураКонтактов.Партнер,
		 "CRM_ОсновнойАдрес"));

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
	
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент, , , ,
		 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
		 ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВперед(Команда)
	
	НоваяДатаЖурнала = КонецНедели(Объект.ДатаНачала) + 1;
	НовыйЖурнал = ПолучитьЖурналПоДате(НоваяДатаЖурнала, Объект.Ответственный);
	ПереоткрытьФорму(НовыйЖурнал);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазад(Команда)
	НоваяДатаЖурнала = НачалоНедели(Объект.ДатаНачала - 1);
	НовыйЖурнал = ПолучитьЖурналПоДате(НоваяДатаЖурнала, Объект.Ответственный);
	ПереоткрытьФорму(НовыйЖурнал);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКалендаря(Команда)
	
	ПараметрыВыбораДаты = Новый Структура(
		"НачальноеЗначение, 
		|Заголовок");
		
	ПараметрыВыбораДаты.НачальноеЗначение = ДатаНачала;
	ПараметрыВыбораДаты.Заголовок = НСтр("ru='Выбор даты планирования'");
	
	ОткрытьФорму("Обработка.CRM_АРМПланированияВстреч.Форма.ФормаВыбораДаты", ПараметрыВыбораДаты,
		 ЭтотОбъект, , , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбраннаяДата, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.CRM_АРМПланированияВстреч.Форма.ФормаВыбораДаты") Тогда
		Если ВыбраннаяДата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НоваяДатаЖурнала = НачалоНедели(ВыбраннаяДата);
		НовыйЖурнал = ПолучитьЖурналПоДате(НоваяДатаЖурнала, Объект.Ответственный);
		ПереоткрытьФорму(НовыйЖурнал);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОбработкаФормированияКоманд(Элемент, Параметры, Команды, КомандаПоУмолчанию)
	
	Источник = Параметры.Источник; 
	
	Если Источник = ИсточникКомандПланировщика.Элементы И Параметры.Элементы.Количество() = 1 Тогда
		
		Команды.Очистить();
		ЭлементПланировщика = Параметры.Элементы.Получить(0);
		
		КомандаРедактировать = Новый ОписаниеКомандыПланировщика(Новый ОписаниеОповещения("КомандаРедактировать",
			 ЭтотОбъект, ЭлементПланировщика), НСтр("ru ='Редактировать'",
			 "ru"));
		Команды.Добавить(КомандаРедактировать);
		Если Не ПроверитьСогласование() Тогда
			КомандаУдалить = Новый ОписаниеКомандыПланировщика(Новый ОписаниеОповещения("КомандаУдалить",
				 ЭтотОбъект, ЭлементПланировщика), НСтр("ru ='Удалить'",
				 "ru"));
			Команды.Добавить(КомандаУдалить);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактировать(ДопПараметры) Экспорт
	
	ЗначениеЭлемента = ДопПараметры.Значение;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ЗначениеЭлемента);
	ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
	
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, ДопПараметры, , , ,
		 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
		 ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалить(ДопПараметры) Экспорт
	
	ЗначениеЭлемента = ДопПараметры.Значение;
	УстановитьПометкуУдаленияНаСервере(ЗначениеЭлемента);
	
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьДоступностьРедактированияНаСервере()
	ЗапрещеноИзменение = (Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Действует)
		 ИЛИ (Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Отменено);
	Если CRM_БизнесПроцессыСервер.ОбъектСвязанСБизнесПроцессом(Объект.Ссылка) Тогда
		МассивЗадач = CRM_БизнесПроцессыСервер.ПолучитьНеВыполненныеЗадачи(Объект.Ссылка, Ложь);	
		Если МассивЗадач.Количество() > 0 Тогда
			ТекущаяЗадача = МассивЗадач[0];
			Если ТекущаяЗадача.Исполнитель <> ТекущийПользователь Тогда
				ЗапрещеноИзменение = Истина;
				Элементы.ДекорацияДоступностьРедактирования.Видимость = Истина;
			Иначе
				Элементы.ДекорацияДоступностьРедактирования.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ДекорацияДоступностьРедактирования.Видимость = Ложь;	
		КонецЕсли;	
	Иначе
		Элементы.ДекорацияДоступностьРедактирования.Видимость = Ложь;		
	КонецЕсли;
	Элементы.ДекорацияСтатус.Заголовок = НСтр("ru='План встреч '") + Объект.Ответственный + " " 
		+ ПредставлениеПериода(Объект.ДатаНачала, КонецНедели(Объект.ДатаНачала)) + НСтр("ru=' Статус: '") + Объект.Статус;
КонецПроцедуры	

&НаСервере
Процедура ОбновитьНаСервере()
	ЗагрузитьНастройкиКалендаря();
	ЗаполнитьКалендарь();
	ПроверитьДоступностьРедактированияНаСервере();
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ВыполнитьПовторныйЗапускБП(Команда)
	
	ВыполнитьПовторныйЗапускБПНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПовторныйЗапускБПНаСервере()
	
	ГруппаАвтоКнопки = Элементы.Найти("ГруппаАвтоКнопки");
	Если НЕ ГруппаАвтоКнопки = Неопределено Тогда
		Элементы.Удалить(ГруппаАвтоКнопки);
		КнопкаЗапуска = Элементы.Найти("Кнопка_Команда_ЗапуститьПроцессЗаново");
		Если НЕ КнопкаЗапуска = Неопределено Тогда
			Элементы.Удалить(КнопкаЗапуска);
			КомандаБП = Команды.Найти("Команда_ДосрочноеЗавершениеБП");
			Если НЕ КомандаБП = Неопределено Тогда
				Команды.Удалить(КомандаБП);
			КонецЕсли;
		КонецЕсли;

		МассивУдаляемыхРеквизитов = Новый Массив;
        Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
        	 "ЗадачаИсполнителя_БизнесПроцесс") Тогда
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_БизнесПроцесс");
		КонецЕсли;
        Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
        	 "ЗадачаИсполнителя_ПринятаКИсполнению") Тогда
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ПринятаКИсполнению");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_НесколькоВариантовВыполнения");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ТекущийПользователь");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ОтложитьНаДату");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ТочкаМаршрута");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_НомерВерсииКартыМаршрута");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ВариантВыполнения");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_ВариантВыполненияСтрокой");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_УсловияВыполнены");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_Выполнена");
			МассивУдаляемыхРеквизитов.Добавить("ЗадачаИсполнителя_СрокИсполнения");
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
				"ОбъектыПоБизнесПроцессам") Тогда
			МассивУдаляемыхРеквизитов.Добавить("ОбъектыПоБизнесПроцессам");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
				"ТипыОбъектовПоБизнесПроцессам") Тогда
			МассивУдаляемыхРеквизитов.Добавить("ТипыОбъектовПоБизнесПроцессам");
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,
				"ТипыОбъектовПоБизнесПроцессамСписок") Тогда
			МассивУдаляемыхРеквизитов.Добавить("ТипыОбъектовПоБизнесПроцессамСписок");
		КонецЕсли;
		
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		
		УдаляемыеКоманды = Новый Массив;
		УдаляемыеКоманды.Добавить("Команда_КартаМаршрута");
		УдаляемыеКоманды.Добавить("Команда_ОписаниеБизнесПроцесса");
		УдаляемыеКоманды.Добавить("Команда_ПередвинутьЭтап");
		УдаляемыеКоманды.Добавить("Команда_ЗапуститьПроцессЗаново");
		УдаляемыеКоманды.Добавить("Команда_Перенаправить");
		УдаляемыеКоманды.Добавить("Команда_ОписаниеЗадачи");
		УдаляемыеКоманды.Добавить("Команда_ПринятьКИсполнению");
		УдаляемыеКоманды.Добавить("Команда_ПоказатьОбъекты");
		
		Для каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
			Команда = Команды.Найти(УдаляемаяКоманда);
			Если Команда <> Неопределено Тогда
				Команды.Удалить(Команда);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	ЗапрещеноИзменение = Ложь;
	Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Подготовка;
	ОбъектСправочника = Объект.Ссылка.ПолучитьОбъект();
	ОбъектСправочника.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Подготовка;
	ОбъектСправочника.Записать();
	CRM_БизнесПроцессыСервер.ПолучитьИСтартоватьПроцессыПриЗаписиНовогоОбъектаПроцесса(ОбъектСправочника);
	CRM_БизнесПроцессыСервер.ПриЧтенииНаСервере(ЭтотОбъект, Объект, Неопределено);
	ПроверитьДоступностьРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСогласование()
	
	СтатусСогласования = (Объект.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Согласование);
	Возврат СтатусСогласования;
	
КонецФункции

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
	Если СтрНайти(Команда.Имя, "Команда_ВыполнитьЗадачу") > 0 Тогда
		ПереоткрытьФорму(Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

&НаСервере
Функция ПолучитьЖурналПоДате(НоваяДатаЖурнала, ОтборОтветственный)
	ДатаЖурнала = НоваяДатаЖурнала;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ЖурналыВстреч.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ЖурналыВстреч КАК CRM_ЖурналыВстреч
	|ГДЕ
	|	CRM_ЖурналыВстреч.Ответственный = &Ответственный
	|	И CRM_ЖурналыВстреч.ДатаНачала = &ДатаЭтойНедели
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ЖурналыВстреч.ДатаНачала";
	Запрос.УстановитьПараметр("Ответственный", ОтборОтветственный);
	Запрос.УстановитьПараметр("ДатаЭтойНедели", ДатаЖурнала);
	ТабЖурналов = Запрос.Выполнить().Выгрузить();
	Если ТабЖурналов.Количество() = 0 Тогда
		НовыйЖурнал = Справочники.CRM_ЖурналыВстреч.СоздатьЭлемент();
		НовыйЖурнал.Ответственный = ОтборОтветственный;
		НовыйЖурнал.ДатаНачала = ДатаЖурнала; 
		НовыйЖурнал.Наименование = ОтборОтветственный.Наименование + "/" + НеделяГода(ДатаЖурнала) 
			+ " неделя (" + ПредставлениеПериода(ДатаЖурнала, КонецНедели(ДатаЖурнала)) 
			+ ")";
		НовыйЖурнал.Статус = Перечисления.CRM_СтатусыСогласованияПланированияВстреч.Подготовка;
		НовыйЖурнал.Записать();
		НайденныйЖурнал = НовыйЖурнал.Ссылка;
	Иначе	
		НайденныйЖурнал = ТабЖурналов[0].Ссылка;
	КонецЕсли;
	Возврат НайденныйЖурнал;
КонецФункции

&НаКлиенте
Процедура ПереоткрытьФорму(НовыйЖурнал, ИзДереваИтогов = Ложь)
	СохранитьНастройкиФормы();
	ПараметрыФормы = Новый Структура;
	Если ОткрытаИзРабочегоСтола Тогда
		ОбщиеПараметры = Новый Структура;
		ТаблицаНастроекРабочегоСтола = CRM_РабочийСтолСервер.ПолучитьТаблицуНастроекРабочегоСтола();
		ПараметрыФормы = Новый Структура("CRM_НастройкиРабочегоСтола, скОбщиеПараметры",
			 ТаблицаНастроекРабочегоСтола,
			 ОбщиеПараметры);
	КонецЕсли;	
	ПараметрыФормы.Вставить("Ключ", НовыйЖурнал);
	ПараметрыФормы.Вставить("ИзДереваИтогов", ИзДереваИтогов);
	ОткрытьФорму("Обработка.CRM_АРМПланированияВстреч.Форма.ФормаАРМ", ПараметрыФормы  , ЭтотОбъект);
	//Закрыть();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.Подразделение",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 ПодразделениеОтбор);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.ПериодДляОтбораКлиентов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 ПериодДляОтбораКлиентов);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.ВидВзаимодействия",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 ВидВзаимодействия);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.ТекущаяЗакладка",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Элементы.СтраницыЛево.ТекущаяСтраница.Имя);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.НастройкаСпискаКлиентов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 СписокКлиентов.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.НастройкаСпискаКонтактов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Контакты.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("CRM_ЖурналВстреч.ПоследнийОткрытыйЖурнал",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Объект.Ссылка);
КонецПроцедуры	

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	ПодразделениеОтбор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.Подразделение",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 ТекущийПользователь.Подразделение);
	ПериодДляОтбораКлиентов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.ПериодДляОтбораКлиентов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 "Неделя");
	ВидВзаимодействия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.ВидВзаимодействия",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Справочники.CRM_ВидыВзаимодействий.Встреча);
	Элементы.СтраницыЛево.ТекущаяСтраница = Элементы[ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.ТекущаяЗакладка",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 "ГруппаСтраницаИтоги")];
	
	НастройкиКлиентов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.НастройкаСпискаКлиентов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Неопределено);
	Если НастройкиКлиентов <> Неопределено Тогда
		СписокКлиентов.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиКлиентов);
	КонецЕсли;	
	
	НастройкиКонтактов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("CRM_ЖурналВстреч.НастройкаСпискаКонтактов",
		 Строка(ТекущийПользователь.УникальныйИдентификатор()),
		 Неопределено);
	Если НастройкиКонтактов <> Неопределено Тогда
		Контакты.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиКонтактов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПериода(НачалоПериода, КонецПериода)
	Заголовок = Объект.Наименование;
	Элементы.ДекорацияПериод.Заголовок =  "" + НеделяГода(НачалоПериода) + " неделя (" 
		+ ПредставлениеПериода(НачалоПериода, КонецПериода) + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт)
	Если ТипЗнч(Партнер) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Партнер = Неопределено;
	КонецЕсли;
	СтруктвраВозврата = Новый Структура("Партнер, Контакт", Партнер, Контакт);
	Если Партнер = Неопределено Тогда
		СтруктвраВозврата.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктвраВозврата.Вставить("Контакт", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;
	Если Контакт = Неопределено Тогда
		СтруктвраВозврата.Вставить("Контакт", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;
	Если Партнер <> Неопределено И Партнер.ЭтоГруппа Тогда
		СтруктвраВозврата.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктвраВозврата.Вставить("Контакт", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;
	
	Если НЕ СтруктвраВозврата.Партнер.Пустая() И СтруктвраВозврата.Контакт.Пустая() Тогда
		СтруктвраВозврата.Вставить("Контакт", Партнер.CRM_ОсновноеКонтактноеЛицо);
	КонецЕсли;
	
	Возврат СтруктвраВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияОкнаВзаимодействия(Результат, ДопПараметры) Экспорт
	ЗаполнитьКалендарь();
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ОбрабатываемыйЭлемент Из ОбрабатываемыеЭлементы Цикл
			
			ЗаписьОбъект = ОбрабатываемыйЭлемент.Источник.ПолучитьОбъект();
			
			Если ОбрабатываемыйЭлемент.Свойство("ПометкаУдаления") Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(ОбрабатываемыйЭлемент.ПометкаУдаления);
				Продолжить;
			КонецЕсли;
			
			ЗаписьОбъект.ПлановаяДата = ОбрабатываемыйЭлемент.ПериодНачало;
			ЗаписьОбъект.ПлановаяДатаЗавершение = ОбрабатываемыйЭлемент.ПериодОкончание;
			Если НЕ ЗаписьОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
				ЗаписьОбъект.Записать();
			КонецЕсли;	
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось сохранить изменения в календаре по причине: %1';
			|en='Could not save changes to calendar due to: %1'"),
			 ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	Если Элементы.СписокКлиентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокКлиентов.ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда 
		ПартнерОтбора = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Иначе	
		ПартнерОтбора = Элементы.СписокКлиентов.ТекущаяСтрока;
	КонецЕсли;	
	
	КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы[0];
	КонтактыОтборПоКлиенту.ПравоеЗначение	= ПартнерОтбора;
	CRM_ОбщегоНазначенияКлиентСервер.ОбновлениеТаблицыФормы(Элементы.Контакты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(ОповещатьОбОшибках)
	
	ОбрабатыватьАктивизациюПоиска = Истина;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	// Проверка возможности поиска.
	Отказ = Ложь;
	ТекстСообщения = НСтр("ru='Минимальная длина строки поиска 3 символа.';
		|en='Minimum length of the search line is 3 characters.'");
	Если ОповещатьОбОшибках И СтрДлина(СтрокаПоиска) < 3  И СтрДлина(СтрокаПоиска) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СтрокаПоиска", , Отказ);
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНаСервере(УсловияПоиска = Неопределено)
	
	Если УсловияПоиска = Неопределено Тогда
		
		// Анализ строк поиска, формализация условий и заполнение кэша.
		КэшПоиска = CRM_КлиентыСервер.СтруктураДанныхКэша();
		КэшЗаполнения = CRM_КлиентыСервер.СтруктураДанныхКэша();
		УсловияПоиска = Новый Массив;
		Если Не ПустаяСтрока(СтрокаПоиска) Тогда
			СтрокаПоискаНормализованная = CRM_КлиентыСервер.НормализоватьСтрокуПоискаИДополнитьКэш(СтрокаПоиска,
				 КэшПоиска,
				 КэшЗаполнения);
			УсловияПоиска.Добавить(СтрокаПоискаНормализованная);
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск.
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКлиентов, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Ложь,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Возврат;
	КонецЕсли;	
	Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список;
	УстановитьПривилегированныйРежим(Истина);
	РезультатПоиска = CRM_ПоискКонтактов.ВыполнитьПоискКонтактов(УсловияПоиска, СпособПоиска, Истина);
	УстановитьПривилегированныйРежим(Ложь);
	Если ЗначениеЗаполнено(РезультатПоиска.КодОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКлиентов, "Ссылка",
			 Новый СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
			 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ тмпСсылки
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&Массивссылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеров.Владелец
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка В(&Массивссылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	тмпСсылки.Ссылка КАК Ссылка
	|ИЗ
	|	тмпСсылки КАК тмпСсылки";
	Запрос.УстановитьПараметр("Массивссылок", РезультатПоиска.Элементы);
	СписоСсылокДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКлиентов, "Ссылка",
		 СписоСсылокДляОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
		 РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Если СписоСсылокДляОтбора.Количество() = 0 Тогда
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 200, 200);
	Иначе
		Элементы.СтрокаПоиска.ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика(Элемент)
	
	Попытка
		Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
			ЗначениеЭлемента = Элемент.ВыделенныеЭлементы[0].Значение;
			ВыбранноеВзаимодействие = ЗначениеЭлемента;
		ИначеЕсли ЗначениеЗаполнено(ВыбранноеВзаимодействие) Тогда
			ЗначениеЭлемента = ВыбранноеВзаимодействие;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", ЗначениеЭлемента);
			ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
			
			ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, Элемент, , , ,
				 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
				 ЭтотОбъект));
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть взаимодействие. Обновите форму.'");
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиКалендаря()
	СтруктураНастройкиОтображения = ПолучитьНастройкиОтображенияПоУмолчанию();
	
	СохраненныеНастройки = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если СохраненныеНастройки.Свойство("НастройкиОтображения") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.НастройкиОтображения,
				 СохраненныеНастройки.НастройкиОтображения);
		КонецЕсли;
		
		Если СохраненныеНастройки.Свойство("ОбщиеНастройки") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.ОбщиеНастройки, СохраненныеНастройки.ОбщиеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки пользователя
	НастройкиРабочееВремяПользователя =
		CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(ТекущийПользователь);
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас =
			Час(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас =
			Час(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = 23;
	КонецЕсли;
	
	СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей =
		(CRM_ХранилищеНастроек.Загрузить("ПоказыватьНедействительныхПользователей") = Истина);
	ПоказыватьНедействительныхПользователей =
		СтруктураНастройкиОтображения.НастройкиОтображения.ПоказыватьНедействительныхПользователей;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва)
		 И ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас =
			Час(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас =
			Час(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Ложь;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = 0;
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = 23;
	КонецЕсли;
	
	КэшНастроекОтображения = СтруктураНастройкиОтображения;
	
	РасписаниеИнтервалШкалыВремени = ?(КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени < 30,
		 30,
		 КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени);
	
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM'";
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	
	НачалоПериода = НачалоНедели(ДатаНачала);
	Если  КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе = 5 Тогда
		КонецПериода  = КонецНедели(ДатаНачала) - 2 * 24 * 60 * 60;
	ИначеЕсли  КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе = 6 Тогда
		КонецПериода  = КонецНедели(ДатаНачала) - 1 * 24 * 60 * 60;
	Иначе	
		КонецПериода  = КонецНедели(ДатаНачала);
	КонецЕсли;
	
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);
	ДобавитьТекущиеПериоды(НачалоПериода, КонецПериода);
	
	УстановитьЗаголовкиПериода(НачалоПериода, КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекущиеПериоды(НачалоПериода, КонецПериода)
	
	ТаблицаПериодов = СформироватьТаблицуПериодов(НачалоПериода, КонецПериода);
	Планировщик.ИнтервалыФона.Очистить();
	
	Для Каждого СтрокаПериодаДат Из ТаблицаПериодов Цикл
		Для Каждого ТекПериодОтображения Из СтрокаПериодаДат.ТаблицаПериодов Цикл
			Если ТекПериодОтображения.Обед Тогда
				НовыйИнтервалФора = Планировщик.ИнтервалыФона.Добавить(ТекПериодОтображения.НачалоПериода,
					 ТекПериодОтображения.ОкончаниеПриода);
				//НовыйИнтервалФора.Метки.Добавить("Обед","Обед");
				НовыйИнтервалФора.Цвет = Новый Цвет(241, 241, 241);
			ИначеЕсли ТекПериодОтображения.НеРабочееВремя Тогда
				НовыйИнтервалФора = Планировщик.ИнтервалыФона.Добавить(ТекПериодОтображения.НачалоПериода,
					 ТекПериодОтображения.ОкончаниеПриода);
				НовыйИнтервалФора.Цвет = Новый Цвет(241, 241, 241);
			ИначеЕсли Не СтрокаПериодаДат.Рабочий Тогда
				НовыйИнтервалФора = Планировщик.ИнтервалыФона.Добавить(ТекПериодОтображения.НачалоПериода,
					 ТекПериодОтображения.ОкончаниеПриода);
				НовыйИнтервалФора.Цвет = Новый Цвет(241, 241, 241);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуПериодов(ДатаНачала, ДатаОкончания)
	
	КоличествоДней					= ((ДатаОкончания - ДатаНачала) + 1) / 86400;
	КалендарьКоличествоДнейВНеделе	= Макс(КэшНастроекОтображения.НастройкиОтображения.КалендарьКоличествоДнейВНеделе,
		 КоличествоДней);
	
	МассивДат = Новый Массив;
	
	ТекДата = ДатаНачала;
	Для Ном = 1 По КоличествоДней Цикл
		МассивДат.Добавить(ТекДата);
		
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	График = CRM_ОбщегоНазначенияСервер.ПолучитьОсновнойПроизводственныйКалендарь();
	
	Попытка
		МассивДатРабочихДней = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График, МассивДат, Ложь);
	Исключение
		МассивДатРабочихДней = Новый Соответствие;
		Для каждого ТекДень Из МассивДат Цикл
			МассивДатРабочихДней.Вставить(ТекДень, ТекДень);
		КонецЦикла;
		Ошибка = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(Ошибка, СтрНайти(Ошибка, "}:") + 2));
	КонецПопытки;
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата");
	ТаблицаДат.Колонки.Добавить("Рабочий");
	ТаблицаДат.Колонки.Добавить("ДеньНедели");
	ТаблицаДат.Колонки.Добавить("ТаблицаПериодов");
	ТаблицаВыбранныхДат = Новый ТаблицаЗначений;
	Для Каждого СоответствиеДат Из МассивДатРабочихДней Цикл
		
		Если ТаблицаВыбранныхДат.Количество() > 0 Тогда
			МассивСтрок = ТаблицаВыбранныхДат.НайтиСтроки(Новый Структура("Дата", СоответствиеДат.Ключ));
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДеньНедели(СоответствиеДат.Ключ) > КалендарьКоличествоДнейВНеделе Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата		= СоответствиеДат.Ключ;
		НоваяСтрока.Рабочий		= (СоответствиеДат.Ключ = СоответствиеДат.Значение);
		НоваяСтрока.ДеньНедели	= ДеньНедели(НоваяСтрока.Дата);
	КонецЦикла;
	
	ТаблицаДат.Сортировать("Дата");
	
	Для Каждого СтрокаДаты Из ТаблицаДат Цикл
		СтрокаДаты.ТаблицаПериодов = ВренутьПериодыПоДате(СтрокаДаты.Дата);
	КонецЦикла;
	
	Возврат ТаблицаДат;
	
КонецФункции

&НаСервере
Функция ВренутьПериодыПоДате(ДатаДня)
	
	НачалоДняКалендаряЧас					= КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас;
	КонецДняКалендаряЧас					= КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас;
	НачалоРабочегоДняЧас					= КэшНастроекОтображения.НастройкиОтображения.НачалоРабочегоДняЧас;
	КонецРабочегоДняЧас						= КэшНастроекОтображения.НастройкиОтображения.КонецРабочегоДняЧас;
	РасписаниеИнтервалШкалыВремени			= ?(КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени < 30,
		 30,
		 КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени);
	ИспользоватьСобытияНаВесьДень			= КэшНастроекОтображения.НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	ЕстьОбеденныйПерерыв					= КэшНастроекОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв;
	НачалоОбеденногоПерерываЧас				= КэшНастроекОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас;
	КонецОбеденногоПерерываЧас				= КэшНастроекОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас;
	
	Если НачалоДняКалендаряЧас > ЧасМинимум Тогда
		НачалоДняКалендаряЧас = ЧасМинимум;
	КонецЕсли;
	
	Если КонецДняКалендаряЧас < ЧасМаксимум Тогда
		КонецДняКалендаряЧас = ЧасМаксимум;
	КонецЕсли;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода");
	ТаблицаПериодов.Колонки.Добавить("ОкончаниеПриода");
	ТаблицаПериодов.Колонки.Добавить("НеРабочееВремя");
	ТаблицаПериодов.Колонки.Добавить("Обед");
	
	Для Ном = 0 По 23 Цикл
		
		Если Ном >= НачалоДняКалендаряЧас И Ном <= КонецДняКалендаряЧас Тогда
			ТекДата		= ДатаДня + (3600 * Ном);
			
			СтрокаЧаса = ТаблицаПериодов.Добавить();
			СтрокаЧаса.НачалоПериода	= ТекДата;
			СтрокаЧаса.ОкончаниеПриода	= ТекДата + 3599;
			
			Если ЕстьОбеденныйПерерыв Тогда
				Если Ном >= НачалоОбеденногоПерерываЧас И Ном < КонецОбеденногоПерерываЧас Тогда
					СтрокаЧаса.НеРабочееВремя = Истина;
					СтрокаЧаса.Обед = Истина;
				Иначе
					СтрокаЧаса.НеРабочееВремя = Ложь;
					СтрокаЧаса.Обед = Ложь;
				КонецЕсли;
			Иначе
				СтрокаЧаса.Обед = Ложь;
				СтрокаЧаса.НеРабочееВремя = Ложь;
			КонецЕсли;
			
			Если Ном < НачалоРабочегоДняЧас ИЛИ Ном >= КонецРабочегоДняЧас Тогда
				СтрокаЧаса.НеРабочееВремя = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПользователейДляОтбора()
	МассивПользователей = CRM_УправлениеЦелевымиПоказателямиСервер.ДоступныеПользователи(Ложь);
	МассивДляОтбора = Новый Массив;
	Для Каждого ПользовательОтбора Из МассивПользователей Цикл
		Если ПодразделениеОтбор.Пустая() Тогда
			МассивДляОтбора.Добавить(ПользовательОтбора);
		Иначе
			Если ПользовательОтбора.Подразделение = ПодразделениеОтбор Тогда
				МассивДляОтбора.Добавить(ПользовательОтбора);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Если МассивДляОтбора.Количество() = 0 Тогда
		МассивДляОтбора.Добавить(ТекущийПользователь);
	КонецЕсли;
	Возврат МассивДляОтбора;
КонецФункции

&НаСервере
Процедура ЗаполнитьКалендарь()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ответственный
	|ПОМЕСТИТЬ тмпПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&ДоступныеПользователи)
	|	И Пользователи.Ссылка <> &ПустойПользователь
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Взаимодействие.ПлановаяДата КАК ПлановаяДата,
	|	CRM_Взаимодействие.ПлановаяДатаЗавершение КАК ПлановаяДатаЗавершение,
	|	CRM_Взаимодействие.Содержание КАК Содержание,
	|	CRM_Взаимодействие.Ссылка КАК Ссылка,
	|	CRM_Взаимодействие.Ответственный КАК Ответственный,
	|	CRM_Взаимодействие.Тема КАК Тема,
	|	CRM_Взаимодействие.СтатусВзаимодействия КАК СтатусВзаимодействия,
	|	CRM_Взаимодействие.ВидВзаимодействия.Наименование КАК ВидВзаимодействия
	|ПОМЕСТИТЬ тмпВзаимодействия
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(CRM_Взаимодействие.ДокументОснование) = ТИП(Справочник.CRM_ЖурналыВстреч)
	|	И CRM_Взаимодействие.ПлановаяДата >= &ДатаНачалаОтбора
	|	И CRM_Взаимодействие.ПлановаяДата <= &ДатаОкончанияОтбора
	|	И CRM_Взаимодействие.Ответственный В(&ДоступныеПользователи)
	|	И CRM_Взаимодействие.Ответственный <> &ПустойПользователь
	|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тмпПользователи.Ответственный КАК Ответственный,
	|	тмпВзаимодействия.ПлановаяДата КАК ПлановаяДата,
	|	тмпВзаимодействия.ПлановаяДатаЗавершение КАК ПлановаяДатаЗавершение,
	|	тмпВзаимодействия.Содержание КАК Содержание,
	|	тмпВзаимодействия.Ссылка КАК Ссылка,
	|	тмпВзаимодействия.Тема КАК Тема,
	|	тмпВзаимодействия.СтатусВзаимодействия КАК СтатусВзаимодействия,
	|	тмпВзаимодействия.ВидВзаимодействия КАК ВидВзаимодействия
	|ИЗ
	|	тмпПользователи КАК тмпПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ тмпВзаимодействия КАК тмпВзаимодействия
	|		ПО тмпПользователи.Ответственный = тмпВзаимодействия.Ответственный
	|ИТОГИ ПО
	|	Ответственный,
	|	ВидВзаимодействия";
	
	ПустойПользователь = Справочники.Пользователи.НайтиПоНаименованию("<Не указан>");
	
	ДатаНачалаОтбораСобытий = Объект.ДатаНачала;
	
	Запрос.УстановитьПараметр("ДатаНачалаОтбора",		ДатаНачалаОтбораСобытий);
	Запрос.УстановитьПараметр("ДатаОкончанияОтбора",	КонецНедели(ДатаНачалаОтбораСобытий));
	Запрос.УстановитьПараметр("ПустойПользователь",		ПустойПользователь);
	Запрос.УстановитьПараметр("ДоступныеПользователи",	ПолучитьМассивПользователейДляОтбора());
	
	ТабСобытий = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоИтоговТМП = Новый ДеревоЗначений;
	ДеревоИтоговТМП.Колонки.Добавить("Показатель");
	ДеревоИтоговТМП.Колонки.Добавить("План", Новый ОписаниеТипов("Число"));
	ДеревоИтоговТМП.Колонки.Добавить("Факт", Новый ОписаниеТипов("Число"));
	ДеревоИтоговТМП.Колонки.Добавить("ПроцентВыполнения", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаОтветственный Из ТабСобытий.Строки Цикл
		СтрокаРодитель = ДеревоИтоговТМП.Строки.Добавить();
		СтрокаРодитель.Показатель = СтрокаОтветственный.Ответственный;
		
		Для Каждого СтрокаВидСобытия Из СтрокаОтветственный.Строки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаВидСобытия.ВидВзаимодействия) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаВида = СтрокаРодитель.Строки.Найти(СтрокаВидСобытия.ВидВзаимодействия, "Показатель");
			Если СтрокаВида = Неопределено Тогда
				СтрокаВида = СтрокаРодитель.Строки.Добавить();
				СтрокаВида.Показатель = СтрокаВидСобытия.ВидВзаимодействия;
			КонецЕсли;
			Для Каждого СтрокаСобытие Из СтрокаВидСобытия.Строки Цикл
				
				Завершена = СтрокаСобытие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
				СтрокаВида.План = СтрокаВида.План + 1;
				
				Если Завершена Тогда
					СтрокаВида.Факт = СтрокаВида.Факт + 1;
					
				КонецЕсли;	
				Если СтрокаВида.План = 0 Тогда
					СтрокаВида.ПроцентВыполнения = 0;
				Иначе	
					СтрокаВида.ПроцентВыполнения = СтрокаВида.Факт * 100 / СтрокаВида.План;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ТекСтрокаДерева = Неопределено;
	ДеревоИтогов.ПолучитьЭлементы().Очистить();
	Для Каждого СтрокаПользователь Из ДеревоИтоговТМП.Строки Цикл
		СтрокаРодитель = ДеревоИтогов.ПолучитьЭлементы().Добавить();
		СтрокаРодитель.Показатель = СтрокаПользователь.Показатель;
		СтрокаПользователь.План = СтрокаПользователь.Строки.Итог("План");
		СтрокаПользователь.Факт = СтрокаПользователь.Строки.Итог("Факт");
		СтрокаРодитель.План = СтрокаПользователь.План;
		СтрокаРодитель.Факт = СтрокаПользователь.Факт;
		
		Если СтрокаРодитель.План = 0 Тогда
			СтрокаРодитель.ПроцентВыполнения = 0;
		Иначе	
			СтрокаРодитель.ПроцентВыполнения = СтрокаРодитель.Факт * 100 / СтрокаРодитель.План;
		КонецЕсли;
				
		Для Каждого СтрокаПоказатель Из СтрокаПользователь.Строки Цикл
			СтрокаПодчиненный = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			СтрокаПодчиненный.Показатель = СтрокаПоказатель.Показатель;
			СтрокаПодчиненный.План = СтрокаПоказатель.План;
			СтрокаПодчиненный.Факт = СтрокаПоказатель.Факт;
			СтрокаПодчиненный.ПроцентВыполнения = СтрокаПоказатель.ПроцентВыполнения;
		КонецЦикла;	
		Если СтрокаРодитель.Показатель = Объект.Ответственный Тогда
			ТекСтрокаДерева = СтрокаРодитель;
		КонецЕсли;	
	КонецЦикла;	
	
	Элементы.ДеревоИтоговПоказатель.ТекстПодвала = НСтр("ru='Итого :'");
	Элементы.ДеревоИтоговПлан.ТекстПодвала = ДеревоИтоговТМП.Строки.Итог("План");
	Элементы.ДеревоИтоговФакт.ТекстПодвала = ДеревоИтоговТМП.Строки.Итог("Факт");
	
	Если ДеревоИтоговТМП.Строки.Итог("План") = 0 Тогда
		Элементы.ДеревоИтоговПроцентВыполнения.ТекстПодвала = 0;
	Иначе	
		Элементы.ДеревоИтоговПроцентВыполнения.ТекстПодвала =
			ДеревоИтоговТМП.Строки.Итог("Факт") * 100 / ДеревоИтоговТМП.Строки.Итог("План");
	КонецЕсли;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		Элементы.ДеревоИтогов.ТекущаяСтрока = 0;
	Иначе	
		Элементы.ДеревоИтогов.ТекущаяСтрока = ТекСтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;	
	ЗаполнитьКалендарьПоОтветственному();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКалендарьПоОтветственному()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	CRM_Взаимодействие.ПлановаяДата КАК ПлановаяДата,
	|	CRM_Взаимодействие.ПлановаяДатаЗавершение КАК ПлановаяДатаЗавершение,
	|	CRM_Взаимодействие.Содержание КАК Содержание,
	|	CRM_Взаимодействие.Ссылка КАК Ссылка,
	|	CRM_Взаимодействие.Ответственный КАК Ответственный,
	|	CRM_Взаимодействие.Тема КАК Тема,
	|	CRM_Взаимодействие.СтатусВзаимодействия КАК СтатусВзаимодействия,
	|	CRM_Взаимодействие.ВидВзаимодействия.Наименование КАК ВидВзаимодействия,
	|	CRM_Взаимодействие.ПосещениеПодтверждено КАК ПосещениеПодтверждено,
	|	ВЫБОР
	|		КОГДА ЧАС(ДОБАВИТЬКДАТЕ(CRM_Взаимодействие.ПлановаяДатаЗавершение, СЕКУНДА, -1)) > &КонецДняКалендаряЧас
	|			ТОГДА ЧАС(ДОБАВИТЬКДАТЕ(CRM_Взаимодействие.ПлановаяДатаЗавершение, СЕКУНДА, -1))
	|		ИНАЧЕ ЧАС(ПлановаяДата)
	|	КОНЕЦ КАК Час
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование ССЫЛКА Справочник.CRM_ЖурналыВстреч
	|	И НЕ CRM_Взаимодействие.ПометкаУдаления
	|	И CRM_Взаимодействие.ДокументОснование.Ответственный = &ОтветственныйДокументаОснования
	|	И CRM_Взаимодействие.ПлановаяДата >= &ДатаНачалаОтбораСобытий
	|	И CRM_Взаимодействие.ПлановаяДата <= &ДатаОкончанияОтбораСобытий";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДатаНачалаОтбораСобытий = Объект.ДатаНачала;
	
	Запрос.УстановитьПараметр("ОтветственныйДокументаОснования",	Объект.Ответственный);
	Запрос.УстановитьПараметр("ДатаНачалаОтбораСобытий",			ДатаНачалаОтбораСобытий);
	Запрос.УстановитьПараметр("ДатаОкончанияОтбораСобытий",			КонецНедели(ДатаНачалаОтбораСобытий));
	Запрос.УстановитьПараметр("КонецДняКалендаряЧас",
						КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас - 1);
	
	ТабСобытий = Запрос.Выполнить().Выгрузить();
	
	Планировщик.Элементы.Очистить();
	ПоследнийОтображаемыйДень = Планировщик.ТекущиеПериодыОтображения[0].Конец;
	
	Для Каждого СтрокаСобытие Из ТабСобытий Цикл
		
		Завершена = СтрокаСобытие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
		Отменена = СтрокаСобытие.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
		Подтверждена = СтрокаСобытие.ПосещениеПодтверждено;
		
		НовыйЭлемент  = Планировщик.Элементы.Добавить(СтрокаСобытие.ПлановаяДата, СтрокаСобытие.ПлановаяДатаЗавершение);
		НовыйЭлемент.Текст = ПолучитьПредставлениеСобытия(
			СтрокаСобытие.Тема,
			Неопределено,
			СтрокаСобытие.Ответственный,
			СтрокаСобытие.ПлановаяДата,
			СтрокаСобытие.ПлановаяДатаЗавершение);
		НовыйЭлемент.Значение = СтрокаСобытие.Ссылка;
		
		Если (СтрокаСобытие.ПлановаяДата < ТекущаяДатаСеанса()) И НЕ Завершена И НЕ Отменена Тогда
			НовыйЭлемент.ЦветФона =  WebЦвета.ЛососьСветлый;
		ИначеЕсли Завершена Тогда
			НовыйЭлемент.ЦветФона =  WebЦвета.СеребристоСерый;
		КонецЕсли;
		
		Если Подтверждена Тогда
			НовыйЭлемент.ЦветФона =  WebЦвета.СветлоЗеленый;
		КонецЕсли;
		
		Если Отменена Тогда
			НовыйЭлемент.Шрифт = Новый Шрифт(, , , , , Истина);
		КонецЕсли;
		
		ПоследнийОтображаемыйДень = Макс(СтрокаСобытие.ПлановаяДата, ПоследнийОтображаемыйДень);
		
	КонецЦикла;
	
	Если ТабСобытий.Количество() <> 0 Тогда
		
		ЧасыДляКорректировкиШкалыВремени = ТабСобытий.Скопировать(, "Час");
		ЧасыДляКорректировкиШкалыВремени.Сортировать("Час");
		ЧасМинимум = Мин(ЧасыДляКорректировкиШкалыВремени[0].Час,
			 КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас);
		ЧасМаксимум = Макс(ЧасыДляКорректировкиШкалыВремени[ЧасыДляКорректировкиШкалыВремени.Количество() - 1].Час + 1, 
			КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас);
			
		ОткорректироватьТаблицуЧасов = Ложь;
		
		Если ЧасМинимум < КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас Тогда
			ОткорректироватьТаблицуЧасов = Истина;
			КорректировкаНачалаДня = ЧасМинимум - КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас;
			Планировщик.ОтступСНачалаПереносаШкалыВремени = КэшНастроекОтображения.НастройкиОтображения.НачалоДняКалендаряЧас 
				+ КорректировкаНачалаДня;
		КонецЕсли;
		
		Если ЧасМаксимум > КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас Тогда
			ОткорректироватьТаблицуЧасов = Истина;
			КорректировкаКонцаДня = ЧасМаксимум - КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас;
			Планировщик.ОтступСКонцаПереносаШкалыВремени = 24 - КэшНастроекОтображения.НастройкиОтображения.КонецДняКалендаряЧас 
				- КорректировкаКонцаДня;
			КонецЕсли;
			
		Если ПоследнийОтображаемыйДень > Планировщик.ТекущиеПериодыОтображения[0].Конец Тогда
			ОткорректироватьТаблицуЧасов = Истина;
			Планировщик.ТекущиеПериодыОтображения[0].Конец = КонецДня(ПоследнийОтображаемыйДень);
		КонецЕсли;
			
		Если ОткорректироватьТаблицуЧасов Тогда
			ДобавитьТекущиеПериоды(Планировщик.ТекущиеПериодыОтображения[0].Начало,
				 Планировщик.ТекущиеПериодыОтображения[0].Конец);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтображенияПоУмолчанию()
	СтруктураНастройки = Новый Структура();
	
	// Примечание: не все настройки в структуре выносятся на редактирование пользователю,
	// некоторые существуют с целью хранить все в одном месте.
	
	// Настройки отображения
	СтруктураНастройкиОтображения = Новый Структура(
	"НачалоДняКалендаряЧас,
	|КонецДняКалендаряЧас,
	|НачалоРабочегоДняЧас,
	|КонецРабочегоДняЧас,
	|ПоказыватьНедействительныхПользователей,
	|КалендарьКоличествоДнейВНеделе,
	|СписокПредставлениеСобытияВКалендаре,
	|РасписаниеИнтервалШкалыВремени,
	|ИспользоватьСобытияНаВесьДень,
	|ЕстьОбеденныйПерерыв,
	|НачалоОбеденногоПерерываЧас,
	|КонецОбеденногоПерерываЧас,
	|РасположениеШкалыВремени,
	|ОтображатьЦветомЗагруженностьКалендаря");
	
	СтруктураНастройкиОтображения.РасположениеШкалыВремени = 0;
	СтруктураНастройкиОтображения.ОтображатьЦветомЗагруженностьКалендаря = Ложь;
	
	СтруктураНастройкиОтображения.НачалоДняКалендаряЧас	= 8;
	СтруктураНастройкиОтображения.КонецДняКалендаряЧас	= 19;
	ЧасМинимум = СтруктураНастройкиОтображения.НачалоДняКалендаряЧас;
	ЧасМаксимум = СтруктураНастройкиОтображения.КонецДняКалендаряЧас;
	
	СтруктураНастройкиОтображения.НачалоРабочегоДняЧас	= 0;
	СтруктураНастройкиОтображения.КонецРабочегоДняЧас	= 23;
	
	СтруктураНастройкиОтображения.ПоказыватьНедействительныхПользователей = Ложь;
	
	СтруктураНастройкиОтображения.ЕстьОбеденныйПерерыв	= Ложь;
	СтруктураНастройкиОтображения.НачалоОбеденногоПерерываЧас	= 0;
	СтруктураНастройкиОтображения.КонецОбеденногоПерерываЧас	= 0;
	
	СтруктураНастройкиОтображения.КалендарьКоличествоДнейВНеделе = 7;
	
	СписокПредставлениеСобытияВКалендаре = Новый СписокЗначений();
	СписокПредставлениеСобытияВКалендаре.Добавить("Тема", НСтр("ru='Тема';en='Subject'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Время", НСтр("ru='Время';en='Time'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Клиент", НСтр("ru='Клиент';en='Client'"), Ложь);
	СписокПредставлениеСобытияВКалендаре.Добавить("Пользователь", НСтр("ru='Пользователь';en='User'"), Ложь);
	
	СтруктураНастройкиОтображения.СписокПредставлениеСобытияВКалендаре = СписокПредставлениеСобытияВКалендаре;
	
	СтруктураНастройкиОтображения.РасписаниеИнтервалШкалыВремени = 30;
	СтруктураНастройкиОтображения.ИспользоватьСобытияНаВесьДень = Истина;
	
	СтруктураНастройки.Вставить("НастройкиОтображения", СтруктураНастройкиОтображения);
	
	// Общие настройки
	СтруктураОбщиеНастройки = Новый Структура(
	"КалендарьИспользоватьКалендарныеГрафики,
	|ОтображатьПолеСодержанияКалендаря,
	|КалендарьОбновлятьПриЛюбыхСобытиях,
	|Автообновление,
	|ПериодАвтообновления");
	
	СтруктураОбщиеНастройки.ОтображатьПолеСодержанияКалендаря = Истина;
	
	СтруктураОбщиеНастройки.КалендарьИспользоватьКалендарныеГрафики = Истина;
	СтруктураОбщиеНастройки.КалендарьОбновлятьПриЛюбыхСобытиях 		= Ложь;
	
	СтруктураОбщиеНастройки.Автообновление = Ложь;
	СтруктураОбщиеНастройки.ПериодАвтообновления = 1;
	
	СтруктураНастройки.Вставить("ОбщиеНастройки", СтруктураОбщиеНастройки);
	
	Возврат СтруктураНастройки;
КонецФункции

&НаСервере
Функция СоздатьНовоеМероприятие(ЗначенияЗаполнения)
	
	НовоеМероприятие = Документы.CRM_Взаимодействие.СоздатьДокумент();
	НовоеМероприятие.Заполнить(ЗначенияЗаполнения);
	НовоеМероприятие.ВидВзаимодействия = ВидВзаимодействия;
	НовоеМероприятие.Баллы = НовоеМероприятие.ВидВзаимодействия.Баллы;
	НовоеМероприятие.ДокументОснование = Объект.Ссылка;
	НовоеМероприятие.Записать();
	
	СтруктураВозврата = Новый Структура("Ссылка,Текст,ЦветФона");
	СтруктураВозврата.Ссылка			= НовоеМероприятие.Ссылка;
	СтруктураВозврата.Текст				= ПолучитьПредставлениеСобытия(НовоеМероприятие.Тема, Неопределено,
		 НовоеМероприятие.Ответственный, НовоеМероприятие.ПлановаяДата,
		 НовоеМероприятие.ПлановаяДатаЗавершение);
	Если ЗначениеЗаполнено(НовоеМероприятие.ОсновнаяКатегория) Тогда
	СтруктураВозврата.ЦветФона			= Новый Структура("ЦветКрасный,ЦветЗеленый,ЦветСиний",
		 НовоеМероприятие.ОсновнаяКатегория.ЦветКрасный,
										  НовоеМероприятие.ОсновнаяКатегория.ЦветЗеленый,
										  НовоеМероприятие.ОсновнаяКатегория.ЦветСиний);
	Иначе
		СтруктураВозврата.ЦветФона = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСобытия(Тема = "", Партнер, Пользователь, ПериодНачало, ПериодОкончание, ВесьДень = Ложь)
	
	СписокПредставлениеСобытияВКалендаре =
		КэшНастроекОтображения.НастройкиОтображения.СписокПредставлениеСобытияВКалендаре;
	
	Если ВесьДень Тогда
		ПредставлениеПериод = "";
	Иначе
		ПредставлениеПериод = Формат(ПериодНачало, "ДФ=ЧЧ:мм") + " - " + Формат(ПериодОкончание, "ДФ=ЧЧ:мм");
	КонецЕсли;
	
	бЗаголовок = Истина;
	СтрТекущая = "";
	СтрЗаголовок = "";
	СтрОбластьСобытия = "";
	бСкобка = Истина;
	Для Каждого СтрСписка Из СписокПредставлениеСобытияВКалендаре Цикл
		Если Не СтрСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		// Если СтрСписка.Значение = "Время" И ОбъектИмеетСвойство(ОписаниеСобытия, "СобытиеНаВесьДень") И
		// ОписаниеСобытия.СобытиеНаВесьДень Тогда
		//	Продолжить;
		// КонецЕсли;
		
		СтрТекущая = ?(бЗаголовок, СтрЗаголовок, СтрОбластьСобытия);
		
		Если СтрСписка.Значение = "Время" Тогда
			Если Не ПустаяСтрока(ПредставлениеПериод) Тогда
				Если Не бСкобка Тогда
					СтрТекущая = СтрТекущая + ") ";
					бСкобка = Истина;
				ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
					СтрТекущая = СтрТекущая + " ";
				КонецЕсли;
				СтрТекущая = СтрТекущая + ПредставлениеПериод;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Тема" Тогда
			Если Не ПустаяСтрока(Тема) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + " ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Тема;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Клиент" Тогда
			Если ЗначениеЗаполнено(Партнер) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + ", ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Строка(Партнер);
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Пользователь" Тогда
			Если ЗначениеЗаполнено(Пользователь) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + ", ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + Строка(Пользователь);
			КонецЕсли;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			Если Не бСкобка Тогда
				СтрЗаголовок = СтрЗаголовок + ")";
			КонецЕсли;
			бЗаголовок = Ложь;
			бСкобка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бСкобка И Не ПустаяСтрока(СтрТекущая) Тогда
		СтрТекущая = СтрТекущая + ")";
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		Возврат СтрОбластьСобытия;
	ИначеЕсли ПустаяСтрока(СтрОбластьСобытия) Тогда
		Возврат СтрЗаголовок;
	Иначе
		Возврат СтрЗаголовок + " " + СтрОбластьСобытия;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СдвинутьЗначениеДаты(ОкончанияПериода)
		
	Если ОкончанияПериода = НачалоДня(ОкончанияПериода) Тогда
		ОкончанияПериода = ОкончанияПериода - 1;
	КонецЕсли;
	
	Возврат ОкончанияПериода;

КонецФункции

&НаКлиенте
Функция ОкруглитьЗначениеДаты(ЗначениеДаты)
	
	Если Планировщик.ШкалаВремени.Элементы.Количество() = 1
		И Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час Тогда
		
		ОкруглятьДо = 30;
		
		ЗначениеДаты = CRM_ОбщегоНазначенияКлиентСервер.ОкруглитьДатуДоМинут(ЗначениеДаты, ОкруглятьДо, Истина);
		
	КонецЕсли;
	
	Возврат ЗначениеДаты;
	
КонецФункции

Процедура УстановитьПометкуУдаленияНаСервере(СсылкаЭлемента)
	
	ОбъектЭлемента = СсылкаЭлемента.ПолучитьОбъект();
	ОбъектЭлемента.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииБизнеспроцессов

// +ПанельБП
&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах",
		 Объект.Ссылка, Неопределено,
		 Неопределено);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если СтрНайти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды,
				 "КомандаТочкаСтартаБизнесПроцесса_", ""), "_",
				 "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны."
"Выполнение действия ""Начать '") + ВернутьЗаголовокКоманды(Команда.Имя) + """ " + НСтр("ru='возможно только после записи данных."
"Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение",
			 ЭтотОбъект,
			 Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Уже создан бизнес-процесс."
"Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение",
			 ЭтотОбъект,
			 КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ВосстановитьНастройкиФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКлиентов()
	Если ПериодДляОтбораКлиентов = "ОтборНеделя" Тогда
		ДатаНачалаОтбора = Объект.ДатаНачала;
		ДатаОкончанияОтбора = КонецНедели(Объект.ДатаНачала);
	ИначеЕсли ПериодДляОтбораКлиентов = "ОтборМесяц" Тогда
		ДатаНачалаОтбора = НачалоМесяца(Объект.ДатаНачала);
		ДатаОкончанияОтбора = КонецМесяца(Объект.ДатаНачала);	
	ИначеЕсли ПериодДляОтбораКлиентов = "ОтборКвартал" Тогда
		ДатаНачалаОтбора = НачалоКвартала(Объект.ДатаНачала);
		ДатаОкончанияОтбора = КонецКвартала(Объект.ДатаНачала);	
	ИначеЕсли ПериодДляОтбораКлиентов = "ОтборГод" Тогда
		ДатаНачалаОтбора = НачалоГода(Объект.ДатаНачала);                                                                                                                               
		ДатаОкончанияОтбора = КонецГода(Объект.ДатаНачала);	
	ИначеЕсли ПериодДляОтбораКлиентов = "ОтборОтключить" Тогда
		ДатаНачалаОтбора = НачалоГода(Объект.ДатаНачала);
		ДатаОкончанияОтбора = КонецГода(Объект.ДатаНачала);	
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКлиентов, "ПустаяДата", ПустаяДата, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКлиентов, "ОтборОтключен",
		 ПериодДляОтбораКлиентов = "ОтборОтключить",
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКлиентов, "НачДатаОтбора",
		 ДатаНачалаОтбора,
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКлиентов, "КонДатаОтбора",
		 ДатаОкончанияОтбора,
		 Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидВзаимодействия", ВидВзаимодействия);
	ОткрытьФорму("Обработка.CRM_АРМПланированияВстреч.Форма.ФормаНастроек", ПараметрыОткрытия,
		 ЭтотОбъект, , , , Новый ОписаниеОповещения("ПослеЗакрытияНастроек", ЭтотОбъект),
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияНастроек(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВидВзаимодействия = Результат.ВидВзаимодействия;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДляОтбораКлиентовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияОтбора", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОтборовКлиента, Элементы.ДекорацияИмяОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияОтбора(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ПериодДляОтбораКлиентов = Результат.Значение;
		Элементы.ДекорацияИмяОтбора.Заголовок = Результат.Представление;
		УстановитьОтборКлиентов();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	Если ЗапрещеноИзменение Тогда
		Возврат;
	КонецЕсли;	
	
	Партнер = Элементы.СписокКлиентов.ТекущаяСтрока;
	Если Элементы.Контакты.ТекущиеДанные <> Неопределено Тогда
		Контакт = Элементы.Контакты.ТекущиеДанные.Ссылка;
	Иначе
		Контект = Неопределено;
	КонецЕсли;
	
	СтруктураКонтактов = ПолучитьОписаниеКонтактовДляВзаимодействия(Партнер, Контакт);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидВзаимодействия",		ВидВзаимодействия);
	
	ЗначенияЗаполнения.Вставить("Дата",						ОбщегоНазначенияКлиент.ДатаСеанса());
	ЗначенияЗаполнения.Вставить("ПлановаяДата",				ОкруглитьЗначениеДаты(НачалоНедели(Объект.ДатаНачала)));
	ЗначенияЗаполнения.Вставить("ПлановаяДатаЗавершение",
			СдвинутьЗначениеДаты(ОкруглитьЗначениеДаты(КонецДня(ЗначенияЗаполнения.ПлановаяДата))));
	ЗначенияЗаполнения.Вставить("Тема",						"Встреча с " + Строка(Партнер));
	ЗначенияЗаполнения.Вставить("Ответственный",			Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("ДокументОснование",		Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Партнер",		СтруктураКонтактов.Партнер);
	ЗначенияЗаполнения.Вставить("КонтактноеЛицо",		СтруктураКонтактов.Контакт);
	ЗначенияЗаполнения.Вставить("АдресОфиса",
				CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СтруктураКонтактов.Партнер,
		 "CRM_ОсновнойАдрес"));

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыОткрытия.Вставить("ОткрыватьФорму", Истина);
	
	ОткрытьФорму("Документ.CRM_Взаимодействие.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 Новый ОписаниеОповещения("ПослеЗакрытияОкнаВзаимодействия",
		 ЭтотОбъект));
КонецПроцедуры

// -ПанельБП

#КонецОбласти
