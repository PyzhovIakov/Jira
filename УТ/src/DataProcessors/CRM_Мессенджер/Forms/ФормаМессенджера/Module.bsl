
#Область ОписаниеПеременных

&НаКлиенте
Перем ДокументБраузера, ОкноБраузера, ТекстРедактированияСообщения, АктивизированоПриОткрытии;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПериодОбновления = 5;
	
	Если Параметры.Свойство("Ключ") Тогда
		ТекущаяГруппа = Параметры.Ключ.Группа;
		ТекущаяУчетнаяЗапись = Параметры.Ключ.УчетнаяЗапись;
		ТекущийID_Пользователя = Параметры.Ключ.ID_Пользователя;
		
		Если ТипЗнч(Параметры.Ключ) = Тип("СправочникСсылка.CRM_Диалоги")  Тогда
			ТекущийДиалог = Параметры.Ключ;
			ТекущийКонтакт = ТекущийДиалог.Контакт;
		Иначе
			ТекущийДиалог = Параметры.Ключ.Диалог;
			ТекущееСообщение = Параметры.Ключ;
			ТекущийКонтакт = ТекущийДиалог.Контакт;
		КонецЕсли;
		
		ОтборID_Пользователя = ТекущийДиалог.ID_Пользователя;
		ОтборГруппа = ТекущийДиалог.Группа;
		ОтборКанал = ТекущийДиалог.УчетнаяЗапись;
		
		ЭтоНовыйКонтакт = (ТипЗнч(ТекущийКонтакт) = Тип("Строка"));
		Элементы.КонтактыКонтекстноеМенюСвязатьСКонтактом.Видимость = ЭтоНовыйКонтакт И ЗначениеЗаполнено(ОтборID_Пользователя);
		
		ТекущийСтатус = ТекущийДиалог.Статус;
		ПараметрыМессенджера = CRM_РаботаСМессенджерамиСерверПовтИсп.ПараметрыМессенджера(ТекущаяУчетнаяЗапись);
		
		// Переключить на отображение всех диалогов.
		ОтборСтатусДиалогов = 2;
		
		// При открытии был передан диалог, после программной активизации строки потребуется принудительное обновление диалогов.
		ФормаОткрытаПрограммно = Истина;
		
		// Установка отборов для программного открытия
		ОтображатьЗакрытые = Истина;
		ОтображатьЗаблокированные = Истина;
		ОтображатьТолькоСвои = Ложь;
	
	ИначеЕсли Параметры.Свойство("ПараметрОткрытия") Тогда
		Если ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.Партнеры") Тогда
			ОтборКонтакты.ЗагрузитьЗначения(CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Параметры.ПараметрОткрытия).ВыгрузитьКолонку("КонтактноеЛицо"));
			ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия);
		ИначеЕсли ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
				Или ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия);
		ИначеЕсли ТипЗнч(Параметры.ПараметрОткрытия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия.Партнер);
			ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия.КонтактноеЛицо);
			ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия.ПотенциальныйКлиент);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = ?(ФормаОткрытаПрограммно, Справочники.Пользователи.ПустаяСсылка(), 
	Пользователи.ТекущийПользователь());
	РолиТекущегоПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	
	АвторизованныйПользователь = Пользователи.ТекущийПользователь();
	РолиАвторизованногоПользователя = РолиТекущегоПользователя; 
	
	ИспользоватьПК = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПотенциальныхКлиентов");
	
	CRM_РаботаСМессенджерамиСервер.ОчиститьСобытияМессенджера(ТекущийПользователь);
	ПолучитьЛоготипыМессенджеров();
	
	// Заполняем массив с картинками расширений файлов
	Для ИндексКартинки = 0 По 38 Цикл
		СписокИконокФайлов.Добавить(БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2],
			CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
				БиблиотекаКартинок["CRM_ИконкаТипаФайла_" + ИндексКартинки * 2], УникальныйИдентификатор));
	КонецЦикла;
	
	СписокФильтровПоТипуМессенджера.Очистить();
	Если Параметры.Свойство("ПутьКФайлуМакета") Тогда
		ПутьКФайлуМакета = Параметры.ПутьКФайлуМакета;
		СписокФильтровПоТипуМессенджера.Добавить("Instagram");
		СписокФильтровПоТипуМессенджера.Добавить("Viber");
		СписокФильтровПоТипуМессенджера.Добавить("ВКонтакте");
		Если Параметры.Свойство("ПараметрОткрытия") Тогда
			Если ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия.Владелец);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("Вложения") Тогда
		Для Каждого ЗначениеВложения Из Параметры.Вложения Цикл 
			СтрокаФайла = ПрисоединенныеФайлыОтправляемые.Добавить();
			СтрокаФайла.Представление = ЗначениеВложения.Представление;
			СтрокаФайла.Значение = ЗначениеВложения.АдресВоВременномХранилище;
			СтрокаФайла.ИмяФайлаНаКомпьютере = ЗначениеВложения.АдресВоВременномХранилище;
		КонецЦикла;
		СписокФильтровПоТипуМессенджера.Добавить("Instagram");
		СписокФильтровПоТипуМессенджера.Добавить("Viber");
		Если Параметры.Свойство("ПараметрОткрытия") Тогда
			Если ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОтборКонтакты.Добавить(Параметры.ПараметрОткрытия.Владелец);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КонтактыОбновить(Истина);
	
	ДанныеНайденногоДиалога = ДанныеНайденногоДиалога(ТекущийДиалог);
	Если Не ДанныеНайденногоДиалога = Неопределено Тогда
		Элементы.Контакты.ТекущаяСтрока = ДанныеНайденногоДиалога.Идентификатор; 
	КонецЕсли;
	
	//CRM_МетодыФормДокументовСервер.ДобавитьКомандуОтменитьОтклонение(ЭтаФорма, Элементы.СписокСообщений.КонтекстноеМеню);
	
	// Проверка наличия учетных записей
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_УчетныеЗаписиМессенджеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	|ГДЕ
	|	НЕ CRM_УчетныеЗаписиМессенджеров.ПометкаУдаления
	|	И CRM_УчетныеЗаписиМессенджеров.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НетУчетныхЗаписей = Истина;
	Иначе
		НетУчетныхЗаписей = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПоддержку") Тогда
		Команда_СвязатьСообщениеСИнтересом = Команды.Найти("СвязатьСообщениеСИнтересом");
		Если Команда_СвязатьСообщениеСИнтересом <> Неопределено Тогда
			//Команда_СвязатьСообщениеСИнтересом.Заголовок = НСтр("ru = 'Связать с интересом, обращением'");
			Команда_СвязатьСообщениеСИнтересом.Подсказка = НСтр("ru = 'Связать сообщение с интересом или обращением'");
		КонецЕсли;
	КонецЕсли;
	
	ОбсужденияДоступны = Обсуждения.ОбсужденияДоступны();
	Если ОбсужденияДоступны Тогда
		Попытка
			ИдентификаторыОбсуждений = Новый ФиксированныйМассив(CRM_РаботаСМессенджерамиСервер.ПодключаемыеОбсужденияМессенджеров(ТекущийПользователь,
				 РолиТекущегоПользователя));
			УчетнаяЗаписьСистемаВзаимодействия = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия;
		Исключение
			// Ошибка подключения к серверу обсуждений.
			ОписаниеОшибки = ОписаниеОшибки();
			ОбсужденияДоступны = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +ОформлениеМессенджера
	НастройкаОформленияПользователя = CRM_РаботаСМессенджерамиСервер.ПолучитьОформлениеМессенджераПоПользователю(
		АвторизованныйПользователь);
	// -ОформлениеМессенджера
	
	УстановитьУсловноеОформление();
	СоздатьКнопкиОтборДиалоги();
	УстановитьВидимостьДоступностьКолонокКонтактов();
	ПокраситьКнопкиОтбораДиалоговНаСервере();
	
	СписокНастроек = ХранилищеНастроекДанныхФорм.ПолучитьСписок(ЭтотОбъект.ИмяФормы);
	Если СписокНастроек.Количество() = 0 Тогда // нет сохраненных настроек
		ИнициализироватьHTMLДокумент();
	КонецЕсли;
	
	ЗагрузитьДополнительныеНастройки();
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "Документ.CRM_СообщениеМессенджера") Тогда
		ОбновитьДоступностьЭлементовРаботыСДиалогом(Ложь);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Работа с диалогами ограничена до окончания конвертации данных!'"));
	КонецЕсли;
	
	Элементы.ДокументHTMLКонтекстноеМенюКомандаHTMLpaste.Доступность = Ложь;
	Если ОбщегоНазначения.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.ДокументHTMLКонтекстноеМенюКомандаHTMLpaste.Видимость = Ложь;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ВыводитьОповещенияНаРабочийСтол = 
		CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("Диалоги_ОповещенияНаРабочемСтоле", АвторизованныйПользователь);
	ФлагИспользованияПодсистемыCRM = CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется();
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		//Элементы.СписокСообщений.ТекущаяСтрока = ТекущееСообщение;
		//Элементы.СписокСообщений.ВыделенныеСтроки.Очистить();
	КонецЕсли;	
	
	ПроверкаНепрочитанныхСообщенийМессенджера();
	
	CRM_РаботаСМессенджерамиКлиент.ПодключитьОповещенияОСлужебныхСообщениях(Истина);
	Если НЕ ОбсужденияДоступны Тогда
		ПодключитьОбработчикОжидания("ПроверкаПолученияСообщенийМессенджера", ПериодОбновления);
	Иначе
		Если ИдентификаторыОбсуждений <> Неопределено Тогда
			CRM_РаботаСМессенджерамиКлиент.ПодключитьОбработчикНовыхСообщений(ИдентификаторыОбсуждений); 
			ИдентификаторыОбсуждений = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НетУчетныхЗаписей Тогда
		ОткрытьФорму(
			"Справочник.CRM_УчетныеЗаписиМессенджеров.Форма.ФормаСписка", ,
			ЭтотОбъект, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКФайлуМакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПомещенияФайла", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, , ПутьКФайлуМакета, Ложь, УникальныйИдентификатор);
	КонецЕсли;
	
	глОткрытаФормаДиалогов = Истина;
	
	Если АктивизированоПриОткрытии = Неопределено Тогда
		АктивизированоПриОткрытии = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла,
		 ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(), "/",
		 "\"));
	ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	
	СтрокаФайла = ПрисоединенныеФайлыОтправляемые.Добавить();
	СтрокаФайла.Представление = ИмяФайла;
	СтрокаФайла.Значение = Адрес;
	#Если НЕ ВебКлиент Тогда
		СтрокаФайла.ИмяФайлаНаКомпьютере = ВыбранноеИмяФайла;
	#КонецЕсли
	
	СформироватьСсылкиВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СохраненаЛичнаяЗадача" ИЛИ ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Элементы.СписокСообщений.Обновить();
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
			CRM_СоисполнителиДиалоговКлиент.УдалитьВсехСоисполнителей(ДанныеТекущегоКонтакта(),
																Новый ОписаниеОповещения("ЗаполнитьСписокСоисполнителейОповещение", ЭтотОбъект));
			КонтактыОбновить(Ложь);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "CRM_ПолученыНовыеСообщения" Тогда	
		ПодключитьОбработчикОжидания("ПроверкаПолученияСообщенийМессенджера", 0.3, Истина);
	ИначеЕсли ИмяСобытия = "ДобавитьТекстВопросаВТекстПисьма" ИЛИ ИмяСобытия = "ДобавитьТекстОтветаВТекстПисьма" Тогда
		ПриВыбореРешенияБЗ(Параметр.Решение, Параметр.НомерОтвета, Ложь);
	ИначеЕсли ИмяСобытия = "ПринятиеОбращения" И ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
		КонтактыОбновить(Ложь);
	ИначеЕсли ИмяСобытия = "ОбновитьСообщения" И Открыта() Тогда
		ОбновитьСообщения();
	ИначеЕсли ИмяСобытия = "ОбновитьОблакоСоисполнителей" И (ЭтотОбъект = Параметр) Тогда
		ОбновитьОблакоСоисполнителей();
	ИначеЕсли ИмяСобытия = "ОбновитьКонтактыДиалогов" И Открыта() Тогда
		КонтактыОбновить(Ложь);
		ПроверкаНепрочитанныхСообщенийМессенджера(Ложь);
	ИначеЕсли ИмяСобытия = "ПроверкаПравописания_ИзмененТекст" И Источник = ЭтотОбъект Тогда
		ПроверяемыйТекст = Параметр.Текст;
	ИначеЕсли ИмяСобытия = "ИзмененаБлокировкаОтправителей" Тогда
		КонтактыОбновить(Ложь);
		КонтактыПриАктивизацииСтроки(Элементы.Контакты);
	ИначеЕсли ИмяСобытия = "ЗаписьНовогоОтветаВБазуЗнаний" Тогда
		БыстрыеОтветы_ПоискАвтоПодборНаСервере(БыстрыеОтветы_Поиск);
	ИначеЕсли ИмяСобытия = "ИзменениеОформленияМессенджера" И Открыта() Тогда
		Если НастройкаОформленияПользователя <> Параметр Тогда
			ОкноБраузера = Неопределено;
			ДокументБраузера = Неопределено;
			
			НастройкаОформленияПользователя = Параметр;
			
			ИнициализироватьHTMLДокумент();
			КонтактыПриАктивизацииСтрокиПродолжение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Если ФормаОткрытаПрограммно  Тогда
		Настройки.Удалить("ОтборСтатусДиалогов");
		Настройки.Удалить("ОтборПериод");
		Настройки.Удалить("ОтображатьЗакрытые");
		Настройки.Удалить("ТолькоСвои"); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ФормаОткрытаПрограммно  Тогда
		Настройки.Удалить("ОтборСтатусДиалогов");
		Настройки.Удалить("ОтборПериод");
		Настройки.Удалить("ОтборКанал");
		Настройки.Удалить("ОтображатьЗакрытые");
		Настройки.Удалить("ОтображатьТолькоСвои");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПокраситьКнопкиОтбораДиалоговНаСервере();
	Если Не ФормаОткрытаПрограммно Тогда
		КонтактыОбновить();
	КонецЕсли;
	ЗаполнитьПанельОтборовБыстрыхОтветов();
	
	ИнициализироватьHTMLДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	глОткрытаФормаДиалогов = Ложь;
	Если НЕ ЗавершениеРаботы Тогда
		CRM_РабочийСтолКлиент.ПриЗакрытииФормы(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ТекущиеДанныеСтроки = Элементы.Контакты.ТекущиеДанные;
	
	Если ТекущиеДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылкуОбработки(
		Представление, Новый Структура("Ключ", ТекущийДиалог));
	
КонецПроцедуры // ОбработкаПолученияНавигационнойСсылки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// +Рабочий стол
&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()
// -Рабочий стол

&НаКлиенте
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	
	Если АктивизированоПриОткрытии = Неопределено Тогда
		АктивизированоПриОткрытии = Ложь;
	КонецЕсли;
	
	Если АктивизированоПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено И ТекСтрока.ФлагДоступностиДанных Тогда
		ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте(Истина);
		
		Если (ТекущийID_Пользователя <> ТекСтрока.ID_Пользователя
			ИЛИ ТекущийКонтакт <> ТекСтрока.Контакт
			ИЛИ ТекущаяГруппа <> ТекСтрока.Группа
			ИЛИ ТекущаяУчетнаяЗапись <> ТекСтрока.УчетнаяЗапись) 
			ИЛИ (ТекущийСтатус <> ТекСтрока.СтатусДиалога
				 И Не ФормаОткрытаПрограммно) Тогда // если форма открыта программно, то не нужно проверять статус диалога
			
			ФайлыВыведены = Ложь;
			ТекущийID_Пользователя = ТекСтрока.ID_Пользователя;
			ТекущийКонтакт = ТекСтрока.Контакт;
			ТекущаяГруппа = ТекСтрока.Группа;
			ТекущаяУчетнаяЗапись = ТекСтрока.УчетнаяЗапись;
			ТекущийДиалог = Неопределено;
			ТекущийСтатус = ТекСтрока.СтатусДиалога;
			ТекущийСтатусБлокировки = ТекСтрока.ПризнакБлокировкиОтправителя;
			ПараметрыМессенджера = CRM_РаботаСМессенджерамиСерверПовтИсп.ПараметрыМессенджера(ТекущаяУчетнаяЗапись);
			
			Если ТекСтрока.Новых > 0 Тогда
				ПоследнееСообщение = ПроверкаПолученияСообщенийМессенджераНаСервере(
					ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, Дата(1, 1, 1));
			КонецЕсли;
			
			ЭтоНовыйКонтакт = (ТипЗнч(ТекущийКонтакт) = Тип("Строка"));
			Элементы.КонтактыКонтекстноеМенюСвязатьСКонтактом.Видимость = ЭтоНовыйКонтакт И ЗначениеЗаполнено(ТекущийID_Пользователя);
			
			Элементы.ПрикрепитьФайл.Видимость = ПараметрыМессенджера.ИспользуютсяВложения;
			Элементы.ПрикрепитьФайлыИзБуфера.Видимость	= ПараметрыМессенджера.ИспользуютсяВложения;
			
			Если ОтборКонтакты.Количество() = 0 Тогда // такой отбор не устанавливается интерактивно. Если при программном открытии были переданы файлы, то очищать их не нужно 
				ПрисоединенныеФайлыОтправляемые.Очистить();
			КонецЕсли;
			
			ВложенияСообщения = "";
			ЦитируемоеСообщение = Неопределено;
			
			Если Элемент = Элементы.Контакты Тогда
				ПодключитьОбработчикОжидания("КонтактыПриАктивизацииСтрокиПродолжение", 0.2, Истина);
			КонецЕсли;
			
			ЭтоУчетнаяЗаписьСистемыВзаимодействия = (ТекущаяУчетнаяЗапись = УчетнаяЗаписьСистемаВзаимодействия);
			Элементы.ОтправитьСообщениеОтложенно.Видимость = Не ЭтоУчетнаяЗаписьСистемыВзаимодействия;
			Элементы.Диалог_ИзменитьБлокировкуПолученияСообщений.Видимость = Не ЭтоУчетнаяЗаписьСистемыВзаимодействия;
			Элементы.СписокПользователейСистемыВзаимодействия.Видимость = ЭтоУчетнаяЗаписьСистемыВзаимодействия;
			
			ДоступностьРедактированияГруппировки = Не ТекСтрока.ЭтоПапкаДиалогов;
			Элементы.КонтактыКонтекстноеМенюПапкиДиалогов_ДобавитьВПапку.Доступность = ДоступностьРедактированияГруппировки;
			Элементы.КонтактыКонтекстноеМенюПапкиДиалогов_УбратьИзПапки.Доступность = 
				(ДоступностьРедактированияГруппировки И ЗначениеЗаполнено(ТекСтрока.ПапкаДиалога));
			
			Элементы.Диалог_ИзменитьБлокировкуПолученияСообщений.Картинка = ?(
				ТекущийСтатусБлокировки,
				БиблиотекаКартинок.CRM_ДиалогРазблокировать,
				БиблиотекаКартинок.CRM_ДиалогЗаблокировать);
			
			СписокПользователейСистемыВзаимодействия.Очистить();
		КонецЕсли;
		
		Если Элемент = Элементы.Контакты
				И ФормаОткрытаПрограммно Тогда // в случае программной установки диалога при открытии формы потребуется обновить диалоги
			ПодключитьОбработчикОжидания("КонтактыПриАктивизацииСтрокиПродолжение", 0.2, Истина);
			ФормаОткрытаПрограммно = Ложь;
			
			Элементы.СписокПользователейСистемыВзаимодействия.Видимость =
				(ТекущаяУчетнаяЗапись = УчетнаяЗаписьСистемаВзаимодействия);
			СписокПользователейСистемыВзаимодействия.Очистить();
		КонецЕсли;
		
		УсловияИспользованияПриняты = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(
			ТекущаяУчетнаяЗапись, "УсловияИспользованияПриняты");
		
		Элементы.ГруппаУсловияИспользования.Видимость = УсловияИспользованияПриняты;
		ТипТекущегоМессенджера = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяУчетнаяЗапись, "ТипМессенджера");
	Иначе
		ОтключитьОбработчикОжидания("КонтактыПриАктивизацииСтрокиПродолжение");
		ТекущийID_Пользователя = "";
		ТекущийКонтакт = Неопределено;
		ТекущаяГруппа = "";

		Если ОкноБраузера <> Неопределено И ОкноБраузера.document.readyState = "complete" Тогда
			ЭлементДиалога = ДокументБраузера.getElementById("dialog");
			ЭлементДиалога.innerHTML = "";
			
			ОкноБраузера.ClearDialogs();
		КонецЕсли;
		
		ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте(Ложь);
		
		СоисполнителиТЗ.Очистить();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПослеОбновленияДереваЗначенийКонтактов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияДереваЗначенийКонтактов()
	
	Если ФлагНеобходимостиРаскрытияПапок Тогда
		Для Каждого ТекущяяГруппировкаРаскрытия Из СписокРаскрытыхПапок Цикл
			ИдентификаторСтроки = Число(ТекущяяГруппировкаРаскрытия.Представление);
			Если Контакты.НайтиПоИдентификатору(ИдентификаторСтроки) <> Неопределено Тогда
				Элементы.Контакты.Развернуть(ИдентификаторСтроки);
			КонецЕсли;
		КонецЦикла;
		
		ФлагНеобходимостиРаскрытияПапок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииСтрокиПродолжение()
	
	Если ОкноБраузера = Неопределено ИЛИ ОкноБраузера.document.readyState <> "complete" Тогда
		ПодключитьОбработчикОжидания("КонтактыПриАктивизацииСтрокиПродолжение", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Контакты.ТекущиеДанные;
	Если ТекСтрока.ЭтоПапкаДиалогов Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповойЧат = Не ЗначениеЗаполнено(ТекущийID_Пользователя);

	// Диалог может быть передан при открытии формы. Например, при переходе из ленты.
	Если ЗначениеЗаполнено(ТекущийДиалог) Тогда
		ОбновитьДиалогиИСообщения(ТекущийДиалог);
	Иначе
		ОбновитьДиалогиИСообщения();
	КонецЕсли;
	
	// очистка сообщения и вложений при переключении на диалог
	ОкноБраузера.clearChatInput();
	
	ТекущийОтветственный = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийДиалог, "Ответственный");
	
	// Читать сообщения может только ответственный пользователь, соисполнитель, либо новый диалог.
	Если ПользовательЯвляетсяОтветственным(ТекущийОтветственный)
			Или ПользовательЯвляетсяСоисполнителем
			Или Не ЗначениеЗаполнено(ТекущийОтветственный) Тогда
		// Пометка прочтения.
		CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
			ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, АвторизованныйПользователь);
		
		// Убрать жирность со строки.
		Если ТекСтрока <> Неопределено И ТекСтрока.Новых > 0 Тогда
			ПапкаДиалогаЭлементДерева = ТекСтрока.ПолучитьРодителя();
			Если ПапкаДиалогаЭлементДерева <> Неопределено Тогда
				ПапкаДиалогаЭлементДерева.Новых = ?(
					ПапкаДиалогаЭлементДерева.Новых - 1 > 0,
					ПапкаДиалогаЭлементДерева.Новых - 1, 0);
			КонецЕсли;
			
			ТекСтрока.Новых = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяУчетнаяЗапись = ПредопределенноеЗначение("Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия") 
		ИЛИ ТекущаяУчетнаяЗапись = ПредопределенноеЗначение("Справочник.CRM_УчетныеЗаписиМессенджеров.B2BПортал") Тогда
		Элементы.ГруппаСообщение.Видимость = Истина И ФлагИспользованияПодсистемыCRM;
	Иначе
		Элементы.ГруппаСообщение.Видимость = ТекСтрока.Включена
			И CRM_РаботаСМессенджерамиСервер.ТекущийПользовательПолучитьПравоУчетнойЗаписи(ТекущаяУчетнаяЗапись, "Запись")
			И (ПользовательЯвляетсяОтветственным(ТекущийОтветственный)
			Или ПользовательЯвляетсяСоисполнителем Или (Не ЗначениеЗаполнено(ТекущийОтветственный)))
			И ФлагИспользованияПодсистемыCRM;
	КонецЕсли;
	
	ОкноБраузера.changeChatInputVisibility(Элементы.ГруппаСообщение.Видимость);
	
	Контекст = CRM_РаботаСМессенджерамиСерверПовтИсп.HTMLКонтекста(ТекущаяУчетнаяЗапись,
		 ТекущийID_Пользователя,
		 ТекущаяГруппа);
	ОкноБраузера.setContext(Контекст);
	ПроверкаНепрочитанныхСообщенийМессенджера(Ложь);
	УстановитьДоступностьПереходаНаСайт(ТекСтрока);
	
	// В режиме выбора сообщений и для групповых чатов кнопка всегда НЕдоступна.
	Если НЕ РежимВыбораСообщений И Не ГрупповойЧат Тогда
		Элементы.Диалог_Принять.Доступность = Не ПринятТекущимПользователем И ТекДиалогАтивен
		И НЕ ТекДиалогПереданДляОзнакомления;
	Иначе
		Элементы.Диалог_Принять.Доступность = Ложь;
	КонецЕсли;
	Элементы.СписокСообщенийПринятьОбращение.Доступность = Не ГрупповойЧат;
	
	ОтображатьКнопкуСоисполнителяПокинутьДиалог = ПользовательЯвляетсяСоисполнителем И НЕ ТекДиалогПереданДляОзнакомления;
	
	Элементы.Диалог_Закрыть.Видимость				= Не ОтображатьКнопкуСоисполнителяПокинутьДиалог;
	Элементы.Диалог_Закрыть.Доступность = Не ГрупповойЧат;
	Элементы.Соисполнители_ПокинутьДиалог.Видимость	= ОтображатьКнопкуСоисполнителяПокинутьДиалог;
	
	СформироватьСсылкиВложений();
	
	ЗаполнитьСписокСоисполнителей();
	
	ОбновитьВидимостьПунктовКонтекстногоМенюСообщения();
	
	Если Не ОкноБраузера.favouriteIsHidden() Тогда
		ОбновитьВажныеСообщения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииПоля(Элемент)
	
	Если АктивизированоПриОткрытии = Неопределено Тогда
		АктивизированоПриОткрытии = Ложь;
	КонецЕсли;
	
	Если АктивизированоПриОткрытии Тогда
		
		ЭтаФорма.ТекущийЭлемент = Элементы.Поиск_Основной;
		Элементы.Контакты.ВыделенныеСтроки.Очистить();
		
		АктивизированоПриОткрытии = Ложь;
		Возврат;
		
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "КонтактыТекстПоследнего" Тогда
		Элемент.ТекущийЭлемент = Элементы.КонтактыКонтакт;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные.ЭтоПапкаДиалогов Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Контакт) И ТипЗнч(ТекДанные.Контакт) <> Тип("Строка") Тогда
		ПоказатьЗначение(, ТекДанные.Контакт);
	Иначе
		СтруктураСтроки = Новый Структура("ID_Пользователя, Группа, УчетнаяЗапись");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекДанные);
		ПутьКДиалогу = CRM_РаботаСМессенджерамиСервер.ПутьКДиалогуВБраузере(СтруктураСтроки);
		
		Если ЗначениеЗаполнено(ПутьКДиалогу) Тогда
			ПерейтиПоНавигационнойСсылке(ПутьКДиалогу);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.ТекущиеДанные <> Неопределено тогда
		ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
КонецПроцедуры // КонтактыНачалоПеретаскивания()

&НаКлиенте
Процедура КонтактыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонтактыПроверкаПеретаскивания()

&НаКлиенте
Процедура КонтактыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ВыделенныеСтрокиКонтактов = ПолучитьМассивВыделенныхКонтактов();
	
	Если ВыделенныеСтрокиКонтактов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		УдалитьДиалогиИзПапки(ВыделенныеСтрокиКонтактов);
	Иначе
		ДанныеСтрокиПереноса = Контакты.НайтиПоИдентификатору(Строка);
		
		Если ДанныеСтрокиПереноса = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтрокиПереноса.ПапкаДиалога) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не удалось выполнить перенос диалогов в группу.'; en = 'The transfer of dialogs to the group failed.'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьДиалогиВПапку(ВыделенныеСтрокиКонтактов, ДанныеСтрокиПереноса.ПапкаДиалога);
	КонецЕсли;
	
	КонтактыОбновить();
	
КонецПроцедуры // КонтактыПеретаскивание()

&НаКлиенте
Процедура КонтактыПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаскрываемойПапки = Контакты.НайтиПоИдентификатору(Строка);
	
	НайденныеЭлементДеревера = СписокРаскрытыхПапок.НайтиПоЗначению(
		ДанныеРаскрываемойПапки.ПапкаДиалога);
	
	Если НайденныеЭлементДеревера = Неопределено Тогда
		НайденныеЭлементДеревера = СписокРаскрытыхПапок.Добавить(
			ДанныеРаскрываемойПапки.ПапкаДиалога);
	КонецЕсли;
	
	НайденныеЭлементДеревера.Представление = Строка;
	
КонецПроцедуры // КонтактыПередРазворачиванием()

&НаКлиенте
Процедура КонтактыПередСворачиванием(Элемент, Строка, Отказ)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСворачиваемойПапки = Контакты.НайтиПоИдентификатору(Строка);
	
	Если ДанныеСворачиваемойПапки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеЭлементДеревера = СписокРаскрытыхПапок.НайтиПоЗначению(
		ДанныеСворачиваемойПапки.ПапкаДиалога);
	
	Если НайденныеЭлементДеревера <> Неопределено Тогда
		СписокРаскрытыхПапок.Удалить(НайденныеЭлементДеревера);
	КонецЕсли;
	
КонецПроцедуры // КонтактыПередСворачиванием()

&НаКлиенте
Процедура СписокПользователейСистемыВзаимодействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущаяГруппа) Тогда 
		СписокПользователейОбсуждения = CRM_РаботаСМессенджерамиСервер.УчастникиОбсуждения(ТекущаяГруппа);
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПользователейСистемыВзаимодействияЗавершениеВыбора", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокПользователейОбсуждения,
			 Элементы.СписокПользователейСистемыВзаимодействия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейСистемыВзаимодействияЗавершениеВыбора(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Результат.Значение) = Тип("ИдентификаторПользователяСистемыВзаимодействия") Тогда
		Если СписокПользователейСистемыВзаимодействия.НайтиПоЗначению(Результат.Значение) = Неопределено Тогда
			СписокПользователейСистемыВзаимодействия.Добавить(Результат.Значение, Результат.Представление);
		КонецЕсли;
	ИначеЕсли Результат.Значение = "Выбрать" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПользователейВыборИзФормы", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("ВыбранныеПользователи", СписокПользователейСистемыВзаимодействия);
		ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаВыбораПользователяСВ", ПараметрыОткрытия,
			 ЭтотОбъект, , , , ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейВыборИзФормы(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокПользователейСистемыВзаимодействия.Очистить();
	Для каждого Пользователь Из Результат Цикл 
		Если СписокПользователейСистемыВзаимодействия.НайтиПоЗначению(Пользователь.Значение) = Неопределено Тогда
			СписокПользователейСистемыВзаимодействия.Добавить(Пользователь.Значение, Пользователь.Представление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область HTMLДиалог

&НаСервере
Процедура ИнициализироватьHTMLДокумент()
	
	Макет = ?(
		ОбщегоНазначения.ЭтоLinuxКлиент() И Не ОбщегоНазначения.ЭтоВебКлиент(),
		РеквизитФормыВЗначение("Объект").ПолучитьМакет("Диалог_HTML_Linux"),
		РеквизитФормыВЗначение("Объект").ПолучитьМакет("Диалог_HTML_Windows")
	);
	
	ТекстHTML = Макет.ПолучитьТекст();
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ВыпадающийСписокГолубой, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-arrow-down.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_Найти, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-search.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ПрикрепленныеФайлы24, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-attachments.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ПравилаОбработки24, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-filter.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_Изменить, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-rename.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ПустойКруг, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-empty.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_ЗаполненныйКруг, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/icon-filled.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_Библиотека_Смайликов, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/smiles.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.CRM_СохранитьКак, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/download.png", ПутьККартинке);
	
	ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
		БиблиотекаКартинок.СкопироватьВБуферОбмена, УникальныйИдентификатор);
	ТекстHTML = СтрЗаменить(ТекстHTML, "images/copy.png", ПутьККартинке);
	
	МакетКодовСмайликов = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Распознавание_смайликов");
	ТекстКодовСмайликов = МакетКодовСмайликов.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML, "<SMILES_REGEXP_AND_CODES>", ТекстКодовСмайликов);
	
	МакетСмещенияСмайликов = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Стили_смещения_для_смайликов");
	ТекстСтилейСмещенияСмайликов = МакетСмещенияСмайликов.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML, "<SMILES_OFFSET_STYLES>", ТекстСтилейСмещенияСмайликов);
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "/* {{CRM:CUSTOMIZE:STYLES}} */",
		CRM_РаботаСМессенджерамиСервер.ПолучитьСтилиОформленияМессенджера(НастройкаОформленияПользователя));
	
	Если СтрНайти(ТекстHTML, "<BACKGROUND_PATTERN>") > 0 Тогда
		ПутьККартинке = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
			БиблиотекаКартинок.CRM_ПаттернФонаМессенджера, УникальныйИдентификатор);
		ТекстHTML = СтрЗаменить(ТекстHTML, "<BACKGROUND_PATTERN>", ПутьККартинке);
	КонецЕсли;
	
	Если Файлы_ВариантВывода = 1 Тогда
		ВыбФильтр = "filesFilter_files_radio""";
	ИначеЕсли Файлы_ВариантВывода = 2 Тогда
		ВыбФильтр = "filesFilter_refs_radio""";
	ИначеЕсли Файлы_ВариантВывода = 0 Тогда
		ВыбФильтр = "filesFilter_all_radio""";
	КонецЕсли;
	ТекстHTML = СтрЗаменить(ТекстHTML, ВыбФильтр, ВыбФильтр + " checked");
	
	Если Файлы_ВоВсехДиалогах Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "filesFromAllDialogs_checkbox""", "filesFromAllDialogs_checkbox"" checked");
	КонецЕсли;
	
	Если Важные_ВариантВывода = 1 Тогда
		ВажныеФильтр = "favouriteFilter_currentDialog_radio""";
	Иначе
		ВажныеФильтр = "favouriteFilter_all_radio""";
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, ВажныеФильтр, ВажныеФильтр + " checked");
	
	ДокументHTML = ТекстHTML;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Поиск_Основной_HTML");
	РезультатыПоиска = Макет.ПолучитьТекст();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	НажатыйЭлемент = ДанныеСобытия.Element;
	
	// РаспознаваниеРечи
	ЭтотОбъект["РаспознаваниеРечи_НажатыйЭлементHTML"] = НажатыйЭлемент.id;
	// Конец РаспознаваниеРечи
	
	Если НажатыйЭлемент.className = "check" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НажатыйЭлемент.className = "menu_action__link" Тогда
		СтруктураКоманды = Новый Структура("taskAction, taskId", НажатыйЭлемент.attributes["2"].value, 
					НажатыйЭлемент.parentNode.parentNode.parentNode.attributes["2"].nodeValue);
		МетодВызываемыйИзJavaScript(СтруктураКоманды);
	ИначеЕсли СтрНачинаетсяС(НажатыйЭлемент.className, "chat__message-fav") Тогда
		GUIDОбщий = НажатыйЭлемент.parentNode.parentNode.parentNode.id;
		СодержитИмя = (СтрНайти(GUIDОбщий, "__") <> 0);
		GUIDСообщения = ?(СодержитИмя, СтрРазделить(GUIDОбщий, "__", Ложь)[1], GUIDОбщий);
		ЗначениеФлага = ОтметитьВажноеСообщение(GUIDСообщения);
		ОкноБраузера.changeFavIcon(НажатыйЭлемент, ЗначениеФлага);
		
		GUIDПоиска = ?(СодержитИмя, GUIDСообщения, "fav__" + GUIDСообщения);
		ЭлементСообщенияВДиалоге = ДокументБраузера.getElementById(GUIDПоиска);
		Если ЭлементСообщенияВДиалоге <> Неопределено Тогда
			НайденныеЭлементы = ЭлементСообщенияВДиалоге.getElementsByClassName("chat__message-fav");
			Если НайденныеЭлементы.length > 0 Тогда
				ЭлементИконкиВажное = НайденныеЭлементы["0"];
				ОкноБраузера.changeFavIcon(ЭлементИконкиВажное, ЗначениеФлага);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НажатыйЭлемент.className = "chat__message-attachment" Тогда
		ВложениеСсылка = ПолучитьСсылкуВложения(НажатыйЭлемент.id);
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ВложениеСсылка, ЭтотОбъект);
	ИначеЕсли НажатыйЭлемент.parentNode.className = "chat__message-attachment" Тогда
		ВложениеСсылка = ПолучитьСсылкуВложения(НажатыйЭлемент.parentNode.id);
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ВложениеСсылка, ЭтотОбъект);
	ИначеЕсли НажатыйЭлемент.id = "previousHref" Тогда
		Количество = 0;
		НачинаяССообщения = ПервоеСообщение;
		МассивСообщений = ПолучитьМассивСообщенийНаСервере(Ложь, Количество, НачинаяССообщения);
		ОкноБраузера.AddMessages(МассивСообщений, Истина, Количество < 20);
		ОбновитьОблакоСоисполнителей();
	ИначеЕсли НажатыйЭлемент.id = "previousFavHref" Тогда
		Количество = 0;
		НачинаяССообщения = ПервоеСообщениеВажных;
		МассивСообщений = ПолучитьМассивВажныхСообщенийНаСервере(Ложь, Количество, НачинаяССообщения);
		ОкноБраузера.AddFavourites(МассивСообщений, Истина, Количество < 20);
	ИначеЕсли НажатыйЭлемент.className = "close__quoted" Тогда
		ЦитируемоеСообщение = Неопределено;
	ИначеЕсли НажатыйЭлемент.id = "searchSubmit" Тогда
		ОкноБраузера.addSearchResults(ВыполнитьПоискВДиалоге(ТекущийДиалог, НажатыйЭлемент.value));
	ИначеЕсли НажатыйЭлемент.name = "renameDialog" Тогда
		ИзменяемыйДиалог =
			CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(НажатыйЭлемент.parentNode.attributes["1"].value);
		ПереименоватьДиалог(ИзменяемыйДиалог, НажатыйЭлемент.parentNode);
	ИначеЕсли НажатыйЭлемент.parentNode.id = "filesFilter_all" Или НажатыйЭлемент.parentElement.id = "filesFilter_refs"
		Или НажатыйЭлемент.parentElement.id = "filesFilter_files"
			 Или НажатыйЭлемент.parentElement.id = "filesFromAllDialogs" Тогда
		СтандартнаяОбработка = Истина;
		ИзменениеФильраФайлов(НажатыйЭлемент.parentElement.id);
	ИначеЕсли НажатыйЭлемент.parentNode.id = "favouriteFilter_currentDialog"
		 Или НажатыйЭлемент.parentElement.id = "favouriteFilter_all" Тогда
		СтандартнаяОбработка = Истина;
		ИзменениеФильтраИзбранных(НажатыйЭлемент.parentElement.id);
		ОкноБраузера.filterFavourite();
	ИначеЕсли СтрНайти(ДанныеСобытия.Element.className, "attachment_btn__download") > 0 Тогда
		ИдентификаторВложения = ДанныеСобытия.Element.dataset["guid"];
		СохранитьВложения(ПолучитьСсылкуВложения(ИдентификаторВложения));
	ИначеЕсли СтрНайти(ДанныеСобытия.Element.className, "attachment_btn__copy") > 0 Тогда
		ИдентификаторВложения = ДанныеСобытия.Element.dataset["guid"];
		КопироватьВложенияВБуфер(ПолучитьСсылкуВложения(ИдентификаторВложения));
	ИначеЕсли СтрНайти(ДанныеСобытия.Element.className, "attachment_btns") > 0 Тогда
		ИдентификаторВложения = ДанныеСобытия.Element.firstChild.dataset["guid"];
		ВложениеСсылка = ПолучитьСсылкуВложения(ИдентификаторВложения);
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ВложениеСсылка, ЭтотОбъект);
	ИначеЕсли СтрНайти(ДанныеСобытия.Element.className, "scheduled-message__cancel") > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСообщения", ДанныеСобытия.Element.dataset["id"]);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриВыбореВариантаОтменыЗапланированногоСообщения", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Отменить отправку сообщения?'"),
			РежимДиалогаВопрос.ДаНетОтмена, , ,
			"Отмена отправки запланированного сообщения");
		
	ИначеЕсли ДанныеСобытия.Свойство("Href") И ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Если СтрНайти(ДанныеСобытия.Href, "НастройкаПолейОтображения") > 0 Тогда
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
				 СтандартнаяОбработка,
				 Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес"));
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "e1cib/data") > 0 Тогда 
			Ссылка = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ДанныеСобытия.Href);
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_Диалоги") Тогда
				ОбновитьДиалогиИСообщения(Ссылка);
				
				Если Не ОкноБраузера.favouriteIsHidden() Тогда
					ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1);
					ВажныеПоТекущемуДиалогу = (Важные_ВариантВывода = 1);
					
					Если ВажныеПоТекущемуДиалогу И Не ВестиДиалогиЕдинымОкном Тогда
						ОбновитьВажныеСообщения();
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
				GUIDСообщения    = Строка(Ссылка.УникальныйИдентификатор());
				ЭлементСообщения = ДокументБраузера.getElementById(GUIDСообщения);
				
				Если ЭлементСообщения <> Неопределено Тогда
					ЭлементДиалога = ДокументБраузера.getElementById("dialog");
					
					Если ЭлементДиалога.childNodes[1] = ЭлементСообщения Тогда
						ЭлементДиалога.scrollTop = 1;
					Иначе
						ЭлементСообщения.scrollIntoView();
					КонецЕсли;
					CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ВажныеСообщения.ПереходКВажномуСообщению");
				Иначе
					ДанныеНайденногоДиалога = ДанныеНайденногоДиалога(Ссылка);
					
					Если ДанныеНайденногоДиалога = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					Если ДанныеНайденногоДиалога.Диалог <> ТекущийДиалог Тогда 
						ОбновитьДиалоги(ДанныеНайденногоДиалога.Диалог, Ложь);
					КонецЕсли;
					
					ОбновитьСообщения(Ссылка, Истина);
				КонецЕсли;
			Иначе
				ПоказатьЗначение(, Ссылка);
			КонецЕсли;
		ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ДанныеСсылкиВнутр_") > 0 Тогда
			ДанныеСсылки = Сред(ДанныеСобытия.Href, СтрНайти(ДанныеСобытия.Href, "ДанныеСсылкиВнутр_") + 18);
			ПерейтиКДиалогу = НайтиДиалогПоДанным(ДанныеСсылки, ТекущаяУчетнаяЗапись);
			Если ЗначениеЗаполнено(ПерейтиКДиалогу) Тогда
				ПоказатьЗначение(, ПерейтиКДиалогу);
			Иначе
				ПерейтиПоНавигационнойСсылке(ДанныеСсылки.Ссылка);
			КонецЕсли;
		Иначе	
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
		КонецЕсли;
	ИначеЕсли НажатыйЭлемент.id = "smilesClick" Тогда
		ПоследнийНажатыйСмайл = ОкноБраузера.lastClickedEmoji;
		Если ПоследнийНажатыйСмайл <> Неопределено Тогда
			ЭлементИзСпискаСмайликов = НедавниеСмайлики.НайтиПоЗначению(ПоследнийНажатыйСмайл);
			Если ЭлементИзСпискаСмайликов <> Неопределено Тогда
				ИндексЭлементаСмайликов  = НедавниеСмайлики.Индекс(ЭлементИзСпискаСмайликов);
				НедавниеСмайлики.Сдвинуть(ЭлементИзСпискаСмайликов, -ИндексЭлементаСмайликов);
				ОкноБраузера.replaceRecentSmileElementToBegin(ИндексЭлементаСмайликов);
			Иначе
				НедавниеСмайлики.Вставить(0, ПоследнийНажатыйСмайл);
				НужноУдалятьПоследний = (НедавниеСмайлики.Количество() > 18);
				Если НужноУдалятьПоследний Тогда
					НедавниеСмайлики.Удалить(18);
				КонецЕсли;
				ОкноБраузера.pushRecentEmojiToBegin(ПоследнийНажатыйСмайл, НужноУдалятьПоследний);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НажатыйЭлемент.className = "chat-smiles-img recent-emoji" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.Смайлики.ВыборНедавноИспользуемыхСмайликов");
	ИначеЕсли НажатыйЭлемент.id = "changeContextMenu" Тогда
		ДоступнотьКонтекстногоЭлементаВставки = ОкноБраузера.showPasteFlag;
		Если ДоступнотьКонтекстногоЭлементаВставки <> Неопределено Тогда
			Элементы.ДокументHTMLКонтекстноеМенюКомандаHTMLpaste.Доступность = ДоступнотьКонтекстногоЭлементаВставки;
		КонецЕсли;
	ИначеЕсли НажатыйЭлемент.className = "chat__message-input" Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли Элементы.Найти("МенюГруппаВариантыЗамены") <> Неопределено 
		И ДанныеСобытия.Element.className = "mistake" Тогда
		НомерОшибки = Число(СтрЗаменить(ДанныеСобытия.Element.id, "mistake", ""));
		ДокументHTMLПриНажатииНаСервере(НомерОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументHTMLПриНажатииНаСервере(НомерОшибки)
	CRM_ПроверкаПравописанияСервер.ДобавитьВариантыЗаменыВКонтекстноеМеню(ЭтотОбъект, НомерОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ДокументHTMLДокументСформирован(Элемент)
	
	ДокументБраузера = Элемент.Документ;
	ОкноБраузера = ДокументБраузера.defaultView;
	
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1);
	ОкноБраузера.changeFavouriteFilterVisibility(ВестиДиалогиЕдинымОкном);
	
	// Если подсистема CRM не используется, тогда контекстное меню у сообщений не выводить.
	// Диалоги без подсистемы CRM должны быть только для чтения.
	ОкноБраузера.showMessageContextMenu = ФлагИспользованияПодсистемыCRM;
	
КонецПроцедуры

&НаКлиенте
Процедура МетодВызываемыйИзJavaScript(Команда)
	
	ТекущееСообщение = ПолучитьСсылкуСообщения(Команда.taskId);
	Если Команда.taskAction = "НовыйДиалог" Тогда
		НовыйДиалог = СоздатьДиалог(ТекущееСообщение);
		ОчиститьРеквизитыОбновитьКонтакты();
		ОбновитьДиалогиИСообщения(НовыйДиалог);
	ИначеЕсли Команда.taskAction = "СоздатьДиалогПринять" Тогда
		НовыйДиалог = СоздатьДиалог(ТекущееСообщение);
		ОчиститьРеквизитыОбновитьКонтакты();
		ОбновитьДиалогиИСообщения(НовыйДиалог);
		ПринятьОбращение(Неопределено);
	ИначеЕсли Команда.taskAction = "ПринятьОбращение" Тогда
		Если ГрупповойЧат Тогда
			ПринятьОбращение(ТекущееСообщение);
		Иначе
			ПринятьОбращение(Неопределено);
		КонецЕсли;
	ИначеЕсли Команда.taskAction = "ЦитироватьСообщение" Тогда
		ЦитируемоеСообщение = ТекущееСообщение;
		ОкноБраузера.setFocusToInputField();
	ИначеЕсли Команда.taskAction = "ДобавитьБыстрыйОтвет" Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ДобавитьВБыстрыеОтветыЧерезМенюСообщения");
		ТекстНовогоОтвета = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущееСообщение, "ТекстСообщения");
		Если ЗначениеЗаполнено(ТекстНовогоОтвета) Тогда
			ОткрытьФорму("Справочник.CRM_Решения.Форма.ФормаБыстрогоОтвета", Новый Структура("ТекстОтвета", ТекстНовогоОтвета));
		КонецЕсли;
	ИначеЕсли Команда.taskAction = "ВыбратьCообщение" Тогда
		ИзменитьРежимВыбораСообщений(Истина);
		ОкноБраузера.changeChatInputReadOnly(Элементы.ГруппаСообщение.Доступность);
		ОкноБраузера.showMenuOption("chooseMessageOption", 0);
	ИначеЕсли Команда.taskAction = "Перейти" Тогда
		ОбновитьСообщения(ТекущееСообщение, Истина);
	ИначеЕсли Команда.taskAction = "СохранитьВложения" Тогда
		СохранитьВложения(ПолучитьСсылкуСообщения(Команда.taskId));
	ИначеЕсли Команда.taskAction = "КопироватьВложения" Тогда
		КопироватьВложенияВБуфер(ПолучитьСсылкуСообщения(Команда.taskId));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиалогиИСообщения(Диалог = Неопределено)
	
	ОбновитьДиалоги(Диалог);
	
	ОбновитьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщения(Сообщение = Неопределено, ВключаяСообщение = Ложь)
	
	ПервоеСообщение = Неопределено;
	ПоследнееСообщение = Неопределено;
	
	Количество				= 0;
	ОграничениеПоКоличеству	= 20;
	
	АдресаТекущихКартинокДиалогаТемп = АдресаТекущихКартинокДиалога.Скопировать();
	АдресаТекущихКартинокДиалога.Очистить();
	
	МассивСообщений = ПолучитьМассивСообщенийНаСервере(Истина, Количество, , Сообщение, ВключаяСообщение);
	
	ОкноБраузера.ClearDialog();
	ОкноБраузера.AddMessages(МассивСообщений, , Количество < ОграничениеПоКоличеству, Не ЗначениеЗаполнено(Сообщение));
	
	// При переходе на сообщение из другого диалога подгружать предыдущие сообщения может оказаться невозможным.
	// Поэтому необходимо обновлять видимость элемента, на который мы опираемся для реализации работы подгрузки.
	ОкноБраузера.resetScrollElement();
	
	// Также, может возникнуть ситуация, когда все сообщения помещаются на экран.
	// Поэтому, подгрузка также будет недоступна.
	// Чтобы этого избежать, будем подгружать до тех пор, пока не появится скролл или не будет сообщений на подгрузку.
	Для КоличествоОбновлений = 0 По 5 Цикл
		Если ОкноБраузера.windowIsScrollable() Или Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НачинаяССообщения = ПервоеСообщение;
		МассивСообщений = ПолучитьМассивСообщенийНаСервере(Ложь, Количество, НачинаяССообщения);
		ОкноБраузера.AddMessages(МассивСообщений, Истина, Количество < ОграничениеПоКоличеству);
	КонецЦикла;
	
	Для Каждого Элемент Из АдресаТекущихКартинокДиалогаТемп Цикл
		УдалитьИзВременногоХранилища(Элемент.Значение);
	КонецЦикла;
	
	ОбновитьОтложенныеСообщения();
	
	АдресаТекущихКартинокДиалогаТемп.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиалоги(Диалог = Неопределено, ЗакрыватьПоиск = Истина)
	
	МассивДиалогов = ПолучитьМассивДиалоговНаСервере(Диалог);
	
	ОбновитьДоступностьГруппыСообщение();
	ОбновитьДоступностьЭлементаПанели();
	
	ОкноБраузера.ClearDialogs(ЗакрыватьПоиск);
	ОкноБраузера.changeChatInputReadOnly(Элементы.ГруппаСообщение.Доступность);
	
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
	Если ВестиДиалогиЕдинымОкном Тогда
		ОкноБраузера.showDialogMenu(0);
	Иначе
		ОкноБраузера.AddDialogs(МассивДиалогов);
		ОкноБраузера.showDialogMenu(1);
	КонецЕсли;
	
	СписокИнтересов = ПолучитьСписокАктивныхИнтересов(ТекущийДиалог);
	Элементы.СписокСообщенийСвязатьСообщениеСИнтересом.Доступность = (СписокИнтересов.Количество() <> 0);
	
	ФайлыВыведены = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДиалог(Сообщение)
	
	// Создаем новый диалог.
	НовыйДиалог = CRM_РаботаСМессенджерамиСервер.СоздатьДиалог(ТекущаяУчетнаяЗапись, ТекущийДиалог, Сообщение);
	
	// Получаем последние сообщения нового и старого диалога.
	ПоследнееСообщениеНовогоДиалога		= CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(НовыйДиалог);
	ПоследнееСообщениеСтарогоДиалога	= CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(ТекущийДиалог);
	
	СообщениеПустаяСсылка = Документы.CRM_СообщениеМессенджера.ПустаяСсылка();
	
	ПоследнееСообщениеНовогоДиалога		= ?(ПоследнееСообщениеНовогоДиалога = Неопределено,
		СообщениеПустаяСсылка, ПоследнееСообщениеНовогоДиалога.Сообщение);
	ПоследнееСообщениеСтарогоДиалога	= ?(ПоследнееСообщениеСтарогоДиалога = Неопределено,
		СообщениеПустаяСсылка, ПоследнееСообщениеСтарогоДиалога.Сообщение);
	
	// Обновляем последние сообщения для диалогов.
	ОбновлениеПоследнегоСообщенияДиалога(НовыйДиалог,	ПоследнееСообщениеНовогоДиалога);
	ОбновлениеПоследнегоСообщенияДиалога(ТекущийДиалог,	ПоследнееСообщениеСтарогоДиалога);
	
	// Закрываем старый диалог.
	Диалог_ЗакрытьНаСервере(ТекущийДиалог, Неопределено, "");
	
	Возврат НовыйДиалог;
	
КонецФункции // СоздатьДиалог()

&НаСервере
Функция ЗапросМассиваДиалоговНаСервере()
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ДанныеСоисполнителейТЗ.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |	ДанныеСоисполнителейТЗ.Группа КАК Группа,
	                      |	ДанныеСоисполнителейТЗ.ID_Пользователя КАК ID_Пользователя,
	                      |	ИСТИНА КАК КакСоисполнитель
	                      |ПОМЕСТИТЬ ДанныеСоисполнителей
	                      |ИЗ
	                      |	&ДанныеСоисполнителейТЗ КАК ДанныеСоисполнителейТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_Диалоги.Ссылка КАК Ссылка,
	                      |	CRM_Диалоги.Завершен КАК Завершен,
	                      |	CRM_Диалоги.ДатаНачала КАК ДатаНачала,
	                      |	CRM_Диалоги.ДатаПринятия КАК ДатаПринятия,
	                      |	CRM_Диалоги.ДатаЗавершения КАК ДатаЗавершения,
	                      |	CRM_Диалоги.Ответственный КАК Ответственный,
	                      |	CRM_Диалоги.ДокументОснование КАК ДокументОснование,
	                      |	ВЫБОР
	                      |		КОГДА CRM_Диалоги.Наименование = """"
	                      |			ТОГДА CRM_Диалоги.Код
	                      |		ИНАЧЕ CRM_Диалоги.Наименование
	                      |	КОНЕЦ КАК Представление,
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК Интерес
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |		ПО CRM_Диалоги.Ссылка = CRM_ЖурналДокументов.Объект
	                      |			И (CRM_ЖурналДокументов.CRM_Интерес <> ЗНАЧЕНИЕ(Документ.CRM_Интерес.ПустаяСсылка))
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоисполнителей КАК ДанныеСоисполнителей
	                      |		ПО CRM_Диалоги.УчетнаяЗапись = ДанныеСоисполнителей.УчетнаяЗапись
	                      |			И CRM_Диалоги.Группа = ДанныеСоисполнителей.Группа
	                      |			И CRM_Диалоги.ID_Пользователя = ДанныеСоисполнителей.ID_Пользователя
	                      |ГДЕ
	                      |	CRM_Диалоги.Группа = &Группа
	                      |	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_Диалоги.ID_Пользователя = &ID_Пользователя
						  |	И НЕ CRM_Диалоги.Служебный
	                      |	И ВЫБОР
	                      |			КОГДА &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |			ИЛИ ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ CRM_Диалоги.Ответственный = &Ответственный
	                      |					ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.Закрыт)
						  |			ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПереданДляОзнакомления)
	                      |				ТОГДА CRM_Диалоги.Статус = &Статус
	                      |			ИНАЧЕ CRM_Диалоги.Статус <> ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПереданДляОзнакомления)
	                      |		КОНЕЦ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Завершен,
						  |	CRM_Диалоги.ID_Пользователя,
	                      |	CRM_Диалоги.ДатаЗавершения УБЫВ,
						  |	CRM_Диалоги.ДатаНачала УБЫВ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ДанныеСоисполнителейТЗ", 
		CRM_РаботаСМессенджерамиСервер.ДанныеКонтактовКакСоисполнитель(ТекущийПользователь));
	Запрос.УстановитьПараметр("УчетнаяЗапись", ТекущаяУчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", ТекущаяГруппа);
	Запрос.УстановитьПараметр("Ответственный", ТекущийПользователь);
	Если ТекущаяУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия 
		ИЛИ ТекущаяУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.B2BПортал
		ИЛИ Не ЗначениеЗаполнено(ТекущийID_Пользователя) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_Диалоги.ID_Пользователя = &ID_Пользователя", "");
	Иначе
		Запрос.УстановитьПараметр("ID_Пользователя", ТекущийID_Пользователя);
	КонецЕсли;
	Запрос.УстановитьПараметр("Статус", ТекущийСтатус);
	
	Возврат Запрос;
	
КонецФункции

&НаСервере 
Функция МассивДиалоговНаСервере()
	
	Запрос = ЗапросМассиваДиалоговНаСервере();
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере 
Функция ПолучитьМассивДиалоговНаСервере(ТекДиалог = Неопределено)
	
	Запрос = ЗапросМассиваДиалоговНаСервере();

	Выборка = Запрос.Выполнить().Выбрать();
	МассивДиалогов = Новый Массив;
	ПервыйДиалог = ТекДиалог;
	Пока Выборка.Следующий() Цикл
		Если ПервыйДиалог = Неопределено Тогда
			ПервыйДиалог = Выборка.Ссылка;
		КонецЕсли;
		МассивФайлов = Новый Массив;
		НовДиалог = Новый Структура("name, ref, date, accepted, dateAccepted, completed, dateOfCompletion, guid",
			Выборка.Представление,
			ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
			НСтр("ru = 'Начат'") + ": " + Формат(Выборка.ДатаНачала,
				 ?(НачалоДня(Выборка.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'")),
			(Не Выборка.Завершен И Выборка.Ответственный = ТекущийПользователь),
			НСтр("ru = 'Принят'") + ": " + Формат(Выборка.ДатаПринятия,
				 ?(НачалоДня(Выборка.ДатаПринятия) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'")),
			Выборка.Завершен,
			НСтр("ru = 'Завершен'") + ": " + Формат(Выборка.ДатаЗавершения,
				 ?(НачалоДня(Выборка.ДатаЗавершения) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'")),
			Строка(Выборка.Ссылка.УникальныйИдентификатор()));
			
		Если ЗначениеЗаполнено(Выборка.Интерес) Тогда
			НовДиалог.Вставить("interest", Новый Структура("title, ref", Строка(Выборка.Интерес),
				 ПолучитьНавигационнуюСсылку(Выборка.Интерес)));
		КонецЕсли;
			
		Если Выборка.Ссылка = ТекДиалог Тогда	
			МассивДиалогов.Вставить(0, НовДиалог);
		Иначе
			МассивДиалогов.Добавить(НовДиалог);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийДиалог = ПервыйДиалог;
	
	ПользовательЯвляетсяОтветственным = ПользовательЯвляетсяОтветственным(ТекущийДиалог.Ответственный);
	ПользовательЯвляетсяСоисполнителем = CRM_СоисполнителиДиалоговСервер.ПользовательЯвляетсяСоисполнителем(ДанныеТекущегоКонтакта(),
		 АвторизованныйПользователь);
	
	ТекДиалогАтивен = (ТекущийДиалог.Статус <> Перечисления.CRM_СтатусыДиалогов.Закрыт)
						И (ПользовательЯвляетсяОтветственным Или ПользовательЯвляетсяСоисполнителем
						Или Не ЗначениеЗаполнено(ТекущийДиалог.Ответственный)
						Или CRM_РаботаСМессенджерамиСервер.ТекущийПользовательПолучитьПравоУчетнойЗаписи(
							ТекущаяУчетнаяЗапись, "Администрирование"));
	
	Если ПользовательЯвляетсяСоисполнителем Тогда
		ПринятТекущимПользователем =
			(СтатусТекущегоКонтактаПоСоисполнителю(ТекущийПользователь) = Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу);
	Иначе
		ПринятТекущимПользователем = (ТекущийДиалог.Статус = Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу
			И ТекущийДиалог.Ответственный = АвторизованныйПользователь);
	КонецЕсли;
	
	ТекДиалогПереданДляОзнакомления = (ТекущийДиалог.Статус = Перечисления.CRM_СтатусыДиалогов.ПереданДляОзнакомления);
	
	Если (ТекущийДиалог.Статус <> Перечисления.CRM_СтатусыДиалогов.Новый
			И ПользовательЯвляетсяОтветственным)
			Или ПользовательЯвляетсяСоисполнителем Тогда
		CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
			ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, АвторизованныйПользователь);
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfDialogs", МассивДиалогов));
	
КонецФункции

&НаСервере 
Функция ПолучитьМассивСообщенийНаСервере(ПрямойОбход = Ложь, Количество,
	 ПередСообщением = Неопределено, ПослеСообщения = Неопределено,
	 ВключаяСообщение = Ложь)
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		МассивСообщений = Новый Массив;	
		Количество = 0;
		Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));	
	КонецЕсли;
	
	// Автонумерация выполняется отдельным запросом, так как при выполнении в первом запросе приводит к ошибке платформы, если пользователь не является администратором
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ДиалогиДействияСДиалогом.НомерСтроки КАК ПолеСортировки,
	                      |	ЛОЖЬ КАК Исходящее,
	                      |	NULL КАК Текст,
	                      |	NULL КАК ТекстHTML,
	                      |	CRM_ДиалогиДействияСДиалогом.Дата КАК Дата,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ДиалогиДействияСДиалогом.ОбъектДействия ЕСТЬ NULL
	                      |				ИЛИ CRM_ДиалогиДействияСДиалогом.ОбъектДействия = НЕОПРЕДЕЛЕНО
	                      |			ТОГДА CRM_ДиалогиДействияСДиалогом.Пользователь.Наименование
	                      |		ИНАЧЕ ЕСТЬNULL(CRM_ДиалогиДействияСДиалогом.ОбъектДействия.Наименование, ПРЕДСТАВЛЕНИЕ(CRM_ДиалогиДействияСДиалогом.ОбъектДействия))
	                      |	КОНЕЦ КАК Контакт,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ДиалогиДействияСДиалогом.ОбъектДействия ЕСТЬ NULL
	                      |				ИЛИ CRM_ДиалогиДействияСДиалогом.ОбъектДействия = НЕОПРЕДЕЛЕНО
	                      |			ТОГДА CRM_ДиалогиДействияСДиалогом.Пользователь
	                      |		ИНАЧЕ CRM_ДиалогиДействияСДиалогом.ОбъектДействия
	                      |	КОНЕЦ КАК КонтактСсылка,
	                      |	NULL КАК СообщениеОснование,
	                      |	CRM_ДиалогиДействияСДиалогом.Действие КАК Действие,
	                      |	CRM_ДиалогиДействияСДиалогом.Описание КАК ОписаниеДействия,
	                      |	CRM_ДиалогиДействияСДиалогом.ОбъектДействия КАК ОбъектДействия,
	                      |	CRM_ДиалогиДействияСДиалогом.Ссылка КАК Диалог,
	                      |	ЛОЖЬ КАК Важное,
	                      |	CRM_ДиалогиДействияСДиалогом.Пользователь КАК Пользователь
	                      |ПОМЕСТИТЬ ДействияСДиалогом
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги.ДействияСДиалогом КАК CRM_ДиалогиДействияСДиалогом
	                      |ГДЕ
	                      |	CRM_ДиалогиДействияСДиалогом.Ссылка В(&МассивДиалогов)
	                      |	И &Действие
	                      |	И &ОграничениеСлужебныхСообщений
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	АВТОНОМЕРЗАПИСИ() КАК Ссылка,
	                      |	ДействияСДиалогом.ПолеСортировки КАК ПолеСортировки,
	                      |	ДействияСДиалогом.Исходящее КАК Исходящее,
	                      |	ДействияСДиалогом.Текст КАК Текст,
	                      |	ДействияСДиалогом.ТекстHTML КАК ТекстHTML,
	                      |	ДействияСДиалогом.Дата КАК Дата,
	                      |	ДействияСДиалогом.Контакт КАК Контакт,
	                      |	ДействияСДиалогом.КонтактСсылка КАК КонтактСсылка,
	                      |	ДействияСДиалогом.СообщениеОснование КАК СообщениеОснование,
	                      |	ДействияСДиалогом.Действие КАК Действие,
	                      |	ДействияСДиалогом.ОписаниеДействия КАК ОписаниеДействия,
	                      |	ДействияСДиалогом.ОбъектДействия КАК ОбъектДействия,
	                      |	ДействияСДиалогом.Диалог КАК Диалог,
	                      |	ДействияСДиалогом.Важное КАК Важное,
	                      |	ДействияСДиалогом.Пользователь КАК Пользователь
	                      |ПОМЕСТИТЬ СлужебныеСообщения
	                      |ИЗ
	                      |	ДействияСДиалогом КАК ДействияСДиалогом
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	                      |	CRM_СообщениеМессенджера.Ссылка КАК ПолеСортировки,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Исходящее,
	                      |	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстСообщения КАК СТРОКА(1000)) КАК Текст,
	                      |	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстHTML КАК СТРОКА(1000)) КАК ТекстHTML,
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	                      |	КОНЕЦ + ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ПолучателиПредставление = """"
	                      |			ТОГДА """"
	                      |		ИНАЧЕ "" -> "" + CRM_СообщениеМессенджера.ПолучателиПредставление
	                      |	КОНЕЦ КАК Контакт,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.Контакт
	                      |	КОНЕЦ КАК КонтактСсылка,
	                      |	CRM_СообщениеМессенджера.СообщениеОснование КАК СообщениеОснование,
	                      |	NULL КАК Действие,
	                      |	NULL КАК ОписаниеДействия,
	                      |	NULL КАК ОбъектДействия,
	                      |	CRM_СообщениеМессенджера.Диалог КАК Диалог,
	                      |	CRM_СообщениеМессенджера.CRM_Избранный КАК Важное,
	                      |	NULL КАК Пользователь
	                      |ПОМЕСТИТЬ Сообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
	                      |	И &Сообщение
	                      |	И НЕ CRM_СообщениеМессенджера.Отложенное
	                      |	И НЕ CRM_СообщениеМессенджера.ПометкаУдаления
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СлужебныеСообщения.Ссылка,
	                      |	СлужебныеСообщения.ПолеСортировки,
	                      |	СлужебныеСообщения.Исходящее,
	                      |	СлужебныеСообщения.Текст,
	                      |	СлужебныеСообщения.ТекстHTML,
	                      |	СлужебныеСообщения.Дата,
	                      |	СлужебныеСообщения.Контакт,
	                      |	СлужебныеСообщения.КонтактСсылка,
	                      |	СлужебныеСообщения.СообщениеОснование,
	                      |	СлужебныеСообщения.Действие,
	                      |	СлужебныеСообщения.ОписаниеДействия,
	                      |	СлужебныеСообщения.ОбъектДействия,
	                      |	СлужебныеСообщения.Диалог,
	                      |	СлужебныеСообщения.Важное,
	                      |	СлужебныеСообщения.Пользователь
	                      |ИЗ
	                      |	СлужебныеСообщения КАК СлужебныеСообщения
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 25
	                      |	Сообщения.Ссылка КАК Ссылка,
	                      |	Сообщения.ПолеСортировки КАК ПолеСортировки,
	                      |	Сообщения.Исходящее КАК Исходящее,
	                      |	Сообщения.Текст КАК Текст,
	                      |	Сообщения.ТекстHTML КАК ТекстHTML,
	                      |	Сообщения.Контакт КАК Контакт,
	                      |	Сообщения.КонтактСсылка КАК КонтактСсылка,
	                      |	Сообщения.Дата КАК Дата,
	                      |	Сообщения.Действие КАК Действие,
	                      |	Сообщения.ОписаниеДействия КАК ОписаниеДействия,
	                      |	Сообщения.СообщениеОснование КАК СообщениеОснование,
	                      |	Сообщения.ОбъектДействия КАК ОбъектДействия,
	                      |	Сообщения.Диалог КАК Диалог,
	                      |	Сообщения.Важное КАК Важное,
	                      |	Сообщения.Пользователь КАК Пользователь
	                      |ПОМЕСТИТЬ Сообщения20
	                      |ИЗ
	                      |	Сообщения КАК Сообщения
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ,
	                      |	ПолеСортировки УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Сообщения.Ссылка КАК Ссылка,
	                      |	Сообщения.ПолеСортировки КАК ПолеСортировки,
	                      |	Сообщения.Исходящее КАК Исходящее,
	                      |	Сообщения.Текст КАК Текст,
	                      |	Сообщения.ТекстHTML КАК ТекстHTML,
	                      |	Сообщения.Дата КАК Дата,
	                      |	Сообщения.Контакт КАК Контакт,
	                      |	Сообщения.КонтактСсылка КАК КонтактСсылка,
	                      |	Сообщения.СообщениеОснование КАК СообщениеОснование,
	                      |	Сообщения.Действие КАК Действие,
	                      |	Сообщения.ОписаниеДействия КАК ОписаниеДействия,
	                      |	Сообщения.ОбъектДействия КАК ОбъектДействия,
	                      |	Сообщения.Диалог КАК Диалог,
	                      |	Сообщения.Важное КАК Важное,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК Расширение,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла,
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК Интерес,
	                      |	Сообщения.Пользователь КАК Пользователь
	                      |ИЗ
	                      |	Сообщения20 КАК Сообщения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
	                      |		ПО (CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = Сообщения.Ссылка)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |		ПО (CRM_ЖурналДокументов.Объект = Сообщения.Диалог)
	                      |			И (CRM_ЖурналДокументов.ОсновнойИнтерес)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ,
	                      |	ПолеСортировки УБЫВ
	                      |ИТОГИ
	                      |	МАКСИМУМ(ПолеСортировки),
	                      |	МАКСИМУМ(Исходящее),
	                      |	МАКСИМУМ(Текст),
	                      |	МАКСИМУМ(ТекстHTML),
	                      |	МАКСИМУМ(Дата),
	                      |	МАКСИМУМ(Контакт),
	                      |	МАКСИМУМ(КонтактСсылка),
	                      |	МАКСИМУМ(СообщениеОснование),
	                      |	МАКСИМУМ(Действие),
	                      |	МАКСИМУМ(ОписаниеДействия),
	                      |	МАКСИМУМ(ОбъектДействия),
	                      |	МАКСИМУМ(Пользователь),
	                      |	МАКСИМУМ(Диалог),
	                      |	МАКСИМУМ(Важное),
	                      |	МАКСИМУМ(Интерес)
	                      |ПО
	                      |	Ссылка");
	
	Если ЗначениеЗаполнено(ПередСообщением) Тогда
		Запрос.УстановитьПараметр("Сообщение", ПередСообщением.Ссылка);
		Запрос.УстановитьПараметр("ДатаСообщения", ПередСообщением.Дата);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение",
			 "CRM_СообщениеМессенджера.Дата<=&ДатаСообщения И CRM_СообщениеМессенджера.Ссылка <> &Сообщение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", "CRM_ДиалогиДействияСДиалогом.Дата<&ДатаСообщения");
	ИначеЕсли ЗначениеЗаполнено(ПослеСообщения) Тогда
		Запрос.УстановитьПараметр("Сообщение", ПослеСообщения.Ссылка);
		Если ТипТекущегоМессенджера = "Telegram" И ЭтоФайловаяБаза Тогда
			Запрос.УстановитьПараметр("ДатаСообщения", ПослеСообщения.Дата - 60*5);
		Иначе
			Запрос.УстановитьПараметр("ДатаСообщения", ПослеСообщения.Дата);
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаПоследнегоДействия", ДатаПоследнегоДействия);
		Если ВключаяСообщение Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение", "CRM_СообщениеМессенджера.Дата>=&ДатаСообщения");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение",
				 "CRM_СообщениеМессенджера.Дата>=&ДатаСообщения И  CRM_СообщениеМессенджера.Ссылка <> &Сообщение");
		КонецЕсли;
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", "CRM_ДиалогиДействияСДиалогом.Дата>&ДатаСообщения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", ?(ЗначениеЗаполнено(ДатаПоследнегоДействия),
			 "CRM_ДиалогиДействияСДиалогом.Дата>&ДатаПоследнегоДействия",
			 "CRM_ДиалогиДействияСДиалогом.Дата>&ДатаСообщения"));
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 25", "ПЕРВЫЕ 25000");
	Иначе
		Запрос.УстановитьПараметр("Сообщение", Истина);
		Запрос.УстановитьПараметр("Действие", Истина);
	КонецЕсли;
	
	ВестиСтруктурированныеДиалоги = (СпособВеденияДиалогов = 0) И Не ГрупповойЧат;
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
	
	Если ВестиСтруктурированныеДиалоги Тогда
		МассивДиалогов = Новый Массив;
		МассивДиалогов.Добавить(ТекущийДиалог);
		Запрос.УстановитьПараметр("ОграничениеСлужебныхСообщений", Истина);
	ИначеЕсли ВестиДиалогиЕдинымОкном Тогда
		МассивДиалогов = МассивДиалоговНаСервере();
		Если ГрупповойЧат Тогда
			Запрос.УстановитьПараметр("ОграничениеСлужебныхСообщений", Ложь);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОграничениеСлужебныхСообщений",
				"ВЫБОР КОГДА CRM_ДиалогиДействияСДиалогом.Ссылка = &ТекущийДиалог ТОГДА ИСТИНА ИНАЧЕ CRM_ДиалогиДействияСДиалогом.Действие В(&МассивИнформационныхДействий) КОНЕЦ");
		КонецЕсли;
		Запрос.УстановитьПараметр("ТекущийДиалог", ТекущийДиалог);
		МассивИнформационныхДействий = Новый Массив;
		МассивИнформационныхДействий.Добавить(Перечисления.CRM_ДействияСДиалогами.ПринятоОбращение);
		МассивИнформационныхДействий.Добавить(Перечисления.CRM_ДействияСДиалогами.СозданаЗадача);
		Запрос.УстановитьПараметр("МассивИнформационныхДействий", МассивИнформационныхДействий);
	Иначе
		Запрос.УстановитьПараметр("ОграничениеСлужебныхСообщений", Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДиалогов", МассивДиалогов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ПрямойОбход И Выборка.Количество() > 0 Тогда
		ПоследнееСообщение = Выборка.Ссылка;
	КонецЕсли;
	
	МассивСообщений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивФайлов = Новый Массив;
		ВыборкаФайлы = Выборка.Выбрать();
		Пока ВыборкаФайлы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаФайлы.Файл) Тогда
				Продолжить;
			КонецЕсли;
			
			image = "";
			РазмерыКартинки = Неопределено;
			
			Если СтрНайти(ВРег("jpeg,jpg,gif,png"), ВРег(ВыборкаФайлы.Расширение)) > 0 Тогда
				ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлы.Файл, Ложь);
				
				Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
					Продолжить;
				КонецЕсли;
				
				image = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ЭтотОбъект.УникальныйИдентификатор);
				АдресаТекущихКартинокДиалога.Добавить(image);
				
				image = CRM_РаботаСHTML.ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(image);
				
				КартинкаИзДвоичныхДанных = Новый Картинка(ДвоичныеДанныеКартинки);
				РазмерыКартинки = Новый Структура(
				"height, width",
				КартинкаИзДвоичныхДанных.Высота(), КартинкаИзДвоичныхДанных.Ширина()
				);
			Иначе
				ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ВыборкаФайлы.Расширение);
				image = СписокИконокФайлов[ИндексКартинки / 2].Представление;
			КонецЕсли;
			
			СтруктураМассиваФайлов = Новый Структура("file, guid, image", ВыборкаФайлы.ИмяФайла,
			Строка(ВыборкаФайлы.Файл.УникальныйИдентификатор()),
			image);
			
			Если РазмерыКартинки <> Неопределено Тогда
				СтруктураМассиваФайлов.Вставить("size", РазмерыКартинки);
			КонецЕсли;
			
			МассивФайлов.Добавить(СтруктураМассиваФайлов);
		КонецЦикла;
		
		Служебное	= ЗначениеЗаполнено(Выборка.Действие);
		ЭтоHTML		= ЗначениеЗаполнено(Выборка.ТекстHTML);
		
		ИспользуемыйФорматВремени = ?(
			НачалоДня(Выборка.Дата) = НачалоДня(ТекущаяДатаСеанса()),
			"ДФ=HH:mm",
			"ДФ='dd MMMM HH:mm'");
		
		ПолеTime = Формат(
			Выборка.Дата,
			ИспользуемыйФорматВремени);
		
		ПолеContact	= ?(
			ЗначениеЗаполнено(Выборка.Контакт),
			Строка(Выборка.Контакт),
			"");
		
		ПолеContactRef = ?(
			ЗначениеЗаполнено(Выборка.КонтактСсылка),
			ПолучитьНавигационнуюСсылку(Выборка.КонтактСсылка),
			"");
		
		ПолеText = ?(
			Служебное,
			?(ЗначениеЗаполнено(Выборка.ОписаниеДействия), Выборка.ОписаниеДействия, Строка(Выборка.Действие)),
			?(ЭтоHTML, Выборка.ТекстHTML, Выборка.Текст));
		
		ПолеOut		= Выборка.Исходящее;
		ПолеService	= Служебное;
		
		ПолеGUID = ?(
			Служебное,
			Строка(Выборка.Диалог.УникальныйИдентификатор()) + "_" + Строка(Выборка.ПолеСортировки),
			Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		
		ПолеIsFav			= Выборка.Важное;
		ПолеAttachments		= МассивФайлов;
		ПолеIsHTML			= ЭтоHTML;
		
		ПолеLeadRef = ?(
			ВестиДиалогиЕдинымОкном И ЗначениеЗаполнено(Выборка.Интерес),
			ПолучитьНавигационнуюСсылку(Выборка.Интерес),
			"");
		
		ПолеLeadDescr = ?(
			ВестиДиалогиЕдинымОкном И ЗначениеЗаполнено(Выборка.Интерес),
			Строка(Выборка.Интерес),
			"");
		
		НовСообщение = Новый Структура;
		НовСообщение.Вставить("time",			ПолеTime);
		НовСообщение.Вставить("contact",		ПолеContact);
		НовСообщение.Вставить("contactRef",		ПолеContactRef);
		НовСообщение.Вставить("text",			ПолеText);
		НовСообщение.Вставить("out",			ПолеOut);
		НовСообщение.Вставить("service",		ПолеService);
		НовСообщение.Вставить("guid",			ПолеGUID);
		НовСообщение.Вставить("isFav",			ПолеIsFav);
		НовСообщение.Вставить("attachments",	ПолеAttachments);
		НовСообщение.Вставить("isHTML",			ПолеIsHTML);
		НовСообщение.Вставить("leadRef",		ПолеLeadRef);
		НовСообщение.Вставить("lead_descr",		ПолеLeadDescr);
		
		Если Служебное
				И Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.ДобавленСоисполнитель
				Или Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.УдаленСоисполнитель Тогда
			ЭтоHTML = Истина;
			
			Если ЗначениеЗаполнено(Выборка.Пользователь) И ЗначениеЗаполнено(Выборка.ОбъектДействия) Тогда
				ШаблонОбъектовДействия = "<a href='%1' class='chat__info-link'>%2</a>";
				
				Если Выборка.Пользователь = Выборка.ОбъектДействия Тогда
					ЗаполненныйШаблонСоисполнителя = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.ОбъектДействия),
						Строка(Выборка.ОбъектДействия));
					
					НовСообщение["text"] = СтрШаблон(
						НСтр("ru = 'Соисполнитель %1 покинул беседу';en='The co-executor %1 left the conversation'"),
						ЗаполненныйШаблонСоисполнителя);
				Иначе
					ШаблонОписанияДействия = ?(
						Выборка.Действие = Перечисления.CRM_ДействияСДиалогами.ДобавленСоисполнитель,
						НСтр("ru = 'Ответственным %1 добавлен соисполнитель %2';en='Responsible %1 added co-executor %2'"),
						НСтр("ru = 'Ответственным %1 удален соисполнитель %2';en='Responsible %1 removed co-executor %2'"));
					
					ЗаполненныйШаблонОтветственного = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.Пользователь),
						Строка(Выборка.Пользователь));
					
					ЗаполненныйШаблонСоисполнителя = СтрШаблон(
						ШаблонОбъектовДействия,
						ПолучитьНавигационнуюСсылку(Выборка.ОбъектДействия),
						Строка(Выборка.ОбъектДействия));
					
					НовСообщение["text"] =
						СтрШаблон(ШаблонОписанияДействия, ЗаполненныйШаблонОтветственного, ЗаполненныйШаблонСоисполнителя);
				КонецЕсли;
				
				// Тип сообщения - добавление/удаления соисполнители.
				НовСообщение.Вставить("msgType", 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СообщениеОснование) Тогда
			Основание = Выборка.СообщениеОснование;
			
			ПолеReplyMessage_time = Формат(
				Основание.Дата,
				?(НачалоДня(Основание.Дата) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'"));
			
			ПолеReplyMessage_contact = ?(
				Основание.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее,
				Основание.Диалог.Ответственный.Наименование,
				Основание.КонтактПредставление);
			
			ПолеReplyMessage_text = ?(
				ЗначениеЗаполнено(Основание.ТекстСообщения),
				Основание.ТекстСообщения,
				НСтр("ru = 'Файл...'; en = 'File...'"));
			
			ПолеReplyMessage_guid = Строка(Основание.УникальныйИдентификатор());
			
			ПолеReplyMessage = Новый Структура;
			ПолеReplyMessage.Вставить("time",		ПолеReplyMessage_time);
			ПолеReplyMessage.Вставить("contact",	ПолеReplyMessage_contact);
			ПолеReplyMessage.Вставить("text",		ПолеReplyMessage_text);
			ПолеReplyMessage.Вставить("guid",		ПолеReplyMessage_guid);
			
			НовСообщение.Вставить("reply_message", ПолеReplyMessage);
		КонецЕсли;
		
		Если ПрямойОбход Тогда
			Если Не ЗначениеЗаполнено(Выборка.Действие) Тогда
				Если НЕ ЗначениеЗаполнено(ПоследнееСообщение) Тогда
					ПоследнееСообщение = Выборка.Ссылка;
				КонецЕсли;
				ПервоеСообщение = Выборка.Ссылка;
			КонецЕсли;
			МассивСообщений.Вставить(0, НовСообщение);
		Иначе	
			Если Не ЗначениеЗаполнено(Выборка.Действие) Тогда
				ПервоеСообщение = Выборка.Ссылка;
			КонецЕсли;
			МассивСообщений.Добавить(НовСообщение);
		КонецЕсли;
	КонецЦикла;
	
	Количество = МассивСообщений.Количество();
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));
	
КонецФункции

&НаСервере 
Функция ПолучитьМассивВажныхСообщенийНаСервере(ПрямойОбход = Ложь, Количество,
	 ПередСообщением = Неопределено, ПослеСообщения = Неопределено,
	 ВключаяСообщение = Ложь)
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		МассивСообщений = Новый Массив;	
		Количество = 0;
		Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));	
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Исходящее,
	                      |	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстСообщения КАК СТРОКА(1000)) КАК Текст,
	                      |	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстHTML КАК СТРОКА(1000)) КАК ТекстHTML,
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	                      |	КОНЕЦ + ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ПолучателиПредставление = """"
	                      |			ТОГДА """"
	                      |		ИНАЧЕ "" -> "" + CRM_СообщениеМессенджера.ПолучателиПредставление
	                      |	КОНЕЦ КАК Контакт,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.Контакт
	                      |	КОНЕЦ КАК КонтактСсылка,
	                      |	CRM_СообщениеМессенджера.СообщениеОснование КАК СообщениеОснование,
	                      |	CRM_СообщениеМессенджера.Диалог КАК Диалог,
	                      |	CRM_СообщениеМессенджера.CRM_Избранный КАК Важное
	                      |ПОМЕСТИТЬ Сообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
	                      |	И &Сообщение
	                      |	И CRM_СообщениеМессенджера.CRM_Избранный
	                      |	И НЕ CRM_СообщениеМессенджера.ПометкаУдаления
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 25
	                      |	Сообщения.Ссылка КАК Ссылка,
	                      |	Сообщения.Исходящее КАК Исходящее,
	                      |	Сообщения.Текст КАК Текст,
	                      |	Сообщения.ТекстHTML КАК ТекстHTML,
	                      |	Сообщения.Контакт КАК Контакт,
	                      |	Сообщения.КонтактСсылка КАК КонтактСсылка,
	                      |	Сообщения.Дата КАК Дата,
	                      |	Сообщения.СообщениеОснование КАК СообщениеОснование,
	                      |	Сообщения.Диалог КАК Диалог,
	                      |	Сообщения.Важное КАК Важное
	                      |ПОМЕСТИТЬ Сообщения20
	                      |ИЗ
	                      |	Сообщения КАК Сообщения
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ,
	                      |	Ссылка УБЫВ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Сообщения.Ссылка КАК Ссылка,
	                      |	Сообщения.Исходящее КАК Исходящее,
	                      |	Сообщения.Текст КАК Текст,
	                      |	Сообщения.ТекстHTML КАК ТекстHTML,
	                      |	Сообщения.Дата КАК Дата,
	                      |	Сообщения.Контакт КАК Контакт,
	                      |	Сообщения.КонтактСсылка КАК КонтактСсылка,
	                      |	Сообщения.СообщениеОснование КАК СообщениеОснование,
	                      |	Сообщения.Важное КАК Важное,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК Расширение,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла,
	                      |	CRM_ЖурналДокументов.CRM_Интерес КАК Интерес
	                      |ИЗ
	                      |	Сообщения20 КАК Сообщения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
	                      |		ПО (CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = Сообщения.Ссылка)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	                      |		ПО (CRM_ЖурналДокументов.Объект = Сообщения.Диалог)
	                      |			И (CRM_ЖурналДокументов.ОсновнойИнтерес)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ,
	                      |	Ссылка УБЫВ
	                      |ИТОГИ
	                      |	МАКСИМУМ(Исходящее),
	                      |	МАКСИМУМ(Текст),
	                      |	МАКСИМУМ(ТекстHTML),
	                      |	МАКСИМУМ(Дата),
	                      |	МАКСИМУМ(Контакт),
	                      |	МАКСИМУМ(КонтактСсылка),
	                      |	МАКСИМУМ(СообщениеОснование),
	                      |	МАКСИМУМ(Важное),
	                      |	МАКСИМУМ(Интерес)
	                      |ПО
	                      |	Ссылка");
	
	Если ЗначениеЗаполнено(ПередСообщением) Тогда
		Запрос.УстановитьПараметр("Сообщение", ПередСообщением);
		Запрос.УстановитьПараметр("ДатаСообщения", ПередСообщением.Дата);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение",
			 "CRM_СообщениеМессенджера.Дата<=&ДатаСообщения И CRM_СообщениеМессенджера.Ссылка <> &Сообщение");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", "CRM_ДиалогиДействияСДиалогом.Дата<&ДатаСообщения");
	ИначеЕсли ЗначениеЗаполнено(ПослеСообщения) Тогда
		Запрос.УстановитьПараметр("Сообщение", ПослеСообщения);
		Запрос.УстановитьПараметр("ДатаСообщения", ПослеСообщения.Дата);
		Запрос.УстановитьПараметр("ДатаПоследнегоДействия", ДатаПоследнегоДействия);
		
		Если ВключаяСообщение Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение", "CRM_СообщениеМессенджера.Дата>=&ДатаСообщения");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сообщение",
				 "CRM_СообщениеМессенджера.Дата>=&ДатаСообщения И  CRM_СообщениеМессенджера.Ссылка <> &Сообщение");
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Действие", ?(ЗначениеЗаполнено(ДатаПоследнегоДействия),
			 "CRM_ДиалогиДействияСДиалогом.Дата>&ДатаПоследнегоДействия",
			 "CRM_ДиалогиДействияСДиалогом.Дата>&ДатаСообщения"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 25", "ПЕРВЫЕ 25000");
	Иначе
		Запрос.УстановитьПараметр("Сообщение", Истина);
		Запрос.УстановитьПараметр("Действие", Истина);
	КонецЕсли;
	
	ВестиСтруктурированныеДиалоги = (СпособВеденияДиалогов = 0) И Не ГрупповойЧат;
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
	
	Если Важные_ВариантВывода = 0 Или ВестиДиалогиЕдинымОкном Тогда
		МассивДиалогов = МассивДиалоговНаСервере();
	Иначе
		МассивДиалогов = Новый Массив;
		МассивДиалогов.Добавить(ТекущийДиалог);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийДиалог", ТекущийДиалог);
	Запрос.УстановитьПараметр("МассивДиалогов", МассивДиалогов);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивСообщений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивФайлов = Новый Массив;
		ВыборкаФайлы = Выборка.Выбрать();
		Пока ВыборкаФайлы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаФайлы.Файл) Тогда
				Продолжить;
			КонецЕсли;
			
			image = "";
			РазмерыКартинки = Неопределено;
			
			Если СтрНайти(ВРег("jpeg,jpg,gif,png"), ВРег(ВыборкаФайлы.Расширение)) > 0 Тогда
				ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлы.Файл, Ложь);
				
				Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
					Продолжить;
				КонецЕсли;
				
				image = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ЭтотОбъект.УникальныйИдентификатор);
				АдресаТекущихКартинокДиалога.Добавить(image);
				
				image = CRM_РаботаСHTML.ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(image);
				
				КартинкаИзДвоичныхДанных = Новый Картинка(ДвоичныеДанныеКартинки);
				РазмерыКартинки = Новый Структура(
				"height, width",
				КартинкаИзДвоичныхДанных.Высота(), КартинкаИзДвоичныхДанных.Ширина());
			Иначе
				ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ВыборкаФайлы.Расширение);
				image = СписокИконокФайлов[ИндексКартинки / 2].Представление;
			КонецЕсли;
			
			СтруктураМассиваФайлов = Новый Структура("file, guid, image", ВыборкаФайлы.ИмяФайла,
			Строка(ВыборкаФайлы.Файл.УникальныйИдентификатор()),
			image);
			
			Если РазмерыКартинки <> Неопределено Тогда
				СтруктураМассиваФайлов.Вставить("size", РазмерыКартинки);
			КонецЕсли;
			
			МассивФайлов.Добавить(СтруктураМассиваФайлов);
		КонецЦикла;
		
		Служебное	= Ложь;
		ЭтоHTML		= ЗначениеЗаполнено(Выборка.ТекстHTML);
		
		ПолеTime = Формат(
			Выборка.Дата,
			?(НачалоДня(Выборка.Дата) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd.MM.yy'"));
		
		ПолеContact = ?(
			ЗначениеЗаполнено(Выборка.Контакт),
			Строка(Выборка.Контакт),
			"");
		
		ПолеContactRef = ?(
			ЗначениеЗаполнено(Выборка.КонтактСсылка),
			ПолучитьНавигационнуюСсылку(Выборка.КонтактСсылка),
			"");
		
		ПолеText = ?(
			Служебное,
			?(ЗначениеЗаполнено(Выборка.ОписаниеДействия), Выборка.ОписаниеДействия, Строка(Выборка.Действие)),
			?(ЭтоHTML, Выборка.ТекстHTML, Выборка.Текст));
		
		ПолеOut			= Выборка.Исходящее;
		ПолеService		= Служебное;
		ПолеGUID		= "fav__" + Строка(Выборка.Ссылка.УникальныйИдентификатор());
		ПолеIsFav		= Выборка.Важное;
		ПолеAttachments = МассивФайлов;
		ПолеIsHtml		= ЭтоHTML;
		
		ПолеLeadRef = ?(
			ВестиДиалогиЕдинымОкном И ЗначениеЗаполнено(Выборка.Интерес),
			ПолучитьНавигационнуюСсылку(Выборка.Интерес),
			"");
		
		ПолеLeadDescr = ?(
			ВестиДиалогиЕдинымОкном И ЗначениеЗаполнено(Выборка.Интерес),
			Строка(Выборка.Интерес),
			"");
		
		ПолеRef = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		
		НовСообщение = Новый Структура;
		НовСообщение.Вставить("time",			ПолеTime);
		НовСообщение.Вставить("contact",		ПолеContact);
		НовСообщение.Вставить("contactRef",		ПолеContactRef);
		НовСообщение.Вставить("text",			ПолеText);
		НовСообщение.Вставить("out",			ПолеOut);
		НовСообщение.Вставить("ref",			ПолеRef);
		НовСообщение.Вставить("service",		ПолеService);
		НовСообщение.Вставить("guid",			ПолеGUID);
		НовСообщение.Вставить("isFav",			ПолеIsFav);
		НовСообщение.Вставить("attachments",	ПолеAttachments);
		НовСообщение.Вставить("isHTML",			ПолеIsHTML);
		НовСообщение.Вставить("leadRef",		ПолеLeadRef);
		НовСообщение.Вставить("lead_descr",		ПолеLeadDescr);
		
		Если ЗначениеЗаполнено(Выборка.СообщениеОснование) Тогда
			Основание = Выборка.СообщениеОснование;
			
			ПолеReplyMessage_time = Формат(
				Основание.Дата,
				?(НачалоДня(Основание.Дата) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'"));
			
			ПолеReplyMessage_contact = ?(
				Основание.ВидСообщения = Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее,
				Основание.Диалог.Ответственный.Наименование,
				Основание.КонтактПредставление);
			
			ПолеReplyMessage_text = ?(
				ЗначениеЗаполнено(Основание.ТекстСообщения),
				Основание.ТекстСообщения,
				НСтр("ru = 'Файл...'; en = 'File...'"));
			
			ПолеReplyMessage_guid = Строка(Основание.УникальныйИдентификатор());
			
			ПолеReplyMessage = Новый Структура;
			ПолеReplyMessage.Вставить("time",		ПолеReplyMessage_time);
			ПолеReplyMessage.Вставить("contact",	ПолеReplyMessage_contact);
			ПолеReplyMessage.Вставить("text",		ПолеReplyMessage_text);
			ПолеReplyMessage.Вставить("guid",		ПолеReplyMessage_guid);
			
			НовСообщение.Вставить("reply_message", ПолеReplyMessage);
		КонецЕсли;
		
		Если ПрямойОбход Тогда
			МассивСообщений.Вставить(0, НовСообщение);
		Иначе	
			МассивСообщений.Добавить(НовСообщение);
		КонецЕсли;
		
		ПервоеСообщениеВажных = Выборка.Ссылка;
	КонецЦикла;
	
	Количество = МассивСообщений.Количество();
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуВложения(guid)
	Возврат Справочники.CRM_СообщениеМессенджераПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(guid));
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуСообщения(guid)
	Возврат Документы.CRM_СообщениеМессенджера.ПолучитьСсылку(Новый УникальныйИдентификатор(guid));
КонецФункции

&НаКлиенте
Процедура ПереименоватьДиалог(Диалог, Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереименоватьДиалогЗавершение", ЭтотОбъект,
		 Новый Структура("Диалог, Элемент", Диалог,
		 Элемент));
	ПоказатьВводСтроки(ОписаниеОповещения, , Нстр("ru = 'Введите новое наименование...'"));
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьДиалогЗавершение(Наименование, Параметры) Экспорт
	Если ЗначениеЗаполнено(Наименование) Тогда
		ПереименоватьДиалогСервер(Параметры.Диалог, Наименование);
		Параметры.Элемент.parentNode.children["2"].innerHTML = Наименование;
		ОповеститьОбИзменении(Параметры.Диалог);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПереименоватьДиалогСервер(Диалог, Наименование)
	ДиалогОбъект = Диалог.ПолучитьОбъект();
	ДиалогОбъект.Наименование = Наименование;
	ДиалогОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВажныеСообщения(Сообщение = Неопределено, ВключаяСообщение = Ложь)
	
	Количество				= 0;
	ОграничениеПоКоличеству	= 20;
	
	МассивСообщений = ПолучитьМассивВажныхСообщенийНаСервере(Истина, Количество, , Сообщение, ВключаяСообщение);
	
	ОкноБраузера.ClearFavourite();
	ОкноБраузера.AddFavourites(
		МассивСообщений, , Количество < ОграничениеПоКоличеству, Не ЗначениеЗаполнено(Сообщение), "favouriteMessages");
	
КонецПроцедуры

&НаСервере
Функция ОтметитьВажноеСообщение(taskId)
	
	ТекущееСообщение = ПолучитьСсылкуСообщения(taskId);
	ЗначениеФлага    = Ложь;
	
	Если ЗначениеЗаполнено(ТекущееСообщение) Тогда
		СообщениеОбъект = ТекущееСообщение.ПолучитьОбъект();
		ЗначениеФлага   = Не ТекущееСообщение.CRM_Избранный;
		
		СообщениеОбъект.CRM_Избранный = ЗначениеФлага;
		СообщениеОбъект.Записать();
		CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ВажныеСообщения.НажатиеНаЗвездочкуУСообщения");
	КонецЕсли;
	
	Возврат ЗначениеФлага;
	
КонецФункции

#КонецОбласти

#Область Поиск_Основной

&НаКлиенте
Процедура Поиск_ОсновнойПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Поиск_Основной) Тогда
		Элементы.Контакты.Видимость = Ложь;
		Элементы.РезультатыПоиска.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьПоискОсновнойКлиент", 0.1, Истина);
	Иначе
		Элементы.Контакты.Видимость = Истина;
		Элементы.РезультатыПоиска.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск_ОсновнойНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_Поиск";
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискОсновнойКлиент()
	
	УстановитьОтборПоСтатусамДиалогов(2);
	
	ОкноБраузераПоиска = Элементы.РезультатыПоиска.Документ.defaultView;
	ОкноБраузераПоиска.clearResults();
	
	ОкноБраузераПоиска.addResults(ВыполнитьПоискОсновной());
	
	Если Не ОкноБраузераПоиска.selectFirstItem() Тогда
		ЭлементДиалога = ДокументБраузера.getElementById("dialog");
		ЭлементДиалога.innerHTML = "";
		
		ОкноБраузера.ClearDialogs(Истина);
		
		ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискОсновной()
	
	ТЗ_Контакты = РеквизитФормыВЗначение("Контакты");
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЗ_Контакты.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ТЗ_Контакты.Контакт КАК Контакт,
	|	ТЗ_Контакты.ВладелецКонтакта КАК ВладелецКонтакта,
	|	ТЗ_Контакты.Группа КАК Группа,
	|	ТЗ_Контакты.ID_Пользователя КАК ID_Пользователя
	|ПОМЕСТИТЬ Контакты
	|ИЗ
	|	&ТЗ_Контакты КАК ТЗ_Контакты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Диалоги.Контакт.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.Контакт
	|		КОГДА Диалоги.КонтактПредставление ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.КонтактПредставление
	|		КОГДА ТИПЗНАЧЕНИЯ(Диалоги.Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|				И Диалоги.Контакт.Владелец.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.Контакт.Владелец
	|		КОГДА Диалоги.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.Ссылка
	|		КОГДА CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО &СтрокаПоиска
	|			ТОГДА CRM_СообщениеМессенджера.Ссылка
	|	КОНЕЦ КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Диалоги.Контакт.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА ""Контакт""
	|		КОГДА Диалоги.КонтактПредставление ПОДОБНО &СтрокаПоиска
	|			ТОГДА ""Контакт""
	|		КОГДА ТИПЗНАЧЕНИЯ(Диалоги.Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|				И Диалоги.Контакт.Владелец.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА ""Контакт""
	|		КОГДА Диалоги.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА ""Диалог""
	|		КОГДА CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО &СтрокаПоиска
	|			ТОГДА ""Сообщение""
	|	КОНЕЦ КАК ТипОбъекта,
	|	Диалоги.Группа КАК Группа,
	|	Диалоги.УчетнаяЗапись КАК УчетнаяЗапись,
	|	Диалоги.УчетнаяЗапись.ТипМессенджера КАК ТипМессенджера,
	|	Диалоги.ID_Пользователя КАК ID_Пользователя,
	|	ВЫБОР
	|		КОГДА CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО &СтрокаПоиска
	|			ТОГДА CRM_СообщениеМессенджера.Ссылка
	|		КОГДА Диалоги.Контакт.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.Контакт
	|		КОГДА ТИПЗНАЧЕНИЯ(Диалоги.Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|				И Диалоги.Контакт.Владелец.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА Диалоги.Контакт.Владелец
	|		ИНАЧЕ Диалоги.Ссылка
	|	КОНЕЦ КАК Переход,
	|	CRM_СообщенияДиалоговПоследние.Дата КАК ДатаПоследнего,
	|	CRM_СообщенияДиалоговПоследние.ТекстСокр КАК ТекстСокр,
	|	Диалоги.Ссылка КАК Диалог,
	|	Диалоги.Наименование КАК НаименованиеДиалога
	|ПОМЕСТИТЬ втПереходы
	|ИЗ
	|	Контакты КАК Контакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК Диалоги
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|			ПО Диалоги.Ссылка = CRM_СообщениеМессенджера.Диалог
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СообщенияДиалоговПоследние КАК CRM_СообщенияДиалоговПоследние
	|			ПО Диалоги.Ссылка = CRM_СообщенияДиалоговПоследние.Диалог
	|		ПО (Диалоги.УчетнаяЗапись = Контакты.УчетнаяЗапись)
	|			И (Диалоги.ID_Пользователя = Контакты.ID_Пользователя)
	|			И (Диалоги.Группа = Контакты.Группа)
    |			И НЕ Диалоги.Служебный
	|ГДЕ
	|	(Диалоги.Контакт.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ Диалоги.КонтактПредставление ПОДОБНО &СтрокаПоиска
	|			ИЛИ Диалоги.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО &СтрокаПоиска
	|			ИЛИ (ТИПЗНАЧЕНИЯ(Диалоги.Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	|				И Диалоги.Контакт.Владелец.Наименование ПОДОБНО &СтрокаПоиска))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПереходы.Ссылка КАК Ссылка,
	|	втПереходы.ТипОбъекта КАК ТипОбъекта,
	|	втПереходы.Группа КАК Группа,
	|	втПереходы.УчетнаяЗапись КАК УчетнаяЗапись,
	|	втПереходы.ТипМессенджера КАК ТипМессенджера,
	|	втПереходы.ID_Пользователя КАК ID_Пользователя,
	|	втПереходы.Переход КАК Переход,
	|	втПереходы.ДатаПоследнего КАК ДатаПоследнего,
	|	втПереходы.ТекстСокр КАК ТекстСокр,
	|	втПереходы.Диалог КАК Диалог,
	|	втПереходы.НаименованиеДиалога КАК НаименованиеДиалога
	|ИЗ
	|	втПереходы КАК втПереходы
	|ГДЕ
	|	втПереходы.ТипОбъекта = ""Контакт""
	|	И ТИПЗНАЧЕНИЯ(втПереходы.Переход) В (&ТипыКонтакта)
	|
	|СГРУППИРОВАТЬ ПО
	|	втПереходы.Ссылка,
	|	втПереходы.ТипОбъекта,
	|	втПереходы.УчетнаяЗапись,
	|	втПереходы.ID_Пользователя,
	|	втПереходы.Группа,
	|	втПереходы.ТипМессенджера,
	|	втПереходы.Переход,
	|	втПереходы.ДатаПоследнего,
	|	втПереходы.ТекстСокр,
	|	втПереходы.Диалог,
	|	втПереходы.НаименованиеДиалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПереходы.Ссылка,
	|	втПереходы.ТипОбъекта,
	|	втПереходы.Группа,
	|	втПереходы.УчетнаяЗапись,
	|	втПереходы.ТипМессенджера,
	|	втПереходы.ID_Пользователя,
	|	втПереходы.Переход,
	|	втПереходы.ДатаПоследнего,
	|	втПереходы.ТекстСокр,
	|	втПереходы.Диалог,
	|	втПереходы.НаименованиеДиалога
	|ИЗ
	|	втПереходы КАК втПереходы
	|ГДЕ
	|	втПереходы.ТипОбъекта = ""Диалог""
	|	И втПереходы.Переход ССЫЛКА Справочник.CRM_Диалоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПереходы.Ссылка,
	|	втПереходы.ТипОбъекта,
	|	втПереходы.Группа,
	|	втПереходы.УчетнаяЗапись,
	|	втПереходы.ТипМессенджера,
	|	втПереходы.ID_Пользователя,
	|	втПереходы.Переход,
	|	втПереходы.ДатаПоследнего,
	|	втПереходы.ТекстСокр,
	|	втПереходы.Диалог,
	|	втПереходы.НаименованиеДиалога
	|ИЗ
	|	втПереходы КАК втПереходы
	|ГДЕ
	|	втПереходы.ТипОбъекта = ""Сообщение""
	|	И втПереходы.Переход ССЫЛКА Документ.CRM_СообщениеМессенджера
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПоследнего";
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	ТипКонтакта = Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ТЗ_Контакты",	ТЗ_Контакты);
	Запрос.УстановитьПараметр("ТипыКонтакта",	ТипКонтакта);
	Запрос.УстановитьПараметр("СтрокаПоиска",	"%" + Поиск_Основной + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Поиск_Контакты	= Новый Массив;
	Поиск_Диалоги	= Новый Массив;
	Поиск_Сообщения	= Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Найденный = Новый Структура(
			"contact, date, text, ref, logo, user_attr, account_attr, group_attr, dialog_attr, dialog_name, is_dialog");
		Найденный.ref	= ПолучитьНавигационнуюСсылку(Выборка.Переход);
		Найденный.logo	= ЛоготипыМессенджеровСтр[Выборка.ТипМессенджера];
		
		Найденный.group_attr	= Выборка.Группа;
		Найденный.user_attr		= Выборка.ID_Пользователя;
		Найденный.dialog_attr	= ПолучитьНавигационнуюСсылку(Выборка.Диалог);
		Найденный.account_attr	= ПолучитьНавигационнуюСсылку(Выборка.УчетнаяЗапись);
		
		Найденный.dialog_name	= НСтр("ru = 'Диалог:'; en = 'Dialog:'") + " " + Выборка.НаименованиеДиалога;
		Найденный.is_dialog		= ЗначениеЗаполнено(Выборка.НаименованиеДиалога);
		
		Если Выборка.ТипОбъекта = "Контакт" Тогда
			Если Не ЗначениеЗаполнено(Выборка.ТекстСокр) Тогда
				Продолжить;
			КонецЕсли;
			
			Найденный.contact = Строка(Выборка.Ссылка);
			Найденный.date = Формат(Выборка.ДатаПоследнего, "ДФ=dd.MM.yy");
			Найденный.text = Выборка.ТекстСокр;
			
			Поиск_Контакты.Добавить(Найденный);
		ИначеЕсли Выборка.ТипОбъекта = "Диалог" Тогда
			Если Не ЗначениеЗаполнено(Выборка.ТекстСокр) Тогда
				Продолжить;
			КонецЕсли;
			
			Найденный.contact = Строка(Выборка.Ссылка.Контакт);
			Найденный.date = Формат(Выборка.ДатаПоследнего, "ДФ=dd.MM.yy");
			Найденный.text = Выборка.ТекстСокр;
			
			Поиск_Диалоги.Добавить(Найденный);
		ИначеЕсли Выборка.ТипОбъекта = "Сообщение" Тогда
			Найденный.contact = Строка(Выборка.Ссылка.Диалог.Контакт);
			Найденный.date = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yy");
			Найденный.text = Выборка.Ссылка.ТекстСообщения;
			
			Поиск_Сообщения.Добавить(Найденный);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("search", Поиск_Основной);
	
	Если Поиск_Контакты.Количество() > 0 Тогда
		Результат.Вставить("contacts", Поиск_Контакты);
	КонецЕсли;
	
	Если Поиск_Диалоги.Количество() > 0 Тогда
		Результат.Вставить("dialogs", Поиск_Диалоги);
	КонецЕсли;
	
	Если Поиск_Сообщения.Количество() > 0 Тогда
		Результат.Вставить("messages", Поиск_Сообщения);
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Результат);

КонецФункции

&НаКлиенте
Процедура РезультатыПоискаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	НажатыйЭлемент = ДанныеСобытия.Element;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		АтрибутыДанных = Элементы.РезультатыПоиска.Документ.defaultView.getSelectedElementData();
		
		Если АтрибутыДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(
			"ID_Пользователя, Группа, УчетнаяЗапись",
			АтрибутыДанных.user_id,
			АтрибутыДанных.group_id,
			CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(АтрибутыДанных.account_ref));
		
		ИспользуемаяСсылкаДиалога = ?(
			СтрНайти(ДанныеСобытия.Href, "CRM_СообщениеМессенджера") > 0,
			ДанныеСобытия.Href,
			АтрибутыДанных.dialog_ref);
		
		НайденнаяСсылка = CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной(ИспользуемаяСсылкаДиалога);
		ДанныеНайденногоДиалога = ДанныеНайденногоДиалога(НайденнаяСсылка, СтруктураПоиска);
		
		Если ДанныеНайденногоДиалога = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Контакты.ТекущаяСтрока = ДанныеНайденногоДиалога.Идентификатор; 
		КонтактыПриАктивизацииСтроки(Новый Структура("ТекущиеДанные", ДанныеНайденногоДиалога));
		
		Если ТипЗнч(НайденнаяСсылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			ОбновитьДиалоги(ДанныеНайденногоДиалога.Диалог);
			ОбновитьСообщения(НайденнаяСсылка, Истина);
		Иначе
			ОбновитьДиалогиИСообщения(НайденнаяСсылка);
		КонецЕсли;
		
		ЗаполнитьСписокСоисполнителей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеНайденногоДиалога(НайденнаяСсылка, СтруктураПоиска = Неопределено)
	
	Если ТипЗнч(НайденнаяСсылка) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		НайденныйДиалог = НайденнаяСсылка.Диалог;
	Иначе
		НайденныйДиалог = НайденнаяСсылка;
	КонецЕсли;
	
	Если СтруктураПоиска = Неопределено Тогда
		СтруктураПоиска = Новый Структура("ID_Пользователя, Группа, УчетнаяЗапись");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НайденныйДиалог);
	КонецЕсли;
	
	КонтактыДеревоЗначений	= РеквизитФормыВЗначение("Контакты", Тип("ДеревоЗначений"));
	НайденныеСтроки			= КонтактыДеревоЗначений.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтруктураПоиска.Удалить("ID_Пользователя");
		НайденныеСтроки	= КонтактыДеревоЗначений.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	КонецЕсли;

	Если НайденныеСтроки.Количество() > 0 Тогда
		ИспользуемаяСтрокаКонтактов = НайденныеСтроки[0];
		
		СтруктураДанных = Новый Структура(
			"ID_Пользователя, Группа, УчетнаяЗапись, Контакт,
			|ВладелецКонтакта, Новых, Включена,
			|СтатусДиалога, ФлагДоступностиДанных,
			|ПризнакБлокировкиОтправителя,
			|ЭтоПапкаДиалогов, ПапкаДиалога");
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ИспользуемаяСтрокаКонтактов); 
		
		СтруктураДанных.Вставить("Идентификатор",	ПолучитьИдентификаторСтрокиДереваФормы(КонтактыДеревоЗначений, ИспользуемаяСтрокаКонтактов));
		СтруктураДанных.Вставить("Диалог",			НайденныйДиалог);
		
		Возврат СтруктураДанных;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьТекстСоглашения()
	Макет = Обработки.CRM_РаботаСМессенджеромInstagramDirect.ПолучитьМакет("УсловияИспользования");
	Возврат Макет.ПолучитьТекст();
КонецФункции

&НаКлиенте
Процедура ДекорацияСсылкаНаСоглашениеНажатие(Элемент)
	ТекстHTML = ПолучитьТекстСоглашения();
	ОткрытьФорму("ОбщаяФорма.CRM_ВыводHTMLДокумента", Новый Структура("ТекстHTML, Заголовок",
		 ТекстHTML,
		 Нстр("ru='Условия использования сервиса'")));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьСообщения(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСообщенияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщенияПродолжение(Результат, ДопПараметр) Экспорт
	CRM_РаботаСМессенджерамиСервер.ЗапуститьПолучениеСообщенийВФоне();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если Элементы.Найти("ПроверкаПравописания") <> Неопределено Тогда
		Если Элементы.ПроверкаПравописания.Пометка Тогда
			ОкноБраузера.deleteMistakes();
			Элементы.ПроверкаПравописания.Пометка = Ложь;
			Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Команда.Имя = "ОтправитьСообщениеОтложенно" Тогда
		ПолЧасаВСекундах = 1800;
		ДатаОтправкиСообщения = НачалоМинуты(ТекущаяДата());
		
		ПараметрФормы = Новый Структура;
		ПараметрФормы.Вставить("Дата_",		ДатаОтправкиСообщения);
		ПараметрФормы.Вставить("Время_",	ДатаОтправкиСообщения + ПолЧасаВСекундах);
		ПараметрФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Планирование отправки сообщения'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореДатыОтправкиОтложенногоСообщения", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.CRM_ВыборДатыВремени", ПараметрФормы, ЭтотОбъект, КлючУникальности, , ,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСообщениеПродолжение", ЭтотОбъект, Новый Структура);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры // ОтправитьСообщение()

&НаКлиенте
Процедура ПриВыбореДатыОтправкиОтложенногоСообщения(ВыбраннаяДатаОтправки, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДатаОтправки <> Неопределено Тогда
		Если ВыбраннаяДатаОтправки <= ТекущаяДата() Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("ru = 'Отправка не может быть выполнена раньше текущего времени.'");
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДатаИВремяОтложеннойОтправки", ВыбраннаяДатаОтправки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСообщениеПродолжение", ЭтотОбъект, ДополнительныеПараметры);
			CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореДатыОтправкиОтложенногоСообщения()

&НаКлиенте
Процедура ОтправитьСообщениеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	СообщениеДляОтправки = ОкноБраузера.getChatInputMessageForSend();
	
	Если ЗначениеЗаполнено(СообщениеДляОтправки) Или ПрисоединенныеФайлыОтправляемые.Количество() > 0 Тогда
		Если Не (ТекДиалогАтивен И ПринятТекущимПользователем) И Не ГрупповойЧат Тогда
			Диалог_Принять(Неопределено);
			
			// В режим выбора сообщений данном режиме кнопка всегда НЕдоступна.
			Если Не РежимВыбораСообщений Тогда
				Элементы.Диалог_Принять.Доступность =
					Не ПринятТекущимПользователем
					И ТекДиалогАтивен
					И НЕ ТекДиалогПереданДляОзнакомления;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("Группа",	ТекущаяГруппа);
		ДополнительныеПараметры.Вставить("Контакт",	ТекущийКонтакт);
		
		Если ЗначениеЗаполнено(ЦитируемоеСообщение) Тогда
			ДополнительныеПараметры.Вставить("СообщениеОснование", ЦитируемоеСообщение);
		КонецЕсли;
		
		ЗакодированноеСообщениеURL = ОкноБраузера.encodeStringToUTF8(СообщениеДляОтправки);
		
		Если ЗакодированноеСообщениеURL <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("ЗакодированноеСообщение", ЗакодированноеСообщениеURL);
		КонецЕсли;
		
		ОтправляемыеФайлы = ПолучитьСписокВложений(ПрисоединенныеФайлыОтправляемые);
		
		СообщениеСсылка = CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(
			СообщениеДляОтправки,
			ТекущийДиалог,
			ОтправляемыеФайлы,
			СписокПользователейСистемыВзаимодействия,
			ДополнительныеПараметры);
		
		ОбновитьОтложенныеСообщения();
		
		Если СообщениеСсылка <> Неопределено Тогда
			CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
				ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, АвторизованныйПользователь);
			
			ОкноБраузера.clearChatInput();
			
			ПрисоединенныеФайлыОтправляемые.Очистить();
			
			ВложенияСообщения = "";
			НачинаяССообщения = ПоследнееСообщение;
			Количество = 0;
			
			МассивСообщений = ПолучитьМассивСообщенийНаСервере(Истина, Количество, , НачинаяССообщения);
			
			ОкноБраузера.AddMessages(МассивСообщений);
			ОкноБраузера.hideQuoted();
			
			ЦитируемоеСообщение = Неопределено;
			
			СформироватьСсылкиВложений();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВложений(ПрисоединенныеФайлыОтправляемые)
	
	ОтправляемыеФайлы = Новый СписокЗначений();
	Для каждого ТекСтрока Из ПрисоединенныеФайлыОтправляемые Цикл
		НоваяСтрока = ОтправляемыеФайлы.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
	КонецЦикла;
	
	Возврат ОтправляемыеФайлы;
	
КонецФункции // ()

&НаКлиенте
Процедура СвязатьСКонтактом(Команда)
	
	ТекДанные = Элементы.Контакты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран диалог!';en='No dialog selected!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("Наименование"	, ТекДанные.Контакт);
	ПараметрыНового.Вставить("ОснованиеОбращения", ПоследнееСообщение(ТекущаяУчетнаяЗапись,
		 ТекущаяГруппа,
		 ТекущийID_Пользователя));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				, Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		, Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	, ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Клиенты");
	
	Если ИспользоватьПК Тогда
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Потенциальные клиенты");
	КонецЕсли;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	, Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		, "Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	, ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора, "Контактные лица");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСКонтактомПродолжение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ДанныеВыбора, ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	
	ДиалогКПередачеВМПО = Неопределено;
	
	Если ТипЗнч(Команда) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ДиалогКПередачеВМПО = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Команда, "Диалог");
	ИначеЕсли РежимВыбораСообщений Тогда
		
		ОбновитьМассивВыбранныхСообщений();
		
		Если НЕ ЕстьВыбранныеСообщения() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одно сообщение'"));
			Возврат;
		КонецЕсли;
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ВыборСообщения.ПринятиеОбращенияДляВыбранныхСообщенийВРежимеБеседыСписок");
		
		ДиалогКПередачеВМПО = СоздатьДиалогНаОснованииВыбранныхСообщений();
		
		ОтключитьРежимВыбораСообщений(Неопределено);
		
	Иначе
		ДиалогКПередачеВМПО = ТекущийДиалог;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Диалог", ДиалогКПередачеВМПО);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьДиалогСИнтересом(Команда)
	
	Если РежимВыбораСообщений Тогда
		
		ОбновитьМассивВыбранныхСообщений();
		
		Если НЕ ЕстьВыбранныеСообщения() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одно сообщение'"));
			Возврат;
		КонецЕсли;
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ВыборСообщения.СвязатьСИнтересомДляВыбранныхСообщенийВРежимеБеседыСписок");
		
	КонецЕсли;
	
	СписокИнтересов = ПолучитьСписокАктивныхИнтересов(ТекущийДиалог);
	Если СписокИнтересов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='У данного контакта нет активных интересов.';
			|en='This contact has no active leads.'"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьДиалогСИнтересомПродолжение", ЭтотОбъект, ТекущийДиалог);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокИнтересов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПоручениеЗавершение", ЭтотОбъект);
	СтруктураОснования = Новый Структура("Основание,КартаМаршрута", ТекущийДиалог,
		 ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект, ,
		 , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСообщения();
КонецПроцедуры // СоздатьПоручениеЗавершение()

&НаКлиенте
Процедура СоздатьЛичнуюЗадачу(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЛичнуюЗадачуЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Основание", ТекущийДиалог);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичнуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСообщения();
КонецПроцедуры // СоздатьЛичнуюЗадачуЗавершение()

&НаКлиенте
Процедура ПеренаправитьОбращение(Команда)
	
	Если Не (CRM_РаботаСМессенджерамиСервер.ПринятТекущимПользователем(ТекущийДиалог)
		 ИЛИ ПользовательЯвляетсяСоисполнителем) Тогда
		CRM_РаботаСМессенджерамиСервер.ПринятьДиалог(ТекущийДиалог);
	КонецЕсли;
	
	Если РежимВыбораСообщений Тогда
		
		ОбновитьМассивВыбранныхСообщений();
		
		Если НЕ ЕстьВыбранныеСообщения() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одно сообщение'"));
			Возврат;
		КонецЕсли;
		
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.ВыборСообщения.ПеренаправлениеВыбранныхСообщенийВРежимеБеседыСписок");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьОбращениеЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",			Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийПользователь);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещения);
	Иначе
		
		НовМассив = Новый Массив;
		НовМассив.Добавить(ТекущийДиалог);
		ПараметрыВыполненияКоманды = Новый Структура("Источник", ЭтотОбъект);
		CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(НовМассив, ПараметрыВыполненияКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОбращениеЗавершение(НовыйОтветственный, ДополнительныеПараметры) Экспорт
	
	Если НовыйОтветственный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораСообщений Тогда
		
		ТекстОшибки = ПеренаправитьОбращениеЗавершениеСервер(НовыйОтветственный);
		
		Если ТекстОшибки = "" Тогда
			
		Иначе
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;

		ОбновитьДиалогиИСообщения();
		ОтключитьРежимВыбораСообщений(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренаправитьОбращениеЗавершениеСервер(НовыйОтветственный)
	
	НачатьТранзакцию();
	
	Попытка
		ПеренаправленныйДиалог = СоздатьДиалогНаОснованииВыбранныхСообщений(, НовыйОтветственный);
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ПеренаправленныйДиалог);
		ТекстОшибки = CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(МассивОбъектов, НовыйОтветственный);
		
		Если ТекстОшибки <> "" Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрикрепитьФайлПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	Если ПодключеноРасширениеРаботыСФайлами Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрикрепитьФайлЗавершение", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(,
		НСтр("ru='В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя,
				?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(), "/",
				"\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			
			СтрокаФайла = ПрисоединенныеФайлыОтправляемые.Добавить();
			СтрокаФайла.Представление = ИмяФайла;
			СтрокаФайла.Значение = ПомещенныеФайлы[Индекс].Хранение;
			#Если НЕ ВебКлиент Тогда
				СтрокаФайла.ИмяФайлаНаКомпьютере = ПомещенныеФайлы[Индекс].ПолноеИмя;
			#КонецЕсли
			
		КонецЦикла;
		
		СформироватьСсылкиВложений();
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДиалогу(Команда)
	
	ТекСтрока = Элементы.Контакты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран диалог!';en='No dialog selected!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("ID_Пользователя, Группа, УчетнаяЗапись");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
	ПутьКДиалогу = CRM_РаботаСМессенджерамиСервер.ПутьКДиалогуВБраузере(СтруктураСтроки);
	Если ЗначениеЗаполнено(ПутьКДиалогу) Тогда
		ПерейтиПоНавигационнойСсылке(ПутьКДиалогу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ПерейтиПоНавигационнойСсылке(CRM_ОбщегоНазначенияСервер.ПолучитьСсылкуНаРазделСправки("АРМДиалоги"));
КонецПроцедуры

&НаКлиенте
Процедура Диалог_Начать(Команда)
	ПараметрыНового = Новый Структура("Канал, Пользователь, РолиПользователя",
		ОтборКанал, АвторизованныйПользователь, РолиАвторизованногоПользователя);

	ОписаниеОповещения = Новый ОписаниеОповещения("Диалог_Начать_Завершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаВыбораПолучателя", ПараметрыНового, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Диалог_Начать_Завершение(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Диалог_Начать_Завершение_Сервер(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Диалог_Начать_Завершение_Сервер(Диалог)
	
	УстановитьОтборПоСтатусамДиалогов(2);
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID_Пользователя", Диалог.ID_Пользователя);
	ПараметрыОтбора.Вставить("Группа", Диалог.Группа);
	ПараметрыОтбора.Вставить("Контакт", Диалог.Контакт);
	ПараметрыОтбора.Вставить("УчетнаяЗапись", Диалог.УчетнаяЗапись);
	
	КонтактыДеревоЗначений = РеквизитФормыВЗначение("Контакты", Тип("ДеревоЗначений"));
	
	Строки = КонтактыДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	Если Строки.Количество() > 0 Тогда
		Элементы.Контакты.ТекущаяСтрока = ПолучитьИдентификаторСтрокиДереваФормы(КонтактыДеревоЗначений, Строки[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Диалог_ПринятьНаСервере()
	
	Если ПользовательЯвляетсяСоисполнителем Тогда
		
		CRM_СоисполнителиДиалоговСервер.УстановитьСтатусКонтактуСоисполнителя(АвторизованныйПользователь,
			 ДанныеТекущегоКонтакта(),
			 Перечисления.CRM_СтатусыДиалогов.ПринятВРаботу);
		ДиалогОбъект = ТекущийДиалог.ПолучитьОбъект();
		Справочники.CRM_Диалоги.ДобавитьДействие(ДиалогОбъект, Перечисления.CRM_ДействияСДиалогами.ПринятВРаботу);
		ДиалогОбъект.Записать();
		
	Иначе
		CRM_РаботаСМессенджерамиСервер.ПринятьДиалог(ТекущийДиалог);
		CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
			ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, АвторизованныйПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Диалог_Принять(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран диалог!';en='No dialog selected!'"));
		Возврат;
	КонецЕсли;
	
	Диалог_ПринятьНаСервере();
	ОбновитьДиалоги(ТекущийДиалог);
	Если Команда <> Неопределено Тогда// интерактивное принятие диалога
		КонтактыОбновить(Ложь);
		ОбновитьСообщения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Диалог_ЗакрытьНаСервере(Диалог, ПричинаОтказа, Комментарий, УспешноеЗакрытиеДиалога = Ложь)
	
	Если Не УспешноеЗакрытиеДиалога И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Диалог) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Диалог, Справочники.CRM_СостоянияЛидов.Отклонен, ,
			ПричинаОтказа, Комментарий);
	КонецЕсли;
	
	CRM_РаботаСМессенджерамиСервер.ЗавершитьДиалог(Диалог);
	CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
		Диалог.УчетнаяЗапись, Диалог.Группа, Диалог.ID_Пользователя, АвторизованныйПользователь);
	
	CRM_СоисполнителиДиалоговСервер.УдалитьВсехСоисполнителей(ДанныеТекущегоКонтакта(), Не ТранзакцияАктивна());
	
КонецПроцедуры

&НаКлиенте
Процедура Диалог_Закрыть(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран диалог!';en='No dialog selected!'"));
		Возврат;
	КонецЕсли;
	
	СписокИнтересов = ПолучитьСписокАктивныхИнтересов(ТекущийДиалог);
	
	Если УказыватьПричинуОтклонения(ТекущийДиалог) И СписокИнтересов.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗакрытьДиалогЗавершение",
			ЭтотОбъект,
			ТекущийДиалог);
		
		ОткрытьФорму(
			"Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", ,
			ЭтотОбъект, ,
			ВариантОткрытияОкна.ОтдельноеОкно, ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗакрытьДиалогЗавершение(Ложь, ТекущийДиалог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Диалог_ЗакрытьУспешно(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбран диалог!';en='No dialog selected!'"));
		Возврат;
	КонецЕсли;
	
	ЗакрытьДиалогЗавершение(Истина, ТекущийДиалог);
	
КонецПроцедуры // Диалог_ЗакрытьУспешно()

&НаКлиенте
Процедура НастроитьФильтры(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ОтборПользователь", ТекущийПользователь); 
	СтруктураОтбора.Вставить("ОтборКанал", ОтборКанал); 
	СтруктураОтбора.Вставить("ОтборКонтакты", ОтборКонтакты); 
	СтруктураОтбора.Вставить("ОтборПодразделение", ОтборПодразделение); 
	СтруктураОтбора.Вставить("ОтображатьЗакрытые", ОтображатьЗакрытые);
	СтруктураОтбора.Вставить("ОтображатьЗаблокированные", ОтображатьЗаблокированные);
	СтруктураОтбора.Вставить("ОтображатьТолькоСвои", ОтображатьТолькоСвои);
	СтруктураОтбора.Вставить("ОтборПериод", ОтборПериод); 

	ПриоритетыКаналовСписок = Новый СписокЗначений;
	Для каждого Строка Из ПриоритетыКаналов Цикл
		ПриоритетыКаналовСписок.Добавить(Строка.Канал);
	КонецЦикла;
	СтруктураОтбора.Вставить("ПриоритетыКаналов", ПриоритетыКаналовСписок); 
	
	ПараметрыОткрытия = Новый Структура("СтруктураФильтра", СтруктураОтбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьФильтрыЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаФильтра", ПараметрыОткрытия, ЭтотОбъект, , , ,
		 ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФильтрыЗавершение(Результат, ДопПар) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыУстановлены = Ложь;
    
	ТекущийПользователь = Результат.ОтборПользователь;
	РолиТекущегоПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	ОтборКанал = Результат.ОтборКанал; 
	ОтборКонтакты = Результат.ОтборКонтакты; 
	ОтборПодразделение = Результат.ОтборПодразделение; 
	ОтображатьЗакрытые = Результат.ОтображатьЗакрытые;
	ОтображатьТолькоСвои = Результат.ОтображатьТолькоСвои;
	ОтборПериод = Результат.ОтборПериод;
	ОтображатьЗаблокированные = Результат.ОтображатьЗаблокированные;
	
	ПриоритетыКаналов.Очистить();
	Для Каждого Элемент Из Результат.ПриоритетыКаналов Цикл
		НовКанал = ПриоритетыКаналов.Добавить();
		НовКанал.Канал = Элемент.Значение;
		НовКанал.Приоритет = ПриоритетыКаналов.Количество();
	КонецЦикла;

	ТекущаяУчетнаяЗапись = Неопределено;

	//ОтборСтатусДиалогов = ?(ТекущийПользователь <> ПользователиКлиент.ТекущийПользователь(), 1, ОтборСтатусДиалогов);
	НастроитьФильтрыЗавершениеНаСервере();
	ПроверкаНепрочитанныхСообщенийМессенджера(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФильтрыЗавершениеНаСервере()
	УстановитьВидимостьДоступностьКолонокКонтактов();
	ПокраситьКнопкиОтбораДиалоговНаСервере();
	КонтактыОбновить(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДиалогиФильтр_Нажатие(Команда)
	
	ОтключитьРежимВыбораСообщений(Неопределено);
	
	ПрошлыйСтатусОтбора = ОтборСтатусДиалогов;
	
	Если Команда.Имя = "ДиалогиФильтр_Новые" Тогда
		ОтборСтатусДиалогов = 0;
	ИначеЕсли Команда.Имя = "ДиалогиФильтр_ВРаботе" Тогда
		ОтборСтатусДиалогов = 1;
	Иначе
		ОтборСтатусДиалогов = 2;
	КонецЕсли;
	
	Если ПрошлыйСтатусОтбора <> ОтборСтатусДиалогов Тогда
		УстановитьОтборПоСтатусамДиалогов(ОтборСтатусДиалогов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусамДиалогов(ЗначениеСтатуса)
	
	ТекущийID_Пользователя = ""; // сбросить текущий ID для того, чтобы перезаполнились сообщения
	ОтборСтатусДиалогов = ЗначениеСтатуса;
	КонтактыОбновить(Ложь);
	ПокраситьКнопкиОтбораДиалоговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогиВыбратьСпособВедения(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.АРМДиалоги.Удобство.СпособВеденияДиалогов.ВыбратьСпособВеденияДиалогов");
	
	ОписаниеОповещенияНастроек = Новый ОписаниеОповещения(
		"ДиалогиВыбратьСпособВеденияЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВариантОформленияМессенджера", НастройкаОформленияПользователя);
	
	ОткрытьФорму(
		"Обработка.CRM_Мессенджер.Форма.ФормаНастроек",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещенияНастроек,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогиВыбратьСпособВеденияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОтключитьРежимВыбораСообщений(Неопределено);
		ЗагрузитьДополнительныеНастройки();
		
		НовоеОформлениеМессенджера = CRM_РаботаСМессенджерамиСервер.ПолучитьОформлениеМессенджераПоПользователю(
			АвторизованныйПользователь);
		
		Если НовоеОформлениеМессенджера <> НастройкаОформленияПользователя Тогда
			Оповестить("ИзменениеОформленияМессенджера", НовоеОформлениеМессенджера);
			Возврат;
		КонецЕсли;
		
		ВестиДиалогиЕдинымОкном			= (СпособВеденияДиалогов = 1);
		ВыводитьВажныеПоВсемДиалогам	= (Важные_ВариантВывода = 0);
		
		ОбновитьДиалогиИСообщения();
		ОбновитьВидимостьПунктовКонтекстногоМенюСообщения();
		
		ОкноБраузера.changeFavouriteFilterVisibility(ВестиДиалогиЕдинымОкном);
		
		Если Не ОкноБраузера.favouriteIsHidden() Тогда
			Если ВыводитьВажныеПоВсемДиалогам Тогда
				Возврат;
			КонецЕсли;
			
			ОбновитьВажныеСообщения();
		КонецЕсли;
		
		ОкноБраузера.changeChatInputReadOnly(Элементы.ГруппаСообщение.Доступность);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Диалог_ВажныеСообщения(Команда)
	
	ОкноБраузера.showFavourite();
	ОбновитьВажныеСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуДляHTMLПоля(Команда)
	
	ИмяКоманды = Сред(Команда.Имя, 12);
	CRM_РаботаСHTMLКлиент.ВыполнитьHTMLКоманду(ЭтотОбъект, Элементы.ДокументHTML, ИмяКоманды, , Ложь);
	
КонецПроцедуры

#Область Поиск_Диалог

&НаКлиенте
Процедура Диалог_Поиск(Команда)
	ОкноБраузера.showSearch();
КонецПроцедуры

&НаКлиенте
Процедура Диалог_Файлы(Команда)
	ОкноБраузера.showFiles();
	Если Не ФайлыВыведены Тогда
		ОкноБраузера.addFiles(ПолучитьФайлыВДиалоге(ТекущийДиалог));
		ФайлыВыведены = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискВДиалоге(Диалог, СтрокаПоиска)
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата,
	                      |	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	                      |	КОНЕЦ КАК Контакт
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |		ПО CRM_Диалоги.Ссылка = CRM_СообщениеМессенджера.Диалог
	                      |ГДЕ
	                      |	CRM_Диалоги.Группа = &Группа
	                      |	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_Диалоги.ID_Пользователя = &ID_Пользователя
 					      |	И НЕ CRM_Диалоги.Служебный
	                      |	И (CRM_Диалоги.Ответственный = &Ответственный
	                      |			ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	                      |	И CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО &СтрокаПоиска
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", ТекущаяУчетнаяЗапись);
	Запрос.УстановитьПараметр("Группа", ТекущаяГруппа);
	Запрос.УстановитьПараметр("Ответственный", ТекущийПользователь);
	Если ТекущаяУчетнаяЗапись = Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия
		Или ГрупповойЧат Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_Диалоги.ID_Пользователя = &ID_Пользователя", "");
	Иначе
		Запрос.УстановитьПараметр("ID_Пользователя", ТекущийID_Пользователя);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Поиск_Сообщения = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Найденный = Новый Структура("contact, date, text, ref");
		Найденный.ref = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		Найденный.contact = ?(ЗначениеЗаполнено(Выборка.Контакт), Выборка.Контакт, "");
		Найденный.date = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yy");
		Найденный.text = Выборка.ТекстСообщения;
		Поиск_Сообщения.Добавить(Найденный);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("search", СтрокаПоиска);
	Если Поиск_Сообщения.Количество() > 0 Тогда
		Результат.Вставить("messages", Поиск_Сообщения);
	КонецЕсли;
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Результат);

КонецФункции

&НаСервере
Функция ПолучитьФайлыВДиалоге(Диалог)
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	                      |	CRM_СообщениеМессенджера.Дата КАК Дата,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	                      |	КОНЕЦ КАК Контакт,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК Расширение,
	                      |	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла
	                      |ПОМЕСТИТЬ Медиа
	                      |ИЗ
	                      |	Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = CRM_СообщениеМессенджера.Ссылка
	                      |ГДЕ
	                      |	&ВыводитьФайлы
	                      |	И CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
	                      |	И НЕ CRM_СообщениеМессенджера.Отложенное
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка,
	                      |	CRM_СообщениеМессенджера.Дата,
	                      |	ВЫБОР
	                      |		КОГДА CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Исходящее)
	                      |			ТОГДА CRM_СообщениеМессенджера.Ответственный.Наименование
	                      |		ИНАЧЕ CRM_СообщениеМессенджера.КонтактПредставление
	                      |	КОНЕЦ,
	                      |	NULL,
	                      |	NULL,
	                      |	CRM_СообщениеМессенджера.ТекстСообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	&ВыводитьСсылки
	                      |	И CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
	                      |	И (CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО ""%http://%""
	                      |			ИЛИ CRM_СообщениеМессенджера.ТекстСообщения ПОДОБНО ""%https://%"")
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Медиа.Ссылка КАК Ссылка,
	                      |	Медиа.Дата КАК Дата,
	                      |	Медиа.Контакт КАК Контакт,
	                      |	Медиа.Файл КАК Файл,
	                      |	Медиа.Расширение КАК Расширение,
	                      |	Медиа.ИмяФайла КАК ИмяФайла
	                      |ИЗ
	                      |	Медиа КАК Медиа
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
	
	Запрос.УстановитьПараметр("ВыводитьФайлы", (Файлы_ВариантВывода <> 2));
	Запрос.УстановитьПараметр("ВыводитьСсылки", (Файлы_ВариантВывода <> 1));
	Если Файлы_ВоВсехДиалогах И Не ГрупповойЧат Тогда
		ТекстЗамены = "CRM_СообщениеМессенджера.Диалог.УчетнаяЗапись = &УчетнаяЗапись И CRM_СообщениеМессенджера.Диалог.Группа = &Группа";
			
		Запрос.УстановитьПараметр("УчетнаяЗапись", Диалог.УчетнаяЗапись);
		Запрос.УстановитьПараметр("Группа", Диалог.Группа);
		Запрос.УстановитьПараметр("ID_Пользователя", Диалог.ID_Пользователя);
		Если ТекущаяУчетнаяЗапись <> Справочники.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия Тогда
			ТекстЗамены = ТекстЗамены + " И CRM_СообщениеМессенджера.Диалог.ID_Пользователя = &ID_Пользователя"; 
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)", ТекстЗамены);
	Иначе
		
		ВестиСтруктурированныеДиалоги = (СпособВеденияДиалогов = 0) И Не ГрупповойЧат;
		ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
		
		Если ВестиСтруктурированныеДиалоги Тогда
			МассивДиалогов = Новый Массив;
			МассивДиалогов.Добавить(Диалог);
		ИначеЕсли ВестиДиалогиЕдинымОкном Тогда
			МассивДиалогов = МассивДиалоговНаСервере();
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивДиалогов", МассивДиалогов);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Поиск_Сообщения = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Найденный = Новый Структура("contact, date, ref, file, fileRef, guid, image, size");
		Найденный.ref = ПолучитьНавигационнуюСсылку(Выборка.Ссылка);
		Найденный.contact = ?(ЗначениеЗаполнено(Выборка.Контакт), Выборка.Контакт, "");
		Найденный.date = Формат(Выборка.Ссылка.Дата, "ДФ=dd.MM.yy");
		Найденный.size = Неопределено;
		Найденный.guid = "";
		image = "";
		Если ЗначениеЗаполнено(Выборка.Файл) Тогда
			Если СтрНайти(ВРег("jpeg,jpg,gif,png"), ВРег(Выборка.Расширение)) > 0 Тогда
				ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Выборка.Файл, Ложь);
				
				Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
					Продолжить;
				КонецЕсли;
				
				image = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ЭтотОбъект.УникальныйИдентификатор);
				АдресаТекущихКартинокДиалога.Добавить(image);
				
				image = CRM_РаботаСHTML.ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(image);
				
				КартинкаИзДвоичныхДанных = Новый Картинка(ДвоичныеДанныеКартинки);
				Найденный.size = Новый Структура(
					"height, width",
					КартинкаИзДвоичныхДанных.Высота(), КартинкаИзДвоичныхДанных.Ширина()
				);
			Иначе
				ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(Выборка.Расширение);
				image = СписокИконокФайлов[ИндексКартинки / 2].Представление;
			КонецЕсли;
			Найденный.guid = Строка(Выборка.Файл.УникальныйИдентификатор());
		КонецЕсли;
		Найденный.file = Выборка.ИмяФайла;
		Найденный.image = image;
		Поиск_Сообщения.Добавить(Найденный);
	КонецЦикла;
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Поиск_Сообщения);

КонецФункции

&НаКлиенте
Процедура ИзменениеФильраФайлов(Команда)
	
	Если Команда = "filesFromAllDialogs" Тогда
		Файлы_ВоВсехДиалогах = Не Файлы_ВоВсехДиалогах;
	ИначеЕсли Команда = "filesFilter_files" Тогда
		Файлы_ВариантВывода = 1;
	ИначеЕсли Команда = "filesFilter_refs" Тогда
		Файлы_ВариантВывода = 2;
	ИначеЕсли Команда = "filesFilter_all" Тогда
		Файлы_ВариантВывода = 0;
	КонецЕсли;
	
	ОкноБраузера.addFiles(ПолучитьФайлыВДиалоге(ТекущийДиалог));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеФильтраИзбранных(Команда)
	
	Если Команда = "favouriteFilter_currentDialog" Тогда
		Важные_ВариантВывода = 1;
	ИначеЕсли Команда = "favouriteFilter_all" Тогда
		Важные_ВариантВывода = 0;
	КонецЕсли;
	
	ОбновитьВажныеСообщения();
	
КонецПроцедуры // ИзменениеФильтраИзбранных()

#КонецОбласти

#Область БыстрыеОтветы

&НаКлиенте
Процедура БыстрыеОтветы(Команда)
	Если Элементы.ГруппаБыстрыеОтветы.Скрыта() Тогда
		Элементы.ГруппаБыстрыеОтветы.Показать();
		ПодключитьОбработчикОжидания("БыстрыеОтветы_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;

	Если БыстрыеОтветы_Результат.Количество() = 0 Тогда
		БыстрыеОтветы_ПоискАвтоПодборНаСервере(БыстрыеОтветы_Поиск);
	КонецЕсли;
	ТекущийЭлемент = Элементы.БыстрыеОтветы_Поиск;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_ЗакрытьНастройку()
	
	Если Элементы.ГруппаБыстрыеОтветы.Скрыта() Тогда
		ТекущийЭлемент = Элементы.ДокументHTML;
		ОкноБраузера.setFocusToInputField();
		ОтключитьОбработчикОжидания("БыстрыеОтветы_ЗакрытьНастройку");
	Иначе
		ПодключитьОбработчикОжидания("БыстрыеОтветы_ЗакрытьНастройку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеОтветы_ПоискАвтоПодборНаСервере(ТекстПоиска)
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	                      |	CRM_Решения.Ссылка КАК Решение
	                      |ИЗ
	                      |	Справочник.CRM_Решения КАК CRM_Решения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СтатистикаИспользованияРешенийБЗ КАК CRM_СтатистикаИспользованияРешенийБЗ
	                      |		ПО (CRM_СтатистикаИспользованияРешенийБЗ.Решение = CRM_Решения.Ссылка)
	                      |			И (CRM_СтатистикаИспользованияРешенийБЗ.Пользователь = &Пользователь)
	                      |ГДЕ
	                      |	CRM_Решения.Наименование ПОДОБНО &ТекстВопроса
	                      |	И (НЕ &ТолькоСвои
	                      |			ИЛИ CRM_Решения.СтатусРешения = &СтатусРешения
	                      |				И CRM_Решения.Автор = &Автор)
	                      |	И (НЕ &ФильтрыЗаданы
	                      |			ИЛИ CRM_Решения.Родитель В (&Фильтр))
	                      |	И (&ФильтрВсе
	                      |			ИЛИ CRM_Решения.Родитель = &ТекущийФильтр)
	                      |	И НЕ CRM_Решения.ЭтоГруппа
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СтатистикаИспользованияРешенийБЗ.Использований УБЫВ,
	                      |	CRM_Решения.Наименование");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	Если ЗначениеЗаполнено(БыстрыеОтветы_КоличествоВыводимых) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "10", Строка(БыстрыеОтветы_КоличествоВыводимых));
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекстВопроса", "%" + ТекстПоиска + "%");
	Запрос.УстановитьПараметр("ТолькоСвои", БыстрыеОтветы_ТолькоСвои);
	Запрос.УстановитьПараметр("СтатусРешения", Перечисления.CRM_СтатусыРешений.НаРассмотрении);
	Запрос.УстановитьПараметр("Автор", ТекущийПользователь);
	Запрос.УстановитьПараметр("ФильтрыЗаданы", (БыстрыеОтветы_Фильтр.Количество() > 0));
	Запрос.УстановитьПараметр("Фильтр", БыстрыеОтветы_Фильтр);
	Запрос.УстановитьПараметр("ТекущийФильтр", БыстрыеОтветы_ТекущийФильтр);
	Запрос.УстановитьПараметр("ФильтрВсе", Не ЗначениеЗаполнено(БыстрыеОтветы_ТекущийФильтр));
	Если БыстрыеОтветы_ОбщаяСтатистика Тогда
		Запрос.УстановитьПараметр("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	КонецЕсли;
	
	БыстрыеОтветы_Результат.Загрузить(Запрос.Выполнить().Выгрузить());
	CRM_ЦентрМониторингаВызовСервера.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ПоискВОкнеБыстрыхОтветов");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_ПоискАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	 Ожидание,
	 СтандартнаяОбработка)
	Если Текст <> БыстрыеОтветы_Поиск Тогда
		БыстрыеОтветы_ПоискАвтоПодборНаСервере(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_ПоискОчистка(Элемент, СтандартнаяОбработка)
	БыстрыеОтветы_ПоискАвтоПодборНаСервере("");
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ВыборБыстрогоОтвета");
	ПриВыбореРешенияБЗ(БыстрыеОтветы_Результат.НайтиПоИдентификатору(ВыбраннаяСтрока).Решение, "", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореРешенияБЗ(Решение, НомерОтвета, УчитыватьСтатистику)
	
	СтруктураСообщения = ЗаполнитьСообщениеПоБыстромуОтвету(Решение, НомерОтвета, УчитыватьСтатистику);
	ШаблонСообщения = СтруктураСообщения.ШаблонСообщения;
	
	БыстрыеОтветы_Поиск = "";
	БыстрыеОтветы_Результат.Очистить();
	
	ТекущийЭлемент = Элементы.ДокументHTML;
	ОкноБраузера.setTextToChatInput(ШаблонСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_Добавить(Команда)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(
		"CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ДобавитьБыстрыйОтветИзФормыБыстрыеОтветы");
	
	ПараметрыОтвета = Новый Структура;
	ПараметрыОтвета.Вставить("ТекстВопроса",		БыстрыеОтветы_Поиск);
	ПараметрыОтвета.Вставить("Родитель",			БыстрыеОтветы_ТекущийФильтр);
	ПараметрыОтвета.Вставить("CRM_КонтекстВызова",	"ФормаБыстрыеОтветы");
	
	ОткрытьФорму("Справочник.CRM_Решения.Форма.ФормаБыстрогоОтвета", ПараметрыОтвета);
	
КонецПроцедуры // БыстрыеОтветы_Добавить()

&НаКлиенте
Процедура БыстрыеОтветы_Настройка(Команда)
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ОткрытиеБазыЗнаний");
	ПараметрыОтвета = Новый Структура("ОткрытаИзДругойФормы, СтрокаПоиска", Истина, БыстрыеОтветы_Поиск);
	ОткрытьФорму("Обработка.CRM_АРМ_БазаЗнаний.Форма.АРМБазаЗнаний", ПараметрыОтвета);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_Фильтры(Команда)
	ПараметрыФильтра = Новый Структура("ТолькоСвои, Фильтр, КоличествоВыводимых, ОбщаяСтатистика",
		БыстрыеОтветы_ТолькоСвои, БыстрыеОтветы_Фильтр, БыстрыеОтветы_КоличествоВыводимых, БыстрыеОтветы_ОбщаяСтатистика);
	ОписаниеОповещения = Новый ОписаниеОповещения("БыстрыеОтветы_ФильтрыЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_Мессенджер.Форма.ФормаБыстрыеОтветыФильтр", ПараметрыФильтра,
		 ЭтотОбъект, , , , ОписаниеОповещения,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_ФильтрыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыеОтветы_ТолькоСвои = Результат.ТолькоСвои;
	БыстрыеОтветы_Фильтр = Результат.Фильтр;
	БыстрыеОтветы_КоличествоВыводимых = Результат.КоличествоВыводимых;
	БыстрыеОтветы_ОбщаяСтатистика = Результат.ОбщаяСтатистика;
	
	Если БыстрыеОтветы_Фильтр.Количество() > 0 И ЗначениеЗаполнено(БыстрыеОтветы_ТекущийФильтр)
		И БыстрыеОтветы_Фильтр.НайтиПоЗначению(БыстрыеОтветы_ТекущийФильтр) = Неопределено Тогда
		БыстрыеОтветы_ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	ЗаполнитьПанельОтборовБыстрыхОтветов();
	БыстрыеОтветы_ПоискАвтоПодборНаСервере(БыстрыеОтветы_Поиск);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтветы_Фильтры_Отбор(Команда)
	
	БыстрыеОтветы_ТекущийФильтр = БыстрыеОтветы_Фильтр_Команды[Команда.Имя];
	ТекЭл = Элементы.Найти(Команда.Имя);
	ТекЭл.Шрифт = Новый Шрифт(ТекЭл.Шрифт, , , Истина);
	ТекЭл.Пометка = Истина;
	Для каждого Элемент Из Элементы.ГруппаБыстрыеОтветы_ПанельОтбора.ПодчиненныеЭлементы Цикл
		Если Элемент <> ТекЭл И Элемент.Пометка Тогда
			Элемент.Шрифт = Новый Шрифт(ТекЭл.Шрифт, , , Ложь);
			Элемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	БыстрыеОтветы_ПоискАвтоПодборНаСервере(БыстрыеОтветы_Поиск);
	
	Если ЗначениеЗаполнено(БыстрыеОтветы_ТекущийФильтр) Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.БыстрыеОтветы.ПереключениеПоГруппамОтветов");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСообщениеПоБыстромуОтвету(Решение, НомерОтвета, УчитыватьСтатистику)
	
	ПрисоединенныеФайлыОтправляемые.Очистить();
	
	ТекстHTML = "";
	
	табВложения = Новый ТаблицаЗначений;
	СписокИдВложений = Новый СписокЗначений;
	табВложения = ПолучитьВложенияРешения(Решение);
	
	Если НомерОтвета = Неопределено Тогда
		
		ШаблонСообщения = Решение.ТекстВопроса;
		
	ИначеЕсли НомерОтвета = "Все" Или Не ЗначениеЗаполнено(НомерОтвета) Тогда
		
		ТемпСообщение = "";
		
		Для Каждого ДанныеОтвета Из Решение.Ответы Цикл
			
			Если ДанныеОтвета.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда
				Продолжить;
			КонецЕсли;
			
			ТемпСообщение = ТемпСообщение + ?(ТемпСообщение = "", "", Символы.ПС + Символы.ПС) + ДанныеОтвета.ВариантОтвета;
			
			ТекстHTML = бзВставитьРешение(ТекстHTML, ДанныеОтвета.ВариантОтветаHTML, Решение);
			
			СписокИдВложений.Добавить(ДанныеОтвета.ИДСтроки);
			
		КонецЦикла;
		
		ШаблонСообщения = ТемпСообщение;
		
	Иначе
		
		ДанныеОтвета = Решение.Ответы[НомерОтвета - 1];
		
		Если Не ДанныеОтвета.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда
		
			ШаблонСообщения = ДанныеОтвета.ВариантОтвета;
			ТекстHTML = бзВставитьРешение(ТекстHTML, ДанныеОтвета.ВариантОтветаHTML, Решение);
			
			СписокИдВложений.Добавить(ДанныеОтвета.ИДСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаВложения Из СписокИдВложений Цикл
		табВложенияРешения = ПолучитьВложения(Решение, СтрокаВложения.Значение);
		Если табВложенияРешения.Количество() > 0 Тогда
		
			Если табВложения.Количество() = 0 Тогда
				табВложения = табВложенияРешения.Скопировать();
			Иначе
				Для Каждого СтрокаТаблицыВложений Из ТабВложенияРешения Цикл
					ЗаполнитьЗначенияСвойств(ТабВложения.Добавить(), СтрокаТаблицыВложений);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из табВложения Цикл
		НовФайл = ПрисоединенныеФайлыОтправляемые.Добавить();
		НовФайл.Значение = РаботаСФайламиСлужебный.ПолучитьНавигационнуюСсылкуВоВременномХранилище(Стр.Ссылка, , Ложь);
		НовФайл.Представление = Стр.ИмяФайла;
	КонецЦикла;
	
	СформироватьСсылкиВложений();
	Если УчитыватьСтатистику Тогда
		CRM_БазаЗнанийСервер.УчестьИспользованиеРешения(Решение, ТекущийПользователь);
	КонецЕсли;
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ШаблонСообщения", ШаблонСообщения);
	СтруктураСообщения.Вставить("ТекстHTML", ТекстHTML);
	
	Возврат СтруктураСообщения;
	
КонецФункции

&НаСервереБезКонтекста
// Функция получает все вложения решения.
//
// Параметры:
//	Ссылка		- СправочникСсылка	- Владелец вложений.
//	НомерСтроки	- Число				- НомерСтроки
//  КлючСтроки  - Строка (по умолчанию нет)	- Ключ строки, для которой нужно получить вложения.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица вложений.
//
Функция ПолучитьВложения(Ссылка, ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ИДФайлаЭлектронногоПисьма",	"%" + ИДФайлаЭлектронногоПисьма + "%");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ИндексКартинки КАК ИндексКартинки,
	|	Файлы.Размер КАК Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма КАК ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.ИДФайлаЭлектронногоПисьма ПОДОБНО &ИДФайлаЭлектронногоПисьма";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложения()

&НаСервереБезКонтекста
Функция ПолучитьВложенияРешения(Решение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Решение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И НЕ Файлы.ПометкаУдаления
	|	И Файлы.ИДФайлаЭлектронногоПисьма = """"";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложенияРешения()

&НаСервере
Функция бзВставитьРешение(ТекстВПолеHTML, ТекстОтвета, Решение)
	
	СтруктураТекстаHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстВПолеHTML);
	ТекстРешенияHTML = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
	ТекстОтвета, Решение, УникальныйИдентификатор, ИдентификаторыКартинокПисьма, "Копирование");
	СтруктураРешенияHTML = CRM_РаботаСHTML.РазложитьТекстHTML(ТекстРешенияHTML);
	
	ТекстHTML = СтруктураТекстаHTML.Тело
	+ СтруктураРешенияHTML.Тело
	+ ?(СтруктураРешенияHTML.Количество() > 1, "<br/>", "");
	
	Возврат ТекстHTML;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПанельОтборовБыстрыхОтветов()
	
	ПанельКом = Элементы.ГруппаБыстрыеОтветы_ПанельОтбора;
	Пока ПанельКом.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(ПанельКом.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	//Элементы.БыстрыеОтветы_Фильтры.Картинка = ?((БыстрыеОтветы_Фильтр.Количество()>0),
		// БиблиотекаКартинок.CRM_ФильтрАктивный,
		// БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	
	Если БыстрыеОтветы_Фильтр.Количество() = 0 Тогда
		Возврат;
	Иначе
		ТемпСписок = Новый СписокЗначений;
		ТемпСписок.ЗагрузитьЗначения(БыстрыеОтветы_Фильтр.ВыгрузитьЗначения());
		БыстрыеОтветы_Фильтр_Команды = Новый Структура;
		Если БыстрыеОтветы_Фильтр.Количество() > 1 Тогда
			
			БыстрыеОтветы_Фильтр_Команды.Вставить("БыстрыеОтветы_Фильтр_Все", Неопределено);
			Если Команды.Найти("БыстрыеОтветы_Фильтр_Все") = Неопределено Тогда
				Команда = Команды.Добавить("БыстрыеОтветы_Фильтр_Все");
				Команда.Действие = "БыстрыеОтветы_Фильтры_Отбор";
				Команда.Заголовок = НСтр("ru = 'Все'");
				Команда.Подсказка = НСтр("ru = 'Отбор по всем папкам, выбранным в фильре'");
			КонецЕсли;
			ЭлементКом = Элементы.Найти("БыстрыеОтветы_Фильтр_Все");
			Если ЭлементКом = Неопределено Тогда
				ЭлементКом = Элементы.Добавить("БыстрыеОтветы_Фильтр_Все", Тип("КнопкаФормы"), ПанельКом);
				ЭлементКом.ИмяКоманды = "БыстрыеОтветы_Фильтр_Все";
				ЭлементКом.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
				ЭлементКом.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
				Если (Не ЗначениеЗаполнено(БыстрыеОтветы_ТекущийФильтр)) Тогда
					ЭлементКом.Пометка = Истина;
					ЭлементКом.Шрифт = Новый Шрифт(ЭлементКом.Шрифт, , , Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Элемент Из ТемпСписок Цикл
		ИдентификаторКоманды = "БыстрыеОтветы_Фильтр_" 
			+ СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()), "-", "_");
		БыстрыеОтветы_Фильтр_Команды.Вставить(ИдентификаторКоманды, Элемент.Значение);
		Если Команды.Найти(ИдентификаторКоманды) = Неопределено Тогда
			Команда = Команды.Добавить(ИдентификаторКоманды);
			Команда.Действие = "БыстрыеОтветы_Фильтры_Отбор";
			Команда.Заголовок = Строка(Элемент.Значение);
		КонецЕсли;
		ЭлементКом = Элементы.Найти(ИдентификаторКоманды);
		Если ЭлементКом = Неопределено Тогда
			ЭлементКом = Элементы.Добавить(ИдентификаторКоманды, Тип("КнопкаФормы"), ПанельКом);
			ЭлементКом.ИмяКоманды = ИдентификаторКоманды;
			ЭлементКом.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
			ЭлементКом.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			Если (БыстрыеОтветы_ТекущийФильтр = Элемент.Значение) Тогда
				ЭлементКом.Пометка = Истина;
				ЭлементКом.Шрифт = Новый Шрифт(ЭлементКом.Шрифт, , , Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Соисполнители

&НаКлиенте
Процедура Соисполнители_ДобавитьПервого(Команда)
	
	НачатьДобавлениеСоисполнителя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Соисполнители_Добавить(Команда)
	
	НачатьДобавлениеСоисполнителя();
	
КонецПроцедуры

&НаКлиенте
Процедура Соисполнители_ПокинутьДиалог(Команда)
	
	УдаляемыеСоисполнители = Новый Массив;
	УдаляемыеСоисполнители.Добавить(АвторизованныйПользователь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьСписокСоисполнителейОповещение",
		ЭтотОбъект);
	
	CRM_СоисполнителиДиалоговКлиент.УдалитьСоисполнителя(
		ДанныеТекущегоКонтакта(),
		УдаляемыеСоисполнители,
		ОписаниеОповещения);
	
	ОчиститьРеквизитыОбновитьКонтакты();
	ОбновитьДиалоги(ТекущийДиалог);
	
КонецПроцедуры // Соисполнители_ПокинутьДиалог()

&НаКлиенте
Процедура НачатьДобавлениеСоисполнителя(Первый = Ложь)
	
	CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.Соисполнители.ВыборДобавитьСоисполнителя");
	
	ТекущиеСоисполнители = МассивТекущихСоисполнителей();
	ТекущиеСоисполнителиСЗ = Новый СписокЗначений();
	ТекущиеСоисполнителиСЗ.ЗагрузитьЗначения(ТекущиеСоисполнители);
	
	ДействияПоЗавершении = Новый Структура;
	ДействияПоЗавершении.Вставить("ПринятьДиалог");
	ДействияПоЗавершении.Вставить("ИнтерфейсДобавления_Добавить");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДействияПоЗавершении", ДействияПоЗавершении);
	
	CRM_СоисполнителиДиалоговКлиент.ДобавитьСоисполнителя(ТекущийПользователь,
															ДанныеТекущегоКонтакта(),
															ТекущиеСоисполнителиСЗ,
															Новый ОписаниеОповещения("ДобавитьСоисполнителяОповещение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

#КонецОбласти

#Область Смайлики

&НаКлиенте
Процедура Смайлики(Команда)
	
	Если ОкноБраузера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОкноБраузера.getSideBarHiddenState("smiles-select__menu") Тогда
		CRM_ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики("CRM_Статистика.АРМДиалоги.Удобство.Смайлики.ВызовСмайликов");
		ОкноБраузера.showSmiles();
		НедавниеСмайликиJSON = CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("RecentSmiles",
			 НедавниеСмайлики.ВыгрузитьЗначения()));
		ОкноБраузера.updateLastClickedEmojis(НедавниеСмайликиJSON);
	Иначе
		ОкноБраузера.hideSmiles();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеСообщения

&НаКлиенте
Процедура Диалог_ОтложенныеСообщения(Команда)
	
	Если ОкноБраузера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОкноБраузера.showScheduledMessages();
	ОбновитьОтложенныеСообщения();
	
КонецПроцедуры // Диалог_ОтложенныеСообщения()

&НаКлиенте
Процедура ОбновитьОтложенныеСообщения()
	
	Если ОкноБраузера.ScheduledMessageIsHidden() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтложенныхСообщений = ПолучитьМассивОтложенныхСообщенийНаСервере();
	
	ОкноБраузера.ClearScheduledMessages();
	ОкноБраузера.AddScheduledMessage(МассивОтложенныхСообщений);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОтложенныхСообщенийНаСервере()
	
	Если Не ЗначениеЗаполнено(ТекущийДиалог) Тогда
		Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", Новый Массив));
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(CRM_СообщениеМессенджера.ТекстСообщения КАК СТРОКА(1000)) КАК Текст,
		|	CRM_СообщениеМессенджера.Дата КАК ДатаОтложеннойОтправки,
		|	CRM_СообщениеМессенджера.Ответственный.Наименование + ВЫБОР
		|		КОГДА CRM_СообщениеМессенджера.ПолучателиПредставление = """"
		|			ТОГДА """"
		|		ИНАЧЕ "" -> "" + CRM_СообщениеМессенджера.ПолучателиПредставление
		|	КОНЕЦ КАК Контакт,
		|	CRM_СообщениеМессенджера.Ответственный КАК КонтактСсылка,
		|	CRM_СообщениеМессенджера.СообщениеОснование КАК СообщениеОснование,
		|	CRM_СообщениеМессенджера.Диалог КАК Диалог,
		|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Файл,
		|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК Расширение,
		|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Наименование + ""."" + CRM_СообщениеМессенджераПрисоединенныеФайлы.Расширение КАК ИмяФайла
		|ИЗ
		|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
		|		ПО (CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = CRM_СообщениеМессенджера.Ссылка)
		|ГДЕ
		|	CRM_СообщениеМессенджера.Диалог В(&МассивДиалогов)
		|	И CRM_СообщениеМессенджера.Отложенное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтложеннойОтправки
		|ИТОГИ
		|	МАКСИМУМ(Текст),
		|	МАКСИМУМ(ДатаОтложеннойОтправки),
		|	МАКСИМУМ(Контакт),
		|	МАКСИМУМ(КонтактСсылка),
		|	МАКСИМУМ(СообщениеОснование),
		|	МАКСИМУМ(Диалог)
		|ПО
		|	Ссылка");
	
	ВестиСтруктурированныеДиалоги = (СпособВеденияДиалогов = 0) И Не ГрупповойЧат;
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
	
	Если Важные_ВариантВывода = 0 Или ВестиДиалогиЕдинымОкном Тогда
		МассивДиалогов = МассивДиалоговНаСервере();
	Иначе
		МассивДиалогов = Новый Массив;
		МассивДиалогов.Добавить(ТекущийДиалог);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивДиалогов", МассивДиалогов);
	ВыборкаСообщений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивСообщений = Новый Массив;
	Пока ВыборкаСообщений.Следующий() Цикл
		ПолеAttachments = Новый Массив;
		
		ВыборкаФайлы = ВыборкаСообщений.Выбрать();
		Пока ВыборкаФайлы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаФайлы.Файл) Тогда
				Продолжить;
			КонецЕсли;
			
			image = "";
			РазмерыКартинки = Неопределено;
			
			Если СтрНайти(ВРег("jpeg,jpg,gif,png"), ВРег(ВыборкаФайлы.Расширение)) > 0 Тогда
				ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаФайлы.Файл, Ложь);
				
				Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
					Продолжить;
				КонецЕсли;
				
				image = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, ЭтотОбъект.УникальныйИдентификатор);
				АдресаТекущихКартинокДиалога.Добавить(image);
				
				image = CRM_РаботаСHTML.ПолучитьНормализованнуюСсылкуВременногоХранилищаДляHTML(image);
				
				КартинкаИзДвоичныхДанных = Новый Картинка(ДвоичныеДанныеКартинки);
				РазмерыКартинки = Новый Структура(
					"height, width",
					КартинкаИзДвоичныхДанных.Высота(),
					КартинкаИзДвоичныхДанных.Ширина());
			Иначе
				ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(ВыборкаФайлы.Расширение);
				image = СписокИконокФайлов[ИндексКартинки / 2].Представление;
			КонецЕсли;
			
			СтруктураМассиваФайлов = Новый Структура("file, guid, image", ВыборкаФайлы.ИмяФайла,
			Строка(ВыборкаФайлы.Файл.УникальныйИдентификатор()),
			image);
			
			Если РазмерыКартинки <> Неопределено Тогда
				СтруктураМассиваФайлов.Вставить("size", РазмерыКартинки);
			КонецЕсли;
			
			ПолеAttachments.Добавить(СтруктураМассиваФайлов);
		КонецЦикла;
		
		// Дата и время отложенной отправки сообщения.
		ПолеTime = Формат(
			ВыборкаСообщений.ДатаОтложеннойОтправки, ?(
				НачалоДня(ВыборкаСообщений.ДатаОтложеннойОтправки) = НачалоДня(ТекущаяДатаСеанса()),
				"ДФ=HH:mm",
				"ДФ='dd MMMM HH:mm'"));
		
		// Отправитель отложенного сообщения.
		Если ЗначениеЗаполнено(ВыборкаСообщений.КонтактСсылка) Тогда
			ПолеContact		= ВыборкаСообщений.Контакт;
			ПолеContactRef	= ПолучитьНавигационнуюСсылку(ВыборкаСообщений.КонтактСсылка);
		Иначе
			ПолеContact		= "";
			ПолеContactRef	= "";
		КонецЕсли;
		
		// Структура описание сообщения для отображения в документе HTML.
		ОтложенноеСообщение = Новый Структура;
		ОтложенноеСообщение.Вставить("time",		ПолеTime);
		ОтложенноеСообщение.Вставить("contact",		ПолеContact);
		ОтложенноеСообщение.Вставить("contactRef",	ПолеContactRef);
		ОтложенноеСообщение.Вставить("attachments",	ПолеAttachments);
		ОтложенноеСообщение.Вставить("text",		ВыборкаСообщений.Текст);
		ОтложенноеСообщение.Вставить("guid",		Строка(ВыборкаСообщений.Ссылка.УникальныйИдентификатор()));
		
		// Если отложенное сообщения является ответом на другое сообщение.
		Если ЗначениеЗаполнено(ВыборкаСообщений.СообщениеОснование) Тогда
			Основание = ВыборкаСообщений.СообщениеОснование;
			
			ПолеReplyMessage_time = Формат(
				Основание.Дата,
				?(НачалоДня(Основание.Дата) = НачалоДня(ТекущаяДатаСеанса()), "ДФ=HH:mm", "ДФ='dd MMMM HH:mm'"));
			
			ПолеReplyMessage_contact = Строка(Основание.Ответственный);
			
			ПолеReplyMessage_text = ?(
				ЗначениеЗаполнено(Основание.ТекстСообщения),
				Основание.ТекстСообщения,
				НСтр("ru = 'Файл...'; en = 'File...'"));
			
			ПолеReplyMessage_guid = Строка(Основание.УникальныйИдентификатор());
			
			// Структура описания сообщения-цитаты.
			ПолеReplyMessage = Новый Структура;
			ПолеReplyMessage.Вставить("time",		ПолеReplyMessage_time);
			ПолеReplyMessage.Вставить("contact",	ПолеReplyMessage_contact);
			ПолеReplyMessage.Вставить("text",		ПолеReplyMessage_text);
			ПолеReplyMessage.Вставить("guid",		ПолеReplyMessage_guid);
			
			ОтложенноеСообщение.Вставить("reply_message", ПолеReplyMessage);
		КонецЕсли;
		
		МассивСообщений.Добавить(ОтложенноеСообщение);
	КонецЦикла;
	
	Возврат CRM_ОбщегоНазначенияСервер.ЗначениеВСтрокуJSON(Новый Структура("ArrayOfMessages", МассивСообщений));
	
КонецФункции // ПолучитьМассивОтложенныхСообщенийНаСервере()

#КонецОбласти

#Область БлокировкаОтправителей

&НаКлиенте
Процедура Диалог_ИзменитьБлокировкуПолученияСообщений(Команда)
	
	ИдентификаторБлокировки = ?(ГрупповойЧат, ТекущаяГруппа, ТекущийID_Пользователя);
	НовоеСостояниеБлокировки = Не ТекущийСтатусБлокировки;
	
	CRM_РаботаСМессенджерамиСервер.ИзменитьБлокировкуОтправителя(
		ИдентификаторБлокировки, НовоеСостояниеБлокировки);
	
	Если ТекущийСтатусБлокировки Тогда
		СообщениеОповещения = НСтр("ru = 'Отправитель был разблокирован.'");
		КартинкаОповещения = БиблиотекаКартинок.CRM_ДиалогРазблокировать;
	Иначе
		СообщениеОповещения = НСтр("ru = 'Отправитель был заблокирован.'");
		КартинкаОповещения = БиблиотекаКартинок.CRM_ДиалогЗаблокировать;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Блокировка отправителя'"), , СообщениеОповещения, КартинкаОповещения);
	
	ИзменитьПометкуБлокировкиКонтакта(НовоеСостояниеБлокировки);
	
	Элементы.Диалог_ИзменитьБлокировкуПолученияСообщений.Картинка = ?(
		ТекущийСтатусБлокировки,
		БиблиотекаКартинок.CRM_ДиалогРазблокировать,
		БиблиотекаКартинок.CRM_ДиалогЗаблокировать);
	
КонецПроцедуры // Диалог_ИзменитьБлокировкуПолученияСообщений()

#КонецОбласти

#Область ГруппировкиДиалогов

&НаКлиенте
Процедура ПапкиДиалогов_ДобавитьВПапку(Команда)
	
	ВыделенныеСтрокиКонтактов = ПолучитьМассивВыделенныхКонтактов();
	
	Если ВыделенныеСтрокиКонтактов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПапкиДиалогов_ДобавитьВПапкуЗавершение", ЭтотОбъект, ВыделенныеСтрокиКонтактов);
		
	ЗначениеОтбора = Новый Структура("Пользователь", АвторизованныйПользователь);
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	
	ОткрытьФорму("Справочник.CRM_ПапкиДиалогов.ФормаВыбора", ПараметрыВыбора,
		ЭтотОбъект, КлючУникальности, , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры // ПапкиДиалогов_ДобавитьВПапку()

&НаКлиенте
Процедура ПапкиДиалогов_ДобавитьВПапкуЗавершение(ВыбраннаяПапка, ВыделенныеСтрокиКонтактов) Экспорт
	
	Если ВыбраннаяПапка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДиалогиВПапку(ВыделенныеСтрокиКонтактов, ВыбраннаяПапка, Истина);
	КонтактыОбновить();
	
КонецПроцедуры // ПапкиДиалогов_ДобавитьВПапкуЗавершение()

&НаКлиенте
Процедура ПапкиДиалогов_УбратьИзПапки(Команда)
	
	ВыделенныеСтрокиКонтактов = ПолучитьМассивВыделенныхКонтактов();
	
	Если ВыделенныеСтрокиКонтактов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДиалогиИзПапки(ВыделенныеСтрокиКонтактов);
	КонтактыОбновить();
	
КонецПроцедуры // ПапкиДиалогов_УбратьИзПапки()

&НаКлиенте
Процедура ПапкиДиалогов_ОтобратьДиалоги(Команда)
	
	Если Контакты.ПолучитьЭлементы().Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет контактов для отбора.'"));
		Возврат;
	КонецЕсли;
	
	ОписаениеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПапкиДиалогов_ОтобратьДиалогиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.CRM_РаспределенияДиалоговПоПапкам.Форма.ФормаРаспределенияДиалоговПоПапкам", ,
		ЭтотОбъект, КлючУникальности, , , ОписаениеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПапкиДиалогов_ОтобратьДиалоги()

&НаСервере
Процедура ПапкиДиалогов_ОтобратьДиалогиЗавершение(Результаты, ДополнительныеПараметры) Экспорт
	
	Если Результаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыОтбораКонтактов = Справочники.CRM_ПапкиДиалогов.ПолучитьДиалогиВПапку(
		Результаты.Отбор, РеквизитФормыВЗначение("Контакты", Тип("ДеревоЗначений")));
	
	Если РезультатыОтбораКонтактов.Количество() > 0 Тогда
		ДобавитьДиалогиВПапку(
			РезультатыОтбораКонтактов,
			Результаты.ПапкаДиалога,
			Результаты.Замещать);
		
		КонтактыОбновить();
	КонецЕсли;
	
КонецПроцедуры // ПапкиДиалогов_ОтобратьДиалогиЗавершение()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДоступностьГруппыСообщение()
	
	Если НЕ РежимВыбораСообщений Тогда	// В данном режиме отправка сообщения всегда НЕдоступна.
										// В случае включения данного режима, данная группа становится недоступной в процедуре
										// ИзменитьРежимВыбораСообщений()
		Элементы.ГруппаСообщение.Доступность = ТекДиалогАтивен И НЕ ТекДиалогПереданДляОзнакомления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьЭлементаПанели()
	
	Для Каждого ЭлементПанели Из Элементы.ГруппаДействияСОткрытымДиалогом.ПодчиненныеЭлементы Цикл
		Если ЭлементПанели = Элементы.СписокСообщенийПеренаправитьОбращение Тогда
			ЭлементПанели.Доступность = ТекДиалогАтивен И НЕ ПользовательЯвляетсяСоисполнителем;
		ИначеЕсли ЭлементПанели = Элементы.СписокСообщенийСоздатьЛичнуюЗадачу Тогда
			ЭлементПанели.Доступность = ТекДиалогАтивен;
		Иначе
			ЭлементПанели.Доступность = ТекДиалогАтивен И НЕ ТекДиалогПереданДляОзнакомления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЭлементаПанели()

&НаСервере
Процедура ЗагрузитьДополнительныеНастройки()
	
	НастройкиХранилище = CRM_Взаимодействия.ПолучитьНастройкуРаботаСМессенджерами();
	
	СпособВеденияДиалогов = ?(НастройкиХранилище.Свойство("СпособВеденияДиалогов"),
		НастройкиХранилище.СпособВеденияДиалогов, 0);
		
	ИзменитьСпособВеденияДиалогов();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСпособВеденияДиалогов()
	
	ВестиСтруктурированныеДиалоги = (СпособВеденияДиалогов = 0) И Не ГрупповойЧат;
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1) Или ГрупповойЧат;
	
	ИзменитьРежимВыбораСообщений(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура КонтактыОбновить(ПриОткрытии = Ложь)
	ОтборыУстановлены = Ложь;
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеСоисполнителейТЗ.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ДанныеСоисполнителейТЗ.Группа КАК Группа,
		|	ДанныеСоисполнителейТЗ.ID_Пользователя КАК ID_Пользователя,
		|	ИСТИНА КАК КакСоисполнитель,
		|	ДанныеСоисполнителейТЗ.Статус КАК Статус
		|ПОМЕСТИТЬ ДанныеСоисполнителей
		|ИЗ
		|	&ДанныеСоисполнителейТЗ КАК ДанныеСоисполнителейТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриоритетыКаналов.Канал КАК Канал,
		|	ПриоритетыКаналов.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ПриоритетыКаналов
		|ИЗ
		|	&ПриоритетыКаналов КАК ПриоритетыКаналов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
		|			ТОГДА """"
		|		ИНАЧЕ CRM_Диалоги.ID_Пользователя
		|	КОНЕЦ КАК ID_Пользователя,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА CRM_Диалоги.Контакт <> НЕОПРЕДЕЛЕНО
		|				ТОГДА CRM_Диалоги.Контакт
		|			КОГДА CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
		|				ТОГДА """"
		|			ИНАЧЕ CRM_Диалоги.КонтактПредставление
		|		КОНЕЦ) КАК Контакт,
		|	МАКСИМУМ(CRM_Диалоги.Контакт.Владелец) КАК ВладелецКонтакта,
		|	CRM_Диалоги.Группа КАК Группа,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА CRM_Диалоги.ID_Пользователя <> CRM_Диалоги.Группа
		|				ТОГДА CRM_Диалоги.ГруппаПредставление
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ГруппаПредставление,
		|	CRM_Диалоги.УчетнаяЗапись КАК УчетнаяЗапись,
		|	МАКСИМУМ(CRM_Диалоги.Ссылка) КАК Диалог,
		|	МАКСИМУМ(CRM_Диалоги.Завершен) КАК Завершен,
		|	МАКСИМУМ(CRM_Диалоги.УчетнаяЗапись.Включена) КАК Включена,
		|	МАКСИМУМ(CRM_УчетныеЗаписиМессенджеров.Наименование) КАК ПредставлениеУчетнойЗаписи,
		|	МАКСИМУМ(ЕСТЬNULL(ПриоритетыКаналов.Приоритет, 99)) КАК Приоритет,
		|	МАКСИМУМ(ВложенныйЗапрос.Новых) КАК Новых,
		|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.ЕстьНовые, 99)) КАК ЕстьНовые,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ КАК СтатусДиалога,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) ТОГДА &ТекущийПользователь ИНАЧЕ CRM_Диалоги.Ответственный КОНЕЦ КАК Ответственный,
		|	ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) КАК КакСоисполнитель,
		|	НЕ CRM_ЗаблокированныеОтправителиМессенджера.Идентификатор ЕСТЬ NULL КАК ПризнакБлокировкиОтправителя
		|ПОМЕСТИТЬ ВыбранныеДиалоги
		|ИЗ
		|	Справочник.CRM_Диалоги КАК CRM_Диалоги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров1
		|			ПО CRM_УчетныеЗаписиМессенджеров.Ссылка = CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись
		|				И (CRM_УчетныеЗаписиМессенджеров1.Пользователь = &АвторизованныйПользователь
		|					ИЛИ CRM_УчетныеЗаписиМессенджеров1.Пользователь В (&РолиАвторизованногоПользователя)
		|					ИЛИ CRM_УчетныеЗаписиМессенджеров.РазрешитьПросмотрСообщенийВсемПользователям)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыКаналов КАК ПриоритетыКаналов
		|			ПО CRM_УчетныеЗаписиМессенджеров.Ссылка = ПриоритетыКаналов.Канал
		|		ПО CRM_Диалоги.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			CRM_СообщениеМессенджера.Диалог КАК Диалог,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СообщениеМессенджера.Ссылка) КАК Новых,
		|			МАКСИМУМ(1) КАК ЕстьНовые
		|		ИЗ
		|			Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|		ГДЕ
		|			НЕ CRM_СообщениеМессенджера.Прочитано
		|			И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			CRM_СообщениеМессенджера.Диалог) КАК ВложенныйЗапрос
		|		ПО CRM_Диалоги.Ссылка = ВложенныйЗапрос.Диалог
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСоисполнителей КАК ДанныеСоисполнителей
		|		ПО CRM_Диалоги.УчетнаяЗапись = ДанныеСоисполнителей.УчетнаяЗапись
		|			И CRM_Диалоги.Группа = ДанныеСоисполнителей.Группа
		|			И CRM_Диалоги.ID_Пользователя = ДанныеСоисполнителей.ID_Пользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗаблокированныеОтправителиМессенджера КАК CRM_ЗаблокированныеОтправителиМессенджера
		|		ПО CRM_Диалоги.ID_Пользователя = CRM_ЗаблокированныеОтправителиМессенджера.Идентификатор
		|			ИЛИ CRM_Диалоги.Группа = CRM_ЗаблокированныеОтправителиМессенджера.Идентификатор
		|ГДЕ
		|	(CRM_Диалоги.УчетнаяЗапись.РазрешитьПросмотрСообщенийВсемПользователям
		|			ИЛИ CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
		|			ИЛИ НЕ CRM_УчетныеЗаписиМессенджеров1.УчетнаяЗапись ЕСТЬ NULL)
		|	И НЕ CRM_Диалоги.УчетнаяЗапись.ТипМессенджера В (&СписокФильтровПоТипуМессенджера)
		|	И НЕ CRM_УчетныеЗаписиМессенджеров.ТипМессенджера В (&СписокФильтровПоТипуМессенджера)
		|	И НЕ CRM_Диалоги.ПометкаУдаления
		|	И НЕ CRM_Диалоги.Служебный
		|	И ВЫБОР
		|			КОГДА &ТекущийПользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|					ИЛИ (ВЫБОР КОГДА &ОтображатьТолькоСвои ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) КОНЕЦ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ CRM_Диалоги.Ответственный = &ТекущийПользователь
		|					ИЛИ CRM_Диалоги.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтображатьТолькоГрупповойЧат
		|               И CRM_УчетныеЗаписиМессенджеров.ТипМессенджера В (&ГрупповыеМессенджеры)
		|				И CRM_Диалоги.Группа <> """" 
		|				И CRM_Диалоги.ID_Пользователя <> """" 
		|				И CRM_Диалоги.Группа <> CRM_Диалоги.ID_Пользователя
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	//ОтборПоКонтактам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА CRM_Диалоги.УчетнаяЗапись = ЗНАЧЕНИЕ(Справочник.CRM_УчетныеЗаписиМессенджеров.СистемаВзаимодействия)
		|			ТОГДА """"
		|		ИНАЧЕ CRM_Диалоги.ID_Пользователя
		|	КОНЕЦ,
		|	CRM_Диалоги.Группа,
		|	CRM_Диалоги.УчетнаяЗапись,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ,
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ) ТОГДА &ТекущийПользователь ИНАЧЕ CRM_Диалоги.Ответственный КОНЕЦ,
		|	ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель, ЛОЖЬ),
		|	НЕ CRM_ЗаблокированныеОтправителиМессенджера.Идентификатор ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеДиалоги.ID_Пользователя КАК ID_Пользователя,
		|	ВыбранныеДиалоги.Контакт КАК Контакт,
		|	ВыбранныеДиалоги.ВладелецКонтакта КАК ВладелецКонтакта,
		|	ВыбранныеДиалоги.Группа КАК Группа,
		|	ВыбранныеДиалоги.ГруппаПредставление КАК ГруппаПредставление,
		|	ВыбранныеДиалоги.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ВыбранныеДиалоги.Включена КАК Включена,
		|	ВыбранныеДиалоги.ПредставлениеУчетнойЗаписи КАК ПредставлениеУчетнойЗаписи,
		|	ВЫБОР
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""ВКонтакте""
		|			ТОГДА 1
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""InstagramDirect""
		|			ТОГДА 2
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""Telegram""
		|				ИЛИ ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""TelegramBot""
		|			ТОГДА 3
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""WhatsApp""
		|			ТОГДА 4
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""Facebook""
		|			ТОГДА 5
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""Viber""
		|			ТОГДА 6
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""Instagram""
		|			ТОГДА 7
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""ВКонтактеКомментарии""
		|			ТОГДА 8
		|		КОГДА ВыбранныеДиалоги.УчетнаяЗапись.ТипМессенджера = ""СистемаВзаимодействия""
		|			ТОГДА 9
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексЛоготипаМессенджера,
		|	CRM_СообщенияДиалоговПоследние.Дата КАК ДатаПоследнего,
		|	CRM_СообщенияДиалоговПоследние.ТекстСокр КАК ТекстПоследнего,
		|	ВыбранныеДиалоги.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ВыбранныеДиалоги.Новых, 0) КАК Новых,
		|	ВыбранныеДиалоги.Диалог КАК Диалог,
		|	ВыбранныеДиалоги.ЕстьНовые КАК ЕстьНовые,
		|	ВыбранныеДиалоги.Завершен КАК Завершен,
		|	ВыбранныеДиалоги.СтатусДиалога КАК СтатусДиалога,
		|	ВыбранныеДиалоги.Ответственный КАК Ответственный,
		|	ВыбранныеДиалоги.КакСоисполнитель КАК КакСоисполнитель,
		|	ВыбранныеДиалоги.Диалог.КонтактПредставление КАК КонтактПредставление,
		|	ВыбранныеДиалоги.Контакт.Партнер КАК СвязьПотенциальныйКлиентПартнер,
		|	ВыбранныеДиалоги.Контакт.КонтактноеЛицо КАК СвязьПотенциальныйКлиентКонтактноеЛицо,
		|	ВыбранныеДиалоги.ПризнакБлокировкиОтправителя КАК ПризнакБлокировкиОтправителя,
		|	ЕСТЬNULL(CRM_РаспределенияДиалоговПоПапкам.ПапкаДиалога, НЕОПРЕДЕЛЕНО) КАК ПапкаДиалога
		|ИЗ
		|	ВыбранныеДиалоги КАК ВыбранныеДиалоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_СообщенияДиалоговПоследние КАК CRM_СообщенияДиалоговПоследние
		|		ПО ВыбранныеДиалоги.Диалог = CRM_СообщенияДиалоговПоследние.Диалог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_РаспределенияДиалоговПоПапкам КАК CRM_РаспределенияДиалоговПоПапкам
		|		ПО ВыбранныеДиалоги.УчетнаяЗапись = CRM_РаспределенияДиалоговПоПапкам.УчетнаяЗапись
		|			И ВыбранныеДиалоги.ID_Пользователя = CRM_РаспределенияДиалоговПоПапкам.ИдентификаторПользователя
		|			И ВыбранныеДиалоги.Группа = CRM_РаспределенияДиалоговПоПапкам.Группа
		|			И ПапкаДиалога.Пользователь = &АвторизованныйПользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкаДиалога УБЫВ,
		|	Завершен,
		|	ЕстьНовые,
		|	Приоритет,
		|	ДатаПоследнего УБЫВ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on

	Запрос.УстановитьПараметр("ДанныеСоисполнителейТЗ",
		CRM_РаботаСМессенджерамиСервер.ДанныеКонтактовКакСоисполнитель(ТекущийПользователь));
	Запрос.УстановитьПараметр("ПриоритетыКаналов",					РеквизитФормыВЗначение("ПриоритетыКаналов"));
	Запрос.УстановитьПараметр("ТекущийПользователь",				ТекущийПользователь);
	Запрос.УстановитьПараметр("АвторизованныйПользователь",			АвторизованныйПользователь);
	Запрос.УстановитьПараметр("РолиАвторизованногоПользователя",	РолиАвторизованногоПользователя);
	Запрос.УстановитьПараметр("РолиТекущегоПользователя",			РолиТекущегоПользователя);
	Запрос.УстановитьПараметр("СписокФильтровПоТипуМессенджера",	СписокФильтровПоТипуМессенджера);
	Запрос.УстановитьПараметр("ОтображатьТолькоСвои",				ОтображатьТолькоСвои);
	Запрос.УстановитьПараметр("ОтображатьТолькоГрупповойЧат",		Истина);
	Запрос.УстановитьПараметр("ГрупповыеМессенджеры", CRM_РаботаСМессенджерамиСерверПовтИсп.ГрупповыеМессенджеры());
	
	МассивУсловий = Новый Массив();
	
	Если ОтборКонтакты.Количество() > 0 Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.Контакт В(&ОтборКонтакты)");
		Запрос.УстановитьПараметр("ОтборКонтакты", ОтборКонтакты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКанал) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись");
		Запрос.УстановитьПараметр("УчетнаяЗапись", ОтборКанал);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборГруппа) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.Группа = &ОтборГруппа");
		Запрос.УстановитьПараметр("ОтборГруппа", ОтборГруппа);
    ИначеЕсли ЗначениеЗаполнено(ОтборID_Пользователя) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.ID_Пользователя = &ОтборID_Пользователя");
		Запрос.УстановитьПараметр("ОтборID_Пользователя", ОтборID_Пользователя);
	КонецЕсли;
	
	Если Не ОтображатьЗакрытые Тогда
		МассивУсловий.Добавить(" И НЕ CRM_Диалоги.Завершен");
	КонецЕсли;
	
	Если Не ОтображатьЗаблокированные Тогда
		МассивУсловий.Добавить(" И CRM_ЗаблокированныеОтправителиМессенджера.Идентификатор ЕСТЬ NULL");
	КонецЕсли;
	
	Если ОтборСтатусДиалогов = 0 Тогда // не принятые
		МассивУсловий.Добавить(" И НЕ CRM_Диалоги.Завершен");
		МассивУсловий.Добавить(" И НЕ ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель,
			| ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу)");
	ИначеЕсли ОтборСтатусДиалогов = 1 Тогда // принятые
		МассивУсловий.Добавить(" И ВЫБОР КОГДА ЕСТЬNULL(ДанныеСоисполнителей.КакСоисполнитель,
			| ЛОЖЬ) И CRM_Диалоги.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу) ТОГДА ДанныеСоисполнителей.Статус ИНАЧЕ CRM_Диалоги.Статус КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу)");
	ИначеЕсли ОтборСтатусДиалогов = 2 Тогда // все
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборПериод) Тогда
		МассивУсловий.Добавить(" И CRM_Диалоги.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания");
		Запрос.УстановитьПараметр("ДатаНачала", ОтборПериод.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ОтборПериод.ДатаОкончания);
	КонецЕсли;
	
	Условие = СтрСоединить(МассивУсловий);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоКонтактам", Условие);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	КонтактыДеревоЗначений = РеквизитФормыВЗначение("Контакты", Тип("ДеревоЗначений"));
	КонтактыДеревоЗначений.Строки.Очистить();
	
	СоответствиеПапокДиалогу = Новый Соответствие;
	
	Для Каждого ТекущийОбрабатываемыйКонтакт Из РезультатЗапроса Цикл
		ИспользуемаяПапкаДиалога = Неопределено;
		
		Если ЗначениеЗаполнено(ТекущийОбрабатываемыйКонтакт.ПапкаДиалога) Тогда
			ИспользуемаяПапкаДиалога = СоответствиеПапокДиалогу.Получить(
				ТекущийОбрабатываемыйКонтакт.ПапкаДиалога);
			
			Если ИспользуемаяПапкаДиалога = Неопределено Тогда
				ИспользуемаяПапкаДиалога = КонтактыДеревоЗначений.Строки.Добавить();
				
				// Переиспользование одного из реквизитов (ГруппаПредставление) для хранения
				// представления элемента папки, чтобы не вводить новый.
				ИспользуемаяПапкаДиалога.ГруппаПредставление = Строка(ТекущийОбрабатываемыйКонтакт.ПапкаДиалога);
				ИспользуемаяПапкаДиалога.ПапкаДиалога = ТекущийОбрабатываемыйКонтакт.ПапкаДиалога;
				ИспользуемаяПапкаДиалога.ЭтоПапкаДиалогов = Истина;
				ИспользуемаяПапкаДиалога.ИндексЛоготипаМессенджера = 10;
				
				СоответствиеПапокДиалогу.Вставить(
					ТекущийОбрабатываемыйКонтакт.ПапкаДиалога,
					ИспользуемаяПапкаДиалога);
			КонецЕсли;
			
			Если ТекущийОбрабатываемыйКонтакт.Новых > 0 Тогда
				ИспользуемаяПапкаДиалога.Новых = ИспользуемаяПапкаДиалога.Новых + 1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаКонтакта = ?(
			ИспользуемаяПапкаДиалога = Неопределено,
			КонтактыДеревоЗначений.Строки.Добавить(),
			ИспользуемаяПапкаДиалога.Строки.Добавить());
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтакта, ТекущийОбрабатываемыйКонтакт);
		
		// На текущий момент АРМ Диалоги не участвуют в RLS, а клиенты и контактные лица участвуют.
		// Чтобы не получать ошибки по недоступности данных из БД проверяем доступность к
		// записям БД через урпавление доступом.
		Если ТипЗнч(ТекущийОбрабатываемыйКонтакт.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Если ЗначениеЗаполнено(ТекущийОбрабатываемыйКонтакт.СвязьПотенциальныйКлиентПартнер) Тогда
				ЕстьДоступККлиенту = УправлениеДоступом.ЧтениеРазрешено(
					ТекущийОбрабатываемыйКонтакт.СвязьПотенциальныйКлиентПартнер, АвторизованныйПользователь);
			Иначе
				ЕстьДоступККлиенту = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийОбрабатываемыйКонтакт.СвязьПотенциальныйКлиентКонтактноеЛицо)
					И ЕстьДоступККлиенту Тогда
				ЕстьДоступККлиенту = УправлениеДоступом.ЧтениеРазрешено(
					ТекущийОбрабатываемыйКонтакт.СвязьПотенциальныйКлиентКонтактноеЛицо, АвторизованныйПользователь);
			КонецЕсли;
		Иначе
			Если ТипЗнч(ТекущийОбрабатываемыйКонтакт.Контакт) = Тип("Строка") Тогда
				ЕстьДоступККлиенту = Истина;
			Иначе
				ЕстьДоступККлиенту = УправлениеДоступом.ЧтениеРазрешено(
					ТекущийОбрабатываемыйКонтакт.Контакт, АвторизованныйПользователь);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаКонтакта.ФлагДоступностиДанных = ЕстьДоступККлиенту;
		
		Если Не ЕстьДоступККлиенту Тогда
			НоваяСтрокаКонтакта.Контакт = ТекущийОбрабатываемыйКонтакт.КонтактПредставление
				+ НСтр("en = ' (No client access)'; ru = ' (Нет доступа к клиенту)'");
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(КонтактыДеревоЗначений, "Контакты");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ID_Пользователя", ТекущийID_Пользователя);
	ПараметрыОтбора.Вставить("УчетнаяЗапись", ТекущаяУчетнаяЗапись);
	ПараметрыОтбора.Вставить("Группа", ТекущаяГруппа);
	
	Строки = КонтактыДеревоЗначений.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Если Строки.Количество() > 0 Тогда
		ИдентификаторСтроки = ПолучитьИдентификаторСтрокиДереваФормы(КонтактыДеревоЗначений, Строки[0]);
		Если Элементы.Контакты.ТекущаяСтрока <> ИдентификаторСтроки Тогда
			Элементы.Контакты.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ОтборыУстановлены = ?(ТекущийПользователь <> Пользователи.ТекущийПользователь(), Истина, ОтборыУстановлены);
	ОтборыУстановлены = ?(ЗначениеЗаполнено(ОтборКанал), Истина, ОтборыУстановлены);
	//ОтборыУстановлены = ?(ЗначениеЗаполнено(ОтборПодразделение), Истина, ОтборыУстановлены);
	ОтборыУстановлены = ?(ОтображатьЗакрытые, Истина, ОтборыУстановлены);
	ОтборыУстановлены = ?(ОтображатьТолькоСвои, Истина, ОтборыУстановлены);
	ОтборыУстановлены = ?(ЗначениеЗаполнено(ОтборПериод), Истина, ОтборыУстановлены);
	
	Элементы.НастроитьФильтры.Картинка = ?(
		ОтборыУстановлены,
		БиблиотекаКартинок.CRM_ФильтрАктивный,
		БиблиотекаКартинок.CRM_ФильтрНеАктивный);
	
	// Обновление идентификаторов строк группировок.
	Для Каждого ТекущийСписокРаскрытия Из СписокРаскрытыхПапок Цикл
		СтрокаПапки = СоответствиеПапокДиалогу.Получить(ТекущийСписокРаскрытия.Значение);
		Если СтрокаПапки <> Неопределено Тогда
			ТекущийСписокРаскрытия.Представление = ПолучитьИдентификаторСтрокиДереваФормы(
				КонтактыДеревоЗначений, СтрокаПапки);
		КонецЕсли;
	КонецЦикла;
	
	ФлагНеобходимостиРаскрытияПапок = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЛоготипыМессенджеров()
	СписокМессенджеров = CRM_РаботаСМессенджерамиСервер.ПолучитьСписокМессенджеров(24);
	ЛоготипыМессенджеровСтр = Новый Структура;
	Для каждого Мессенджер Из СписокМессенджеров Цикл
		СтрокаКартинки = CRM_РаботаСHTML.ПолучитьСсылкуНаКартинкуВоВременномХранилище(
			Мессенджер.Картинка, УникальныйИдентификатор);
		НовЛого = ЛоготипыМессенджеров.Добавить();
		НовЛого.ТипМессенджера = Мессенджер.Значение;
		НовЛого.Логотип = СтрокаКартинки;
		
		ЛоготипыМессенджеровСтр.Вставить(Мессенджер.Значение, СтрокаКартинки); 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолученияСообщенийМессенджера()
	
	НовоеСообщение = ПредопределенноеЗначение("Перечисление.CRM_СобытияМессенджеров.ПолученоНовоеСообщение");
	ПрочитаныСообщение = ПредопределенноеЗначение("Перечисление.CRM_СобытияМессенджеров.ПрочитаныСообщения");
	ОбновитьКонтакты = Ложь;
	СобытияМессенджера = CRM_РаботаСМессенджерамиСервер.ПолучитьСобытияМессенджера(АвторизованныйПользователь);
	ИдентификаторыНовыхОбсуждений = Новый Массив;
	ТекущаяСтрокаКонтактов = Элементы.Контакты.ТекущаяСтрока;
	Для каждого Событие Из СобытияМессенджера Цикл
		Если Событие.Событие = НовоеСообщение Тогда
			Нави = ПолучитьНавигационнуюСсылку(Событие.Значение);
			Если ТекущаяСтрокаКонтактов <> Неопределено
					И Событие.УчетнаяЗапись = ТекущаяУчетнаяЗапись
					И (Не ЗначениеЗаполнено(ТекущийID_Пользователя) Или Событие.ID_Пользователя = ТекущийID_Пользователя)
					И Событие.Группа = ТекущаяГруппа  
					И ТекущийСтатус <> ПредопределенноеЗначение("Перечисление.CRM_СтатусыДиалогов.Закрыт") Тогда
				Количество = 0; 
				НачинаяССообщения = ПоследнееСообщение;
				МассивСообщений = ПолучитьМассивСообщенийНаСервере(Истина, Количество, , НачинаяССообщения);
				ОкноБраузера.AddMessages(МассивСообщений);
				Если ВводДоступен() Тогда
					CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(
						ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, АвторизованныйПользователь);
				КонецЕсли;
				
				СтрокаКонтактов = Контакты.НайтиПоИдентификатору(ТекущаяСтрокаКонтактов);
				Если СтрокаКонтактов <> Неопределено И Не ПоследнееСообщение.Пустая() Тогда
					ТекстПоследнегоСообщения = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(
						ПоследнееСообщение, "ТекстСообщения");
					
					СтрокаКонтактов.ТекстПоследнего = ?(
						ЗначениеЗаполнено(ТекстПоследнегоСообщения),
						ТекстПоследнегоСообщения,
						НСтр("ru = 'Файл...'; en = 'File...'"));
				КонецЕсли;
			Иначе
				ОбновитьКонтакты = Истина;
			КонецЕсли;
			Если ОбсужденияДоступны И УчетнаяЗаписьСистемаВзаимодействия = Событие.УчетнаяЗапись Тогда
				ИдентификаторыНовыхОбсуждений.Добавить(Новый ИдентификаторОбсужденияСистемыВзаимодействия(Событие.Группа));
			КонецЕсли;
		ИначеЕсли Событие.Событие = ПрочитаныСообщение Тогда	
			Если Событие.УчетнаяЗапись = ТекущаяУчетнаяЗапись И Событие.ID_Пользователя = ТекущийID_Пользователя Тогда
				//Элементы.СписокСообщений.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ОбновитьКонтакты Тогда
		ПроверкаНепрочитанныхСообщенийМессенджера();
	КонецЕсли;
	Если ИдентификаторыНовыхОбсуждений.Количество() > 0 Тогда
		CRM_РаботаСМессенджерамиКлиент.ПодключитьОбработчикНовыхСообщений(ИдентификаторыНовыхОбсуждений);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаПолученияСообщенийМессенджераНаСервере(УчетнаяЗапись, Группа, ID_Пользователя, ДатаПроверки)
	
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-off
	// В дополнительном условии оператор ИЛИ можно использовать без ограничений.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И (CRM_СообщениеМессенджера.Дата >= &Дата
	                      |			ИЛИ НЕ CRM_СообщениеМессенджера.Прочитано)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СообщениеМессенджера.Дата УБЫВ");
	// BSLLS:LogicalOrInTheWhereSectionOfQuery-on
						  
	Если ID_Пользователя = "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя", "Истина");
	КонецЕсли;
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	ДатаПроверки = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаНепрочитанныхСообщенийМессенджера(ПриОткрытии = Ложь)
	
	ПараметрыОтбораСообщений = Новый Структура("ОтборКонтакты, ОтборКанал, ОтображатьЗакрытые,
		| ОтображатьТолькоСвои, ОтборПериод",
	ОтборКонтакты, ОтборКанал, ОтображатьЗакрытые, ОтображатьТолькоСвои, ОтборПериод);
	НовыхСообщений = CRM_РаботаСМессенджерамиСервер.ПроверкаНепрочитанныхСообщений(ТекущийПользователь,
		 АвторизованныйПользователь,
		 ПараметрыОтбораСообщений);
	
	Если НовыхСообщений.Все > 0 Тогда
		Если НЕ ПриОткрытии Тогда
			КонтактыОбновить();
		КонецЕсли;
		Если Заголовок <> НСтр("ru='Диалоги: ';en='Dialogues: '") + " " + Строка(НовыхСообщений.Все) Тогда 
			Заголовок = НСтр("ru='Диалоги: ';en='Dialogues: '") + " " + Строка(НовыхСообщений.Все);
		КонецЕсли;
	Иначе
		Если Заголовок <> НСтр("ru='Диалоги';en='Dialogs'") Тогда 
			Заголовок = НСтр("ru='Диалоги';en='Dialogs'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДиалогиФильтр_Новые.Заголовок = НСтр("ru='Новые';en='New'") + ?(НовыхСообщений.Новых > 0,
		 СтрШаблон(": %1", НовыхСообщений.Новых),
		 "");
	Элементы.ДиалогиФильтр_ВРаботе.Заголовок = НСтр("ru='В работе';en='At work'") 
		+ ?(НовыхСообщений.ВРаботе > 0, СтрШаблон(": %1", НовыхСообщений.ВРаботе),
		 "");
 	Элементы.ДиалогиФильтр_Все.Заголовок = НСтр("ru='Все';en='All'") + ?(НовыхСообщений.Все > 0,
 		 СтрШаблон(": %1", НовыхСообщений.Все),
 		 "");
	 
	Если ВыводитьОповещенияНаРабочийСтол Тогда
		 CRM_РаботаСМессенджерамиКлиент.ВывестиОповещениеОНепрочитанныхНаРабочийСтол(НовыхСообщений);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СвязатьСКонтактомНаСервере(ВыбранныйКонтакт, УчетнаяЗапись, ID_Пользователя)
	ВыбранныйКонтактОбъект = ВыбранныйКонтакт.ПолучитьОбъект();
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ВыбранныйКонтактОбъект,
		 УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		CRM_РаботаСМессенджерамиСерверПовтИсп.ПредставлениеКонтактнойИнформацииПользователя(УчетнаяЗапись, ID_Пользователя), CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(УчетнаяЗапись, ВыбранныйКонтакт)),
		CRM_РаботаСМессенджерамиСерверПовтИсп.ПолучитьВидКИМессенджера(УчетнаяЗапись, ВыбранныйКонтакт), CRM_РаботаСМессенджерамиСерверПовтИсп.ТипКИМессенджера(УчетнаяЗапись));
				
	ВыбранныйКонтактОбъект.Записать();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ втСообщения
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.Контакт = НЕОПРЕДЕЛЕНО
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_Диалоги.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ втДиалоги
	                      |ИЗ
	                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
	                      |ГДЕ
	                      |	CRM_Диалоги.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_Диалоги.Контакт = НЕОПРЕДЕЛЕНО
	                      |	И CRM_Диалоги.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	втСообщения.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	втСообщения КАК втСообщения
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	втДиалоги.Ссылка
	                      |ИЗ
	                      |	втДиалоги КАК втДиалоги");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("ТипМессенджера", УчетнаяЗапись.ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Контакт = ВыбранныйКонтакт;
		СообщениеОбъект.КонтактПредставление = ВыбранныйКонтакт.Наименование;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтактомПродолжение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСКонтактомЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы, ЭтотОбъект, , , ,
			 ОписаниеОповещения,
			 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтактомЗавершение(ВыбранныйКонтакт, ДопПараметры) Экспорт
	Если ВыбранныйКонтакт <> Неопределено Тогда
		СвязатьСКонтактомНаСервере(ВыбранныйКонтакт, ТекущаяУчетнаяЗапись, ТекущийID_Пользователя);
		КонтактыОбновить();
		Элементы.Контакты.ТекущаяСтрока = ВыбранныйКонтакт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(Диалог, Интерес)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_Интерес.Ссылка КАК Ссылка,
	               |	CRM_Интерес.СостояниеИнтереса КАК СостояниеИнтереса,
	               |	ЛОЖЬ КАК ВведенНаОсновании,
	               |	ИСТИНА КАК ОсновнойИнтерес,
	               |	CRM_Интерес.Ответственный КАК Ответственный
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Ссылка = &СсылкаИнтерес
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Интерес.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	
	Если РежимВыбораСообщений Тогда
		СоздатьДиалогНаОснованииВыбранныхСообщений(ТаблицаСвязей);
	Иначе
		ДиалогОбъект = Диалог.ПолучитьОбъект();
		
		Если ТаблицаСвязей.Количество() > 0 Тогда
			ДиалогОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
		КонецЕсли;
		
		Если ПустаяСтрока(Диалог.Наименование) Тогда
			// переименовать диалог
			ДиалогОбъект.Наименование = Интерес.Тема;
		КонецЕсли;
		
		ДиалогОбъект.Записать();
	КонецЕсли;
	
	Если ТекущийДиалог.Статус = Перечисления.CRM_СтатусыДиалогов.Новый Тогда
		Диалог_ПринятьНаСервере();
	КонецЕсли;
	
	КонтактыОбновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокАктивныхИнтересов(Диалог)
	
	СписокИнтересов = Новый СписокЗначений;
	СписокИнтересов.ЗагрузитьЗначения(CRM_ОбщегоНазначенияСервер.ПолучитьМассивАктивныхИнтересовКлиента(Диалог.Контакт));
	
	Возврат СписокИнтересов;
	
КонецФункции

&НаКлиенте
Процедура СвязатьДиалогСИнтересомПродолжение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		CRM_ДобавитьИнтересНаСервере(ТекущийДиалог, ВыбранныйЭлемент.Значение);
		// Если ПустаяСтрока(ТекущийДиалог.Наименование) Тогда
		//	CRM_РаботаСМессенджерамиСервер.ПереименоватьДиалог(ТекущийДиалог, ВыбранныйЭлемент.Значение.Содержание);
		//КонецЕсли;
		
		Если РежимВыбораСообщений Тогда
			ОтключитьРежимВыбораСообщений(Неопределено);
		КонецЕсли;
		
		ОбновитьДиалогиИСообщения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаКлиенте
Процедура ПерейтиКУчетнымЗаписям(Команда)
	
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнееСообщение(УчетнаяЗапись, Группа, Пользователь, Входящее = Истина)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = &ВидСообщения
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СообщениеМессенджера.Дата УБЫВ");
	Запрос.УстановитьПараметр("ID_Пользователя", Пользователь);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидСообщения", ?(Входящее, Перечисления.CRM_ВидыСообщенияМессенджера.Входящее,
		Перечисления.CRM_ВидыСообщенияМессенджера.Исходящее));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СформироватьСсылкиВложений()
	
	ГруппаСсылокВложений = Элементы.ГруппаСсылкиВложений;
	
	МаксимальнаяДлинаИмениВложения = 35;
	МаксимальнаяДлинаСтроки = 105;
	
	МассивЭкранов = ПолучитьИнформациюЭкрановКлиента();
	// Защита от Толстого клиента - в нем ПолучитьИнформациюЭкрановКлиента() возвращает Неопределено и падает ошибка
	Если МассивЭкранов <> Неопределено Тогда
		ШиринаЭкрана = ПолучитьИнформациюЭкрановКлиента()[0].Ширина;
	Иначе
		ШиринаЭкрана = 1440;
	КонецЕсли;
	МаксимальнаяДлинаСтроки = МаксимальнаяДлинаСтроки * (ШиринаЭкрана / 1920);
	
	// Удаление предыдущих элементов
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из ГруппаСсылокВложений.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если СтрЧислоВхождений(КомандаФормы.Имя, "Команда_Сохранить_СсылкаВложения_") > 0
			ИЛИ СтрЧислоВхождений(КомандаФормы.Имя, "Команда_Удалить_СсылкаВложения_") > 0 Тогда
			МассивУдаляемыхКоманд.Добавить(КомандаФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КомандаФормы Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(КомандаФормы);
	КонецЦикла;
		
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Для Каждого ЭлементТаблицы Из ПрисоединенныеФайлыОтправляемые Цикл
		ПредставлениеСсылки = ЭлементТаблицы.Представление;
		
		// Расчет длины текущей строки
		Если СтрДлина(ПредставлениеСсылки) > МаксимальнаяДлинаИмениВложения Тогда
			ПредставлениеСсылки = Лев(ПредставлениеСсылки, МаксимальнаяДлинаИмениВложения) + "...";
		КонецЕсли;
		ШиринаЭлемента = СтрДлина(ПредставлениеСсылки);
		Если ШиринаЭлемента > 8 Тогда 
			ШиринаЭлемента = ШиринаЭлемента * 0.8;
		КонецЕсли;
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ШиринаЭлемента;
		
		// Создание следующей горизонтальной группы
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеСсылки) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаСтрокаВложений = Элементы.Добавить("СтрокаВложений" + НомерСтрокиЭлементов,
				 Тип("ГруппаФормы"), ГруппаСсылокВложений);
			ГруппаСтрокаВложений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрокаВложений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСтрокаВложений.ОтображатьЗаголовок = Ложь;
			ГруппаСтрокаВложений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрокаВложений.РастягиватьПоВертикали = Ложь;
			ГруппаСтрокаВложений.Высота = 1;
			ГруппаСтрокаВложений.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			ГруппаСтрокаВложений.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
		ИдентификаторСсылкиВложения = ЭлементТаблицы.ПолучитьИдентификатор();
		
		// Вывод иконки типа вложения
		ДекорацияИконкаВложения = Элементы.Добавить("ИконкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияИконкаВложения.Вид = ВидДекорацииФормы.Картинка;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ЭлементТаблицы.Представление);
		ИндексКартинки	= РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(РасширениеФайла);
		//ДекорацияИконкаВложения.Картинка = БиблиотекаКартинок["CRM_ИконкаТипаФайла_"+ИндексКартинки];
		ДекорацияИконкаВложения.Картинка = СписокИконокФайлов[ИндексКартинки / 2].Значение;
		
		// Создание элемента-вложения
		ДекорацияСсылкаВложения = Элементы.Добавить("СсылкаВложения_" + ИдентификаторСсылкиВложения,
			 Тип("ДекорацияФормы"), ГруппаСтрокаВложений);
		ДекорацияСсылкаВложения.Заголовок = ПредставлениеСсылки;
		ДекорацияСсылкаВложения.Гиперссылка = Истина;
		ДекорацияСсылкаВложения.Подсказка = ЭлементТаблицы.Представление;
		ДекорацияСсылкаВложения.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		
		ДекорацияСсылкаВложения.УстановитьДействие("Нажатие", "ДекорацияСсылкаВложенияНажатие");
		
		// Формирование контекстного меню декорации:
		
		// Удалить:
		ИмяЭлементаКнопки = "Удалить_" + ДекорацияСсылкаВложения.Имя;
		КнопкаУдалитьВложение = Элементы.Найти(ИмяЭлементаКнопки);
		Если КнопкаУдалитьВложение = Неопределено Тогда
			
			КнопкаУдалитьВложение = Элементы.Добавить(ИмяЭлементаКнопки, Тип("КнопкаФормы"), ГруппаСтрокаВложений);
			КнопкаУдалитьВложение.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			
			ИмяКоманды = "Команда_" + ИмяЭлементаКнопки;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru='Удалить';en='Remove'");
			Команда.Подсказка = НСтр("ru='Удалить';en='Remove'");
			Команда.Картинка = БиблиотекаКартинок.CRM_УдалитьСерая;
			Команда.Действие = "Подключаемый_УдалитьВложениеКонтекстноеМеню";
			Команда.ИзменяетСохраняемыеДанные = Истина;
			Команда.Отображение = ОтображениеКнопки.Картинка;
			
			КнопкаУдалитьВложение.ИмяКоманды = Команда.Имя;
			
		КонецЕсли;
		КнопкаУдалитьВложение.Видимость = Истина;
		КнопкаУдалитьВложение.Доступность = Истина;
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	//Если ГруппаСсылокВложений.ПодчиненныеЭлементы.Количество() = 0 Тогда
	//	Элементы.УдалитьВсеВложения.Видимость = Ложь;
	// Иначе
	//	Элементы.УдалитьВсеВложения.Видимость = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаВложенияНажатие(Элемент)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Элемент.Имя, "СсылкаВложения_", "");
	ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	ТекущиеДанные = ПрисоединенныеФайлыОтправляемые.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложениеВыполнить(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(ТекущиеДанные = Неопределено)
	ФайловаяСистемаКлиент.ОткрытьФайл(?(ЗначениеЗаполнено(ТекущиеДанные.ИмяФайлаНаКомпьютере),
		 ТекущиеДанные.ИмяФайлаНаКомпьютере,
		 ТекущиеДанные.Значение)
		, , ТекущиеДанные.Представление);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьВложениеКонтекстноеМеню(Команда)
	
	ИдентификаторСсылкиВложения = СтрЗаменить(Команда.Имя, "Команда_Удалить_СсылкаВложения_", "");
	УдалитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеПоИдентификатору(ИдентификаторСсылкиВложения)
	
	// +CRM
	ТекущееВложение = ПрисоединенныеФайлыОтправляемые.НайтиПоИдентификатору(ИдентификаторСсылкиВложения);
	
	Если ТекущееВложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыОтправляемые.Удалить(ПрисоединенныеФайлыОтправляемые.Индекс(ТекущееВложение));
	
	Модифицированность = Истина;
	
	ОбновитьОтображениеДанных();
	СформироватьСсылкиВложений();
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПокраситьКнопкиОтбораДиалоговНаСервере()
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_Новые";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборСтатусДиалогов = 0, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_ВРаботе";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборСтатусДиалогов = 1, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_Все";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Пометка", ?(ОтборСтатусДиалогов = 2, Истина, Ложь));
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
		
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		ПокраситьКнопки(ЭтотОбъект, СтруктураВидимыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//УсловноеОформление.Элементы.Очистить();
	
	// непрочитанные диалоги
	ЭлементУсловногоОформления =  УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контакты.Новых");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Контакты");
	ПолеОформления.Использование = Истина;
	
	// цвет представления учетной записи
	ЭлементУсловногоОформления =  УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контакты.Включена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("КонтактыПредставлениеУчетнойЗаписи");
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьДиалогЗавершение(Результат, Ссылка) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтклоненияОбращений") Тогда
		Диалог_ЗакрытьНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		Диалог_ЗакрытьНаСервере(Ссылка, Неопределено, "", Результат);
	КонецЕсли;
	
	ОчиститьРеквизитыОбновитьКонтакты();
	ОбновитьДиалоги(ТекущийДиалог);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиОтборДиалоги()
	СтруктураСоздания = Новый Структура;
	
	СтруктураКоманднаяПанель = Новый Структура;
	СтруктураКоманднаяПанель.Вставить("Имя", "ГруппаОтборПоСостоянию");
	СтруктураКоманднаяПанель.Вставить("Родитель", "ГруппаОтборСостояние");
	
	СтруктураГруппаКнопок = Новый Структура;
	СтруктураГруппаКнопок.Вставить("Имя", "ЭлементГруппаДиалогиФильтрПоСостоянию");
	
	СтруктураСоздания.Вставить("СтруктураКоманднаяПанель", СтруктураКоманднаяПанель);
	СтруктураСоздания.Вставить("СтруктураГруппаКнопок", СтруктураГруппаКнопок);
	
	СтруктураВидимыеКнопки = Новый Структура;
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_Новые";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Новые';en='New'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ДиалогиФильтр_Новые");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_ВРаботе";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='В работе';en='At work'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ДиалогиФильтр_ВРаботе");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураКнопка = Новый Структура;
	ИмяОписания = "ДиалогиФильтр_Все";
	СтруктураКнопка.Вставить("ИмяКнопки", ИмяОписания);
	СтруктураКнопка.Вставить("Заголовок", НСтр("ru='Все';en='All'"));
	СтруктураКнопка.Вставить("ИмяКоманды", ИмяОписания);
	СтруктураКнопка.Вставить("Действие", "ДиалогиФильтр_Все");
	СтруктураКнопка.Вставить("Отображение", ОтображениеКнопки.Текст);
	СтруктураКнопка.Вставить("ОтображениеФигуры", ОтображениеФигурыКнопки.Всегда);
	
	СтруктураВидимыеКнопки.Вставить(ИмяОписания, СтруктураКнопка);
	
	СтруктураСоздания.Вставить("СтруктураВидимыеКнопки", СтруктураВидимыеКнопки);
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
		СформироватьКоманднуюПанельПоСтруктуре(ЭтотОбъект, СтруктураСоздания);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьКолонокКонтактов()
	Элементы.КонтактыОтветственный.Видимость = Не ЗначениеЗаполнено(ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПереходаНаСайт(ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("ID_Пользователя, Группа, УчетнаяЗапись");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
	ПутьКДиалогу = CRM_РаботаСМессенджерамиСервер.ПутьКДиалогуВБраузере(СтруктураСтроки);
	ЕстьПутьКДиалогу = ЗначениеЗаполнено(ПутьКДиалогу);
	Элементы.СписокСообщенийПерейтиКДиалогуНаСайте.Доступность = ЕстьПутьКДиалогу;
	Элементы.КонтактыКонтекстноеМенюПерейтиКДиалогуНаСайте.Видимость = ЕстьПутьКДиалогу;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимВыбораСообщений(РежимВключен)
	
	РежимВыбораСообщений = РежимВключен;
	
	Для Каждого ЭлементПанели Из Элементы.ГруппаДействияСОткрытымДиалогом.ПодчиненныеЭлементы Цикл
		
		Если ЭлементПанели = Элементы.СписокСообщенийПринятьОбращение
			ИЛИ ЭлементПанели = Элементы.СписокСообщенийСвязатьСообщениеСИнтересом
			ИЛИ ЭлементПанели = Элементы.СписокСообщенийПеренаправитьОбращение Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПанели.Доступность = НЕ РежимВыбораСообщений;
		
	КонецЦикла;
	
	Элементы.ГруппаСообщение.Доступность = НЕ РежимВыбораСообщений;
	ОбновитьДоступностьОблакаСоисполнителей();
	Элементы.Соисполнители_ДобавитьПервого.Доступность = НЕ РежимВыбораСообщений;
	
	// Дополнительная настройка доступности
	Если НЕ РежимВыбораСообщений Тогда
		Элементы.Диалог_Принять.Доступность = Не ПринятТекущимПользователем И ТекДиалогАтивен
												И НЕ ТекДиалогПереданДляОзнакомления;
		Элементы.ГруппаСообщение.Доступность = ТекДиалогАтивен И НЕ ТекДиалогПереданДляОзнакомления;
	КонецЕсли;
	
	Элементы.ОтключитьРежимВыбораСообщений.Видимость = РежимВыбораСообщений;
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеСообщенияОтсортированные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
		|	CRM_СообщениеМессенджера.Дата КАК Дата,
		|	CRM_СообщениеМессенджера.ВидСообщения КАК ВидСообщения,
		|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения
		|ИЗ
		|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|ГДЕ
		|	CRM_СообщениеМессенджера.Ссылка В(&МассивСообщений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивСообщений", МассивВыбранныхСообщений.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьВыбранныеСообщения()
	
	Возврат (ВыбранныеСообщенияОтсортированные().Количество() > 0);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПереданДляОзнакомления(ПараметрыДиалога, НовыйОтветственный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Диалоги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_Диалоги КАК CRM_Диалоги
		|ГДЕ
		|	CRM_Диалоги.ID_Пользователя = &ID_Пользователя
		|	И CRM_Диалоги.Группа = &Группа
		|	И CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
		|	И CRM_Диалоги.Статус = &Статус
		|	И CRM_Диалоги.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("ID_Пользователя", ПараметрыДиалога.ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", ПараметрыДиалога.Группа);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("Статус", Перечисления.CRM_СтатусыДиалогов.ПереданДляОзнакомления);
	Запрос.УстановитьПараметр("УчетнаяЗапись", ПараметрыДиалога.УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить()[0].Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьДиалогНаОснованииВыбранныхСообщений(ТаблицаСвязей = Неопределено, НовыйОтветственный = Неопределено)
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("CRM_РольОтветственного",	ТекущийДиалог.CRM_РольОтветственного);
	ПараметрыДиалога.Вставить("ID_Пользователя",		ТекущийДиалог.ID_Пользователя);
	ПараметрыДиалога.Вставить("Автор",					ТекущийДиалог.Автор);
	ПараметрыДиалога.Вставить("Группа",					ТекущийДиалог.Группа);
	ПараметрыДиалога.Вставить("ГруппаПредставление",	ТекущийДиалог.ГруппаПредставление);
	ПараметрыДиалога.Вставить("Основание",				ТекущийДиалог.ДокументОснование);
	ПараметрыДиалога.Вставить("Контакт",				ТекущийДиалог.Контакт);
	ПараметрыДиалога.Вставить("КонтактПредставление",	ТекущийДиалог.КонтактПредставление);
	ПараметрыДиалога.Вставить("УчетнаяЗапись",			ТекущийДиалог.УчетнаяЗапись);
	
	Если ТаблицаСвязей <> Неопределено И ТаблицаСвязей.Количество() > 0 Тогда
		ПараметрыДиалога.Вставить("CRM_ТаблицаИнтересов",	ТаблицаСвязей);
		ПараметрыДиалога.Вставить("Ответственный",			ТаблицаСвязей[0].Ответственный);
	Иначе
		ПараметрыДиалога.Вставить("Ответственный", ТекущийДиалог.Ответственный);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		СоздатьНовыйДиалог = Истина;
		Если ЗначениеЗаполнено(НовыйОтветственный) Тогда
			НайденныйДиалог = НайтиПереданДляОзнакомления(ПараметрыДиалога, НовыйОтветственный);
			Если НайденныйДиалог <> Неопределено Тогда
				НовыйДиалог = НайденныйДиалог;
				СоздатьНовыйДиалог = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаСообщений					= ВыбранныеСообщенияОтсортированные();
		ПоследнееСообщениеТекущегоДиалога	= CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(ТекущийДиалог);
		
		// Проверяем, что среди выбранных сообщений есть последнее сообщение текущего диалога.
		СредиВыбранныхЕстьПоследнееСообщение = Ложь;
		Если ПоследнееСообщениеТекущегоДиалога <> Неопределено Тогда
			НайденнаяСтрока = ТаблицаСообщений.Найти(ПоследнееСообщениеТекущегоДиалога.Сообщение, "Ссылка");
			СредиВыбранныхЕстьПоследнееСообщение = (НайденнаяСтрока <> Неопределено);
		КонецЕсли;
		
		Если СоздатьНовыйДиалог Тогда
			НовыйДиалог = Справочники.CRM_Диалоги.СоздатьДиалог(ПараметрыДиалога);
		КонецЕсли;
		
		// Прикрепляем выбранных сообщения из текущего диалога в новый диалог.
		Для Каждого СтрокаТаблицы Из ТаблицаСообщений Цикл
			СообщениеОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			СообщениеОбъект.Диалог = НовыйДиалог;
			СообщениеОбъект.Прочитано = Ложь;
			СообщениеОбъект.Записать();
		КонецЦикла;
		
		МассивОставшихсяСообщений = СообщенияДиалога(ТекущийДиалог);
		
		// Обновляем последнее собщение в регистре последний сообщений для текущего диалога.
		Если МассивОставшихсяСообщений.Количество() = 0 Тогда
			ОбновлениеПоследнегоСообщенияДиалога(ТекущийДиалог, Неопределено);
		Иначе
			ОбновлениеПоследнегоСообщенияДиалога(ТекущийДиалог, МассивОставшихсяСообщений[0]);
		КонецЕсли;
		
		// Если сообщений не осталось, диалог-донор закрывается
		Если МассивОставшихсяСообщений.Количество() = 0 Или СредиВыбранныхЕстьПоследнееСообщение Тогда
			Диалог_ЗакрытьНаСервере(ТекущийДиалог, Неопределено, "");
		КонецЕсли;
		
		// Обновляем последнее собщение в регистре последний сообщений для нового диалога.
		ОбновлениеПоследнегоСообщенияДиалога(НовыйДиалог, ТаблицаСообщений[ТаблицаСообщений.Количество() - 1], Истина);
		
		// Если среди выбранных нет последнего сообщения текущего диалога, тогда закрываем новый диалог.
		// Если среди выбранных есть последнее сообщение, то обновляем ТекущийДиалог на (созданный) последний диалог.
		Если Не СредиВыбранныхЕстьПоследнееСообщение Тогда
			Если ЗначениеЗаполнено(НовыйОтветственный) Тогда
				CRM_РаботаСМессенджерамиСервер.ПередатьДиалогДляОзнакомления(НовыйДиалог);
			Иначе
				Диалог_ЗакрытьНаСервере(НовыйДиалог, Неопределено, "");
			КонецЕсли;
		Иначе
			ТекущийДиалог = НовыйДиалог;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйДиалог;
	
КонецФункции

// Процедура используется для обновления последного сообщения в регистре последних сообщений диалогов.
//
// Параметры:
//  Диалог                - СправочникСсылка.CRM_Диалоги            - Диалог, по которому будет обновляться сообщение.
//  СообщениеИсточник     - ДокументСсылка.CRM_СообщениеМессенджера - Сообщение, которое будет являеться последним для
//                                                                    диалога.
//  ПроверятьПорядокДаты  - Булево                                  - Признак проверки порядка даты.
//
&НаСервереБезКонтекста
Процедура ОбновлениеПоследнегоСообщенияДиалога(Диалог, СообщениеИсточник, ПроверятьПорядокДаты = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПроверятьПорядокДаты Тогда
		ПоследнееСообщение = CRM_РаботаСМессенджерамиСервер.ПоследнееСообщениеДиалога(Диалог);
		
		Если ПоследнееСообщение <> Неопределено Тогда
			Если СообщениеИсточник.Дата < ПоследнееСообщение.Дата Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьСвязиПосл = РегистрыСведений.CRM_СообщенияДиалоговПоследние.СоздатьМенеджерЗаписи();
	ЗаписьСвязиПосл.Диалог = Диалог;
	
	Если СообщениеИсточник <> Неопределено Тогда
		ЗаписьСвязиПосл.Сообщение = СообщениеИсточник.Ссылка;
		ЗаписьСвязиПосл.ВидСообщения = СообщениеИсточник.ВидСообщения;
		ЗаписьСвязиПосл.Дата = СообщениеИсточник.Дата;
		
		ТекстСообщения = СокрЛП(СообщениеИсточник.ТекстСообщения);
		
		Если СтрНайти(ТекстСообщения, Символы.ПС) Тогда
			МассивСтр = СтрРазделить(ТекстСообщения, Символы.ПС, Ложь);
			Если МассивСтр.Количество() = 0 Тогда
				ТекстСообщения = "";
			Иначе
				ТекстСообщения = МассивСтр[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = Нстр("ru = 'Файл...'; en = 'File...'");
		КонецЕсли;
		
		ЗаписьСвязиПосл.ТекстСокр = ТекстСообщения;
		ЗаписьСвязиПосл.Записать();
	Иначе
		ЗаписьСвязиПосл.Удалить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СообщенияДиалога(Диалог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
		|	CRM_СообщениеМессенджера.Дата КАК Дата,
		|	CRM_СообщениеМессенджера.ВидСообщения КАК ВидСообщения,
		|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения
		|ИЗ
		|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
		|ГДЕ
		|	CRM_СообщениеМессенджера.Диалог = &Диалог
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_СообщениеМессенджера.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Диалог", Диалог);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОтключитьРежимВыбораСообщений(Команда)
	Если РежимВыбораСообщений Тогда
		ОкноБраузера.cancelSelectMessages();
		ОкноБраузера.showMenuOption("chooseMessageOption", 1);
		ИзменитьРежимВыбораСообщений(Ложь);
		ОкноБраузера.changeChatInputReadOnly(Элементы.ГруппаСообщение.Доступность);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМассивВыбранныхСообщений()
	
	МассивВыбранныхСообщений.Очистить();
	
	ИдентификаторыВнешОбъект = ОкноБраузера.getSelectedArr();
	
	МассивИдСообщений = ПрочитатьJSONНаСервере(ИдентификаторыВнешОбъект);
	
	Если ТипЗнч(МассивИдСообщений) = Тип("Массив") Тогда
		ОбновитьМассивВыбранныхСообщенийНаСервере(МассивИдСообщений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьJSONНаСервере(ИдентификаторыВнешОбъект)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ИдентификаторыВнешОбъект);
	МассивИдСообщений = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат МассивИдСообщений;
КонецФункции

&НаСервере
Процедура ОбновитьМассивВыбранныхСообщенийНаСервере(МассивИдСообщений)
	
	Для Каждого ИдСообщения Из МассивИдСообщений Цикл
		СообщениеСсылка = Документы.CRM_СообщениеМессенджера.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдСообщения));
		МассивВыбранныхСообщений.Добавить(СообщениеСсылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьПунктовКонтекстногоМенюСообщения()
	
	ВестиДиалогиЕдинымОкном = (СпособВеденияДиалогов = 1);
	Если ВестиДиалогиЕдинымОкном Тогда
		ОкноБраузера.showMenuOption("chooseMessageOption", Число(Не ГрупповойЧат));
		ОкноБраузера.showMenuOption("NewDialogOption", 0);
		ОкноБраузера.showMenuOption("AddDialogAndTakeOverOption", 0);
		ОкноБраузера.showMenuOption("TakeOverOption", 1);
	Иначе
		ОкноБраузера.showMenuOption("chooseMessageOption", 0);
		ОкноБраузера.showMenuOption("NewDialogOption", 1);
		ОкноБраузера.showMenuOption("AddDialogAndTakeOverOption", 1);
		ОкноБраузера.showMenuOption("TakeOverOption", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыОбновитьКонтакты()
	
	ТекущаяУчетнаяЗапись = Неопределено;
	ТекущийID_Пользователя = "";
	ТекущийДиалог = Неопределено;
	ПоследнееСообщение = Неопределено;
	ДатаПоследнегоДействия = Дата(1, 1, 1);
	
	КонтактыОбновить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоисполнителяОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	ДействияПоЗавершении = ДополнительныеПараметры.ДействияПоЗавершении;
	Если ДействияПоЗавершении.Свойство("ПринятьДиалог") Тогда
		Если Не ТекДиалогАтивен ИЛИ Не ПринятТекущимПользователем Тогда
			Диалог_Принять(Неопределено);
			Если НЕ РежимВыбораСообщений Тогда // В данном режиме кнопка всегда НЕдоступна
				Элементы.Диалог_Принять.Доступность = Не ПринятТекущимПользователем И ТекДиалогАтивен
														И НЕ ТекДиалогПереданДляОзнакомления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияПоЗавершении.Свойство("ИнтерфейсДобавления_Добавить") Тогда
		Элементы.ОблакоСоисполнителей.Видимость = Истина;
		Элементы.Соисполнители_ДобавитьПервого.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокСоисполнителейОповещение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСоисполнителейОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокСоисполнителей();
	ОбновитьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСоисполнителей()
	
	МассивСоисполнителей = СоисполнителиКонтакта(ДанныеТекущегоКонтакта());
	
	СоисполнителиТЗ.Очистить();
	Для Каждого ЭлементМассива Из МассивСоисполнителей Цикл
		НС = СоисполнителиТЗ.Добавить();
		НС.Значение = ЭлементМассива;
		НС.ИдентификаторЭлемента = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	ОбновитьОблакоСоисполнителей();
	
	ОбновитьДоступностьОблакаСоисполнителейНаКлиенте();
	ОбновитьВидимостьОблакаСоисполнителей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоисполнителиКонтакта(ДанныеКонтакта)
	Возврат РегистрыСведений.CRM_СоисполнителиДиалогов.СоисполнителиКонтакта(ДанныеКонтакта);
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьОблакаСоисполнителей()
	
	МеханизмВиден = (ТекущийСтатус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыДиалогов.ПринятВРаботу"));
	
	Если МеханизмВиден Тогда
		МеханизмВиден = CRM_СоисполнителиДиалоговСервер.ПользовательЯвляетсяОтветственным(
			АвторизованныйПользователь,
			ТекущийДиалог,
			ТекущаяУчетнаяЗапись
		);
	КонецЕсли;
	
	Если МеханизмВиден Тогда
		Элементы.ОблакоСоисполнителей.Видимость = (СоисполнителиТЗ.Количество() > 0);
		Элементы.Соисполнители_ДобавитьПервого.Видимость = НЕ Элементы.ОблакоСоисполнителей.Видимость;
		
		Элементы.Соисполнители_Добавить.Видимость = Элементы.ОблакоСоисполнителей.Доступность;
	Иначе
		Элементы.ОблакоСоисполнителей.Видимость = Ложь;
		Элементы.Соисполнители_ДобавитьПервого.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьОблакаСоисполнителей()
	
	Элементы.ОблакоСоисполнителей.Доступность = НЕ РежимВыбораСообщений
		 И (АвторизованныйПользователь = ТекущийПользователь);
	
КонецПроцедуры

// Дублирование ОбновитьДоступностьОблакаСоисполнителей(), но в клиентском контексте.
// Необходимо для исправления повторного вызова события форма ПриАктивацииСтроки табличной части Контакты.
&НаКлиенте
Процедура ОбновитьДоступностьОблакаСоисполнителейНаКлиенте()
	
	Элементы.ОблакоСоисполнителей.Доступность = НЕ РежимВыбораСообщений
		 И (АвторизованныйПользователь = ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовРаботыСДиалогом(ФлагДоступности)
	
	ФлагДоступности = ФлагДоступности И ФлагИспользованияПодсистемыCRM;
	
	Элементы.СписокСообщенийПерейтиКДиалогуНаСайте.Доступность	= ФлагДоступности;
	Элементы.ГруппаДействияСОткрытымДиалогом.Доступность		= ФлагДоступности;
	Элементы.Диалог_Закрыть2.Доступность						= ФлагДоступности;
	Элементы.ОтключитьРежимВыбораСообщений.Доступность			= ФлагДоступности;
	Элементы.ГруппаПоиск.Доступность							= ФлагДоступности;
	Элементы.Диалог_Поиск.Доступность							= ФлагДоступности;
	Элементы.Диалог_ВажныеСообщения.Доступность					= ФлагДоступности;
	Элементы.Диалог_Файлы.Доступность							= ФлагДоступности;
	Элементы.ДиалогиНастрокиПользователя.Доступность			= ФлагДоступности;
	Элементы.ГруппаИсходящее.Доступность						= ФлагДоступности;
	Элементы.ОблакоСоисполнителей.Доступность					= ФлагДоступности;
	Элементы.Диалог_ИзменитьБлокировкуПолученияСообщений.Доступность = ФлагДоступности;
	// Элементы.ДокументHTML.Доступность							= ФлагДоступности;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовРаботыСДиалогом()

// Дублирование ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте(), но в клиентском контексте.
// Необходимо для исправления повторного вызова события форма ПриАктивацииСтроки табличной части Контакты.
&НаКлиенте
Процедура ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте(ФлагДоступности)
	
	ФлагДоступности = ФлагДоступности И ФлагИспользованияПодсистемыCRM;
	
	Элементы.СписокСообщенийПерейтиКДиалогуНаСайте.Доступность	= ФлагДоступности;
	Элементы.ГруппаДействияСОткрытымДиалогом.Доступность		= ФлагДоступности;
	Элементы.Диалог_Закрыть2.Доступность						= ФлагДоступности;
	Элементы.ОтключитьРежимВыбораСообщений.Доступность			= ФлагДоступности;
	Элементы.ГруппаПоиск.Доступность							= ФлагДоступности;
	Элементы.Диалог_Поиск.Доступность							= ФлагДоступности;
	Элементы.Диалог_ВажныеСообщения.Доступность					= ФлагДоступности;
	Элементы.Диалог_Файлы.Доступность							= ФлагДоступности;
	Элементы.ДиалогиНастрокиПользователя.Доступность			= ФлагДоступности;
	Элементы.ГруппаИсходящее.Доступность						= ФлагДоступности;
	Элементы.ОблакоСоисполнителей.Доступность					= ФлагДоступности;
	Элементы.Диалог_ИзменитьБлокировкуПолученияСообщений.Доступность = ФлагДоступности;
	// Элементы.ДокументHTML.Доступность							= ФлагДоступности;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовРаботыСДиалогомНаКлиенте()

// Процедура - обработчик события "Нажатие" элемента формы "Соисполнитель".
&НаКлиенте
Процедура Подключаемый_СоисполнительНажатиеИмя(Элемент)
	CRM_СоисполнителиДиалоговКлиент.СоисполнительНажатиеИмя(ЭтотОбъект, Элемент);
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "Соисполнитель".
&НаКлиенте
Процедура Подключаемый_СоисполнительНажатиеКнопка(Элемент)
	CRM_СоисполнителиДиалоговКлиент.СоисполнительНажатиеКнопка(ЭтотОбъект, Элемент, ДанныеТекущегоКонтакта());
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение соисполнителей на форме.
//
Процедура ОбновитьОблакоСоисполнителей()
	
	ПараметрыОблака = ПараметрыОблакаСоисполнителей();
	CRM_СоисполнителиДиалоговСервер.ОбновитьОблакоСоисполнителей(ЭтотОбъект, ПараметрыОблака);
	
КонецПроцедуры

&НаСервере
Функция ДанныеТекущегоКонтакта()
	Возврат Новый Структура("УчетнаяЗапись, Группа, ID_Пользователя, ТекущийДиалог",
								ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, ТекущийДиалог);
КонецФункции

&НаСервере
Функция СтатусТекущегоКонтактаПоСоисполнителю(ТПользователь)
	
	КонтактыСоисполнителей = CRM_РаботаСМессенджерамиСервер.ДанныеКонтактовКакСоисполнитель(
		ТПользователь, ДанныеТекущегоКонтакта());
	
	Если КонтактыСоисполнителей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонтактыСоисполнителей[0].Статус;
	
КонецФункции

// Для получения списка соисполнителей на клиенте
//
&НаСервере
Функция МассивТекущихСоисполнителей()
	Возврат СоисполнителиТЗ.Выгрузить().ВыгрузитьКолонку("Значение");
КонецФункции

&НаСервере
Функция ПараметрыОблакаСоисполнителей()
	
	ШиринаОблака = Элементы.ДокументHTML.Ширина;
	
	ПараметрыОблака = Новый Структура;
	ПараметрыОблака.Вставить("МаксДлинаПервойСтроки", ШиринаОблака - 4);
	ПараметрыОблака.Вставить("ДобавитьКСтроке", 4);
	
	Возврат ПараметрыОблака;
	
КонецФункции

&НаСервере
Функция ПользовательЯвляетсяОтветственным(ОтветственныйПользователь)
	
	Результат = (ОтветственныйПользователь = АвторизованныйПользователь)
		Или (АвторизованныйПользователь = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещающийСотрудник(ОтветственныйПользователь));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкиНаВложения(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	CRM_СообщениеМессенджераПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.CRM_СообщениеМессенджераПрисоединенныеФайлы КАК CRM_СообщениеМессенджераПрисоединенныеФайлы
			|ГДЕ
			|	CRM_СообщениеМессенджераПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла");
		
		Запрос.УстановитьПараметр("ВладелецФайла", СсылкаНаОбъект);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.CRM_СообщениеМессенджераПрисоединенныеФайлы") Тогда
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(СсылкаНаОбъект);
		
		Возврат МассивФайлов;
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции // ПолучитьСсылкиНаВложения()

&НаКлиенте
Процедура СохранитьВложения(СсылкаНаОбъект)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СохранитьВложенияПодключеноРасширение", ЭтотОбъект, ДополнительныеПараметры);
		
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось сохранить вложения - не удалось найти вложения.';
				|en = 'Attachments could not be saved - attachments could not be found.'"));
	КонецЕсли;
	
КонецПроцедуры // СохранитьВложения()

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВложенияДляСохранения = ПолучитьСсылкиНаВложения(
		ДополнительныеПараметры.СсылкаНаОбъект);
	
	Если ВложенияДляСохранения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Подключено Тогда
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("Вложения", ВложенияДляСохранения);
		
		Оповещение = Новый ОписаниеОповещения(
			"СохранитьВложенияПослеВыбораКаталога",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ВыборКаталога.Показать(Оповещение);
	Иначе
		#Если ВебКлиент Тогда
			Для Каждого ВложениеДляСохранения Из ВложенияДляСохранения Цикл
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(
					ВложениеДляСохранения, УникальныйИдентификатор);
				
				ПолучитьФайл(
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
					ДанныеФайла.ИмяФайла,
					Истина);
			КонецЦикла;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено
			Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыйПуть	= ВыбранныеФайлы[0];
	РазделительПути		= ПолучитьРазделительПутиКлиента();
	
	Если Не СтрЗаканчиваетсяНа(ИспользуемыйПуть, РазделительПути) Тогда
		ИспользуемыйПуть = ИспользуемыйПуть + РазделительПути;
	КонецЕсли;
	
	Для Каждого ВложениеДляСохранения Из ДополнительныеПараметры.Вложения Цикл
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(
			ВложениеДляСохранения, УникальныйИдентификатор);
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанныеФайла.НачатьЗапись(
				Новый ОписаниеОповещения,
				ИспользуемыйПуть + ДанныеФайла.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение вложений'; en = 'File saving is done'"), ,
		НСтр("ru = 'Сохранение файлов сообщения выполнено'; en = 'The message files have been saved'"));
	
КонецПроцедуры // СохранитьВложенияПослеВыбораКаталога()

&НаКлиенте
Процедура КопироватьВложенияВБуфер(СсылкаНаОбъект)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		МассивСсылок = ПолучитьСсылкиНаВложения(СсылкаНаОбъект);
		
		CRM_ПрисоединенныеФайлы.СкопироватьФайлыВБуфер(МассивСсылок);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Копирование в буфер'"), Окно.ПолучитьНавигационнуюСсылку(), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Скопировано файлов: %1'"), МассивСсылок.Количество()));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не удалось скопировать вложения - не удалось найти вложения.';
				|en = 'Attachments could not be copied - attachments could not be found.'"));
	КонецЕсли;
	
КонецПроцедуры // КопироватьВложенияВБуфер()

&НаКлиенте
Процедура ПрикрепитьФайлыИзБуфера(Команда)
	
	Если Не CRM_ПрисоединенныеФайлы.БуферЗаполненФайлами() Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			Окно.ПолучитьНавигационнуюСсылку(),
			НСтр("ru = 'Буфер пуст'"));
		Возврат;
	КонецЕсли;
	
	МассивСсылокНаФайлы = CRM_ПрисоединенныеФайлы.МассивСсылокИзБуфера();
	
	ДобавленоФайлов = 0;
	Для Каждого СсылкаНаФайл Из МассивСсылокНаФайлы Цикл
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(СсылкаНаФайл,, ПараметрыДанныхФайла);
		
		СтрокаФайла = ПрисоединенныеФайлыОтправляемые.Добавить();
		СтрокаФайла.Представление	= ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		СтрокаФайла.Значение		= ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		ДобавленоФайлов = ДобавленоФайлов + 1;
	КонецЦикла;
	
	Если ДобавленоФайлов > 0 Тогда
		СформироватьСсылкиВложений();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры // ПрикрепитьФайлыИзБуфера()

&НаКлиенте
Процедура ПриВыбореВариантаОтменыЗапланированногоСообщения(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И Результат = КодВозвратаДиалога.Да Тогда
		РезультатОтмены = CRM_РаботаСМессенджерамиСервер.ОтменитьЗапланированноеСообщениеНаСервере(
			ДополнительныеПараметры.ИдентификаторСообщения);
		
		Если Не РезультатОтмены Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось отменить запланированное сообщение.'"));
		КонецЕсли;
		
		ОбновитьСообщения(ТекущееСообщение);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореВариантаОтменыЗапланированногоСообщения()

&НаСервере
Функция ПолучитьИдентификаторСтрокиДереваФормы(КонтактыДеревоЗначений, СтрокаДереваЗначенийКонтактов)
	
	МассивИндексовДереваОбхода = Новый Массив;
	
	ТекущаяСтрокаДереваКонтактов = СтрокаДереваЗначенийКонтактов;
	Пока ТекущаяСтрокаДереваКонтактов.Родитель <> Неопределено Цикл
		СтрокиТекущейВеткиДерева = ТекущаяСтрокаДереваКонтактов.Родитель.Строки;
		МассивИндексовДереваОбхода.Добавить(СтрокиТекущейВеткиДерева.Индекс(ТекущаяСтрокаДереваКонтактов));
		ТекущаяСтрокаДереваКонтактов = ТекущаяСтрокаДереваКонтактов.Родитель;
	КонецЦикла;
	
	МассивИндексовДереваОбхода.Добавить(КонтактыДеревоЗначений.Строки.Индекс(ТекущаяСтрокаДереваКонтактов));
	
	КоличествоИндексов = МассивИндексовДереваОбхода.Количество() - 1;
	ТекущаяСтрокаДерева = Контакты;
	Для ТекущаяПозиция = 0 По КоличествоИндексов Цикл
		ИндексПоиска = МассивИндексовДереваОбхода[КоличествоИндексов - ТекущаяПозиция];
		ТекущаяСтрокаДерева = ТекущаяСтрокаДерева.ПолучитьЭлементы()[ИндексПоиска];
	КонецЦикла;
	
	Возврат ТекущаяСтрокаДерева.ПолучитьИдентификатор();
	
КонецФункции // ПолучитьИдентификаторСтрокиДереваФормы()

&НаКлиенте
Функция ПолучитьМассивВыделенныхКонтактов()
	
	МассивВыделенныхКонтактов = Новый Массив;
	
	Для Каждого ТекущийВыделенныйКонтакт Из Элементы.Контакты.ВыделенныеСтроки Цикл
		ДанныеСтрокиСписка = Элементы.Контакты.ДанныеСтроки(ТекущийВыделенныйКонтакт);
		
		Если ДанныеСтрокиСписка.ЭтоПапкаДиалогов Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("УчетнаяЗапись",		ДанныеСтрокиСписка.УчетнаяЗапись);
		СтруктураКонтакта.Вставить("ID_Пользователя",	ДанныеСтрокиСписка.ID_Пользователя);
		СтруктураКонтакта.Вставить("Группа",			ДанныеСтрокиСписка.Группа);
		
		МассивВыделенныхКонтактов.Добавить(СтруктураКонтакта);
	КонецЦикла;
	
	Возврат МассивВыделенныхКонтактов;
	
КонецФункции // ПолучитьМассивВыделенныхКонтактов()

&НаСервере
Функция НайтиДиалогПоДанным(ДанныеСсылки, УчетнаяЗапись)

	ДанныеСсылки = ЗначениеИзСтрокиВнутр(ДанныеСсылки);
	
	Если ТипЗнч(ДанныеСсылки) = Тип("Структура") Тогда
		Если ДанныеСсылки.Свойство("ID_Группы") Или ДанныеСсылки.Свойство("ID_Пользователя") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	CRM_Диалоги.Ссылка КАК Ссылка
			                      |ИЗ
			                      |	Справочник.CRM_Диалоги КАК CRM_Диалоги
			                      |ГДЕ
			                      |	CRM_Диалоги.УчетнаяЗапись = &УчетнаяЗапись
			                      |	И CRM_Диалоги.ID_Пользователя = &ID_Пользователя
			                      |	И CRM_Диалоги.Группа = """"
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	CRM_Диалоги.ДатаЗавершения");

			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
			Если ДанныеСсылки.Свойство("ID_Группы") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ID_Пользователя", "Группа");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И CRM_Диалоги.Группа = """"", "");
				Запрос.УстановитьПараметр("Группа", ДанныеСсылки["ID_Группы"]);
			ИначеЕсли ДанныеСсылки.Свойство("ID_Пользователя") Тогда
				Запрос.УстановитьПараметр("ID_Пользователя", ДанныеСсылки["ID_Пользователя"]);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("РаспознаваниеРечиТекст");
	МассивЭлементов.Добавить("Поиск_Основной");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_НажатыйЭлементHTML", ОписаниеТиповСтрока));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспознаваниеРечи(Команда)
	
	ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"] = "РаспознаваниеРечи_HTML";
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("РаспознаваниеРечиТекст");
	МассивИменЭлементов.Добавить("Поиск_Основной");
	
	МассивПолей         = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          ЭтотОбъект.ТекущийЭлемент);
	Контекст.Вставить("ТекущийЭлемент",                   ЭтотОбъект.ТекущийЭлемент);
	Контекст.Вставить("ИмяРеквизита",                     ЭтотОбъект.ТекущийЭлемент.Имя);
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекЭлемент = Контекст.Форма.ТекущийЭлемент;
	ИмяРеквизита = "";
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КомандаГолосовогоВвода", ЭтотОбъект["РаспознаваниеРечи_ТекущаяКоманда"]);
	СтруктураПоиска.Вставить("ИмяЭлемента", ТекЭлемент.Имя);
	
	НайденныеСтроки = ЭтотОбъект["РаспознаваниеРечи_ТаблицаЭлементов"].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;
	
	Если ТекЭлемент.Имя = "ДокументHTML" Тогда
		
		НажатыйЭлемент = ЭтотОбъект["РаспознаваниеРечи_НажатыйЭлементHTML"];
		ЭлементБраузера = ДокументБраузера.getElementById(НажатыйЭлемент);
		Если ЭлементБраузера = Неопределено Тогда
			// Обработка не требуется
		ИначеЕсли НажатыйЭлемент = "searchInput" Тогда
			ТекстСообщения = CRM_ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания);
			ЭлементБраузера.value = ТекстСообщения;
			ОкноБраузера.addSearchResults(ВыполнитьПоискВДиалоге(ТекущийДиалог, ТекстСообщения));
		Иначе
				CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
				Контекст.Форма,
				ТекЭлемент,
				ИмяРеквизита,
				РезультатРаспознавания);
		КонецЕсли;
		
	ИначеЕсли ТекЭлемент.Имя = "Поиск_Основной" Тогда
		
		CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
			Контекст.Форма,
			ТекЭлемент,
			ИмяРеквизита,
			РезультатРаспознавания);
		
		Поиск_ОсновнойПриИзменении(ТекЭлемент);
		
	ИначеЕсли ТекЭлемент.Имя = "БыстрыеОтветы_Поиск" Тогда
		
		Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
			ЭтотОбъект[ИмяРеквизита] = "";
			ТекЭлемент.ОбновитьТекстРедактирования();
		КонецЕсли;
		
		CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
			Контекст.Форма,
			ТекЭлемент,
			ИмяРеквизита,
			РезультатРаспознавания);
		
		БыстрыеОтветы_Результат.Очистить();
		БыстрыеОтветы_ПоискАвтоПодборНаСервере(ЭтотОбъект[ИмяРеквизита]);
		
	КонецЕсли;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "Поиск_Основной", "РаспознаваниеРечи_Поиск");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "ДокументHTML", "РаспознаваниеРечи_HTML");
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, 
		"БыстрыеОтветы_Поиск", "РаспознаваниеРечи_HTML");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи

#Область БлокировкаОтправителей

&НаКлиенте
Процедура ИзменитьПометкуБлокировкиКонтакта(ПометкаБлокировки)
	
	ТекущиеДанныеКонтакта = Элементы.Контакты.ТекущиеДанные;
	
	Если ТекущиеДанныеКонтакта <> Неопределено Тогда
		ТекущиеДанныеКонтакта.ПризнакБлокировкиОтправителя = ПометкаБлокировки;
		ТекущийСтатусБлокировки = ПометкаБлокировки;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПометкуБлокировкиКонтакта()

#КонецОбласти

#Область ГруппировкиДиалогов

&НаСервереБезКонтекста
Процедура ДобавитьДиалогиВПапку(ОтобранныеКонтакты, ПапкиДиалогов, Замещать = Ложь)
	
	Для Каждого ТекущийОтобранныйКонтакт Из ОтобранныеКонтакты Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.CRM_РаспределенияДиалоговПоПапкам.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.ИдентификаторПользователя	= ТекущийОтобранныйКонтакт.ID_Пользователя;
		МенеджерЗаписиРегистра.УчетнаяЗапись				= ТекущийОтобранныйКонтакт.УчетнаяЗапись;
		МенеджерЗаписиРегистра.Группа						= ТекущийОтобранныйКонтакт.Группа;
		МенеджерЗаписиРегистра.ПапкаДиалога					= ПапкиДиалогов;
		
		Попытка
			МенеджерЗаписиРегистра.Записать(Замещать);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДиалогиВПапку()

&НаСервереБезКонтекста
Процедура УдалитьДиалогиИзПапки(ОтобранныеКонтакты)
	
	ЗаписьГруппировки = РегистрыСведений.CRM_РаспределенияДиалоговПоПапкам.СоздатьМенеджерЗаписи();
	
	Для Каждого ТекущийОтобранныйКонтакт Из ОтобранныеКонтакты Цикл
		ЗаписьГруппировки.ИдентификаторПользователя	= ТекущийОтобранныйКонтакт.ID_Пользователя;
		ЗаписьГруппировки.УчетнаяЗапись				= ТекущийОтобранныйКонтакт.УчетнаяЗапись;
		ЗаписьГруппировки.Группа					= ТекущийОтобранныйКонтакт.Группа;
		
		ЗаписьГруппировки.Удалить();
	КонецЦикла;
	
КонецПроцедуры // УдалитьДиалогиИзПапки()

#КонецОбласти

#КонецОбласти

#Область ПроверкаПравописания

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПроверкиПравописания(Команда)
	CRM_ПроверкаПравописанияКлиент.ВыполнитьКомандуПроверкиПравописания(ЭтотОбъект, Элементы.ДокументHTML, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаменитьНаВариантНажатие(Команда)
	CRM_ПроверкаПравописанияКлиент.ЗаменитьНаВариант(ЭтотОбъект, Элементы.ДокументHTML, Команда.Имя)
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописани".
//
// Параметры:
//  Команда  - выполняемая команда
//
Процедура ПроверкаПравописания(Команда = Неопределено)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'проверку орфографии'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаПравописанияПродолжение", ЭтотОбъект);
	CRM_ЛицензированиеКлиент.ПроверитьПодключениеОтраслевыхСервисовИОткрыть(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравописанияПродолжение(Результат, ДопПараметр) Экспорт
	
	Элементы.ПроверкаПравописания.Пометка = Не Элементы.ПроверкаПравописания.Пометка;
	Элементы.CRM_ГруппаПроверкаПравописания.Видимость = Элементы.ПроверкаПравописания.Пометка;
	
	Если Элементы.ПроверкаПравописания.Пометка Тогда
		CRM_ПроверкаПравописанияКлиент.СкрытьОшибки(Элементы.ДокументHTML);
		ЭлементВводаСообщения = ДокументБраузера.getElementById("chat-input");
		ПроверяемыйТекст = ЭлементВводаСообщения.innerHTML;

		ПроверкаПравописанияНаСервере(ПроверяемыйТекст);
		ЭлементВводаСообщения.innerHTML = ПроверяемыйТекст;
		ОкноБраузера.updateMistakeEvent();
		CRM_ПроверкаПравописанияКлиент.ЗаполнитьДанныеОшибки(ЭтотОбъект, Элементы.ДокументHTML);
	Иначе
		ВыделенныйТекст = Элементы.ДокументHTML.Документ.getSelection();
		НомерТекущейОшибки = ЭтотОбъект["CRM_НомерТекущейОшибки"];
		Если ВыделенныйТекст.type <> "None" 
			И НомерТекущейОшибки < ЭтотОбъект["CRM_СписокОшибок"].Количество()
			И ЭтотОбъект["CRM_СписокОшибок"].Получить(НомерТекущейОшибки).Значение.word
			= ВыделенныйТекст.anchorNode.textContent Тогда
			Элементы.ДокументHTML.Документ.getSelection().empty();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПравописанияНаСервере(ПроверяемыйТекст)
	CRM_ПроверкаПравописанияСервер.ПроверитьПравописание(ЭтотОбъект, Элементы.ДокументHTML,
		 ПроверяемыйТекст);
КонецПроцедуры

#КонецОбласти
