#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных
Перем Сервер Экспорт; 				// Сервер = домен + ".amocrm.ru"
Перем ПараметрыАвторизации Экспорт; // "?USER_LOGIN=" + %адрес эл. почты + "&USER_HASH=" + в настройках amoCRM ключ API
Перем cookieДанные Экспорт; 		// Cookie
Перем Соединение Экспорт; 			// HTTPСоединение
Перем ОбсуждениеРазрешены Экспорт; 	// Обсуждения в системе взаимодействия разрешены
Перем КофигурацияУТ Экспорт; 		// Признак, что текущая конфигурация НЕ является CRM
Перем ЗагруженныеИнтересы Экспорт; 	// Загруженные интересы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Обмен с amo crm";
	НоваяКоманда.Идентификатор = "ОбменСAmoCrm";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Возврат ПараметрыРегистрации;
	
КонецФункции

#Область Подключение
Функция ВыполнитьПроверкуПодключения() Экспорт
	
	ТекстСообщения = "Начало загрузки данных" + Символы.ПС + "Попытка авторизации:";
	ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
	
	Если ПустаяСтрока(Домен) Тогда
		ТекстСообщения = "Не заполнен домен";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ИнициализироватьПараметрыСервера();
	Ресурс = "/api/v4/account?with=amojo_id";
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = Ресурс;
	
	HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Хеш);

	ТекстСообщения = "Получение данных из amoCRM";
	ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	HTTP = Новый HTTPСоединение(Домен, , , , Прокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
	ОтветHTTP = HTTP.Получить(HTTPЗапрос);
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		ТекстСообщения = "success";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Возврат Истина;
	Иначе
		ТекстСообщения = ПолучитьИнформациюПоОшибкам(ОтветHTTP.КодСостояния);
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьДерево(ЧтениеJSON, Дерево)
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			СформироватьДерево(ЧтениеJSON, НовыйОбъект);
			
			Если Дерево = Неопределено Тогда
				Дерево = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
			ИЛИ TипJSON = ТипЗначенияJSON.Строка 
			ИЛИ TипJSON = ТипЗначенияJSON.Булево 
			ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция jsonПрочитать(Значение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Результат = Неопределено;
	СформироватьДерево(ЧтениеJSON, Результат);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьПараметрыСервера()
	
	Если СтрНайти(Домен, ".amocrm.ru") > 0 Тогда
		Сервер = Домен;
	Иначе
		Сервер = Домен + ".amocrm.ru";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СохранитьНастройки() Экспорт
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm";
	Настройки = Новый Соответствие;
	Настройки.Вставить("ПартнерыСопоставление", 		ПартнерыСопоставление.Выгрузить());
	Настройки.Вставить("КонтактныеЛицаСопоставление", 	КонтактныеЛицаСопоставление.Выгрузить());
	Настройки.Вставить("СделкиСопоставление", 			СделкиСопоставление.Выгрузить());
	Настройки.Вставить("ПользователиСопоставление", 	ПользователиСопоставление.Выгрузить());
	Настройки.Вставить("ВидыВзаимодействийСопоставление", 	ВидыВзаимодействийСопоставление.Выгрузить());
	
	Настройки.Вставить("ПользователиСопоставлены", 	ПользователиСопоставлены);
	Настройки.Вставить("Хеш", 						Хеш);
	Настройки.Вставить("Домен", 					Домен);
	Настройки.Вставить("СекретныйКлюч", 			СекретныйКлюч);
	Настройки.Вставить("IDИнтеграции", 				IDИнтеграции);
	Настройки.Вставить("СсылкаДляПеренаправления", 	СсылкаДляПеренаправления);
	Настройки.Вставить("refresh_token", 			refresh_token);
	Настройки.Вставить("СрокДействияТокена", 		СрокДействияТокена);
	Настройки.Вставить("Организация", 				Организация);
	Настройки.Вставить("ДопРеквизитыСозданы", 		ДопРеквизитыСозданы);
	
	Настройки.Вставить("УчетнаяЗапись",		 		УчетнаяЗапись);
	Настройки.Вставить("РежимЗагрузкиДанных", 		РежимЗагрузкиДанных);
	Настройки.Вставить("ПерезаписыватьДанные", 		ПерезаписыватьДанные);
	Настройки.Вставить("ДатаЗагрузки", 				ДатаЗагрузки);
	
	Настройки.Вставить("Компании", 					Компании);
	Настройки.Вставить("Контакты", 					Контакты);
	Настройки.Вставить("ЗагружатьЗадачи", 			ЗагружатьЗадачи);
	Настройки.Вставить("Сделки", 					Сделки);
	Настройки.Вставить("События", 					События);
	Настройки.Вставить("СоздаватьФизЛиц", 			СоздаватьФизЛиц);
	
	Настройки.Вставить("ПомощникПройден", 			ПомощникПройден);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ВыгрузкаНоменклатуры", КлючНастроек,
		 Настройки, ,
		 Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	
КонецПроцедуры

Процедура ПередатьДанныеДляЖурнала() Экспорт
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm.ЖурналДанных";
	Настройки = Новый Соответствие;
	Настройки.Вставить("ЖурналСобытий", 					ЖурналСобытий);
	Настройки.Вставить("ЖурналСозданныхОбъектов", 			ЖурналСозданныхОбъектов.Выгрузить());
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ВыгрузкаНоменклатуры", КлючНастроек,
		 Настройки, ,
		 Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	
КонецПроцедуры

Процедура ВосстановитьНастройки() Экспорт
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm";
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ВыгрузкаНоменклатуры",
		 КлючНастроек, , ,
		 Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		ЗначениеИзНастройкиПартнеры = ЗначениеНастроек.Получить("ПартнерыСопоставление");
		ЗначениеИзНастройкиКонтЛица = ЗначениеНастроек.Получить("КонтактныеЛицаСопоставление");
		ЗначениеИзНастройкиСделки	= ЗначениеНастроек.Получить("СделкиСопоставление");
		ЗначениеИзНастройкиПользов	= ЗначениеНастроек.Получить("ПользователиСопоставление");
		ЗначениеИзНастройкиВидыВзаимодействий	= ЗначениеНастроек.Получить("ВидыВзаимодействийСопоставление");
		
		ПользователиСопоставлены = ЗначениеНастроек.Получить("ПользователиСопоставлены");
		Хеш 					= ЗначениеНастроек.Получить("Хеш");
		Домен     				= ЗначениеНастроек.Получить("Домен");
		СекретныйКлюч 			= ЗначениеНастроек.Получить("СекретныйКлюч");
		IDИнтеграции 			= ЗначениеНастроек.Получить("IDИнтеграции");
		СсылкаДляПеренаправления = ЗначениеНастроек.Получить("СсылкаДляПеренаправления");
		refresh_token 			= ЗначениеНастроек.Получить("refresh_token");
		СрокДействияТокена     	= ЗначениеНастроек.Получить("СрокДействияТокена");
		Организация				= ЗначениеНастроек.Получить("Организация");
		ДопРеквизитыСозданы		= ЗначениеНастроек.Получить("ДопРеквизитыСозданы");
		Пароль                  = ЗначениеНастроек.Получить("Пароль");
		
		УчетнаяЗапись			 = ЗначениеНастроек.Получить("УчетнаяЗапись");
		РежимЗагрузкиДанных      = ЗначениеНастроек.Получить("РежимЗагрузкиДанных");
		ПерезаписыватьДанные     = ЗначениеНастроек.Получить("ПерезаписыватьДанные");
		ДатаЗагрузки             = ЗначениеНастроек.Получить("ДатаЗагрузки");
		
		Компании 				=  ЗначениеНастроек.Получить("Компании");
		Контакты 				=  ЗначениеНастроек.Получить("Контакты");
		ЗагружатьЗадачи			=  ЗначениеНастроек.Получить("ЗагружатьЗадачи");
		Сделки 					=  ЗначениеНастроек.Получить("Сделки");
		События 				=  ЗначениеНастроек.Получить("События");
		СоздаватьФизЛиц         =  ЗначениеНастроек.Получить("СоздаватьФизЛиц");

		ПомощникПройден			=  ЗначениеНастроек.Получить("ПомощникПройден");
		
		Если ТипЗнч(ЗначениеИзНастройкиПартнеры) = Тип("ТаблицаЗначений") Тогда
			ПартнерыСопоставление.Загрузить(ЗначениеИзНастройкиПартнеры);
		КонецЕсли;
		Если ТипЗнч(ЗначениеИзНастройкиКонтЛица) = Тип("ТаблицаЗначений") Тогда
			КонтактныеЛицаСопоставление.Загрузить(ЗначениеИзНастройкиКонтЛица);
		КонецЕсли;
		Если ТипЗнч(ЗначениеИзНастройкиСделки) = Тип("ТаблицаЗначений") Тогда
			СделкиСопоставление.Загрузить(ЗначениеИзНастройкиСделки);
		КонецЕсли;
		Если ТипЗнч(ЗначениеИзНастройкиПользов) = Тип("ТаблицаЗначений") Тогда
			ПользователиСопоставление.Загрузить(ЗначениеИзНастройкиПользов);
		КонецЕсли;
		Если ТипЗнч(ЗначениеИзНастройкиВидыВзаимодействий) = Тип("ТаблицаЗначений") Тогда
			ВидыВзаимодействийСопоставление.Загрузить(ЗначениеИзНастройкиВидыВзаимодействий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаДанных
Процедура ЗапуститьВФонеЗагрузкуДанных(ПараметрыЗаполнения, АдресОбработки) Экспорт
	
	ВосстановитьНастройки();
	
	ЖурналСобытий = "";
	ЖурналСозданныхОбъектов.Очистить();
	
	// Компании - Партнеры
	Если Компании Тогда
		
		Ресурс = "/api/v4/companies";
		
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 0, Ложь);
		
	КонецЕсли;
	
	// Контакты - Партнеры - контактные лица
	Если Контакты Тогда
		
		Ресурс = "/api/v4/contacts";
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 1, Ложь);
		
	КонецЕсли;
	
	Если Сделки Тогда
		
		Ресурс = "/api/v4/leads";
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 2, Ложь);
		
	КонецЕсли;
	
	Если ЗагружатьЗадачи Тогда
		
		Ресурс = "/api/v4/tasks";
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 3, Ложь);
		
	КонецЕсли;
	
	Если События Тогда
		
		Ресурс = "/api/v4/notes";
		// примечания к сделкам
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 4, Ложь);
		// примечания к компаниям
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 5, Ложь);
		// примечания к контактам
		ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 6, Ложь);
		
	КонецЕсли;	
	
	ПередатьДанныеДляЖурнала();
	
КонецПроцедуры

// Функция - Выполнить загрузку данных
//
// Параметры:
//  Ресурс							Ресурс - строка подключения к амо 
//  ИндексЗагрузки					ДанныеДляЗагрузки - цифра, обозначающая какие данные мы загружаются	  
//  ЗагрузкаДанныхДлясопоставления	ЗагрузкаДанных - Булево, загружаем данные в базу; ложь - данные для сопоставления	  
// 
// Возвращаемое значение:
//   - 
//
Функция ВыполнитьЗагрузкуДанных(Ресурс, ИндексЗагрузки, ЗагрузкаДанныхДлясопоставления,
	 СтраницаДанных = 1,
	 ID_Lead = Неопределено) Экспорт
	
	ПараметрыЗапроса = "?";
	Если ИндексЗагрузки = 20 Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&with=task_types";
	ИначеЕсли ИндексЗагрузки = 4 Или ИндексЗагрузки = 55 Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&type=lead";
		Если ЗначениеЗаполнено(ДатаЗагрузки) Тогда
			ПараметрыЗапроса = ПараметрыЗапроса + "&filter[created_at][from]=" + ДатуВTimestamp(ДатаЗагрузки);
			ПараметрыЗапроса = ПараметрыЗапроса + "&filter[created_at][to]=" + ДатуВTimestamp(ТекущаяДатаСеанса());
		КонецЕсли;
		Если Не ID_Lead = Неопределено Тогда 
			ПараметрыЗапроса = ПараметрыЗапроса + "&filter[entity_id]=" + ID_Lead;
		КонецЕсли;
	ИначеЕсли ИндексЗагрузки = 3 ИЛИ ИндексЗагрузки = 2 Или ИндексЗагрузки = 66 Тогда
		Если ИндексЗагрузки = 2 Тогда
			ПараметрыЗапроса = ПараметрыЗапроса + "&with=contacts";
			Фильтр = "pipeline_id";
			ТЗСделки = СделкиСопоставление.Выгрузить();
			Отбор = Новый Структура;
			Отбор.Вставить("Выбрано", Истина);
			Отбор.Вставить("Воронка", Истина);	
			КопияТЗСделки = ТЗСделки.Скопировать(Отбор);
			ПараметрыЗапросаФильтр = "";
			Для Каждого СтрокаКопияТЗСделки Из КопияТЗСделки Цикл
				ЗначениеФильтр = СокрЛП(Строка(СтрокаКопияТЗСделки.ИДАмо));
				Если КопияТЗСделки.Количество() > 1 Тогда
					ПараметрыЗапросаФильтр = "&filter[" + Фильтр + "][0]=" + ЗначениеФильтр;
				Иначе
					ПараметрыЗапросаФильтр = "&filter[" + Фильтр + "]=" + ЗначениеФильтр;
				КонецЕсли;
			КонецЦикла;
			ПараметрыЗапроса = ПараметрыЗапроса + ПараметрыЗапросаФильтр;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаЗагрузки) Тогда
			Если ИндексЗагрузки = 2 Тогда
				Фильтр = "created_at";
			Иначе
				Фильтр = "updated_at";
			КонецЕсли;
			ПараметрыЗапроса = ПараметрыЗапроса + "&filter[" + Фильтр + "][from]=" + ДатуВTimestamp(ДатаЗагрузки);
			ПараметрыЗапроса = ПараметрыЗапроса + "&filter[" + Фильтр + "][to]=" + ДатуВTimestamp(ТекущаяДатаСеанса());
		КонецЕсли;
		Если ИндексЗагрузки = 66 Тогда 
			Если Не ID_Lead = Неопределено Тогда 
				ПараметрыЗапроса = ПараметрыЗапроса + "&filter[entity_id]=" + ID_Lead;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ИндексЗагрузки = 5 Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&type=company";
	ИначеЕсли ИндексЗагрузки = 6 Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&type=contact";
	КонецЕсли;
	
	// Ограничение 100 элементов.
	ЛимитЭлементовНаЗапрос = 100;
	Если НЕ ((ИндексЗагрузки = 0 ИЛИ ИндексЗагрузки = 1) И  ЗагрузкаДанныхДлясопоставления) Тогда
		ПараметрыЗапроса = ПараметрыЗапроса + "&limit=" + ЛимитЭлементовНаЗапрос;
	КонецЕсли;
	
	
	ЗагрузкаАктивна = Истина;
	Пока ЗагрузкаАктивна Цикл
		
		Если СтраницаДанных > 1 Тогда
			ПараметрыЗапроса = ПараметрыЗапроса + "&page=" + СтрЗаменить(Формат(СтраницаДанных, "ЧЦ=10"), Символы.НПП, "");
		КонецЕсли;
	
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.АдресРесурса = Ресурс + ?(СтрДлина(ПараметрыЗапроса) > 1, СтрЗаменить(ПараметрыЗапроса, "?&", "?"), "");
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Хеш);

		ТекстСообщения = "Получение данных из amoCRM";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		HTTP =  Новый HTTPСоединение(Домен, , , , Прокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
		ОтветHTTP = HTTP.Получить(HTTPЗапрос);
		
		Если ОтветHTTP.КодСостояния = 200 Тогда
			ТекстСообщения = "success";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Иначе
			ТекстСообщения = ПолучитьИнформациюПоОшибкам(ОтветHTTP.КодСостояния);
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		ТекстСообщения = "Обработка ответа...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);

		Результат = jsonПрочитать(ОтветHTTP.ПолучитьТелоКакСтроку());
		
		// Переходим к загрузке данных
		// данные собираются в _embedded в массив items 
		Если ИндексЗагрузки = 10 Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("users");
		ИначеЕсли (ИндексЗагрузки = 0 ИЛИ ИндексЗагрузки = 1) И ЗагрузкаДанныхДлясопоставления Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("custom_fields");
		ИначеЕсли ИндексЗагрузки = 0 Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("companies");
		ИначеЕсли ИндексЗагрузки = 1 Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("contacts");
		ИначеЕсли ИндексЗагрузки = 20 Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("task_types");
		ИначеЕсли ИндексЗагрузки = 2 Тогда
			Если ЗагрузкаДанныхДлясопоставления Тогда
				МассивДанных = Результат.Получить("_embedded").Получить("pipelines");
			Иначе
				МассивДанных = Результат.Получить("_embedded").Получить("leads");
			КонецЕсли;
		ИначеЕсли ИндексЗагрузки = 3 Или ИндексЗагрузки = 66 Тогда
			МассивДанных = Результат.Получить("_embedded").Получить("tasks");
		ИначеЕсли ИндексЗагрузки = 99 Тогда
			МассивДанных = Новый Массив;
			МассивДанных.Добавить(Результат);
		ИначеЕсли ИндексЗагрузки = 88 Тогда
			МассивДанных = Новый Массив;
			МассивДанных.Добавить(Результат);
		ИначеЕсли ИндексЗагрузки = 77 Тогда
			МассивДанных = Новый Массив;
			МассивДанных.Добавить(Результат);
		Иначе
			МассивДанных = Результат.Получить("_embedded").Получить("items");
		КонецЕсли;
		
		Если МассивДанных.Количество() = 0 Тогда
			ТекстСообщения = "Данные для загрузки отсутствуют";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗагрузкаДанныхДлясопоставления Тогда
			Если ИндексЗагрузки = 10 Тогда
				ЗагрузитьПользователейДляСопоставления(МассивДанных);
			ИначеЕсли ИндексЗагрузки = 0 Или ИндексЗагрузки = 99 Тогда
				ЗагрузитьПоляКомпанийДляСопоставления(МассивДанных);
			ИначеЕсли ИндексЗагрузки = 1 Или ИндексЗагрузки = 88 Тогда
				ЗагрузитьПоляКонтактныхЛицДляСопоставления(МассивДанных);
			ИначеЕсли ИндексЗагрузки = 20 Тогда
				ЗагрузитьВидыВзаимодействий(МассивДанных);
			Иначе
				ЗагрузкаДанныхДляСопоставления(МассивДанных, ИндексЗагрузки);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = "Загрузка данных " + ТекущаяДатаСеанса();
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			
			ЗагрузкаДанныхВБазуДанных(МассивДанных, ИндексЗагрузки);
			
			ТекстСообщения = "Загрузка данных завершена " + ТекущаяДатаСеанса();
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПередатьДанныеДляЖурнала();
		
		СтраницаДанных = СтраницаДанных + 1;
		ЗагрузкаАктивна = (НЕ ЗагрузкаДанныхДлясопоставления И МассивДанных.Количество() = ЛимитЭлементовНаЗапрос);
	
	КонецЦикла;

КонецФункции

Процедура ЗагрузитьПользователейДляСопоставления(Массив)
	
	Для Каждого СтокаДанных Из Массив Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("ИДАмо", ВернутьПредставлениеИДАмо(СтокаДанных.Получить("id")));
		Структура.Вставить("ИмяАмо", СтокаДанных.Получить("name"));
		Структура.Вставить("ЭлАдресПользователя", СтокаДанных.Получить("email"));
		Структура.Вставить("Выбрано", Истина);
		
		НоваяСтрока = ПользователиСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПоляКонтактныхЛицДляСопоставления(Массив)
	
	// дополнительные поля находятся в custom_fields - массив
	Для Каждого СтокаДанных Из Массив Цикл
		Структура = Новый Структура;
		Структура.Вставить("ИДАмо", ВернутьПредставлениеИДАмо(СтокаДанных.Получить("id")));
		Структура.Вставить("ИмяАмо", СтокаДанных.Получить("name"));
		СписокЗначений = СтокаДанных.Получить("enums");
		Если НЕ СписокЗначений = Неопределено Тогда
			Структура.Вставить("ТИпЗначений", "СписокЗначений");
			Структура.Вставить("ТипЗначенийФизЛицо", "СписокЗначений");
		КонецЕсли;
		
		ТипЗначенияРеквизита = СтокаДанных.Получить("type");
		Если ТипЗначенияРеквизита = "checkbox" Тогда
			// Булево
			Структура.Вставить("ТИпЗначений", "Булево");
			Структура.Вставить("ТипЗначенийФизЛицо", "Булево");
			
		ИначеЕсли ТипЗначенияРеквизита = "text" Тогда
			// Строка
			Структура.Вставить("ТИпЗначений", "Строка");
			Структура.Вставить("ТипЗначенийФизЛицо", "Строка");
			
		ИначеЕсли ТипЗначенияРеквизита = "numeric" Тогда
			// Число
			Структура.Вставить("ТИпЗначений", "Число");
			Структура.Вставить("ТипЗначенийФизЛицо", "Число");
			
		ИначеЕсли ТипЗначенияРеквизита = "date" Тогда
			// Дата
			Структура.Вставить("ТИпЗначений", "Дата");
			Структура.Вставить("ТипЗначенийФизЛицо", "Дата");
			
		КонецЕсли;
		
		НоваяСтрока = КонтактныеЛицаСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
	КонецЦикла;
	
	КонтактныеЛицаСопоставление.Свернуть("ИдАмо,ИмяАмо,ТИпЗначений,ТипЗначенийФизЛицо");
	КонтактныеЛицаСопоставление.Сортировать("ИмяАмо");
	
КонецПроцедуры

Процедура ЗагрузитьПоляКомпанийДляСопоставления(Массив)
	
	// дополнительные поля находятся в custom_fields - массив
	Для Каждого СтокаДанных Из Массив Цикл
		Структура = Новый Структура;
		Структура.Вставить("ИДАмо", ВернутьПредставлениеИДАмо(СтокаДанных.Получить("id")));
		Структура.Вставить("ИмяАмо", СтокаДанных.Получить("name"));
		СписокЗначений = СтокаДанных.Получить("enums");
		Если НЕ СписокЗначений = Неопределено Тогда
			Структура.Вставить("ТИпЗначений", "СписокЗначений");
		КонецЕсли;
		
		ТипЗначенияРеквизита = СтокаДанных.Получить("type");
		Если ТипЗначенияРеквизита = 3 Тогда
			Структура.Вставить("ТИпЗначений", "Булево");
		КонецЕсли;
		
		НоваяСтрока = ПартнерыСопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
	КонецЦикла;
	
	ПартнерыСопоставление.Свернуть("ИдАмо,ИмяАмо,ТИпЗначений");
	ПартнерыСопоставление.Сортировать("ИмяАмо");
	
КонецПроцедуры

Процедура ЗагрузкаДанныхДляСопоставления(Массив, ИндексЗагрузки)
	
	// дополнительные поля находятся в custom_fields - массив
	Для Каждого СтокаДанных Из Массив Цикл
		
		Если ИндексЗагрузки = 2 Тогда
			МассивДопПолей = СтокаДанных.Получить("_embedded").Получить("statuses");
			СтрокаВерхнегоУровня = СделкиСопоставление.Добавить();
			СтрокаВерхнегоУровня.ИмяАмо = СтокаДанных.Получить("name");
			СтрокаВерхнегоУровня.ИдАмо = ВернутьПредставлениеИДАмо(СтокаДанных.Получить("id"));
			СтрокаВерхнегоУровня.Воронка = Истина;
			СтрокаВерхнегоУровня.Владелец = СтрокаВерхнегоУровня.ИмяАмо;
			СтрокаВерхнегоУровня.Выбрано = Истина;
		Иначе
			МассивДопПолей = СтокаДанных.Получить("custom_fields");
		КонецЕсли;
		Для Каждого ДопПоля Из МассивДопПолей Цикл
			
			Структура = Новый Структура;
			Если ИндексЗагрузки = 2 Тогда
				Структура.Вставить("ИДАмо", ВернутьПредставлениеИДАмо(ДопПоля.Получить("id")));
				Структура.Вставить("ИмяАмо", ДопПоля.Получить("name"));
				Структура.Вставить("Владелец", СтрокаВерхнегоУровня.ИмяАмо);
				Структура.Вставить("Выбрано", Истина);
			Иначе
				Структура.Вставить("ИДАмо", ВернутьПредставлениеИДАмо(ДопПоля.Получить("id")));
				Структура.Вставить("ИмяАмо", ДопПоля.Получить("name"));
			КонецЕсли;
			
			Если ИндексЗагрузки = 0 Тогда
				НоваяСтрока = ПартнерыСопоставление.Добавить();
			ИначеЕсли ИндексЗагрузки = 1 Тогда
				НоваяСтрока = КонтактныеЛицаСопоставление.Добавить();
			ИначеЕсли ИндексЗагрузки = 2 Тогда
				НоваяСтрока = СделкиСопоставление.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИндексЗагрузки = 0 Тогда
		ПартнерыСопоставление.Свернуть("ИдАмо,ИмяАмо");
	ИначеЕсли ИндексЗагрузки = 1 Тогда
		КонтактныеЛицаСопоставление.Свернуть("ИдАмо,ИмяАмо");
	ИначеЕсли ИндексЗагрузки = 2 Тогда
		СделкиСопоставление.Свернуть("ИдАмо,ИмяАмо,Воронка,Владелец,Выбрано");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузкаДанныхВБазуДанных(Массив, ДанныеДляЗагруки) Экспорт
	
	Если КофигурацияУТ = Неопределено Тогда
		ОпределитьКонфигурацию();
	КонецЕсли;
	
	Если ДанныеДляЗагруки = 0 Или ДанныеДляЗагруки = 99 Тогда
		
		ТекстСообщения = "------------------------------------------------" + Символы.ПС 
			+ "Выполнение операции : создание и обновление партнеров...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		ЗагрузкаПартнеровВБазуДанных(Массив);
		
		ТекстСообщения = "Загрузка партнеров завершена";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
	ИначеЕсли ДанныеДляЗагруки = 1 Или ДанныеДляЗагруки = 88 Тогда
		
		ТекстСообщения =  "------------------------------------------------" + Символы.ПС 
			+ "Выполнение операции : создание и обновление контактных лиц партнеров...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		ЗагрузкаКонтактныхЛицВБазуДанных(Массив);
		
		ТекстСообщения = "Загрузка контактных лиц партнеров завершена";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
	ИначеЕсли ДанныеДляЗагруки = 2 Или ДанныеДляЗагруки = 77 Тогда
		
		ТекстСообщения =  "------------------------------------------------" + Символы.ПС 
			+ "Выполнение операции : создание и обновление сделок(интересов) партнеров...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		ЗагрузкаСделокВБазуДанных(Массив);
		
		ТекстСообщения = "Загрузка Сделок(интересов) завершена";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
	ИначеЕсли ДанныеДляЗагруки = 3 Или ДанныеДляЗагруки = 66 Тогда
		
		ТекстСообщения =  "------------------------------------------------" + Символы.ПС 
			+ "Выполнение операции : создание и обновление взаимодействий с клиентами...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		ЗагрузкаЗадачВБазуДанных(Массив);
		
		ТекстСообщения = "Загрузка взаимодействий завершена";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
	ИначеЕсли ДанныеДляЗагруки = 4 ИЛИ ДанныеДляЗагруки = 5 ИЛИ ДанныеДляЗагруки = 6 Или ДанныеДляЗагруки = 55 Тогда
		
		ТекстСообщения =  "------------------------------------------------" + Символы.ПС 
			+ "Выполнение операции : создание и обновление партнеров...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
		ЗагрузитьПримечанияДляОбъектовБазыДанных(Массив);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПримечанияДляОбъектовБазыДанных(Массив)
	
	ТекстСообщения = "Загрузка дополнительных сведений...";
	ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
	
	Для Каждого Стр Из Массив Цикл
		
		Структура = Новый Структура;
		ПоказатьХодВыполнения(Массив.Найти(Стр) / Массив.Количество() * 10, "Загрузка дополнительных сведений...");
		
		ТипСобытия = Стр.Получить("note_type");
		// Код	Тип	Описание
		// 1	DEAL_CREATED	Сделка создана
		// 2	CONTACT_CREATED	Контакт создан
		// 3	DEAL_STATUS_CHANGED	Статус сделки изменен
		// 4	COMMON	Обычное примечание
		// 5 - файл  - в описании к амо нет информации об этом
		// 10	CALL_IN	Входящий звонок
		// 11	CALL_OUT	Исходящий звонок
		// 12	COMPANY_CREATED	Компания создана
		// 13	TASK_RESULT	Результат по задаче
		// 25	SYSTEM	Системное сообщение
		// 102	SMS_IN	Входящее смс
		// 103	SMS_OUT	Исходящее смс
		ТипСущности 	= Стр.Получить("element_type");
		ИДСущности  	= ВернутьПредставлениеИДАмо(Стр.Получить("element_id"));
		Автор			= ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("created_by")));
		Ответственный 	= ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("responsible_user_id")));
		
		Структура.Вставить("Автор", Автор);
		Структура.Вставить("Ответственный", Ответственный);
		
		Если ТипСущности = 1 Тогда
			ОбъектДанных = ПолучитьКонтактныеЛицаПартнераПоИД(ИДСущности, Неопределено);
		ИначеЕсли ТипСущности = 2 Тогда
			ОбъектДанных = Неопределено;
			Если ЗагруженныеИнтересы <> Неопределено Тогда
				ОбъектДанных = ЗагруженныеИнтересы.Получить(ИДСущности);
			КонецЕсли;
			Если ОбъектДанных = Неопределено Тогда
				ОбъектДанных = ПолучитьСделкуПоИД(ИДСущности);
			КонецЕсли;
		ИначеЕсли ТипСущности = 3 Тогда
			ОбъектДанных = ПолучитьПартнераПоИД(ИДСущности);
		КонецЕсли;
		
		Если  ТипСобытия = 1 ИЛИ ТипСобытия = 25 Тогда
			
			ИдПримечания = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
			ИдентификаторОбсужденияСистемыВзаимодействия = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдПримечания 
				+ "тест");
			Примечание = Стр.Получить("text");
			Структура.Вставить("ИдентификаторСообщения", ИДСущности);
			Структура.Вставить("ИдентификаторОбсуждения", ИдентификаторОбсужденияСистемыВзаимодействия);
			Структура.Вставить("Текст", Примечание);
			Структура.Вставить("Объект", ОбъектДанных);
			
		ИначеЕсли  ТипСобытия = 3  Тогда                                                                    
			
			ИдПримечания = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
			ИдентификаторОбсужденияСистемыВзаимодействия = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдПримечания 
				+ "тест");
			Параметры = Стр.Получить("params");
			Если Параметры <> Неопределено Тогда
				STATUS_NEW = Параметры.Получить("STATUS_NEW");
				STATUS_OLD = Параметры.Получить("STATUS_OLD");
				Примечание = Параметры.Получить("TEXT");
				
				СтрСтатуса = СделкиСопоставление.Найти(STATUS_NEW, "ИДАмо");
				Если СтрСтатуса <> Неопределено Тогда
					СтатусНовый =  СтрСтатуса.СостояниеИнтереса;
				КонецЕсли;
				СтрСтатуса = СделкиСопоставление.Найти(STATUS_OLD, "ИДАмо");
				Если СтрСтатуса <> Неопределено Тогда
					СтатусСтарый =  СтрСтатуса.СостояниеИнтереса;
				КонецЕсли;
				ТекстЗаполнения = Примечание + " " + СтатусНовый;
				Структура.Вставить("ИдентификаторСообщения", ИДСущности);
				Структура.Вставить("ИдентификаторОбсуждения", ИдентификаторОбсужденияСистемыВзаимодействия);
				Структура.Вставить("Текст", ТекстЗаполнения);
				Структура.Вставить("Объект", ОбъектДанных);
			КонецЕсли;
			
		ИначеЕсли  ТипСобытия = 4  Тогда                                                                    
			
			ИдПримечания = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
			ИдентификаторОбсужденияСистемыВзаимодействия = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдПримечания 
				+ "тест");
			Примечание = Стр.Получить("text");
			Структура.Вставить("ИдентификаторСообщения", ИДСущности);
			Структура.Вставить("ИдентификаторОбсуждения", ИдентификаторОбсужденияСистемыВзаимодействия);
			Структура.Вставить("Текст", Примечание);
			Структура.Вставить("Объект", ОбъектДанных);
			
			Попытка
				ВыполнитьРаботуСОповещениями(Структура);
			Исключение
				ТекстСообщения =
					"Данные по примечаниям не загружены в базу. Убедитесь, что все пользователи зарегестрированы в системе взаимодействия";
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			КонецПопытки;
			
		ИначеЕсли ТипСобытия = 5 Тогда
			
			ПутьДляЗагрузки = "/download/";
			
			ИмяФайлаДляЗагрузки = Стр.Получить("attachment");
			
			ИмяФайлаДляСохранения = Стр.Получить("params").Получить("TEXT");
			
			ИмяФайлаДляЗагрузки = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляЗагрузки);
			
			Попытка
				ПрисоединитьФайлКобъекту(ОбъектДанных, ИмяФайлаДляЗагрузки, ИмяФайлаДляСохранения, ПутьДляЗагрузки);
				Текстсообщения = "Дополнительные файл(ы): " + ИмяФайлаДляСохранения + " добавлены в объект " + ОбъектДанных;
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Исключение
				Текстсообщения = "Возникли ошибки при записи файла к объекту: " + ОбъектДанных + Символы.ПС + ОписаниеОшибки();
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВидыВзаимодействий(Массив)
	
	Для Каждого Стр Из Массив Цикл
		
		ИД = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
		
		Наименование = Стр.Получить("name");
		
		СтрТабЧасти = ВидыВзаимодействийСопоставление.Найти("ИД", "ИдАмо");
		                                   
		Если НЕ СтрТабЧасти = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВидыВзаимодействийСопоставление.Добавить();
		
		НоваяСтрока.ИдАмо = ИД;
		НоваяСтрока.ИмяАмо = Наименование;
		НоваяСтрока.ВидыВзаимодействий = ПолучитьВидыВзаимодействийПоИнтересу(Наименование);
		Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию(Наименование);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьВидыВзаимодействийПоИнтересу(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВидыВзаимодействий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
	|ГДЕ
	|	CRM_ВидыВзаимодействий.Наименование = &Наименование
	|	И CRM_ВидыВзаимодействий.ВидДела = &ВидДела";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка();
	КонецЕсли;

КонецФункции

Процедура ЗагрузкаЗадачВБазуДанных(Массив)
	
	Для Каждого Стр Из Массив Цикл
		
		ПоказатьХодВыполнения(Массив.Найти(Стр) / Массив.Количество() * 10, "Загрузка взаимодействий по сделкам...");
		
		ТипЭлемента = Стр.Получить("entity_type");
		ТипСобытия  = ВернутьПредставлениеИДАмо(Стр.Получить("task_type_id"));
		СтруктураДанных = Новый Структура;
		
		Попытка
			СтрокаТЗ = ВидыВзаимодействийСопоставление.Найти(ТипСобытия, "ИдАмо");
			СтруктураДанных.Вставить("ВидВзаимодействия", СтрокаТЗ.ВидыВзаимодействий);
		Исключение
			СтруктураДанных.Вставить("ВидВзаимодействия", Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка());
		КонецПопытки;
		
		СтруктураДанных.Вставить("ИДЗадачи", ВернутьПредставлениеИДАмо(Стр.Получить("id")));
		
		СтруктураДанных.Вставить("ИДОбъекта", ВернутьПредставлениеИДАмо(Стр.Получить("entity_id")));
		
		СтруктураДанных.Вставить("Завершено", Стр.Получить("is_completed"));
		
		Результат = Стр.Получить("result");
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			ТекстРезультата = Результат.Получить("text");
		Иначе	
			ТекстРезультата = "";
		КонецЕсли;
		
		СтруктураДанных.Вставить("Результат", ТекстРезультата);
		
		СтруктураДанных.Вставить("Содержание", Стр.Получить("text"));
		
		СтруктураДанных.Вставить("Автор",
			 ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("created_by"))));
		
		СтруктураДанных.Вставить("Ответственный",
			 ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("responsible_user_id"))));
		
		СтруктураДанных.Вставить("Дата", TimestampВДату(Стр.Получить("created_at")));
		СтруктураДанных.Вставить("ДатаЗавершенияВзаимодействия", TimestampВДату(Стр.Получить("complete_till_at")));
		СтруктураДанных.Вставить("ПлановаяДата", TimestampВДату(Стр.Получить("created_at")));
		СтруктураДанных.Вставить("ПлановаяДатаЗавершение", TimestampВДату(Стр.Получить("complete_till_at")));
		
		СоздатьВзаимодействиеДляОбъекта(ТипЭлемента, СтруктураДанных, ТипСобытия);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВзаимодействиеДляОбъекта(ТипДанных, Структура, Типсобытия)
	
	ВидВзаимодействия = Структура.ВидВзаимодействия;
	
	Если Структура.Завершено Тогда
		СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
	Иначе
		СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано;
	КонецЕсли;
	
	ИДОбъекта = Структура.ИдОбъекта;
	
	Структура.Вставить("Организация", Организация);
	Структура.Вставить("СтатусВзаимодействия", СтатусВзаимодействия);
	
	Если ЗначениеЗаполнено(Структура.Содержание) Тогда
		Структура.Вставить("Тема", Структура.Содержание);
	Иначе
		Структура.Вставить("Тема", Строка(ВидВзаимодействия));
	КонецЕсли;
	
	Если ТипДанных = "contacts" Тогда
		ОбъектДанных = ПолучитьКонтактныеЛицаПартнераПоИД(ИдОбъекта, Неопределено);
	ИначеЕсли ТипДанных = "leads" Тогда
		Если ЗагруженныеИнтересы <> Неопределено Тогда
			ОбъектДанных = ЗагруженныеИнтересы.Получить(ИдОбъекта);
		КонецЕсли;
		Если ОбъектДанных = Неопределено Тогда
			ОбъектДанных = ПолучитьСделкуПоИД(ИдОбъекта);
		КонецЕсли;
		Если НЕ ОбъектДанных = Неопределено Тогда
			Структура.Вставить("ДокументОснование", ОбъектДанных);
			Структура.Вставить("Партнер", ОбъектДанных.Партнер);
			Структура.Вставить("КонтактноеЛицо", ОбъектДанных.КонтактноеЛицо);
		КонецЕсли;
		
	ИначеЕсли ТипДанных = "companies" Тогда
		ОбъектДанных = ПолучитьПартнераПоИД(ИДОбъекта);
		Если ОбъектДанных = Неопределено Тогда
		Структура.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Иначе
		Структура.Вставить("Партнер", ОбъектДанных);
		КонецЕсли;
	КонецЕсли;
	
	ДокументНайден = Истина;
	
	ДокСсылка = ПолучитьВзаимодействиеПоИд(Структура.ИдЗадачи);
	Если ДокСсылка = Неопределено Тогда
		ДокументНайден = Ложь;
	КонецЕсли;
	
	Если ПерезаписыватьДанные И ДокументНайден Тогда
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		ДокОбъект.CRM_Теги.Очистить();
	ИначеЕсли НЕ ПерезаписыватьДанные И ДокументНайден Тогда
		ТекстСообщения = "Взаимодействие по сделке с ид " + Структура.ИдЗадачи 
			+ " уже существует в базе данных, обновление производиться не будет. Продолжение загрузки...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Возврат;
	ИначеЕсли  НЕ ПерезаписыватьДанные И НЕ ДокументНайден Тогда
		ДокОбъект = Документы.CRM_Взаимодействие.СоздатьДокумент();
	Иначе
		ДокОбъект = Документы.CRM_Взаимодействие.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.Заполнить(Структура);
	
	Попытка
		ДокОбъект.Записать();
		ТекстСообщения = "Создано взаимодействие " + ДокОбъект;
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, ДокОбъект);
	Исключение
		Текстсообщения = ОписаниеОшибки();
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
	КонецПопытки;
	
	Если Не ДокОбъект = Неопределено Тогда
		
		ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДВзаимодействиеАмо");
		
		ДопРеквизитОтсутствует = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(ДокОбъект.Ссылка, ПВХИД);
		
		ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
		ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
			 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
		
		НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
		НоваястрТаблицы.Свойство = ПВХИД;
		НоваястрТаблицы.Значение = Структура.ИДЗадачи;
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокОбъект.Ссылка, ТаблицаСвойствИЗначений);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузкаКонтактныхЛицВБазуДанных(Массив)
	
	ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
	ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
		 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
	
	Для Каждого Стр Из Массив Цикл
		
		ПоказатьХодВыполнения(Массив.Найти(Стр) / Массив.Количество() * 10,
			 "Загрузка данных по контактным лицам партнеров...");
		
		ТаблицаСвойствИЗначений.Очистить();
		
		ИДКонтактногоЛица = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
		
		companies = Стр.Получить("_embedded").Получить("companies");
		Если ТипЗнч(companies) = Тип("Массив") И companies.Количество() > 0 Тогда
			ИДКомпании = ВернутьПредставлениеИДАмо(Стр.Получить("_embedded").Получить("companies")[0].Получить("id"));
		Иначе
		    ИДКомпании = "";
		КонецЕсли;
		
		Если ИДКомпании = Неопределено ИЛИ ИДКомпании = "" Тогда
			ПартнерСсылка = Неопределено;
		Иначе
			ПартнерСсылка = ПолучитьПартнераПоИД(ИДКомпании);
		КонецЕсли;
		
		Если ПартнерСсылка = Неопределено И СоздаватьФизЛиц Тогда
			// создаем физических лиц
			Если НЕ ИДКонтактногоЛица = Неопределено ИЛИ НЕ ИДКонтактногоЛица = "" Тогда
				ПартнерСсылка = ПолучитьПартнераПоИД(ИДКонтактногоЛица);
			КонецЕсли;
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("ПартнерСсылка", ПартнерСсылка);
			СтруктураЗаполнения.Вставить("ИДПартнер", ИДКонтактногоЛица);
			ОтветственныйПользователь =
				ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("responsible_user_id")));
			СтруктураЗаполнения.Вставить("Наименование", Стр.Получить("name"));
			СтруктураЗаполнения.Вставить("ОсновнойМенеджер", ОтветственныйПользователь);
			СтруктураЗаполнения.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
			CRM_ДатаРегистрацииКомпании = ?(Стр.Получить("created_at") <> Неопределено,
				 TimestampВДату(Стр.Получить("created_at")),
				 ТекущаяДатаСеанса());
			СтруктураЗаполнения.Вставить("ДатаРегистрации", CRM_ДатаРегистрацииКомпании);
			
			ПартнерОбъект = ЗаполнитьПартнераВБазеДанных(СтруктураЗаполнения);
			
			Если КофигурацияУТ Тогда
				МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
				
				Контрагент = МодульУправлениеДоступом.ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерОбъект.Ссылка);
				Если Контрагент.ПУстая() Тогда
					КонтрагентОбъект = Справочники["Контрагенты"].СоздатьЭлемент();
				Иначе
					КонтрагентОбъект = Контрагент.ПолучитьОбъект();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(КонтрагентОбъект, СтруктураЗаполнения);
				КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления["ЮридическоеФизическоеЛицо"].ФизическоеЛицо;
			КонецЕсли;

			МассивРеквизитов = Стр.Получить("custom_fields_values");
			
			Если МассивРеквизитов <> Неопределено Тогда
				Для Каждого СтрокаРеквизит Из МассивРеквизитов Цикл
					
					// Нужна проверка на контактную информацию
					ИДРеквизита = ВернутьПредставлениеИДАмо(СтрокаРеквизит.Получить("field_id"));
					
					ЗначениеРеквизита = СтрокаРеквизит.получить("values")[0].Получить("value");
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ИдАмо", ИДРеквизита);
					
					Если СоздаватьФизЛиц Тогда
						НайденныеСтроки = КонтактныеЛицаСопоставление.НайтиСтроки(СтруктураПоиска);
					Иначе
						НайденныеСтроки = ПартнерыСопоставление.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						Продолжить;
					Иначе
						СтрокаДанные = НайденныеСтроки[0];
						РеквизитДляПоиска = СтрокаДанные.ИмяРеквизита;
						Если НЕ ЗначениеЗаполнено(РеквизитДляПоиска) Тогда
							Продолжить;
						КонецЕсли;
						
						// Если КонтактнаяИнформация, то добавляем данные в ТЧ.КонтактнаяИнформация
						Если СтрокаДанные.КонтактнаяИнформация Тогда
							
							ОбъектXDTOКИ = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOПоПредставлению(ЗначениеРеквизита,
								 СтрокаДанные.ТипКонтактнойИнформации);
							ЗначенияПолей = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
							CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПартнерОбъект,
								 ЗначенияПолей, СтрокаДанные.ИмяРеквизита, СтрокаДанные.ТипКонтактнойИнформации, , ,
								 Истина);
						ИначеЕсли СтрокаДанные.ДопРеквизит Тогда
							
							ПВХДоп = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", РеквизитДляПоиска);
							НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
							НоваястрТаблицы.Свойство = ПВХДоп;
							Если СтрокаДанные.ТипЗначений = "Булево" Тогда
								Если ЗначениеРеквизита = "1" Тогда
									ЗначениеРеквизита = Истина;
								Иначе
									ЗначениеРеквизита = Ложь;
								КонецЕсли;
							ИначеЕсли СтрокаДанные.ТипЗначений = "СписокЗначений" Тогда
								ДопЗначениеРеквизита = ПолучитьЗначениеСвойствПВХ(ПВХДоп, ЗначениеРеквизита);
								ЗначениеРеквизита = ДопЗначениеРеквизита;
							КонецЕсли;
							
							НоваястрТаблицы.Значение = ЗначениеРеквизита;
							
						Иначе
							
							ЗаписываемРеквизитОбъектаПоТипу(ПартнерОбъект, РеквизитДляПоиска, ЗначениеРеквизита);
							Если КофигурацияУТ Тогда
								ЗаписываемРеквизитОбъектаПоТипу(КонтрагентОбъект, РеквизитДляПоиска, ЗначениеРеквизита);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				ПартнерОбъект.Записать();
				
				Текстсообщения = "Партнер: " + ПартнерОбъект + " записан в базу данных. ИД партнера: " + ИДКомпании;
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, ПартнерОбъект);
				Если КофигурацияУТ Тогда
					КонтрагентОбъект.Партнер = ПартнерОбъект.Ссылка;
					КонтрагентОбъект.записать();
					Текстсообщения = "Контрагент: " + ПартнерОбъект + " записан в базу данных. ИД Контрагента: " + ИДКомпании;
					ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, КонтрагентОбъект);
				КонецЕсли;

			Исключение
				Текстсообщения = "Не удалось записать партнера по причине " + ОписаниеОшибки();
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);			
			КонецПопытки;
			
			Если НЕ ПартнерОбъект = Неопределено Тогда
				
				ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдПартнерыАмо");
				
				ДопРеквизитОтсутствует = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(ПартнерОбъект.Ссылка, ПВХИД);
				
				Если Не ДопРеквизитОтсутствует Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
				НоваястрТаблицы.Свойство = ПВХИД;
				Если ИДКомпании = Неопределено ИЛИ ИДКомпании = "" Тогда
					Если СоздаватьФизЛиц И ЗначениеЗаполнено(ИДКонтактногоЛица) Тогда
						НоваястрТаблицы.Значение = ИДКонтактногоЛица;
					КонецЕсли;
				Иначе
					НоваястрТаблицы.Значение = ИДКомпании;
				КонецЕсли;
				
				УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ПартнерОбъект.Ссылка, ТаблицаСвойствИЗначений);
				
				Продолжить;
				
			КонецЕсли;
			
		ИначеЕсли ПартнерСсылка = Неопределено Тогда
			ТекстСообщения = "Загрузка контактных лиц. Партнер с ид " + ИДКомпании 
				+ " не найден в базе данных. Продолжение загрузки...";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Продолжить;
		КонецЕсли;
		
		КЛНайден = Истина;
		
		КЛСсылка = ПолучитьКонтактныеЛицаПартнераПоИД(ИДКонтактногоЛица, ПартнерСсылка);
		Если НЕ ЗначениеЗаполнено(КЛСсылка) Тогда
			// записываем в журнал для дальнейшего вывода
			КЛНайден = Ложь;
		КонецЕсли;
		
		Если НЕ ПерезаписыватьДанные И КЛНайден Тогда
			КЛОбъект = КЛСсылка.ПолучитьОбъект();
			КЛОбъект.КонтактнаяИнформация.Очистить();
		ИначеЕсли ПерезаписыватьДанные И КЛНайден Тогда
			ТекстСообщения = "Контактное лицо с ид " + ИДКонтактногоЛица 
				+ " уже существует в базе данных, обновление производиться не будет. Продолжение загрузки...";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Продолжить;
		ИначеЕсли НЕ ПерезаписыватьДанные И НЕ КЛНайден Тогда
			КЛОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		Иначе
			КЛОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		КонецЕсли;
		
		КЛОбъект.Владелец = ПартнерСсылка;
		ФИООбщее = Стр.Получить("name");
		
			СписокФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИООбщее);
		
		КЛОбъект.Наименование = ФИООбщее;
		КЛОбъект.CRM_Имя = СписокФИО.Имя;
		КЛОбъект.CRM_Отчество = СписокФИО.Отчество;
		КЛОбъект.CRM_Фамилия = СписокФИО.Фамилия;
		
		МассивРеквизитов = Стр.Получить("custom_fields_values");
		
		Если МассивРеквизитов <> Неопределено Тогда
			Для Каждого СтрокаРеквизит Из МассивРеквизитов Цикл
				
				ИДРеквизита = ВернутьПредставлениеИДАмо(СтрокаРеквизит.Получить("field_id"));
				
				ЗначениеРеквизита = СтрокаРеквизит.получить("values")[0].Получить("value");
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИдАмо", ИДРеквизита);
				
				НайденныеСтроки = КонтактныеЛицаСопоставление.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				Иначе
					СтрокаДанные = НайденныеСтроки[0];
					РеквизитДляПоиска = СтрокаДанные.ИмяРеквизита;
					Если НЕ ЗначениеЗаполнено(РеквизитДляПоиска) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаДанные.КонтактнаяИнформация Тогда
						
						ОбъектXDTOКИ = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOПоПредставлению(ЗначениеРеквизита,
							 СтрокаДанные.ТипКонтактнойИнформации);
						ЗначенияПолей = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
						CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(КЛОбъект, ЗначенияПолей,
							 СтрокаДанные.ИмяРеквизита, СтрокаДанные.ТипКонтактнойИнформации, , ,
							 Истина);
						
					ИначеЕсли СтрокаДанные.ДопРеквизит Тогда
						
						ПВХДоп = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", РеквизитДляПоиска);
						НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
						НоваястрТаблицы.Свойство = ПВХДоп;
						
						Если СтрокаДанные.ТипЗначений = "Булево" Тогда
							Если ЗначениеРеквизита = "1" Тогда
								ЗначениеРеквизита = Истина;
							Иначе
								ЗначениеРеквизита = Ложь;
							КонецЕсли;
						ИначеЕсли СтрокаДанные.ТипЗначений = "СписокЗначений" Тогда
							ДопЗначениеРеквизита = ПолучитьЗначениеСвойствПВХ(ПВХДоп, ЗначениеРеквизита);
							ЗначениеРеквизита = ДопЗначениеРеквизита;
						КонецЕсли;
						
						НоваястрТаблицы.Значение = ЗначениеРеквизита;
						
					Иначе
						
						КЛОбъект[РеквизитДляПоиска] = ЗначениеРеквизита;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			КЛОбъект.Записать();
			Текстсообщения = "Контактное лицо " + КЛОбъект + " для партнера " + КЛОбъект.Владелец + " записано в базу";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, КЛОбъект);
		Исключение
			Текстсообщения = "Не удалось записать партнера по причине " + ОписаниеОшибки();
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		КонецПопытки;
		
		Если НЕ КЛОбъект = Неопределено Тогда
			
			ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
				 "ИДКонтактныеЛицаПартнеровАмо");
			
			ДопРеквизитОтсутствует = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(КЛОбъект.Ссылка, ПВХИД);
			
			Если Не ДопРеквизитОтсутствует Тогда
				Продолжить;
			КонецЕсли;
			
			НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
			НоваястрТаблицы.Свойство = ПВХИД;
			НоваястрТаблицы.Значение = ИДКонтактногоЛица;
			
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(КЛОбъект.Ссылка, ТаблицаСвойствИЗначений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьПартнераВБазеДанных(Структура)
	
	ПартнерНайден = Истина;
	
	Если Структура.ПартнерСсылка = Неопределено Тогда
		ПартнерНайден = Ложь;
	КонецЕсли;
	
	Если НЕ ПерезаписыватьДанные И ПартнерНайден Тогда
		ПартнерОбъект = Структура.ПартнерСсылка.ПолучитьОбъект();
		ПартнерОбъект.КонтактнаяИнформация.Очистить();
	ИначеЕсли ПерезаписыватьДанные И ПартнерНайден Тогда
		ТекстСообщения = "Партнер с ид " + Структура.ИДПартнер 
			+ " уже существует в базе данных, обновление производиться не будет. Продолжение загрузки...";
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		Возврат Неопределено;
	ИначеЕсли НЕ ПерезаписыватьДанные И НЕ ПартнерНайден Тогда
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	Иначе
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПартнерОбъект, Структура);
	
	Если ПартнерОбъект.CRM_ТипыОтношений.Количество() = 0 Тогда
		СтрТип = ПартнерОбъект.CRM_ТипыОтношений.Добавить();
		СтрТип.ТипОтношений = Справочники.CRM_ТипыОтношений.Покупатель;
	КонецЕсли;
	
	Возврат ПартнерОбъект;
	
КонецФункции

// Все дополнительныеРеквизиты строятся по принципу :
// наименование реквизита в Амо + "Амо"
// например "ИДАмо"
Процедура ЗагрузкаПартнеровВБазуДанных(Массив)
	
	ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
	ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
		 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
	
	// Если в последующем будет дозагрузка , будет поиск по доп. реквизиту ИД
	Для Каждого Стр Из Массив Цикл
		
		ТаблицаСвойствИЗначений.Очистить();
		
		ПоказатьХодВыполнения(Массив.Найти(Стр) / Массив.Количество() * 10, "Загрузка данных по партнерам...");
		
		ИДПартнер = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
		
		ПартнерНайден = Истина;
		
		ПартнерСсылка = ПолучитьПартнераПоИД(ИДПартнер);
		
		Если ПартнерСсылка = Неопределено Тогда
			НаименованиеПартнера = ВернутьПредставлениеИДАмо(Стр.Получить("name"));
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Партнеры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Наименование = &Наименование";
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеПартнера);
			РезультатЗапроса = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапрос(Запрос);
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				// Проверим есть ли уже доп реквизит id.
				ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдПартнерыАмо");
				
				ЗначениеСвойстваИдПартнерыАмо = УправлениеСвойствами.ЗначениеСвойства(ВыборкаДетальныеЗаписи.Ссылка, ПВХИД); 
				
				Если Не ЗначениеЗаполнено(ЗначениеСвойстваИдПартнерыАмо) Тогда 
					ПартнерСсылка = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ПартнерСсылка", ПартнерСсылка);
		СтруктураЗаполнения.Вставить("ИДПартнер", ИДПартнер);
		ОтветственныйПользователь =
			ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("responsible_user_id")));
		СтруктураЗаполнения.Вставить("Наименование", Стр.Получить("name"));
		СтруктураЗаполнения.Вставить("ОсновнойМенеджер", ОтветственныйПользователь);
		СтруктураЗаполнения.Вставить("CRM_ДатаРегистрацииКомпании", ДатуВTimestamp(Стр.Получить("created_at")));
		СтруктураЗаполнения.Вставить("Клиент", Истина);
		СтруктураЗаполнения.Вставить("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.Компания);
		
		ПартнерОбъект = ЗаполнитьПартнераВБазеДанных(СтруктураЗаполнения);
		
		Если ПартнерОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КофигурацияУТ Тогда
			МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
			
			Контрагент = МодульУправлениеДоступом.ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерОбъект.Ссылка);
			Если Контрагент.ПУстая() Тогда
				КонтрагентОбъект = Справочники["Контрагенты"].СоздатьЭлемент();
			Иначе
				КонтрагентОбъект = Контрагент.ПолучитьОбъект();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КонтрагентОбъект, СтруктураЗаполнения);
			КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления["ЮридическоеФизическоеЛицо"].ЮридическоеЛицо;
		КонецЕсли;

		Теги = Стр.Получить("_embedded").Получить("tags");
		
		МассивРеквизитов = Стр.Получить("custom_fields_values");
		
		Если МассивРеквизитов <> Неопределено Тогда
			Для Каждого СтрокаРеквизит Из МассивРеквизитов Цикл
				
				ИДРеквизита = ВернутьПредставлениеИДАмо(СтрокаРеквизит.Получить("field_id"));
				
				ЗначениеРеквизита = СтрокаРеквизит.получить("values")[0].Получить("value");
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ИдАмо", ИДРеквизита);
				
				НайденныеСтроки = ПартнерыСопоставление.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				Иначе
					СтрокаДанные = НайденныеСтроки[0];
					РеквизитДляПоиска = СтрокаДанные.ИмяРеквизита;
					Если НЕ ЗначениеЗаполнено(РеквизитДляПоиска) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаДанные.КонтактнаяИнформация Тогда
						
						ОбъектXDTOКИ = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOПоПредставлению(ЗначениеРеквизита,
							 СтрокаДанные.ТипКонтактнойИнформации);
						ЗначенияПолей = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
						CRM_УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПартнерОбъект, ЗначенияПолей,
							 СтрокаДанные.ИмяРеквизита , СтрокаДанные.ТипКонтактнойИнформации, , ,
							 Истина);
					ИначеЕсли СтрокаДанные.ДопРеквизит Тогда
						
						ПВХДоп = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", РеквизитДляПоиска);
						НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
						НоваястрТаблицы.Свойство = ПВХДоп;
						Если СтрокаДанные.ТипЗначений = "Булево" Тогда
							Если ЗначениеРеквизита = "1" Тогда
								ЗначениеРеквизита = Истина;
							Иначе
								ЗначениеРеквизита = Ложь;
							КонецЕсли;
						ИначеЕсли СтрокаДанные.ТипЗначений = "СписокЗначений" Тогда
							ДопЗначениеРеквизита = ПолучитьЗначениеСвойствПВХ(ПВХДоп, ЗначениеРеквизита);
							ЗначениеРеквизита = ДопЗначениеРеквизита;
						КонецЕсли;
						
						НоваястрТаблицы.Значение = ЗначениеРеквизита;
						
					Иначе
						
						ЗаписываемРеквизитОбъектаПоТипу(ПартнерОбъект, РеквизитДляПоиска, ЗначениеРеквизита);
						Если КофигурацияУТ Тогда
							ЗаписываемРеквизитОбъектаПоТипу(КонтрагентОбъект, РеквизитДляПоиска, ЗначениеРеквизита);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ПартнерОбъект.Записать();
			Текстсообщения = "Партнер: " + ПартнерОбъект + " записан в базу данных. ИД партнера: " + ИДПартнер;
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, ПартнерОбъект);
			Если КофигурацияУТ Тогда
				КонтрагентОбъект.Партнер = ПартнерОбъект.Ссылка;
				КонтрагентОбъект.записать();
				Текстсообщения = "Контрагент: " + ПартнерОбъект + " записан в базу данных. ИД Контрагента: " + ИДПартнер;
				ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, КонтрагентОбъект);
				
			КонецЕсли;	
		Исключение
			Текстсообщения = "Не удалось записать партнера по причине " + ОписаниеОшибки();
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПартнерОбъект.ОсновнойМенеджер.Подразделение) Тогда
			
			ЗаписатьОбновитьТегиВОбъекте(ПартнерОбъект, Теги, ПартнерОбъект.ОсновнойМенеджер.Подразделение);
			
		КонецЕсли;
		
		Если НЕ ПартнерОбъект = Неопределено Тогда
			
			ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдПартнерыАмо");
			
			ДопРеквизитОтсутствует = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(ПартнерОбъект.Ссылка, ПВХИД);
			
			Если Не ДопРеквизитОтсутствует Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
			НоваястрТаблицы.Свойство = ПВХИД;
			НоваястрТаблицы.Значение = ИДПартнер;
			
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ПартнерОбъект.Ссылка, ТаблицаСвойствИЗначений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоздатьПотенциальногоКлиента(Структура)
	
	Наименование = "НЕТ КОНТАКТА: " + Формат(Структура.Дата, "ДФ=dd.MM.yyyy") + " " + Структура.Тема;
	
	Потенциальный = Справочники.CRM_ПотенциальныеКлиенты.НайтиПоНаименованию(Наименование);
	
	Если Потенциальный.Пустая() Тогда
		
		ПотенциальныйОбъект = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
		
		ПотенциальныйОбъект.Наименование = Наименование;
		
		ПотенциальныйОбъект.Записать();
		
		Потенциальный = ПотенциальныйОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Потенциальный;
	
КонецФункции

Процедура ЗагрузкаСделокВБазуДанных(Массив)
	
	ТЗСделки = СделкиСопоставление.Выгрузить();	
	Отбор = Новый Структура;
	Отбор.Вставить("Выбрано", Истина);
	Отбор.Вставить("Воронка", Истина);	
	КопияТЗСделки = ТЗСделки.Скопировать(Отбор);	
	
	ЗагруженныеИнтересы = Новый Соответствие;
	Для Каждого Стр Из Массив Цикл
		
		ПоказатьХодВыполнения(Массив.Найти(Стр) / Массив.Количество() * 10, "Загрузка данных по сделкам...");
		
		СтруктураЗагрузки = Новый Структура;
		
		ИДСделка = ВернутьПредставлениеИДАмо(Стр.Получить("id"));
		
		ДокСсылка = ПолучитьСделкуПоИД(ИДСделка);
		
		ДокументНайден = Истина;
		
		Если ДокСсылка = Неопределено Тогда
			ДокументНайден = Ложь;
		КонецЕсли;
		
		Если НЕ ПерезаписыватьДанные И ДокументНайден Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.CRM_Теги.Очистить();
		ИначеЕсли ПерезаписыватьДанные И ДокументНайден Тогда
			ТекстСообщения = "Сделка с ид " + ИДСделка 
				+ " уже существует в базе данных, обновление производиться не будет. Продолжение загрузки...";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Продолжить;
		ИначеЕсли НЕ ПерезаписыватьДанные И НЕ ДокументНайден Тогда
			ДокОбъект = Документы.CRM_Интерес.СоздатьДокумент();
		Иначе
			ДокОбъект = Документы.CRM_Интерес.СоздатьДокумент();
		КонецЕсли;
		
		companies = Стр.Получить("_embedded").Получить("companies");
		Если ТипЗнч(companies) = Тип("Массив") И companies.Количество() > 0 Тогда
			ИДПартнера = ВернутьПредставлениеИДАмо(companies[0].Получить("id"));
		Иначе
		    ИДПартнера = "";
		КонецЕсли;
		ИнформацияОКонтЛице = Стр.Получить("_embedded").Получить("contacts");
		
		СтруктураЗагрузки.Вставить("Организация", Организация);
		СтруктураЗагрузки.Вставить("Тема", Стр.Получить("name"));
		
		СтруктураЗагрузки.Вставить("Дата", TimestampВДату(Стр.Получить("created_at")));
		СтруктураЗагрузки.Вставить("Ответственный",
				ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("responsible_user_id"))));
		
		Автор = ПолучитьОтветственногоПользователя(ВернутьПредставлениеИДАмо(Стр.Получить("created_by")));

		ЕстьПотенциальный = Ложь;
		
		Если ИнформацияОКонтЛице = Неопределено Тогда
			
		ИначеЕсли ТипЗнч(ИнформацияОКонтЛице) = Тип("Массив") И ИнформацияОКонтЛице.Количество() > 0 Тогда
			ИДКонтЛица = ИнформацияОКонтЛице[0].Получить("id");
		Иначе
			ИДКонтЛица = "";
		КонецЕсли;
		
		ИДКонтЛица = ВернутьПредставлениеИДАмо(ИДКонтЛица);
		
		Если Не ИДПартнера = "" Тогда
			ПартнерСсылка = ПолучитьПартнераПоИД(ИДПартнера);
			Если ПартнерСсылка = Неопределено Тогда
				Ресурс = "/api/v4/companies/" + ИДПартнера;	
				ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 99, Ложь);
				
				ПартнерСсылка = ПолучитьПартнераПоИД(ИДПартнера);
			КонецЕсли;
		Иначе
			ПартнерСсылка = ПолучитьПартнераПоИД(ИДКонтЛица);
		КонецЕсли;

		Если Не ИДКонтЛица = "" Тогда
			Ресурс = "/api/v4/contacts/" + ИДКонтЛица;	
			ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 88, Ложь);
			
			Если ПартнерСсылка = Неопределено Тогда
				ПартнерСсылка = ПолучитьПартнераПоИД(ИДКонтЛица);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПартнерСсылка = Неопределено Тогда
			
			СтруктураЗагрузки.Вставить("Партнер", ПартнерСсылка);
			КЛСсылка = ПолучитьКонтактныеЛицаПартнераПоИД(ИДКонтЛица, ПартнерСсылка);
			
			Если НЕ КЛСсылка = Неопределено Тогда
				
				СтруктураЗагрузки.Вставить("КонтактноеЛицо", КЛСсылка);
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		Иначе
			ЕстьПотенциальный = Истина;
			ПотенциальныйКлиент = ПолучитьСоздатьПотенциальногоКлиента(СтруктураЗагрузки);
			СтруктураЗагрузки.Вставить("ПотенциальныйКлиент", ПотенциальныйКлиент);
			
		КонецЕсли;
		
		Теги = Стр.Получить("_embedded").Получить("tags");
		Если ЗначениеЗаполнено(Автор.Подразделение) Тогда
			ЗаписатьОбновитьТегиВОбъекте(ДокОбъект, Теги, Автор.Подразделение);
		КонецЕсли;
		СтруктураЗагрузки.Вставить("Автор",			Автор);
		СтруктураЗагрузки.Вставить("Подразделение",	СтруктураЗагрузки.Ответственный.Подразделение);
		СтруктураЗагрузки.Вставить("Офис",			СтруктураЗагрузки.Подразделение.CRM_офис);
		СтруктураЗагрузки.Вставить("ТипУслуги",		ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПоставкаТоварыУслуги"));
		
		СтруктураЗагрузки.Вставить("ОжидаемаяВыручка", Стр.Получить("price"));
		
		ИДСостояниеСделки = ВернутьПредставлениеИДАмо(Стр.Получить("status_id"));
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдАмо", ИДСостояниеСделки);
		НайденныеСтроки = СделкиСопоставление.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		Иначе
			состояниеИнтереса = НайденныеСтроки[0].СостояниеИнтереса;
		КонецЕсли;
		
		СтруктураЗагрузки.Вставить("СостояниеИнтереса", состояниеИнтереса);
		
		ДокОбъект.Заполнить(СтруктураЗагрузки);
		
		ДокОбъект.Дата = СтруктураЗагрузки.Дата;
		ДокОбъект.ОжидаемаяВыручка = СтруктураЗагрузки.ОжидаемаяВыручка;
		
		Попытка
			ДокОбъект.Записать();
			Текстсообщения = "Сделка записана в базу данных " + ДокОбъект;
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, ДокОбъект);
		Исключение
			Текстсообщения = "Не удалось записать сделку по причине " + ОписаниеОшибки();
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
			Продолжить;
		КонецПопытки;
		
		Если ЗагружатьЗадачи Тогда
			Ресурс = "/api/v4/tasks";
			ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 66, Ложь, 1, ИДСделка);
		КонецЕсли;	
			
		Если События Тогда
			Ресурс = "/api/v4/notes";
			// примечания к сделкам
			ОтветСервера = ВыполнитьЗагрузкуДанных(Ресурс, 55, Ложь, 1, ИДСделка);
		КонецЕсли;
		
		ПВХИД = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИДСделкаАмо");
		
		ТаблицаСвойствИЗначений = Новый ТаблицаЗначений;
		ТаблицаСвойствИЗначений.Колонки.Добавить("Свойство",
			 Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		ТаблицаСвойствИЗначений.Колонки.Добавить("Значение");
		
		НоваястрТаблицы = ТаблицаСвойствИЗначений.Добавить();
		НоваястрТаблицы.Свойство = ПВХИД;
		НоваястрТаблицы.Значение = ИДСделка;
		
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокОбъект.Ссылка, ТаблицаСвойствИЗначений);
		
		ПолучитьСоздатьЗадачуНаОбследованиеЗагрузкиИзАмо(ИДСделка, ДокОбъект.Ссылка);
		
		ЗагруженныеИнтересы.Вставить(ИДСделка, ДокОбъект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСоздатьЗадачуНаОбследованиеЗагрузкиИзАмо(Ид, ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Взаимодействие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить().Пустой();
	
	Если РезультатЗапроса Тогда
		
		// проверяем в амо, есть ли взамодействия по нему
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.АдресРесурса = "/api/v4/tasks/" + Ид;
		
		HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Хеш);
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		HTTP =  Новый HTTPСоединение(Домен, , , , Прокси, 30, Новый ЗащищенноеСоединениеOpenSSL);
		ОтветHTTP = HTTP.Получить(HTTPЗапрос);
		
		ОтветЗначение = ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ОтветЗначение = "" Тогда
			
			СоздатьВзаимодействиеНаПросмотрДанных(ДокументОснование);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВзаимодействиеНаПросмотрДанных(ДокументОснование)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗадачи = ТекущаяДатаСеанса() + 86400;
	
	ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ОбъектЗадача.Автор				= ДокументОснование.Ответственный;
	ОбъектЗадача.Исполнитель		= ДокументОснование.Ответственный;
	ОбъектЗадача.ПринятаКИсполнению	= Истина;
	ОбъектЗадача.Наименование		= "Проверить загрузку данных из amoCRM";
	ОбъектЗадача.Дата				= ДатаЗадачи;
	ОбъектЗадача.ДатаНачала			= ДатаЗадачи;
	ОбъектЗадача.СрокИсполнения		= ДатаЗадачи;
	ОбъектЗадача.CRM_Личная			= Истина;
	ОбъектЗадача.Предмет			= ДокументОснование;
	ОбъектЗадача.Описание			= ДокументОснование.Описание;
	ОбъектЗадача.CRM_Партнер		= ДокументОснование.Партнер;
	ОбъектЗадача.CRM_КонтактноеЛицо	= ДокументОснование.КонтактноеЛицо;
	ОбъектЗадача.Записать();
	
	Попытка
		ОбъектЗадача.Записать();
		ТекстСообщения = "Создана задача на проверку данных для ответственного " + ДокументОснование.Ответственный;
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь, ОбъектЗадача);
	Исключение
		Текстсообщения = ОписаниеОшибки();
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоВзаимодействиями

Процедура ВыполнитьРаботуСОповещениями(СтруктураДанных)
	
	Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		
		ОбсуждениеРазрешены = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		
		УидСделки =
			Новый ИдентификаторОбсужденияСистемыВзаимодействия(Строка(СтруктураДанных.Объект.УникальныйИдентификатор()));
		
		Отбор =  Новый ОтборОбсужденийСистемыВзаимодействия;
		Отбор.КонтекстноеОбсуждение = Истина;
		Отбор.Ключ  = Строка(УидСделки);
		МассивОбсуждений = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
		
		Если МассивОбсуждений.Количество() = 0 Тогда
			
			НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			НовоеОбсуждение.Отображаемое = Истина;
			НовоеОбсуждение.Ключ = Строка(УидСделки);
			НовоеОбсуждение.Заголовок = "Обсуждение по сделке " + СтруктураДанных.Объект;
			НовоеОбсуждение.КонтекстОбсуждения =
				Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(СтруктураДанных.Объект));
			НовоеОбсуждение.Записать();
			
		Иначе
			
			НовоеОбсуждение = МассивОбсуждений[0];
			
		КонецЕсли;
		
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
		ОтборСообщений.Обсуждение = НовоеОбсуждение.Идентификатор;
		МассивСообщений = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		
		ЗаписыватьСообщение = Истина;
		Для Каждого Стр Из МассивСообщений Цикл
			Если Строка(Стр.Текст) = СтруктураДанных.Текст Тогда
				ЗаписыватьСообщение = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаписыватьСообщение Тогда
			
			ОтветственныйПользовательИБ = СтруктураДанных.Ответственный;
			ПользовательСуществует =
				СистемаВзаимодействия.ПолучитьПользователя(Новый ИдентификаторПользователяСистемыВзаимодействия(Строка(ОтветственныйПользовательИБ.ИдентификаторПользователяИБ)));
			ИдентификаторПользователяСВ =
				СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ОтветственныйПользовательИБ.ИдентификаторПользователяИБ);
			
			НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(НовоеОбсуждение.Идентификатор);
			
			НовоеСообщение.Данные = СтруктураДанных.Объект;
			
			НовоеСообщение.Получатели.Добавить(ИдентификаторПользователяСВ);
			НовоеСообщение.Дата = ТекущаяДатаСеанса();
			НовоеСообщение.Текст = СтруктураДанных.Текст;
			Попытка
				НовоеСообщение.Записать();
			Исключение
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ТекстСообщения = "Загрузка примечаний для объекта: " + СтруктураДанных.Объект;
		ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		
	Иначе
		
		Если ОбсуждениеРазрешены = Неопределено Тогда
			ТекстСообщения = "Информационная база не зарегистрирована в системе взаимодействия";
			ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, Ложь, Истина, Ложь);
		КонецЕсли;
		ОбсуждениеРазрешены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеФункции
Процедура ПрисоединитьФайлКобъекту(Владелец, ИмяФайла, ИмяФайлаСохранение, ПутьЗагрузки)
	
	Если cookieДанные = Неопределено Тогда
		Отказ = НЕ ВыполнитьПроверкуПодключения();
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаБезРасширения = "";
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайлаСохранение, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		ИмяФайлаБезРасширения = МассивСтрок[0];
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	АдресРесурса = "/download/" + ИмяФайла;
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Set-Cookie", cookieДанные);
	
	Ответ = Соединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	
	Если Ответ.КодСостояния = 302 Тогда
		
		НовоеРасположение = Ответ.ЗАголовки.Получить("Location");
		УдалитьФайлы(ИмяВременногоФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		МассивСтрок = СтрРазделить(НовоеРасположение, "/");
		СерверФайла = МассивСтрок[2];
		ПУтьРесурс = "/" + МассивСтрок[3] + "/" + МассивСтрок[4] + "/" + МассивСтрок[5];
		ССЛ = Новый ЗащищенноеСоединениеOpenSSL();
		
		Прокси = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
			Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
		КонецЕсли;
		
		СоединениеФайл = Новый HTTPСоединение(СерверФайла, , , , Прокси, 30, ССЛ, Ложь);
		HTTPЗапросФайл = Новый HTTPЗапрос;
		HTTPЗапросФайл.АдресРесурса = ПУтьРесурс;
		
		ОтветФайл = СоединениеФайл.Получить(HTTPЗапросФайл, ИмяВременногоФайла);
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		ВремяИзменения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов = Владелец;
		ПараметрыФайла.Автор = Пользователи.ТекущийПользователь();
		ПараметрыФайла.ИмяБезРасширения = ИмяФайлаБезРасширения;
		ПараметрыФайла.РасширениеБезТочки = РасширениеФайла;
		ПараметрыФайла.ВремяИзменения = ВремяИзменения;
		ПараметрыФайла.ВремяИзмененияУниверсальное = ВремяИзменения;
		
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, адресВХранилище);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОтветственногоПользователя(Ид)
	
	СтрокаТаблицы = ПользователиСопоставление.Найти(ИД, "ИдАмо");
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Возврат СтрокаТаблицы.Пользователь;
	КонецЕсли;
	
КонецФункции

Функция ВернутьПредставлениеИДАмо(ИдПредставление)
	
	Ид = СокрЛП(Строка(ИдПредставление));
	Ид = СтрЗаменить(Ид, Символы.НПП, "");
	
	Возврат Ид;
	
КонецФункции

Функция ПолучитьПартнераПоИД(Ид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартнерыДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
	|	И ПартнерыДополнительныеРеквизиты.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Ид);
	Запрос.УстановитьПараметр("Свойство",
		 ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИдПартнерыАмо"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСделкуПоИД(ИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ИнтересДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес.ДополнительныеРеквизиты КАК CRM_ИнтересДополнительныеРеквизиты
	|ГДЕ
	|	CRM_ИнтересДополнительныеРеквизиты.Свойство = &Свойство
	|	И CRM_ИнтересДополнительныеРеквизиты.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", ИД);
	Запрос.УстановитьПараметр("Свойство",
		 ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИдСделкаАмо"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИнформациюПоОшибкам(КодОшибки)
	
	ТекстСообщения = "";
	
	Если КодОшибки = 401 Тогда
		ТекстСообщения = "Общая ошибка авторизации. Неправильный логин или пароль.";
	ИначеЕсли КодОшибки = 403 Тогда
		ТекстСообщения =
			"Доступ к данному аккаунту запрещён с Вашего IP адреса. Возникает, когда в настройках безопасности аккаунта включена фильтрация доступа к API по ""белому списку IP адресов"".";
	ИначеЕсли КодОшибки = 429 Тогда
		ТекстСообщения = "Превышено допустимое количество запросов в секунду";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПолучитьВзаимодействиеПоИд(Ид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВзаимодействиеДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие.ДополнительныеРеквизиты КАК CRM_ВзаимодействиеДополнительныеРеквизиты
	|ГДЕ
	|	CRM_ВзаимодействиеДополнительныеРеквизиты.Свойство = &Свойство
	|	И CRM_ВзаимодействиеДополнительныеРеквизиты.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", ИД);
	Запрос.УстановитьПараметр("Свойство",
		 ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИДВзаимодействиеАмо"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонтактныеЛицаПартнераПоИД(ИД, Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровДополнительныеРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.ДополнительныеРеквизиты КАК КонтактныеЛицаПартнеровДополнительныеРеквизиты
	|ГДЕ
	|	КонтактныеЛицаПартнеровДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтактныеЛицаПартнеровДополнительныеРеквизиты.Значение = &Значение";
	Если НЕ Владелец = Неопределено Тогда
		Запрос.Текст = запрос.Текст + "	И КонтактныеЛицаПартнеровДополнительныеРеквизиты.Ссылка.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Значение", ИД);
	Запрос.УстановитьПараметр("Свойство",
		 ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя",
		 "ИДКонтактныеЛицаПартнеровАмо"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписываемРеквизитОбъектаПоТипу(ОбъектДанных, Реквизит, ЗначениеРеквизита)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДанных, Реквизит) Тогда
		Если ТипЗнч(ОбъектДанных[Реквизит]) = Тип("Строка") Тогда
			ОбъектДанных[Реквизит] = ЗначениеРеквизита;
		Иначе
			ТипЗначения = Строка(ТипЗнч(ОбъектДанных[Реквизит]));
			Если Метаданные.Справочники.Найти(ТипЗначения) <> Неопределено Тогда
				ОбъектДанных[Реквизит] = Справочники[ТипЗначения].НайтиПоНаименованию(ЗначениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция TimestampВДату(пДатаТС)
	Попытка
		Возврат Дата("19700101") + ?(ТипЗнч(пДатаТС) = Тип("Строка"), Число(пДатаТС), пДатаТС);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ДатуВTimestamp(пДата = Неопределено)
	Возврат Формат(Число(?(ТипЗнч(пДата) = Тип("Дата"), пДата, ТекущаяДатаСеанса()) - Дата("19700101")), "ЧН=0; ЧГ=0");
КонецФункции

Процедура ЗаписываемДанныеВЖурналыБазДанных(ТекстСообщения, ПоказатьПользователю, ВнутреннийЖурнал,
	 ЖурналРегистрации,
	 Объект = Неопределено)
	
	Если ПоказатьПользователю Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ВнутреннийЖурнал Тогда
		ЖурналСобытий = ЖурналСобытий + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	Если Не объект = Неопределено Тогда
		
		МассивНайденных = ЖурналСозданныхОбъектов.НайтиСтроки(Новый Структура("ОбъектДанных", Объект.Ссылка));
		
		Если НЕ МассивНайденных.Количество() > 0 Тогда
			НоваяСтр = ЖурналСозданныхОбъектов.Добавить();
			НоваяСтр.ДатаЗагрузки = НачалоДня(ТекущаяДатаСеанса());
			НоваяСтр.ОбъектДанных = Объект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойствПВХ(ПВХ, Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ПВХ);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		
		ЗначениеСсылка = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		ЗначениеСсылка.Владелец = ПВХ;
		ЗначениеСсылка.Наименование = Наименование;
		ЗначениеСсылка.ПолноеНаименование = Наименование;
		
		Попытка
			ЗначениеСсылка.Записать();
		Исключение
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		Возврат ЗначениеСсылка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьХодВыполнения(Процент, Текст)
	
	ДлительныеОперации.СообщитьПрогресс(Окр(Процент * 10, 0), Текст);
	
КонецПроцедуры

Процедура ЗаписатьОбновитьТегиВОбъекте(Объект, Теги, Подразделение)
	
	Если Теги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если типЗнч(Теги) = Тип("Массив") Тогда
		Для Каждого Стр Из Теги Цикл
			Наименование = СокрЛП(Стр.Получить("name"));
			
			ЗаписатьТегиВОбъект(Объект, Наименование, Подразделение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоздатьТег(Наименование, Подразделение)
	
	ТегССылка = Справочники.CRM_Теги.НайтиПоНаименованию(Наименование, Истина, Подразделение);
	Если ТегССылка.Пустая() Тогда
		Тегобъект = Справочники.CRM_Теги.СоздатьЭлемент();
		Тегобъект.Наименование = Наименование;
		Тегобъект.Владелец = Подразделение;
		Тегобъект.Записать();
		ТегССылка = Тегобъект.Ссылка;
	КонецЕсли;
	
	Возврат ТегССылка;
	
КонецФункции

Процедура ЗаписатьТегиВОбъект(объект, Наименование, Подразделение)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_Взаимодействие")
		 ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.CRM_Интерес") Тогда
		
		Тег = ПолучитьСоздатьТег(Наименование, Подразделение);
		
		НоваяСтрокаТЧ = объект.CRM_Теги.Добавить();
		НоваяСтрокаТЧ.Тег = Тег;
		
	Иначе
		
		Тег = ПолучитьСоздатьТегДляСправочника(Наименование, Подразделение);
		
		новШк = РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьМенеджерЗаписи();
		новШк.Объект         				= Объект.Ссылка;
		новШк.Аналитика         			= Подразделение;
		новШк.ЗначениеКлассификатора        = Тег;
		
		новШк.Прочитать();
		
		Если Не новШк.Выбран() Тогда
			новШк.Объект         				= Объект.Ссылка;
			новШк.Аналитика         			= Подразделение;
			новШк.ЗначениеКлассификатора        = Тег;
			новШк.Записать();
		КонецЕсли;
		
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМакетОформленияПолей(ИмяМакета) Экспорт
	
	Возврат ПолучитьМакет(ИмяМакета);
	
КонецФункции

Функция ПолучитьСоздатьТегДляСправочника(Наименование, Подразделение)
	
	ТегССылка = Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(Наименование, Истина);
	Если ТегССылка.Пустая() Тогда
		Тегобъект = Справочники.CRM_ЗначенияКлассификаторов.СоздатьЭлемент();
		Структура = Новый Структура;
		Структура.Вставить("Наименование", Наименование);
		Структура.Вставить("Владелец", ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Теги"));
		Тегобъект.Заполнить(Структура);
		Тегобъект.Наименование = Наименование;
		Тегобъект.Записать();
		ТегССылка = Тегобъект.Ссылка;
	КонецЕсли;
	
	Возврат ТегССылка;
	
КонецФункции

Функция ОпределитьКонфигурацию() Экспорт
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		КофигурацияУТ = Истина;
	Иначе
		КофигурацияУТ = Ложь;
	КонецЕсли;
	
	Возврат КофигурацияУТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru='Недопустимый вызов объекта на клиенте.';en='Invalid call of object on client.'");
#КонецЕсли
