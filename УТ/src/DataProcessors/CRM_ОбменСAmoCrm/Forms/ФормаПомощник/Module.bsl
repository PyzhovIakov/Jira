
#Область ОписаниеПеременных

&НаСервере
Перем ОбъектДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	ОбъектДанных.ВосстановитьНастройки();
	
	ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
	
	ЗаполнитьДеревоЗначений();
	
	УстановитьУсловноеОформлениеЭлементов();
	
	СформироватьСписокЗначенийПоРеквизитамПартнера();
	
	СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица();
	
	УстановитьВидимостьЭлементовИСтраниц();
	
	ВыполнитьПроверкуПодключенияНаСервере();
	
	КонфигурацияДанныхУТ = ОбъектДанных.ОпределитьКонфигурацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимЗагрузкиДанныхПриИзменении(Истина);
	ИзменитьОтображениеПараметровПодключения();
	УстановитьДоступностьЭлементов();
	
	ЗапуститьВФоне = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовИСтраниц()
	
	// Помошник продаж начинается с основного 
	// скрываем видимость всех элементов 
	Элементы.СтраницаПользователи.Видимость = Ложь;
	Элементы.СтраницаПартнеры.Видимость = Ложь;
	Элементы.СтраницаКонтакныеЛица.Видимость = Ложь;
	Элементы.СтраницаИнтересы.Видимость = Ложь;
	Элементы.СтраницаЗагрузкаДанных.Видимость = Ложь;
	Элементы.СтраницаЖурнал.Видимость = Ложь;
	Элементы.СтраницаДополнительныеДанные.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭлементов()
	
	Если НЕ Объект.ПодключениеСуществует Тогда
		Элементы.ДекорацияИнформацияОПодключении.Заголовок = НСтр("ru='Подключение отсутствует,
			| проверьте данные';en='No connection,
			| check data'");
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.ДекорацияИнформацияОПодключении.Заголовок =
			НСтр("ru='Подключение выполнено. Можно перейти к загрузке данных';
			|en='Connection completed. You can start data loading'");
		Элементы.ДекорацияИнформацияОПодключении.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ДоменКорректный = ВведенКорректныйДомен();
	Если ДоменКорректный Тогда
		Элементы.Домен.Подсказка = "";
	Иначе
		Элементы.Домен.Подсказка = "Домен должен заканчиватьса на "".amocrm.ru"".";
	КонецЕсли;
	
	АвторизацияРазрешена = ЗначениеЗаполнено(Объект.IDИнтеграции)
		 И ЗначениеЗаполнено(Объект.СекретныйКлюч) И ЗначениеЗаполнено(КодАвторизации) И ДоменКорректный
		 И ЗначениеЗаполнено(Объект.СсылкаДляПеренаправления);
	Элементы.Авторизация.Доступность = АвторизацияРазрешена;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	ОбъектДанных.СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не Объект.ПомощникПройден Тогда
		Объект.ПользователиСопоставление.Очистить();
		Объект.КонтактныеЛицаСопоставление.Очистить();
		Объект.ПартнерыСопоставление.Очистить();
		Объект.ПользователиСопоставлены = Ложь;
		Объект.СделкиСопоставление.Очистить();
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы Тогда		
		
		СохранитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКнопок

// Дополнительный параметр для загрузки данных
// 0 = Партнеры
// 1 = КонтактныеЛицаПартнеров
&НаСервере
Функция ЗагрузкаДанныхНаСервере(ДанныеОбработки, ИмяМетода, СтруктураПараметров, ВнешняяОбработка, ФайлКУдалению)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", ВнешняяОбработка);
	ПараметрыЗадания.Вставить("Журнал", Объект.ЖурналСобытий);
	Если ВнешняяОбработка Тогда // внешняя обработка
		ИмяОбработки = ПолучитьИмяВременногоФайла("epf");
		ДанныеОбработки.Записать(ИмяОбработки);
		ФайлКУдалению = ИмяОбработки;
		ПараметрыЗадания.Вставить("ИмяОбработки", ИмяОбработки);
	Иначе
		ПараметрыЗадания.Вставить("ИмяОбработки", РеквизитФормыВЗначение("Объект").Метаданные().Имя);
	КонецЕсли;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки",
		 ПараметрыЗадания,
		 ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки",
		 ПараметрыЗадания,
		 ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗагрузкаДанныхНаСервереВФорме()
	
	ОбъектДанных = РеквизитФормыВЗначение("Объект");
	
	// Данные загружаются последовательно
	// ----------------------------------------
	// Компании - Партнеры
	Если Объект.Компании Тогда
		
		Ресурс = "/api/v4/companies";
		
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 0, Ложь);
		
	КонецЕсли;
	
	// Контакты - Партнеры - контактные лица
	Если Объект.Контакты Тогда
		
		Ресурс = "/api/v4/contacts";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 1, Ложь);
		
	КонецЕсли;
	
	Если Объект.Сделки Тогда
		
		Ресурс = "/api/v4/leads";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 2, Ложь);
		
	КонецЕсли;
	
	Если Объект.ЗагружатьЗадачи Тогда
		
		Ресурс = "/api/v4/tasks";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 3, Ложь);
		
	КонецЕсли;
	
	Если Объект.События Тогда
		
		Ресурс = "/api/v4/notes";
		// примечания к сделкам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 4, Ложь);
		// примечания к компаниям
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 5, Ложь);
		// примечания к контактам
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 6, Ложь);
		
	КонецЕсли;
	
	ОбъектДанных.ПередатьДанныеДляЖурнала();
	ЗаполнитьЖурналДанными();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВФоновомРежиме()
	
	ВнешняяОбработка = ЭтоВнешняяОбработка();	
	Если ВнешняяОбработка Тогда
		ДанныеОбработки = Новый ДвоичныеДанные(ИмяОбработки());
	Иначе
		ДанныеОбработки = Неопределено;
	КонецЕсли;
	ФайлКУдалению = "";
	РезультатФоновогоЗадания = ЗагрузкаДанныхНаСервере(ДанныеОбработки, "ЗапуститьВФонеЗагрузкуДанных",
		 Новый Структура("Журнал", Объект.ЖурналСобытий), ВнешняяОбработка,
		 ФайлКУдалению);
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ТекстСообщения = "Загрузка данных из амо...";
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.Интервал = 1;
	ОбработкаРезультат = Новый ОписаниеОповещения("ОбработкаРезультата", ЭтотОбъект);
	ОповещениеПользователя = Новый ОписаниеОповещения("ОповещениеФоновогоЗадания", ЭтотОбъект,
		 Новый Структура("Обработка,ФайлКУдалению", ОбработкаРезультат,
		 ФайлКУдалению));
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, ОповещениеПользователя, НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеФоновогоЗадания(Задание, ДопПараметры) Экспорт
	Если Задание.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		ВыполнитьОбработкуОповещения(ДопПараметры.Обработка, РезультатВыполнения);
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Задание.ПодробноеПредставлениеОшибки);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Проблема с выполнением!';en='Execution Problem!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультата(РезультатВыполнения, ДопПараметры) Экспорт
	
	Если НЕ ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаПомощник" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыполненияЗагрузки", ЭтотОбъект);
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(Оповещение,
			 НСтр("ru='Загрузка данных завершена. Открыть лог загрузки?';
			|en='Data download is completed. Open download log?'"), Режим, 10, КодВозвратаДиалога.Отмена, ,
			 КодВозвратаДиалога.Отмена);
		
	Иначе
		ЗаполнитьЖурналДанными();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяОбработки()
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
КонецФункции

&НаСервере
Функция ЭтоВнешняяОбработка()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МетаОбработкаИмя = ОбработкаОбъект.Метаданные().Имя;
	Если Метаданные.Обработки.Найти(МетаОбработкаИмя) <> Неопределено
		И ТипЗнч(ОбработкаОбъект) = Тип("ОбработкаОбъект." + МетаОбработкаИмя) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДанных(Команда)
	
	Отказ = Истина;
	
	ПроверкаИСозданиеДопРеквизитовДляОбъектов();
	// Перед загрузкой создаем все дополнительные реквизиты, т.к. нужно записывать из формы
	// проверям созданы ли ИД для объектов
	СоздаемДопРеквизитыДляВсехОбъектов();
	
	Объект.ЖурналСобытий = "";
	
	СохранитьНастройки();
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, 
			НСтр("ru='Перед началом загрузки данных из вашей AmoCRM рекомендуется сопоставить пользователей AmoCRM с пользователями текущей базы"
"(при необходимости создать пользователей и назначить необходимые права)."
"После сопоставления данных пользователи будут использоваться в документах, справочниках и т.д.';en='Before you start import data from your AmoCRM, it is recommended to map AmoCRM users to users in current database"
"(if necessary, create users and assign necessary rights)."
"After mapping data, users will be used in documents, catalogs, etc.'"), Режим, 0);
	Иначе
		#Если ВебКлиент Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВЕб", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, НСтр("ru='Процедура загрузки может занять длительное время,
				| продолжить?';en='Download procedure can take long time, continue?'"), Режим,
				 0);
			
		#Иначе
			
			Если ЗапуститьВФоне Тогда
				ВыполнитьЗагрузкуДанныхВФоновомРежиме();
			Иначе 
				ТекстСообщения = "Начало загрузки данных: " + ОбщегоНазначенияКлиент.ДатаСеанса();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗагрузкаДанныхНаСервереВФорме();
				ТекстСообщения = "Данные успешно загружены: " + ОбщегоНазначенияКлиент.ДатаСеанса();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	Если ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаПомощник" Тогда
		Элементы.СтраницаЖурнал.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал;
		Элементы.ФормаПереходДалее.Заголовок = "Готово";
		ЗаполнитьЖурналДанными();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВЕб(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекстСообщения = "Начало загрузки данных: " + ОбщегоНазначенияКлиент.ДатаСеанса();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗагрузкаДанныхНаСервереВФорме();
		ТекстСообщения = "Данные успешно загружены: " + ОбщегоНазначенияКлиент.ДатаСеанса();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗагрузки(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗаполнитьЖурналДанными();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЖурналСобытий", объект.ЖурналСобытий);
		ПараметрыФормы.Вставить("ЖурналСозданныхОбъектов", ПолучитьТаблицуЖурнала());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаЖурнал", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЖурналДанными()
	
	КлючНастроек = "Обработка.CRM_ОбменСAmoCrm.ЖурналДанных";
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ВыгрузкаНоменклатуры",
		 КлючНастроек, , ,
		 Строка(ПользователиКлиентСервер.ТекущийПользователь()));
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		
		ЗначениеИзНастройкиЖУрнал	= ЗначениеНастроек.Получить("ЖурналСозданныхОбъектов");
		
		Объект.ЖурналСобытий = ЗначениеНастроек.Получить("ЖурналСобытий");
		
		Если ТипЗнч(ЗначениеИзНастройкиЖУрнал) = Тип("ТаблицаЗначений") Тогда
			Объект.ЖурналСозданныхОбъектов.Загрузить(ЗначениеИзНастройкиЖУрнал);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПользователейДляСопоставления()
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ПользователиСопоставление.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЖурнала()
	
	Если НЕ Объект.ПользователиСопоставлены Тогда
		Объект.ПользователиСопоставление.Очистить();
	КонецЕсли;
	
	Возврат	ПоместитьВоВременноеХранилище(Объект.ЖурналСозданныхОбъектов.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ПользователиСопоставлены = Ложь;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Автозаполнение", Истина);
		ПараметрыФормы.Вставить("Логин", Объект.Логин);
		ПараметрыФормы.Вставить("Домен", Объект.Домен);
		ПараметрыФормы.Вставить("Хеш", Объект.Хеш);
		ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес", ПолучитьТаблицуПользователейДляСопоставления());
		ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоПартнеру(Команда)
	ЗагрузитьИнформациюПоПартнеруНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоПартнеруНаСервере()
	
	Если Объект.ПартнерыСопоставление.Количество() = 0 Тогда
		Объект.ПартнерыСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v4/companies/custom_fields";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 0, Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
		
		ПопыткаСопоставленияДанныхСРеквизитами("Партнеры");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗначений()
	
	ДеревоСделки = Новый ДеревоЗначений;
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(Объект.СделкиСопоставление.Выгрузить()); // передаем ТЗ
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ИсточникДанных.Колонки.Владелец.Измерение = Истина; // по этой колонке идет группировка
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	Дерево = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСделки = Дерево.Скопировать();
	ДеревоСделки.Строки.Очистить();
	ТЗ = Объект.СделкиСопоставление.Выгрузить();
	Для Каждого Стр Из ТЗ Цикл
		
		Если Стр.Воронка Тогда
			
			НоваяСтрока = ДеревоСделки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				Воронка = ПолучитьЭтапВоронкиПоНаименованию(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка(), НоваяСтрока.ИмяАмо);
				НоваяСтрока.СостояниеИнтереса = Воронка;
				МассивЭл = Объект.СделкиСопоставление.НайтиСтроки(Новый Структура("НомерСтроки", Стр.НомерСтроки));
				Если МассивЭл.Количество() > 0 Тогда
					МассивЭл[0].СостояниеИнтереса = Воронка;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВтораяСтрока = НоваяСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяСтрока, Стр);
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка, ВтораяСтрока.ИмяАмо);
				ВтораяСтрока.СостояниеИнтереса = СостояниеИнтереса;
				МассивЭл = Объект.СделкиСопоставление.НАйтиСтроки(Новый Структура("НомерСтроки", Стр.НомерСтроки));
				Если МассивЭл.Количество() > 0 Тогда
					МассивЭл[0].СостояниеИнтереса = СостояниеИнтереса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСделки, "ДеревоЗначенийСделки");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоСделкамНаСервере()
	
	Если Объект.СделкиСопоставление.Количество() = 0 ИЛИ ДеревоЗначенийСделки.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Объект.СделкиСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v4/leads/pipelines";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 2, Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
		
	КонецЕсли;
	
	ЗаполнитьДеревоЗначений();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоВидамВзаимодействия()
	
	Если Объект.ВидыВзаимодействийСопоставление.Количество() = 0 Тогда
		
		Объект.ВидыВзаимодействийСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v4/account";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 20, Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоСделкам(Команда)
	ЗагрузитьИнформациюПоСделкамНаСервере();
	// заполняем данные по видам взаимодействия
	ЗагрузитьИнформациюПоВидамВзаимодействия();
	РазвернутьВсеСтрокиДерева();
	Объект.Организация = получитьПервуюОрганизацию();
КонецПроцедуры

&НаСервере
Функция получитьПервуюОрганизацию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()
	
	тЭлементы = ДеревоЗначенийСделки.ПолучитьЭлементы();
	Для Каждого тСтр Из тЭлементы Цикл
		Элементы.ДеревоЗначенийСделки.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамПартнера()
	
	СписокВыбора = Элементы.ПартнерыСопоставлениеИмяРеквизита.СписокВыбора;
	СписокВыбораФизЛицо = Элементы.КонтактныеЛицаСопоставлениеИмяРеквизита.СписокВыбора;
	
	ПартнерыМетаданные = Метаданные.Справочники.Партнеры.Реквизиты;
	
	Для Каждого СтрДанные Из ПартнерыМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя, СтрДанные.Синоним);
		СписокВыбораФизЛицо.Добавить(СтрДанные.Имя, СтрДанные.Синоним);
		
	КонецЦикла;
	
	// добавляем контактную информацию
	СписокВыбора.Добавить("АдресПартнера", "Адрес");
	СписокВыбораФизЛицо.Добавить("АдресПартнера", "Адрес (физ лицо)");
	СписокВыбора.Добавить("CRM_СайтПартнера", "Сайт");
	СписокВыбораФизЛицо.Добавить("CRM_СайтПартнера", "Сайт (физ лицо)");
	СписокВыбора.Добавить("ТелефонПартнера", "Телефон");
	СписокВыбораФизЛицо.Добавить("ТелефонПартнера", "Телефон (физ лицо)");
	СписокВыбора.Добавить("EmailПартнера", "Электронная почта");
	СписокВыбораФизЛицо.Добавить("EmailПартнера", "Электронная почта (физ лицо)");
	
	// дополнительные реквизиты
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("Партнеры");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя, СтрДоп.Заголовок);
		СписокВыбораФизЛицо.Добавить(СтрДоп.Имя, СтрДоп.Заголовок);
		
	КонецЦикла;
	
	// Создаем в списке выбора доп. реквизит
	// при его выборе, перед началом загрузки для каждого объекта будет создан доп. реквизит
	СписокВыбора.Добавить("СоздатьДопРеквизит", "Дополнительный реквизит");
	СписокВыбораФизЛицо.Добавить("СоздатьДопРеквизит", "Дополнительный реквизит (физ лицо)");

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДопРеквизитов(Таблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДопРеквизиты.Свойство.Наименование КАК Заголовок,
	|	ДопРеквизиты.Свойство.Имя КАК Имя
	|ИЗ
	|	Справочник." + Таблица + ".ДополнительныеРеквизиты КАК ДопРеквизиты
	|ГДЕ
	|	ДопРеквизиты.Свойство <> &Свойство";
	
	Запрос.УстановитьПараметр("Свойство",
		 ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИД" + Таблица 
		+ "Амо"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПартнерыСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	
	Если ТекДанные.ИмяРеквизита = "ТелефонПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "АдресПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_СайтПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailПартнера" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации =
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
КонецПроцедуры

// Проверка соединения с сайтом
//
&НаКлиенте
Процедура ПроверкаПодключения(Команда)
	
	ВыполнитьПроверкуПодключенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуПодключенияНаСервере()
	
	Попытка
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		Объект.ПодключениеСуществует = ОбъектДанных.ВыполнитьПроверкуПодключения();
		УстановитьУсловноеОформлениеЭлементов();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере()
	
	Если Объект.КонтактныеЛицаСопоставление.Количество() = 0 Тогда
		
		Объект.КонтактныеЛицаСопоставление.Очистить();
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v4/contacts/custom_fields";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 1, Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
		
		ПопыткаСопоставленияДанныхСРеквизитами("КонтактныеЛицаПартнеров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокЗначенийПоРеквизитамКонтактныеЛица()
	
	СписокВыбора = Элементы.КонтактныеЛицаСопоставлениеИмяРеквизита.СписокВыбора;
	
	КонтактныеЛицаПартнеровМетаданные = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
	
	Для Каждого СтрДанные Из КонтактныеЛицаПартнеровМетаданные Цикл
		
		СписокВыбора.Добавить(СтрДанные.Имя, СтрДанные.Синоним);
		
	КонецЦикла;
	
	// добавляем контактную информацию
	СписокВыбора.Добавить("МобильныйТелефонКонтактногоЛица", "Мобильный телефон");
	СписокВыбора.Добавить("ТелефонКонтактногоЛица", "Телефон");
	СписокВыбора.Добавить("EmailКонтактногоЛица", "Электронная почта");
	Если КонфигурацияДанныхУТ Тогда
		СписокВыбора.Добавить("CRM_ИдентификаторViberКонтактногоЛица", "Viber");
		СписокВыбора.Добавить("CRM_ИдентификаторВКонтактеКонтактногоЛица", "ВКонтакте");
	КонецЕсли;	
	// дополнительные реквизиты
	ДопРеквизиты = ПолучитьТаблицуДопРеквизитов("КонтактныеЛицаПартнеров");
	
	Для Каждого СтрДоп Из ДопРеквизиты Цикл
		
		СписокВыбора.Добавить(СтрДоп.Имя, СтрДоп.Заголовок);
		
	КонецЦикла;
	
	СписокВыбора.Добавить("СоздатьДопРеквизит", "Дополнительный реквизит");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюПоКонтактнымЛицам(Команда)
	ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	
	Если  ТекДанные.ИмяРеквизита = "МобильныйТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "ТелефонКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
	ИначеЕсли  ТекДанные.ИмяРеквизита = "EmailКонтактногоЛица" Тогда
		ТекДанные.КонтактнаяИнформация = Истина;
		ТекДанные.ТипКонтактнойИнформации =
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
	КонецЕсли;
	
	Если КонфигурацияДанныхУТ Тогда
		Если  ТекДанные.ИмяРеквизита = "CRM_ИдентификаторViberКонтактногоЛица" Тогда
			ТекДанные.КонтактнаяИнформация = Истина;
			ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
		ИначеЕсли  ТекДанные.ИмяРеквизита = "CRM_ИдентификаторВКонтактеКонтактногоЛица" Тогда
			ТекДанные.КонтактнаяИнформация = Истина;
			ТекДанные.ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей" Тогда
		
		ЗаполняемТаблицуПользователей(ВыбранноеЗначение.ПользователиСопоставлениеАдрес);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаВыбора" Тогда
		
		Объект.УчетнаяЗапись = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполняемТаблицуПользователей(Адрес)
	
	Объект.ПользователиСопоставление.Очистить();
	Объект.ПользователиСопоставление.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	Объект.ПользователиСопоставлены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиСопоставлениеСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СделкиСопоставление.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",
			 ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Воронка", Истина);
		СтрОтбор.Вставить("Владелец", ТекДанные.Владелец);
		МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() = 0 Тогда
			ТекстСообщения = "Необходимо указать воронку продаж для текущего состояния";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Родитель = МассивСтрок[0].СостояниеИнтереса;
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", Родитель);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(ПараметрВыбора);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.СделкиСопоставлениеСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СозданиеПВХ(Структура)
	
	ПВХОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ПВХОбъект, Структура);
	ПВХОбъект.Записать();
	Возврат ПВХОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаборДополнительныхРеквизитовИСведений(ИмяНабора)
	Возврат УправлениеСвойствами.НаборСвойствПоИмени(ИмяНабора);
КонецФункции

// Создаем дополнительные реквизиты для объектов
// Партнер
// КонтактныеЛицаПартнеров
// Интерес = Сделка
// Взаимодействие
// Имя доп. реквизита  ="Ид" + ТипОбъекта + "Амо"
&НаСервере
Процедура СоздаемДопРеквизитыДляВсехОбъектов()
	
	// Партнеры
	ИмяДляРазработчика = "ИдПартнерыАмо";
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Справочник_Партнеры_Общие");
	ПВХ = ПолучитьПВХПоИмени(ИмяДляРазработчика);
	Если ПВХ = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя", ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств", НаборСвойств);
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен", Истина);
		Структура.Вставить("Виден", Ложь);
		
		ПВХ = СозданиеПВХ(Структура);
	КонецЕсли;
	ЗаписатьСвойство(НаборСвойств, ПВХ);
	
	// КонтактныеЛицаПартнеров
	ИмяДляРазработчика = "ИДКонтактныеЛицаПартнеровАмо";
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Справочник_КонтактныеЛицаПартнеров");
	ПВХ = ПолучитьПВХПоИмени(ИмяДляРазработчика);
	Если ПВХ = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя", ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств", НаборСвойств);
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен", Истина);
		Структура.Вставить("Виден", Ложь);
		
		ПВХ = СозданиеПВХ(Структура);
	КонецЕсли;
	ЗаписатьСвойство(НаборСвойств, ПВХ);
	
	// Интерес
	ИмяДляРазработчика = "ИДСделкаАмо";
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Документ_CRM_Интерес_Интерес");
	ПВХ = ПолучитьПВХПоИмени(ИмяДляРазработчика);
	Если ПВХ = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя", ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств", НаборСвойств);
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен", Истина);
		Структура.Вставить("Виден", Ложь);
		
		ПВХ = СозданиеПВХ(Структура);
	КонецЕсли;
	ЗаписатьСвойство(НаборСвойств, ПВХ);
	
	// Взаимодействие
	ИмяДляРазработчика = "ИДВзаимодействиеАмо";
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Документ_CRM_Взаимодействие");
	ПВХ = ПолучитьПВХПоИмени(ИмяДляРазработчика);
	Если ПВХ = Неопределено Тогда
		Структура = Новый Структура;
		Структура.Вставить("Имя", ИмяДляРазработчика);
		Структура.Вставить("Заголовок", "ID amoCRM");
		Структура.Вставить("НаборСвойств", НаборСвойств);
		Структура.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки("20")));
		Структура.Вставить("Доступен", Истина);
		Структура.Вставить("Виден", Ложь);
		
		ПВХ = СозданиеПВХ(Структура);
	КонецЕсли;
	ЗаписатьСвойство(НаборСвойств, ПВХ);
	
	Объект.ДопРеквизитыСозданы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПользователиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автозаполнение", Ложь);
	ПараметрыФормы.Вставить("Логин", Объект.Логин);
	ПараметрыФормы.Вставить("Домен", Объект.Домен);
	ПараметрыФормы.Вставить("Хеш", Объект.Хеш);
	ПараметрыФормы.Вставить("ПользователиСопоставлениеАдрес", ПолучитьТаблицуПользователейДляСопоставления());
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаНастройкиПользователей", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиДанныхПриИзменении(Элемент)
	
	Если Объект.РежимЗагрузкиДанных = 0 Тогда
		Элементы.ПерезаписыватьДанные.Видимость = Истина;
		Элементы.ДатаЗагрузки.Видимость = Ложь;
	Иначе
		Элементы.ПерезаписыватьДанные.Видимость = Истина;
		Объект.ПерезаписыватьДанные = Истина;
		Элементы.ДатаЗагрузки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоменПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	Объект.ПользователиСопоставлены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретныйКлючПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура IDИнтеграцииПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КодАвторизацииПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляПеренаправленияПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

// Перед началом работы проходим табличные части сопоставления
// если есть строки со значением доп. реквизит
// создаем доп. реквизит для объекта и устанавливаем в табличную часть сопоставление
&НаКлиенте
Процедура ПроверкаИСозданиеДопРеквизитовДляОбъектов()
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита", "СоздатьДопРеквизит");
	
	// Партнеры
	
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Справочник_Партнеры_Общие");
	МассивНеСозданныхЭлементов = Объект.ПартнерыСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "Партнеры" + СтрЗаменить(СтрокаТаблицы.ИмяАмо, " ", ""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , ,
						 Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			Иначе
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , ,
					 Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			
			СтруктураЗаполненияПВХ.Вставить("Доступен", Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден", Истина);
			
			ПВХ = СозданиеПВХ(СтруктураЗаполненияПВХ);
			ЗаписатьСвойство(НаборСвойств, ПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ПредставлениеРеквизита = СтруктураЗаполненияПВХ.Заголовок;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
	КонецЕсли;
	
	// КонтактныеЛицаПартнеров
	
	НаборСвойств = НаборДополнительныхРеквизитовИСведений("Справочник_КонтактныеЛицаПартнеров");
	МассивНеСозданныхЭлементов = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
	Если МассивНеСозданныхЭлементов.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивНеСозданныхЭлементов Цикл
			СтруктураЗаполненияПВХ = Новый Структура;
			СтруктураЗаполненияПВХ.Вставить("Имя", "КонтактныеЛицаПартнеров" + СтрЗаменить(СтрокаТаблицы.ИмяАмо, " ", ""));
			СтруктураЗаполненияПВХ.Вставить("НаборСвойств", НаборСвойств);
			СтруктураЗаполненияПВХ.Вставить("Заголовок", СтрокаТаблицы.ИмяАмо);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТипЗначений) Тогда
				Если СтрокаТаблицы.ТипЗначений = "Булево" Тогда
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
				ИначеЕсли СтрокаТаблицы.ТипЗначений = "СписокЗначений" Тогда
					СтруктураЗаполненияПВХ.Вставить("ДополнительныеЗначенияИспользуются", Истина);
				Иначе
					СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , ,
						 Новый КвалификаторыСтроки("100")));
				КонецЕсли;
			Иначе
				СтруктураЗаполненияПВХ.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка", , , ,
					 Новый КвалификаторыСтроки("100")));
			КонецЕсли;
			
			СтруктураЗаполненияПВХ.Вставить("Доступен", Истина);
			СтруктураЗаполненияПВХ.Вставить("Виден", Истина);
			
			ПВХ = СозданиеПВХ(СтруктураЗаполненияПВХ);
			ЗаписатьСвойство(НаборСвойств, ПВХ);
			
			СтрокаТаблицы.ИмяРеквизита = СтруктураЗаполненияПВХ.Имя;
			СтрокаТаблицы.ПредставлениеРеквизита = СтруктураЗаполненияПВХ.Заголовок;
			СтрокаТаблицы.ДопРеквизит = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.СделкиСопоставление Цикл
		
		Если НЕ Стр.Выбрано Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Воронка Тогда
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				
				Воронка = Стр.СостояниеИнтереса;
				Структура = Новый Структура;
				Структура.Вставить("Наименование", Стр.ИмяАмо);
				Структура.Вставить("ЭлементСсылка", Стр.СостояниеИнтереса);
				СоздатьСценарийВоронкуВБазе(Структура);
				Воронка = Структура.ЭлементСсылка;
				Стр.СостояниеИнтереса = Воронка;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						СтрЭл.СостояниеИнтереса = Воронка;
						ВоронкаДерева = СтрЭл;
					КонецЕсли;	
				КонецЦикла;
				
			Иначе
				Воронка = Стр.СостояниеИнтереса;
				ЭлементыВерхУровня = ДеревоЗначенийСделки.ПолучитьЭлементы();
				Для Каждого СтрЭл Из ЭлементыВерхУровня Цикл
					
					Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
						
						ВоронкаДерева = СтрЭл;
						
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Стр.СостояниеИнтереса) Тогда
				
				СостояниеИнтереса = ПолучитьЭтапВоронкиПоНаименованию(Воронка, Стр.ИмяАмо);
				
				Если СостояниеИнтереса = Неопределено
					 ИЛИ СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка") Тогда
					
					Структура = Новый Структура;
					Структура.Вставить("Наименование", Стр.ИмяАмо);
					Структура.Вставить("Родитель", Воронка);
					Структура.Вставить("Используется", Истина);
					Структура.Вставить("ОбязательноеЗаполнениеКлиента", Ложь);
					Структура.Вставить("ОбязательноеПланированиеАктивности",
						 ПредопределенноеЗначение("Перечисление.CRM_ПланируемыеТипыАктивности.ПустаяСсылка"));
					Структура.Вставить("ЗавершатьЗапланированныеАктивности",
						 ПредопределенноеЗначение("Перечисление.CRM_ЗавершаемыеТипыАктивности.ПустаяСсылка"));
					
					Структура.Вставить("ЭлементСсылка", Стр.СостояниеИнтереса);
					СоздатьСостояниеИнтересаВБазе(Структура);
					Стр.СостояниеИнтереса = Структура.ЭлементСсылка;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = Структура.ЭлементСсылка;
						КонецЕсли;	
					КонецЦикла;
				Иначе
					Стр.СостояниеИнтереса = СостояниеИнтереса;
					ЭлементыВторогоУровня = ВоронкаДерева.ПолучитьЭлементы();
					Для Каждого СтрЭл Из ЭлементыВторогоУровня Цикл
						
						Если СтрЭл.ИдАмо = Стр.ИдАмо Тогда
							
							СтрЭл.СостояниеИнтереса = СостояниеИнтереса;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭтапВоронкиПоНаименованию(Родитель, Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_СостоянияИнтересов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
	|ГДЕ
	|	CRM_СостоянияИнтересов.Родитель = &Родитель
	|	И CRM_СостоянияИнтересов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросВыполнитьЗагрузкуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИнформациюПоСделкам(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВоронкиИЭтапыНажатие(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Если Объект.СделкиСопоставление.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВыполнитьЗагрузкуЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение,
			 НСтр("ru='Предварительно необходимо загрузить данные по сделкам из AmoCRM. Выполнить загрузку?';
			|en='It is necessary first download transaction data from AmoCRM. Download now?'"), Режим,
			 0);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьВоронкиИЭтапы", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, 
		НСтр("ru='Сопоставлены не все этапы воронок продаж."
"Для не сопоставленных этапов будут созданы новые этапы сценариев продаж в 1С:CRM,"
"а для не сопоставленных воронок будут созданы новые Сценарии продаж. Продолжить?';en='Not all stages of sales funnel are matched."
"For unmatched stages, new stages of sales scripts will be created in 1C:CRM,"
"and for non-mapped funnels, new sales scripts will be created. Continue?'"),
		Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы, Структура)
	
	ЗаполнитьЗначенияСвойств(ДанныеФормы, Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСценарийВоронкуВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаГруппы");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы, Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСостояниеИнтересаВБазе(Структура)
	
	ФормаПВХ = ПолучитьФорму("Справочник.CRM_СостоянияИнтересов.ФормаОбъекта");
	ДанныеФормы = ФормаПВХ.Объект;
	СоздатьСценарийВоронкуВБазеНаСервере(ДанныеФормы, Структура);
	КопироватьДанныеФормы(ДанныеФормы, ФормаПВХ.Объект);
	ФормаПВХ.Записать();
	
	Структура.ЭлементСсылка = ФормаПВХ.Объект.Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПопыткаСопоставленияДанныхСРеквизитами(Таблица)
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Имя");
	ТаблицаСопоставления.Колонки.Добавить("Синоним");
	Если Таблица = "Партнеры" Тогда
		
		ТаблицаРеквизитов = Метаданные.Справочники.Партнеры.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления, Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.ПартнерыСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ПредставлениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо, "Синоним");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо, " ", ""));
				Если НЕ ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Число" Тогда
						Стр.ТипЗначений = "Число";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дата" Тогда
						Стр.ТипЗначений = "Дата";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Таблица = "КонтактныеЛицаПартнеров" Тогда
		
		ТаблицаРеквизитов = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;
		
		Для Каждого Стр Из ТаблицаРеквизитов Цикл
			
			СтрокаСопоставления = ТаблицаСопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСопоставления, Стр);
			
		КонецЦикла;
		
		Для Каждого Стр Из Объект.КонтактныеЛицаСопоставление Цикл
			
			Если ЗначениеЗаполнено(Стр.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо, "Синоним");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Стр.ИмяРеквизита = НайденнаяСтрока.Имя;
				Стр.ПредставлениеРеквизита = НайденнаяСтрока.Синоним; 
			Иначе
				ИмяДопРеквизит = ПолучитьПВХПоИмени(таблица + СтрЗаменить(Стр.ИмяАмо, " ", ""));
				Если НЕ ИмяДопРеквизит = Неопределено Тогда
					Стр.ИмяРеквизита = ИмяДопРеквизит.Имя;
					Стр.ДопРеквизит  = Истина;
					Стр.ПредставлениеРеквизита = ИмяДопРеквизит.Наименование;
					Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
						Стр.ТипЗначений = "Строка";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
						Стр.ТипЗначений = "Булево";
					ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
						Стр.ТипЗначений = "СписокЗначений";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.СоздаватьФизЛиц Тогда
			
			ТаблицаРеквизитов = Метаданные.Справочники.Партнеры.Реквизиты;
			
			Для Каждого Стр Из ТаблицаРеквизитов Цикл
				
				СтрокаСопоставления = ТаблицаСопоставления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСопоставления, Стр);
				
			КонецЦикла;
			
			Для Каждого Стр Из Объект.КонтактныеЛицаСопоставление Цикл
				
				Если ЗначениеЗаполнено(Стр.ПредставлениеРеквизитаФизЛицо) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяСтрока = ТаблицаСопоставления.Найти(Стр.ИмяАмо, "Синоним");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Стр.ИмяРеквизитаФизЛицо = НайденнаяСтрока.Имя;
					Стр.ПредставлениеРеквизитаФизЛицо = НайденнаяСтрока.Синоним; 
				Иначе
					ИмяДопРеквизит = ПолучитьПВХПоИмени("Партнеры" + СтрЗаменить(Стр.ИмяАмо, " ", ""));
					Если НЕ ИмяДопРеквизит = Неопределено Тогда
						Стр.ИмяРеквизитаФизЛицо = ИмяДопРеквизит.Имя;
						Стр.ДопРеквизит  = Истина;
						Стр.ПредставлениеРеквизитаФизЛицо = ИмяДопРеквизит.Наименование;
						Если Строка(ИмяДопРеквизит.ТипЗначения) = "Строка" Тогда
							Стр.ТипЗначенийФизЛицо = "Строка";
						ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Булево" Тогда
							Стр.ТипЗначенийФизЛицо = "Булево";
						ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Число" Тогда
							Стр.ТипЗначенийФизЛицо = "Число";
						ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дата" Тогда
							Стр.ТипЗначенийФизЛицо = "Дата";
						ИначеЕсли Строка(ИмяДопРеквизит.ТипЗначения) = "Дополнительное значение" Тогда
							Стр.ТипЗначенийФизЛицо = "СписокЗначений";
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПВХПоИмени(Имя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Имя КАК Имя,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураВозврата.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		СтруктураВозврата.Вставить("ТипЗначения", ВыборкаДетальныеЗаписи.ТипЗначения);
		СтруктураВозврата.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомпанииПриИзменении(Элемент)
	
	Если Не Объект.Компании Тогда
		Элементы.ДекорацияПомощьПартнеры.Заголовок = "Данные по компаниям переноситься не будут";
		Объект.ПартнерыСопоставление.Очистить();
		Элементы.ПартнерыСопоставление.Доступность = Ложь;
		Элементы.ПартнерыСопоставление.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияПомощьПартнеры.Заголовок = "Данные из amoCRM будут загружены в справочник ""Партнеры""." + 
		"Необходимо сопоставить реквизиты Вашей amoCRM и 1С. Для полей которых не найдено сопоставление," + 
		" рекомендуется создавать ""дополнительные реквизиты"" выбрав в списке соответствующую строку ""Дополнительный реквизит""";
		Элементы.ПартнерыСопоставление.Доступность = Истина;
		Элементы.ПартнерыСопоставление.Видимость = Истина;
		ЗагрузитьИнформациюПоПартнеруНаСервере();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриИзменении(Элемент)
	
	Если Не Объект.Контакты Тогда
		Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные по контактым лицам переноситься не будут";
		Объект.КонтактныеЛицаСопоставление.Очистить();
		Элементы.КонтактныеЛицаСопоставление.Доступность = Ложь;
		Элементы.КонтактныеЛицаСопоставление.Видимость = Ложь;
	Иначе
		Если Объект.Компании Тогда
			Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные из amoCRM будут загружены в справочник ""Контактые лица партнеров""." 
				+
			"Необходимо сопоставить реквизиты Вашей amoCRM и 1С. Для полей которых не найдено сопоставление, " + 
			"рекомендуется создавать ""дополнительные реквизиты"" выбрав в списке соответствующую строку ""Дополнительный реквизит""";
			Элементы.КонтактныеЛицаСопоставление.Доступность = Истина;
			Элементы.КонтактныеЛицаСопоставление.Видимость = Истина;
			ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
		Иначе
			Элементы.ДекорацияПомощьКонтакты.Заголовок = "Данные по контактым лицам переносятся совместно с партнерами";
			Объект.Контакты = Ложь;
			Объект.КонтактныеЛицаСопоставление.Очистить();
			Элементы.КонтактныеЛицаСопоставление.Доступность = Ложь;
			Элементы.КонтактныеЛицаСопоставление.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделкиПриИзменении(Элемент)
	
	Если Объект.Компании И Объект.СделкиСопоставление.Количество() = 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаСделки", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение,
			 НСтр("ru='Перед началом загрузки рекомендуется сопоставить реквизиты интересов и воронок продаж с реквизитами AmoCRM ';
			|en='Before you start downloading,
			| it is recommended to compare lead details and sales funnel with details of AmoCRM '"), Режим,
			 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаСделки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаИнтересы;
		ЗагрузитьИнформациюПоСделкам(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПродажПриИзменении(Элемент)
	
	Если Объект.ЭтапыПродаж Тогда
		ОБъект.Сделки = Истина;
		Объект.ЗагружатьЗадачи = Истина;
		Элементы.ДекорацияПомощьИнтересы.Заголовок = "Для загружаемых  из amoCRM будут созданы Интересы клиентов, а для загружаемых Задач в 1С:CRM будут созданы Взаимодействия. " 
			+
		"Сопоставьте  этапы воронок продаж в amoCRM с этапами  сценариев продаж  в 1С:CRM." + 
		"Для не сопоставленных этапов автоматически  будут созданы новые этапы сценариев  в 1С:CRM.";
		Элементы.СделкиСопоставление.Доступность = Истина;
		ЗагрузитьИнформациюПоСделкамНаСервере();
		
	Иначе
		ОБъект.Сделки = Ложь;
		Объект.ЗагружатьЗадачи = Ложь;
		Элементы.ДекорацияПомощьИнтересы.Заголовок = "Данные по сделкам переноситься не будут";
		Объект.СделкиСопоставление.Очистить();
		Элементы.СделкиСопоставление.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненияРеквизитовФормы(Структура, ИмяПоляДляПроверки = "")
	
	Отказ = Ложь;
	
	Для Каждого Стр Из Структура Цикл
		
		Если ТипЗнч(Стр.Значение) = Тип("ДанныеФормыКоллекция") Тогда
			
			Для Каждого ЗначениеСтроки Из Стр.Значение Цикл
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеСтроки, "Выбрано")
					И ЗначениеСтроки.Выбрано <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ЗначениеСтроки[ИмяПоляДляПроверки]) Тогда
					
					Отказ = Истина;
					
					Возврат Отказ;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			
			Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
				
				Отказ = Истина;
				ПоказатьПредупреждение(, "Необходимо заполнить обязательное поле " + Стр.Ключ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПереходДалее(Команда)
	
	Если Элементы.ФормаПереходДалее.Заголовок = "Готово" Тогда
		ОБъект.ПомощникПройден = Истина;
		Закрыть();
	ИначеЕсли Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM" Тогда
		ЗагрузкаДанных(Истина);
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда
		СтруктураПроверкиПолей = Новый Структура("Домен,Ключ,СекретныйКлюч,IDИнтеграции", Объект.Домен,
			 Объект.Хеш, Объект.СекретныйКлюч,
			 Объект.IDИнтеграции);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей);
		Если НЕ Отказ Тогда
			Если Не Объект.ПодключениеСуществует Тогда
				ВыполнитьПроверкуПодключенияНаСервере();
				Отказ = НЕ Объект.ПодключениеСуществует; 
			КонецЕсли;
		КонецЕсли;
		Если Не Отказ Тогда
			Элементы.СтраницаПользователи.Видимость = Истина;
			Элементы.ФормаКнопкаНазад.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
			ЗаполнитьПользователейДлясопоставления();
			//Объект.Домен = СтрЗаменить(Объект.Домен,".amocrm.ru","");
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи Тогда
		СтруктураПроверкиПолей = Новый Структура("Пользователи", Объект.ПользователиСопоставление);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "Пользователь");
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьПользователи", ЭтотОбъект), "Не все пользователи из amoCRM сопоставлены с пользователями программы." +
			"В 1С:CRM будут созданы новые пользователи.  Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Элементы.СтраницаПартнеры.Видимость = Истина;
			ЗагрузитьИнформациюПоПартнеруНаСервере();
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
			Объект.Компании = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры Тогда
		СтруктураПроверкиПолей = Новый Структура("Партнеры", Объект.ПартнерыСопоставление);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "ИмяРеквизита");
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьПартнеры", ЭтотОбъект), "Сопоставлены не все поля. " +
			"Для не сопоставленных полей будут созданы новые поля в справочнике Клиенты. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Если Объект.Компании Тогда
				Объект.Контакты = Истина;
				СоздаватьФизЛицПриИзменении(Истина);
			КонецЕсли;
			КонтактыПриИзменении(Истина);
			Элементы.СтраницаКонтакныеЛица.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица Тогда
		СтруктураПроверкиПолей = Новый Структура("КЛ", Объект.КонтактныеЛицаСопоставление);
		
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "ПредставлениеРеквизита");
		Если Объект.СоздаватьФизЛиц Тогда
			Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "ПредставлениеРеквизитаФизЛицо");
		КонецЕсли;
		
		Если Отказ Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДозаполнитьТабличнуюЧастьКонтактныеЛица", ЭтотОбъект), "Сопоставлены не все поля. " +
			"Для не сопоставленных полей  будут созданы новые поля в справочнике Контакты.  Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			
			ЗагрузитьИнформациюПоСделкам(Истина);
			Объект.ЭтапыПродаж = Истина;
			Объект.Сделки = Истина;
			Объект.ЗагружатьЗадачи = Истина;
			Элементы.СтраницаИнтересы.Видимость = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
			
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы Тогда
		СтруктураПроверкиПолей = Новый Структура("Сделки,Организация", Объект.СделкиСопоставление, Объект.Организация);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "СостояниеИнтереса");
		
		Если Отказ Тогда 
			СоздатьВоронкиИЭтапыНажатие(Истина);
		КонецЕсли;
		
		СтруктураПроверкиПолей = Новый Структура("ВидыВзаимодействий", Объект.ВидыВзаимодействийСопоставление);
		Отказ = ПроверкаЗаполненияРеквизитовФормы(СтруктураПроверкиПолей, "ВидыВзаимодействий");
		Если Отказ Тогда 
			СоздатьВидыВзаимодействийВБазеДанных();
		КонецЕсли;
		
		ЗаполнитьДекорациюПоЗагрузке();
		
		Элементы.СтраницаЗагрузкаДанных.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных;
		Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM";
	КонецЕсли;
	
	СФормироватьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыВзаимодействияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВидыВзаимодействияЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВидыВзаимодействияЗавершениеНаСервере()

	Для Каждого Стр Из Объект.ВидыВзаимодействийСопоставление Цикл
		
		Если Не ЗначениеЗаполнено(Стр.ВидыВзаимодействий) Тогда
			
			Если Стр.ИдАмо = "2" Тогда
				ОбъектПоиск = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
				ОбъектПоиск.Наименование = Стр.ИмяАмо;
				ОбъектПоиск.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
				ОбъектПоиск.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча;
				ОбъектПоиск.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
				
				ОбъектПоиск.Записать();
			Иначе
				
				ОбъектПоиск = Справочники.CRM_ВидыВзаимодействий.СоздатьЭлемент();
				ОбъектПоиск.Наименование = Стр.ИмяАмо;
				ОбъектПоиск.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес;
				ОбъектПоиск.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок;
				ОбъектПоиск.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
				
				ОбъектПоиск.Записать();
				
			КонецЕсли;
			
			Стр.ВидыВзаимодействий = ОбъектПоиск.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВидыВзаимодействийВБазеДанных()
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьВидыВзаимодействияЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение,
		 НСтр("ru='Данные по видам взаимодействий сопоставлены не в полном объеме. Создать недостающие элементы?';
		|en='Data on types of interactions full mapped. Create missing elements?'"), Режим,
		 0);

КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьПартнеры(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита", "");
	
	МассивСтрок = Объект.ПартнерыСопоставление.НайтиСтроки(СтрОтбор);
	Для Каждого Стр Из МассивСтрок Цикл
		
		Стр.ИмяРеквизита = "СоздатьДопРеквизит";
		Стр.ДопРеквизит = Истина;
		Стр.ПредставлениеРеквизита = "Дополнительный реквизит(клиент)";
	КонецЦикла;
	
	Элементы.СтраницаКонтакныеЛица.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ЗагрузитьИнформациюПоКонтактнымЛицамНаСервере();
	Объект.Контакты = Истина;
	Если Объект.СоздаватьФизЛиц Тогда
		СоздаватьФизЛицПриИзменении(Истина);
	КонецЕсли;
	//Заголовок = "Загрузка данных из AmoCRM / Контакты";
	
	СФормироватьЗаголовок();

КонецПроцедуры

&НаКлиенте
Функция ОтправитьПисьмоНаПочтуНовомуПользователю(Стр)
	
	// АПК:1223-выкл отключаем проверку на использование местоимений "Вы", "Вас" и пр.
	ТекстСообщения = "Здравствуйте, " + Стр.ИмяАмо + "!" 
	+ Символы.ПС + ПользователиКлиентСервер.ТекущийПользователь() + " добавил Вас в систему 1C:CRM." 
	+ "Чтобы перейти в систему перейдите по ссылке: " + Символы.ПС + ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Структура = Новый Структура;
	Структура.Вставить("Кому", Стр.ЭлектронныйАдресБаза);
	
	МассивПолучателей = Новый Массив;
	СтруктураПолуч = Новый Структура;
	СтруктураПолуч.Вставить("Адрес", Стр.ЭлектронныйАдресБаза);
	СтруктураПолуч.Вставить("Представление", "МММ");
	
	Структура.Вставить("ПолучателиСообщения", МассивПолучателей);
	
	Структура.Вставить("Тема", "Вас добавили в систему 1C:CRM");
	// АПК:1223-вкл
	
	Структура.Вставить("Тело", ТекстСообщения);
	
	Структура.Вставить("ИдентификаторСообщения", "");
	
	Структура.Вставить("ТипТекста", ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML"));
	Попытка
		Текст = ОтправитьПисьмоПользователюНаСервере(Структура);
	Исключение
		Текст = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ОтправитьПисьмоПользователюНаСервере(Структура)
	
	Попытка
		
		УчЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
		ИдСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчЗапись, Структура);
		
		Текст = "";
		
	Исключение
		Текст = ОписаниеОшибки();
	КонецПопытки;

	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьПользователи(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Пользователь) Тогда
			Пользователь = СоздатьПольователяВБазе(Стр.ИмяАмо, Стр.ЭлАдресПользователя);
			Стр.Пользователь = Пользователь;
		КонецЕсли;	
	КонецЦикла;
	
	Если ОтправитьУведомлениеНаПочту Тогда
		Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
			Если Стр.Выбрано Тогда
				Если СтрНайти(Стр.ЭлектронныйАдресБаза, "нет email") = 0 Тогда
					ТекстОтправка = ОтправитьПисьмоНаПочтуНовомуПользователю(Стр);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТекстОтправка = "" Тогда
			Элементы.ДекорацияОтправкаУведомления.Заголовок = "Приглашения отправлены выбранным пользователям";
		Иначе
			Элементы.ДекорацияОтправкаУведомления.Заголовок = "Ошибка при отправке уведомлений выбранным пользователям";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаОшибки.Видимость = Истина;
	
	СФормироватьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьТабличнуюЧастьКонтактныеЛица(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяРеквизита", "");
	
	МассивСтрок = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
	Для Каждого Стр Из МассивСтрок Цикл
		
		Стр.ИмяРеквизита = "СоздатьДопРеквизит";
		Стр.ДопРеквизит = Истина;
		Стр.ПредставлениеРеквизита = "Дополнительный реквизит(контактные лица)";
		
	КонецЦикла;
	
	Если Объект.СоздаватьФизЛиц Тогда
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяРеквизитаФизЛицо", "");
		
		МассивСтрок = Объект.КонтактныеЛицаСопоставление.НайтиСтроки(СтрОтбор);
		Для Каждого Стр Из МассивСтрок Цикл
			Стр.ИмяРеквизитаФизЛицо = "СоздатьДопРеквизит";
			Стр.ДопРеквизит = Истина;
			Стр.ПредставлениеРеквизитаФизЛицо = "Дополнительный реквизит(физ лицо)";
		КонецЦикла;
		
	КонецЕсли;
	
	ЗагрузитьИнформациюПоСделкамНаСервере();
	// заполняем данные по видам взаимодействия
	ЗагрузитьИнформациюПоВидамВзаимодействия();
	РазвернутьВсеСтрокиДерева();
	Объект.Организация = получитьПервуюОрганизацию();
	
	Объект.ЭтапыПродаж = Истина;
	Объект.Сделки = Истина;
	Объект.ЗагружатьЗадачи = Истина;
	Элементы.СтраницаИнтересы.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	
	СФормироватьЗаголовок();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюПоЗагрузке()
	
	// Если уже созданы, то не нужно создавать
	Если Элементы.Найти("ДекорацияИнфоПользователи") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Пользователи
	Элемент = Элементы.Добавить("ДекорацияИнфоПользователи", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = "Пользователи";
	Элемент.УстановитьДействие("Нажатие", "ДекорацияЭлементыНажатие");
	
	ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаПользователи", Тип("ДекорацияФормы"),
		 Элементы.ГруппаДекорацииСветофор);
	ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
	Если ОБъект.ПользователиСопоставление.Количество() > 0 Тогда
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
	Иначе
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
	КонецЕсли;
	
	// Партнеры
	Элемент = Элементы.Добавить("ДекорацияИнфоПартнеры", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = "Клиенты";
	Элемент.УстановитьДействие("Нажатие", "ДекорацияЭлементыНажатие");
	
	ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаПартнеры", Тип("ДекорацияФормы"),
		 Элементы.ГруппаДекорацииСветофор);
	ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
	Если Объект.Компании Тогда
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
	Иначе
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
	КонецЕсли;
	
	// Контактные лица
	Элемент = Элементы.Добавить("ДекорацияИнфоКонтактныеЛица", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = "Контакты";
	Элемент.УстановитьДействие("Нажатие", "ДекорацияЭлементыНажатие");
	
	ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаКонтактныеЛица", Тип("ДекорацияФормы"),
		 Элементы.ГруппаДекорацииСветофор);
	ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
	Если Объект.Контакты Тогда
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
	Иначе
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
	КонецЕсли;
	
	// Контактные лица
	Элемент = Элементы.Добавить("ДекорацияИнфоЭтапыПродаж", Тип("ДекорацияФормы"), Элементы.ГруппаДекорацииНадписи);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = "Интересы клиентов и Взаимодействия";
	Элемент.УстановитьДействие("Нажатие", "ДекорацияЭлементыНажатие");
	
	ЭлементКартинка = Элементы.Добавить("ДекорацияИнфоКартинкаЭтапыПродаж", Тип("ДекорацияФормы"),
		 Элементы.ГруппаДекорацииСветофор);
	ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
	Если Объект.ЭтапыПродаж Тогда
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияОсновная;
	Иначе
		ЭлементКартинка.Картинка = БиблиотекаКартинок.CRM_КонтактнаяИнформацияВторичная;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейДлясопоставления()
	
	Если Не Объект.ПользователиСопоставлены ИЛИ Объект.ПользователиСопоставление.Количество() = 0 Тогда
		
		ОбъектДанных = РеквизитФормыВЗначение("Объект");
		
		Ресурс = "/api/v4/users";
		ОтветСервера = ОбъектДанных.ВыполнитьЗагрузкуДанных(Ресурс, 10, Истина);
		
		ЗначениеВРеквизитФормы(ОбъектДанных, "Объект");
		// Пользователей сопоставляем по электронному адресу
		СопоставитьПользователейПоЭлектронномуАдресу();
		
		Объект.ПользователиСопоставлены = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СопоставитьПользователейПоЭлектронномуАдресу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПользователей.ИдАмо КАК ИдАмо,
	|	ТаблицаПользователей.ИмяАмо КАК ИмяАмо,
	|	ТаблицаПользователей.ЭлАдресПользователя КАК ЭлАдресПользователя,
	|	ТаблицаПользователей.Пользователь КАК Пользователь,
	|	ТаблицаПользователей.Выбрано КАК Выбрано
	|ПОМЕСТИТЬ ВтПользователи
	|ИЗ
	|	&ТаблицаПользователей КАК ТаблицаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПользователиКонтактнаяИнформация.Представление КАК ПредставлениеАдреса
	|ПОМЕСТИТЬ ПользователиБазы
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &Тип
	|	И ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Представление В
	|			(ВЫБРАТЬ
	|				ВтПользователи.ЭлАдресПользователя КАК ЭлАдресПользователя
	|			ИЗ
	|				ВтПользователи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиБазы.Ссылка КАК Пользователь,
	|	ВтПользователи.ИдАмо КАК ИдАмо,
	|	ВтПользователи.ИмяАмо КАК ИмяАмо,
	|	ВтПользователи.ЭлАдресПользователя КАК ЭлАдресПользователя,
	|	ВтПользователи.Выбрано КАК Выбрано
	|ИЗ
	|	ВтПользователи КАК ВтПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиБазы КАК ПользователиБазы
	|		ПО (ПользователиБазы.ПредставлениеАдреса = ВтПользователи.ЭлАдресПользователя)";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТаблицаПользователей", Объект.ПользователиСопоставление.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.ПользователиСопоставление.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭлементыНажатие(Элемент)
	
	Если Элемент.Заголовок = "Пользователи" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
	ИначеЕсли Элемент.Заголовок = "Партнеры" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
	ИначеЕсли Элемент.Заголовок = "Контактные лица" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ИначеЕсли Элемент.Заголовок = "Этапы продаж" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	ИначеЕсли Элемент.Заголовок = "События" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительныеДанные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияПриИзменении(Элемент)
	
	Если Объект.События Тогда
		Элементы.ДекорацияПомощьСобытие.Заголовок = "Переносятся  примечания к сделкам, компаниям, контактам из Вашей amoCRM в 1С. " 
			+ 
		"Загружаются файлы, которые прикреплены к объектам в Вашей amoCRM";
	Иначе
		Элементы.ДекорацияПомощьСобытие.Заголовок = "Дополнительные данные не будут перенесены ";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	Если ТекДанные.Воронка Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",
			 ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		ТекСтрокаИндекс = Элементы.ДеревоЗначенийСделки.ТекущаяСтрока;
		Родитель = ДеревоЗначенийСделки.НайтиПоИдентификатору(ТекСтрокаИндекс).ПолучитьРодителя();
		Если Не ЗначениеЗаполнено(Родитель.СостояниеИнтереса) Тогда
			ПоказатьПредупреждение(, "Не выбрана воронка продаж");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель", Родитель.СостояниеИнтереса);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.ДеревоЗначенийСделкиСостояниеИнтереса.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДАнные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "Партнеры", "Партнеры");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка Из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Ложь);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент, ,
		 , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.ПартнерыСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.ПартнерыСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "КонтактныеЛицаПартнеров", "КонтактныеЛицаПартнеров");
	МассивРеквизитов = Новый Массив;
	Для каждого Строка Из СопоставлениеРеквизитов Цикл
		Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
			МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Ложь);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент, ,
		 , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция СоздатьПольователяВБазе(Имя, АдресПочтыПользователя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	
	ПользовательИБ.имя = Имя;
	
	ПользовательИБ.ПолноеИмя = Имя;
	
	ПользовательИБ.АутентификацияСтандартная = Истина;
	
	ПользовательИБ.Пароль = "";
	
	ПользовательИБ.записать();
	
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",
		 ПользовательИБ.УникальныйИдентификатор);
	
	Если Пользователь.Наименование = "" Тогда
		// создаем пользователя 
		
		ПользовательОб = Справочники.Пользователи.СоздатьЭлемент();
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПользователяИБ, ПользовательИБ);
		
		ОписаниеПользователяИБ.УникальныйИдентификатор =  ПользовательИБ.УникальныйИдентификатор;
		
		ПользовательОб.Наименование = ОписаниеПользователяИБ.ПолноеИмя; 
		
		ОбъектXDTOКИ = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOПоПредставлению(АдресПочтыПользователя,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗначенияПолей = CRM_УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ПользовательОб, ЗначенияПолей,
			 Справочники.ВидыКонтактнойИнформации.EmailПользователя,
			 Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ПользовательОб.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПользовательОб.записать();
		
	КонецЕсли;
	
	ГруппаДоступа = Справочники.ГруппыДоступа.НайтиПоНаименованию("Менеджеры по продажам");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
	НовСтр = ГруппаДоступаОбъект.Пользователи.Добавить();
	НовСтр.Пользователь = ПользовательОб.Ссылка;
	
	Попытка
		ГруппаДоступаОбъект.Записать();
	Исключение
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение "Ошибка при установке прав ""менеджер по продажам""";
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательОб.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаОбработкаВыбора(Элемент,
	 ВыбранноеЗначение,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные.ТипЗначений;
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначений = ТипЗнач;
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизита = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНазад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки;
		Элементы.ФормаКнопкаНазад.Видимость = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных Тогда
		Элементы.ФормаПереходДалее.Заголовок = "Далее";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных;
		Элементы.ФормаПереходДалее.Заголовок = "Импорт данных из amoCRM";
	КонецЕсли;
	
	СФормироватьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура СФормироватьЗаголовок()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда
		Заголовок = "Импорт данных из amoCRM / Подключение";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПользователи Тогда
		Заголовок = "Импорт данных из amoCRM / Пользователи";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПартнеры Тогда
		Заголовок = "Импорт данных из amoCRM / Компании";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонтакныеЛица Тогда
		Заголовок = "Импорт данных из amoCRM / Контакты";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИнтересы Тогда
		Заголовок = "Импорт данных из amoCRM / Настройка импорта Сделок и Задач";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаДанных Тогда
		Заголовок = "Импорт данных из amoCRM / Загрузка данных";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЖурнал Тогда
		Заголовок = "Импорт данных из amoCRM / Лог загрузки";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиСостояниеИнтересаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеДерево = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	
	ИдАмо = ТекДанныеДерево.ИДАмо;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИдАмо", ИдАмо);
	
	МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
	
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.СостояниеИнтереса = ВыбранноеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчетПоСозданнымОбъектамНажатие(Элемент)
	
	ТабДокумент = ПоказатьОтчетПоСозданнымОбъектамНаСервере();
	ТабДокумент.Показать("Созданные/обновленные объекты");  
	
КонецПроцедуры

&НаСервере
Функция ПоказатьОтчетПоСозданнымОбъектамНаСервере()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("СтрокаДанных");
	
	ТабДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого Стр Из Объект.ЖурналСозданныхОбъектов Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаДанных.Параметры, Стр);
		ТабДокумент.Вывести(ОбластьСтрокаДанных);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьУведомлениеНаПочтуПриИзменении(Элемент)
	
	Если ОтправитьУведомлениеНаПочту Тогда
		
		Элементы.УчетнаяЗапись.Видимость = Истина;
		Элементы.ПользователиСопоставлениеВыбрано.Видимость = Истина;
		Элементы.ПользователиСопоставлениеЭлектронныйАдресБаза.Видимость = Истина;
		ОбработатьТабличнуюЧастьПользователи();
		
		СписокЗаписей = ПолучитьСписокУчетныхЗаписейПользователя();
		
		Если СписокЗаписей.Количество() = 0 Тогда
			
			ФормаСправочника = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.CRM_ФормаЭлемента");
			ДанныеФормы = ФормаСправочника.Объект;
			ЗаполнитьНаСервереУчетнойЗаписи(ДанныеФормы);
			КопироватьДанныеФормы(ДанныеФормы, ФормаСправочника.Объект);
			ФормаСправочника.Открыть();
			
		ИначеЕсли СписокЗаписей.Количество() = 1 Тогда
			
			Объект.УчетнаяЗапись = СписокЗаписей[0];
			
		Иначе 
			
			ПараметрыФ = Новый Структура;
			ПараметрыФ.Вставить("Ссылка", СписокЗаписей);
			Форма = ПолучитьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора", ПараметрыФ, ЭтотОбъект);
			Форма.Заголовок = "Выберите адрес электронной почты от которого будет выслано приглашение";
			Форма.Открыть();
			
		КонецЕсли;
		
	Иначе
		
		Объект.УчетнаяЗапись = Объект.УчетнаяЗапись.Пустая();
		Элементы.ПользователиСопоставлениеВыбрано.Видимость = Ложь;
		Элементы.ПользователиСопоставлениеЭлектронныйАдресБаза.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереУчетнойЗаписи(НовыйОбъект)
	НовыйОбъект.АдресЭлектроннойПочты = ПолучитьЭлАдресТекПользователя(ПользователиКлиентСервер.ТекущийПользователь());
КонецПроцедуры   

&НаСервере
Функция ПолучитьЭлАдресТекПользователя(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользователиКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Тип = &Тип
	|	И ПользователиКонтактнаяИнформация.Вид = &Вид
	|	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Представление;
		
	Иначе 
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокУчетныхЗаписейПользователя()
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбщаяУчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.CRM_ЭтоОбщаяУчетнаяЗапись
	|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПочтыПользователя
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
	|	И CRM_УчетныеЗаписиЭлектроннойПочты.Запись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщаяУчетнаяЗапись.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	ОбщаяУчетнаяЗапись КАК ОбщаяУчетнаяЗапись
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПочтыПользователя.УчетнаяЗапись
	|ИЗ
	|	ПочтыПользователя КАК ПочтыПользователя";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Массив.Добавить(ВыборкаДетальныеЗаписи.УчетнаяЗапись);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЛогЗагрузкиНажатие(Элемент)
	
	ПоказатьЗначение(, Объект.ЖурналСобытий);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.АдресЭлектроннойПочты",
		 ПолучитьЭлАдресТекПользователя(ПользователиКлиентСервер.ТекущийПользователь()));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрВыбора);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.УчетнаяЗапись.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТабличнуюЧастьПользователи()
	
	Для Каждого Стр Из Объект.ПользователиСопоставление Цикл
		
		Стр.Выбрано = Истина;
		Если ЗначениеЗаполнено(Стр.Пользователь) Тогда
			Стр.ЭлектронныйАдресБаза = ПолучитьЭлАдресТекПользователя(Стр.Пользователь);
			Если Стр.ЭлектронныйАдресБаза = "" Тогда
				Стр.ЭлектронныйАдресБаза = "нет email (email amoCRM:" + Стр.ЭлАдресПользователя + ")";
			КонецЕсли;
		Иначе
			Стр.ЭлектронныйАдресБаза = "нет email (email amoCRM:" + Стр.ЭлАдресПользователя + ")";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСопоставлениеПользовательПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПользователиСопоставление.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		
		ТекДанные.ЭлектронныйАдресБаза = ПолучитьЭлАдресТекПользователя(ТекДанные.Пользователь);
		Если ТекДанные.ЭлектронныйАдресБаза = "" Тогда
		ТекДанные.ЭлектронныйАдресБаза = "нет email (email amoCRM:" + ТекДанные.ЭлАдресПользователя + ")";
		КонецЕсли;
	Иначе
		
		ТекДанные.ЭлектронныйАдресБаза = "нет email (email amoCRM:" + ТекДанные.ЭлАдресПользователя + ")";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтправкаУведомленияНажатие(Элемент)
	
	ПоказатьЗначение(, ТекстОтправка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗначенийСделкиВыбраноПриИзменении(Элемент)
	
	ТекДанные = Элементы.ДеревоЗначенийСделки.ТекущиеДанные;
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИдАмо", ТекДанные.ИдАмо);
	
	МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
	
	Для Каждого Стр Из МассивСтрок Цикл
		Стр.Выбрано = ТекДанные.Выбрано;
	КонецЦикла;
	Если ТекДанные.Воронка Тогда
		ВерхДерева = ДеревоЗначенийСделки.ПолучитьЭлементы();
		Для Каждого тЭл Из ВерхДерева Цикл
			Если ТекДанные.ИдАмо = тЭл.ИдАмо Тогда
				низДерева = тЭл.ПолучитьЭлементы();
				Для Каждого СтрНиз Из низДерева Цикл
					СтрНиз.Выбрано = ТекДанные.Выбрано;
					СтрОтбор = Новый Структура;
					СтрОтбор.Вставить("ИдАмо", СтрНиз.ИдАмо);
					
					МассивСтрок = Объект.СделкиСопоставление.НайтиСтроки(СтрОтбор);
					
					Для Каждого Стр Из МассивСтрок Цикл
						Стр.Выбрано = ТекДанные.Выбрано;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ПоказатьПредупреждение(, "Возможно отменить воронку продаж целиком, этапы продаж недоступны для отмены");
		ТекДанные.Выбрано = НЕ ТекДанные.Выбрано;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьФизЛицПриИзменении(Элемент)
	
	Если Объект.СоздаватьФизЛиц Тогда
		Элементы.КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицо.Видимость = Истина;
		ПопыткаСопоставленияДанныхСРеквизитами("КонтактныеЛицаПартнеров");
	Иначе
		Элементы.КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицо.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицоНачалоВыбора(Элемент,
	 ДанныеВыбора,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИмяМакета, Отбор", "ПартнерыФизЛица", "ПартнерыФизЛица");
	МассивРеквизитов = Новый Массив;
	// Для каждого Строка Из Объект.КонтактныеЛицаСопоставление Цикл
	//	Если Строка(Строка.ТипРеквизита) <> "Строка" Тогда
	//		МассивРеквизитов.Добавить(Строка.ПредставлениеРеквизита);
	//	КонецЕсли;
	//КонецЦикла;
	ПараметрыОткрытия.Вставить("ИсключитьРеквизиты", МассивРеквизитов);
	ПараметрыОткрытия.Вставить("ФизЛицо", Истина);
	ОткрытьФорму("Обработка.CRM_ОбменСAmoCrm.Форма.ФормаВыбораРеквизита", ПараметрыОткрытия, Элемент, ,
		 , , ,
		 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСопоставлениеПредставлениеРеквизитаФизЛицоОбработкаВыбора(Элемент,
	 ВыбранноеЗначение,
	 СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнач = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные.ТипЗначенийФизЛицо;
	ТекДанные = Элементы.КонтактныеЛицаСопоставление.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ДопРеквизит Тогда
		ТекДанные.ТипЗначенийФизЛицо = ТипЗнач;
	КонецЕсли;
	
	Если Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Адрес" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "АдресПартнера";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Телефон" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "ТелефонКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Электронная почта" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "EmailКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "E-mail для рассылки" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "EmailКонтактногоЛица";
	//ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Место рождения" Тогда
	//	ТекДанные.ИмяРеквизитаФизЛицо = "CRM_МестоРожденияКонтактногоЛица";
	ИначеЕсли Строка(ВыбранноеЗначение.ИмяРеквизитаФизЛицо) = "Мобильный телефон" Тогда
		ТекДанные.ИмяРеквизитаФизЛицо = "МобильныйТелефонКонтактногоЛица";
	КонецЕсли;
	
	Если НЕ ТекДанные.ИмяРеквизитаФизЛицо = "СоздатьДопРеквизит" Тогда
		
		СтрокаСопоставления = СопоставлениеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСопоставления, ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	
	ПолучитьКлючДоступа(КодАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКлючДоступа(КодАвторизации)
	
	Ресурс = "/oauth2/access_token";
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("client_id", Объект.IDИнтеграции);
	СтруктураЗапроса.Вставить("client_secret", Объект.СекретныйКлюч);
	СтруктураЗапроса.Вставить("grant_type", "authorization_code");
	СтруктураЗапроса.Вставить("code", КодАвторизации);
	СтруктураЗапроса.Вставить("redirect_uri", Объект.СсылкаДляПеренаправления);
	СтрокаЗапроса = CRM_РаботаСМессенджерамиСервер.ПолучитьСтрокуJSON(СтруктураЗапроса, Истина);
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(
		CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос(Объект.Домен, СтрокаЗапроса, Ресурс));
	Если СтруктураОтвета.Свойство("access_token") Тогда
		Объект.Хеш = СтруктураОтвета.access_token;
		Объект.refresh_token = СтруктураОтвета.refresh_token;
		Объект.СрокДействияТокена = ТекущаяДатаСеанса() + СтруктураОтвета.expires_in;
		ВыполнитьПроверкуПодключенияНаСервере();
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось авторизоваться под указанным пользователем.
                                                   |Скопируйте код авторизации в личном кабинете amocrm и повторите попытку.'"));
		Объект.refresh_token = "";
		Объект.ПодключениеСуществует = Ложь;
		УстановитьУсловноеОформлениеЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСсылку(Команда)
	Объект.СсылкаДляПеренаправления = "https://1crm.ru/authCrm/";
	УстановитьДоступностьЭлементов();
КонецПроцедуры

Процедура ЗаписатьСвойство(НаборСвойств, ПВХ)
	Если НаборСвойств.ДополнительныеРеквизиты.Найти(ПВХ) = Неопределено Тогда
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		НовСтр = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = ПВХ.Ссылка;
		НаборСвойствОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображениеПараметровПодключения()
	
	Если Объект.ПодключениеСуществует Тогда
		Элементы.ГруппаНастройкаПодключения.Скрыть();
	Иначе
		Элементы.ГруппаНастройкаПодключения.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВведенКорректныйДомен()
	
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Домен) ИЛИ НЕ (Прав(Нрег(Объект.Домен), 10) = ".amocrm.ru") Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
