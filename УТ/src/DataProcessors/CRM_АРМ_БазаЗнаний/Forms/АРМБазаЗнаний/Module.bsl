
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущееРешение;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеЭкспортныеМетоды.ПодсистемаCRMИспользуется() Тогда
		CRM_ЛицензированиеЭкспортныеМетоды.ВывестиУведомлениеОНедоступности(НСтр("ru = 'Базу знаний'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().
			АРМБазаЗнаний_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ИспользоватьПодразделения = CRM_ОбщегоНазначенияПовтИсп.ИспользоватьПодразделения();
	
	Элементы.Подразделение.Видимость = ИспользоватьПодразделения;
	
	ПоказаныРезультатыСПо = НСтр("ru='Поиск не выполнялся';en='No search was performed'");
	ОбластиПоиска.Добавить("база знаний", НСтр("ru='база знаний';en='knowledge base'"), Истина);
	ОбластиПоиска.Добавить("письма", НСтр("ru='письма';en='letters'"), Ложь);
	ОбластиПоиска.Добавить("диалоги", НСтр("ru='диалоги';en='dialogs'"), Ложь);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КатегорииРешений.Ссылка КАК Категория,
	|	CRM_КатегорииРешений.ЦветИндекс КАК ЦветИндекс,
	|	ЛОЖЬ КАК Пометка,
	|	CRM_КатегорииРешений.ПредставлениеНаименования КАК Наименование
	|ИЗ
	|	Справочник.CRM_КатегорииРешений КАК CRM_КатегорииРешений
	|ГДЕ
	|	НЕ CRM_КатегорииРешений.ПометкаУдаления";
	СписокКатегорий.Загрузить(Запрос.Выполнить().Выгрузить());
	ПриИзмененииОтборовНаСервере();
	
	Попытка 
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 1);
		ППВключен = Истина;
	Исключение
		ППВключен = Ложь;
		Элементы.ДекорацияАктуальностьИндекса.Видимость = НЕ ППВключен;
		Элементы.СтрокаПоиска.Доступность = ППВключен;
	КонецПопытки;	
	
	ОткрытаИзДругойФормы = Параметры.Свойство("ОткрытаИзДругойФормы");
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		СтрокаПоиска = Параметры.СтрокаПоиска;
	КонецЕсли;
	РежимФильтраПоКатегориям = НСтр("ru = 'все отмеченные категории'");

	// +Рабочий стол
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -Рабочий стол
	
	// +Модели машинного обучения
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьМоделиМашинногоОбучения") Тогда
		Помощник_Использовать = Помощник_ПроверитьИспользование();
		Если Помощник_Использовать Тогда
			Элементы.ГруппаПомощник.Видимость = Истина;
		КонецЕсли;

		ОписаниеОшибкиСервисы = "";
		СервисыДоступны = CRM_ЛицензированиеЭкспортныеМетоды.ПроверитьПодключениеКОтраслевымСервисам(ОписаниеОшибкиСервисы);
	КонецЕсли;
	// -Модели машинного обучения
	
	CRM_ОбщегоНазначенияСервер.ЗакончитьЗамерВремениСозданияФормы(ЭтотОбъект, ВремяНачалаЗамера);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРешений,
		 "ТекущийПользователь", Пользователи.ТекущийПользователь(),
		 Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРешений,
		 "ЕстьПраваАдминистратора", CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора(),
		 Истина);
	
	Если Не Константы.CRM_ИспользоватьСтатусыОтветовБазыЗнаний.Получить() Тогда
		
		Элементы.СписокРешенийСтатусРешения.Видимость = Ложь;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРешений, "Доступно", Истина,
																						ВидСравненияКомпоновкиДанных.Равно, , Истина,
																						РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
	НастройкиБазыЗаний = Константы.CRM_НастройкиБазыЗнаний.Получить().Получить();
	Если НастройкиБазыЗаний <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиБазыЗаний);
	КонецЕсли;
	
	ТекущиеПользователи = РегистрыСведений.CRM_ОтсутствиеСотрудников.ЗамещаемыеПользователи(ТекущийПользователь);
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(CRM_РольОтветственного) Тогда
		ИсполнителиРоли = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРоли(CRM_РольОтветственного);
		Результат = (CRM_ОбщегоНазначенияКлиентСервер.ПересечениеМножеств(ТекущиеПользователи,
			 ИсполнителиРоли.ВыгрузитьЗначения()).Количество() > 0);
	ИначеЕсли ЗначениеЗаполнено(CRM_Ответственный) Тогда
		Результат = (ТекущиеПользователи.Найти(CRM_Ответственный) <> Неопределено);
	КонецЕсли;
	
	Если (Не CRM_РольОтветственного = Справочники.РолиИсполнителей.ПустаяСсылка()
		 Или Не CRM_Ответственный = Справочники.Пользователи.ПустаяСсылка())
		 И Не Результат Тогда
		
		Элементы.РешенияОбщаяКомандаCRM_СоздатьПоручение.Видимость = Ложь;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "CRM_РешенияОбновлениеСправочника") И (Параметр = ТекущееРешение) Тогда
		СодержимоеРезультата = CRM_БазаЗнанийСервер.ЗаполнитьПредставлениеРешенияДляСписка(Параметр, УникальныйИдентификатор);
		Элементы.Файлы.Заголовок = НСтр("ru='Файлы';en='Files'") + " (" + ПолучитьЧислоВложений(ТекущееРешение) + ")";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ОбщегоНазначенияКлиент.НачатьЗамерВремениОткрытияФормы(ЭтотОбъект);
	
	ОбластиПоискаПометкаПриИзменении("");
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СтрокаПоискаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Не СервисыДоступны Тогда
		Элементы.СтраницаПомощник.Видимость = Ложь;
		Элементы.СтраницаПредупреждение.Видимость = Истина;
		Элементы.ДекорацияНедоступностьИТСОтраслевой.Заголовок = 
			CRM_ЛицензированиеКлиент.СформироватьСтрокуСервисНедоступен(ОписаниеОшибкиСервисы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	CRM_РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		CRM_РабочийСтолКлиент.ПриЗакрытииФормы(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ППВключен Тогда
		ПоказыватьРезультаты = СтрокаПоиска <> "";
		Элементы.ГруппаРезультатПоиска.Видимость = ПоказыватьРезультаты;
		Элементы.СписокРешений.Видимость = НЕ ПоказыватьРезультаты;	
		
		Если НЕ ПоказыватьРезультаты Тогда
			ПоказаныРезультатыСПо = НСтр("ru='Поиск не выполнялся';en='No search was performed'");
			
		Иначе
			ПараметрыОповещения = Новый Структура;
			ОбработкаОтвета(КодВозвратаДиалога.Да, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
	// +Модели машинного обучения
	Если Помощник_Использовать Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьПодборРекомендаций", 0.1, Истина);
	КонецЕсли;
	// -Модели машинного обучения
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	РаспознаваниеРечи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтвета(Ответ, ДопПараметры)
	Если Элементы.ГруппаОбластьПоиска.Заголовок = НСтр("ru='область поиска не задана';
		|en='search area not specified'") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Необходимо задать хотя бы одну область поиска.';
			|en='It is necessary to specify at least one search area.'");
		Сообщение.Сообщить();
		СодержимоеРезультата = "";
		РезультатПоиска = "";
		Возврат;	
	КонецЕсли;	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не задана строка поиска.';en='Search bar is not specified.'"));
			Возврат;
		КонецЕсли;
		Результат = ВыполнитьППНаСервере(0);
		РезультатыПоиска = Результат.РезультатПоиска;
		РезультатПоиска = Результат.HTMLТекст;
		ТекущаяПозиция = Результат.ТекущаяПозиция;
		ПолноеКоличество = Результат.ПолноеКоличество;
		
		Если РезультатыПоиска.Количество() <> 0 Тогда
			
			ПоказаныРезультатыСПо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Показаны %1 - %2 из %3';en='Shown %1 - %2 out of %3'"),
			Строка(ТекущаяПозиция + 1),
			Строка(ТекущаяПозиция + РезультатыПоиска.Количество()),
			Строка(ПолноеКоличество) );
			
			ПредставлениеВыбранногоРезультатаТМП = РезультатыПоиска[0].Значение.Значение;
			ПодключитьОбработчикОжидания("ОбработчикРешенияПриАктивизацииСтроки", 0.1, Истина);
		Иначе
			ПредставлениеВыбранногоРезультата = Неопределено;
			ПредставлениеВыбранногоРезультатаТМП = Неопределено;
			СодержимоеРезультата = "";
			ПоказаныРезультатыСПо = НСтр("ru='Не найдено';en='Not found'");
			ОбработчикРешенияПриАктивизацииСтроки();
		КонецЕсли;	
		Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Результат.ОписаниеОшибки;
			Сообщение.Сообщить();
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементHTML = ДанныеСобытия.Anchor;
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементHTML.id = "FullTextSearchListItem") Тогда
		СтандартнаяОбработка = Ложь;
		
		Попытка
			НомерВСписке = Число(ЭлементHTML.attributes["sel_num"].value);
		Исключение
			Возврат;
		КонецПопытки;	
		
		СтруктураРезультата = РезультатыПоиска[НомерВСписке].Значение;
		ПредставлениеВыбранногоРезультатаТМП = СтруктураРезультата.Значение;
		//ОткрытьЗначение(ВыбранныйОбъект.Значение);
		ПодключитьОбработчикОжидания("ОбработчикРешенияПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СодержимоеРезультатаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтруктураНажатия = ПроверитьЧтоЭтоСсылкаНаДобавление(ДанныеСобытия.Href); 
	
	Если СтруктураНажатия.ОбработатьСсылку Тогда		
		СтандартнаяОбработка = Ложь;	
		Решение = ПредставлениеВыбранногоРезультата;	
		Если СтруктураНажатия.ИмяОбработчика = "ДобавитьТекстВопросаВТекстПисьма" Тогда
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("Решение", Решение);
			СтруктураОтвета.Вставить("НомерОтвета", Неопределено);
			Оповестить("ДобавитьТекстВопросаВТекстПисьма", СтруктураОтвета);
			CRM_БазаЗнанийСервер.УчестьИспользованиеРешения(Решение, ТекущийПользователь);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Вопрос добавлен'"));
		ИначеЕсли СтрНайти(СтруктураНажатия.ИмяОбработчика, "ДобавитьТекстОтветаВТекстПисьма") > 0 Тогда
			НомерОтвета = Число(Прав(СтруктураНажатия.ИмяОбработчика,
				 СтрДлина(СтруктураНажатия.ИмяОбработчика) - СтрДлина("ДобавитьТекстОтветаВТекстПисьма")));
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("Решение", Решение);
			СтруктураОтвета.Вставить("НомерОтвета", НомерОтвета);
			Оповестить("ДобавитьТекстОтветаВТекстПисьма", СтруктураОтвета);
			CRM_БазаЗнанийСервер.УчестьИспользованиеРешения(Решение, ТекущийПользователь);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Ответ добавлен'"));
		ИначеЕсли СтруктураНажатия.ИмяОбработчика = "ДобавитьВсеОтветыВТекстПисьма" Тогда
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("Решение", Решение);
			СтруктураОтвета.Вставить("НомерОтвета", "Все");
			Оповестить("ДобавитьТекстВопросаВТекстПисьма", СтруктураОтвета);
			CRM_БазаЗнанийСервер.УчестьИспользованиеРешения(Решение, ТекущийПользователь);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Все ответы добавлены'"));
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
			ОкноБраузера = Элементы.СодержимоеРезультата.Документ.defaultView;
			
			Если СтрНайти(ДанныеСобытия.Href, "РазвернутьСодержимоеОтвета") <> 0
				 Или СтрНайти(ДанныеСобытия.Href,
				 "СвернутьСодержимоеОтвета") <> 0 Тогда
				НайденныйЭлемент = ОкноБраузера.getAnswerBlockContent(ДанныеСобытия.Element);
				
				Если НайденныйЭлемент <> Неопределено И НайденныйЭлемент.className = "answerBlockContent" Тогда
					СтилиДляОбмена = НайденныйЭлемент.childNodes[1].className;
					
					НайденныйЭлемент.childNodes[1].className = НайденныйЭлемент.childNodes[2].className;
					НайденныйЭлемент.childNodes[2].className = СтилиДляОбмена;
					
					ЭлементКнопкиСвернуть		= Элементы.СодержимоеРезультата.Документ.getElementById("expandAllAnswers");
					ЭлементКнопкиРазвернуть		= Элементы.СодержимоеРезультата.Документ.getElementById("collapseAllAnswers");
					
					ВсеСвернутыеБлочныеЭлементы =
						Элементы.СодержимоеРезультата.Документ.querySelectorAll(".answerBlockInformation__collapsed");
					
					ЕстьРазвернутыеЭлементы = Ложь;
					Для Каждого ТекущийБлочныйЭлементОтветаHTML Из ВсеСвернутыеБлочныеЭлементы Цикл
						ЭлементРодитель = ТекущийБлочныйЭлементОтветаHTML.parentNode;
						
						Если ЭлементРодитель.childNodes.length = 3 И ЭлементРодитель.className = "answerBlockContent" Тогда
							Если ЭлементРодитель.childNodes[1].className <> "primaryText textThin answerBlockInformation__collapsed" Тогда
								ЕстьРазвернутыеЭлементы = Истина;
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьРазвернутыеЭлементы Тогда
						ЭлементКнопкиСвернуть.className		= "answerBlockInformationExpandCollapse__hidden";
						ЭлементКнопкиРазвернуть.className	= "answerBlockInformationExpandCollapse__show";
					Иначе
						ЭлементКнопкиСвернуть.className		= "answerBlockInformationExpandCollapse__show";
						ЭлементКнопкиРазвернуть.className	= "answerBlockInformationExpandCollapse__hidden";
					КонецЕсли;
				КонецЕсли;
			Иначе
				НажатаКомандаРазвернутьВсеОтветы = (СтрНайти(ДанныеСобытия.Href, "РазвернутьВсеОтветы") <> 0);
				
				Если НажатаКомандаРазвернутьВсеОтветы Или СтрНайти(ДанныеСобытия.Href, "СвернутьВсеОтветы") <> 0 Тогда
					ЭлементКнопкиСвернуть	= Элементы.СодержимоеРезультата.Документ.getElementById("expandAllAnswers");
					ЭлементКнопкиРазвернуть	= Элементы.СодержимоеРезультата.Документ.getElementById("collapseAllAnswers");
					
					ВсеСвернутыеБлочныеЭлементы =
						Элементы.СодержимоеРезультата.Документ.querySelectorAll(".answerBlockInformation__collapsed");
					
					Если НажатаКомандаРазвернутьВсеОтветы Тогда
						СостояниеОсновногоБлока			= "primaryText textThin";
						СостояниеВторостепенногоБлока	= "primaryText textThin answerBlockInformation__collapsed";
						
						ЭлементКнопкиСвернуть.className		= "answerBlockInformationExpandCollapse__hidden";
						ЭлементКнопкиРазвернуть.className	= "answerBlockInformationExpandCollapse__show";
					Иначе
						СостояниеОсновногоБлока			= "primaryText textThin answerBlockInformation__collapsed";
						СостояниеВторостепенногоБлока	= "primaryText textThin";
						
						ЭлементКнопкиСвернуть.className		= "answerBlockInformationExpandCollapse__show";
						ЭлементКнопкиРазвернуть.className	= "answerBlockInformationExpandCollapse__hidden";
					КонецЕсли;
					
					Для Каждого ТекущийБлочныйЭлементОтветаHTML Из ВсеСвернутыеБлочныеЭлементы Цикл
						ЭлементРодитель = ТекущийБлочныйЭлементОтветаHTML.parentNode;
						
						Если ЭлементРодитель.childNodes.length = 3 Тогда
							ЭлементРодитель.childNodes[1].className = СостояниеОсновногоБлока;
							ЭлементРодитель.childNodes[2].className = СостояниеВторостепенногоБлока;
						КонецЕсли;
					КонецЦикла;
				Иначе
					CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластиПоискаПометкаПриИзменении(Элемент)
	СтрЗаголовок = "";
	Для Каждого ЗначениеОбласти Из ОбластиПоиска Цикл
		Если ЗначениеОбласти.Пометка Тогда
			СтрЗаголовок = СтрЗаголовок + ?(ПустаяСтрока(СтрЗаголовок), "", ", ") + ЗначениеОбласти.Значение;
		КонецЕсли;	
	КонецЦикла;	
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		СтрЗаголовок = НСтр("ru='область поиска не задана';en='search area not specified'");
	КонецЕсли;	
	Элементы.ГруппаОбластьПоиска.Заголовок = СтрЗаголовок;
	Если НЕ Пустаястрока(СтрокаПоиска) И ППВключен Тогда
		ПараметрыОповещения = Новый Структура;
		ОбработкаОтвета(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВыбранногоРезультатаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВыбранногоРезультата", ЭтотОбъект, ПараметрыОповещения);
	Если ТипЗНЧ(ПредставлениеВыбранногоРезультата) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ОткрытьФорму("Документ.CRM_СообщениеМессенджера.ФормаОбъекта", Новый Структура("Ключ",
			 ПредставлениеВыбранногоРезультата), ЭтотОбъект, , , ,
			 Оповещение);
	ИначеЕсли ТипЗНЧ(ПредставлениеВыбранногоРезультата) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.ФормаОбъекта", Новый Структура("Ключ",
			 ПредставлениеВыбранногоРезультата), ЭтотОбъект, , , ,
			 Оповещение);
	ИначеЕсли ТипЗНЧ(ПредставлениеВыбранногоРезультата) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", Новый Структура("Ключ",
			 ПредставлениеВыбранногоРезультата), ЭтотОбъект, , , ,
			 Оповещение);
	ИначеЕсли ТипЗНЧ(ПредставлениеВыбранногоРезультата) = Тип("СправочникСсылка.CRM_Решения") Тогда
		ОткрытьФорму("Справочник.CRM_Решения.ФормаОбъекта", Новый Структура("Ключ",
			 ПредставлениеВыбранногоРезультата), ЭтотОбъект, , , ,
			 Оповещение);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбранногоРезультата(Результат, ДопПараметры) Экспорт
	ПодключитьОбработчикОжидания("ОбработчикРешенияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ОтборНажатие(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;   
	Если Элемент.Имя = "ОтборПодразделение" Тогда
		Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");	
	КонецЕсли;	
	Если Элемент.Имя = "ОтборПроект" Тогда
		Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");	
	КонецЕсли;
	Если СтрНайти(Элемент.Имя, "ОтборКатегория_") > 0 Тогда
		ИДКатегория = СтрЗаменить(Элемент.Имя, "ОтборКатегория_", "");
		ИДКатегория = СтрЗаменить(ИДКатегория, "_", "-");
		СнятьОтметкуКатегорииПоИД(ИДКатегория);
	КонецЕсли;	
	ПриИзмененииОтборовНаСервере();
	Если НЕ Пустаястрока(СтрокаПоиска) И ППВключен Тогда
		ПараметрыОповещения = Новый Структура;
		ОбработкаОтвета(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РежимФильтраПоКатегориямНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СформироватьЗаголовокРежимаОтбора();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьФильтр(Команда)
	Элементы.ГруппаОтборы.Скрыть();
	ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВСписок(Команда)
	Если ТипЗНЧ(ПредставлениеВыбранногоРезультата) = Тип("СправочникСсылка.CRM_Решения") Тогда
		Элементы.ГруппаРезультатПоиска.Видимость = Ложь;
		Элементы.СписокРешений.Видимость = Истина;
		Элементы.СписокРешений.ТекущаяСтрока = ПредставлениеВыбранногоРезультата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФильтр(Команда)
	СтандартнаяОбработка	= Ложь;
	
	Если Элементы.ГруппаОтборы.Скрыта() Тогда
		Элементы.ГруппаОтборы.Показать();
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.1, Истина);
	КонецЕсли;
	
	//Элементы.ГруппаОтборы.Показать();
	//ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФильтр(Команда)
	ОчиститьФильтрыНаСервере();
	Если НЕ Пустаястрока(СтрокаПоиска) И ППВключен Тогда
		ПараметрыОповещения = Новый Структура;
		ОбработкаОтвета(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Файлы(Команда)
	
	Если Не ЗначениеЗаполнено(ПредставлениеВыбранногоРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",	ПредставлениеВыбранногоРезультата);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина); // редактирование только в элементе, после проверки прав
	
	ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
		 ПараметрыФормы, ЭтотОбъект,
		 УникальныйИдентификатор);
	
	Если ФормаПрисоединенныхФайлов.Открыта() Тогда
				
		ФормаПрисоединенныхФайлов.Активизировать();
	Иначе
		ФормаПрисоединенныхФайлов.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		ФормаПрисоединенныхФайлов.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииВыделитьВсе(Команда)
	УстановитьПометкиВКатегориях(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КатегорииСнятьВыделение(Команда)
	УстановитьПометкиВКатегориях(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	ТекущееРешение = Элементы.СписокРешений.ТекущаяСтрока;
	Если ТекущееРешение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураОснования = Новый Структура("Основание,КартаМаршрута", ТекущееРешение,
		 ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	Если ЗначениеЗаполнено(CRM_РольОтветственного) Тогда
		ПараметрыФормы.Вставить("Исполнитель", CRM_РольОтветственного);
		СтруктураПараметров.Вставить("Исполнитель", CRM_РольОтветственного);
	Иначе
		ПараметрыФормы.Вставить("Исполнитель", CRM_Ответственный);
		СтруктураПараметров.Вставить("Исполнитель", CRM_Ответственный);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураПараметров);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект, 
					УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// +Рабочий стол
#Область Подключаемый_РабочийСтол

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	CRM_РабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

#КонецОбласти
// -Рабочий стол

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРешений

&НаКлиенте
Процедура СписокРешенийПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикРешенияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Решения".
//
// Параметры:
//	Нет.
//
Процедура ОбработчикРешенияПриАктивизацииСтроки()
	
	Если ПустаяСтрока(СтрокаПоиска) ИЛИ НЕ ППВключен ИЛИ Элементы.СписокРешений.Видимость Тогда
		ТекущееРешение = Элементы.СписокРешений.ТекущаяСтрока;
	Иначе
		ТекущееРешение = ПредставлениеВыбранногоРезультатаТМП;
	КонецЕсли;
	СформироватьПредставлениеСвязанныхРешений(ТекущееРешение);
	Элементы.Файлы.Заголовок = НСтр("ru='Файлы';en='Files'") + " (" + ПолучитьЧислоВложений(ТекущееРешение) + ")";
	Элементы.ПерейтиВСписок.Видимость = Ложь;
	Если ТекущееРешение = Неопределено Тогда
		ПредставлениеВыбранногоРезультата = Неопределено;
		СодержимоеРезультата = "";
		Возврат;
	ИначеЕсли ТипЗнч(ТекущееРешение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ПредставлениеВыбранногоРезультата = Неопределено;
		СодержимоеРезультата = "";
		Возврат;
	ИначеЕсли ПредставлениеВыбранногоРезультата = ТекущееРешение Тогда
		Если ТипЗнч(ТекущееРешение) = Тип("СправочникСсылка.CRM_Решения") И Не Элементы.СписокРешений.Видимость Тогда
			Элементы.ПерейтиВСписок.Видимость = Истина;
			СодержимоеРезультата = CRM_БазаЗнанийСервер.ЗаполнитьПредставлениеРешенияДляСписка(
				ТекущееРешение, УникальныйИдентификатор, ОткрытаИзДругойФормы, СтрокаПоиска);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПредставлениеВыбранногоРезультата = ТекущееРешение;
	ПредставлениеВыбранногоРезультатаОбновитьДоступность(ТекущееРешение);
	
	Если ТипЗнч(ТекущееРешение) = Тип("СправочникСсылка.CRM_Решения") Тогда
		Если Не Элементы.СписокРешений.Видимость Тогда
			Элементы.ПерейтиВСписок.Видимость = Истина;
		КонецЕсли;
		СодержимоеРезультата = CRM_БазаЗнанийСервер.ЗаполнитьПредставлениеРешенияДляСписка(ТекущееРешение,
			 УникальныйИдентификатор, ОткрытаИзДругойФормы,
			 СтрокаПоиска);
		CRM_БазаЗнанийСервер.УчестьОбращенияКРешению(ТекущееРешение, ТекущийПользователь);
		ОбновитьВидимостьПоручения(ТекущееРешение);
	ИначеЕсли ТипЗнч(ТекущееРешение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		 ИЛИ ТипЗнч(ТекущееРешение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда	
		ЗаполнитьПредставлениеПисьма(ТекущееРешение);
	ИначеЕсли ТипЗнч(ТекущееРешение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда	
		ЗаполнитьПредставлениеСообщения(ТекущееРешение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПредставлениеВыбранногоРезультатаОбновитьДоступность(ТекущееРешение)
	
	ДоступностьПредставления = Истина;
	
	Если ТипЗнч(ТекущееРешение) = Тип("СправочникСсылка.CRM_Решения") Тогда
		ДоступностьПредставления = Не ТекущееРешение.ЭтоГруппа;
	КонецЕсли;
	
	Элементы.ПредставлениеВыбранногоРезультата.Доступность = ДоступностьПредставления;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПоручения(ТекущееРешение)
	
	ТекущееРешениеОбъект = ТекущееРешение.ПолучитьОбъект();
	Если ТекущееРешениеОбъект.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное Тогда
		Если ТекущееРешениеОбъект.Автор = ТекущийПользователь Тогда
			Элементы.РешенияОбщаяКомандаCRM_СоздатьПоручение.Видимость = Истина;
		Иначе
			Элементы.РешенияОбщаяКомандаCRM_СоздатьПоручение.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокРежимаОтбора()
	Если РежимФильтраПоКатегориям = НСтр("ru = 'все отмеченные категории'") Тогда
		РежимФильтраПоКатегориям = НСтр("ru = 'любая из отмеченных категорий'");
	Иначе
		РежимФильтраПоКатегориям = НСтр("ru = 'все отмеченные категории'");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоЭтоСсылкаНаДобавление(ПроверяемаяСсылка)
	СтруктураВозврата = Новый Структура("ОбработатьСсылку, ИмяОбработчика", Ложь, "");
	Если ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Если СтрНайти(ПроверяемаяСсылка, "ДобавитьТекстВопросаВТекстПисьма") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = "ДобавитьТекстВопросаВТекстПисьма";
		ИначеЕсли СтрНайти(ПроверяемаяСсылка, "ДобавитьВсеОтветыВТекстПисьма") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = "ДобавитьВсеОтветыВТекстПисьма";	
		ИначеЕсли СтрНайти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВТекстПисьма") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = Сред(ПроверяемаяСсылка, СтрНайти(ПроверяемаяСсылка,
				 "ДобавитьТекстОтветаВТекстПисьма"));
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ПроверитьВсплывающиеГруппы()
	
	Если Элементы.ГруппаОтборы.Скрыта() Тогда
		ТекущийЭлемент = Элементы.СтруктураОтбора;
		ПриИзмененииОтборовНаСервере();
		
		Если НЕ Пустаястрока(СтрокаПоиска) И ППВключен Тогда
			ПараметрыОповещения = Новый Структура;
			ОбработкаОтвета(КодВозвратаДиалога.Да, ПараметрыОповещения);
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы");
	Иначе	
		ПодключитьОбработчикОжидания("ПроверитьВсплывающиеГруппы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаСервере
Процедура УстановитьПометкиВКатегориях(Флаг)
	Для Каждого Строка Из СписокКатегорий Цикл
		Строка.Пометка = Флаг;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьФильтрыНаСервере()
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	Проект = Справочники.Проекты.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_КатегорииРешений.Ссылка КАК Категория,
	|	CRM_КатегорииРешений.ЦветИндекс КАК ЦветИндекс,
	|	ЛОЖЬ КАК Пометка,
	|	CRM_КатегорииРешений.ПредставлениеНаименования КАК Наименование
	|ИЗ
	|	Справочник.CRM_КатегорииРешений КАК CRM_КатегорииРешений
	|ГДЕ
	|	НЕ CRM_КатегорииРешений.ПометкаУдаления";
	СписокКатегорий.Загрузить(Запрос.Выполнить().Выгрузить());
	ПриИзмененииОтборовНаСервере();
КонецПроцедуры	

&НаСервере
Функция ВыполнитьППНаСервере(Направление = 0)
	
	КоличествоРешений = 20;
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	СтрокаПоиска	= НРег(СтрокаПоиска);
	
	ПоискПоПодстроке = Ложь;
	
	СтрокаПоискаПриведенная = СтрокаПоиска;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтрокаПоискаПриведенная = СтрокаПоискаПриведенная + " & """ + Подразделение.Наименование + """";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СтрокаПоискаПриведенная = СтрокаПоискаПриведенная + " & """ + Проект.Наименование + """";
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пометка", Истина);
	ВыбранныеСтрокиКатегории = СписокКатегорий.НайтиСтроки(СтруктураОтбора);
	Если РежимФильтраПоКатегориям = НСтр("ru = 'все отмеченные категории'") Тогда 
		Для Каждого СтрокаКатегория Из ВыбранныеСтрокиКатегории Цикл
			НаименованиеКатегории = СтрокаКатегория.Категория.Наименование;
			СтрокаПоискаПриведенная = СтрокаПоискаПриведенная + " & """ + НаименованиеКатегории + """";	
		КонецЦикла;	
	Иначе
		СтрокаПоискаКатегорий  = "";
		Для Каждого СтрокаКатегория Из ВыбранныеСтрокиКатегории Цикл
			НаименованиеКатегории = СтрокаКатегория.Категория.Наименование;
			СтрокаПоискаКатегорий = СтрокаПоискаКатегорий + ?(ПустаяСтрока(СтрокаПоискаКатегорий), "",
				 " OR ") + """" + НаименованиеКатегории 
				+ """";	
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаПоискаКатегорий) Тогда
			СтрокаПоискаПриведенная = СтрокаПоискаПриведенная + " & (" + СтрокаПоискаКатегорий + ")";
		КонецЕсли;	
	КонецЕсли;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоискаПриведенная, КоличествоРешений);
	РазмерПорции					= КоличествоРешений;
	СписокПоиска.РазмерПорции		= РазмерПорции;
	СписокПоиска.ПолучатьОписание	= Истина;
	
	мОбластьПоиска	= Новый Массив;
	ЕстьОбластиПоиска = Ложь;
	Если ОбластиПоиска[0].Пометка Тогда
		мОбластьПоиска.Добавить(Метаданные.Справочники.CRM_Решения);
	КонецЕсли;	
	
	Если ОбластиПоиска[2].Пометка Тогда
		мОбластьПоиска.Добавить(Метаданные.Документы.CRM_СообщениеМессенджера);
	КонецЕсли;
	
	Если ОбластиПоиска[1].Пометка Тогда
		мОбластьПоиска.Добавить(Метаданные.Документы.ЭлектронноеПисьмоВходящее);
		мОбластьПоиска.Добавить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее);
	КонецЕсли;
	
    СписокПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.НеИспользовать;
	СписокПоиска.ОбластьПоиска		= мОбластьПоиска;
		
	// Выполним поиск
	КодОшибки = "";
	ОписаниеОшибки = "";
	Попытка
		Если Направление = 0 Тогда
			СписокПоиска.ПерваяЧасть();
		ИначеЕсли Направление = -1 Тогда
			СписокПоиска.ПредыдущаяЧасть(ТекущаяПозиция);
		ИначеЕсли Направление = 1 Тогда
			СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
		Иначе 
			ВызватьИсключение НСтр("ru='Параметр НаправлениеПоиска задан неверно.';
				|en='Parameter SearchDirection is incorrect.'");	
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КодОшибки = "ОшибкаПоиска";
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда 
		ОписаниеОшибки = НСтр("ru='Слишком много результатов, уточните запрос';en='It is too much results, specify query'");
		КодОшибки = "СлишкомМногоРезультатов";
	КонецЕсли;
	
	РезультатыПоиска = Новый СписокЗначений;
	РезультатыПоиска.Очистить();
	Если ПустаяСтрока(КодОшибки) Тогда
		Для Каждого Результат Из СписокПоиска Цикл
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("Значение", Результат.Значение);
			СтруктураРезультата.Вставить("ЗначенияДляОткрытия", Результат.Значение);
			РезультатыПоиска.Добавить(СтруктураРезультата);
		КонецЦикла;
	КонецЕсли;
	
	HTMLТекст = СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
	
	HTMLТекст = СтрЗаменить(HTMLТекст, "<td>", "<td><font face=""Arial"" size=""2"">");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<td valign=top width=1>",
		 "<td valign=top width=1><font face=""Arial"" size=""1"">");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<body>", "<body topmargin=0 leftmargin=0 scroll=auto>");
	HTMLТекст = СтрЗаменить(HTMLТекст, "</td>", "</font></td>");
	HTMLТекст = СтрЗаменить(HTMLТекст, "<b>", "");
	HTMLТекст = СтрЗаменить(HTMLТекст, "</b>", "");
	
	ТекущаяПозиция = СписокПоиска.НачальнаяПозиция();
	ПолноеКоличество = СписокПоиска.ПолноеКоличество();
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатПоиска", РезультатыПоиска);
	Результат.Вставить("ТекущаяПозиция", ТекущаяПозиция);
	Результат.Вставить("ПолноеКоличество", ПолноеКоличество);
	Результат.Вставить("HTMLТекст", HTMLТекст);
	Результат.Вставить("КодОшибки", КодОшибки);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеСообщения(Сообщение)
	
	СодержимоеРезультата = "";
	
	ВложенияТекстаВопроса = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения,
	|	CRM_СообщениеМессенджера.Тема КАК Тема,
	|	CRM_СообщениеМессенджера.КонтактПредставление КАК КонтактПредставление,
	|	CRM_СообщениеМессенджера.МоментВремени КАК МоментВремени,
	|	CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее) КАК Входящее,
	|	CRM_СообщениеМессенджера.Контакт КАК Контакт,
	|	CRM_СообщениеМессенджера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ тмпСообщенияДо
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Дата < &Дата
	|	И CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	|	И CRM_СообщениеМессенджера.Группа = &Группа
	|	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения,
	|	CRM_СообщениеМессенджера.Тема КАК Тема,
	|	CRM_СообщениеМессенджера.КонтактПредставление КАК КонтактПредставление,
	|	CRM_СообщениеМессенджера.МоментВремени КАК МоментВремени,
	|	CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее) КАК Входящее,
	|	CRM_СообщениеМессенджера.Контакт КАК Контакт,
	|	CRM_СообщениеМессенджера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ тмпНайденное
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	CRM_СообщениеМессенджера.Ссылка КАК Ссылка,
	|	CRM_СообщениеМессенджера.ТекстСообщения КАК ТекстСообщения,
	|	CRM_СообщениеМессенджера.Тема КАК Тема,
	|	CRM_СообщениеМессенджера.КонтактПредставление КАК КонтактПредставление,
	|	CRM_СообщениеМессенджера.МоментВремени КАК МоментВремени,
	|	CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее) КАК Входящее,
	|	CRM_СообщениеМессенджера.Контакт КАК Контакт,
	|	CRM_СообщениеМессенджера.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ тмпСообщенияПосле
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	|ГДЕ
	|	CRM_СообщениеМессенджера.Дата > &Дата
	|	И CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	|	И CRM_СообщениеМессенджера.Группа = &Группа
	|	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тмпСообщенияДо.Ссылка КАК Ссылка,
	|	тмпСообщенияДо.ТекстСообщения КАК ТекстСообщения,
	|	тмпСообщенияДо.Тема КАК Тема,
	|	тмпСообщенияДо.КонтактПредставление КАК КонтактПредставление,
	|	тмпСообщенияДо.МоментВремени КАК МоментВремени,
	|	тмпСообщенияДо.Входящее КАК Входящее,
	|	тмпСообщенияДо.Контакт КАК Контакт,
	|	тмпСообщенияДо.Ответственный КАК Ответственный
	|ИЗ
	|	тмпСообщенияДо КАК тмпСообщенияДо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тмпНайденное.Ссылка,
	|	тмпНайденное.ТекстСообщения,
	|	тмпНайденное.Тема,
	|	тмпНайденное.КонтактПредставление,
	|	тмпНайденное.МоментВремени,
	|	тмпНайденное.Входящее,
	|	тмпНайденное.Контакт,
	|	тмпНайденное.Ответственный
	|ИЗ
	|	тмпНайденное КАК тмпНайденное
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тмпСообщенияПосле.Ссылка,
	|	тмпСообщенияПосле.ТекстСообщения,
	|	тмпСообщенияПосле.Тема,
	|	тмпСообщенияПосле.КонтактПредставление,
	|	тмпСообщенияПосле.МоментВремени,
	|	тмпСообщенияПосле.Входящее,
	|	тмпСообщенияПосле.Контакт,
	|	тмпСообщенияПосле.Ответственный
	|ИЗ
	|	тмпСообщенияПосле КАК тмпСообщенияПосле
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	Запрос.УстановитьПараметр("Дата", Сообщение.Дата);
	Запрос.УстановитьПараметр("Ссылка", Сообщение);
	Запрос.УстановитьПараметр("ID_Пользователя", Сообщение.ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", Сообщение.Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Сообщение.УчетнаяЗапись);
	ТабСообщений = ЗАпрос.Выполнить().Выгрузить();
	ТекстПоляHTML = Новый ФорматированныйДокумент;
	Для Каждого Строка Из ТабСообщений Цикл
		КонтейнерСообщения = ТекстПоляHTML.Элементы.Добавить(); 
		Если Строка.Входящее Тогда
			КонтейнерСообщения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			СообщениеАвтор = КонтейнерСообщения.Элементы.Добавить(?(Строка.КонтактПредставление = "",
				 Нстр("ru='Неизвестный контакт';en='Unknown contact'"), Строка.КонтактПредставление),
				 Тип("ТекстФорматированногоДокумента"));
			Если ЗначениеЗаполнено(Строка.Контакт) Тогда
				СообщениеАвтор.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Строка.Контакт);
			КонецЕсли;
		Иначе
			КонтейнерСообщения.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			СообщениеАвтор = КонтейнерСообщения.Элементы.Добавить(?(Строка.Ответственный.Пустая(),
				 Нстр("ru='Неизвестный контакт';en='Unknown contact'"), Строка.Ответственный),
				 Тип("ТекстФорматированногоДокумента"));
			Если ЗначениеЗаполнено(Строка.Ответственный) Тогда
				СообщениеАвтор.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Строка.Ответственный);
			КонецЕсли;
		КонецЕсли;
		СообщениеАвтор.Шрифт = Новый Шрифт(, 10, Истина);
		
		КонтейнерСообщения.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
		СообщениеТекст = КонтейнерСообщения.Элементы.Добавить(?(Строка.ТекстСообщения = "", " ",
			 Строка.ТекстСообщения),
			 Тип("ТекстФорматированногоДокумента"));
		СообщениеТекст.Шрифт = Новый Шрифт(, 10, Ложь);
		
		КонтейнерСообщения.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	КонецЦикла;
	ТекстПоляHTML.ПолучитьHTML(СодержимоеРезультата, Новый структура);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеПисьма(Письмо)
	
	СодержимоеРезультата = "";
	
	Если НЕ Письмо.Ответственный = ТекущийПользователь Тогда
		Если НЕ Письмо.УчетнаяЗапись.CRM_ЭтоОбщаяУчетнаяЗапись
			 И НЕ CRM_ОбщегоНазначенияСервер.НайтиПользователяВУчетнойЗаписи(Письмо.УчетнаяЗапись, ТекущийПользователь) Тогда
			Если НЕ Письмо.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям Тогда
				Начало = "
				|<html>
				|<head>  
				|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
				|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
				|<body scroll=""auto"">";
				
				Описание = НСтр("ru='Письмо недоступно данному пользователю из-за ограничения прав доступа!';
					|en='A letter is not available to this user because of restricted access rights!'");
				
				Конец = "
				|</body>
				|</html>";
				
				Текст = Начало + Описание + Конец;
				СодержимоеРезультата = Текст;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	
	ВложенияТекстаВопроса = Новый Структура;
	СтруктураОписанияПисьма = СформироватьОписаниеТекущегоПисьма(Письмо.Ссылка);
	СодержимоеРезультата = СтруктураОписанияПисьма.Тело;
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеТекущегоПисьма(ПисьмоСсылка)
	
	СтруктураОписания = Новый Структура;
	
	// Проверим доступность письма по RLS.
	Попытка
		СсылкаДоступна = ПисьмоСсылка.Дата;
	Исключение
	// Письмо недоступно
		
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = НСтр("ru='Письмо недоступно данному пользователю из-за ограничения прав доступа!';
			|en='A letter is not available to this user because of restricted access rights!'");
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
		
		СтруктураОписания.Вставить("Тело", Текст);
		СтруктураОписания.Вставить("От",   "");
		СтруктураОписания.Вставить("Кому", "");
		СтруктураОписания.Вставить("Тема", "");
		
		Возврат СтруктураОписания;
		
	КонецПопытки;
	
	Если ПисьмоСсылка = Неопределено Или ТипЗнч(ПисьмоСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предмет = Взаимодействия.ПолучитьЗначениеПредмета(ПисьмоСсылка);
	ЭтоПисьмоРассылки = (ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
						И ЗначениеЗаполнено(Предмет)
						И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	
	Если ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		Текст = ПисьмоСсылка.Текст;
		CRM_ВзаимодействияКлиентСервер.ДобавитьНеобходимыеТэгиHTML(Текст);
	Иначе
		НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		ПозицияПараметров = СтрНайти(НавигационнаяСсылкаИнформационнойБазы, "?");		
		Если ПозицияПараметров > 0 Тогда
			НавигационнаяСсылкаИнформационнойБазы = Лев(НавигационнаяСсылкаИнформационнойБазы, ПозицияПараметров - 1);
		КонецЕсли;
		Для Каждого ЭлементСписка Из ИдентификаторыКартинокПисьма Цикл
			НавигационнаяСсылка = СтрЗаменить(ЭлементСписка.Значение.НавигационнаяСсылка, НавигационнаяСсылкаИнформационнойБазы 
				+ "/",
				 "");
			Если ЭтоАдресВременногоХранилища(НавигационнаяСсылка) Тогда
				УдалитьИзВременногоХранилища(НавигационнаяСсылка);
			КонецЕсли;
		КонецЦикла;
		ИдентификаторыКартинокПисьма.Очистить();
		Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
				Предмет.ТекстHTML, Предмет, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			CRM_Взаимодействия.ЗаполнитьАвтотекстПоПисьму(Текст, ПисьмоСсылка);
			
		Иначе
			
			Текст = CRM_Взаимодействия.ВставитьКартинкиВТекстHTML(
				ПисьмоСсылка.ТекстHTML, ПисьмоСсылка, УникальныйИдентификатор, ИдентификаторыКартинокПисьма);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПисьмоРассылки И Не ПисьмоСсылка.CRM_РассылкаИзменена Тогда
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет);
	Иначе
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка);
	КонецЕсли;
	
	Вложения.Очистить();
	Для Каждого Стр Из табВложения Цикл
		НовСтр 										= Вложения.Добавить();
		НовСтр.Ссылка         						= Стр.Ссылка;
		НовСтр.ИмяФайла       						= Стр.ИмяФайла;
		НовСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		НовСтр.Размер        						= Стр.Размер;
		РазмерВложения								= Цел(Стр.Размер / 1024);
		НовСтр.РазмерСтрокой   						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		НовСтр.Расположение  						= 0;
		// НовСтр.ИДФайлаЭлектронногоПисьмаОтбор	= Стр.ИДФайлаЭлектронногоПисьмаОтбор;
		НовСтр.ИДФайлаЭлектронногоПисьмаОтбор = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		НовСтр.ИДФайлаЭлектронногоПисьма = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
	КонецЦикла;
	
	Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Для Каждого УдаленноеВложение Из ПисьмоСсылка.НепринятыеВложения Цикл
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			НовоеВложение.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
	КонецЕсли;
	
	Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
	
	Описание = "";
	//
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПисьмоСсылка));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", Текст);
	СтруктураОписания.Вставить("От", ПисьмоСсылка.ОтправительПредставление);
	СтруктураОписания.Вставить("Кому", ПисьмоСсылка.СписокПолучателейПисьма);
	СтруктураОписания.Вставить("Тема", ПисьмоСсылка.Тема);
	
	Возврат СтруктураОписания;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтборовНаСервере()
	
	ЭлементОтбораПоПодразделению	= Неопределено;
	ЭлементОтбораПоПроекту			= Неопределено;
	ЭлементОтбораПоКатегории			= Неопределено;
	Для Каждого ЭлементОтбора Из СписокРешений.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "ОтборПоПодразделению" Тогда
			ЭлементОтбораПоПодразделению = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоПроекту" Тогда
			ЭлементОтбораПоПроекту = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоКатегории" Тогда
			ЭлементОтбораПоКатегории = ЭлементОтбора;	
		КонецЕсли;
	КонецЦикла;
	
	СчетчикОтборов = 0;
	
	Элемент = Элементы.Найти("ОтборПроект");
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = Элементы.Найти("ОтборПодразделение");
	Если Элемент <> Неопределено Тогда
		Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Для Каждого СтрокаКатегория Из СписокКатегорий Цикл
		ВыбКатегория = СтрокаКатегория.Категория;
		ИДКатегория = Строка(ВыбКатегория.УникальныйИдентификатор());
		ИДКатегория = СтрЗаменить(ИДКатегория, "-", "_");
		Элемент = Элементы.Найти("ОтборКатегория_" + ИДКатегория);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("Пометка", Истина);
	СтрКатегорий = СписокКатегорий.НайтиСтроки(СтруктураОтбора);
	Если СтрКатегорий.Количество() > 0 Тогда
		СчетчикОтборов = СчетчикОтборов + 1;
	КонецЕсли;

	СчКатегорий = 0;
	ОтключалиЛишние = Ложь;
	Для Каждого СтрокаКатегория Из СтрКатегорий Цикл
		ВыбКатегория = СтрокаКатегория.Категория;
		ИДКатегория = Строка(ВыбКатегория.УникальныйИдентификатор());
		ИДКатегория = СтрЗаменить(ИДКатегория, "-", "_");
		
		ЦветФона = Новый Цвет(ВыбКатегория.ЦветКрасный, ВыбКатегория.ЦветЗеленый, ВыбКатегория.ЦветСиний);
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(" " 
			+ ВыбКатегория.ПредставлениеНаименования + " ", Новый Шрифт(, , Истина),
			 CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветФона), ЦветФона));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.CRM_УдалитьСиняя, , ,
			 ЦветаСтиля.ЦветФонаФормы, "ОтборКатегория_" 
			+ ИДКатегория));
		
		ЭлементТег = Элементы.Добавить("ОтборКатегория_" + ИДКатегория, Тип("ДекорацияФормы"),
			 Элементы.ГруппаОтображениеОтборов);
		ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
		ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементТег.Подсказка = ВыбКатегория.ПредставлениеНаименования;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементТег.АвтоМаксимальнаяШирина = Ложь;
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОтборНажатие");
		СчКатегорий = СчКатегорий + 1;
	КонецЦикла;	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пометка", Истина);
	ВыбранныеСтрокиКатегории = СписокКатегорий.НайтиСтроки(СтруктураОтбора);
	Если ВыбранныеСтрокиКатегории.Количество() > 0 Тогда
		Если ЭлементОтбораПоКатегории = Неопределено Тогда		
			ЭлементОтбораПоКатегории = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоКатегории.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбораПоКатегории.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораПоКатегории.Представление	= "ОтборПоКатегории";
			ЭлементОтбораПоКатегории.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		МассивКатегорий = Новый Массив;
		Для Каждого строкаКатегориии Из ВыбранныеСтрокиКатегории Цикл
			МассивКатегорий.Добавить(строкаКатегориии.Категория);
		КонецЦикла;	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_РешенияКатегории.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_РешенияКатегории.Категория) КАК Категория
		|ПОМЕСТИТЬ тмпКатегории
		|ИЗ
		|	Справочник.CRM_Решения.Категории КАК CRM_РешенияКатегории
		|ГДЕ
		|	CRM_РешенияКатегории.Категория В (&ВыбранныеСтрокиКатегории)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_РешенияКатегории.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тмпКатегории.Ссылка КАК Ссылка
		|ИЗ
		|	тмпКатегории КАК тмпКатегории
		|";
		Если РежимФильтраПоКатегориям = НСтр("ru = 'все отмеченные категории'") Тогда
			Запрос.Текст = Запрос.Текст + "ГДЕ
			|	тмпКатегории.Категория = &КолВоКатегорий";
		КонецЕсли;	
		Запрос.УстановитьПараметр("ВыбранныеСтрокиКатегории", МассивКатегорий);
		Запрос.УстановитьПараметр("КолВоКатегорий", МассивКатегорий.Количество());
		ТабСсылок = Запрос.Выполнить().Выгрузить();
		Если ТабСсылок.Количество() > 0 Тогда
			ЭлементОтбораПоКатегории.ПравоеЗначение	= ТабСсылок.ВыгрузитьКолонку("Ссылка");
			ЭлементОтбораПоКатегории.Использование	= Истина;
		Иначе
			ЭлементОтбораПоКатегории.ПравоеЗначение	= Новый СписокЗначений;
			ЭлементОтбораПоКатегории.Использование	= Истина;
		КонецЕсли;
	Иначе
		Если НЕ (ЭлементОтбораПоКатегории = Неопределено) Тогда		
			ЭлементОтбораПоКатегории.Использование	= Ложь;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СчетчикОтборов = СчетчикОтборов + 1;
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Подразделение: ';
			|en='Department:'"), Новый Шрифт(, , Истина),
			 ЦветаСтиля.CRM_ЧерныйЦветТекста));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Подразделение.Наименование, , ЦветаСтиля.CRM_ОсновнойГолубой));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.CRM_УдалитьСиняя, , , ,
			 "ОтборПодразделение"));
		
		ЭлементТег = Элементы.Добавить("ОтборПодразделение", Тип("ДекорацияФормы"), Элементы.ГруппаОтображениеОтборов);
		ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
		ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		//ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.Подсказка = Подразделение.Наименование;
		ЭлементТег.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементТег.АвтоМаксимальнаяШирина = Ложь;
		//ЭлементТег.Ширина =  Окр(СтрДлина("Подразделение: " + Подразделение.Наименование)+4);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОтборНажатие");
		
		Если ЭлементОтбораПоПодразделению = Неопределено Тогда		
			ЭлементОтбораПоПодразделению = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоПодразделению.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Подразделение");
			ЭлементОтбораПоПодразделению.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВИерархии;
			ЭлементОтбораПоПодразделению.Представление		= "ОтборПоПодразделению";
			ЭлементОтбораПоПодразделению.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоПодразделению.ПравоеЗначение	= Подразделение;
		ЭлементОтбораПоПодразделению.Использование	= Истина;
	Иначе
		Если НЕ (ЭлементОтбораПоПодразделению = Неопределено) Тогда		
			ЭлементОтбораПоПодразделению.Использование	= Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СчетчикОтборов = СчетчикОтборов + 1;
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Проект: ';en='Project: '"),
			 Новый Шрифт(, , Истина),
			 ЦветаСтиля.CRM_ЧерныйЦветТекста));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Проект.Наименование, , ЦветаСтиля.CRM_ОсновнойГолубой));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.CRM_УдалитьСиняя, , , , "ОтборПроект"));
		
		ЭлементТег = Элементы.Добавить("ОтборПроект", Тип("ДекорацияФормы"), Элементы.ГруппаОтображениеОтборов);
		ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
		ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		//ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.Подсказка = Проект.Наименование;
		ЭлементТег.ЦветТекста = ЦветаСтиля.CRM_ОсновнойГолубой;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		ЭлементТег.АвтоМаксимальнаяШирина = Ложь;
		//ЭлементТег.Ширина =  Окр(СтрДлина("Проект: " + Проект.Наименование)+4);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОтборНажатие");
		
		Если ЭлементОтбораПоПроекту = Неопределено Тогда		
			ЭлементОтбораПоПроекту = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоПроекту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Проект");
			ЭлементОтбораПоПроекту.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВИерархии;
			ЭлементОтбораПоПроекту.Представление	= "ОтборПоПроекту";
			ЭлементОтбораПоПроекту.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоПроекту.ПравоеЗначение	= Проект;
		ЭлементОтбораПоПроекту.Использование	= Истина;
	Иначе
		Если НЕ (ЭлементОтбораПоПроекту = Неопределено) Тогда		
			ЭлементОтбораПоПроекту.Использование	= Ложь;
		КонецЕсли;	
	КонецЕсли;

	Элементы.СтруктураОтбора.Заголовок = НСтр("ru='Фильтр ';en='Filter'") + "(" + СчетчикОтборов + ")";
КонецПроцедуры

&НаСервере
Процедура СнятьОтметкуКатегорииПоИД(ИДКатегория)
	ИД = Новый УникальныйИдентификатор(ИДКатегория);
	Категория = Справочники.CRM_КатегорииРешений.ПолучитьСсылку(ИД);
	СтруктураОтбора = Новый Структура("Категория", Категория);
	СтрКатегорий = СписокКатегорий.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаКатегория Из СтрКатегорий Цикл
		СтрокаКатегория.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеСвязанныхРешений(Решение)
	Если Решение = Неопределено Тогда
		КоличествоРешений = 0 ;
	Иначе
		НаборЗаписей = РегистрыСведений.CRM_СвязанныеРешения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Решение.Установить(Решение);
		НаборЗаписей.Прочитать();
		КоличествоРешений = НаборЗаписей.Количество();
	КонецЕсли;
	
	Если КоличествоРешений = 0 Тогда
		ПредставлениеСвязанныхРешений	= НСтр("ru='Связанные решения';en='The bound decisions'");
	Иначе
		ПредставлениеСвязанныхРешений = НСтр("ru='Связанные решения';en='The bound decisions'") + 
					" (" + Строка(КоличествоРешений) + ")";
	КонецЕсли;
	Элементы.ГруппаСвязанныеРешения.Заголовок = ПредставлениеСвязанныхРешений;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязанныеРешения, "Решение", Решение, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений(Решение)
	
	Если НЕ ЗначениеЗаполнено(Решение) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Решение) = Тип("СправочникСсылка.CRM_Решения") Тогда
		ИмяСправочника = "CRM_РешенияПрисоединенныеФайлы";
	ИначеЕсли ТипЗнч(Решение) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ИмяСправочника = "CRM_СообщениеМессенджераПрисоединенныеФайлы";	
	ИначеЕсли ТипЗнч(Решение) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ИмяСправочника = "ЭлектронноеПисьмоВходящееПрисоединенныеФайлы";	
	ИначеЕсли ТипЗнч(Решение) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ИмяСправочника = "ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы";	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_РешенияПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК CRM_РешенияПрисоединенныеФайлы
	|ГДЕ
	|	CRM_РешенияПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ CRM_РешенияПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Решение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьРешение(Ключ)
	Возврат Ключ.Решение;
КонецФункции	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеРешения

&НаКлиенте
Процедура СвязанныеРешенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.CRM_Решения.ФормаОбъекта", Новый Структура("Ключ",
		 ПолучитьРешение(ВыбраннаяСтрока)),
		 ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область МоделиМашинногоОбучения

&НаСервере
Функция Помощник_ПроверитьИспользование()
	
	НастройкиМоделей = CRM_МоделиМашинногоОбучения.ПолучитьНастройкиМоделей();
	Если Не CRM_МоделиМашинногоОбученияКлиентСервер.НастройкиМоделейЗаполнены(НастройкиМоделей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НастройкиМоделей.ИспользоватьПоискРешений Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = CRM_МоделиМашинногоОбучения.ПроверитьСостояние("ПоискРешений", НастройкиМоделей);
	Если РезультатПроверки.Ошибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьПодборРекомендаций()
	
	ТекстПоиска = СокрЛП(СтрокаПоиска);
	Если ЗначениеЗаполнено(ТекстПоиска) Тогда
		РезультатПодбора = ВыполнитьПодборРекомендаций(ТекстПоиска);
		Помощник_Данные = РезультатПодбора.Данные;
		Помощник_ТекстHTML = РезультатПодбора.ТекстHTML;
	Иначе
		Помощник_Данные = Неопределено;
		Помощник_ТекстHTML = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Помощник_ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Возврат;
	КонецЕсли;
	
	ПозицияСсылки = СтрНайти(ДанныеСобытия.href, "Ссылка_");
	Если ПозицияСсылки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РекомендацияКлюч = Сред(ДанныеСобытия.href, ПозицияСсылки);
	РекомендацияСсылка = Помощник_Данные.Получить(РекомендацияКлюч);
	Если Не ЗначениеЗаполнено(РекомендацияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеВыбранногоРезультатаТМП = РекомендацияСсылка;
	ПодключитьОбработчикОжидания("ОбработчикРешенияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПодборРекомендаций(Знач ТекстПоиска)
	
	РезультатПодбора = Новый Структура;
	РезультатПодбора.Вставить("ТекстHTML", "");
	РезультатПодбора.Вставить("Данные", Неопределено);
	
	РезультатыПоиска = CRM_МоделиМашинногоОбучения.ПоискРешений(ТекстПоиска);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат РезультатПодбора;
	КонецЕсли;
	
	ДанныеСоответствие = Новый Соответствие;
	
	ЦветТекстаГиперссылки = Новый Цвет(0, 102, 204);
	ШрифтГиперссылки = Новый Шрифт("Arial", 11);
	
	Описание = Новый ФорматированныйДокумент;
	Для Каждого ДанныеРешения Из РезультатыПоиска Цикл
		
		СтрокаРекомендации = Описание.Элементы.Добавить();
		ТекстРекомендации = СтрокаРекомендации.Элементы.Добавить(ДанныеРешения.Ссылка);
		ТекстРекомендации.ЦветТекста = ЦветТекстаГиперссылки;
		ТекстРекомендации.Шрифт = ШрифтГиперссылки;
		ТекстРекомендации.НавигационнаяСсылка = "Ссылка_" + ДанныеРешения.Идентификатор;
		СтрокаРекомендации.Элементы.Добавить(" (" + Формат(ДанныеРешения.Уверенность, "ЧДЦ=1") + "%)");
		Описание.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ДанныеСоответствие.Вставить("Ссылка_" + ДанныеРешения.Идентификатор, ДанныеРешения.Ссылка);
		
	КонецЦикла;
	
	ТекстHTML = "";
	Описание.ПолучитьHTML(ТекстHTML, Новый Структура);
	
	РезультатПодбора.Данные = Новый ФиксированноеСоответствие(ДанныеСоответствие);
	РезультатПодбора.ТекстHTML = ТекстHTML;
	
	Возврат РезультатПодбора;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	CRM_РаботаСРечьюБМОСервер.СоздатьНеобходимыеРеквизитыФормы(ЭтотОбъект, МассивЭлементов, МассивПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда = Неопределено)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СтрокаПоиска");
	
	МассивПолей = РаспознаваниеРечи_МассивПолей();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма",                            ЭтотОбъект);
	Контекст.Вставить("Элемент",                          Элементы.СтрокаПоиска);
	Контекст.Вставить("ТекущийЭлемент",                   Элементы.СтрокаПоиска);
	Контекст.Вставить("ИмяРеквизита",                     "СтрокаПоиска");
	Контекст.Вставить("МассивИменКнопокРаспознавания",    МассивИменЭлементов);
	Контекст.Вставить("МассивИменЭлементовРаспознавания", МассивПолей);
	
	CRM_РаботаСРечьюБМОКлиент.РаспознаваниеРечи(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	Если Не ВводДоступен() Тогда
		CRM_РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не РезультатРаспознавания.РаспознаваниеФразыЗавершено Тогда
		ЭтотОбъект[Контекст.ИмяРеквизита] = "";
		Контекст.Элемент.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	CRM_ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	CRM_РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	CRM_РаботаСРечьюБМОКлиент.ИзменитьСостояниеФормы(ЭтотОбъект, Контекст.МассивИменКнопокРаспознавания);
	
	СтрокаПоискаПриИзменении(ТекущийЭлемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаспознаваниеРечи_МассивПолей()
	
	МассивПолей = Новый Массив;
	
	CRM_РаботаСРечьюБМОСервер.ДополнитьМассивПолейРаспознавания(МассивПолей, "СтрокаПоиска");
	
	Возврат МассивПолей;
	
КонецФункции

#КонецОбласти // РаспознаваниеРечи
