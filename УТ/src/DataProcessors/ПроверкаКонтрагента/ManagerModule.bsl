///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

Функция ДанныеКарточкиКонтрагента(ПараметрыОтчета) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		ТекстОшибки = НСтр("ru = 'Не внедрена подсистема ""Работа с контрагентами""'");
		ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Контрагент"    ,    ПараметрыОтчета.Контрагент);
	ДанныеОтчета.Вставить("ОписаниеОшибки",    "");
	ДанныеОтчета.Вставить("СостояниеОтчета",   "");
	ДанныеОтчета.Вставить("СостояниеПроверки", "");
	ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "");
	
	ЭтоЮридическоеЛицо = (СтрДлина(ПараметрыОтчета.ИНН) = 10);
	ДанныеОтчета.Вставить("ЭтоЮридическоеЛицо", ЭтоЮридическоеЛицо);
	
	Если ПараметрыОтчета.СостояниеОтчета = ""
		Или ПараметрыОтчета.СостояниеОтчета = "Ожидание" Тогда
		
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		Если ЭтоЮридическоеЛицо Тогда
			ИнформацияОСвязях = МодульРаботаСКонтрагентами.ИнформацияОСвязяхЮридическогоЛицаПоИНН(ПараметрыОтчета.ИНН);
		Иначе
			ИнформацияОСвязях = МодульРаботаСКонтрагентами.ИнформацияОСвязяхПредпринимателяПоИНН(ПараметрыОтчета.ИНН);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
			ДанныеОтчета.ОписаниеОшибки = ИнформацияОСвязях.ОписаниеОшибки;
			ДанныеОтчета.Вставить("СостояниеОтчета"  ,           "Завершено");
			ДанныеОтчета.Вставить("СостояниеПроверки",           "Завершено");
			ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "Завершено");
			Возврат ДанныеОтчета;
		КонецЕсли;
		
		Если ИнформацияОСвязях.ОжиданиеОтвета Тогда
			ДанныеОтчета.Вставить("СостояниеОтчета", "Ожидание");
		Иначе
			ДанныеОтчета.Вставить("СостояниеОтчета", "ПолученыДанные");
		КонецЕсли;
		
	Иначе
		
		ДанныеОтчета.Вставить("СостояниеОтчета", ПараметрыОтчета.СостояниеОтчета);
		
	КонецЕсли;
	
	// Запрос информации о проверках.
	Если ПараметрыОтчета.СостояниеПроверки = ""
		Или ПараметрыОтчета.СостояниеПроверки = "Ожидание" И ДанныеОтчета.СостояниеОтчета <> "Ожидание" Тогда
		
		// Если данные о проверках еще не запрашивались
		// или запрашивались и уже получены данные для отчета.
		
		СписокИНН = Новый Массив;
		СписокИНН.Добавить(ПараметрыОтчета.ИНН);
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		ИнформацияОПроверках = МодульРаботаСКонтрагентами.ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИННСлужебная(
			СписокИНН, Истина, Истина, Истина, Ложь);
		
		Если ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки) Тогда
			// Выведем ошибку в блоке Проверок
			ДанныеОтчета.Вставить("СостояниеПроверки", "Завершено");
		КонецЕсли;
		
		Если ИнформацияОПроверках.ОжиданиеОтвета Тогда
			ДанныеОтчета.Вставить("СостояниеПроверки", "Ожидание");
		Иначе
			ДанныеОтчета.Вставить("СостояниеПроверки", "ПолученыДанные");
		КонецЕсли;
		
	Иначе
		
		ДанныеОтчета.Вставить("СостояниеПроверки", ПараметрыОтчета.СостояниеПроверки);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		СПАРКРискиСуществует = Истина;
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		
		Если ПараметрыОтчета.СостояниеСобытияМониторинга = "" Тогда
		
			ПараметрыЗапроса = Неопределено;
			
			ВидКонтрагента = ?(ЭтоЮридическоеЛицо,
				ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо"),
				ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель"));
			ИнформацияОСобытияхМониторинга = МодульСПАРКРиски.СобытияМониторингаСПАРККонтрагента(
				ПараметрыОтчета.ИНН,
				ВидКонтрагента,
				ПараметрыЗапроса);
			
			Если Не ИнформацияОСобытияхМониторинга.ИспользованиеРазрешено Тогда
				ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "Завершено");
			ИначеЕсли Не ИнформацияОСобытияхМониторинга.ВидОшибки.Пустая() Тогда
				
				ДанныеОтчета.ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки
					+ Символы.ПС
					+ ИнформацияОСобытияхМониторинга.ТекстОшибки;
				ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "Завершено");
				
			КонецЕсли;
			
			ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "ПолученыДанные");
			
		Иначе
			ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", ПараметрыОтчета.СостояниеСобытияМониторинга);
		КонецЕсли;
		
		КарточкаСправкиСПАРКРиски = Новый Структура;
		КарточкаСправкиСПАРКРиски.Вставить("ДанныеАктуальнойСправки", СПАРКРиски.АктуальнаяСправка(ПараметрыОтчета));
		ДанныеОтчета.Вставить("КарточкаСправкиСПАРКРиски", КарточкаСправкиСПАРКРиски);

		
	Иначе
		ДанныеОтчета.Вставить("СостояниеСобытияМониторинга", "ПолученыДанные");
	КонецЕсли;
	
	Если ДанныеОтчета.СостояниеОтчета = "ПолученыДанные" Тогда
		
		ДанныеПроверкиКонтрагента = Новый Структура;
		
		ПолучитьСостояниеКонтрагентаПоДаннымЕГРН(
			ИнформацияОСвязях,
			ПараметрыОтчета.Контрагент);
		ДанныеПроверкиКонтрагента.Вставить("НайденныйИНН",            ИнформацияОСвязях.ИНН);
		ДанныеПроверкиКонтрагента.Вставить("НаименованиеКонтрагента", ИнформацияОСвязях.НаименованиеСокращенное);
		ДанныеПроверкиКонтрагента.Вставить("ОбластиРасшифровки",      НоваяТаблицаОбластиРасшифровки());
		ДанныеПроверкиКонтрагента.Вставить("РезультатГлавное",                  Неопределено);
		ДанныеПроверкиКонтрагента.Вставить("РезультатыБухгалтерскаяОтчетность", НовыйРезультатыБухгалтерскаяОтчетность());
		ДанныеПроверкиКонтрагента.Вставить("РезультатФинансовыйАнализ",         Неопределено);
		ДанныеПроверкиКонтрагента.Вставить("РезультатНалоги",                   Неопределено);
		ДанныеПроверкиКонтрагента.Вставить("РезультатДанныеПрограммы",          Неопределено);
		ДанныеПроверкиКонтрагента.Вставить("РезультатОбщиеСведения",            Новый Структура);
		
		СформироватьРезультатДанныеГосРеестров(ИнформацияОСвязях, ДанныеОтчета, ДанныеПроверкиКонтрагента);
		ИнформацияОСвязях.Вставить("ДанныеПрограммы", Новый Структура);
		МодульРаботаСКонтрагентамиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентамиПереопределяемый");
		МодульРаботаСКонтрагентамиПереопределяемый.ДополнитьИнформациюДаннымиПрограммы(
			ИнформацияОСвязях,
			ДанныеОтчета.Контрагент);
		
		Если ЭтоЮридическоеЛицо Тогда
			ПериодыОтчетности = ПериодыБухгалтерскойОтчетности(
				ИнформацияОСвязях);
			СформироватьРезультатБухгалтерскаяОтчетность(
				ИнформацияОСвязях,
				ДанныеОтчета,
				ДанныеПроверкиКонтрагента,
				ПериодыОтчетности);
			СформироватьРезультатАнализОтчетности(
				ИнформацияОСвязях,
				ДанныеОтчета,
				ДанныеПроверкиКонтрагента,
				ПериодыОтчетности);
			ВывестиНалоги(
				ИнформацияОСвязях,
				ДанныеОтчета,
				ДанныеПроверкиКонтрагента);
			СформироватьРезультатФинансовыйАнализ(
				ИнформацияОСвязях,
				ДанныеОтчета,
				ДанныеПроверкиКонтрагента,
				ПериодыОтчетности);
		КонецЕсли;
		
		СформироватьРезультатГлавное(
			ИнформацияОСвязях,
			ПараметрыОтчета.ИНН,
			ДанныеОтчета,
			ДанныеПроверкиКонтрагента);
		СформироватьИсторииИзменений(
			ИнформацияОСвязях,
			ДанныеОтчета,
			ДанныеПроверкиКонтрагента);
		СформироватьВидыДеятельности(
			ИнформацияОСвязях,
			ДанныеОтчета,
			ДанныеПроверкиКонтрагента);
		СформироватьСвязанныеОрганизации(
			ИнформацияОСвязях,
			ДанныеОтчета,
			ДанныеПроверкиКонтрагента);
		
		ДанныеОтчета.Вставить("ДанныеПроверкиКонтрагента", ДанныеПроверкиКонтрагента);
		ДанныеОтчета.СостояниеОтчета = "СформированОтчет";
		
	КонецЕсли;
	
	Если ДанныеОтчета.СостояниеПроверки = "ПолученыДанные" Тогда
		
		ДанныеПроверки = Новый Структура;
		ДанныеПроверки.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
		ДанныеПроверки.Вставить("РезультатПроверки");
		
		СформироватьРезультатПроверкиКонтролирующимиОрганами(
			ИнформацияОПроверках.Проверки[ПараметрыОтчета.ИНН],
			ДанныеОтчета,
			ДанныеПроверки,
			ИнформацияОПроверках.ОписаниеОшибки);
		
		ДанныеОтчета.Вставить("ДанныеПроверки", ДанныеПроверки);
		ДанныеОтчета.СостояниеПроверки = "СформированОтчет";
		
	КонецЕсли;
	
	Если ДанныеОтчета.СостояниеСобытияМониторинга = "ПолученыДанные"
		И СПАРКРискиСуществует Тогда
		
		ДанныеСобытияМониторинга = Новый Структура;
		ДанныеСобытияМониторинга.Вставить("РезультатСобытияМониторинга", Неопределено);
		ДанныеСобытияМониторинга.Вставить("НомерСледующейСтраницы");
		
		СформироватьРезультатСобытияМониторинга(
			ИнформацияОСобытияхМониторинга,
			ДанныеСобытияМониторинга);
		
		ДанныеОтчета.Вставить("ДанныеСобытияМониторинга", ДанныеСобытияМониторинга);
		ДанныеОтчета.СостояниеСобытияМониторинга = "СформированОтчет";
		
	КонецЕсли;
	
	Возврат ДанныеОтчета;
	
КонецФункции

#КонецОбласти

Функция НовыйРезультатыБухгалтерскаяОтчетность()
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатАнализОтчетности");
	Результат.Вставить("РезультатБухгалтерскийБаланс");
	Результат.Вставить("РезультатОтчетОПрибыляхИУбытках");
	Результат.Вставить("РезультатОтчетОбИзмененияхКапитала");
	Результат.Вставить("РезультатОтчетОДвиженииДенежныхСредств");
	Результат.Вставить("РезультатИспользованиеСредств");
	Результат.Вставить("РезультатРасчетСтоимостиЧистыхАктивов");
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьРезультатБухгалтерскаяОтчетность(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента,
		ПериодыОтчетности)
	
	СлужебнаяПодготовитьДанныеБухгалтерскойОтчетности(
		Сведения,
		ПериодыОтчетности);
	
	Если Не ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	Если Сведения.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКарточки = ИмяКарточки(Сведения);
	
	РезультатыБухгалтерскаяОтчетность = ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность;

	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	
	Макет = ПолучитьМакет("БухгалтерскийБаланс");
	
	РезультатБухгалтерскийБаланс = Новый ТабличныйДокумент;
	
	ТипОтчетности = "";
	Для Каждого СтрокаТаблицы Из Сведения.ДанныеБухгалтерскойОтчетности Цикл
		
		Если Не ПустаяСтрока(ТипОтчетности) Тогда
			РезультатБухгалтерскийБаланс.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Если СтрокаТаблицы.ТипОтчетности <> ТипОтчетности Тогда
			ТипОтчетности = СтрокаТаблицы.ТипОтчетности;
			Если ТипОтчетности = "2" Тогда
				ИмяОбластиБалансШапка  = "БалансШапка";
				ИмяОбластиБаланса      = "Баланс";
			ИначеЕсли ТипОтчетности = "1" Тогда
				ИмяОбластиБалансШапка  = "БалансМПШапка";
				ИмяОбластиБаланса      = "БалансМП";
			Иначе //"0"
				ИмяОбластиБалансШапка  = "БалансНКОШапка";
				ИмяОбластиБаланса      = "БалансНКО";
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатБухгалтерскийБаланс = Новый ТабличныйДокумент;
		РезультатБухгалтерскийБаланс.Вывести(
			Макет.ПолучитьОбласть(ИмяОбластиБалансШапка));
		РезультатБухгалтерскийБаланс.Вывести(
			Макет.ПолучитьОбласть("ШапкаКомментарий"));

		ОбластьЗаголовки = Макет.ПолучитьОбласть(ИмяОбластиБаланса + "|Заголовки");
		ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицы);
		РезультатБухгалтерскийБаланс.Вывести(ОбластьЗаголовки);
		Год = 5;
		Пока Год >= 1 Цикл
			Если Не СтрокаТаблицы.Показатели.Свойство("П1700_" + Год) Тогда
				Год = Год - 1;
				Продолжить;
			КонецЕсли;
			ОбластьПоказателиГод = Макет.ПолучитьОбласть(ИмяОбластиБаланса + "|Год_" + Год);
			ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
			ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			РезультатБухгалтерскийБаланс.Присоединить(ОбластьПоказателиГод);
			Год = Год - 1;
			
		КонецЦикла;
		
		ВывестиОтчетОПрибыляхИУбытках(
			СтрокаТаблицы,
			ПериодыОтчетности,
			РезультатыБухгалтерскаяОтчетность,
			ИмяКарточки);
		
		ВывестиОтчетОбИзмененияхКапитала(
			СтрокаТаблицы,
			ПериодыОтчетности,
			РезультатыБухгалтерскаяОтчетность,
			ИмяКарточки);
		
		ВывестиОтчетОДвиженииДенежныхСредств(
			СтрокаТаблицы,
			ПериодыОтчетности,
			РезультатыБухгалтерскаяОтчетность,
			ИмяКарточки);
		
		ВывестиИспользованиеСредств(
			СтрокаТаблицы,
			ПериодыОтчетности,
			РезультатыБухгалтерскаяОтчетность,
			ИмяКарточки);
		
		ВывестиРасчетСтоимостиЧистыхАктивов(
			СтрокаТаблицы,
			ПериодыОтчетности,
			РезультатыБухгалтерскаяОтчетность,
			ИмяКарточки);
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатБухгалтерскийБаланс = РезультатБухгалтерскийБаланс;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаБухгалтерскийБаланс", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - бухгалтерский баланс'"),
				ИмяКарточки(Сведения))));
	
	ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатБухгалтерскаяОтчетность", "ИмяДокумента");
	Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеПроверкиКонтрагента.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОтчетОПрибыляхИУбытках(
		СтрокаТаблицыОтчетности,
		ПериодыОтчетности,
		РезультатыБухгалтерскаяОтчетность,
		ИмяКарточки)
	
	Если Не СтрокаТаблицыОтчетности.ЕстьПрибылиУбытки Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыОтчетности.ТипОтчетности = "2" Тогда
		ИмяОбластиШапка         = "ПрибылиУбыткиШапка";
		ИмяОбластиПрибылиУбытки = "ПрибылиУбытки";
	ИначеЕсли СтрокаТаблицыОтчетности.ТипОтчетности = "1" Тогда
		ИмяОбластиШапка         = "ПрибылиУбыткиМПШапка";
		ИмяОбластиПрибылиУбытки = "ПрибылиУбыткиМП";
	Иначе
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетОПрибыляхИУбытках");
	
	РезультатОтчетОПрибыляхИУбытках = Новый ТабличныйДокумент;
	РезультатОтчетОПрибыляхИУбытках.Вывести(
		Макет.ПолучитьОбласть(ИмяОбластиШапка));
	РезультатОтчетОПрибыляхИУбытках.Вывести(
		Макет.ПолучитьОбласть("ШапкаКомментарий"));
	
	ОбластьЗаголовки = Макет.ПолучитьОбласть(ИмяОбластиПрибылиУбытки +"|Заголовки");
	ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицыОтчетности);
	РезультатОтчетОПрибыляхИУбытках.Вывести(ОбластьЗаголовки);
	Год = 5;
	Пока Год >= 1 Цикл
		Если Не СтрокаТаблицыОтчетности.Показатели.Свойство("П2400_" + Год) Тогда
			Год = Год - 1;
			Продолжить;
		КонецЕсли;
		ОбластьПоказателиГод = Макет.ПолучитьОбласть(ИмяОбластиПрибылиУбытки +"|Год_" + Год);
		ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
		ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицыОтчетности.Показатели);
		РезультатОтчетОПрибыляхИУбытках.Присоединить(ОбластьПоказателиГод);
		Год = Год - 1;
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатОтчетОПрибыляхИУбытках = РезультатОтчетОПрибыляхИУбытках;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаОтчетОПрибыляхИУбытках", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 - отчет о прибылях и убытках'"),
				ИмяКарточки)));
	
КонецПроцедуры

Процедура ВывестиОтчетОбИзмененияхКапитала(
		СтрокаТаблицыОтчетности,
		ПериодыОтчетности,
		РезультатыБухгалтерскаяОтчетность,
		ИмяКарточки)
	
	Если Не СтрокаТаблицыОтчетности.ЕстьИзменениеКапитала Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетОбИзмененияхКапитала");
	
	РезультатОтчетОбИзмененияхКапитала = Новый ТабличныйДокумент;
	РезультатОтчетОбИзмененияхКапитала.Вывести(
		Макет.ПолучитьОбласть("ИзменениеКапиталаШапка"));
	РезультатОтчетОбИзмененияхКапитала.Вывести(
		Макет.ПолучитьОбласть("ШапкаКомментарий"));
	
	ОбластьЗаголовки = Макет.ПолучитьОбласть("ИзменениеКапитала|Заголовки");
	ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицыОтчетности);
	РезультатОтчетОбИзмененияхКапитала.Вывести(ОбластьЗаголовки);
	Год = 5;
	Пока Год >= 1 Цикл
		Если Не СтрокаТаблицыОтчетности.Показатели.Свойство("П33008_" + Год) Тогда
			Год = Год - 1;
			Продолжить;
		КонецЕсли;
		ОбластьПоказателиГод = Макет.ПолучитьОбласть("ИзменениеКапитала|Год_" + Год);
		ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
		ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицыОтчетности.Показатели);
		РезультатОтчетОбИзмененияхКапитала.Присоединить(ОбластьПоказателиГод);
		Год = Год - 1;
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатОтчетОбИзмененияхКапитала = РезультатОтчетОбИзмененияхКапитала;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаОтчетОбИзмененияхКапитала", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 - отчет об изменениях капитала'"),
				ИмяКарточки)));
	
КонецПроцедуры

Процедура ВывестиОтчетОДвиженииДенежныхСредств(
		СтрокаТаблицыОтчетности,
		ПериодыОтчетности,
		РезультатыБухгалтерскаяОтчетность,
		ИмяКарточки)
	
	Если Не СтрокаТаблицыОтчетности.ЕстьДвижениеДенег Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетОДвиженииДенежныхСредств");
	
	РезультатОтчетОДвиженииДенежныхСредств = Новый ТабличныйДокумент;
	РезультатОтчетОДвиженииДенежныхСредств.Вывести(
		Макет.ПолучитьОбласть("ДвижениеДенегШапка"));
	РезультатОтчетОДвиженииДенежныхСредств.Вывести(
		Макет.ПолучитьОбласть("ШапкаКомментарий"));
	
	ОбластьЗаголовки = Макет.ПолучитьОбласть("ДвижениеДенег|Заголовки");
	ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицыОтчетности);
	РезультатОтчетОДвиженииДенежныхСредств.Вывести(ОбластьЗаголовки);
	Год = 5;
	Пока Год >= 1 Цикл
		Если Не СтрокаТаблицыОтчетности.Показатели.Свойство("П4400_" + Год) Тогда
			Год = Год - 1;
			Продолжить;
		КонецЕсли;
		ОбластьПоказателиГод = Макет.ПолучитьОбласть("ДвижениеДенег|Год_" + Год);
		ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
		ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицыОтчетности.Показатели);
		РезультатОтчетОДвиженииДенежныхСредств.Присоединить(ОбластьПоказателиГод);
		Год = Год - 1;
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатОтчетОДвиженииДенежныхСредств = РезультатОтчетОДвиженииДенежныхСредств;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаОтчетОДвиженииДенежныхСредств", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 - отчет о движении денежных средств'"),
				ИмяКарточки)));
	
КонецПроцедуры

Процедура ВывестиИспользованиеСредств(
		СтрокаТаблицыОтчетности,
		ПериодыОтчетности,
		РезультатыБухгалтерскаяОтчетность,
		ИмяКарточки)
	
	Если Не СтрокаТаблицыОтчетности.ЕстьИспользованиеСредств Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыОтчетности.ТипОтчетности = "2" Тогда
		ИмяОбластиШапка = "ИспользованиеСредствШапка";
		ИмяОбластиИспользованиеСредств = "ИспользованиеСредств";
	ИначеЕсли СтрокаТаблицыОтчетности.ТипОтчетности = "0" Тогда
		ИмяОбластиШапка = "ИспользованиеСредствНКОШапка";
		ИмяОбластиИспользованиеСредств = "ИспользованиеСредствНКО";
	Иначе
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОтчетОЦелевомИспользованииСредств");
	
	РезультатИспользованиеСредств = Новый ТабличныйДокумент;
	РезультатИспользованиеСредств.Вывести(
		Макет.ПолучитьОбласть(ИмяОбластиШапка));
	РезультатИспользованиеСредств.Вывести(
		Макет.ПолучитьОбласть("ШапкаКомментарий"));
	
	ОбластьЗаголовки = Макет.ПолучитьОбласть(ИмяОбластиИспользованиеСредств +"|Заголовки");
	ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицыОтчетности);
	РезультатИспользованиеСредств.Вывести(ОбластьЗаголовки);
	Год = 5;
	Пока Год >= 1 Цикл
		Если Не СтрокаТаблицыОтчетности.Показатели.Свойство("П6400_" + Год) Тогда
			Год = Год - 1;
			Продолжить;
		КонецЕсли;
		ОбластьПоказателиГод = Макет.ПолучитьОбласть(ИмяОбластиИспользованиеСредств +"|Год_" + Год);
		ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
		ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицыОтчетности.Показатели);
		РезультатИспользованиеСредств.Присоединить(ОбластьПоказателиГод);
		Год = Год - 1;
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатИспользованиеСредств = РезультатИспользованиеСредств;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаИспользованиеСредств", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - отчет об использовании средств'"),
				ИмяКарточки)));
	
КонецПроцедуры

Процедура ВывестиРасчетСтоимостиЧистыхАктивов(
		СтрокаТаблицыОтчетности,
		ПериодыОтчетности,
		РезультатыБухгалтерскаяОтчетность,
		ИмяКарточки)
	
	Если Не СтрокаТаблицыОтчетности.ЕстьРасчетЧистыхАктивов Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("РасчетСтоимостиЧистыхАктивов");
	
	РезультатРасчетСтоимостиЧистыхАктивов = Новый ТабличныйДокумент;
	РезультатРасчетСтоимостиЧистыхАктивов.Вывести(
		Макет.ПолучитьОбласть("ЧистыеАктивыШапка"));
	РезультатРасчетСтоимостиЧистыхАктивов.Вывести(
		Макет.ПолучитьОбласть("ШапкаКомментарий"));
	
	ОбластьЗаголовки = Макет.ПолучитьОбласть("ЧистыеАктивы|Заголовки");
	ОбластьЗаголовки.Параметры.Заполнить(СтрокаТаблицыОтчетности);
	РезультатРасчетСтоимостиЧистыхАктивов.Вывести(ОбластьЗаголовки);
	Год = 5;
	Пока Год >= 1 Цикл
		Если Не СтрокаТаблицыОтчетности.Показатели.Свойство("П93_" + Год) Тогда
			Год = Год - 1;
			Продолжить;
		КонецЕсли;
		ОбластьПоказателиГод = Макет.ПолучитьОбласть("ЧистыеАктивы|Год_" + Год);
		ОбластьПоказателиГод.Параметры.Заполнить(ПериодыОтчетности);
		ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицыОтчетности.Показатели);
		РезультатРасчетСтоимостиЧистыхАктивов.Присоединить(ОбластьПоказателиГод);
		Год = Год - 1;
		
	КонецЦикла;
	
	РезультатыБухгалтерскаяОтчетность.РезультатРасчетСтоимостиЧистыхАктивов = РезультатРасчетСтоимостиЧистыхАктивов;
	РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаРасчетСтоимостиЧистыхАктивов", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - расчет стоимости чистых активов'"),
				ИмяКарточки)));
	
КонецПроцедуры

Функция ИмяКарточки(Сведения)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Проверка контрагента %1'"),
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
				Сведения.НаименованиеСокращенное,
				""));
	
КонецФункции

Процедура СлужебнаяПодготовитьДанныеБухгалтерскойОтчетности(Сведения, ПериодыОтчетности)
	
	Сведения.Вставить("ДанныеБухгалтерскойОтчетности", НоваяТаблицаДанныеБухгалтерскойОтчетности());
	Сведения.Вставить("ЕстьОтчетностьГод_1", Ложь);
	Сведения.Вставить("ЕстьОтчетностьГод_2", Ложь);
	Сведения.Вставить("ЕстьОтчетностьГод_3", Ложь);
	Сведения.Вставить("ЕстьОтчетностьГод_4", Ложь);
	Сведения.Вставить("ЕстьОтчетностьГод_5", Ложь);
	
	Если Сведения.БухгалтерскаяОтчетность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОтчетности = Неопределено;
	КодВалютыОтчетности = Неопределено;
	
	// Данные за 5 лет
	ОтчетностьГод_1 = Сведения.БухгалтерскаяОтчетность.Найти(Число(ПериодыОтчетности.Год_1), "Год");
	Сведения.ЕстьОтчетностьГод_1 = ОтчетностьГод_1 <> Неопределено;
	ОтчетностьГод_2 = Сведения.БухгалтерскаяОтчетность.Найти(Число(ПериодыОтчетности.Год_2), "Год");
	Сведения.ЕстьОтчетностьГод_2 = ОтчетностьГод_2 <> Неопределено;
	ОтчетностьГод_3 = Сведения.БухгалтерскаяОтчетность.Найти(Число(ПериодыОтчетности.Год_3), "Год");
	Сведения.ЕстьОтчетностьГод_3 = ОтчетностьГод_3 <> Неопределено;
	ОтчетностьГод_4 = Сведения.БухгалтерскаяОтчетность.Найти(Число(ПериодыОтчетности.Год_4), "Год");
	Сведения.ЕстьОтчетностьГод_4 = ОтчетностьГод_4 <> Неопределено;
	ОтчетностьГод_5 = Сведения.БухгалтерскаяОтчетность.Найти(Число(ПериодыОтчетности.Год_5), "Год");
	Сведения.ЕстьОтчетностьГод_5 = ОтчетностьГод_5 <> Неопределено;
	
	Если Сведения.ЕстьОтчетностьГод_1 Тогда
		ТипОтчетности       = ОтчетностьГод_1.ТипОтчетности;
		КодВалютыОтчетности = ОтчетностьГод_1.КодВалютыОтчетности;
		НоваяСтрока = Сведения.ДанныеБухгалтерскойОтчетности.Добавить();
		НоваяСтрока.ТипОтчетности       = ОтчетностьГод_1.ТипОтчетности;
		НоваяСтрока.ВалютаОтчетности    = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_1.КодВалютыОтчетности);
		НоваяСтрока.КодВалютыОтчетности = ОтчетностьГод_1.КодВалютыОтчетности;
		Показатели = Новый Структура;
		Для Каждого СтрокаТаблицы Из ОтчетностьГод_1.Показатели Цикл
			Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
				// Для отчета об изменении капитала используем специальный формат имен показателей.
				ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_1";
			Иначе
				ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_1", "_2");
			КонецЕсли;
			Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	КонецЕсли;
	
	Если Сведения.ЕстьОтчетностьГод_2 Тогда
		
		Если ОтчетностьГод_2.ТипОтчетности <> ТипОтчетности
			Или ОтчетностьГод_2.КодВалютыОтчетности <> КодВалютыОтчетности Тогда
			ТипОтчетности       = ОтчетностьГод_2.ТипОтчетности;
			КодВалютыОтчетности = ОтчетностьГод_2.КодВалютыОтчетности;
			НоваяСтрока = Сведения.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности       = ОтчетностьГод_2.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности    = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_2.КодВалютыОтчетности);
			НоваяСтрока.КодВалютыОтчетности = ОтчетностьГод_2.КодВалютыОтчетности;
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_2 = Истина;
		Иначе
			ЗаполнятьПоказатели_2 = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОтчетностьГод_2.Показатели Цикл
			Если Сведения.ЕстьОтчетностьГод_1
				И НЕ ЗаполнятьПоказатели_2
				И Лев(СтрокаТаблицы.Код, 1) <> "3" // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" // ОДДС из Росстата содержит данные только за текущий год.
				И Прав(СтрокаТаблицы.Код, 1) = "3" Тогда
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_2";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_2", "_3");
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	Если Сведения.ЕстьОтчетностьГод_3 Тогда
		
		Если ОтчетностьГод_3.ТипОтчетности <> ТипОтчетности
			Или ОтчетностьГод_3.КодВалютыОтчетности <> КодВалютыОтчетности Тогда
			НоваяСтрока = Сведения.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности       = ОтчетностьГод_3.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности    = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_3.КодВалютыОтчетности);
			НоваяСтрока.КодВалютыОтчетности = ОтчетностьГод_3.КодВалютыОтчетности;
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_3 = Истина;
		Иначе
			ЗаполнятьПоказатели_3 = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОтчетностьГод_3.Показатели Цикл
			Если Сведения.ЕстьОтчетностьГод_2
				И НЕ ЗаполнятьПоказатели_3
				И Лев(СтрокаТаблицы.Код, 1) <> "3" // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" // ОДДС из Росстата содержит данные только за текущий год.
				И Прав(СтрокаТаблицы.Код, 1) = "3" Тогда
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_3";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_3", "_4");
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	Если Сведения.ЕстьОтчетностьГод_4 Тогда
		
		Если ОтчетностьГод_4.ТипОтчетности <> ТипОтчетности
			Или ОтчетностьГод_4.КодВалютыОтчетности <> КодВалютыОтчетности Тогда
			НоваяСтрока = Сведения.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности       = ОтчетностьГод_4.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности    = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_4.КодВалютыОтчетности);
			НоваяСтрока.КодВалютыОтчетности = ОтчетностьГод_4.КодВалютыОтчетности;
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_4 = Истина;
		Иначе
			ЗаполнятьПоказатели_4 = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОтчетностьГод_4.Показатели Цикл
			Если Сведения.ЕстьОтчетностьГод_3
				И НЕ ЗаполнятьПоказатели_4
				И Лев(СтрокаТаблицы.Код, 1) <> "3" // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" // ОДДС из Росстата содержит данные только за текущий год.
				И Прав(СтрокаТаблицы.Код, 1) = "3" Тогда
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_4";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_4", "_5");
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	Если Сведения.ЕстьОтчетностьГод_5 Тогда
		
		Если ОтчетностьГод_5.ТипОтчетности <> ТипОтчетности
			Или ОтчетностьГод_5.КодВалютыОтчетности <> КодВалютыОтчетности Тогда
			НоваяСтрока = Сведения.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности       = ОтчетностьГод_5.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности    = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_5.КодВалютыОтчетности);
			НоваяСтрока.КодВалютыОтчетности = ОтчетностьГод_5.КодВалютыОтчетности;
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_5 = Истина;
		Иначе
			ЗаполнятьПоказатели_5 = Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОтчетностьГод_5.Показатели Цикл
			Если Сведения.ЕстьОтчетностьГод_4
				И НЕ ЗаполнятьПоказатели_5
				И Лев(СтрокаТаблицы.Код, 1) <> "3"       // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" Тогда // ОДДС из Росстата содержит данные только за текущий год.
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_5";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + "_5";
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	// Запоминаем наличие различных форм отчетности.
	Для Каждого СтрокаТаблицы Из Сведения.ДанныеБухгалтерскойОтчетности Цикл
		СтрокаТаблицы.ЕстьПрибылиУбытки = СтрокаТаблицы.ТипОтчетности <> "0";
		СтрокаТаблицы.ЕстьИзменениеКапитала = СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "3");
		СтрокаТаблицы.ЕстьДвижениеДенег = СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "4");
		СтрокаТаблицы.ЕстьИспользованиеСредств = СтрокаТаблицы.ТипОтчетности = "0"
			Или (СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "6"));
		СтрокаТаблицы.ЕстьРасчетЧистыхАктивов = СтрокаТаблицы.ТипОтчетности = "2";
	КонецЦикла;
	
	ДобавитьДанныеОбычнойОтчетности(
		Сведения.ДанныеБухгалтерскойОтчетности);
	ДобавитьДанныеОтчетностиМП(
		Сведения.ДанныеБухгалтерскойОтчетности);
	ДобавитьДанныеОтчетностиНКО(
		Сведения.ДанныеБухгалтерскойОтчетности);
	
КонецПроцедуры

Процедура ДобавитьДанныеОбычнойОтчетности(ДанныеБухгалтерскойОтчетности)
	
	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыОтчетности = Новый Соответствие;
	КодыОтчетности.Вставить("91", "1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;");
	КодыОтчетности.Вставить("92", "1410;1420;1430;1450;1510;1520;1540;1550");
	КодыОтчетности.Вставить("93", "1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520;-1540;-1550");
	Для Каждого КодОтчетности Из КодыОтчетности Цикл
		КодыОтчетности[КодОтчетности.Ключ] = СтрРазделить(КодОтчетности.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3;4;5", ";", Ложь);
	
	Для Каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "2" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КодОтчетности Из КодыОтчетности Цикл
			ЗначениеПоказателяКод = "";
			Для Каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если Не ЕстьДанные Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для Каждого КодСтроки Из КодОтчетности.Значение Цикл
					Множитель = ?(Лев(КодСтроки, 1) = "-", -1, 1);
					ИмяПоказателя = "П" + СтрЗаменить(КодСтроки, "-", "") + "_" + НомерГода;
					ЗначениеПоказателя = ЗначениеПоказателя + Множитель * СтрокаТаблицы.Показатели[ИмяПоказателя];
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодОтчетности.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодОтчетности.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодОтчетности.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
		Если СтрокаТаблицы.ЕстьДвижениеДенег Тогда
			// Сальдо на начало и конец года для отчета о движении денег берем из баланса.
			Если СтрокаТаблицы.Показатели.Свойство("П4100_1") Тогда
				Если СтрокаТаблицы.Показатели.Свойство("П1250_1") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4500_1", СтрокаТаблицы.Показатели.П1250_1);
				КонецЕсли;
				Если СтрокаТаблицы.Показатели.Свойство("П1250_2") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4450_1", СтрокаТаблицы.Показатели.П1250_2);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.Показатели.Свойство("П4100_2") Тогда
				Если СтрокаТаблицы.Показатели.Свойство("П1250_2") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4500_2", СтрокаТаблицы.Показатели.П1250_2);
				КонецЕсли;
				Если СтрокаТаблицы.Показатели.Свойство("П1250_3") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4450_2", СтрокаТаблицы.Показатели.П1250_3);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОтчетностиМП(ДанныеБухгалтерскойОтчетности)

	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыМП = Новый Соответствие;
	КодыМП.Вставить("11", "1140;1150;1160");
	КодыМП.Вставить("12", "1110;1120;1130;1170;1180;1190");
	КодыМП.Вставить("13", "1220;1230;1240;1260");
	КодыМП.Вставить("14", "1300;1310;1320;1340;1350;1360;1370");
	КодыМП.Вставить("15", "1420;1430;1450");
	КодыМП.Вставить("16", "1530;1540;1550");
	КодыМП.Вставить("21", "2120;2210;2220");
	КодыМП.Вставить("22", "2310;2320;2340");
	КодыМП.Вставить("23", "2410;2421;2430;2450;2460");
	Для Каждого КодМП Из КодыМП Цикл
		КодыМП[КодМП.Ключ] = СтрРазделить(КодМП.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3;4;5", ";", Ложь);
	
	Для Каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "1" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КодМП Из КодыМП Цикл
			ЗначениеПоказателяКод = "";
			Для Каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если НЕ ЕстьДанные Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для Каждого КодСтроки Из КодМП.Значение Цикл
					Если ЗначениеПоказателя < СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода] Тогда
						ЗначениеПоказателя    = СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода];
						ЗначениеПоказателяКод = КодСтроки;
					КонецЕсли;
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодМП.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодМП.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодМП.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОтчетностиНКО(ДанныеБухгалтерскойОтчетности)

	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыНКО = Новый Соответствие;
	КодыНКО.Вставить("11", "1140;1150;1160");
	КодыНКО.Вставить("12", "1110;1120;1130;1170;1180;1190");
	КодыНКО.Вставить("13", "1210;1220;1230;1240;1260");
	КодыНКО.Вставить("14", "1310;1320;1350");
	КодыНКО.Вставить("15", "1360;1370");
	КодыНКО.Вставить("16", "1410;1420;1430;1450");
	КодыНКО.Вставить("17", "1510;1530;1540;1550");
	КодыНКО.Вставить("61", "6210;6215;6220;6230");
	Для Каждого КодНКО Из КодыНКО Цикл
		КодыНКО[КодНКО.Ключ] = СтрРазделить(КодНКО.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3;4;5", ";", Ложь);
	
	Для Каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "0" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КодНКО Из КодыНКО Цикл
			ЗначениеПоказателяКод = "";
			Для Каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если НЕ ЕстьДанные Тогда
					Продолжить;
				ИначеЕсли КодНКО.Ключ = "61"
					И (НомерГода <> "1") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для Каждого КодСтроки Из КодНКО.Значение Цикл
					Если ЗначениеПоказателя < СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода] Тогда
						ЗначениеПоказателя    = СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода];
						ЗначениеПоказателяКод = КодСтроки;
					КонецЕсли;
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодНКО.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодНКО.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодНКО.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаДанныеБухгалтерскойОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипОтчетности",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодВалютыОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели"); // Структура
	Результат.Колонки.Добавить("ЕстьПрибылиУбытки",        Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьИзменениеКапитала",    Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьДвижениеДенег",        Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьИспользованиеСредств", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьРасчетЧистыхАктивов",  Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции

#Область АнализОтчетности

Процедура СформироватьРезультатАнализОтчетности(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента,
		ПериодыОтчетности)
	
	ПодготовитьДанныеАнализаОтчетности(Сведения, ПериодыОтчетности);
	
	КарточкаАнализаОтчетности = НовыйДанныеКарточкиАнализаОтчетности();
	ДанныеПроверкиКонтрагента.Вставить("КарточкаАнализаОтчетности", КарточкаАнализаОтчетности);
	
	Если Сведения.АнализОтчетности.Количество() = 0 Тогда
		
		Если Сведения.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
			КарточкаАнализаОтчетности.Описание =
				НСтр("ru='Анализ отчетности не проведен, т.к. бухгалтерская отчетность за последние 3 года отсутствует'");
		ИначеЕсли Сведения.ДанныеБухгалтерскойОтчетности[0].ТипОтчетности = "0" Тогда
			КарточкаАнализаОтчетности.Описание =
				НСтр("ru='Анализ отчетности не проводится для социально ориентированных некоммерческих организаций'");
		Иначе
			КарточкаАнализаОтчетности.Описание =
				НСтр("ru='Анализ отчетности не проведен'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РезультатАнализОтчетности = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("АнализОтчетности");
	
	РезультатАнализОтчетности.Вывести(Макет.ПолучитьОбласть("Шапка"));
	ОбластьПоказателиЗаголовок = Макет.ПолучитьОбласть("Показатели|Заголовки");
	
	Для Каждого СтрокаТаблицы Из Сведения.АнализОтчетности Цикл
		
		ОбластьПоказателиЗаголовок.Параметры.Заполнить(СтрокаТаблицы);
		РезультатАнализОтчетности.Вывести(ОбластьПоказателиЗаголовок);
		Год = 5;
		Пока Год >= 1 Цикл
			Если Не СтрокаТаблицы.Показатели.Свойство("Год_" + Год) Тогда
				Год = Год - 1;
				Продолжить;
			КонецЕсли;
			ОбластьПоказателиГод = Макет.ПолучитьОбласть("Показатели|Год_" + Год);
			ОбластьПоказателиГод.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			РезультатАнализОтчетности.Присоединить(ОбластьПоказателиГод);
			Год = Год - 1;
			
		КонецЦикла;
		
		КарточкаАнализаОтчетности.Показатели = СтрокаТаблицы.Показатели;
		
	КонецЦикла;
	
	ГодОтчетности = Неопределено;
	КодВалютыОтчетности = Неопределено;
	ГодОтчетности = ?(Сведения.ЕстьОтчетностьГод_1, 
		ПериодыОтчетности.Год_1,
		?(Сведения.ЕстьОтчетностьГод_2,
			ПериодыОтчетности.Год_2,
			ПериодыОтчетности.Год_3));
	
	КарточкаАнализаОтчетности.Год = ГодОтчетности;
	
	ДанныеОтчетности = Сведения.ДанныеБухгалтерскойОтчетности[0];
	КодВалютыОтчетности = ДанныеОтчетности.КодВалютыОтчетности;
	
	ЗначенияПоказателей = Сведения.АнализОтчетности[0].Показатели;
	Если Сведения.ЕстьОтчетностьГод_1 Тогда
		
		КарточкаАнализаОтчетности.Продажи.Значение = ЗначенияПоказателей.Продажи_1;
		КарточкаАнализаОтчетности.Прибыль.Значение = ЗначенияПоказателей.Прибыль_1;
		КарточкаАнализаОтчетности.ЧистыеАктивы.Значение = ЗначенияПоказателей.ЧистыеАктивы_1;
		ПоказателиДляКартинок = ЗначенияПоказателей;
		
	ИначеЕсли Сведения.ЕстьОтчетностьГод_2 Тогда
		
		КарточкаАнализаОтчетности.Продажи.Значение = ЗначенияПоказателей.Продажи_2;
		КарточкаАнализаОтчетности.Прибыль.Значение = ЗначенияПоказателей.Прибыль_2;
		КарточкаАнализаОтчетности.ЧистыеАктивы.Значение = ЗначенияПоказателей.ЧистыеАктивы_2;
		ПоказателиДляКартинок = Новый Структура;
		ПоказателиДляКартинок.Вставить("Продажи_1", ЗначенияПоказателей.Продажи_2);
		ПоказателиДляКартинок.Вставить("Продажи_2", ЗначенияПоказателей.Продажи_3);
		ПоказателиДляКартинок.Вставить("Прибыль_1", ЗначенияПоказателей.Прибыль_2);
		ПоказателиДляКартинок.Вставить("Прибыль_2", ЗначенияПоказателей.Прибыль_3);
		ПоказателиДляКартинок.Вставить("ЧистыеАктивы_1", ЗначенияПоказателей.ЧистыеАктивы_2);
		ПоказателиДляКартинок.Вставить("ЧистыеАктивы_2", ЗначенияПоказателей.ЧистыеАктивы_3);
		
	Иначе
		КарточкаАнализаОтчетности.Продажи.Значение = ЗначенияПоказателей.Продажи_3;
		КарточкаАнализаОтчетности.Прибыль.Значение = ЗначенияПоказателей.Прибыль_3;
		КарточкаАнализаОтчетности.ЧистыеАктивы.Значение = ЗначенияПоказателей.ЧистыеАктивы_3;
	КонецЕсли;
	КарточкаАнализаОтчетности.ПоказателиДляКартинок = ПоказателиДляКартинок;
	
	КарточкаАнализаОтчетности.ЕстьДанные = Истина;
	
	ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность.РезультатАнализОтчетности = РезультатАнализОтчетности;
	ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность.Вставить("ИмяФайлаАнализОтчетности",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 - анализ отчетности'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура ПодготовитьДанныеАнализаОтчетности(Сведения, ПериодыОтчетности)

	Сведения.Вставить("АнализОтчетности", НоваяТаблицаАнализОтчетности());
	
	Если Сведения.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчетности = Сведения.ДанныеБухгалтерскойОтчетности[0];
	Если СтрокаОтчетности.ТипОтчетности = "0" Тогда
		Возврат;
	КонецЕсли;
	
	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	РасчетПоказателейТипа2 = Новый Структура;
	РасчетПоказателейТипа2.Вставить("Продажи",      "2110");
	РасчетПоказателейТипа2.Вставить("Прибыль",      "2400");
	РасчетПоказателейТипа2.Вставить("Деньги",       "1250");
	РасчетПоказателейТипа2.Вставить("Запасы",       "1210");
	РасчетПоказателейТипа2.Вставить("ОС",           "1150");
	РасчетПоказателейТипа2.Вставить("Дебиторы",     "1220;1230;1240;1260");
	РасчетПоказателейТипа2.Вставить("ДебиторыДолг", "1230");
	РасчетПоказателейТипа2.Вставить("Кредиторы",    "1520");
	РасчетПоказателейТипа2.Вставить("Кредиты",      "1410;1510");
	РасчетПоказателейТипа2.Вставить("ЧистыеАктивы",
		"1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520;-1540;-1550");
	Для Каждого РасчетПоказателя Из РасчетПоказателейТипа2 Цикл
		РасчетПоказателейТипа2[РасчетПоказателя.Ключ] = СтрРазделить(РасчетПоказателя.Значение, ";", Ложь);
	КонецЦикла;
	
	РасчетПоказателейТипа1 = Новый Структура;
	РасчетПоказателейТипа1.Вставить("Продажи",      "2110");
	РасчетПоказателейТипа1.Вставить("Прибыль",      "2400");
	РасчетПоказателейТипа1.Вставить("Деньги",       "1250");
	РасчетПоказателейТипа1.Вставить("Запасы",       "1210");
	РасчетПоказателейТипа1.Вставить("ОС",           "1150;1140;1160");
	РасчетПоказателейТипа1.Вставить("Дебиторы",     "1220;1230;1240;1260");
	РасчетПоказателейТипа1.Вставить("ДебиторыДолг", "1230");
	РасчетПоказателейТипа1.Вставить("Кредиторы",    "1520");
	РасчетПоказателейТипа1.Вставить("Кредиты",      "1410;1510");
	РасчетПоказателейТипа1.Вставить("ЧистыеАктивы",
		"1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520");
	Для Каждого РасчетПоказателя Из РасчетПоказателейТипа1 Цикл
		РасчетПоказателейТипа1[РасчетПоказателя.Ключ] = СтрРазделить(РасчетПоказателя.Значение, ";", Ложь);
	КонецЦикла;
	
	ВалютаОтчетности = "";
	ЗаполненныеПоказателиПоГодам = Новый Структура;
	ЗаполненныеПоказателиПоГодам.Вставить("Год1", Ложь);
	ЗаполненныеПоказателиПоГодам.Вставить("Год2", Ложь);
	ЗаполненныеПоказателиПоГодам.Вставить("Год3", Ложь);
	ЗаполненныеПоказателиПоГодам.Вставить("Год4", Ложь);
	ЗаполненныеПоказателиПоГодам.Вставить("Год5", Ложь);
		
	Для Каждого СтрокаТаблицы Из Сведения.ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности = "0" Тогда // Показатели для отчетности НКО не рассчитываем.
			Продолжить;
		КонецЕсли;
		
		ДанныеОтчетности = СтрокаТаблицы.Показатели;
		ДанныеПоГодам    = Новый Соответствие;
		ДанныеПоГодам.Вставить("1", ДанныеОтчетности.Свойство("П1110_1"));
		ДанныеПоГодам.Вставить("2", ДанныеОтчетности.Свойство("П1110_2"));
		ДанныеПоГодам.Вставить("3", ДанныеОтчетности.Свойство("П1110_3"));
		ДанныеПоГодам.Вставить("4", ДанныеОтчетности.Свойство("П1110_4"));
		ДанныеПоГодам.Вставить("5", ДанныеОтчетности.Свойство("П1110_5"));
		Если Не (ДанныеПоГодам["1"] Или ДанныеПоГодам["2"] Или ДанныеПоГодам["3"]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВалютаОтчетности <> СтрокаТаблицы.ВалютаОтчетности Тогда
			
			НоваяСтрока = Сведения.АнализОтчетности.Добавить();
			НоваяСтрока.ВалютаОтчетности = СтрокаТаблицы.ВалютаОтчетности;
			НоваяСтрока.Показатели = Новый Структура;
			НоваяСтрока.Показатели.Вставить("КоличествоЛет", 0);
			
			ВалютаОтчетности = СтрокаТаблицы.ВалютаОтчетности;
			
		КонецЕсли;
		
		РасчетПоказателей = ?(СтрокаТаблицы.ТипОтчетности = "2", РасчетПоказателейТипа2, РасчетПоказателейТипа1);
		Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
			Если Не ДанныеГода.Значение 
				Или ЗаполненныеПоказателиПоГодам["Год" + ДанныеГода.Ключ] Тогда
				Продолжить;
			КонецЕсли;
			ЗаполненныеПоказателиПоГодам["Год" + ДанныеГода.Ключ] = Истина;
			НоваяСтрока.Показатели.Вставить(
				"Год_" + ДанныеГода.Ключ,
				ПериодыОтчетности["Год_" + ДанныеГода.Ключ]);
			НоваяСтрока.Показатели.КоличествоЛет = НоваяСтрока.Показатели.КоличествоЛет + 1;
			Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
				ИмяПоказателя = РасчетПоказателя.Ключ + "_" + ДанныеГода.Ключ;
				ЗначениеПоказателя = 0;
				Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение Цикл
					Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
					ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + ДанныеГода.Ключ;
					ЗначениеПоказателя = ЗначениеПоказателя + Множитель * ДанныеОтчетности[ИмяДанных];
				КонецЦикла;
				НоваяСтрока.Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаАнализОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели");      // Структура
	Возврат Результат;

КонецФункции

Функция НовыйДанныеКарточкиАнализаОтчетности()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Описание");
	Результат.Вставить("Показатели");
	Результат.Вставить("Год");
	Результат.Вставить("Продажи",      Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("Прибыль",      Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("ЧистыеАктивы", Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("ПоказателиДляКартинок", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ГосРеестр

Процедура СформироватьРезультатДанныеГосРеестров(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("ДанныеГосРеестров"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	ПараметрыВывода.Вставить("ИмяДокумента",       "РезультатДанныеГосРеестров");
	
	ОбластьШапка = ?(ДанныеОтчета.ЭтоЮридическоеЛицо, 
		ПараметрыВывода.ОбластиМакета.ШапкаЮридическоеЛицо, 
		ПараметрыВывода.ОбластиМакета.ШапкаПредприниматель);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ВывестиРазделНаименование(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделРегистрация(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделРеквизиты(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделВидыДеятельности(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделЛицензии(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделЮридическийАдрес(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделРуководители(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделУчрежденныеФирмы(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделУставныйКапитал(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделУстав(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделУчредители(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделПодразделения(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	ВывестиРазделИзмененияВРеестре(
		ТабличныйДокумент,
		Сведения,
		ПараметрыВывода);
	
	ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатДанныеГосРеестров", "ИмяДокумента");
	Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеПроверкиКонтрагента.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатДанныеГосРеестров", ТабличныйДокумент);
	ДанныеПроверкиКонтрагента.Вставить("ИмяФайлаДанныеГосРеестров",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 - данные реестра'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура ВывестиРазделНаименование(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	ОбластиМакета.Наименование.Параметры.НаименованиеСокращенное = ИнформацияОСвязях.НаименованиеСокращенное;
	Если ИнформацияОСвязях.НаименованиеСокращенное <> ИнформацияОСвязях.НаименованиеПолное Тогда
		ОбластиМакета.Наименование.Параметры.НаименованиеПолное = ИнформацияОСвязях.НаименованиеПолное;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластиМакета.Наименование);
	
	Если ПараметрыВывода.ЭтоЮридическоеЛицо
		И Не ПустаяСтрока(ИнформацияОСвязях.НаименованиеСокращенноеНаАнглийском) Тогда
		
		ОбластиМакета.НаименованиеНаАнглийском.Параметры.НаименованиеСокращенноеНаАнглийском
			= ИнформацияОСвязях.НаименованиеСокращенноеНаАнглийском;
			
		Если ИнформацияОСвязях.НаименованиеСокращенноеНаАнглийском
			<> ИнформацияОСвязях.НаименованиеПолноеНаАнглийском Тогда
			
			ОбластиМакета.НаименованиеНаАнглийском.Параметры.НаименованиеПолноеНаАнглийском
				= ИнформацияОСвязях.НаименованиеПолноеНаАнглийском;
				
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.НаименованиеНаАнглийском);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);

КонецПроцедуры

Процедура ВывестиРазделРегистрация(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	ОбластиМакета.Регистрация.Параметры.ДатаРегистрации = Формат(ИнформацияОСвязях.ДатаРегистрации, "ДЛФ=D");
	ТабличныйДокумент.Вывести(ОбластиМакета.Регистрация);
	
	Если ЭтоЮридическоеЛицо
		И ЗначениеЗаполнено(ИнформацияОСвязях.ДатаПрекращенияДеятельности) Тогда
		
		ОбластиМакета.ПрекращениеДеятельности.Параметры.ДатаПрекращенияДеятельности
			= Формат(ИнформацияОСвязях.ДатаПрекращенияДеятельности, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластиМакета.ПрекращениеДеятельности);
		
	КонецЕсли;
	
	// Статус по ЕГРЮЛ
	Если ИнформацияОСвязях.Статус.Код <> Неопределено Тогда
	
		Если ИнформацияОСвязях.Статус.Код = "001" Тогда
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Действующая организация (по данным ЕГРЮЛ)'");
			Иначе
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Действующий ИП (по данным ЕГРИП)'");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.ДействующаяОрганизация);
		Иначе
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРЮЛ)'"),
						ИнформацияОСвязях.Статус.Наименование);
			Иначе
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРИП)'"),
						ИнформацияОСвязях.Статус.Наименование);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.НедействующаяОрганизация);
		КонецЕсли;
	
	КонецЕсли;
	
	// Статус по ЕГРН
	Если ЗначениеЗаполнено(ИнформацияОСвязях.СостояниеПоДаннымЕГРН) Тогда
	
		Если ИнформацияОСвязях.СостояниеПоДаннымЕГРН =
			Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Организация есть в базе ЕГРН'");
			Иначе
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='ИП есть в базе ЕГРН'");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.ДействующаяОрганизация);
		Иначе
			Если НЕ ЭтоЮридическоеЛицо
				И ИнформацияОСвязях.СостояниеПоДаннымЕГРН =
					Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП Тогда
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					НСтр("ru='Не действует (по данным ЕГРН)'");
			Иначе
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРН)'"),
						ИнформацияОСвязях.СостояниеПоДаннымЕГРН);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.НедействующаяОрганизация);
		КонецЕсли;
	
	КонецЕсли;
	
	// Регистрация в ФНС, ПФР, ФСС
	Если ИнформацияОСвязях.РегистрацияВНалоговомОргане <> Неопределено 
		ИЛИ ИнформацияОСвязях.РегистрацияВПенсионномФонде <> Неопределено
		ИЛИ ИнформацияОСвязях.РегистрацияВФСС <> Неопределено Тогда
		
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, "Регистрация", 0);
		
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "Регистрация";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Если ИнформацияОСвязях.РегистрацияВНалоговомОргане <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВНалоговомОргане.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВНалоговомОргане.Наименование;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Если ИнформацияОСвязях.РегистрацияВПенсионномФонде <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВПенсионномФонде.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				РегистрационныйНомер = ИнформацияОСвязях.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.РегистрационныйНомер = РегистрационныйНомер;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Если ИнформацияОСвязях.РегистрацияВФСС <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВФСС.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВФСС.НаименованиеОрганаФСС;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				РегистрационныйНомер = ИнформацияОСвязях.РегистрацияВФСС.РегистрационныйНомерФСС;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.РегистрационныйНомер = РегистрационныйНомер;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "Регистрация");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);

КонецПроцедуры

Процедура ВывестиРазделРеквизиты(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		ОбластиМакета.РеквизитыЮридическоеЛицо.Параметры.Заполнить(ИнформацияОСвязях);
		ТабличныйДокумент.Вывести(ОбластиМакета.РеквизитыЮридическоеЛицо);
	Иначе
		ОбластиМакета.РеквизитыПредприниматель.Параметры.Заполнить(ИнформацияОСвязях);
		ТабличныйДокумент.Вывести(ОбластиМакета.РеквизитыПредприниматель);
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделВидыДеятельности(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	КоличествоВидовДеятельности = ИнформацияОСвязях.ВидыДеятельности.Количество();
	Если КоличествоВидовДеятельности = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	// Вид деятельности 1
	СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[0];
	ОбластиМакета.ВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
	ТабличныйДокумент.Вывести(ОбластиМакета.ВидыДеятельности);
	
	// Еще виды деятельности
	
	Если КоличествоВидовДеятельности = 2 Тогда
		
		// Вид деятельности 2
		СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[1];
		ОбластиМакета.ЕщеВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеВидыДеятельности);
		
	ИначеЕсли КоличествоВидовДеятельности > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"ВидыДеятельности", КоличествоВидовДеятельности);
		
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "ВидыДеятельности";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоВидовДеятельности Цикл
			// Виды деятельности 2 - N
			СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[НомерСтроки - 1];
			ОбластиМакета.ЕщеВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеВидыДеятельности);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "ВидыДеятельности");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделЛицензии(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	КоличествоЛицензий = ИнформацияОСвязях.Лицензии.Количество();
	Если КоличествоЛицензий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	// Лицензия 1
	СтрокаЛицензии  = ИнформацияОСвязях.Лицензии[0];
	ОбластиМакета.Лицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
	ТабличныйДокумент.Вывести(ОбластиМакета.Лицензии);
	Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
		ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
	КонецЕсли;
	
	// Еще лицензии
	Если КоличествоЛицензий = 2 Тогда
		
		// Лицензия 2
		СтрокаЛицензии = ИнформацияОСвязях.Лицензии[1];
		ОбластиМакета.ЕщеЛицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеЛицензии);
		Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
			ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
		КонецЕсли;
		
	ИначеЕсли КоличествоЛицензий > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"Лицензии", КоличествоЛицензий);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "Лицензии";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоЛицензий Цикл
			// Лицензии 2 - N
			СтрокаЛицензии = ИнформацияОСвязях.Лицензии[НомерСтроки - 1];
			ОбластиМакета.ЕщеЛицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеЛицензии);
			Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
				ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
				ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
			КонецЕсли;
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "Лицензии");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделЮридическийАдрес(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
			
	ОбластиМакета.ЮридическийАдрес.Параметры.ЮридическийАдрес = ИнформацияОСвязях.ЮридическийАдрес.Представление;
	ТабличныйДокумент.Вывести(ОбластиМакета.ЮридическийАдрес);
	
	// Еще организации, зарегистрированные по этому юридическому адресу
	
	КоличествоОрганизаций = ИнформацияОСвязях.ОрганизацииПоАдресу.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		
		// Сколько всего
		ИнформацияОСвязях.ОрганизацииПоАдресу.Сортировать("НаименованиеОрганизации");
		СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По этому адресу %1 еще %2:'"),
			?(КоличествоОрганизаций % 10 = 1 И НЕ КоличествоОрганизаций % 100 = 11, 
				НСтр("ru='зарегистрирована'"),
				НСтр("ru='зарегистрированы'")),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организациях;%1 организация;%1 организации;%1 организации;%1 организаций;%1 организаций'"),
					КоличествоОрганизаций));
		ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
		ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
		
		// Организация 1
		ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
			ИнформацияОСвязях.ОрганизацииПоАдресу[0]);
		
		Если КоличествоОрганизаций = 2 Тогда
			
			// Организация 2
			ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				ИнформацияОСвязях.ОрганизацииПоАдресу[1]);
			
		ИначеЕсли КоличествоОрганизаций > 2 Тогда
			
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
				"ОрганизацииПоАдресу", КоличествоОрганизаций);
		
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "ОрганизацииПоАдресу";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
				// Организации 2 - N
				ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					ИнформацияОСвязях.ОрганизацииПоАдресу[НомерСтроки - 1]);
			КонецЦикла;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "ОрганизацииПоАдресу");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделУставныйКапитал(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо
		И ИнформацияОСвязях.УставныйКапитал > 0 Тогда
		
		ОбластиМакета.УставныйКапитал.Параметры.УставныйКапитал = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 руб.'"),
			Формат(ИнформацияОСвязях.УставныйКапитал, "ЧДЦ="));
		ТабличныйДокумент.Вывести(ОбластиМакета.УставныйКапитал);
		
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделУстав(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо
		И Не ПустаяСтрока(ИнформацияОСвязях.НомерТиповогоУстава) Тогда
		
		ОбластиМакета.Устав.Параметры.ТиповойУстав = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Типовой устав № %1'"),
			ИнформацияОСвязях.НомерТиповогоУстава);
		ТабличныйДокумент.Вывести(ОбластиМакета.Устав);
		
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРуководители(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если ИнформацияОСвязях.ДанныеРуководителей.Руководители.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если ИнформацияОСвязях.ОрганизацииГдеРуководитель.Количество() = 0
			И ИнформацияОСвязях.ОрганизацииГдеУчредитель.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		ДанныеРуководителей = ИнформацияОСвязях.ДанныеРуководителей.Руководители;
	Иначе
		ДанныеРуководителей = Новый Массив;
		ДанныеРуководителей.Добавить(ИнформацияОСвязях);
	КонецЕсли;
	
	ВГраница = ДанныеРуководителей.Количество() - 1;
	Для Итератор = 0 По ВГраница Цикл
		
		ТекущийРуководитель = ДанныеРуководителей[Итератор];
		
		Если ЭтоЮридическоеЛицо Тогда
			Руководитель = ТекущийРуководитель.Представление;
			ДолжностьРуководителя = ТекущийРуководитель.Должность;
			Если ЗначениеЗаполнено(ТекущийРуководитель.ДатаЗаписи) Тогда
				ДолжностьРуководителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 с %2'"),
					ДолжностьРуководителя,
					Формат(ТекущийРуководитель.ДатаЗаписи, "ДЛФ=D"));
			КонецЕсли;
			ОбластьРуководитель = ?(Итератор = 0, ОбластиМакета.РуководительШапка, ОбластиМакета.РуководительСтрока);
			ОбластьРуководитель.Параметры.Руководитель = Руководитель;
			ТабличныйДокумент.Вывести(ОбластьРуководитель);
			ОбластиМакета.РуководительДолжность.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
			ТабличныйДокумент.Вывести(ОбластиМакета.РуководительДолжность);
		Иначе
			ОбластиМакета.Предприниматель.Параметры.Предприниматель = ТекущийРуководитель.Наименование;
			ТабличныйДокумент.Вывести(ОбластиМакета.Предприниматель);
		КонецЕсли;
		
		// Организации, где еще этот руководитель (предприниматель) является руководителем
		КоличествоОрганизаций = ТекущийРуководитель.ОрганизацииГдеРуководитель.Количество();
		ЯвляетсяРуководителем = ЯвляетсяРуководителем(ТекущийРуководитель, ИнформацияОСвязях);
		Если ЯвляетсяРуководителем Тогда
			КоличествоОрганизаций = КоличествоОрганизаций - 1;
		КонецЕсли;
		
		Если КоличествоОрганизаций > 0 Тогда
			
			ВыводитьЕще = ЭтоЮридическоеЛицо И ЯвляетсяРуководителем;
			ДругиеОрганизацииГдеРуководитель = ТекущийРуководитель.ОрганизацииГдеРуководитель.Скопировать();
			Если ВыводитьЕще Тогда
				ДругиеОрганизацииГдеРуководитель.Удалить(
					ДругиеОрганизацииГдеРуководитель.Найти(ИнформацияОСвязях.ИНН, "ИНН"));
				ШаблонСтроки = НСтр("ru='Является руководителем еще в %1%2:'");
			Иначе
				ШаблонСтроки = НСтр("ru='Является руководителем в %1%2:'");
			КонецЕсли;
			ДругиеОрганизацииГдеРуководитель.Сортировать("КодСтатуса");
			
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(ТекущийРуководитель.ОрганизацииГдеРуководительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбОрганизации(
				ТабличныйДокумент,
				ОбластиМакета,
				"ЕщеОрганизации",
				ДругиеОрганизацииГдеРуководитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбОрганизации(
					ТабличныйДокумент,
					ОбластиМакета,
					"ЕщеОрганизации", 
					ДругиеОрганизацииГдеРуководитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				ИмяОбластиРасшифровки = "ОрганизацииГдеРуководитель" + Формат(Итератор, "ЧГ=");
				
				// Свернуто
				ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки, КоличествоОрганизаций);
				
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбОрганизации(
						ТабличныйДокумент,
						ОбластиМакета,
						"ЕщеОрганизации", 
						ДругиеОрганизацииГдеРуководитель[НомерСтроки - 1]);
				КонецЦикла;
				Расшифровка = Новый Структура(
					"Действие,ИмяДокумента,ИмяОбласти",
					"Свернуть",
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Организации, где еще этот руководитель (предприниматель) является учредителем
		КоличествоОрганизаций = ТекущийРуководитель.ОрганизацииГдеУчредитель.Количество();
		ЯвляетсяУчредителем = ЯвляетсяУчредителем(ТекущийРуководитель, ИнформацияОСвязях);
		Если ЯвляетсяУчредителем Тогда
			КоличествоОрганизаций = КоличествоОрганизаций - 1;
		КонецЕсли;
		Если КоличествоОрганизаций > 0 Тогда
			
			ВыводитьЕще = ЭтоЮридическоеЛицо И ЯвляетсяУчредителем;
			ДругиеОрганизацииГдеУчредитель = ТекущийРуководитель.ОрганизацииГдеУчредитель.Скопировать();
			Если ВыводитьЕще Тогда
				ДругиеОрганизацииГдеУчредитель.Удалить(
					ДругиеОрганизацииГдеУчредитель.Найти(ИнформацияОСвязях.ИНН, "ИНН"));
				ШаблонСтроки = НСтр("ru='Является учредителем еще в %1%2:'");
			Иначе
				ШаблонСтроки = НСтр("ru='Является учредителем в %1%2:'");
			КонецЕсли;
			ДругиеОрганизацииГдеУчредитель.Сортировать("КодСтатуса");
			
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организаций;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(ТекущийРуководитель.ОрганизацииГдеУчредительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбУчредителе(
				ТабличныйДокумент,
				ОбластиМакета,
				"ЕщеОрганизации", 
				ДругиеОрганизацииГдеУчредитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбУчредителе(
					ТабличныйДокумент,
					ОбластиМакета,
					"ЕщеОрганизации", 
					ДругиеОрганизацииГдеУчредитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				ИмяОбластиРасшифровки = "ОрганизацииГдеУчредитель" + Формат(Итератор, "ЧГ=");
				
				// Свернуто
				ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
					ИмяОбластиРасшифровки, КоличествоОрганизаций);
				
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбУчредителе(
						ТабличныйДокумент,
						ОбластиМакета,
						"ЕщеОрганизации", 
						ДругиеОрганизацииГдеУчредитель[НомерСтроки - 1]);
				КонецЦикла;
				Расшифровка = Новый Структура(
					"Действие,ИмяДокумента,ИмяОбласти",
					"Свернуть",
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЯвляетсяРуководителем(ТекущийРуководитель, ИнформацияОСвязях)
	
	Возврат ТекущийРуководитель.ОрганизацииГдеРуководитель.Найти(ИнформацияОСвязях.ИНН, "ИНН") <> Неопределено;
	
КонецФункции

Функция ЯвляетсяУчредителем(ТекущийРуководитель, ИнформацияОСвязях)
	
	Возврат ТекущийРуководитель.ОрганизацииГдеУчредитель.Найти(ИнформацияОСвязях.ИНН, "ИНН") <> Неопределено;
	
КонецФункции

Процедура ВывестиРазделУчрежденныеФирмы(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОрганизаций = ИнформацияОСвязях.УчрежденныеФирмы.Количество();
	Если КоличествоОрганизаций = 0 Тогда
		Возврат;
	КонецЕсли;
			
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	ИнформацияОСвязях.УчрежденныеФирмы.Сортировать("НаименованиеОрганизации");
	
	// Организация 1
	ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "УчрежденныеФирмы", 
		ИнформацияОСвязях.УчрежденныеФирмы[0]);
	
	Если КоличествоОрганизаций = 2 Тогда
		
		// Организация 2
		ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеУчрежденныеФирмы", 
			ИнформацияОСвязях.УчрежденныеФирмы[1]);
		
	ИначеЕсли КоличествоОрганизаций > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"УчрежденныеФирмы", КоличествоОрганизаций);
		
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "УчрежденныеФирмы";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
			// Организации 2 - N
			ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеУчрежденныеФирмы", 
				ИнформацияОСвязях.УчрежденныеФирмы[НомерСтроки - 1]);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "УчрежденныеФирмы");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделУчредители(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если Не ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	Если ИнформацияОСвязях.ДанныеУчредителей.СкрытыеДанные Тогда
		ОбластиМакета.УчредителиСкрытыеДанные.Параметры.ПредставлениеСкрытыхДанных
			= ИнформацияОСвязях.ДанныеУчредителей.ПредставлениеСкрытыхДанных;
		ТабличныйДокумент.Вывести(ОбластиМакета.УчредителиСкрытыеДанные);
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
		Возврат;
	КонецЕсли;
	
	КоличествоУчредителей = ИнформацияОСвязях.ДанныеУчредителей.Учредители.Количество();
	Если КоличествоУчредителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерУчредителя = 1 По КоличествоУчредителей Цикл
		
		// Учредитель
		ПрефиксОбластиРасшифровки = "Учредитель" + Формат(НомерУчредителя, "ЧГ=");
		
		СтрокаУчредителя = ИнформацияОСвязях.ДанныеУчредителей.Учредители[НомерУчредителя - 1];
		Если НомерУчредителя > 1 Тогда
			ТабличныйДокумент.Вывести(ОбластиМакета.РазделительСтрокСписка);
		КонецЕсли;
		ВывестиСтрокуОбУчредителе(
			ТабличныйДокумент,
			ОбластиМакета,
			?(НомерУчредителя = 1,
				"Учредители",
				"ЕщеУчредители"),
			СтрокаУчредителя);
		
		// Организации, где еще этот учредитель является руководителем
		КоличествоОрганизаций = СтрокаУчредителя.ОрганизацииГдеРуководитель.Количество();
		ЯвляетсяРуководителем =
			(СтрокаУчредителя.ОрганизацииГдеРуководитель.Найти(ИнформацияОСвязях.ИНН, "ИНН") <> Неопределено);
		Если ЯвляетсяРуководителем Тогда
			КоличествоОрганизаций = КоличествоОрганизаций - 1;
		КонецЕсли;
		Если КоличествоОрганизаций > 0 Тогда
			
			ВыводитьЕще = ЯвляетсяРуководителем;
			ДругиеОрганизацииГдеРуководитель = СтрокаУчредителя.ОрганизацииГдеРуководитель.Скопировать();
			Если ВыводитьЕще Тогда
				ДругиеОрганизацииГдеРуководитель.Удалить(
					ДругиеОрганизацииГдеРуководитель.Найти(ИнформацияОСвязях.ИНН, "ИНН"));
				ШаблонСтроки = НСтр("ru='Является руководителем еще в %1%2:'");
			Иначе
				ШаблонСтроки = НСтр("ru='Является руководителем в %1%2:'");
			КонецЕсли;
			
			ДругиеОрганизацииГдеРуководитель.Сортировать("КодСтатуса");
			ИмяОбластиРасшифровки = ПрефиксОбластиРасшифровки + "ОрганизацииГдеРуководитель";
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(СтрокаУчредителя.ОрганизацииГдеРуководительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбОрганизации(
				ТабличныйДокумент,
				ОбластиМакета,
				"ЕщеОрганизации",
				ДругиеОрганизацииГдеРуководитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбОрганизации(
					ТабличныйДокумент,
					ОбластиМакета,
					"ЕщеОрганизации",
					ДругиеОрганизацииГдеРуководитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				// Свернуто
				ВывестиСтрокуЕще(
					ТабличныйДокумент,
					ОбластиМакета,
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки, КоличествоОрганизаций);
			
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбОрганизации(
						ТабличныйДокумент,
						ОбластиМакета,
						"ЕщеОрганизации",
						ДругиеОрганизацииГдеРуководитель[НомерСтроки - 1]);
				КонецЦикла;
				Расшифровка = Новый Структура(
					"Действие,ИмяДокумента,ИмяОбласти",
					"Свернуть",
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Организации, где еще этот учредитель является учредителем
		КоличествоОрганизаций = СтрокаУчредителя.ОрганизацииГдеУчредитель.Количество();
		ЯвляетсяУчредителем =
			(СтрокаУчредителя.ОрганизацииГдеУчредитель.Найти(ИнформацияОСвязях.ИНН, "ИНН") <> Неопределено);
		Если ЯвляетсяУчредителем Тогда
			КоличествоОрганизаций = КоличествоОрганизаций - 1;
		КонецЕсли;
		Если КоличествоОрганизаций > 0 Тогда
			
			ВыводитьЕще = ЯвляетсяУчредителем;
			ДругиеОрганизацииГдеУчредитель = СтрокаУчредителя.ОрганизацииГдеУчредитель.Скопировать();
			Если ВыводитьЕще Тогда
				ДругиеОрганизацииГдеУчредитель.Удалить(
					ДругиеОрганизацииГдеУчредитель.Найти(ИнформацияОСвязях.ИНН, "ИНН"));
				ШаблонСтроки = НСтр("ru='Является учредителем еще в %1%2:'");
			Иначе
				ШаблонСтроки = НСтр("ru='Является учредителем в %1%2:'");
			КонецЕсли;
			ДругиеОрганизацииГдеУчредитель.Сортировать("КодСтатуса");
			ИмяОбластиРасшифровки = ПрефиксОбластиРасшифровки + "ОрганизацииГдеУчредитель";
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организаций;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(СтрокаУчредителя.ОрганизацииГдеУчредительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбУчредителе(
				ТабличныйДокумент,
				ОбластиМакета,
				"ЕщеОрганизации",
				ДругиеОрганизацииГдеУчредитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбУчредителе(
					ТабличныйДокумент,
					ОбластиМакета,
					"ЕщеОрганизации",
					ДругиеОрганизацииГдеУчредитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				// Свернуто
				ВывестиСтрокуЕще(
					ТабличныйДокумент,
					ОбластиМакета,
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки,
					КоличествоОрганизаций);
			
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбУчредителе(
						ТабличныйДокумент,
						ОбластиМакета,
						"ЕщеОрганизации",
						ДругиеОрганизацииГдеУчредитель[НомерСтроки - 1]);
				КонецЦикла;
				Расшифровка = Новый Структура(
					"Действие,ИмяДокумента,ИмяОбласти",
					"Свернуть",
					ПараметрыВывода.ИмяДокумента,
					ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделПодразделения(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПодразделений = ИнформацияОСвязях.Подразделения.Количество();
	Если КоличествоПодразделений = 0 Тогда
		Возврат;
	КонецЕсли;
					
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
			
	// Подразделение 1
	СтрокаПодразделения = ИнформацияОСвязях.Подразделения[0];
	ОбластиМакета.Подразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
	ТабличныйДокумент.Вывести(ОбластиМакета.Подразделения);
	
	// Еще подразделения
	
	Если КоличествоПодразделений = 2 Тогда
		
		// Подразделение 2
		СтрокаПодразделения = ИнформацияОСвязях.Подразделения[1];
		ОбластиМакета.ЕщеПодразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеПодразделения);
		
	ИначеЕсли КоличествоПодразделений > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"Подразделения", КоличествоПодразделений);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "Подразделения";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоПодразделений Цикл
			// Подразделения 2 - N
			СтрокаПодразделения = ИнформацияОСвязях.Подразделения[НомерСтроки - 1];
			ОбластиМакета.ЕщеПодразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеПодразделения);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "Подразделения");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделИзмененияВРеестре(
		ТабличныйДокумент,
		ИнформацияОСвязях,
		ПараметрыВывода)

	КоличествоИзменений = ИнформацияОСвязях.ИзмененияВРеестре.Количество();
	Если КоличествоИзменений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	// Изменение 1
	СтрокаИзменения  = ИнформацияОСвязях.ИзмененияВРеестре[0];
	ОбластьИзменения = ?(ЭтоЮридическоеЛицо, 
		ОбластиМакета.ИзмененияВРеестре, 
		ОбластиМакета.ИзмененияВРеестреПредприниматель);
	ОбластьИзменения.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
	ОбластьИзменения.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
	ТабличныйДокумент.Вывести(ОбластьИзменения);
	Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
		ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
		ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
	КонецЕсли;
	
	// Еще изменения
	
	Если КоличествоИзменений = 2 Тогда
		
		// Изменение 2
		СтрокаИзменения = ИнформацияОСвязях.ИзмененияВРеестре[1];
		ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
		ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеИзмененияВРеестре);
		Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
			ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
			ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
		КонецЕсли;
		
	ИначеЕсли КоличествоИзменений > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"ИзмененияВРеестре", КоличествоИзменений);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "ИзмененияВРеестре";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоИзменений Цикл
			// Изменения 2 - N
			СтрокаИзменения = ИнформацияОСвязях.ИзмененияВРеестре[НомерСтроки - 1];
			ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
			ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеИзмененияВРеестре);
			Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
				ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
				ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
			КонецЕсли;
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "ИзмененияВРеестре");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиСтрокуОбОрганизации(
		ТабличныйДокумент,
		ОбластиМакета,
		ИмяОбласти,
		СтрокаДанных)
	
	СтруктураДанных = НовыеРеквизитыОрганизации();
	// Наименование
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДанных);
	Если ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
		ОбластиМакета[ИмяОбласти].Параметры.Заполнить(СтруктураДанных);
		Расшифровка = Новый Структура("Действие,ИНН", "Открыть", СтруктураДанных.ИНН);
		ОбластиМакета[ИмяОбласти].Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти]);
	Иначе
		ОбластиМакета[ИмяОбласти + "БезРасшифровки"].Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти + "БезРасшифровки"]);
	КонецЕсли;
	// Статус для недействующих
	Если ЗначениеЗаполнено(СтруктураДанных.КодСтатуса) И СтруктураДанных.КодСтатуса <> "001" Тогда
		ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = СтруктураДанных.НаименованиеСтатуса;
		ТабличныйДокумент.Вывести(ОбластиМакета.СтатусОрганизации);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиСтрокуОбУчредителе(
		ТабличныйДокумент,
		ОбластиМакета,
		ИмяОбласти,
		СтрокаДанных)
	
	СтруктураДанных = НовыеРеквизитыУчредителя();
	// Наименование, процент и сумма доли
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДанных);
	Если ЗначениеЗаполнено(СтруктураДанных.ПроцентКапитала) Тогда
		СтруктураДанных.ПроцентКапитала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %'"),
			СтруктураДанных.ПроцентКапитала);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанных.СуммаКапитала) Тогда
		СтруктураДанных.СуммаКапитала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 руб.'"),
			СтруктураДанных.СуммаКапитала);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
		ОбластиМакета[ИмяОбласти].Параметры.Заполнить(СтруктураДанных);
		Расшифровка = Новый Структура("Действие,ИНН", "Открыть", СтруктураДанных.ИНН);
		ОбластиМакета[ИмяОбласти].Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти]);
	Иначе
		ОбластиМакета[ИмяОбласти + "БезРасшифровки"].Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти + "БезРасшифровки"]);
	КонецЕсли;
	// Статус для недействующих
	Если ЗначениеЗаполнено(СтруктураДанных.КодСтатуса) И СтруктураДанных.КодСтатуса <> "001" Тогда
		ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = СтруктураДанных.НаименованиеСтатуса;
		ТабличныйДокумент.Вывести(ОбластиМакета.СтатусОрганизации);
	КонецЕсли;

КонецПроцедуры

Функция НовыеРеквизитыОрганизации()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеОрганизации");
	Результат.Вставить("ИНН");
	Результат.Вставить("КодСтатуса");
	Результат.Вставить("НаименованиеСтатуса");
	Возврат Результат;

КонецФункции 

Функция НовыеРеквизитыУчредителя()
	
	Результат = Новый Структура;
	Результат.Вставить("Учредитель");
	Результат.Вставить("НаименованиеОрганизации");
	Результат.Вставить("ИНН");
	Результат.Вставить("КодСтатуса");
	Результат.Вставить("НаименованиеСтатуса");
	Результат.Вставить("ПроцентКапитала");
	Результат.Вставить("СуммаКапитала");
	Возврат Результат;

КонецФункции 

Процедура ПолучитьСостояниеКонтрагентаПоДаннымЕГРН(Сведения, Контрагент)

	Сведения.Вставить("СостояниеПоДаннымЕГРН");
	
	ЭтоЮридическоеЛицо = (СтрДлина(Сведения.ИНН) = 10);
	КПП = ?(ЭтоЮридическоеЛицо, Сведения.КПП, "");
	
	// Определение пустой ссылки справочника контрагентов.
	ПустаяСсылкаКонтрагента = Неопределено;
	Если Контрагент <> Неопределено Тогда
		ПустаяСсылкаКонтрагента = Справочники[Контрагент.Метаданные().Имя].ПустаяСсылка();
	Иначе
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
			ТекстОшибки = НСтр(
				"ru = 'Не внедрена подсистема ""Работа с контрагентами""'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		ОписаниеСправочников = МодульРаботаСКонтрагентами.СвойстваСправочниковКонтрагентов();
		Если ОписаниеСправочников.Количество() = 1 Тогда
			ПустаяСсылкаКонтрагента = Справочники[ОписаниеСправочников[0].Имя].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИНН",        Сведения.ИНН);
	ДополнительныеПараметры.Вставить("КПП",        КПП);
	ДополнительныеПараметры.Вставить("Дата",       ТекущаяДатаСеанса());
	ДополнительныеПараметры.Вставить("Ссылка",     ПустаяСсылкаКонтрагента);
	ДополнительныеПараметры.Вставить("Контрагент", ПустаяСсылкаКонтрагента);
	ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПроверкаКонтрагентов.ПроверитьКонтрагента(ДополнительныеПараметры, АдресХранилища);
	
	Состояние = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Сведения.СостояниеПоДаннымЕГРН = Состояние;
	
КонецПроцедуры

#КонецОбласти

#Область Налоги

Процедура ВывестиНалоги(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента)
	
	ОткрытыеДанные = Сведения.ОткрытыеГосударственныеДанныеФНС;
	
	КарточкаНалоги = НовыйДанныеКарточкиНалоги();
	ДанныеПроверкиКонтрагента.Вставить("КарточкаНалоги", КарточкаНалоги);
	
	Если ОткрытыеДанные.Количество() = 0 Тогда
		ТабличныйДокумент = Неопределено;
		КарточкаНалоги.Описание = НСтр("ru='Нет сведений о налогах'");
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластиМакета     = ВсеОбластиМакета("Налоги");
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	ОткрытыеДанные.Сортировать("Год");
	КоличествоВсегоЛет = ОткрытыеДанные.Количество();
	КоличествоЛет = Мин(КоличествоВсегоЛет, 3);
	Индекс = КоличествоВсегоЛет - КоличествоЛет;
	СтрокиОткрытыхДанных = Новый Массив;
	Для К = Индекс По КоличествоВсегоЛет - 1 Цикл
		СтрокиОткрытыхДанных.Добавить(ОткрытыеДанные[К]);
		ОбластиМакета.ГодыШапка.Параметры["Год" + (К - Индекс + 1)] = Формат(ОткрытыеДанные[К].Год, "ЧГ=0");
	КонецЦикла;
	
	ЕстьНД = Ложь;
	
	Если КоличествоЛет = 2 Тогда
		
		ОбластьГод = ОбластиМакета.ГодыШапка.НайтиТекст("Год3");
		ОбластьГодОбъединенная = ОбластиМакета.ГодыШапка.Область(ОбластьГод.Верх, ОбластьГод.Лево);
		ОчиститьПодобласть(ОбластиМакета.НалогШапка, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.НалогНазваниеНалога, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.СистемаНалогообложения, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.УчастиеВКГН, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.Замыкатель, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОбластьГод.Очистить(Истина, Истина, Истина);
		
	ИначеЕсли КоличествоЛет = 1 Тогда
		// Временное решение, пока есть данные только за 2 года
		// Когда появятся за 3 года, отрабатывать не будет
		ОбластьГод2 = ОбластиМакета.ГодыШапка.НайтиТекст("Год2");
		ОбластьГод3 = ОбластиМакета.ГодыШапка.НайтиТекст("Год3");
		ОбластьГодОбъединенная = ОбластиМакета.ГодыШапка.Область(ОбластьГод2.Верх, ОбластьГод2.Лево,,ОбластьГод3.Право + 1);
		ОчиститьПодобласть(ОбластиМакета.НалогШапка, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.НалогНазваниеНалога, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.СистемаНалогообложения, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.УчастиеВКГН, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОчиститьПодобласть(ОбластиМакета.Замыкатель, ОбластьГодОбъединенная.Лево, ОбластьГодОбъединенная.Право);
		ОбластьГодОбъединенная.Очистить(Истина, Истина, Истина);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ГодыШапка);
	
	ВыведенаТаблицаНалогов = ВывестиТаблицуНалогов(
		ТабличныйДокумент,
		ОбластиМакета,
		СтрокиОткрытыхДанных,
		ЕстьНД,
		КарточкаНалоги);
	
	Если Не ВыведенаТаблицаНалогов Тогда
		КарточкаНалоги.Описание = НСтр("ru='Нет сведений о налогах'");
		Возврат;
	КонецЕсли;
	
	ВГраница = СтрокиОткрытыхДанных.ВГраница();
	
	// Система налогообложения
	ЕстьДанныеПоНалогообложению = Ложь;
	Для Итератор = 0 По ВГраница Цикл
		НомерГодаСтрокой = Формат(Итератор + 1, "ЧГ=0");
		ИмяПараметра = "ЗначениеГод" + НомерГодаСтрокой;
		Если СтрокиОткрытыхДанных[Итератор] = Неопределено Тогда
			Значение = Неопределено;
		Иначе
			Значение = ПредставлениеНалогообложенияВГоду(СтрокиОткрытыхДанных[Итератор]);
		КонецЕсли;
		Если Значение = Неопределено Тогда
			ОбластиМакета.СистемаНалогообложения.Параметры[ИмяПараметра] = НСтр("ru = 'н/д'");
			ЕстьНД = Истина;
		Иначе
			ЕстьДанныеПоНалогообложению = Истина;
			ОбластиМакета.СистемаНалогообложения.Параметры[ИмяПараметра] = Значение;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДанныеПоНалогообложению Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.СистемаНалогообложения);
	КонецЕсли;
	
	// Участие в КГН
	ЕстьДанныеУчастиеВКГН = Ложь;
	Для Итератор = 0 По ВГраница Цикл
		НомерГодаСтрокой = Формат(Итератор + 1, "ЧГ=0");
		ИмяПараметра = "ЗначениеГод" + НомерГодаСтрокой;
		Если СтрокиОткрытыхДанных[Итератор] = Неопределено Тогда
			Значение = Неопределено;
		Иначе
			Значение = СтрокиОткрытыхДанных[Итератор].УчастиеВКГН;
		КонецЕсли;
		Если Значение = Неопределено Тогда
			ОбластиМакета.УчастиеВКГН.Параметры[ИмяПараметра] = НСтр("ru = 'н/д'");
			ЕстьНД = Истина;
		Иначе
			ЕстьДанныеУчастиеВКГН = Истина;
			ОбластиМакета.УчастиеВКГН.Параметры[ИмяПараметра] = Значение;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьДанныеУчастиеВКГН Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.УчастиеВКГН);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Замыкатель);
	ТабличныйДокумент.Вывести(ОбластиМакета.Пояснения);
	
	Если ЕстьНД Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.ПоясненияНД);
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатНалоги", ТабличныйДокумент);
	ДанныеПроверкиКонтрагента.Вставить("ИмяФайлаНалоги",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - налоги'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Функция НовыйДанныеКарточкиНалоги()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Описание");
	Результат.Вставить("Год");
	Результат.Вставить("СистемаНалогообложения");
	Результат.Вставить("ОплаченныеНалоги",   Новый Структура("Значение"));
	Результат.Вставить("НалогиНаЗарплату",   Новый Структура("Значение"));
	Результат.Вставить("ПросроченныеНалоги", Новый Структура("Значение"));
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьПодобласть(ОбластьДокумента, Лево, Право)
	
	Подобласть = ОбластьДокумента.Область(1, Лево, ОбластьДокумента.ВысотаТаблицы, Право);
	Подобласть.Очистить(Истина, Истина, Истина);
	ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0, Ложь);
	Подобласть.Обвести(ЛинияНетЛинии, ЛинияНетЛинии, ЛинияНетЛинии, ЛинияНетЛинии);
	
КонецПроцедуры

Функция ВывестиТаблицуНалогов(ТабличныйДокумент, ОбластиМакета,СтрокиОткрытыхДанных, ЕстьНД, КарточкаНалоги)
	
	// Индексирование налогов в годах для быстрого поиска
	НалогиВГодах = Новый Массив;
	ВидыНалогов  = Новый СписокЗначений;
	ДобавленныеВидыНалогов = Новый Соответствие;
	Для Итератор = 0 По СтрокиОткрытыхДанных.ВГраница() Цикл
		
		НалогиВГоду = Новый Соответствие;
		НалогиВГодах.Добавить(НалогиВГоду);
		СтрокаДанных = СтрокиОткрытыхДанных[Итератор];
		Для Каждого СтрокаНалога Из СтрокаДанных.СведенияОНалогах Цикл
			Если ДобавленныеВидыНалогов.Получить(СтрокаНалога.Наименование) = Неопределено Тогда
				ВидыНалогов.Добавить(СтрокаНалога.Сортировка, СтрокаНалога.Наименование);
				ДобавленныеВидыНалогов.Вставить(СтрокаНалога.Наименование, Истина);
			КонецЕсли;
			НалогиВГоду.Вставить(СтрокаНалога.Наименование, СтрокаНалога);
		КонецЦикла;
		
		КарточкаНалоги.ОплаченныеНалоги.Значение   = СуммаУплаченныхНалоговВГоду(СтрокаДанных);
		КарточкаНалоги.НалогиНаЗарплату.Значение   = СуммаНалоговНаЗарплатуВГоду(СтрокаДанных);
		КарточкаНалоги.ПросроченныеНалоги.Значение = ЗадолженностьНалоговВГоду(СтрокаДанных);
		КарточкаНалоги.Год = СтрокаДанных.Год;
		КарточкаНалоги.СистемаНалогообложения = ПредставлениеНалогообложенияВГоду(СтрокаДанных);
		КарточкаНалоги.ЕстьДанные = Истина;
		
	КонецЦикла;
	
	Если ВидыНалогов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыНалогов.СортироватьПоЗначению();
	
	ПоказателиНалогов = Новый СписокЗначений;
	ПоказателиНалогов.Добавить("Уплачено"     , НСтр("ru = 'Оплачено'"));
	ПоказателиНалогов.Добавить("Задолженность", НСтр("ru = 'Задолженность'"));
	ПоказателиНалогов.Добавить("Штраф"        , НСтр("ru = 'Штраф'"));
	ПоказателиНалогов.Добавить("Пени"         , НСтр("ru = 'Пени'"));
	ВыведенаШапка = Ложь;
	
	Для Каждого ЭлементВидыНалогов Из ВидыНалогов Цикл
		
		ВидНалога = ЭлементВидыНалогов.Представление;
		ВыведенаШапкаНалога = Ложь;
		
		ЭтотНалогПоГодам = Новый Массив;
		Для Итератор = 0 По НалогиВГодах.ВГраница() Цикл
			ЭтотНалогПоГодам.Добавить(НалогиВГодах[Итератор].Получить(ВидНалога));
		КонецЦикла;
		
		Для Каждого ЭлементПоказателиНалогов Из ПоказателиНалогов Цикл
			
			ЗначенияПоГодам = Новый Массив;
			ЗаполненВОдномИзГодов = Ложь;
			Для Итератор = 0 По НалогиВГодах.ВГраница() Цикл
				НалогСтрока = ЭтотНалогПоГодам[Итератор];
				Значение = Неопределено;
				Если НалогСтрока <> Неопределено Тогда
					Значение = НалогСтрока[ЭлементПоказателиНалогов.Значение];
				КонецЕсли;
				Если Значение <> Неопределено И Значение <> 0 Тогда
					ЗаполненВОдномИзГодов = Истина;
				КонецЕсли;
				ЗначенияПоГодам.Добавить(Значение);
			КонецЦикла;
			
			Если Не ЗаполненВОдномИзГодов Тогда
				Продолжить;
			КонецЕсли;
			
			// Вывод строки
			Если Не ВыведенаШапка Тогда
				ТабличныйДокумент.Вывести(ОбластиМакета.НалогШапка);
				ВыведенаШапка = Истина;
			КонецЕсли;
			Если Не ВыведенаШапкаНалога Тогда
				ОбластиМакета.НалогНазваниеНалога.Параметры.НазваниеНалога = ВидНалога;
				ТабличныйДокумент.Вывести(ОбластиМакета.НалогНазваниеНалога);
				ВыведенаШапкаНалога = Истина;
			КонецЕсли;
			
			ОбластиМакета.НалогПоказатель.Параметры.НазваниеПоказателяНалога = ЭлементПоказателиНалогов.Представление;
			ВГраница = НалогиВГодах.ВГраница();
			Для Итератор = 0 По НалогиВГодах.ВГраница() Цикл
				Значение = ЗначенияПоГодам[Итератор];
				НомерГодаСтрокой = Формат(Итератор + 1, "ЧГ=0");
				ИмяПараметра = "ЗначениеГод" + НомерГодаСтрокой;
				Если Значение = Неопределено Тогда
					ОбластиМакета.НалогПоказатель.Параметры[ИмяПараметра] = НСтр("ru = 'н/д'");
					ЕстьНД = Истина;
				Иначе
					ОбластиМакета.НалогПоказатель.Параметры[ИмяПараметра] = Значение;
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластиМакета.НалогПоказатель);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВыведенаШапка;
	
КонецФункции

Функция СуммаУплаченныхНалоговВГоду(ОткрытыеДанныеЗаГод)
	
	Если ОткрытыеДанныеЗаГод = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	Для Каждого СтрокаНалоги Из ОткрытыеДанныеЗаГод.СведенияОНалогах Цикл
		Если СтрокаНалоги.Уплачено <> Неопределено Тогда
			Если Результат = Неопределено Тогда
				Результат = 0;
			КонецЕсли;
			Результат = Результат + СтрокаНалоги.Уплачено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СуммаНалоговНаЗарплатуВГоду(ОткрытыеДанныеЗаГод)
	
	Если ОткрытыеДанныеЗаГод = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	Для Каждого СтрокаНалоги Из ОткрытыеДанныеЗаГод.СведенияОНалогах Цикл
		Для Каждого ЗначениеПоиска Из ЗарплатныеВидыНалогов() Цикл
			Если СтрНайти(СтрокаНалоги.Наименование, ЗначениеПоиска) <> 0 Тогда
				Если Результат = Неопределено Тогда
					Результат = 0;
				КонецЕсли;
				Результат = Результат + СтрокаНалоги.Уплачено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗарплатныеВидыНалогов()
	
	Результат = Новый Массив;
	Результат.Добавить(НСтр("ru='страховые взносы'"));
	Результат.Добавить(НСтр("ru='пенсионное страхование'"));
	
	Возврат Результат;
	
КонецФункции

Функция ЗадолженностьНалоговВГоду(ОткрытыеДанныеЗаГод)
	
	Если ОткрытыеДанныеЗаГод = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	Для Каждого СтрокаНалоги Из ОткрытыеДанныеЗаГод.СведенияОНалогах Цикл
		Если СтрокаНалоги.Задолженность <> Неопределено Тогда
			Если Результат = Неопределено Тогда
				Результат = 0;
			КонецЕсли;
			Результат = Результат + СтрокаНалоги.Задолженность;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеНалогообложенияВГоду(ОткрытыеДанныеЗаГод)
	
	Если ОткрытыеДанныеЗаГод = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = "";
	Если ОткрытыеДанныеЗаГод.НалогообложениеЕСХН = Истина Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")
			+ НСтр("ru = 'ЕСХН'");
	КонецЕсли;
	
	Если ОткрытыеДанныеЗаГод.НалогообложениеУСН = Истина Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")
			+ НСтр("ru = 'УСН'");
	КонецЕсли;
	
	Если ОткрытыеДанныеЗаГод.НалогообложениеЕНВД = Истина Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")
			+ НСтр("ru = 'ЕНВД'");
	КонецЕсли;
	
	Если ОткрытыеДанныеЗаГод.НалогообложениеСРП = Истина Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ")
			+ НСтр("ru = 'СРП'");
	КонецЕсли;
	
	Возврат ?(Результат = "", Неопределено, Результат);
	
КонецФункции

#КонецОбласти

#Область ИсторияИзменений

Процедура СформироватьИсторииИзменений(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента)
	
	ИсторияРеквизитов = Сведения.ИсторияРеквизитов;
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатыИсторияИзменений", Новый Структура);
	ДанныеПроверкиКонтрагента.Вставить("ИсторияИзменений", Новый Структура);
	
	Если ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		СформироватьРезультатИсторияНаименования(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента);
		СформироватьРезультатИсторияКПП(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента);
		СформироватьРезультатИсторияАдрес(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента);
		СформироватьРезультатИсторияРуководителя(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента);
	Иначе
		СформироватьРезультатИсторияФИО(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьРезультатИсторияНаименования(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	РезультатИсторияНаименования = Неопределено;
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияНаименования", РезультатИсторияНаименования);
	ДанныеПроверкиКонтрагента.ИсторияИзменений.Вставить(
		"ИсторияНаименования",
		Новый Структура("ЕстьДанные", Ложь));
	
	ИсторияНаименования = Сведения.ИсторияРеквизитов.Наименование;
	Если ИсторияНаименования.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.ИсторияИзменений.ИсторияНаименования.ЕстьДанные = Истина;
	
	РезультатИсторияНаименования = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ИсторияИзмененийЗначений");
	РезультатИсторияНаименования.Вывести(ОбластиМакета.ИсторияИзмененияНаименованияШапка);
	
	Для Каждого ЗначениеИстории Из ИсторияНаименования Цикл
		ОбластиМакета.ИсторияИзмененияНаименованияСтрока.Параметры.Заполнить(ЗначениеИстории);
		РезультатИсторияНаименования.Вывести(ОбластиМакета.ИсторияИзмененияНаименованияСтрока);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияНаименования", РезультатИсторияНаименования);
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("ИмяФайлаИсторияНаименования",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - история наименования'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура СформироватьРезультатИсторияКПП(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	РезультатИсторияКПП = Неопределено;
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияКПП", РезультатИсторияКПП);
	ДанныеПроверкиКонтрагента.ИсторияИзменений.Вставить(
		"ИсторияКПП",
		Новый Структура("ЕстьДанные", Ложь));
	
	ИсторияКПП = Сведения.ИсторияРеквизитов.КПП;
	Если ИсторияКПП.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.ИсторияИзменений.ИсторияКПП.ЕстьДанные = Истина;
	РезультатИсторияКПП = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ИсторияИзмененийЗначений");
	РезультатИсторияКПП.Вывести(ОбластиМакета.ИсторияИзмененияКППШапка);
	
	Для Каждого ЗначениеИстории Из ИсторияКПП Цикл
		ОбластиМакета.ИсторияИзмененияКППСтрока.Параметры.Заполнить(ЗначениеИстории);
		РезультатИсторияКПП.Вывести(ОбластиМакета.ИсторияИзмененияКППСтрока);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияКПП", РезультатИсторияКПП);
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("ИмяФайлаИсторияКПП",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - история КПП'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура СформироватьРезультатИсторияАдрес(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	РезультатИсторияАдрес = Неопределено;
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияАдрес", РезультатИсторияАдрес);
	ДанныеПроверкиКонтрагента.ИсторияИзменений.Вставить(
		"ИсторияАдрес",
		Новый Структура("ЕстьДанные", Ложь));
	
	ИсторияАдрес = Сведения.ИсторияРеквизитов.Адрес;
	Если ИсторияАдрес.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.ИсторияИзменений.ИсторияАдрес.ЕстьДанные = Истина;
	РезультатИсторияАдрес = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ИсторияИзмененийЗначений");
	РезультатИсторияАдрес.Вывести(ОбластиМакета.ИсторияИзмененияАдресШапка);
	
	Для Каждого ЗначениеИстории Из ИсторияАдрес Цикл
		ОбластиМакета.ИсторияИзмененияАдресСтрока.Параметры.Заполнить(ЗначениеИстории);
		РезультатИсторияАдрес.Вывести(ОбластиМакета.ИсторияИзмененияАдресСтрока);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияАдрес", РезультатИсторияАдрес);
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("ИмяФайлаИсторияАдрес",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - история адреса'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура СформироватьРезультатИсторияРуководителя(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	РезультатИсторияРуководителя = Неопределено;
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияРуководителя", РезультатИсторияРуководителя);
	ДанныеПроверкиКонтрагента.ИсторияИзменений.Вставить(
		"ИсторияРуководителя",
		Новый Структура("ЕстьДанные", Ложь));
	
	ИсторияРуководителя = Сведения.ИсторияРеквизитов.РеквизитыДиректора;
	Если ИсторияРуководителя.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.ИсторияИзменений.ИсторияРуководителя.ЕстьДанные = Истина;
	РезультатИсторияРуководителя = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ИсторияИзмененийЗначений");
	РезультатИсторияРуководителя.Вывести(ОбластиМакета.ИсторияИзмененияРуководителяШапка);
	
	Для Каждого ЗначениеИстории Из ИсторияРуководителя Цикл
		ОбластиМакета.ИсторияИзмененияРуководителяСтрока.Параметры.Заполнить(ЗначениеИстории);
		
		РезультатИсторияРуководителя.Вывести(ОбластиМакета.ИсторияИзмененияРуководителяСтрока);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияРуководителя", РезультатИсторияРуководителя);
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("ИмяФайлаИсторияРуководителя",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - история руководителя'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура СформироватьРезультатИсторияФИО(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	РезультатИсторияФИО = Неопределено;
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияФИО", РезультатИсторияФИО);
	ДанныеПроверкиКонтрагента.ИсторияИзменений.Вставить(
		"ИсторияФИО",
		Новый Структура("ЕстьДанные", Ложь));
	
	ИсторияФИО = Сведения.ИсторияРеквизитов.ФИО;
	Если ИсторияФИО.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.ИсторияИзменений.ИсторияФИО.ЕстьДанные = Истина;
	РезультатИсторияФИО = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ИсторияИзмененийЗначений");
	РезультатИсторияФИО.Вывести(ОбластиМакета.ИсторияИзмененияФИОШапка);
	
	Для Каждого ЗначениеИстории Из ИсторияФИО Цикл
		ОбластиМакета.ИсторияИзмененияФИОСтрока.Параметры.Заполнить(ЗначениеИстории);
		РезультатИсторияФИО.Вывести(ОбластиМакета.ИсторияИзмененияФИОСтрока);
	КонецЦикла;
	
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("РезультатИсторияФИО", РезультатИсторияФИО);
	ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений.Вставить("ИмяФайлаИсторияФИО",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - история ФИО'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

#КонецОбласти

Процедура СформироватьВидыДеятельности(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	Сведения.ВидыДеятельности.Сортировать("КодОКВЭД");
	
	КарточкаВидыДеятельности = Новый Структура;
	КарточкаВидыДеятельности.Вставить("ЕстьДанные", Истина);
	КарточкаВидыДеятельности.Вставить("Описание", "");
	КарточкаВидыДеятельности.Вставить("ОсновнойВид");
	КарточкаВидыДеятельности.Вставить("Дополнительные", Новый Массив);
	
	ОсновнойВидДеятельности = Сведения.ВидДеятельности;
	Если Сведения.ВидДеятельности = Неопределено Тогда
		
		Если Сведения.ВидыДеятельности.Количество() = 0 Тогда
			КарточкаВидыДеятельности.Описание   = НСтр("ru='нет данных'");
			КарточкаВидыДеятельности.ЕстьДанные = Ложь;
		Иначе
			ОсновнойВидДеятельности = Сведения.ВидДеятельности[0];
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.Вставить("КарточкаВидыДеятельности", КарточкаВидыДеятельности);
	
	Если Не КарточкаВидыДеятельности.ЕстьДанные Тогда
		ДанныеПроверкиКонтрагента.Вставить("РезультатВидыДеятельности", Неопределено);
		Возврат;
	КонецЕсли;
	
	КарточкаВидыДеятельности.ОсновнойВид = Новый Структура;
	КарточкаВидыДеятельности.ОсновнойВид.Вставить("Код",          ОсновнойВидДеятельности.Код);
	КарточкаВидыДеятельности.ОсновнойВид.Вставить("Наименование", ОсновнойВидДеятельности.Наименование);
	
	Для Каждого ВидДеятельности Из Сведения.ВидыДеятельности Цикл
		Если ВидДеятельности.КодОКВЭД = КарточкаВидыДеятельности.ОсновнойВид.Код Тогда
			Продолжить;
		КонецЕсли;
		ВидДеятельностиЗначение = Новый Структура;
		ВидДеятельностиЗначение.Вставить("Код", ВидДеятельности.КодОКВЭД);
		ВидДеятельностиЗначение.Вставить("Наименование", ВидДеятельности.НаименованиеОКВЭД);
		КарточкаВидыДеятельности.Дополнительные.Добавить(ВидДеятельностиЗначение);
	КонецЦикла;
	
	РезультатВидыДеятельности = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("ВидыДеятельности");
	РезультатВидыДеятельности.Вывести(ОбластиМакета.ВидыДеятельностиШапка);
	
	ОбластиМакета.ОсновнойВидДеятельности.Параметры.Заполнить(Сведения.ВидДеятельности);
	РезультатВидыДеятельности.Вывести(ОбластиМакета.ОсновнойВидДеятельности);
	
	Если КарточкаВидыДеятельности.Дополнительные.Количество() > 0 Тогда 
		РезультатВидыДеятельности.Вывести(ОбластиМакета.ДополнительныеВидыДеятельностиЗаголовок);
		Для Каждого ВидДеятельности Из КарточкаВидыДеятельности.Дополнительные Цикл
			ОбластиМакета.ДополнительныйВидДеятельностиСтрока.Параметры.Заполнить(ВидДеятельности);
			РезультатВидыДеятельности.Вывести(ОбластиМакета.ДополнительныйВидДеятельностиСтрока);
		КонецЦикла;
	КонецЕсли;
	
	РезультатВидыДеятельности.Вывести(ОбластиМакета.ВидыДеятельностиПодвал);
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатВидыДеятельности", РезультатВидыДеятельности);
	ДанныеПроверкиКонтрагента.Вставить("ИмяФайлаВидыДеятельности",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - виды деятельности'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Процедура СформироватьСвязанныеОрганизации(Сведения, ДанныеОтчета, ДанныеПроверкиКонтрагента)
	
	РезультатСвязанныеОрганизации = Неопределено;
	ДанныеПроверкиКонтрагента.Вставить("РезультатСвязанныеОрганизации", РезультатСвязанныеОрганизации);
	
	СвязанныеОрганизации = Новый Массив;
	ДобавленныеОрганизации = Новый Соответствие;
	ДобавленныеОрганизации.Вставить(Сведения.ИНН, Истина);
	
	КарточкаСвязанныеОрганизации = Новый Структура;
	КарточкаСвязанныеОрганизации.Вставить("ЕстьДанные", Ложь);
	КарточкаСвязанныеОрганизации.Вставить("СвязанныеОрганизации", СвязанныеОрганизации);
	
	ДанныеПроверкиКонтрагента.Вставить("КарточкаСвязанныеОрганизации", КарточкаСвязанныеОрганизации);
	
	ЭтоЮридическоеЛицо = ДанныеОтчета.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если Сведения.ДанныеРуководителей.Руководители.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Сведения.ОрганизацииГдеРуководитель.Количество() = 0
			И Сведения.ОрганизацииГдеУчредитель.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатСвязанныеОрганизации = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("СвязанныеОрганизации");
	РезультатСвязанныеОрганизации.Вывести(
		ОбластиМакета.СвязанныеОрганизацииЗаголовок);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДанныеРуководителей = Сведения.ДанныеРуководителей.Руководители;
	Иначе
		ДанныеРуководителей = Новый Массив;
		ДанныеРуководителей.Добавить(Сведения);
	КонецЕсли;
	
	ВГраница = ДанныеРуководителей.Количество() - 1;
	Для Итератор = 0 По ВГраница Цикл
		
		ТекущийРуководитель = ДанныеРуководителей[Итератор];
		
		Если ЭтоЮридическоеЛицо Тогда
			Руководитель = ТекущийРуководитель.Представление;
			
			ОбластьРуководитель = ?(Итератор = 0,
				ОбластиМакета.РуководительШапка,
				ОбластиМакета.РуководительСтрока);
			ОбластьРуководитель.Параметры.Руководитель = Руководитель;
			РезультатСвязанныеОрганизации.Вывести(ОбластьРуководитель);
		Иначе
			ОбластиМакета.Предприниматель.Параметры.Предприниматель = ТекущийРуководитель.Наименование;
			РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.Предприниматель);
		КонецЕсли;
		
		// Организации, где еще этот руководитель (предприниматель) является руководителем
		КоличествоОрганизаций = ТекущийРуководитель.ОрганизацииГдеРуководитель.Количество();
		Если КоличествоОрганизаций > 0 Тогда
			
			ТекущийРуководитель.ОрганизацииГдеРуководитель.Сортировать("КодСтатуса");
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Является руководителем в %1%2:'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = '%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
						КоличествоОрганизаций),
				?(ТекущийРуководитель.ОрганизацииГдеРуководительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			Для Каждого ОрганизацияГдеРуководитель Из ТекущийРуководитель.ОрганизацииГдеРуководитель Цикл
				
				ДанныеОрганизации = НовыеРеквизитыОрганизации();
				ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ОрганизацияГдеРуководитель);
				ДобавитьОрганизацию = Ложь;
				
				Если ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
					ОбластиМакета["ЕщеОрганизации"].Параметры.Заполнить(ДанныеОрганизации);
					Расшифровка = Новый Структура("Действие,ИНН", "Открыть", ДанныеОрганизации.ИНН);
					ОбластиМакета["ЕщеОрганизации"].Параметры.Расшифровка = Расшифровка;
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета["ЕщеОрганизации"]);
					Если ДобавленныеОрганизации.Получить(ДанныеОрганизации.ИНН) = Неопределено Тогда
						ДобавленныеОрганизации.Вставить(ДанныеОрганизации.ИНН, Истина);
						ДобавитьОрганизацию = Истина;
					КонецЕсли;
				Иначе
					ОбластиМакета["ЕщеОрганизацииБезРасшифровки"].Параметры.Заполнить(ДанныеОрганизации);
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета["ЕщеОрганизацииБезРасшифровки"]);
					Если ДобавленныеОрганизации.Получить(ДанныеОрганизации.НаименованиеОрганизации) = Неопределено Тогда
						ДобавленныеОрганизации.Вставить(ДанныеОрганизации.НаименованиеОрганизации, Истина);
						ДобавитьОрганизацию = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеОрганизации.КодСтатуса)
					И ДанныеОрганизации.КодСтатуса <> "001" Тогда
					
					ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = ДанныеОрганизации.НаименованиеСтатуса;
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.СтатусОрганизации);
				КонецЕсли;
				
				Если ДобавитьОрганизацию Тогда
					СвязанныеОрганизации.Добавить(ДанныеОрганизации);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Организации, где еще этот руководитель (предприниматель) является учредителем
		
		КоличествоОрганизаций = ТекущийРуководитель.ОрганизацииГдеУчредитель.Количество();
		Если КоличествоОрганизаций > 0 Тогда
			
			// Сколько всего
			ТекущийРуководитель.ОрганизацииГдеУчредитель.Сортировать("КодСтатуса");
			
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Является учредителем в %1%2:'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru = '%1 организаций;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
						КоличествоОрганизаций),
				?(ТекущийРуководитель.ОрганизацииГдеУчредительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			Для Каждого ОрганизацияГдеУчредитель Из ТекущийРуководитель.ОрганизацииГдеУчредитель Цикл
				
				ДанныеОрганизации = НовыеРеквизитыОрганизации();
				ЗаполнитьЗначенияСвойств(ДанныеОрганизации, ОрганизацияГдеУчредитель);
				ДобавитьОрганизацию = Ложь;
				
				Если ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
					ОбластиМакета["ЕщеОрганизации"].Параметры.Заполнить(ДанныеОрганизации);
					Расшифровка = Новый Структура("Действие,ИНН", "Открыть", ДанныеОрганизации.ИНН);
					ОбластиМакета["ЕщеОрганизации"].Параметры.Расшифровка = Расшифровка;
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета["ЕщеОрганизации"]);
					Если ДобавленныеОрганизации.Получить(ДанныеОрганизации.ИНН) = Неопределено Тогда
						ДобавленныеОрганизации.Вставить(ДанныеОрганизации.ИНН, Истина);
						ДобавитьОрганизацию = Истина;
					КонецЕсли;
				Иначе
					ОбластиМакета["ЕщеОрганизацииБезРасшифровки"].Параметры.Заполнить(ДанныеОрганизации);
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета["ЕщеОрганизацииБезРасшифровки"]);
					Если ДобавленныеОрганизации.Получить(ДанныеОрганизации.НаименованиеОрганизации) = Неопределено Тогда
						ДобавленныеОрганизации.Вставить(ДанныеОрганизации.НаименованиеОрганизации, Истина);
						ДобавитьОрганизацию = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеОрганизации.КодСтатуса)
					И ДанныеОрганизации.КодСтатуса <> "001" Тогда
					
					ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = ДанныеОрганизации.НаименованиеСтатуса;
					РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.СтатусОрганизации);
				КонецЕсли;
				
				Если ДобавитьОрганизацию Тогда
					СвязанныеОрганизации.Добавить(ДанныеОрганизации);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		РезультатСвязанныеОрганизации.Вывести(ОбластиМакета.Разделитель);
		
	КонецЦикла;
	
	Если СвязанныеОрганизации.Количество() > 0 Тогда
		КарточкаСвязанныеОрганизации.ЕстьДанные = Истина;
	Иначе
		РезультатСвязанныеОрганизации = Неопределено;
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатСвязанныеОрганизации", РезультатСвязанныеОрганизации);
	ДанныеПроверкиКонтрагента.Вставить("ИмяФайлаСвязанныеОрганизации",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - связанные организации'"),
				ИмяКарточки(Сведения))));
	
КонецПроцедуры

Функция НоваяТаблицаОбластиРасшифровки()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяДокумента",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяОбласти",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПерваяСтрока",    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПоследняяСтрока", Новый ОписаниеТипов("Число"));
	Возврат Результат;
	
КонецФункции

Функция ПериодыБухгалтерскойОтчетности(Сведения)
	
	АктуальныйГод = 2016;
	
	Если Сведения.Свойство("БухгалтерскаяОтчетность") Тогда
		Для Каждого СтрокаОтчетности Из Сведения.БухгалтерскаяОтчетность Цикл
			Если СтрокаОтчетности.Год > АктуальныйГод Тогда
				АктуальныйГод = СтрокаОтчетности.Год;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовыйПериодыОтчетности(АктуальныйГод);
	
КонецФункции

Функция НовыйПериодыОтчетности(АктуальныйГод)
	
	Результат = Новый Структура;
	Результат.Вставить("Год_1", Формат(АктуальныйГод, "ЧГ=0"));
	Результат.Вставить("Год_2", Формат(АктуальныйГод - 1, "ЧГ=0"));
	Результат.Вставить("Год_3", Формат(АктуальныйГод - 2, "ЧГ=0"));
	Результат.Вставить("Год_4", Формат(АктуальныйГод - 3, "ЧГ=0"));
	Результат.Вставить("Год_5", Формат(АктуальныйГод - 4, "ЧГ=0"));
	Результат.Вставить("КонецГода_1", Формат(Дата(АктуальныйГод, 12, 31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_2", Формат(Дата(АктуальныйГод - 1, 12, 31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_3", Формат(Дата(АктуальныйГод - 2, 12, 31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_4", Формат(Дата(АктуальныйГод - 3, 12, 31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_5", Формат(Дата(АктуальныйГод - 4, 12, 31), "ДЛФ=DD"));
	Возврат Результат;
	
КонецФункции

#Область ФинансовыйАнализ

Процедура СформироватьРезультатФинансовыйАнализ(
		Сведения,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента,
		ПериодыОтчетности)
	
	ПодготовитьДанныеФинансовогоАнализа(Сведения, ПериодыОтчетности);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("ФинансовыйАнализ"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("СтруктураГодов",     ПериодыОтчетности);
	
	ОбластьШапка = ПараметрыВывода.ОбластиМакета.Шапка;
	КарточкаФинансовогоАнализа = НовыйДанныеКарточкиФинансовогоАнализа();
	
	Если Сведения.ФинансовыйАнализ.Количество() = 0 Тогда
		
		ОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru='Финансовый анализ'");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		Если Сведения.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенНетОтчетности);
			КарточкаФинансовогоАнализа.Описание =
				НСтр("ru='Финансовый анализ не проведен, т.к. бухгалтерская отчетность за последние 3 года отсутствует'");
		ИначеЕсли Сведения.ДанныеБухгалтерскойОтчетности[0].ТипОтчетности = "0" Тогда
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенОтчетностьНКО);
			КарточкаФинансовогоАнализа.Описание =
				НСтр("ru='Финансовый анализ не проводится для социально ориентированных некоммерческих организаций'");
		Иначе
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенПрочее);
			КарточкаФинансовогоАнализа.Описание = НСтр("ru='Финансовый анализ не проведен'");
		КонецЕсли;
		
	Иначе
		
		СтрокаТаблицы = Сведения.ФинансовыйАнализ[0];
		
		ОбластьШапка.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Финансовый анализ за %1 год'"),
			СтрокаТаблицы.ГодОтчетности);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ВывестиРазделРискБанкротства(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, КарточкаФинансовогоАнализа);
		ВывестиРазделКредитоспособность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, КарточкаФинансовогоАнализа);
		ВывестиРазделРентабельностьАктивов(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, КарточкаФинансовогоАнализа);
		ВывестиРазделРентабельностьПродаж(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода, КарточкаФинансовогоАнализа);
		
		ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатФинансовыйАнализ", "ИмяДокумента");
		Для Каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
			НоваяСтрока = ДанныеПроверкиКонтрагента.ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
		КарточкаФинансовогоАнализа.ЕстьДанные = Истина;
		
	КонецЕсли;
	
	ДанныеПроверкиКонтрагента.Вставить("КарточкаФинансовогоАнализа", КарточкаФинансовогоАнализа);
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатФинансовыйАнализ", ТабличныйДокумент);
	ДанныеПроверкиКонтрагента.Вставить("ИмяФайлаФинансовыйАнализ", 
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - финансовый анализ'"),
				ИмяКарточки(Сведения))));

КонецПроцедуры

Процедура ПодготовитьДанныеФинансовогоАнализа(
		Сведения,
		ПериодыОтчетности)

	Сведения.Вставить("ФинансовыйАнализ", НоваяТаблицаФинансовыйАнализ());
	Если Сведения.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчетности = Сведения.ДанныеБухгалтерскойОтчетности[0];
	Если СтрокаОтчетности.ТипОтчетности = "0" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоГодам = Новый ТаблицаЗначений;
	ДанныеПоГодам.Колонки.Добавить("НомерГода");
	ДанныеПоГодам.Колонки.Добавить("Год");
	Если СтрокаОтчетности.Показатели.Свойство("П1110_1") Тогда
		НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "1";
		НоваяСтрока.Год       = ПериодыОтчетности.Год_1;
	Иначе
		Возврат;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_2") Тогда
		НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "2";
		НоваяСтрока.Год       = ПериодыОтчетности.Год_2;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_3") Тогда
		НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "3";
		НоваяСтрока.Год       = ПериодыОтчетности.Год_3;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_4") Тогда
		НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "4";
		НоваяСтрока.Год       = ПериодыОтчетности.Год_4;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_5") Тогда
		НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "5";
		НоваяСтрока.Год       = ПериодыОтчетности.Год_5;
	КонецЕсли;
	
	НоваяСтрока = Сведения.ФинансовыйАнализ.Добавить();
	НоваяСтрока.ГодОтчетности    = ДанныеПоГодам[0].Год;
	НоваяСтрока.ВалютаОтчетности = СтрокаОтчетности.ВалютаОтчетности;
	
	// Риск банкротства
	НоваяСтрока.ПоказателиРискБанкротства = Новый Структура;
	ДобавитьПоказателиРискБанкротства(
		НоваяСтрока.ПоказателиРискБанкротства,
		СтрокаОтчетности,
		ДанныеПоГодам,
		Сведения);
	
	// Кредитоспособность
	НоваяСтрока.ПоказателиКредитоспособность = Новый Структура;
	ДобавитьПоказателиКредитоспособность(
		НоваяСтрока.ПоказателиКредитоспособность,
		СтрокаОтчетности,
		ДанныеПоГодам,
		Сведения);
	
	// Рентабельность активов
	НоваяСтрока.ПоказателиРентабельностьАктивов = Новый Структура;
	ДобавитьПоказателиРентабельностьАктивов(
		НоваяСтрока.ПоказателиРентабельностьАктивов,
		СтрокаОтчетности,
		ДанныеПоГодам,
		Сведения);
		
	// Рентабельность продаж
	НоваяСтрока.ПоказателиРентабельностьПродаж = Новый Структура;
	ДобавитьПоказателиРентабельностьПродаж(
		НоваяСтрока.ПоказателиРентабельностьПродаж,
		СтрокаОтчетности,
		ДанныеПоГодам,
		Сведения);
		
КонецПроцедуры

Функция НовыйДанныеКарточкиФинансовогоАнализа()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Описание");
	Результат.Вставить("ОценкаРискаБанкротства", Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("Кредитоспособность",     Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("РентабельностьАктивов",  Новый Структура("Значение, ЦветТекста"));
	Результат.Вставить("РентабельностьПродаж",   Новый Структура("Значение, ЦветТекста"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПоказателиРискБанкротства(
		Показатели,
		СтрокаОтчетности,
		ДанныеПоГодам,
		ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРискБанкротства", "");
	Показатели.Вставить("ПояснениеОценкиРискБанкротства", "");
	Показатели.Вставить("ПятиФакторнаяМодель", ЭтоПроизводственноеПредприятие(ИнформацияОСвязях.ВидыДеятельности));
	Показатели.Вставить("КоличествоЛет", ДанныеПоГодам.Количество());
	
	// Ключ - код для вывода в отчет, значение - числитель и знаменатель,
	// каждый из которых - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	РасчетПоказателей = Новый Структура;
	Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
		РасчетПоказателей.Вставить("РискБанкротства1",
			Новый Структура(
				"Числитель,Знаменатель", 
				"1300;1400;-1100", 
				"1600"));
		РасчетПоказателей.Вставить("РискБанкротства2",
			Новый Структура(
				"Числитель,Знаменатель", 
				"1370",
				"1600"));
		РасчетПоказателей.Вставить("РискБанкротства3",
			Новый Структура(
				"Числитель,Знаменатель", 
				"2300;2330", 
				"1600"));
		РасчетПоказателей.Вставить("РискБанкротства4", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1400;1500"));
		РасчетПоказателей.Вставить("РискБанкротства5", Новый Структура("Числитель,Знаменатель", 
			"2110", 
			"1600"));
	Иначе
		РасчетПоказателей.Вставить("РискБанкротства1",
			Новый Структура(
				"Числитель,Знаменатель",
			"1300;1410;1420;1430;1450;-1140;-1150;-1160;-1110;-1120;-1130;-1170;-1180;-1190", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства2", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства3", Новый Структура("Числитель,Знаменатель", 
			"2110;-2120;-2210;-2220;2310;2320;2340;-2350", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства4", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1410;1420;1430;1450;1510;1520;1530;1540;1550"));
		РасчетПоказателей.Вставить("РискБанкротства5", Новый Структура("Числитель,Знаменатель", 
			"2110", 
			"1600"));
	КонецЕсли;
	Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
		РасчетПоказателя.Значение.Числитель = СтрРазделить(РасчетПоказателя.Значение.Числитель, ";", Ложь);
		РасчетПоказателя.Значение.Знаменатель = СтрРазделить(РасчетПоказателя.Значение.Знаменатель, ";", Ложь);
	КонецЦикла;
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		КлючГода = 5 - НомерГода;
		Показатели.Вставить("Год_" + КлючГода, ДанныеГода.Год);
		Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
			ИмяПоказателя = РасчетПоказателя.Ключ + "_" + КлючГода;
			ЗначениеЧислителя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Числитель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЧислителя = ЗначениеЧислителя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеЗнаменателя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Знаменатель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЗнаменателя = ЗначениеЗнаменателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеПоказателя = ?(ЗначениеЗнаменателя = 0, 0, Окр(ЗначениеЧислителя / ЗначениеЗнаменателя, 3));
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		Если Показатели.ПятиФакторнаяМодель Тогда
			ИндексАльтмана = Окр(
				0.717 * Показатели["РискБанкротства1_"  + КлючГода]
				+ 0.847 * Показатели["РискБанкротства2_" + КлючГода]
				+ 3.107 * Показатели["РискБанкротства3_" + КлючГода]
				+ 0.42 * Показатели["РискБанкротства4_"  + КлючГода]
				+ 0.995 * Показатели["РискБанкротства5_" + КлючГода], 3);
		Иначе
			ИндексАльтмана = Окр(
				6.56 * Показатели["РискБанкротства1_" + КлючГода]
				+ 3.26 * Показатели["РискБанкротства2_" + КлючГода]
				+ 6.72 * Показатели["РискБанкротства3_" + КлючГода]
				+ 1.05 * Показатели["РискБанкротства4_" + КлючГода], 3);
		КонецЕсли;
		Показатели.Вставить(
			"ИндексАльтмана_" + КлючГода,
			ИндексАльтмана);
		Если НомерГода = "1" Тогда
			Если Показатели.ПятиФакторнаяМодель Тогда
				ОценкаРискБанкротства = ?(ИндексАльтмана >= 2.9,
					"ХорошаяОценка",
					?(ИндексАльтмана > 1.23,
						"СредняяОценка",
						"ПлохаяОценка"));
			Иначе
				ОценкаРискБанкротства = ?(ИндексАльтмана >= 2.6,
					"ХорошаяОценка",
					?(ИндексАльтмана > 1.1,
						"СредняяОценка",
					"ПлохаяОценка"));
			КонецЕсли;
			Показатели.ОценкаРискБанкротства = ОценкаРискБанкротства;
			Если ОценкаРискБанкротства = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Высокий риск банкротства'");
			ИначеЕсли ОценкаРискБанкротства = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Вероятность банкротства невысока'");
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Устойчивое финансовое состояние'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиКредитоспособность(
		Показатели,
		СтрокаОтчетности,
		ДанныеПоГодам,
		ИнформацияОСвязях)

	Показатели.Вставить("ОценкаКредитоспособность", "");
	Показатели.Вставить("ПояснениеОценкиКредитоспособность", "");
	Показатели.Вставить("КоличествоЛет", ДанныеПоГодам.Количество());
	
	// Ключ - код для вывода в отчет, значение - числитель и знаменатель, 
	// каждый из которых - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	РасчетПоказателей = Новый Структура;
	Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
		РасчетПоказателей.Вставить("Кредитоспособность1", Новый Структура("Числитель,Знаменатель", 
			"1250", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность2", Новый Структура("Числитель,Знаменатель", 
			"1230;1240;1250", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность3", Новый Структура("Числитель,Знаменатель", 
			"1200", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность4", Новый Структура("Числитель,Знаменатель", 
			"1300;1530;1540", 
			"1700"));
		РасчетПоказателей.Вставить("Кредитоспособность5", Новый Структура("Числитель,Знаменатель", 
			"2200", 
			"2110"));
		РасчетПоказателей.Вставить("Кредитоспособность6", Новый Структура("Числитель,Знаменатель", 
			"2400", 
			"2110"));
	Иначе
		РасчетПоказателей.Вставить("Кредитоспособность1", Новый Структура("Числитель,Знаменатель", 
			"1250", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность2", Новый Структура("Числитель,Знаменатель", 
			"1250;1220;1230;1240;1260", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность3", Новый Структура("Числитель,Знаменатель", 
			"1210;1250;1220;1230;1240;1260", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность4", Новый Структура("Числитель,Знаменатель", 
			"1300;1530;1540;1550", 
			"1700"));
		РасчетПоказателей.Вставить("Кредитоспособность5", Новый Структура("Числитель,Знаменатель", 
			"2110;-2120;-2210;-2220", 
			"2110"));
		РасчетПоказателей.Вставить("Кредитоспособность6", Новый Структура("Числитель,Знаменатель", 
			"2400", 
			"2110"));
	КонецЕсли;
	
	Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
		РасчетПоказателя.Значение.Числитель = СтрРазделить(РасчетПоказателя.Значение.Числитель, ";", Ложь);
		РасчетПоказателя.Значение.Знаменатель = СтрРазделить(РасчетПоказателя.Значение.Знаменатель, ";", Ложь);
	КонецЦикла;
		
	Показатели.Вставить("КредитоспособностьВесКатегории1", 0.05);
	Показатели.Вставить("КредитоспособностьВесКатегории2", 0.1);
	Показатели.Вставить("КредитоспособностьВесКатегории3", 0.4);
	Показатели.Вставить("КредитоспособностьВесКатегории4", 0.2);
	Показатели.Вставить("КредитоспособностьВесКатегории5", 0.15);
	Показатели.Вставить("КредитоспособностьВесКатегории6", 0.1);
	
	ЭтоТорговля = ЭтоТорговоеПредприятие(ИнформацияОСвязях.ВидыДеятельности);
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		КлючГода = 5 - НомерГода;
		Показатели.Вставить("Год_" + КлючГода, ДанныеГода.Год);
		Для Каждого РасчетПоказателя Из РасчетПоказателей Цикл
			ИмяПоказателя = РасчетПоказателя.Ключ + "_" + КлючГода;
			ЗначениеЧислителя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Числитель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЧислителя = ЗначениеЧислителя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеЗнаменателя = 0;
			Для Каждого ЭлементРасчета Из РасчетПоказателя.Значение.Знаменатель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЗнаменателя = ЗначениеЗнаменателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеПоказателя = ?(ЗначениеЗнаменателя = 0, 0, Окр(ЗначениеЧислителя / ЗначениеЗнаменателя, 3));
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		
		Кредитоспособность1 = Показатели["Кредитоспособность1_" + КлючГода];
		Категория1 = ?(Кредитоспособность1 >= 0.1, 1, ?(Кредитоспособность1 >= 0.05, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория1_" + КлючГода, Категория1);
		
		Кредитоспособность2 = Показатели["Кредитоспособность2_" + КлючГода];
		Категория2 = ?(Кредитоспособность2 >= 0.8, 1, ?(Кредитоспособность2 >= 0.5, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория2_" + КлючГода, Категория2);
		
		Кредитоспособность3 = Показатели["Кредитоспособность3_" + КлючГода];
		Категория3 = ?(Кредитоспособность3 >= 1.5, 1, ?(Кредитоспособность3 >= 1, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория3_" + КлючГода, Категория3);
		
		Кредитоспособность4 = Показатели["Кредитоспособность4_" + КлючГода];
		Если ЭтоТорговля Тогда
			Категория4 = ?(Кредитоспособность4 >= 0.25, 1, ?(Кредитоспособность4 >= 0.15, 2, 3));
		Иначе
			Категория4 = ?(Кредитоспособность4 >= 0.4, 1, ?(Кредитоспособность4 >= 0.25, 2, 3));
		КонецЕсли;
		Показатели.Вставить("КредитоспособностьКатегория4_" + КлючГода, Категория4);
		
		Кредитоспособность5 = Показатели["Кредитоспособность5_" + КлючГода];
		Категория5 = ?(Кредитоспособность5 >= 0.1, 1, ?(Кредитоспособность5 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория5_" + КлючГода, Категория5);
		
		Кредитоспособность6 = Показатели["Кредитоспособность6_" + КлючГода];
		Категория6 = ?(Кредитоспособность6 >= 0.06, 1, ?(Кредитоспособность6 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория6_" + КлючГода, Категория6);
		
		Кредитоспособность = 0;
		Для Номер = 1 По 6 Цикл
			Категория    = Показатели["КредитоспособностьКатегория" + Номер + "_" + КлючГода];
			ВесКатегории = Показатели["КредитоспособностьВесКатегории" + Номер];
			Кредитоспособность = Кредитоспособность + Категория * ВесКатегории;
		КонецЦикла;
		Кредитоспособность = Окр(Кредитоспособность, 2);
		Показатели.Вставить("Кредитоспособность_" + КлючГода, Кредитоспособность);
		
		Если НомерГода = "1" Тогда
			ОценкаКредитоспособность = ?(Кредитоспособность <= 1.25,
				"ХорошаяОценка", 
				?(Кредитоспособность <= 2.35,
					"СредняяОценка",
					"ПлохаяОценка"));
			Показатели.ОценкаКредитоспособность = ОценкаКредитоспособность;
			Если ОценкаКредитоспособность = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование связано с повышенным риском'");
			ИначеЕсли ОценкаКредитоспособность = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование требует взвешенного подхода'");
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитоспособность не вызывает сомнений'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьАктивов(
		Показатели,
		СтрокаОтчетности,
		ДанныеПоГодам,
		ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРентабельностьАктивов", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьАктивов", "");
	Показатели.Вставить("КоличествоЛет", ДанныеПоГодам.Количество());
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		КлючГода = 5 - НомерГода;
		Показатели.Вставить("Год_" + КлючГода, ДанныеГода.Год);
		// Чистая прибыль
		ИмяПоказателя = "РентабельностьАктивов1_" + КлючГода;
		ЧистаяПрибыль = ДанныеОтчетности["П2400_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, ЧистаяПрибыль);
		// Активы
		ИмяПоказателя = "РентабельностьАктивов2_" + КлючГода;
		Активы = ДанныеОтчетности["П1600_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Активы);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьАктивовПоОтрасли(ИнформацияОСвязях, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьАктивов3_" + КлючГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьАктивов4_" + КлючГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьАктивов_" + КлючГода;
		РентабельностьАктивов = ?(Активы = 0, 0, Окр(ЧистаяПрибыль / Активы * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьАктивов);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьАктивов = ?(РентабельностьАктивов < ПредельнаяРентабельность,
				"ПлохаяОценка", 
				?(РентабельностьАктивов <= СредняяРентабельность,
					"СредняяОценка",
					"ХорошаяОценка"));
			Показатели.ОценкаРентабельностьАктивов = ОценкаРентабельностьАктивов;
			Если ОценкаРентабельностьАктивов = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0,
					НСтр("ru='Ниже нуля'"), 
					НСтр("ru='Значительно ниже средней'"));
			ИначеЕсли ОценкаРентабельностьАктивов = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0,
					НСтр("ru='Равна нулю'"), 
					НСтр("ru='Немного ниже средней'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0,
					НСтр("ru='Выше нуля'"), 
					НСтр("ru='Выше средней'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьПродаж(
		Показатели,
		СтрокаОтчетности,
		ДанныеПоГодам,
		ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРентабельностьПродаж", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьПродаж", "");
	Показатели.Вставить("КоличествоЛет", ДанныеПоГодам.Количество());
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для Каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		КлючГода = 5 - НомерГода;
		Показатели.Вставить("Год_" + КлючГода, ДанныеГода.Год);
		// Прибыль от продаж
		ИмяПоказателя = "РентабельностьПродаж1_" + КлючГода;
		Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
			ПрибыльОтПродаж = ДанныеОтчетности["П2200_" + НомерГода];
		Иначе // "1"
			ПрибыльОтПродаж = ДанныеОтчетности["П2110_" + НомерГода]
				- ДанныеОтчетности["П2120_" + НомерГода]
				- ДанныеОтчетности["П2210_" + НомерГода]
				- ДанныеОтчетности["П2220_" + НомерГода];
		КонецЕсли;
		Показатели.Вставить(ИмяПоказателя, ПрибыльОтПродаж);
		// Себестоимость продаж
		ИмяПоказателя = "РентабельностьПродаж2_" + КлючГода;
		Себестоимость = ДанныеОтчетности["П2120_" + НомерГода]
			+ ДанныеОтчетности["П2210_" + НомерГода]
			+ ДанныеОтчетности["П2220_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Себестоимость);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьПродажПоОтрасли(ИнформацияОСвязях, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьПродаж3_" + КлючГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьПродаж4_" + КлючГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьПродаж_" + КлючГода;
		РентабельностьПродаж = ?(Себестоимость = 0, 0, Окр(ПрибыльОтПродаж / Себестоимость * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьПродаж);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьПродаж = ?(РентабельностьПродаж < ПредельнаяРентабельность,
				"ПлохаяОценка", 
				?(РентабельностьПродаж <= СредняяРентабельность,
					"СредняяОценка",
					"ХорошаяОценка"));
			Показатели.ОценкаРентабельностьПродаж = ОценкаРентабельностьПродаж;
			Если ОценкаРентабельностьПродаж = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Ниже нуля'"), 
					НСтр("ru='Значительно ниже средней'"));
			ИначеЕсли ОценкаРентабельностьПродаж = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Равна нулю'"), 
					НСтр("ru='Немного ниже средней'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Выше нуля'"), 
					НСтр("ru='Выше средней'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПроизводственноеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].Код;
	Если ВидыДеятельности[0].Классификатор = "ОКВЭД2" Тогда
		ПроизводственныеКоды = СтрРазделить(
			"10;12;13;14;15;16;17;19;08.92.2;20;21;22;23;24;25;26;27;28;29;30;31;32;33;35", ";", Ложь);
	ИначеЕсли ВидыДеятельности[0].Классификатор = "ОКВЭД" Тогда
		ПроизводственныеКоды = СтрРазделить(
			"15;16;17;18;19;20;21;23;24;25;26;27;28;29;30;31;32;33;34;35;36;40", ";", Ложь);
	Иначе
		ПроизводственныеКоды = Новый Массив;
	КонецЕсли;
	
	Для Каждого ПроизводственныйКод Из ПроизводственныеКоды Цикл
		Если Лев(ОсновнойКодОКВЭД, СтрДлина(ПроизводственныйКод)) = ПроизводственныйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Функция ЭтоТорговоеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].Код;
	Если ВидыДеятельности[0].Классификатор = "ОКВЭД2" Тогда
		ТорговыеКоды = СтрРазделить("45;46;47;64.91", ";", Ложь);
	ИначеЕсли ВидыДеятельности[0].Классификатор = "ОКВЭД" Тогда
		ТорговыеКоды = СтрРазделить("50;51;52;65.21", ";", Ложь);
	Иначе
		ТорговыеКоды = Новый Массив;
	КонецЕсли;
	
	Для Каждого ТорговыйКод Из ТорговыеКоды Цикл
		Если Лев(ОсновнойКодОКВЭД, СтрДлина(ТорговыйКод)) = ТорговыйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Функция СредняяРентабельностьАктивовПоОтрасли(Сведения, Год)
	
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если Сведения.ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидДеятельности = Сведения.ВидДеятельности;
	Если ВидДеятельности.Классификатор = "ОКВЭД2" Тогда
		Если Год > "2016" Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ДанныеНагрузкиИРентабельности") Тогда
				МодульДанныеНагрузкиИРентабельности = ОбщегоНазначения.ОбщийМодуль("ДанныеНагрузкиИРентабельности");
				ПоказателиПоКоду = МодульДанныеНагрузкиИРентабельности.ЗначениеПоказателейПоКоду(
					ВидДеятельности.Код,
					Дата(Год + "0101000000"));
				Если ПоказателиПоКоду.РентабельностьАктивов <> Неопределено Тогда
					Результат.ВидДеятельности = ВидДеятельности.Наименование;
					Результат.Рентабельность  = ПоказателиПоКоду.РентабельностьАктивов;
				КонецЕсли;
			Иначе
				ТекстОшибки = НСтр(
					"ru = 'Не внедрена подсистема ""Данные нагрузки и рентабельности""'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(ВидДеятельности.Код);
		КонецЕсли;
	ИначеЕсли ВидДеятельности.Классификатор = "ОКВЭД" Тогда
		ОсновнойКодОКВЭД = Лев(ВидДеятельности.Код, 2);
	Иначе
		ОсновнойКодОКВЭД = "";
	КонецЕсли;
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ВидДеятельности = ВидДеятельности.Наименование;
	
	Макет = ПолучитьМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	ОбластьКлассификатор = Макет.Область("Классификатор");
	ОбластьСтроки = Макет.НайтиТекст(ОсновнойКодОКВЭД, , ОбластьКлассификатор, , Истина);
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки = ОбластьСтроки.Верх;
	ОбластьРентабельностьАктивов = Макет.Область("РентабельностьАктивов");
	ОбластьКолонки = Макет.НайтиТекст(Год, , ОбластьРентабельностьАктивов, , Истина);
	Если ОбластьКолонки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерКолонки   = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция СредняяРентабельностьПродажПоОтрасли(Сведения, Год)
	
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если Сведения.ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Сведения.ВидДеятельности.Классификатор = "ОКВЭД2" Тогда
		Если Год > "2016" Тогда
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ДанныеНагрузкиИРентабельности") Тогда
				МодульДанныеНагрузкиИРентабельности = ОбщегоНазначения.ОбщийМодуль("ДанныеНагрузкиИРентабельности");
				ПоказателиПоКоду = МодульДанныеНагрузкиИРентабельности.ЗначениеПоказателейПоКоду(
					Сведения.ВидДеятельности.Код,
					Дата(Год + "0101000000"));
				Если ПоказателиПоКоду.РентабельностьПродаж <> Неопределено Тогда
					Результат.ВидДеятельности = Сведения.ВидДеятельности.Наименование;
					Результат.Рентабельность  = ПоказателиПоКоду.РентабельностьПродаж;
				КонецЕсли;
			Иначе
				ТекстОшибки = НСтр(
					"ru = 'Не внедрена подсистема ""Данные нагрузки и рентабельности""'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(Сведения.ВидДеятельности.Код);
		КонецЕсли;
	ИначеЕсли Сведения.ВидДеятельности.Классификатор = "ОКВЭД" Тогда
		ОсновнойКодОКВЭД = Лев(Сведения.ВидДеятельности.Код, 2);
	Иначе
		ОсновнойКодОКВЭД = "";
	КонецЕсли;
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ВидДеятельности = Сведения.ВидДеятельности.Наименование;
	
	Макет = ПолучитьМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	ОбластьКлассификатор = Макет.Область("Классификатор");
	ОбластьСтроки = Макет.НайтиТекст(ОсновнойКодОКВЭД, , ОбластьКлассификатор, , Истина);
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки = ОбластьСтроки.Верх;
	ОбластьРентабельностьПродаж = Макет.Область("РентабельностьПродаж");
	ОбластьКолонки = Макет.НайтиТекст(Год, , ОбластьРентабельностьПродаж, , Истина);
	Если ОбластьКолонки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерКолонки = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция ГруппаРентабельностиПоКодуОКВЭД2(КодОКВЭД2)
	
	// Ключ - код ОКВЭД или группа редакции 2, значение - группа редакции 1.
	СоответствиеКодов = Новый Соответствие; 
	СоответствиеКодов.Вставить("01",      "01");
	СоответствиеКодов.Вставить("02",      "01");
	СоответствиеКодов.Вставить("03",      "05");
	СоответствиеКодов.Вставить("05",      "10");
	СоответствиеКодов.Вставить("08.92",   "10");
	СоответствиеКодов.Вставить("06",      "10");
	СоответствиеКодов.Вставить("07.21",   "10");
	СоответствиеКодов.Вставить("09.1",    "10");
	СоответствиеКодов.Вставить("07",      "13");
	СоответствиеКодов.Вставить("08",      "13");
	СоответствиеКодов.Вставить("09.9",    "13");
	СоответствиеКодов.Вставить("11",      "15");
	СоответствиеКодов.Вставить("12",      "15");
	СоответствиеКодов.Вставить("13",      "17");
	СоответствиеКодов.Вставить("14",      "17");
	СоответствиеКодов.Вставить("15.11.1", "17");
	СоответствиеКодов.Вставить("15",      "19");
	СоответствиеКодов.Вставить("16",      "20");
	СоответствиеКодов.Вставить("17",      "21");
	СоответствиеКодов.Вставить("18",      "22");
	СоответствиеКодов.Вставить("58",      "22");
	СоответствиеКодов.Вставить("19",      "23");
	СоответствиеКодов.Вставить("24.46",   "23");
	СоответствиеКодов.Вставить("20",      "24");
	СоответствиеКодов.Вставить("26.80",   "24");
	СоответствиеКодов.Вставить("21",      "24");
	СоответствиеКодов.Вставить("22",      "25");
	СоответствиеКодов.Вставить("23",      "26");
	СоответствиеКодов.Вставить("24",      "27");
	СоответствиеКодов.Вставить("25",      "28");
	СоответствиеКодов.Вставить("33.1",    "28");
	СоответствиеКодов.Вставить("33.11",   "28");
	СоответствиеКодов.Вставить("33.12",   "28");
	СоответствиеКодов.Вставить("28",      "29");
	СоответствиеКодов.Вставить("25.4",    "29");
	СоответствиеКодов.Вставить("27.5",    "29");
	СоответствиеКодов.Вставить("33",      "29");
	СоответствиеКодов.Вставить("28.23",   "30");
	СоответствиеКодов.Вставить("27",      "30");
	СоответствиеКодов.Вставить("26",      "30");
	СоответствиеКодов.Вставить("32",      "30");
	СоответствиеКодов.Вставить("33.13",   "30");
	СоответствиеКодов.Вставить("33.14",   "30");
	СоответствиеКодов.Вставить("95.12",   "30");
	СоответствиеКодов.Вставить("29",      "34");
	СоответствиеКодов.Вставить("30",      "34");
	СоответствиеКодов.Вставить("28.99.3", "34");
	СоответствиеКодов.Вставить("33.15",   "34");
	СоответствиеКодов.Вставить("33.16",   "34");
	СоответствиеКодов.Вставить("33.17",   "34");
	СоответствиеКодов.Вставить("33.19",   "34");
	СоответствиеКодов.Вставить("33.2",    "34");
	СоответствиеКодов.Вставить("31",      "36");
	СоответствиеКодов.Вставить("38",      "36");
	СоответствиеКодов.Вставить("35",      "40");
	СоответствиеКодов.Вставить("36",      "40");
	СоответствиеКодов.Вставить("41",      "45");
	СоответствиеКодов.Вставить("42",      "45");
	СоответствиеКодов.Вставить("43",      "45");
	СоответствиеКодов.Вставить("45",      "50");
	СоответствиеКодов.Вставить("47.3",    "50");
	СоответствиеКодов.Вставить("46",      "51");
	СоответствиеКодов.Вставить("47",      "52");
	СоответствиеКодов.Вставить("55",      "55");
	СоответствиеКодов.Вставить("56",      "55");
	СоответствиеКодов.Вставить("49",      "60");
	СоответствиеКодов.Вставить("50",      "61");
	СоответствиеКодов.Вставить("51",      "62");
	СоответствиеКодов.Вставить("52",      "63");
	СоответствиеКодов.Вставить("65",      "64");
	СоответствиеКодов.Вставить("66",      "65");
	СоответствиеКодов.Вставить("67",      "65");
	СоответствиеКодов.Вставить("74",      "70");
	СоответствиеКодов.Вставить("73",      "70");
	СоответствиеКодов.Вставить("85.2",    "75");
	СоответствиеКодов.Вставить("74.60",   "80");
	СоответствиеКодов.Вставить("80",      "85");
	СоответствиеКодов.Вставить("91.3",    "90");
	СоответствиеКодов.Вставить("91.5",    "90");
	СоответствиеКодов.Вставить("92",      "90");
	СоответствиеКодов.Вставить("92.71",   "92");
	СоответствиеКодов.Вставить("52.7",    "95");
	СоответствиеКодов.Вставить("72.5",    "95");
	СоответствиеКодов.Вставить("32.20.9", "95");
	СоответствиеКодов.Вставить("32.30.9", "95");
	СоответствиеКодов.Вставить("99",      "95");
	
	ДлинаКода = СтрДлина(КодОКВЭД2);
	Для КоличествоЗнаков = 0 По ДлинаКода - 2 Цикл
		КодДляПоиска = Лев(КодОКВЭД2, ДлинаКода - КоличествоЗнаков);
		ГруппаОКВЭД1 = СоответствиеКодов[КодДляПоиска];
		Если ГруппаОКВЭД1 <> Неопределено Тогда
			Возврат ГруппаОКВЭД1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";

КонецФункции

Процедура ВывестиРазделРискБанкротства(
		ТабличныйДокумент,
		СтрокаДанных,
		ПараметрыВывода,
		КарточкаФинансовогоАнализа)
	
	Показатели    = СтрокаДанных.ПоказателиРискБанкротства;
	КоличествоЛет = Показатели.КоличествоЛет;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	// Диаграмма
	Диаграмма = ОбластиМакета.РискБанкротства.Рисунки.ДиаграммаРискБанкротства.Объект;
	Диаграмма.КоличествоТочек = Показатели.КоличествоЛет;
	Серия = Диаграмма.Серии[0];
	Серия.Цвет = ЦветаСтиля.ЦветСерииФинансовогоАнализа;
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	Если Показатели.ПятиФакторнаяМодель Тогда
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 2.9;
		Интервал.Конец = 9999;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 1.1;
		Интервал.Конец = 2.9;
		Интервал.Цвет = WebЦвета.Желтый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 0;
		Интервал.Конец = 1.23;
		Интервал.Цвет = WebЦвета.Красный;
		Интервал.ПроцентПолупрозрачности = 60;
		
	Иначе
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 2.6;
		Интервал.Конец = 9999;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 1.1;
		Интервал.Конец = 2.6;
		Интервал.Цвет = WebЦвета.Желтый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 0;
		Интервал.Конец = 1.1;
		Интервал.Цвет = WebЦвета.Красный;
		Интервал.ПроцентПолупрозрачности = 60;
		
	КонецЕсли;
	
	ПредыдущееЗначение = Неопределено;
	Для КлючГода = 0 По КоличествоЛет - 1 Цикл
		Если Не Показатели.Свойство("Год_" + КлючГода) Тогда
			Продолжить;
		КонецЕсли;
		Диаграмма.Точки[КлючГода].Текст = Показатели["Год_" + КлючГода];
		ТекущееЗначение = Показатели["ИндексАльтмана_" + КлючГода];
		Диаграмма.УстановитьЗначение(
			КлючГода,
			Серия,
			ТекущееЗначение,
			,
			ПодсказкаРазницыВДиаграмме(ТекущееЗначение, ПредыдущееЗначение));
		ПредыдущееЗначение = ТекущееЗначение;
	КонецЦикла;
	
	ПоказательКрайнегоГода = "ИндексАльтмана_" + (КоличествоЛет - 1);
	ИндексАльтмана = ?(Показатели.Свойство(ПоказательКрайнегоГода), Показатели[ПоказательКрайнегоГода], 0);
	ОбластиМакета.РискБанкротства.Параметры.Заполнить(Показатели);
	ОбластиМакета.РискБанкротства.Параметры.ИндексАльтмана = ИндексАльтмана;
	ОбластиМакета.РискБанкротства.Параметры.ПояснениеОценкиРискБанкротства = Показатели.ПояснениеОценкиРискБанкротства;
	
	КарточкаФинансовогоАнализа.ОценкаРискаБанкротства.Значение = Показатели.ПояснениеОценкиРискБанкротства;
	
	Если Показатели.ОценкаРискБанкротства = "ПлохаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРискБанкротства = "ХорошаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВажнойНадписиБИП;
	КонецЕсли;
	
	ОбластиМакета.РискБанкротства.Области.ПояснениеОценкиРискБанкротства.ЦветТекста = ЦветТекста;
	КарточкаФинансовогоАнализа.ОценкаРискаБанкротства.ЦветТекста = ЦветТекста;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.РискБанкротства);
	
	// Свернуто
	Расшифровка = Новый Структура(
		"Действие,ИмяДокумента,ИмяОбласти", 
		"Показать",
		"РезультатФинансовыйАнализ",
		"РискБанкротства");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РискБанкротства";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Порядок расчета
	ОбластьРасчет = ?(Показатели.ПятиФакторнаяМодель,
		ОбластиМакета.РискБанкротстваРасчетПроизводство,
		ОбластиМакета.РискБанкротстваРасчет);
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	ОбластьПоказатели = ?(Показатели.ПятиФакторнаяМодель,
		ОбластиМакета.РискБанкротстваПоказателиПроизводство,
		ОбластиМакета.РискБанкротстваПоказатели);
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура(
		"Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть",
		"РезультатФинансовыйАнализ",
		"РискБанкротства");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделКредитоспособность(
		ТабличныйДокумент,
		СтрокаДанных,
		ПараметрыВывода,
		КарточкаФинансовогоАнализа)
	
	Показатели    = СтрокаДанных.ПоказателиКредитоспособность;
	КоличествоЛет = Показатели.КоличествоЛет;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	Диаграмма = ОбластиМакета.Кредитоспособность.Рисунки.ДиаграммаКредитоспособность.Объект;
	
	Серия = Диаграмма.Серии[0];
	Серия.Цвет = ЦветаСтиля.ЦветСерииФинансовогоАнализа;
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 2.35;
	Интервал.Конец = 99;
	Интервал.Цвет = WebЦвета.Красный;
	Интервал.ПроцентПолупрозрачности = 60;
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 1.25;
	Интервал.Конец = 2.35;
	Интервал.Цвет = WebЦвета.Желтый;
	Интервал.ПроцентПолупрозрачности = 60;
	
	Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
	Интервал.Начало = 0;
	Интервал.Конец = 1.25;
	Интервал.Цвет = WebЦвета.Зеленый;
	Интервал.ПроцентПолупрозрачности = 60;
	
	Диаграмма.КоличествоТочек = КоличествоЛет;
	
	Для КлючГода = 0 По КоличествоЛет - 1 Цикл
		Если Не Показатели.Свойство("Год_" + КлючГода) Тогда
			Продолжить;
		КонецЕсли;
		Диаграмма.Точки[КлючГода].Текст = Показатели["Год_" + КлючГода];
		Диаграмма.УстановитьЗначение(КлючГода, Серия, Показатели["Кредитоспособность_" + КлючГода]);
	КонецЦикла;
	
	ПоказательКрайнегоГода = "Кредитоспособность_" + (КоличествоЛет - 1);
	Кредитоспособность = ?(Показатели.Свойство(ПоказательКрайнегоГода),
		Показатели[ПоказательКрайнегоГода],
		0);
	ТекстТочкиДиаграммы    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Оценка кредитоспособности S = %1'"),
		Кредитоспособность);
	
	// Комментарии к диаграмме
	ОбластиМакета.Кредитоспособность.Параметры.Заполнить(Показатели);
	ОбластиМакета.Кредитоспособность.Параметры.Кредитоспособность = Кредитоспособность;
	КарточкаФинансовогоАнализа.Кредитоспособность.Значение = Показатели.ПояснениеОценкиКредитоспособность;
	
	Если Показатели.ОценкаКредитоспособность = "ПлохаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаКредитоспособность = "ХорошаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВажнойНадписиБИП;
	КонецЕсли;
	
	ОбластиМакета.Кредитоспособность.Области.ПояснениеОценкиКредитоспособность.ЦветТекста = ЦветТекста;
	КарточкаФинансовогоАнализа.Кредитоспособность.ЦветТекста = ЦветТекста;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Кредитоспособность);

	// Свернуто
	Расшифровка = Новый Структура(
		"Действие,ИмяДокумента,ИмяОбласти",
		"Показать",
		"РезультатФинансовыйАнализ",
		"Кредитоспособность");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "Кредитоспособность";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.КредитоспособностьРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.КредитоспособностьПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	// Скрыть расчет
	Расшифровка = Новый Структура(
		"Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть",
		"РезультатФинансовыйАнализ",
		"Кредитоспособность");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьАктивов(
		ТабличныйДокумент,
		СтрокаДанных,
		ПараметрыВывода,
		КарточкаФинансовогоАнализа)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьАктивов;
	КоличествоЛет = Показатели.КоличествоЛет;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	КлючКрайнегоГода = "" + (КоличествоЛет - 1);
	РентабельностьАктивов = ?(Показатели.Свойство("РентабельностьАктивов_" + КлючКрайнегоГода), Показатели["РентабельностьАктивов_" + КлючКрайнегоГода], 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов3_" + КлючКрайнегоГода), Показатели["РентабельностьАктивов3_" + КлючКрайнегоГода], 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов4_" + КлючКрайнегоГода), Показатели["РентабельностьАктивов4_" + КлючКрайнегоГода], 0);
	ОбластьРентабельностьАктивов = ?(СредняяРентабельность = 0,
		ОбластиМакета.РентабельностьАктивов0,
		ОбластиМакета.РентабельностьАктивов);
	
	Если СредняяРентабельность = 0 Тогда
		Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов0.Объект;
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = СредняяРентабельность;
		Интервал.Конец = 9999;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
	Иначе
		Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов.Объект;
		Диаграмма.МинимальноеЗначение = 0;
		МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
		МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
			?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
			?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
		Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 0;
		Интервал.Конец = ПредельнаяРентабельность;
		Интервал.Цвет = WebЦвета.Красный;
		Интервал.ПроцентПолупрозрачности = 60;

		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = ПредельнаяРентабельность;
		Интервал.Конец = СредняяРентабельность;
		Интервал.Цвет = WebЦвета.Желтый;
		Интервал.ПроцентПолупрозрачности = 60;

		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = СредняяРентабельность;
		Интервал.Конец = МаксимальноеЗначение;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		ИнформационнаяЛиния = Диаграмма.ИнформационныеЛинииЗначений.Добавить();
		ИнформационнаяЛиния.Значение = СредняяРентабельность;
		ИнформационнаяЛиния.Подсказка = НСтр("ru='Средняя рентабельность'");
		ИнформационнаяЛиния.Цвет = WebЦвета.ТемноОранжевый;
		ИнформационнаяЛиния.ОбластьПодписи.ЦветТекста = ИнформационнаяЛиния.Цвет;
		ИнформационнаяЛиния.ПроцентПолупрозрачности = 60;
		ИнформационнаяЛиния.Линия = Новый Линия(ТипЛинииДиаграммы.Точечная, 3);
		
	КонецЕсли;
	
	Диаграмма.КоличествоТочек = КоличествоЛет;
	
	ОсновнаяСерия = Диаграмма.Серии[0];
	ОсновнаяСерия.Текст = НСтр("ru='Рентабельность активов'");
	ОсновнаяСерия.Цвет = ЦветаСтиля.ЦветСерииФинансовогоАнализа;
	ОсновнаяСерия.Маркер = ТипМаркераДиаграммы.Круг;
	ОсновнаяСерия.Индикатор = Истина;
	
	ПредыдущееЗначение = Неопределено;
	Для КлючГода = 0 По КоличествоЛет - 1 Цикл
		Если Не Показатели.Свойство("Год_" + КлючГода) Тогда
			Продолжить;
		КонецЕсли;
		Диаграмма.Точки[КлючГода].Текст = Показатели["Год_" + КлючГода];
		ТекущееЗначение = Показатели["РентабельностьАктивов_" + КлючГода];
		Диаграмма.УстановитьЗначение(
			КлючГода,
			ОсновнаяСерия,
			ТекущееЗначение,
			,
			ПодсказкаРазницыВДиаграмме(ТекущееЗначение, ПредыдущееЗначение));
		ПредыдущееЗначение = ТекущееЗначение;
		
	КонецЦикла;
	
	// Комментарии к диаграмме
	ОбластьРентабельностьАктивов.Параметры.Заполнить(Показатели);
	ОбластьРентабельностьАктивов.Параметры.РентабельностьАктивов = РентабельностьАктивов;
	ОбластьПояснениеОценки = ?(СредняяРентабельность = 0,
		ОбластьРентабельностьАктивов.Области.ПояснениеОценкиРентабельностьАктивов0,
		ОбластьРентабельностьАктивов.Области.ПояснениеОценкиРентабельностьАктивов);
	КарточкаФинансовогоАнализа.РентабельностьАктивов.Значение = Показатели.ПояснениеОценкиРентабельностьАктивов;
	
	Если Показатели.ОценкаРентабельностьАктивов = "ПлохаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРентабельностьАктивов = "ХорошаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВажнойНадписиБИП;
	КонецЕсли;
	ОбластьПояснениеОценки.ЦветТекста = ЦветТекста;
	КарточкаФинансовогоАнализа.РентабельностьАктивов.ЦветТекста = ЦветТекста;
	
	ТабличныйДокумент.Вывести(ОбластьРентабельностьАктивов);

	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "РентабельностьАктивов");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РентабельностьАктивов";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.РентабельностьАктивовРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.РентабельностьАктивовПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "РентабельностьАктивов");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьПродаж(
		ТабличныйДокумент,
		СтрокаДанных,
		ПараметрыВывода,
		КарточкаФинансовогоАнализа)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьПродаж;
	КоличествоЛет = Показатели.КоличествоЛет;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	КлючКрайнегоГода = "" + (КоличествоЛет - 1);
	РентабельностьПродаж  = ?(Показатели.Свойство("РентабельностьПродаж_" + КлючКрайнегоГода), Показатели["РентабельностьПродаж_" + КлючКрайнегоГода], 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж3_" + КлючКрайнегоГода), Показатели["РентабельностьПродаж3_" + КлючКрайнегоГода], 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж4_" + КлючКрайнегоГода), Показатели["РентабельностьПродаж4_" + КлючКрайнегоГода], 0);
	ОбластьРентабельностьПродаж = ?(СредняяРентабельность = 0,
		ОбластиМакета.РентабельностьПродаж0,
		ОбластиМакета.РентабельностьПродаж);
	Если СредняяРентабельность = 0 Тогда
	
		Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж0.Объект;
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = СредняяРентабельность;
		Интервал.Конец = 9999;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
		
	Иначе
		
		Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж.Объект;
		Диаграмма.МинимальноеЗначение = 0;
		
		МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
		МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
			?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
			?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
		Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
		
		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = 0;
		Интервал.Конец = ПредельнаяРентабельность;
		Интервал.Цвет = WebЦвета.Красный;
		Интервал.ПроцентПолупрозрачности = 60;

		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = ПредельнаяРентабельность;
		Интервал.Конец = СредняяРентабельность;
		Интервал.Цвет = WebЦвета.Желтый;
		Интервал.ПроцентПолупрозрачности = 60;

		Интервал = Диаграмма.ИнформационныеИнтервалыЗначений.Добавить();
		Интервал.Начало = СредняяРентабельность;
		Интервал.Конец = МаксимальноеЗначение;
		Интервал.Цвет = WebЦвета.Зеленый;
		Интервал.ПроцентПолупрозрачности = 60;
		
		ИнформационнаяЛиния = Диаграмма.ИнформационныеЛинииЗначений.Добавить();
		ИнформационнаяЛиния.Значение = СредняяРентабельность;
		ИнформационнаяЛиния.Подсказка = НСтр("ru='Средняя рентабельность'");
		ИнформационнаяЛиния.Цвет = WebЦвета.ТемноОранжевый;
		ИнформационнаяЛиния.ОбластьПодписи.ЦветТекста = ИнформационнаяЛиния.Цвет;
		ИнформационнаяЛиния.ПроцентПолупрозрачности = 60;
		ИнформационнаяЛиния.Линия = Новый Линия(ТипЛинииДиаграммы.Точечная, 3);
		
	КонецЕсли;
	
	Диаграмма.КоличествоТочек = КоличествоЛет;
	
	ОсновнаяСерия = Диаграмма.Серии[0];
	ОсновнаяСерия.Текст = НСтр("ru='Рентабельность продаж'");
	ОсновнаяСерия.Цвет = ЦветаСтиля.ЦветСерииФинансовогоАнализа;
	ОсновнаяСерия.Маркер = ТипМаркераДиаграммы.Круг;
	ОсновнаяСерия.Индикатор = Истина;
	
	ПредыдущееЗначение = Неопределено;
	Для КлючГода = 0 По КоличествоЛет - 1 Цикл
		Если Не Показатели.Свойство("Год_" + КлючГода) Тогда
			Продолжить;
		КонецЕсли;
		Диаграмма.Точки[КлючГода].Текст = Показатели["Год_" + КлючГода];
		ТекущееЗначение = Показатели["РентабельностьПродаж_" + КлючГода];
		Диаграмма.УстановитьЗначение(
			КлючГода,
			ОсновнаяСерия,
			ТекущееЗначение,
			,
			ПодсказкаРазницыВДиаграмме(ТекущееЗначение, ПредыдущееЗначение));
		ПредыдущееЗначение = ТекущееЗначение;
		
	КонецЦикла;
	
	// Комментарии к диаграмме
	ОбластьРентабельностьПродаж.Параметры.Заполнить(Показатели);
	ОбластьРентабельностьПродаж.Параметры.РентабельностьПродаж = РентабельностьПродаж;
	ОбластьПояснениеОценки = ?(СредняяРентабельность = 0,
		ОбластьРентабельностьПродаж.Области.ПояснениеОценкиРентабельностьПродаж0,
		ОбластьРентабельностьПродаж.Области.ПояснениеОценкиРентабельностьПродаж);
	КарточкаФинансовогоАнализа.РентабельностьПродаж.Значение = Показатели.ПояснениеОценкиРентабельностьПродаж;
	
	Если Показатели.ОценкаРентабельностьПродаж = "ПлохаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРентабельностьПродаж = "ХорошаяОценка" Тогда
		ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветВажнойНадписиБИП;
	КонецЕсли;
	
	ОбластьПояснениеОценки.ЦветТекста = ЦветТекста;
	КарточкаФинансовогоАнализа.РентабельностьПродаж.ЦветТекста = ЦветТекста;
	
	ТабличныйДокумент.Вывести(ОбластьРентабельностьПродаж);
	
	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "РентабельностьПродаж");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);
	
	// Развернуто
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РентабельностьПродаж";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.РентабельностьПродажРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.РентабельностьПродажПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "РентабельностьПродаж");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Функция НоваяТаблицаФинансовыйАнализ()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ГодОтчетности",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПоказателиРискБанкротства");         // Структура
	Результат.Колонки.Добавить("ПоказателиКредитоспособность");      // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьАктивов");   // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьПродаж");    // Структура
	Возврат Результат;

КонецФункции

Функция ПодсказкаРазницыВДиаграмме(
		ТекущееЗначение,
		ПредыдущееЗначение = Неопределено,
		Множитель = 1)
	
	Если ПредыдущееЗначение <> Неопределено
		И ПредыдущееЗначение <> 0 Тогда
		
		Разница = ТекущееЗначение - ПредыдущееЗначение;
		Процент = Окр(Разница / ПредыдущееЗначение * 100);
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Процент * Множитель < 0 Тогда
		ИмяКартинки = "ДосьеУменьшениеПоказателя";
	Иначе
		ИмяКартинки = "ДосьеУвеличениеПоказателя";
	КонецЕсли;
	
	Результат = СтроковыеФункции.ФорматированнаяСтрока(
		"<b>%1</b>(<img src=%2>%3%)",
		ТекущееЗначение,
		ИмяКартинки,
		Процент);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура СформироватьРезультатГлавное(
		Сведения,
		ИНН,
		ДанныеОтчета,
		ДанныеПроверкиКонтрагента)
	
	ОбщиеСведения = ДанныеПроверкиКонтрагента.РезультатОбщиеСведения;
	
	ОбщиеСведения.Вставить("НаименованиеСокращенное", Сведения.НаименованиеСокращенное);
	ОбщиеСведения.Вставить("ИНН", Сведения.ИНН);
	ОбщиеСведения.Вставить("РегистрационныйНомер", Сведения.РегистрационныйНомер);
	ОбщиеСведения.Вставить("НаименованиеПолное", Сведения.НаименованиеПолное);
	ОбщиеСведения.Вставить("Статус", Сведения.Статус);
	ОбщиеСведения.Вставить("ДатаРегистрации", Сведения.ДатаРегистрации);
	ОбщиеСведения.Вставить("РегистрацияВПенсионномФонде", Сведения.РегистрацияВПенсионномФонде);
	ОбщиеСведения.Вставить("РегистрацияВФСС", Сведения.РегистрацияВФСС);
	ОбщиеСведения.Вставить("РегистрацияВНалоговомОргане", Сведения.РегистрацияВНалоговомОргане);
	
	Если ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		ОбщиеСведения.Вставить("КПП", Сведения.КПП);
		ОбщиеСведения.Вставить("УставныйКапитал", Сведения.УставныйКапитал);
		ОбщиеСведения.Вставить("ДатаПрекращенияДеятельности", Сведения.ДатаПрекращенияДеятельности);
		ОбщиеСведения.Вставить("ЮридическийАдрес", Сведения.ЮридическийАдрес);
		ОбщиеСведения.Вставить("ОрганизацииПоАдресу", Сведения.ОрганизацииПоАдресу);
		ОбщиеСведения.Вставить("ДанныеРуководителей", Сведения.ДанныеРуководителей);
		ОбщиеСведения.Вставить("ДанныеУчредителей", Сведения.ДанныеУчредителей);
		ОбщиеСведения.Вставить("Руководитель", Сведения.Руководитель);
		ОбщиеСведения.Вставить("Учредители", Сведения.Учредители);
		ОбщиеСведения.Вставить("ОткрытыеГосударственныеДанныеФНС", Сведения.ОткрытыеГосударственныеДанныеФНС);
	Иначе
		ОбщиеСведения.Вставить("КПП",                              Неопределено);
		ОбщиеСведения.Вставить("УставныйКапитал",                  Неопределено);
		ОбщиеСведения.Вставить("ДатаПрекращенияДеятельности",      Неопределено);
		ОбщиеСведения.Вставить("ЮридическийАдрес",                 Неопределено);
		ОбщиеСведения.Вставить("ДанныеРуководителей",              Неопределено);
		ОбщиеСведения.Вставить("Учредители",                       Неопределено);
		ОбщиеСведения.Вставить("ОткрытыеГосударственныеДанныеФНС", Неопределено);
	КонецЕсли;
	
	ОбщиеСведения.Вставить("ИзмененияВРеестре", Сведения.ИзмененияВРеестре);
	
	ДанныеПроверкиКонтрагента.Вставить("РезультатОбщиеСведения", ОбщиеСведения);
	
КонецПроцедуры

#Область ПроверкиКонтролирующимиОрганами

Процедура СформироватьРезультатПроверкиКонтролирующимиОрганами(
		Проверки,
		ДанныеОтчета,
		ДанныеПроверки,
		ОписаниеОшибки)
	
	КарточкаПроверки = НовыйКарточкаПроверки();
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		КарточкаПроверки.Описание   = ОписаниеОшибки;
		КарточкаПроверки.ЕстьДанные = Ложь;
		ДанныеПроверки.Вставить("КарточкаПроверки", КарточкаПроверки);
	Иначе
		КарточкаПроверки.Описание   = ИнформацияОПроверках(ДанныеПроверки, Проверки);
		КарточкаПроверки.ЕстьДанные =
			(Проверки <> Неопределено
				И Проверки.Количество() > 0);
		ДанныеПроверки.Вставить("КарточкаПроверки", КарточкаПроверки);
	КонецЕсли;
	
	Если Не КарточкаПроверки.ЕстьДанные Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("Проверки");
	ОбластиРасшифровки = НоваяТаблицаОбластиРасшифровки();
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	ТаблицаПериоды = Проверки.Скопировать(, "ПериодПроверки");
	ТаблицаПериоды.Свернуть("ПериодПроверки");
	ТаблицаПериоды.Сортировать("ПериодПроверки");
	Проверки.Индексы.Добавить("ПериодПроверки");
	НомерПроверки = 0;
	
	Для Каждого СтрокаПериода Из ТаблицаПериоды Цикл
		
		// Период
		ОбластиМакета.ПериодПроверки.Параметры.Заполнить(СтрокаПериода);
		ТабличныйДокумент.Вывести(ОбластиМакета.ПериодПроверки);
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
		
		// Проверки
		ОтборПоПериоду = Новый Структура("ПериодПроверки", СтрокаПериода.ПериодПроверки);
		ПроверкиПериода = Проверки.Скопировать(ОтборПоПериоду);
		ПроверкиПериода.Сортировать("ДатаПроверки,КонтролирующийОрган");
		Для Каждого СтрокаПроверки Из ПроверкиПериода Цикл
			НомерПроверки = НомерПроверки + 1;
			Проверка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2",
				СтрокаПроверки.КонтролирующийОрган,
				?(СтрокаПроверки.ПлановаяПроверка, НСтр("ru='плановая проверка'"), НСтр("ru='внеплановая проверка'")));
			ОбластиМакета.Проверка.Параметры.Проверка = Проверка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Проверка);
			ОбластиМакета.ОписаниеПроверки.Параметры.Заполнить(СтрокаПроверки);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОписаниеПроверки);
			Если ЗначениеЗаполнено(СтрокаПроверки.ЦельПроверки) Тогда
				ОбластиМакета.ЦельПроверки.Параметры.Заполнить(СтрокаПроверки);
				ТабличныйДокумент.Вывести(ОбластиМакета.ЦельПроверки);
			КонецЕсли;
			ОбластиМакета.РезультатПроверки.Параметры.Заполнить(СтрокаПроверки);
			ТабличныйДокумент.Вывести(ОбластиМакета.РезультатПроверки);
			
			// Нарушения
			ЕстьНарушения = СтрокаПроверки.Нарушения.Количество() > 0;
			Если ЕстьНарушения Тогда
				
				// Свернуто
				ИмяОбластиРасшифровки = "Проверка" + Формат(НомерПроверки, "ЧГ=");
				Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
					"Показать", "РезультатПроверки", ИмяОбластиРасшифровки);
				ОбластиМакета.ПоказатьНарушения.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьНарушения);
			
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				Для каждого СтрокаНарушения Из СтрокаПроверки.Нарушения Цикл
					ОбластиМакета.НомерНарушения.Параметры.Заполнить(СтрокаНарушения);
					ТабличныйДокумент.Вывести(ОбластиМакета.НомерНарушения);
					Если ЗначениеЗаполнено(СтрокаНарушения.Нарушение) Тогда
						ОбластиМакета.Нарушение.Параметры.Заполнить(СтрокаНарушения);
						ТабличныйДокумент.Вывести(ОбластиМакета.Нарушение);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаНарушения.НарушенныйАкт) Тогда
						ОбластиМакета.НарушенныйАкт.Параметры.Заполнить(СтрокаНарушения);
						ТабличныйДокумент.Вывести(ОбластиМакета.НарушенныйАкт);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаНарушения.Предписание) Тогда
						ОбластиМакета.Предписание.Параметры.Заполнить(СтрокаНарушения);
						ТабличныйДокумент.Вывести(ОбластиМакета.Предписание);
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаНарушения.Исполнение) Тогда
						ОбластиМакета.Исполнение.Параметры.Заполнить(СтрокаНарушения);
						ТабличныйДокумент.Вывести(ОбластиМакета.Исполнение);
					КонецЕсли;
				КонецЦикла;
				
				Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
					"Свернуть", "РезультатПроверки", ИмяОбластиРасшифровки);
				ОбластиМакета.СвернутьНарушения.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.СвернутьНарушения);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластиРасшифровки.ЗаполнитьЗначения("РезультатПроверки", "ИмяДокумента");
	Для Каждого СтрокаТаблицы Из ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеПроверки.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеПроверки.Вставить("РезультатПроверки", ТабличныйДокумент);
	ДанныеПроверки.Вставить("ИмяФайлаПроверки",
		СтроковыеФункции.СтрокаЛатиницей(
			НСтр("ru='Карточка - проверки'")));
	
КонецПроцедуры

Функция ИнформацияОПроверках(ДанныеПроверки, Проверки)
	
	Если Проверки = Неопределено Тогда
		Возврат НСтр("ru='Сведения о результатах проверок отсутствуют'");
	КонецЕсли;
	
	ВсегоПроверок = Проверки.Количество();
	Если ВсегоПроверок = 0 Тогда
		Возврат НСтр("ru='Сведения о результатах проверок отсутствуют'");
	КонецЕсли;
		
	ПроверокСНарушениями = 0;
	Для Каждого СтрокаПроверки Из Проверки Цикл
		Если СтрокаПроверки.Нарушения.Количество() > 0 Тогда
			ПроверокСНарушениями = ПроверокСНарушениями + 1;
		КонецЕсли;
	КонецЦикла;
	Если ПроверокСНарушениями = 0 Тогда
		ШаблонТекста = "";
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок, нарушений не выявлено;'");
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверки, нарушений не выявлено;'");
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок, нарушений не выявлено;'");
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок, нарушений не выявлено;'");
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок, нарушений не выявлено;'");
		ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок, нарушений не выявлено'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Известны результаты %1'"),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				ШаблонТекста,
				ВсегоПроверок));
	Иначе
		ТекстПроверки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru='%1 проверок;%1 проверки;%1 проверок;%1 проверок;%1 проверок;%1 проверок'"),
			ВсегоПроверок);
		Если ВсегоПроверок = 1 Тогда
			ТекстНарушения = НСтр("ru='выявлены нарушения'");
		ИначеЕсли ВсегоПроверок = ПроверокСНарушениями Тогда
			ТекстНарушения = НСтр("ru='все проверки выявили нарушения'");
		Иначе
			ШаблонТекста = "";
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок выявила нарушения;'");
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверка выявила нарушение;'");
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверки выявили нарушения;'");
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверки выявили нарушения;'");
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверки выявили нарушения;'");
			ШаблонТекста = ШаблонТекста + НСтр("ru='%1 проверок выявили нарушения'");
			ТекстНарушения = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				ШаблонТекста,
				ПроверокСНарушениями);
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Известны результаты %1, %2'"), ТекстПроверки, ТекстНарушения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйКарточкаПроверки()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДанные", Ложь);
	Результат.Вставить("Описание");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ВсеОбластиМакета(ИмяМакета)
	
	Макет     = ПолучитьМакет(ИмяМакета);
	Результат = Новый Структура;
	Для Каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ВалютаБухгалтерскойОтчетности(КодВалютыОтчетности)
	
	Если КодВалютыОтчетности = "383" Тогда
		Возврат НСтр("ru='В рублях'");
	ИначеЕсли КодВалютыОтчетности = "384" Тогда
		Возврат НСтр("ru='В тысячах рублей'");
	Иначе // "385"
		Возврат НСтр("ru='В миллионах рублей'");
	КонецЕсли;

КонецФункции

Функция ЕстьДанныеДляФормыОтчетности(Показатели, КодФормы)

	Для Каждого Показатель Из Показатели Цикл
		Если Сред(Показатель.Ключ, 2, 1) = КодФормы 
			И Показатель.Значение <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Процедура ВывестиСтрокуЕще(
		ТабличныйДокумент,
		ОбластиМакета,
		ИмяДокумента,
		ИмяОбластиРасшифровки,
		КоличествоВсего)
	
	Если КоличествоВсего = 0 Тогда
		ТекстЕще = НСтр("ru='Еще'");
	Иначе
		ТекстЕще = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Еще %1'"),
			КоличествоВсего - 1);
	КонецЕсли;
	ОбластиМакета.Еще.Параметры.ТекстЕще = ТекстЕще;
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", ИмяДокумента, ИмяОбластиРасшифровки);
	ОбластиМакета.Еще.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.Еще);

КонецПроцедуры

#Область СобытияМониторинга

Процедура СформироватьРезультатСобытияМониторинга(
	ИнформацияОСобытияхМониторинга,
	ДанныеСобытияМониторинга,
	ПараметрыЗапроса = Неопределено,
	НомерСтраницы = 0)
	
	КарточкаСобытияМониторинга = НовыйКарточкаСобытияМониторинга();
	Если Не ИнформацияОСобытияхМониторинга.ВидОшибки.Пустая() Тогда
		КарточкаСобытияМониторинга.ЗначенияСобытийМониторинга = СкрытыеЗначенияСобытийМониторинга();
		Если Не ИнформацияОСобытияхМониторинга.ИспользованиеРазрешено Тогда
			КарточкаСобытияМониторинга.ИспользованиеРазрешено = Ложь;
		КонецЕсли;
		ДанныеСобытияМониторинга.Вставить("КарточкаСобытияМониторинга", КарточкаСобытияМониторинга);
		Возврат;
	КонецЕсли;
	
	КарточкаСобытияМониторинга.ЗначенияСобытийМониторинга = ИнформацияОСобытияхМониторинга.ЗначенияСобытийМониторинга;
	ДанныеСобытияМониторинга.Вставить("КарточкаСобытияМониторинга", КарточкаСобытияМониторинга);
	
	Если ИнформацияОСобытияхМониторинга.ЗначенияСобытийМониторинга.ДоступЗапрещен
		Или ИнформацияОСобытияхМониторинга.ЗначенияСобытийМониторинга.СобытияМониторинга.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСобытияМониторинга = Новый ТабличныйДокумент;
	ДанныеСобытияМониторинга.РезультатСобытияМониторинга = РезультатСобытияМониторинга;
	
	ВывестиРезультатСобытияМониторинга(
		ДанныеСобытияМониторинга,
		ИнформацияОСобытияхМониторинга,
		НомерСтраницы);
	
	ДанныеСобытияМониторинга.Вставить("ИмяФайлаСобытияМониторинга",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИНН %1 - события мониторинга СПАРК'"),
				ИнформацияОСобытияхМониторинга.ИНН)));
	
КонецПроцедуры

Функция НовыйКарточкаСобытияМониторинга()
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользованиеРазрешено", Истина);
	Результат.Вставить("ЗначенияСобытийМониторинга", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

Функция СкрытыеЗначенияСобытийМониторинга()
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН", "");
	Результат.Вставить("ДоступЗапрещен", Истина);
	Результат.Вставить("СобытияМониторинга", СкрытыеСобытияМониторинга());
	
	Возврат Результат;
	
КонецФункции

Функция СкрытыеСобытияМониторинга()
	
	Результат = Новый Массив;
	Для Индекс = 1 По 3 Цикл
		Результат.Добавить(
			Новый Структура(
				"Дата, Описание, Критическое",
				"░░.░░.░░░░",
				"",
				Ложь));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиРезультатСобытияМониторинга(
	ДанныеСобытияМониторинга,
	ИнформацияОСобытияхМониторинга,
	НомерТекущейСтраницы)
	
	РезультатСобытияМониторинга = ДанныеСобытияМониторинга.РезультатСобытияМониторинга;
	Если ПустаяСтрока(ИнформацияОСобытияхМониторинга.ТекстОшибки) Тогда
		
		ОбластиМакета = ВсеОбластиМакета("СобытияМониторинга");
		РезультатСобытияМониторинга.Вывести(ОбластиМакета.СобытияМониторингаШапка);
		ЗначенияСобытийМониторинга = ИнформацияОСобытияхМониторинга.ЗначенияСобытийМониторинга;
		
		Для Каждого Событие Из ЗначенияСобытийМониторинга.СобытияМониторинга Цикл
			
			ИмяОбласти = "СобытияМониторингаСтрока";
			Если Событие.Критическое Тогда
				ИмяОбласти = ИмяОбласти + "Критическое";
			КонецЕсли;
			
			Если ПустаяСтрока(Событие.СтароеЗначение) Тогда
				ИмяОбласти = ИмяОбласти + "Краткое";
			КонецЕсли;
			
			ОбластьМакетаСтрока = ОбластиМакета[ИмяОбласти];
			ОбластьМакетаСтрока.Параметры.Заполнить(Событие);
			РезультатСобытияМониторинга.Вывести(ОбластьМакетаСтрока);
			
		КонецЦикла;
		
		ДанныеСобытияМониторинга.НомерСледующейСтраницы = ЗначенияСобытийМониторинга.НомерСледующейСтраницы;
		ВыводитьНазад = НомерТекущейСтраницы > 0;
		ВыводитьДалее = ДанныеСобытияМониторинга.НомерСледующейСтраницы <> Неопределено;
		Если ВыводитьДалее Тогда
			Если ВыводитьНазад Тогда
				ОбластиМакета.СобытияМониторингаНазадДалее.Параметры.Далее = НомерТекущейСтраницы + 1;
				ОбластиМакета.СобытияМониторингаНазадДалее.Параметры.Назад = НомерТекущейСтраницы - 1;
				РезультатСобытияМониторинга.Вывести(ОбластиМакета.СобытияМониторингаНазадДалее);
			Иначе
				ОбластиМакета.СобытияМониторингаДалее.Параметры.Далее = НомерТекущейСтраницы + 1;
				РезультатСобытияМониторинга.Вывести(ОбластиМакета.СобытияМониторингаДалее);
			КонецЕсли;
		ИначеЕсли ВыводитьНазад Тогда
			ОбластиМакета.СобытияМониторингаНазад.Параметры.Назад = НомерТекущейСтраницы - 1;
			РезультатСобытияМониторинга.Вывести(ОбластиМакета.СобытияМониторингаНазад);
		КонецЕсли;
		
	Иначе
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ИмяОбласти = "НеизвестнаяОшибкаОткрытиеЖурналаРегистрации";
		Иначе
			ИмяОбласти = "НеизвестнаяОшибка";
		КонецЕсли;
		
		Область = Обработки.ПроверкаКонтрагента.ПолучитьМакет("ОшибкиПроверкиКонтрагента").ПолучитьОбласть(ИмяОбласти);
		Если ИмяОбласти = "НеизвестнаяОшибкаОткрытиеЖурналаРегистрации" Тогда
			Область.Параметры.ОткрытьЖурналРегистрации = "ОткрытьЖурналРегистрации";
		КонецЕсли;
		
		РезультатСобытияМониторинга.Вывести(Область);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ОбновитьСобытияМониторингСПАРК(
		ИНН,
		ВидКонтрагента,
		ПараметрыЗапроса,
		НомерСтраницы) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатСобытияМониторинга", Неопределено);
	Результат.Вставить("НомерСледующейСтраницы", Неопределено);
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		Возврат Результат;
	КонецЕсли;
	
	МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	ИнформацияОСобытияхМониторинга = МодульСПАРКРиски.СобытияМониторингаСПАРККонтрагента(
		ИНН,
		ВидКонтрагента,
		ПараметрыЗапроса);
	
	СформироватьРезультатСобытияМониторинга(
		ИнформацияОСобытияхМониторинга,
		Результат,
		ПараметрыЗапроса,
		НомерСтраницы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли