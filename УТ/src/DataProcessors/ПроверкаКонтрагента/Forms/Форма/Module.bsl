///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОтключитьФормированиеОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		ТекстОшибки = НСтр("ru = 'Не внедрена подсистема ""Работа с контрагентами""'");
		ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		СПАРКРискиСуществует = Истина;
	КонецЕсли;
	
	МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
	
	// Подготовка временного хранилища для сохранения промежуточных результатов.
	АдресХранилищаДанныеПроверкиКонтрагента = ПоместитьВоВременноеХранилище(
		Неопределено,
		УникальныйИдентификатор);
	АдресХранилищаДанныеПроверки = ПоместитьВоВременноеХранилище(
		Неопределено,
		УникальныйИдентификатор);
	Если СПАРКРискиСуществует Тогда
		АдресХранилищаДанныеСобытияМониторинга = ПоместитьВоВременноеХранилище(
			Неопределено,
			УникальныйИдентификатор);
	КонецЕсли;
	
	ВажнаяНадписьШрифт   = ШрифтыСтиля.ВажнаяНадписьШрифт;
	ШрифтОбычнаяНадписьПроверкиКонтрагента = ШрифтыСтиля.ШрифтОбычнаяНадписьПроверкиКонтрагента;
	ШрифтВажнаяНадписьПроверкиКонтрагента  = ШрифтыСтиля.ШрифтВажнаяНадписьПроверкиКонтрагента;
	
	СкрытьЭлементыПриСоздании();
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если Не ЭтоМобильныйКлиент Тогда
		ИнформацияЭкранов = ПолучитьИнформациюЭкрановКлиента();
		ШиринаЭкрана = 999999;
		Для Каждого ИнформацияЭкрана Из ИнформацияЭкранов Цикл
			ШиринаЭкрана = Мин(ШиринаЭкрана, ИнформацияЭкрана.Ширина);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		ИННКонтрагента = ЗначениеИННКонтрагента(Параметры.Контрагент);
		Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
			СтрокаПоиска = ИННКонтрагента;
			Контрагент   = Параметры.Контрагент;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИНН) Тогда
		СтрокаПоиска = Параметры.ИНН;
	КонецЕсли;
	
	СвойстваСправочниковКонтрагентов = МодульРаботаСКонтрагентами.СвойстваСправочниковКонтрагентов();
	ИспользоватьДобавлениеВСправочник =
		(СвойстваСправочниковКонтрагентов.Найти(Ложь, "ОтключитьСозданиеИзДосьеКонтрагента") <> Неопределено);
	
	ПоискПоИНН = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоиска);
	Если ПоискПоИНН
		И (СтрДлина(СтрокаПоиска) = 10
		ИЛИ СтрДлина(СтрокаПоиска) = 12) Тогда
		ИННПоиска = СтрокаПоиска;
		ЭтоЮридическоеЛицо = СтрДлина(ИННПоиска) = 10;
		СформироватьОтчетНаСервере();
	Иначе
		ЭтоЮридическоеЛицо = Истина;
		УправлениеФормойНаСервере();
	КонецЕсли;
	
	АдаптироватьФормуПодМобильныйКлиент();
	
	УведомленияПользователя = Новый Структура();
	ПоказатьУведомления();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСводка;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если СПАРКРискиСуществует Тогда
		
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
		ВидКонтрагентаСПАРКРиски = ?(ЭтоЮридическоеЛицо,
			ОбщегоНазначения.ПредопределенныйЭлемент(
				"Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо"),
			ОбщегоНазначения.ПредопределенныйЭлемент(
				"Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель"));
		
		Если Контрагент = Неопределено Тогда
			МодульСПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				,
				ИННПоиска,
				ВидКонтрагентаСПАРКРиски,
				ПараметрыОтображения);
		Иначе
			МодульСПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				,
				Контрагент,
				ВидКонтрагентаСПАРКРиски,
				ПараметрыОтображения);
		КонецЕсли;
	
	КонецЕсли;
	
	НастроитьТабличныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Элементы.СтраницаФормированиеОтчета.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеОтчета;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
				ПараметрыОжидания);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбОшибке", 0.1, Истина);
	ИначеЕсли ОжиданиеОтвета Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 1.5, Истина);
		Элементы.СтраницаФормированиеОтчета.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеОтчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		Или ОжиданиеОтвета Тогда
		ТекущийЭлемент = Элементы.Сводка;
	Иначе
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.ГруппаСводка,
			Элементы.Сводка));
	
	Если СПАРКРискиСуществует Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СПАРКРискиСуществует Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ОбработкаОповещения(
			ЭтотОбъект,
			Неопределено,
			ИмяСобытия,
			Параметр,
			Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСформироватьНажатие(Элемент)
	
	Если ОтключитьФормированиеОтчета <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""ИНН или наименование контрагента"" не заполнено'"), , "СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте(СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДляПереходаНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СервисыКартографии = Новый СписокЗначений;
	СервисыКартографии.Добавить("ЯндексКарты", "Яндекс.Карты");
	СервисыКартографии.Добавить("GoogleMaps", "Google Карты");
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Адрес", АдресДляПереходаНаКарту);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьНаКартеНажатиеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВыборИзМеню(Оповещение, СервисыКартографии, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРуководитель0СведенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СвязанныеОрганизации(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияКППНажатие(Элемент)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияКПП,
			Элементы.ИзмененияКПП));
	Элементы.ИзмененияКПП.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	СформироватьОтчетНаКлиенте(СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАнализОтчетностиПодробнееНажатие(Элемент)
	
	ОтчетностьПоБлокам(Неопределено);
	АнализОтчетности(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеВидыДеятельностиНажатие(Элемент)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыДеятельности Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаВидыДеятельности,
			Элементы.ВидыДеятельности));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеСобытияМониторингаНажатие(Элемент)
	
	СобытияМониторинга(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьВсеСправкиСПАРКНажатие(Элемент)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(, , НСтр("ru = 'Переход на Портал 1С:ИТС'"));
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуИнтегрированногоСайта(
		МодульСПАРКРискиКлиент.АдресСтраницыЛичныйКабинетВсеСправки(),
		НСтр("ru = 'Справки 1СПАРК Риски'"));
	Состояние();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияРуководителяНажатие(Элемент)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияРуководителя,
			Элементы.ИзмененияРуководителя));
	Элементы.ИзмененияРуководителя.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияАдресНажатие(Элемент)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияАдрес,
			Элементы.ИзмененияАдрес));
	Элементы.ИзмененияАдрес.Видимость = Истина;
	
КонецПроцедуры

#Область СправкиСПАРКРиски

&НаКлиенте
Процедура ДекорацияЗапроситьСправкуСПАРКНажатие(Элемент)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Контрагент с ИНН %1 не создан.'"),
				НайденныйИНН));
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОткрытьСписокСправок1СПАРКРиски(Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктуальнаяСправкаСПАРКНажатие(Элемент)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если АктуальнаяСправка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	СПАРКРискиКлиент.ОткрытьСправкуСПАРКРиски(
		Неопределено,
		АктуальнаяСправка,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СвязанныеОрганизации

&НаКлиенте
Процедура ДекорацияСвязаннаяОрганизацияВсеНажатие(Элемент)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаСвязанныеОрганизации,
			Элементы.СвязанныеОрганизации));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязаннаяОрганизация0ОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверкаКонтрагентаКлиент.Проверить(
		НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязаннаяОрганизация1ОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверкаКонтрагентаКлиент.Проверить(
		НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязаннаяОрганизация2ОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверкаКонтрагентаКлиент.Проверить(
		НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияПереходВВебВерсиюСПАРКОписаниеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Данные еще не записаны.
			|Переход в веб-версию СПАРК возможен только после записи данных.'"));
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ПерейтиВВебВерсиюСПАРК(
		Контрагент,
		Неопределено,
		Истина);
	
КонецПроцедуры

#Область ИндексыСПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтатусЗначениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСводныйИндикаторОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИДОЗначениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИФРЗначениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИПДЗначениеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереданаБухгалтерскаяОтчетностьОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОписаниеОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИсполнительныеПроизводстваПриИзменении(Элемент)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура(
		"ВключитьИсполнительныеПроизводства, ВключитьКритичные",
		?(ИсполнительныеПроизводства, Истина, Неопределено),
		?(ТолькоКритичные, Истина, Неопределено));
	ОбновитьСобытияМониторингСПАРК(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоКритичныеПриИзменении(Элемент)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура(
		"ВключитьИсполнительныеПроизводства, ВключитьКритичные",
		?(ИсполнительныеПроизводства, Истина, Неопределено),
		?(ТолькоКритичные, Истина, Неопределено));
	ОбновитьСобытияМониторингСПАРК(ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСобытияМониторингаОбработкаРасшифровки(
		Элемент,
		Расшифровка,
		СтандартнаяОбработка,
		ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтраницы = ИдентификаторСтраницы(Расшифровка);
	Если ИдентификаторСтраницы <> Неопределено Тогда
		ПараметрыЗапроса = Новый Структура(
			"ИдентификаторСтраницы",
			ИдентификаторСтраницы);
	Иначе
		ПараметрыЗапроса = Новый Структура(
			"ВключитьИсполнительныеПроизводства, ВключитьКритичные",
			?(ИсполнительныеПроизводства, Истина, Неопределено),
			?(ТолькоКритичные, Истина, Неопределено));
	КонецЕсли;
	
	ОбновитьСобытияМониторингСПАРК(
		ПараметрыЗапроса,
		Расшифровка,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеИзмененияЕГРНажатие(Элемент)
	
	ЕГРЮЛ(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЕГРЮЛВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработатьВыборТабличногоДокумента(
		Элемент,
		Область,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЕГРЮЛОбработкаРасшифровки(
		Элемент,
		Расшифровка,
		СтандартнаяОбработка,
		ДополнительныеПараметры)
	
	ОбработатьРасшифровкуТабличногоДокумента(
		Расшифровка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСвязанныеОрганизацииВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработатьВыборТабличногоДокумента(
		Элемент,
		Область,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатСвязанныеОрганизацииОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	
	ОбработатьРасшифровкуТабличногоДокумента(
		Расшифровка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомление1СКонтрагентПодробнееНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		Возврат;
	КонецЕсли;
	
	МодульМониторПортала1СИТСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторПортала1СИТСКлиент");
	МодульМониторПортала1СИТСКлиент.ОткрытьСообщениеОбОпцияхИнтернетПоддержки(
		УведомленияПользователя.РаботаСКонтрагентами);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУведомлениеСПАРКРискиПодробнееНажатие(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		Возврат;
	КонецЕсли;
	
	МодульМониторПортала1СИТСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторПортала1СИТСКлиент");
	МодульМониторПортала1СИТСКлиент.ОткрытьСообщениеОбОпцияхИнтернетПоддержки(
		УведомленияПользователя.СПАРКРиски);
	
КонецПроцедуры


#Область ИндексыСПАРКРиски

&НаКлиенте
Процедура КартинкаИндексОбщийНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		"SPARK:WhatIsCompositeIndex",
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаИндексДОНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		"SPARK:WhatIsIndexOfDueDiligence",
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаИндексФРНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		"SPARK:WhatIsFailureScore",
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаИндексПДНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
	МодульСПАРКРискиКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		"SPARK:WhatIsPaymentIndex",
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВСправочник(Команда)
	
	Если Не ЗначениеЗаполнено(НайденныйИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстЗаполнения" , НайденныйИНН);
	ПараметрыФормы.Вставить("РаботаСКонтрагентамиСозданиеИзДосьеКонтрагента", Истина);
	
	ПараметрыИПП = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	СправочникиКонтрагентыМассив = ПараметрыИПП.РаботаСКонтрагентами.СправочникиСозданиеИзДосье;
	СправочникиКонтрагентыСписок = Новый СписокЗначений;
	Для Каждого ОписаниеСправочника Из СправочникиКонтрагентыМассив Цикл
		СправочникиКонтрагентыСписок.Добавить(ОписаниеСправочника, ОписаниеСправочника.Синоним);
	КонецЦикла;
	Если СправочникиКонтрагентыСписок.Количество() = 1 Тогда
		ОткрытьФормуСозданияКонтрагента(
			СправочникиКонтрагентыСписок[0].Значение,
			ПараметрыФормы);
	Иначе
		СправочникиКонтрагентыСписок.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("ПриВыбореСправочникаКонтрагентаСоздания", ЭтотОбъект, ПараметрыФормы),
			НСтр("ru = 'Выбор справочника контрагентов'"));
	КонецЕсли;
	
КонецПроцедуры

#Область КоманднаяПанель

&НаКлиенте
Процедура Сводка(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.ГруппаСводка,
			Элементы.Сводка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПоБлокам(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчетностьПоСтраницам Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаОтчетностьПоСтраницам,
			Элементы.ОтчетностьПоБлокам));
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаАнализОтчетности,
		Элементы.АнализОтчетности);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверки(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаПроверки,
			Элементы.Проверки));
	
КонецПроцедуры

&НаКлиенте
Процедура Налоги(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаНалоги,
			Элементы.Налоги));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельности(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидыДеятельности Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаВидыДеятельности,
			Элементы.ВидыДеятельности));
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияМониторинга(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСобытияМониторинга Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаСобытияМониторинга,
			Элементы.СобытияМониторинга));
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛ(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаЕГРЮЛ,
			Элементы.ДанныеГосРеестров));
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыйАнализ(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаФинансовыйАнализ,
			Элементы.ФинансовыйАнализ));
	
КонецПроцедуры

#КонецОбласти

#Область ВкладкаОтчетность

&НаКлиенте
Процедура АнализОтчетности(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаАнализОтчетности,
		Элементы.АнализОтчетности);
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскийБаланс(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаБухгалтерскийБаланс,
		Элементы.БухгалтерскийБаланс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОПрибыляхИУбытках(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаОтчетОПрибыляхИУбытках,
		Элементы.ОтчетОПрибыляхИУбытках);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОбИзмененияхКапитала(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаОтчетОбИзмененияхКапитала,
		Элементы.ОтчетОбИзмененияхКапитала);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОДвиженииДенежныхСредств(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаОтчетОДвиженииДенежныхСредств,
		Элементы.ОтчетОДвиженииДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСтоимостиЧистыхАктивов(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаРасчетСтоимостиЧистыхАктивов,
		Элементы.РасчетСтоимостиЧистыхАктивов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСредств(Команда)
	
	НастроитьМенюОтчетности(
		Элементы,
		Элементы.СтраницаИспользованиеСредств,
		Элементы.ИспользованиеСредств);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СкрытьЭлементыПриСоздании()
	
	Элементы.ГруппаУведомлениеСервиса1СКонтрагент.Видимость = Ложь;
	Элементы.ГруппаУведомлениеСервисаСПАРКРиски.Видимость = Ложь;
	
	Элементы.СкачатьКарточку.Видимость = Ложь;
	
	Элементы.КраткоеНаименование.Видимость = Ложь;
	
	Элементы.ГруппаОсновныеРеквизиты.Видимость = Ложь;
	Элементы.ГруппаВидыДеятельности.Видимость = Ложь;
	Элементы.ГруппаСвязанныеОрганизации.Видимость = Ложь;
	Элементы.ГруппаПоследниеИзмененияВЕГР.Видимость = Ложь;
	Элементы.ГруппаУчредители.Видимость = Ложь;
	Элементы.ГруппаАнализОтчетности.Видимость = Ложь;
	Элементы.ГруппаФинансовыйАнализ.Видимость = Ложь;
	Элементы.ГруппаНалоги.Видимость = Ложь;
	Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Ложь;
	Элементы.ГруппаПроверки.Видимость = Ложь;
	Элементы.Группа1СПАРКРискиИндексы.Видимость = Ложь;
	Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	Элементы.Группа1СПАРКСобытияМониторинга.Видимость = Ложь;
	Элементы.ГруппаДанныеСобытияМониторинга.Видимость = Ложь;
	Элементы.ГруппаСобытиеМониторинга0.Видимость = Ложь;
	Элементы.ГруппаСобытиеМониторинга1.Видимость = Ложь;
	Элементы.ГруппаСобытиеМониторинга2.Видимость = Ложь;
	Элементы.ГруппаСправкиСПАРК.Видимость = Ложь;
	Элементы.ГруппаПереходВВебВерсиюСПАРК.Видимость = Ложь;
	
	Элементы.СтраницаВидыДеятельности.Видимость = Ложь;
	Элементы.СтраницаЕГРЮЛ.Видимость = Ложь;
	Элементы.СтраницаСвязанныеОрганизации.Видимость = Ложь;
	Элементы.СтраницаОтчетностьПоСтраницам.Видимость = Ложь;
	Элементы.СтраницаФинансовыйАнализ.Видимость = Ложь;
	Элементы.СтраницаПроверки.Видимость = Ложь;
	Элементы.СтраницаНалоги.Видимость = Ложь;
	Элементы.СтраницаСобытияМониторинга.Видимость = Ложь;
	
	
	Элементы.Сводка.Видимость = Ложь;
	Элементы.ВидыДеятельности.Видимость = Ложь;
	Элементы.ДанныеГосРеестров.Видимость = Ложь;
	Элементы.СвязанныеОрганизации.Видимость = Ложь;
	Элементы.ОтчетностьПоБлокам.Видимость = Ложь;
	Элементы.ФинансовыйАнализ.Видимость = Ложь;
	Элементы.Налоги.Видимость = Ложь;
	Элементы.Проверки.Видимость = Ложь;
	Элементы.СобытияМониторинга.Видимость = Ложь;
	
	Элементы.ГруппаИндексыСПАРКРискиСтатус.Видимость = Ложь;
	Элементы.ГруппаПереданаБухгалтерскаяОтчетностьВСПАРК.Видимость = Ложь;
	Элементы.ГруппаЗначенияИндексов.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте(ТекстПоиска, ЭтоПроверкаРезультата = Ложь)
	
	ОтчетСформирован = Ложь;
	
	Если Не ЗначениеЗаполнено(ТекстПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаТекстПоиска = СтрДлина(ТекстПоиска);
	ПоискПоИНН = (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстПоиска)
		И (ДлинаТекстПоиска = 10
		Или ДлинаТекстПоиска = 12));
	Если ПоискПоИНН Тогда
		
		ИННПоиска = ТекстПоиска;
		
		ЭтоЮридическоеЛицо = СтрДлина(ИННПоиска) = 10;
		
		Элементы.КраткоеНаименование.Видимость = Ложь;
		Элементы.СтраницаФормированиеОтчета.Видимость = Истина;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФормированиеОтчета;
		
		Результат = СформироватьОтчетНаСервере(ЭтоПроверкаРезультата);
		
		Если Не Результат Тогда
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
				ПараметрыОжидания);
		Иначе
			
			ОбработатьОшибкиФормированияОтчета();
			
			Если ОжиданиеОтвета Тогда
				// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса.
				ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 1.5, Истина);
			Иначе
				Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
					Элементы.СтраницаФормированиеОтчета.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СПАРКРискиСуществует Тогда
			ИндексыСПАРКРиски = Неопределено;
			ОбновитьОтображениеИндексыСПАРК();
		КонецЕсли;
		
	Иначе // Поиск по наименованию
		
		МодульРаботаСКонтрагентамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКонтрагентамиКлиент");
		ПараметрыФормы = МодульРаботаСКонтрагентамиКлиент.НовыйПараметрыПоискаКонтрагента();
		ПараметрыФормы.Заголовок                   = НСтр("ru='Поиск контрагента'");
		ПараметрыФормы.СтрокаПоиска                = ТекстПоиска;
		ПараметрыФормы.РасширенныйРезультатПодбора = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НайтиПоНаименованиюЗавершение",
			ЭтотОбъект,
			Новый Структура);
		МодульРаботаСКонтрагентамиКлиент.ОткрытьПодборКонтрагента(
			ПараметрыФормы,
			ЭтотОбъект,
			ОписаниеОповещения);
		
	КонецЕсли;
	
	ОтключитьФормированиеОтчета = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьФормированиеОтчета", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере(Знач ЭтоПроверкаРезультата = Ложь)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ОписаниеОшибки       = "";
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтоПроверкаРезультата Тогда
		// Очистка результата при формировании нового отчета.
		ОжиданиеОтвета = Ложь;
		СостояниеФормированияОтчета = Новый Структура;
		СостояниеФормированияОтчета.Вставить("СостояниеОтчета"            , "");
		СостояниеФормированияОтчета.Вставить("СостояниеПроверки"          , "");
		СостояниеФормированияОтчета.Вставить("СостояниеСобытияМониторинга", "");
		СостояниеФормированияОтчета.Вставить("ОчищеноСодержимоеДокументов", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеИННКонтрагента(Контрагент) <> ИННПоиска Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	
	Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИННПоиска, ЭтоЮридическоеЛицо, ОписаниеОшибки) Тогда
		ОчиститьСодержимоеДокументов();
		ЗаполнитьОписаниеОшибкиФормированияОтчета(ОписаниеОшибки);
		ОжиданиеОтвета = Ложь;
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ИНН",                         ИННПоиска);
	ПараметрыОтчета.Вставить("СостояниеОтчета",             СостояниеФормированияОтчета.СостояниеОтчета);
	ПараметрыОтчета.Вставить("СостояниеПроверки",           СостояниеФормированияОтчета.СостояниеПроверки);
	ПараметрыОтчета.Вставить("СостояниеСобытияМониторинга", СостояниеФормированияОтчета.СостояниеСобытияМониторинга);
	ПараметрыОтчета.Вставить("Контрагент",                  Контрагент);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Формирование отчета: Проверка контрагента: %1'"),
		ИННПоиска);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.ПроверкаКонтрагента.ДанныеКарточкиКонтрагента",
		ПараметрыОтчета);
	АдресХранилища = ДлительнаяОперация.АдресРезультата;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		Возврат Ложь;
	Иначе
		ИдентификаторЗадания = Неопределено;
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			Возврат Истина;
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ОчиститьСодержимоеДокументов();
			ЗаполнитьОписаниеОшибкиФормированияОтчета(ДлительнаяОперация.ПодробноеПредставлениеОшибки);
			ОжиданиеОтвета = Ложь;
			Возврат Ложь;
		Иначе
			ВызватьИсключение НСтр("ru = 'Задание отменено.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИННКонтрагента(КонтрагентСсылка)
	
	МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
	СвойстваСправочника = МодульРаботаСКонтрагентами.СвойстваСправочникаКонтрагенты(КонтрагентСсылка);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, СвойстваСправочника.РеквизитИНН);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Если Не СостояниеФормированияОтчета.ОчищеноСодержимоеДокументов Тогда
		ОчиститьСодержимоеДокументов();
	КонецЕсли;
	
	// Если результат не сформирован или нет данных во временном хранилище
	// выполнять обработку не требуется.
	Если ДанныеОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОтчета.СостояниеОтчета) Тогда
		СостояниеФормированияОтчета.СостояниеОтчета = ДанныеОтчета.СостояниеОтчета;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОтчета.СостояниеПроверки) Тогда
		СостояниеФормированияОтчета.СостояниеПроверки = ДанныеОтчета.СостояниеПроверки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДанныеОтчета.СостояниеСобытияМониторинга) Тогда
		СостояниеФормированияОтчета.СостояниеСобытияМониторинга = ДанныеОтчета.СостояниеСобытияМониторинга;
	КонецЕсли;
	
	ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
	Контрагент     = ДанныеОтчета.Контрагент;
	ОжиданиеОтвета = ПустаяСтрока(ОписаниеОшибки)
		И (СостояниеФормированияОтчета.СостояниеОтчета = "Ожидание"
		Или СостояниеФормированияОтчета.СостояниеПроверки = "Ожидание");
	
	ДанныеПроверкиКонтрагента    = Неопределено;
	ДанныеПроверки = Неопределено;
	ДанныеСобытияМониторинга = Неопределено;
	Если СостояниеФормированияОтчета.СостояниеОтчета = "СформированОтчет" Тогда
		ДанныеПроверкиКонтрагента = ДанныеОтчета.ДанныеПроверкиКонтрагента;
		Если ОжиданиеОтвета Тогда
			ПоместитьВоВременноеХранилище(ДанныеПроверкиКонтрагента, АдресХранилищаДанныеПроверкиКонтрагента);
		КонецЕсли;
		СостояниеФормированияОтчета.СостояниеОтчета = "Завершено";
	КонецЕсли;
	
	Если СостояниеФормированияОтчета.СостояниеПроверки = "СформированОтчет" Тогда
		ДанныеПроверки = ДанныеОтчета.ДанныеПроверки;
		Если ОжиданиеОтвета Тогда
			ПоместитьВоВременноеХранилище(ДанныеПроверки, АдресХранилищаДанныеПроверки);
		КонецЕсли;
		СостояниеФормированияОтчета.СостояниеПроверки = "Завершено";
	КонецЕсли;
	
	Если СостояниеФормированияОтчета.СостояниеСобытияМониторинга = "СформированОтчет" Тогда
		ДанныеСобытияМониторинга = ДанныеОтчета.ДанныеСобытияМониторинга;
		Если ОжиданиеОтвета Тогда
			ПоместитьВоВременноеХранилище(ДанныеСобытияМониторинга, АдресХранилищаДанныеСобытияМониторинга);
		КонецЕсли;
		СостояниеФормированияОтчета.СостояниеСобытияМониторинга = "Завершено";
	КонецЕсли;
	
	// Заполнение
	Если Не ОжиданиеОтвета
		И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Если ДанныеПроверкиКонтрагента = Неопределено Тогда
			// Данные сохранены во временное хранилище на предыдущей итерации.
			ДанныеПроверкиКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеПроверкиКонтрагента);
			// Очистка временного хранилища
			ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаДанныеПроверкиКонтрагента);
		КонецЕсли;
		
		Если ДанныеПроверки = Неопределено Тогда
			// Данные во временном хранилище.
			ДанныеПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеПроверки);
			// Очистка временного хранилища
			ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаДанныеПроверки);
		КонецЕсли;
		
		Если ДанныеСобытияМониторинга = Неопределено Тогда
			// Данные во временном хранилище.
			ДанныеСобытияМониторинга = ПолучитьИзВременногоХранилища(АдресХранилищаДанныеСобытияМониторинга);
			// Очистка временного хранилища
			ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаДанныеСобытияМониторинга);
		КонецЕсли;
		
		ОтчетСформирован = Истина;
		// Общие свойства
		НайденныйИНН = ДанныеПроверкиКонтрагента.НайденныйИНН;
		
		НастроитьГлавноеМеню(
			Элементы,
			ПараметрыНастройкиМеню(
				Элементы.ГруппаСводка,
				Элементы.Сводка));
		
		Элементы.ГруппаСтраницы.Видимость = Истина;
		ВывестиКарточкуОбщиеСведения(ДанныеПроверкиКонтрагента.РезультатОбщиеСведения);
		ВывестиКарточкуВидыДеятельности(ДанныеПроверкиКонтрагента);
		ВывестиКарточкуИзмененияВЕГР(ДанныеПроверкиКонтрагента.РезультатОбщиеСведения);
		ВывестиКарточкуПроверки(ДанныеПроверки.КарточкаПроверки);
		ВывестиКарточкуУчредители(ДанныеПроверкиКонтрагента.РезультатОбщиеСведения);
		
		ВывестиКарточкуСвязанныеОрганизации(ДанныеПроверкиКонтрагента);
		ВывестиКарточкуАнализОтчетности(ДанныеПроверкиКонтрагента);
		ВывестиКарточкуФинансовыйАнализ(ДанныеПроверкиКонтрагента);
		ВывестиКарточкуНалоги(ДанныеПроверкиКонтрагента);
		ВывестиКарточкуДинамикаПоказателей(ДанныеПроверкиКонтрагента);
		
		Если СПАРКРискиСуществует Тогда
			
			ВывестиКарточкуСобытияМониторинга(ДанныеСобытияМониторинга);
			ВывестиКарточкуСправкиСПАРКРиски(ДанныеОтчета);
			
			Элементы.Группа1СПАРКРискиИндексы.Видимость = Истина;
			Элементы.Группа1СПАРКРискиИндексы.Видимость = Истина;
			ВывестиКарточкуПереходВВебВерсиюСПАРК();
			
		КонецЕсли;
		
		Для Каждого СтрокаОбласти Из ДанныеПроверкиКонтрагента.ОбластиРасшифровки Цикл
			НоваяСтрока = ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбласти);
		КонецЦикла;
		
		Для Каждого СтрокаОбласти Из ДанныеПроверки.ОбластиРасшифровки Цикл
			НоваяСтрока = ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбласти);
		КонецЦикла;
		
		ВывестиДанныеГосРеестров(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуВидыДеятельности(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуСвязанныеОрганизации(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуБухгалтерскаяОтчетность(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуФинансовыйАнализ(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуНалоги(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуПроверки(ДанныеПроверки);
		ВывестиСтраницыИсторииИзменений(ДанныеПроверкиКонтрагента);
		ВывестиСтраницуСобытияМониторинга(ДанныеСобытияМониторинга);
		
		Элементы.СкачатьКарточку.Видимость = Истина;
		
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

#Область ДанныеГосРеестров

&НаСервере
Процедура ВывестиДанныеГосРеестров(ДанныеПроверкиКонтрагента)
	
	Если ДанныеПроверкиКонтрагента.РезультатДанныеГосРеестров = Неопределено Тогда
		Элементы.СтраницаЕГРЮЛ.Видимость = Ложь;
		Элементы.ДанныеГосРеестров.Видимость = Ложь;
	Иначе
		РезультатДанныеГосРеестров.Вывести(ДанныеПроверкиКонтрагента.РезультатДанныеГосРеестров);
		Элементы.РезультатДанныеГосРеестров.ИспользуемоеИмяФайла = СокрЛП(ДанныеПроверкиКонтрагента.ИмяФайлаДанныеГосРеестров);
		Элементы.СтраницаЕГРЮЛ.Видимость = Истина;
		Элементы.ДанныеГосРеестров.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаВидыДеятельности

&НаСервере
Процедура ВывестиСтраницуВидыДеятельности(ДанныеПроверкиКонтрагента)
	
	Если ДанныеПроверкиКонтрагента.РезультатВидыДеятельности = Неопределено Тогда
		Элементы.ВидыДеятельности.Видимость = Ложь;
		Элементы.СтраницаВидыДеятельности.Видимость = Ложь;
	Иначе
		
		Элементы.ВидыДеятельности.Видимость = Истина;
		Элементы.СтраницаВидыДеятельности.Видимость = Истина;
		РезультатВидыДеятельности.Очистить();
		РезультатВидыДеятельности.Вывести(ДанныеПроверкиКонтрагента.РезультатВидыДеятельности);
		Элементы.РезультатВидыДеятельности.ИспользуемоеИмяФайла = СокрЛП(ДанныеПроверкиКонтрагента.ИмяФайлаВидыДеятельности);
		Элементы.РезультатВидыДеятельности.Высота = РезультатВидыДеятельности.ВысотаТаблицы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСобытияМониторинга

&НаСервере
Процедура ВывестиСтраницуСобытияМониторинга(
	Знач ДанныеСобытияМониторинга,
	Знач НомерСтраницы = 0,
	Знач ОчиститьСтраницы = Истина)
	
	Если ОчиститьСтраницы Тогда
		СтраницыСобытийМониторинга = Новый Структура;
		СтраницыСобытийМониторинга.Вставить("_0", Неопределено);
	КонецЕсли;
	
	Если ДанныеСобытияМониторинга.НомерСледующейСтраницы <> Неопределено
		И НомерСтраницы = СтраницыСобытийМониторинга.Количество() - 1 Тогда
		
		СтраницыСобытийМониторинга.Вставить(
			"_" + (Формат(НомерСтраницы + 1, "ЧН=0; ЧГ=")),
			ДанныеСобытияМониторинга.НомерСледующейСтраницы);
	КонецЕсли;
	
	РезультатСобытияМониторинга.Очистить();
	Если ДанныеСобытияМониторинга.РезультатСобытияМониторинга <> Неопределено Тогда
		Элементы.СобытияМониторинга.Видимость = Истина;
		Элементы.СтраницаСобытияМониторинга.Видимость = Истина;
		РезультатСобытияМониторинга.Вывести(ДанныеСобытияМониторинга.РезультатСобытияМониторинга);
		Элементы.РезультатСобытияМониторинга.ИспользуемоеИмяФайла = СокрЛП(ДанныеСобытияМониторинга.ИмяФайлаСобытияМониторинга);
		Элементы.РезультатСобытияМониторинга.Высота = РезультатСобытияМониторинга.ВысотаТаблицы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаСвязанныеОрганизации

&НаСервере
Процедура ВывестиСтраницуСвязанныеОрганизации(ДанныеПроверкиКонтрагента)
	
	Если ДанныеПроверкиКонтрагента.РезультатСвязанныеОрганизации = Неопределено Тогда
		Элементы.СвязанныеОрганизации.Видимость = Ложь;
		Элементы.СтраницаСвязанныеОрганизации.Видимость = Ложь;
	Иначе
		
		Элементы.СвязанныеОрганизации.Видимость = Истина;
		Элементы.СтраницаСвязанныеОрганизации.Видимость = Истина;
		РезультатСвязанныеОрганизации.Очистить();
		РезультатСвязанныеОрганизации.Вывести(ДанныеПроверкиКонтрагента.РезультатСвязанныеОрганизации);
		Элементы.РезультатСвязанныеОрганизации.ИспользуемоеИмяФайла = СокрЛП(ДанныеПроверкиКонтрагента.ИмяФайлаСвязанныеОрганизации);
		Элементы.РезультатСвязанныеОрганизации.Высота = РезультатСвязанныеОрганизации.ВысотаТаблицы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаФинансовыйАнализ

&НаСервере
Процедура ВывестиСтраницуФинансовыйАнализ(ДанныеПроверкиКонтрагента)
	
	Если ДанныеПроверкиКонтрагента.РезультатФинансовыйАнализ = Неопределено Тогда
		Элементы.ФинансовыйАнализ.Видимость = Ложь;
		Элементы.СтраницаФинансовыйАнализ.Видимость = Ложь;
	Иначе
		
		Элементы.ФинансовыйАнализ.Видимость = Истина;
		Элементы.СтраницаФинансовыйАнализ.Видимость = Истина;
		
		РезультатФинансовыйАнализ.Вывести(ДанныеПроверкиКонтрагента.РезультатФинансовыйАнализ);
		Элементы.РезультатФинансовыйАнализ.ИспользуемоеИмяФайла = СокрЛП(ДанныеПроверкиКонтрагента.ИмяФайлаФинансовыйАнализ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияИзменений

&НаСервере
Процедура ВывестиСтраницыИсторииИзменений(ДанныеПроверкиКонтрагента)
	
	РезультатыИсторияИзменений = ДанныеПроверкиКонтрагента.РезультатыИсторияИзменений;
	ИсторияИзменений = ДанныеПроверкиКонтрагента.ИсторияИзменений;
	Если ЭтоЮридическоеЛицо Тогда
		
		ВывестиРезультатИсторияНаименования(РезультатыИсторияИзменений, ИсторияИзменений);
		ВывестиРезультатИсторияКПП(РезультатыИсторияИзменений, ИсторияИзменений);
		ВывестиРезультатИсторияАдрес(РезультатыИсторияИзменений, ИсторияИзменений);
		ВывестиРезультатИсторияРуководителя(РезультатыИсторияИзменений, ИсторияИзменений);
		
	Иначе
		
		ВывестиРезультатИсторияФИО(РезультатыИсторияИзменений, ИсторияИзменений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатИсторияНаименования(РезультатыИсторияИзменений, ИсторияИзменений)
	
	Если ИсторияИзменений.ИсторияНаименования.ЕстьДанные Тогда
		
		Элементы.ДекорацияИсторияНаименований.Видимость = Истина;
		Элементы.СтраницаИсторияНаименования.Видимость  = Истина;
		
		РезультатИсторияНаименования.Вывести(РезультатыИсторияИзменений.РезультатИсторияНаименования);
		Элементы.РезультатИсторияНаименования.ИспользуемоеИмяФайла = СокрЛП(РезультатыИсторияИзменений.ИмяФайлаИсторияНаименования);
		
	Иначе
		
		Элементы.ДекорацияИсторияНаименований.Видимость = Ложь;
		Элементы.СтраницаИсторияНаименования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатИсторияКПП(РезультатыИсторияИзменений, ИсторияИзменений)
	
	Если ИсторияИзменений.ИсторияКПП.ЕстьДанные Тогда
		
		Элементы.ДекорацияИсторияКПП.Видимость = Истина;
		Элементы.СтраницаИсторияКПП.Видимость = Истина;
		
		РезультатИсторияКПП.Вывести(РезультатыИсторияИзменений.РезультатИсторияКПП);
		Элементы.РезультатИсторияКПП.ИспользуемоеИмяФайла = СокрЛП(РезультатыИсторияИзменений.ИмяФайлаИсторияКПП);
		
	Иначе
		
		Элементы.ДекорацияИсторияКПП.Видимость = Ложь;
		Элементы.СтраницаИсторияКПП.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатИсторияАдрес(РезультатыИсторияИзменений, ИсторияИзменений)
	
	Если ИсторияИзменений.ИсторияАдрес.ЕстьДанные Тогда
		
		Элементы.ДекорацияИсторияАдрес.Видимость = Истина;
		Элементы.СтраницаИсторияАдрес.Видимость = Истина;
		
		РезультатИсторияАдрес.Вывести(РезультатыИсторияИзменений.РезультатИсторияАдрес);
		Элементы.РезультатИсторияАдрес.ИспользуемоеИмяФайла = СокрЛП(РезультатыИсторияИзменений.ИмяФайлаИсторияАдрес);
		
	Иначе
		
		Элементы.ДекорацияИсторияАдрес.Видимость = Ложь;
		Элементы.СтраницаИсторияАдрес.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатИсторияРуководителя(РезультатыИсторияИзменений, ИсторияИзменений)
	
	Если ИсторияИзменений.ИсторияРуководителя.ЕстьДанные Тогда
		
		Элементы.ДекорацияИсторияРуководителя.Видимость = Истина;
		Элементы.СтраницаИсторияРуководителя.Видимость = Истина;
		
		РезультатИсторияРуководителя.Вывести(РезультатыИсторияИзменений.РезультатИсторияРуководителя);
		Элементы.РезультатИсторияРуководителя.ИспользуемоеИмяФайла = СокрЛП(РезультатыИсторияИзменений.ИмяФайлаИсторияРуководителя);
		
	Иначе
		
		Элементы.ДекорацияИсторияРуководителя.Видимость = Ложь;
		Элементы.СтраницаИсторияРуководителя.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатИсторияФИО(РезультатыИсторияИзменений, ИсторияИзменений)
	
	Если ИсторияИзменений.ИсторияФИО.ЕстьДанные Тогда
		
		Элементы.ДекорацияИсторияНаименований.Видимость = Истина;
		Элементы.СтраницаИсторияФИО.Видимость = Истина;
		
		РезультатИсторияФИО.Вывести(РезультатыИсторияИзменений.РезультатИсторияФИО);
		Элементы.РезультатИсторияФИО.ИспользуемоеИмяФайла = СокрЛП(РезультатыИсторияИзменений.ИмяФайлаИсторияФИО);
		
	Иначе
		
		Элементы.ДекорацияИсторияНаименований.Видимость = Ложь;
		Элементы.СтраницаИсторияФИО.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаНалоги

&НаСервере
Процедура ВывестиСтраницуНалоги(ДанныеПроверкиКонтрагента)
	
	Если ДанныеПроверкиКонтрагента.РезультатНалоги = Неопределено Тогда
		Элементы.Налоги.Видимость = Ложь;
		Элементы.СтраницаНалоги.Видимость = Ложь;
	Иначе
		
		Элементы.Налоги.Видимость = Истина;
		Элементы.СтраницаНалоги.Видимость = Истина;
		
		РезультатНалоги.Вывести(ДанныеПроверкиКонтрагента.РезультатНалоги);
		Элементы.РезультатНалоги.ИспользуемоеИмяФайла = СокрЛП(ДанныеПроверкиКонтрагента.ИмяФайлаНалоги);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПроверки

&НаСервере
Процедура ВывестиСтраницуПроверки(ДанныеПроверки)
	
	Если ДанныеПроверки.РезультатПроверки = Неопределено Тогда
		Элементы.Проверки.Видимость = Ложь;
		Элементы.СтраницаПроверки.Видимость = Ложь;
	Иначе
		
		Элементы.Проверки.Видимость = Истина;
		Элементы.СтраницаПроверки.Видимость = Истина;
		
		РезультатПроверки.Вывести(ДанныеПроверки.РезультатПроверки);
		Элементы.РезультатПроверки.ИспользуемоеИмяФайла = ДанныеПроверки.ИмяФайлаПроверки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БухгалтерскаяОтчетность

&НаСервере
Процедура ВывестиСтраницуБухгалтерскаяОтчетность(ДанныеПроверкиКонтрагента);
	
	РезультатыБухгалтерскаяОтчетность = ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность;
	
	ОтображатьБухгалтерскуюОтчетность = Ложь;
	
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"АнализОтчетности",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"БухгалтерскийБаланс",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"ОтчетОПрибыляхИУбытках",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"ОтчетОбИзмененияхКапитала",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"ОтчетОДвиженииДенежныхСредств",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"ИспользованиеСредств",
		ОтображатьБухгалтерскуюОтчетность);
	ВывестиРезультатБухгалтерскойОтчетности(
		ДанныеПроверкиКонтрагента.РезультатыБухгалтерскаяОтчетность,
		"РасчетСтоимостиЧистыхАктивов",
		ОтображатьБухгалтерскуюОтчетность);
	
	Элементы.СтраницаОтчетностьПоСтраницам.Видимость = ОтображатьБухгалтерскуюОтчетность;
	Элементы.ОтчетностьПоБлокам.Видимость = ОтображатьБухгалтерскуюОтчетность;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРезультатБухгалтерскойОтчетности(
	Результаты,
	ИмяРезультата,
	ОтображатьБухгалтерскуюОтчетность)
		
	Если Результаты["Результат" + ИмяРезультата] = Неопределено Тогда
		Элементы[ИмяРезультата].Видимость = Ложь;
		Элементы["Страница" + ИмяРезультата].Видимость = Ложь;
	Иначе
		
		Элементы[ИмяРезультата].Видимость = Истина;
		Элементы["Страница" + ИмяРезультата].Видимость = Истина;
		
		ЭтотОбъект["Результат" + ИмяРезультата].Вывести(Результаты["Результат" + ИмяРезультата]);
		
		Элементы["Результат" + ИмяРезультата].ИспользуемоеИмяФайла = Результаты["ИмяФайла" + ИмяРезультата];
		
		ОтображатьБухгалтерскуюОтчетность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОчиститьСодержимоеДокументов()
	
	// Общие свойства
	НайденныйИНН = "";
	ОбластиРасшифровки.Очистить();
	
	ОчиститьТабличныйДокумент("РезультатВидыДеятельности");
	ОчиститьТабличныйДокумент("РезультатДанныеГосРеестров");
	
	ОчиститьТабличныйДокумент("РезультатАнализОтчетности");
	ОчиститьТабличныйДокумент("РезультатБухгалтерскийБаланс");
	ОчиститьТабличныйДокумент("РезультатОтчетОПрибыляхИУбытках");
	ОчиститьТабличныйДокумент("РезультатОтчетОбИзмененияхКапитала");
	ОчиститьТабличныйДокумент("РезультатОтчетОДвиженииДенежныхСредств");
	ОчиститьТабличныйДокумент("РезультатРасчетСтоимостиЧистыхАктивов");
	ОчиститьТабличныйДокумент("РезультатИспользованиеСредств");
	
	ОчиститьТабличныйДокумент("РезультатФинансовыйАнализ");
	ОчиститьТабличныйДокумент("РезультатНалоги");
	ОчиститьТабличныйДокумент("РезультатПроверки");
	ОчиститьТабличныйДокумент("РезультатСобытияМониторинга");
	
	ОчиститьТабличныйДокумент("РезультатИсторияНаименования");
	ОчиститьТабличныйДокумент("РезультатИсторияКПП");
	ОчиститьТабличныйДокумент("РезультатИсторияРуководителя");
	ОчиститьТабличныйДокумент("РезультатИсторияАдрес");
	ОчиститьТабличныйДокумент("РезультатИсторияФИО");
	
	КраткоеНаименование = "";
	Элементы.СкачатьКарточку.Видимость = Ложь;
	Элементы.СтраницаОписаниеОшибки.Видимость = Ложь;
	СкрытьКарточки1СКонтрагент();
	СкрытьКарточки1СПАРКРиски();
	СкрытьМеню();
	
	ИННСобытий = "";
	
	СостояниеФормированияОтчета.ОчищеноСодержимоеДокументов = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныйДокумент(ИмяРеквизита);
	
	Реквизит = ЭтотОбъект[ИмяРеквизита];
	Реквизит.Очистить();
	Элементы[ИмяРеквизита].ИспользуемоеИмяФайла = Неопределено;
	Реквизит.ТекущаяОбласть = Реквизит.Область(1, 2, 1, 2);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКарточки1СКонтрагент()
	
	Для Каждого Элемент Из Группы1СКонтрагент() Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция Группы1СКонтрагент()
	
	Результат = Новый Массив;
	Результат.Добавить(Элементы.ГруппаДаты);
	Результат.Добавить(Элементы.ГруппаИННКПП);
	Результат.Добавить(Элементы.ГруппаУставныйКапитал);
	Результат.Добавить(Элементы.ГруппаРуководители);
	Результат.Добавить(Элементы.ГруппаЮридическийАдрес);
	Результат.Добавить(Элементы.ГруппаСрЧисленность);
	Результат.Добавить(Элементы.ГруппаСсылкиОбщиеСведения);
	Результат.Добавить(Элементы.ГруппаКраткоеНаименование);
	
	Результат.Добавить(Элементы.ГруппаСвязанныеОрганизации);
	Результат.Добавить(Элементы.ГруппаУчредители);
	Результат.Добавить(Элементы.ГруппаПоследниеИзмененияВЕГР);
	Результат.Добавить(Элементы.ГруппаВидыДеятельности);
	
	Результат.Добавить(Элементы.ГруппаАнализОтчетности);
	Результат.Добавить(Элементы.ГруппаФинансовыйАнализ);
	Результат.Добавить(Элементы.ГруппаНалоги);
	Результат.Добавить(Элементы.ГруппаГрафикДинамикаПоказателей);
	Результат.Добавить(Элементы.ГруппаПроверки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СкрытьМеню()
	
	Для Каждого Элемент Из ВерхнееМеню() Цикл
		Элемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВерхнееМеню()
	
	Результат = Новый Массив;
	Результат.Добавить(Элементы.ВидыДеятельности);
	Результат.Добавить(Элементы.ДанныеГосРеестров);
	Результат.Добавить(Элементы.ОтчетностьПоБлокам);
	Результат.Добавить(Элементы.ФинансовыйАнализ);
	Результат.Добавить(Элементы.Налоги);
	Результат.Добавить(Элементы.Проверки);
	Результат.Добавить(Элементы.СобытияМониторинга);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СкрытьКарточки1СПАРКРиски()
	
	Элементы.ГруппаДанныеСобытияМониторинга.Видимость = Ложь;
	Элементы.ДекорацияСобытиеМониторингаОписание.Видимость = Ложь;
	
КонецПроцедуры

#Область КарточкаОбщиеСведения

&НаСервере
Процедура ВывестиКарточкуОбщиеСведения(Сведения)
	
	НастроитьВидимостьОбщиеСведения();
	КраткоеНаименование = Сведения.НаименованиеСокращенное;
	Элементы.ДекорацияИННЗначение.Заголовок = Сведения.ИНН;
	ИНН = Сведения.ИНН;
	ВывестиКПП(Сведения);
	ОГРН = Сведения.РегистрационныйНомер;
	Наименование = Сведения.НаименованиеПолное;
	Элементы.КраткоеНаименованиеЗначение.Заголовок = Наименование;
	
	ВывестиЗначениеСтатуса(Сведения);
	ВывестиДатыРегистрацииЗакрытия(Сведения);
	ВывестиУставнойКапитал(Сведения);
	
	ВывестиРуководителя(Сведения);
	ВывестиЮридическийАдрес(Сведения);
	ВывестиЧисленность(Сведения);
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ПолучитьВыпискуСЕГРЮЛ.Заголовок = НСтр("ru='Показать данные из ЕГРЮЛ'");
	Иначе
		Элементы.ПолучитьВыпискуСЕГРЮЛ.Заголовок = НСтр("ru='Показать данные из ЕГРИП'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьОбщиеСведения()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.КраткоеНаименование.Видимость = Истина;
	КонецЕсли;
	Элементы.Сводка.Видимость = Истина;
	
	Элементы.ГруппаОсновныеРеквизиты.Видимость = Истина;
	Элементы.ГруппаКраткоеНаименование.Видимость = Истина;
	Элементы.ГруппаДаты.Видимость = Истина;
	Элементы.ГруппаИННКПП.Видимость = Истина;
	Элементы.ГруппаСсылкиОбщиеСведения.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКПП(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		КПП = Сведения.КПП;
		Элементы.ДекорацияЗначениеКПП.Заголовок = КПП;
		Элементы.ГруппаКПП.Видимость = Истина;
	Иначе
		КПП = "";
		Элементы.ГруппаКПП.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область УставнойКапитал

&НаСервере
Процедура ВывестиУставнойКапитал(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		УставныйКапитал = УставныйКапиталСтрокой(Сведения);
		Элементы.ГруппаУставныйКапитал.Видимость = Истина;
	Иначе
		Элементы.ГруппаУставныйКапитал.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УставныйКапиталСтрокой(Сведения)
	
	Результат = НСтр("ru='нет данных'");
	
	Если Сведения.УставныйКапитал > 0 Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 ₽'"),
			Формат(Сведения.УставныйКапитал, "ЧДЦ=0; ЧГ=3,0"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВывестиЗначениеСтатуса(Сведения)
	
	ДекорацияСтатусФНС = Элементы.ДекорацияСтатусФНС;
	Если Сведения.Статус.Код <> Неопределено Тогда
		Если Сведения.Статус.Код = "001" Тогда
			
			Если ЭтоЮридическоеЛицо Тогда
				ДекорацияСтатусФНС.Заголовок = НСтр("ru='Действующая организация (по данным ЕГРЮЛ)'");
			Иначе
				ДекорацияСтатусФНС.Заголовок = НСтр("ru='Действующий ИП (по данным ЕГРИП)'");
			КонецЕсли;
			
			ДекорацияСтатусФНС.ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
		Иначе
			
			Если ЭтоЮридическоеЛицо Тогда
				ДекорацияСтатусФНС.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 (по данным ЕГРЮЛ)'"),
					Сведения.Статус.Наименование);
			Иначе
				ДекорацияСтатусФНС.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 (по данным ЕГРИП)'"),
					Сведения.Статус.Наименование);
			КонецЕсли;
			
			ДекорацияСтатусФНС.ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиДатыРегистрацииЗакрытия(Сведения)
	
	Если ЗначениеЗаполнено(Сведения.ДатаРегистрации) Тогда
		Элементы.ДекорацияДатаРегистрацииЗначение.Заголовок = Формат(Сведения.ДатаРегистрации, "ДЛФ=DD");
		Элементы.ГруппаДатаРегистрации.Видимость = Истина;
	Иначе
		Элементы.ГруппаДатаРегистрации.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо
		И ЗначениеЗаполнено(Сведения.ДатаПрекращенияДеятельности) Тогда
		
		Элементы.ДекорацияДатаПрекращенияДеятельностиЗначение.Заголовок =
			Формат(Сведения.ДатаПрекращенияДеятельности, "ДЛФ=DD");
		Элементы.ГруппаДатаПрекращенияДеятельности.Видимость = Истина;
		Элементы.ДекорацияДатаРегистрацииЗаголовок.Ширина = 20;
		
	Иначе
		Элементы.ДекорацияДатаРегистрацииЗаголовок.Ширина = 11;
		Элементы.ГруппаДатаПрекращенияДеятельности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРуководителя(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаРуководители.Видимость = Истина;
	Иначе
		Элементы.ГруппаРуководители.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияДолжностьРуководителя.Заголовок = НСтр("ru='Руководитель'");
	
	ТекстРуководитель = "";
	Если Сведения.ДанныеРуководителей.СкрытыеДанные Тогда
		Элементы.ДекорацияРуководитель0.Заголовок = Сведения.ДанныеРуководителей.ПредставлениеСкрытыхДанных;
		Возврат;
	ИначеЕсли Сведения.ДанныеРуководителей.Руководители.Количество() = 0 Тогда
		Элементы.ДекорацияРуководитель0.Заголовок = НСтр("ru='нет данных'");
		Возврат;
	Иначе
		
		ВГраница = Сведения.ДанныеРуководителей.Руководители.Количество() - 1;
		Для Итератор = 0 По ВГраница Цикл
			
			ГруппаШапка = ЭлементПоИмени(("ГруппаРуководитель" + Итератор), Тип("ГруппаФормы"), Элементы.ГруппаРуководители);
			ГруппаШапка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаШапка.ОтображатьЗаголовок = Ложь;
			ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаШапка.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ТекущийРуководитель = Сведения.ДанныеРуководителей.Руководители[Итератор];
			
			Руководитель = ТекущийРуководитель.Представление;
			Если ЗначениеЗаполнено(ТекущийРуководитель.Должность) Тогда
				Если ЗначениеЗаполнено(ТекущийРуководитель.ДатаЗаписи) Тогда
					Руководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1, %2 с %3'"),
						Руководитель,
						ТекущийРуководитель.Должность,
						Формат(ТекущийРуководитель.ДатаЗаписи, "ДЛФ=D"));
				Иначе
					Руководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1, %2'"),
						Руководитель,
						ТекущийРуководитель.Должность);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементФормы = ЭлементПоИмени("ДекорацияРуководитель" + Итератор, Тип("ДекорацияФормы"), ГруппаШапка);
			ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
			ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
			ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
			ЭлементФормы.Заголовок = Руководитель;
			
			ОрганизацииГдеРуководитель = ТекущийРуководитель.ОрганизацииГдеРуководитель;
			КоличествоОрганизацийГдеЕщеРуководитель = ОрганизацииГдеРуководитель.Количество()
				- ОрганизацииГдеРуководитель.НайтиСтроки(Новый Структура("ИНН", Сведения.ИНН)).Количество();
			Если КоличествоОрганизацийГдеЕщеРуководитель > 0 Тогда
				ТекстРуководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Руководитель еще в <a href=""СвязанныеОрганизации"">%1</a>'"),
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						НСтр("ru='%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
						КоличествоОрганизацийГдеЕщеРуководитель));
			Иначе
				ТекстРуководитель = "";
			КонецЕсли;
			
			КоличествоОрганизацийГдеУчредитель = ТекущийРуководитель.ОрганизацииГдеУчредитель.Количество();
			ЯвляетсяУчредителем = ТекущийРуководитель.ОрганизацииГдеУчредитель.Найти(Сведения.ИНН, "ИНН") <> Неопределено;
			
			Если КоличествоОрганизацийГдеУчредитель > 0 Тогда
				Если ЯвляетсяУчредителем Тогда
					Если КоличествоОрганизацийГдеУчредитель = 1 Тогда
						СтрокаПодстановки = ?(ПустаяСтрока(ТекстРуководитель),
							НСтр("ru='Учредитель'"),
							НСтр("ru=', учредитель в текущей организации'"));
					Иначе
						СтрокаПодстановки = ?(ПустаяСтрока(ТекстРуководитель),
							НСтр("ru='Учредитель еще в <a href=""СвязанныеОрганизации"">%1</a>'"),
							НСтр("ru=', учредитель еще в <a href=""СвязанныеОрганизации"">%1</a>'"));
						КоличествоОрганизацийГдеУчредитель = КоличествоОрганизацийГдеУчредитель - 1;
					КонецЕсли;
				Иначе
					СтрокаПодстановки = ?(ПустаяСтрока(ТекстРуководитель),
						НСтр("ru='Учредитель в <a href=""СвязанныеОрганизации"">%1</a>'"),
						НСтр("ru=', учредитель в <a href=""СвязанныеОрганизации"">%1</a>'"));
				КонецЕсли;
				
				Если КоличествоОрганизацийГдеУчредитель > 0 Тогда
					ТекстУчредитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки,
						СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							НСтр("ru='%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
							КоличествоОрганизацийГдеУчредитель));
				КонецЕсли;
			Иначе
				ТекстУчредитель = "";
			КонецЕсли;
			
			ИнформацияОРуководителе = ТекстРуководитель + ТекстУчредитель;
			
			Если Не ПустаяСтрока(ИнформацияОРуководителе)
				И (ТекущийРуководитель.ОрганизацииГдеРуководительПоФИО
					Или ТекущийРуководитель.ОрганизацииГдеУчредительПоФИО) Тогда
				
				ИнформацияОРуководителе = ИнформацияОРуководителе
					+ " (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")";
			КонецЕсли;
			
			ЭлементФормы = ЭлементПоИмени("ДекорацияРуководитель" + Итератор + "Сведения", Тип("ДекорацияФормы"), ГруппаШапка);
			Если Не ПустаяСтрока(ИнформацияОРуководителе) Тогда
				ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
				ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
				ЭлементФормы.ЦветТекста = ЦветаСтиля.ЦветТекстаДополнительныеСведения;
				ЭлементФормы.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					ИнформацияОРуководителе);
				ЭлементФормы.УстановитьДействие(
					"ОбработкаНавигационнойСсылки",
					"ДекорацияРуководитель0СведенияОбработкаНавигационнойСсылки");
			Иначе
				ЭлементФормы.Видимость = Ложь;
			КонецЕсли;
			
			Если Итератор > 0 Тогда
				Элементы.ДекорацияДолжностьРуководителя.Заголовок = НСтр("ru='Руководители'");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЮридическийАдрес

&НаСервере
Процедура ВывестиЮридическийАдрес(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаЮридическийАдрес.Видимость = Истина;
	Иначе
		Элементы.ГруппаЮридическийАдрес.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЮридическийАдрес = Сведения.ЮридическийАдрес.Представление;
	ТипыПомещений = ТипыПомещений();
	
	Адреса = СтрРазделить(ЮридическийАдрес, ",", Ложь);
	Элементы.ДекорацияАдрес0.Заголовок = Адреса[0];
	Элементы.ДекорацияАдрес1.Заголовок = СокрЛП(Адреса[1]);
	Адрес2 = Новый Массив;
	Адрес2.Добавить(СокрЛП(Адреса[2]));
	Адрес3 = Новый Массив;
	Адрес4 = Новый Массив;
	НайденоПомещение = Ложь;
	Для Индекс = 3 По Адреса.ВГраница() Цикл
		Если Не НайденоПомещение
			И ЧастьАдресаСодержитТипПомещения(Адреса[Индекс], ТипыПомещений) Тогда
			
			НайденоПомещение = Истина;
		КонецЕсли;
		Если НайденоПомещение Тогда
			Адрес4.Добавить(СокрЛП(Адреса[Индекс]));
		Иначе
			Адрес3.Добавить(СокрЛП(Адреса[Индекс]));
		КонецЕсли;
	КонецЦикла;
	АдресДляПерехода = Новый Массив;
	АдресДляПерехода.Добавить(СокрЛП(Адреса[1]));
	Если Адрес3.Количество() = 1 Тогда
		Адрес2.Добавить(Адрес3[0]);
		Адрес2 = СтрСоединить(Адрес2, ", ");
		Элементы.ДекорацияАдрес2.Заголовок = Адрес2;
		Элементы.ДекорацияАдрес3.Видимость = Ложь;
		АдресДляПерехода.Добавить(Адрес2);
		Элементы.Переместить(
			Элементы.СсылкаДляПереходаНаКарту,
			Элементы.ГруппаАдрес2);
	Иначе
		Адрес2 = СтрСоединить(Адрес2, ", ");
		Элементы.ДекорацияАдрес2.Заголовок = Адрес2;
		Адрес3 = СтрСоединить(Адрес3, ", ");
		Элементы.ДекорацияАдрес3.Заголовок = Адрес3;
		АдресДляПерехода.Добавить(Адрес2);
		АдресДляПерехода.Добавить(Адрес3);
		Элементы.ДекорацияАдрес3.Видимость = Истина;
		Элементы.Переместить(
			Элементы.СсылкаДляПереходаНаКарту,
			Элементы.ГруппаАдрес3);
	КонецЕсли;
	
	АдресДляПереходаНаКарту = СтрСоединить(АдресДляПерехода, ", ");
	
	Если Адрес4.Количество() = 0 Тогда
		Элементы.ДекорацияАдрес4.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияАдрес4.Заголовок = СтрСоединить(Адрес4, ", ");
		Элементы.ДекорацияАдрес4.Видимость = Истина;
	КонецЕсли;
	
	ОрганизацииПоЭтомуАдресу = "";
	КоличествоОрганизаций = Сведения.ОрганизацииПоАдресу.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		ОрганизацииПоЭтомуАдресу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По этому адресу %1 еще %2'"),
			?(КоличествоОрганизаций % 10 = 1 И НЕ КоличествоОрганизаций % 100 = 11, 
				НСтр("ru='зарегистрирована'"),
				НСтр("ru='зарегистрированы'")),
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru='%1 организаций;%1 организация;%1 организации;%1 организации;%1 организаций;%1 организаций'"),
				КоличествоОрганизаций));
	КонецЕсли;
	
	ЭлементФормы = ЭлементПоИмени(
		"ДекорацияАдресСведения",
		Тип("ДекорацияФормы"),
		Элементы.ГруппаЮридическийАдрес);
	Если Не ПустаяСтрока(ОрганизацииПоЭтомуАдресу) Тогда
		ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
		ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
		ЭлементФормы.ЦветТекста = ЦветаСтиля.ЦветТекстаДополнительныеСведения;
		ЭлементФормы.Заголовок = ОрганизацииПоЭтомуАдресу;
	Иначе
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли;
	
	СсылкаДляПереходаНаКарту = СтрокаСсылкиПоказатьНаКарте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаСсылкиПоказатьНаКарте()
	
	СоставСтроки = Новый Массив;
	СоставСтроки.Добавить(БиблиотекаКартинок.ПоказатьНаКарте);
	СоставСтроки.Добавить(НСтр("ru = 'Показать на карте'"));
	Возврат Новый ФорматированнаяСтрока(СоставСтроки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипыПомещений()
	
	Результат = Новый Соответствие;
	Результат.Вставить(НРег("Квартира"),  Истина);
	Результат.Вставить(НРег("Офис"),      Истина);
	Результат.Вставить(НРег("Бокс"),      Истина);
	Результат.Вставить(НРег("Помещение"), Истина);
	Результат.Вставить(НРег("Комната"),   Истина);
	Результат.Вставить(НРег("Этаж"),      Истина);
	Результат.Вставить(НРег("А/я"),       Истина);
	Результат.Вставить(НРег("В/ч"),       Истина);
	Результат.Вставить(НРег("П/о"),       Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЧастьАдресаСодержитТипПомещения(ЧастьАдреса, ТипыПомещений)
	
	Результат = Ложь;
	
	ДанныеСтроки = СтрРазделить(ЧастьАдреса, ",. ", Ложь);
	Для Каждого ЧастьСтроки Из ДанныеСтроки Цикл
		Если ТипыПомещений().Получить(ЧастьСтроки) <> Неопределено Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВывестиЧисленность(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаСрЧисленность.Видимость = Истина;
	Иначе
		Элементы.ГруппаСрЧисленность.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ОткрытыеДанные = Сведения.ОткрытыеГосударственныеДанныеФНС;
	ОткрытыеДанные.Сортировать("Год Убыв");
	
	СреднесписочнаяЧисленность = НСтр("ru = 'нет данных'");
	
	ЕстьДанныеПоЧисленности = Ложь;
	Для Каждого ТекущиеОткрытыеДанные Из ОткрытыеДанные Цикл
		
		Если ТекущиеОткрытыеДанные.КоличествоСотрудников = 0
			Или ТекущиеОткрытыеДанные.КоличествоСотрудников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СреднесписочнаяЧисленность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (за %2 год)'"),
			Формат(ТекущиеОткрытыеДанные.КоличествоСотрудников, "ЧРГ=' '; ЧГ=3,0"),
			Формат(ТекущиеОткрытыеДанные.Год, "ЧГ=0"));
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаУчредители

&НаСервере
Процедура ВывестиКарточкуУчредители(Сведения)
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаУчредители.Видимость = Истина;
	Иначе
		Элементы.ГруппаУчредители.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Сведения.Учредители.Количество() = 0 Тогда
		Элементы.ГруппаУчредители.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаУчредители.Видимость = Истина;
	
	Сведения.Учредители.Сортировать("СуммаКапитала Убыв");
	
	Учредители = Новый Структура("Учредители", Новый Массив);
	
	Индекс = 0;
	Для Каждого Учредитель Из Сведения.Учредители Цикл
		
		УчредительЗначение = Новый Структура;
		УчредительЗначение.Вставить("Учредитель", Учредитель.Учредитель);
		УчредительЗначение.Вставить("СуммаКапитала", Учредитель.СуммаКапитала);
		УчредительЗначение.Вставить("ПроцентКапитала", Учредитель.ПроцентКапитала);
		
		Учредители.Учредители.Добавить(УчредительЗначение);
		
		ВывестиУчредителя(Индекс, Элементы.ГруппаУчредители, Учредитель, Сведения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Скрыть оставшиеся элементы
	Если КоличествоУчредителей < Сведения.Учредители.Количество() Тогда
		КоличествоУчредителей = Сведения.Учредители.Количество();
	Иначе
		СкрытьУчредителей(Индекс);
		КоличествоУчредителей = Сведения.Учредители.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиУчредителя(Индекс, Родитель, Учредитель, Сведения)
	
	ГруппаШапка = ЭлементПоИмени(("ГруппаУчредитель" + Индекс), Тип("ГруппаФормы"), Родитель);
	ГруппаШапка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапка.ОтображатьЗаголовок = Ложь;
	ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаШапка.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	ЭлементФормы = ЭлементПоИмени("ДекорацияУчредитель" + Индекс, Тип("ДекорацияФормы"), ГруппаШапка);
	ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
	ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
	ЭлементФормы.Гиперссылка = Истина;
	ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
	ЭлементФормы.Заголовок = Учредитель.Учредитель;
	
	ЭлементФормы = ЭлементПоИмени("ДекорацияУчредитель" + Индекс + "СуммаКапитала", Тип("ДекорацияФормы"), ГруппаШапка);
	Если Учредитель.СуммаКапитала > 0 Тогда
		
		ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
		ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
		ЭлементФормы.ЦветТекста = ЦветаСтиля.ЦветТекстаДополнительныеСведения;
		ЭлементФормы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 ₽ (%2%)'"),
			Формат(Учредитель.СуммаКапитала, "ЧРГ=' '"),
			Окр(Учредитель.ПроцентКапитала));
	Иначе
		
		ЭлементФормы.Видимость = Ложь;
		
	КонецЕсли;
	
	СведенияОбУчредителе = Новый Массив;
	КоличествоОрганизаций = Учредитель.ОрганизацииГдеРуководитель.Количество();
	Руководитель = Сведения.Руководитель;
	ЯвляетсяРуководителем = Учредитель.ОрганизацииГдеРуководитель.Найти(Сведения.ИНН, "ИНН") <> Неопределено;
	Если ЯвляетсяРуководителем Тогда
		КоличествоОрганизаций = КоличествоОрганизаций - 1;
		ШаблонСтроки = НСтр("ru='Является руководителем еще в %1%2'");
	Иначе
		ШаблонСтроки = НСтр("ru='Является руководителем в %1%2'");
	КонецЕсли;
	
	Если КоличествоОрганизаций > 0 Тогда
		СведенияОбУчредителе.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСтроки,
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организациях;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(Учредитель.ОрганизацииГдеРуководительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					"")));
	КонецЕсли;
	
	КоличествоОрганизаций = Учредитель.ОрганизацииГдеУчредитель.Количество();
	Если Учредитель.ОрганизацииГдеУчредитель.Найти(Сведения.ИНН, "ИНН") <> Неопределено Тогда
		КоличествоОрганизаций = КоличествоОрганизаций - 1;
	КонецЕсли;
	Если КоличествоОрганизаций > 0 Тогда
		СведенияОбУчредителе.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Является учредителем еще в %1%2'"),
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = '%1 организаций;%1 организации;%1 организациях;%1 организациях;%1 организациях;%1 организациях'"),
					КоличествоОрганизаций),
				?(Учредитель.ОрганизацииГдеУчредительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					"")));
	КонецЕсли;
	
	ЭлементФормы = ЭлементПоИмени("ДекорацияУчредитель" + Индекс + "Сведения", Тип("ДекорацияФормы"), ГруппаШапка);
	Если СведенияОбУчредителе.Количество() > 0 Тогда
		СведенияОбУчредителе = СтрСоединить(СведенияОбУчредителе, Символы.ПС);
		ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
		ЭлементФормы.Шрифт = ШрифтОбычнаяНадписьПроверкиКонтрагента;
		ЭлементФормы.ЦветТекста = ЦветаСтиля.ЦветТекстаДополнительныеСведения;
		ЭлементФормы.Заголовок = СведенияОбУчредителе;
	Иначе
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭлементПоИмени(Имя, ТипЭлемента, Родитель)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, Имя) Тогда
		Результат = Элементы[Имя];
		Результат.Видимость = Истина;
		Возврат Элементы[Имя];
	Иначе
		Возврат Элементы.Добавить(Имя, ТипЭлемента, Родитель);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкрытьУчредителей(НачальныйИндекс)
	
	Для Индекс = НачальныйИндекс По КоличествоУчредителей Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				Элементы,
				("ГруппаУчредитель" + Индекс)) Тогда
			Элемент = Элементы["ГруппаУчредитель" + Индекс];
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаСвязанныеОрганизации

&НаСервере
Процедура ВывестиКарточкуСвязанныеОрганизации(Сведения)
	
	ДанныеКарточки = Сведения.КарточкаСвязанныеОрганизации;
	
	НастроитьСвойстваЭлементовСвязанныеОрганизации(ДанныеКарточки);
	
	Если Не ДанныеКарточки.ЕстьДанные Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеОрганизации = ДанныеКарточки.СвязанныеОрганизации;
	КоличествоОрганизаций = СвязанныеОрганизации.ВГраница();
	
	Для Индекс = 0 По 2 Цикл
		Если Индекс <= КоличествоОрганизаций Тогда
			Элементы["ГруппаСвязаннаяОрганизация" + Индекс].Видимость = Истина;
			ДанныеОрганизации = СвязанныеОрганизации[Индекс];
			Элементы["ДекорацияСвязаннаяОрганизация" + Индекс].Заголовок = СтроковыеФункции.ФорматированнаяСТрока(
				ТекстСвязаннойОрганизации(ДанныеОрганизации));
			Если ЗначениеЗаполнено(ДанныеОрганизации.КодСтатуса)
				И ДанныеОрганизации.КодСтатуса <> "001" Тогда
				
				Элементы["ДекорацияСвязаннаяОрганизацияСтатус" + Индекс].Заголовок = ДанныеОрганизации.НаименованиеСтатуса;
				Элементы["ДекорацияСвязаннаяОрганизацияСтатус" + Индекс].Видимость = Истина;
			Иначе
				Элементы["ДекорацияСвязаннаяОрганизацияСтатус" + Индекс].Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы["ГруппаСвязаннаяОрганизация" + Индекс].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовСвязанныеОрганизации(ДанныеКарточки)
	
	Элементы.ГруппаСвязанныеОрганизации.Видимость = Истина;
	Элементы.ДекорацияНетИнформацииОСвязанныхОрганизациях.Видимость = Не ДанныеКарточки.ЕстьДанные;
	Элементы.ГруппаДанныеОСвязанныхОрганизациях.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.ДекорацияСвязаннаяОрганизацияВсе.Видимость = ДанныеКарточки.ЕстьДанные;
	
КонецПроцедуры

&НаСервере
Функция ТекстСвязаннойОрганизации(ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<a href=%1>%2</a>'"),
			ДанныеОрганизации.ИНН,
			ДанныеОрганизации.НаименованиеОрганизации);
	Иначе
		Результат = ДанныеОрганизации.НаименованиеОрганизации;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КарточкаВидыДеятельности

&НаСервере
Процедура ВывестиКарточкуВидыДеятельности(Сведения)
	
	ДанныеКарточки = Сведения.КарточкаВидыДеятельности;
	
	НастроитьСвойстваЭлементовВидыДеятельности(ДанныеКарточки);
	
	Если Не ДанныеКарточки.ЕстьДанные Тогда
		Элементы.ДекорацияВидыДеятельностиНетДанных.Заголовок = ДанныеКарточки.Описание;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияОсновнойКодОКВЭД.Заголовок        = ДанныеКарточки.ОсновнойВид.Код;
	Элементы.ДекорацияОсновнойВидДеятельности.Заголовок = ДанныеКарточки.ОсновнойВид.Наименование;
	
	Если ДанныеКарточки.Дополнительные.Количество() = 1
		Или ДанныеКарточки.Дополнительные.Количество() = 2 Тогда
		
		ВывестиДополнительныеВидыДеятельности(ДанныеКарточки);
		
	Иначе
		Элементы.ДекорацияВсеВидыДеятельности.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Все виды деятельности (%1)'"),
			ДанныеКарточки.Дополнительные.Количество() + 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовВидыДеятельности(ДанныеКарточки)
	
	Элементы.ГруппаВидыДеятельности.Видимость = Истина;
	Если ДанныеКарточки.ЕстьДанные Тогда
		
		Элементы.ДекорацияВидыДеятельностиНетДанных.Видимость = Ложь;
		Элементы.ГруппаОсновнойВидДеятельности.Видимость = Истина;
		
		КоличествоВидовДеятельности = ДанныеКарточки.Дополнительные.Количество();
		
		Если КоличествоВидовДеятельности = 0 Тогда
			
			Элементы.ВидыДеятельности.Видимость = Ложь;
			
			Элементы.ГруппаДополнительныйВидДеятельности0.Видимость = Ложь;
			Элементы.ГруппаДополнительныйВидДеятельности1.Видимость = Ложь;
			
			Элементы.ДекорацияВсеВидыДеятельности.Видимость = Ложь;
			
		ИначеЕсли КоличествоВидовДеятельности < 3 Тогда
			
			Элементы.ВидыДеятельности.Видимость = Ложь;
			
			Элементы.ГруппаДополнительныйВидДеятельности0.Видимость = Истина;
			Если КоличествоВидовДеятельности = 2 Тогда
				Элементы.ГруппаДополнительныйВидДеятельности1.Видимость = Истина;
			Иначе
				Элементы.ГруппаДополнительныйВидДеятельности1.Видимость = Ложь;
			КонецЕсли;
			
			Элементы.ДекорацияВсеВидыДеятельности.Видимость = Ложь;
			
		Иначе
			Элементы.ГруппаДополнительныйВидДеятельности0.Видимость = Ложь;
			Элементы.ГруппаДополнительныйВидДеятельности1.Видимость = Ложь;
			
			Элементы.ДекорацияВсеВидыДеятельности.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ДекорацияВидыДеятельностиНетДанных.Видимость   = Истина;
		Элементы.ГруппаОсновнойВидДеятельности.Видимость        = Ложь;
		Элементы.ГруппаДополнительныйВидДеятельности0.Видимость = Ложь;
		Элементы.ГруппаДополнительныйВидДеятельности1.Видимость = Ложь;
		Элементы.ДекорацияВсеВидыДеятельности.Видимость         = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДополнительныеВидыДеятельности(ДанныеКарточки)
	
	КоличествоВидовДеятельности = ДанныеКарточки.Дополнительные.Количество();
	Для Индекс = 0 По КоличествоВидовДеятельности - 1 Цикл
		
		Элементы["ДекорацияДополнительныйКодОКВЭД" + Индекс].Заголовок =
			ДанныеКарточки.Дополнительные[Индекс].Код;
		Элементы["ДекорацияДополнительныйВидДеятельности" + Индекс].Заголовок =
			ДанныеКарточки.Дополнительные[Индекс].Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаФинансовыйАнализ

&НаСервере
Процедура ВывестиКарточкуФинансовыйАнализ(ДанныеПроверкиКонтрагента)
	
	Если Не ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаФинансовыйАнализ.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаФинансовыйАнализ.Видимость = Истина;
	
	ДанныеКарточки = ДанныеПроверкиКонтрагента.КарточкаФинансовогоАнализа;
	
	НастроитьСвойстваЭлементовФинансовогоАнализа(ДанныеКарточки);
	
	Если ДанныеКарточки.ЕстьДанные Тогда
		Элементы.ДекорацияОценкаРискаБанкротстваЗначение.Заголовок  = ДанныеКарточки.ОценкаРискаБанкротства.Значение;
		Элементы.ДекорацияОценкаРискаБанкротстваЗначение.ЦветТекста = ДанныеКарточки.ОценкаРискаБанкротства.ЦветТекста;
		Элементы.ДекорацияКредитоспособностьЗначение.Заголовок      = ДанныеКарточки.Кредитоспособность.Значение;
		Элементы.ДекорацияКредитоспособностьЗначение.ЦветТекста     = ДанныеКарточки.Кредитоспособность.ЦветТекста;
		Элементы.ДекорацияРентабельностьАктивовЗначение.Заголовок   = ДанныеКарточки.РентабельностьАктивов.Значение;
		Элементы.ДекорацияРентабельностьАктивовЗначение.ЦветТекста  = ДанныеКарточки.РентабельностьАктивов.ЦветТекста;
		Элементы.ДекорацияРентабельностьПродажЗначение.Заголовок    = ДанныеКарточки.РентабельностьПродаж.Значение;
		Элементы.ДекорацияРентабельностьПродажЗначение.ЦветТекста   = ДанныеКарточки.РентабельностьПродаж.ЦветТекста;
	Иначе
		Элементы.ДекорацияНетДанныхОФинансовомАнализе.Заголовок      = ДанныеКарточки.Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовФинансовогоАнализа(ДанныеКарточки)
	
	Элементы.ГруппаФинансовыйАнализ.Видимость = Истина;
	Элементы.ГруппаДанныеПоказателейФинансовогоАнализа.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.ДекорацияНетДанныхОФинансовомАнализе.Видимость = Не ДанныеКарточки.ЕстьДанные;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаАнализОтчетности

&НаСервере
Процедура ВывестиКарточкуАнализОтчетности(ДанныеПроверкиКонтрагента)
	
	Если Не ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаАнализОтчетности.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаАнализОтчетности.Видимость = Истина;
	
	ДанныеКарточки = ДанныеПроверкиКонтрагента.КарточкаАнализаОтчетности;
	
	НастроитьСвойстваЭлементовАнализаОтчетности(ДанныеКарточки);
	
	Если ДанныеКарточки.ЕстьДанные Тогда
		Элементы.ДекорацияГодОтчетности.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 г.'"),
			ДанныеКарточки.Год);
		Элементы.ДекорацияЗначениеПродажи.Заголовок      = СокращенноеЗначениеЧисла(ДанныеКарточки.Продажи.Значение);
		Элементы.ДекорацияЗначениеПрибыль.Заголовок      = СокращенноеЗначениеЧисла(ДанныеКарточки.Прибыль.Значение);
		Элементы.ДекорацияЗначениеЧистыеАктивы.Заголовок = СокращенноеЗначениеЧисла(ДанныеКарточки.ЧистыеАктивы.Значение);
		
	Иначе
		Элементы.ДекорацияНетДанныхОбАнализеОтчетности.Заголовок = ДанныеКарточки.Описание;
	КонецЕсли;
	
	УстановитьКартинкиАнализаОтчетности(ДанныеКарточки.ПоказателиДляКартинок);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовАнализаОтчетности(ДанныеКарточки)
	
	Элементы.ГруппаАнализОтчетности.Видимость = Истина;
	Элементы.ОтчетностьПоБлокам.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.СтраницаОтчетностьПоСтраницам.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.ГруппаДанныеАнализОтчетности.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.ДекорацияНетДанныхОбАнализеОтчетности.Видимость = Не ДанныеКарточки.ЕстьДанные;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиАнализаОтчетности(Показатели)
	
	ЕстьДанные = Показатели.Свойство("Продажи_1")
		И Показатели["Продажи_1"] <> Неопределено
		И Показатели.Свойство("Продажи_2")
		И Показатели["Продажи_2"] <> Неопределено;
		
	Если ЕстьДанные Тогда
		Элементы.ГруппаДанныеОтчетностиКартинки.Видимость = Истина;
		
		УстановитьКартинкуАнализаОтчетности(Показатели, "Продажи");
		УстановитьКартинкуАнализаОтчетности(Показатели, "Прибыль");
		УстановитьКартинкуАнализаОтчетности(Показатели, "ЧистыеАктивы");
	Иначе
		Элементы.ГруппаДанныеОтчетностиКартинки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуАнализаОтчетности(Показатели, ИмяПоказателя)
	
	ЗначениеРазницы = Показатели[ИмяПоказателя + "_1"] - Показатели[ИмяПоказателя + "_2" ];
	Если ЗначениеРазницы > 0 Тогда
		ВыбраннаяКартинка = БиблиотекаКартинок.ОформлениеСтрелкаВверхЗеленая;
		Шаблон = НСтр("ru='+ %1'");
	ИначеЕсли ЗначениеРазницы < 0 Тогда
		ВыбраннаяКартинка = БиблиотекаКартинок.ОформлениеСтрелкаВнизКрасная;
		Шаблон = НСтр("ru='- %1'");
		ЗначениеРазницы = -ЗначениеРазницы;
	Иначе
		ВыбраннаяКартинка = БиблиотекаКартинок.ОформлениеДефисЖелтый;
		Шаблон = "";
	КонецЕсли;
	
	Элементы["ДекорацияКартинкаИзменение" + ИмяПоказателя].Картинка = ВыбраннаяКартинка;
	Элементы["ДекорацияКартинкаИзменение" + ИмяПоказателя].РасширеннаяПодсказка.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			СокращенноеЗначениеЧисла(ЗначениеРазницы));
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаИзмененияВЕГР

&НаСервере
Процедура ВывестиКарточкуИзмененияВЕГР(Сведения)
	
	Элементы.ГруппаПоследниеИзмененияВЕГР.Видимость = Истина;
	
	ИзмененияВРеестре = Сведения.ИзмененияВРеестре;
	Если ИзмененияВРеестре.Количество() = 0 Тогда
		Элементы.ДекорацияИзменениеВЕГРДата0.Заголовок     = Формат(ТекущаяДатаСеанса(), "ДЛФ=D");
		Элементы.ДекорацияИзменениеВЕГРЗначение0.Заголовок = НСтр("ru = 'отсутствуют'");
		Если ЭтоЮридическоеЛицо Тогда
			Элементы.ДекорацияВсеИзмененияЕГР.Заголовок = НСтр("ru = 'Все изменения ЕГРЮЛ'");
		Иначе
			Элементы.ДекорацияВсеИзмененияЕГР.Заголовок = НСтр("ru = 'Все изменения ЕГРЮЛ'");
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененияВРеестре.Сортировать("ДатаИзменения Убыв");
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ДекорацияЗаголовокПоследниеИзмененияВЕГР.Заголовок = НСтр("ru = 'Изменения в ЕГРЮЛ'");
		ШаблонВсеИзменения = НСтр("ru = 'Все изменения ЕГРЮЛ (%1)'");
	Иначе
		Элементы.ДекорацияЗаголовокПоследниеИзмененияВЕГР.Заголовок = НСтр("ru = 'Изменения в ЕГРИП'");
		ШаблонВсеИзменения = НСтр("ru = 'Все изменения ЕГРИП (%1)'");
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ИзменениеВРеестре Из ИзмененияВРеестре Цикл
		Если Индекс = 3 Тогда
			Элементы.ДекорацияВсеИзмененияЕГР.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВсеИзменения,
				ИзмененияВРеестре.Количество());
			Прервать;
		Иначе
			ИмяЭлементаДата     = "ДекорацияИзменениеВЕГРДата" + Индекс;
			ИмяЭлементаЗначение = "ДекорацияИзменениеВЕГРЗначение" + Индекс;
			Элементы[ИмяЭлементаДата].Заголовок     = Формат(ИзменениеВРеестре.ДатаИзменения, "ДЛФ=D");
			Элементы[ИмяЭлементаЗначение].Заголовок = Формат(ИзменениеВРеестре.ОписаниеИзменения, "ДЛФ=D");
			Элементы["ГруппаИзменениеВЕГР" + Индекс].Видимость = Истина;
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаНалоги

&НаСервере
Процедура ВывестиКарточкуНалоги(ДанныеПроверкиКонтрагента)
	
	Если Не ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаНалоги.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаНалоги.Видимость = Истина;
	
	ДанныеКарточки = ДанныеПроверкиКонтрагента.КарточкаНалоги;
	
	НастроитьСвойстваЭлементовНалоги(ДанныеКарточки);
	
	Если ДанныеКарточки.ЕстьДанные Тогда
		Элементы.ДекорацияГодНалоги.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 г.'"),
			Формат(ДанныеКарточки.Год, "ЧГ="));
		Элементы.ДекорацияОплаченныеНалогиЗначение.Заголовок   =
			?(ДанныеКарточки.ОплаченныеНалоги.Значение = Неопределено,
				НСтр("ru='нет данных'"),
				СокращенноеЗначениеЧисла(ДанныеКарточки.ОплаченныеНалоги.Значение, Ложь));
		Элементы.ДекорацияНалогиНаЗарплатуЗначение.Заголовок   =
			?(ДанныеКарточки.НалогиНаЗарплату.Значение = Неопределено,
				НСтр("ru='нет данных'"),
				СокращенноеЗначениеЧисла(ДанныеКарточки.НалогиНаЗарплату.Значение, Ложь));
		Элементы.ДекорацияПросроченныеНалогиЗначение.Заголовок =
			?(ДанныеКарточки.ПросроченныеНалоги.Значение = Неопределено,
				НСтр("ru='отсутствуют'"),
				СокращенноеЗначениеЧисла(ДанныеКарточки.ПросроченныеНалоги.Значение, Ложь));
		Элементы.ДекорацияСистемаНалогообложенияЗначение.Заголовок = ДанныеКарточки.СистемаНалогообложения;
	Иначе
		Элементы.ДекорацияНетСведенийОНалогах.Заголовок = ДанныеКарточки.Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовНалоги(ДанныеКарточки)
	
	Элементы.ГруппаНалоги.Видимость = Истина;
	Элементы.ГруппаДанныеНалоги.Видимость = ДанныеКарточки.ЕстьДанные;
	Элементы.ДекорацияНетСведенийОНалогах.Видимость = Не ДанныеКарточки.ЕстьДанные;
	ВидимостьНалогообложения = ДанныеКарточки.СистемаНалогообложения <> Неопределено;
	Элементы.ДекорацияСистемаНалогообложенияЗаголовок.Видимость = ВидимостьНалогообложения;
	Элементы.ДекорацияСистемаНалогообложенияЗначение.Видимость  = ВидимостьНалогообложения;
	
КонецПроцедуры

#КонецОбласти

#Область КарточкаДинамикаПоказателей

&НаСервере
Процедура ВывестиКарточкуДинамикаПоказателей(ДанныеПроверкиКонтрагента);
	
	Если Не ЭтоЮридическоеЛицо Тогда
		Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Истина;
	
	КарточкаАнализаОтчетности = ДанныеПроверкиКонтрагента.КарточкаАнализаОтчетности;
	
	ВывестиГрафикПоказателей(КарточкаАнализаОтчетности);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиГрафикПоказателей(КарточкаАнализаОтчетности)
	
	Если Не КарточкаАнализаОтчетности.ЕстьДанные Тогда
		Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Истина;
	
	Показатели = КарточкаАнализаОтчетности.Показатели;
	КоличествоЛет = Показатели.КоличествоЛет;
	Если КоличествоЛет < 2 Тогда
		Элементы.ГруппаГрафикДинамикаПоказателей.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаДиаграммаПоказателей.Видимость = Истина;
	
	ДиаграммаПоказателей.Обновление = Ложь;
	ДиаграммаПоказателей.РежимСглаживания = РежимСглаживанияДиаграммы.Нет;
	
	ДиаграммаПоказателей.КоличествоСерий = 2;
	ДиаграммаПоказателей.КоличествоТочек = КоличествоЛет;
	
	ДиаграммаПоказателей.Серии[0].Текст = НСтр("ru='Продажи'");
	ДиаграммаПоказателей.Серии[0].Маркер = ТипМаркераДиаграммы.Круг;
	ЗначенияПродаж = Новый Массив;
	
	ДиаграммаПоказателей.Серии[1].Текст = НСтр("ru='Прибыль'");
	ДиаграммаПоказателей.Серии[1].Маркер = ТипМаркераДиаграммы.Круг;
	ЗначенияПрибыль = Новый Массив;
	
	КлючГода = 5;
	ИндексТочкиДиаграммы = 0;
	Пока КлючГода > 0 Цикл
		Если Не Показатели.Свойство("Год_" + КлючГода) Тогда
			КлючГода = КлючГода - 1;
			Продолжить;
		КонецЕсли;
		ДиаграммаПоказателей.Точки[ИндексТочкиДиаграммы].Текст = Показатели["Год_" + КлючГода];
		ЗначенияПродаж.Добавить(Показатели["Продажи_" + КлючГода]);
		ЗначенияПрибыль.Добавить(Показатели["Прибыль_" + КлючГода]);
		КлючГода = КлючГода - 1;
		ИндексТочкиДиаграммы = ИндексТочкиДиаграммы + 1;
	КонецЦикла;
	
	УстановитьЗначения(ДиаграммаПоказателей, ЗначенияПродаж, 0);
	УстановитьЗначения(ДиаграммаПоказателей, ЗначенияПрибыль, 1);
	
	ДиаграммаПоказателей.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначения(Диаграмма, МассивЗначений, Серия = 0)
	
	Для ИндексТочки = 0 По Диаграмма.КоличествоТочек - 1 Цикл
		ТекущееЗначение = МассивЗначений[ИндексТочки];
		Если ИндексТочки > 0 Тогда
			ПредыдущееЗначение = МассивЗначений[ИндексТочки - 1];
		Иначе 
			ПредыдущееЗначение = МассивЗначений[0];
		КонецЕсли;
		
		// Формируем форматированную строку подсказки
		Стр1 = Новый ФорматированнаяСтрока("" + ТекущееЗначение, ВажнаяНадписьШрифт);
		Стр2 = Новый ФорматированнаяСтрока(" (");
		
		Разница = ТекущееЗначение - ПредыдущееЗначение;
		
		Если Разница < 0 Тогда
			Стр3 = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ДосьеУменьшениеПоказателя);
		Иначе
			Стр3 = Новый ФорматированнаяСтрока(БиблиотекаКартинок.ДосьеУвеличениеПоказателя);
		КонецЕсли;
		
		Если ПредыдущееЗначение = 0 Тогда
			Стр4 = "";
		Иначе
			Процент = Окр(Разница / ПредыдущееЗначение * 100);
			Стр4 = Новый ФорматированнаяСтрока("" + Процент + "%)");
		КонецЕсли;
		
		Диаграмма.УстановитьЗначение(ИндексТочки, Серия, МассивЗначений[ИндексТочки], , Новый ФорматированнаяСтрока(Стр1, Стр2, Стр3, Стр4));
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КарточкаПроверки

&НаСервере
Процедура ВывестиКарточкуПроверки(ДанныеКарточки)
	
	НастроитьСвойстваЭлементовПроверки(ДанныеКарточки);
	
	Элементы.ДекорацияПроверкиОписание.Заголовок = ДанныеКарточки.Описание;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементовПроверки(ДанныеКарточки)
	
	Элементы.ГруппаПроверки.Видимость = Истина;
	
	Элементы.ДекорацияПроверкиПодробнее.Видимость = ДанныеКарточки.ЕстьДанные;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводЗначений

&НаКлиенте
Процедура ОбработатьВыборТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Расшифровка = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("Уровень", "Ошибка");
		Отбор.Вставить(
			"СобытиеЖурналаРегистрации",
			НСтр("ru = 'Работа с контрагентами'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровкуТабличногоДокумента(Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура")
		ИЛИ Не Расшифровка.Свойство("Действие") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка.Действие = "Показать" 
		ИЛИ Расшифровка.Действие = "Свернуть" Тогда
		
		ПоказатьСкрытьОбластьДокумента(Расшифровка);
		
	ИначеЕсли Расшифровка.Действие = "Открыть" Тогда
		
		Если Не Расшифровка.Свойство("ИНН") Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Расшифровка.ИНН)
			ИЛИ (СтрДлина(Расшифровка.ИНН) <> 10
			И СтрДлина(Расшифровка.ИНН) <> 12) Тогда
			Возврат;
		КонецЕсли;
		
		ПроверкаКонтрагентаКлиент.Проверить(Расшифровка.ИНН);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОбластьДокумента(Расшифровка)
	
	Если Не Расшифровка.Свойство("ИмяОбласти") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяДокумента,ИмяОбласти", Расшифровка.ИмяДокумента, Расшифровка.ИмяОбласти);
	СтрокиТаблицы = ОбластиРасшифровки.НайтиСтроки(Отбор);
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаОбласти = СтрокиТаблицы[0];
	
	НомерСтрокиЕще = СтрокаОбласти.ПерваяСтрока - 1;
	
	ТабличныйДокумент = ЭтотОбъект[Расшифровка.ИмяДокумента];
	Если Расшифровка.Действие = "Показать" Тогда
		ТабличныйДокумент.Область(НомерСтрокиЕще, , НомерСтрокиЕще).Видимость = Ложь;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Истина;
		Элементы[Расшифровка.ИмяДокумента].ТекущаяОбласть = ТабличныйДокумент.Область(СтрокаОбласти.ПоследняяСтрока, 3);
	Иначе // "Свернуть"
		ТабличныйДокумент.Область(НомерСтрокиЕще, , НомерСтрокиЕще).Видимость = Истина;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		Элементы[Расшифровка.ИмяДокумента].ТекущаяОбласть = ТабличныйДокумент.Область(НомерСтрокиЕще, 3);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьГлавноеМеню(
	Знач Элементы,
	Знач Параметры)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Параметры.Страница;
	
	КнопкиМеню = Новый Массив;
	КнопкиМеню.Добавить("Сводка");
	КнопкиМеню.Добавить("ВидыДеятельности");
	КнопкиМеню.Добавить("ОтчетностьПоБлокам");
	КнопкиМеню.Добавить("Проверки");
	КнопкиМеню.Добавить("СобытияМониторинга");
	КнопкиМеню.Добавить("Налоги");
	КнопкиМеню.Добавить("СвязанныеОрганизации");
	КнопкиМеню.Добавить("ДанныеГосРеестров");
	КнопкиМеню.Добавить("ФинансовыйАнализ");
	
	Для Каждого КнопкаМеню Из КнопкиМеню Цикл
		Элементы[КнопкаМеню].ЦветТекста = Новый Цвет;
	КонецЦикла;
	
	Параметры.Кнопка.ЦветТекста = Новый Цвет(0, 0, 0);
	
	КнопкиМенюИзменения = Новый Массив;
	КнопкиМенюИзменения.Добавить("ИзмененияНаименования");
	КнопкиМенюИзменения.Добавить("ИзмененияРуководителя");
	КнопкиМенюИзменения.Добавить("ИзмененияКПП");
	КнопкиМенюИзменения.Добавить("ИзмененияФИО");
	КнопкиМенюИзменения.Добавить("ИзмененияАдрес");	
	
	Для Каждого КнопкаМеню Из КнопкиМенюИзменения Цикл
		Элементы[КнопкаМеню].ЦветФона = Новый Цвет;
		Элементы[КнопкаМеню].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыНастройкиМеню(
		Страница,
		Кнопка)
	
	Результат = Новый Структура;
	Результат.Вставить("Страница",           Страница);
	Результат.Вставить("Кнопка",             Кнопка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РезультатФинансовыйАнализОбработкаРасшифровки(
		Элемент,
		Расшифровка,
		СтандартнаяОбработка)
	
	ОбработатьРасшифровкуТабличногоДокумента(
		Расшифровка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроверкиОбработкаРасшифровки(
		Элемент,
		Расшифровка,
		СтандартнаяОбработка,
		ДополнительныеПараметры)
	
	ОбработатьРасшифровкуТабличногоДокумента(
		Расшифровка,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискуСЕГРЮЛ(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаЕГРЮЛ,
			Элементы.ДанныеГосРеестров));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияНаименованийНажатие(Элемент)
	
	Если ЭтоЮридическоеЛицо Тогда
		НастроитьГлавноеМеню(
			Элементы,
			ПараметрыНастройкиМеню(
				Элементы.СтраницаИсторияНаименования,
				Элементы.ИзмененияНаименования));
		Элементы.ИзмененияНаименования.Видимость = Истина;
	Иначе
		НастроитьГлавноеМеню(
			Элементы,
			ПараметрыНастройкиМеню(
				Элементы.СтраницаИсторияФИО,
				Элементы.ИзмененияФИО));
		Элементы.ИзмененияФИО.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаВидДеятельностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Область = РезультатВидыДеятельности.НайтиТекст(
		Текст,
		,
		,
		Истина,
		,
		,
		Истина);
	
	Если Область = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РезультатВидыДеятельности.УстановитьВыделенныеОбласти(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Область));
	ТекущийЭлемент = Элементы.РезультатВидыДеятельности;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаСобытияМониторингаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Область = РезультатСобытияМониторинга.НайтиТекст(
		Текст,
		,
		,
		Истина,
		,
		,
		Истина);
	
	Если Область = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РезультатСобытияМониторинга.УстановитьВыделенныеОбласти(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Область));
	ТекущийЭлемент = Элементы.РезультатСобытияМониторинга;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьРасчетНажатие(Элемент)
	
	ФинансовыйАнализ(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНалогиПодробнееНажатие(Элемент)
	Налоги(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДинамикаПоказателейПодробнееНажатие(Элемент)
	
	ОтчетностьПоБлокам(Неопределено);
	БухгалтерскийБаланс(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверкиПодробнееНажатие(Элемент)
	
	Проверки(Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СокращенноеЗначениеЧисла(
		Знач Значение,
		Знач ЭтоВТысячах = Истина,
		Знач ДобавитьЗнакРубля = Истина)
	
	Если ЭтоВТысячах Тогда
		Значение = 1000 * Значение;
	КонецЕсли;
	
	Если Цел(Значение / 1000000000000) > 0 Тогда
		Сокращение = НСтр("ru='трлн'");
		Значение = Окр(Значение / 1000000000000, 1);
	ИначеЕсли Цел(Значение / 1000000000) > 0 Тогда
		Сокращение = НСтр("ru='млрд'");
		Значение = Окр(Значение / 1000000000, 1);
	ИначеЕсли Цел(Значение / 1000000) > 0 Тогда
		Сокращение = НСтр("ru='млн'");
		Значение = Окр(Значение / 1000000, 1);
	ИначеЕсли Цел(Значение / 1000) > 0 Тогда
		Сокращение = НСтр("ru='тыс'");
		Значение = Окр(Значение / 1000, 1);
	Иначе
		Сокращение = "";
	КонецЕсли;
	
	Если Значение > 10 Тогда
		Значение = Цел(Значение);
	КонецЕсли;
	
	Если ДобавитьЗнакРубля Тогда
		ШаблонЗначения = НСтр("ru='%1 %2 ₽'");
	Иначе
		ШаблонЗначения = НСтр("ru='%1 %2 ₽'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗначения,
		Значение,
		Сокращение);
	
КонецФункции

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	Если ЗначениеЗаполнено(КраткоеНаименование) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Проверка контрагента: %1'"),
			КраткоеНаименование);
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Проверка контрагента: %1'"),
			Контрагент);
	Иначе
		Заголовок = НСтр("ru='Проверка контрагента'");
	КонецЕсли;
	
	Элементы.ДанныеГосРеестров.Заголовок = ?(ЭтоЮридическоеЛицо,
		НСтр("ru='ЕГРЮЛ'"),
		НСтр("ru='ЕГРИП'"));
	
	Элементы.КнопкаДобавитьВСправочник.Видимость =
		(ИспользоватьДобавлениеВСправочник
		И Не ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(НайденныйИНН));
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСводка;
	ТекущийЭлемент = ?(ЗначениеЗаполнено(ОписаниеОшибки),
		Элементы.СтрокаПоиска,
		Элементы.ГруппаСводка);
	
	ПерерисоватьРасстановкуКарточек();
	
КонецПроцедуры

&НаСервере
Процедура ПерерисоватьРасстановкуКарточек()
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	ИначеЕсли ПроверкаКонтрагента.ЭтоШиринаЭкранаРасширеннойВерсии(ШиринаЭкрана) Тогда
		Если ЭтоЮридическоеЛицо Тогда
			Элементы.Переместить(
				Элементы.ГруппаПроверки,
				Элементы.ГруппаПравоСводкаСтолбец0);
			Элементы.Переместить(
				Элементы.Группа1СПАРКРискиИндексы,
				Элементы.ГруппаПравоСводкаСтолбец1);
			Элементы.Переместить(
				Элементы.Группа1СПАРКСобытияМониторинга,
				Элементы.ГруппаПравоСводкаСтолбец1);
			Элементы.Переместить(
				Элементы.ГруппаСправкиСПАРК,
				Элементы.ГруппаПравоСводкаСтолбец1);
			Элементы.Переместить(
				Элементы.ГруппаПереходВВебВерсиюСПАРК,
				Элементы.ГруппаПравоСводкаСтолбец1);
		Иначе
			Элементы.Переместить(
				Элементы.ГруппаПроверки,
				Элементы.Группа1СКонтрагентАнализОтчетности);
			Элементы.Переместить(
				Элементы.Группа1СПАРКРискиИндексы,
				Элементы.ГруппаПравоСводкаСтолбец0);
			Элементы.Переместить(
				Элементы.Группа1СПАРКСобытияМониторинга,
				Элементы.ГруппаПравоСводкаСтолбец0);
			Элементы.Переместить(
				Элементы.ГруппаСправкиСПАРК,
				Элементы.ГруппаПравоСводкаСтолбец0);
			Элементы.Переместить(
				Элементы.ГруппаПереходВВебВерсиюСПАРК,
				Элементы.ГруппаПравоСводкаСтолбец0);
		КонецЕсли;
	Иначе
		Элементы.Переместить(
			Элементы.Группа1СПАРКРискиИндексы,
			Элементы.ГруппаПравоСводкаСтолбец0,
			Элементы.ГруппаФинансовыйАнализ);
		Элементы.Переместить(
			Элементы.Группа1СПАРКСобытияМониторинга,
			Элементы.ГруппаПравоСводкаСтолбец0,
			Элементы.ГруппаНалоги);
		Элементы.Переместить(
			Элементы.ГруппаСправкиСПАРК,
			Элементы.ГруппаПравоСводкаСтолбец0,
			Элементы.ГруппаНалоги);
		Элементы.Переместить(
			Элементы.ГруппаПереходВВебВерсиюСПАРК,
			Элементы.ГруппаПравоСводкаСтолбец0,
			Элементы.ГруппаНалоги);
		Элементы.СтраницаВидыДеятельности.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.Переместить(
			Элементы.ГруппаСтраницаВидыДеятельностиПраво,
			Элементы.СтраницаВидыДеятельности,
			Элементы.ГруппаСтраницаВидыДеятельностиЦентр);
		Элементы.ГруппаСтраницаВидыДеятельностиПраво.Ширина = Элементы.РезультатВидыДеятельности.Ширина;
		Элементы.ГруппаСтраницаВидыДеятельностиПраво.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.СтраницаСобытияМониторинга.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.Переместить(
			Элементы.ГруппаСобытияМониторингаПраво,
			Элементы.СтраницаСобытияМониторинга,
			Элементы.РезультатСобытияМониторинга);
		Элементы.ГруппаСобытияМониторингаПраво.Ширина = Элементы.РезультатСобытияМониторинга.Ширина;
		Элементы.ГруппаСобытияМониторингаПоиск.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаСобытияМониторингаФильтры.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиФормированияОтчета()
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации"
		Или ОписаниеОшибки = "НеУказанПароль" Тогда
		Если ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			ТекстВопроса = НСтр("ru='Для формирования ""Проверка контрагента""
				|необходимо подключить Интернет-поддержку пользователей.
				|Подключить Интернет-поддержку?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ЗаполнитьОписаниеОшибкиФормированияОтчета(
				НСтр("ru='Для формирования ""Проверка контрагента""
					|необходимо подключить Интернет-поддержку пользователей.
					|Обратитесь к администратору.'"),
				"ИППНеПодключенаОбычныйПользователь");
		КонецЕсли;
	ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
		
		ОбработчикЗавершения = Новый ОписаниеОповещения(
			"ОкончаниеПодключенияТестовогоПериода",
			ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(
			"ИдентификаторМестаВызова",
			СтроковыеФункцииКлиент.СтрокаЛатиницей(
				НСтр("ru='Проверка контрагента'")));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
		
		МодульРаботаСКонтрагентамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКонтрагентамиКлиент");
		МодульРаботаСКонтрагентамиКлиент.ПодключитьТестовыйПериод(
			ПараметрыФормы,
			ЭтотОбъект,
			ДополнительныеПараметры);
		
	Иначе
		ЗаполнитьОписаниеОшибкиФормированияОтчета(ОписаниеОшибки);
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеОшибкиФормированияОтчета(
		Знач ОписаниеОшибки = "",
		Знач ИмяОбласти = Неопределено)
	
	Если ОписаниеОшибки = "ОшибкаПроверкиИНН" Тогда
		ТекстОшибки = НСтр("ru = 'Поле ИНН должно иметь длину 10 или 12 цифр'");
	ИначеЕсли ОписаниеОшибки = "ОшибкаПроверкиНаименования" Тогда
		ТекстОшибки = НСтр("ru = 'Поле Наименование является обязательным.'");
	ИначеЕсли ОписаниеОшибки = "ОшибкаПроверкиКодаРегиона" Тогда
		ТекстОшибки = НСтр("ru = 'Поле Код региона должно состоять из двух цифр.'");
	ИначеЕсли ОписаниеОшибки = "ОшибкаАутентификацииВСервисе" Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе. Обратитесь к администратору.'");
	ИначеЕсли ОписаниеОшибки = "ПревышеноКоличествоПопыток" Тогда
		ТекстОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
	ИначеЕсли ОписаниеОшибки = "ОшибкаПроверкиКПП" Тогда
		ТекстОшибки = НСтр("ru = 'Поле КПП должно иметь длину 9 цифр.'");
	ИначеЕсли ОписаниеОшибки = "ОшибкаПроверкиУникальногоНомера" Тогда
		ТекстОшибки = НСтр("ru = 'Уникальный номер передан некорректно.'");
	ИначеЕсли ОписаниеОшибки = "НеизвестнаяОшибка" Тогда
		ТекстОшибки = НСтр("ru = 'Неизвестная ошибка при подключении к сервису.'");
	Иначе
		ТекстОшибки = ОписаниеОшибки;
	КонецЕсли;
	Если ИмяОбласти = Неопределено Тогда
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			ИмяОбласти = "НеизвестнаяОшибкаОткрытиеЖурналаРегистрации";
		Иначе
			ИмяОбласти = "НеизвестнаяОшибка";
		КонецЕсли;
		
		ПроверкаКонтрагента.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецЕсли;
	
	Элементы.СтраницаОписаниеОшибки.Видимость = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
	Элементы.ДекорацияОписаниеОшибки.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьУведомления()
	
	МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
	УведомленияПользователя.Вставить(
		"РаботаСКонтрагентами",
		МодульРаботаСКонтрагентами.УведомлениеПользователя(
			МодульРаботаСКонтрагентами.ИдентификаторУслугиИнформацияОСвязяхКонтрагентов()));
	
	Если УведомленияПользователя.РаботаСКонтрагентами = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаУведомлениеСервиса1СКонтрагент.Видимость = Истина;
	Элементы.ДекорацияТекстУведомления1СКонтрагент.Заголовок =
		УведомленияПользователя.РаботаСКонтрагентами.ТекстУведомления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ЗагрузитьПодготовленныеДанные();
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = Результат.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	ОбработатьОшибкиФормированияОтчета();
	
	Если ОжиданиеОтвета Тогда
		// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса.
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 1.5, Истина);
	Иначе
		Элементы.СтраницаФормированиеОтчета.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбОшибке()
	
	ОбработатьОшибкиФормированияОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()
	
	СформироватьОтчетНаКлиенте(ИННПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтрагента = ?(ЭтоЮридическоеЛицо,
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо"),
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель"));
	
	ПроверкаКонтрагентаКлиент.ОтобразитьИндексыСПАРК(
		ИндексыСПАРКРиски,
		Неопределено,
		ИННПоиска,
		ВидКонтрагента,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьФормированиеОтчета()
	
	ОтключитьФормированиеОтчета = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСправочникаКонтрагентаСоздания(ВыбранныйЭлемент, ПараметрыФормы) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОткрытьФормуСозданияКонтрагента(ВыбранныйЭлемент.Значение, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияКонтрагента(ОписаниеСправочника, ПараметрыФормы)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыСозданияКонтрагента",
		ЭтотОбъект,
		Новый Структура(
			"ИНН, КПП",
			НайденныйИНН,
			КПП));
	ОткрытьФорму(
		"Справочник." + ОписаниеСправочника.Имя + ".ФормаОбъекта",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияКонтрагента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПослеЗакрытияФормыСозданияКонтрагентаНаСервере(ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыСозданияКонтрагентаНаСервере(Знач ДополнительныеПараметры)
	
	МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
	Если ЭтоЮридическоеЛицо Тогда
		ИнформацияОСвязях = МодульРаботаСКонтрагентами.НоваяИнформацияОСвязяхЮридическогоЛица();
	Иначе
		ИнформацияОСвязях = МодульРаботаСКонтрагентами.НоваяИнформацияОСвязяхПредпринимателя();
	КонецЕсли;
	ИнформацияОСвязях.Вставить("ДанныеПрограммы", Новый Структура);
	
	ЗаполнитьЗначенияСвойств(
		ИнформацияОСвязях,
		ДополнительныеПараметры);
	
	МодульРаботаСКонтрагентамиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентамиПереопределяемый");
	МодульРаботаСКонтрагентамиПереопределяемый.ДополнитьИнформациюДаннымиПрограммы(
		ИнформацияОСвязях,
		Контрагент);
		
	Элементы.КнопкаДобавитьВСправочник.Видимость =
		(ИспользоватьДобавлениеВСправочник
		И Не ЗначениеЗаполнено(Контрагент)
		И ЗначениеЗаполнено(НайденныйИНН));
	
	ВывестиКарточкуПереходВВебВерсиюСПАРК();
	Элементы.ГруппаСправкиСПАРККоманды.Видимость = ЗначениеЗаполнено(Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКартеНажатиеЗавершение(
		ИмяКартографическогоСервиса,
		ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ИмяКартографическогоСервиса) = Тип("ЭлементСпискаЗначений")
		И ДополнительныеПараметры.Свойство("Адрес") Тогда
		
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(
			ДополнительныеПараметры.Адрес, 
			ИмяКартографическогоСервиса.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияНаименования(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсторияНаименования Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияНаименования,
			Элементы.ИзмененияНаименования));
	
	Элементы.СтраницаИсторияНаименования.Видимость = Истина;
	Элементы.ИзмененияНаименования.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияРуководителя(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсторияРуководителя Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияРуководителя,
			Элементы.ИзмененияРуководителя));
	
	Элементы.СтраницаИсторияРуководителя.Видимость = Истина;
	Элементы.ИзмененияРуководителя.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияКПП(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсторияКПП Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияКПП,
			Элементы.ИзмененияКПП));
	
	Элементы.СтраницаИсторияКПП.Видимость = Истина;
	Элементы.ИзмененияКПП.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияАдрес(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсторияАдрес Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияАдрес,
			Элементы.ИзмененияАдрес));
	
	Элементы.СтраницаИсторияАдрес.Видимость = Истина;
	Элементы.ИзмененияАдрес.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияФИО(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсторияФИО Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаИсторияФИО,
			Элементы.ИзмененияФИО));
	
	Элементы.СтраницаИсторияФИО.Видимость = Истина;
	Элементы.ИзмененияФИО.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОрганизации(Команда)
	
	НастроитьГлавноеМеню(
		Элементы,
		ПараметрыНастройкиМеню(
			Элементы.СтраницаСвязанныеОрганизации,
			Элементы.СвязанныеОрганизации));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодключитьИнтернетПоддержкуЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(
		Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СформироватьОтчетНаКлиенте(СтрокаПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПодключенияТестовогоПериода(
		Результат,
		ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПовторитьДействие")
		И Результат.ПовторитьДействие Тогда
			СформироватьОтчетНаКлиенте(СтрокаПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьКарточку(Команда)
	
	ПакетОтображаемыхДокументов = РезультатПроверкаКонтрагентаДляСохранения();
	
	НачатьПолучениеФайлаССервера(
		ПакетОтображаемыхДокументов.АдресФайла,
		ПакетОтображаемыхДокументов.Представление,
		Новый ПараметрыДиалогаПолученияФайлов(
			НСтр("ru = 'Сохранение результат проверки контрагента'")));
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкаКонтрагентаДляСохранения()
	
	ТабличныеДокументы = Новый Массив;
	ТабличныеДокументы.Добавить(
		РезультатОбщиеСведения());
	ТабличныеДокументы.Добавить(РезультатВидыДеятельности);
	ТабличныеДокументы.Добавить(РезультатСвязанныеОрганизации);
	ТабличныеДокументы.Добавить(РезультатАнализОтчетности);
	ТабличныеДокументы.Добавить(РезультатБухгалтерскийБаланс);
	ТабличныеДокументы.Добавить(РезультатОтчетОПрибыляхИУбытках);
	ТабличныеДокументы.Добавить(РезультатОтчетОбИзмененияхКапитала);
	ТабличныеДокументы.Добавить(РезультатОтчетОДвиженииДенежныхСредств);
	ТабличныеДокументы.Добавить(РезультатРасчетСтоимостиЧистыхАктивов);
	ТабличныеДокументы.Добавить(РезультатИспользованиеСредств);
	ТабличныеДокументы.Добавить(
		ТабличныйДокументСПолнойВидимостью(
			"РезультатДанныеГосРеестров"));
	ТабличныеДокументы.Добавить(РезультатПроверки);
	ТабличныеДокументы.Добавить(РезультатНалоги);
	ТабличныеДокументы.Добавить(РезультатСобытияМониторинга);
	
	ТабличныеДокументы.Добавить(РезультатИсторияНаименования);
	ТабличныеДокументы.Добавить(РезультатИсторияКПП);
	ТабличныеДокументы.Добавить(РезультатИсторияАдрес);
	ТабличныеДокументы.Добавить(РезультатИсторияРуководителя);
	ТабличныеДокументы.Добавить(РезультатИсторияФИО);
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	ПакетОтображаемыхДокументов.РазборПоКопиям = Истина;
	
	Для Каждого ПечатнаяФорма Из ТабличныеДокументы Цикл
		Если ПечатнаяФорма.ВысотаТаблицы > 1 Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Вывести(ПечатнаяФорма);
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, КопируемыеСвойстваТабличногоДокумента());
			ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПакетСОднимТабличнымДокументом(ТабличныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ПакетКомплектов = Новый ПакетОтображаемыхДокументов;
	ПакетКомплектов.РазборПоКопиям = Истина;
	ПакетКомплектов.Состав.Добавить().Данные = ПакетОтображаемыхДокументов;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	ПакетОтображаемыхДокументов.Записать(
		ИмяФайла,
		ТипФайлаПакетаОтображаемыхДокументов.PDF);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	Результат = Новый Структура;
	Результат.Вставить(
		"АдресФайла",
		ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор));
	Результат.Вставить(
		"Представление",
		СтроковыеФункции.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проверка контрагента %1.pdf'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					КраткоеНаименование, ""))));
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатОбщиеСведения()
	
	Результат = Новый ТабличныйДокумент;
	Результат.АвтоМасштаб = Истина;
	Макет = Обработки.ПроверкаКонтрагента.ПолучитьМакет("ОбщиеСведения");
	
	Результат.Вывести(
		Макет.ПолучитьОбласть(
			"ОбщиеСведенияШапка"));
	ОбластьКраткоеНаименование = Макет.ПолучитьОбласть("КраткоеНаименование");
	ОбластьКраткоеНаименование.Параметры.КраткоеНаименование = Элементы.КраткоеНаименованиеЗначение.Заголовок;
	Результат.Вывести(ОбластьКраткоеНаименование);
	
	ОбластьСтатусФНССтрока = Макет.ПолучитьОбласть("СтатусФНССтрока");
	ОбластьСтатусФНССтрока.Параметры.СтатусФНС = Элементы.ДекорацияСтатусФНС.Заголовок;
	ОбластьСтатусФНССтрока.Области.СтатусФНС.ЦветТекста = Элементы.ДекорацияСтатусФНС.ЦветТекста;
	Результат.Вывести(ОбластьСтатусФНССтрока);
	
	Если Элементы.ГруппаДатаРегистрации.Видимость Тогда
		ОбластьДатаРегистрации = Макет.ПолучитьОбласть("ДатаРегистрации");
		ОбластьДатаРегистрации.Параметры.ДатаРегистрации = Элементы.ДекорацияДатаРегистрацииЗначение.Заголовок;
		Результат.Вывести(ОбластьДатаРегистрации);
	КонецЕсли;
	
	Если Элементы.ГруппаДатаПрекращенияДеятельности.Видимость Тогда
		ОбластьДатаПрекращенияДеятельности = Макет.ПолучитьОбласть("ДатаПрекращенияДеятельности");
		ОбластьДатаПрекращенияДеятельности.Параметры.ДатаПрекращенияДеятельности =
			Элементы.ДекорацияДатаПрекращенияДеятельностиЗначение.Заголовок;
		Результат.Вывести(ОбластьДатаПрекращенияДеятельности);
	КонецЕсли;
	
	Если Элементы.ГруппаУставныйКапитал.Видимость Тогда
		ОбластьУставныйКапитал = Макет.ПолучитьОбласть("УставныйКапитал");
		ОбластьУставныйКапитал.Параметры.УставныйКапитал = УставныйКапитал;
		Результат.Вывести(ОбластьУставныйКапитал);
	КонецЕсли;
	
	Если Элементы.ГруппаРуководители.Видимость Тогда
		
		ОбластьРуководительШапка = Макет.ПолучитьОбласть("РуководительШапка");
		ОбластьРуководительШапка.Параметры.Заголовок = Элементы.ДекорацияДолжностьРуководителя.Заголовок;
		Результат.Вывести(ОбластьРуководительШапка);
		
		Для Каждого ГруппаРуководитель Из Элементы.ГруппаРуководители.ПодчиненныеЭлементы Цикл
			
			Если СтрНачинаетсяС(ГруппаРуководитель.Имя, "ГруппаРуководитель")
				И ГруппаРуководитель.Видимость Тогда
				
				Итератор = Сред(
					ГруппаРуководитель.Имя,
					СтрДлина("ГруппаРуководитель") + 1);
				
				ОбластьРуководительЗначение = Макет.ПолучитьОбласть("РуководительЗначение");
				ОбластьРуководительЗначение.Параметры.Руководитель = Элементы["ДекорацияРуководитель" + Итератор].Заголовок;
				Результат.Вывести(ОбластьРуководительЗначение);
				
				РуководительСведения = Элементы["ДекорацияРуководитель" + Итератор + "Сведения"].Заголовок;
				Если ЗначениеЗаполнено(РуководительСведения) Тогда
					ОбластьРуководительСведения = Макет.ПолучитьОбласть("РуководительСведения");
					ОбластьРуководительСведения.Параметры.РуководительСведения = РуководительСведения;
					Результат.Вывести(ОбластьРуководительСведения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.ГруппаЮридическийАдрес.Видимость
		И Не ПустаяСтрока(ЮридическийАдрес) Тогда
		
		ОбластьЮридическийАдрес = Макет.ПолучитьОбласть("ЮридическийАдрес");
		ОбластьЮридическийАдрес.Параметры.ЮридическийАдрес = ЮридическийАдрес;
		Результат.Вывести(ОбластьЮридическийАдрес);
		
	КонецЕсли;
	
	Если Элементы.ГруппаСрЧисленность.Видимость Тогда
		ОбластьСреднесписочнаяЧисленность = Макет.ПолучитьОбласть("СреднесписочнаяЧисленность");
		ОбластьСреднесписочнаяЧисленность.Параметры.СреднесписочнаяЧисленность = СреднесписочнаяЧисленность;
		Результат.Вывести(ОбластьСреднесписочнаяЧисленность);
	КонецЕсли;
	
	ОбластьВидыДеятельности = Макет.ПолучитьОбласть("ВидыДеятельности");
	Результат.Вывести(ОбластьВидыДеятельности);
	Если Элементы.ДекорацияВидыДеятельностиНетДанных.Видимость Тогда
		ОбластьВидыДеятельностиНетДанных = Макет.ПолучитьОбласть("ВидыДеятельностиНетДанных");
		ОбластьВидыДеятельностиНетДанных.Параметры.Описание = Элементы.ДекорацияВидыДеятельностиНетДанных.Заголовок;
		Результат.Вывести(ОбластьВидыДеятельностиНетДанных);
	Иначе
		ОбластьОсновнойВидДеятельности = Макет.ПолучитьОбласть("ОсновнойВидДеятельности");
		ОбластьОсновнойВидДеятельности.Параметры.Код = Элементы.ДекорацияОсновнойКодОКВЭД.Заголовок;
		ОбластьОсновнойВидДеятельности.Параметры.Наименование = Элементы.ДекорацияОсновнойВидДеятельности.Заголовок;
		Результат.Вывести(ОбластьОсновнойВидДеятельности);
		
		Если Элементы.ГруппаДополнительныйВидДеятельности0.Видимость Тогда
			
			ОбластьДополнительныеВидыДеятельностиЗаголовок = Макет.ПолучитьОбласть("ДополнительныеВидыДеятельностиЗаголовок");
			Результат.Вывести(ОбластьДополнительныеВидыДеятельностиЗаголовок);
			
			ОбластьДополнительныйВидДеятельностиСтрока = Макет.ПолучитьОбласть("ДополнительныйВидДеятельностиСтрока");
			ОбластьДополнительныйВидДеятельностиСтрока.Параметры.Код = Элементы.ДекорацияДополнительныйКодОКВЭД0.Заголовок;
			ОбластьДополнительныйВидДеятельностиСтрока.Параметры.Наименование =
				Элементы.ДекорацияДополнительныйВидДеятельности0.Заголовок;
			Результат.Вывести(ОбластьДополнительныйВидДеятельностиСтрока);
			
			Если Элементы.ГруппаДополнительныйВидДеятельности1.Видимость Тогда
				ОбластьДополнительныйВидДеятельностиСтрока = Макет.ПолучитьОбласть("ДополнительныйВидДеятельностиСтрока");
				ОбластьДополнительныйВидДеятельностиСтрока.Параметры.Код = Элементы.ДекорацияДополнительныйКодОКВЭД1.Заголовок;
				ОбластьДополнительныйВидДеятельностиСтрока.Параметры.Наименование =
					Элементы.ДекорацияДополнительныйВидДеятельности1.Заголовок;
				Результат.Вывести(ОбластьДополнительныйВидДеятельностиСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаУчредители.Видимость Тогда
		
		ОбластьУчредителиШапка = Макет.ПолучитьОбласть("УчредителиШапка");
		Результат.Вывести(ОбластьУчредителиШапка);
		
		Для Каждого ГруппаУчредитель Из Элементы.ГруппаУчредители.ПодчиненныеЭлементы Цикл
			
			Если СтрНачинаетсяС(ГруппаУчредитель.Имя, "ГруппаУчредитель")
				И ГруппаУчредитель.Видимость Тогда
				
				Итератор = Сред(
					ГруппаУчредитель.Имя,
					СтрДлина("ГруппаУчредитель") + 1);
				
				ОбластьУчредительЗначение = Макет.ПолучитьОбласть("УчредительЗначение");
				ОбластьУчредительЗначение.Параметры.Учредитель = Элементы["ДекорацияУчредитель" + Итератор].Заголовок;
				Результат.Вывести(ОбластьУчредительЗначение);
				
				УчредительСуммаКапитала = Элементы["ДекорацияУчредитель" + Итератор + "СуммаКапитала"].Заголовок;
				Если ЗначениеЗаполнено(УчредительСуммаКапитала) Тогда
					ОбластьУчредительСведения = Макет.ПолучитьОбласть("УчредительСведения");
					ОбластьУчредительСведения.Параметры.УчредительСведения = УчредительСуммаКапитала;
					Результат.Вывести(ОбластьУчредительСведения);
				КонецЕсли;
				
				УчредительСведения = Элементы["ДекорацияУчредитель" + Итератор + "Сведения"].Заголовок;
				Если ЗначениеЗаполнено(УчредительСведения) Тогда
					ОбластьУчредительСведения = Макет.ПолучитьОбласть("УчредительСведения");
					ОбластьУчредительСведения.Параметры.УчредительСведения = УчредительСведения;
					Результат.Вывести(ОбластьУчредительСведения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.ГруппаАнализОтчетности.Видимость Тогда
		
		ОбластьОтчетность = Макет.ПолучитьОбласть("Отчетность");
		Результат.Вывести(ОбластьОтчетность);
		Если Элементы.ДекорацияНетДанныхОбАнализеОтчетности.Видимость Тогда
			ОбластьОтчетностьНетДанных = Макет.ПолучитьОбласть("ОтчетностьНетДанных");
			ОбластьОтчетностьНетДанных.Параметры.Описание = Элементы.ДекорацияНетДанныхОбАнализеОтчетности.Заголовок;
			Результат.Вывести(ОбластьОтчетностьНетДанных);
		Иначе
			
			ОбластьОтчетностьПоказатели = Макет.ПолучитьОбласть("ОтчетностьПоказатели");
			ОбластьОтчетностьПоказатели.Параметры.Год = Элементы.ДекорацияГодОтчетности.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.Продажи = Элементы.ДекорацияЗначениеПродажи.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.Прибыль = Элементы.ДекорацияЗначениеПрибыль.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.ЧистыеАктивы = Элементы.ДекорацияЗначениеЧистыеАктивы.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.ПродажиОписание =
				Элементы.ДекорацияКартинкаИзменениеПродажи.РасширеннаяПодсказка.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.ПрибыльОписание =
				Элементы.ДекорацияКартинкаИзменениеПрибыль.РасширеннаяПодсказка.Заголовок;
			ОбластьОтчетностьПоказатели.Параметры.ЧистыеАктивыОписание =
				Элементы.ДекорацияКартинкаИзменениеЧистыеАктивы.РасширеннаяПодсказка.Заголовок;
			
			Результат.Вывести(ОбластьОтчетностьПоказатели);
			
		КонецЕсли;
	КонецЕсли;

	Если Элементы.ГруппаФинансовыйАнализ.Видимость Тогда
		
		ОбластьФинансовыйАнализ = Макет.ПолучитьОбласть("ФинансовыйАнализ");
		Результат.Вывести(ОбластьФинансовыйАнализ);
		Если Элементы.ДекорацияНетДанныхОФинансовомАнализе.Видимость Тогда
			ОбластьФинансовыйАнализНетДанных = Макет.ПолучитьОбласть("ФинансовыйАнализНетДанных");
			ОбластьФинансовыйАнализНетДанных.Параметры.Описание = Элементы.ДекорацияНетДанныхОФинансовомАнализе.Заголовок;
			Результат.Вывести(ОбластьФинансовыйАнализНетДанных);
		Иначе
			
			ОбластьФинансовыйАнализПоказатели = Макет.ПолучитьОбласть("ФинансовыйАнализПоказатели");
			ОбластьФинансовыйАнализПоказатели.Параметры.ОценкаРискаБанкротства =
				Элементы.ДекорацияОценкаРискаБанкротстваЗначение.Заголовок;
			ОбластьФинансовыйАнализПоказатели.Области.ОценкаРискаБанкротства.ЦветТекста =
				Элементы.ДекорацияОценкаРискаБанкротстваЗначение.ЦветТекста;
			ОбластьФинансовыйАнализПоказатели.Параметры.Кредитоспособность =
				Элементы.ДекорацияКредитоспособностьЗначение.Заголовок;
			ОбластьФинансовыйАнализПоказатели.Области.Кредитоспособность.ЦветТекста =
				Элементы.ДекорацияКредитоспособностьЗначение.ЦветТекста;
			ОбластьФинансовыйАнализПоказатели.Параметры.РентабельностьАктивов =
				Элементы.ДекорацияРентабельностьАктивовЗначение.Заголовок;
			ОбластьФинансовыйАнализПоказатели.Области.РентабельностьАктивов.ЦветТекста =
				Элементы.ДекорацияРентабельностьАктивовЗначение.ЦветТекста;
			ОбластьФинансовыйАнализПоказатели.Параметры.РентабельностьПродаж =
				Элементы.ДекорацияРентабельностьПродажЗначение.Заголовок;
			ОбластьФинансовыйАнализПоказатели.Области.РентабельностьПродаж.ЦветТекста =
				Элементы.ДекорацияРентабельностьПродажЗначение.ЦветТекста;
			
			Результат.Вывести(ОбластьФинансовыйАнализПоказатели);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаНалоги.Видимость Тогда
		
		ОбластьНалоги = Макет.ПолучитьОбласть("Налоги");
		Результат.Вывести(ОбластьНалоги);
		Если Элементы.ДекорацияНетСведенийОНалогах.Видимость Тогда
			ОбластьНалогиНетДанных = Макет.ПолучитьОбласть("НалогиНетДанных");
			ОбластьНалогиНетДанных.Параметры.Описание = Элементы.ДекорацияНетСведенийОНалогах.Заголовок;
			Результат.Вывести(ОбластьНалогиНетДанных);
		Иначе
			
			ОбластьНалогиПоказатели = Макет.ПолучитьОбласть("НалогиПоказатели");
			ОбластьНалогиПоказатели.Параметры.Год = Элементы.ДекорацияГодНалоги.Заголовок;
			ОбластьНалогиПоказатели.Параметры.ОплаченныеНалоги   = Элементы.ДекорацияОплаченныеНалогиЗначение.Заголовок;
			ОбластьНалогиПоказатели.Параметры.НалогиНаЗарплату   = Элементы.ДекорацияНалогиНаЗарплатуЗначение.Заголовок;
			ОбластьНалогиПоказатели.Параметры.ПросроченныеНалоги = Элементы.ДекорацияПросроченныеНалогиЗначение.Заголовок;
			Результат.Вывести(ОбластьНалогиПоказатели);
			
			Если Элементы.ДекорацияСистемаНалогообложенияЗаголовок.Видимость Тогда
				ОбластьСистемаНалогообложения = Макет.ПолучитьОбласть("СистемаНалогообложения");
				ОбластьСистемаНалогообложения.Параметры.СистемаНалогообложения =
					Элементы.ДекорацияСистемаНалогообложенияЗначение.Заголовок;
				Результат.Вывести(ОбластьСистемаНалогообложения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаПроверки.Видимость Тогда
		
		ОбластьПроверки = Макет.ПолучитьОбласть("Проверки");
		Результат.Вывести(ОбластьПроверки);
		
		ОбластьПроверкиОписание = Макет.ПолучитьОбласть("ПроверкиОписание");
		ОбластьПроверкиОписание.Параметры.Описание = Элементы.ДекорацияПроверкиОписание.Заголовок;
		Результат.Вывести(ОбластьПроверкиОписание);
		
	КонецЕсли;
	
	Если Элементы.Группа1СПАРКСобытияМониторинга.Видимость Тогда
		
		ОбластьПоследниеИзменения = Макет.ПолучитьОбласть("ПоследниеИзменения");
		Результат.Вывести(ОбластьПоследниеИзменения);
		
		Если Элементы.ДекорацияСобытиеМониторингаОписание.Видимость Тогда
			ОбластьПоследниеИзмененияНетДанных = Макет.ПолучитьОбласть("ПоследниеИзмененияНетДанных");
			ОбластьПоследниеИзмененияНетДанных.Параметры.Описание = Элементы.ДекорацияСобытиеМониторингаОписание.Заголовок;
			Результат.Вывести(ОбластьПоследниеИзмененияНетДанных);
		Иначе
			
			Для Индекс = 0 По 2 Цикл
				
				Если Не Элементы["ГруппаСобытиеМониторинга" + Индекс].Видимость Тогда
					Прервать;
				КонецЕсли;
				
				ОбластьПоследниеИзмененияСтрока = Макет.ПолучитьОбласть("ПоследниеИзмененияСтрока");
				ОбластьПоследниеИзмененияСтрока.Параметры.Дата = Элементы["ДекорацияСобытиеМониторингаДата" + Индекс].Заголовок;
				ОбластьПоследниеИзмененияСтрока.Области.ПоследниеИзмененияДата.ЦветТекста =
					Элементы["ДекорацияСобытиеМониторингаДата" + Индекс].ЦветТекста;
				ОбластьПоследниеИзмененияСтрока.Параметры.Значение =
					Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].Заголовок;
				ОбластьПоследниеИзмененияСтрока.Области.ПоследниеИзмененияЗначение.ЦветТекста =
					Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].ЦветТекста;
				Результат.Вывести(ОбластьПоследниеИзмененияСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументСПолнойВидимостью(ИмяДокумента)
	
	Отбор = Новый Структура("ИмяДокумента", ИмяДокумента);
	СтрокиТаблицы = ОбластиРасшифровки.НайтиСтроки(Отбор);
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат ЭтотОбъект[ИмяДокумента];
	КонецЕсли;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ЭтотОбъект[ИмяДокумента]);
	ЗаполнитьЗначенияСвойств(
		ТабличныйДокумент,
		ЭтотОбъект[ИмяДокумента],
		КопируемыеСвойстваТабличногоДокумента());
	Для Каждого СтрокаОбласти Из СтрокиТаблицы Цикл
	
		НомерСтрокиЕще = СтрокаОбласти.ПерваяСтрока - 1;
		ТабличныйДокумент.Область(НомерСтрокиЕще, , НомерСтрокиЕще).Видимость = Ложь;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Истина;
		
		КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция КопируемыеСвойстваТабличногоДокумента()
	Возврат "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыка,
	|КоличествоЭкземпляров,МасштабПечати,НомерПервойСтраницы,ОриентацияСтраницы,ПолеСверху,ПолеСлева,
	|ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,
	|ТочностьПечати,ФоноваяКартинка,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице";
КонецФункции

&НаСервере
Функция ПакетСОднимТабличнымДокументом(ТабличныйДокумент)
	
	АдресТабличногоДокументаВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	ПакетСОднимДокументом = Новый ПакетОтображаемыхДокументов;
	ПакетСОднимДокументом.РазборПоКопиям = Истина;
	ПакетСОднимДокументом.Состав.Добавить(АдресТабличногоДокументаВоВременномХранилище);
	ЗаполнитьЗначенияСвойств(
		ПакетСОднимДокументом,
		ТабличныйДокумент,
		"Вывод, ДвусторонняяПечать, ИмяПринтера, КоличествоЭкземпляров, ТочностьПечати");
	Если ТабличныйДокумент.РазборПоКопиям <> Неопределено Тогда
		ПакетСОднимДокументом.РазборПоКопиям = ТабличныйДокумент.РазборПоКопиям;
	КонецЕсли;
	Возврат ПакетСОднимДокументом;
	
КонецФункции

&НаКлиенте
Процедура СохранитьКарточкуПриНажатииНаРезультат(ПолноеИмяФайла) Экспорт
	
	ФайловаяСистемаКлиент.ОткрытьФайл(ПолноеИмяФайла);
	
КонецПроцедуры

#Область КарточкаСобытияМониторинга

&НаСервере
Процедура ВывестиКарточкуСобытияМониторинга(ДанныеСобытияМониторинга)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияВыведена = Ложь;
	
	Элементы.ДекорацияСобытиеМониторингаОписание.Видимость = Ложь;
	ЗначенияСобытийМониторинга = ДанныеСобытияМониторинга.КарточкаСобытияМониторинга.ЗначенияСобытийМониторинга;
	ВывестиСобытияМониторинга(ЗначенияСобытийМониторинга, ИнформацияВыведена);
	Если ЗначенияСобытийМониторинга.ДоступЗапрещен Тогда
		Элементы.ДекорацияВсеСобытияМониторинга.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияВсеСобытияМониторинга.Видимость = ИнформацияВыведена;
	КонецЕсли;
	
	Элементы.ГруппаДанныеСобытияМониторинга.Видимость = ИнформацияВыведена;
		
	Если Не ИнформацияВыведена Тогда
		
		Элементы.ДекорацияСобытиеМониторингаОписание.Заголовок = НСтр("ru='Нет информации о контрагенте'");
		Элементы.ДекорацияСобытиеМониторингаОписание.Видимость = Истина;
		
	КонецЕсли;
	Элементы.Группа1СПАРКСобытияМониторинга.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКарточкуСправкиСПАРКРиски(ДанныеОтчета)
	
	Элементы.ГруппаСправкиСПАРК.Видимость = Истина;
	
	ДанныеАктуальнойСправки = ДанныеОтчета.КарточкаСправкиСПАРКРиски.ДанныеАктуальнойСправки;
	АктуальнаяСправка = ДанныеАктуальнойСправки.АктуальнаяСправка;
	Элементы.ДекорацияАктуальнаяСправкаСПАРК.Заголовок = ДанныеАктуальнойСправки.Описание;
	Элементы.ГруппаСправкиСПАРККоманды.Видимость = ЗначениеЗаполнено(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКарточкуПереходВВебВерсиюСПАРК()
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПереходВВебВерсиюСПАРК.Видимость = Истина;
	МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	
	Если ЗначениеЗаполнено(Контрагент)
		И МодульСПАРКРиски.ИспользованиеРазрешено("ПереходВВебВерсиюСПАРК;") Тогда
		ТекстОписания = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru='В <a href=""ВебВерсияСПАРК"">веб-карточках СПАРК</a> доступна ключевая информация по организациям, а также показатели, требующие повышенного внимания:
				|- Общая информация (Регистрационные и контактные сведения, история изменений и т.д.)
				|- Структура компании (Структура собственников и дочерних компаний и анализ взаимосвязей)
				|- Деятельность компании (Сведения о наличии у компании или персоны залогов, лизинга, факторинга, исполнительных производств, гарантий и другое)
				|- Финансовая информация
				|- Финансовый анализ.'"));
	Иначе
		ТекстОписания = НСтр("ru='В веб-карточках СПАРК доступна ключевая информация по организациям, а также показатели, требующие повышенного внимания:
			|- Общая информация (Регистрационные и контактные сведения, история изменений и т.д.)
			|- Структура компании (Структура собственников и дочерних компаний и анализ взаимосвязей)
			|- Деятельность компании (Сведения о наличии у компании или персоны залогов, лизинга, факторинга, исполнительных производств, гарантий и другое)
			|- Финансовая информация
			|- Финансовый анализ.'");
	КонецЕсли;
	
	Элементы.ДекорацияПереходВВебВерсиюСПАРКОписание.Заголовок = ТекстОписания;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСобытияМониторинга(СобытияМониторингСПАРК, ИнформацияВыведена)
	
	Индекс = 0;
	Пока Индекс < 3 Цикл
		
		Если Индекс > СобытияМониторингСПАРК.СобытияМониторинга.ВГраница() Тогда
			СкрытьСобытие(
				Элементы,
				Индекс);
		Иначе
			ИнформацияВыведена = Истина;
			ВывестиСобытие(
				Элементы,
				СобытияМониторингСПАРК.СобытияМониторинга[Индекс],
				Индекс,
				СобытияМониторингСПАРК.ДоступЗапрещен);
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Элементы.ДекорацияВсеСобытияМониторинга.Видимость = Истина;
	ИННСобытий = СобытияМониторингСПАРК.ИНН;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьСобытие(
	Элементы,
	Индекс)
	
	Элементы["ГруппаСобытиеМониторинга" + Индекс].Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСобытие(
		Элементы,
		Событие,
		Индекс,
		ДоступЗапрещен)
	
	Элементы["ДекорацияСобытиеМониторингаДата" + Индекс].Заголовок = Формат(Событие.Дата, "ДЛФ=D");
	Если ДоступЗапрещен Тогда
		Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].Заголовок = СлучайныйТекстСобытия(80);
	Иначе
		Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].Заголовок = Событие.Описание;
	КонецЕсли;
	Если Событие.Критическое Тогда
		Элементы["ДекорацияСобытиеМониторингаДата" + Индекс].ЦветТекста     = ЦветаСтиля.ЦветОсобогоТекста;
		Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		Элементы["ДекорацияСобытиеМониторингаДата" + Индекс].ЦветТекста     = Новый Цвет;
		Элементы["ДекорацияСобытиеМониторингаЗначение" + Индекс].ЦветТекста = Новый Цвет;
	КонецЕсли;
	
	Элементы["ГруппаСобытиеМониторинга" + Индекс].Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция СлучайныйТекстСобытия(РазмерСтроки)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ДлинаТекста = ГСЧ.СлучайноеЧисло(30, РазмерСтроки);
	Результат = СтрокаЗатемнения(2);
	Для К = 1 По ДлинаТекста Цикл
		Если ГСЧ.СлучайноеЧисло(0, 10) > 1 Тогда
			Символ = СтрокаЗатемнения();
		Иначе
			Символ = " ";
		КонецЕсли;
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаЗатемнения(ДлинаСтроки = 1)
	
	Результат = "";
	Для Итератор = 1 По ДлинаСтроки Цикл
		Результат = Результат + "░";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбновитьСобытияМониторингСПАРК(
		ПараметрыЗапроса,
		НомерСтраницы = 0,
		ОчиститьСтраницы = Истина)
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.РезультатСобытияМониторинга,
		"ФормированиеОтчета");
	
	ДополнительныеПараметры = Новый Структура(
		"НомерСтраницы, ОчиститьСтраницы",
		НомерСтраницы,
		ОчиститьСтраницы);
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ОбновлениеСобытийМониторингСПАРКЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	РезультатВыполнения = ОбновлениеСобытийМониторингСПАРКНаСервере(
		ПараметрыЗапроса,
		НомерСтраницы);
	Если РезультатВыполнения.Статус = "Выполнено"
		Или РезультатВыполнения.Статус = "Ошибка" Тогда
		
		ОбновлениеСобытийМониторингСПАРКЗавершение(
			РезультатВыполнения,
			ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеСобытийМониторингСПАРКНаСервере(
	Знач ПараметрыЗапроса,
	Знач НомерСтраницы)
	
	ВидКонтрагента = ?(ЭтоЮридическоеЛицо,
		ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо"),
		ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель"));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"Обработки.ПроверкаКонтрагента.ОбновитьСобытияМониторингСПАРК",
		НайденныйИНН,
		ВидКонтрагента,
		ПараметрыЗапроса,
		НомерСтраницы);
	
КонецФункции

&НаКлиенте
Процедура ОбновлениеСобытийМониторингСПАРКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не СПАРКРискиСуществует Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.РезультатСобытияМониторинга,
		"НеИспользовать");
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ВывестиСтраницуСобытияМониторинга(
			РезультатОперации,
			ДополнительныеПараметры.НомерСтраницы,
			ДополнительныеПараметры.ОчиститьСтраницы);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВывестиОписаниеОшибкиПолученияСобытийМониторинга();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОписаниеОшибкиПолученияСобытийМониторинга()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		ИмяОбласти = "НеизвестнаяОшибкаОткрытиеЖурналаРегистрации";
	Иначе
		ИмяОбласти = "НеизвестнаяОшибка";
	КонецЕсли;
	
	Область = Обработки.ПроверкаКонтрагента.ПолучитьМакет("ОшибкиПроверкиКонтрагента").ПолучитьОбласть(ИмяОбласти);
	Если ИмяОбласти = "НеизвестнаяОшибкаОткрытиеЖурналаРегистрации" Тогда
		Область.Параметры.ОткрытьЖурналРегистрации = "ОткрытьЖурналРегистрации";
	КонецЕсли;
	
	РезультатСобытияМониторинга.Вывести(Область);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТабличныеДокументы()
	
	РезультатВидыДеятельности.АвтоМасштаб = Истина;
	
	РезультатАнализОтчетности.АвтоМасштаб = Истина;
	РезультатАнализОтчетности.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатБухгалтерскийБаланс.АвтоМасштаб = Истина;
	РезультатБухгалтерскийБаланс.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатИспользованиеСредств.АвтоМасштаб = Истина;
	РезультатИспользованиеСредств.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатОтчетОбИзмененияхКапитала.АвтоМасштаб = Истина;
	РезультатОтчетОбИзмененияхКапитала.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатОтчетОДвиженииДенежныхСредств.АвтоМасштаб = Истина;
	РезультатОтчетОДвиженииДенежныхСредств.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатОтчетОПрибыляхИУбытках.АвтоМасштаб = Истина;
	РезультатОтчетОПрибыляхИУбытках.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатРасчетСтоимостиЧистыхАктивов.АвтоМасштаб = Истина;
	РезультатРасчетСтоимостиЧистыхАктивов.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	РезультатДанныеГосРеестров.АвтоМасштаб = Истина;
	
	РезультатНалоги.АвтоМасштаб = Истина;
	РезультатНалоги.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	РезультатПроверки.АвтоМасштаб = Истина;
	РезультатПроверки.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	РезультатФинансовыйАнализ.АвтоМасштаб = Истина;
	РезультатСвязанныеОрганизации.АвтоМасштаб = Истина;
	
	РезультатИсторияАдрес.АвтоМасштаб = Истина;
	РезультатИсторияКПП.АвтоМасштаб = Истина;
	РезультатИсторияНаименования.АвтоМасштаб = Истина;
	РезультатИсторияРуководителя.АвтоМасштаб = Истина;
	РезультатИсторияФИО.АвтоМасштаб = Истина;
	
	РезультатСобытияМониторинга.АвтоМасштаб = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторСтраницы(НомерСтраницы)
	
	Возврат СтраницыСобытийМониторинга["_" + Формат(НомерСтраницы, "ЧН=0; ЧГ=")];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьМенюОтчетности(
	Знач Элементы,
	Знач Страница,
	Знач Кнопка)
	
	Элементы.ГруппаСтраницыОтчетности.ТекущаяСтраница = Страница;
	
	КнопкиМеню = Новый Массив;
	КнопкиМеню.Добавить("АнализОтчетности");
	КнопкиМеню.Добавить("БухгалтерскийБаланс");
	КнопкиМеню.Добавить("ОтчетОПрибыляхИУбытках");
	КнопкиМеню.Добавить("ОтчетОбИзмененияхКапитала");
	КнопкиМеню.Добавить("ОтчетОДвиженииДенежныхСредств");
	КнопкиМеню.Добавить("РасчетСтоимостиЧистыхАктивов");
	КнопкиМеню.Добавить("ИспользованиеСредств");
	
	Для Каждого КнопкаМеню Из КнопкиМеню Цикл
		Элементы[КнопкаМеню].ЦветТекста = Новый Цвет;
	КонецЦикла;
	
	Кнопка.ЦветТекста = Новый Цвет(0, 0, 0);
	
КонецПроцедуры

&НаСервере
Процедура АдаптироватьФормуПодМобильныйКлиент()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиМеню = Новый Массив;
	КнопкиМеню.Добавить("Сводка");
	КнопкиМеню.Добавить("ИзмененияНаименования");
	КнопкиМеню.Добавить("ИзмененияРуководителя");
	КнопкиМеню.Добавить("ИзмененияКПП");
	КнопкиМеню.Добавить("ИзмененияФИО");
	КнопкиМеню.Добавить("ИзмененияАдрес");
	КнопкиМеню.Добавить("ВидыДеятельности");
	КнопкиМеню.Добавить("ДанныеГосРеестров");
	КнопкиМеню.Добавить("СвязанныеОрганизации");
	КнопкиМеню.Добавить("ОтчетностьПоБлокам");
	КнопкиМеню.Добавить("ФинансовыйАнализ");
	КнопкиМеню.Добавить("Налоги");
	КнопкиМеню.Добавить("Проверки");
	КнопкиМеню.Добавить("СобытияМониторинга");
	
	Для Каждого КнопкаМеню Из КнопкиМеню Цикл
		Элементы.Переместить(
			Элементы[КнопкаМеню],
			Элементы.ГруппаПанельУправлениеСтраницами);
	КонецЦикла;
	
	Элементы.Переместить(
		Элементы.Группа1СПАРКРискиИндексы,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.Группа1СПАРКСобытияМониторинга,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаСправкиСПАРК,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаПереходВВебВерсиюСПАРК,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	
	Элементы.Переместить(
		Элементы.Группа1СКонтрагентАнализОтчетности,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаФинансовыйАнализ,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаНалоги,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаПроверки,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	Элементы.Переместить(
		Элементы.ГруппаГрафикДинамикаПоказателей,
		Элементы.ГруппаЛевоСводка,
		Элементы.ГруппаПоследниеИзмененияВЕГР);
	
	Элементы.СтраницаВидыДеятельности.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.Переместить(
		Элементы.ГруппаСтраницаВидыДеятельностиПраво,
		Элементы.СтраницаВидыДеятельности,
		Элементы.ГруппаСтраницаВидыДеятельностиЦентр);
	Элементы.ГруппаСтраницаВидыДеятельностиПраво.Ширина = Элементы.РезультатВидыДеятельности.Ширина;
	Элементы.ГруппаСтраницаВидыДеятельностиПраво.Группировка =
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.СтраницаСобытияМониторинга.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.Переместить(
		Элементы.ГруппаСобытияМониторингаПраво,
		Элементы.СтраницаСобытияМониторинга,
		Элементы.РезультатСобытияМониторинга);
	Элементы.ГруппаСобытияМониторингаПраво.Ширина = Элементы.РезультатСобытияМониторинга.Ширина;
	Элементы.ГруппаСобытияМониторингаПоиск.Группировка =
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаСобытияМониторингаФильтры.Группировка =
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Элементы.Переместить(
		Элементы.ДекорацияСводныйИндикаторЗаголовок,
		Элементы.ГруппаСводныйИндикатор,
		Элементы.ГруппаКартинкаСводныйИндикатор);
	Элементы.Переместить(
		Элементы.ДекорацияИДОЗаголовок,
		Элементы.ГруппаИДО,
		Элементы.ГруппаКартинкаИДО);
	Элементы.Переместить(
		Элементы.ДекорацияИФРЗаголовок,
		Элементы.ГруппаИФР,
		Элементы.ГруппаКартинкаИФР);
	Элементы.Переместить(
		Элементы.ДекорацияИПДЗаголовок,
		Элементы.ГруппаИПД,
		Элементы.ГруппаКартинкаИПД);
		
	Элементы.ГруппаИДО.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаИФР.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаИПД.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаСводныйИндикатор.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.Переместить(
		Элементы.КнопкаДобавитьВСправочник,
		Элементы.ГруппаКоманднаяПанельПраво);
	
	Элементы.КраткоеНаименование.Видимость = Ложь;
	Элементы.СкачатьКарточку.Отображение = ОтображениеКнопки.Авто;
	
КонецПроцедуры

#КонецОбласти
