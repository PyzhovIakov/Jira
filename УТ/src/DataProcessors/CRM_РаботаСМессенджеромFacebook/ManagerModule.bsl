#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбязательныеМетодыПрограмногоИнтерфейса

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	СтруктураПараметровДоступа = CRM_РаботаСМессенджерамиСерверПовтИсп.СтруктураПараметровДоступа(УчетнаяЗапись);
	Если СтруктураПараметровДоступа = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя КАК ID_Пользователя,
	                      |	МАКСИМУМ(CRM_СообщениеМессенджера.Дата) КАК Дата
	                      |ПОМЕСТИТЬ ПоДатам
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	CRM_СообщениеМессенджера.ID_Пользователя
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПоДатам.ID_Пользователя КАК ID_Пользователя,
	                      |	ПоДатам.Дата КАК Дата,
	                      |	CRM_СообщениеМессенджера.ID_Сообщения КАК ID_Сообщения
	                      |ИЗ
	                      |	ПоДатам КАК ПоДатам
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ПО ПоДатам.ID_Пользователя = CRM_СообщениеМессенджера.ID_Пользователя
	                      |			И ПоДатам.Дата = CRM_СообщениеМессенджера.Дата");
	Запрос.УстановитьПараметр("Группа", СтруктураПараметровДоступа.IDГруппы);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	МассивРезультатов = Запрос.Выполнить().Выгрузить();
	Ресурс = "/v10.0/" + СтруктураПараметровДоступа.IDГруппы 
		+ "/conversations/?fields=id,senders,messages.limit(100){message,created_time,attachments,tags,from}&access_token="
		+ СтруктураПараметровДоступа.ТокенГруппы;
	
	МассивСообщений = Новый Массив;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		СтруктураПараметровДоступа.ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Для каждого Диалог Из СтруктураОтвета.data Цикл
			Для каждого Отправитель Из Диалог.senders.data Цикл
				Если Отправитель.id <> СтруктураПараметровДоступа.IDГруппы Тогда
					ID_Пользователя = Отправитель.id;
				КонецЕсли;
			КонецЦикла;
			СтрокаСПоследнимСообщением = МассивРезультатов.Найти(ID_Пользователя, "ID_Пользователя");
			ПоследнийID = "";
			Если СтрокаСПоследнимСообщением <> Неопределено Тогда
				МаксДата = СтрокаСПоследнимСообщением.Дата;
				ПоследнийID = СтрокаСПоследнимСообщением.ID_Сообщения;
			Иначе
				МаксДата = Дата(1, 1, 1);
			КонецЕсли;
			Для каждого ТекСообщение Из Диалог.messages.data Цикл
				Дата = ДатаИзСтроки(ТекСообщение.created_time);
				Если МаксДата < Дата И ПоследнийID <> ТекСообщение.id Тогда
					Контакт = CRM_РаботаСМессенджерамиСерверПовтИсп.НайтиКонтактПоКонтактнойИнформации("https://www.facebook.com/" 
						+ ID_Пользователя, УчетнаяЗапись, Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
					Сообщение = CRM_РаботаСМессенджерамиСервер.СтруктураСообщенияМесенджера();
					Сообщение.Дата = Дата;
					Сообщение.ID_Сообщения = ТекСообщение.id;
					Сообщение.ТекстСообщения = ТекСообщение.message;
					Сообщение.ВидСообщения = "Входящее";
					Для каждого Тег Из ТекСообщение.tags.data Цикл
						Если Тег.name = "read" Тогда
							Сообщение.Прочитано = Истина;
						ИначеЕсли Тег.name = "sent" Тогда
							Сообщение.ВидСообщения = "Исходящее";
						КонецЕсли;
					КонецЦикла;		
					Сообщение.ID_Пользователя = ID_Пользователя;
					Если ЗначениеЗаполнено(Контакт) Тогда
						Сообщение.Контакт = Контакт;
					КонецЕсли;
					Сообщение.КонтактПредставление = ТекСообщение.from.name;
					Сообщение.Группа = СтруктураПараметровДоступа.IDГруппы;
					
					Если ТекСообщение.Свойство("attachments") Тогда
						КаталогВременныхФайлов = КаталогВременныхФайлов();
						Для каждого Вложение Из ТекСообщение.attachments.data Цикл
							Если Вложение.Свойство("mime_type") И СтрНайти(Вложение.mime_type, "image/") = 1 Тогда
								ПутьКФайлу = Вложение.image_data.url;
								ПозицияВопроса = СтрНайти(ПутьКФайлу, "?");
								ПозицияТочки = СтрНайти(ПутьКФайлу, ".", НаправлениеПоиска.СКонца, ПозицияВопроса);
								ИмяФайла = Вложение.name + Сред(ПутьКФайлу, ПозицияТочки, ПозицияВопроса - ПозицияТочки);
							Иначе
								ПутьКФайлу = Вложение.file_url;
								ИмяФайла = Вложение.name;
							КонецЕсли;
							ТретийСлеш = СтрНайти(ПутьКФайлу, "/", , , 3);
							Если ТретийСлеш > 0 Тогда
								
								Прокси = Неопределено;
								Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
									МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
									Прокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
								КонецЕсли;
								
								Соединение = Новый HTTPСоединение(СтрЗаменить(Лев(ПутьКФайлу, ТретийСлеш - 1), "https://",
									 ""), , , , Прокси, 20,
									 Новый ЗащищенноеСоединениеOpenSSL);
								
								Соединение.Получить(Сред(ПутьКФайлу, ТретийСлеш + 1), КаталогВременныхФайлов + ИмяФайла);
								Данные = Новый ДвоичныеДанные(КаталогВременныхФайлов + ИмяФайла);
								АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(Данные);
								ПараметрыФайла = Новый Структура;
								ПараметрыФайла.Вставить("ВладелецФайлов", Неопределено);
								ПараметрыФайла.Вставить("Автор", Неопределено);
								ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ИмяФайла, СтрНайти(ИмяФайла, ".") - 1));
								ПараметрыФайла.Вставить("РасширениеБезТочки", Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
								ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
								ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
								ПараметрыФайла.Вставить("АдресФайлаВХранилище", АдресФайлаВХранилище);
								Сообщение.Вложения.Добавить(ПараметрыФайла);
								Попытка
									УдалитьФайлы(КаталогВременныхФайлов + ИмяФайла);
								Исключение
									ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
										УровеньЖурналаРегистрации.Информация,
										,
										,
										ИнформацияОбОшибке().Описание);
								КонецПопытки;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					МассивСообщений.Добавить(Сообщение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат МассивСообщений;
	
КонецФункции

Функция ОтправитьСообщение(Сообщение, УчетнаяЗапись, IDПользователя, СписокФайлов, ДопПараметры) Экспорт
	
	Возврат CRM_ЛицензированиеЭкспортныеМетоды.ПолучитьЗащищеннуюОбработку().ОтправитьСообщениеМессенджера(Сообщение,
		 УчетнаяЗапись, IDПользователя, СписокФайлов,
		 ДопПараметры);
	
КонецФункции

Процедура ОжиданиеСобытий(УчетнаяЗапись) Экспорт
	
КонецПроцедуры

Функция ПолучитьВидКИМессенджера(Контакт) Экспорт
	
	Наименование = "Facebook";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	                      |	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                      |ГДЕ
	                      |	ВидыКонтактнойИнформации.Наименование = &Наименование
	                      |	И ВидыКонтактнойИнформации.Тип = &Тип
	                      |	И ВидыКонтактнойИнформации.Родитель = &Родитель");
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникCRM_ПотенциальныеКлиенты;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
	КонецЕсли;
	
	ТипКИ = ТипКИМессенджера();
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Тип", ТипКИ);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПометкаУдаления Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Возврат Выборка.Ссылка;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НовыйВидКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйВидКИ.Родитель = Родитель;
		НовыйВидКИ.Наименование = Наименование;
		НовыйВидКИ.Тип = ТипКИ;
		НовыйВидКИ.Используется = Истина;
		НовыйВидКИ.ВидРедактирования = "Диалог";
		НовыйВидКИ.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		Возврат НовыйВидКИ.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТипКИМессенджера() Экспорт
	
	Возврат Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	
КонецФункции

Функция НачалоАдресаСтраницыПользователя() Экспорт
	Возврат "https://www.facebook.com/";
КонецФункции

Функция ПутьКДиалогуВБраузере(Структура) Экспорт
	Возврат "https://www.facebook.com/" + Структура.Группа + "/inbox/" + Структура.ID_Пользователя;
КонецФункции

Функция ПредставлениеКонтактнойИнформацииПользователя(ID_Пользователя) Экспорт
	Возврат НачалоАдресаСтраницыПользователя() + ID_Пользователя;
КонецФункции

Функция ВозможноИзменениеСообщений() Экспорт
	Возврат Истина; 
КонецФункции

Функция ИспользуютсяВложения() Экспорт
	Возврат Истина; 
КонецФункции

Функция HTMLКонтекста(УчетнаяЗапись, idПользователя, idГруппы) Экспорт
	Возврат Неопределено; 
КонецФункции

Функция Отключиться(СтруктураПараметровДоступа) Экспорт
	Возврат Истина;
	Токен = СтруктураПараметровДоступа.ТокенГруппы;
	Ресурс = "/v10.0/me/permission?access_token=" + Токен;
	
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com", ,
		Ресурс, СтруктураПараметровДоступа.ПараметрыПрокси, "x-www-form-urlencoded", Истина));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Возврат СтруктураОтвета.success;
	КонецЕсли;
КонецФункции

Процедура ПометитьКакПрочтенные(УчетнаяЗапись, МассивСообщений) Экспорт
	
КонецПроцедуры

Функция ПользовательДоступен(УчетнаяЗапись, ДополнительныеДанные) Экспорт
	
	Возврат Новый Структура("Доступен, Описание", Ложь, "");
	
КонецФункции

Функция ПараметрыМессенджера() Экспорт
	
    ПараметрыМессенджера = CRM_РаботаСМессенджерамиСервер.СтруктураПараметровМессенджера();
	
	Возврат ПараметрыМессенджера;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеМетоды

Функция ПолучитьСписокСтраницПользователя(Токен, ПараметрыПрокси) Экспорт
	Ресурс = "/v10.0/me/accounts?access_token=" + Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.message);
	Иначе
		Результат = Новый Структура();
		Для Каждого Страница Из СтруктураОтвета.data Цикл
			Результат.Вставить("_" + Страница.id, Новый Структура("Имя, Токен", Страница.name, Страница.access_token));
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

Функция ПолучитьТокенСтраницыПользователя(СтраницаID, Токен, КороткийТокен, ПараметрыПрокси) Экспорт
	Возврат КороткийТокен;
	Ресурс = "/v10.0/" + СтраницаID + "/?fields=access_token&account_linking_token=" + КороткийТокен 
		+ "&access_token=" 
		+ Токен;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураОтвета.error.message);
	Иначе
		Возврат СтруктураОтвета.access_token;
	КонецЕсли;
КонецФункции

Функция ДанныеГруппы(Токен, СтраницаID = "", ПараметрыПрокси) Экспорт
	Ресурс = "/v10.0/me/?access_token=" + Токен;
	Если СтраницаID <> "" Тогда
		Ресурс = СтрЗаменить(Ресурс, "me", СтраницаID);
	КонецЕсли;
	СтруктураОтвета = CRM_РаботаСМессенджерамиСервер.ПолучитьЗначениеИзОтветаJSON(CRM_РаботаСМессенджерамиСервер.ВыполнитьЗапрос("graph.facebook.com",
		 "", Ресурс,
		 ПараметрыПрокси));
	Если СтруктураОтвета.Свойство("error") Тогда
		ВызватьИсключение СтруктураОтвета.error.message;
	Иначе
		Возврат СтруктураОтвета.name;
	КонецЕсли;
КонецФункции

#КонецОбласти

Функция ДатаИзСтроки(ДатаСтрокой)
	
	Темп = СтрЗаменить(ДатаСтрокой, "-", "");
	Темп = СтрЗаменить(Темп, "T", "");
	Темп = СтрЗаменить(Темп, ":", "");
	Темп = Лев(Темп, 14);
	Возврат МестноеВремя(Дата(Темп));
	
КонецФункции

#КонецОбласти

#КонецЕсли
